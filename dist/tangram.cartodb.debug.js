(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.TangramCarto = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){
module.exports = { "default": _dereq_("core-js/library/fn/object/assign"), __esModule: true };
},{"core-js/library/fn/object/assign":3}],2:[function(_dereq_,module,exports){
var charenc = {
  // UTF-8 encoding
  utf8: {
    // Convert a string to a byte array
    stringToBytes: function(str) {
      return charenc.bin.stringToBytes(unescape(encodeURIComponent(str)));
    },

    // Convert a byte array to a string
    bytesToString: function(bytes) {
      return decodeURIComponent(escape(charenc.bin.bytesToString(bytes)));
    }
  },

  // Binary encoding
  bin: {
    // Convert a string to a byte array
    stringToBytes: function(str) {
      for (var bytes = [], i = 0; i < str.length; i++)
        bytes.push(str.charCodeAt(i) & 0xFF);
      return bytes;
    },

    // Convert a byte array to a string
    bytesToString: function(bytes) {
      for (var str = [], i = 0; i < bytes.length; i++)
        str.push(String.fromCharCode(bytes[i]));
      return str.join('');
    }
  }
};

module.exports = charenc;

},{}],3:[function(_dereq_,module,exports){
_dereq_('../../modules/es6.object.assign');
module.exports = _dereq_('../../modules/_core').Object.assign;
},{"../../modules/_core":8,"../../modules/es6.object.assign":38}],4:[function(_dereq_,module,exports){
module.exports = function(it){
  if(typeof it != 'function')throw TypeError(it + ' is not a function!');
  return it;
};
},{}],5:[function(_dereq_,module,exports){
var isObject = _dereq_('./_is-object');
module.exports = function(it){
  if(!isObject(it))throw TypeError(it + ' is not an object!');
  return it;
};
},{"./_is-object":21}],6:[function(_dereq_,module,exports){
// false -> Array#indexOf
// true  -> Array#includes
var toIObject = _dereq_('./_to-iobject')
  , toLength  = _dereq_('./_to-length')
  , toIndex   = _dereq_('./_to-index');
module.exports = function(IS_INCLUDES){
  return function($this, el, fromIndex){
    var O      = toIObject($this)
      , length = toLength(O.length)
      , index  = toIndex(fromIndex, length)
      , value;
    // Array#includes uses SameValueZero equality algorithm
    if(IS_INCLUDES && el != el)while(length > index){
      value = O[index++];
      if(value != value)return true;
    // Array#toIndex ignores holes, Array#includes - not
    } else for(;length > index; index++)if(IS_INCLUDES || index in O){
      if(O[index] === el)return IS_INCLUDES || index || 0;
    } return !IS_INCLUDES && -1;
  };
};
},{"./_to-index":31,"./_to-iobject":33,"./_to-length":34}],7:[function(_dereq_,module,exports){
var toString = {}.toString;

module.exports = function(it){
  return toString.call(it).slice(8, -1);
};
},{}],8:[function(_dereq_,module,exports){
var core = module.exports = {version: '2.4.0'};
if(typeof __e == 'number')__e = core; // eslint-disable-line no-undef
},{}],9:[function(_dereq_,module,exports){
// optional / simple context binding
var aFunction = _dereq_('./_a-function');
module.exports = function(fn, that, length){
  aFunction(fn);
  if(that === undefined)return fn;
  switch(length){
    case 1: return function(a){
      return fn.call(that, a);
    };
    case 2: return function(a, b){
      return fn.call(that, a, b);
    };
    case 3: return function(a, b, c){
      return fn.call(that, a, b, c);
    };
  }
  return function(/* ...args */){
    return fn.apply(that, arguments);
  };
};
},{"./_a-function":4}],10:[function(_dereq_,module,exports){
// 7.2.1 RequireObjectCoercible(argument)
module.exports = function(it){
  if(it == undefined)throw TypeError("Can't call method on  " + it);
  return it;
};
},{}],11:[function(_dereq_,module,exports){
// Thank's IE8 for his funny defineProperty
module.exports = !_dereq_('./_fails')(function(){
  return Object.defineProperty({}, 'a', {get: function(){ return 7; }}).a != 7;
});
},{"./_fails":15}],12:[function(_dereq_,module,exports){
var isObject = _dereq_('./_is-object')
  , document = _dereq_('./_global').document
  // in old IE typeof document.createElement is 'object'
  , is = isObject(document) && isObject(document.createElement);
module.exports = function(it){
  return is ? document.createElement(it) : {};
};
},{"./_global":16,"./_is-object":21}],13:[function(_dereq_,module,exports){
// IE 8- don't enum bug keys
module.exports = (
  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
).split(',');
},{}],14:[function(_dereq_,module,exports){
var global    = _dereq_('./_global')
  , core      = _dereq_('./_core')
  , ctx       = _dereq_('./_ctx')
  , hide      = _dereq_('./_hide')
  , PROTOTYPE = 'prototype';

var $export = function(type, name, source){
  var IS_FORCED = type & $export.F
    , IS_GLOBAL = type & $export.G
    , IS_STATIC = type & $export.S
    , IS_PROTO  = type & $export.P
    , IS_BIND   = type & $export.B
    , IS_WRAP   = type & $export.W
    , exports   = IS_GLOBAL ? core : core[name] || (core[name] = {})
    , expProto  = exports[PROTOTYPE]
    , target    = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE]
    , key, own, out;
  if(IS_GLOBAL)source = name;
  for(key in source){
    // contains in native
    own = !IS_FORCED && target && target[key] !== undefined;
    if(own && key in exports)continue;
    // export native or passed
    out = own ? target[key] : source[key];
    // prevent global pollution for namespaces
    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]
    // bind timers to global for call from export context
    : IS_BIND && own ? ctx(out, global)
    // wrap global constructors for prevent change them in library
    : IS_WRAP && target[key] == out ? (function(C){
      var F = function(a, b, c){
        if(this instanceof C){
          switch(arguments.length){
            case 0: return new C;
            case 1: return new C(a);
            case 2: return new C(a, b);
          } return new C(a, b, c);
        } return C.apply(this, arguments);
      };
      F[PROTOTYPE] = C[PROTOTYPE];
      return F;
    // make static versions for prototype methods
    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%
    if(IS_PROTO){
      (exports.virtual || (exports.virtual = {}))[key] = out;
      // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%
      if(type & $export.R && expProto && !expProto[key])hide(expProto, key, out);
    }
  }
};
// type bitmap
$export.F = 1;   // forced
$export.G = 2;   // global
$export.S = 4;   // static
$export.P = 8;   // proto
$export.B = 16;  // bind
$export.W = 32;  // wrap
$export.U = 64;  // safe
$export.R = 128; // real proto method for `library` 
module.exports = $export;
},{"./_core":8,"./_ctx":9,"./_global":16,"./_hide":18}],15:[function(_dereq_,module,exports){
module.exports = function(exec){
  try {
    return !!exec();
  } catch(e){
    return true;
  }
};
},{}],16:[function(_dereq_,module,exports){
// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
var global = module.exports = typeof window != 'undefined' && window.Math == Math
  ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();
if(typeof __g == 'number')__g = global; // eslint-disable-line no-undef
},{}],17:[function(_dereq_,module,exports){
var hasOwnProperty = {}.hasOwnProperty;
module.exports = function(it, key){
  return hasOwnProperty.call(it, key);
};
},{}],18:[function(_dereq_,module,exports){
var dP         = _dereq_('./_object-dp')
  , createDesc = _dereq_('./_property-desc');
module.exports = _dereq_('./_descriptors') ? function(object, key, value){
  return dP.f(object, key, createDesc(1, value));
} : function(object, key, value){
  object[key] = value;
  return object;
};
},{"./_descriptors":11,"./_object-dp":23,"./_property-desc":28}],19:[function(_dereq_,module,exports){
module.exports = !_dereq_('./_descriptors') && !_dereq_('./_fails')(function(){
  return Object.defineProperty(_dereq_('./_dom-create')('div'), 'a', {get: function(){ return 7; }}).a != 7;
});
},{"./_descriptors":11,"./_dom-create":12,"./_fails":15}],20:[function(_dereq_,module,exports){
// fallback for non-array-like ES3 and non-enumerable old V8 strings
var cof = _dereq_('./_cof');
module.exports = Object('z').propertyIsEnumerable(0) ? Object : function(it){
  return cof(it) == 'String' ? it.split('') : Object(it);
};
},{"./_cof":7}],21:[function(_dereq_,module,exports){
module.exports = function(it){
  return typeof it === 'object' ? it !== null : typeof it === 'function';
};
},{}],22:[function(_dereq_,module,exports){
'use strict';
// 19.1.2.1 Object.assign(target, source, ...)
var getKeys  = _dereq_('./_object-keys')
  , gOPS     = _dereq_('./_object-gops')
  , pIE      = _dereq_('./_object-pie')
  , toObject = _dereq_('./_to-object')
  , IObject  = _dereq_('./_iobject')
  , $assign  = Object.assign;

// should work with symbols and should have deterministic property order (V8 bug)
module.exports = !$assign || _dereq_('./_fails')(function(){
  var A = {}
    , B = {}
    , S = Symbol()
    , K = 'abcdefghijklmnopqrst';
  A[S] = 7;
  K.split('').forEach(function(k){ B[k] = k; });
  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
}) ? function assign(target, source){ // eslint-disable-line no-unused-vars
  var T     = toObject(target)
    , aLen  = arguments.length
    , index = 1
    , getSymbols = gOPS.f
    , isEnum     = pIE.f;
  while(aLen > index){
    var S      = IObject(arguments[index++])
      , keys   = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S)
      , length = keys.length
      , j      = 0
      , key;
    while(length > j)if(isEnum.call(S, key = keys[j++]))T[key] = S[key];
  } return T;
} : $assign;
},{"./_fails":15,"./_iobject":20,"./_object-gops":24,"./_object-keys":26,"./_object-pie":27,"./_to-object":35}],23:[function(_dereq_,module,exports){
var anObject       = _dereq_('./_an-object')
  , IE8_DOM_DEFINE = _dereq_('./_ie8-dom-define')
  , toPrimitive    = _dereq_('./_to-primitive')
  , dP             = Object.defineProperty;

exports.f = _dereq_('./_descriptors') ? Object.defineProperty : function defineProperty(O, P, Attributes){
  anObject(O);
  P = toPrimitive(P, true);
  anObject(Attributes);
  if(IE8_DOM_DEFINE)try {
    return dP(O, P, Attributes);
  } catch(e){ /* empty */ }
  if('get' in Attributes || 'set' in Attributes)throw TypeError('Accessors not supported!');
  if('value' in Attributes)O[P] = Attributes.value;
  return O;
};
},{"./_an-object":5,"./_descriptors":11,"./_ie8-dom-define":19,"./_to-primitive":36}],24:[function(_dereq_,module,exports){
exports.f = Object.getOwnPropertySymbols;
},{}],25:[function(_dereq_,module,exports){
var has          = _dereq_('./_has')
  , toIObject    = _dereq_('./_to-iobject')
  , arrayIndexOf = _dereq_('./_array-includes')(false)
  , IE_PROTO     = _dereq_('./_shared-key')('IE_PROTO');

module.exports = function(object, names){
  var O      = toIObject(object)
    , i      = 0
    , result = []
    , key;
  for(key in O)if(key != IE_PROTO)has(O, key) && result.push(key);
  // Don't enum bug & hidden keys
  while(names.length > i)if(has(O, key = names[i++])){
    ~arrayIndexOf(result, key) || result.push(key);
  }
  return result;
};
},{"./_array-includes":6,"./_has":17,"./_shared-key":29,"./_to-iobject":33}],26:[function(_dereq_,module,exports){
// 19.1.2.14 / 15.2.3.14 Object.keys(O)
var $keys       = _dereq_('./_object-keys-internal')
  , enumBugKeys = _dereq_('./_enum-bug-keys');

module.exports = Object.keys || function keys(O){
  return $keys(O, enumBugKeys);
};
},{"./_enum-bug-keys":13,"./_object-keys-internal":25}],27:[function(_dereq_,module,exports){
exports.f = {}.propertyIsEnumerable;
},{}],28:[function(_dereq_,module,exports){
module.exports = function(bitmap, value){
  return {
    enumerable  : !(bitmap & 1),
    configurable: !(bitmap & 2),
    writable    : !(bitmap & 4),
    value       : value
  };
};
},{}],29:[function(_dereq_,module,exports){
var shared = _dereq_('./_shared')('keys')
  , uid    = _dereq_('./_uid');
module.exports = function(key){
  return shared[key] || (shared[key] = uid(key));
};
},{"./_shared":30,"./_uid":37}],30:[function(_dereq_,module,exports){
var global = _dereq_('./_global')
  , SHARED = '__core-js_shared__'
  , store  = global[SHARED] || (global[SHARED] = {});
module.exports = function(key){
  return store[key] || (store[key] = {});
};
},{"./_global":16}],31:[function(_dereq_,module,exports){
var toInteger = _dereq_('./_to-integer')
  , max       = Math.max
  , min       = Math.min;
module.exports = function(index, length){
  index = toInteger(index);
  return index < 0 ? max(index + length, 0) : min(index, length);
};
},{"./_to-integer":32}],32:[function(_dereq_,module,exports){
// 7.1.4 ToInteger
var ceil  = Math.ceil
  , floor = Math.floor;
module.exports = function(it){
  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
};
},{}],33:[function(_dereq_,module,exports){
// to indexed object, toObject with fallback for non-array-like ES3 strings
var IObject = _dereq_('./_iobject')
  , defined = _dereq_('./_defined');
module.exports = function(it){
  return IObject(defined(it));
};
},{"./_defined":10,"./_iobject":20}],34:[function(_dereq_,module,exports){
// 7.1.15 ToLength
var toInteger = _dereq_('./_to-integer')
  , min       = Math.min;
module.exports = function(it){
  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
};
},{"./_to-integer":32}],35:[function(_dereq_,module,exports){
// 7.1.13 ToObject(argument)
var defined = _dereq_('./_defined');
module.exports = function(it){
  return Object(defined(it));
};
},{"./_defined":10}],36:[function(_dereq_,module,exports){
// 7.1.1 ToPrimitive(input [, PreferredType])
var isObject = _dereq_('./_is-object');
// instead of the ES6 spec version, we didn't implement @@toPrimitive case
// and the second argument - flag - preferred type is a string
module.exports = function(it, S){
  if(!isObject(it))return it;
  var fn, val;
  if(S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;
  if(typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it)))return val;
  if(!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;
  throw TypeError("Can't convert object to primitive value");
};
},{"./_is-object":21}],37:[function(_dereq_,module,exports){
var id = 0
  , px = Math.random();
module.exports = function(key){
  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
};
},{}],38:[function(_dereq_,module,exports){
// 19.1.3.1 Object.assign(target, source)
var $export = _dereq_('./_export');

$export($export.S + $export.F, 'Object', {assign: _dereq_('./_object-assign')});
},{"./_export":14,"./_object-assign":22}],39:[function(_dereq_,module,exports){
(function() {
  var base64map
      = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',

  crypt = {
    // Bit-wise rotation left
    rotl: function(n, b) {
      return (n << b) | (n >>> (32 - b));
    },

    // Bit-wise rotation right
    rotr: function(n, b) {
      return (n << (32 - b)) | (n >>> b);
    },

    // Swap big-endian to little-endian and vice versa
    endian: function(n) {
      // If number given, swap endian
      if (n.constructor == Number) {
        return crypt.rotl(n, 8) & 0x00FF00FF | crypt.rotl(n, 24) & 0xFF00FF00;
      }

      // Else, assume array and swap all items
      for (var i = 0; i < n.length; i++)
        n[i] = crypt.endian(n[i]);
      return n;
    },

    // Generate an array of any length of random bytes
    randomBytes: function(n) {
      for (var bytes = []; n > 0; n--)
        bytes.push(Math.floor(Math.random() * 256));
      return bytes;
    },

    // Convert a byte array to big-endian 32-bit words
    bytesToWords: function(bytes) {
      for (var words = [], i = 0, b = 0; i < bytes.length; i++, b += 8)
        words[b >>> 5] |= bytes[i] << (24 - b % 32);
      return words;
    },

    // Convert big-endian 32-bit words to a byte array
    wordsToBytes: function(words) {
      for (var bytes = [], b = 0; b < words.length * 32; b += 8)
        bytes.push((words[b >>> 5] >>> (24 - b % 32)) & 0xFF);
      return bytes;
    },

    // Convert a byte array to a hex string
    bytesToHex: function(bytes) {
      for (var hex = [], i = 0; i < bytes.length; i++) {
        hex.push((bytes[i] >>> 4).toString(16));
        hex.push((bytes[i] & 0xF).toString(16));
      }
      return hex.join('');
    },

    // Convert a hex string to a byte array
    hexToBytes: function(hex) {
      for (var bytes = [], c = 0; c < hex.length; c += 2)
        bytes.push(parseInt(hex.substr(c, 2), 16));
      return bytes;
    },

    // Convert a byte array to a base-64 string
    bytesToBase64: function(bytes) {
      for (var base64 = [], i = 0; i < bytes.length; i += 3) {
        var triplet = (bytes[i] << 16) | (bytes[i + 1] << 8) | bytes[i + 2];
        for (var j = 0; j < 4; j++)
          if (i * 8 + j * 6 <= bytes.length * 8)
            base64.push(base64map.charAt((triplet >>> 6 * (3 - j)) & 0x3F));
          else
            base64.push('=');
      }
      return base64.join('');
    },

    // Convert a base-64 string to a byte array
    base64ToBytes: function(base64) {
      // Remove non-base-64 characters
      base64 = base64.replace(/[^A-Z0-9+\/]/ig, '');

      for (var bytes = [], i = 0, imod4 = 0; i < base64.length;
          imod4 = ++i % 4) {
        if (imod4 == 0) continue;
        bytes.push(((base64map.indexOf(base64.charAt(i - 1))
            & (Math.pow(2, -2 * imod4 + 8) - 1)) << (imod4 * 2))
            | (base64map.indexOf(base64.charAt(i)) >>> (6 - imod4 * 2)));
      }
      return bytes;
    }
  };

  module.exports = crypt;
})();

},{}],40:[function(_dereq_,module,exports){
/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */

// The _isBuffer check is for Safari 5-7 support, because it's missing
// Object.prototype.constructor. Remove this eventually
module.exports = function (obj) {
  return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)
}

function isBuffer (obj) {
  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
}

// For Node v0.10 support. Remove this eventually.
function isSlowBuffer (obj) {
  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0))
}

},{}],41:[function(_dereq_,module,exports){
(function(){
  var crypt = _dereq_('crypt'),
      utf8 = _dereq_('charenc').utf8,
      isBuffer = _dereq_('is-buffer'),
      bin = _dereq_('charenc').bin,

  // The core
  md5 = function (message, options) {
    // Convert to byte array
    if (message.constructor == String)
      if (options && options.encoding === 'binary')
        message = bin.stringToBytes(message);
      else
        message = utf8.stringToBytes(message);
    else if (isBuffer(message))
      message = Array.prototype.slice.call(message, 0);
    else if (!Array.isArray(message))
      message = message.toString();
    // else, assume byte array already

    var m = crypt.bytesToWords(message),
        l = message.length * 8,
        a =  1732584193,
        b = -271733879,
        c = -1732584194,
        d =  271733878;

    // Swap endian
    for (var i = 0; i < m.length; i++) {
      m[i] = ((m[i] <<  8) | (m[i] >>> 24)) & 0x00FF00FF |
             ((m[i] << 24) | (m[i] >>>  8)) & 0xFF00FF00;
    }

    // Padding
    m[l >>> 5] |= 0x80 << (l % 32);
    m[(((l + 64) >>> 9) << 4) + 14] = l;

    // Method shortcuts
    var FF = md5._ff,
        GG = md5._gg,
        HH = md5._hh,
        II = md5._ii;

    for (var i = 0; i < m.length; i += 16) {

      var aa = a,
          bb = b,
          cc = c,
          dd = d;

      a = FF(a, b, c, d, m[i+ 0],  7, -680876936);
      d = FF(d, a, b, c, m[i+ 1], 12, -389564586);
      c = FF(c, d, a, b, m[i+ 2], 17,  606105819);
      b = FF(b, c, d, a, m[i+ 3], 22, -1044525330);
      a = FF(a, b, c, d, m[i+ 4],  7, -176418897);
      d = FF(d, a, b, c, m[i+ 5], 12,  1200080426);
      c = FF(c, d, a, b, m[i+ 6], 17, -1473231341);
      b = FF(b, c, d, a, m[i+ 7], 22, -45705983);
      a = FF(a, b, c, d, m[i+ 8],  7,  1770035416);
      d = FF(d, a, b, c, m[i+ 9], 12, -1958414417);
      c = FF(c, d, a, b, m[i+10], 17, -42063);
      b = FF(b, c, d, a, m[i+11], 22, -1990404162);
      a = FF(a, b, c, d, m[i+12],  7,  1804603682);
      d = FF(d, a, b, c, m[i+13], 12, -40341101);
      c = FF(c, d, a, b, m[i+14], 17, -1502002290);
      b = FF(b, c, d, a, m[i+15], 22,  1236535329);

      a = GG(a, b, c, d, m[i+ 1],  5, -165796510);
      d = GG(d, a, b, c, m[i+ 6],  9, -1069501632);
      c = GG(c, d, a, b, m[i+11], 14,  643717713);
      b = GG(b, c, d, a, m[i+ 0], 20, -373897302);
      a = GG(a, b, c, d, m[i+ 5],  5, -701558691);
      d = GG(d, a, b, c, m[i+10],  9,  38016083);
      c = GG(c, d, a, b, m[i+15], 14, -660478335);
      b = GG(b, c, d, a, m[i+ 4], 20, -405537848);
      a = GG(a, b, c, d, m[i+ 9],  5,  568446438);
      d = GG(d, a, b, c, m[i+14],  9, -1019803690);
      c = GG(c, d, a, b, m[i+ 3], 14, -187363961);
      b = GG(b, c, d, a, m[i+ 8], 20,  1163531501);
      a = GG(a, b, c, d, m[i+13],  5, -1444681467);
      d = GG(d, a, b, c, m[i+ 2],  9, -51403784);
      c = GG(c, d, a, b, m[i+ 7], 14,  1735328473);
      b = GG(b, c, d, a, m[i+12], 20, -1926607734);

      a = HH(a, b, c, d, m[i+ 5],  4, -378558);
      d = HH(d, a, b, c, m[i+ 8], 11, -2022574463);
      c = HH(c, d, a, b, m[i+11], 16,  1839030562);
      b = HH(b, c, d, a, m[i+14], 23, -35309556);
      a = HH(a, b, c, d, m[i+ 1],  4, -1530992060);
      d = HH(d, a, b, c, m[i+ 4], 11,  1272893353);
      c = HH(c, d, a, b, m[i+ 7], 16, -155497632);
      b = HH(b, c, d, a, m[i+10], 23, -1094730640);
      a = HH(a, b, c, d, m[i+13],  4,  681279174);
      d = HH(d, a, b, c, m[i+ 0], 11, -358537222);
      c = HH(c, d, a, b, m[i+ 3], 16, -722521979);
      b = HH(b, c, d, a, m[i+ 6], 23,  76029189);
      a = HH(a, b, c, d, m[i+ 9],  4, -640364487);
      d = HH(d, a, b, c, m[i+12], 11, -421815835);
      c = HH(c, d, a, b, m[i+15], 16,  530742520);
      b = HH(b, c, d, a, m[i+ 2], 23, -995338651);

      a = II(a, b, c, d, m[i+ 0],  6, -198630844);
      d = II(d, a, b, c, m[i+ 7], 10,  1126891415);
      c = II(c, d, a, b, m[i+14], 15, -1416354905);
      b = II(b, c, d, a, m[i+ 5], 21, -57434055);
      a = II(a, b, c, d, m[i+12],  6,  1700485571);
      d = II(d, a, b, c, m[i+ 3], 10, -1894986606);
      c = II(c, d, a, b, m[i+10], 15, -1051523);
      b = II(b, c, d, a, m[i+ 1], 21, -2054922799);
      a = II(a, b, c, d, m[i+ 8],  6,  1873313359);
      d = II(d, a, b, c, m[i+15], 10, -30611744);
      c = II(c, d, a, b, m[i+ 6], 15, -1560198380);
      b = II(b, c, d, a, m[i+13], 21,  1309151649);
      a = II(a, b, c, d, m[i+ 4],  6, -145523070);
      d = II(d, a, b, c, m[i+11], 10, -1120210379);
      c = II(c, d, a, b, m[i+ 2], 15,  718787259);
      b = II(b, c, d, a, m[i+ 9], 21, -343485551);

      a = (a + aa) >>> 0;
      b = (b + bb) >>> 0;
      c = (c + cc) >>> 0;
      d = (d + dd) >>> 0;
    }

    return crypt.endian([a, b, c, d]);
  };

  // Auxiliary functions
  md5._ff  = function (a, b, c, d, x, s, t) {
    var n = a + (b & c | ~b & d) + (x >>> 0) + t;
    return ((n << s) | (n >>> (32 - s))) + b;
  };
  md5._gg  = function (a, b, c, d, x, s, t) {
    var n = a + (b & d | c & ~d) + (x >>> 0) + t;
    return ((n << s) | (n >>> (32 - s))) + b;
  };
  md5._hh  = function (a, b, c, d, x, s, t) {
    var n = a + (b ^ c ^ d) + (x >>> 0) + t;
    return ((n << s) | (n >>> (32 - s))) + b;
  };
  md5._ii  = function (a, b, c, d, x, s, t) {
    var n = a + (c ^ (b | ~d)) + (x >>> 0) + t;
    return ((n << s) | (n >>> (32 - s))) + b;
  };

  // Package private blocksize
  md5._blocksize = 16;
  md5._digestsize = 16;

  module.exports = function (message, options) {
    if (message === undefined || message === null)
      throw new Error('Illegal argument ' + message);

    var digestbytes = crypt.wordsToBytes(md5(message, options));
    return options && options.asBytes ? digestbytes :
        options && options.asString ? bin.bytesToString(digestbytes) :
        crypt.bytesToHex(digestbytes);
  };

})();

},{"charenc":2,"crypt":39,"is-buffer":40}],42:[function(_dereq_,module,exports){
(function(e, a) { for(var i in a) e[i] = a[i]; }(this, /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 76);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/* no static exports found */
/* all exports used */
/*!***********************************!*\
  !*** ./~/carto/lib/carto/tree.js ***!
  \***********************************/
/***/ (function(module, exports, __webpack_require__) {

eval("/**\n * TODO: document this. What does this do?\n */\nif(true) {\n  module.exports.find = function (obj, fun) {\n      for (var i = 0, r; i < obj.length; i++) {\n          if (r = fun.call(obj, obj[i])) { return r; }\n      }\n      return null;\n  };\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL34vY2FydG8vbGliL2NhcnRvL3RyZWUuanM/OTFiNSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFRPRE86IGRvY3VtZW50IHRoaXMuIFdoYXQgZG9lcyB0aGlzIGRvP1xuICovXG5pZih0eXBlb2YobW9kdWxlKSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICBtb2R1bGUuZXhwb3J0cy5maW5kID0gZnVuY3Rpb24gKG9iaiwgZnVuKSB7XG4gICAgICBmb3IgKHZhciBpID0gMCwgcjsgaSA8IG9iai5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGlmIChyID0gZnVuLmNhbGwob2JqLCBvYmpbaV0pKSB7IHJldHVybiByOyB9XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVsbDtcbiAgfTtcbn1cblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jYXJ0by9saWIvY2FydG8vdHJlZS5qc1xuLy8gbW9kdWxlIGlkID0gMFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 1 */
/* no static exports found */
/* all exports used */
/*!*****************************************!*\
  !*** ./~/ramda/src/internal/_curry2.js ***!
  \*****************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var _curry1 = __webpack_require__(/*! ./_curry1 */ 2);\nvar _isPlaceholder = __webpack_require__(/*! ./_isPlaceholder */ 25);\n\n\n/**\n * Optimized internal two-arity curry function.\n *\n * @private\n * @category Function\n * @param {Function} fn The function to curry.\n * @return {Function} The curried function.\n */\nmodule.exports = function _curry2(fn) {\n  return function f2(a, b) {\n    switch (arguments.length) {\n      case 0:\n        return f2;\n      case 1:\n        return _isPlaceholder(a) ? f2\n             : _curry1(function(_b) { return fn(a, _b); });\n      default:\n        return _isPlaceholder(a) && _isPlaceholder(b) ? f2\n             : _isPlaceholder(a) ? _curry1(function(_a) { return fn(_a, b); })\n             : _isPlaceholder(b) ? _curry1(function(_b) { return fn(a, _b); })\n             : fn(a, b);\n    }\n  };\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL34vcmFtZGEvc3JjL2ludGVybmFsL19jdXJyeTIuanM/YzNhZCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX2N1cnJ5MSA9IHJlcXVpcmUoJy4vX2N1cnJ5MScpO1xudmFyIF9pc1BsYWNlaG9sZGVyID0gcmVxdWlyZSgnLi9faXNQbGFjZWhvbGRlcicpO1xuXG5cbi8qKlxuICogT3B0aW1pemVkIGludGVybmFsIHR3by1hcml0eSBjdXJyeSBmdW5jdGlvbi5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgZnVuY3Rpb24gdG8gY3VycnkuXG4gKiBAcmV0dXJuIHtGdW5jdGlvbn0gVGhlIGN1cnJpZWQgZnVuY3Rpb24uXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gX2N1cnJ5Mihmbikge1xuICByZXR1cm4gZnVuY3Rpb24gZjIoYSwgYikge1xuICAgIHN3aXRjaCAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgY2FzZSAwOlxuICAgICAgICByZXR1cm4gZjI7XG4gICAgICBjYXNlIDE6XG4gICAgICAgIHJldHVybiBfaXNQbGFjZWhvbGRlcihhKSA/IGYyXG4gICAgICAgICAgICAgOiBfY3VycnkxKGZ1bmN0aW9uKF9iKSB7IHJldHVybiBmbihhLCBfYik7IH0pO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIF9pc1BsYWNlaG9sZGVyKGEpICYmIF9pc1BsYWNlaG9sZGVyKGIpID8gZjJcbiAgICAgICAgICAgICA6IF9pc1BsYWNlaG9sZGVyKGEpID8gX2N1cnJ5MShmdW5jdGlvbihfYSkgeyByZXR1cm4gZm4oX2EsIGIpOyB9KVxuICAgICAgICAgICAgIDogX2lzUGxhY2Vob2xkZXIoYikgPyBfY3VycnkxKGZ1bmN0aW9uKF9iKSB7IHJldHVybiBmbihhLCBfYik7IH0pXG4gICAgICAgICAgICAgOiBmbihhLCBiKTtcbiAgICB9XG4gIH07XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3JhbWRhL3NyYy9pbnRlcm5hbC9fY3VycnkyLmpzXG4vLyBtb2R1bGUgaWQgPSAxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 2 */
/* no static exports found */
/* all exports used */
/*!*****************************************!*\
  !*** ./~/ramda/src/internal/_curry1.js ***!
  \*****************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var _isPlaceholder = __webpack_require__(/*! ./_isPlaceholder */ 25);\n\n\n/**\n * Optimized internal one-arity curry function.\n *\n * @private\n * @category Function\n * @param {Function} fn The function to curry.\n * @return {Function} The curried function.\n */\nmodule.exports = function _curry1(fn) {\n  return function f1(a) {\n    if (arguments.length === 0 || _isPlaceholder(a)) {\n      return f1;\n    } else {\n      return fn.apply(this, arguments);\n    }\n  };\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL34vcmFtZGEvc3JjL2ludGVybmFsL19jdXJyeTEuanM/MjA0NCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX2lzUGxhY2Vob2xkZXIgPSByZXF1aXJlKCcuL19pc1BsYWNlaG9sZGVyJyk7XG5cblxuLyoqXG4gKiBPcHRpbWl6ZWQgaW50ZXJuYWwgb25lLWFyaXR5IGN1cnJ5IGZ1bmN0aW9uLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBmdW5jdGlvbiB0byBjdXJyeS5cbiAqIEByZXR1cm4ge0Z1bmN0aW9ufSBUaGUgY3VycmllZCBmdW5jdGlvbi5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBfY3VycnkxKGZuKSB7XG4gIHJldHVybiBmdW5jdGlvbiBmMShhKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDAgfHwgX2lzUGxhY2Vob2xkZXIoYSkpIHtcbiAgICAgIHJldHVybiBmMTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfVxuICB9O1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9yYW1kYS9zcmMvaW50ZXJuYWwvX2N1cnJ5MS5qc1xuLy8gbW9kdWxlIGlkID0gMlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 3 */
/* no static exports found */
/* all exports used */
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/***/ (function(module, exports) {

eval("var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanM/MzY5OCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZztcclxuXHJcbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXHJcbmcgPSAoZnVuY3Rpb24oKSB7XHJcblx0cmV0dXJuIHRoaXM7XHJcbn0pKCk7XHJcblxyXG50cnkge1xyXG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxyXG5cdGcgPSBnIHx8IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKSB8fCAoMSxldmFsKShcInRoaXNcIik7XHJcbn0gY2F0Y2goZSkge1xyXG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXHJcblx0aWYodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIilcclxuXHRcdGcgPSB3aW5kb3c7XHJcbn1cclxuXHJcbi8vIGcgY2FuIHN0aWxsIGJlIHVuZGVmaW5lZCwgYnV0IG5vdGhpbmcgdG8gZG8gYWJvdXQgaXQuLi5cclxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3NcclxuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBnO1xyXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAod2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanNcbi8vIG1vZHVsZSBpZCA9IDNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 4 */
/* no static exports found */
/* all exports used */
/*!************************************!*\
  !*** ./~/underscore/underscore.js ***!
  \************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;//     Underscore.js 1.8.3\n//     http://underscorejs.org\n//     (c) 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n//     Underscore may be freely distributed under the MIT license.\n\n(function() {\n\n  // Baseline setup\n  // --------------\n\n  // Establish the root object, `window` in the browser, or `exports` on the server.\n  var root = this;\n\n  // Save the previous value of the `_` variable.\n  var previousUnderscore = root._;\n\n  // Save bytes in the minified (but not gzipped) version:\n  var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;\n\n  // Create quick reference variables for speed access to core prototypes.\n  var\n    push             = ArrayProto.push,\n    slice            = ArrayProto.slice,\n    toString         = ObjProto.toString,\n    hasOwnProperty   = ObjProto.hasOwnProperty;\n\n  // All **ECMAScript 5** native function implementations that we hope to use\n  // are declared here.\n  var\n    nativeIsArray      = Array.isArray,\n    nativeKeys         = Object.keys,\n    nativeBind         = FuncProto.bind,\n    nativeCreate       = Object.create;\n\n  // Naked function reference for surrogate-prototype-swapping.\n  var Ctor = function(){};\n\n  // Create a safe reference to the Underscore object for use below.\n  var _ = function(obj) {\n    if (obj instanceof _) return obj;\n    if (!(this instanceof _)) return new _(obj);\n    this._wrapped = obj;\n  };\n\n  // Export the Underscore object for **Node.js**, with\n  // backwards-compatibility for the old `require()` API. If we're in\n  // the browser, add `_` as a global object.\n  if (true) {\n    if (typeof module !== 'undefined' && module.exports) {\n      exports = module.exports = _;\n    }\n    exports._ = _;\n  } else {\n    root._ = _;\n  }\n\n  // Current version.\n  _.VERSION = '1.8.3';\n\n  // Internal function that returns an efficient (for current engines) version\n  // of the passed-in callback, to be repeatedly applied in other Underscore\n  // functions.\n  var optimizeCb = function(func, context, argCount) {\n    if (context === void 0) return func;\n    switch (argCount == null ? 3 : argCount) {\n      case 1: return function(value) {\n        return func.call(context, value);\n      };\n      case 2: return function(value, other) {\n        return func.call(context, value, other);\n      };\n      case 3: return function(value, index, collection) {\n        return func.call(context, value, index, collection);\n      };\n      case 4: return function(accumulator, value, index, collection) {\n        return func.call(context, accumulator, value, index, collection);\n      };\n    }\n    return function() {\n      return func.apply(context, arguments);\n    };\n  };\n\n  // A mostly-internal function to generate callbacks that can be applied\n  // to each element in a collection, returning the desired result — either\n  // identity, an arbitrary callback, a property matcher, or a property accessor.\n  var cb = function(value, context, argCount) {\n    if (value == null) return _.identity;\n    if (_.isFunction(value)) return optimizeCb(value, context, argCount);\n    if (_.isObject(value)) return _.matcher(value);\n    return _.property(value);\n  };\n  _.iteratee = function(value, context) {\n    return cb(value, context, Infinity);\n  };\n\n  // An internal function for creating assigner functions.\n  var createAssigner = function(keysFunc, undefinedOnly) {\n    return function(obj) {\n      var length = arguments.length;\n      if (length < 2 || obj == null) return obj;\n      for (var index = 1; index < length; index++) {\n        var source = arguments[index],\n            keys = keysFunc(source),\n            l = keys.length;\n        for (var i = 0; i < l; i++) {\n          var key = keys[i];\n          if (!undefinedOnly || obj[key] === void 0) obj[key] = source[key];\n        }\n      }\n      return obj;\n    };\n  };\n\n  // An internal function for creating a new object that inherits from another.\n  var baseCreate = function(prototype) {\n    if (!_.isObject(prototype)) return {};\n    if (nativeCreate) return nativeCreate(prototype);\n    Ctor.prototype = prototype;\n    var result = new Ctor;\n    Ctor.prototype = null;\n    return result;\n  };\n\n  var property = function(key) {\n    return function(obj) {\n      return obj == null ? void 0 : obj[key];\n    };\n  };\n\n  // Helper for collection methods to determine whether a collection\n  // should be iterated as an array or as an object\n  // Related: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength\n  // Avoids a very nasty iOS 8 JIT bug on ARM-64. #2094\n  var MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;\n  var getLength = property('length');\n  var isArrayLike = function(collection) {\n    var length = getLength(collection);\n    return typeof length == 'number' && length >= 0 && length <= MAX_ARRAY_INDEX;\n  };\n\n  // Collection Functions\n  // --------------------\n\n  // The cornerstone, an `each` implementation, aka `forEach`.\n  // Handles raw objects in addition to array-likes. Treats all\n  // sparse array-likes as if they were dense.\n  _.each = _.forEach = function(obj, iteratee, context) {\n    iteratee = optimizeCb(iteratee, context);\n    var i, length;\n    if (isArrayLike(obj)) {\n      for (i = 0, length = obj.length; i < length; i++) {\n        iteratee(obj[i], i, obj);\n      }\n    } else {\n      var keys = _.keys(obj);\n      for (i = 0, length = keys.length; i < length; i++) {\n        iteratee(obj[keys[i]], keys[i], obj);\n      }\n    }\n    return obj;\n  };\n\n  // Return the results of applying the iteratee to each element.\n  _.map = _.collect = function(obj, iteratee, context) {\n    iteratee = cb(iteratee, context);\n    var keys = !isArrayLike(obj) && _.keys(obj),\n        length = (keys || obj).length,\n        results = Array(length);\n    for (var index = 0; index < length; index++) {\n      var currentKey = keys ? keys[index] : index;\n      results[index] = iteratee(obj[currentKey], currentKey, obj);\n    }\n    return results;\n  };\n\n  // Create a reducing function iterating left or right.\n  function createReduce(dir) {\n    // Optimized iterator function as using arguments.length\n    // in the main function will deoptimize the, see #1991.\n    function iterator(obj, iteratee, memo, keys, index, length) {\n      for (; index >= 0 && index < length; index += dir) {\n        var currentKey = keys ? keys[index] : index;\n        memo = iteratee(memo, obj[currentKey], currentKey, obj);\n      }\n      return memo;\n    }\n\n    return function(obj, iteratee, memo, context) {\n      iteratee = optimizeCb(iteratee, context, 4);\n      var keys = !isArrayLike(obj) && _.keys(obj),\n          length = (keys || obj).length,\n          index = dir > 0 ? 0 : length - 1;\n      // Determine the initial value if none is provided.\n      if (arguments.length < 3) {\n        memo = obj[keys ? keys[index] : index];\n        index += dir;\n      }\n      return iterator(obj, iteratee, memo, keys, index, length);\n    };\n  }\n\n  // **Reduce** builds up a single result from a list of values, aka `inject`,\n  // or `foldl`.\n  _.reduce = _.foldl = _.inject = createReduce(1);\n\n  // The right-associative version of reduce, also known as `foldr`.\n  _.reduceRight = _.foldr = createReduce(-1);\n\n  // Return the first value which passes a truth test. Aliased as `detect`.\n  _.find = _.detect = function(obj, predicate, context) {\n    var key;\n    if (isArrayLike(obj)) {\n      key = _.findIndex(obj, predicate, context);\n    } else {\n      key = _.findKey(obj, predicate, context);\n    }\n    if (key !== void 0 && key !== -1) return obj[key];\n  };\n\n  // Return all the elements that pass a truth test.\n  // Aliased as `select`.\n  _.filter = _.select = function(obj, predicate, context) {\n    var results = [];\n    predicate = cb(predicate, context);\n    _.each(obj, function(value, index, list) {\n      if (predicate(value, index, list)) results.push(value);\n    });\n    return results;\n  };\n\n  // Return all the elements for which a truth test fails.\n  _.reject = function(obj, predicate, context) {\n    return _.filter(obj, _.negate(cb(predicate)), context);\n  };\n\n  // Determine whether all of the elements match a truth test.\n  // Aliased as `all`.\n  _.every = _.all = function(obj, predicate, context) {\n    predicate = cb(predicate, context);\n    var keys = !isArrayLike(obj) && _.keys(obj),\n        length = (keys || obj).length;\n    for (var index = 0; index < length; index++) {\n      var currentKey = keys ? keys[index] : index;\n      if (!predicate(obj[currentKey], currentKey, obj)) return false;\n    }\n    return true;\n  };\n\n  // Determine if at least one element in the object matches a truth test.\n  // Aliased as `any`.\n  _.some = _.any = function(obj, predicate, context) {\n    predicate = cb(predicate, context);\n    var keys = !isArrayLike(obj) && _.keys(obj),\n        length = (keys || obj).length;\n    for (var index = 0; index < length; index++) {\n      var currentKey = keys ? keys[index] : index;\n      if (predicate(obj[currentKey], currentKey, obj)) return true;\n    }\n    return false;\n  };\n\n  // Determine if the array or object contains a given item (using `===`).\n  // Aliased as `includes` and `include`.\n  _.contains = _.includes = _.include = function(obj, item, fromIndex, guard) {\n    if (!isArrayLike(obj)) obj = _.values(obj);\n    if (typeof fromIndex != 'number' || guard) fromIndex = 0;\n    return _.indexOf(obj, item, fromIndex) >= 0;\n  };\n\n  // Invoke a method (with arguments) on every item in a collection.\n  _.invoke = function(obj, method) {\n    var args = slice.call(arguments, 2);\n    var isFunc = _.isFunction(method);\n    return _.map(obj, function(value) {\n      var func = isFunc ? method : value[method];\n      return func == null ? func : func.apply(value, args);\n    });\n  };\n\n  // Convenience version of a common use case of `map`: fetching a property.\n  _.pluck = function(obj, key) {\n    return _.map(obj, _.property(key));\n  };\n\n  // Convenience version of a common use case of `filter`: selecting only objects\n  // containing specific `key:value` pairs.\n  _.where = function(obj, attrs) {\n    return _.filter(obj, _.matcher(attrs));\n  };\n\n  // Convenience version of a common use case of `find`: getting the first object\n  // containing specific `key:value` pairs.\n  _.findWhere = function(obj, attrs) {\n    return _.find(obj, _.matcher(attrs));\n  };\n\n  // Return the maximum element (or element-based computation).\n  _.max = function(obj, iteratee, context) {\n    var result = -Infinity, lastComputed = -Infinity,\n        value, computed;\n    if (iteratee == null && obj != null) {\n      obj = isArrayLike(obj) ? obj : _.values(obj);\n      for (var i = 0, length = obj.length; i < length; i++) {\n        value = obj[i];\n        if (value > result) {\n          result = value;\n        }\n      }\n    } else {\n      iteratee = cb(iteratee, context);\n      _.each(obj, function(value, index, list) {\n        computed = iteratee(value, index, list);\n        if (computed > lastComputed || computed === -Infinity && result === -Infinity) {\n          result = value;\n          lastComputed = computed;\n        }\n      });\n    }\n    return result;\n  };\n\n  // Return the minimum element (or element-based computation).\n  _.min = function(obj, iteratee, context) {\n    var result = Infinity, lastComputed = Infinity,\n        value, computed;\n    if (iteratee == null && obj != null) {\n      obj = isArrayLike(obj) ? obj : _.values(obj);\n      for (var i = 0, length = obj.length; i < length; i++) {\n        value = obj[i];\n        if (value < result) {\n          result = value;\n        }\n      }\n    } else {\n      iteratee = cb(iteratee, context);\n      _.each(obj, function(value, index, list) {\n        computed = iteratee(value, index, list);\n        if (computed < lastComputed || computed === Infinity && result === Infinity) {\n          result = value;\n          lastComputed = computed;\n        }\n      });\n    }\n    return result;\n  };\n\n  // Shuffle a collection, using the modern version of the\n  // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).\n  _.shuffle = function(obj) {\n    var set = isArrayLike(obj) ? obj : _.values(obj);\n    var length = set.length;\n    var shuffled = Array(length);\n    for (var index = 0, rand; index < length; index++) {\n      rand = _.random(0, index);\n      if (rand !== index) shuffled[index] = shuffled[rand];\n      shuffled[rand] = set[index];\n    }\n    return shuffled;\n  };\n\n  // Sample **n** random values from a collection.\n  // If **n** is not specified, returns a single random element.\n  // The internal `guard` argument allows it to work with `map`.\n  _.sample = function(obj, n, guard) {\n    if (n == null || guard) {\n      if (!isArrayLike(obj)) obj = _.values(obj);\n      return obj[_.random(obj.length - 1)];\n    }\n    return _.shuffle(obj).slice(0, Math.max(0, n));\n  };\n\n  // Sort the object's values by a criterion produced by an iteratee.\n  _.sortBy = function(obj, iteratee, context) {\n    iteratee = cb(iteratee, context);\n    return _.pluck(_.map(obj, function(value, index, list) {\n      return {\n        value: value,\n        index: index,\n        criteria: iteratee(value, index, list)\n      };\n    }).sort(function(left, right) {\n      var a = left.criteria;\n      var b = right.criteria;\n      if (a !== b) {\n        if (a > b || a === void 0) return 1;\n        if (a < b || b === void 0) return -1;\n      }\n      return left.index - right.index;\n    }), 'value');\n  };\n\n  // An internal function used for aggregate \"group by\" operations.\n  var group = function(behavior) {\n    return function(obj, iteratee, context) {\n      var result = {};\n      iteratee = cb(iteratee, context);\n      _.each(obj, function(value, index) {\n        var key = iteratee(value, index, obj);\n        behavior(result, value, key);\n      });\n      return result;\n    };\n  };\n\n  // Groups the object's values by a criterion. Pass either a string attribute\n  // to group by, or a function that returns the criterion.\n  _.groupBy = group(function(result, value, key) {\n    if (_.has(result, key)) result[key].push(value); else result[key] = [value];\n  });\n\n  // Indexes the object's values by a criterion, similar to `groupBy`, but for\n  // when you know that your index values will be unique.\n  _.indexBy = group(function(result, value, key) {\n    result[key] = value;\n  });\n\n  // Counts instances of an object that group by a certain criterion. Pass\n  // either a string attribute to count by, or a function that returns the\n  // criterion.\n  _.countBy = group(function(result, value, key) {\n    if (_.has(result, key)) result[key]++; else result[key] = 1;\n  });\n\n  // Safely create a real, live array from anything iterable.\n  _.toArray = function(obj) {\n    if (!obj) return [];\n    if (_.isArray(obj)) return slice.call(obj);\n    if (isArrayLike(obj)) return _.map(obj, _.identity);\n    return _.values(obj);\n  };\n\n  // Return the number of elements in an object.\n  _.size = function(obj) {\n    if (obj == null) return 0;\n    return isArrayLike(obj) ? obj.length : _.keys(obj).length;\n  };\n\n  // Split a collection into two arrays: one whose elements all satisfy the given\n  // predicate, and one whose elements all do not satisfy the predicate.\n  _.partition = function(obj, predicate, context) {\n    predicate = cb(predicate, context);\n    var pass = [], fail = [];\n    _.each(obj, function(value, key, obj) {\n      (predicate(value, key, obj) ? pass : fail).push(value);\n    });\n    return [pass, fail];\n  };\n\n  // Array Functions\n  // ---------------\n\n  // Get the first element of an array. Passing **n** will return the first N\n  // values in the array. Aliased as `head` and `take`. The **guard** check\n  // allows it to work with `_.map`.\n  _.first = _.head = _.take = function(array, n, guard) {\n    if (array == null) return void 0;\n    if (n == null || guard) return array[0];\n    return _.initial(array, array.length - n);\n  };\n\n  // Returns everything but the last entry of the array. Especially useful on\n  // the arguments object. Passing **n** will return all the values in\n  // the array, excluding the last N.\n  _.initial = function(array, n, guard) {\n    return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));\n  };\n\n  // Get the last element of an array. Passing **n** will return the last N\n  // values in the array.\n  _.last = function(array, n, guard) {\n    if (array == null) return void 0;\n    if (n == null || guard) return array[array.length - 1];\n    return _.rest(array, Math.max(0, array.length - n));\n  };\n\n  // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.\n  // Especially useful on the arguments object. Passing an **n** will return\n  // the rest N values in the array.\n  _.rest = _.tail = _.drop = function(array, n, guard) {\n    return slice.call(array, n == null || guard ? 1 : n);\n  };\n\n  // Trim out all falsy values from an array.\n  _.compact = function(array) {\n    return _.filter(array, _.identity);\n  };\n\n  // Internal implementation of a recursive `flatten` function.\n  var flatten = function(input, shallow, strict, startIndex) {\n    var output = [], idx = 0;\n    for (var i = startIndex || 0, length = getLength(input); i < length; i++) {\n      var value = input[i];\n      if (isArrayLike(value) && (_.isArray(value) || _.isArguments(value))) {\n        //flatten current level of array or arguments object\n        if (!shallow) value = flatten(value, shallow, strict);\n        var j = 0, len = value.length;\n        output.length += len;\n        while (j < len) {\n          output[idx++] = value[j++];\n        }\n      } else if (!strict) {\n        output[idx++] = value;\n      }\n    }\n    return output;\n  };\n\n  // Flatten out an array, either recursively (by default), or just one level.\n  _.flatten = function(array, shallow) {\n    return flatten(array, shallow, false);\n  };\n\n  // Return a version of the array that does not contain the specified value(s).\n  _.without = function(array) {\n    return _.difference(array, slice.call(arguments, 1));\n  };\n\n  // Produce a duplicate-free version of the array. If the array has already\n  // been sorted, you have the option of using a faster algorithm.\n  // Aliased as `unique`.\n  _.uniq = _.unique = function(array, isSorted, iteratee, context) {\n    if (!_.isBoolean(isSorted)) {\n      context = iteratee;\n      iteratee = isSorted;\n      isSorted = false;\n    }\n    if (iteratee != null) iteratee = cb(iteratee, context);\n    var result = [];\n    var seen = [];\n    for (var i = 0, length = getLength(array); i < length; i++) {\n      var value = array[i],\n          computed = iteratee ? iteratee(value, i, array) : value;\n      if (isSorted) {\n        if (!i || seen !== computed) result.push(value);\n        seen = computed;\n      } else if (iteratee) {\n        if (!_.contains(seen, computed)) {\n          seen.push(computed);\n          result.push(value);\n        }\n      } else if (!_.contains(result, value)) {\n        result.push(value);\n      }\n    }\n    return result;\n  };\n\n  // Produce an array that contains the union: each distinct element from all of\n  // the passed-in arrays.\n  _.union = function() {\n    return _.uniq(flatten(arguments, true, true));\n  };\n\n  // Produce an array that contains every item shared between all the\n  // passed-in arrays.\n  _.intersection = function(array) {\n    var result = [];\n    var argsLength = arguments.length;\n    for (var i = 0, length = getLength(array); i < length; i++) {\n      var item = array[i];\n      if (_.contains(result, item)) continue;\n      for (var j = 1; j < argsLength; j++) {\n        if (!_.contains(arguments[j], item)) break;\n      }\n      if (j === argsLength) result.push(item);\n    }\n    return result;\n  };\n\n  // Take the difference between one array and a number of other arrays.\n  // Only the elements present in just the first array will remain.\n  _.difference = function(array) {\n    var rest = flatten(arguments, true, true, 1);\n    return _.filter(array, function(value){\n      return !_.contains(rest, value);\n    });\n  };\n\n  // Zip together multiple lists into a single array -- elements that share\n  // an index go together.\n  _.zip = function() {\n    return _.unzip(arguments);\n  };\n\n  // Complement of _.zip. Unzip accepts an array of arrays and groups\n  // each array's elements on shared indices\n  _.unzip = function(array) {\n    var length = array && _.max(array, getLength).length || 0;\n    var result = Array(length);\n\n    for (var index = 0; index < length; index++) {\n      result[index] = _.pluck(array, index);\n    }\n    return result;\n  };\n\n  // Converts lists into objects. Pass either a single array of `[key, value]`\n  // pairs, or two parallel arrays of the same length -- one of keys, and one of\n  // the corresponding values.\n  _.object = function(list, values) {\n    var result = {};\n    for (var i = 0, length = getLength(list); i < length; i++) {\n      if (values) {\n        result[list[i]] = values[i];\n      } else {\n        result[list[i][0]] = list[i][1];\n      }\n    }\n    return result;\n  };\n\n  // Generator function to create the findIndex and findLastIndex functions\n  function createPredicateIndexFinder(dir) {\n    return function(array, predicate, context) {\n      predicate = cb(predicate, context);\n      var length = getLength(array);\n      var index = dir > 0 ? 0 : length - 1;\n      for (; index >= 0 && index < length; index += dir) {\n        if (predicate(array[index], index, array)) return index;\n      }\n      return -1;\n    };\n  }\n\n  // Returns the first index on an array-like that passes a predicate test\n  _.findIndex = createPredicateIndexFinder(1);\n  _.findLastIndex = createPredicateIndexFinder(-1);\n\n  // Use a comparator function to figure out the smallest index at which\n  // an object should be inserted so as to maintain order. Uses binary search.\n  _.sortedIndex = function(array, obj, iteratee, context) {\n    iteratee = cb(iteratee, context, 1);\n    var value = iteratee(obj);\n    var low = 0, high = getLength(array);\n    while (low < high) {\n      var mid = Math.floor((low + high) / 2);\n      if (iteratee(array[mid]) < value) low = mid + 1; else high = mid;\n    }\n    return low;\n  };\n\n  // Generator function to create the indexOf and lastIndexOf functions\n  function createIndexFinder(dir, predicateFind, sortedIndex) {\n    return function(array, item, idx) {\n      var i = 0, length = getLength(array);\n      if (typeof idx == 'number') {\n        if (dir > 0) {\n            i = idx >= 0 ? idx : Math.max(idx + length, i);\n        } else {\n            length = idx >= 0 ? Math.min(idx + 1, length) : idx + length + 1;\n        }\n      } else if (sortedIndex && idx && length) {\n        idx = sortedIndex(array, item);\n        return array[idx] === item ? idx : -1;\n      }\n      if (item !== item) {\n        idx = predicateFind(slice.call(array, i, length), _.isNaN);\n        return idx >= 0 ? idx + i : -1;\n      }\n      for (idx = dir > 0 ? i : length - 1; idx >= 0 && idx < length; idx += dir) {\n        if (array[idx] === item) return idx;\n      }\n      return -1;\n    };\n  }\n\n  // Return the position of the first occurrence of an item in an array,\n  // or -1 if the item is not included in the array.\n  // If the array is large and already in sort order, pass `true`\n  // for **isSorted** to use binary search.\n  _.indexOf = createIndexFinder(1, _.findIndex, _.sortedIndex);\n  _.lastIndexOf = createIndexFinder(-1, _.findLastIndex);\n\n  // Generate an integer Array containing an arithmetic progression. A port of\n  // the native Python `range()` function. See\n  // [the Python documentation](http://docs.python.org/library/functions.html#range).\n  _.range = function(start, stop, step) {\n    if (stop == null) {\n      stop = start || 0;\n      start = 0;\n    }\n    step = step || 1;\n\n    var length = Math.max(Math.ceil((stop - start) / step), 0);\n    var range = Array(length);\n\n    for (var idx = 0; idx < length; idx++, start += step) {\n      range[idx] = start;\n    }\n\n    return range;\n  };\n\n  // Function (ahem) Functions\n  // ------------------\n\n  // Determines whether to execute a function as a constructor\n  // or a normal function with the provided arguments\n  var executeBound = function(sourceFunc, boundFunc, context, callingContext, args) {\n    if (!(callingContext instanceof boundFunc)) return sourceFunc.apply(context, args);\n    var self = baseCreate(sourceFunc.prototype);\n    var result = sourceFunc.apply(self, args);\n    if (_.isObject(result)) return result;\n    return self;\n  };\n\n  // Create a function bound to a given object (assigning `this`, and arguments,\n  // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if\n  // available.\n  _.bind = function(func, context) {\n    if (nativeBind && func.bind === nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));\n    if (!_.isFunction(func)) throw new TypeError('Bind must be called on a function');\n    var args = slice.call(arguments, 2);\n    var bound = function() {\n      return executeBound(func, bound, context, this, args.concat(slice.call(arguments)));\n    };\n    return bound;\n  };\n\n  // Partially apply a function by creating a version that has had some of its\n  // arguments pre-filled, without changing its dynamic `this` context. _ acts\n  // as a placeholder, allowing any combination of arguments to be pre-filled.\n  _.partial = function(func) {\n    var boundArgs = slice.call(arguments, 1);\n    var bound = function() {\n      var position = 0, length = boundArgs.length;\n      var args = Array(length);\n      for (var i = 0; i < length; i++) {\n        args[i] = boundArgs[i] === _ ? arguments[position++] : boundArgs[i];\n      }\n      while (position < arguments.length) args.push(arguments[position++]);\n      return executeBound(func, bound, this, this, args);\n    };\n    return bound;\n  };\n\n  // Bind a number of an object's methods to that object. Remaining arguments\n  // are the method names to be bound. Useful for ensuring that all callbacks\n  // defined on an object belong to it.\n  _.bindAll = function(obj) {\n    var i, length = arguments.length, key;\n    if (length <= 1) throw new Error('bindAll must be passed function names');\n    for (i = 1; i < length; i++) {\n      key = arguments[i];\n      obj[key] = _.bind(obj[key], obj);\n    }\n    return obj;\n  };\n\n  // Memoize an expensive function by storing its results.\n  _.memoize = function(func, hasher) {\n    var memoize = function(key) {\n      var cache = memoize.cache;\n      var address = '' + (hasher ? hasher.apply(this, arguments) : key);\n      if (!_.has(cache, address)) cache[address] = func.apply(this, arguments);\n      return cache[address];\n    };\n    memoize.cache = {};\n    return memoize;\n  };\n\n  // Delays a function for the given number of milliseconds, and then calls\n  // it with the arguments supplied.\n  _.delay = function(func, wait) {\n    var args = slice.call(arguments, 2);\n    return setTimeout(function(){\n      return func.apply(null, args);\n    }, wait);\n  };\n\n  // Defers a function, scheduling it to run after the current call stack has\n  // cleared.\n  _.defer = _.partial(_.delay, _, 1);\n\n  // Returns a function, that, when invoked, will only be triggered at most once\n  // during a given window of time. Normally, the throttled function will run\n  // as much as it can, without ever going more than once per `wait` duration;\n  // but if you'd like to disable the execution on the leading edge, pass\n  // `{leading: false}`. To disable execution on the trailing edge, ditto.\n  _.throttle = function(func, wait, options) {\n    var context, args, result;\n    var timeout = null;\n    var previous = 0;\n    if (!options) options = {};\n    var later = function() {\n      previous = options.leading === false ? 0 : _.now();\n      timeout = null;\n      result = func.apply(context, args);\n      if (!timeout) context = args = null;\n    };\n    return function() {\n      var now = _.now();\n      if (!previous && options.leading === false) previous = now;\n      var remaining = wait - (now - previous);\n      context = this;\n      args = arguments;\n      if (remaining <= 0 || remaining > wait) {\n        if (timeout) {\n          clearTimeout(timeout);\n          timeout = null;\n        }\n        previous = now;\n        result = func.apply(context, args);\n        if (!timeout) context = args = null;\n      } else if (!timeout && options.trailing !== false) {\n        timeout = setTimeout(later, remaining);\n      }\n      return result;\n    };\n  };\n\n  // Returns a function, that, as long as it continues to be invoked, will not\n  // be triggered. The function will be called after it stops being called for\n  // N milliseconds. If `immediate` is passed, trigger the function on the\n  // leading edge, instead of the trailing.\n  _.debounce = function(func, wait, immediate) {\n    var timeout, args, context, timestamp, result;\n\n    var later = function() {\n      var last = _.now() - timestamp;\n\n      if (last < wait && last >= 0) {\n        timeout = setTimeout(later, wait - last);\n      } else {\n        timeout = null;\n        if (!immediate) {\n          result = func.apply(context, args);\n          if (!timeout) context = args = null;\n        }\n      }\n    };\n\n    return function() {\n      context = this;\n      args = arguments;\n      timestamp = _.now();\n      var callNow = immediate && !timeout;\n      if (!timeout) timeout = setTimeout(later, wait);\n      if (callNow) {\n        result = func.apply(context, args);\n        context = args = null;\n      }\n\n      return result;\n    };\n  };\n\n  // Returns the first function passed as an argument to the second,\n  // allowing you to adjust arguments, run code before and after, and\n  // conditionally execute the original function.\n  _.wrap = function(func, wrapper) {\n    return _.partial(wrapper, func);\n  };\n\n  // Returns a negated version of the passed-in predicate.\n  _.negate = function(predicate) {\n    return function() {\n      return !predicate.apply(this, arguments);\n    };\n  };\n\n  // Returns a function that is the composition of a list of functions, each\n  // consuming the return value of the function that follows.\n  _.compose = function() {\n    var args = arguments;\n    var start = args.length - 1;\n    return function() {\n      var i = start;\n      var result = args[start].apply(this, arguments);\n      while (i--) result = args[i].call(this, result);\n      return result;\n    };\n  };\n\n  // Returns a function that will only be executed on and after the Nth call.\n  _.after = function(times, func) {\n    return function() {\n      if (--times < 1) {\n        return func.apply(this, arguments);\n      }\n    };\n  };\n\n  // Returns a function that will only be executed up to (but not including) the Nth call.\n  _.before = function(times, func) {\n    var memo;\n    return function() {\n      if (--times > 0) {\n        memo = func.apply(this, arguments);\n      }\n      if (times <= 1) func = null;\n      return memo;\n    };\n  };\n\n  // Returns a function that will be executed at most one time, no matter how\n  // often you call it. Useful for lazy initialization.\n  _.once = _.partial(_.before, 2);\n\n  // Object Functions\n  // ----------------\n\n  // Keys in IE < 9 that won't be iterated by `for key in ...` and thus missed.\n  var hasEnumBug = !{toString: null}.propertyIsEnumerable('toString');\n  var nonEnumerableProps = ['valueOf', 'isPrototypeOf', 'toString',\n                      'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString'];\n\n  function collectNonEnumProps(obj, keys) {\n    var nonEnumIdx = nonEnumerableProps.length;\n    var constructor = obj.constructor;\n    var proto = (_.isFunction(constructor) && constructor.prototype) || ObjProto;\n\n    // Constructor is a special case.\n    var prop = 'constructor';\n    if (_.has(obj, prop) && !_.contains(keys, prop)) keys.push(prop);\n\n    while (nonEnumIdx--) {\n      prop = nonEnumerableProps[nonEnumIdx];\n      if (prop in obj && obj[prop] !== proto[prop] && !_.contains(keys, prop)) {\n        keys.push(prop);\n      }\n    }\n  }\n\n  // Retrieve the names of an object's own properties.\n  // Delegates to **ECMAScript 5**'s native `Object.keys`\n  _.keys = function(obj) {\n    if (!_.isObject(obj)) return [];\n    if (nativeKeys) return nativeKeys(obj);\n    var keys = [];\n    for (var key in obj) if (_.has(obj, key)) keys.push(key);\n    // Ahem, IE < 9.\n    if (hasEnumBug) collectNonEnumProps(obj, keys);\n    return keys;\n  };\n\n  // Retrieve all the property names of an object.\n  _.allKeys = function(obj) {\n    if (!_.isObject(obj)) return [];\n    var keys = [];\n    for (var key in obj) keys.push(key);\n    // Ahem, IE < 9.\n    if (hasEnumBug) collectNonEnumProps(obj, keys);\n    return keys;\n  };\n\n  // Retrieve the values of an object's properties.\n  _.values = function(obj) {\n    var keys = _.keys(obj);\n    var length = keys.length;\n    var values = Array(length);\n    for (var i = 0; i < length; i++) {\n      values[i] = obj[keys[i]];\n    }\n    return values;\n  };\n\n  // Returns the results of applying the iteratee to each element of the object\n  // In contrast to _.map it returns an object\n  _.mapObject = function(obj, iteratee, context) {\n    iteratee = cb(iteratee, context);\n    var keys =  _.keys(obj),\n          length = keys.length,\n          results = {},\n          currentKey;\n      for (var index = 0; index < length; index++) {\n        currentKey = keys[index];\n        results[currentKey] = iteratee(obj[currentKey], currentKey, obj);\n      }\n      return results;\n  };\n\n  // Convert an object into a list of `[key, value]` pairs.\n  _.pairs = function(obj) {\n    var keys = _.keys(obj);\n    var length = keys.length;\n    var pairs = Array(length);\n    for (var i = 0; i < length; i++) {\n      pairs[i] = [keys[i], obj[keys[i]]];\n    }\n    return pairs;\n  };\n\n  // Invert the keys and values of an object. The values must be serializable.\n  _.invert = function(obj) {\n    var result = {};\n    var keys = _.keys(obj);\n    for (var i = 0, length = keys.length; i < length; i++) {\n      result[obj[keys[i]]] = keys[i];\n    }\n    return result;\n  };\n\n  // Return a sorted list of the function names available on the object.\n  // Aliased as `methods`\n  _.functions = _.methods = function(obj) {\n    var names = [];\n    for (var key in obj) {\n      if (_.isFunction(obj[key])) names.push(key);\n    }\n    return names.sort();\n  };\n\n  // Extend a given object with all the properties in passed-in object(s).\n  _.extend = createAssigner(_.allKeys);\n\n  // Assigns a given object with all the own properties in the passed-in object(s)\n  // (https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)\n  _.extendOwn = _.assign = createAssigner(_.keys);\n\n  // Returns the first key on an object that passes a predicate test\n  _.findKey = function(obj, predicate, context) {\n    predicate = cb(predicate, context);\n    var keys = _.keys(obj), key;\n    for (var i = 0, length = keys.length; i < length; i++) {\n      key = keys[i];\n      if (predicate(obj[key], key, obj)) return key;\n    }\n  };\n\n  // Return a copy of the object only containing the whitelisted properties.\n  _.pick = function(object, oiteratee, context) {\n    var result = {}, obj = object, iteratee, keys;\n    if (obj == null) return result;\n    if (_.isFunction(oiteratee)) {\n      keys = _.allKeys(obj);\n      iteratee = optimizeCb(oiteratee, context);\n    } else {\n      keys = flatten(arguments, false, false, 1);\n      iteratee = function(value, key, obj) { return key in obj; };\n      obj = Object(obj);\n    }\n    for (var i = 0, length = keys.length; i < length; i++) {\n      var key = keys[i];\n      var value = obj[key];\n      if (iteratee(value, key, obj)) result[key] = value;\n    }\n    return result;\n  };\n\n   // Return a copy of the object without the blacklisted properties.\n  _.omit = function(obj, iteratee, context) {\n    if (_.isFunction(iteratee)) {\n      iteratee = _.negate(iteratee);\n    } else {\n      var keys = _.map(flatten(arguments, false, false, 1), String);\n      iteratee = function(value, key) {\n        return !_.contains(keys, key);\n      };\n    }\n    return _.pick(obj, iteratee, context);\n  };\n\n  // Fill in a given object with default properties.\n  _.defaults = createAssigner(_.allKeys, true);\n\n  // Creates an object that inherits from the given prototype object.\n  // If additional properties are provided then they will be added to the\n  // created object.\n  _.create = function(prototype, props) {\n    var result = baseCreate(prototype);\n    if (props) _.extendOwn(result, props);\n    return result;\n  };\n\n  // Create a (shallow-cloned) duplicate of an object.\n  _.clone = function(obj) {\n    if (!_.isObject(obj)) return obj;\n    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);\n  };\n\n  // Invokes interceptor with the obj, and then returns obj.\n  // The primary purpose of this method is to \"tap into\" a method chain, in\n  // order to perform operations on intermediate results within the chain.\n  _.tap = function(obj, interceptor) {\n    interceptor(obj);\n    return obj;\n  };\n\n  // Returns whether an object has a given set of `key:value` pairs.\n  _.isMatch = function(object, attrs) {\n    var keys = _.keys(attrs), length = keys.length;\n    if (object == null) return !length;\n    var obj = Object(object);\n    for (var i = 0; i < length; i++) {\n      var key = keys[i];\n      if (attrs[key] !== obj[key] || !(key in obj)) return false;\n    }\n    return true;\n  };\n\n\n  // Internal recursive comparison function for `isEqual`.\n  var eq = function(a, b, aStack, bStack) {\n    // Identical objects are equal. `0 === -0`, but they aren't identical.\n    // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).\n    if (a === b) return a !== 0 || 1 / a === 1 / b;\n    // A strict comparison is necessary because `null == undefined`.\n    if (a == null || b == null) return a === b;\n    // Unwrap any wrapped objects.\n    if (a instanceof _) a = a._wrapped;\n    if (b instanceof _) b = b._wrapped;\n    // Compare `[[Class]]` names.\n    var className = toString.call(a);\n    if (className !== toString.call(b)) return false;\n    switch (className) {\n      // Strings, numbers, regular expressions, dates, and booleans are compared by value.\n      case '[object RegExp]':\n      // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')\n      case '[object String]':\n        // Primitives and their corresponding object wrappers are equivalent; thus, `\"5\"` is\n        // equivalent to `new String(\"5\")`.\n        return '' + a === '' + b;\n      case '[object Number]':\n        // `NaN`s are equivalent, but non-reflexive.\n        // Object(NaN) is equivalent to NaN\n        if (+a !== +a) return +b !== +b;\n        // An `egal` comparison is performed for other numeric values.\n        return +a === 0 ? 1 / +a === 1 / b : +a === +b;\n      case '[object Date]':\n      case '[object Boolean]':\n        // Coerce dates and booleans to numeric primitive values. Dates are compared by their\n        // millisecond representations. Note that invalid dates with millisecond representations\n        // of `NaN` are not equivalent.\n        return +a === +b;\n    }\n\n    var areArrays = className === '[object Array]';\n    if (!areArrays) {\n      if (typeof a != 'object' || typeof b != 'object') return false;\n\n      // Objects with different constructors are not equivalent, but `Object`s or `Array`s\n      // from different frames are.\n      var aCtor = a.constructor, bCtor = b.constructor;\n      if (aCtor !== bCtor && !(_.isFunction(aCtor) && aCtor instanceof aCtor &&\n                               _.isFunction(bCtor) && bCtor instanceof bCtor)\n                          && ('constructor' in a && 'constructor' in b)) {\n        return false;\n      }\n    }\n    // Assume equality for cyclic structures. The algorithm for detecting cyclic\n    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.\n\n    // Initializing stack of traversed objects.\n    // It's done here since we only need them for objects and arrays comparison.\n    aStack = aStack || [];\n    bStack = bStack || [];\n    var length = aStack.length;\n    while (length--) {\n      // Linear search. Performance is inversely proportional to the number of\n      // unique nested structures.\n      if (aStack[length] === a) return bStack[length] === b;\n    }\n\n    // Add the first object to the stack of traversed objects.\n    aStack.push(a);\n    bStack.push(b);\n\n    // Recursively compare objects and arrays.\n    if (areArrays) {\n      // Compare array lengths to determine if a deep comparison is necessary.\n      length = a.length;\n      if (length !== b.length) return false;\n      // Deep compare the contents, ignoring non-numeric properties.\n      while (length--) {\n        if (!eq(a[length], b[length], aStack, bStack)) return false;\n      }\n    } else {\n      // Deep compare objects.\n      var keys = _.keys(a), key;\n      length = keys.length;\n      // Ensure that both objects contain the same number of properties before comparing deep equality.\n      if (_.keys(b).length !== length) return false;\n      while (length--) {\n        // Deep compare each member\n        key = keys[length];\n        if (!(_.has(b, key) && eq(a[key], b[key], aStack, bStack))) return false;\n      }\n    }\n    // Remove the first object from the stack of traversed objects.\n    aStack.pop();\n    bStack.pop();\n    return true;\n  };\n\n  // Perform a deep comparison to check if two objects are equal.\n  _.isEqual = function(a, b) {\n    return eq(a, b);\n  };\n\n  // Is a given array, string, or object empty?\n  // An \"empty\" object has no enumerable own-properties.\n  _.isEmpty = function(obj) {\n    if (obj == null) return true;\n    if (isArrayLike(obj) && (_.isArray(obj) || _.isString(obj) || _.isArguments(obj))) return obj.length === 0;\n    return _.keys(obj).length === 0;\n  };\n\n  // Is a given value a DOM element?\n  _.isElement = function(obj) {\n    return !!(obj && obj.nodeType === 1);\n  };\n\n  // Is a given value an array?\n  // Delegates to ECMA5's native Array.isArray\n  _.isArray = nativeIsArray || function(obj) {\n    return toString.call(obj) === '[object Array]';\n  };\n\n  // Is a given variable an object?\n  _.isObject = function(obj) {\n    var type = typeof obj;\n    return type === 'function' || type === 'object' && !!obj;\n  };\n\n  // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp, isError.\n  _.each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp', 'Error'], function(name) {\n    _['is' + name] = function(obj) {\n      return toString.call(obj) === '[object ' + name + ']';\n    };\n  });\n\n  // Define a fallback version of the method in browsers (ahem, IE < 9), where\n  // there isn't any inspectable \"Arguments\" type.\n  if (!_.isArguments(arguments)) {\n    _.isArguments = function(obj) {\n      return _.has(obj, 'callee');\n    };\n  }\n\n  // Optimize `isFunction` if appropriate. Work around some typeof bugs in old v8,\n  // IE 11 (#1621), and in Safari 8 (#1929).\n  if (typeof /./ != 'function' && typeof Int8Array != 'object') {\n    _.isFunction = function(obj) {\n      return typeof obj == 'function' || false;\n    };\n  }\n\n  // Is a given object a finite number?\n  _.isFinite = function(obj) {\n    return isFinite(obj) && !isNaN(parseFloat(obj));\n  };\n\n  // Is the given value `NaN`? (NaN is the only number which does not equal itself).\n  _.isNaN = function(obj) {\n    return _.isNumber(obj) && obj !== +obj;\n  };\n\n  // Is a given value a boolean?\n  _.isBoolean = function(obj) {\n    return obj === true || obj === false || toString.call(obj) === '[object Boolean]';\n  };\n\n  // Is a given value equal to null?\n  _.isNull = function(obj) {\n    return obj === null;\n  };\n\n  // Is a given variable undefined?\n  _.isUndefined = function(obj) {\n    return obj === void 0;\n  };\n\n  // Shortcut function for checking if an object has a given property directly\n  // on itself (in other words, not on a prototype).\n  _.has = function(obj, key) {\n    return obj != null && hasOwnProperty.call(obj, key);\n  };\n\n  // Utility Functions\n  // -----------------\n\n  // Run Underscore.js in *noConflict* mode, returning the `_` variable to its\n  // previous owner. Returns a reference to the Underscore object.\n  _.noConflict = function() {\n    root._ = previousUnderscore;\n    return this;\n  };\n\n  // Keep the identity function around for default iteratees.\n  _.identity = function(value) {\n    return value;\n  };\n\n  // Predicate-generating functions. Often useful outside of Underscore.\n  _.constant = function(value) {\n    return function() {\n      return value;\n    };\n  };\n\n  _.noop = function(){};\n\n  _.property = property;\n\n  // Generates a function for a given object that returns a given property.\n  _.propertyOf = function(obj) {\n    return obj == null ? function(){} : function(key) {\n      return obj[key];\n    };\n  };\n\n  // Returns a predicate for checking whether an object has a given set of\n  // `key:value` pairs.\n  _.matcher = _.matches = function(attrs) {\n    attrs = _.extendOwn({}, attrs);\n    return function(obj) {\n      return _.isMatch(obj, attrs);\n    };\n  };\n\n  // Run a function **n** times.\n  _.times = function(n, iteratee, context) {\n    var accum = Array(Math.max(0, n));\n    iteratee = optimizeCb(iteratee, context, 1);\n    for (var i = 0; i < n; i++) accum[i] = iteratee(i);\n    return accum;\n  };\n\n  // Return a random integer between min and max (inclusive).\n  _.random = function(min, max) {\n    if (max == null) {\n      max = min;\n      min = 0;\n    }\n    return min + Math.floor(Math.random() * (max - min + 1));\n  };\n\n  // A (possibly faster) way to get the current timestamp as an integer.\n  _.now = Date.now || function() {\n    return new Date().getTime();\n  };\n\n   // List of HTML entities for escaping.\n  var escapeMap = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#x27;',\n    '`': '&#x60;'\n  };\n  var unescapeMap = _.invert(escapeMap);\n\n  // Functions for escaping and unescaping strings to/from HTML interpolation.\n  var createEscaper = function(map) {\n    var escaper = function(match) {\n      return map[match];\n    };\n    // Regexes for identifying a key that needs to be escaped\n    var source = '(?:' + _.keys(map).join('|') + ')';\n    var testRegexp = RegExp(source);\n    var replaceRegexp = RegExp(source, 'g');\n    return function(string) {\n      string = string == null ? '' : '' + string;\n      return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;\n    };\n  };\n  _.escape = createEscaper(escapeMap);\n  _.unescape = createEscaper(unescapeMap);\n\n  // If the value of the named `property` is a function then invoke it with the\n  // `object` as context; otherwise, return it.\n  _.result = function(object, property, fallback) {\n    var value = object == null ? void 0 : object[property];\n    if (value === void 0) {\n      value = fallback;\n    }\n    return _.isFunction(value) ? value.call(object) : value;\n  };\n\n  // Generate a unique integer id (unique within the entire client session).\n  // Useful for temporary DOM ids.\n  var idCounter = 0;\n  _.uniqueId = function(prefix) {\n    var id = ++idCounter + '';\n    return prefix ? prefix + id : id;\n  };\n\n  // By default, Underscore uses ERB-style template delimiters, change the\n  // following template settings to use alternative delimiters.\n  _.templateSettings = {\n    evaluate    : /<%([\\s\\S]+?)%>/g,\n    interpolate : /<%=([\\s\\S]+?)%>/g,\n    escape      : /<%-([\\s\\S]+?)%>/g\n  };\n\n  // When customizing `templateSettings`, if you don't want to define an\n  // interpolation, evaluation or escaping regex, we need one that is\n  // guaranteed not to match.\n  var noMatch = /(.)^/;\n\n  // Certain characters need to be escaped so that they can be put into a\n  // string literal.\n  var escapes = {\n    \"'\":      \"'\",\n    '\\\\':     '\\\\',\n    '\\r':     'r',\n    '\\n':     'n',\n    '\\u2028': 'u2028',\n    '\\u2029': 'u2029'\n  };\n\n  var escaper = /\\\\|'|\\r|\\n|\\u2028|\\u2029/g;\n\n  var escapeChar = function(match) {\n    return '\\\\' + escapes[match];\n  };\n\n  // JavaScript micro-templating, similar to John Resig's implementation.\n  // Underscore templating handles arbitrary delimiters, preserves whitespace,\n  // and correctly escapes quotes within interpolated code.\n  // NB: `oldSettings` only exists for backwards compatibility.\n  _.template = function(text, settings, oldSettings) {\n    if (!settings && oldSettings) settings = oldSettings;\n    settings = _.defaults({}, settings, _.templateSettings);\n\n    // Combine delimiters into one regular expression via alternation.\n    var matcher = RegExp([\n      (settings.escape || noMatch).source,\n      (settings.interpolate || noMatch).source,\n      (settings.evaluate || noMatch).source\n    ].join('|') + '|$', 'g');\n\n    // Compile the template source, escaping string literals appropriately.\n    var index = 0;\n    var source = \"__p+='\";\n    text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {\n      source += text.slice(index, offset).replace(escaper, escapeChar);\n      index = offset + match.length;\n\n      if (escape) {\n        source += \"'+\\n((__t=(\" + escape + \"))==null?'':_.escape(__t))+\\n'\";\n      } else if (interpolate) {\n        source += \"'+\\n((__t=(\" + interpolate + \"))==null?'':__t)+\\n'\";\n      } else if (evaluate) {\n        source += \"';\\n\" + evaluate + \"\\n__p+='\";\n      }\n\n      // Adobe VMs need the match returned to produce the correct offest.\n      return match;\n    });\n    source += \"';\\n\";\n\n    // If a variable is not specified, place data values in local scope.\n    if (!settings.variable) source = 'with(obj||{}){\\n' + source + '}\\n';\n\n    source = \"var __t,__p='',__j=Array.prototype.join,\" +\n      \"print=function(){__p+=__j.call(arguments,'');};\\n\" +\n      source + 'return __p;\\n';\n\n    try {\n      var render = new Function(settings.variable || 'obj', '_', source);\n    } catch (e) {\n      e.source = source;\n      throw e;\n    }\n\n    var template = function(data) {\n      return render.call(this, data, _);\n    };\n\n    // Provide the compiled source as a convenience for precompilation.\n    var argument = settings.variable || 'obj';\n    template.source = 'function(' + argument + '){\\n' + source + '}';\n\n    return template;\n  };\n\n  // Add a \"chain\" function. Start chaining a wrapped Underscore object.\n  _.chain = function(obj) {\n    var instance = _(obj);\n    instance._chain = true;\n    return instance;\n  };\n\n  // OOP\n  // ---------------\n  // If Underscore is called as a function, it returns a wrapped object that\n  // can be used OO-style. This wrapper holds altered versions of all the\n  // underscore functions. Wrapped objects may be chained.\n\n  // Helper function to continue chaining intermediate results.\n  var result = function(instance, obj) {\n    return instance._chain ? _(obj).chain() : obj;\n  };\n\n  // Add your own custom functions to the Underscore object.\n  _.mixin = function(obj) {\n    _.each(_.functions(obj), function(name) {\n      var func = _[name] = obj[name];\n      _.prototype[name] = function() {\n        var args = [this._wrapped];\n        push.apply(args, arguments);\n        return result(this, func.apply(_, args));\n      };\n    });\n  };\n\n  // Add all of the Underscore functions to the wrapper object.\n  _.mixin(_);\n\n  // Add all mutator Array functions to the wrapper.\n  _.each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {\n    var method = ArrayProto[name];\n    _.prototype[name] = function() {\n      var obj = this._wrapped;\n      method.apply(obj, arguments);\n      if ((name === 'shift' || name === 'splice') && obj.length === 0) delete obj[0];\n      return result(this, obj);\n    };\n  });\n\n  // Add all accessor Array functions to the wrapper.\n  _.each(['concat', 'join', 'slice'], function(name) {\n    var method = ArrayProto[name];\n    _.prototype[name] = function() {\n      return result(this, method.apply(this._wrapped, arguments));\n    };\n  });\n\n  // Extracts the result from a wrapped and chained object.\n  _.prototype.value = function() {\n    return this._wrapped;\n  };\n\n  // Provide unwrapping proxy for some methods used in engine operations\n  // such as arithmetic and JSON stringification.\n  _.prototype.valueOf = _.prototype.toJSON = _.prototype.value;\n\n  _.prototype.toString = function() {\n    return '' + this._wrapped;\n  };\n\n  // AMD registration happens at the end for compatibility with AMD loaders\n  // that may not enforce next-turn semantics on modules. Even though general\n  // practice for AMD registration is to be anonymous, underscore registers\n  // as a named module because, like jQuery, it is a base library that is\n  // popular enough to be bundled in a third party lib, but not be part of\n  // an AMD load request. Those cases could generate an error when an\n  // anonymous define() is called outside of a loader request.\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {\n      return _;\n    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  }\n}.call(this));\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 5 */
/* no static exports found */
/* all exports used */
/*!*******************************************!*\
  !*** ./~/core-js/library/modules/_wks.js ***!
  \*******************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var store      = __webpack_require__(/*! ./_shared */ 48)('wks')\n  , uid        = __webpack_require__(/*! ./_uid */ 52)\n  , Symbol     = __webpack_require__(/*! ./_global */ 10).Symbol\n  , USE_SYMBOL = typeof Symbol == 'function';\n\nvar $exports = module.exports = function(name){\n  return store[name] || (store[name] =\n    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));\n};\n\n$exports.store = store;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3drcy5qcz8zMDI3Il0sInNvdXJjZXNDb250ZW50IjpbInZhciBzdG9yZSAgICAgID0gcmVxdWlyZSgnLi9fc2hhcmVkJykoJ3drcycpXG4gICwgdWlkICAgICAgICA9IHJlcXVpcmUoJy4vX3VpZCcpXG4gICwgU3ltYm9sICAgICA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLlN5bWJvbFxuICAsIFVTRV9TWU1CT0wgPSB0eXBlb2YgU3ltYm9sID09ICdmdW5jdGlvbic7XG5cbnZhciAkZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24obmFtZSl7XG4gIHJldHVybiBzdG9yZVtuYW1lXSB8fCAoc3RvcmVbbmFtZV0gPVxuICAgIFVTRV9TWU1CT0wgJiYgU3ltYm9sW25hbWVdIHx8IChVU0VfU1lNQk9MID8gU3ltYm9sIDogdWlkKSgnU3ltYm9sLicgKyBuYW1lKSk7XG59O1xuXG4kZXhwb3J0cy5zdG9yZSA9IHN0b3JlO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fd2tzLmpzXG4vLyBtb2R1bGUgaWQgPSA1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 6 */
/* no static exports found */
/* all exports used */
/*!*******************************!*\
  !*** ./~/ramda/src/curryN.js ***!
  \*******************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var _arity = __webpack_require__(/*! ./internal/_arity */ 14);\nvar _curry1 = __webpack_require__(/*! ./internal/_curry1 */ 2);\nvar _curry2 = __webpack_require__(/*! ./internal/_curry2 */ 1);\nvar _curryN = __webpack_require__(/*! ./internal/_curryN */ 156);\n\n\n/**\n * Returns a curried equivalent of the provided function, with the specified\n * arity. The curried function has two unusual capabilities. First, its\n * arguments needn't be provided one at a time. If `g` is `R.curryN(3, f)`, the\n * following are equivalent:\n *\n *   - `g(1)(2)(3)`\n *   - `g(1)(2, 3)`\n *   - `g(1, 2)(3)`\n *   - `g(1, 2, 3)`\n *\n * Secondly, the special placeholder value `R.__` may be used to specify\n * \"gaps\", allowing partial application of any combination of arguments,\n * regardless of their positions. If `g` is as above and `_` is `R.__`, the\n * following are equivalent:\n *\n *   - `g(1, 2, 3)`\n *   - `g(_, 2, 3)(1)`\n *   - `g(_, _, 3)(1)(2)`\n *   - `g(_, _, 3)(1, 2)`\n *   - `g(_, 2)(1)(3)`\n *   - `g(_, 2)(1, 3)`\n *   - `g(_, 2)(_, 3)(1)`\n *\n * @func\n * @memberOf R\n * @since v0.5.0\n * @category Function\n * @sig Number -> (* -> a) -> (* -> a)\n * @param {Number} length The arity for the returned function.\n * @param {Function} fn The function to curry.\n * @return {Function} A new, curried function.\n * @see R.curry\n * @example\n *\n *      var sumArgs = (...args) => R.sum(args);\n *\n *      var curriedAddFourNumbers = R.curryN(4, sumArgs);\n *      var f = curriedAddFourNumbers(1, 2);\n *      var g = f(3);\n *      g(4); //=> 10\n */\nmodule.exports = _curry2(function curryN(length, fn) {\n  if (length === 1) {\n    return _curry1(fn);\n  }\n  return _arity(length, _curryN(length, [], fn));\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL34vcmFtZGEvc3JjL2N1cnJ5Ti5qcz9iMzY5Il0sInNvdXJjZXNDb250ZW50IjpbInZhciBfYXJpdHkgPSByZXF1aXJlKCcuL2ludGVybmFsL19hcml0eScpO1xudmFyIF9jdXJyeTEgPSByZXF1aXJlKCcuL2ludGVybmFsL19jdXJyeTEnKTtcbnZhciBfY3VycnkyID0gcmVxdWlyZSgnLi9pbnRlcm5hbC9fY3VycnkyJyk7XG52YXIgX2N1cnJ5TiA9IHJlcXVpcmUoJy4vaW50ZXJuYWwvX2N1cnJ5TicpO1xuXG5cbi8qKlxuICogUmV0dXJucyBhIGN1cnJpZWQgZXF1aXZhbGVudCBvZiB0aGUgcHJvdmlkZWQgZnVuY3Rpb24sIHdpdGggdGhlIHNwZWNpZmllZFxuICogYXJpdHkuIFRoZSBjdXJyaWVkIGZ1bmN0aW9uIGhhcyB0d28gdW51c3VhbCBjYXBhYmlsaXRpZXMuIEZpcnN0LCBpdHNcbiAqIGFyZ3VtZW50cyBuZWVkbid0IGJlIHByb3ZpZGVkIG9uZSBhdCBhIHRpbWUuIElmIGBnYCBpcyBgUi5jdXJyeU4oMywgZilgLCB0aGVcbiAqIGZvbGxvd2luZyBhcmUgZXF1aXZhbGVudDpcbiAqXG4gKiAgIC0gYGcoMSkoMikoMylgXG4gKiAgIC0gYGcoMSkoMiwgMylgXG4gKiAgIC0gYGcoMSwgMikoMylgXG4gKiAgIC0gYGcoMSwgMiwgMylgXG4gKlxuICogU2Vjb25kbHksIHRoZSBzcGVjaWFsIHBsYWNlaG9sZGVyIHZhbHVlIGBSLl9fYCBtYXkgYmUgdXNlZCB0byBzcGVjaWZ5XG4gKiBcImdhcHNcIiwgYWxsb3dpbmcgcGFydGlhbCBhcHBsaWNhdGlvbiBvZiBhbnkgY29tYmluYXRpb24gb2YgYXJndW1lbnRzLFxuICogcmVnYXJkbGVzcyBvZiB0aGVpciBwb3NpdGlvbnMuIElmIGBnYCBpcyBhcyBhYm92ZSBhbmQgYF9gIGlzIGBSLl9fYCwgdGhlXG4gKiBmb2xsb3dpbmcgYXJlIGVxdWl2YWxlbnQ6XG4gKlxuICogICAtIGBnKDEsIDIsIDMpYFxuICogICAtIGBnKF8sIDIsIDMpKDEpYFxuICogICAtIGBnKF8sIF8sIDMpKDEpKDIpYFxuICogICAtIGBnKF8sIF8sIDMpKDEsIDIpYFxuICogICAtIGBnKF8sIDIpKDEpKDMpYFxuICogICAtIGBnKF8sIDIpKDEsIDMpYFxuICogICAtIGBnKF8sIDIpKF8sIDMpKDEpYFxuICpcbiAqIEBmdW5jXG4gKiBAbWVtYmVyT2YgUlxuICogQHNpbmNlIHYwLjUuMFxuICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gKiBAc2lnIE51bWJlciAtPiAoKiAtPiBhKSAtPiAoKiAtPiBhKVxuICogQHBhcmFtIHtOdW1iZXJ9IGxlbmd0aCBUaGUgYXJpdHkgZm9yIHRoZSByZXR1cm5lZCBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBmdW5jdGlvbiB0byBjdXJyeS5cbiAqIEByZXR1cm4ge0Z1bmN0aW9ufSBBIG5ldywgY3VycmllZCBmdW5jdGlvbi5cbiAqIEBzZWUgUi5jdXJyeVxuICogQGV4YW1wbGVcbiAqXG4gKiAgICAgIHZhciBzdW1BcmdzID0gKC4uLmFyZ3MpID0+IFIuc3VtKGFyZ3MpO1xuICpcbiAqICAgICAgdmFyIGN1cnJpZWRBZGRGb3VyTnVtYmVycyA9IFIuY3VycnlOKDQsIHN1bUFyZ3MpO1xuICogICAgICB2YXIgZiA9IGN1cnJpZWRBZGRGb3VyTnVtYmVycygxLCAyKTtcbiAqICAgICAgdmFyIGcgPSBmKDMpO1xuICogICAgICBnKDQpOyAvLz0+IDEwXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gX2N1cnJ5MihmdW5jdGlvbiBjdXJyeU4obGVuZ3RoLCBmbikge1xuICBpZiAobGVuZ3RoID09PSAxKSB7XG4gICAgcmV0dXJuIF9jdXJyeTEoZm4pO1xuICB9XG4gIHJldHVybiBfYXJpdHkobGVuZ3RoLCBfY3VycnlOKGxlbmd0aCwgW10sIGZuKSk7XG59KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9yYW1kYS9zcmMvY3VycnlOLmpzXG4vLyBtb2R1bGUgaWQgPSA2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 7 */
/* no static exports found */
/* all exports used */
/*!*****************************************!*\
  !*** ./~/ramda/src/internal/_curry3.js ***!
  \*****************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var _curry1 = __webpack_require__(/*! ./_curry1 */ 2);\nvar _curry2 = __webpack_require__(/*! ./_curry2 */ 1);\nvar _isPlaceholder = __webpack_require__(/*! ./_isPlaceholder */ 25);\n\n\n/**\n * Optimized internal three-arity curry function.\n *\n * @private\n * @category Function\n * @param {Function} fn The function to curry.\n * @return {Function} The curried function.\n */\nmodule.exports = function _curry3(fn) {\n  return function f3(a, b, c) {\n    switch (arguments.length) {\n      case 0:\n        return f3;\n      case 1:\n        return _isPlaceholder(a) ? f3\n             : _curry2(function(_b, _c) { return fn(a, _b, _c); });\n      case 2:\n        return _isPlaceholder(a) && _isPlaceholder(b) ? f3\n             : _isPlaceholder(a) ? _curry2(function(_a, _c) { return fn(_a, b, _c); })\n             : _isPlaceholder(b) ? _curry2(function(_b, _c) { return fn(a, _b, _c); })\n             : _curry1(function(_c) { return fn(a, b, _c); });\n      default:\n        return _isPlaceholder(a) && _isPlaceholder(b) && _isPlaceholder(c) ? f3\n             : _isPlaceholder(a) && _isPlaceholder(b) ? _curry2(function(_a, _b) { return fn(_a, _b, c); })\n             : _isPlaceholder(a) && _isPlaceholder(c) ? _curry2(function(_a, _c) { return fn(_a, b, _c); })\n             : _isPlaceholder(b) && _isPlaceholder(c) ? _curry2(function(_b, _c) { return fn(a, _b, _c); })\n             : _isPlaceholder(a) ? _curry1(function(_a) { return fn(_a, b, c); })\n             : _isPlaceholder(b) ? _curry1(function(_b) { return fn(a, _b, c); })\n             : _isPlaceholder(c) ? _curry1(function(_c) { return fn(a, b, _c); })\n             : fn(a, b, c);\n    }\n  };\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL34vcmFtZGEvc3JjL2ludGVybmFsL19jdXJyeTMuanM/ODNlYiJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX2N1cnJ5MSA9IHJlcXVpcmUoJy4vX2N1cnJ5MScpO1xudmFyIF9jdXJyeTIgPSByZXF1aXJlKCcuL19jdXJyeTInKTtcbnZhciBfaXNQbGFjZWhvbGRlciA9IHJlcXVpcmUoJy4vX2lzUGxhY2Vob2xkZXInKTtcblxuXG4vKipcbiAqIE9wdGltaXplZCBpbnRlcm5hbCB0aHJlZS1hcml0eSBjdXJyeSBmdW5jdGlvbi5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgZnVuY3Rpb24gdG8gY3VycnkuXG4gKiBAcmV0dXJuIHtGdW5jdGlvbn0gVGhlIGN1cnJpZWQgZnVuY3Rpb24uXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gX2N1cnJ5Myhmbikge1xuICByZXR1cm4gZnVuY3Rpb24gZjMoYSwgYiwgYykge1xuICAgIHN3aXRjaCAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgY2FzZSAwOlxuICAgICAgICByZXR1cm4gZjM7XG4gICAgICBjYXNlIDE6XG4gICAgICAgIHJldHVybiBfaXNQbGFjZWhvbGRlcihhKSA/IGYzXG4gICAgICAgICAgICAgOiBfY3VycnkyKGZ1bmN0aW9uKF9iLCBfYykgeyByZXR1cm4gZm4oYSwgX2IsIF9jKTsgfSk7XG4gICAgICBjYXNlIDI6XG4gICAgICAgIHJldHVybiBfaXNQbGFjZWhvbGRlcihhKSAmJiBfaXNQbGFjZWhvbGRlcihiKSA/IGYzXG4gICAgICAgICAgICAgOiBfaXNQbGFjZWhvbGRlcihhKSA/IF9jdXJyeTIoZnVuY3Rpb24oX2EsIF9jKSB7IHJldHVybiBmbihfYSwgYiwgX2MpOyB9KVxuICAgICAgICAgICAgIDogX2lzUGxhY2Vob2xkZXIoYikgPyBfY3VycnkyKGZ1bmN0aW9uKF9iLCBfYykgeyByZXR1cm4gZm4oYSwgX2IsIF9jKTsgfSlcbiAgICAgICAgICAgICA6IF9jdXJyeTEoZnVuY3Rpb24oX2MpIHsgcmV0dXJuIGZuKGEsIGIsIF9jKTsgfSk7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gX2lzUGxhY2Vob2xkZXIoYSkgJiYgX2lzUGxhY2Vob2xkZXIoYikgJiYgX2lzUGxhY2Vob2xkZXIoYykgPyBmM1xuICAgICAgICAgICAgIDogX2lzUGxhY2Vob2xkZXIoYSkgJiYgX2lzUGxhY2Vob2xkZXIoYikgPyBfY3VycnkyKGZ1bmN0aW9uKF9hLCBfYikgeyByZXR1cm4gZm4oX2EsIF9iLCBjKTsgfSlcbiAgICAgICAgICAgICA6IF9pc1BsYWNlaG9sZGVyKGEpICYmIF9pc1BsYWNlaG9sZGVyKGMpID8gX2N1cnJ5MihmdW5jdGlvbihfYSwgX2MpIHsgcmV0dXJuIGZuKF9hLCBiLCBfYyk7IH0pXG4gICAgICAgICAgICAgOiBfaXNQbGFjZWhvbGRlcihiKSAmJiBfaXNQbGFjZWhvbGRlcihjKSA/IF9jdXJyeTIoZnVuY3Rpb24oX2IsIF9jKSB7IHJldHVybiBmbihhLCBfYiwgX2MpOyB9KVxuICAgICAgICAgICAgIDogX2lzUGxhY2Vob2xkZXIoYSkgPyBfY3VycnkxKGZ1bmN0aW9uKF9hKSB7IHJldHVybiBmbihfYSwgYiwgYyk7IH0pXG4gICAgICAgICAgICAgOiBfaXNQbGFjZWhvbGRlcihiKSA/IF9jdXJyeTEoZnVuY3Rpb24oX2IpIHsgcmV0dXJuIGZuKGEsIF9iLCBjKTsgfSlcbiAgICAgICAgICAgICA6IF9pc1BsYWNlaG9sZGVyKGMpID8gX2N1cnJ5MShmdW5jdGlvbihfYykgeyByZXR1cm4gZm4oYSwgYiwgX2MpOyB9KVxuICAgICAgICAgICAgIDogZm4oYSwgYiwgYyk7XG4gICAgfVxuICB9O1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9yYW1kYS9zcmMvaW50ZXJuYWwvX2N1cnJ5My5qc1xuLy8gbW9kdWxlIGlkID0gN1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 8 */
/* no static exports found */
/* all exports used */
/*!****************************!*\
  !*** ./~/ramda/src/map.js ***!
  \****************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var _curry2 = __webpack_require__(/*! ./internal/_curry2 */ 1);\nvar _dispatchable = __webpack_require__(/*! ./internal/_dispatchable */ 58);\nvar _map = __webpack_require__(/*! ./internal/_map */ 61);\nvar _reduce = __webpack_require__(/*! ./internal/_reduce */ 16);\nvar _xmap = __webpack_require__(/*! ./internal/_xmap */ 171);\nvar curryN = __webpack_require__(/*! ./curryN */ 6);\nvar keys = __webpack_require__(/*! ./keys */ 17);\n\n\n/**\n * Takes a function and\n * a [functor](https://github.com/fantasyland/fantasy-land#functor),\n * applies the function to each of the functor's values, and returns\n * a functor of the same shape.\n *\n * Ramda provides suitable `map` implementations for `Array` and `Object`,\n * so this function may be applied to `[1, 2, 3]` or `{x: 1, y: 2, z: 3}`.\n *\n * Dispatches to the `map` method of the second argument, if present.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * Also treats functions as functors and will compose them together.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig Functor f => (a -> b) -> f a -> f b\n * @param {Function} fn The function to be called on every element of the input `list`.\n * @param {Array} list The list to be iterated over.\n * @return {Array} The new list.\n * @see R.transduce, R.addIndex\n * @example\n *\n *      var double = x => x * 2;\n *\n *      R.map(double, [1, 2, 3]); //=> [2, 4, 6]\n *\n *      R.map(double, {x: 1, y: 2, z: 3}); //=> {x: 2, y: 4, z: 6}\n * @symb R.map(f, [a, b]) = [f(a), f(b)]\n * @symb R.map(f, { x: a, y: b }) = { x: f(a), y: f(b) }\n * @symb R.map(f, functor_o) = functor_o.map(f)\n */\nmodule.exports = _curry2(_dispatchable(['map'], _xmap, function map(fn, functor) {\n  switch (Object.prototype.toString.call(functor)) {\n    case '[object Function]':\n      return curryN(functor.length, function() {\n        return fn.call(this, functor.apply(this, arguments));\n      });\n    case '[object Object]':\n      return _reduce(function(acc, key) {\n        acc[key] = fn(functor[key]);\n        return acc;\n      }, {}, keys(functor));\n    default:\n      return _map(fn, functor);\n  }\n}));\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL34vcmFtZGEvc3JjL21hcC5qcz81MGRiIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBfY3VycnkyID0gcmVxdWlyZSgnLi9pbnRlcm5hbC9fY3VycnkyJyk7XG52YXIgX2Rpc3BhdGNoYWJsZSA9IHJlcXVpcmUoJy4vaW50ZXJuYWwvX2Rpc3BhdGNoYWJsZScpO1xudmFyIF9tYXAgPSByZXF1aXJlKCcuL2ludGVybmFsL19tYXAnKTtcbnZhciBfcmVkdWNlID0gcmVxdWlyZSgnLi9pbnRlcm5hbC9fcmVkdWNlJyk7XG52YXIgX3htYXAgPSByZXF1aXJlKCcuL2ludGVybmFsL194bWFwJyk7XG52YXIgY3VycnlOID0gcmVxdWlyZSgnLi9jdXJyeU4nKTtcbnZhciBrZXlzID0gcmVxdWlyZSgnLi9rZXlzJyk7XG5cblxuLyoqXG4gKiBUYWtlcyBhIGZ1bmN0aW9uIGFuZFxuICogYSBbZnVuY3Rvcl0oaHR0cHM6Ly9naXRodWIuY29tL2ZhbnRhc3lsYW5kL2ZhbnRhc3ktbGFuZCNmdW5jdG9yKSxcbiAqIGFwcGxpZXMgdGhlIGZ1bmN0aW9uIHRvIGVhY2ggb2YgdGhlIGZ1bmN0b3IncyB2YWx1ZXMsIGFuZCByZXR1cm5zXG4gKiBhIGZ1bmN0b3Igb2YgdGhlIHNhbWUgc2hhcGUuXG4gKlxuICogUmFtZGEgcHJvdmlkZXMgc3VpdGFibGUgYG1hcGAgaW1wbGVtZW50YXRpb25zIGZvciBgQXJyYXlgIGFuZCBgT2JqZWN0YCxcbiAqIHNvIHRoaXMgZnVuY3Rpb24gbWF5IGJlIGFwcGxpZWQgdG8gYFsxLCAyLCAzXWAgb3IgYHt4OiAxLCB5OiAyLCB6OiAzfWAuXG4gKlxuICogRGlzcGF0Y2hlcyB0byB0aGUgYG1hcGAgbWV0aG9kIG9mIHRoZSBzZWNvbmQgYXJndW1lbnQsIGlmIHByZXNlbnQuXG4gKlxuICogQWN0cyBhcyBhIHRyYW5zZHVjZXIgaWYgYSB0cmFuc2Zvcm1lciBpcyBnaXZlbiBpbiBsaXN0IHBvc2l0aW9uLlxuICpcbiAqIEFsc28gdHJlYXRzIGZ1bmN0aW9ucyBhcyBmdW5jdG9ycyBhbmQgd2lsbCBjb21wb3NlIHRoZW0gdG9nZXRoZXIuXG4gKlxuICogQGZ1bmNcbiAqIEBtZW1iZXJPZiBSXG4gKiBAc2luY2UgdjAuMS4wXG4gKiBAY2F0ZWdvcnkgTGlzdFxuICogQHNpZyBGdW5jdG9yIGYgPT4gKGEgLT4gYikgLT4gZiBhIC0+IGYgYlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGZ1bmN0aW9uIHRvIGJlIGNhbGxlZCBvbiBldmVyeSBlbGVtZW50IG9mIHRoZSBpbnB1dCBgbGlzdGAuXG4gKiBAcGFyYW0ge0FycmF5fSBsaXN0IFRoZSBsaXN0IHRvIGJlIGl0ZXJhdGVkIG92ZXIuXG4gKiBAcmV0dXJuIHtBcnJheX0gVGhlIG5ldyBsaXN0LlxuICogQHNlZSBSLnRyYW5zZHVjZSwgUi5hZGRJbmRleFxuICogQGV4YW1wbGVcbiAqXG4gKiAgICAgIHZhciBkb3VibGUgPSB4ID0+IHggKiAyO1xuICpcbiAqICAgICAgUi5tYXAoZG91YmxlLCBbMSwgMiwgM10pOyAvLz0+IFsyLCA0LCA2XVxuICpcbiAqICAgICAgUi5tYXAoZG91YmxlLCB7eDogMSwgeTogMiwgejogM30pOyAvLz0+IHt4OiAyLCB5OiA0LCB6OiA2fVxuICogQHN5bWIgUi5tYXAoZiwgW2EsIGJdKSA9IFtmKGEpLCBmKGIpXVxuICogQHN5bWIgUi5tYXAoZiwgeyB4OiBhLCB5OiBiIH0pID0geyB4OiBmKGEpLCB5OiBmKGIpIH1cbiAqIEBzeW1iIFIubWFwKGYsIGZ1bmN0b3JfbykgPSBmdW5jdG9yX28ubWFwKGYpXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gX2N1cnJ5MihfZGlzcGF0Y2hhYmxlKFsnbWFwJ10sIF94bWFwLCBmdW5jdGlvbiBtYXAoZm4sIGZ1bmN0b3IpIHtcbiAgc3dpdGNoIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZnVuY3RvcikpIHtcbiAgICBjYXNlICdbb2JqZWN0IEZ1bmN0aW9uXSc6XG4gICAgICByZXR1cm4gY3VycnlOKGZ1bmN0b3IubGVuZ3RoLCBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGZuLmNhbGwodGhpcywgZnVuY3Rvci5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgICAgIH0pO1xuICAgIGNhc2UgJ1tvYmplY3QgT2JqZWN0XSc6XG4gICAgICByZXR1cm4gX3JlZHVjZShmdW5jdGlvbihhY2MsIGtleSkge1xuICAgICAgICBhY2Nba2V5XSA9IGZuKGZ1bmN0b3Jba2V5XSk7XG4gICAgICAgIHJldHVybiBhY2M7XG4gICAgICB9LCB7fSwga2V5cyhmdW5jdG9yKSk7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBfbWFwKGZuLCBmdW5jdG9yKTtcbiAgfVxufSkpO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3JhbWRhL3NyYy9tYXAuanNcbi8vIG1vZHVsZSBpZCA9IDhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 9 */
/* no static exports found */
/* all exports used */
/*!********************************!*\
  !*** ./src/utils/reference.js ***!
  \********************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _curry = __webpack_require__(/*! ramda/src/curry */ 24);\n\nvar _curry2 = _interopRequireDefault(_curry);\n\nvar _tangramReference = __webpack_require__(/*! tangram-reference */ 67);\n\nvar _tangramReference2 = _interopRequireDefault(_tangramReference);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar Ref = _tangramReference2.default.load('1.0.0');\n\nvar TangramReference = {};\n\nexports.default = TangramReference;\n\n\nvar getProperty = (0, _curry2.default)(function (type, prop) {\n\tvar obj = Ref.symbolizers[type];\n\treturn prop ? obj[prop] : obj;\n});\n\nTangramReference.getPoint = getProperty('markers');\n\nTangramReference.getLine = getProperty('line');\n\nTangramReference.getPolygon = getProperty('polygon');\n\nTangramReference.getText = getProperty('text');\n\nTangramReference.getPolygonPattern = getProperty('polygon-pattern');\n\nTangramReference.checkSymbolizer = (0, _curry2.default)(function (sym, c3ss) {\n\treturn c3ss.symbolizers.indexOf(sym) !== -1 ? c3ss : null;\n});\n\nTangramReference.checkType = (0, _curry2.default)(function (ref, val) {\n\treturn ref.type.indexOf(val) !== -1 ? val : null;\n});//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9zcmMvdXRpbHMvcmVmZXJlbmNlLmpzPzU3YTAiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3VycnkgfSBmcm9tICdyYW1kYSc7XG5pbXBvcnQgcmVmZXJlbmNlIGZyb20gJ3RhbmdyYW0tcmVmZXJlbmNlJztcblxuY29uc3QgUmVmID0gcmVmZXJlbmNlLmxvYWQoJzEuMC4wJyk7XG5cbnZhciBUYW5ncmFtUmVmZXJlbmNlID0ge307XG5cbmV4cG9ydCBkZWZhdWx0IFRhbmdyYW1SZWZlcmVuY2U7XG5cbmNvbnN0IGdldFByb3BlcnR5ID0gY3VycnkoZnVuY3Rpb24gKHR5cGUsIHByb3ApIHtcblx0Y29uc3Qgb2JqID0gUmVmLnN5bWJvbGl6ZXJzW3R5cGVdO1xuXHRyZXR1cm4gcHJvcCA/IG9ialtwcm9wXSA6IG9iajtcbn0pO1xuXG5UYW5ncmFtUmVmZXJlbmNlLmdldFBvaW50ID0gZ2V0UHJvcGVydHkoJ21hcmtlcnMnKTtcblxuVGFuZ3JhbVJlZmVyZW5jZS5nZXRMaW5lID0gZ2V0UHJvcGVydHkoJ2xpbmUnKTtcblxuVGFuZ3JhbVJlZmVyZW5jZS5nZXRQb2x5Z29uID0gZ2V0UHJvcGVydHkoJ3BvbHlnb24nKTtcblxuVGFuZ3JhbVJlZmVyZW5jZS5nZXRUZXh0ID0gZ2V0UHJvcGVydHkoJ3RleHQnKTtcblxuVGFuZ3JhbVJlZmVyZW5jZS5nZXRQb2x5Z29uUGF0dGVybiA9IGdldFByb3BlcnR5KCdwb2x5Z29uLXBhdHRlcm4nKTtcblxuVGFuZ3JhbVJlZmVyZW5jZS5jaGVja1N5bWJvbGl6ZXIgPSBjdXJyeShmdW5jdGlvbihzeW0sIGMzc3MpIHtcblx0cmV0dXJuIGMzc3Muc3ltYm9saXplcnMuaW5kZXhPZihzeW0pICE9PSAtMSA/IGMzc3MgOiBudWxsO1xufSk7XG5cblRhbmdyYW1SZWZlcmVuY2UuY2hlY2tUeXBlID0gY3VycnkoZnVuY3Rpb24ocmVmLCB2YWwpIHtcblx0cmV0dXJuIHJlZi50eXBlLmluZGV4T2YodmFsKSAhPT0gLTEgPyB2YWwgOiBudWxsO1xufSk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gc3JjL3V0aWxzL3JlZmVyZW5jZS5qcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUNBO0FBQ0E7Ozs7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 10 */
/* no static exports found */
/* all exports used */
/*!**********************************************!*\
  !*** ./~/core-js/library/modules/_global.js ***!
  \**********************************************/
/***/ (function(module, exports) {

eval("// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028\nvar global = module.exports = typeof window != 'undefined' && window.Math == Math\n  ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();\nif(typeof __g == 'number')__g = global; // eslint-disable-line no-undef//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTAuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19nbG9iYWwuanM/NzdhYSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvODYjaXNzdWVjb21tZW50LTExNTc1OTAyOFxudmFyIGdsb2JhbCA9IG1vZHVsZS5leHBvcnRzID0gdHlwZW9mIHdpbmRvdyAhPSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuTWF0aCA9PSBNYXRoXG4gID8gd2luZG93IDogdHlwZW9mIHNlbGYgIT0gJ3VuZGVmaW5lZCcgJiYgc2VsZi5NYXRoID09IE1hdGggPyBzZWxmIDogRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcbmlmKHR5cGVvZiBfX2cgPT0gJ251bWJlcicpX19nID0gZ2xvYmFsOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19nbG9iYWwuanNcbi8vIG1vZHVsZSBpZCA9IDEwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 11 */
/* no static exports found */
/* all exports used */
/*!*******************************************!*\
  !*** ./~/node-libs-browser/mock/empty.js ***!
  \*******************************************/
/***/ (function(module, exports) {

eval("//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTEuanMiLCJzb3VyY2VzIjpbXSwibWFwcGluZ3MiOiIiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 12 */
/* no static exports found */
/* all exports used */
/*!************************************!*\
  !*** ./~/path-browserify/index.js ***!
  \************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// resolves . and .. elements in a path array with directory names there\n// must be no slashes, empty elements, or device names (c:\\) in the array\n// (so also no leading and trailing slashes - it does not distinguish\n// relative and absolute paths)\nfunction normalizeArray(parts, allowAboveRoot) {\n  // if the path tries to go above the root, `up` ends up > 0\n  var up = 0;\n  for (var i = parts.length - 1; i >= 0; i--) {\n    var last = parts[i];\n    if (last === '.') {\n      parts.splice(i, 1);\n    } else if (last === '..') {\n      parts.splice(i, 1);\n      up++;\n    } else if (up) {\n      parts.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (allowAboveRoot) {\n    for (; up--; up) {\n      parts.unshift('..');\n    }\n  }\n\n  return parts;\n}\n\n// Split a filename into [root, dir, basename, ext], unix version\n// 'root' is just a slash, or nothing.\nvar splitPathRe =\n    /^(\\/?|)([\\s\\S]*?)((?:\\.{1,2}|[^\\/]+?|)(\\.[^.\\/]*|))(?:[\\/]*)$/;\nvar splitPath = function(filename) {\n  return splitPathRe.exec(filename).slice(1);\n};\n\n// path.resolve([from ...], to)\n// posix version\nexports.resolve = function() {\n  var resolvedPath = '',\n      resolvedAbsolute = false;\n\n  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n    var path = (i >= 0) ? arguments[i] : process.cwd();\n\n    // Skip empty and invalid entries\n    if (typeof path !== 'string') {\n      throw new TypeError('Arguments to path.resolve must be strings');\n    } else if (!path) {\n      continue;\n    }\n\n    resolvedPath = path + '/' + resolvedPath;\n    resolvedAbsolute = path.charAt(0) === '/';\n  }\n\n  // At this point the path should be resolved to a full absolute path, but\n  // handle relative paths to be safe (might happen when process.cwd() fails)\n\n  // Normalize the path\n  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {\n    return !!p;\n  }), !resolvedAbsolute).join('/');\n\n  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';\n};\n\n// path.normalize(path)\n// posix version\nexports.normalize = function(path) {\n  var isAbsolute = exports.isAbsolute(path),\n      trailingSlash = substr(path, -1) === '/';\n\n  // Normalize the path\n  path = normalizeArray(filter(path.split('/'), function(p) {\n    return !!p;\n  }), !isAbsolute).join('/');\n\n  if (!path && !isAbsolute) {\n    path = '.';\n  }\n  if (path && trailingSlash) {\n    path += '/';\n  }\n\n  return (isAbsolute ? '/' : '') + path;\n};\n\n// posix version\nexports.isAbsolute = function(path) {\n  return path.charAt(0) === '/';\n};\n\n// posix version\nexports.join = function() {\n  var paths = Array.prototype.slice.call(arguments, 0);\n  return exports.normalize(filter(paths, function(p, index) {\n    if (typeof p !== 'string') {\n      throw new TypeError('Arguments to path.join must be strings');\n    }\n    return p;\n  }).join('/'));\n};\n\n\n// path.relative(from, to)\n// posix version\nexports.relative = function(from, to) {\n  from = exports.resolve(from).substr(1);\n  to = exports.resolve(to).substr(1);\n\n  function trim(arr) {\n    var start = 0;\n    for (; start < arr.length; start++) {\n      if (arr[start] !== '') break;\n    }\n\n    var end = arr.length - 1;\n    for (; end >= 0; end--) {\n      if (arr[end] !== '') break;\n    }\n\n    if (start > end) return [];\n    return arr.slice(start, end - start + 1);\n  }\n\n  var fromParts = trim(from.split('/'));\n  var toParts = trim(to.split('/'));\n\n  var length = Math.min(fromParts.length, toParts.length);\n  var samePartsLength = length;\n  for (var i = 0; i < length; i++) {\n    if (fromParts[i] !== toParts[i]) {\n      samePartsLength = i;\n      break;\n    }\n  }\n\n  var outputParts = [];\n  for (var i = samePartsLength; i < fromParts.length; i++) {\n    outputParts.push('..');\n  }\n\n  outputParts = outputParts.concat(toParts.slice(samePartsLength));\n\n  return outputParts.join('/');\n};\n\nexports.sep = '/';\nexports.delimiter = ':';\n\nexports.dirname = function(path) {\n  var result = splitPath(path),\n      root = result[0],\n      dir = result[1];\n\n  if (!root && !dir) {\n    // No dirname whatsoever\n    return '.';\n  }\n\n  if (dir) {\n    // It has a dirname, strip trailing slash\n    dir = dir.substr(0, dir.length - 1);\n  }\n\n  return root + dir;\n};\n\n\nexports.basename = function(path, ext) {\n  var f = splitPath(path)[2];\n  // TODO: make this comparison case-insensitive on windows?\n  if (ext && f.substr(-1 * ext.length) === ext) {\n    f = f.substr(0, f.length - ext.length);\n  }\n  return f;\n};\n\n\nexports.extname = function(path) {\n  return splitPath(path)[3];\n};\n\nfunction filter (xs, f) {\n    if (xs.filter) return xs.filter(f);\n    var res = [];\n    for (var i = 0; i < xs.length; i++) {\n        if (f(xs[i], i, xs)) res.push(xs[i]);\n    }\n    return res;\n}\n\n// String.prototype.substr - negative index don't work in IE8\nvar substr = 'ab'.substr(-1) === 'b'\n    ? function (str, start, len) { return str.substr(start, len) }\n    : function (str, start, len) {\n        if (start < 0) start = str.length + start;\n        return str.substr(start, len);\n    }\n;\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./../process/browser.js */ 36)))//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 13 */
/* no static exports found */
/* all exports used */
/*!********************************!*\
  !*** ./~/ramda/src/compose.js ***!
  \********************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var pipe = __webpack_require__(/*! ./pipe */ 183);\nvar reverse = __webpack_require__(/*! ./reverse */ 187);\n\n\n/**\n * Performs right-to-left function composition. The rightmost function may have\n * any arity; the remaining functions must be unary.\n *\n * **Note:** The result of compose is not automatically curried.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig ((y -> z), (x -> y), ..., (o -> p), ((a, b, ..., n) -> o)) -> ((a, b, ..., n) -> z)\n * @param {...Function} ...functions The functions to compose\n * @return {Function}\n * @see R.pipe\n * @example\n *\n *      var classyGreeting = (firstName, lastName) => \"The name's \" + lastName + \", \" + firstName + \" \" + lastName\n *      var yellGreeting = R.compose(R.toUpper, classyGreeting);\n *      yellGreeting('James', 'Bond'); //=> \"THE NAME'S BOND, JAMES BOND\"\n *\n *      R.compose(Math.abs, R.add(1), R.multiply(2))(-4) //=> 7\n *\n * @symb R.compose(f, g, h)(a, b) = f(g(h(a, b)))\n */\nmodule.exports = function compose() {\n  if (arguments.length === 0) {\n    throw new Error('compose requires at least one argument');\n  }\n  return pipe.apply(this, reverse(arguments));\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3JhbWRhL3NyYy9jb21wb3NlLmpzPzVmOGUiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIHBpcGUgPSByZXF1aXJlKCcuL3BpcGUnKTtcbnZhciByZXZlcnNlID0gcmVxdWlyZSgnLi9yZXZlcnNlJyk7XG5cblxuLyoqXG4gKiBQZXJmb3JtcyByaWdodC10by1sZWZ0IGZ1bmN0aW9uIGNvbXBvc2l0aW9uLiBUaGUgcmlnaHRtb3N0IGZ1bmN0aW9uIG1heSBoYXZlXG4gKiBhbnkgYXJpdHk7IHRoZSByZW1haW5pbmcgZnVuY3Rpb25zIG11c3QgYmUgdW5hcnkuXG4gKlxuICogKipOb3RlOioqIFRoZSByZXN1bHQgb2YgY29tcG9zZSBpcyBub3QgYXV0b21hdGljYWxseSBjdXJyaWVkLlxuICpcbiAqIEBmdW5jXG4gKiBAbWVtYmVyT2YgUlxuICogQHNpbmNlIHYwLjEuMFxuICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gKiBAc2lnICgoeSAtPiB6KSwgKHggLT4geSksIC4uLiwgKG8gLT4gcCksICgoYSwgYiwgLi4uLCBuKSAtPiBvKSkgLT4gKChhLCBiLCAuLi4sIG4pIC0+IHopXG4gKiBAcGFyYW0gey4uLkZ1bmN0aW9ufSAuLi5mdW5jdGlvbnMgVGhlIGZ1bmN0aW9ucyB0byBjb21wb3NlXG4gKiBAcmV0dXJuIHtGdW5jdGlvbn1cbiAqIEBzZWUgUi5waXBlXG4gKiBAZXhhbXBsZVxuICpcbiAqICAgICAgdmFyIGNsYXNzeUdyZWV0aW5nID0gKGZpcnN0TmFtZSwgbGFzdE5hbWUpID0+IFwiVGhlIG5hbWUncyBcIiArIGxhc3ROYW1lICsgXCIsIFwiICsgZmlyc3ROYW1lICsgXCIgXCIgKyBsYXN0TmFtZVxuICogICAgICB2YXIgeWVsbEdyZWV0aW5nID0gUi5jb21wb3NlKFIudG9VcHBlciwgY2xhc3N5R3JlZXRpbmcpO1xuICogICAgICB5ZWxsR3JlZXRpbmcoJ0phbWVzJywgJ0JvbmQnKTsgLy89PiBcIlRIRSBOQU1FJ1MgQk9ORCwgSkFNRVMgQk9ORFwiXG4gKlxuICogICAgICBSLmNvbXBvc2UoTWF0aC5hYnMsIFIuYWRkKDEpLCBSLm11bHRpcGx5KDIpKSgtNCkgLy89PiA3XG4gKlxuICogQHN5bWIgUi5jb21wb3NlKGYsIGcsIGgpKGEsIGIpID0gZihnKGgoYSwgYikpKVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNvbXBvc2UoKSB7XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjb21wb3NlIHJlcXVpcmVzIGF0IGxlYXN0IG9uZSBhcmd1bWVudCcpO1xuICB9XG4gIHJldHVybiBwaXBlLmFwcGx5KHRoaXMsIHJldmVyc2UoYXJndW1lbnRzKSk7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3JhbWRhL3NyYy9jb21wb3NlLmpzXG4vLyBtb2R1bGUgaWQgPSAxM1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 14 */
/* no static exports found */
/* all exports used */
/*!****************************************!*\
  !*** ./~/ramda/src/internal/_arity.js ***!
  \****************************************/
/***/ (function(module, exports) {

eval("module.exports = function _arity(n, fn) {\n  /* eslint-disable no-unused-vars */\n  switch (n) {\n    case 0: return function() { return fn.apply(this, arguments); };\n    case 1: return function(a0) { return fn.apply(this, arguments); };\n    case 2: return function(a0, a1) { return fn.apply(this, arguments); };\n    case 3: return function(a0, a1, a2) { return fn.apply(this, arguments); };\n    case 4: return function(a0, a1, a2, a3) { return fn.apply(this, arguments); };\n    case 5: return function(a0, a1, a2, a3, a4) { return fn.apply(this, arguments); };\n    case 6: return function(a0, a1, a2, a3, a4, a5) { return fn.apply(this, arguments); };\n    case 7: return function(a0, a1, a2, a3, a4, a5, a6) { return fn.apply(this, arguments); };\n    case 8: return function(a0, a1, a2, a3, a4, a5, a6, a7) { return fn.apply(this, arguments); };\n    case 9: return function(a0, a1, a2, a3, a4, a5, a6, a7, a8) { return fn.apply(this, arguments); };\n    case 10: return function(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9) { return fn.apply(this, arguments); };\n    default: throw new Error('First argument to _arity must be a non-negative integer no greater than ten');\n  }\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTQuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3JhbWRhL3NyYy9pbnRlcm5hbC9fYXJpdHkuanM/NjIwMCJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIF9hcml0eShuLCBmbikge1xuICAvKiBlc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtdmFycyAqL1xuICBzd2l0Y2ggKG4pIHtcbiAgICBjYXNlIDA6IHJldHVybiBmdW5jdGlvbigpIHsgcmV0dXJuIGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH07XG4gICAgY2FzZSAxOiByZXR1cm4gZnVuY3Rpb24oYTApIHsgcmV0dXJuIGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH07XG4gICAgY2FzZSAyOiByZXR1cm4gZnVuY3Rpb24oYTAsIGExKSB7IHJldHVybiBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9O1xuICAgIGNhc2UgMzogcmV0dXJuIGZ1bmN0aW9uKGEwLCBhMSwgYTIpIHsgcmV0dXJuIGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH07XG4gICAgY2FzZSA0OiByZXR1cm4gZnVuY3Rpb24oYTAsIGExLCBhMiwgYTMpIHsgcmV0dXJuIGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH07XG4gICAgY2FzZSA1OiByZXR1cm4gZnVuY3Rpb24oYTAsIGExLCBhMiwgYTMsIGE0KSB7IHJldHVybiBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9O1xuICAgIGNhc2UgNjogcmV0dXJuIGZ1bmN0aW9uKGEwLCBhMSwgYTIsIGEzLCBhNCwgYTUpIHsgcmV0dXJuIGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH07XG4gICAgY2FzZSA3OiByZXR1cm4gZnVuY3Rpb24oYTAsIGExLCBhMiwgYTMsIGE0LCBhNSwgYTYpIHsgcmV0dXJuIGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH07XG4gICAgY2FzZSA4OiByZXR1cm4gZnVuY3Rpb24oYTAsIGExLCBhMiwgYTMsIGE0LCBhNSwgYTYsIGE3KSB7IHJldHVybiBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9O1xuICAgIGNhc2UgOTogcmV0dXJuIGZ1bmN0aW9uKGEwLCBhMSwgYTIsIGEzLCBhNCwgYTUsIGE2LCBhNywgYTgpIHsgcmV0dXJuIGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH07XG4gICAgY2FzZSAxMDogcmV0dXJuIGZ1bmN0aW9uKGEwLCBhMSwgYTIsIGEzLCBhNCwgYTUsIGE2LCBhNywgYTgsIGE5KSB7IHJldHVybiBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9O1xuICAgIGRlZmF1bHQ6IHRocm93IG5ldyBFcnJvcignRmlyc3QgYXJndW1lbnQgdG8gX2FyaXR5IG11c3QgYmUgYSBub24tbmVnYXRpdmUgaW50ZWdlciBubyBncmVhdGVyIHRoYW4gdGVuJyk7XG4gIH1cbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcmFtZGEvc3JjL2ludGVybmFsL19hcml0eS5qc1xuLy8gbW9kdWxlIGlkID0gMTRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 15 */
/* no static exports found */
/* all exports used */
/*!**************************************!*\
  !*** ./~/ramda/src/internal/_has.js ***!
  \**************************************/
/***/ (function(module, exports) {

eval("module.exports = function _has(prop, obj) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTUuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3JhbWRhL3NyYy9pbnRlcm5hbC9faGFzLmpzPzU5ZTYiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBfaGFzKHByb3AsIG9iaikge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCk7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3JhbWRhL3NyYy9pbnRlcm5hbC9faGFzLmpzXG4vLyBtb2R1bGUgaWQgPSAxNVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 16 */
/* no static exports found */
/* all exports used */
/*!*****************************************!*\
  !*** ./~/ramda/src/internal/_reduce.js ***!
  \*****************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var _xwrap = __webpack_require__(/*! ./_xwrap */ 172);\nvar bind = __webpack_require__(/*! ../bind */ 143);\nvar isArrayLike = __webpack_require__(/*! ../isArrayLike */ 174);\n\n\nmodule.exports = (function() {\n  function _arrayReduce(xf, acc, list) {\n    var idx = 0;\n    var len = list.length;\n    while (idx < len) {\n      acc = xf['@@transducer/step'](acc, list[idx]);\n      if (acc && acc['@@transducer/reduced']) {\n        acc = acc['@@transducer/value'];\n        break;\n      }\n      idx += 1;\n    }\n    return xf['@@transducer/result'](acc);\n  }\n\n  function _iterableReduce(xf, acc, iter) {\n    var step = iter.next();\n    while (!step.done) {\n      acc = xf['@@transducer/step'](acc, step.value);\n      if (acc && acc['@@transducer/reduced']) {\n        acc = acc['@@transducer/value'];\n        break;\n      }\n      step = iter.next();\n    }\n    return xf['@@transducer/result'](acc);\n  }\n\n  function _methodReduce(xf, acc, obj) {\n    return xf['@@transducer/result'](obj.reduce(bind(xf['@@transducer/step'], xf), acc));\n  }\n\n  var symIterator = (typeof Symbol !== 'undefined') ? Symbol.iterator : '@@iterator';\n  return function _reduce(fn, acc, list) {\n    if (typeof fn === 'function') {\n      fn = _xwrap(fn);\n    }\n    if (isArrayLike(list)) {\n      return _arrayReduce(fn, acc, list);\n    }\n    if (typeof list.reduce === 'function') {\n      return _methodReduce(fn, acc, list);\n    }\n    if (list[symIterator] != null) {\n      return _iterableReduce(fn, acc, list[symIterator]());\n    }\n    if (typeof list.next === 'function') {\n      return _iterableReduce(fn, acc, list);\n    }\n    throw new TypeError('reduce: list must be array or iterable');\n  };\n}());\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTYuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3JhbWRhL3NyYy9pbnRlcm5hbC9fcmVkdWNlLmpzP2M3NTMiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIF94d3JhcCA9IHJlcXVpcmUoJy4vX3h3cmFwJyk7XG52YXIgYmluZCA9IHJlcXVpcmUoJy4uL2JpbmQnKTtcbnZhciBpc0FycmF5TGlrZSA9IHJlcXVpcmUoJy4uL2lzQXJyYXlMaWtlJyk7XG5cblxubW9kdWxlLmV4cG9ydHMgPSAoZnVuY3Rpb24oKSB7XG4gIGZ1bmN0aW9uIF9hcnJheVJlZHVjZSh4ZiwgYWNjLCBsaXN0KSB7XG4gICAgdmFyIGlkeCA9IDA7XG4gICAgdmFyIGxlbiA9IGxpc3QubGVuZ3RoO1xuICAgIHdoaWxlIChpZHggPCBsZW4pIHtcbiAgICAgIGFjYyA9IHhmWydAQHRyYW5zZHVjZXIvc3RlcCddKGFjYywgbGlzdFtpZHhdKTtcbiAgICAgIGlmIChhY2MgJiYgYWNjWydAQHRyYW5zZHVjZXIvcmVkdWNlZCddKSB7XG4gICAgICAgIGFjYyA9IGFjY1snQEB0cmFuc2R1Y2VyL3ZhbHVlJ107XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgaWR4ICs9IDE7XG4gICAgfVxuICAgIHJldHVybiB4ZlsnQEB0cmFuc2R1Y2VyL3Jlc3VsdCddKGFjYyk7XG4gIH1cblxuICBmdW5jdGlvbiBfaXRlcmFibGVSZWR1Y2UoeGYsIGFjYywgaXRlcikge1xuICAgIHZhciBzdGVwID0gaXRlci5uZXh0KCk7XG4gICAgd2hpbGUgKCFzdGVwLmRvbmUpIHtcbiAgICAgIGFjYyA9IHhmWydAQHRyYW5zZHVjZXIvc3RlcCddKGFjYywgc3RlcC52YWx1ZSk7XG4gICAgICBpZiAoYWNjICYmIGFjY1snQEB0cmFuc2R1Y2VyL3JlZHVjZWQnXSkge1xuICAgICAgICBhY2MgPSBhY2NbJ0BAdHJhbnNkdWNlci92YWx1ZSddO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIHN0ZXAgPSBpdGVyLm5leHQoKTtcbiAgICB9XG4gICAgcmV0dXJuIHhmWydAQHRyYW5zZHVjZXIvcmVzdWx0J10oYWNjKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9tZXRob2RSZWR1Y2UoeGYsIGFjYywgb2JqKSB7XG4gICAgcmV0dXJuIHhmWydAQHRyYW5zZHVjZXIvcmVzdWx0J10ob2JqLnJlZHVjZShiaW5kKHhmWydAQHRyYW5zZHVjZXIvc3RlcCddLCB4ZiksIGFjYykpO1xuICB9XG5cbiAgdmFyIHN5bUl0ZXJhdG9yID0gKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnKSA/IFN5bWJvbC5pdGVyYXRvciA6ICdAQGl0ZXJhdG9yJztcbiAgcmV0dXJuIGZ1bmN0aW9uIF9yZWR1Y2UoZm4sIGFjYywgbGlzdCkge1xuICAgIGlmICh0eXBlb2YgZm4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGZuID0gX3h3cmFwKGZuKTtcbiAgICB9XG4gICAgaWYgKGlzQXJyYXlMaWtlKGxpc3QpKSB7XG4gICAgICByZXR1cm4gX2FycmF5UmVkdWNlKGZuLCBhY2MsIGxpc3QpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGxpc3QucmVkdWNlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXR1cm4gX21ldGhvZFJlZHVjZShmbiwgYWNjLCBsaXN0KTtcbiAgICB9XG4gICAgaWYgKGxpc3Rbc3ltSXRlcmF0b3JdICE9IG51bGwpIHtcbiAgICAgIHJldHVybiBfaXRlcmFibGVSZWR1Y2UoZm4sIGFjYywgbGlzdFtzeW1JdGVyYXRvcl0oKSk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgbGlzdC5uZXh0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXR1cm4gX2l0ZXJhYmxlUmVkdWNlKGZuLCBhY2MsIGxpc3QpO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdyZWR1Y2U6IGxpc3QgbXVzdCBiZSBhcnJheSBvciBpdGVyYWJsZScpO1xuICB9O1xufSgpKTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9yYW1kYS9zcmMvaW50ZXJuYWwvX3JlZHVjZS5qc1xuLy8gbW9kdWxlIGlkID0gMTZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 17 */
/* no static exports found */
/* all exports used */
/*!*****************************!*\
  !*** ./~/ramda/src/keys.js ***!
  \*****************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var _curry1 = __webpack_require__(/*! ./internal/_curry1 */ 2);\nvar _has = __webpack_require__(/*! ./internal/_has */ 15);\nvar _isArguments = __webpack_require__(/*! ./internal/_isArguments */ 162);\n\n\n/**\n * Returns a list containing the names of all the enumerable own properties of\n * the supplied object.\n * Note that the order of the output array is not guaranteed to be consistent\n * across different JS platforms.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Object\n * @sig {k: v} -> [k]\n * @param {Object} obj The object to extract properties from\n * @return {Array} An array of the object's own properties.\n * @example\n *\n *      R.keys({a: 1, b: 2, c: 3}); //=> ['a', 'b', 'c']\n */\nmodule.exports = (function() {\n  // cover IE < 9 keys issues\n  var hasEnumBug = !({toString: null}).propertyIsEnumerable('toString');\n  var nonEnumerableProps = ['constructor', 'valueOf', 'isPrototypeOf', 'toString',\n                            'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString'];\n  // Safari bug\n  var hasArgsEnumBug = (function() {\n    'use strict';\n    return arguments.propertyIsEnumerable('length');\n  }());\n\n  var contains = function contains(list, item) {\n    var idx = 0;\n    while (idx < list.length) {\n      if (list[idx] === item) {\n        return true;\n      }\n      idx += 1;\n    }\n    return false;\n  };\n\n  return typeof Object.keys === 'function' && !hasArgsEnumBug ?\n    _curry1(function keys(obj) {\n      return Object(obj) !== obj ? [] : Object.keys(obj);\n    }) :\n    _curry1(function keys(obj) {\n      if (Object(obj) !== obj) {\n        return [];\n      }\n      var prop, nIdx;\n      var ks = [];\n      var checkArgsLength = hasArgsEnumBug && _isArguments(obj);\n      for (prop in obj) {\n        if (_has(prop, obj) && (!checkArgsLength || prop !== 'length')) {\n          ks[ks.length] = prop;\n        }\n      }\n      if (hasEnumBug) {\n        nIdx = nonEnumerableProps.length - 1;\n        while (nIdx >= 0) {\n          prop = nonEnumerableProps[nIdx];\n          if (_has(prop, obj) && !contains(ks, prop)) {\n            ks[ks.length] = prop;\n          }\n          nIdx -= 1;\n        }\n      }\n      return ks;\n    });\n}());\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTcuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3JhbWRhL3NyYy9rZXlzLmpzPzE0ODgiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIF9jdXJyeTEgPSByZXF1aXJlKCcuL2ludGVybmFsL19jdXJyeTEnKTtcbnZhciBfaGFzID0gcmVxdWlyZSgnLi9pbnRlcm5hbC9faGFzJyk7XG52YXIgX2lzQXJndW1lbnRzID0gcmVxdWlyZSgnLi9pbnRlcm5hbC9faXNBcmd1bWVudHMnKTtcblxuXG4vKipcbiAqIFJldHVybnMgYSBsaXN0IGNvbnRhaW5pbmcgdGhlIG5hbWVzIG9mIGFsbCB0aGUgZW51bWVyYWJsZSBvd24gcHJvcGVydGllcyBvZlxuICogdGhlIHN1cHBsaWVkIG9iamVjdC5cbiAqIE5vdGUgdGhhdCB0aGUgb3JkZXIgb2YgdGhlIG91dHB1dCBhcnJheSBpcyBub3QgZ3VhcmFudGVlZCB0byBiZSBjb25zaXN0ZW50XG4gKiBhY3Jvc3MgZGlmZmVyZW50IEpTIHBsYXRmb3Jtcy5cbiAqXG4gKiBAZnVuY1xuICogQG1lbWJlck9mIFJcbiAqIEBzaW5jZSB2MC4xLjBcbiAqIEBjYXRlZ29yeSBPYmplY3RcbiAqIEBzaWcge2s6IHZ9IC0+IFtrXVxuICogQHBhcmFtIHtPYmplY3R9IG9iaiBUaGUgb2JqZWN0IHRvIGV4dHJhY3QgcHJvcGVydGllcyBmcm9tXG4gKiBAcmV0dXJuIHtBcnJheX0gQW4gYXJyYXkgb2YgdGhlIG9iamVjdCdzIG93biBwcm9wZXJ0aWVzLlxuICogQGV4YW1wbGVcbiAqXG4gKiAgICAgIFIua2V5cyh7YTogMSwgYjogMiwgYzogM30pOyAvLz0+IFsnYScsICdiJywgJ2MnXVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IChmdW5jdGlvbigpIHtcbiAgLy8gY292ZXIgSUUgPCA5IGtleXMgaXNzdWVzXG4gIHZhciBoYXNFbnVtQnVnID0gISh7dG9TdHJpbmc6IG51bGx9KS5wcm9wZXJ0eUlzRW51bWVyYWJsZSgndG9TdHJpbmcnKTtcbiAgdmFyIG5vbkVudW1lcmFibGVQcm9wcyA9IFsnY29uc3RydWN0b3InLCAndmFsdWVPZicsICdpc1Byb3RvdHlwZU9mJywgJ3RvU3RyaW5nJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAncHJvcGVydHlJc0VudW1lcmFibGUnLCAnaGFzT3duUHJvcGVydHknLCAndG9Mb2NhbGVTdHJpbmcnXTtcbiAgLy8gU2FmYXJpIGJ1Z1xuICB2YXIgaGFzQXJnc0VudW1CdWcgPSAoZnVuY3Rpb24oKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIHJldHVybiBhcmd1bWVudHMucHJvcGVydHlJc0VudW1lcmFibGUoJ2xlbmd0aCcpO1xuICB9KCkpO1xuXG4gIHZhciBjb250YWlucyA9IGZ1bmN0aW9uIGNvbnRhaW5zKGxpc3QsIGl0ZW0pIHtcbiAgICB2YXIgaWR4ID0gMDtcbiAgICB3aGlsZSAoaWR4IDwgbGlzdC5sZW5ndGgpIHtcbiAgICAgIGlmIChsaXN0W2lkeF0gPT09IGl0ZW0pIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICBpZHggKz0gMTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9O1xuXG4gIHJldHVybiB0eXBlb2YgT2JqZWN0LmtleXMgPT09ICdmdW5jdGlvbicgJiYgIWhhc0FyZ3NFbnVtQnVnID9cbiAgICBfY3VycnkxKGZ1bmN0aW9uIGtleXMob2JqKSB7XG4gICAgICByZXR1cm4gT2JqZWN0KG9iaikgIT09IG9iaiA/IFtdIDogT2JqZWN0LmtleXMob2JqKTtcbiAgICB9KSA6XG4gICAgX2N1cnJ5MShmdW5jdGlvbiBrZXlzKG9iaikge1xuICAgICAgaWYgKE9iamVjdChvYmopICE9PSBvYmopIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgdmFyIHByb3AsIG5JZHg7XG4gICAgICB2YXIga3MgPSBbXTtcbiAgICAgIHZhciBjaGVja0FyZ3NMZW5ndGggPSBoYXNBcmdzRW51bUJ1ZyAmJiBfaXNBcmd1bWVudHMob2JqKTtcbiAgICAgIGZvciAocHJvcCBpbiBvYmopIHtcbiAgICAgICAgaWYgKF9oYXMocHJvcCwgb2JqKSAmJiAoIWNoZWNrQXJnc0xlbmd0aCB8fCBwcm9wICE9PSAnbGVuZ3RoJykpIHtcbiAgICAgICAgICBrc1trcy5sZW5ndGhdID0gcHJvcDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGhhc0VudW1CdWcpIHtcbiAgICAgICAgbklkeCA9IG5vbkVudW1lcmFibGVQcm9wcy5sZW5ndGggLSAxO1xuICAgICAgICB3aGlsZSAobklkeCA+PSAwKSB7XG4gICAgICAgICAgcHJvcCA9IG5vbkVudW1lcmFibGVQcm9wc1tuSWR4XTtcbiAgICAgICAgICBpZiAoX2hhcyhwcm9wLCBvYmopICYmICFjb250YWlucyhrcywgcHJvcCkpIHtcbiAgICAgICAgICAgIGtzW2tzLmxlbmd0aF0gPSBwcm9wO1xuICAgICAgICAgIH1cbiAgICAgICAgICBuSWR4IC09IDE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBrcztcbiAgICB9KTtcbn0oKSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcmFtZGEvc3JjL2tleXMuanNcbi8vIG1vZHVsZSBpZCA9IDE3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 18 */
/* no static exports found */
/* all exports used */
/*!****************************************!*\
  !*** ./src/utils/reference-helpers.js ***!
  \****************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getColorFn = exports.getBlendFn = exports.getExecutedFn = exports.getEitherProp = exports.getPropertyOrDefFn = exports.getPropertyFnSafe = exports.getPropertyFn = exports.getPropOrDef = exports.getProp = exports.getDefProp = exports.generateDefaultFromRef = undefined;\n\nvar _applySpec = __webpack_require__(/*! ramda/src/applySpec */ 55);\n\nvar _applySpec2 = _interopRequireDefault(_applySpec);\n\nvar _apply = __webpack_require__(/*! ramda/src/apply */ 54);\n\nvar _apply2 = _interopRequireDefault(_apply);\n\nvar _values = __webpack_require__(/*! ramda/src/values */ 66);\n\nvar _values2 = _interopRequireDefault(_values);\n\nvar _defaultTo = __webpack_require__(/*! ramda/src/defaultTo */ 145);\n\nvar _defaultTo2 = _interopRequireDefault(_defaultTo);\n\nvar _ifElse = __webpack_require__(/*! ramda/src/ifElse */ 150);\n\nvar _ifElse2 = _interopRequireDefault(_ifElse);\n\nvar _prop = __webpack_require__(/*! ramda/src/prop */ 65);\n\nvar _prop2 = _interopRequireDefault(_prop);\n\nvar _compose = __webpack_require__(/*! ramda/src/compose */ 13);\n\nvar _compose2 = _interopRequireDefault(_compose);\n\nvar _either = __webpack_require__(/*! ramda/src/either */ 146);\n\nvar _either2 = _interopRequireDefault(_either);\n\nvar _curry = __webpack_require__(/*! ramda/src/curry */ 24);\n\nvar _curry2 = _interopRequireDefault(_curry);\n\nvar _utils = __webpack_require__(/*! ../utils/utils */ 38);\n\nvar _utils2 = _interopRequireDefault(_utils);\n\nvar _reference = __webpack_require__(/*! ../utils/reference */ 9);\n\nvar _reference2 = _interopRequireDefault(_reference);\n\nvar _colors = __webpack_require__(/*! ../style/colors */ 77);\n\nvar _colors2 = _interopRequireDefault(_colors);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/*\n  INTERNAL REFERENCE FUNCTIONS\n */\n\nvar curryComp = _utils2.default.curryCompose3;\n\n/*\n  REFERENCE HELPER\n */\n\nvar generateDefaultFromRef = function generateDefaultFromRef(Ref, prop) {\n  return { js: _utils2.default.generateDefault('\"' + Ref[prop]['default-value'] + '\"') };\n};\n\nvar getDefProp = (0, _curry2.default)(function (prop, ref) {\n  return generateDefaultFromRef(ref, prop);\n});\n\n// ref = 'stroke-opacity' -> get {stroke-opacity: {css: 'line-opacity'}} -> line-opacity;\n// ref['line-opacity'];\nvar getProp = (0, _curry2.default)(function (prop, ref, c3ss) {\n  return _utils2.default.pick(_utils2.default.pick(prop + '.css', ref), c3ss);\n});\n\nvar getPropOrDef = (0, _either2.default)(getProp, getDefProp);\n\nvar getPropertyFn = curryComp((0, _compose2.default)(_utils2.default.buildCCSSFn, (0, _prop2.default)('js'), // get property js from object\ngetProp));\n\nvar getPropertyFnSafe = (0, _ifElse2.default)(getProp, getPropertyFn, function () {\n  return void 0;\n});\n\nvar getPropertyOrDefFn = curryComp((0, _compose2.default)(_utils2.default.buildCCSSFn, (0, _prop2.default)('js'), getPropOrDef));\n\nvar getEitherProp = function getEitherProp(propA, propB, ref) {\n  return (0, _either2.default)(getPropertyFnSafe(propA, ref), getPropertyOrDefFn(propB, ref));\n};\n\nvar getExecutedFn = curryComp((0, _compose2.default)(_utils2.default.buildAndExecuteFn, (0, _prop2.default)('js'), getPropOrDef));\n\nvar getBlendFn = (0, _curry2.default)(function (ref, c3ss) {\n  return (0, _compose2.default)((0, _defaultTo2.default)('overlay'), _reference2.default.checkType(ref['comp-op']), getExecutedFn('comp-op'))(ref, c3ss);\n});\n\nvar getColorFn = function getColorFn(fill, alpha) {\n  return (0, _compose2.default)((0, _apply2.default)(_colors2.default.getAlphaColor), _values2.default, (0, _applySpec2.default)({\n    fill: fill,\n    alpha: alpha\n  }));\n};\n\nexports.generateDefaultFromRef = generateDefaultFromRef;\nexports.getDefProp = getDefProp;\nexports.getProp = getProp;\nexports.getPropOrDef = getPropOrDef;\nexports.getPropertyFn = getPropertyFn;\nexports.getPropertyFnSafe = getPropertyFnSafe;\nexports.getPropertyOrDefFn = getPropertyOrDefFn;\nexports.getEitherProp = getEitherProp;\nexports.getExecutedFn = getExecutedFn;\nexports.getBlendFn = getBlendFn;\nexports.getColorFn = getColorFn;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTguanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL3V0aWxzL3JlZmVyZW5jZS1oZWxwZXJzLmpzP2NhNjkiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY29tcG9zZSwgY3VycnksIGVpdGhlciwgcHJvcCwgZGVmYXVsdFRvLCBhcHBseSwgdmFsdWVzLCBpZkVsc2UsIGFwcGx5U3BlYyB9IGZyb20gJ3JhbWRhJztcbmltcG9ydCBVdGlscyBmcm9tICcuLi91dGlscy91dGlscyc7XG5pbXBvcnQgVGFuZ3JhbVJlZmVyZW5jZSBmcm9tICcuLi91dGlscy9yZWZlcmVuY2UnO1xuaW1wb3J0IENvbG9ycyBmcm9tICcuLi9zdHlsZS9jb2xvcnMnO1xuXG5cbi8qXG4gIElOVEVSTkFMIFJFRkVSRU5DRSBGVU5DVElPTlNcbiAqL1xuXG5jb25zdCBjdXJyeUNvbXAgPSBVdGlscy5jdXJyeUNvbXBvc2UzO1xuXG4vKlxuICBSRUZFUkVOQ0UgSEVMUEVSXG4gKi9cblxuY29uc3QgZ2VuZXJhdGVEZWZhdWx0RnJvbVJlZiA9IGZ1bmN0aW9uKFJlZiwgcHJvcCkge1xuXHRyZXR1cm4geyBqczogVXRpbHMuZ2VuZXJhdGVEZWZhdWx0KGBcIiR7UmVmW3Byb3BdWydkZWZhdWx0LXZhbHVlJ119XCJgKSB9O1xufTtcblxuY29uc3QgZ2V0RGVmUHJvcCA9IGN1cnJ5KChwcm9wLCByZWYpID0+IHtcbiAgcmV0dXJuIGdlbmVyYXRlRGVmYXVsdEZyb21SZWYocmVmLCBwcm9wKTtcbn0pO1xuXG4vLyByZWYgPSAnc3Ryb2tlLW9wYWNpdHknIC0+IGdldCB7c3Ryb2tlLW9wYWNpdHk6IHtjc3M6ICdsaW5lLW9wYWNpdHknfX0gLT4gbGluZS1vcGFjaXR5O1xuLy8gcmVmWydsaW5lLW9wYWNpdHknXTtcbmNvbnN0IGdldFByb3AgPSBjdXJyeSgocHJvcCwgcmVmLCBjM3NzKSA9PiB7XG4gIHJldHVybiBVdGlscy5waWNrKFV0aWxzLnBpY2socHJvcCArICcuY3NzJywgcmVmKSwgYzNzcyk7XG59KTtcblxuY29uc3QgZ2V0UHJvcE9yRGVmID0gZWl0aGVyKGdldFByb3AsIGdldERlZlByb3ApO1xuXG5cbmNvbnN0IGdldFByb3BlcnR5Rm4gPSBjdXJyeUNvbXAoY29tcG9zZShcbiAgVXRpbHMuYnVpbGRDQ1NTRm4sXG4gIHByb3AoJ2pzJyksIC8vIGdldCBwcm9wZXJ0eSBqcyBmcm9tIG9iamVjdFxuICBnZXRQcm9wXG4pKTtcblxuY29uc3QgZ2V0UHJvcGVydHlGblNhZmUgPSBpZkVsc2UoXG4gIGdldFByb3AsXG4gIGdldFByb3BlcnR5Rm4sXG4gICgpID0+IHZvaWQgMFxuKTtcblxuY29uc3QgZ2V0UHJvcGVydHlPckRlZkZuID0gY3VycnlDb21wKGNvbXBvc2UoXG4gIFV0aWxzLmJ1aWxkQ0NTU0ZuLFxuICBwcm9wKCdqcycpLFxuICBnZXRQcm9wT3JEZWZcbikpO1xuXG5jb25zdCBnZXRFaXRoZXJQcm9wID0gKHByb3BBLCBwcm9wQiwgcmVmKSA9PiBlaXRoZXIoXG4gIGdldFByb3BlcnR5Rm5TYWZlKHByb3BBLCByZWYpLFxuICBnZXRQcm9wZXJ0eU9yRGVmRm4ocHJvcEIsIHJlZilcbik7XG5cbmNvbnN0IGdldEV4ZWN1dGVkRm4gPSBjdXJyeUNvbXAoY29tcG9zZShcbiAgVXRpbHMuYnVpbGRBbmRFeGVjdXRlRm4sXG4gIHByb3AoJ2pzJyksXG4gIGdldFByb3BPckRlZlxuKSk7XG5cbmNvbnN0IGdldEJsZW5kRm4gPSBjdXJyeSgocmVmLCBjM3NzKSA9PiBjb21wb3NlKFxuICBkZWZhdWx0VG8oJ292ZXJsYXknKSxcbiAgVGFuZ3JhbVJlZmVyZW5jZS5jaGVja1R5cGUocmVmWydjb21wLW9wJ10pLFxuICBnZXRFeGVjdXRlZEZuKCdjb21wLW9wJylcbikocmVmLCBjM3NzKSk7XG5cbmNvbnN0IGdldENvbG9yRm4gPSAoZmlsbCwgYWxwaGEpID0+IHtcbiAgcmV0dXJuIGNvbXBvc2UoXG4gICAgYXBwbHkoQ29sb3JzLmdldEFscGhhQ29sb3IpLFxuICAgIHZhbHVlcyxcbiAgICBhcHBseVNwZWMoe1xuICAgICAgZmlsbDogZmlsbCxcbiAgICAgIGFscGhhOiBhbHBoYVxuICAgIH0pXG4gICk7XG59O1xuXG5leHBvcnQge1xuICBnZW5lcmF0ZURlZmF1bHRGcm9tUmVmLFxuICBnZXREZWZQcm9wLFxuICBnZXRQcm9wLFxuICBnZXRQcm9wT3JEZWYsXG4gIGdldFByb3BlcnR5Rm4sXG4gIGdldFByb3BlcnR5Rm5TYWZlLFxuICBnZXRQcm9wZXJ0eU9yRGVmRm4sXG4gIGdldEVpdGhlclByb3AsXG4gIGdldEV4ZWN1dGVkRm4sXG4gIGdldEJsZW5kRm4sXG4gIGdldENvbG9yRm5cbn07XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gc3JjL3V0aWxzL3JlZmVyZW5jZS1oZWxwZXJzLmpzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQ0E7QUFDQTs7O0FBQUE7QUFDQTs7O0FBQUE7QUFDQTs7Ozs7QUFFQTs7OztBQUlBO0FBQ0E7QUFDQTs7OztBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFHQTtBQUNBO0FBRUE7QUFHQTtBQUFBO0FBQ0E7QUFFQTtBQUNBO0FBS0E7QUFBQTtBQUFBO0FBQ0E7QUFJQTtBQUNBO0FBS0E7QUFBQTtBQUFBO0FBQ0E7QUFLQTtBQUNBO0FBSUE7QUFDQTtBQUZBO0FBS0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 19 */
/* no static exports found */
/* all exports used */
/*!*************************************************!*\
  !*** ./~/core-js/library/modules/_an-object.js ***!
  \*************************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var isObject = __webpack_require__(/*! ./_is-object */ 30);\nmodule.exports = function(it){\n  if(!isObject(it))throw TypeError(it + ' is not an object!');\n  return it;\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTkuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19hbi1vYmplY3QuanM/MGRhMyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpe1xuICBpZighaXNPYmplY3QoaXQpKXRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGFuIG9iamVjdCEnKTtcbiAgcmV0dXJuIGl0O1xufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2FuLW9iamVjdC5qc1xuLy8gbW9kdWxlIGlkID0gMTlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 20 */
/* no static exports found */
/* all exports used */
/*!***************************************************!*\
  !*** ./~/core-js/library/modules/_descriptors.js ***!
  \***************************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("// Thank's IE8 for his funny defineProperty\nmodule.exports = !__webpack_require__(/*! ./_fails */ 46)(function(){\n  return Object.defineProperty({}, 'a', {get: function(){ return 7; }}).a != 7;\n});//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjAuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19kZXNjcmlwdG9ycy5qcz83MDUxIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIFRoYW5rJ3MgSUU4IGZvciBoaXMgZnVubnkgZGVmaW5lUHJvcGVydHlcbm1vZHVsZS5leHBvcnRzID0gIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24oKXtcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSwgJ2EnLCB7Z2V0OiBmdW5jdGlvbigpeyByZXR1cm4gNzsgfX0pLmEgIT0gNztcbn0pO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZGVzY3JpcHRvcnMuanNcbi8vIG1vZHVsZSBpZCA9IDIwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 21 */
/* no static exports found */
/* all exports used */
/*!*******************************************!*\
  !*** ./~/core-js/library/modules/_has.js ***!
  \*******************************************/
/***/ (function(module, exports) {

eval("var hasOwnProperty = {}.hasOwnProperty;\nmodule.exports = function(it, key){\n  return hasOwnProperty.call(it, key);\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjEuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19oYXMuanM/ZDg1MCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgaGFzT3duUHJvcGVydHkgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQsIGtleSl7XG4gIHJldHVybiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGl0LCBrZXkpO1xufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2hhcy5qc1xuLy8gbW9kdWxlIGlkID0gMjFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 22 */
/* no static exports found */
/* all exports used */
/*!********************************************!*\
  !*** ./~/core-js/library/modules/_hide.js ***!
  \********************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var dP         = __webpack_require__(/*! ./_object-dp */ 23)\n  , createDesc = __webpack_require__(/*! ./_property-desc */ 32);\nmodule.exports = __webpack_require__(/*! ./_descriptors */ 20) ? function(object, key, value){\n  return dP.f(object, key, createDesc(1, value));\n} : function(object, key, value){\n  object[key] = value;\n  return object;\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjIuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19oaWRlLmpzP2E2ZGEiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGRQICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKVxuICAsIGNyZWF0ZURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBmdW5jdGlvbihvYmplY3QsIGtleSwgdmFsdWUpe1xuICByZXR1cm4gZFAuZihvYmplY3QsIGtleSwgY3JlYXRlRGVzYygxLCB2YWx1ZSkpO1xufSA6IGZ1bmN0aW9uKG9iamVjdCwga2V5LCB2YWx1ZSl7XG4gIG9iamVjdFtrZXldID0gdmFsdWU7XG4gIHJldHVybiBvYmplY3Q7XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faGlkZS5qc1xuLy8gbW9kdWxlIGlkID0gMjJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 23 */
/* no static exports found */
/* all exports used */
/*!*************************************************!*\
  !*** ./~/core-js/library/modules/_object-dp.js ***!
  \*************************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var anObject       = __webpack_require__(/*! ./_an-object */ 19)\n  , IE8_DOM_DEFINE = __webpack_require__(/*! ./_ie8-dom-define */ 119)\n  , toPrimitive    = __webpack_require__(/*! ./_to-primitive */ 135)\n  , dP             = Object.defineProperty;\n\nexports.f = __webpack_require__(/*! ./_descriptors */ 20) ? Object.defineProperty : function defineProperty(O, P, Attributes){\n  anObject(O);\n  P = toPrimitive(P, true);\n  anObject(Attributes);\n  if(IE8_DOM_DEFINE)try {\n    return dP(O, P, Attributes);\n  } catch(e){ /* empty */ }\n  if('get' in Attributes || 'set' in Attributes)throw TypeError('Accessors not supported!');\n  if('value' in Attributes)O[P] = Attributes.value;\n  return O;\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtZHAuanM/NDExNiJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgYW5PYmplY3QgICAgICAgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKVxuICAsIElFOF9ET01fREVGSU5FID0gcmVxdWlyZSgnLi9faWU4LWRvbS1kZWZpbmUnKVxuICAsIHRvUHJpbWl0aXZlICAgID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJylcbiAgLCBkUCAgICAgICAgICAgICA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcblxuZXhwb3J0cy5mID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSA6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpe1xuICBhbk9iamVjdChPKTtcbiAgUCA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xuICBhbk9iamVjdChBdHRyaWJ1dGVzKTtcbiAgaWYoSUU4X0RPTV9ERUZJTkUpdHJ5IHtcbiAgICByZXR1cm4gZFAoTywgUCwgQXR0cmlidXRlcyk7XG4gIH0gY2F0Y2goZSl7IC8qIGVtcHR5ICovIH1cbiAgaWYoJ2dldCcgaW4gQXR0cmlidXRlcyB8fCAnc2V0JyBpbiBBdHRyaWJ1dGVzKXRocm93IFR5cGVFcnJvcignQWNjZXNzb3JzIG5vdCBzdXBwb3J0ZWQhJyk7XG4gIGlmKCd2YWx1ZScgaW4gQXR0cmlidXRlcylPW1BdID0gQXR0cmlidXRlcy52YWx1ZTtcbiAgcmV0dXJuIE87XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWRwLmpzXG4vLyBtb2R1bGUgaWQgPSAyM1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 24 */
/* no static exports found */
/* all exports used */
/*!******************************!*\
  !*** ./~/ramda/src/curry.js ***!
  \******************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var _curry1 = __webpack_require__(/*! ./internal/_curry1 */ 2);\nvar curryN = __webpack_require__(/*! ./curryN */ 6);\n\n\n/**\n * Returns a curried equivalent of the provided function. The curried function\n * has two unusual capabilities. First, its arguments needn't be provided one\n * at a time. If `f` is a ternary function and `g` is `R.curry(f)`, the\n * following are equivalent:\n *\n *   - `g(1)(2)(3)`\n *   - `g(1)(2, 3)`\n *   - `g(1, 2)(3)`\n *   - `g(1, 2, 3)`\n *\n * Secondly, the special placeholder value `R.__` may be used to specify\n * \"gaps\", allowing partial application of any combination of arguments,\n * regardless of their positions. If `g` is as above and `_` is `R.__`, the\n * following are equivalent:\n *\n *   - `g(1, 2, 3)`\n *   - `g(_, 2, 3)(1)`\n *   - `g(_, _, 3)(1)(2)`\n *   - `g(_, _, 3)(1, 2)`\n *   - `g(_, 2)(1)(3)`\n *   - `g(_, 2)(1, 3)`\n *   - `g(_, 2)(_, 3)(1)`\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig (* -> a) -> (* -> a)\n * @param {Function} fn The function to curry.\n * @return {Function} A new, curried function.\n * @see R.curryN\n * @example\n *\n *      var addFourNumbers = (a, b, c, d) => a + b + c + d;\n *\n *      var curriedAddFourNumbers = R.curry(addFourNumbers);\n *      var f = curriedAddFourNumbers(1, 2);\n *      var g = f(3);\n *      g(4); //=> 10\n */\nmodule.exports = _curry1(function curry(fn) {\n  return curryN(fn.length, fn);\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjQuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3JhbWRhL3NyYy9jdXJyeS5qcz81NjU1Il0sInNvdXJjZXNDb250ZW50IjpbInZhciBfY3VycnkxID0gcmVxdWlyZSgnLi9pbnRlcm5hbC9fY3VycnkxJyk7XG52YXIgY3VycnlOID0gcmVxdWlyZSgnLi9jdXJyeU4nKTtcblxuXG4vKipcbiAqIFJldHVybnMgYSBjdXJyaWVkIGVxdWl2YWxlbnQgb2YgdGhlIHByb3ZpZGVkIGZ1bmN0aW9uLiBUaGUgY3VycmllZCBmdW5jdGlvblxuICogaGFzIHR3byB1bnVzdWFsIGNhcGFiaWxpdGllcy4gRmlyc3QsIGl0cyBhcmd1bWVudHMgbmVlZG4ndCBiZSBwcm92aWRlZCBvbmVcbiAqIGF0IGEgdGltZS4gSWYgYGZgIGlzIGEgdGVybmFyeSBmdW5jdGlvbiBhbmQgYGdgIGlzIGBSLmN1cnJ5KGYpYCwgdGhlXG4gKiBmb2xsb3dpbmcgYXJlIGVxdWl2YWxlbnQ6XG4gKlxuICogICAtIGBnKDEpKDIpKDMpYFxuICogICAtIGBnKDEpKDIsIDMpYFxuICogICAtIGBnKDEsIDIpKDMpYFxuICogICAtIGBnKDEsIDIsIDMpYFxuICpcbiAqIFNlY29uZGx5LCB0aGUgc3BlY2lhbCBwbGFjZWhvbGRlciB2YWx1ZSBgUi5fX2AgbWF5IGJlIHVzZWQgdG8gc3BlY2lmeVxuICogXCJnYXBzXCIsIGFsbG93aW5nIHBhcnRpYWwgYXBwbGljYXRpb24gb2YgYW55IGNvbWJpbmF0aW9uIG9mIGFyZ3VtZW50cyxcbiAqIHJlZ2FyZGxlc3Mgb2YgdGhlaXIgcG9zaXRpb25zLiBJZiBgZ2AgaXMgYXMgYWJvdmUgYW5kIGBfYCBpcyBgUi5fX2AsIHRoZVxuICogZm9sbG93aW5nIGFyZSBlcXVpdmFsZW50OlxuICpcbiAqICAgLSBgZygxLCAyLCAzKWBcbiAqICAgLSBgZyhfLCAyLCAzKSgxKWBcbiAqICAgLSBgZyhfLCBfLCAzKSgxKSgyKWBcbiAqICAgLSBgZyhfLCBfLCAzKSgxLCAyKWBcbiAqICAgLSBgZyhfLCAyKSgxKSgzKWBcbiAqICAgLSBgZyhfLCAyKSgxLCAzKWBcbiAqICAgLSBgZyhfLCAyKShfLCAzKSgxKWBcbiAqXG4gKiBAZnVuY1xuICogQG1lbWJlck9mIFJcbiAqIEBzaW5jZSB2MC4xLjBcbiAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICogQHNpZyAoKiAtPiBhKSAtPiAoKiAtPiBhKVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGZ1bmN0aW9uIHRvIGN1cnJ5LlxuICogQHJldHVybiB7RnVuY3Rpb259IEEgbmV3LCBjdXJyaWVkIGZ1bmN0aW9uLlxuICogQHNlZSBSLmN1cnJ5TlxuICogQGV4YW1wbGVcbiAqXG4gKiAgICAgIHZhciBhZGRGb3VyTnVtYmVycyA9IChhLCBiLCBjLCBkKSA9PiBhICsgYiArIGMgKyBkO1xuICpcbiAqICAgICAgdmFyIGN1cnJpZWRBZGRGb3VyTnVtYmVycyA9IFIuY3VycnkoYWRkRm91ck51bWJlcnMpO1xuICogICAgICB2YXIgZiA9IGN1cnJpZWRBZGRGb3VyTnVtYmVycygxLCAyKTtcbiAqICAgICAgdmFyIGcgPSBmKDMpO1xuICogICAgICBnKDQpOyAvLz0+IDEwXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gX2N1cnJ5MShmdW5jdGlvbiBjdXJyeShmbikge1xuICByZXR1cm4gY3VycnlOKGZuLmxlbmd0aCwgZm4pO1xufSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcmFtZGEvc3JjL2N1cnJ5LmpzXG4vLyBtb2R1bGUgaWQgPSAyNFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 25 */
/* no static exports found */
/* all exports used */
/*!************************************************!*\
  !*** ./~/ramda/src/internal/_isPlaceholder.js ***!
  \************************************************/
/***/ (function(module, exports) {

eval("module.exports = function _isPlaceholder(a) {\n  return a != null &&\n         typeof a === 'object' &&\n         a['@@functional/placeholder'] === true;\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjUuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3JhbWRhL3NyYy9pbnRlcm5hbC9faXNQbGFjZWhvbGRlci5qcz9lNzQzIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gX2lzUGxhY2Vob2xkZXIoYSkge1xuICByZXR1cm4gYSAhPSBudWxsICYmXG4gICAgICAgICB0eXBlb2YgYSA9PT0gJ29iamVjdCcgJiZcbiAgICAgICAgIGFbJ0BAZnVuY3Rpb25hbC9wbGFjZWhvbGRlciddID09PSB0cnVlO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9yYW1kYS9zcmMvaW50ZXJuYWwvX2lzUGxhY2Vob2xkZXIuanNcbi8vIG1vZHVsZSBpZCA9IDI1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 26 */
/* no static exports found */
/* all exports used */
/*!*******************************!*\
  !*** ./~/ramda/src/reduce.js ***!
  \*******************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var _curry3 = __webpack_require__(/*! ./internal/_curry3 */ 7);\nvar _reduce = __webpack_require__(/*! ./internal/_reduce */ 16);\n\n\n/**\n * Returns a single item by iterating through the list, successively calling\n * the iterator function and passing it an accumulator value and the current\n * value from the array, and then passing the result to the next call.\n *\n * The iterator function receives two values: *(acc, value)*. It may use\n * `R.reduced` to shortcut the iteration.\n *\n * The arguments' order of `reduceRight`'s iterator function is *(value, acc)*.\n *\n * Note: `R.reduce` does not skip deleted or unassigned indices (sparse\n * arrays), unlike the native `Array.prototype.reduce` method. For more details\n * on this behavior, see:\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce#Description\n *\n * Dispatches to the `reduce` method of the third argument, if present.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig ((a, b) -> a) -> a -> [b] -> a\n * @param {Function} fn The iterator function. Receives two values, the accumulator and the\n *        current element from the array.\n * @param {*} acc The accumulator value.\n * @param {Array} list The list to iterate over.\n * @return {*} The final, accumulated value.\n * @see R.reduced, R.addIndex, R.reduceRight\n * @example\n *\n *      R.reduce(R.subtract, 0, [1, 2, 3, 4]) // => ((((0 - 1) - 2) - 3) - 4) = -10\n *                -               -10\n *               / \\              / \\\n *              -   4           -6   4\n *             / \\              / \\\n *            -   3   ==>     -3   3\n *           / \\              / \\\n *          -   2           -1   2\n *         / \\              / \\\n *        0   1            0   1\n *\n * @symb R.reduce(f, a, [b, c, d]) = f(f(f(a, b), c), d)\n */\nmodule.exports = _curry3(_reduce);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjYuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3JhbWRhL3NyYy9yZWR1Y2UuanM/YTA3YyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX2N1cnJ5MyA9IHJlcXVpcmUoJy4vaW50ZXJuYWwvX2N1cnJ5MycpO1xudmFyIF9yZWR1Y2UgPSByZXF1aXJlKCcuL2ludGVybmFsL19yZWR1Y2UnKTtcblxuXG4vKipcbiAqIFJldHVybnMgYSBzaW5nbGUgaXRlbSBieSBpdGVyYXRpbmcgdGhyb3VnaCB0aGUgbGlzdCwgc3VjY2Vzc2l2ZWx5IGNhbGxpbmdcbiAqIHRoZSBpdGVyYXRvciBmdW5jdGlvbiBhbmQgcGFzc2luZyBpdCBhbiBhY2N1bXVsYXRvciB2YWx1ZSBhbmQgdGhlIGN1cnJlbnRcbiAqIHZhbHVlIGZyb20gdGhlIGFycmF5LCBhbmQgdGhlbiBwYXNzaW5nIHRoZSByZXN1bHQgdG8gdGhlIG5leHQgY2FsbC5cbiAqXG4gKiBUaGUgaXRlcmF0b3IgZnVuY3Rpb24gcmVjZWl2ZXMgdHdvIHZhbHVlczogKihhY2MsIHZhbHVlKSouIEl0IG1heSB1c2VcbiAqIGBSLnJlZHVjZWRgIHRvIHNob3J0Y3V0IHRoZSBpdGVyYXRpb24uXG4gKlxuICogVGhlIGFyZ3VtZW50cycgb3JkZXIgb2YgYHJlZHVjZVJpZ2h0YCdzIGl0ZXJhdG9yIGZ1bmN0aW9uIGlzICoodmFsdWUsIGFjYykqLlxuICpcbiAqIE5vdGU6IGBSLnJlZHVjZWAgZG9lcyBub3Qgc2tpcCBkZWxldGVkIG9yIHVuYXNzaWduZWQgaW5kaWNlcyAoc3BhcnNlXG4gKiBhcnJheXMpLCB1bmxpa2UgdGhlIG5hdGl2ZSBgQXJyYXkucHJvdG90eXBlLnJlZHVjZWAgbWV0aG9kLiBGb3IgbW9yZSBkZXRhaWxzXG4gKiBvbiB0aGlzIGJlaGF2aW9yLCBzZWU6XG4gKiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9BcnJheS9yZWR1Y2UjRGVzY3JpcHRpb25cbiAqXG4gKiBEaXNwYXRjaGVzIHRvIHRoZSBgcmVkdWNlYCBtZXRob2Qgb2YgdGhlIHRoaXJkIGFyZ3VtZW50LCBpZiBwcmVzZW50LlxuICpcbiAqIEBmdW5jXG4gKiBAbWVtYmVyT2YgUlxuICogQHNpbmNlIHYwLjEuMFxuICogQGNhdGVnb3J5IExpc3RcbiAqIEBzaWcgKChhLCBiKSAtPiBhKSAtPiBhIC0+IFtiXSAtPiBhXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgaXRlcmF0b3IgZnVuY3Rpb24uIFJlY2VpdmVzIHR3byB2YWx1ZXMsIHRoZSBhY2N1bXVsYXRvciBhbmQgdGhlXG4gKiAgICAgICAgY3VycmVudCBlbGVtZW50IGZyb20gdGhlIGFycmF5LlxuICogQHBhcmFtIHsqfSBhY2MgVGhlIGFjY3VtdWxhdG9yIHZhbHVlLlxuICogQHBhcmFtIHtBcnJheX0gbGlzdCBUaGUgbGlzdCB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcmV0dXJuIHsqfSBUaGUgZmluYWwsIGFjY3VtdWxhdGVkIHZhbHVlLlxuICogQHNlZSBSLnJlZHVjZWQsIFIuYWRkSW5kZXgsIFIucmVkdWNlUmlnaHRcbiAqIEBleGFtcGxlXG4gKlxuICogICAgICBSLnJlZHVjZShSLnN1YnRyYWN0LCAwLCBbMSwgMiwgMywgNF0pIC8vID0+ICgoKCgwIC0gMSkgLSAyKSAtIDMpIC0gNCkgPSAtMTBcbiAqICAgICAgICAgICAgICAgIC0gICAgICAgICAgICAgICAtMTBcbiAqICAgICAgICAgICAgICAgLyBcXCAgICAgICAgICAgICAgLyBcXFxuICogICAgICAgICAgICAgIC0gICA0ICAgICAgICAgICAtNiAgIDRcbiAqICAgICAgICAgICAgIC8gXFwgICAgICAgICAgICAgIC8gXFxcbiAqICAgICAgICAgICAgLSAgIDMgICA9PT4gICAgIC0zICAgM1xuICogICAgICAgICAgIC8gXFwgICAgICAgICAgICAgIC8gXFxcbiAqICAgICAgICAgIC0gICAyICAgICAgICAgICAtMSAgIDJcbiAqICAgICAgICAgLyBcXCAgICAgICAgICAgICAgLyBcXFxuICogICAgICAgIDAgICAxICAgICAgICAgICAgMCAgIDFcbiAqXG4gKiBAc3ltYiBSLnJlZHVjZShmLCBhLCBbYiwgYywgZF0pID0gZihmKGYoYSwgYiksIGMpLCBkKVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IF9jdXJyeTMoX3JlZHVjZSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcmFtZGEvc3JjL3JlZHVjZS5qc1xuLy8gbW9kdWxlIGlkID0gMjZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 27 */
/* no static exports found */
/* all exports used */
/*!************************************!*\
  !*** ./~/carto/lib/carto/index.js ***!
  \************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(process, __dirname) {var util = __webpack_require__(/*! util */ 68),\n    fs = __webpack_require__(/*! fs */ 11),\n    path = __webpack_require__(/*! path */ 12);\n\n\nfunction getVersion() {\n    if (process.browser) {\n        return __webpack_require__(/*! ../../package.json */ 39).version.split('.');\n    } else if (parseInt(process.version.split('.')[1], 10) > 4) {\n        return __webpack_require__(/*! ../../package.json */ 39).version.split('.');\n    } else {\n        // older node\n        var package_json = JSON.parse(fs.readFileSync(path.join(__dirname,'../../package.json')));\n        return package_json.version.split('.');\n    }\n}\n\nvar carto = {\n    version: getVersion(),\n    Parser: __webpack_require__(/*! ./parser */ 82).Parser,\n    Renderer: __webpack_require__(/*! ./renderer */ 83).Renderer,\n    tree: __webpack_require__(/*! ./tree */ 0),\n    RendererJS: __webpack_require__(/*! ./renderer_js */ 84),\n    default_reference: __webpack_require__(/*! ./torque-reference */ 69),\n\n    // @TODO\n    writeError: function(ctx, options) {\n        var message = '';\n        var extract = ctx.extract;\n        var error = [];\n\n        options = options || {};\n\n        if (options.silent) { return; }\n\n        options.indent = options.indent || '';\n\n        if (!('index' in ctx) || !extract) {\n            return util.error(options.indent + (ctx.stack || ctx.message));\n        }\n\n        if (typeof(extract[0]) === 'string') {\n            error.push(stylize((ctx.line - 1) + ' ' + extract[0], 'grey'));\n        }\n\n        if (extract[1] === '' && typeof extract[2] === 'undefined') {\n            extract[1] = '¶';\n        }\n        error.push(ctx.line + ' ' + extract[1].slice(0, ctx.column) +\n            stylize(stylize(extract[1][ctx.column], 'bold') +\n            extract[1].slice(ctx.column + 1), 'yellow'));\n\n        if (typeof(extract[2]) === 'string') {\n            error.push(stylize((ctx.line + 1) + ' ' + extract[2], 'grey'));\n        }\n        error = options.indent + error.join('\\n' + options.indent) + '\\033[0m\\n';\n\n        message = options.indent + message + stylize(ctx.message, 'red');\n        if (ctx.filename) (message += stylize(' in ', 'red') + ctx.filename);\n\n        util.error(message, error);\n\n        if (ctx.callLine) {\n            util.error(stylize('from ', 'red') + (ctx.filename || ''));\n            util.error(stylize(ctx.callLine, 'grey') + ' ' + ctx.callExtract);\n        }\n        if (ctx.stack) { util.error(stylize(ctx.stack, 'red')); }\n    }\n};\n\n__webpack_require__(/*! ./tree/call */ 85);\n__webpack_require__(/*! ./tree/color */ 86);\n__webpack_require__(/*! ./tree/comment */ 87);\n__webpack_require__(/*! ./tree/definition */ 88);\n__webpack_require__(/*! ./tree/dimension */ 89);\n__webpack_require__(/*! ./tree/element */ 90);\n__webpack_require__(/*! ./tree/expression */ 91);\n__webpack_require__(/*! ./tree/filterset */ 94);\n__webpack_require__(/*! ./tree/filter */ 93);\n__webpack_require__(/*! ./tree/field */ 92);\n__webpack_require__(/*! ./tree/keyword */ 99);\n__webpack_require__(/*! ./tree/layer */ 100);\n__webpack_require__(/*! ./tree/literal */ 101);\n__webpack_require__(/*! ./tree/operation */ 102);\n__webpack_require__(/*! ./tree/quoted */ 103);\n__webpack_require__(/*! ./tree/imagefilter */ 97);\n__webpack_require__(/*! ./tree/reference */ 104);\n__webpack_require__(/*! ./tree/rule */ 105);\n__webpack_require__(/*! ./tree/ruleset */ 106);\n__webpack_require__(/*! ./tree/selector */ 107);\n__webpack_require__(/*! ./tree/style */ 108);\n__webpack_require__(/*! ./tree/url */ 109);\n__webpack_require__(/*! ./tree/value */ 110);\n__webpack_require__(/*! ./tree/variable */ 111);\n__webpack_require__(/*! ./tree/zoom */ 112);\n__webpack_require__(/*! ./tree/invalid */ 98);\n__webpack_require__(/*! ./tree/fontset */ 95);\n__webpack_require__(/*! ./tree/frame_offset */ 96);\n__webpack_require__(/*! ./functions */ 81);\n\nfor (var k in carto) { exports[k] = carto[k]; }\n\n// Stylize a string\nfunction stylize(str, style) {\n    var styles = {\n        'bold' : [1, 22],\n        'inverse' : [7, 27],\n        'underline' : [4, 24],\n        'yellow' : [33, 39],\n        'green' : [32, 39],\n        'red' : [31, 39],\n        'grey' : [90, 39]\n    };\n    return '\\033[' + styles[style][0] + 'm' + str +\n           '\\033[' + styles[style][1] + 'm';\n}\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./../../../process/browser.js */ 36), \"/\"))//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjcuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NhcnRvL2xpYi9jYXJ0by9pbmRleC5qcz82ZTQ1Il0sInNvdXJjZXNDb250ZW50IjpbInZhciB1dGlsID0gcmVxdWlyZSgndXRpbCcpLFxuICAgIGZzID0gcmVxdWlyZSgnZnMnKSxcbiAgICBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xuXG5cbmZ1bmN0aW9uIGdldFZlcnNpb24oKSB7XG4gICAgaWYgKHByb2Nlc3MuYnJvd3Nlcikge1xuICAgICAgICByZXR1cm4gcmVxdWlyZSgnLi4vLi4vcGFja2FnZS5qc29uJykudmVyc2lvbi5zcGxpdCgnLicpO1xuICAgIH0gZWxzZSBpZiAocGFyc2VJbnQocHJvY2Vzcy52ZXJzaW9uLnNwbGl0KCcuJylbMV0sIDEwKSA+IDQpIHtcbiAgICAgICAgcmV0dXJuIHJlcXVpcmUoJy4uLy4uL3BhY2thZ2UuanNvbicpLnZlcnNpb24uc3BsaXQoJy4nKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICAvLyBvbGRlciBub2RlXG4gICAgICAgIHZhciBwYWNrYWdlX2pzb24gPSBKU09OLnBhcnNlKGZzLnJlYWRGaWxlU3luYyhwYXRoLmpvaW4oX19kaXJuYW1lLCcuLi8uLi9wYWNrYWdlLmpzb24nKSkpO1xuICAgICAgICByZXR1cm4gcGFja2FnZV9qc29uLnZlcnNpb24uc3BsaXQoJy4nKTtcbiAgICB9XG59XG5cbnZhciBjYXJ0byA9IHtcbiAgICB2ZXJzaW9uOiBnZXRWZXJzaW9uKCksXG4gICAgUGFyc2VyOiByZXF1aXJlKCcuL3BhcnNlcicpLlBhcnNlcixcbiAgICBSZW5kZXJlcjogcmVxdWlyZSgnLi9yZW5kZXJlcicpLlJlbmRlcmVyLFxuICAgIHRyZWU6IHJlcXVpcmUoJy4vdHJlZScpLFxuICAgIFJlbmRlcmVySlM6IHJlcXVpcmUoJy4vcmVuZGVyZXJfanMnKSxcbiAgICBkZWZhdWx0X3JlZmVyZW5jZTogcmVxdWlyZSgnLi90b3JxdWUtcmVmZXJlbmNlJyksXG5cbiAgICAvLyBAVE9ET1xuICAgIHdyaXRlRXJyb3I6IGZ1bmN0aW9uKGN0eCwgb3B0aW9ucykge1xuICAgICAgICB2YXIgbWVzc2FnZSA9ICcnO1xuICAgICAgICB2YXIgZXh0cmFjdCA9IGN0eC5leHRyYWN0O1xuICAgICAgICB2YXIgZXJyb3IgPSBbXTtcblxuICAgICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICAgICAgICBpZiAob3B0aW9ucy5zaWxlbnQpIHsgcmV0dXJuOyB9XG5cbiAgICAgICAgb3B0aW9ucy5pbmRlbnQgPSBvcHRpb25zLmluZGVudCB8fCAnJztcblxuICAgICAgICBpZiAoISgnaW5kZXgnIGluIGN0eCkgfHwgIWV4dHJhY3QpIHtcbiAgICAgICAgICAgIHJldHVybiB1dGlsLmVycm9yKG9wdGlvbnMuaW5kZW50ICsgKGN0eC5zdGFjayB8fCBjdHgubWVzc2FnZSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGVvZihleHRyYWN0WzBdKSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIGVycm9yLnB1c2goc3R5bGl6ZSgoY3R4LmxpbmUgLSAxKSArICcgJyArIGV4dHJhY3RbMF0sICdncmV5JykpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGV4dHJhY3RbMV0gPT09ICcnICYmIHR5cGVvZiBleHRyYWN0WzJdID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgZXh0cmFjdFsxXSA9ICfCtic7XG4gICAgICAgIH1cbiAgICAgICAgZXJyb3IucHVzaChjdHgubGluZSArICcgJyArIGV4dHJhY3RbMV0uc2xpY2UoMCwgY3R4LmNvbHVtbikgK1xuICAgICAgICAgICAgc3R5bGl6ZShzdHlsaXplKGV4dHJhY3RbMV1bY3R4LmNvbHVtbl0sICdib2xkJykgK1xuICAgICAgICAgICAgZXh0cmFjdFsxXS5zbGljZShjdHguY29sdW1uICsgMSksICd5ZWxsb3cnKSk7XG5cbiAgICAgICAgaWYgKHR5cGVvZihleHRyYWN0WzJdKSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIGVycm9yLnB1c2goc3R5bGl6ZSgoY3R4LmxpbmUgKyAxKSArICcgJyArIGV4dHJhY3RbMl0sICdncmV5JykpO1xuICAgICAgICB9XG4gICAgICAgIGVycm9yID0gb3B0aW9ucy5pbmRlbnQgKyBlcnJvci5qb2luKCdcXG4nICsgb3B0aW9ucy5pbmRlbnQpICsgJ1xcMDMzWzBtXFxuJztcblxuICAgICAgICBtZXNzYWdlID0gb3B0aW9ucy5pbmRlbnQgKyBtZXNzYWdlICsgc3R5bGl6ZShjdHgubWVzc2FnZSwgJ3JlZCcpO1xuICAgICAgICBpZiAoY3R4LmZpbGVuYW1lKSAobWVzc2FnZSArPSBzdHlsaXplKCcgaW4gJywgJ3JlZCcpICsgY3R4LmZpbGVuYW1lKTtcblxuICAgICAgICB1dGlsLmVycm9yKG1lc3NhZ2UsIGVycm9yKTtcblxuICAgICAgICBpZiAoY3R4LmNhbGxMaW5lKSB7XG4gICAgICAgICAgICB1dGlsLmVycm9yKHN0eWxpemUoJ2Zyb20gJywgJ3JlZCcpICsgKGN0eC5maWxlbmFtZSB8fCAnJykpO1xuICAgICAgICAgICAgdXRpbC5lcnJvcihzdHlsaXplKGN0eC5jYWxsTGluZSwgJ2dyZXknKSArICcgJyArIGN0eC5jYWxsRXh0cmFjdCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGN0eC5zdGFjaykgeyB1dGlsLmVycm9yKHN0eWxpemUoY3R4LnN0YWNrLCAncmVkJykpOyB9XG4gICAgfVxufTtcblxucmVxdWlyZSgnLi90cmVlL2NhbGwnKTtcbnJlcXVpcmUoJy4vdHJlZS9jb2xvcicpO1xucmVxdWlyZSgnLi90cmVlL2NvbW1lbnQnKTtcbnJlcXVpcmUoJy4vdHJlZS9kZWZpbml0aW9uJyk7XG5yZXF1aXJlKCcuL3RyZWUvZGltZW5zaW9uJyk7XG5yZXF1aXJlKCcuL3RyZWUvZWxlbWVudCcpO1xucmVxdWlyZSgnLi90cmVlL2V4cHJlc3Npb24nKTtcbnJlcXVpcmUoJy4vdHJlZS9maWx0ZXJzZXQnKTtcbnJlcXVpcmUoJy4vdHJlZS9maWx0ZXInKTtcbnJlcXVpcmUoJy4vdHJlZS9maWVsZCcpO1xucmVxdWlyZSgnLi90cmVlL2tleXdvcmQnKTtcbnJlcXVpcmUoJy4vdHJlZS9sYXllcicpO1xucmVxdWlyZSgnLi90cmVlL2xpdGVyYWwnKTtcbnJlcXVpcmUoJy4vdHJlZS9vcGVyYXRpb24nKTtcbnJlcXVpcmUoJy4vdHJlZS9xdW90ZWQnKTtcbnJlcXVpcmUoJy4vdHJlZS9pbWFnZWZpbHRlcicpO1xucmVxdWlyZSgnLi90cmVlL3JlZmVyZW5jZScpO1xucmVxdWlyZSgnLi90cmVlL3J1bGUnKTtcbnJlcXVpcmUoJy4vdHJlZS9ydWxlc2V0Jyk7XG5yZXF1aXJlKCcuL3RyZWUvc2VsZWN0b3InKTtcbnJlcXVpcmUoJy4vdHJlZS9zdHlsZScpO1xucmVxdWlyZSgnLi90cmVlL3VybCcpO1xucmVxdWlyZSgnLi90cmVlL3ZhbHVlJyk7XG5yZXF1aXJlKCcuL3RyZWUvdmFyaWFibGUnKTtcbnJlcXVpcmUoJy4vdHJlZS96b29tJyk7XG5yZXF1aXJlKCcuL3RyZWUvaW52YWxpZCcpO1xucmVxdWlyZSgnLi90cmVlL2ZvbnRzZXQnKTtcbnJlcXVpcmUoJy4vdHJlZS9mcmFtZV9vZmZzZXQnKTtcbnJlcXVpcmUoJy4vZnVuY3Rpb25zJyk7XG5cbmZvciAodmFyIGsgaW4gY2FydG8pIHsgZXhwb3J0c1trXSA9IGNhcnRvW2tdOyB9XG5cbi8vIFN0eWxpemUgYSBzdHJpbmdcbmZ1bmN0aW9uIHN0eWxpemUoc3RyLCBzdHlsZSkge1xuICAgIHZhciBzdHlsZXMgPSB7XG4gICAgICAgICdib2xkJyA6IFsxLCAyMl0sXG4gICAgICAgICdpbnZlcnNlJyA6IFs3LCAyN10sXG4gICAgICAgICd1bmRlcmxpbmUnIDogWzQsIDI0XSxcbiAgICAgICAgJ3llbGxvdycgOiBbMzMsIDM5XSxcbiAgICAgICAgJ2dyZWVuJyA6IFszMiwgMzldLFxuICAgICAgICAncmVkJyA6IFszMSwgMzldLFxuICAgICAgICAnZ3JleScgOiBbOTAsIDM5XVxuICAgIH07XG4gICAgcmV0dXJuICdcXDAzM1snICsgc3R5bGVzW3N0eWxlXVswXSArICdtJyArIHN0ciArXG4gICAgICAgICAgICdcXDAzM1snICsgc3R5bGVzW3N0eWxlXVsxXSArICdtJztcbn1cblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jYXJ0by9saWIvY2FydG8vaW5kZXguanNcbi8vIG1vZHVsZSBpZCA9IDI3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QSIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 28 */
/* no static exports found */
/* all exports used */
/*!********************************************!*\
  !*** ./~/core-js/library/modules/_core.js ***!
  \********************************************/
/***/ (function(module, exports) {

eval("var core = module.exports = {version: '2.4.0'};\nif(typeof __e == 'number')__e = core; // eslint-disable-line no-undef//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjguanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19jb3JlLmpzPzFiNjIiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGNvcmUgPSBtb2R1bGUuZXhwb3J0cyA9IHt2ZXJzaW9uOiAnMi40LjAnfTtcbmlmKHR5cGVvZiBfX2UgPT0gJ251bWJlcicpX19lID0gY29yZTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZlxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fY29yZS5qc1xuLy8gbW9kdWxlIGlkID0gMjhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 29 */
/* no static exports found */
/* all exports used */
/*!***********************************************!*\
  !*** ./~/core-js/library/modules/_defined.js ***!
  \***********************************************/
/***/ (function(module, exports) {

eval("// 7.2.1 RequireObjectCoercible(argument)\nmodule.exports = function(it){\n  if(it == undefined)throw TypeError(\"Can't call method on  \" + it);\n  return it;\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjkuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19kZWZpbmVkLmpzPzQ1ZDMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gNy4yLjEgUmVxdWlyZU9iamVjdENvZXJjaWJsZShhcmd1bWVudClcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpe1xuICBpZihpdCA9PSB1bmRlZmluZWQpdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3QgY2FsbCBtZXRob2Qgb24gIFwiICsgaXQpO1xuICByZXR1cm4gaXQ7XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZGVmaW5lZC5qc1xuLy8gbW9kdWxlIGlkID0gMjlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 30 */
/* no static exports found */
/* all exports used */
/*!*************************************************!*\
  !*** ./~/core-js/library/modules/_is-object.js ***!
  \*************************************************/
/***/ (function(module, exports) {

eval("module.exports = function(it){\n  return typeof it === 'object' ? it !== null : typeof it === 'function';\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzAuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pcy1vYmplY3QuanM/MjRjOCJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXtcbiAgcmV0dXJuIHR5cGVvZiBpdCA9PT0gJ29iamVjdCcgPyBpdCAhPT0gbnVsbCA6IHR5cGVvZiBpdCA9PT0gJ2Z1bmN0aW9uJztcbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pcy1vYmplY3QuanNcbi8vIG1vZHVsZSBpZCA9IDMwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 31 */
/* no static exports found */
/* all exports used */
/*!*************************************************!*\
  !*** ./~/core-js/library/modules/_iterators.js ***!
  \*************************************************/
/***/ (function(module, exports) {

eval("module.exports = {};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzEuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pdGVyYXRvcnMuanM/YWZmNyJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHt9O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faXRlcmF0b3JzLmpzXG4vLyBtb2R1bGUgaWQgPSAzMVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 32 */
/* no static exports found */
/* all exports used */
/*!*****************************************************!*\
  !*** ./~/core-js/library/modules/_property-desc.js ***!
  \*****************************************************/
/***/ (function(module, exports) {

eval("module.exports = function(bitmap, value){\n  return {\n    enumerable  : !(bitmap & 1),\n    configurable: !(bitmap & 2),\n    writable    : !(bitmap & 4),\n    value       : value\n  };\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzIuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19wcm9wZXJ0eS1kZXNjLmpzPzFlODYiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihiaXRtYXAsIHZhbHVlKXtcbiAgcmV0dXJuIHtcbiAgICBlbnVtZXJhYmxlICA6ICEoYml0bWFwICYgMSksXG4gICAgY29uZmlndXJhYmxlOiAhKGJpdG1hcCAmIDIpLFxuICAgIHdyaXRhYmxlICAgIDogIShiaXRtYXAgJiA0KSxcbiAgICB2YWx1ZSAgICAgICA6IHZhbHVlXG4gIH07XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fcHJvcGVydHktZGVzYy5qc1xuLy8gbW9kdWxlIGlkID0gMzJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 33 */
/* no static exports found */
/* all exports used */
/*!**************************************************!*\
  !*** ./~/core-js/library/modules/_shared-key.js ***!
  \**************************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var shared = __webpack_require__(/*! ./_shared */ 48)('keys')\n  , uid    = __webpack_require__(/*! ./_uid */ 52);\nmodule.exports = function(key){\n  return shared[key] || (shared[key] = uid(key));\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19zaGFyZWQta2V5LmpzPzJhNmMiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpKCdrZXlzJylcbiAgLCB1aWQgICAgPSByZXF1aXJlKCcuL191aWQnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oa2V5KXtcbiAgcmV0dXJuIHNoYXJlZFtrZXldIHx8IChzaGFyZWRba2V5XSA9IHVpZChrZXkpKTtcbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19zaGFyZWQta2V5LmpzXG4vLyBtb2R1bGUgaWQgPSAzM1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 34 */
/* no static exports found */
/* all exports used */
/*!**************************************************!*\
  !*** ./~/core-js/library/modules/_to-integer.js ***!
  \**************************************************/
/***/ (function(module, exports) {

eval("// 7.1.4 ToInteger\nvar ceil  = Math.ceil\n  , floor = Math.floor;\nmodule.exports = function(it){\n  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzQuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL190by1pbnRlZ2VyLmpzP2Y2NWYiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gNy4xLjQgVG9JbnRlZ2VyXG52YXIgY2VpbCAgPSBNYXRoLmNlaWxcbiAgLCBmbG9vciA9IE1hdGguZmxvb3I7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXtcbiAgcmV0dXJuIGlzTmFOKGl0ID0gK2l0KSA/IDAgOiAoaXQgPiAwID8gZmxvb3IgOiBjZWlsKShpdCk7XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fdG8taW50ZWdlci5qc1xuLy8gbW9kdWxlIGlkID0gMzRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 35 */
/* no static exports found */
/* all exports used */
/*!**********************!*\
  !*** ./~/md5/md5.js ***!
  \**********************/
/***/ (function(module, exports, __webpack_require__) {

eval("(function(){\r\n  var crypt = __webpack_require__(/*! crypt */ 139),\r\n      utf8 = __webpack_require__(/*! charenc */ 40).utf8,\r\n      isBuffer = __webpack_require__(/*! is-buffer */ 140),\r\n      bin = __webpack_require__(/*! charenc */ 40).bin,\r\n\r\n  // The core\r\n  md5 = function (message, options) {\r\n    // Convert to byte array\r\n    if (message.constructor == String)\r\n      if (options && options.encoding === 'binary')\r\n        message = bin.stringToBytes(message);\r\n      else\r\n        message = utf8.stringToBytes(message);\r\n    else if (isBuffer(message))\r\n      message = Array.prototype.slice.call(message, 0);\r\n    else if (!Array.isArray(message))\r\n      message = message.toString();\r\n    // else, assume byte array already\r\n\r\n    var m = crypt.bytesToWords(message),\r\n        l = message.length * 8,\r\n        a =  1732584193,\r\n        b = -271733879,\r\n        c = -1732584194,\r\n        d =  271733878;\r\n\r\n    // Swap endian\r\n    for (var i = 0; i < m.length; i++) {\r\n      m[i] = ((m[i] <<  8) | (m[i] >>> 24)) & 0x00FF00FF |\r\n             ((m[i] << 24) | (m[i] >>>  8)) & 0xFF00FF00;\r\n    }\r\n\r\n    // Padding\r\n    m[l >>> 5] |= 0x80 << (l % 32);\r\n    m[(((l + 64) >>> 9) << 4) + 14] = l;\r\n\r\n    // Method shortcuts\r\n    var FF = md5._ff,\r\n        GG = md5._gg,\r\n        HH = md5._hh,\r\n        II = md5._ii;\r\n\r\n    for (var i = 0; i < m.length; i += 16) {\r\n\r\n      var aa = a,\r\n          bb = b,\r\n          cc = c,\r\n          dd = d;\r\n\r\n      a = FF(a, b, c, d, m[i+ 0],  7, -680876936);\r\n      d = FF(d, a, b, c, m[i+ 1], 12, -389564586);\r\n      c = FF(c, d, a, b, m[i+ 2], 17,  606105819);\r\n      b = FF(b, c, d, a, m[i+ 3], 22, -1044525330);\r\n      a = FF(a, b, c, d, m[i+ 4],  7, -176418897);\r\n      d = FF(d, a, b, c, m[i+ 5], 12,  1200080426);\r\n      c = FF(c, d, a, b, m[i+ 6], 17, -1473231341);\r\n      b = FF(b, c, d, a, m[i+ 7], 22, -45705983);\r\n      a = FF(a, b, c, d, m[i+ 8],  7,  1770035416);\r\n      d = FF(d, a, b, c, m[i+ 9], 12, -1958414417);\r\n      c = FF(c, d, a, b, m[i+10], 17, -42063);\r\n      b = FF(b, c, d, a, m[i+11], 22, -1990404162);\r\n      a = FF(a, b, c, d, m[i+12],  7,  1804603682);\r\n      d = FF(d, a, b, c, m[i+13], 12, -40341101);\r\n      c = FF(c, d, a, b, m[i+14], 17, -1502002290);\r\n      b = FF(b, c, d, a, m[i+15], 22,  1236535329);\r\n\r\n      a = GG(a, b, c, d, m[i+ 1],  5, -165796510);\r\n      d = GG(d, a, b, c, m[i+ 6],  9, -1069501632);\r\n      c = GG(c, d, a, b, m[i+11], 14,  643717713);\r\n      b = GG(b, c, d, a, m[i+ 0], 20, -373897302);\r\n      a = GG(a, b, c, d, m[i+ 5],  5, -701558691);\r\n      d = GG(d, a, b, c, m[i+10],  9,  38016083);\r\n      c = GG(c, d, a, b, m[i+15], 14, -660478335);\r\n      b = GG(b, c, d, a, m[i+ 4], 20, -405537848);\r\n      a = GG(a, b, c, d, m[i+ 9],  5,  568446438);\r\n      d = GG(d, a, b, c, m[i+14],  9, -1019803690);\r\n      c = GG(c, d, a, b, m[i+ 3], 14, -187363961);\r\n      b = GG(b, c, d, a, m[i+ 8], 20,  1163531501);\r\n      a = GG(a, b, c, d, m[i+13],  5, -1444681467);\r\n      d = GG(d, a, b, c, m[i+ 2],  9, -51403784);\r\n      c = GG(c, d, a, b, m[i+ 7], 14,  1735328473);\r\n      b = GG(b, c, d, a, m[i+12], 20, -1926607734);\r\n\r\n      a = HH(a, b, c, d, m[i+ 5],  4, -378558);\r\n      d = HH(d, a, b, c, m[i+ 8], 11, -2022574463);\r\n      c = HH(c, d, a, b, m[i+11], 16,  1839030562);\r\n      b = HH(b, c, d, a, m[i+14], 23, -35309556);\r\n      a = HH(a, b, c, d, m[i+ 1],  4, -1530992060);\r\n      d = HH(d, a, b, c, m[i+ 4], 11,  1272893353);\r\n      c = HH(c, d, a, b, m[i+ 7], 16, -155497632);\r\n      b = HH(b, c, d, a, m[i+10], 23, -1094730640);\r\n      a = HH(a, b, c, d, m[i+13],  4,  681279174);\r\n      d = HH(d, a, b, c, m[i+ 0], 11, -358537222);\r\n      c = HH(c, d, a, b, m[i+ 3], 16, -722521979);\r\n      b = HH(b, c, d, a, m[i+ 6], 23,  76029189);\r\n      a = HH(a, b, c, d, m[i+ 9],  4, -640364487);\r\n      d = HH(d, a, b, c, m[i+12], 11, -421815835);\r\n      c = HH(c, d, a, b, m[i+15], 16,  530742520);\r\n      b = HH(b, c, d, a, m[i+ 2], 23, -995338651);\r\n\r\n      a = II(a, b, c, d, m[i+ 0],  6, -198630844);\r\n      d = II(d, a, b, c, m[i+ 7], 10,  1126891415);\r\n      c = II(c, d, a, b, m[i+14], 15, -1416354905);\r\n      b = II(b, c, d, a, m[i+ 5], 21, -57434055);\r\n      a = II(a, b, c, d, m[i+12],  6,  1700485571);\r\n      d = II(d, a, b, c, m[i+ 3], 10, -1894986606);\r\n      c = II(c, d, a, b, m[i+10], 15, -1051523);\r\n      b = II(b, c, d, a, m[i+ 1], 21, -2054922799);\r\n      a = II(a, b, c, d, m[i+ 8],  6,  1873313359);\r\n      d = II(d, a, b, c, m[i+15], 10, -30611744);\r\n      c = II(c, d, a, b, m[i+ 6], 15, -1560198380);\r\n      b = II(b, c, d, a, m[i+13], 21,  1309151649);\r\n      a = II(a, b, c, d, m[i+ 4],  6, -145523070);\r\n      d = II(d, a, b, c, m[i+11], 10, -1120210379);\r\n      c = II(c, d, a, b, m[i+ 2], 15,  718787259);\r\n      b = II(b, c, d, a, m[i+ 9], 21, -343485551);\r\n\r\n      a = (a + aa) >>> 0;\r\n      b = (b + bb) >>> 0;\r\n      c = (c + cc) >>> 0;\r\n      d = (d + dd) >>> 0;\r\n    }\r\n\r\n    return crypt.endian([a, b, c, d]);\r\n  };\r\n\r\n  // Auxiliary functions\r\n  md5._ff  = function (a, b, c, d, x, s, t) {\r\n    var n = a + (b & c | ~b & d) + (x >>> 0) + t;\r\n    return ((n << s) | (n >>> (32 - s))) + b;\r\n  };\r\n  md5._gg  = function (a, b, c, d, x, s, t) {\r\n    var n = a + (b & d | c & ~d) + (x >>> 0) + t;\r\n    return ((n << s) | (n >>> (32 - s))) + b;\r\n  };\r\n  md5._hh  = function (a, b, c, d, x, s, t) {\r\n    var n = a + (b ^ c ^ d) + (x >>> 0) + t;\r\n    return ((n << s) | (n >>> (32 - s))) + b;\r\n  };\r\n  md5._ii  = function (a, b, c, d, x, s, t) {\r\n    var n = a + (c ^ (b | ~d)) + (x >>> 0) + t;\r\n    return ((n << s) | (n >>> (32 - s))) + b;\r\n  };\r\n\r\n  // Package private blocksize\r\n  md5._blocksize = 16;\r\n  md5._digestsize = 16;\r\n\r\n  module.exports = function (message, options) {\r\n    if (message === undefined || message === null)\r\n      throw new Error('Illegal argument ' + message);\r\n\r\n    var digestbytes = crypt.wordsToBytes(md5(message, options));\r\n    return options && options.asBytes ? digestbytes :\r\n        options && options.asString ? bin.bytesToString(digestbytes) :\r\n        crypt.bytesToHex(digestbytes);\r\n  };\r\n\r\n})();\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 36 */
/* no static exports found */
/* all exports used */
/*!******************************!*\
  !*** ./~/process/browser.js ***!
  \******************************/
/***/ (function(module, exports) {

eval("// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 37 */
/* no static exports found */
/* all exports used */
/*!******************************************!*\
  !*** ./~/ramda/src/internal/_isArray.js ***!
  \******************************************/
/***/ (function(module, exports) {

eval("/**\n * Tests whether or not an object is an array.\n *\n * @private\n * @param {*} val The object to test.\n * @return {Boolean} `true` if `val` is an array, `false` otherwise.\n * @example\n *\n *      _isArray([]); //=> true\n *      _isArray(null); //=> false\n *      _isArray({}); //=> false\n */\nmodule.exports = Array.isArray || function _isArray(val) {\n  return (val != null &&\n          val.length >= 0 &&\n          Object.prototype.toString.call(val) === '[object Array]');\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzcuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3JhbWRhL3NyYy9pbnRlcm5hbC9faXNBcnJheS5qcz9iNmM3Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVGVzdHMgd2hldGhlciBvciBub3QgYW4gb2JqZWN0IGlzIGFuIGFycmF5LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgb2JqZWN0IHRvIHRlc3QuXG4gKiBAcmV0dXJuIHtCb29sZWFufSBgdHJ1ZWAgaWYgYHZhbGAgaXMgYW4gYXJyYXksIGBmYWxzZWAgb3RoZXJ3aXNlLlxuICogQGV4YW1wbGVcbiAqXG4gKiAgICAgIF9pc0FycmF5KFtdKTsgLy89PiB0cnVlXG4gKiAgICAgIF9pc0FycmF5KG51bGwpOyAvLz0+IGZhbHNlXG4gKiAgICAgIF9pc0FycmF5KHt9KTsgLy89PiBmYWxzZVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gX2lzQXJyYXkodmFsKSB7XG4gIHJldHVybiAodmFsICE9IG51bGwgJiZcbiAgICAgICAgICB2YWwubGVuZ3RoID49IDAgJiZcbiAgICAgICAgICBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgQXJyYXldJyk7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3JhbWRhL3NyYy9pbnRlcm5hbC9faXNBcnJheS5qc1xuLy8gbW9kdWxlIGlkID0gMzdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 38 */
/* no static exports found */
/* all exports used */
/*!****************************!*\
  !*** ./src/utils/utils.js ***!
  \****************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n\t\tvalue: true\n});\n\nvar _split = __webpack_require__(/*! ramda/src/split */ 189);\n\nvar _split2 = _interopRequireDefault(_split);\n\nvar _reduce = __webpack_require__(/*! ramda/src/reduce */ 26);\n\nvar _reduce2 = _interopRequireDefault(_reduce);\n\nvar _map = __webpack_require__(/*! ramda/src/map */ 8);\n\nvar _map2 = _interopRequireDefault(_map);\n\nvar _replace = __webpack_require__(/*! ramda/src/replace */ 186);\n\nvar _replace2 = _interopRequireDefault(_replace);\n\nvar _compose = __webpack_require__(/*! ramda/src/compose */ 13);\n\nvar _compose2 = _interopRequireDefault(_compose);\n\nvar _toConsumableArray2 = __webpack_require__(/*! babel-runtime/helpers/toConsumableArray */ 80);\n\nvar _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);\n\nvar _curry = __webpack_require__(/*! ramda/src/curry */ 24);\n\nvar _curry2 = _interopRequireDefault(_curry);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar Utils = {};\n\nexports.default = Utils;\n\n\nvar geometries = {\n\t\t'1': '\"point\"',\n\t\t'2': '\"line\"',\n\t\t'3': '\"polygon\"'\n};\n\nUtils.curryCompose3 = function (compose) {\n\t\treturn (0, _curry2.default)(function (a, b, c) {\n\t\t\t\treturn compose(a, b, c);\n\t\t});\n};\n\nUtils.wrapCodeInFunction = function (innerCode) {\n\t\tvar attr = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [' '];\n\n\t\tattr = attr.join(',');\n\n\t\treturn ('function (' + attr + ') {\\n\\t\\t\\t\\tvar _value = null;\\n\\t\\t\\t\\t' + innerCode + '\\n\\t\\t\\t\\treturn _value;\\n\\t\\t\\t}').replace(/(\\t)/g, '');\n};\n\nUtils.functionString = function (fn) {\n\t\tvar args = fn.substring(fn.indexOf('(') + 1, fn.indexOf(')')).replace(/\\s/g, '');\n\n\t\targs = args ? args.split(',') : [];\n\n\t\tvar body = fn.substring(fn.indexOf('{') + 1, fn.lastIndexOf('}'));\n\t\tvar func = new (Function.prototype.bind.apply(Function, [null].concat((0, _toConsumableArray3.default)(args), [body])))();\n\n\t\tfunc.toString = function () {\n\t\t\t\treturn fn;\n\t\t};\n\n\t\treturn func;\n};\n\nUtils.transpile2Tangram = (0, _compose2.default)((0, _replace2.default)(/ctx.zoom/g, '$zoom'), (0, _replace2.default)(/data\\[/g, 'feature['), (0, _replace2.default)(/data\\['mapnik::geometry_type'\\] === (\\d)/g, function ($0, $1) {\n\t\treturn '$geometry === ' + geometries[$1];\n}));\n\nUtils.buildCCSSFn = function (js, attr) {\n\t\tvar fn = '';\n\n\t\tfor (var i = 0; i < js.length; i++) {\n\t\t\t\tfn += Utils.transpile2Tangram(js[i]);\n\t\t}\n\n\t\treturn Utils.functionString(Utils.wrapCodeInFunction(fn, attr));\n};\n\nUtils.cleanForExecuting = (0, _replace2.default)(/data\\['.*'\\] (===|>|<|>=|<=) ('?(.+)(?='|\\)| &&))/g, 'true');\n\nUtils.buildAndExecuteFn = function (js) {\n\t\treturn Utils.buildCCSSFn((0, _map2.default)(Utils.cleanForExecuting, js), ['$zoom'])(10);\n};\n\nUtils.generateDefault = function (val) {\n\t\treturn 'return ' + val + ';';\n};\n\nUtils.pick = (0, _curry2.default)(function (path, obj) {\n\t\treturn (0, _reduce2.default)(function (accumulator, key) {\n\t\t\t\treturn accumulator[key];\n\t\t}, obj, (0, _split2.default)('.', path));\n});//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzguanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL3V0aWxzL3V0aWxzLmpzP2JlNzMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3VycnksIGNvbXBvc2UsIHJlcGxhY2UsIHJlZHVjZSwgc3BsaXQsIG1hcCB9IGZyb20gJ3JhbWRhJztcblxudmFyIFV0aWxzID0ge307XG5cbmV4cG9ydCBkZWZhdWx0IFV0aWxzO1xuXG5jb25zdCBnZW9tZXRyaWVzID0ge1xuICAnMSc6ICdcInBvaW50XCInLFxuICAnMic6ICdcImxpbmVcIicsXG4gICczJzogJ1wicG9seWdvblwiJ1xufTtcblxuVXRpbHMuY3VycnlDb21wb3NlMyA9IGZ1bmN0aW9uIChjb21wb3NlKSB7XG4gIHJldHVybiBjdXJyeSgoYSxiLGMpID0+IGNvbXBvc2UoYSxiLGMpKTtcbn07XG5cblV0aWxzLndyYXBDb2RlSW5GdW5jdGlvbiA9IGZ1bmN0aW9uKGlubmVyQ29kZSwgYXR0ciA9IFsnICddKSB7XG5cdGF0dHIgPSBhdHRyLmpvaW4oJywnKTtcblxuXHRyZXR1cm4gYGZ1bmN0aW9uICgke2F0dHJ9KSB7XG5cdFx0XHRcdHZhciBfdmFsdWUgPSBudWxsO1xuXHRcdFx0XHQke2lubmVyQ29kZX1cblx0XHRcdFx0cmV0dXJuIF92YWx1ZTtcblx0XHRcdH1gLnJlcGxhY2UoLyhcXHQpL2csICcnKTtcbn07XG5cblV0aWxzLmZ1bmN0aW9uU3RyaW5nID0gZnVuY3Rpb24oZm4pIHtcblx0bGV0IGFyZ3MgPSBmblxuXHRcdFx0LnN1YnN0cmluZyggZm4uaW5kZXhPZignKCcpICsgMSwgZm4uaW5kZXhPZignKScpIClcblx0XHRcdC5yZXBsYWNlKC9cXHMvZywgJycpO1xuXG5cdGFyZ3MgPSBhcmdzID8gYXJncy5zcGxpdCgnLCcpIDogW107XG5cblx0bGV0IGJvZHkgPSBmbi5zdWJzdHJpbmcoIGZuLmluZGV4T2YoJ3snKSArIDEsIGZuLmxhc3RJbmRleE9mKCd9JykpO1xuXHRsZXQgZnVuYyA9IG5ldyBGdW5jdGlvbiguLi5hcmdzLCBib2R5KTtcblxuXHRmdW5jLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGZuO1xuXHR9O1xuXG5cdHJldHVybiBmdW5jO1xufTtcblxuVXRpbHMudHJhbnNwaWxlMlRhbmdyYW0gPSBjb21wb3NlKFxuICByZXBsYWNlKC9jdHguem9vbS9nLCAnJHpvb20nKSxcbiAgcmVwbGFjZSgvZGF0YVxcWy9nLCAnZmVhdHVyZVsnKSxcbiAgcmVwbGFjZSgvZGF0YVxcWydtYXBuaWs6Omdlb21ldHJ5X3R5cGUnXFxdID09PSAoXFxkKS9nLCAoJDAsICQxKSA9PiB7XG4gICAgcmV0dXJuICckZ2VvbWV0cnkgPT09ICcgKyBnZW9tZXRyaWVzWyQxXTtcbiAgfSlcbik7XG5cblV0aWxzLmJ1aWxkQ0NTU0ZuID0gZnVuY3Rpb24oanMsIGF0dHIpIHtcblx0bGV0IGZuID0gJyc7XG5cblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBqcy5sZW5ndGg7IGkrKykge1xuXHRcdGZuICs9IFV0aWxzLnRyYW5zcGlsZTJUYW5ncmFtKGpzW2ldKTtcblx0fVxuXG5cdHJldHVybiBVdGlscy5mdW5jdGlvblN0cmluZyhVdGlscy53cmFwQ29kZUluRnVuY3Rpb24oZm4sIGF0dHIpKTtcbn07XG5cblV0aWxzLmNsZWFuRm9yRXhlY3V0aW5nID0gcmVwbGFjZSgvZGF0YVxcWycuKidcXF0gKD09PXw+fDx8Pj18PD0pICgnPyguKykoPz0nfFxcKXwgJiYpKS9nLCAndHJ1ZScpO1xuXG5VdGlscy5idWlsZEFuZEV4ZWN1dGVGbiA9ICBmdW5jdGlvbiAoanMpIHtcbiAgcmV0dXJuIFV0aWxzLmJ1aWxkQ0NTU0ZuKFxuICAgIG1hcChcbiAgICAgIFV0aWxzLmNsZWFuRm9yRXhlY3V0aW5nLFxuICAgICAganNcbiAgICAgICksXG4gICAgICBbJyR6b29tJ11cbiAgICApKDEwKTtcbn07XG5cblV0aWxzLmdlbmVyYXRlRGVmYXVsdCA9IGZ1bmN0aW9uKHZhbCkge1xuXHRyZXR1cm4gYHJldHVybiAke3ZhbH07YDtcbn07XG5cblV0aWxzLnBpY2sgPSBjdXJyeSgocGF0aCwgb2JqKSA9PiB7XG4gIHJldHVybiByZWR1Y2UoKGFjY3VtdWxhdG9yLCBrZXkpID0+IHtcbiAgICByZXR1cm4gYWNjdW11bGF0b3Jba2V5XTtcbiAgfSwgb2JqLCBzcGxpdCgnLicsIHBhdGgpKTtcbn0pO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIHNyYy91dGlscy91dGlscy5qcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBSEE7QUFDQTtBQUtBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUlBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFPQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 39 */
/* no static exports found */
/* all exports used */
/*!******************************!*\
  !*** ./~/carto/package.json ***!
  \******************************/
/***/ (function(module, exports) {

eval("module.exports = {\n\t\"name\": \"carto\",\n\t\"version\": \"0.15.1-cdb3\",\n\t\"description\": \"CartoCSS Stylesheet Compiler\",\n\t\"url\": \"https://github.com/cartodb/carto\",\n\t\"repository\": {\n\t\t\"type\": \"git\",\n\t\t\"url\": \"http://github.com/cartodb/carto.git\"\n\t},\n\t\"author\": {\n\t\t\"name\": \"CartoDB\",\n\t\t\"url\": \"http://cartodb.com/\"\n\t},\n\t\"keywords\": [\n\t\t\"maps\",\n\t\t\"css\",\n\t\t\"stylesheets\"\n\t],\n\t\"contributors\": [\n\t\t\"Tom MacWright <macwright@gmail.com>\",\n\t\t\"Konstantin Käfer\",\n\t\t\"Alexis Sellier <self@cloudhead.net>\",\n\t\t\"Raul Ochoa <rochoa@cartodb.com>\",\n\t\t\"Javi Santana <jsantana@cartodb.com>\"\n\t],\n\t\"licenses\": [\n\t\t{\n\t\t\t\"type\": \"Apache\"\n\t\t}\n\t],\n\t\"bin\": {\n\t\t\"carto\": \"./bin/carto\"\n\t},\n\t\"man\": \"./man/carto.1\",\n\t\"main\": \"./lib/carto/index\",\n\t\"engines\": {\n\t\t\"node\": \">=0.4.x\"\n\t},\n\t\"dependencies\": {\n\t\t\"underscore\": \"1.8.3\",\n\t\t\"mapnik-reference\": \"~6.0.2\",\n\t\t\"optimist\": \"~0.6.0\"\n\t},\n\t\"devDependencies\": {\n\t\t\"mocha\": \"1.12.x\",\n\t\t\"jshint\": \"0.2.x\",\n\t\t\"sax\": \"0.1.x\",\n\t\t\"istanbul\": \"~0.2.14\",\n\t\t\"coveralls\": \"~2.10.1\",\n\t\t\"browserify\": \"~7.0.0\",\n\t\t\"uglify-js\": \"1.3.3\"\n\t},\n\t\"scripts\": {\n\t\t\"pretest\": \"npm install\",\n\t\t\"test\": \"mocha -R spec\",\n\t\t\"coverage\": \"istanbul cover ./node_modules/.bin/_mocha && coveralls < ./coverage/lcov.info\"\n\t}\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzkuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NhcnRvL3BhY2thZ2UuanNvbj85YmEyIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0ge1xuXHRcIm5hbWVcIjogXCJjYXJ0b1wiLFxuXHRcInZlcnNpb25cIjogXCIwLjE1LjEtY2RiM1wiLFxuXHRcImRlc2NyaXB0aW9uXCI6IFwiQ2FydG9DU1MgU3R5bGVzaGVldCBDb21waWxlclwiLFxuXHRcInVybFwiOiBcImh0dHBzOi8vZ2l0aHViLmNvbS9jYXJ0b2RiL2NhcnRvXCIsXG5cdFwicmVwb3NpdG9yeVwiOiB7XG5cdFx0XCJ0eXBlXCI6IFwiZ2l0XCIsXG5cdFx0XCJ1cmxcIjogXCJodHRwOi8vZ2l0aHViLmNvbS9jYXJ0b2RiL2NhcnRvLmdpdFwiXG5cdH0sXG5cdFwiYXV0aG9yXCI6IHtcblx0XHRcIm5hbWVcIjogXCJDYXJ0b0RCXCIsXG5cdFx0XCJ1cmxcIjogXCJodHRwOi8vY2FydG9kYi5jb20vXCJcblx0fSxcblx0XCJrZXl3b3Jkc1wiOiBbXG5cdFx0XCJtYXBzXCIsXG5cdFx0XCJjc3NcIixcblx0XHRcInN0eWxlc2hlZXRzXCJcblx0XSxcblx0XCJjb250cmlidXRvcnNcIjogW1xuXHRcdFwiVG9tIE1hY1dyaWdodCA8bWFjd3JpZ2h0QGdtYWlsLmNvbT5cIixcblx0XHRcIktvbnN0YW50aW4gS8OkZmVyXCIsXG5cdFx0XCJBbGV4aXMgU2VsbGllciA8c2VsZkBjbG91ZGhlYWQubmV0PlwiLFxuXHRcdFwiUmF1bCBPY2hvYSA8cm9jaG9hQGNhcnRvZGIuY29tPlwiLFxuXHRcdFwiSmF2aSBTYW50YW5hIDxqc2FudGFuYUBjYXJ0b2RiLmNvbT5cIlxuXHRdLFxuXHRcImxpY2Vuc2VzXCI6IFtcblx0XHR7XG5cdFx0XHRcInR5cGVcIjogXCJBcGFjaGVcIlxuXHRcdH1cblx0XSxcblx0XCJiaW5cIjoge1xuXHRcdFwiY2FydG9cIjogXCIuL2Jpbi9jYXJ0b1wiXG5cdH0sXG5cdFwibWFuXCI6IFwiLi9tYW4vY2FydG8uMVwiLFxuXHRcIm1haW5cIjogXCIuL2xpYi9jYXJ0by9pbmRleFwiLFxuXHRcImVuZ2luZXNcIjoge1xuXHRcdFwibm9kZVwiOiBcIj49MC40LnhcIlxuXHR9LFxuXHRcImRlcGVuZGVuY2llc1wiOiB7XG5cdFx0XCJ1bmRlcnNjb3JlXCI6IFwiMS44LjNcIixcblx0XHRcIm1hcG5pay1yZWZlcmVuY2VcIjogXCJ+Ni4wLjJcIixcblx0XHRcIm9wdGltaXN0XCI6IFwifjAuNi4wXCJcblx0fSxcblx0XCJkZXZEZXBlbmRlbmNpZXNcIjoge1xuXHRcdFwibW9jaGFcIjogXCIxLjEyLnhcIixcblx0XHRcImpzaGludFwiOiBcIjAuMi54XCIsXG5cdFx0XCJzYXhcIjogXCIwLjEueFwiLFxuXHRcdFwiaXN0YW5idWxcIjogXCJ+MC4yLjE0XCIsXG5cdFx0XCJjb3ZlcmFsbHNcIjogXCJ+Mi4xMC4xXCIsXG5cdFx0XCJicm93c2VyaWZ5XCI6IFwifjcuMC4wXCIsXG5cdFx0XCJ1Z2xpZnktanNcIjogXCIxLjMuM1wiXG5cdH0sXG5cdFwic2NyaXB0c1wiOiB7XG5cdFx0XCJwcmV0ZXN0XCI6IFwibnBtIGluc3RhbGxcIixcblx0XHRcInRlc3RcIjogXCJtb2NoYSAtUiBzcGVjXCIsXG5cdFx0XCJjb3ZlcmFnZVwiOiBcImlzdGFuYnVsIGNvdmVyIC4vbm9kZV9tb2R1bGVzLy5iaW4vX21vY2hhICYmIGNvdmVyYWxscyA8IC4vY292ZXJhZ2UvbGNvdi5pbmZvXCJcblx0fVxufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY2FydG8vcGFja2FnZS5qc29uXG4vLyBtb2R1bGUgaWQgPSAzOVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 40 */
/* no static exports found */
/* all exports used */
/*!******************************!*\
  !*** ./~/charenc/charenc.js ***!
  \******************************/
/***/ (function(module, exports) {

eval("var charenc = {\n  // UTF-8 encoding\n  utf8: {\n    // Convert a string to a byte array\n    stringToBytes: function(str) {\n      return charenc.bin.stringToBytes(unescape(encodeURIComponent(str)));\n    },\n\n    // Convert a byte array to a string\n    bytesToString: function(bytes) {\n      return decodeURIComponent(escape(charenc.bin.bytesToString(bytes)));\n    }\n  },\n\n  // Binary encoding\n  bin: {\n    // Convert a string to a byte array\n    stringToBytes: function(str) {\n      for (var bytes = [], i = 0; i < str.length; i++)\n        bytes.push(str.charCodeAt(i) & 0xFF);\n      return bytes;\n    },\n\n    // Convert a byte array to a string\n    bytesToString: function(bytes) {\n      for (var str = [], i = 0; i < bytes.length; i++)\n        str.push(String.fromCharCode(bytes[i]));\n      return str.join('');\n    }\n  }\n};\n\nmodule.exports = charenc;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDAuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NoYXJlbmMvY2hhcmVuYy5qcz9lZjRiIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBjaGFyZW5jID0ge1xuICAvLyBVVEYtOCBlbmNvZGluZ1xuICB1dGY4OiB7XG4gICAgLy8gQ29udmVydCBhIHN0cmluZyB0byBhIGJ5dGUgYXJyYXlcbiAgICBzdHJpbmdUb0J5dGVzOiBmdW5jdGlvbihzdHIpIHtcbiAgICAgIHJldHVybiBjaGFyZW5jLmJpbi5zdHJpbmdUb0J5dGVzKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChzdHIpKSk7XG4gICAgfSxcblxuICAgIC8vIENvbnZlcnQgYSBieXRlIGFycmF5IHRvIGEgc3RyaW5nXG4gICAgYnl0ZXNUb1N0cmluZzogZnVuY3Rpb24oYnl0ZXMpIHtcbiAgICAgIHJldHVybiBkZWNvZGVVUklDb21wb25lbnQoZXNjYXBlKGNoYXJlbmMuYmluLmJ5dGVzVG9TdHJpbmcoYnl0ZXMpKSk7XG4gICAgfVxuICB9LFxuXG4gIC8vIEJpbmFyeSBlbmNvZGluZ1xuICBiaW46IHtcbiAgICAvLyBDb252ZXJ0IGEgc3RyaW5nIHRvIGEgYnl0ZSBhcnJheVxuICAgIHN0cmluZ1RvQnl0ZXM6IGZ1bmN0aW9uKHN0cikge1xuICAgICAgZm9yICh2YXIgYnl0ZXMgPSBbXSwgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyBpKyspXG4gICAgICAgIGJ5dGVzLnB1c2goc3RyLmNoYXJDb2RlQXQoaSkgJiAweEZGKTtcbiAgICAgIHJldHVybiBieXRlcztcbiAgICB9LFxuXG4gICAgLy8gQ29udmVydCBhIGJ5dGUgYXJyYXkgdG8gYSBzdHJpbmdcbiAgICBieXRlc1RvU3RyaW5nOiBmdW5jdGlvbihieXRlcykge1xuICAgICAgZm9yICh2YXIgc3RyID0gW10sIGkgPSAwOyBpIDwgYnl0ZXMubGVuZ3RoOyBpKyspXG4gICAgICAgIHN0ci5wdXNoKFN0cmluZy5mcm9tQ2hhckNvZGUoYnl0ZXNbaV0pKTtcbiAgICAgIHJldHVybiBzdHIuam9pbignJyk7XG4gICAgfVxuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGNoYXJlbmM7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY2hhcmVuYy9jaGFyZW5jLmpzXG4vLyBtb2R1bGUgaWQgPSA0MFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 41 */
/* no static exports found */
/* all exports used */
/*!*******************************************!*\
  !*** ./~/core-js/library/modules/_cof.js ***!
  \*******************************************/
/***/ (function(module, exports) {

eval("var toString = {}.toString;\n\nmodule.exports = function(it){\n  return toString.call(it).slice(8, -1);\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDEuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19jb2YuanM/NDhlYSJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgdG9TdHJpbmcgPSB7fS50b1N0cmluZztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKGl0KS5zbGljZSg4LCAtMSk7XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fY29mLmpzXG4vLyBtb2R1bGUgaWQgPSA0MVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 42 */
/* no static exports found */
/* all exports used */
/*!*******************************************!*\
  !*** ./~/core-js/library/modules/_ctx.js ***!
  \*******************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("// optional / simple context binding\nvar aFunction = __webpack_require__(/*! ./_a-function */ 114);\nmodule.exports = function(fn, that, length){\n  aFunction(fn);\n  if(that === undefined)return fn;\n  switch(length){\n    case 1: return function(a){\n      return fn.call(that, a);\n    };\n    case 2: return function(a, b){\n      return fn.call(that, a, b);\n    };\n    case 3: return function(a, b, c){\n      return fn.call(that, a, b, c);\n    };\n  }\n  return function(/* ...args */){\n    return fn.apply(that, arguments);\n  };\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDIuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19jdHguanM/Y2UwMCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBvcHRpb25hbCAvIHNpbXBsZSBjb250ZXh0IGJpbmRpbmdcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGZuLCB0aGF0LCBsZW5ndGgpe1xuICBhRnVuY3Rpb24oZm4pO1xuICBpZih0aGF0ID09PSB1bmRlZmluZWQpcmV0dXJuIGZuO1xuICBzd2l0Y2gobGVuZ3RoKXtcbiAgICBjYXNlIDE6IHJldHVybiBmdW5jdGlvbihhKXtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEpO1xuICAgIH07XG4gICAgY2FzZSAyOiByZXR1cm4gZnVuY3Rpb24oYSwgYil7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhLCBiKTtcbiAgICB9O1xuICAgIGNhc2UgMzogcmV0dXJuIGZ1bmN0aW9uKGEsIGIsIGMpe1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYiwgYyk7XG4gICAgfTtcbiAgfVxuICByZXR1cm4gZnVuY3Rpb24oLyogLi4uYXJncyAqLyl7XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoYXQsIGFyZ3VtZW50cyk7XG4gIH07XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fY3R4LmpzXG4vLyBtb2R1bGUgaWQgPSA0MlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 43 */
/* no static exports found */
/* all exports used */
/*!**************************************************!*\
  !*** ./~/core-js/library/modules/_dom-create.js ***!
  \**************************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var isObject = __webpack_require__(/*! ./_is-object */ 30)\n  , document = __webpack_require__(/*! ./_global */ 10).document\n  // in old IE typeof document.createElement is 'object'\n  , is = isObject(document) && isObject(document.createElement);\nmodule.exports = function(it){\n  return is ? document.createElement(it) : {};\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19kb20tY3JlYXRlLmpzP2FiNDQiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0JylcbiAgLCBkb2N1bWVudCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLmRvY3VtZW50XG4gIC8vIGluIG9sZCBJRSB0eXBlb2YgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCBpcyAnb2JqZWN0J1xuICAsIGlzID0gaXNPYmplY3QoZG9jdW1lbnQpICYmIGlzT2JqZWN0KGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7XG4gIHJldHVybiBpcyA/IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoaXQpIDoge307XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZG9tLWNyZWF0ZS5qc1xuLy8gbW9kdWxlIGlkID0gNDNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 44 */
/* no static exports found */
/* all exports used */
/*!*****************************************************!*\
  !*** ./~/core-js/library/modules/_enum-bug-keys.js ***!
  \*****************************************************/
/***/ (function(module, exports) {

eval("// IE 8- don't enum bug keys\nmodule.exports = (\n  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'\n).split(',');//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDQuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19lbnVtLWJ1Zy1rZXlzLmpzPzc1OTgiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gSUUgOC0gZG9uJ3QgZW51bSBidWcga2V5c1xubW9kdWxlLmV4cG9ydHMgPSAoXG4gICdjb25zdHJ1Y3RvcixoYXNPd25Qcm9wZXJ0eSxpc1Byb3RvdHlwZU9mLHByb3BlcnR5SXNFbnVtZXJhYmxlLHRvTG9jYWxlU3RyaW5nLHRvU3RyaW5nLHZhbHVlT2YnXG4pLnNwbGl0KCcsJyk7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19lbnVtLWJ1Zy1rZXlzLmpzXG4vLyBtb2R1bGUgaWQgPSA0NFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 45 */
/* no static exports found */
/* all exports used */
/*!**********************************************!*\
  !*** ./~/core-js/library/modules/_export.js ***!
  \**********************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var global    = __webpack_require__(/*! ./_global */ 10)\n  , core      = __webpack_require__(/*! ./_core */ 28)\n  , ctx       = __webpack_require__(/*! ./_ctx */ 42)\n  , hide      = __webpack_require__(/*! ./_hide */ 22)\n  , PROTOTYPE = 'prototype';\n\nvar $export = function(type, name, source){\n  var IS_FORCED = type & $export.F\n    , IS_GLOBAL = type & $export.G\n    , IS_STATIC = type & $export.S\n    , IS_PROTO  = type & $export.P\n    , IS_BIND   = type & $export.B\n    , IS_WRAP   = type & $export.W\n    , exports   = IS_GLOBAL ? core : core[name] || (core[name] = {})\n    , expProto  = exports[PROTOTYPE]\n    , target    = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE]\n    , key, own, out;\n  if(IS_GLOBAL)source = name;\n  for(key in source){\n    // contains in native\n    own = !IS_FORCED && target && target[key] !== undefined;\n    if(own && key in exports)continue;\n    // export native or passed\n    out = own ? target[key] : source[key];\n    // prevent global pollution for namespaces\n    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]\n    // bind timers to global for call from export context\n    : IS_BIND && own ? ctx(out, global)\n    // wrap global constructors for prevent change them in library\n    : IS_WRAP && target[key] == out ? (function(C){\n      var F = function(a, b, c){\n        if(this instanceof C){\n          switch(arguments.length){\n            case 0: return new C;\n            case 1: return new C(a);\n            case 2: return new C(a, b);\n          } return new C(a, b, c);\n        } return C.apply(this, arguments);\n      };\n      F[PROTOTYPE] = C[PROTOTYPE];\n      return F;\n    // make static versions for prototype methods\n    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;\n    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%\n    if(IS_PROTO){\n      (exports.virtual || (exports.virtual = {}))[key] = out;\n      // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%\n      if(type & $export.R && expProto && !expProto[key])hide(expProto, key, out);\n    }\n  }\n};\n// type bitmap\n$export.F = 1;   // forced\n$export.G = 2;   // global\n$export.S = 4;   // static\n$export.P = 8;   // proto\n$export.B = 16;  // bind\n$export.W = 32;  // wrap\n$export.U = 64;  // safe\n$export.R = 128; // real proto method for `library` \nmodule.exports = $export;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDUuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19leHBvcnQuanM/ZWNlMiJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZ2xvYmFsICAgID0gcmVxdWlyZSgnLi9fZ2xvYmFsJylcbiAgLCBjb3JlICAgICAgPSByZXF1aXJlKCcuL19jb3JlJylcbiAgLCBjdHggICAgICAgPSByZXF1aXJlKCcuL19jdHgnKVxuICAsIGhpZGUgICAgICA9IHJlcXVpcmUoJy4vX2hpZGUnKVxuICAsIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xuXG52YXIgJGV4cG9ydCA9IGZ1bmN0aW9uKHR5cGUsIG5hbWUsIHNvdXJjZSl7XG4gIHZhciBJU19GT1JDRUQgPSB0eXBlICYgJGV4cG9ydC5GXG4gICAgLCBJU19HTE9CQUwgPSB0eXBlICYgJGV4cG9ydC5HXG4gICAgLCBJU19TVEFUSUMgPSB0eXBlICYgJGV4cG9ydC5TXG4gICAgLCBJU19QUk9UTyAgPSB0eXBlICYgJGV4cG9ydC5QXG4gICAgLCBJU19CSU5EICAgPSB0eXBlICYgJGV4cG9ydC5CXG4gICAgLCBJU19XUkFQICAgPSB0eXBlICYgJGV4cG9ydC5XXG4gICAgLCBleHBvcnRzICAgPSBJU19HTE9CQUwgPyBjb3JlIDogY29yZVtuYW1lXSB8fCAoY29yZVtuYW1lXSA9IHt9KVxuICAgICwgZXhwUHJvdG8gID0gZXhwb3J0c1tQUk9UT1RZUEVdXG4gICAgLCB0YXJnZXQgICAgPSBJU19HTE9CQUwgPyBnbG9iYWwgOiBJU19TVEFUSUMgPyBnbG9iYWxbbmFtZV0gOiAoZ2xvYmFsW25hbWVdIHx8IHt9KVtQUk9UT1RZUEVdXG4gICAgLCBrZXksIG93biwgb3V0O1xuICBpZihJU19HTE9CQUwpc291cmNlID0gbmFtZTtcbiAgZm9yKGtleSBpbiBzb3VyY2Upe1xuICAgIC8vIGNvbnRhaW5zIGluIG5hdGl2ZVxuICAgIG93biA9ICFJU19GT1JDRUQgJiYgdGFyZ2V0ICYmIHRhcmdldFtrZXldICE9PSB1bmRlZmluZWQ7XG4gICAgaWYob3duICYmIGtleSBpbiBleHBvcnRzKWNvbnRpbnVlO1xuICAgIC8vIGV4cG9ydCBuYXRpdmUgb3IgcGFzc2VkXG4gICAgb3V0ID0gb3duID8gdGFyZ2V0W2tleV0gOiBzb3VyY2Vba2V5XTtcbiAgICAvLyBwcmV2ZW50IGdsb2JhbCBwb2xsdXRpb24gZm9yIG5hbWVzcGFjZXNcbiAgICBleHBvcnRzW2tleV0gPSBJU19HTE9CQUwgJiYgdHlwZW9mIHRhcmdldFtrZXldICE9ICdmdW5jdGlvbicgPyBzb3VyY2Vba2V5XVxuICAgIC8vIGJpbmQgdGltZXJzIHRvIGdsb2JhbCBmb3IgY2FsbCBmcm9tIGV4cG9ydCBjb250ZXh0XG4gICAgOiBJU19CSU5EICYmIG93biA/IGN0eChvdXQsIGdsb2JhbClcbiAgICAvLyB3cmFwIGdsb2JhbCBjb25zdHJ1Y3RvcnMgZm9yIHByZXZlbnQgY2hhbmdlIHRoZW0gaW4gbGlicmFyeVxuICAgIDogSVNfV1JBUCAmJiB0YXJnZXRba2V5XSA9PSBvdXQgPyAoZnVuY3Rpb24oQyl7XG4gICAgICB2YXIgRiA9IGZ1bmN0aW9uKGEsIGIsIGMpe1xuICAgICAgICBpZih0aGlzIGluc3RhbmNlb2YgQyl7XG4gICAgICAgICAgc3dpdGNoKGFyZ3VtZW50cy5sZW5ndGgpe1xuICAgICAgICAgICAgY2FzZSAwOiByZXR1cm4gbmV3IEM7XG4gICAgICAgICAgICBjYXNlIDE6IHJldHVybiBuZXcgQyhhKTtcbiAgICAgICAgICAgIGNhc2UgMjogcmV0dXJuIG5ldyBDKGEsIGIpO1xuICAgICAgICAgIH0gcmV0dXJuIG5ldyBDKGEsIGIsIGMpO1xuICAgICAgICB9IHJldHVybiBDLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB9O1xuICAgICAgRltQUk9UT1RZUEVdID0gQ1tQUk9UT1RZUEVdO1xuICAgICAgcmV0dXJuIEY7XG4gICAgLy8gbWFrZSBzdGF0aWMgdmVyc2lvbnMgZm9yIHByb3RvdHlwZSBtZXRob2RzXG4gICAgfSkob3V0KSA6IElTX1BST1RPICYmIHR5cGVvZiBvdXQgPT0gJ2Z1bmN0aW9uJyA/IGN0eChGdW5jdGlvbi5jYWxsLCBvdXQpIDogb3V0O1xuICAgIC8vIGV4cG9ydCBwcm90byBtZXRob2RzIHRvIGNvcmUuJUNPTlNUUlVDVE9SJS5tZXRob2RzLiVOQU1FJVxuICAgIGlmKElTX1BST1RPKXtcbiAgICAgIChleHBvcnRzLnZpcnR1YWwgfHwgKGV4cG9ydHMudmlydHVhbCA9IHt9KSlba2V5XSA9IG91dDtcbiAgICAgIC8vIGV4cG9ydCBwcm90byBtZXRob2RzIHRvIGNvcmUuJUNPTlNUUlVDVE9SJS5wcm90b3R5cGUuJU5BTUUlXG4gICAgICBpZih0eXBlICYgJGV4cG9ydC5SICYmIGV4cFByb3RvICYmICFleHBQcm90b1trZXldKWhpZGUoZXhwUHJvdG8sIGtleSwgb3V0KTtcbiAgICB9XG4gIH1cbn07XG4vLyB0eXBlIGJpdG1hcFxuJGV4cG9ydC5GID0gMTsgICAvLyBmb3JjZWRcbiRleHBvcnQuRyA9IDI7ICAgLy8gZ2xvYmFsXG4kZXhwb3J0LlMgPSA0OyAgIC8vIHN0YXRpY1xuJGV4cG9ydC5QID0gODsgICAvLyBwcm90b1xuJGV4cG9ydC5CID0gMTY7ICAvLyBiaW5kXG4kZXhwb3J0LlcgPSAzMjsgIC8vIHdyYXBcbiRleHBvcnQuVSA9IDY0OyAgLy8gc2FmZVxuJGV4cG9ydC5SID0gMTI4OyAvLyByZWFsIHByb3RvIG1ldGhvZCBmb3IgYGxpYnJhcnlgIFxubW9kdWxlLmV4cG9ydHMgPSAkZXhwb3J0O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZXhwb3J0LmpzXG4vLyBtb2R1bGUgaWQgPSA0NVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 46 */
/* no static exports found */
/* all exports used */
/*!*********************************************!*\
  !*** ./~/core-js/library/modules/_fails.js ***!
  \*********************************************/
/***/ (function(module, exports) {

eval("module.exports = function(exec){\n  try {\n    return !!exec();\n  } catch(e){\n    return true;\n  }\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDYuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19mYWlscy5qcz85MzVkIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oZXhlYyl7XG4gIHRyeSB7XG4gICAgcmV0dXJuICEhZXhlYygpO1xuICB9IGNhdGNoKGUpe1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZmFpbHMuanNcbi8vIG1vZHVsZSBpZCA9IDQ2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 47 */
/* no static exports found */
/* all exports used */
/*!*********************************************************!*\
  !*** ./~/core-js/library/modules/_set-to-string-tag.js ***!
  \*********************************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var def = __webpack_require__(/*! ./_object-dp */ 23).f\n  , has = __webpack_require__(/*! ./_has */ 21)\n  , TAG = __webpack_require__(/*! ./_wks */ 5)('toStringTag');\n\nmodule.exports = function(it, tag, stat){\n  if(it && !has(it = stat ? it : it.prototype, TAG))def(it, TAG, {configurable: true, value: tag});\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDcuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19zZXQtdG8tc3RyaW5nLXRhZy5qcz9jOTQ1Il0sInNvdXJjZXNDb250ZW50IjpbInZhciBkZWYgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mXG4gICwgaGFzID0gcmVxdWlyZSgnLi9faGFzJylcbiAgLCBUQUcgPSByZXF1aXJlKCcuL193a3MnKSgndG9TdHJpbmdUYWcnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCwgdGFnLCBzdGF0KXtcbiAgaWYoaXQgJiYgIWhhcyhpdCA9IHN0YXQgPyBpdCA6IGl0LnByb3RvdHlwZSwgVEFHKSlkZWYoaXQsIFRBRywge2NvbmZpZ3VyYWJsZTogdHJ1ZSwgdmFsdWU6IHRhZ30pO1xufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3NldC10by1zdHJpbmctdGFnLmpzXG4vLyBtb2R1bGUgaWQgPSA0N1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 48 */
/* no static exports found */
/* all exports used */
/*!**********************************************!*\
  !*** ./~/core-js/library/modules/_shared.js ***!
  \**********************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var global = __webpack_require__(/*! ./_global */ 10)\n  , SHARED = '__core-js_shared__'\n  , store  = global[SHARED] || (global[SHARED] = {});\nmodule.exports = function(key){\n  return store[key] || (store[key] = {});\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDguanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19zaGFyZWQuanM/N2I2YyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJylcbiAgLCBTSEFSRUQgPSAnX19jb3JlLWpzX3NoYXJlZF9fJ1xuICAsIHN0b3JlICA9IGdsb2JhbFtTSEFSRURdIHx8IChnbG9iYWxbU0hBUkVEXSA9IHt9KTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oa2V5KXtcbiAgcmV0dXJuIHN0b3JlW2tleV0gfHwgKHN0b3JlW2tleV0gPSB7fSk7XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fc2hhcmVkLmpzXG4vLyBtb2R1bGUgaWQgPSA0OFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 49 */
/* no static exports found */
/* all exports used */
/*!**************************************************!*\
  !*** ./~/core-js/library/modules/_to-iobject.js ***!
  \**************************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("// to indexed object, toObject with fallback for non-array-like ES3 strings\nvar IObject = __webpack_require__(/*! ./_iobject */ 120)\n  , defined = __webpack_require__(/*! ./_defined */ 29);\nmodule.exports = function(it){\n  return IObject(defined(it));\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDkuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL190by1pb2JqZWN0LmpzPzY5NDYiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gdG8gaW5kZXhlZCBvYmplY3QsIHRvT2JqZWN0IHdpdGggZmFsbGJhY2sgZm9yIG5vbi1hcnJheS1saWtlIEVTMyBzdHJpbmdzXG52YXIgSU9iamVjdCA9IHJlcXVpcmUoJy4vX2lvYmplY3QnKVxuICAsIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXtcbiAgcmV0dXJuIElPYmplY3QoZGVmaW5lZChpdCkpO1xufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3RvLWlvYmplY3QuanNcbi8vIG1vZHVsZSBpZCA9IDQ5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 50 */
/* no static exports found */
/* all exports used */
/*!*************************************************!*\
  !*** ./~/core-js/library/modules/_to-length.js ***!
  \*************************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("// 7.1.15 ToLength\nvar toInteger = __webpack_require__(/*! ./_to-integer */ 34)\n  , min       = Math.min;\nmodule.exports = function(it){\n  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTAuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL190by1sZW5ndGguanM/NjJhNyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyA3LjEuMTUgVG9MZW5ndGhcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJylcbiAgLCBtaW4gICAgICAgPSBNYXRoLm1pbjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpe1xuICByZXR1cm4gaXQgPiAwID8gbWluKHRvSW50ZWdlcihpdCksIDB4MWZmZmZmZmZmZmZmZmYpIDogMDsgLy8gcG93KDIsIDUzKSAtIDEgPT0gOTAwNzE5OTI1NDc0MDk5MVxufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3RvLWxlbmd0aC5qc1xuLy8gbW9kdWxlIGlkID0gNTBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 51 */
/* no static exports found */
/* all exports used */
/*!*************************************************!*\
  !*** ./~/core-js/library/modules/_to-object.js ***!
  \*************************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("// 7.1.13 ToObject(argument)\nvar defined = __webpack_require__(/*! ./_defined */ 29);\nmodule.exports = function(it){\n  return Object(defined(it));\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTEuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL190by1vYmplY3QuanM/YjVjMCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyA3LjEuMTMgVG9PYmplY3QoYXJndW1lbnQpXG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpe1xuICByZXR1cm4gT2JqZWN0KGRlZmluZWQoaXQpKTtcbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL190by1vYmplY3QuanNcbi8vIG1vZHVsZSBpZCA9IDUxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 52 */
/* no static exports found */
/* all exports used */
/*!*******************************************!*\
  !*** ./~/core-js/library/modules/_uid.js ***!
  \*******************************************/
/***/ (function(module, exports) {

eval("var id = 0\n  , px = Math.random();\nmodule.exports = function(key){\n  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTIuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL191aWQuanM/ZThjZCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgaWQgPSAwXG4gICwgcHggPSBNYXRoLnJhbmRvbSgpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihrZXkpe1xuICByZXR1cm4gJ1N5bWJvbCgnLmNvbmNhdChrZXkgPT09IHVuZGVmaW5lZCA/ICcnIDoga2V5LCAnKV8nLCAoKytpZCArIHB4KS50b1N0cmluZygzNikpO1xufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3VpZC5qc1xuLy8gbW9kdWxlIGlkID0gNTJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 53 */
/* no static exports found */
/* all exports used */
/*!****************************!*\
  !*** ./~/mapnik-reference ***!
  \****************************/
/***/ (function(module, exports) {

eval("function webpackEmptyContext(req) {\n\tthrow new Error(\"Cannot find module '\" + req + \"'.\");\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 53;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L21hcG5pay1yZWZlcmVuY2U/ZDY3OSJdLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiB3ZWJwYWNrRW1wdHlDb250ZXh0KHJlcSkge1xuXHR0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiICsgcmVxICsgXCInLlwiKTtcbn1cbndlYnBhY2tFbXB0eUNvbnRleHQua2V5cyA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gW107IH07XG53ZWJwYWNrRW1wdHlDb250ZXh0LnJlc29sdmUgPSB3ZWJwYWNrRW1wdHlDb250ZXh0O1xubW9kdWxlLmV4cG9ydHMgPSB3ZWJwYWNrRW1wdHlDb250ZXh0O1xud2VicGFja0VtcHR5Q29udGV4dC5pZCA9IDUzO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9tYXBuaWstcmVmZXJlbmNlXG4vLyBtb2R1bGUgaWQgPSA1M1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 54 */
/* no static exports found */
/* all exports used */
/*!******************************!*\
  !*** ./~/ramda/src/apply.js ***!
  \******************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var _curry2 = __webpack_require__(/*! ./internal/_curry2 */ 1);\n\n\n/**\n * Applies function `fn` to the argument list `args`. This is useful for\n * creating a fixed-arity function from a variadic function. `fn` should be a\n * bound function if context is significant.\n *\n * @func\n * @memberOf R\n * @since v0.7.0\n * @category Function\n * @sig (*... -> a) -> [*] -> a\n * @param {Function} fn The function which will be called with `args`\n * @param {Array} args The arguments to call `fn` with\n * @return {*} result The result, equivalent to `fn(...args)`\n * @see R.call, R.unapply\n * @example\n *\n *      var nums = [1, 2, 3, -99, 42, 6, 7];\n *      R.apply(Math.max, nums); //=> 42\n * @symb R.apply(f, [a, b, c]) = f(a, b, c)\n */\nmodule.exports = _curry2(function apply(fn, args) {\n  return fn.apply(this, args);\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTQuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3JhbWRhL3NyYy9hcHBseS5qcz8yNTIwIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBfY3VycnkyID0gcmVxdWlyZSgnLi9pbnRlcm5hbC9fY3VycnkyJyk7XG5cblxuLyoqXG4gKiBBcHBsaWVzIGZ1bmN0aW9uIGBmbmAgdG8gdGhlIGFyZ3VtZW50IGxpc3QgYGFyZ3NgLiBUaGlzIGlzIHVzZWZ1bCBmb3JcbiAqIGNyZWF0aW5nIGEgZml4ZWQtYXJpdHkgZnVuY3Rpb24gZnJvbSBhIHZhcmlhZGljIGZ1bmN0aW9uLiBgZm5gIHNob3VsZCBiZSBhXG4gKiBib3VuZCBmdW5jdGlvbiBpZiBjb250ZXh0IGlzIHNpZ25pZmljYW50LlxuICpcbiAqIEBmdW5jXG4gKiBAbWVtYmVyT2YgUlxuICogQHNpbmNlIHYwLjcuMFxuICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gKiBAc2lnICgqLi4uIC0+IGEpIC0+IFsqXSAtPiBhXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgZnVuY3Rpb24gd2hpY2ggd2lsbCBiZSBjYWxsZWQgd2l0aCBgYXJnc2BcbiAqIEBwYXJhbSB7QXJyYXl9IGFyZ3MgVGhlIGFyZ3VtZW50cyB0byBjYWxsIGBmbmAgd2l0aFxuICogQHJldHVybiB7Kn0gcmVzdWx0IFRoZSByZXN1bHQsIGVxdWl2YWxlbnQgdG8gYGZuKC4uLmFyZ3MpYFxuICogQHNlZSBSLmNhbGwsIFIudW5hcHBseVxuICogQGV4YW1wbGVcbiAqXG4gKiAgICAgIHZhciBudW1zID0gWzEsIDIsIDMsIC05OSwgNDIsIDYsIDddO1xuICogICAgICBSLmFwcGx5KE1hdGgubWF4LCBudW1zKTsgLy89PiA0MlxuICogQHN5bWIgUi5hcHBseShmLCBbYSwgYiwgY10pID0gZihhLCBiLCBjKVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IF9jdXJyeTIoZnVuY3Rpb24gYXBwbHkoZm4sIGFyZ3MpIHtcbiAgcmV0dXJuIGZuLmFwcGx5KHRoaXMsIGFyZ3MpO1xufSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcmFtZGEvc3JjL2FwcGx5LmpzXG4vLyBtb2R1bGUgaWQgPSA1NFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 55 */
/* no static exports found */
/* all exports used */
/*!**********************************!*\
  !*** ./~/ramda/src/applySpec.js ***!
  \**********************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var _curry1 = __webpack_require__(/*! ./internal/_curry1 */ 2);\nvar apply = __webpack_require__(/*! ./apply */ 54);\nvar curryN = __webpack_require__(/*! ./curryN */ 6);\nvar map = __webpack_require__(/*! ./map */ 8);\nvar max = __webpack_require__(/*! ./max */ 63);\nvar pluck = __webpack_require__(/*! ./pluck */ 184);\nvar reduce = __webpack_require__(/*! ./reduce */ 26);\nvar values = __webpack_require__(/*! ./values */ 66);\n\n\n/**\n * Given a spec object recursively mapping properties to functions, creates a\n * function producing an object of the same structure, by mapping each property\n * to the result of calling its associated function with the supplied arguments.\n *\n * @func\n * @memberOf R\n * @since v0.20.0\n * @category Function\n * @sig {k: ((a, b, ..., m) -> v)} -> ((a, b, ..., m) -> {k: v})\n * @param {Object} spec an object recursively mapping properties to functions for\n *        producing the values for these properties.\n * @return {Function} A function that returns an object of the same structure\n * as `spec', with each property set to the value returned by calling its\n * associated function with the supplied arguments.\n * @see R.converge, R.juxt\n * @example\n *\n *      var getMetrics = R.applySpec({\n *                                      sum: R.add,\n *                                      nested: { mul: R.multiply }\n *                                   });\n *      getMetrics(2, 4); // => { sum: 6, nested: { mul: 8 } }\n * @symb R.applySpec({ x: f, y: { z: g } })(a, b) = { x: f(a, b), y: { z: g(a, b) } }\n */\nmodule.exports = _curry1(function applySpec(spec) {\n  spec = map(function(v) { return typeof v == 'function' ? v : applySpec(v); },\n             spec);\n  return curryN(reduce(max, 0, pluck('length', values(spec))),\n                function() {\n                  var args = arguments;\n                  return map(function(f) { return apply(f, args); }, spec);\n                });\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTUuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3JhbWRhL3NyYy9hcHBseVNwZWMuanM/OWMxZSJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX2N1cnJ5MSA9IHJlcXVpcmUoJy4vaW50ZXJuYWwvX2N1cnJ5MScpO1xudmFyIGFwcGx5ID0gcmVxdWlyZSgnLi9hcHBseScpO1xudmFyIGN1cnJ5TiA9IHJlcXVpcmUoJy4vY3VycnlOJyk7XG52YXIgbWFwID0gcmVxdWlyZSgnLi9tYXAnKTtcbnZhciBtYXggPSByZXF1aXJlKCcuL21heCcpO1xudmFyIHBsdWNrID0gcmVxdWlyZSgnLi9wbHVjaycpO1xudmFyIHJlZHVjZSA9IHJlcXVpcmUoJy4vcmVkdWNlJyk7XG52YXIgdmFsdWVzID0gcmVxdWlyZSgnLi92YWx1ZXMnKTtcblxuXG4vKipcbiAqIEdpdmVuIGEgc3BlYyBvYmplY3QgcmVjdXJzaXZlbHkgbWFwcGluZyBwcm9wZXJ0aWVzIHRvIGZ1bmN0aW9ucywgY3JlYXRlcyBhXG4gKiBmdW5jdGlvbiBwcm9kdWNpbmcgYW4gb2JqZWN0IG9mIHRoZSBzYW1lIHN0cnVjdHVyZSwgYnkgbWFwcGluZyBlYWNoIHByb3BlcnR5XG4gKiB0byB0aGUgcmVzdWx0IG9mIGNhbGxpbmcgaXRzIGFzc29jaWF0ZWQgZnVuY3Rpb24gd2l0aCB0aGUgc3VwcGxpZWQgYXJndW1lbnRzLlxuICpcbiAqIEBmdW5jXG4gKiBAbWVtYmVyT2YgUlxuICogQHNpbmNlIHYwLjIwLjBcbiAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICogQHNpZyB7azogKChhLCBiLCAuLi4sIG0pIC0+IHYpfSAtPiAoKGEsIGIsIC4uLiwgbSkgLT4ge2s6IHZ9KVxuICogQHBhcmFtIHtPYmplY3R9IHNwZWMgYW4gb2JqZWN0IHJlY3Vyc2l2ZWx5IG1hcHBpbmcgcHJvcGVydGllcyB0byBmdW5jdGlvbnMgZm9yXG4gKiAgICAgICAgcHJvZHVjaW5nIHRoZSB2YWx1ZXMgZm9yIHRoZXNlIHByb3BlcnRpZXMuXG4gKiBAcmV0dXJuIHtGdW5jdGlvbn0gQSBmdW5jdGlvbiB0aGF0IHJldHVybnMgYW4gb2JqZWN0IG9mIHRoZSBzYW1lIHN0cnVjdHVyZVxuICogYXMgYHNwZWMnLCB3aXRoIGVhY2ggcHJvcGVydHkgc2V0IHRvIHRoZSB2YWx1ZSByZXR1cm5lZCBieSBjYWxsaW5nIGl0c1xuICogYXNzb2NpYXRlZCBmdW5jdGlvbiB3aXRoIHRoZSBzdXBwbGllZCBhcmd1bWVudHMuXG4gKiBAc2VlIFIuY29udmVyZ2UsIFIuanV4dFxuICogQGV4YW1wbGVcbiAqXG4gKiAgICAgIHZhciBnZXRNZXRyaWNzID0gUi5hcHBseVNwZWMoe1xuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1bTogUi5hZGQsXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmVzdGVkOiB7IG11bDogUi5tdWx0aXBseSB9XG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gKiAgICAgIGdldE1ldHJpY3MoMiwgNCk7IC8vID0+IHsgc3VtOiA2LCBuZXN0ZWQ6IHsgbXVsOiA4IH0gfVxuICogQHN5bWIgUi5hcHBseVNwZWMoeyB4OiBmLCB5OiB7IHo6IGcgfSB9KShhLCBiKSA9IHsgeDogZihhLCBiKSwgeTogeyB6OiBnKGEsIGIpIH0gfVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IF9jdXJyeTEoZnVuY3Rpb24gYXBwbHlTcGVjKHNwZWMpIHtcbiAgc3BlYyA9IG1hcChmdW5jdGlvbih2KSB7IHJldHVybiB0eXBlb2YgdiA9PSAnZnVuY3Rpb24nID8gdiA6IGFwcGx5U3BlYyh2KTsgfSxcbiAgICAgICAgICAgICBzcGVjKTtcbiAgcmV0dXJuIGN1cnJ5TihyZWR1Y2UobWF4LCAwLCBwbHVjaygnbGVuZ3RoJywgdmFsdWVzKHNwZWMpKSksXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cztcbiAgICAgICAgICAgICAgICAgIHJldHVybiBtYXAoZnVuY3Rpb24oZikgeyByZXR1cm4gYXBwbHkoZiwgYXJncyk7IH0sIHNwZWMpO1xuICAgICAgICAgICAgICAgIH0pO1xufSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcmFtZGEvc3JjL2FwcGx5U3BlYy5qc1xuLy8gbW9kdWxlIGlkID0gNTVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 56 */
/* no static exports found */
/* all exports used */
/*!*******************************!*\
  !*** ./~/ramda/src/equals.js ***!
  \*******************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var _curry2 = __webpack_require__(/*! ./internal/_curry2 */ 1);\nvar _equals = __webpack_require__(/*! ./internal/_equals */ 157);\n\n\n/**\n * Returns `true` if its arguments are equivalent, `false` otherwise. Handles\n * cyclical data structures.\n *\n * Dispatches symmetrically to the `equals` methods of both arguments, if\n * present.\n *\n * @func\n * @memberOf R\n * @since v0.15.0\n * @category Relation\n * @sig a -> b -> Boolean\n * @param {*} a\n * @param {*} b\n * @return {Boolean}\n * @example\n *\n *      R.equals(1, 1); //=> true\n *      R.equals(1, '1'); //=> false\n *      R.equals([1, 2, 3], [1, 2, 3]); //=> true\n *\n *      var a = {}; a.v = a;\n *      var b = {}; b.v = b;\n *      R.equals(a, b); //=> true\n */\nmodule.exports = _curry2(function equals(a, b) {\n  return _equals(a, b, [], []);\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTYuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3JhbWRhL3NyYy9lcXVhbHMuanM/ZGFhNyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX2N1cnJ5MiA9IHJlcXVpcmUoJy4vaW50ZXJuYWwvX2N1cnJ5MicpO1xudmFyIF9lcXVhbHMgPSByZXF1aXJlKCcuL2ludGVybmFsL19lcXVhbHMnKTtcblxuXG4vKipcbiAqIFJldHVybnMgYHRydWVgIGlmIGl0cyBhcmd1bWVudHMgYXJlIGVxdWl2YWxlbnQsIGBmYWxzZWAgb3RoZXJ3aXNlLiBIYW5kbGVzXG4gKiBjeWNsaWNhbCBkYXRhIHN0cnVjdHVyZXMuXG4gKlxuICogRGlzcGF0Y2hlcyBzeW1tZXRyaWNhbGx5IHRvIHRoZSBgZXF1YWxzYCBtZXRob2RzIG9mIGJvdGggYXJndW1lbnRzLCBpZlxuICogcHJlc2VudC5cbiAqXG4gKiBAZnVuY1xuICogQG1lbWJlck9mIFJcbiAqIEBzaW5jZSB2MC4xNS4wXG4gKiBAY2F0ZWdvcnkgUmVsYXRpb25cbiAqIEBzaWcgYSAtPiBiIC0+IEJvb2xlYW5cbiAqIEBwYXJhbSB7Kn0gYVxuICogQHBhcmFtIHsqfSBiXG4gKiBAcmV0dXJuIHtCb29sZWFufVxuICogQGV4YW1wbGVcbiAqXG4gKiAgICAgIFIuZXF1YWxzKDEsIDEpOyAvLz0+IHRydWVcbiAqICAgICAgUi5lcXVhbHMoMSwgJzEnKTsgLy89PiBmYWxzZVxuICogICAgICBSLmVxdWFscyhbMSwgMiwgM10sIFsxLCAyLCAzXSk7IC8vPT4gdHJ1ZVxuICpcbiAqICAgICAgdmFyIGEgPSB7fTsgYS52ID0gYTtcbiAqICAgICAgdmFyIGIgPSB7fTsgYi52ID0gYjtcbiAqICAgICAgUi5lcXVhbHMoYSwgYik7IC8vPT4gdHJ1ZVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IF9jdXJyeTIoZnVuY3Rpb24gZXF1YWxzKGEsIGIpIHtcbiAgcmV0dXJuIF9lcXVhbHMoYSwgYiwgW10sIFtdKTtcbn0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3JhbWRhL3NyYy9lcXVhbHMuanNcbi8vIG1vZHVsZSBpZCA9IDU2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 57 */
/* no static exports found */
/* all exports used */
/*!*************************************************!*\
  !*** ./~/ramda/src/internal/_checkForMethod.js ***!
  \*************************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var _isArray = __webpack_require__(/*! ./_isArray */ 37);\n\n\n/**\n * This checks whether a function has a [methodname] function. If it isn't an\n * array it will execute that function otherwise it will default to the ramda\n * implementation.\n *\n * @private\n * @param {Function} fn ramda implemtation\n * @param {String} methodname property to check for a custom implementation\n * @return {Object} Whatever the return value of the method is.\n */\nmodule.exports = function _checkForMethod(methodname, fn) {\n  return function() {\n    var length = arguments.length;\n    if (length === 0) {\n      return fn();\n    }\n    var obj = arguments[length - 1];\n    return (_isArray(obj) || typeof obj[methodname] !== 'function') ?\n      fn.apply(this, arguments) :\n      obj[methodname].apply(obj, Array.prototype.slice.call(arguments, 0, length - 1));\n  };\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTcuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3JhbWRhL3NyYy9pbnRlcm5hbC9fY2hlY2tGb3JNZXRob2QuanM/YjAwNiJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX2lzQXJyYXkgPSByZXF1aXJlKCcuL19pc0FycmF5Jyk7XG5cblxuLyoqXG4gKiBUaGlzIGNoZWNrcyB3aGV0aGVyIGEgZnVuY3Rpb24gaGFzIGEgW21ldGhvZG5hbWVdIGZ1bmN0aW9uLiBJZiBpdCBpc24ndCBhblxuICogYXJyYXkgaXQgd2lsbCBleGVjdXRlIHRoYXQgZnVuY3Rpb24gb3RoZXJ3aXNlIGl0IHdpbGwgZGVmYXVsdCB0byB0aGUgcmFtZGFcbiAqIGltcGxlbWVudGF0aW9uLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiByYW1kYSBpbXBsZW10YXRpb25cbiAqIEBwYXJhbSB7U3RyaW5nfSBtZXRob2RuYW1lIHByb3BlcnR5IHRvIGNoZWNrIGZvciBhIGN1c3RvbSBpbXBsZW1lbnRhdGlvblxuICogQHJldHVybiB7T2JqZWN0fSBXaGF0ZXZlciB0aGUgcmV0dXJuIHZhbHVlIG9mIHRoZSBtZXRob2QgaXMuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gX2NoZWNrRm9yTWV0aG9kKG1ldGhvZG5hbWUsIGZuKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICBpZiAobGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gZm4oKTtcbiAgICB9XG4gICAgdmFyIG9iaiA9IGFyZ3VtZW50c1tsZW5ndGggLSAxXTtcbiAgICByZXR1cm4gKF9pc0FycmF5KG9iaikgfHwgdHlwZW9mIG9ialttZXRob2RuYW1lXSAhPT0gJ2Z1bmN0aW9uJykgP1xuICAgICAgZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKSA6XG4gICAgICBvYmpbbWV0aG9kbmFtZV0uYXBwbHkob2JqLCBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDAsIGxlbmd0aCAtIDEpKTtcbiAgfTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcmFtZGEvc3JjL2ludGVybmFsL19jaGVja0Zvck1ldGhvZC5qc1xuLy8gbW9kdWxlIGlkID0gNTdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 58 */
/* no static exports found */
/* all exports used */
/*!***********************************************!*\
  !*** ./~/ramda/src/internal/_dispatchable.js ***!
  \***********************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var _isArray = __webpack_require__(/*! ./_isArray */ 37);\nvar _isTransformer = __webpack_require__(/*! ./_isTransformer */ 164);\n\n\n/**\n * Returns a function that dispatches with different strategies based on the\n * object in list position (last argument). If it is an array, executes [fn].\n * Otherwise, if it has a function with one of the given method names, it will\n * execute that function (functor case). Otherwise, if it is a transformer,\n * uses transducer [xf] to return a new transformer (transducer case).\n * Otherwise, it will default to executing [fn].\n *\n * @private\n * @param {Array} methodNames properties to check for a custom implementation\n * @param {Function} xf transducer to initialize if object is transformer\n * @param {Function} fn default ramda implementation\n * @return {Function} A function that dispatches on object in list position\n */\nmodule.exports = function _dispatchable(methodNames, xf, fn) {\n  return function() {\n    if (arguments.length === 0) {\n      return fn();\n    }\n    var args = Array.prototype.slice.call(arguments, 0);\n    var obj = args.pop();\n    if (!_isArray(obj)) {\n      var idx = 0;\n      while (idx < methodNames.length) {\n        if (typeof obj[methodNames[idx]] === 'function') {\n          return obj[methodNames[idx]].apply(obj, args);\n        }\n        idx += 1;\n      }\n      if (_isTransformer(obj)) {\n        var transducer = xf.apply(null, args);\n        return transducer(obj);\n      }\n    }\n    return fn.apply(this, arguments);\n  };\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTguanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3JhbWRhL3NyYy9pbnRlcm5hbC9fZGlzcGF0Y2hhYmxlLmpzPzIyZmYiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIF9pc0FycmF5ID0gcmVxdWlyZSgnLi9faXNBcnJheScpO1xudmFyIF9pc1RyYW5zZm9ybWVyID0gcmVxdWlyZSgnLi9faXNUcmFuc2Zvcm1lcicpO1xuXG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRoYXQgZGlzcGF0Y2hlcyB3aXRoIGRpZmZlcmVudCBzdHJhdGVnaWVzIGJhc2VkIG9uIHRoZVxuICogb2JqZWN0IGluIGxpc3QgcG9zaXRpb24gKGxhc3QgYXJndW1lbnQpLiBJZiBpdCBpcyBhbiBhcnJheSwgZXhlY3V0ZXMgW2ZuXS5cbiAqIE90aGVyd2lzZSwgaWYgaXQgaGFzIGEgZnVuY3Rpb24gd2l0aCBvbmUgb2YgdGhlIGdpdmVuIG1ldGhvZCBuYW1lcywgaXQgd2lsbFxuICogZXhlY3V0ZSB0aGF0IGZ1bmN0aW9uIChmdW5jdG9yIGNhc2UpLiBPdGhlcndpc2UsIGlmIGl0IGlzIGEgdHJhbnNmb3JtZXIsXG4gKiB1c2VzIHRyYW5zZHVjZXIgW3hmXSB0byByZXR1cm4gYSBuZXcgdHJhbnNmb3JtZXIgKHRyYW5zZHVjZXIgY2FzZSkuXG4gKiBPdGhlcndpc2UsIGl0IHdpbGwgZGVmYXVsdCB0byBleGVjdXRpbmcgW2ZuXS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gbWV0aG9kTmFtZXMgcHJvcGVydGllcyB0byBjaGVjayBmb3IgYSBjdXN0b20gaW1wbGVtZW50YXRpb25cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHhmIHRyYW5zZHVjZXIgdG8gaW5pdGlhbGl6ZSBpZiBvYmplY3QgaXMgdHJhbnNmb3JtZXJcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIGRlZmF1bHQgcmFtZGEgaW1wbGVtZW50YXRpb25cbiAqIEByZXR1cm4ge0Z1bmN0aW9ufSBBIGZ1bmN0aW9uIHRoYXQgZGlzcGF0Y2hlcyBvbiBvYmplY3QgaW4gbGlzdCBwb3NpdGlvblxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIF9kaXNwYXRjaGFibGUobWV0aG9kTmFtZXMsIHhmLCBmbikge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiBmbigpO1xuICAgIH1cbiAgICB2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMCk7XG4gICAgdmFyIG9iaiA9IGFyZ3MucG9wKCk7XG4gICAgaWYgKCFfaXNBcnJheShvYmopKSB7XG4gICAgICB2YXIgaWR4ID0gMDtcbiAgICAgIHdoaWxlIChpZHggPCBtZXRob2ROYW1lcy5sZW5ndGgpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBvYmpbbWV0aG9kTmFtZXNbaWR4XV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICByZXR1cm4gb2JqW21ldGhvZE5hbWVzW2lkeF1dLmFwcGx5KG9iaiwgYXJncyk7XG4gICAgICAgIH1cbiAgICAgICAgaWR4ICs9IDE7XG4gICAgICB9XG4gICAgICBpZiAoX2lzVHJhbnNmb3JtZXIob2JqKSkge1xuICAgICAgICB2YXIgdHJhbnNkdWNlciA9IHhmLmFwcGx5KG51bGwsIGFyZ3MpO1xuICAgICAgICByZXR1cm4gdHJhbnNkdWNlcihvYmopO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcmFtZGEvc3JjL2ludGVybmFsL19kaXNwYXRjaGFibGUuanNcbi8vIG1vZHVsZSBpZCA9IDU4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 59 */
/* no static exports found */
/* all exports used */
/*!*********************************************!*\
  !*** ./~/ramda/src/internal/_isFunction.js ***!
  \*********************************************/
/***/ (function(module, exports) {

eval("module.exports = function _isFunction(x) {\n  return Object.prototype.toString.call(x) === '[object Function]';\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTkuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3JhbWRhL3NyYy9pbnRlcm5hbC9faXNGdW5jdGlvbi5qcz9kN2I0Il0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gX2lzRnVuY3Rpb24oeCkge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHgpID09PSAnW29iamVjdCBGdW5jdGlvbl0nO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9yYW1kYS9zcmMvaW50ZXJuYWwvX2lzRnVuY3Rpb24uanNcbi8vIG1vZHVsZSBpZCA9IDU5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 60 */
/* no static exports found */
/* all exports used */
/*!*******************************************!*\
  !*** ./~/ramda/src/internal/_isString.js ***!
  \*******************************************/
/***/ (function(module, exports) {

eval("module.exports = function _isString(x) {\n  return Object.prototype.toString.call(x) === '[object String]';\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjAuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3JhbWRhL3NyYy9pbnRlcm5hbC9faXNTdHJpbmcuanM/MDViYyJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIF9pc1N0cmluZyh4KSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoeCkgPT09ICdbb2JqZWN0IFN0cmluZ10nO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9yYW1kYS9zcmMvaW50ZXJuYWwvX2lzU3RyaW5nLmpzXG4vLyBtb2R1bGUgaWQgPSA2MFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 61 */
/* no static exports found */
/* all exports used */
/*!**************************************!*\
  !*** ./~/ramda/src/internal/_map.js ***!
  \**************************************/
/***/ (function(module, exports) {

eval("module.exports = function _map(fn, functor) {\n  var idx = 0;\n  var len = functor.length;\n  var result = Array(len);\n  while (idx < len) {\n    result[idx] = fn(functor[idx]);\n    idx += 1;\n  }\n  return result;\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjEuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3JhbWRhL3NyYy9pbnRlcm5hbC9fbWFwLmpzP2ZiMDMiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBfbWFwKGZuLCBmdW5jdG9yKSB7XG4gIHZhciBpZHggPSAwO1xuICB2YXIgbGVuID0gZnVuY3Rvci5sZW5ndGg7XG4gIHZhciByZXN1bHQgPSBBcnJheShsZW4pO1xuICB3aGlsZSAoaWR4IDwgbGVuKSB7XG4gICAgcmVzdWx0W2lkeF0gPSBmbihmdW5jdG9yW2lkeF0pO1xuICAgIGlkeCArPSAxO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3JhbWRhL3NyYy9pbnRlcm5hbC9fbWFwLmpzXG4vLyBtb2R1bGUgaWQgPSA2MVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 62 */
/* no static exports found */
/* all exports used */
/*!*****************************************!*\
  !*** ./~/ramda/src/internal/_xfBase.js ***!
  \*****************************************/
/***/ (function(module, exports) {

eval("module.exports = {\n  init: function() {\n    return this.xf['@@transducer/init']();\n  },\n  result: function(result) {\n    return this.xf['@@transducer/result'](result);\n  }\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjIuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3JhbWRhL3NyYy9pbnRlcm5hbC9feGZCYXNlLmpzPzZjNTEiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSB7XG4gIGluaXQ6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLnhmWydAQHRyYW5zZHVjZXIvaW5pdCddKCk7XG4gIH0sXG4gIHJlc3VsdDogZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgcmV0dXJuIHRoaXMueGZbJ0BAdHJhbnNkdWNlci9yZXN1bHQnXShyZXN1bHQpO1xuICB9XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3JhbWRhL3NyYy9pbnRlcm5hbC9feGZCYXNlLmpzXG4vLyBtb2R1bGUgaWQgPSA2MlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 63 */
/* no static exports found */
/* all exports used */
/*!****************************!*\
  !*** ./~/ramda/src/max.js ***!
  \****************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var _curry2 = __webpack_require__(/*! ./internal/_curry2 */ 1);\n\n\n/**\n * Returns the larger of its two arguments.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig Ord a => a -> a -> a\n * @param {*} a\n * @param {*} b\n * @return {*}\n * @see R.maxBy, R.min\n * @example\n *\n *      R.max(789, 123); //=> 789\n *      R.max('a', 'b'); //=> 'b'\n */\nmodule.exports = _curry2(function max(a, b) { return b > a ? b : a; });\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3JhbWRhL3NyYy9tYXguanM/NDIwOCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX2N1cnJ5MiA9IHJlcXVpcmUoJy4vaW50ZXJuYWwvX2N1cnJ5MicpO1xuXG5cbi8qKlxuICogUmV0dXJucyB0aGUgbGFyZ2VyIG9mIGl0cyB0d28gYXJndW1lbnRzLlxuICpcbiAqIEBmdW5jXG4gKiBAbWVtYmVyT2YgUlxuICogQHNpbmNlIHYwLjEuMFxuICogQGNhdGVnb3J5IFJlbGF0aW9uXG4gKiBAc2lnIE9yZCBhID0+IGEgLT4gYSAtPiBhXG4gKiBAcGFyYW0geyp9IGFcbiAqIEBwYXJhbSB7Kn0gYlxuICogQHJldHVybiB7Kn1cbiAqIEBzZWUgUi5tYXhCeSwgUi5taW5cbiAqIEBleGFtcGxlXG4gKlxuICogICAgICBSLm1heCg3ODksIDEyMyk7IC8vPT4gNzg5XG4gKiAgICAgIFIubWF4KCdhJywgJ2InKTsgLy89PiAnYidcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBfY3VycnkyKGZ1bmN0aW9uIG1heChhLCBiKSB7IHJldHVybiBiID4gYSA/IGIgOiBhOyB9KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9yYW1kYS9zcmMvbWF4LmpzXG4vLyBtb2R1bGUgaWQgPSA2M1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 64 */
/* no static exports found */
/* all exports used */
/*!****************************!*\
  !*** ./~/ramda/src/not.js ***!
  \****************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var _curry1 = __webpack_require__(/*! ./internal/_curry1 */ 2);\n\n\n/**\n * A function that returns the `!` of its argument. It will return `true` when\n * passed false-y value, and `false` when passed a truth-y one.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Logic\n * @sig * -> Boolean\n * @param {*} a any value\n * @return {Boolean} the logical inverse of passed argument.\n * @see R.complement\n * @example\n *\n *      R.not(true); //=> false\n *      R.not(false); //=> true\n *      R.not(0); //=> true\n *      R.not(1); //=> false\n */\nmodule.exports = _curry1(function not(a) {\n  return !a;\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjQuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3JhbWRhL3NyYy9ub3QuanM/M2ZmNiJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX2N1cnJ5MSA9IHJlcXVpcmUoJy4vaW50ZXJuYWwvX2N1cnJ5MScpO1xuXG5cbi8qKlxuICogQSBmdW5jdGlvbiB0aGF0IHJldHVybnMgdGhlIGAhYCBvZiBpdHMgYXJndW1lbnQuIEl0IHdpbGwgcmV0dXJuIGB0cnVlYCB3aGVuXG4gKiBwYXNzZWQgZmFsc2UteSB2YWx1ZSwgYW5kIGBmYWxzZWAgd2hlbiBwYXNzZWQgYSB0cnV0aC15IG9uZS5cbiAqXG4gKiBAZnVuY1xuICogQG1lbWJlck9mIFJcbiAqIEBzaW5jZSB2MC4xLjBcbiAqIEBjYXRlZ29yeSBMb2dpY1xuICogQHNpZyAqIC0+IEJvb2xlYW5cbiAqIEBwYXJhbSB7Kn0gYSBhbnkgdmFsdWVcbiAqIEByZXR1cm4ge0Jvb2xlYW59IHRoZSBsb2dpY2FsIGludmVyc2Ugb2YgcGFzc2VkIGFyZ3VtZW50LlxuICogQHNlZSBSLmNvbXBsZW1lbnRcbiAqIEBleGFtcGxlXG4gKlxuICogICAgICBSLm5vdCh0cnVlKTsgLy89PiBmYWxzZVxuICogICAgICBSLm5vdChmYWxzZSk7IC8vPT4gdHJ1ZVxuICogICAgICBSLm5vdCgwKTsgLy89PiB0cnVlXG4gKiAgICAgIFIubm90KDEpOyAvLz0+IGZhbHNlXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gX2N1cnJ5MShmdW5jdGlvbiBub3QoYSkge1xuICByZXR1cm4gIWE7XG59KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9yYW1kYS9zcmMvbm90LmpzXG4vLyBtb2R1bGUgaWQgPSA2NFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 65 */
/* no static exports found */
/* all exports used */
/*!*****************************!*\
  !*** ./~/ramda/src/prop.js ***!
  \*****************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var _curry2 = __webpack_require__(/*! ./internal/_curry2 */ 1);\n\n\n/**\n * Returns a function that when supplied an object returns the indicated\n * property of that object, if it exists.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Object\n * @sig s -> {s: a} -> a | Undefined\n * @param {String} p The property name\n * @param {Object} obj The object to query\n * @return {*} The value at `obj.p`.\n * @see R.path\n * @example\n *\n *      R.prop('x', {x: 100}); //=> 100\n *      R.prop('x', {}); //=> undefined\n */\nmodule.exports = _curry2(function prop(p, obj) { return obj[p]; });\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjUuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3JhbWRhL3NyYy9wcm9wLmpzP2YyMzEiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIF9jdXJyeTIgPSByZXF1aXJlKCcuL2ludGVybmFsL19jdXJyeTInKTtcblxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0aGF0IHdoZW4gc3VwcGxpZWQgYW4gb2JqZWN0IHJldHVybnMgdGhlIGluZGljYXRlZFxuICogcHJvcGVydHkgb2YgdGhhdCBvYmplY3QsIGlmIGl0IGV4aXN0cy5cbiAqXG4gKiBAZnVuY1xuICogQG1lbWJlck9mIFJcbiAqIEBzaW5jZSB2MC4xLjBcbiAqIEBjYXRlZ29yeSBPYmplY3RcbiAqIEBzaWcgcyAtPiB7czogYX0gLT4gYSB8IFVuZGVmaW5lZFxuICogQHBhcmFtIHtTdHJpbmd9IHAgVGhlIHByb3BlcnR5IG5hbWVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmogVGhlIG9iamVjdCB0byBxdWVyeVxuICogQHJldHVybiB7Kn0gVGhlIHZhbHVlIGF0IGBvYmoucGAuXG4gKiBAc2VlIFIucGF0aFxuICogQGV4YW1wbGVcbiAqXG4gKiAgICAgIFIucHJvcCgneCcsIHt4OiAxMDB9KTsgLy89PiAxMDBcbiAqICAgICAgUi5wcm9wKCd4Jywge30pOyAvLz0+IHVuZGVmaW5lZFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IF9jdXJyeTIoZnVuY3Rpb24gcHJvcChwLCBvYmopIHsgcmV0dXJuIG9ialtwXTsgfSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcmFtZGEvc3JjL3Byb3AuanNcbi8vIG1vZHVsZSBpZCA9IDY1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 66 */
/* no static exports found */
/* all exports used */
/*!*******************************!*\
  !*** ./~/ramda/src/values.js ***!
  \*******************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var _curry1 = __webpack_require__(/*! ./internal/_curry1 */ 2);\nvar keys = __webpack_require__(/*! ./keys */ 17);\n\n\n/**\n * Returns a list of all the enumerable own properties of the supplied object.\n * Note that the order of the output array is not guaranteed across different\n * JS platforms.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Object\n * @sig {k: v} -> [v]\n * @param {Object} obj The object to extract values from\n * @return {Array} An array of the values of the object's own properties.\n * @example\n *\n *      R.values({a: 1, b: 2, c: 3}); //=> [1, 2, 3]\n */\nmodule.exports = _curry1(function values(obj) {\n  var props = keys(obj);\n  var len = props.length;\n  var vals = [];\n  var idx = 0;\n  while (idx < len) {\n    vals[idx] = obj[props[idx]];\n    idx += 1;\n  }\n  return vals;\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjYuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3JhbWRhL3NyYy92YWx1ZXMuanM/OGUzNyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX2N1cnJ5MSA9IHJlcXVpcmUoJy4vaW50ZXJuYWwvX2N1cnJ5MScpO1xudmFyIGtleXMgPSByZXF1aXJlKCcuL2tleXMnKTtcblxuXG4vKipcbiAqIFJldHVybnMgYSBsaXN0IG9mIGFsbCB0aGUgZW51bWVyYWJsZSBvd24gcHJvcGVydGllcyBvZiB0aGUgc3VwcGxpZWQgb2JqZWN0LlxuICogTm90ZSB0aGF0IHRoZSBvcmRlciBvZiB0aGUgb3V0cHV0IGFycmF5IGlzIG5vdCBndWFyYW50ZWVkIGFjcm9zcyBkaWZmZXJlbnRcbiAqIEpTIHBsYXRmb3Jtcy5cbiAqXG4gKiBAZnVuY1xuICogQG1lbWJlck9mIFJcbiAqIEBzaW5jZSB2MC4xLjBcbiAqIEBjYXRlZ29yeSBPYmplY3RcbiAqIEBzaWcge2s6IHZ9IC0+IFt2XVxuICogQHBhcmFtIHtPYmplY3R9IG9iaiBUaGUgb2JqZWN0IHRvIGV4dHJhY3QgdmFsdWVzIGZyb21cbiAqIEByZXR1cm4ge0FycmF5fSBBbiBhcnJheSBvZiB0aGUgdmFsdWVzIG9mIHRoZSBvYmplY3QncyBvd24gcHJvcGVydGllcy5cbiAqIEBleGFtcGxlXG4gKlxuICogICAgICBSLnZhbHVlcyh7YTogMSwgYjogMiwgYzogM30pOyAvLz0+IFsxLCAyLCAzXVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IF9jdXJyeTEoZnVuY3Rpb24gdmFsdWVzKG9iaikge1xuICB2YXIgcHJvcHMgPSBrZXlzKG9iaik7XG4gIHZhciBsZW4gPSBwcm9wcy5sZW5ndGg7XG4gIHZhciB2YWxzID0gW107XG4gIHZhciBpZHggPSAwO1xuICB3aGlsZSAoaWR4IDwgbGVuKSB7XG4gICAgdmFsc1tpZHhdID0gb2JqW3Byb3BzW2lkeF1dO1xuICAgIGlkeCArPSAxO1xuICB9XG4gIHJldHVybiB2YWxzO1xufSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcmFtZGEvc3JjL3ZhbHVlcy5qc1xuLy8gbW9kdWxlIGlkID0gNjZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 67 */
/* no static exports found */
/* all exports used */
/*!**************************************!*\
  !*** ./~/tangram-reference/index.js ***!
  \**************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var fs = __webpack_require__(/*! fs */ 11),\n    path = __webpack_require__(/*! path */ 12),\n    existsSync = __webpack_require__(/*! fs */ 11).existsSync || __webpack_require__(/*! path */ 12).existsSync;\n\nvar versions = [\n    '1.0.0'\n];\n\nmodule.exports.versions = versions;\n\nmodule.exports.load = function(version) {\n    if (versions.indexOf(version) <= -1) {\n\tthrow new Error(\"Unknown mapnik-reference version: '\" + version + \"'\");\n    }\n    var ref = __webpack_require__(/*! ./1.0.0/reference.json */ 193);\n //    var ds_path = path.join(__dirname, version, 'datasources.json');\n //    if (existsSync(ds_path)) {\n\t// ref.datasources = require(ds_path).datasources;\n //    }\n    return ref;\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjcuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3RhbmdyYW0tcmVmZXJlbmNlL2luZGV4LmpzPzg1NGIiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGZzID0gcmVxdWlyZSgnZnMnKSxcbiAgICBwYXRoID0gcmVxdWlyZSgncGF0aCcpLFxuICAgIGV4aXN0c1N5bmMgPSByZXF1aXJlKCdmcycpLmV4aXN0c1N5bmMgfHwgcmVxdWlyZSgncGF0aCcpLmV4aXN0c1N5bmM7XG5cbnZhciB2ZXJzaW9ucyA9IFtcbiAgICAnMS4wLjAnXG5dO1xuXG5tb2R1bGUuZXhwb3J0cy52ZXJzaW9ucyA9IHZlcnNpb25zO1xuXG5tb2R1bGUuZXhwb3J0cy5sb2FkID0gZnVuY3Rpb24odmVyc2lvbikge1xuICAgIGlmICh2ZXJzaW9ucy5pbmRleE9mKHZlcnNpb24pIDw9IC0xKSB7XG5cdHRocm93IG5ldyBFcnJvcihcIlVua25vd24gbWFwbmlrLXJlZmVyZW5jZSB2ZXJzaW9uOiAnXCIgKyB2ZXJzaW9uICsgXCInXCIpO1xuICAgIH1cbiAgICB2YXIgcmVmID0gcmVxdWlyZSgnLi8xLjAuMC9yZWZlcmVuY2UuanNvbicpO1xuIC8vICAgIHZhciBkc19wYXRoID0gcGF0aC5qb2luKF9fZGlybmFtZSwgdmVyc2lvbiwgJ2RhdGFzb3VyY2VzLmpzb24nKTtcbiAvLyAgICBpZiAoZXhpc3RzU3luYyhkc19wYXRoKSkge1xuXHQvLyByZWYuZGF0YXNvdXJjZXMgPSByZXF1aXJlKGRzX3BhdGgpLmRhdGFzb3VyY2VzO1xuIC8vICAgIH1cbiAgICByZXR1cm4gcmVmO1xufVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3RhbmdyYW0tcmVmZXJlbmNlL2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSA2N1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 68 */
/* no static exports found */
/* all exports used */
/*!************************!*\
  !*** ./~/util/util.js ***!
  \************************/
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global, process) {// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar formatRegExp = /%[sdj%]/g;\nexports.format = function(f) {\n  if (!isString(f)) {\n    var objects = [];\n    for (var i = 0; i < arguments.length; i++) {\n      objects.push(inspect(arguments[i]));\n    }\n    return objects.join(' ');\n  }\n\n  var i = 1;\n  var args = arguments;\n  var len = args.length;\n  var str = String(f).replace(formatRegExp, function(x) {\n    if (x === '%%') return '%';\n    if (i >= len) return x;\n    switch (x) {\n      case '%s': return String(args[i++]);\n      case '%d': return Number(args[i++]);\n      case '%j':\n        try {\n          return JSON.stringify(args[i++]);\n        } catch (_) {\n          return '[Circular]';\n        }\n      default:\n        return x;\n    }\n  });\n  for (var x = args[i]; i < len; x = args[++i]) {\n    if (isNull(x) || !isObject(x)) {\n      str += ' ' + x;\n    } else {\n      str += ' ' + inspect(x);\n    }\n  }\n  return str;\n};\n\n\n// Mark that a method should not be used.\n// Returns a modified function which warns once by default.\n// If --no-deprecation is set, then it is a no-op.\nexports.deprecate = function(fn, msg) {\n  // Allow for deprecating things in the process of starting up.\n  if (isUndefined(global.process)) {\n    return function() {\n      return exports.deprecate(fn, msg).apply(this, arguments);\n    };\n  }\n\n  if (process.noDeprecation === true) {\n    return fn;\n  }\n\n  var warned = false;\n  function deprecated() {\n    if (!warned) {\n      if (process.throwDeprecation) {\n        throw new Error(msg);\n      } else if (process.traceDeprecation) {\n        console.trace(msg);\n      } else {\n        console.error(msg);\n      }\n      warned = true;\n    }\n    return fn.apply(this, arguments);\n  }\n\n  return deprecated;\n};\n\n\nvar debugs = {};\nvar debugEnviron;\nexports.debuglog = function(set) {\n  if (isUndefined(debugEnviron))\n    debugEnviron = process.env.NODE_DEBUG || '';\n  set = set.toUpperCase();\n  if (!debugs[set]) {\n    if (new RegExp('\\\\b' + set + '\\\\b', 'i').test(debugEnviron)) {\n      var pid = process.pid;\n      debugs[set] = function() {\n        var msg = exports.format.apply(exports, arguments);\n        console.error('%s %d: %s', set, pid, msg);\n      };\n    } else {\n      debugs[set] = function() {};\n    }\n  }\n  return debugs[set];\n};\n\n\n/**\n * Echos the value of a value. Trys to print the value out\n * in the best way possible given the different types.\n *\n * @param {Object} obj The object to print out.\n * @param {Object} opts Optional options object that alters the output.\n */\n/* legacy: obj, showHidden, depth, colors*/\nfunction inspect(obj, opts) {\n  // default options\n  var ctx = {\n    seen: [],\n    stylize: stylizeNoColor\n  };\n  // legacy...\n  if (arguments.length >= 3) ctx.depth = arguments[2];\n  if (arguments.length >= 4) ctx.colors = arguments[3];\n  if (isBoolean(opts)) {\n    // legacy...\n    ctx.showHidden = opts;\n  } else if (opts) {\n    // got an \"options\" object\n    exports._extend(ctx, opts);\n  }\n  // set default options\n  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;\n  if (isUndefined(ctx.depth)) ctx.depth = 2;\n  if (isUndefined(ctx.colors)) ctx.colors = false;\n  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;\n  if (ctx.colors) ctx.stylize = stylizeWithColor;\n  return formatValue(ctx, obj, ctx.depth);\n}\nexports.inspect = inspect;\n\n\n// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics\ninspect.colors = {\n  'bold' : [1, 22],\n  'italic' : [3, 23],\n  'underline' : [4, 24],\n  'inverse' : [7, 27],\n  'white' : [37, 39],\n  'grey' : [90, 39],\n  'black' : [30, 39],\n  'blue' : [34, 39],\n  'cyan' : [36, 39],\n  'green' : [32, 39],\n  'magenta' : [35, 39],\n  'red' : [31, 39],\n  'yellow' : [33, 39]\n};\n\n// Don't use 'blue' not visible on cmd.exe\ninspect.styles = {\n  'special': 'cyan',\n  'number': 'yellow',\n  'boolean': 'yellow',\n  'undefined': 'grey',\n  'null': 'bold',\n  'string': 'green',\n  'date': 'magenta',\n  // \"name\": intentionally not styling\n  'regexp': 'red'\n};\n\n\nfunction stylizeWithColor(str, styleType) {\n  var style = inspect.styles[styleType];\n\n  if (style) {\n    return '\\u001b[' + inspect.colors[style][0] + 'm' + str +\n           '\\u001b[' + inspect.colors[style][1] + 'm';\n  } else {\n    return str;\n  }\n}\n\n\nfunction stylizeNoColor(str, styleType) {\n  return str;\n}\n\n\nfunction arrayToHash(array) {\n  var hash = {};\n\n  array.forEach(function(val, idx) {\n    hash[val] = true;\n  });\n\n  return hash;\n}\n\n\nfunction formatValue(ctx, value, recurseTimes) {\n  // Provide a hook for user-specified inspect functions.\n  // Check that value is an object with an inspect function on it\n  if (ctx.customInspect &&\n      value &&\n      isFunction(value.inspect) &&\n      // Filter out the util module, it's inspect function is special\n      value.inspect !== exports.inspect &&\n      // Also filter out any prototype objects using the circular check.\n      !(value.constructor && value.constructor.prototype === value)) {\n    var ret = value.inspect(recurseTimes, ctx);\n    if (!isString(ret)) {\n      ret = formatValue(ctx, ret, recurseTimes);\n    }\n    return ret;\n  }\n\n  // Primitive types cannot have properties\n  var primitive = formatPrimitive(ctx, value);\n  if (primitive) {\n    return primitive;\n  }\n\n  // Look up the keys of the object.\n  var keys = Object.keys(value);\n  var visibleKeys = arrayToHash(keys);\n\n  if (ctx.showHidden) {\n    keys = Object.getOwnPropertyNames(value);\n  }\n\n  // IE doesn't make error fields non-enumerable\n  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx\n  if (isError(value)\n      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {\n    return formatError(value);\n  }\n\n  // Some type of object without properties can be shortcutted.\n  if (keys.length === 0) {\n    if (isFunction(value)) {\n      var name = value.name ? ': ' + value.name : '';\n      return ctx.stylize('[Function' + name + ']', 'special');\n    }\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    }\n    if (isDate(value)) {\n      return ctx.stylize(Date.prototype.toString.call(value), 'date');\n    }\n    if (isError(value)) {\n      return formatError(value);\n    }\n  }\n\n  var base = '', array = false, braces = ['{', '}'];\n\n  // Make Array say that they are Array\n  if (isArray(value)) {\n    array = true;\n    braces = ['[', ']'];\n  }\n\n  // Make functions say that they are functions\n  if (isFunction(value)) {\n    var n = value.name ? ': ' + value.name : '';\n    base = ' [Function' + n + ']';\n  }\n\n  // Make RegExps say that they are RegExps\n  if (isRegExp(value)) {\n    base = ' ' + RegExp.prototype.toString.call(value);\n  }\n\n  // Make dates with properties first say the date\n  if (isDate(value)) {\n    base = ' ' + Date.prototype.toUTCString.call(value);\n  }\n\n  // Make error with message first say the error\n  if (isError(value)) {\n    base = ' ' + formatError(value);\n  }\n\n  if (keys.length === 0 && (!array || value.length == 0)) {\n    return braces[0] + base + braces[1];\n  }\n\n  if (recurseTimes < 0) {\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    } else {\n      return ctx.stylize('[Object]', 'special');\n    }\n  }\n\n  ctx.seen.push(value);\n\n  var output;\n  if (array) {\n    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);\n  } else {\n    output = keys.map(function(key) {\n      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);\n    });\n  }\n\n  ctx.seen.pop();\n\n  return reduceToSingleString(output, base, braces);\n}\n\n\nfunction formatPrimitive(ctx, value) {\n  if (isUndefined(value))\n    return ctx.stylize('undefined', 'undefined');\n  if (isString(value)) {\n    var simple = '\\'' + JSON.stringify(value).replace(/^\"|\"$/g, '')\n                                             .replace(/'/g, \"\\\\'\")\n                                             .replace(/\\\\\"/g, '\"') + '\\'';\n    return ctx.stylize(simple, 'string');\n  }\n  if (isNumber(value))\n    return ctx.stylize('' + value, 'number');\n  if (isBoolean(value))\n    return ctx.stylize('' + value, 'boolean');\n  // For some reason typeof null is \"object\", so special case here.\n  if (isNull(value))\n    return ctx.stylize('null', 'null');\n}\n\n\nfunction formatError(value) {\n  return '[' + Error.prototype.toString.call(value) + ']';\n}\n\n\nfunction formatArray(ctx, value, recurseTimes, visibleKeys, keys) {\n  var output = [];\n  for (var i = 0, l = value.length; i < l; ++i) {\n    if (hasOwnProperty(value, String(i))) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          String(i), true));\n    } else {\n      output.push('');\n    }\n  }\n  keys.forEach(function(key) {\n    if (!key.match(/^\\d+$/)) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          key, true));\n    }\n  });\n  return output;\n}\n\n\nfunction formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {\n  var name, str, desc;\n  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };\n  if (desc.get) {\n    if (desc.set) {\n      str = ctx.stylize('[Getter/Setter]', 'special');\n    } else {\n      str = ctx.stylize('[Getter]', 'special');\n    }\n  } else {\n    if (desc.set) {\n      str = ctx.stylize('[Setter]', 'special');\n    }\n  }\n  if (!hasOwnProperty(visibleKeys, key)) {\n    name = '[' + key + ']';\n  }\n  if (!str) {\n    if (ctx.seen.indexOf(desc.value) < 0) {\n      if (isNull(recurseTimes)) {\n        str = formatValue(ctx, desc.value, null);\n      } else {\n        str = formatValue(ctx, desc.value, recurseTimes - 1);\n      }\n      if (str.indexOf('\\n') > -1) {\n        if (array) {\n          str = str.split('\\n').map(function(line) {\n            return '  ' + line;\n          }).join('\\n').substr(2);\n        } else {\n          str = '\\n' + str.split('\\n').map(function(line) {\n            return '   ' + line;\n          }).join('\\n');\n        }\n      }\n    } else {\n      str = ctx.stylize('[Circular]', 'special');\n    }\n  }\n  if (isUndefined(name)) {\n    if (array && key.match(/^\\d+$/)) {\n      return str;\n    }\n    name = JSON.stringify('' + key);\n    if (name.match(/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)) {\n      name = name.substr(1, name.length - 2);\n      name = ctx.stylize(name, 'name');\n    } else {\n      name = name.replace(/'/g, \"\\\\'\")\n                 .replace(/\\\\\"/g, '\"')\n                 .replace(/(^\"|\"$)/g, \"'\");\n      name = ctx.stylize(name, 'string');\n    }\n  }\n\n  return name + ': ' + str;\n}\n\n\nfunction reduceToSingleString(output, base, braces) {\n  var numLinesEst = 0;\n  var length = output.reduce(function(prev, cur) {\n    numLinesEst++;\n    if (cur.indexOf('\\n') >= 0) numLinesEst++;\n    return prev + cur.replace(/\\u001b\\[\\d\\d?m/g, '').length + 1;\n  }, 0);\n\n  if (length > 60) {\n    return braces[0] +\n           (base === '' ? '' : base + '\\n ') +\n           ' ' +\n           output.join(',\\n  ') +\n           ' ' +\n           braces[1];\n  }\n\n  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];\n}\n\n\n// NOTE: These type checking functions intentionally don't use `instanceof`\n// because it is fragile and can be easily faked with `Object.create()`.\nfunction isArray(ar) {\n  return Array.isArray(ar);\n}\nexports.isArray = isArray;\n\nfunction isBoolean(arg) {\n  return typeof arg === 'boolean';\n}\nexports.isBoolean = isBoolean;\n\nfunction isNull(arg) {\n  return arg === null;\n}\nexports.isNull = isNull;\n\nfunction isNullOrUndefined(arg) {\n  return arg == null;\n}\nexports.isNullOrUndefined = isNullOrUndefined;\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\nexports.isNumber = isNumber;\n\nfunction isString(arg) {\n  return typeof arg === 'string';\n}\nexports.isString = isString;\n\nfunction isSymbol(arg) {\n  return typeof arg === 'symbol';\n}\nexports.isSymbol = isSymbol;\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\nexports.isUndefined = isUndefined;\n\nfunction isRegExp(re) {\n  return isObject(re) && objectToString(re) === '[object RegExp]';\n}\nexports.isRegExp = isRegExp;\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\nexports.isObject = isObject;\n\nfunction isDate(d) {\n  return isObject(d) && objectToString(d) === '[object Date]';\n}\nexports.isDate = isDate;\n\nfunction isError(e) {\n  return isObject(e) &&\n      (objectToString(e) === '[object Error]' || e instanceof Error);\n}\nexports.isError = isError;\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\nexports.isFunction = isFunction;\n\nfunction isPrimitive(arg) {\n  return arg === null ||\n         typeof arg === 'boolean' ||\n         typeof arg === 'number' ||\n         typeof arg === 'string' ||\n         typeof arg === 'symbol' ||  // ES6 symbol\n         typeof arg === 'undefined';\n}\nexports.isPrimitive = isPrimitive;\n\nexports.isBuffer = __webpack_require__(/*! ./support/isBuffer */ 195);\n\nfunction objectToString(o) {\n  return Object.prototype.toString.call(o);\n}\n\n\nfunction pad(n) {\n  return n < 10 ? '0' + n.toString(10) : n.toString(10);\n}\n\n\nvar months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',\n              'Oct', 'Nov', 'Dec'];\n\n// 26 Feb 16:19:34\nfunction timestamp() {\n  var d = new Date();\n  var time = [pad(d.getHours()),\n              pad(d.getMinutes()),\n              pad(d.getSeconds())].join(':');\n  return [d.getDate(), months[d.getMonth()], time].join(' ');\n}\n\n\n// log is just a thin wrapper to console.log that prepends a timestamp\nexports.log = function() {\n  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));\n};\n\n\n/**\n * Inherit the prototype methods from one constructor into another.\n *\n * The Function.prototype.inherits from lang.js rewritten as a standalone\n * function (not on Function.prototype). NOTE: If this file is to be loaded\n * during bootstrapping this function needs to be rewritten using some native\n * functions as prototype setup using normal JavaScript does not work as\n * expected during bootstrapping (see mirror.js in r114903).\n *\n * @param {function} ctor Constructor function which needs to inherit the\n *     prototype.\n * @param {function} superCtor Constructor function to inherit prototype from.\n */\nexports.inherits = __webpack_require__(/*! inherits */ 194);\n\nexports._extend = function(origin, add) {\n  // Don't do anything if add isn't an object\n  if (!add || !isObject(add)) return origin;\n\n  var keys = Object.keys(add);\n  var i = keys.length;\n  while (i--) {\n    origin[keys[i]] = add[keys[i]];\n  }\n  return origin;\n};\n\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./../webpack/buildin/global.js */ 3), __webpack_require__(/*! ./../process/browser.js */ 36)))//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 69 */
/* no static exports found */
/* all exports used */
/*!*************************!*\
  !*** external "window" ***!
  \*************************/
/***/ (function(module, exports) {

eval("(function() { module.exports = this[\"window\"]; }());//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjkuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJ3aW5kb3dcIj9kOTdjIl0sInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbigpIHsgbW9kdWxlLmV4cG9ydHMgPSB0aGlzW1wid2luZG93XCJdOyB9KCkpO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIGV4dGVybmFsIFwid2luZG93XCJcbi8vIG1vZHVsZSBpZCA9IDY5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUEiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 70 */
/* no static exports found */
/* all exports used */
/*!**********************!*\
  !*** ./src/carto.js ***!
  \**********************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _carto = __webpack_require__(/*! carto */ 27);\n\nvar _carto2 = _interopRequireDefault(_carto);\n\nvar _points = __webpack_require__(/*! ./basic/points */ 73);\n\nvar _points2 = _interopRequireDefault(_points);\n\nvar _polygons = __webpack_require__(/*! ./basic/polygons */ 74);\n\nvar _polygons2 = _interopRequireDefault(_polygons);\n\nvar _lines = __webpack_require__(/*! ./basic/lines */ 72);\n\nvar _lines2 = _interopRequireDefault(_lines);\n\nvar _text = __webpack_require__(/*! ./basic/text */ 75);\n\nvar _text2 = _interopRequireDefault(_text);\n\nvar _tangramReference = __webpack_require__(/*! tangram-reference */ 67);\n\nvar _tangramReference2 = _interopRequireDefault(_tangramReference);\n\nvar _md = __webpack_require__(/*! md5 */ 35);\n\nvar _md2 = _interopRequireDefault(_md);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar ref = _tangramReference2.default.load('1.0.0');\nvar CartoCSSRenderer = new _carto2.default.RendererJS({\n  reference: ref,\n  strict: true\n});\n\nvar extractFeatures = function extractFeatures(ccss, index) {\n  var layers = CartoCSSRenderer.render(ccss).getLayers(),\n      id = (0, _md2.default)(ccss),\n      tLy = [];\n\n  // NOTE: this is wrong, we have to separate the layers.\n  for (var i = 0; i < layers.length; i++) {\n    var ly = layers[i].shader,\n        draw = {},\n        textures = {},\n        styles = {};\n\n    Object.assign(draw, _points2.default.getDraw(ly, id), _polygons2.default.getDraw(ly, id), _lines2.default.getDraw(ly, id), _text2.default.getDraw(ly, id));\n\n    Object.assign(textures, _points2.default.getTextures(ly), _polygons2.default.getTextures(ly));\n\n    Object.assign(styles, _points2.default.getStyle(ly, id, index), _polygons2.default.getStyle(ly, id, index), _lines2.default.getStyle(ly, id, index), _text2.default.getStyle(ly, id, index));\n\n    tLy.push({ textures: textures, draw: draw, styles: styles, name: ly.attachment });\n  }\n\n  return tLy;\n};\n\nvar C2T;\n\nexports.default = C2T = {\n  extractFeatures: extractFeatures\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzAuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL2NhcnRvLmpzPzgxYTEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IENhcnRvIGZyb20gJ2NhcnRvJztcbmltcG9ydCBQb2ludHMgZnJvbSAnLi9iYXNpYy9wb2ludHMnO1xuaW1wb3J0IFBvbHlnb25zIGZyb20gJy4vYmFzaWMvcG9seWdvbnMnO1xuaW1wb3J0IExpbmVzIGZyb20gJy4vYmFzaWMvbGluZXMnO1xuaW1wb3J0IFRleHRQb2ludHMgZnJvbSAnLi9iYXNpYy90ZXh0JztcbmltcG9ydCB0YW5ncmFtUmVmZXJlbmNlIGZyb20gJ3RhbmdyYW0tcmVmZXJlbmNlJztcbmltcG9ydCBNRDUgZnJvbSAnbWQ1JztcblxuY29uc3QgcmVmID0gdGFuZ3JhbVJlZmVyZW5jZS5sb2FkKCcxLjAuMCcpO1xuY29uc3QgQ2FydG9DU1NSZW5kZXJlciA9IG5ldyBDYXJ0by5SZW5kZXJlckpTKHtcbiAgcmVmZXJlbmNlOiByZWYsXG4gIHN0cmljdDogdHJ1ZVxufSk7XG5cbmNvbnN0IGV4dHJhY3RGZWF0dXJlcyA9IGZ1bmN0aW9uIChjY3NzLCBpbmRleCkge1xuICBsZXQgbGF5ZXJzID0gQ2FydG9DU1NSZW5kZXJlci5yZW5kZXIoY2NzcykuZ2V0TGF5ZXJzKCksXG4gICAgICBpZCA9IE1ENShjY3NzKSxcbiAgICAgIHRMeSA9IFtdO1xuXG4gIC8vIE5PVEU6IHRoaXMgaXMgd3JvbmcsIHdlIGhhdmUgdG8gc2VwYXJhdGUgdGhlIGxheWVycy5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsYXllcnMubGVuZ3RoOyBpKyspIHtcblx0XHRsZXQgbHkgPSBsYXllcnNbaV0uc2hhZGVyLFxuICAgICAgICBkcmF3ID0ge30sXG4gICAgICAgIHRleHR1cmVzID0ge30sXG4gICAgICAgIHN0eWxlcyA9IHt9O1xuXG4gICAgT2JqZWN0LmFzc2lnbihcbiAgICAgICAgZHJhdyxcbiAgICAgICAgUG9pbnRzLmdldERyYXcobHksIGlkKSxcbiAgICAgICAgUG9seWdvbnMuZ2V0RHJhdyhseSwgaWQpLFxuICAgICAgICBMaW5lcy5nZXREcmF3KGx5LCBpZCksXG4gICAgICAgIFRleHRQb2ludHMuZ2V0RHJhdyhseSwgaWQpXG4gICAgICApO1xuXG4gICAgT2JqZWN0LmFzc2lnbihcbiAgICAgICAgdGV4dHVyZXMsXG4gICAgICAgIFBvaW50cy5nZXRUZXh0dXJlcyhseSksXG4gICAgICAgIFBvbHlnb25zLmdldFRleHR1cmVzKGx5KVxuICAgICAgKTtcblxuICAgIE9iamVjdC5hc3NpZ24oXG4gICAgICAgIHN0eWxlcyxcbiAgICAgICAgUG9pbnRzLmdldFN0eWxlKGx5LCBpZCwgaW5kZXgpLFxuICAgICAgICBQb2x5Z29ucy5nZXRTdHlsZShseSwgaWQsIGluZGV4KSxcbiAgICAgICAgTGluZXMuZ2V0U3R5bGUobHksIGlkLCBpbmRleCksXG4gICAgICAgIFRleHRQb2ludHMuZ2V0U3R5bGUobHksIGlkLCBpbmRleClcbiAgICAgICk7XG5cbiAgICB0THkucHVzaCh7dGV4dHVyZXMsIGRyYXcsIHN0eWxlcywgbmFtZTpseS5hdHRhY2htZW50fSk7XG4gIH1cblxuICByZXR1cm4gdEx5O1xufTtcblxudmFyIEMyVDtcblxuZXhwb3J0IGRlZmF1bHQgQzJUID0ge1xuICBleHRyYWN0RmVhdHVyZXNcbn07XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gc3JjL2NhcnRvLmpzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTtBQUNBOzs7QUFBQTtBQUNBOzs7QUFBQTtBQUNBOzs7QUFBQTtBQUNBOzs7QUFBQTtBQUNBOzs7QUFBQTtBQUNBOzs7QUFBQTtBQUNBOzs7OztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRkE7QUFDQTtBQUlBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUlBO0FBQ0E7QUFPQTtBQUNBO0FBS0E7QUFDQTtBQU9BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBREEiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 71 */
/* no static exports found */
/* all exports used */
/*!****************************!*\
  !*** ./~/assert/assert.js ***!
  \****************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(global) {\n\n// compare and isBuffer taken from https://github.com/feross/buffer/blob/680e9e5e488f22aac27599a57dc844a6315928dd/index.js\n// original notice:\n\n/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\nfunction compare(a, b) {\n  if (a === b) {\n    return 0;\n  }\n\n  var x = a.length;\n  var y = b.length;\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i];\n      y = b[i];\n      break;\n    }\n  }\n\n  if (x < y) {\n    return -1;\n  }\n  if (y < x) {\n    return 1;\n  }\n  return 0;\n}\nfunction isBuffer(b) {\n  if (global.Buffer && typeof global.Buffer.isBuffer === 'function') {\n    return global.Buffer.isBuffer(b);\n  }\n  return !!(b != null && b._isBuffer);\n}\n\n// based on node assert, original notice:\n\n// http://wiki.commonjs.org/wiki/Unit_Testing/1.0\n//\n// THIS IS NOT TESTED NOR LIKELY TO WORK OUTSIDE V8!\n//\n// Originally from narwhal.js (http://narwhaljs.org)\n// Copyright (c) 2009 Thomas Robinson <280north.com>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the 'Software'), to\n// deal in the Software without restriction, including without limitation the\n// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n// sell copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar util = __webpack_require__(/*! util/ */ 68);\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar pSlice = Array.prototype.slice;\nvar functionsHaveNames = (function () {\n  return function foo() {}.name === 'foo';\n}());\nfunction pToString (obj) {\n  return Object.prototype.toString.call(obj);\n}\nfunction isView(arrbuf) {\n  if (isBuffer(arrbuf)) {\n    return false;\n  }\n  if (typeof global.ArrayBuffer !== 'function') {\n    return false;\n  }\n  if (typeof ArrayBuffer.isView === 'function') {\n    return ArrayBuffer.isView(arrbuf);\n  }\n  if (!arrbuf) {\n    return false;\n  }\n  if (arrbuf instanceof DataView) {\n    return true;\n  }\n  if (arrbuf.buffer && arrbuf.buffer instanceof ArrayBuffer) {\n    return true;\n  }\n  return false;\n}\n// 1. The assert module provides functions that throw\n// AssertionError's when particular conditions are not met. The\n// assert module must conform to the following interface.\n\nvar assert = module.exports = ok;\n\n// 2. The AssertionError is defined in assert.\n// new assert.AssertionError({ message: message,\n//                             actual: actual,\n//                             expected: expected })\n\nvar regex = /\\s*function\\s+([^\\(\\s]*)\\s*/;\n// based on https://github.com/ljharb/function.prototype.name/blob/adeeeec8bfcc6068b187d7d9fb3d5bb1d3a30899/implementation.js\nfunction getName(func) {\n  if (!util.isFunction(func)) {\n    return;\n  }\n  if (functionsHaveNames) {\n    return func.name;\n  }\n  var str = func.toString();\n  var match = str.match(regex);\n  return match && match[1];\n}\nassert.AssertionError = function AssertionError(options) {\n  this.name = 'AssertionError';\n  this.actual = options.actual;\n  this.expected = options.expected;\n  this.operator = options.operator;\n  if (options.message) {\n    this.message = options.message;\n    this.generatedMessage = false;\n  } else {\n    this.message = getMessage(this);\n    this.generatedMessage = true;\n  }\n  var stackStartFunction = options.stackStartFunction || fail;\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, stackStartFunction);\n  } else {\n    // non v8 browsers so we can have a stacktrace\n    var err = new Error();\n    if (err.stack) {\n      var out = err.stack;\n\n      // try to strip useless frames\n      var fn_name = getName(stackStartFunction);\n      var idx = out.indexOf('\\n' + fn_name);\n      if (idx >= 0) {\n        // once we have located the function frame\n        // we need to strip out everything before it (and its line)\n        var next_line = out.indexOf('\\n', idx + 1);\n        out = out.substring(next_line + 1);\n      }\n\n      this.stack = out;\n    }\n  }\n};\n\n// assert.AssertionError instanceof Error\nutil.inherits(assert.AssertionError, Error);\n\nfunction truncate(s, n) {\n  if (typeof s === 'string') {\n    return s.length < n ? s : s.slice(0, n);\n  } else {\n    return s;\n  }\n}\nfunction inspect(something) {\n  if (functionsHaveNames || !util.isFunction(something)) {\n    return util.inspect(something);\n  }\n  var rawname = getName(something);\n  var name = rawname ? ': ' + rawname : '';\n  return '[Function' +  name + ']';\n}\nfunction getMessage(self) {\n  return truncate(inspect(self.actual), 128) + ' ' +\n         self.operator + ' ' +\n         truncate(inspect(self.expected), 128);\n}\n\n// At present only the three keys mentioned above are used and\n// understood by the spec. Implementations or sub modules can pass\n// other keys to the AssertionError's constructor - they will be\n// ignored.\n\n// 3. All of the following functions must throw an AssertionError\n// when a corresponding condition is not met, with a message that\n// may be undefined if not provided.  All assertion methods provide\n// both the actual and expected values to the assertion error for\n// display purposes.\n\nfunction fail(actual, expected, message, operator, stackStartFunction) {\n  throw new assert.AssertionError({\n    message: message,\n    actual: actual,\n    expected: expected,\n    operator: operator,\n    stackStartFunction: stackStartFunction\n  });\n}\n\n// EXTENSION! allows for well behaved errors defined elsewhere.\nassert.fail = fail;\n\n// 4. Pure assertion tests whether a value is truthy, as determined\n// by !!guard.\n// assert.ok(guard, message_opt);\n// This statement is equivalent to assert.equal(true, !!guard,\n// message_opt);. To test strictly for the value true, use\n// assert.strictEqual(true, guard, message_opt);.\n\nfunction ok(value, message) {\n  if (!value) fail(value, true, message, '==', assert.ok);\n}\nassert.ok = ok;\n\n// 5. The equality assertion tests shallow, coercive equality with\n// ==.\n// assert.equal(actual, expected, message_opt);\n\nassert.equal = function equal(actual, expected, message) {\n  if (actual != expected) fail(actual, expected, message, '==', assert.equal);\n};\n\n// 6. The non-equality assertion tests for whether two objects are not equal\n// with != assert.notEqual(actual, expected, message_opt);\n\nassert.notEqual = function notEqual(actual, expected, message) {\n  if (actual == expected) {\n    fail(actual, expected, message, '!=', assert.notEqual);\n  }\n};\n\n// 7. The equivalence assertion tests a deep equality relation.\n// assert.deepEqual(actual, expected, message_opt);\n\nassert.deepEqual = function deepEqual(actual, expected, message) {\n  if (!_deepEqual(actual, expected, false)) {\n    fail(actual, expected, message, 'deepEqual', assert.deepEqual);\n  }\n};\n\nassert.deepStrictEqual = function deepStrictEqual(actual, expected, message) {\n  if (!_deepEqual(actual, expected, true)) {\n    fail(actual, expected, message, 'deepStrictEqual', assert.deepStrictEqual);\n  }\n};\n\nfunction _deepEqual(actual, expected, strict, memos) {\n  // 7.1. All identical values are equivalent, as determined by ===.\n  if (actual === expected) {\n    return true;\n  } else if (isBuffer(actual) && isBuffer(expected)) {\n    return compare(actual, expected) === 0;\n\n  // 7.2. If the expected value is a Date object, the actual value is\n  // equivalent if it is also a Date object that refers to the same time.\n  } else if (util.isDate(actual) && util.isDate(expected)) {\n    return actual.getTime() === expected.getTime();\n\n  // 7.3 If the expected value is a RegExp object, the actual value is\n  // equivalent if it is also a RegExp object with the same source and\n  // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).\n  } else if (util.isRegExp(actual) && util.isRegExp(expected)) {\n    return actual.source === expected.source &&\n           actual.global === expected.global &&\n           actual.multiline === expected.multiline &&\n           actual.lastIndex === expected.lastIndex &&\n           actual.ignoreCase === expected.ignoreCase;\n\n  // 7.4. Other pairs that do not both pass typeof value == 'object',\n  // equivalence is determined by ==.\n  } else if ((actual === null || typeof actual !== 'object') &&\n             (expected === null || typeof expected !== 'object')) {\n    return strict ? actual === expected : actual == expected;\n\n  // If both values are instances of typed arrays, wrap their underlying\n  // ArrayBuffers in a Buffer each to increase performance\n  // This optimization requires the arrays to have the same type as checked by\n  // Object.prototype.toString (aka pToString). Never perform binary\n  // comparisons for Float*Arrays, though, since e.g. +0 === -0 but their\n  // bit patterns are not identical.\n  } else if (isView(actual) && isView(expected) &&\n             pToString(actual) === pToString(expected) &&\n             !(actual instanceof Float32Array ||\n               actual instanceof Float64Array)) {\n    return compare(new Uint8Array(actual.buffer),\n                   new Uint8Array(expected.buffer)) === 0;\n\n  // 7.5 For all other Object pairs, including Array objects, equivalence is\n  // determined by having the same number of owned properties (as verified\n  // with Object.prototype.hasOwnProperty.call), the same set of keys\n  // (although not necessarily the same order), equivalent values for every\n  // corresponding key, and an identical 'prototype' property. Note: this\n  // accounts for both named and indexed properties on Arrays.\n  } else if (isBuffer(actual) !== isBuffer(expected)) {\n    return false;\n  } else {\n    memos = memos || {actual: [], expected: []};\n\n    var actualIndex = memos.actual.indexOf(actual);\n    if (actualIndex !== -1) {\n      if (actualIndex === memos.expected.indexOf(expected)) {\n        return true;\n      }\n    }\n\n    memos.actual.push(actual);\n    memos.expected.push(expected);\n\n    return objEquiv(actual, expected, strict, memos);\n  }\n}\n\nfunction isArguments(object) {\n  return Object.prototype.toString.call(object) == '[object Arguments]';\n}\n\nfunction objEquiv(a, b, strict, actualVisitedObjects) {\n  if (a === null || a === undefined || b === null || b === undefined)\n    return false;\n  // if one is a primitive, the other must be same\n  if (util.isPrimitive(a) || util.isPrimitive(b))\n    return a === b;\n  if (strict && Object.getPrototypeOf(a) !== Object.getPrototypeOf(b))\n    return false;\n  var aIsArgs = isArguments(a);\n  var bIsArgs = isArguments(b);\n  if ((aIsArgs && !bIsArgs) || (!aIsArgs && bIsArgs))\n    return false;\n  if (aIsArgs) {\n    a = pSlice.call(a);\n    b = pSlice.call(b);\n    return _deepEqual(a, b, strict);\n  }\n  var ka = objectKeys(a);\n  var kb = objectKeys(b);\n  var key, i;\n  // having the same number of owned properties (keys incorporates\n  // hasOwnProperty)\n  if (ka.length !== kb.length)\n    return false;\n  //the same set of keys (although not necessarily the same order),\n  ka.sort();\n  kb.sort();\n  //~~~cheap key test\n  for (i = ka.length - 1; i >= 0; i--) {\n    if (ka[i] !== kb[i])\n      return false;\n  }\n  //equivalent values for every corresponding key, and\n  //~~~possibly expensive deep test\n  for (i = ka.length - 1; i >= 0; i--) {\n    key = ka[i];\n    if (!_deepEqual(a[key], b[key], strict, actualVisitedObjects))\n      return false;\n  }\n  return true;\n}\n\n// 8. The non-equivalence assertion tests for any deep inequality.\n// assert.notDeepEqual(actual, expected, message_opt);\n\nassert.notDeepEqual = function notDeepEqual(actual, expected, message) {\n  if (_deepEqual(actual, expected, false)) {\n    fail(actual, expected, message, 'notDeepEqual', assert.notDeepEqual);\n  }\n};\n\nassert.notDeepStrictEqual = notDeepStrictEqual;\nfunction notDeepStrictEqual(actual, expected, message) {\n  if (_deepEqual(actual, expected, true)) {\n    fail(actual, expected, message, 'notDeepStrictEqual', notDeepStrictEqual);\n  }\n}\n\n\n// 9. The strict equality assertion tests strict equality, as determined by ===.\n// assert.strictEqual(actual, expected, message_opt);\n\nassert.strictEqual = function strictEqual(actual, expected, message) {\n  if (actual !== expected) {\n    fail(actual, expected, message, '===', assert.strictEqual);\n  }\n};\n\n// 10. The strict non-equality assertion tests for strict inequality, as\n// determined by !==.  assert.notStrictEqual(actual, expected, message_opt);\n\nassert.notStrictEqual = function notStrictEqual(actual, expected, message) {\n  if (actual === expected) {\n    fail(actual, expected, message, '!==', assert.notStrictEqual);\n  }\n};\n\nfunction expectedException(actual, expected) {\n  if (!actual || !expected) {\n    return false;\n  }\n\n  if (Object.prototype.toString.call(expected) == '[object RegExp]') {\n    return expected.test(actual);\n  }\n\n  try {\n    if (actual instanceof expected) {\n      return true;\n    }\n  } catch (e) {\n    // Ignore.  The instanceof check doesn't work for arrow functions.\n  }\n\n  if (Error.isPrototypeOf(expected)) {\n    return false;\n  }\n\n  return expected.call({}, actual) === true;\n}\n\nfunction _tryBlock(block) {\n  var error;\n  try {\n    block();\n  } catch (e) {\n    error = e;\n  }\n  return error;\n}\n\nfunction _throws(shouldThrow, block, expected, message) {\n  var actual;\n\n  if (typeof block !== 'function') {\n    throw new TypeError('\"block\" argument must be a function');\n  }\n\n  if (typeof expected === 'string') {\n    message = expected;\n    expected = null;\n  }\n\n  actual = _tryBlock(block);\n\n  message = (expected && expected.name ? ' (' + expected.name + ').' : '.') +\n            (message ? ' ' + message : '.');\n\n  if (shouldThrow && !actual) {\n    fail(actual, expected, 'Missing expected exception' + message);\n  }\n\n  var userProvidedMessage = typeof message === 'string';\n  var isUnwantedException = !shouldThrow && util.isError(actual);\n  var isUnexpectedException = !shouldThrow && actual && !expected;\n\n  if ((isUnwantedException &&\n      userProvidedMessage &&\n      expectedException(actual, expected)) ||\n      isUnexpectedException) {\n    fail(actual, expected, 'Got unwanted exception' + message);\n  }\n\n  if ((shouldThrow && actual && expected &&\n      !expectedException(actual, expected)) || (!shouldThrow && actual)) {\n    throw actual;\n  }\n}\n\n// 11. Expected to throw an error:\n// assert.throws(block, Error_opt, message_opt);\n\nassert.throws = function(block, /*optional*/error, /*optional*/message) {\n  _throws(true, block, error, message);\n};\n\n// EXTENSION! This is annoying to write outside this module.\nassert.doesNotThrow = function(block, /*optional*/error, /*optional*/message) {\n  _throws(false, block, error, message);\n};\n\nassert.ifError = function(err) { if (err) throw err; };\n\nvar objectKeys = Object.keys || function (obj) {\n  var keys = [];\n  for (var key in obj) {\n    if (hasOwn.call(obj, key)) keys.push(key);\n  }\n  return keys;\n};\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./../webpack/buildin/global.js */ 3)))//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 72 */
/* no static exports found */
/* all exports used */
/*!****************************!*\
  !*** ./src/basic/lines.js ***!
  \****************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _identity = __webpack_require__(/*! ramda/src/identity */ 149);\n\nvar _identity2 = _interopRequireDefault(_identity);\n\nvar _cond = __webpack_require__(/*! ramda/src/cond */ 144);\n\nvar _cond2 = _interopRequireDefault(_cond);\n\nvar _equals = __webpack_require__(/*! ramda/src/equals */ 56);\n\nvar _equals2 = _interopRequireDefault(_equals);\n\nvar _not = __webpack_require__(/*! ramda/src/not */ 64);\n\nvar _not2 = _interopRequireDefault(_not);\n\nvar _compose = __webpack_require__(/*! ramda/src/compose */ 13);\n\nvar _compose2 = _interopRequireDefault(_compose);\n\nvar _curry = __webpack_require__(/*! ramda/src/curry */ 24);\n\nvar _curry2 = _interopRequireDefault(_curry);\n\nvar _referenceHelpers = __webpack_require__(/*! ../utils/reference-helpers */ 18);\n\nvar _reference = __webpack_require__(/*! ../utils/reference */ 9);\n\nvar _reference2 = _interopRequireDefault(_reference);\n\nvar _geom = __webpack_require__(/*! ../utils/geom */ 78);\n\nvar _geom2 = _interopRequireDefault(_geom);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/*\n\t ___       ___  ________   _______   ________\n\t|\\  \\     |\\  \\|\\   ___  \\|\\  ___ \\ |\\   ____\\\n\t\\ \\  \\    \\ \\  \\ \\  \\\\ \\  \\ \\   __/|\\ \\  \\___|_\n\t \\ \\  \\    \\ \\  \\ \\  \\\\ \\  \\ \\  \\_|/_\\ \\_____  \\\n\t  \\ \\  \\____\\ \\  \\ \\  \\\\ \\  \\ \\  \\_|\\ \\|____|\\  \\\n\t   \\ \\_______\\ \\__\\ \\__\\\\ \\__\\ \\_______\\____\\_\\  \\\n\t    \\|_______|\\|__|\\|__| \\|__|\\|_______|\\_________\\\n\t                                       \\|_________|\n\n */\n\n/*\n\tEXTERNAL DEPENDENCIES\n */\n\nvar notEq = (0, _curry2.default)((0, _compose2.default)(_not2.default, _equals2.default));\n\n/*\n\tINTERNAL DEPENDENCIES\n */\n\nvar LR = _reference2.default.getLine(null); // Line reference\n/*\n\tINTERNAL LINE FUNCTIONS\n */\n\nvar checkLineSym = _reference2.default.checkSymbolizer('line');\n\n/**\n * Function for getting the color in rgba\n *\n * @param   {object} c3ss compiled carto css\n * @returns {object} with a function that contain the conditions to return a color with alpha channel\n */\n\nvar getColor = (0, _referenceHelpers.getColorFn)((0, _referenceHelpers.getPropertyOrDefFn)('stroke', LR), (0, _referenceHelpers.getPropertyOrDefFn)('stroke-opacity', LR));\n\n/**\n * Function for getting extrude property\n *\n * @param   {object} c3ss compiled carto css\n * @returns {object} with a function that contain the conditions to return the extrude\n */\n\nvar getExtrude = (0, _referenceHelpers.getPropertyOrDefFn)('tg-stroke-extrude');\n\n/**\n * Function for getting the width in meters dynamically by zoom\n *\n * @param   {object} c3ss compiled carto css\n * @returns {object} witha a function with the conditions to return width value\n */\n\nvar getWidth = (0, _compose2.default)(_geom2.default.px2Meters, (0, _referenceHelpers.getPropertyOrDefFn)('stroke-width', LR));\n\n/**\n * Function for getting the cap statically\n *\n * @param   {object} c3ss compiled carto css\n * @returns {string} with cap value Ex: round\n */\nvar getCap = (0, _referenceHelpers.getExecutedFn)('stroke-linecap', LR);\n\n/**\n * Function for getting the join statically\n *\n * @param   {object} c3ss compiled carto css\n * @returns {string} with join value Ex: round\n */\nvar getJoin = (0, _referenceHelpers.getExecutedFn)('stroke-linejoin', LR);\n\n/**\n * Function for getting the blend statically\n *\n * @param   {object} c3ss compiled carto css\n * @returns {string} with blending value Ex: \"multiply\"\n */\nvar getBlending = (0, _referenceHelpers.getBlendFn)(LR);\n\n/**\n * Function for getting dash value statically\n *\n * @param   {object} c3ss compiled carto css\n * @returns {string} with dash value Ex: [2, 1]\n */\n\nvar getDashed = (0, _compose2.default)((0, _cond2.default)([[notEq('none'), _identity2.default]]), (0, _referenceHelpers.getExecutedFn)('stroke-dasharray', LR));\n\n/**\n * Basic Line\n */\n\nvar Line = {};\n\nexports.default = Line;\n\n/**\n * Function to get the draw object of a line.\n *\n * @param   {object} c3ss compiled carto css\n * @returns {function} function with the conditions to return alpha value\n */\n\nLine.getDraw = function (c3ss, id) {\n  var draw = {};\n  if (checkLineSym(c3ss)) {\n    draw['lines_' + id] = {\n      color: getColor(c3ss),\n      width: getWidth(c3ss),\n      cap: getCap(c3ss),\n      join: getJoin(c3ss),\n      extrude: getExtrude(c3ss)\n    };\n  }\n\n  return draw;\n};\n\n/**\n * Function to get the style configuration of a line.\n *\n * @returns default style configuration for lines\n */\nLine.getStyle = function (c3ss, id, ord) {\n  var style = {};\n\n  style['lines_' + id] = {\n    base: 'lines',\n    blend: getBlending(c3ss),\n    dash: getDashed(c3ss),\n    blend_order: typeof ord === 'number' ? ord + 1 : 1\n  };\n\n  return style;\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzIuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL2Jhc2ljL2xpbmVzLmpzPzRlYWMiXSwic291cmNlc0NvbnRlbnQiOlsiLypcblx0IF9fXyAgICAgICBfX18gIF9fX19fX19fICAgX19fX19fXyAgIF9fX19fX19fXG5cdHxcXCAgXFwgICAgIHxcXCAgXFx8XFwgICBfX18gIFxcfFxcICBfX18gXFwgfFxcICAgX19fX1xcXG5cdFxcIFxcICBcXCAgICBcXCBcXCAgXFwgXFwgIFxcXFwgXFwgIFxcIFxcICAgX18vfFxcIFxcICBcXF9fX3xfXG5cdCBcXCBcXCAgXFwgICAgXFwgXFwgIFxcIFxcICBcXFxcIFxcICBcXCBcXCAgXFxffC9fXFwgXFxfX19fXyAgXFxcblx0ICBcXCBcXCAgXFxfX19fXFwgXFwgIFxcIFxcICBcXFxcIFxcICBcXCBcXCAgXFxffFxcIFxcfF9fX198XFwgIFxcXG5cdCAgIFxcIFxcX19fX19fX1xcIFxcX19cXCBcXF9fXFxcXCBcXF9fXFwgXFxfX19fX19fXFxfX19fXFxfXFwgIFxcXG5cdCAgICBcXHxfX19fX19ffFxcfF9ffFxcfF9ffCBcXHxfX3xcXHxfX19fX19ffFxcX19fX19fX19fXFxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXFx8X19fX19fX19ffFxuXG4gKi9cblxuLypcblx0RVhURVJOQUwgREVQRU5ERU5DSUVTXG4gKi9cblxuaW1wb3J0IHtjdXJyeSwgY29tcG9zZSwgbm90LCBlcXVhbHMsIGlkZW50aXR5LCBjb25kfSBmcm9tICdyYW1kYSc7XG5cbi8qXG5cdElOVEVSTkFMIERFUEVOREVOQ0lFU1xuICovXG5cbmltcG9ydCB7IGdldEV4ZWN1dGVkRm4sIGdldFByb3BlcnR5T3JEZWZGbiwgZ2V0QmxlbmRGbiwgZ2V0Q29sb3JGbiB9IGZyb20gJy4uL3V0aWxzL3JlZmVyZW5jZS1oZWxwZXJzJztcbmltcG9ydCBUYW5ncmFtUmVmZXJlbmNlIGZyb20gJy4uL3V0aWxzL3JlZmVyZW5jZSc7XG5pbXBvcnQgR2VvbSBmcm9tICcuLi91dGlscy9nZW9tJztcblxuY29uc3Qgbm90RXEgPSBjdXJyeShjb21wb3NlKG5vdCwgZXF1YWxzKSk7XG5cbmNvbnN0IExSID0gVGFuZ3JhbVJlZmVyZW5jZS5nZXRMaW5lKG51bGwpOyAvLyBMaW5lIHJlZmVyZW5jZVxuLypcblx0SU5URVJOQUwgTElORSBGVU5DVElPTlNcbiAqL1xuXG5jb25zdCBjaGVja0xpbmVTeW0gPSBUYW5ncmFtUmVmZXJlbmNlLmNoZWNrU3ltYm9saXplcignbGluZScpO1xuXG4vKipcbiAqIEZ1bmN0aW9uIGZvciBnZXR0aW5nIHRoZSBjb2xvciBpbiByZ2JhXG4gKlxuICogQHBhcmFtICAge29iamVjdH0gYzNzcyBjb21waWxlZCBjYXJ0byBjc3NcbiAqIEByZXR1cm5zIHtvYmplY3R9IHdpdGggYSBmdW5jdGlvbiB0aGF0IGNvbnRhaW4gdGhlIGNvbmRpdGlvbnMgdG8gcmV0dXJuIGEgY29sb3Igd2l0aCBhbHBoYSBjaGFubmVsXG4gKi9cblxuY29uc3QgZ2V0Q29sb3IgPSBnZXRDb2xvckZuKFxuICBnZXRQcm9wZXJ0eU9yRGVmRm4oJ3N0cm9rZScsIExSKSxcbiAgZ2V0UHJvcGVydHlPckRlZkZuKCdzdHJva2Utb3BhY2l0eScsIExSKVxuKTtcblxuLyoqXG4gKiBGdW5jdGlvbiBmb3IgZ2V0dGluZyBleHRydWRlIHByb3BlcnR5XG4gKlxuICogQHBhcmFtICAge29iamVjdH0gYzNzcyBjb21waWxlZCBjYXJ0byBjc3NcbiAqIEByZXR1cm5zIHtvYmplY3R9IHdpdGggYSBmdW5jdGlvbiB0aGF0IGNvbnRhaW4gdGhlIGNvbmRpdGlvbnMgdG8gcmV0dXJuIHRoZSBleHRydWRlXG4gKi9cblxuY29uc3QgZ2V0RXh0cnVkZSA9IGdldFByb3BlcnR5T3JEZWZGbigndGctc3Ryb2tlLWV4dHJ1ZGUnKTtcblxuLyoqXG4gKiBGdW5jdGlvbiBmb3IgZ2V0dGluZyB0aGUgd2lkdGggaW4gbWV0ZXJzIGR5bmFtaWNhbGx5IGJ5IHpvb21cbiAqXG4gKiBAcGFyYW0gICB7b2JqZWN0fSBjM3NzIGNvbXBpbGVkIGNhcnRvIGNzc1xuICogQHJldHVybnMge29iamVjdH0gd2l0aGEgYSBmdW5jdGlvbiB3aXRoIHRoZSBjb25kaXRpb25zIHRvIHJldHVybiB3aWR0aCB2YWx1ZVxuICovXG5cbmNvbnN0IGdldFdpZHRoID0gY29tcG9zZShcbiAgR2VvbS5weDJNZXRlcnMsXG4gIGdldFByb3BlcnR5T3JEZWZGbignc3Ryb2tlLXdpZHRoJywgTFIpXG4pO1xuXG4vKipcbiAqIEZ1bmN0aW9uIGZvciBnZXR0aW5nIHRoZSBjYXAgc3RhdGljYWxseVxuICpcbiAqIEBwYXJhbSAgIHtvYmplY3R9IGMzc3MgY29tcGlsZWQgY2FydG8gY3NzXG4gKiBAcmV0dXJucyB7c3RyaW5nfSB3aXRoIGNhcCB2YWx1ZSBFeDogcm91bmRcbiAqL1xuY29uc3QgZ2V0Q2FwID0gZ2V0RXhlY3V0ZWRGbignc3Ryb2tlLWxpbmVjYXAnLCBMUik7XG5cbi8qKlxuICogRnVuY3Rpb24gZm9yIGdldHRpbmcgdGhlIGpvaW4gc3RhdGljYWxseVxuICpcbiAqIEBwYXJhbSAgIHtvYmplY3R9IGMzc3MgY29tcGlsZWQgY2FydG8gY3NzXG4gKiBAcmV0dXJucyB7c3RyaW5nfSB3aXRoIGpvaW4gdmFsdWUgRXg6IHJvdW5kXG4gKi9cbmNvbnN0IGdldEpvaW4gPSBnZXRFeGVjdXRlZEZuKCdzdHJva2UtbGluZWpvaW4nLCBMUik7XG5cbi8qKlxuICogRnVuY3Rpb24gZm9yIGdldHRpbmcgdGhlIGJsZW5kIHN0YXRpY2FsbHlcbiAqXG4gKiBAcGFyYW0gICB7b2JqZWN0fSBjM3NzIGNvbXBpbGVkIGNhcnRvIGNzc1xuICogQHJldHVybnMge3N0cmluZ30gd2l0aCBibGVuZGluZyB2YWx1ZSBFeDogXCJtdWx0aXBseVwiXG4gKi9cbmNvbnN0IGdldEJsZW5kaW5nID0gZ2V0QmxlbmRGbihMUik7XG5cbi8qKlxuICogRnVuY3Rpb24gZm9yIGdldHRpbmcgZGFzaCB2YWx1ZSBzdGF0aWNhbGx5XG4gKlxuICogQHBhcmFtICAge29iamVjdH0gYzNzcyBjb21waWxlZCBjYXJ0byBjc3NcbiAqIEByZXR1cm5zIHtzdHJpbmd9IHdpdGggZGFzaCB2YWx1ZSBFeDogWzIsIDFdXG4gKi9cblxuY29uc3QgZ2V0RGFzaGVkID0gY29tcG9zZShcbiAgY29uZChbXG4gICAgW25vdEVxKCdub25lJyksIGlkZW50aXR5XVxuICBdKSxcbiAgZ2V0RXhlY3V0ZWRGbignc3Ryb2tlLWRhc2hhcnJheScsIExSKVxuKTtcblxuLyoqXG4gKiBCYXNpYyBMaW5lXG4gKi9cblxudmFyIExpbmUgPSB7fTtcblxuZXhwb3J0IGRlZmF1bHQgTGluZTtcblxuLyoqXG4gKiBGdW5jdGlvbiB0byBnZXQgdGhlIGRyYXcgb2JqZWN0IG9mIGEgbGluZS5cbiAqXG4gKiBAcGFyYW0gICB7b2JqZWN0fSBjM3NzIGNvbXBpbGVkIGNhcnRvIGNzc1xuICogQHJldHVybnMge2Z1bmN0aW9ufSBmdW5jdGlvbiB3aXRoIHRoZSBjb25kaXRpb25zIHRvIHJldHVybiBhbHBoYSB2YWx1ZVxuICovXG5cbkxpbmUuZ2V0RHJhdyA9IChjM3NzLCBpZCkgPT4ge1xuICBsZXQgZHJhdyA9IHt9O1xuICBpZiAoY2hlY2tMaW5lU3ltKGMzc3MpKSB7XG4gICAgZHJhd1snbGluZXNfJyArIGlkXSA9IHtcbiAgICAgIGNvbG9yOiBnZXRDb2xvcihjM3NzKSxcbiAgICAgIHdpZHRoOiBnZXRXaWR0aChjM3NzKSxcbiAgICAgIGNhcDogZ2V0Q2FwKGMzc3MpLFxuICAgICAgam9pbjogZ2V0Sm9pbihjM3NzKSxcbiAgICAgIGV4dHJ1ZGU6IGdldEV4dHJ1ZGUoYzNzcylcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIGRyYXc7XG59O1xuXG4vKipcbiAqIEZ1bmN0aW9uIHRvIGdldCB0aGUgc3R5bGUgY29uZmlndXJhdGlvbiBvZiBhIGxpbmUuXG4gKlxuICogQHJldHVybnMgZGVmYXVsdCBzdHlsZSBjb25maWd1cmF0aW9uIGZvciBsaW5lc1xuICovXG5MaW5lLmdldFN0eWxlID0gZnVuY3Rpb24oYzNzcywgaWQsIG9yZCkge1xuICBsZXQgc3R5bGUgPSB7fTtcblxuICBzdHlsZVsnbGluZXNfJyArIGlkXSA9IHtcbiAgICBiYXNlOiAnbGluZXMnLFxuICAgIGJsZW5kOiBnZXRCbGVuZGluZyhjM3NzKSxcbiAgICBkYXNoOiBnZXREYXNoZWQoYzNzcyksXG4gICAgYmxlbmRfb3JkZXI6IHR5cGVvZiBvcmQgPT09ICdudW1iZXInID8gb3JkICsgMSA6IDFcbiAgfTtcblxuICByZXR1cm4gc3R5bGU7XG59O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIHNyYy9iYXNpYy9saW5lcy5qcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBc0JBO0FBQ0E7QUFBQTtBQUNBOzs7QUFBQTtBQUNBOzs7OztBQXpCQTs7Ozs7Ozs7Ozs7O0FBWUE7Ozs7QUFjQTtBQUNBO0FBVEE7Ozs7QUFVQTtBQUNBOzs7O0FBSUE7QUFDQTtBQUNBOzs7Ozs7O0FBT0E7QUFDQTtBQUlBOzs7Ozs7O0FBT0E7QUFDQTtBQUNBOzs7Ozs7O0FBT0E7QUFDQTtBQUlBOzs7Ozs7QUFNQTtBQUNBO0FBQ0E7Ozs7OztBQU1BO0FBQ0E7QUFDQTs7Ozs7O0FBTUE7QUFDQTtBQUNBOzs7Ozs7O0FBT0E7QUFDQTtBQU1BOzs7O0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7OztBQU9BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUxBO0FBT0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7OztBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFKQTtBQUNBO0FBTUE7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 73 */
/* no static exports found */
/* all exports used */
/*!*****************************!*\
  !*** ./src/basic/points.js ***!
  \*****************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _merge = __webpack_require__(/*! ramda/src/merge */ 178);\n\nvar _merge2 = _interopRequireDefault(_merge);\n\nvar _mergeWith = __webpack_require__(/*! ramda/src/mergeWith */ 179);\n\nvar _mergeWith2 = _interopRequireDefault(_mergeWith);\n\nvar _applySpec = __webpack_require__(/*! ramda/src/applySpec */ 55);\n\nvar _applySpec2 = _interopRequireDefault(_applySpec);\n\nvar _isNil = __webpack_require__(/*! ramda/src/isNil */ 175);\n\nvar _isNil2 = _interopRequireDefault(_isNil);\n\nvar _not = __webpack_require__(/*! ramda/src/not */ 64);\n\nvar _not2 = _interopRequireDefault(_not);\n\nvar _pickBy = __webpack_require__(/*! ramda/src/pickBy */ 182);\n\nvar _pickBy2 = _interopRequireDefault(_pickBy);\n\nvar _compose = __webpack_require__(/*! ramda/src/compose */ 13);\n\nvar _compose2 = _interopRequireDefault(_compose);\n\nvar _md = __webpack_require__(/*! md5 */ 35);\n\nvar _md2 = _interopRequireDefault(_md);\n\nvar _referenceHelpers = __webpack_require__(/*! ../utils/reference-helpers */ 18);\n\nvar _reference = __webpack_require__(/*! ../utils/reference */ 9);\n\nvar _reference2 = _interopRequireDefault(_reference);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/*\n\tINTERNAL DEPENDENCIES\n */\n\nvar PR = _reference2.default.getPoint(null); // Point reference\n\n/*\n\tINTERNAL MARKER FUNCTIONS\n */\n\n/*\n\t ________  ________  ___  ________   _________\n\t|\\   __  \\|\\   __  \\|\\  \\|\\   ___  \\|\\___   ___\\\n\t\\ \\  \\|\\  \\ \\  \\|\\  \\ \\  \\ \\  \\\\ \\  \\|___ \\  \\_|\n\t \\ \\   ____\\ \\  \\\\\\  \\ \\  \\ \\  \\\\ \\  \\   \\ \\  \\\n\t  \\ \\  \\___|\\ \\  \\\\\\  \\ \\  \\ \\  \\\\ \\  \\   \\ \\  \\\n\t   \\ \\__\\    \\ \\_______\\ \\__\\ \\__\\\\ \\__\\   \\ \\__\\\n\t    \\|__|     \\|_______|\\|__|\\|__| \\|__|    \\|__|\n\n */\n\n/*\n\tEXTERNAL DEPENDENCIES\n */\nvar checkMarkerSym = _reference2.default.checkSymbolizer('markers');\n\n/**\n * get colors from cartocss with the alpha channel applied\n * @param  {object} c3ss compiled carto css\n * @return {object}      draw object with color and border_color\n */\n\nvar getColor = (0, _referenceHelpers.getColorFn)((0, _referenceHelpers.getPropertyOrDefFn)('fill', PR), (0, _referenceHelpers.getEitherProp)('fill-opacity', 'opacity', PR));\n\nvar getOutlineColor = (0, _referenceHelpers.getColorFn)((0, _referenceHelpers.getPropertyFnSafe)('stroke', PR), (0, _referenceHelpers.getEitherProp)('stroke-opacity', 'opacity', PR));\n\nvar getColors = (0, _compose2.default)((0, _pickBy2.default)((0, _compose2.default)(_not2.default, _isNil2.default)), (0, _applySpec2.default)({\n  color: getColor,\n  outline: {\n    color: getOutlineColor\n  }\n}));\n\n/**\n * getWidth for the marker and his border\n * @param  {object} c3ss compiled carto css\n * @return {object}      size and border_width\n */\n\nvar getMarkerWidth = (0, _referenceHelpers.getPropertyFnSafe)('width', PR);\n\nvar getOutlineWidth = (0, _referenceHelpers.getPropertyFnSafe)('stroke-width', PR);\n\nvar getWidths = (0, _compose2.default)((0, _pickBy2.default)((0, _compose2.default)(_not2.default, _isNil2.default)), (0, _applySpec2.default)({\n  size: getMarkerWidth,\n  outline: {\n    width: getOutlineWidth\n  }\n}));\n\n/**\n * Get collide from allow-overlap in cartocss [NON-DYNAMIC]\n * @param  {object} c3ss compiled carto css\n * @return {object}      return draw object with a non-dynamic collide option\n */\n\nvar getCollide = (0, _referenceHelpers.getExecutedFn)('allow-overlap', PR);\n\nvar getTextureFile = (0, _referenceHelpers.getExecutedFn)('file', PR);\n\n/**\n * Get texture from marker-file in cartocss [NON-DYNAMIC]\n * @param  {object} c3ss compiled carto css\n * @return {object}      return draw object with a non-dynamic texture.\n */\nvar getTexture = (0, _compose2.default)(_md2.default, getTextureFile);\n\nvar getBlending = (0, _referenceHelpers.getBlendFn)(PR);\n\n/**\n * Basic point\n */\n\nvar Point = {};\n\nexports.default = Point;\n\n/**\n * Get the draw (for tangram) object of a point from compiled carto css\n * @param  {object} c3ss compiled carto @class\n * @return {object}      object with the draw types and their properties\n */\n\nPoint.getDraw = function (c3ss, id) {\n  var point = {},\n      draw = {};\n\n  if (checkMarkerSym(c3ss)) {\n\n    point = (0, _mergeWith2.default)(_merge2.default, getWidths(c3ss), getColors(c3ss));\n\n    point.collide = !getCollide(c3ss);\n  }\n\n  draw['points_' + id] = point;\n\n  return draw;\n};\n\n// TODO\n/**\n * [getStyle description]\n * @param  {[type]} c3ss  [description]\n * @return {[type]}       [description]\n */\nPoint.getStyle = function (c3ss, id, ord) {\n  var style = {};\n  style['points_' + id] = {\n    base: 'points',\n    blend: 'overlay',\n    blend_order: ord || 1\n  };\n\n  if (checkMarkerSym(c3ss)) {\n    var p = style['points_' + id];\n    p.texture = getTextureFile(c3ss) !== 'none' ? getTexture(c3ss) : void 0;\n    p.blend = getBlending(c3ss);\n  }\n\n  return style;\n};\n\nPoint.getTextures = function (c3ss) {\n  var tex = {};\n  if (checkMarkerSym(c3ss)) {\n    var texture = getTextureFile(c3ss);\n\n    if (texture !== 'none') {\n      tex[(0, _md2.default)(texture)] = { url: texture };\n    }\n\n    return tex;\n  }\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL2Jhc2ljL3BvaW50cy5qcz8yNWFhIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXG5cdCBfX19fX19fXyAgX19fX19fX18gIF9fXyAgX19fX19fX18gICBfX19fX19fX19cblx0fFxcICAgX18gIFxcfFxcICAgX18gIFxcfFxcICBcXHxcXCAgIF9fXyAgXFx8XFxfX18gICBfX19cXFxuXHRcXCBcXCAgXFx8XFwgIFxcIFxcICBcXHxcXCAgXFwgXFwgIFxcIFxcICBcXFxcIFxcICBcXHxfX18gXFwgIFxcX3xcblx0IFxcIFxcICAgX19fX1xcIFxcICBcXFxcXFwgIFxcIFxcICBcXCBcXCAgXFxcXCBcXCAgXFwgICBcXCBcXCAgXFxcblx0ICBcXCBcXCAgXFxfX198XFwgXFwgIFxcXFxcXCAgXFwgXFwgIFxcIFxcICBcXFxcIFxcICBcXCAgIFxcIFxcICBcXFxuXHQgICBcXCBcXF9fXFwgICAgXFwgXFxfX19fX19fXFwgXFxfX1xcIFxcX19cXFxcIFxcX19cXCAgIFxcIFxcX19cXFxuXHQgICAgXFx8X198ICAgICBcXHxfX19fX19ffFxcfF9ffFxcfF9ffCBcXHxfX3wgICAgXFx8X198XG5cbiAqL1xuXG4vKlxuXHRFWFRFUk5BTCBERVBFTkRFTkNJRVNcbiAqL1xuaW1wb3J0IE1ENSBmcm9tICdtZDUnO1xuaW1wb3J0IHtjb21wb3NlLCBwaWNrQnksIG5vdCwgaXNOaWwsIGFwcGx5U3BlYywgbWVyZ2UsIG1lcmdlV2l0aH0gZnJvbSAncmFtZGEnO1xuXG4vKlxuXHRJTlRFUk5BTCBERVBFTkRFTkNJRVNcbiAqL1xuXG5pbXBvcnQgeyBnZXRFeGVjdXRlZEZuLCBnZXRQcm9wZXJ0eU9yRGVmRm4sIGdldEJsZW5kRm4sIGdldFByb3BlcnR5Rm5TYWZlLCBnZXRFaXRoZXJQcm9wLCBnZXRDb2xvckZuIH0gZnJvbSAnLi4vdXRpbHMvcmVmZXJlbmNlLWhlbHBlcnMnO1xuaW1wb3J0IFRhbmdyYW1SZWZlcmVuY2UgZnJvbSAnLi4vdXRpbHMvcmVmZXJlbmNlJztcblxuY29uc3QgUFIgPSBUYW5ncmFtUmVmZXJlbmNlLmdldFBvaW50KG51bGwpOyAvLyBQb2ludCByZWZlcmVuY2VcblxuLypcblx0SU5URVJOQUwgTUFSS0VSIEZVTkNUSU9OU1xuICovXG5cbmNvbnN0IGNoZWNrTWFya2VyU3ltID0gVGFuZ3JhbVJlZmVyZW5jZS5jaGVja1N5bWJvbGl6ZXIoJ21hcmtlcnMnKTtcblxuLyoqXG4gKiBnZXQgY29sb3JzIGZyb20gY2FydG9jc3Mgd2l0aCB0aGUgYWxwaGEgY2hhbm5lbCBhcHBsaWVkXG4gKiBAcGFyYW0gIHtvYmplY3R9IGMzc3MgY29tcGlsZWQgY2FydG8gY3NzXG4gKiBAcmV0dXJuIHtvYmplY3R9ICAgICAgZHJhdyBvYmplY3Qgd2l0aCBjb2xvciBhbmQgYm9yZGVyX2NvbG9yXG4gKi9cblxuY29uc3QgZ2V0Q29sb3IgPSBnZXRDb2xvckZuKFxuICBnZXRQcm9wZXJ0eU9yRGVmRm4oJ2ZpbGwnLCBQUiksXG4gIGdldEVpdGhlclByb3AoJ2ZpbGwtb3BhY2l0eScsICdvcGFjaXR5JywgUFIpXG4pO1xuXG5jb25zdCBnZXRPdXRsaW5lQ29sb3IgPSBnZXRDb2xvckZuKFxuICBnZXRQcm9wZXJ0eUZuU2FmZSgnc3Ryb2tlJywgUFIpLFxuICBnZXRFaXRoZXJQcm9wKCdzdHJva2Utb3BhY2l0eScsICdvcGFjaXR5JywgUFIpXG4pO1xuXG5jb25zdCBnZXRDb2xvcnMgPSBjb21wb3NlKFxuICBwaWNrQnkoY29tcG9zZShub3QsaXNOaWwpKSxcbiAgYXBwbHlTcGVjKHtcbiAgICBjb2xvcjogZ2V0Q29sb3IsXG4gICAgb3V0bGluZToge1xuICAgICAgY29sb3I6IGdldE91dGxpbmVDb2xvclxuICAgIH1cbiAgfSlcbik7XG5cbi8qKlxuICogZ2V0V2lkdGggZm9yIHRoZSBtYXJrZXIgYW5kIGhpcyBib3JkZXJcbiAqIEBwYXJhbSAge29iamVjdH0gYzNzcyBjb21waWxlZCBjYXJ0byBjc3NcbiAqIEByZXR1cm4ge29iamVjdH0gICAgICBzaXplIGFuZCBib3JkZXJfd2lkdGhcbiAqL1xuXG5jb25zdCBnZXRNYXJrZXJXaWR0aCA9IGdldFByb3BlcnR5Rm5TYWZlKCd3aWR0aCcsIFBSKTtcblxuY29uc3QgZ2V0T3V0bGluZVdpZHRoID0gZ2V0UHJvcGVydHlGblNhZmUoJ3N0cm9rZS13aWR0aCcsIFBSKTtcblxuY29uc3QgZ2V0V2lkdGhzID0gY29tcG9zZShcbiAgcGlja0J5KGNvbXBvc2Uobm90LCBpc05pbCkpLFxuICBhcHBseVNwZWMoe1xuICAgIHNpemU6IGdldE1hcmtlcldpZHRoLFxuICAgIG91dGxpbmU6IHtcbiAgICAgIHdpZHRoOiBnZXRPdXRsaW5lV2lkdGhcbiAgICB9XG4gIH0pXG4pO1xuXG4vKipcbiAqIEdldCBjb2xsaWRlIGZyb20gYWxsb3ctb3ZlcmxhcCBpbiBjYXJ0b2NzcyBbTk9OLURZTkFNSUNdXG4gKiBAcGFyYW0gIHtvYmplY3R9IGMzc3MgY29tcGlsZWQgY2FydG8gY3NzXG4gKiBAcmV0dXJuIHtvYmplY3R9ICAgICAgcmV0dXJuIGRyYXcgb2JqZWN0IHdpdGggYSBub24tZHluYW1pYyBjb2xsaWRlIG9wdGlvblxuICovXG5cbmNvbnN0IGdldENvbGxpZGUgPSBnZXRFeGVjdXRlZEZuKCdhbGxvdy1vdmVybGFwJywgUFIpO1xuXG5jb25zdCBnZXRUZXh0dXJlRmlsZSA9IGdldEV4ZWN1dGVkRm4oJ2ZpbGUnLCBQUik7XG5cbi8qKlxuICogR2V0IHRleHR1cmUgZnJvbSBtYXJrZXItZmlsZSBpbiBjYXJ0b2NzcyBbTk9OLURZTkFNSUNdXG4gKiBAcGFyYW0gIHtvYmplY3R9IGMzc3MgY29tcGlsZWQgY2FydG8gY3NzXG4gKiBAcmV0dXJuIHtvYmplY3R9ICAgICAgcmV0dXJuIGRyYXcgb2JqZWN0IHdpdGggYSBub24tZHluYW1pYyB0ZXh0dXJlLlxuICovXG5jb25zdCBnZXRUZXh0dXJlID0gY29tcG9zZShcbiAgTUQ1LFxuICBnZXRUZXh0dXJlRmlsZVxuKTtcblxuY29uc3QgZ2V0QmxlbmRpbmcgPSBnZXRCbGVuZEZuKFBSKTtcblxuLyoqXG4gKiBCYXNpYyBwb2ludFxuICovXG5cbnZhciBQb2ludCA9IHt9O1xuXG5leHBvcnQgZGVmYXVsdCBQb2ludDtcblxuXG4vKipcbiAqIEdldCB0aGUgZHJhdyAoZm9yIHRhbmdyYW0pIG9iamVjdCBvZiBhIHBvaW50IGZyb20gY29tcGlsZWQgY2FydG8gY3NzXG4gKiBAcGFyYW0gIHtvYmplY3R9IGMzc3MgY29tcGlsZWQgY2FydG8gQGNsYXNzXG4gKiBAcmV0dXJuIHtvYmplY3R9ICAgICAgb2JqZWN0IHdpdGggdGhlIGRyYXcgdHlwZXMgYW5kIHRoZWlyIHByb3BlcnRpZXNcbiAqL1xuUG9pbnQuZ2V0RHJhdyA9IGZ1bmN0aW9uKGMzc3MsIGlkKSB7XG5cdHZhciBwb2ludCA9IHt9LFxuICAgICAgZHJhdyA9IHt9O1xuXG5cdGlmIChjaGVja01hcmtlclN5bShjM3NzKSkge1xuXG5cdFx0cG9pbnQgPSBtZXJnZVdpdGgoXG4gICAgICAgIG1lcmdlLFxuXHRcdFx0XHRnZXRXaWR0aHMoYzNzcyksXG5cdFx0XHRcdGdldENvbG9ycyhjM3NzKVxuXHRcdFx0KTtcblxuICAgIHBvaW50LmNvbGxpZGUgPSAhZ2V0Q29sbGlkZShjM3NzKTtcblx0fVxuXG4gIGRyYXdbJ3BvaW50c18nICsgaWRdID0gcG9pbnQ7XG5cbiAgcmV0dXJuIGRyYXc7XG59O1xuXG4vLyBUT0RPXG4vKipcbiAqIFtnZXRTdHlsZSBkZXNjcmlwdGlvbl1cbiAqIEBwYXJhbSAge1t0eXBlXX0gYzNzcyAgW2Rlc2NyaXB0aW9uXVxuICogQHJldHVybiB7W3R5cGVdfSAgICAgICBbZGVzY3JpcHRpb25dXG4gKi9cblBvaW50LmdldFN0eWxlID0gZnVuY3Rpb24oYzNzcywgaWQsIG9yZCkge1xuICBsZXQgc3R5bGUgPSB7fTtcbiAgc3R5bGVbJ3BvaW50c18nICsgaWRdID0ge1xuICAgIGJhc2U6ICdwb2ludHMnLFxuICAgIGJsZW5kOiAnb3ZlcmxheScsXG4gICAgYmxlbmRfb3JkZXI6IG9yZCB8fCAxXG4gIH07XG5cblx0aWYgKGNoZWNrTWFya2VyU3ltKGMzc3MpKSB7XG4gICAgbGV0IHAgPSBzdHlsZVsncG9pbnRzXycgKyBpZF07XG4gICAgcC50ZXh0dXJlID0gZ2V0VGV4dHVyZUZpbGUoYzNzcykgIT09ICdub25lJyA/IGdldFRleHR1cmUoYzNzcykgOiB2b2lkIDA7XG4gICAgcC5ibGVuZCA9IGdldEJsZW5kaW5nKGMzc3MpO1xuXHR9XG5cblx0cmV0dXJuIHN0eWxlO1xufTtcblxuUG9pbnQuZ2V0VGV4dHVyZXMgPSBmdW5jdGlvbihjM3NzKSB7XG4gIGxldCB0ZXggPSB7fTtcblx0aWYgKGNoZWNrTWFya2VyU3ltKGMzc3MpKSB7XG5cdFx0bGV0IHRleHR1cmUgPSBnZXRUZXh0dXJlRmlsZShjM3NzKTtcblxuXHRcdGlmICh0ZXh0dXJlICE9PSAnbm9uZScpIHtcblx0XHRcdHRleFtNRDUodGV4dHVyZSldID0ge3VybDogdGV4dHVyZX07XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRleDtcblx0fVxufTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBzcmMvYmFzaWMvcG9pbnRzLmpzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBY0E7QUFDQTs7O0FBTUE7QUFDQTtBQUFBO0FBQ0E7Ozs7O0FBTkE7Ozs7QUFPQTtBQUNBO0FBQ0E7Ozs7QUExQkE7Ozs7Ozs7Ozs7O0FBV0E7OztBQW1CQTtBQUNBO0FBQ0E7Ozs7OztBQU1BO0FBQ0E7QUFJQTtBQUNBO0FBSUE7QUFHQTtBQUNBO0FBQ0E7QUFEQTtBQUZBO0FBQ0E7QUFPQTs7Ozs7O0FBTUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQURBO0FBRkE7QUFDQTtBQU9BOzs7Ozs7QUFNQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7OztBQUtBO0FBQ0E7QUFJQTtBQUNBO0FBQ0E7Ozs7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOzs7Ozs7QUFLQTtBQUNBO0FBQUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7O0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBSEE7QUFDQTtBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 74 */
/* no static exports found */
/* all exports used */
/*!*******************************!*\
  !*** ./src/basic/polygons.js ***!
  \*******************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _compose = __webpack_require__(/*! ramda/src/compose */ 13);\n\nvar _compose2 = _interopRequireDefault(_compose);\n\nvar _md = __webpack_require__(/*! md5 */ 35);\n\nvar _md2 = _interopRequireDefault(_md);\n\nvar _referenceHelpers = __webpack_require__(/*! ../utils/reference-helpers */ 18);\n\nvar _reference = __webpack_require__(/*! ../utils/reference */ 9);\n\nvar _reference2 = _interopRequireDefault(_reference);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/*\n\tINTERNAL DEPENDENCIES\n */\n\nvar PR = _reference2.default.getPolygon(null); // Polygon reference\n/*\n ________  ________  ___           ___    ___ ________  ________  ________   ________\n|\\   __  \\|\\   __  \\|\\  \\         |\\  \\  /  /|\\   ____\\|\\   __  \\|\\   ___  \\|\\   ____\\\n\\ \\  \\|\\  \\ \\  \\|\\  \\ \\  \\        \\ \\  \\/  / | \\  \\___|\\ \\  \\|\\  \\ \\  \\\\ \\  \\ \\  \\___|_\n \\ \\   ____\\ \\  \\\\\\  \\ \\  \\        \\ \\    / / \\ \\  \\  __\\ \\  \\\\\\  \\ \\  \\\\ \\  \\ \\_____  \\\n  \\ \\  \\___|\\ \\  \\\\\\  \\ \\  \\____    \\/  /  /   \\ \\  \\|\\  \\ \\  \\\\\\  \\ \\  \\\\ \\  \\|____|\\  \\\n   \\ \\__\\    \\ \\_______\\ \\_______\\__/  / /      \\ \\_______\\ \\_______\\ \\__\\\\ \\__\\____\\_\\  \\\n    \\|__|     \\|_______|\\|_______|\\___/ /        \\|_______|\\|_______|\\|__| \\|__|\\_________\\\n                                 \\|___|/                                       \\|_________|\n\n */\n\n/*\n\tEXTERNAL DEPENDENCIES\n */\nvar PPR = _reference2.default.getPolygonPattern(null);\n\n/*\n\tINTERNAL POLYGONS FUNCTIONS\n */\n\nvar checkPolygonSym = _reference2.default.checkSymbolizer('polygon');\nvar checkPolPatternSym = _reference2.default.checkSymbolizer('polygon-pattern');\n\n/**\n * Function for getting the color in rgba\n *\n * @param   {object} c3ss compiled carto css\n * @returns {object} with a function that contain the conditions to return a color with alpha channel\n */\nvar getColor = (0, _referenceHelpers.getColorFn)((0, _referenceHelpers.getPropertyOrDefFn)('fill', PR), (0, _referenceHelpers.getPropertyOrDefFn)('fill-opacity', PR));\n\n/**\n * Function for getting the extrude of a polygon\n *\n * @param   {object} c3ss compiled carto css\n * @returns {object} with a function that contain the conditions to return an extrude value\n */\n\nvar getExtrude = (0, _referenceHelpers.getPropertyOrDefFn)('tg-polygon-extrude');\n\n/**\n * Function for getting the texture as string\n *\n * @param   {object} c3ss compiled carto css\n * @returns {string} with the path of texture\n */\n\nvar getTextureFile = (0, _referenceHelpers.getExecutedFn)('file', PPR);\n\nvar getTexture = (0, _compose2.default)(_md2.default, getTextureFile);\n\nvar getBlending = (0, _referenceHelpers.getBlendFn)(PR);\n\n/**\n * Basic Polygon\n */\n\nvar Polygon = {};\n\nexports.default = Polygon;\n\n/**\n * Function to get the draw object of a polygon.\n *\n * @param   {object} c3ss compiled carto css\n * @returns {function} function with the conditions to return alpha value\n */\n\nPolygon.getDraw = function (c3ss, id) {\n  var draw = {};\n\n  if (checkPolygonSym(c3ss)) {\n    draw['polygons_' + id] = {\n      color: getColor(c3ss),\n      extrude: getExtrude(c3ss)\n    };\n  }\n\n  return draw;\n};\n\n/**\n * Function to get the style configuration of a polygon.\n *\n * @returns default style configuration for polygon\n */\nPolygon.getStyle = function (c3ss, id, ord) {\n  var style = {};\n\n  style['polygons_' + id] = {\n    base: 'polygons',\n    blend: getBlending(c3ss),\n    blend_order: ord || 1\n  };\n\n  if (checkPolPatternSym(c3ss)) {\n    style['polygons_' + id].material = {\n      diffuse: {\n        texture: getTexture(c3ss),\n        mapping: 'uv'\n      }\n    };\n  }\n\n  return style;\n};\n\nPolygon.getTextures = function (c3ss) {\n  var tex = {};\n  if (checkPolPatternSym(c3ss)) {\n    var texture = getTextureFile(c3ss);\n\n    if (texture) {\n      tex[(0, _md2.default)(texture)] = { url: texture };\n    }\n  }\n  return tex;\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzQuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL2Jhc2ljL3BvbHlnb25zLmpzPzcyZGIiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiBfX19fX19fXyAgX19fX19fX18gIF9fXyAgICAgICAgICAgX19fICAgIF9fXyBfX19fX19fXyAgX19fX19fX18gIF9fX19fX19fICAgX19fX19fX19cbnxcXCAgIF9fICBcXHxcXCAgIF9fICBcXHxcXCAgXFwgICAgICAgICB8XFwgIFxcICAvICAvfFxcICAgX19fX1xcfFxcICAgX18gIFxcfFxcICAgX19fICBcXHxcXCAgIF9fX19cXFxuXFwgXFwgIFxcfFxcICBcXCBcXCAgXFx8XFwgIFxcIFxcICBcXCAgICAgICAgXFwgXFwgIFxcLyAgLyB8IFxcICBcXF9fX3xcXCBcXCAgXFx8XFwgIFxcIFxcICBcXFxcIFxcICBcXCBcXCAgXFxfX198X1xuIFxcIFxcICAgX19fX1xcIFxcICBcXFxcXFwgIFxcIFxcICBcXCAgICAgICAgXFwgXFwgICAgLyAvIFxcIFxcICBcXCAgX19cXCBcXCAgXFxcXFxcICBcXCBcXCAgXFxcXCBcXCAgXFwgXFxfX19fXyAgXFxcbiAgXFwgXFwgIFxcX19ffFxcIFxcICBcXFxcXFwgIFxcIFxcICBcXF9fX18gICAgXFwvICAvICAvICAgXFwgXFwgIFxcfFxcICBcXCBcXCAgXFxcXFxcICBcXCBcXCAgXFxcXCBcXCAgXFx8X19fX3xcXCAgXFxcbiAgIFxcIFxcX19cXCAgICBcXCBcXF9fX19fX19cXCBcXF9fX19fX19cXF9fLyAgLyAvICAgICAgXFwgXFxfX19fX19fXFwgXFxfX19fX19fXFwgXFxfX1xcXFwgXFxfX1xcX19fX1xcX1xcICBcXFxuICAgIFxcfF9ffCAgICAgXFx8X19fX19fX3xcXHxfX19fX19ffFxcX19fLyAvICAgICAgICBcXHxfX19fX19ffFxcfF9fX19fX198XFx8X198IFxcfF9ffFxcX19fX19fX19fXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxcfF9fX3wvICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXFx8X19fX19fX19ffFxuXG4gKi9cblxuLypcblx0RVhURVJOQUwgREVQRU5ERU5DSUVTXG4gKi9cbmltcG9ydCBNRDUgZnJvbSAnbWQ1JztcbmltcG9ydCB7IGNvbXBvc2UgfSBmcm9tICdyYW1kYSc7XG5cbi8qXG5cdElOVEVSTkFMIERFUEVOREVOQ0lFU1xuICovXG5cbmltcG9ydCB7IGdldEV4ZWN1dGVkRm4sIGdldFByb3BlcnR5T3JEZWZGbiwgZ2V0QmxlbmRGbiwgZ2V0Q29sb3JGbiB9IGZyb20gJy4uL3V0aWxzL3JlZmVyZW5jZS1oZWxwZXJzJztcbmltcG9ydCBUYW5ncmFtUmVmZXJlbmNlIGZyb20gJy4uL3V0aWxzL3JlZmVyZW5jZSc7XG5cbmNvbnN0IFBSID0gVGFuZ3JhbVJlZmVyZW5jZS5nZXRQb2x5Z29uKG51bGwpOyAvLyBQb2x5Z29uIHJlZmVyZW5jZVxuY29uc3QgUFBSID0gVGFuZ3JhbVJlZmVyZW5jZS5nZXRQb2x5Z29uUGF0dGVybihudWxsKTtcblxuLypcblx0SU5URVJOQUwgUE9MWUdPTlMgRlVOQ1RJT05TXG4gKi9cblxuY29uc3QgY2hlY2tQb2x5Z29uU3ltID0gVGFuZ3JhbVJlZmVyZW5jZS5jaGVja1N5bWJvbGl6ZXIoJ3BvbHlnb24nKTtcbmNvbnN0IGNoZWNrUG9sUGF0dGVyblN5bSA9IFRhbmdyYW1SZWZlcmVuY2UuY2hlY2tTeW1ib2xpemVyKCdwb2x5Z29uLXBhdHRlcm4nKTtcblxuLyoqXG4gKiBGdW5jdGlvbiBmb3IgZ2V0dGluZyB0aGUgY29sb3IgaW4gcmdiYVxuICpcbiAqIEBwYXJhbSAgIHtvYmplY3R9IGMzc3MgY29tcGlsZWQgY2FydG8gY3NzXG4gKiBAcmV0dXJucyB7b2JqZWN0fSB3aXRoIGEgZnVuY3Rpb24gdGhhdCBjb250YWluIHRoZSBjb25kaXRpb25zIHRvIHJldHVybiBhIGNvbG9yIHdpdGggYWxwaGEgY2hhbm5lbFxuICovXG5jb25zdCBnZXRDb2xvciA9IGdldENvbG9yRm4oXG4gIGdldFByb3BlcnR5T3JEZWZGbignZmlsbCcsIFBSKSxcbiAgZ2V0UHJvcGVydHlPckRlZkZuKCdmaWxsLW9wYWNpdHknLCBQUilcbik7XG5cbi8qKlxuICogRnVuY3Rpb24gZm9yIGdldHRpbmcgdGhlIGV4dHJ1ZGUgb2YgYSBwb2x5Z29uXG4gKlxuICogQHBhcmFtICAge29iamVjdH0gYzNzcyBjb21waWxlZCBjYXJ0byBjc3NcbiAqIEByZXR1cm5zIHtvYmplY3R9IHdpdGggYSBmdW5jdGlvbiB0aGF0IGNvbnRhaW4gdGhlIGNvbmRpdGlvbnMgdG8gcmV0dXJuIGFuIGV4dHJ1ZGUgdmFsdWVcbiAqL1xuXG5jb25zdCBnZXRFeHRydWRlID0gZ2V0UHJvcGVydHlPckRlZkZuKCd0Zy1wb2x5Z29uLWV4dHJ1ZGUnKTtcblxuLyoqXG4gKiBGdW5jdGlvbiBmb3IgZ2V0dGluZyB0aGUgdGV4dHVyZSBhcyBzdHJpbmdcbiAqXG4gKiBAcGFyYW0gICB7b2JqZWN0fSBjM3NzIGNvbXBpbGVkIGNhcnRvIGNzc1xuICogQHJldHVybnMge3N0cmluZ30gd2l0aCB0aGUgcGF0aCBvZiB0ZXh0dXJlXG4gKi9cblxuY29uc3QgZ2V0VGV4dHVyZUZpbGUgPSBnZXRFeGVjdXRlZEZuKCdmaWxlJywgUFBSKTtcblxuY29uc3QgZ2V0VGV4dHVyZSA9IGNvbXBvc2UoXG4gIE1ENSxcbiAgZ2V0VGV4dHVyZUZpbGVcbik7XG5cbmNvbnN0IGdldEJsZW5kaW5nID0gZ2V0QmxlbmRGbihQUik7XG5cbi8qKlxuICogQmFzaWMgUG9seWdvblxuICovXG5cbnZhciBQb2x5Z29uID0ge307XG5cbmV4cG9ydCBkZWZhdWx0IFBvbHlnb247XG5cbi8qKlxuICogRnVuY3Rpb24gdG8gZ2V0IHRoZSBkcmF3IG9iamVjdCBvZiBhIHBvbHlnb24uXG4gKlxuICogQHBhcmFtICAge29iamVjdH0gYzNzcyBjb21waWxlZCBjYXJ0byBjc3NcbiAqIEByZXR1cm5zIHtmdW5jdGlvbn0gZnVuY3Rpb24gd2l0aCB0aGUgY29uZGl0aW9ucyB0byByZXR1cm4gYWxwaGEgdmFsdWVcbiAqL1xuUG9seWdvbi5nZXREcmF3ID0gKGMzc3MsIGlkKSA9PiB7XG4gIGxldCBkcmF3ID0ge307XG5cbiAgaWYgKGNoZWNrUG9seWdvblN5bShjM3NzKSkge1xuICAgIGRyYXdbJ3BvbHlnb25zXycgKyBpZF0gPSB7XG4gICAgICBjb2xvcjogZ2V0Q29sb3IoYzNzcyksXG4gICAgICBleHRydWRlOiBnZXRFeHRydWRlKGMzc3MpXG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBkcmF3O1xufTtcblxuLyoqXG4gKiBGdW5jdGlvbiB0byBnZXQgdGhlIHN0eWxlIGNvbmZpZ3VyYXRpb24gb2YgYSBwb2x5Z29uLlxuICpcbiAqIEByZXR1cm5zIGRlZmF1bHQgc3R5bGUgY29uZmlndXJhdGlvbiBmb3IgcG9seWdvblxuICovXG5Qb2x5Z29uLmdldFN0eWxlID0gZnVuY3Rpb24oYzNzcywgaWQsIG9yZCkge1xuICBsZXQgc3R5bGUgPSB7fTtcblxuICBzdHlsZVsncG9seWdvbnNfJyArIGlkXSA9IHtcbiAgICBiYXNlOiAncG9seWdvbnMnLFxuICAgIGJsZW5kOiBnZXRCbGVuZGluZyhjM3NzKSxcbiAgICBibGVuZF9vcmRlcjogb3JkIHx8IDFcbiAgfTtcblxuICBpZiAoY2hlY2tQb2xQYXR0ZXJuU3ltKGMzc3MpKSB7XG4gICAgc3R5bGVbJ3BvbHlnb25zXycgKyBpZF0ubWF0ZXJpYWwgPSB7XG4gICAgICBkaWZmdXNlOiB7XG4gICAgICAgIHRleHR1cmU6IGdldFRleHR1cmUoYzNzcyksXG4gICAgICAgIG1hcHBpbmc6ICd1didcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cblx0cmV0dXJuIHN0eWxlO1xufTtcblxuUG9seWdvbi5nZXRUZXh0dXJlcyA9IGMzc3MgPT4ge1xuICBsZXQgdGV4ID0ge307XG4gIGlmIChjaGVja1BvbFBhdHRlcm5TeW0oYzNzcykpIHtcbiAgICBsZXQgdGV4dHVyZSA9IGdldFRleHR1cmVGaWxlKGMzc3MpO1xuXG4gICAgaWYgKHRleHR1cmUpIHtcbiAgICAgIHRleFtNRDUodGV4dHVyZSldID0ge3VybDogdGV4dHVyZX07XG4gICAgfVxuXG4gIH1cbiAgcmV0dXJuIHRleDtcbn07XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gc3JjL2Jhc2ljL3BvbHlnb25zLmpzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBZUE7QUFDQTs7O0FBTUE7QUFDQTtBQUFBO0FBQ0E7Ozs7O0FBTkE7Ozs7QUFPQTtBQXpCQTs7Ozs7Ozs7Ozs7O0FBWUE7OztBQWNBO0FBQ0E7QUFDQTs7OztBQUlBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7QUFNQTtBQUNBO0FBSUE7Ozs7Ozs7QUFPQTtBQUNBO0FBQ0E7Ozs7Ozs7QUFPQTtBQUNBO0FBQ0E7QUFDQTtBQUlBO0FBQ0E7QUFDQTs7OztBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7QUFNQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUZBO0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7OztBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBSEE7QUFDQTtBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFGQTtBQURBO0FBTUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 75 */
/* no static exports found */
/* all exports used */
/*!***************************!*\
  !*** ./src/basic/text.js ***!
  \***************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _referenceHelpers = __webpack_require__(/*! ../utils/reference-helpers */ 18);\n\nvar _reference = __webpack_require__(/*! ../utils/reference */ 9);\n\nvar _reference2 = _interopRequireDefault(_reference);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n   _________  _______      ___    ___ _________\n  |\\___   ___\\\\  ___ \\    |\\  \\  /  /|\\___   ___\\\n  \\|___ \\  \\_\\ \\   __/|   \\ \\  \\/  / ||___ \\  \\_|\n      \\ \\  \\ \\ \\  \\_|/__  \\ \\    / /     \\ \\  \\\n        \\ \\  \\ \\ \\  \\_|\\ \\  /     \\/       \\ \\  \\\n        \\ \\__\\ \\ \\_______\\/  /\\   \\         \\ \\__\\\n          \\|__|  \\|_______/__/ /\\ __\\        \\|__|\n                          |__|/ \\|__|\n\n */\n\n/*\n  EXTERNAL DEPENDENCIES\n*/\n\n/*\n  INTERNAL DEPENDENCIES\n*/\n\nvar TR = _reference2.default.getText(null);\n\n/*\n  INTERNAL POLYGONS FUNCTIONS\n*/\n\nvar checkTextSym = _reference2.default.checkSymbolizer('text');\n\nvar getTextName = (0, _referenceHelpers.getPropertyFnSafe)('name', TR);\n\nvar getSize = (0, _referenceHelpers.getPropertyFnSafe)('size', TR);\n\nvar getColor = (0, _referenceHelpers.getColorFn)((0, _referenceHelpers.getPropertyFnSafe)('fill', TR), (0, _referenceHelpers.getPropertyOrDefFn)('opacity', TR));\n\nvar TextPoint = {};\n\nexports.default = TextPoint;\n\n\nTextPoint.getDraw = function (c3ss, id) {\n  var draw = {};\n\n  if (checkTextSym(c3ss)) {\n    draw['text_' + id] = {\n      collide: false,\n      color: 'transparent',\n      text: {\n        text_source: getTextName(c3ss),\n        font: {\n          size: getSize(c3ss),\n          fill: getColor(c3ss)\n        },\n        optional: false\n      }\n    };\n  }\n\n  return draw;\n};\n\nTextPoint.getStyle = function (c3ss, id, ord) {\n  var style = {};\n\n  style['text_' + id] = {\n    base: 'points',\n    blend: 'overlay',\n    blend_order: ord || 1\n  };\n\n  return style;\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzUuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL2Jhc2ljL3RleHQuanM/YTkwNyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAgIF9fX19fX19fXyAgX19fX19fXyAgICAgIF9fXyAgICBfX18gX19fX19fX19fXG4gIHxcXF9fXyAgIF9fX1xcXFwgIF9fXyBcXCAgICB8XFwgIFxcICAvICAvfFxcX19fICAgX19fXFxcbiAgXFx8X19fIFxcICBcXF9cXCBcXCAgIF9fL3wgICBcXCBcXCAgXFwvICAvIHx8X19fIFxcICBcXF98XG4gICAgICBcXCBcXCAgXFwgXFwgXFwgIFxcX3wvX18gIFxcIFxcICAgIC8gLyAgICAgXFwgXFwgIFxcXG4gICAgICAgIFxcIFxcICBcXCBcXCBcXCAgXFxffFxcIFxcICAvICAgICBcXC8gICAgICAgXFwgXFwgIFxcXG4gICAgICAgIFxcIFxcX19cXCBcXCBcXF9fX19fX19cXC8gIC9cXCAgIFxcICAgICAgICAgXFwgXFxfX1xcXG4gICAgICAgICAgXFx8X198ICBcXHxfX19fX19fL19fLyAvXFwgX19cXCAgICAgICAgXFx8X198XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHxfX3wvIFxcfF9ffFxuXG4gKi9cblxuLypcbiAgRVhURVJOQUwgREVQRU5ERU5DSUVTXG4qL1xuXG4vKlxuICBJTlRFUk5BTCBERVBFTkRFTkNJRVNcbiovXG5cbmltcG9ydCB7IGdldFByb3BlcnR5Rm5TYWZlLCBnZXRQcm9wZXJ0eU9yRGVmRm4sIGdldENvbG9yRm4gfSBmcm9tICcuLi91dGlscy9yZWZlcmVuY2UtaGVscGVycyc7XG5pbXBvcnQgVGFuZ3JhbVJlZmVyZW5jZSBmcm9tICcuLi91dGlscy9yZWZlcmVuY2UnO1xuXG5jb25zdCBUUiA9IFRhbmdyYW1SZWZlcmVuY2UuZ2V0VGV4dChudWxsKTtcblxuLypcbiAgSU5URVJOQUwgUE9MWUdPTlMgRlVOQ1RJT05TXG4qL1xuXG5jb25zdCBjaGVja1RleHRTeW0gPSBUYW5ncmFtUmVmZXJlbmNlLmNoZWNrU3ltYm9saXplcigndGV4dCcpO1xuXG5jb25zdCBnZXRUZXh0TmFtZSA9IGdldFByb3BlcnR5Rm5TYWZlKCduYW1lJywgVFIpO1xuXG5jb25zdCBnZXRTaXplID0gZ2V0UHJvcGVydHlGblNhZmUoJ3NpemUnLCBUUik7XG5cbmNvbnN0IGdldENvbG9yID0gZ2V0Q29sb3JGbihcbiAgZ2V0UHJvcGVydHlGblNhZmUoJ2ZpbGwnLCBUUiksXG4gIGdldFByb3BlcnR5T3JEZWZGbignb3BhY2l0eScsIFRSKVxuKTtcblxudmFyIFRleHRQb2ludCA9IHt9O1xuXG5leHBvcnQgZGVmYXVsdCBUZXh0UG9pbnQ7XG5cblRleHRQb2ludC5nZXREcmF3ID0gKGMzc3MsIGlkKSA9PiB7XG4gIGxldCBkcmF3ID0ge307XG5cbiAgaWYgKGNoZWNrVGV4dFN5bShjM3NzKSkge1xuICAgIGRyYXdbJ3RleHRfJyArIGlkXSA9IHtcbiAgICAgIGNvbGxpZGU6IGZhbHNlLFxuICAgICAgY29sb3I6ICd0cmFuc3BhcmVudCcsXG4gICAgICB0ZXh0OiB7XG4gICAgICAgIHRleHRfc291cmNlOiBnZXRUZXh0TmFtZShjM3NzKSxcbiAgICAgICAgZm9udDoge1xuICAgICAgICAgIHNpemU6IGdldFNpemUoYzNzcyksXG4gICAgICAgICAgZmlsbDogZ2V0Q29sb3IoYzNzcylcbiAgICAgICAgfSxcbiAgICAgICAgb3B0aW9uYWw6IGZhbHNlXG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBkcmF3O1xufTtcblxuXG5UZXh0UG9pbnQuZ2V0U3R5bGUgPSAoYzNzcywgaWQsIG9yZCkgPT4ge1xuICBsZXQgc3R5bGUgPSB7fTtcblxuICBzdHlsZVsndGV4dF8nICsgaWRdID0ge1xuICAgIGJhc2U6ICdwb2ludHMnLFxuICAgIGJsZW5kOiAnb3ZlcmxheScsXG4gICAgYmxlbmRfb3JkZXI6IG9yZCB8fCAxXG4gIH07XG5cbiAgcmV0dXJuIHN0eWxlO1xufTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBzcmMvYmFzaWMvdGV4dC5qcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBb0JBO0FBQ0E7QUFBQTtBQUNBOzs7OztBQXRCQTs7Ozs7Ozs7Ozs7O0FBWUE7Ozs7QUFJQTs7OztBQU9BO0FBQ0E7QUFDQTs7OztBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRkE7QUFJQTtBQU5BO0FBSEE7QUFZQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFIQTtBQUNBO0FBS0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 76 */
/* no static exports found */
/* all exports used */
/*!***********************!*\
  !*** ./src/module.js ***!
  \***********************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _carto = __webpack_require__(/*! ./carto */ 70);\n\nvar _carto2 = _interopRequireDefault(_carto);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nmodule.exports = {\n  carto2Draw: _carto2.default.extractFeatures\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzYuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL21vZHVsZS5qcz80NzQyIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBDQ1NTIGZyb20gJy4vY2FydG8nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgY2FydG8yRHJhdzogQ0NTUy5leHRyYWN0RmVhdHVyZXMsXG59O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIHNyYy9tb2R1bGUuanMiXSwibWFwcGluZ3MiOiI7O0FBQUE7QUFDQTs7Ozs7QUFDQTtBQUNBO0FBREEiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 77 */
/* no static exports found */
/* all exports used */
/*!*****************************!*\
  !*** ./src/style/colors.js ***!
  \*****************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _utils = __webpack_require__(/*! ../utils/utils */ 38);\n\nvar _utils2 = _interopRequireDefault(_utils);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar Colors = {};\n\nexports.default = Colors;\n\n\nvar C = Colors;\n\nColors._isHex = _utils2.default.functionString('function isHex (c) {\\n\\t\\treturn c.indexOf(\\'#\\') >= 0;\\n\\t}');\n\nColors._isRGB = _utils2.default.functionString('function (c) {\\n\\t\\treturn c.indexOf(\\'rgb\\') >= 0;\\n\\t}');\n\nColors._isRGBA = _utils2.default.functionString('function (c) {\\n\\t\\treturn c.indexOf(\\'rgba\\') >= 0;\\n\\t}');\n\nColors.toSixHex = _utils2.default.functionString('function (c) {\\n\\t\\t\\tif (c.length === 7) {\\n\\t\\t\\t\\treturn c;\\n\\t\\t\\t}\\n\\t\\t\\telse {\\n\\t\\t\\t\\tvar r = c[1],\\n\\t\\t\\t\\t\\tg = c[2],\\n\\t\\t\\t\\t\\tb = c[3];\\n\\n\\t\\t\\t\\treturn \\'#\\' + r + r + g + g + b + b;\\n\\t\\t\\t}\\n\\t\\t}');\n\nColors.hexToInt = _utils2.default.functionString('function (hex) {\\n\\t\\treturn parseInt(\\'0x\\' + hex);\\n\\t}');\n\nColors.toRGB = _utils2.default.functionString('function (c) {\\n\\t\\tvar r = ' + C.hexToInt + '(c.substr(1, 2)) + \\', \\',\\n\\t\\t\\tg = ' + C.hexToInt + '(c.substr(3, 2)) + \\', \\',\\n\\t\\t\\tb = ' + C.hexToInt + '(c.substr(5, 2));\\n\\n\\t\\treturn \\'rgb(\\' + r + g + b + \\')\\';\\n\\t}');\n\nColors.toRGBA = _utils2.default.functionString('function (rgb, alpha) {\\n\\t\\treturn rgb.replace(\\'rgb\\', \\'rgba\\').replace(\\')\\', \\', \\' + alpha + \\')\\');\\n\\t}');\n\nColors.getAlphaColorFn = _utils2.default.functionString('function (color, opacity) {\\n\\t\\t// TODO: review this fallback to \\'black\\' color.\\n\\t\\tcolor = color || \\'#000\\';\\n    var toRGBA = ' + C.toRGBA + ';\\n\\t\\tif ( ' + C._isRGBA + '(color) ) {\\n\\t\\t\\treturn color;\\n\\t\\t}\\n\\t\\telse {\\n\\t\\t\\tif ( ' + C._isHex + '(color) ) {\\n\\t\\t\\t\\treturn toRGBA( ' + C.toRGB + '( ' + C.toSixHex + '(color) ), opacity );\\n\\t\\t\\t}\\n\\t\\t\\telse if ( ' + C._isRGB + '(color) ) {\\n\\t\\t\\t\\treturn toRGBA(color);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}');\n\nColors.getAlphaColor = function (color, opacity) {\n\tif (color && typeof opacity !== 'number') {\n\t\treturn _utils2.default.functionString('function () {\\n          var op = ' + opacity + '();\\n          return ' + C.getAlphaColorFn + '(' + color + '(), typeof op === \"number\" ? op : 1);\\n      }');\n\t}\n\n\treturn color;\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzcuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL3N0eWxlL2NvbG9ycy5qcz8wYTg2Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBVdGlscyBmcm9tICcuLi91dGlscy91dGlscyc7XG52YXIgQ29sb3JzID0ge307XG5cbmV4cG9ydCBkZWZhdWx0IENvbG9ycztcblxubGV0IEMgPSBDb2xvcnM7XG5cbkNvbG9ycy5faXNIZXggPSBVdGlscy5mdW5jdGlvblN0cmluZyhcbiAgYGZ1bmN0aW9uIGlzSGV4IChjKSB7XG5cdFx0cmV0dXJuIGMuaW5kZXhPZignIycpID49IDA7XG5cdH1gXG4pO1xuXG5Db2xvcnMuX2lzUkdCID0gVXRpbHMuZnVuY3Rpb25TdHJpbmcoXG4gIGBmdW5jdGlvbiAoYykge1xuXHRcdHJldHVybiBjLmluZGV4T2YoJ3JnYicpID49IDA7XG5cdH1gXG4pO1xuXG5Db2xvcnMuX2lzUkdCQSA9IFV0aWxzLmZ1bmN0aW9uU3RyaW5nKFxuICBgZnVuY3Rpb24gKGMpIHtcblx0XHRyZXR1cm4gYy5pbmRleE9mKCdyZ2JhJykgPj0gMDtcblx0fWBcbik7XG5cbkNvbG9ycy50b1NpeEhleCA9IFV0aWxzLmZ1bmN0aW9uU3RyaW5nKFxuICBgZnVuY3Rpb24gKGMpIHtcblx0XHRcdGlmIChjLmxlbmd0aCA9PT0gNykge1xuXHRcdFx0XHRyZXR1cm4gYztcblx0XHRcdH1cblx0XHRcdGVsc2Uge1xuXHRcdFx0XHR2YXIgciA9IGNbMV0sXG5cdFx0XHRcdFx0ZyA9IGNbMl0sXG5cdFx0XHRcdFx0YiA9IGNbM107XG5cblx0XHRcdFx0cmV0dXJuICcjJyArIHIgKyByICsgZyArIGcgKyBiICsgYjtcblx0XHRcdH1cblx0XHR9YFxuKTtcblxuQ29sb3JzLmhleFRvSW50ID0gVXRpbHMuZnVuY3Rpb25TdHJpbmcoXG4gIGBmdW5jdGlvbiAoaGV4KSB7XG5cdFx0cmV0dXJuIHBhcnNlSW50KCcweCcgKyBoZXgpO1xuXHR9YFxuKTtcblxuQ29sb3JzLnRvUkdCID0gVXRpbHMuZnVuY3Rpb25TdHJpbmcoXG4gIGBmdW5jdGlvbiAoYykge1xuXHRcdHZhciByID0gJHtDLmhleFRvSW50fShjLnN1YnN0cigxLCAyKSkgKyAnLCAnLFxuXHRcdFx0ZyA9ICR7Qy5oZXhUb0ludH0oYy5zdWJzdHIoMywgMikpICsgJywgJyxcblx0XHRcdGIgPSAke0MuaGV4VG9JbnR9KGMuc3Vic3RyKDUsIDIpKTtcblxuXHRcdHJldHVybiAncmdiKCcgKyByICsgZyArIGIgKyAnKSc7XG5cdH1gXG4pO1xuXG5Db2xvcnMudG9SR0JBID0gVXRpbHMuZnVuY3Rpb25TdHJpbmcoXG4gIGBmdW5jdGlvbiAocmdiLCBhbHBoYSkge1xuXHRcdHJldHVybiByZ2IucmVwbGFjZSgncmdiJywgJ3JnYmEnKS5yZXBsYWNlKCcpJywgJywgJyArIGFscGhhICsgJyknKTtcblx0fWBcbik7XG5cbkNvbG9ycy5nZXRBbHBoYUNvbG9yRm4gPSBVdGlscy5mdW5jdGlvblN0cmluZyhcbiAgYGZ1bmN0aW9uIChjb2xvciwgb3BhY2l0eSkge1xuXHRcdC8vIFRPRE86IHJldmlldyB0aGlzIGZhbGxiYWNrIHRvICdibGFjaycgY29sb3IuXG5cdFx0Y29sb3IgPSBjb2xvciB8fCAnIzAwMCc7XG4gICAgdmFyIHRvUkdCQSA9ICR7Qy50b1JHQkF9O1xuXHRcdGlmICggJHtDLl9pc1JHQkF9KGNvbG9yKSApIHtcblx0XHRcdHJldHVybiBjb2xvcjtcblx0XHR9XG5cdFx0ZWxzZSB7XG5cdFx0XHRpZiAoICR7Qy5faXNIZXh9KGNvbG9yKSApIHtcblx0XHRcdFx0cmV0dXJuIHRvUkdCQSggJHtDLnRvUkdCfSggJHtDLnRvU2l4SGV4fShjb2xvcikgKSwgb3BhY2l0eSApO1xuXHRcdFx0fVxuXHRcdFx0ZWxzZSBpZiAoICR7Qy5faXNSR0J9KGNvbG9yKSApIHtcblx0XHRcdFx0cmV0dXJuIHRvUkdCQShjb2xvcik7XG5cdFx0XHR9XG5cdFx0fVxuXHR9YFxuKTtcblxuQ29sb3JzLmdldEFscGhhQ29sb3IgPSBmdW5jdGlvbiAoY29sb3IsIG9wYWNpdHkpIHtcbiAgaWYgKGNvbG9yICYmIHR5cGVvZiBvcGFjaXR5ICE9PSAnbnVtYmVyJykge1xuICAgIHJldHVybiBVdGlscy5mdW5jdGlvblN0cmluZyhcbiAgICAgIGBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdmFyIG9wID0gJHtvcGFjaXR5fSgpO1xuICAgICAgICAgIHJldHVybiAke0MuZ2V0QWxwaGFDb2xvckZufSgke2NvbG9yfSgpLCB0eXBlb2Ygb3AgPT09IFwibnVtYmVyXCIgPyBvcCA6IDEpO1xuICAgICAgfWBcbiAgICApO1xuICB9XG5cbiAgcmV0dXJuIGNvbG9yO1xufTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBzcmMvc3R5bGUvY29sb3JzLmpzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTtBQUNBOzs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUtBO0FBQ0E7QUFLQTtBQUNBO0FBS0E7QUFDQTtBQWNBO0FBQ0E7QUFLQTtBQUNBO0FBU0E7QUFDQTtBQUtBO0FBQ0E7QUFrQkE7QUFDQTtBQUNBO0FBTUE7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 78 */
/* no static exports found */
/* all exports used */
/*!***************************!*\
  !*** ./src/utils/geom.js ***!
  \***************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar Geom = {};\n\nexports.default = Geom;\n\n\nGeom.px2Meters = function (fn) {\n  return ('function () {\\n  \\t\\tvar val = (' + fn + '());\\n  \\t\\treturn val * $meters_per_pixel;\\n  \\t}').replace(/(\\t)/g, '');\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzguanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL3V0aWxzL2dlb20uanM/YmFjMyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgR2VvbSA9IHt9O1xuXG5leHBvcnQgZGVmYXVsdCBHZW9tO1xuXG5HZW9tLnB4Mk1ldGVycyA9IGZ1bmN0aW9uIChmbikge1xuICByZXR1cm4gYGZ1bmN0aW9uICgpIHtcbiAgXHRcdHZhciB2YWwgPSAoJHtmbn0oKSk7XG4gIFx0XHRyZXR1cm4gdmFsICogJG1ldGVyc19wZXJfcGl4ZWw7XG4gIFx0fWAucmVwbGFjZSgvKFxcdCkvZywgJycpO1xufTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBzcmMvdXRpbHMvZ2VvbS5qcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUlBIiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 79 */
/* no static exports found */
/* all exports used */
/*!***********************************************!*\
  !*** ./~/babel-runtime/core-js/array/from.js ***!
  \***********************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = { \"default\": __webpack_require__(/*! core-js/library/fn/array/from */ 113), __esModule: true };//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzkuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9hcnJheS9mcm9tLmpzP2VmYzIiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSB7IFwiZGVmYXVsdFwiOiByZXF1aXJlKFwiY29yZS1qcy9saWJyYXJ5L2ZuL2FycmF5L2Zyb21cIiksIF9fZXNNb2R1bGU6IHRydWUgfTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vYmFiZWwtcnVudGltZS9jb3JlLWpzL2FycmF5L2Zyb20uanNcbi8vIG1vZHVsZSBpZCA9IDc5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUEiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 80 */
/* no static exports found */
/* all exports used */
/*!******************************************************!*\
  !*** ./~/babel-runtime/helpers/toConsumableArray.js ***!
  \******************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nexports.__esModule = true;\n\nvar _from = __webpack_require__(/*! ../core-js/array/from */ 79);\n\nvar _from2 = _interopRequireDefault(_from);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = function (arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  } else {\n    return (0, _from2.default)(arr);\n  }\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODAuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2JhYmVsLXJ1bnRpbWUvaGVscGVycy90b0NvbnN1bWFibGVBcnJheS5qcz8xODI1Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX2Zyb20gPSByZXF1aXJlKFwiLi4vY29yZS1qcy9hcnJheS9mcm9tXCIpO1xuXG52YXIgX2Zyb20yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZnJvbSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGZ1bmN0aW9uIChhcnIpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkge1xuICAgIGZvciAodmFyIGkgPSAwLCBhcnIyID0gQXJyYXkoYXJyLmxlbmd0aCk7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHtcbiAgICAgIGFycjJbaV0gPSBhcnJbaV07XG4gICAgfVxuXG4gICAgcmV0dXJuIGFycjI7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuICgwLCBfZnJvbTIuZGVmYXVsdCkoYXJyKTtcbiAgfVxufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vYmFiZWwtcnVudGltZS9oZWxwZXJzL3RvQ29uc3VtYWJsZUFycmF5LmpzXG4vLyBtb2R1bGUgaWQgPSA4MFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 81 */
/* no static exports found */
/* all exports used */
/*!****************************************!*\
  !*** ./~/carto/lib/carto/functions.js ***!
  \****************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("(function (tree) {\n\ntree.functions = {\n    rgb: function (r, g, b) {\n        return this.rgba(r, g, b, 1.0);\n    },\n    rgba: function (r, g, b, a) {\n        var rgb = [r, g, b].map(function (c) { return number(c); });\n        a = number(a);\n        if (rgb.some(isNaN) || isNaN(a)) return null;\n        return new tree.Color(rgb, a);\n    },\n    // Only require val\n    stop: function (val) {\n        var color, mode;\n        if (arguments.length > 1) color = arguments[1];\n        if (arguments.length > 2) mode = arguments[2];\n\n        return {\n            is: 'tag',\n            val: val,\n            color: color,\n            mode: mode,\n            toString: function(env) {\n                return '\\n\\t<stop value=\"' + val.ev(env) + '\"' +\n                    (color ? ' color=\"' + color.ev(env) + '\" ' : '') +\n                    (mode ? ' mode=\"' + mode.ev(env) + '\" ' : '') +\n                    '/>';\n            }\n        };\n    },\n    hsl: function (h, s, l) {\n        return this.hsla(h, s, l, 1.0);\n    },\n    hsla: function (h, s, l, a) {\n        h = (number(h) % 360) / 360;\n        s = number(s); l = number(l); a = number(a);\n        if ([h, s, l, a].some(isNaN)) return null;\n\n        var m2 = l <= 0.5 ? l * (s + 1) : l + s - l * s,\n            m1 = l * 2 - m2;\n\n        return this.rgba(hue(h + 1/3) * 255,\n                         hue(h)       * 255,\n                         hue(h - 1/3) * 255,\n                         a);\n\n        function hue(h) {\n            h = h < 0 ? h + 1 : (h > 1 ? h - 1 : h);\n            if      (h * 6 < 1) return m1 + (m2 - m1) * h * 6;\n            else if (h * 2 < 1) return m2;\n            else if (h * 3 < 2) return m1 + (m2 - m1) * (2/3 - h) * 6;\n            else                return m1;\n        }\n    },\n    hue: function (color) {\n        if (!('toHSL' in color)) return null;\n        return new tree.Dimension(Math.round(color.toHSL().h));\n    },\n    saturation: function (color) {\n        if (!('toHSL' in color)) return null;\n        return new tree.Dimension(Math.round(color.toHSL().s * 100), '%');\n    },\n    lightness: function (color) {\n        if (!('toHSL' in color)) return null;\n        return new tree.Dimension(Math.round(color.toHSL().l * 100), '%');\n    },\n    alpha: function (color) {\n        if (!('toHSL' in color)) return null;\n        return new tree.Dimension(color.toHSL().a);\n    },\n    saturate: function (color, amount) {\n        if (!('toHSL' in color)) return null;\n        var hsl = color.toHSL();\n\n        hsl.s += amount.value / 100;\n        hsl.s = clamp(hsl.s);\n        return hsla(hsl);\n    },\n    desaturate: function (color, amount) {\n        if (!('toHSL' in color)) return null;\n        var hsl = color.toHSL();\n\n        hsl.s -= amount.value / 100;\n        hsl.s = clamp(hsl.s);\n        return hsla(hsl);\n    },\n    lighten: function (color, amount) {\n        if (!('toHSL' in color)) return null;\n        var hsl = color.toHSL();\n\n        hsl.l += amount.value / 100;\n        hsl.l = clamp(hsl.l);\n        return hsla(hsl);\n    },\n    darken: function (color, amount) {\n        if (!('toHSL' in color)) return null;\n        var hsl = color.toHSL();\n\n        hsl.l -= amount.value / 100;\n        hsl.l = clamp(hsl.l);\n        return hsla(hsl);\n    },\n    fadein: function (color, amount) {\n        if (!('toHSL' in color)) return null;\n        var hsl = color.toHSL();\n\n        hsl.a += amount.value / 100;\n        hsl.a = clamp(hsl.a);\n        return hsla(hsl);\n    },\n    fadeout: function (color, amount) {\n        if (!('toHSL' in color)) return null;\n        var hsl = color.toHSL();\n\n        hsl.a -= amount.value / 100;\n        hsl.a = clamp(hsl.a);\n        return hsla(hsl);\n    },\n    spin: function (color, amount) {\n        if (!('toHSL' in color)) return null;\n        var hsl = color.toHSL();\n        var hue = (hsl.h + amount.value) % 360;\n\n        hsl.h = hue < 0 ? 360 + hue : hue;\n\n        return hsla(hsl);\n    },\n    replace: function (entity, a, b) {\n        if (entity.is === 'field') {\n            return entity.toString + '.replace(' + a.toString() + ', ' + b.toString() + ')';\n        } else {\n            return entity.replace(a, b);\n        }\n    },\n    //\n    // Copyright (c) 2006-2009 Hampton Catlin, Nathan Weizenbaum, and Chris Eppstein\n    // http://sass-lang.com\n    //\n    mix: function (color1, color2, weight) {\n        var p = weight.value / 100.0;\n        var w = p * 2 - 1;\n        var a = color1.toHSL().a - color2.toHSL().a;\n\n        var w1 = (((w * a == -1) ? w : (w + a) / (1 + w * a)) + 1) / 2.0;\n        var w2 = 1 - w1;\n\n        var rgb = [color1.rgb[0] * w1 + color2.rgb[0] * w2,\n                   color1.rgb[1] * w1 + color2.rgb[1] * w2,\n                   color1.rgb[2] * w1 + color2.rgb[2] * w2];\n\n        var alpha = color1.alpha * p + color2.alpha * (1 - p);\n\n        return new tree.Color(rgb, alpha);\n    },\n    greyscale: function (color) {\n        return this.desaturate(color, new tree.Dimension(100));\n    },\n    '%': function (quoted /* arg, arg, ...*/) {\n        var args = Array.prototype.slice.call(arguments, 1),\n            str = quoted.value;\n\n        for (var i = 0; i < args.length; i++) {\n            str = str.replace(/%s/,    args[i].value)\n                     .replace(/%[da]/, args[i].toString());\n        }\n        str = str.replace(/%%/g, '%');\n        return new tree.Quoted(str);\n    }\n};\n\nvar image_filter_functors = [\n    'emboss', 'blur', 'gray', 'sobel', 'edge-detect',\n    'x-gradient', 'y-gradient', 'sharpen'];\n\nfor (var i = 0; i < image_filter_functors.length; i++) {\n    var f = image_filter_functors[i];\n    tree.functions[f] = (function(f) {\n        return function() {\n            return new tree.ImageFilter(f);\n        };\n    })(f);\n}\n\ntree.functions['agg-stack-blur'] = function(x, y) {\n    return new tree.ImageFilter('agg-stack-blur', [x, y]);\n};\n\ntree.functions['scale-hsla'] = function(h0,h1,s0,s1,l0,l1,a0,a1) {\n    return new tree.ImageFilter('scale-hsla', [h0,h1,s0,s1,l0,l1,a0,a1]);\n};\n\nfunction hsla(h) {\n    return tree.functions.hsla(h.h, h.s, h.l, h.a);\n}\n\nfunction number(n) {\n    if (n instanceof tree.Dimension) {\n        return parseFloat(n.unit == '%' ? n.value / 100 : n.value);\n    } else if (typeof(n) === 'number') {\n        return n;\n    } else {\n        return NaN;\n    }\n}\n\nfunction clamp(val) {\n    return Math.min(1, Math.max(0, val));\n}\n\n})(__webpack_require__(/*! ./tree */ 0));\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 82 */
/* no static exports found */
/* all exports used */
/*!*************************************!*\
  !*** ./~/carto/lib/carto/parser.js ***!
  \*************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global) {var carto = exports,\n    tree = __webpack_require__(/*! ./tree */ 0),\n    _ = global._ || __webpack_require__(/*! underscore */ 4);\n\n//    Token matching is done with the `$` function, which either takes\n//    a terminal string or regexp, or a non-terminal function to call.\n//    It also takes care of moving all the indices forwards.\ncarto.Parser = function Parser(env) {\n    var input,       // LeSS input string\n        i,           // current index in `input`\n        j,           // current chunk\n        temp,        // temporarily holds a chunk's state, for backtracking\n        memo,        // temporarily holds `i`, when backtracking\n        furthest,    // furthest index the parser has gone to\n        chunks,      // chunkified input\n        current,     // index of current chunk, in `input`\n        parser;\n\n    var that = this;\n\n    // This function is called after all files\n    // have been imported through `@import`.\n    var finish = function() {};\n\n    function save()    {\n        temp = chunks[j];\n        memo = i;\n        current = i;\n    }\n    function restore() {\n        chunks[j] = temp;\n        i = memo;\n        current = i;\n    }\n\n    function sync() {\n        if (i > current) {\n            chunks[j] = chunks[j].slice(i - current);\n            current = i;\n        }\n    }\n    //\n    // Parse from a token, regexp or string, and move forward if match\n    //\n    function $(tok) {\n        var match, args, length, c, index, endIndex, k;\n\n        // Non-terminal\n        if (tok instanceof Function) {\n            return tok.call(parser.parsers);\n        // Terminal\n        // Either match a single character in the input,\n        // or match a regexp in the current chunk (chunk[j]).\n        } else if (typeof(tok) === 'string') {\n            match = input.charAt(i) === tok ? tok : null;\n            length = 1;\n            sync();\n        } else {\n            sync();\n\n            match = tok.exec(chunks[j]);\n            if (match) {\n                length = match[0].length;\n            } else {\n                return null;\n            }\n        }\n\n        // The match is confirmed, add the match length to `i`,\n        // and consume any extra white-space characters (' ' || '\\n')\n        // which come after that. The reason for this is that LeSS's\n        // grammar is mostly white-space insensitive.\n        if (match) {\n            var mem = i += length;\n            endIndex = i + chunks[j].length - length;\n\n            while (i < endIndex) {\n                c = input.charCodeAt(i);\n                if (! (c === 32 || c === 10 || c === 9)) { break; }\n                i++;\n            }\n            chunks[j] = chunks[j].slice(length + (i - mem));\n            current = i;\n\n            if (chunks[j].length === 0 && j < chunks.length - 1) { j++; }\n\n            if (typeof(match) === 'string') {\n                return match;\n            } else {\n                return match.length === 1 ? match[0] : match;\n            }\n        }\n    }\n\n    // Same as $(), but don't change the state of the parser,\n    // just return the match.\n    function peek(tok) {\n        if (typeof(tok) === 'string') {\n            return input.charAt(i) === tok;\n        } else {\n            return !!tok.test(chunks[j]);\n        }\n    }\n\n    function extractErrorLine(style, errorIndex) {\n        return (style.slice(0, errorIndex).match(/\\n/g) || '').length + 1;\n    }\n\n\n    // Make an error object from a passed set of properties.\n    // Accepted properties:\n    // - `message`: Text of the error message.\n    // - `filename`: Filename where the error occurred.\n    // - `index`: Char. index where the error occurred.\n    function makeError(err) {\n        var einput;\n        var errorTemplate;\n\n        _.defaults(err, {\n            index: furthest,\n            filename: env.filename,\n            message: 'Parse error.',\n            line: 0,\n            column: -1\n        });\n\n        if (err.filename && that.env.inputs && that.env.inputs[err.filename]) {\n            einput = that.env.inputs[err.filename];\n        } else {\n            einput = input;\n        }\n\n        err.line = extractErrorLine(einput, err.index);\n        for (var n = err.index; n >= 0 && einput.charAt(n) !== '\\n'; n--) {\n            err.column++;\n        }\n        errorTemplate = _.template('<%=filename%>:<%=line%>:<%=column%> <%=message%>');\n        return new Error(errorTemplate(err));\n    }\n\n    this.env = env = env || {};\n    this.env.filename = this.env.filename || null;\n    this.env.inputs = this.env.inputs || {};\n\n    // The Parser\n    parser = {\n\n        extractErrorLine: extractErrorLine,\n        //\n        // Parse an input string into an abstract syntax tree.\n        // Throws an error on parse errors.\n        parse: function(str) {\n            var root, start, end, zone, line, lines, buff = [], c, error = null;\n\n            i = j = current = furthest = 0;\n            chunks = [];\n            input = str.replace(/\\r\\n/g, '\\n');\n            if (env.filename) {\n                that.env.inputs[env.filename] = input;\n            }\n\n            var early_exit = false;\n\n            // Split the input into chunks.\n            chunks = (function (chunks) {\n                var j = 0,\n                    skip = /(?:@\\{[\\w-]+\\}|[^\"'`\\{\\}\\/\\(\\)\\\\])+/g,\n                    comment = /\\/\\*(?:[^*]|\\*+[^\\/*])*\\*+\\/|\\/\\/.*/g,\n                    string = /\"((?:[^\"\\\\\\r\\n]|\\\\.)*)\"|'((?:[^'\\\\\\r\\n]|\\\\.)*)'|`((?:[^`]|\\\\.)*)`/g,\n                    level = 0,\n                    match,\n                    chunk = chunks[0],\n                    inParam;\n\n                for (var i = 0, c, cc; i < input.length;) {\n                    skip.lastIndex = i;\n                    if (match = skip.exec(input)) {\n                        if (match.index === i) {\n                            i += match[0].length;\n                            chunk.push(match[0]);\n                        }\n                    }\n                    c = input.charAt(i);\n                    comment.lastIndex = string.lastIndex = i;\n\n                    if (match = string.exec(input)) {\n                        if (match.index === i) {\n                            i += match[0].length;\n                            chunk.push(match[0]);\n                            continue;\n                        }\n                    }\n\n                    if (!inParam && c === '/') {\n                        cc = input.charAt(i + 1);\n                        if (cc === '/' || cc === '*') {\n                            if (match = comment.exec(input)) {\n                                if (match.index === i) {\n                                    i += match[0].length;\n                                    chunk.push(match[0]);\n                                    continue;\n                                }\n                            }\n                        }\n                    }\n\n                    switch (c) {\n                        case '{': if (! inParam) { level ++;        chunk.push(c);                           break; }\n                        case '}': if (! inParam) { level --;        chunk.push(c); chunks[++j] = chunk = []; break; }\n                        case '(': if (! inParam) { inParam = true;  chunk.push(c);                           break; }\n                        case ')': if (  inParam) { inParam = false; chunk.push(c);                           break; }\n                        default:                                    chunk.push(c);\n                    }\n\n                    i++;\n                }\n                if (level !== 0) {\n                    error = {\n                        index: i - 1,\n                        type: 'Parse',\n                        message: (level > 0) ? \"missing closing `}`\" : \"missing opening `{`\"\n                    };\n                }\n\n                return chunks.map(function (c) { return c.join(''); });\n            })([[]]);\n\n            if (error) {\n                throw makeError(error);\n            }\n\n            // Start with the primary rule.\n            // The whole syntax tree is held under a Ruleset node,\n            // with the `root` property set to true, so no `{}` are\n            // output.\n            root = new tree.Ruleset([], $(this.parsers.primary));\n            root.root = true;\n\n            // Get an array of Ruleset objects, flattened\n            // and sorted according to specificitySort\n            root.toList = (function() {\n                var line, lines, column;\n                return function(env) {\n                    env.error = function(e) {\n                        if (!env.errors) env.errors = new Error('');\n                        if (env.errors.message) {\n                            env.errors.message += '\\n' + makeError(e).message;\n                        } else {\n                            env.errors.message = makeError(e).message;\n                        }\n                    };\n                    env.frames = env.frames || [];\n\n\n                    // call populates Invalid-caused errors\n                    var definitions = this.flatten([], [], env);\n                    definitions.sort(specificitySort);\n                    return definitions;\n                };\n            })();\n\n            // Sort rules by specificity: this function expects selectors to be\n            // split already.\n            //\n            // Written to be used as a .sort(Function);\n            // argument.\n            //\n            // [1, 0, 0, 467] > [0, 0, 1, 520]\n            var specificitySort = function(a, b) {\n                var as = a.specificity;\n                var bs = b.specificity;\n\n                if (as[0] != bs[0]) return bs[0] - as[0];\n                if (as[1] != bs[1]) return bs[1] - as[1];\n                if (as[2] != bs[2]) return bs[2] - as[2];\n                return bs[3] - as[3];\n            };\n\n            return root;\n        },\n\n        // Here in, the parsing rules/functions\n        //\n        // The basic structure of the syntax tree generated is as follows:\n        //\n        //   Ruleset ->  Rule -> Value -> Expression -> Entity\n        //\n        //  In general, most rules will try to parse a token with the `$()` function, and if the return\n        //  value is truly, will return a new node, of the relevant type. Sometimes, we need to check\n        //  first, before parsing, that's when we use `peek()`.\n        parsers: {\n            // The `primary` rule is the *entry* and *exit* point of the parser.\n            // The rules here can appear at any level of the parse tree.\n            //\n            // The recursive nature of the grammar is an interplay between the `block`\n            // rule, which represents `{ ... }`, the `ruleset` rule, and this `primary` rule,\n            // as represented by this simplified grammar:\n            //\n            //     primary  →  (ruleset | rule)+\n            //     ruleset  →  selector+ block\n            //     block    →  '{' primary '}'\n            //\n            // Only at one point is the primary rule not called from the\n            // block rule: at the root level.\n            primary: function() {\n                var node, root = [];\n\n                while ((node = $(this.rule) || $(this.ruleset) ||\n                               $(this.comment)) ||\n                               $(/^[\\s\\n]+/) || (node = $(this.invalid))) {\n                    if (node) root.push(node);\n                }\n                return root;\n            },\n\n            invalid: function () {\n                var chunk = $(/^[^;\\n]*[;\\n]/);\n\n                // To fail gracefully, match everything until a semicolon or linebreak.\n                if (chunk) {\n                    return new tree.Invalid(chunk, memo);\n                }\n            },\n\n            // We create a Comment node for CSS comments `/* */`,\n            // but keep the LeSS comments `//` silent, by just skipping\n            // over them.\n            comment: function() {\n                var comment;\n\n                if (input.charAt(i) !== '/') return;\n\n                if (input.charAt(i + 1) === '/') {\n                    return new tree.Comment($(/^\\/\\/.*/), true);\n                } else if (comment = $(/^\\/\\*(?:[^*]|\\*+[^\\/*])*\\*+\\/\\n?/)) {\n                    return new tree.Comment(comment);\n                }\n            },\n\n            // Entities are tokens which can be found inside an Expression\n            entities: {\n\n                // A string, which supports escaping \" and ' \"milky way\" 'he\\'s the one!'\n                quoted: function() {\n                    if (input.charAt(i) !== '\"' && input.charAt(i) !== \"'\") return;\n                    var str = $(/^\"((?:[^\"\\\\\\r\\n]|\\\\.)*)\"|'((?:[^'\\\\\\r\\n]|\\\\.)*)'/);\n                    if (str) {\n                        return new tree.Quoted(str[1] || str[2]);\n                    }\n                },\n\n                // A reference to a Mapnik field, like [NAME]\n                // Behind the scenes, this has the same representation, but Carto\n                // needs to be careful to warn when unsupported operations are used.\n                field: function() {\n                    if (! $('[')) return;\n                    var field_name = $(/(^[^\\]]+)/);\n                    if (! $(']')) return;\n                    if (field_name) return new tree.Field(field_name[1]);\n                },\n\n                // This is a comparison operator\n                comparison: function() {\n                    var str = $(/^=~|=|!=|<=|>=|<|>/);\n                    if (str) {\n                        return str;\n                    }\n                },\n\n                // A catch-all word, such as: hard-light\n                // These can start with either a letter or a dash (-),\n                // and then contain numbers, underscores, and letters.\n                keyword: function() {\n                    var k = $(/^[A-Za-z-]+[A-Za-z-0-9_]*/);\n                    if (k) { return new tree.Keyword(k); }\n                },\n\n                // A function call like rgb(255, 0, 255)\n                // The arguments are parsed with the `entities.arguments` parser.\n                call: function() {\n                    var name, args;\n\n                    if (!(name = /^([\\w\\-]+|%)\\(/.exec(chunks[j]))) return;\n\n                    name = name[1];\n\n                    if (name === 'url') {\n                        // url() is handled by the url parser instead\n                        return null;\n                    } else {\n                        i += name.length;\n                    }\n\n                    $('('); // Parse the '(' and consume whitespace.\n\n                    args = $(this.entities['arguments']);\n\n                    if (!$(')')) return;\n\n                    if (name) {\n                        return new tree.Call(name, args, i);\n                    }\n                },\n                // Arguments are comma-separated expressions\n                'arguments': function() {\n                    var args = [], arg;\n\n                    while (arg = $(this.expression)) {\n                        args.push(arg);\n                        if (! $(',')) { break; }\n                    }\n\n                    return args;\n                },\n                literal: function() {\n                    return $(this.entities.dimension) ||\n                        $(this.entities.keywordcolor) ||\n                        $(this.entities.hexcolor) ||\n                        $(this.entities.quoted);\n                },\n\n                // Parse url() tokens\n                //\n                // We use a specific rule for urls, because they don't really behave like\n                // standard function calls. The difference is that the argument doesn't have\n                // to be enclosed within a string, so it can't be parsed as an Expression.\n                url: function() {\n                    var value;\n\n                    if (input.charAt(i) !== 'u' || !$(/^url\\(/)) return;\n                    value = $(this.entities.quoted) || $(this.entities.variable) ||\n                            $(/^[\\-\\w%@$\\/.&=:;#+?~]+/) || '';\n                    if (! $(')')) {\n                        return new tree.Invalid(value, memo, 'Missing closing ) in URL.');\n                    } else {\n                        return new tree.URL((typeof value.value !== 'undefined' ||\n                            value instanceof tree.Variable) ?\n                            value : new tree.Quoted(value));\n                    }\n                },\n\n                // A Variable entity, such as `@fink`, in\n                //\n                //     width: @fink + 2px\n                //\n                // We use a different parser for variable definitions,\n                // see `parsers.variable`.\n                variable: function() {\n                    var name, index = i;\n\n                    if (input.charAt(i) === '@' && (name = $(/^@[\\w-]+/))) {\n                        return new tree.Variable(name, index, env.filename);\n                    }\n                },\n\n                hexcolor: function() {\n                    var rgb;\n                    if (input.charAt(i) === '#' && (rgb = $(/^#([a-fA-F0-9]{6}|[a-fA-F0-9]{3})/))) {\n                        return new tree.Color(rgb[1]);\n                    }\n                },\n\n                keywordcolor: function() {\n                    var rgb = chunks[j].match(/^[a-z]+/);\n                    if (rgb && rgb[0] in tree.Reference.data.colors) {\n                        return new tree.Color(tree.Reference.data.colors[$(/^[a-z]+/)]);\n                    }\n                },\n\n                // A Dimension, that is, a number and a unit. The only\n                // unit that has an effect is %\n                dimension: function() {\n                    var c = input.charCodeAt(i);\n                    if ((c > 57 || c < 45) || c === 47) return;\n                    var value = $(/^(-?\\d*\\.?\\d+(?:[eE][-+]?\\d+)?)(\\%|\\w+)?/);\n                    if (value) {\n                        return new tree.Dimension(value[1], value[2], memo);\n                    }\n                }\n\n            },\n\n            // The variable part of a variable definition.\n            // Used in the `rule` parser. Like @fink:\n            variable: function() {\n                var name;\n\n                if (input.charAt(i) === '@' && (name = $(/^(@[\\w-]+)\\s*:/))) {\n                    return name[1];\n                }\n            },\n\n            // Entities are the smallest recognized token,\n            // and can be found inside a rule's value.\n            entity: function() {\n                return $(this.entities.call) ||\n                    $(this.entities.literal) ||\n                    $(this.entities.field) ||\n                    $(this.entities.variable) ||\n                    $(this.entities.url) ||\n                    $(this.entities.keyword);\n            },\n\n            // A Rule terminator. Note that we use `peek()` to check for '}',\n            // because the `block` rule will be expecting it, but we still need to make sure\n            // it's there, if ';' was ommitted.\n            end: function() {\n                return $(';') || peek('}');\n            },\n\n            // Elements are the building blocks for Selectors. They consist of\n            // an element name, such as a tag a class, or `*`.\n            element: function() {\n                var e = $(/^(?:[.#][\\w\\-]+|\\*|Map)/);\n                if (e) return new tree.Element(e);\n            },\n\n            // Attachments allow adding multiple lines, polygons etc. to an\n            // object. There can only be one attachment per selector.\n            attachment: function() {\n                var s = $(/^::([\\w\\-]+(?:\\/[\\w\\-]+)*)/);\n                if (s) return s[1];\n            },\n\n            // Selectors are made out of one or more Elements, see above.\n            selector: function() {\n                var a, attachment,\n                    e, elements = [],\n                    f, filters = new tree.Filterset(),\n                    z, zooms = [],\n                    frame_offset = tree.FrameOffset.none;\n                    segments = 0, conditions = 0;\n\n                while (\n                        (e = $(this.element)) ||\n                        (z = $(this.zoom)) ||\n                        (fo = $(this.frame_offset)) ||\n                        (f = $(this.filter)) ||\n                        (a = $(this.attachment))\n                    ) {\n                    segments++;\n                    if (e) {\n                        elements.push(e);\n                    } else if (z) {\n                        zooms.push(z);\n                        conditions++;\n                    } else if (fo) {\n                        frame_offset = fo;\n                        conditions++;\n                    } else if (f) {\n                        var err = filters.add(f);\n                        if (err) {\n                            throw makeError({\n                                message: err,\n                                index: i - 1\n                            });\n                        }\n                        conditions++;\n                    } else if (attachment) {\n                        throw makeError({\n                            message: 'Encountered second attachment name.',\n                            index: i - 1\n                        });\n                    } else {\n                        attachment = a;\n                    }\n\n                    var c = input.charAt(i);\n                    if (c === '{' || c === '}' || c === ';' || c === ',') { break; }\n                }\n\n                if (segments) {\n                    return new tree.Selector(filters, zooms, frame_offset, elements, attachment, conditions, memo);\n                }\n            },\n\n            filter: function() {\n                save();\n                var key, op, val;\n                if (! $('[')) return;\n                if (key = $(/^[a-zA-Z0-9\\-_]+/) ||\n                    $(this.entities.quoted) ||\n                    $(this.entities.variable) ||\n                    $(this.entities.keyword) ||\n                    $(this.entities.field)) {\n                    // TODO: remove at 1.0.0\n                    if (key instanceof tree.Quoted) {\n                        key = new tree.Field(key.toString());\n                    }\n                    if ((op = $(this.entities.comparison)) &&\n                        (val = $(this.entities.quoted) ||\n                             $(this.entities.variable) ||\n                             $(this.entities.dimension) ||\n                             $(this.entities.keyword) ||\n                             $(this.entities.field))) {\n                        if (! $(']')) {\n                            throw makeError({\n                                message: 'Missing closing ] of filter.',\n                                index: memo - 1\n                            });\n                        }\n                        if (!key.is) key = new tree.Field(key);\n                        return new tree.Filter(key, op, val, memo, env.filename);\n                    }\n                }\n            },\n\n            frame_offset: function() {\n                save();\n                var op, val;\n                if ($(/^\\[\\s*frame-offset/g) &&\n                    (op = $(this.entities.comparison)) &&\n                    (val = $(/^\\d+/)) &&\n                    $(']'))  {\n                        return tree.FrameOffset(op, val, memo);\n                }\n            },\n\n            zoom: function() {\n                save();\n                var op, val;\n                if ($(/^\\[\\s*zoom/g) &&\n                    (op = $(this.entities.comparison)) &&\n                    (val = $(this.entities.variable) || $(this.entities.dimension)) && $(']')) {\n                        return new tree.Zoom(op, val, memo);\n                } else {\n                    // backtrack\n                    restore();\n                }\n            },\n\n            // The `block` rule is used by `ruleset`\n            // It's a wrapper around the `primary` rule, with added `{}`.\n            block: function() {\n                var content;\n\n                if ($('{') && (content = $(this.primary)) && $('}')) {\n                    return content;\n                }\n            },\n\n            // div, .class, body > p {...}\n            ruleset: function() {\n                var selectors = [], s, f, l, rules, filters = [];\n                save();\n\n                while (s = $(this.selector)) {\n                    selectors.push(s);\n                    while ($(this.comment)) {}\n                    if (! $(',')) { break; }\n                    while ($(this.comment)) {}\n                }\n                if (s) {\n                    while ($(this.comment)) {}\n                }\n\n                if (selectors.length > 0 && (rules = $(this.block))) {\n                    if (selectors.length === 1 &&\n                        selectors[0].elements.length &&\n                        selectors[0].elements[0].value === 'Map') {\n                        var rs = new tree.Ruleset(selectors, rules);\n                        rs.isMap = true;\n                        return rs;\n                    }\n                    return new tree.Ruleset(selectors, rules);\n                } else {\n                    // Backtrack\n                    restore();\n                }\n            },\n\n            rule: function() {\n                var name, value, c = input.charAt(i);\n                save();\n\n                if (c === '.' || c === '#') { return; }\n\n                if (name = $(this.variable) || $(this.property)) {\n                    value = $(this.value);\n\n                    if (value && $(this.end)) {\n                        return new tree.Rule(name, value, memo, env.filename);\n                    } else {\n                        furthest = i;\n                        restore();\n                    }\n                }\n            },\n\n            font: function() {\n                var value = [], expression = [], weight, font, e;\n\n                while (e = $(this.entity)) {\n                    expression.push(e);\n                }\n\n                value.push(new tree.Expression(expression));\n\n                if ($(',')) {\n                    while (e = $(this.expression)) {\n                        value.push(e);\n                        if (! $(',')) { break; }\n                    }\n                }\n                return new tree.Value(value);\n            },\n\n            // A Value is a comma-delimited list of Expressions\n            // In a Rule, a Value represents everything after the `:`,\n            // and before the `;`.\n            value: function() {\n                var e, expressions = [];\n\n                while (e = $(this.expression)) {\n                    expressions.push(e);\n                    if (! $(',')) { break; }\n                }\n\n                if (expressions.length > 1) {\n                    return new tree.Value(expressions.map(function(e) {\n                        return e.value[0];\n                    }));\n                } else if (expressions.length === 1) {\n                    return new tree.Value(expressions);\n                }\n            },\n            // A sub-expression, contained by parenthensis\n            sub: function() {\n                var e, expressions = [];\n\n                if ($('(')) {\n                  while (e = $(this.expression)) {\n                      expressions.push(e);\n                      if (! $(',')) { break; }\n                  }\n                  $(')');\n                }\n\n                if (expressions.length > 1) {\n                    return new tree.Value(expressions.map(function(e) {\n                        return e.value[0];\n                    }));\n                } else if (expressions.length === 1) {\n                    return new tree.Value(expressions);\n                }\n            },\n            // This is a misnomer because it actually handles multiplication\n            // and division.\n            multiplication: function() {\n                var m, a, op, operation;\n                if (m = $(this.operand)) {\n                    while ((op = ($('/') || $('*') || $('%'))) && (a = $(this.operand))) {\n                        operation = new tree.Operation(op, [operation || m, a], memo);\n                    }\n                    return operation || m;\n                }\n            },\n            addition: function() {\n                var m, a, op, operation;\n                if (m = $(this.multiplication)) {\n                    while ((op = $(/^[-+]\\s+/) || (input.charAt(i - 1) != ' ' && ($('+') || $('-')))) &&\n                           (a = $(this.multiplication))) {\n                        operation = new tree.Operation(op, [operation || m, a], memo);\n                    }\n                    return operation || m;\n                }\n            },\n\n            // An operand is anything that can be part of an operation,\n            // such as a Color, or a Variable\n            operand: function() {\n                return $(this.sub) || $(this.entity);\n            },\n\n            // Expressions either represent mathematical operations,\n            // or white-space delimited Entities.  @var * 2\n            expression: function() {\n                var e, delim, entities = [], d;\n\n                while (e = $(this.addition) || $(this.entity)) {\n                    entities.push(e);\n                }\n\n                if (entities.length > 0) {\n                    return new tree.Expression(entities);\n                }\n            },\n            property: function() {\n                var name = $(/^(([a-z][-a-z_0-9]*\\/)?\\*?-?[-a-z_0-9]+)\\s*:/);\n                if (name) return name[1];\n            }\n        }\n    };\n    return parser;\n};\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./../../../webpack/buildin/global.js */ 3)))//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 83 */
/* no static exports found */
/* all exports used */
/*!***************************************!*\
  !*** ./~/carto/lib/carto/renderer.js ***!
  \***************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global) {var _ = global._ || __webpack_require__(/*! underscore */ 4);\nvar carto = __webpack_require__(/*! ./index */ 27);\n\ncarto.Renderer = function Renderer(env, options) {\n    this.env = env || {};\n    this.options = options || {};\n    this.options.mapnik_version = this.options.mapnik_version || '3.0.0';\n};\n\n/**\n * Prepare a MSS document (given as an string) into a\n * XML Style fragment (mostly useful for debugging)\n *\n * @param {String} data the mss contents as a string.\n */\ncarto.Renderer.prototype.renderMSS = function render(data) {\n    // effects is a container for side-effects, which currently\n    // are limited to FontSets.\n    var env = _.defaults(this.env, {\n        benchmark: false,\n        validation_data: false,\n        effects: []\n    });\n\n    if (!carto.tree.Reference.setVersion(this.options.mapnik_version)) {\n        throw new Error(\"Could not set mapnik version to \" + this.options.mapnik_version);\n    }\n\n    var output = [];\n    var styles = [];\n\n    if (env.benchmark) console.time('Parsing MSS');\n    var parser = (carto.Parser(env)).parse(data);\n    if (env.benchmark) console.timeEnd('Parsing MSS');\n\n    if (env.benchmark) console.time('Rule generation');\n    var rule_list = parser.toList(env);\n    if (env.benchmark) console.timeEnd('Rule generation');\n\n    if (env.benchmark) console.time('Rule inheritance');\n    var rules = inheritDefinitions(rule_list, env);\n    if (env.benchmark) console.timeEnd('Rule inheritance');\n\n    if (env.benchmark) console.time('Style sort');\n    var sorted = sortStyles(rules,env);\n    if (env.benchmark) console.timeEnd('Style sort');\n\n    if (env.benchmark) console.time('Total Style generation');\n    for (var k = 0, rule, style_name; k < sorted.length; k++) {\n        rule = sorted[k];\n        style_name = 'style' + (rule.attachment !== '__default__' ? '-' + rule.attachment : '');\n        styles.push(style_name);\n        var bench_name = '\\tStyle \"'+style_name+'\" (#'+k+') toXML';\n        if (env.benchmark) console.time(bench_name);\n        // env.effects can be modified by this call\n        output.push(carto.tree.StyleXML(style_name, rule.attachment, rule, env));\n        if (env.benchmark) console.timeEnd(bench_name);\n    }\n    if (env.benchmark) console.timeEnd('Total Style generation');\n    if (env.errors) throw env.errors;\n    return output.join('\\n');\n};\n\n/**\n * Prepare a MML document (given as an object) into a\n * fully-localized XML file ready for Mapnik2 consumption\n *\n * @param {String} m - the JSON file as a string.\n */\ncarto.Renderer.prototype.render = function render(m) {\n    // effects is a container for side-effects, which currently\n    // are limited to FontSets.\n    var env = _.defaults(this.env, {\n        benchmark: false,\n        validation_data: false,\n        effects: [],\n        ppi: 90.714\n    });\n\n    if (!carto.tree.Reference.setVersion(this.options.mapnik_version)) {\n        throw new Error(\"Could not set mapnik version to \" + this.options.mapnik_version);\n    }\n\n    var output = [];\n\n    // Transform stylesheets into definitions.\n    var definitions = _.chain(m.Stylesheet)\n        .map(function(s) {\n            if (typeof s == 'string') {\n                throw new Error(\"Stylesheet object is expected not a string: '\" + s + \"'\");\n            }\n            // Passing the environment from stylesheet to stylesheet,\n            // allows frames and effects to be maintained.\n            env = _.extend(env, {filename:s.id});\n\n            var time = +new Date(),\n                root = (carto.Parser(env)).parse(s.data);\n            if (env.benchmark)\n                console.warn('Parsing time: ' + (new Date() - time) + 'ms');\n            return root.toList(env);\n        })\n        .flatten()\n        .value();\n\n    function appliesTo(name, classIndex) {\n        return function(definition) {\n            return definition.appliesTo(l.name, classIndex);\n        };\n    }\n\n    // Iterate through layers and create styles custom-built\n    // for each of them, and apply those styles to the layers.\n    var styles, l, classIndex, rules, sorted, matching;\n    for (var i = 0; i < m.Layer.length; i++) {\n        l = m.Layer[i];\n        styles = [];\n        classIndex = {};\n\n        if (env.benchmark) console.warn('processing layer: ' + l.id);\n        // Classes are given as space-separated alphanumeric strings.\n        var classes = (l['class'] || '').split(/\\s+/g);\n        for (var j = 0; j < classes.length; j++) {\n            classIndex[classes[j]] = true;\n        }\n        matching = definitions.filter(appliesTo(l.name, classIndex));\n        rules = inheritDefinitions(matching, env);\n        sorted = sortStyles(rules, env);\n\n        for (var k = 0, rule, style_name; k < sorted.length; k++) {\n            rule = sorted[k];\n            style_name = l.name + (rule.attachment !== '__default__' ? '-' + rule.attachment : '');\n\n            // env.effects can be modified by this call\n            var styleXML = carto.tree.StyleXML(style_name, rule.attachment, rule, env);\n\n            if (styleXML) {\n                output.push(styleXML);\n                styles.push(style_name);\n            }\n        }\n\n        output.push(carto.tree.LayerXML(l, styles));\n    }\n\n    output.unshift(env.effects.map(function(e) {\n        return e.toXML(env);\n    }).join('\\n'));\n\n    var map_properties = getMapProperties(m, definitions, env);\n\n    // Exit on errors.\n    if (env.errors) throw env.errors;\n\n    // Pass TileJSON and other custom parameters through to Mapnik XML.\n    var parameters = _.reduce(m, function(memo, v, k) {\n        if (!v && v !== 0) return memo;\n\n        switch (k) {\n        // Known skippable properties.\n        case 'srs':\n        case 'Layer':\n        case 'Stylesheet':\n            break;\n        // Non URL-bound TileJSON properties.\n        case 'bounds':\n        case 'center':\n        case 'minzoom':\n        case 'maxzoom':\n        case 'version':\n            memo.push('  <Parameter name=\"' + k + '\">' + v + '</Parameter>');\n            break;\n        // Properties that require CDATA.\n        case 'name':\n        case 'description':\n        case 'legend':\n        case 'attribution':\n        case 'template':\n            memo.push('  <Parameter name=\"' + k + '\"><![CDATA[' + v + ']]></Parameter>');\n            break;\n        // Mapnik image format.\n        case 'format':\n            memo.push('  <Parameter name=\"' + k + '\">' + v + '</Parameter>');\n            break;\n        // Mapnik interactivity settings.\n        case 'interactivity':\n            memo.push('  <Parameter name=\"interactivity_layer\">' + v.layer + '</Parameter>');\n            memo.push('  <Parameter name=\"interactivity_fields\">' + v.fields + '</Parameter>');\n            break;\n        // Support any additional scalar properties.\n        default:\n            if ('string' === typeof v) {\n                memo.push('  <Parameter name=\"' + k + '\"><![CDATA[' + v + ']]></Parameter>');\n            } else if ('number' === typeof v) {\n                memo.push('  <Parameter name=\"' + k + '\">' + v + '</Parameter>');\n            } else if ('boolean' === typeof v) {\n                memo.push('  <Parameter name=\"' + k + '\">' + v + '</Parameter>');\n            }\n            break;\n        }\n        return memo;\n    }, []);\n    if (parameters.length) output.unshift(\n        '<Parameters>\\n' +\n        parameters.join('\\n') +\n        '\\n</Parameters>\\n'\n    );\n\n    var properties = _.map(map_properties, function(v) { return ' ' + v; }).join('');\n\n    output.unshift(\n        '<?xml version=\"1.0\" ' +\n        'encoding=\"utf-8\"?>\\n' +\n        '<!DOCTYPE Map[]>\\n' +\n        '<Map' + properties +'>\\n');\n    output.push('</Map>');\n    return output.join('\\n');\n};\n\n/**\n * This function currently modifies 'current'\n * @param {Array}  current  current list of rules\n * @param {Object} definition a Definition object to add to the rules\n * @param {Object} byFilter an object/dictionary of existing filters. This is\n * actually keyed `attachment->filter`\n * @param {Object} env the current environment\n*/\nfunction addRules(current, definition, byFilter, env) {\n    var newFilters = definition.filters,\n        newRules = definition.rules,\n        updatedFilters, clone, previous;\n\n    // The current definition might have been split up into\n    // multiple definitions already.\n    for (var k = 0; k < current.length; k++) {\n        updatedFilters = current[k].filters.cloneWith(newFilters);\n        if (updatedFilters) {\n            previous = byFilter[updatedFilters];\n            if (previous) {\n                // There's already a definition with those exact\n                // filters. Add the current definitions' rules\n                // and stop processing it as the existing rule\n                // has already gone down the inheritance chain.\n                previous.addRules(newRules);\n            } else {\n                clone = current[k].clone(updatedFilters);\n                // Make sure that we're only maintaining the clone\n                // when we did actually add rules. If not, there's\n                // no need to keep the clone around.\n                if (clone.addRules(newRules)) {\n                    // We inserted an element before this one, so we need\n                    // to make sure that in the next loop iteration, we're\n                    // not performing the same task for this element again,\n                    // hence the k++.\n                    byFilter[updatedFilters] = clone;\n                    current.splice(k, 0, clone);\n                    k++;\n                }\n            }\n        } else if (updatedFilters === null) {\n            // if updatedFilters is null, then adding the filters doesn't\n            // invalidate or split the selector, so we addRules to the\n            // combined selector\n\n            // Filters can be added, but they don't change the\n            // filters. This means we don't have to split the\n            // definition.\n            //\n            // this is cloned here because of shared classes, see\n            // sharedclass.mss\n            current[k] = current[k].clone();\n            current[k].addRules(newRules);\n        }\n        // if updatedFeatures is false, then the filters split the rule,\n        // so they aren't the same inheritance chain\n    }\n    return current;\n}\n\n/**\n * Apply inherited styles from their ancestors to them.\n *\n * called either once per render (in the case of mss) or per layer\n * (for mml)\n *\n * @param {Object} definitions - a list of definitions objects\n *   that contain .rules\n * @param {Object} env - the environment\n * @return {Array<Array>} an array of arrays is returned,\n *   in which each array refers to a specific attachment\n */\nfunction inheritDefinitions(definitions, env) {\n    var inheritTime = +new Date();\n    // definitions are ordered by specificity,\n    // high (index 0) to low\n    var byAttachment = {},\n        byFilter = {};\n    var result = [];\n    var current, previous, attachment;\n\n    // Evaluate the filters specified by each definition with the given\n    // environment to correctly resolve variable references\n    definitions.forEach(function(d) {\n        d.filters.ev(env);\n    });\n\n    for (var i = 0; i < definitions.length; i++) {\n\n        attachment = definitions[i].attachment;\n        current = [definitions[i]];\n\n        if (!byAttachment[attachment]) {\n            byAttachment[attachment] = [];\n            byAttachment[attachment].attachment = attachment;\n            byFilter[attachment] = {};\n            result.push(byAttachment[attachment]);\n        }\n\n        // Iterate over all subsequent rules.\n        for (var j = i + 1; j < definitions.length; j++) {\n            if (definitions[j].attachment === attachment) {\n                // Only inherit rules from the same attachment.\n                current = addRules(current, definitions[j], byFilter[attachment], env);\n            }\n        }\n\n        for (var k = 0; k < current.length; k++) {\n            byFilter[attachment][current[k].filters] = current[k];\n            byAttachment[attachment].push(current[k]);\n        }\n    }\n\n    if (env.benchmark) console.warn('Inheritance time: ' + ((new Date() - inheritTime)) + 'ms');\n\n    return result;\n\n}\n\n// Sort styles by the minimum index of their rules.\n// This sorts a slice of the styles, so it returns a sorted\n// array but does not change the input.\nfunction sortStylesIndex(a, b) { return b.index - a.index; }\nfunction sortStyles(styles, env) {\n    for (var i = 0; i < styles.length; i++) {\n        var style = styles[i];\n        style.index = Infinity;\n        for (var b = 0; b < style.length; b++) {\n            var rules = style[b].rules;\n            for (var r = 0; r < rules.length; r++) {\n                var rule = rules[r];\n                if (rule.index < style.index) {\n                    style.index = rule.index;\n                }\n            }\n        }\n    }\n\n    var result = styles.slice();\n    result.sort(sortStylesIndex);\n    return result;\n}\n\n/**\n * Find a rule like Map { background-color: #fff; },\n * if any, and return a list of properties to be inserted\n * into the <Map element of the resulting XML. Translates\n * properties of the mml object at `m` directly into XML\n * properties.\n *\n * @param {Object} m the mml object.\n * @param {Array} definitions the output of toList.\n * @param {Object} env\n * @return {String} rendered properties.\n */\nfunction getMapProperties(m, definitions, env) {\n    var rules = {};\n    var symbolizers = carto.tree.Reference.data.symbolizers.map;\n\n    _(m).each(function(value, key) {\n        if (key in symbolizers) rules[key] = key + '=\"' + value + '\"';\n    });\n\n    definitions.filter(function(r) {\n        return r.elements.join('') === 'Map';\n    }).forEach(function(r) {\n        for (var i = 0; i < r.rules.length; i++) {\n            var key = r.rules[i].name;\n            if (!(key in symbolizers)) {\n                env.error({\n                    message: 'Rule ' + key + ' not allowed for Map.',\n                    index: r.rules[i].index\n                });\n            }\n            rules[key] = r.rules[i].ev(env).toXML(env);\n        }\n    });\n    return rules;\n}\n\nmodule.exports = carto;\nmodule.exports.addRules = addRules;\nmodule.exports.inheritDefinitions = inheritDefinitions;\nmodule.exports.sortStyles = sortStyles;\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./../../../webpack/buildin/global.js */ 3)))//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 84 */
/* no static exports found */
/* all exports used */
/*!******************************************!*\
  !*** ./~/carto/lib/carto/renderer_js.js ***!
  \******************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global) {(function(carto) {\nvar tree = __webpack_require__(/*! ./tree */ 0);\nvar _ = global._ || __webpack_require__(/*! underscore */ 4);\n\n\nfunction CartoCSS(style, options) {\n  this.options = options || {};\n  this.imageURLs = [];\n  if(style) {\n    this.setStyle(style);\n  }\n}\n\nCartoCSS.Layer = function(shader, options) {\n  this.options = options;\n  this.shader = shader;\n};\n\n\nCartoCSS.Layer.prototype = {\n\n  fullName: function() {\n    return this.shader.attachment;\n  },\n\n  name: function() {\n    return this.fullName().split('::')[0];\n  },\n\n  // frames this layer need to be rendered\n  frames: function() {\n    return this.shader.frames;\n  },\n\n  attachment: function() {\n    return this.fullName().split('::')[1];\n  },\n\n  eval: function(prop) {\n    var p = this.shader[prop];\n    if (!p || !p.style) return;\n    return p.style({}, { zoom: 0, 'frame-offset': 0 });\n  },\n\n  /*\n   * `props`: feature properties\n   * `context`: rendering properties, i.e zoom\n   */\n  getStyle: function(props, context) {\n    var style = {};\n    for(var i in this.shader) {\n      if(i !== 'attachment' && i !== 'zoom' && i !== 'frames' && i !== 'symbolizers') {\n        style[i] = this.shader[i].style(props, context);\n      }\n    }\n    return style;\n  },\n\n  /**\n   * return the symbolizers that need to be rendered with\n   * this style. The order is the rendering order.\n   * @returns a list with 3 possible values 'line', 'marker', 'polygon'\n   */\n  getSymbolizers: function() {\n    return this.shader.symbolizers;\n  },\n\n  /**\n   * returns if the style varies with some feature property.\n   * Useful to optimize rendering\n   */\n  isVariable: function() {\n    for(var i in this.shader) {\n      if(i !== 'attachment' && i !== 'zoom' && i !== 'frames' && i !== 'symbolizers') {\n        if (!this.shader[i].constant) {\n          return true;\n        }\n      }\n    }\n    return false;\n  },\n\n  getShader: function() {\n    return this.shader;\n  },\n\n  /**\n   * returns true if a feature needs to be rendered\n   */\n  filter: function(featureType, props, context) {\n    for(var i in this.shader) {\n     var s = this.shader[i](props, context);\n     if(s) {\n       return true;\n     }\n    }\n    return false;\n  },\n\n  //\n  // given a geoemtry type returns the transformed one acording the CartoCSS\n  // For points there are two kind of types: point and sprite, the first one\n  // is a circle, second one is an image sprite\n  //\n  // the other geometry types are the same than geojson (polygon, linestring...)\n  //\n  transformGeometry: function(type) {\n    return type;\n  },\n\n  transformGeometries: function(geojson) {\n    return geojson;\n  }\n\n};\n\nCartoCSS.prototype = {\n\n  setStyle: function(style) {\n    var layers = this.parse(style);\n    if(!layers) {\n      throw new Error(this.parse_env.errors);\n    }\n    this.layers = layers.map(function(shader) {\n        return new CartoCSS.Layer(shader);\n    });\n  },\n\n  getLayers: function() {\n    return this.layers;\n  },\n\n  getDefault: function() {\n    return this.findLayer({ attachment: '__default__' });\n  },\n\n  findLayer: function(where) {\n    return _.find(this.layers, function(value) {\n      for (var key in where) {\n        var v = value[key];\n        if (typeof(v) === 'function') {\n          v = v.call(value);\n        }\n        if (where[key] !== v) return false;\n      }\n      return true;\n    });\n  },\n\n  _createFn: function(ops) {\n    var body = ops.join('\\n');\n    if(this.options.debug) console.log(body);\n    return Function(\"data\",\"ctx\", \"var _value = null; \" +  body + \"; return _value; \");\n  },\n\n  _compile: function(shader) {\n    if(typeof shader === 'string') {\n        shader = eval(\"(function() { return \" + shader +\"; })()\");\n    }\n    this.shader_src = shader;\n    for(var attr in shader) {\n        var c = mapper[attr];\n        if(c) {\n            this.compiled[c] = eval(\"(function() { return shader[attr]; })();\");\n        }\n    }\n  },\n  getImageURLs: function(){\n    return this.imageURLs;\n  },\n\n  parse: function(cartocss) {\n    var parse_env = {\n      frames: [],\n      errors: [],\n      error: function(obj) {\n        this.errors.push(obj);\n      }\n    };\n    this.parse_env = parse_env;\n\n    var ruleset = null;\n    try {\n      ruleset = (new carto.Parser(parse_env)).parse(cartocss);\n    } catch(e) {\n      // add the style.mss string to match the response from the server\n      parse_env.errors.push(e.message);\n      return;\n    }\n    if(ruleset) {\n\n      function defKey(def) {\n        return def.elements[0] + \"::\" + def.attachment;\n      }\n      var defs = ruleset.toList(parse_env);\n      defs.reverse();\n      // group by elements[0].value::attachment\n      var layers = {};\n      for(var i = 0; i < defs.length; ++i) {\n        var def = defs[i];\n        var key = defKey(def);\n        var layer = layers[key] = (layers[key] || {\n          symbolizers: []\n        });\n\n        for(var u = 0; u<def.rules.length; u++){\n          var rule = def.rules[u];\n            if(rule.name === \"marker-file\" || rule.name === \"point-file\"){\n              var value = rule.value.value[0].value[0].value.value;\n              this.imageURLs.push(value);\n            }\n        }\n\n        layer.frames = [];\n        layer.zoom = tree.Zoom.all;\n        var props = def.toJS(parse_env);\n        if (this.options.debug) console.log(\"props\", props);\n        for(var v in props) {\n          var lyr = layer[v] = layer[v] || {\n            constant: false,\n            symbolizer: null,\n            js: [],\n            index: 0\n          };\n          // build javascript statements\n          lyr.js.push(props[v].map(function(a) { return a.js; }).join('\\n'));\n          // get symbolizer for prop\n          lyr.symbolizer = _.first(props[v].map(function(a) { return a.symbolizer; }));\n          // serach the max index to know rendering order\n          lyr.index = _.max(props[v].map(function(a) { return a.index; }).concat(lyr.index));\n          lyr.constant = !_.any(props[v].map(function(a) { return !a.constant; }));\n        }\n      }\n\n      var ordered_layers = [];\n      if (this.options.debug) console.log(layers);\n\n      var done = {};\n      for(var i = 0; i < defs.length; ++i) {\n        var def = defs[i];\n\n        if (this.options.strict) {\n          def.toXML(parse_env, {});\n          if (parse_env.errors.message) {\n            throw new Error(parse_env.errors.message);\n          }\n        }\n\n        var k = defKey(def);\n        var layer = layers[k];\n        if(!done[k]) {\n          if(this.options.debug) console.log(\"**\", k);\n          for(var prop in layer) {\n            if (prop !== 'zoom' && prop !== 'frames' && prop !== 'symbolizers') {\n              if(this.options.debug) console.log(\"*\", prop);\n              layer[prop].style = this._createFn(layer[prop].js);\n              layer.symbolizers.push(layer[prop].symbolizer);\n              layer.symbolizers = _.uniq(layer.symbolizers);\n            }\n          }\n          layer.attachment = k;\n          ordered_layers.push(layer);\n          done[k] = true;\n        }\n        layer.zoom |= def.zoom;\n        layer.frames.push(def.frame_offset);\n      }\n\n      // uniq the frames\n      for(i = 0; i < ordered_layers.length; ++i) {\n        ordered_layers[i].frames = _.uniq(ordered_layers[i].frames);\n      }\n\n      return ordered_layers;\n\n    }\n    return null;\n  }\n};\n\n\ncarto.RendererJS = function (options) {\n    this.options = options || {};\n    this.options.mapnik_version = this.options.mapnik_version || 'latest';\n    this.reference = this.options.reference || __webpack_require__(/*! ./torque-reference */ 69).version.latest;\n    this.options.strict = this.options.hasOwnProperty('strict') ? this.options.strict : false;\n};\n\n// Prepare a javascript object which contains the layers\ncarto.RendererJS.prototype.render = function render(cartocss, callback) {\n    tree.Reference.setData(this.reference);\n    return new CartoCSS(cartocss, this.options);\n}\n\nif(true) {\n  module.exports = carto.RendererJS;\n}\n\n\n})(__webpack_require__(/*! ../carto */ 27));\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./../../../webpack/buildin/global.js */ 3)))//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODQuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NhcnRvL2xpYi9jYXJ0by9yZW5kZXJlcl9qcy5qcz81YzM5Il0sInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbihjYXJ0bykge1xudmFyIHRyZWUgPSByZXF1aXJlKCcuL3RyZWUnKTtcbnZhciBfID0gZ2xvYmFsLl8gfHwgcmVxdWlyZSgndW5kZXJzY29yZScpO1xuXG5cbmZ1bmN0aW9uIENhcnRvQ1NTKHN0eWxlLCBvcHRpb25zKSB7XG4gIHRoaXMub3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIHRoaXMuaW1hZ2VVUkxzID0gW107XG4gIGlmKHN0eWxlKSB7XG4gICAgdGhpcy5zZXRTdHlsZShzdHlsZSk7XG4gIH1cbn1cblxuQ2FydG9DU1MuTGF5ZXIgPSBmdW5jdGlvbihzaGFkZXIsIG9wdGlvbnMpIHtcbiAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgdGhpcy5zaGFkZXIgPSBzaGFkZXI7XG59O1xuXG5cbkNhcnRvQ1NTLkxheWVyLnByb3RvdHlwZSA9IHtcblxuICBmdWxsTmFtZTogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuc2hhZGVyLmF0dGFjaG1lbnQ7XG4gIH0sXG5cbiAgbmFtZTogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuZnVsbE5hbWUoKS5zcGxpdCgnOjonKVswXTtcbiAgfSxcblxuICAvLyBmcmFtZXMgdGhpcyBsYXllciBuZWVkIHRvIGJlIHJlbmRlcmVkXG4gIGZyYW1lczogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuc2hhZGVyLmZyYW1lcztcbiAgfSxcblxuICBhdHRhY2htZW50OiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5mdWxsTmFtZSgpLnNwbGl0KCc6OicpWzFdO1xuICB9LFxuXG4gIGV2YWw6IGZ1bmN0aW9uKHByb3ApIHtcbiAgICB2YXIgcCA9IHRoaXMuc2hhZGVyW3Byb3BdO1xuICAgIGlmICghcCB8fCAhcC5zdHlsZSkgcmV0dXJuO1xuICAgIHJldHVybiBwLnN0eWxlKHt9LCB7IHpvb206IDAsICdmcmFtZS1vZmZzZXQnOiAwIH0pO1xuICB9LFxuXG4gIC8qXG4gICAqIGBwcm9wc2A6IGZlYXR1cmUgcHJvcGVydGllc1xuICAgKiBgY29udGV4dGA6IHJlbmRlcmluZyBwcm9wZXJ0aWVzLCBpLmUgem9vbVxuICAgKi9cbiAgZ2V0U3R5bGU6IGZ1bmN0aW9uKHByb3BzLCBjb250ZXh0KSB7XG4gICAgdmFyIHN0eWxlID0ge307XG4gICAgZm9yKHZhciBpIGluIHRoaXMuc2hhZGVyKSB7XG4gICAgICBpZihpICE9PSAnYXR0YWNobWVudCcgJiYgaSAhPT0gJ3pvb20nICYmIGkgIT09ICdmcmFtZXMnICYmIGkgIT09ICdzeW1ib2xpemVycycpIHtcbiAgICAgICAgc3R5bGVbaV0gPSB0aGlzLnNoYWRlcltpXS5zdHlsZShwcm9wcywgY29udGV4dCk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBzdHlsZTtcbiAgfSxcblxuICAvKipcbiAgICogcmV0dXJuIHRoZSBzeW1ib2xpemVycyB0aGF0IG5lZWQgdG8gYmUgcmVuZGVyZWQgd2l0aFxuICAgKiB0aGlzIHN0eWxlLiBUaGUgb3JkZXIgaXMgdGhlIHJlbmRlcmluZyBvcmRlci5cbiAgICogQHJldHVybnMgYSBsaXN0IHdpdGggMyBwb3NzaWJsZSB2YWx1ZXMgJ2xpbmUnLCAnbWFya2VyJywgJ3BvbHlnb24nXG4gICAqL1xuICBnZXRTeW1ib2xpemVyczogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuc2hhZGVyLnN5bWJvbGl6ZXJzO1xuICB9LFxuXG4gIC8qKlxuICAgKiByZXR1cm5zIGlmIHRoZSBzdHlsZSB2YXJpZXMgd2l0aCBzb21lIGZlYXR1cmUgcHJvcGVydHkuXG4gICAqIFVzZWZ1bCB0byBvcHRpbWl6ZSByZW5kZXJpbmdcbiAgICovXG4gIGlzVmFyaWFibGU6IGZ1bmN0aW9uKCkge1xuICAgIGZvcih2YXIgaSBpbiB0aGlzLnNoYWRlcikge1xuICAgICAgaWYoaSAhPT0gJ2F0dGFjaG1lbnQnICYmIGkgIT09ICd6b29tJyAmJiBpICE9PSAnZnJhbWVzJyAmJiBpICE9PSAnc3ltYm9saXplcnMnKSB7XG4gICAgICAgIGlmICghdGhpcy5zaGFkZXJbaV0uY29uc3RhbnQpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH0sXG5cbiAgZ2V0U2hhZGVyOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5zaGFkZXI7XG4gIH0sXG5cbiAgLyoqXG4gICAqIHJldHVybnMgdHJ1ZSBpZiBhIGZlYXR1cmUgbmVlZHMgdG8gYmUgcmVuZGVyZWRcbiAgICovXG4gIGZpbHRlcjogZnVuY3Rpb24oZmVhdHVyZVR5cGUsIHByb3BzLCBjb250ZXh0KSB7XG4gICAgZm9yKHZhciBpIGluIHRoaXMuc2hhZGVyKSB7XG4gICAgIHZhciBzID0gdGhpcy5zaGFkZXJbaV0ocHJvcHMsIGNvbnRleHQpO1xuICAgICBpZihzKSB7XG4gICAgICAgcmV0dXJuIHRydWU7XG4gICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9LFxuXG4gIC8vXG4gIC8vIGdpdmVuIGEgZ2VvZW10cnkgdHlwZSByZXR1cm5zIHRoZSB0cmFuc2Zvcm1lZCBvbmUgYWNvcmRpbmcgdGhlIENhcnRvQ1NTXG4gIC8vIEZvciBwb2ludHMgdGhlcmUgYXJlIHR3byBraW5kIG9mIHR5cGVzOiBwb2ludCBhbmQgc3ByaXRlLCB0aGUgZmlyc3Qgb25lXG4gIC8vIGlzIGEgY2lyY2xlLCBzZWNvbmQgb25lIGlzIGFuIGltYWdlIHNwcml0ZVxuICAvL1xuICAvLyB0aGUgb3RoZXIgZ2VvbWV0cnkgdHlwZXMgYXJlIHRoZSBzYW1lIHRoYW4gZ2VvanNvbiAocG9seWdvbiwgbGluZXN0cmluZy4uLilcbiAgLy9cbiAgdHJhbnNmb3JtR2VvbWV0cnk6IGZ1bmN0aW9uKHR5cGUpIHtcbiAgICByZXR1cm4gdHlwZTtcbiAgfSxcblxuICB0cmFuc2Zvcm1HZW9tZXRyaWVzOiBmdW5jdGlvbihnZW9qc29uKSB7XG4gICAgcmV0dXJuIGdlb2pzb247XG4gIH1cblxufTtcblxuQ2FydG9DU1MucHJvdG90eXBlID0ge1xuXG4gIHNldFN0eWxlOiBmdW5jdGlvbihzdHlsZSkge1xuICAgIHZhciBsYXllcnMgPSB0aGlzLnBhcnNlKHN0eWxlKTtcbiAgICBpZighbGF5ZXJzKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IodGhpcy5wYXJzZV9lbnYuZXJyb3JzKTtcbiAgICB9XG4gICAgdGhpcy5sYXllcnMgPSBsYXllcnMubWFwKGZ1bmN0aW9uKHNoYWRlcikge1xuICAgICAgICByZXR1cm4gbmV3IENhcnRvQ1NTLkxheWVyKHNoYWRlcik7XG4gICAgfSk7XG4gIH0sXG5cbiAgZ2V0TGF5ZXJzOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5sYXllcnM7XG4gIH0sXG5cbiAgZ2V0RGVmYXVsdDogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuZmluZExheWVyKHsgYXR0YWNobWVudDogJ19fZGVmYXVsdF9fJyB9KTtcbiAgfSxcblxuICBmaW5kTGF5ZXI6IGZ1bmN0aW9uKHdoZXJlKSB7XG4gICAgcmV0dXJuIF8uZmluZCh0aGlzLmxheWVycywgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIGZvciAodmFyIGtleSBpbiB3aGVyZSkge1xuICAgICAgICB2YXIgdiA9IHZhbHVlW2tleV07XG4gICAgICAgIGlmICh0eXBlb2YodikgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICB2ID0gdi5jYWxsKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAod2hlcmVba2V5XSAhPT0gdikgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSk7XG4gIH0sXG5cbiAgX2NyZWF0ZUZuOiBmdW5jdGlvbihvcHMpIHtcbiAgICB2YXIgYm9keSA9IG9wcy5qb2luKCdcXG4nKTtcbiAgICBpZih0aGlzLm9wdGlvbnMuZGVidWcpIGNvbnNvbGUubG9nKGJvZHkpO1xuICAgIHJldHVybiBGdW5jdGlvbihcImRhdGFcIixcImN0eFwiLCBcInZhciBfdmFsdWUgPSBudWxsOyBcIiArICBib2R5ICsgXCI7IHJldHVybiBfdmFsdWU7IFwiKTtcbiAgfSxcblxuICBfY29tcGlsZTogZnVuY3Rpb24oc2hhZGVyKSB7XG4gICAgaWYodHlwZW9mIHNoYWRlciA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgc2hhZGVyID0gZXZhbChcIihmdW5jdGlvbigpIHsgcmV0dXJuIFwiICsgc2hhZGVyICtcIjsgfSkoKVwiKTtcbiAgICB9XG4gICAgdGhpcy5zaGFkZXJfc3JjID0gc2hhZGVyO1xuICAgIGZvcih2YXIgYXR0ciBpbiBzaGFkZXIpIHtcbiAgICAgICAgdmFyIGMgPSBtYXBwZXJbYXR0cl07XG4gICAgICAgIGlmKGMpIHtcbiAgICAgICAgICAgIHRoaXMuY29tcGlsZWRbY10gPSBldmFsKFwiKGZ1bmN0aW9uKCkgeyByZXR1cm4gc2hhZGVyW2F0dHJdOyB9KSgpO1wiKTtcbiAgICAgICAgfVxuICAgIH1cbiAgfSxcbiAgZ2V0SW1hZ2VVUkxzOiBmdW5jdGlvbigpe1xuICAgIHJldHVybiB0aGlzLmltYWdlVVJMcztcbiAgfSxcblxuICBwYXJzZTogZnVuY3Rpb24oY2FydG9jc3MpIHtcbiAgICB2YXIgcGFyc2VfZW52ID0ge1xuICAgICAgZnJhbWVzOiBbXSxcbiAgICAgIGVycm9yczogW10sXG4gICAgICBlcnJvcjogZnVuY3Rpb24ob2JqKSB7XG4gICAgICAgIHRoaXMuZXJyb3JzLnB1c2gob2JqKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHRoaXMucGFyc2VfZW52ID0gcGFyc2VfZW52O1xuXG4gICAgdmFyIHJ1bGVzZXQgPSBudWxsO1xuICAgIHRyeSB7XG4gICAgICBydWxlc2V0ID0gKG5ldyBjYXJ0by5QYXJzZXIocGFyc2VfZW52KSkucGFyc2UoY2FydG9jc3MpO1xuICAgIH0gY2F0Y2goZSkge1xuICAgICAgLy8gYWRkIHRoZSBzdHlsZS5tc3Mgc3RyaW5nIHRvIG1hdGNoIHRoZSByZXNwb25zZSBmcm9tIHRoZSBzZXJ2ZXJcbiAgICAgIHBhcnNlX2Vudi5lcnJvcnMucHVzaChlLm1lc3NhZ2UpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZihydWxlc2V0KSB7XG5cbiAgICAgIGZ1bmN0aW9uIGRlZktleShkZWYpIHtcbiAgICAgICAgcmV0dXJuIGRlZi5lbGVtZW50c1swXSArIFwiOjpcIiArIGRlZi5hdHRhY2htZW50O1xuICAgICAgfVxuICAgICAgdmFyIGRlZnMgPSBydWxlc2V0LnRvTGlzdChwYXJzZV9lbnYpO1xuICAgICAgZGVmcy5yZXZlcnNlKCk7XG4gICAgICAvLyBncm91cCBieSBlbGVtZW50c1swXS52YWx1ZTo6YXR0YWNobWVudFxuICAgICAgdmFyIGxheWVycyA9IHt9O1xuICAgICAgZm9yKHZhciBpID0gMDsgaSA8IGRlZnMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgdmFyIGRlZiA9IGRlZnNbaV07XG4gICAgICAgIHZhciBrZXkgPSBkZWZLZXkoZGVmKTtcbiAgICAgICAgdmFyIGxheWVyID0gbGF5ZXJzW2tleV0gPSAobGF5ZXJzW2tleV0gfHwge1xuICAgICAgICAgIHN5bWJvbGl6ZXJzOiBbXVxuICAgICAgICB9KTtcblxuICAgICAgICBmb3IodmFyIHUgPSAwOyB1PGRlZi5ydWxlcy5sZW5ndGg7IHUrKyl7XG4gICAgICAgICAgdmFyIHJ1bGUgPSBkZWYucnVsZXNbdV07XG4gICAgICAgICAgICBpZihydWxlLm5hbWUgPT09IFwibWFya2VyLWZpbGVcIiB8fCBydWxlLm5hbWUgPT09IFwicG9pbnQtZmlsZVwiKXtcbiAgICAgICAgICAgICAgdmFyIHZhbHVlID0gcnVsZS52YWx1ZS52YWx1ZVswXS52YWx1ZVswXS52YWx1ZS52YWx1ZTtcbiAgICAgICAgICAgICAgdGhpcy5pbWFnZVVSTHMucHVzaCh2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBsYXllci5mcmFtZXMgPSBbXTtcbiAgICAgICAgbGF5ZXIuem9vbSA9IHRyZWUuWm9vbS5hbGw7XG4gICAgICAgIHZhciBwcm9wcyA9IGRlZi50b0pTKHBhcnNlX2Vudik7XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuZGVidWcpIGNvbnNvbGUubG9nKFwicHJvcHNcIiwgcHJvcHMpO1xuICAgICAgICBmb3IodmFyIHYgaW4gcHJvcHMpIHtcbiAgICAgICAgICB2YXIgbHlyID0gbGF5ZXJbdl0gPSBsYXllclt2XSB8fCB7XG4gICAgICAgICAgICBjb25zdGFudDogZmFsc2UsXG4gICAgICAgICAgICBzeW1ib2xpemVyOiBudWxsLFxuICAgICAgICAgICAganM6IFtdLFxuICAgICAgICAgICAgaW5kZXg6IDBcbiAgICAgICAgICB9O1xuICAgICAgICAgIC8vIGJ1aWxkIGphdmFzY3JpcHQgc3RhdGVtZW50c1xuICAgICAgICAgIGx5ci5qcy5wdXNoKHByb3BzW3ZdLm1hcChmdW5jdGlvbihhKSB7IHJldHVybiBhLmpzOyB9KS5qb2luKCdcXG4nKSk7XG4gICAgICAgICAgLy8gZ2V0IHN5bWJvbGl6ZXIgZm9yIHByb3BcbiAgICAgICAgICBseXIuc3ltYm9saXplciA9IF8uZmlyc3QocHJvcHNbdl0ubWFwKGZ1bmN0aW9uKGEpIHsgcmV0dXJuIGEuc3ltYm9saXplcjsgfSkpO1xuICAgICAgICAgIC8vIHNlcmFjaCB0aGUgbWF4IGluZGV4IHRvIGtub3cgcmVuZGVyaW5nIG9yZGVyXG4gICAgICAgICAgbHlyLmluZGV4ID0gXy5tYXgocHJvcHNbdl0ubWFwKGZ1bmN0aW9uKGEpIHsgcmV0dXJuIGEuaW5kZXg7IH0pLmNvbmNhdChseXIuaW5kZXgpKTtcbiAgICAgICAgICBseXIuY29uc3RhbnQgPSAhXy5hbnkocHJvcHNbdl0ubWFwKGZ1bmN0aW9uKGEpIHsgcmV0dXJuICFhLmNvbnN0YW50OyB9KSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdmFyIG9yZGVyZWRfbGF5ZXJzID0gW107XG4gICAgICBpZiAodGhpcy5vcHRpb25zLmRlYnVnKSBjb25zb2xlLmxvZyhsYXllcnMpO1xuXG4gICAgICB2YXIgZG9uZSA9IHt9O1xuICAgICAgZm9yKHZhciBpID0gMDsgaSA8IGRlZnMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgdmFyIGRlZiA9IGRlZnNbaV07XG5cbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5zdHJpY3QpIHtcbiAgICAgICAgICBkZWYudG9YTUwocGFyc2VfZW52LCB7fSk7XG4gICAgICAgICAgaWYgKHBhcnNlX2Vudi5lcnJvcnMubWVzc2FnZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKHBhcnNlX2Vudi5lcnJvcnMubWVzc2FnZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGsgPSBkZWZLZXkoZGVmKTtcbiAgICAgICAgdmFyIGxheWVyID0gbGF5ZXJzW2tdO1xuICAgICAgICBpZighZG9uZVtrXSkge1xuICAgICAgICAgIGlmKHRoaXMub3B0aW9ucy5kZWJ1ZykgY29uc29sZS5sb2coXCIqKlwiLCBrKTtcbiAgICAgICAgICBmb3IodmFyIHByb3AgaW4gbGF5ZXIpIHtcbiAgICAgICAgICAgIGlmIChwcm9wICE9PSAnem9vbScgJiYgcHJvcCAhPT0gJ2ZyYW1lcycgJiYgcHJvcCAhPT0gJ3N5bWJvbGl6ZXJzJykge1xuICAgICAgICAgICAgICBpZih0aGlzLm9wdGlvbnMuZGVidWcpIGNvbnNvbGUubG9nKFwiKlwiLCBwcm9wKTtcbiAgICAgICAgICAgICAgbGF5ZXJbcHJvcF0uc3R5bGUgPSB0aGlzLl9jcmVhdGVGbihsYXllcltwcm9wXS5qcyk7XG4gICAgICAgICAgICAgIGxheWVyLnN5bWJvbGl6ZXJzLnB1c2gobGF5ZXJbcHJvcF0uc3ltYm9saXplcik7XG4gICAgICAgICAgICAgIGxheWVyLnN5bWJvbGl6ZXJzID0gXy51bmlxKGxheWVyLnN5bWJvbGl6ZXJzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgbGF5ZXIuYXR0YWNobWVudCA9IGs7XG4gICAgICAgICAgb3JkZXJlZF9sYXllcnMucHVzaChsYXllcik7XG4gICAgICAgICAgZG9uZVtrXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgbGF5ZXIuem9vbSB8PSBkZWYuem9vbTtcbiAgICAgICAgbGF5ZXIuZnJhbWVzLnB1c2goZGVmLmZyYW1lX29mZnNldCk7XG4gICAgICB9XG5cbiAgICAgIC8vIHVuaXEgdGhlIGZyYW1lc1xuICAgICAgZm9yKGkgPSAwOyBpIDwgb3JkZXJlZF9sYXllcnMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgb3JkZXJlZF9sYXllcnNbaV0uZnJhbWVzID0gXy51bmlxKG9yZGVyZWRfbGF5ZXJzW2ldLmZyYW1lcyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBvcmRlcmVkX2xheWVycztcblxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxufTtcblxuXG5jYXJ0by5SZW5kZXJlckpTID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgIHRoaXMub3B0aW9ucy5tYXBuaWtfdmVyc2lvbiA9IHRoaXMub3B0aW9ucy5tYXBuaWtfdmVyc2lvbiB8fCAnbGF0ZXN0JztcbiAgICB0aGlzLnJlZmVyZW5jZSA9IHRoaXMub3B0aW9ucy5yZWZlcmVuY2UgfHwgcmVxdWlyZSgnLi90b3JxdWUtcmVmZXJlbmNlJykudmVyc2lvbi5sYXRlc3Q7XG4gICAgdGhpcy5vcHRpb25zLnN0cmljdCA9IHRoaXMub3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgnc3RyaWN0JykgPyB0aGlzLm9wdGlvbnMuc3RyaWN0IDogZmFsc2U7XG59O1xuXG4vLyBQcmVwYXJlIGEgamF2YXNjcmlwdCBvYmplY3Qgd2hpY2ggY29udGFpbnMgdGhlIGxheWVyc1xuY2FydG8uUmVuZGVyZXJKUy5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKGNhcnRvY3NzLCBjYWxsYmFjaykge1xuICAgIHRyZWUuUmVmZXJlbmNlLnNldERhdGEodGhpcy5yZWZlcmVuY2UpO1xuICAgIHJldHVybiBuZXcgQ2FydG9DU1MoY2FydG9jc3MsIHRoaXMub3B0aW9ucyk7XG59XG5cbmlmKHR5cGVvZihtb2R1bGUpICE9PSAndW5kZWZpbmVkJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IGNhcnRvLlJlbmRlcmVySlM7XG59XG5cblxufSkocmVxdWlyZSgnLi4vY2FydG8nKSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY2FydG8vbGliL2NhcnRvL3JlbmRlcmVyX2pzLmpzXG4vLyBtb2R1bGUgaWQgPSA4NFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QSIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 85 */
/* no static exports found */
/* all exports used */
/*!****************************************!*\
  !*** ./~/carto/lib/carto/tree/call.js ***!
  \****************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global) {(function(tree) {\nvar _ = global._ || __webpack_require__(/*! underscore */ 4);\ntree.Call = function Call(name, args, index) {\n    this.name = name;\n    this.args = args;\n    this.index = index;\n};\n\ntree.Call.prototype = {\n    is: 'call',\n    // When evuating a function call,\n    // we either find the function in `tree.functions` [1],\n    // in which case we call it, passing the  evaluated arguments,\n    // or we simply print it out as it appeared originally [2].\n    // The *functions.js* file contains the built-in functions.\n    // The reason why we evaluate the arguments, is in the case where\n    // we try to pass a variable to a function, like: `saturate(@color)`.\n    // The function should receive the value, not the variable.\n    'ev': function(env) {\n        var args = this.args.map(function(a) { return a.ev(env); });\n\n        for (var i = 0; i < args.length; i++) {\n            if (args[i].is === 'undefined') {\n                return {\n                    is: 'undefined',\n                    value: 'undefined'\n                };\n            }\n        }\n\n        if (this.name in tree.functions) {\n            if (tree.functions[this.name].length <= args.length) {\n                var val = tree.functions[this.name].apply(tree.functions, args);\n                if (val === null) {\n                    env.error({\n                        message: 'incorrect arguments given to ' + this.name + '()',\n                        index: this.index,\n                        type: 'runtime',\n                        filename: this.filename\n                    });\n                    return { is: 'undefined', value: 'undefined' };\n                }\n                return val;\n            } else {\n                env.error({\n                    message: 'incorrect number of arguments for ' + this.name +\n                        '(). ' + tree.functions[this.name].length + ' expected.',\n                    index: this.index,\n                    type: 'runtime',\n                    filename: this.filename\n                });\n                return {\n                    is: 'undefined',\n                    value: 'undefined'\n                };\n            }\n        } else {\n            var fn = tree.Reference.mapnikFunctions[this.name];\n            if (fn === undefined) {\n                var functions = _.pairs(tree.Reference.mapnikFunctions);\n                // cheap closest, needs improvement.\n                var name = this.name;\n                var mean = functions.map(function(f) {\n                    return [f[0], tree.Reference.editDistance(name, f[0]), f[1]];\n                }).sort(function(a, b) {\n                    return a[1] - b[1];\n                });\n                env.error({\n                    message: 'unknown function ' + this.name + '(), did you mean ' +\n                        mean[0][0] + '(' + mean[0][2] + ')',\n                    index: this.index,\n                    type: 'runtime',\n                    filename: this.filename\n                });\n                return {\n                    is: 'undefined',\n                    value: 'undefined'\n                };\n            }\n            if (fn !== args.length &&\n                !(Array.isArray(fn) && _.include(fn, args.length)) &&\n                // support variable-arg functions like `colorize-alpha`\n                fn !== -1) {\n                env.error({\n                    message: 'function ' + this.name + '() takes ' +\n                        fn + ' arguments and was given ' + args.length,\n                    index: this.index,\n                    type: 'runtime',\n                    filename: this.filename\n                });\n                return {\n                    is: 'undefined',\n                    value: 'undefined'\n                };\n            } else {\n                // Save the evaluated versions of arguments\n                this.args = args;\n                return this;\n            }\n        }\n    },\n\n    toString: function(env, format) {\n        if (this.args.length) {\n            return this.name + '(' + this.args.join(',') + ')';\n        } else {\n            return this.name;\n        }\n    }\n};\n\n})(__webpack_require__(/*! ../tree */ 0));\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./../../../../webpack/buildin/global.js */ 3)))//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODUuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NhcnRvL2xpYi9jYXJ0by90cmVlL2NhbGwuanM/ODkwMCJdLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24odHJlZSkge1xudmFyIF8gPSBnbG9iYWwuXyB8fCByZXF1aXJlKCd1bmRlcnNjb3JlJyk7XG50cmVlLkNhbGwgPSBmdW5jdGlvbiBDYWxsKG5hbWUsIGFyZ3MsIGluZGV4KSB7XG4gICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICB0aGlzLmFyZ3MgPSBhcmdzO1xuICAgIHRoaXMuaW5kZXggPSBpbmRleDtcbn07XG5cbnRyZWUuQ2FsbC5wcm90b3R5cGUgPSB7XG4gICAgaXM6ICdjYWxsJyxcbiAgICAvLyBXaGVuIGV2dWF0aW5nIGEgZnVuY3Rpb24gY2FsbCxcbiAgICAvLyB3ZSBlaXRoZXIgZmluZCB0aGUgZnVuY3Rpb24gaW4gYHRyZWUuZnVuY3Rpb25zYCBbMV0sXG4gICAgLy8gaW4gd2hpY2ggY2FzZSB3ZSBjYWxsIGl0LCBwYXNzaW5nIHRoZSAgZXZhbHVhdGVkIGFyZ3VtZW50cyxcbiAgICAvLyBvciB3ZSBzaW1wbHkgcHJpbnQgaXQgb3V0IGFzIGl0IGFwcGVhcmVkIG9yaWdpbmFsbHkgWzJdLlxuICAgIC8vIFRoZSAqZnVuY3Rpb25zLmpzKiBmaWxlIGNvbnRhaW5zIHRoZSBidWlsdC1pbiBmdW5jdGlvbnMuXG4gICAgLy8gVGhlIHJlYXNvbiB3aHkgd2UgZXZhbHVhdGUgdGhlIGFyZ3VtZW50cywgaXMgaW4gdGhlIGNhc2Ugd2hlcmVcbiAgICAvLyB3ZSB0cnkgdG8gcGFzcyBhIHZhcmlhYmxlIHRvIGEgZnVuY3Rpb24sIGxpa2U6IGBzYXR1cmF0ZShAY29sb3IpYC5cbiAgICAvLyBUaGUgZnVuY3Rpb24gc2hvdWxkIHJlY2VpdmUgdGhlIHZhbHVlLCBub3QgdGhlIHZhcmlhYmxlLlxuICAgICdldic6IGZ1bmN0aW9uKGVudikge1xuICAgICAgICB2YXIgYXJncyA9IHRoaXMuYXJncy5tYXAoZnVuY3Rpb24oYSkgeyByZXR1cm4gYS5ldihlbnYpOyB9KTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChhcmdzW2ldLmlzID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIGlzOiAndW5kZWZpbmVkJyxcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICd1bmRlZmluZWQnXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLm5hbWUgaW4gdHJlZS5mdW5jdGlvbnMpIHtcbiAgICAgICAgICAgIGlmICh0cmVlLmZ1bmN0aW9uc1t0aGlzLm5hbWVdLmxlbmd0aCA8PSBhcmdzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHZhciB2YWwgPSB0cmVlLmZ1bmN0aW9uc1t0aGlzLm5hbWVdLmFwcGx5KHRyZWUuZnVuY3Rpb25zLCBhcmdzKTtcbiAgICAgICAgICAgICAgICBpZiAodmFsID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGVudi5lcnJvcih7XG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAnaW5jb3JyZWN0IGFyZ3VtZW50cyBnaXZlbiB0byAnICsgdGhpcy5uYW1lICsgJygpJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4OiB0aGlzLmluZGV4LFxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ3J1bnRpbWUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgZmlsZW5hbWU6IHRoaXMuZmlsZW5hbWVcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7IGlzOiAndW5kZWZpbmVkJywgdmFsdWU6ICd1bmRlZmluZWQnIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiB2YWw7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGVudi5lcnJvcih7XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdpbmNvcnJlY3QgbnVtYmVyIG9mIGFyZ3VtZW50cyBmb3IgJyArIHRoaXMubmFtZSArXG4gICAgICAgICAgICAgICAgICAgICAgICAnKCkuICcgKyB0cmVlLmZ1bmN0aW9uc1t0aGlzLm5hbWVdLmxlbmd0aCArICcgZXhwZWN0ZWQuJyxcbiAgICAgICAgICAgICAgICAgICAgaW5kZXg6IHRoaXMuaW5kZXgsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdydW50aW1lJyxcbiAgICAgICAgICAgICAgICAgICAgZmlsZW5hbWU6IHRoaXMuZmlsZW5hbWVcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBpczogJ3VuZGVmaW5lZCcsXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiAndW5kZWZpbmVkJ1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgZm4gPSB0cmVlLlJlZmVyZW5jZS5tYXBuaWtGdW5jdGlvbnNbdGhpcy5uYW1lXTtcbiAgICAgICAgICAgIGlmIChmbiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgdmFyIGZ1bmN0aW9ucyA9IF8ucGFpcnModHJlZS5SZWZlcmVuY2UubWFwbmlrRnVuY3Rpb25zKTtcbiAgICAgICAgICAgICAgICAvLyBjaGVhcCBjbG9zZXN0LCBuZWVkcyBpbXByb3ZlbWVudC5cbiAgICAgICAgICAgICAgICB2YXIgbmFtZSA9IHRoaXMubmFtZTtcbiAgICAgICAgICAgICAgICB2YXIgbWVhbiA9IGZ1bmN0aW9ucy5tYXAoZnVuY3Rpb24oZikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gW2ZbMF0sIHRyZWUuUmVmZXJlbmNlLmVkaXREaXN0YW5jZShuYW1lLCBmWzBdKSwgZlsxXV07XG4gICAgICAgICAgICAgICAgfSkuc29ydChmdW5jdGlvbihhLCBiKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBhWzFdIC0gYlsxXTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBlbnYuZXJyb3Ioe1xuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAndW5rbm93biBmdW5jdGlvbiAnICsgdGhpcy5uYW1lICsgJygpLCBkaWQgeW91IG1lYW4gJyArXG4gICAgICAgICAgICAgICAgICAgICAgICBtZWFuWzBdWzBdICsgJygnICsgbWVhblswXVsyXSArICcpJyxcbiAgICAgICAgICAgICAgICAgICAgaW5kZXg6IHRoaXMuaW5kZXgsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdydW50aW1lJyxcbiAgICAgICAgICAgICAgICAgICAgZmlsZW5hbWU6IHRoaXMuZmlsZW5hbWVcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBpczogJ3VuZGVmaW5lZCcsXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiAndW5kZWZpbmVkJ1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZm4gIT09IGFyZ3MubGVuZ3RoICYmXG4gICAgICAgICAgICAgICAgIShBcnJheS5pc0FycmF5KGZuKSAmJiBfLmluY2x1ZGUoZm4sIGFyZ3MubGVuZ3RoKSkgJiZcbiAgICAgICAgICAgICAgICAvLyBzdXBwb3J0IHZhcmlhYmxlLWFyZyBmdW5jdGlvbnMgbGlrZSBgY29sb3JpemUtYWxwaGFgXG4gICAgICAgICAgICAgICAgZm4gIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgZW52LmVycm9yKHtcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogJ2Z1bmN0aW9uICcgKyB0aGlzLm5hbWUgKyAnKCkgdGFrZXMgJyArXG4gICAgICAgICAgICAgICAgICAgICAgICBmbiArICcgYXJndW1lbnRzIGFuZCB3YXMgZ2l2ZW4gJyArIGFyZ3MubGVuZ3RoLFxuICAgICAgICAgICAgICAgICAgICBpbmRleDogdGhpcy5pbmRleCxcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ3J1bnRpbWUnLFxuICAgICAgICAgICAgICAgICAgICBmaWxlbmFtZTogdGhpcy5maWxlbmFtZVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIGlzOiAndW5kZWZpbmVkJyxcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICd1bmRlZmluZWQnXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gU2F2ZSB0aGUgZXZhbHVhdGVkIHZlcnNpb25zIG9mIGFyZ3VtZW50c1xuICAgICAgICAgICAgICAgIHRoaXMuYXJncyA9IGFyZ3M7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgdG9TdHJpbmc6IGZ1bmN0aW9uKGVudiwgZm9ybWF0KSB7XG4gICAgICAgIGlmICh0aGlzLmFyZ3MubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5uYW1lICsgJygnICsgdGhpcy5hcmdzLmpvaW4oJywnKSArICcpJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm5hbWU7XG4gICAgICAgIH1cbiAgICB9XG59O1xuXG59KShyZXF1aXJlKCcuLi90cmVlJykpO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NhcnRvL2xpYi9jYXJ0by90cmVlL2NhbGwuanNcbi8vIG1vZHVsZSBpZCA9IDg1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0EiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 86 */
/* no static exports found */
/* all exports used */
/*!*****************************************!*\
  !*** ./~/carto/lib/carto/tree/color.js ***!
  \*****************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("(function(tree) {\n// RGB Colors - #ff0014, #eee\n// can be initialized with a 3 or 6 char string or a 3 or 4 element\n// numerical array\ntree.Color = function Color(rgb, a) {\n    // The end goal here, is to parse the arguments\n    // into an integer triplet, such as `128, 255, 0`\n    //\n    // This facilitates operations and conversions.\n    if (Array.isArray(rgb)) {\n        this.rgb = rgb.slice(0, 3);\n    } else if (rgb.length == 6) {\n        this.rgb = rgb.match(/.{2}/g).map(function(c) {\n            return parseInt(c, 16);\n        });\n    } else {\n        this.rgb = rgb.split('').map(function(c) {\n            return parseInt(c + c, 16);\n        });\n    }\n\n    if (typeof(a) === 'number') {\n        this.alpha = a;\n    } else if (rgb.length === 4) {\n        this.alpha = rgb[3];\n    } else {\n        this.alpha = 1;\n    }\n};\n\ntree.Color.prototype = {\n    is: 'color',\n    'ev': function() { return this; },\n\n    // If we have some transparency, the only way to represent it\n    // is via `rgba`. Otherwise, we use the hex representation,\n    // which has better compatibility with older browsers.\n    // Values are capped between `0` and `255`, rounded and zero-padded.\n    toString: function() {\n        if (this.alpha < 1.0) {\n            return 'rgba(' + this.rgb.map(function(c) {\n                return Math.round(c);\n            }).concat(this.alpha).join(', ') + ')';\n        } else {\n            return '#' + this.rgb.map(function(i) {\n                i = Math.round(i);\n                i = (i > 255 ? 255 : (i < 0 ? 0 : i)).toString(16);\n                return i.length === 1 ? '0' + i : i;\n            }).join('');\n        }\n    },\n\n    // Operations have to be done per-channel, if not,\n    // channels will spill onto each other. Once we have\n    // our result, in the form of an integer triplet,\n    // we create a new Color node to hold the result.\n    operate: function(env, op, other) {\n        var result = [];\n\n        if (! (other instanceof tree.Color)) {\n            other = other.toColor();\n        }\n\n        for (var c = 0; c < 3; c++) {\n            result[c] = tree.operate(op, this.rgb[c], other.rgb[c]);\n        }\n        return new tree.Color(result);\n    },\n\n    toHSL: function() {\n        var r = this.rgb[0] / 255,\n            g = this.rgb[1] / 255,\n            b = this.rgb[2] / 255,\n            a = this.alpha;\n\n        var max = Math.max(r, g, b), min = Math.min(r, g, b);\n        var h, s, l = (max + min) / 2, d = max - min;\n\n        if (max === min) {\n            h = s = 0;\n        } else {\n            s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n\n            switch (max) {\n                case r: h = (g - b) / d + (g < b ? 6 : 0); break;\n                case g: h = (b - r) / d + 2; break;\n                case b: h = (r - g) / d + 4; break;\n            }\n            h /= 6;\n        }\n        return { h: h * 360, s: s, l: l, a: a };\n    }\n};\n\n})(__webpack_require__(/*! ../tree */ 0));\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODYuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NhcnRvL2xpYi9jYXJ0by90cmVlL2NvbG9yLmpzP2JjZjIiXSwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uKHRyZWUpIHtcbi8vIFJHQiBDb2xvcnMgLSAjZmYwMDE0LCAjZWVlXG4vLyBjYW4gYmUgaW5pdGlhbGl6ZWQgd2l0aCBhIDMgb3IgNiBjaGFyIHN0cmluZyBvciBhIDMgb3IgNCBlbGVtZW50XG4vLyBudW1lcmljYWwgYXJyYXlcbnRyZWUuQ29sb3IgPSBmdW5jdGlvbiBDb2xvcihyZ2IsIGEpIHtcbiAgICAvLyBUaGUgZW5kIGdvYWwgaGVyZSwgaXMgdG8gcGFyc2UgdGhlIGFyZ3VtZW50c1xuICAgIC8vIGludG8gYW4gaW50ZWdlciB0cmlwbGV0LCBzdWNoIGFzIGAxMjgsIDI1NSwgMGBcbiAgICAvL1xuICAgIC8vIFRoaXMgZmFjaWxpdGF0ZXMgb3BlcmF0aW9ucyBhbmQgY29udmVyc2lvbnMuXG4gICAgaWYgKEFycmF5LmlzQXJyYXkocmdiKSkge1xuICAgICAgICB0aGlzLnJnYiA9IHJnYi5zbGljZSgwLCAzKTtcbiAgICB9IGVsc2UgaWYgKHJnYi5sZW5ndGggPT0gNikge1xuICAgICAgICB0aGlzLnJnYiA9IHJnYi5tYXRjaCgvLnsyfS9nKS5tYXAoZnVuY3Rpb24oYykge1xuICAgICAgICAgICAgcmV0dXJuIHBhcnNlSW50KGMsIDE2KTtcbiAgICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5yZ2IgPSByZ2Iuc3BsaXQoJycpLm1hcChmdW5jdGlvbihjKSB7XG4gICAgICAgICAgICByZXR1cm4gcGFyc2VJbnQoYyArIGMsIDE2KTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZihhKSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgdGhpcy5hbHBoYSA9IGE7XG4gICAgfSBlbHNlIGlmIChyZ2IubGVuZ3RoID09PSA0KSB7XG4gICAgICAgIHRoaXMuYWxwaGEgPSByZ2JbM107XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5hbHBoYSA9IDE7XG4gICAgfVxufTtcblxudHJlZS5Db2xvci5wcm90b3R5cGUgPSB7XG4gICAgaXM6ICdjb2xvcicsXG4gICAgJ2V2JzogZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9LFxuXG4gICAgLy8gSWYgd2UgaGF2ZSBzb21lIHRyYW5zcGFyZW5jeSwgdGhlIG9ubHkgd2F5IHRvIHJlcHJlc2VudCBpdFxuICAgIC8vIGlzIHZpYSBgcmdiYWAuIE90aGVyd2lzZSwgd2UgdXNlIHRoZSBoZXggcmVwcmVzZW50YXRpb24sXG4gICAgLy8gd2hpY2ggaGFzIGJldHRlciBjb21wYXRpYmlsaXR5IHdpdGggb2xkZXIgYnJvd3NlcnMuXG4gICAgLy8gVmFsdWVzIGFyZSBjYXBwZWQgYmV0d2VlbiBgMGAgYW5kIGAyNTVgLCByb3VuZGVkIGFuZCB6ZXJvLXBhZGRlZC5cbiAgICB0b1N0cmluZzogZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICh0aGlzLmFscGhhIDwgMS4wKSB7XG4gICAgICAgICAgICByZXR1cm4gJ3JnYmEoJyArIHRoaXMucmdiLm1hcChmdW5jdGlvbihjKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIE1hdGgucm91bmQoYyk7XG4gICAgICAgICAgICB9KS5jb25jYXQodGhpcy5hbHBoYSkuam9pbignLCAnKSArICcpJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiAnIycgKyB0aGlzLnJnYi5tYXAoZnVuY3Rpb24oaSkge1xuICAgICAgICAgICAgICAgIGkgPSBNYXRoLnJvdW5kKGkpO1xuICAgICAgICAgICAgICAgIGkgPSAoaSA+IDI1NSA/IDI1NSA6IChpIDwgMCA/IDAgOiBpKSkudG9TdHJpbmcoMTYpO1xuICAgICAgICAgICAgICAgIHJldHVybiBpLmxlbmd0aCA9PT0gMSA/ICcwJyArIGkgOiBpO1xuICAgICAgICAgICAgfSkuam9pbignJyk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgLy8gT3BlcmF0aW9ucyBoYXZlIHRvIGJlIGRvbmUgcGVyLWNoYW5uZWwsIGlmIG5vdCxcbiAgICAvLyBjaGFubmVscyB3aWxsIHNwaWxsIG9udG8gZWFjaCBvdGhlci4gT25jZSB3ZSBoYXZlXG4gICAgLy8gb3VyIHJlc3VsdCwgaW4gdGhlIGZvcm0gb2YgYW4gaW50ZWdlciB0cmlwbGV0LFxuICAgIC8vIHdlIGNyZWF0ZSBhIG5ldyBDb2xvciBub2RlIHRvIGhvbGQgdGhlIHJlc3VsdC5cbiAgICBvcGVyYXRlOiBmdW5jdGlvbihlbnYsIG9wLCBvdGhlcikge1xuICAgICAgICB2YXIgcmVzdWx0ID0gW107XG5cbiAgICAgICAgaWYgKCEgKG90aGVyIGluc3RhbmNlb2YgdHJlZS5Db2xvcikpIHtcbiAgICAgICAgICAgIG90aGVyID0gb3RoZXIudG9Db2xvcigpO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yICh2YXIgYyA9IDA7IGMgPCAzOyBjKyspIHtcbiAgICAgICAgICAgIHJlc3VsdFtjXSA9IHRyZWUub3BlcmF0ZShvcCwgdGhpcy5yZ2JbY10sIG90aGVyLnJnYltjXSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyB0cmVlLkNvbG9yKHJlc3VsdCk7XG4gICAgfSxcblxuICAgIHRvSFNMOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHIgPSB0aGlzLnJnYlswXSAvIDI1NSxcbiAgICAgICAgICAgIGcgPSB0aGlzLnJnYlsxXSAvIDI1NSxcbiAgICAgICAgICAgIGIgPSB0aGlzLnJnYlsyXSAvIDI1NSxcbiAgICAgICAgICAgIGEgPSB0aGlzLmFscGhhO1xuXG4gICAgICAgIHZhciBtYXggPSBNYXRoLm1heChyLCBnLCBiKSwgbWluID0gTWF0aC5taW4ociwgZywgYik7XG4gICAgICAgIHZhciBoLCBzLCBsID0gKG1heCArIG1pbikgLyAyLCBkID0gbWF4IC0gbWluO1xuXG4gICAgICAgIGlmIChtYXggPT09IG1pbikge1xuICAgICAgICAgICAgaCA9IHMgPSAwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcyA9IGwgPiAwLjUgPyBkIC8gKDIgLSBtYXggLSBtaW4pIDogZCAvIChtYXggKyBtaW4pO1xuXG4gICAgICAgICAgICBzd2l0Y2ggKG1heCkge1xuICAgICAgICAgICAgICAgIGNhc2UgcjogaCA9IChnIC0gYikgLyBkICsgKGcgPCBiID8gNiA6IDApOyBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIGc6IGggPSAoYiAtIHIpIC8gZCArIDI7IGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgYjogaCA9IChyIC0gZykgLyBkICsgNDsgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBoIC89IDY7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgaDogaCAqIDM2MCwgczogcywgbDogbCwgYTogYSB9O1xuICAgIH1cbn07XG5cbn0pKHJlcXVpcmUoJy4uL3RyZWUnKSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY2FydG8vbGliL2NhcnRvL3RyZWUvY29sb3IuanNcbi8vIG1vZHVsZSBpZCA9IDg2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 87 */
/* no static exports found */
/* all exports used */
/*!*******************************************!*\
  !*** ./~/carto/lib/carto/tree/comment.js ***!
  \*******************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("(function(tree) {\n\ntree.Comment = function Comment(value, silent) {\n    this.value = value;\n    this.silent = !!silent;\n};\n\ntree.Comment.prototype = {\n    toString: function(env) {\n        return '<!--' + this.value + '-->';\n    },\n    'ev': function() { return this; }\n};\n\n})(__webpack_require__(/*! ../tree */ 0));\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODcuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NhcnRvL2xpYi9jYXJ0by90cmVlL2NvbW1lbnQuanM/Y2QzNCJdLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24odHJlZSkge1xuXG50cmVlLkNvbW1lbnQgPSBmdW5jdGlvbiBDb21tZW50KHZhbHVlLCBzaWxlbnQpIHtcbiAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgdGhpcy5zaWxlbnQgPSAhIXNpbGVudDtcbn07XG5cbnRyZWUuQ29tbWVudC5wcm90b3R5cGUgPSB7XG4gICAgdG9TdHJpbmc6IGZ1bmN0aW9uKGVudikge1xuICAgICAgICByZXR1cm4gJzwhLS0nICsgdGhpcy52YWx1ZSArICctLT4nO1xuICAgIH0sXG4gICAgJ2V2JzogZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9XG59O1xuXG59KShyZXF1aXJlKCcuLi90cmVlJykpO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NhcnRvL2xpYi9jYXJ0by90cmVlL2NvbW1lbnQuanNcbi8vIG1vZHVsZSBpZCA9IDg3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 88 */
/* no static exports found */
/* all exports used */
/*!**********************************************!*\
  !*** ./~/carto/lib/carto/tree/definition.js ***!
  \**********************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global) {(function(tree) {\nvar assert = __webpack_require__(/*! assert */ 71),\n    _ = global._ || __webpack_require__(/*! underscore */ 4);\n\n// A definition is the combination of a selector and rules, like\n// #foo {\n//     polygon-opacity:1.0;\n// }\n//\n// The selector can have filters\ntree.Definition = function Definition(selector, rules) {\n    this.elements = selector.elements;\n    assert.ok(selector.filters instanceof tree.Filterset);\n    this.rules = rules;\n    this.ruleIndex = {};\n    for (var i = 0; i < this.rules.length; i++) {\n        if ('zoom' in this.rules[i]) this.rules[i] = this.rules[i].clone();\n        this.rules[i].zoom = selector.zoom;\n        this.ruleIndex[this.rules[i].updateID()] = true;\n    }\n    this.filters = selector.filters;\n    this.zoom = selector.zoom;\n    this.frame_offset = selector.frame_offset;\n    this.attachment = selector.attachment || '__default__';\n    this.specificity = selector.specificity();\n};\n\ntree.Definition.prototype.toString = function() {\n    var str = this.filters.toString();\n    for (var i = 0; i < this.rules.length; i++) {\n        str += '\\n    ' + this.rules[i];\n    }\n    return str;\n};\n\ntree.Definition.prototype.clone = function(filters) {\n    if (filters) assert.ok(filters instanceof tree.Filterset);\n    var clone = Object.create(tree.Definition.prototype);\n    clone.rules = this.rules.slice();\n    clone.ruleIndex = _.clone(this.ruleIndex);\n    clone.filters = filters ? filters : this.filters.clone();\n    clone.attachment = this.attachment;\n    return clone;\n};\n\ntree.Definition.prototype.addRules = function(rules) {\n    var added = 0;\n\n    // Add only unique rules.\n    for (var i = 0; i < rules.length; i++) {\n        if (!this.ruleIndex[rules[i].id]) {\n            this.rules.push(rules[i]);\n            this.ruleIndex[rules[i].id] = true;\n            added++;\n        }\n    }\n\n    return added;\n};\n\n// Determine whether this selector matches a given id\n// and array of classes, by determining whether\n// all elements it contains match.\ntree.Definition.prototype.appliesTo = function(id, classes) {\n    for (var i = 0, l = this.elements.length; i < l; i++) {\n        var elem = this.elements[i];\n        if (!(elem.wildcard ||\n            (elem.type === 'class' && classes[elem.clean]) ||\n            (elem.type === 'id' && id === elem.clean))) return false;\n    }\n    return true;\n};\n\nfunction symbolizerName(symbolizer) {\n    function capitalize(str) { return str[1].toUpperCase(); }\n    return symbolizer.charAt(0).toUpperCase() +\n           symbolizer.slice(1).replace(/\\-./, capitalize) + 'Symbolizer';\n}\n\n// Get a simple list of the symbolizers, in order\nfunction symbolizerList(sym_order) {\n    return sym_order.sort(function(a, b) { return a[1] - b[1]; })\n        .map(function(v) { return v[0]; });\n}\n\ntree.Definition.prototype.symbolizersToXML = function(env, symbolizers, zoom) {\n    var xml = zoom.toXML(env).join('') + this.filters.toXML(env);\n\n    // Sort symbolizers by the index of their first property definition\n    var sym_order = [], indexes = [];\n    for (var key in symbolizers) {\n        indexes = [];\n        for (var prop in symbolizers[key]) {\n            indexes.push(symbolizers[key][prop].index);\n        }\n        var min_idx = Math.min.apply(Math, indexes);\n        sym_order.push([key, min_idx]);\n    }\n\n    sym_order = symbolizerList(sym_order);\n    var sym_count = 0;\n\n    for (var i = 0; i < sym_order.length; i++) {\n        var attributes = symbolizers[sym_order[i]];\n        var symbolizer = sym_order[i].split('/').pop();\n\n        // Skip the magical * symbolizer which is used for universal properties\n        // which are bubbled up to Style elements intead of Symbolizer elements.\n        if (symbolizer === '*') continue;\n        sym_count++;\n\n        var fail = tree.Reference.requiredProperties(symbolizer, attributes);\n        if (fail) {\n            var rule = attributes[Object.keys(attributes).shift()];\n            env.error({\n                message: fail,\n                index: rule.index,\n                filename: rule.filename\n            });\n        }\n\n        var name = symbolizerName(symbolizer);\n\n        var selfclosing = true, tagcontent;\n        xml += '    <' + name + ' ';\n        for (var j in attributes) {\n            if (symbolizer === 'map') env.error({\n                message: 'Map properties are not permitted in other rules',\n                index: attributes[j].index,\n                filename: attributes[j].filename\n            });\n            var x = tree.Reference.selector(attributes[j].name);\n            if (x && x.serialization && x.serialization === 'content') {\n                selfclosing = false;\n                tagcontent = attributes[j].ev(env).toXML(env, true);\n            } else if (x && x.serialization && x.serialization === 'tag') {\n                selfclosing = false;\n                tagcontent = attributes[j].ev(env).toXML(env, true);\n            } else {\n                xml += attributes[j].ev(env).toXML(env) + ' ';\n            }\n        }\n        if (selfclosing) {\n            xml += '/>\\n';\n        } else if (typeof tagcontent !== \"undefined\") {\n            if (tagcontent.indexOf('<') != -1) {\n                xml += '>' + tagcontent + '</' + name + '>\\n';\n            } else {\n                xml += '><![CDATA[' + tagcontent + ']]></' + name + '>\\n';\n            }\n        }\n    }\n    if (!sym_count || !xml) return '';\n    return '  <Rule>\\n' + xml + '  </Rule>\\n';\n};\n\n// Take a zoom range of zooms and 'i', the index of a rule in this.rules,\n// and finds all applicable symbolizers\ntree.Definition.prototype.collectSymbolizers = function(zooms, i) {\n    var symbolizers = {}, child;\n\n    for (var j = i; j < this.rules.length; j++) {\n        child = this.rules[j];\n        var key = child.instance + '/' + child.symbolizer;\n        if (zooms.current & child.zoom &&\n           (!(key in symbolizers) ||\n           (!(child.name in symbolizers[key])))) {\n            zooms.current &= child.zoom;\n            if (!(key in symbolizers)) {\n                symbolizers[key] = {};\n            }\n            symbolizers[key][child.name] = child;\n        }\n    }\n\n    if (Object.keys(symbolizers).length) {\n        zooms.rule &= (zooms.available &= ~zooms.current);\n        return symbolizers;\n    }\n};\n\n// The tree.Zoom.toString function ignores the holes in zoom ranges and outputs\n// scaledenominators that cover the whole range from the first to last bit set.\n// This algorithm can produces zoom ranges that may have holes. However,\n// when using the filter-mode=\"first\", more specific zoom filters will always\n// end up before broader ranges. The filter-mode will pick those first before\n// resorting to the zoom range with the hole and stop processing further rules.\ntree.Definition.prototype.toXML = function(env, existing) {\n    var filter = this.filters.toString();\n    if (!(filter in existing)) existing[filter] = tree.Zoom.all;\n\n    var available = tree.Zoom.all, xml = '', zoom, symbolizers,\n        zooms = { available: tree.Zoom.all };\n    for (var i = 0; i < this.rules.length && available; i++) {\n        zooms.rule = this.rules[i].zoom;\n        if (!(existing[filter] & zooms.rule)) continue;\n\n        while (zooms.current = zooms.rule & available) {\n            if (symbolizers = this.collectSymbolizers(zooms, i)) {\n                if (!(existing[filter] & zooms.current)) continue;\n                xml += this.symbolizersToXML(env, symbolizers,\n                    (new tree.Zoom()).setZoom(existing[filter] & zooms.current));\n                existing[filter] &= ~zooms.current;\n            }\n        }\n    }\n\n    return xml;\n};\n\ntree.Definition.prototype.toJS = function(env) {\n  var shaderAttrs = {};\n\n  // merge conditions from filters with zoom condition of the\n  // definition\n  var zoom = \"(\" + this.zoom + \" & (1 << ctx.zoom))\";\n  var frame_offset = this.frame_offset;\n  var _if = this.filters.toJS(env);\n  var filters = [zoom];\n  if(_if) filters.push(_if);\n  if(frame_offset) filters.push('ctx[\"frame-offset\"] === ' + frame_offset);\n  _if = filters.join(\" && \");\n  _.each(this.rules, function(rule) {\n      if(rule instanceof tree.Rule) {\n        shaderAttrs[rule.name] = shaderAttrs[rule.name] || [];\n\n        var r = {\n          index: rule.index,\n          symbolizer: rule.symbolizer\n        };\n\n        if (_if) {\n          r.js = \"if(\" + _if + \"){\" + rule.value.toJS(env) + \"}\"\n        } else {\n          r.js = rule.value.toJS(env);\n        }\n\n        r.constant = rule.value.ev(env).is !== 'field';\n        r.filtered = !!_if;\n\n        shaderAttrs[rule.name].push(r);\n      } else {\n        throw new Error(\"Ruleset not supported\");\n        //if (rule instanceof tree.Ruleset) {\n          //var sh = rule.toJS(env);\n          //for(var v in sh) {\n            //shaderAttrs[v] = shaderAttrs[v] || [];\n            //for(var attr in sh[v]) {\n              //shaderAttrs[v].push(sh[v][attr]);\n            //}\n          //}\n        //}\n      }\n  });\n  return shaderAttrs;\n};\n\n\n})(__webpack_require__(/*! ../tree */ 0));\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./../../../../webpack/buildin/global.js */ 3)))//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 89 */
/* no static exports found */
/* all exports used */
/*!*********************************************!*\
  !*** ./~/carto/lib/carto/tree/dimension.js ***!
  \*********************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global) {(function(tree) {\nvar _ = global._ || __webpack_require__(/*! underscore */ 4);\n//\n// A number with a unit\n//\ntree.Dimension = function Dimension(value, unit, index) {\n    this.value = parseFloat(value);\n    this.unit = unit || null;\n    this.index = index;\n};\n\ntree.Dimension.prototype = {\n    is: 'float',\n    physical_units: ['m', 'cm', 'in', 'mm', 'pt', 'pc'],\n    screen_units: ['px', '%'],\n    all_units: ['m', 'cm', 'in', 'mm', 'pt', 'pc', 'px', '%'],\n    densities: {\n        m: 0.0254,\n        mm: 25.4,\n        cm: 2.54,\n        pt: 72,\n        pc: 6\n    },\n    ev: function (env) {\n        if (this.unit && !_.contains(this.all_units, this.unit)) {\n            env.error({\n                message: \"Invalid unit: '\" + this.unit + \"'\",\n                index: this.index\n            });\n            return { is: 'undefined', value: 'undefined' };\n        }\n\n        // normalize units which are not px or %\n        if (this.unit && _.contains(this.physical_units, this.unit)) {\n            if (!env.ppi) {\n                env.error({\n                    message: \"ppi is not set, so metric units can't be used\",\n                    index: this.index\n                });\n                return { is: 'undefined', value: 'undefined' };\n            }\n            // convert all units to inch\n            // convert inch to px using ppi\n            this.value = (this.value / this.densities[this.unit]) * env.ppi;\n            this.unit = 'px';\n        }\n\n        return this;\n    },\n    round: function() {\n        this.value = Math.round(this.value);\n        return this;\n    },\n    toColor: function() {\n        return new tree.Color([this.value, this.value, this.value]);\n    },\n    round: function() {\n        this.value = Math.round(this.value);\n        return this;\n    },\n    toString: function() {\n        return this.value.toString();\n    },\n    operate: function(env, op, other) {\n        if (this.unit === '%' && other.unit !== '%') {\n            env.error({\n                message: 'If two operands differ, the first must not be %',\n                index: this.index\n            });\n            return {\n                is: 'undefined',\n                value: 'undefined'\n            };\n        }\n\n        if (this.unit !== '%' && other.unit === '%') {\n            if (op === '*' || op === '/' || op === '%') {\n                env.error({\n                    message: 'Percent values can only be added or subtracted from other values',\n                    index: this.index\n                });\n                return {\n                    is: 'undefined',\n                    value: 'undefined'\n                };\n            }\n\n            return new tree.Dimension(tree.operate(op,\n                    this.value, this.value * other.value * 0.01),\n                this.unit);\n        }\n\n        //here the operands are either the same (% or undefined or px), or one is undefined and the other is px\n        return new tree.Dimension(tree.operate(op, this.value, other.value),\n            this.unit || other.unit);\n    }\n};\n\n})(__webpack_require__(/*! ../tree */ 0));\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./../../../../webpack/buildin/global.js */ 3)))//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODkuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NhcnRvL2xpYi9jYXJ0by90cmVlL2RpbWVuc2lvbi5qcz9jYmU4Il0sInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbih0cmVlKSB7XG52YXIgXyA9IGdsb2JhbC5fIHx8IHJlcXVpcmUoJ3VuZGVyc2NvcmUnKTtcbi8vXG4vLyBBIG51bWJlciB3aXRoIGEgdW5pdFxuLy9cbnRyZWUuRGltZW5zaW9uID0gZnVuY3Rpb24gRGltZW5zaW9uKHZhbHVlLCB1bml0LCBpbmRleCkge1xuICAgIHRoaXMudmFsdWUgPSBwYXJzZUZsb2F0KHZhbHVlKTtcbiAgICB0aGlzLnVuaXQgPSB1bml0IHx8IG51bGw7XG4gICAgdGhpcy5pbmRleCA9IGluZGV4O1xufTtcblxudHJlZS5EaW1lbnNpb24ucHJvdG90eXBlID0ge1xuICAgIGlzOiAnZmxvYXQnLFxuICAgIHBoeXNpY2FsX3VuaXRzOiBbJ20nLCAnY20nLCAnaW4nLCAnbW0nLCAncHQnLCAncGMnXSxcbiAgICBzY3JlZW5fdW5pdHM6IFsncHgnLCAnJSddLFxuICAgIGFsbF91bml0czogWydtJywgJ2NtJywgJ2luJywgJ21tJywgJ3B0JywgJ3BjJywgJ3B4JywgJyUnXSxcbiAgICBkZW5zaXRpZXM6IHtcbiAgICAgICAgbTogMC4wMjU0LFxuICAgICAgICBtbTogMjUuNCxcbiAgICAgICAgY206IDIuNTQsXG4gICAgICAgIHB0OiA3MixcbiAgICAgICAgcGM6IDZcbiAgICB9LFxuICAgIGV2OiBmdW5jdGlvbiAoZW52KSB7XG4gICAgICAgIGlmICh0aGlzLnVuaXQgJiYgIV8uY29udGFpbnModGhpcy5hbGxfdW5pdHMsIHRoaXMudW5pdCkpIHtcbiAgICAgICAgICAgIGVudi5lcnJvcih7XG4gICAgICAgICAgICAgICAgbWVzc2FnZTogXCJJbnZhbGlkIHVuaXQ6ICdcIiArIHRoaXMudW5pdCArIFwiJ1wiLFxuICAgICAgICAgICAgICAgIGluZGV4OiB0aGlzLmluZGV4XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiB7IGlzOiAndW5kZWZpbmVkJywgdmFsdWU6ICd1bmRlZmluZWQnIH07XG4gICAgICAgIH1cblxuICAgICAgICAvLyBub3JtYWxpemUgdW5pdHMgd2hpY2ggYXJlIG5vdCBweCBvciAlXG4gICAgICAgIGlmICh0aGlzLnVuaXQgJiYgXy5jb250YWlucyh0aGlzLnBoeXNpY2FsX3VuaXRzLCB0aGlzLnVuaXQpKSB7XG4gICAgICAgICAgICBpZiAoIWVudi5wcGkpIHtcbiAgICAgICAgICAgICAgICBlbnYuZXJyb3Ioe1xuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBcInBwaSBpcyBub3Qgc2V0LCBzbyBtZXRyaWMgdW5pdHMgY2FuJ3QgYmUgdXNlZFwiLFxuICAgICAgICAgICAgICAgICAgICBpbmRleDogdGhpcy5pbmRleFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybiB7IGlzOiAndW5kZWZpbmVkJywgdmFsdWU6ICd1bmRlZmluZWQnIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBjb252ZXJ0IGFsbCB1bml0cyB0byBpbmNoXG4gICAgICAgICAgICAvLyBjb252ZXJ0IGluY2ggdG8gcHggdXNpbmcgcHBpXG4gICAgICAgICAgICB0aGlzLnZhbHVlID0gKHRoaXMudmFsdWUgLyB0aGlzLmRlbnNpdGllc1t0aGlzLnVuaXRdKSAqIGVudi5wcGk7XG4gICAgICAgICAgICB0aGlzLnVuaXQgPSAncHgnO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcbiAgICByb3VuZDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMudmFsdWUgPSBNYXRoLnJvdW5kKHRoaXMudmFsdWUpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuICAgIHRvQ29sb3I6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gbmV3IHRyZWUuQ29sb3IoW3RoaXMudmFsdWUsIHRoaXMudmFsdWUsIHRoaXMudmFsdWVdKTtcbiAgICB9LFxuICAgIHJvdW5kOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy52YWx1ZSA9IE1hdGgucm91bmQodGhpcy52YWx1ZSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG4gICAgdG9TdHJpbmc6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy52YWx1ZS50b1N0cmluZygpO1xuICAgIH0sXG4gICAgb3BlcmF0ZTogZnVuY3Rpb24oZW52LCBvcCwgb3RoZXIpIHtcbiAgICAgICAgaWYgKHRoaXMudW5pdCA9PT0gJyUnICYmIG90aGVyLnVuaXQgIT09ICclJykge1xuICAgICAgICAgICAgZW52LmVycm9yKHtcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiAnSWYgdHdvIG9wZXJhbmRzIGRpZmZlciwgdGhlIGZpcnN0IG11c3Qgbm90IGJlICUnLFxuICAgICAgICAgICAgICAgIGluZGV4OiB0aGlzLmluZGV4XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgaXM6ICd1bmRlZmluZWQnLFxuICAgICAgICAgICAgICAgIHZhbHVlOiAndW5kZWZpbmVkJ1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLnVuaXQgIT09ICclJyAmJiBvdGhlci51bml0ID09PSAnJScpIHtcbiAgICAgICAgICAgIGlmIChvcCA9PT0gJyonIHx8IG9wID09PSAnLycgfHwgb3AgPT09ICclJykge1xuICAgICAgICAgICAgICAgIGVudi5lcnJvcih7XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdQZXJjZW50IHZhbHVlcyBjYW4gb25seSBiZSBhZGRlZCBvciBzdWJ0cmFjdGVkIGZyb20gb3RoZXIgdmFsdWVzJyxcbiAgICAgICAgICAgICAgICAgICAgaW5kZXg6IHRoaXMuaW5kZXhcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBpczogJ3VuZGVmaW5lZCcsXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiAndW5kZWZpbmVkJ1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBuZXcgdHJlZS5EaW1lbnNpb24odHJlZS5vcGVyYXRlKG9wLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLnZhbHVlLCB0aGlzLnZhbHVlICogb3RoZXIudmFsdWUgKiAwLjAxKSxcbiAgICAgICAgICAgICAgICB0aGlzLnVuaXQpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy9oZXJlIHRoZSBvcGVyYW5kcyBhcmUgZWl0aGVyIHRoZSBzYW1lICglIG9yIHVuZGVmaW5lZCBvciBweCksIG9yIG9uZSBpcyB1bmRlZmluZWQgYW5kIHRoZSBvdGhlciBpcyBweFxuICAgICAgICByZXR1cm4gbmV3IHRyZWUuRGltZW5zaW9uKHRyZWUub3BlcmF0ZShvcCwgdGhpcy52YWx1ZSwgb3RoZXIudmFsdWUpLFxuICAgICAgICAgICAgdGhpcy51bml0IHx8IG90aGVyLnVuaXQpO1xuICAgIH1cbn07XG5cbn0pKHJlcXVpcmUoJy4uL3RyZWUnKSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY2FydG8vbGliL2NhcnRvL3RyZWUvZGltZW5zaW9uLmpzXG4vLyBtb2R1bGUgaWQgPSA4OVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QSIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 90 */
/* no static exports found */
/* all exports used */
/*!*******************************************!*\
  !*** ./~/carto/lib/carto/tree/element.js ***!
  \*******************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("(function(tree) {\n\n// An element is an id or class selector\ntree.Element = function Element(value) {\n    this.value = value.trim();\n    if (this.value[0] === '#') {\n        this.type = 'id';\n        this.clean = this.value.replace(/^#/, '');\n    }\n    if (this.value[0] === '.') {\n        this.type = 'class';\n        this.clean = this.value.replace(/^\\./, '');\n    }\n    if (this.value.indexOf('*') !== -1) {\n        this.type = 'wildcard';\n    }\n};\n\n// Determine the 'specificity matrix' of this\n// specific selector\ntree.Element.prototype.specificity = function() {\n    return [\n        (this.type === 'id') ? 1 : 0, // a\n        (this.type === 'class') ? 1 : 0  // b\n    ];\n};\n\ntree.Element.prototype.toString = function() { return this.value; };\n\n})(__webpack_require__(/*! ../tree */ 0));\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTAuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NhcnRvL2xpYi9jYXJ0by90cmVlL2VsZW1lbnQuanM/MGQ1NyJdLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24odHJlZSkge1xuXG4vLyBBbiBlbGVtZW50IGlzIGFuIGlkIG9yIGNsYXNzIHNlbGVjdG9yXG50cmVlLkVsZW1lbnQgPSBmdW5jdGlvbiBFbGVtZW50KHZhbHVlKSB7XG4gICAgdGhpcy52YWx1ZSA9IHZhbHVlLnRyaW0oKTtcbiAgICBpZiAodGhpcy52YWx1ZVswXSA9PT0gJyMnKSB7XG4gICAgICAgIHRoaXMudHlwZSA9ICdpZCc7XG4gICAgICAgIHRoaXMuY2xlYW4gPSB0aGlzLnZhbHVlLnJlcGxhY2UoL14jLywgJycpO1xuICAgIH1cbiAgICBpZiAodGhpcy52YWx1ZVswXSA9PT0gJy4nKSB7XG4gICAgICAgIHRoaXMudHlwZSA9ICdjbGFzcyc7XG4gICAgICAgIHRoaXMuY2xlYW4gPSB0aGlzLnZhbHVlLnJlcGxhY2UoL15cXC4vLCAnJyk7XG4gICAgfVxuICAgIGlmICh0aGlzLnZhbHVlLmluZGV4T2YoJyonKSAhPT0gLTEpIHtcbiAgICAgICAgdGhpcy50eXBlID0gJ3dpbGRjYXJkJztcbiAgICB9XG59O1xuXG4vLyBEZXRlcm1pbmUgdGhlICdzcGVjaWZpY2l0eSBtYXRyaXgnIG9mIHRoaXNcbi8vIHNwZWNpZmljIHNlbGVjdG9yXG50cmVlLkVsZW1lbnQucHJvdG90eXBlLnNwZWNpZmljaXR5ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIFtcbiAgICAgICAgKHRoaXMudHlwZSA9PT0gJ2lkJykgPyAxIDogMCwgLy8gYVxuICAgICAgICAodGhpcy50eXBlID09PSAnY2xhc3MnKSA/IDEgOiAwICAvLyBiXG4gICAgXTtcbn07XG5cbnRyZWUuRWxlbWVudC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXMudmFsdWU7IH07XG5cbn0pKHJlcXVpcmUoJy4uL3RyZWUnKSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY2FydG8vbGliL2NhcnRvL3RyZWUvZWxlbWVudC5qc1xuLy8gbW9kdWxlIGlkID0gOTBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 91 */
/* no static exports found */
/* all exports used */
/*!**********************************************!*\
  !*** ./~/carto/lib/carto/tree/expression.js ***!
  \**********************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("(function(tree) {\n\ntree.Expression = function Expression(value) {\n    this.value = value;\n};\n\ntree.Expression.prototype = {\n    is: 'expression',\n    ev: function(env) {\n        if (this.value.length > 1) {\n            return new tree.Expression(this.value.map(function(e) {\n                return e.ev(env);\n            }));\n        } else {\n            return this.value[0].ev(env);\n        }\n    },\n\n    toString: function(env) {\n        return this.value.map(function(e) {\n            return e.toString(env);\n        }).join(' ');\n    }\n};\n\n})(__webpack_require__(/*! ../tree */ 0));\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTEuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NhcnRvL2xpYi9jYXJ0by90cmVlL2V4cHJlc3Npb24uanM/Zjg3MyJdLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24odHJlZSkge1xuXG50cmVlLkV4cHJlc3Npb24gPSBmdW5jdGlvbiBFeHByZXNzaW9uKHZhbHVlKSB7XG4gICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xufTtcblxudHJlZS5FeHByZXNzaW9uLnByb3RvdHlwZSA9IHtcbiAgICBpczogJ2V4cHJlc3Npb24nLFxuICAgIGV2OiBmdW5jdGlvbihlbnYpIHtcbiAgICAgICAgaWYgKHRoaXMudmFsdWUubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyB0cmVlLkV4cHJlc3Npb24odGhpcy52YWx1ZS5tYXAoZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBlLmV2KGVudik7XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy52YWx1ZVswXS5ldihlbnYpO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIHRvU3RyaW5nOiBmdW5jdGlvbihlbnYpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsdWUubWFwKGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgIHJldHVybiBlLnRvU3RyaW5nKGVudik7XG4gICAgICAgIH0pLmpvaW4oJyAnKTtcbiAgICB9XG59O1xuXG59KShyZXF1aXJlKCcuLi90cmVlJykpO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NhcnRvL2xpYi9jYXJ0by90cmVlL2V4cHJlc3Npb24uanNcbi8vIG1vZHVsZSBpZCA9IDkxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 92 */
/* no static exports found */
/* all exports used */
/*!*****************************************!*\
  !*** ./~/carto/lib/carto/tree/field.js ***!
  \*****************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("(function(tree) {\n\ntree.Field = function Field(content) {\n    this.value = content || '';\n};\n\ntree.Field.prototype = {\n    is: 'field',\n    toString: function() {\n        return '[' + this.value + ']';\n    },\n    'ev': function() {\n        return this;\n    }\n};\n\n})(__webpack_require__(/*! ../tree */ 0));\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTIuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NhcnRvL2xpYi9jYXJ0by90cmVlL2ZpZWxkLmpzPzczZjUiXSwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uKHRyZWUpIHtcblxudHJlZS5GaWVsZCA9IGZ1bmN0aW9uIEZpZWxkKGNvbnRlbnQpIHtcbiAgICB0aGlzLnZhbHVlID0gY29udGVudCB8fCAnJztcbn07XG5cbnRyZWUuRmllbGQucHJvdG90eXBlID0ge1xuICAgIGlzOiAnZmllbGQnLFxuICAgIHRvU3RyaW5nOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuICdbJyArIHRoaXMudmFsdWUgKyAnXSc7XG4gICAgfSxcbiAgICAnZXYnOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxufTtcblxufSkocmVxdWlyZSgnLi4vdHJlZScpKTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jYXJ0by9saWIvY2FydG8vdHJlZS9maWVsZC5qc1xuLy8gbW9kdWxlIGlkID0gOTJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 93 */
/* no static exports found */
/* all exports used */
/*!******************************************!*\
  !*** ./~/carto/lib/carto/tree/filter.js ***!
  \******************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("(function(tree) {\n\ntree.Filter = function Filter(key, op, val, index, filename) {\n    this.key = key;\n    this.op = op;\n    this.val = val;\n    this.index = index;\n    this.filename = filename;\n\n    this.id = this.key + this.op + this.val;\n};\n\n// xmlsafe, numeric, suffix\nvar ops = {\n    '<': [' &lt; ', 'numeric'],\n    '>': [' &gt; ', 'numeric'],\n    '=': [' = ', 'both'],\n    '!=': [' != ', 'both'],\n    '<=': [' &lt;= ', 'numeric'],\n    '>=': [' &gt;= ', 'numeric'],\n    '=~': ['.match(', 'string', ')']\n};\n\ntree.Filter.prototype.ev = function(env) {\n    this.key = this.key.ev(env);\n    this.val = this.val.ev(env);\n    return this;\n};\n\ntree.Filter.prototype.toXML = function(env) {\n    if (tree.Reference.data.filter) {\n        if (this.key.is === 'keyword' && -1 === tree.Reference.data.filter.value.indexOf(this.key.toString())) {\n            env.error({\n                message: this.key.toString() + ' is not a valid keyword in a filter expression',\n                index: this.index,\n                filename: this.filename\n            });\n        }\n        if (this.val.is === 'keyword' && -1 === tree.Reference.data.filter.value.indexOf(this.val.toString())) {\n            env.error({\n                message: this.val.toString() + ' is not a valid keyword in a filter expression',\n                index: this.index,\n                filename: this.filename\n            });\n        }\n    }\n    var key = this.key.toString(false);\n    var val = this.val.toString(this.val.is == 'string');\n\n    if (\n        (ops[this.op][1] == 'numeric' && isNaN(val) && this.val.is !== 'field') ||\n        (ops[this.op][1] == 'string' && (val)[0] != \"'\")\n    ) {\n        env.error({\n            message: 'Cannot use operator \"' + this.op + '\" with value ' + this.val,\n            index: this.index,\n            filename: this.filename\n        });\n    }\n\n    return key + ops[this.op][0] + val + (ops[this.op][2] || '');\n};\n\ntree.Filter.prototype.toString = function() {\n    return '[' + this.id + ']';\n};\n\n})(__webpack_require__(/*! ../tree */ 0));\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NhcnRvL2xpYi9jYXJ0by90cmVlL2ZpbHRlci5qcz83NWRlIl0sInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbih0cmVlKSB7XG5cbnRyZWUuRmlsdGVyID0gZnVuY3Rpb24gRmlsdGVyKGtleSwgb3AsIHZhbCwgaW5kZXgsIGZpbGVuYW1lKSB7XG4gICAgdGhpcy5rZXkgPSBrZXk7XG4gICAgdGhpcy5vcCA9IG9wO1xuICAgIHRoaXMudmFsID0gdmFsO1xuICAgIHRoaXMuaW5kZXggPSBpbmRleDtcbiAgICB0aGlzLmZpbGVuYW1lID0gZmlsZW5hbWU7XG5cbiAgICB0aGlzLmlkID0gdGhpcy5rZXkgKyB0aGlzLm9wICsgdGhpcy52YWw7XG59O1xuXG4vLyB4bWxzYWZlLCBudW1lcmljLCBzdWZmaXhcbnZhciBvcHMgPSB7XG4gICAgJzwnOiBbJyAmbHQ7ICcsICdudW1lcmljJ10sXG4gICAgJz4nOiBbJyAmZ3Q7ICcsICdudW1lcmljJ10sXG4gICAgJz0nOiBbJyA9ICcsICdib3RoJ10sXG4gICAgJyE9JzogWycgIT0gJywgJ2JvdGgnXSxcbiAgICAnPD0nOiBbJyAmbHQ7PSAnLCAnbnVtZXJpYyddLFxuICAgICc+PSc6IFsnICZndDs9ICcsICdudW1lcmljJ10sXG4gICAgJz1+JzogWycubWF0Y2goJywgJ3N0cmluZycsICcpJ11cbn07XG5cbnRyZWUuRmlsdGVyLnByb3RvdHlwZS5ldiA9IGZ1bmN0aW9uKGVudikge1xuICAgIHRoaXMua2V5ID0gdGhpcy5rZXkuZXYoZW52KTtcbiAgICB0aGlzLnZhbCA9IHRoaXMudmFsLmV2KGVudik7XG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG50cmVlLkZpbHRlci5wcm90b3R5cGUudG9YTUwgPSBmdW5jdGlvbihlbnYpIHtcbiAgICBpZiAodHJlZS5SZWZlcmVuY2UuZGF0YS5maWx0ZXIpIHtcbiAgICAgICAgaWYgKHRoaXMua2V5LmlzID09PSAna2V5d29yZCcgJiYgLTEgPT09IHRyZWUuUmVmZXJlbmNlLmRhdGEuZmlsdGVyLnZhbHVlLmluZGV4T2YodGhpcy5rZXkudG9TdHJpbmcoKSkpIHtcbiAgICAgICAgICAgIGVudi5lcnJvcih7XG4gICAgICAgICAgICAgICAgbWVzc2FnZTogdGhpcy5rZXkudG9TdHJpbmcoKSArICcgaXMgbm90IGEgdmFsaWQga2V5d29yZCBpbiBhIGZpbHRlciBleHByZXNzaW9uJyxcbiAgICAgICAgICAgICAgICBpbmRleDogdGhpcy5pbmRleCxcbiAgICAgICAgICAgICAgICBmaWxlbmFtZTogdGhpcy5maWxlbmFtZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMudmFsLmlzID09PSAna2V5d29yZCcgJiYgLTEgPT09IHRyZWUuUmVmZXJlbmNlLmRhdGEuZmlsdGVyLnZhbHVlLmluZGV4T2YodGhpcy52YWwudG9TdHJpbmcoKSkpIHtcbiAgICAgICAgICAgIGVudi5lcnJvcih7XG4gICAgICAgICAgICAgICAgbWVzc2FnZTogdGhpcy52YWwudG9TdHJpbmcoKSArICcgaXMgbm90IGEgdmFsaWQga2V5d29yZCBpbiBhIGZpbHRlciBleHByZXNzaW9uJyxcbiAgICAgICAgICAgICAgICBpbmRleDogdGhpcy5pbmRleCxcbiAgICAgICAgICAgICAgICBmaWxlbmFtZTogdGhpcy5maWxlbmFtZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdmFyIGtleSA9IHRoaXMua2V5LnRvU3RyaW5nKGZhbHNlKTtcbiAgICB2YXIgdmFsID0gdGhpcy52YWwudG9TdHJpbmcodGhpcy52YWwuaXMgPT0gJ3N0cmluZycpO1xuXG4gICAgaWYgKFxuICAgICAgICAob3BzW3RoaXMub3BdWzFdID09ICdudW1lcmljJyAmJiBpc05hTih2YWwpICYmIHRoaXMudmFsLmlzICE9PSAnZmllbGQnKSB8fFxuICAgICAgICAob3BzW3RoaXMub3BdWzFdID09ICdzdHJpbmcnICYmICh2YWwpWzBdICE9IFwiJ1wiKVxuICAgICkge1xuICAgICAgICBlbnYuZXJyb3Ioe1xuICAgICAgICAgICAgbWVzc2FnZTogJ0Nhbm5vdCB1c2Ugb3BlcmF0b3IgXCInICsgdGhpcy5vcCArICdcIiB3aXRoIHZhbHVlICcgKyB0aGlzLnZhbCxcbiAgICAgICAgICAgIGluZGV4OiB0aGlzLmluZGV4LFxuICAgICAgICAgICAgZmlsZW5hbWU6IHRoaXMuZmlsZW5hbWVcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGtleSArIG9wc1t0aGlzLm9wXVswXSArIHZhbCArIChvcHNbdGhpcy5vcF1bMl0gfHwgJycpO1xufTtcblxudHJlZS5GaWx0ZXIucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuICdbJyArIHRoaXMuaWQgKyAnXSc7XG59O1xuXG59KShyZXF1aXJlKCcuLi90cmVlJykpO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NhcnRvL2xpYi9jYXJ0by90cmVlL2ZpbHRlci5qc1xuLy8gbW9kdWxlIGlkID0gOTNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 94 */
/* no static exports found */
/* all exports used */
/*!*********************************************!*\
  !*** ./~/carto/lib/carto/tree/filterset.js ***!
  \*********************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global) {var tree = __webpack_require__(/*! ../tree */ 0);\nvar _ = global._ || __webpack_require__(/*! underscore */ 4);\n\ntree.Filterset = function Filterset() {\n    this.filters = {};\n};\n\ntree.Filterset.prototype.toXML = function(env) {\n    var filters = [];\n    for (var id in this.filters) {\n        filters.push('(' + this.filters[id].toXML(env).trim() + ')');\n    }\n    if (filters.length) {\n        return '    <Filter>' + filters.join(' and ') + '</Filter>\\n';\n    } else {\n        return '';\n    }\n};\n\ntree.Filterset.prototype.toString = function() {\n    var arr = [];\n    for (var id in this.filters) arr.push(this.filters[id].id);\n    return arr.sort().join('\\t');\n};\n\ntree.Filterset.prototype.ev = function(env) {\n    for (var i in this.filters) {\n        this.filters[i].ev(env);\n    }\n    return this;\n};\n\ntree.Filterset.prototype.clone = function() {\n    var clone = new tree.Filterset();\n    for (var id in this.filters) {\n        clone.filters[id] = this.filters[id];\n    }\n    return clone;\n};\n\n// Note: other has to be a tree.Filterset.\ntree.Filterset.prototype.cloneWith = function(other) {\n    var additions = [];\n    for (var id in other.filters) {\n        var status = this.addable(other.filters[id]);\n        // status is true, false or null. if it's null we don't fail this\n        // clone nor do we add the filter.\n        if (status === false) {\n            return false;\n        }\n        if (status === true) {\n            // Adding the filter will override another value.\n            additions.push(other.filters[id]);\n        }\n    }\n\n    // Adding the other filters doesn't make this filterset invalid, but it\n    // doesn't add anything to it either.\n    if (!additions.length) {\n        return null;\n    }\n\n    // We can successfully add all filters. Now clone the filterset and add the\n    // new rules.\n    var clone = new tree.Filterset();\n\n    // We can add the rules that are already present without going through the\n    // add function as a Filterset is always in it's simplest canonical form.\n    for (id in this.filters) {\n        clone.filters[id] = this.filters[id];\n    }\n\n    // Only add new filters that actually change the filter.\n    while (id = additions.shift()) {\n        clone.add(id);\n    }\n\n    return clone;\n};\n\ntree.Filterset.prototype.toJS = function(env) {\n  var opMap = {\n    '=': '==='\n  };\n  return _.map(this.filters, function(filter) {\n    var op = filter.op;\n    if(op in opMap) {\n      op = opMap[op];\n    }\n    var val = filter.val;\n    if(filter._val !== undefined) {\n      val = filter._val.toString(true);\n    }\n    var attrs = \"data\";\n    if (op === '=~') {\n      return \"(\" + attrs + \"['\" + filter.key.value  + \"'] + '').match(\" + (val.is === 'string' ? \"'\" + val.toString().replace(/'/g, \"\\\\'\") + \"'\" : val) + \")\";\n    }\n    return attrs + \"['\" + filter.key.value  + \"'] \" + op + \" \" + (val.is === 'string' ? \"'\" + val.toString().replace(/'/g, \"\\\\'\") + \"'\" : val);\n  }).join(' && ');\n};\n\n// Returns true when the new filter can be added, false otherwise.\n// It can also return null, and on the other side we test for === true or\n// false\ntree.Filterset.prototype.addable = function(filter) {\n    var key = filter.key.toString(),\n        value = filter.val.toString();\n\n    if (value.match(/^[0-9]+(\\.[0-9]*)?$/)) value = parseFloat(value);\n\n    switch (filter.op) {\n        case '=':\n            // if there is already foo= and we're adding foo=\n            if (this.filters[key + '='] !== undefined) {\n                if (this.filters[key + '='].val.toString() != value) {\n                    return false;\n                } else {\n                    return null;\n                }\n            }\n            if (this.filters[key + '!=' + value] !== undefined) return false;\n            if (this.filters[key + '>'] !== undefined && this.filters[key + '>'].val >= value) return false;\n            if (this.filters[key + '<'] !== undefined && this.filters[key + '<'].val <= value) return false;\n            if (this.filters[key + '>='] !== undefined  && this.filters[key + '>='].val > value) return false;\n            if (this.filters[key + '<='] !== undefined  && this.filters[key + '<='].val < value) return false;\n            return true;\n\n        case '=~':\n            return true;\n\n        case '!=':\n            if (this.filters[key + '='] !== undefined) return (this.filters[key + '='].val == value) ? false : null;\n            if (this.filters[key + '!=' + value] !== undefined) return null;\n            if (this.filters[key + '>'] !== undefined && this.filters[key + '>'].val >= value) return null;\n            if (this.filters[key + '<'] !== undefined && this.filters[key + '<'].val <= value) return null;\n            if (this.filters[key + '>='] !== undefined && this.filters[key + '>='].val > value) return null;\n            if (this.filters[key + '<='] !== undefined && this.filters[key + '<='].val < value) return null;\n            return true;\n\n        case '>':\n            if (key + '=' in this.filters) {\n                if (this.filters[key + '='].val <= value) {\n                    return false;\n                } else {\n                    return null;\n                }\n            }\n            if (this.filters[key + '<'] !== undefined && this.filters[key + '<'].val <= value) return false;\n            if (this.filters[key + '<='] !== undefined  && this.filters[key + '<='].val <= value) return false;\n            if (this.filters[key + '>'] !== undefined && this.filters[key + '>'].val >= value) return null;\n            if (this.filters[key + '>='] !== undefined  && this.filters[key + '>='].val > value) return null;\n            return true;\n\n        case '>=':\n            if (this.filters[key + '=' ] !== undefined) return (this.filters[key + '='].val < value) ? false : null;\n            if (this.filters[key + '<' ] !== undefined && this.filters[key + '<'].val <= value) return false;\n            if (this.filters[key + '<='] !== undefined && this.filters[key + '<='].val < value) return false;\n            if (this.filters[key + '>' ] !== undefined && this.filters[key + '>'].val >= value) return null;\n            if (this.filters[key + '>='] !== undefined && this.filters[key + '>='].val >= value) return null;\n            return true;\n\n        case '<':\n            if (this.filters[key + '=' ] !== undefined) return (this.filters[key + '='].val >= value) ? false : null;\n            if (this.filters[key + '>' ] !== undefined && this.filters[key + '>'].val >= value) return false;\n            if (this.filters[key + '>='] !== undefined && this.filters[key + '>='].val >= value) return false;\n            if (this.filters[key + '<' ] !== undefined && this.filters[key + '<'].val <= value) return null;\n            if (this.filters[key + '<='] !== undefined && this.filters[key + '<='].val < value) return null;\n            return true;\n\n        case '<=':\n            if (this.filters[key + '=' ] !== undefined) return (this.filters[key + '='].val > value) ? false : null;\n            if (this.filters[key + '>' ] !== undefined && this.filters[key + '>'].val >= value) return false;\n            if (this.filters[key + '>='] !== undefined && this.filters[key + '>='].val > value) return false;\n            if (this.filters[key + '<' ] !== undefined && this.filters[key + '<'].val <= value) return null;\n            if (this.filters[key + '<='] !== undefined && this.filters[key + '<='].val <= value) return null;\n            return true;\n    }\n};\n\n// Does the new filter constitute a conflict?\ntree.Filterset.prototype.conflict = function(filter) {\n    var key = filter.key.toString(),\n        value = filter.val.toString();\n\n    if (!isNaN(parseFloat(value))) value = parseFloat(value);\n\n    // if (a=b) && (a=c)\n    // if (a=b) && (a!=b)\n    // or (a!=b) && (a=b)\n    if ((filter.op === '=' && this.filters[key + '='] !== undefined &&\n        value != this.filters[key + '='].val.toString()) ||\n        (filter.op === '!=' && this.filters[key + '='] !== undefined &&\n        value == this.filters[key + '='].val.toString()) ||\n        (filter.op === '=' && this.filters[key + '!='] !== undefined &&\n        value == this.filters[key + '!='].val.toString())) {\n        return filter.toString() + ' added to ' + this.toString() + ' produces an invalid filter';\n    }\n\n    return false;\n};\n\n// Only call this function for filters that have been cleared by .addable().\ntree.Filterset.prototype.add = function(filter, env) {\n    var key = filter.key.toString(),\n        id,\n        op = filter.op,\n        conflict = this.conflict(filter),\n        numval;\n\n    if (conflict) return conflict;\n\n    if (op === '=') {\n        for (var i in this.filters) {\n            if (this.filters[i].key == key) delete this.filters[i];\n        }\n        this.filters[key + '='] = filter;\n    } else if (op === '!=') {\n        this.filters[key + '!=' + filter.val] = filter;\n    } else if (op === '=~') {\n        this.filters[key + '=~' + filter.val] = filter;\n    } else if (op === '>') {\n        // If there are other filters that are also >\n        // but are less than this one, they don't matter, so\n        // remove them.\n        for (var j in this.filters) {\n            if (this.filters[j].key == key && this.filters[j].val <= filter.val) {\n                delete this.filters[j];\n            }\n        }\n        this.filters[key + '>'] = filter;\n    } else if (op === '>=') {\n        for (var k in this.filters) {\n            numval = (+this.filters[k].val.toString());\n            if (this.filters[k].key == key && numval < filter.val) {\n                delete this.filters[k];\n            }\n        }\n        if (this.filters[key + '!=' + filter.val] !== undefined) {\n            delete this.filters[key + '!=' + filter.val];\n            filter.op = '>';\n            this.filters[key + '>'] = filter;\n        }\n        else {\n            this.filters[key + '>='] = filter;\n        }\n    } else if (op === '<') {\n        for (var l in this.filters) {\n            numval = (+this.filters[l].val.toString());\n            if (this.filters[l].key == key && numval >= filter.val) {\n                delete this.filters[l];\n            }\n        }\n        this.filters[key + '<'] = filter;\n    } else if (op === '<=') {\n        for (var m in this.filters) {\n            numval = (+this.filters[m].val.toString());\n            if (this.filters[m].key == key && numval > filter.val) {\n                delete this.filters[m];\n            }\n        }\n        if (this.filters[key + '!=' + filter.val] !== undefined) {\n            delete this.filters[key + '!=' + filter.val];\n            filter.op = '<';\n            this.filters[key + '<'] = filter;\n        }\n        else {\n            this.filters[key + '<='] = filter;\n        }\n    }\n};\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./../../../../webpack/buildin/global.js */ 3)))//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 95 */
/* no static exports found */
/* all exports used */
/*!*******************************************!*\
  !*** ./~/carto/lib/carto/tree/fontset.js ***!
  \*******************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("(function(tree) {\n\ntree._getFontSet = function(env, fonts) {\n    var fontKey = fonts.join('');\n    if (env._fontMap && env._fontMap[fontKey]) {\n        return env._fontMap[fontKey];\n    }\n\n    var new_fontset = new tree.FontSet(env, fonts);\n    env.effects.push(new_fontset);\n    if (!env._fontMap) env._fontMap = {};\n    env._fontMap[fontKey] = new_fontset;\n    return new_fontset;\n};\n\ntree.FontSet = function FontSet(env, fonts) {\n    this.fonts = fonts;\n    this.name = 'fontset-' + env.effects.length;\n};\n\ntree.FontSet.prototype.toXML = function(env) {\n    return '<FontSet name=\"' +\n        this.name +\n        '\">\\n' +\n        this.fonts.map(function(f) {\n            return '  <Font face-name=\"' + f +'\"/>';\n        }).join('\\n') +\n        '\\n</FontSet>';\n};\n\n})(__webpack_require__(/*! ../tree */ 0));\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTUuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NhcnRvL2xpYi9jYXJ0by90cmVlL2ZvbnRzZXQuanM/OTZhOSJdLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24odHJlZSkge1xuXG50cmVlLl9nZXRGb250U2V0ID0gZnVuY3Rpb24oZW52LCBmb250cykge1xuICAgIHZhciBmb250S2V5ID0gZm9udHMuam9pbignJyk7XG4gICAgaWYgKGVudi5fZm9udE1hcCAmJiBlbnYuX2ZvbnRNYXBbZm9udEtleV0pIHtcbiAgICAgICAgcmV0dXJuIGVudi5fZm9udE1hcFtmb250S2V5XTtcbiAgICB9XG5cbiAgICB2YXIgbmV3X2ZvbnRzZXQgPSBuZXcgdHJlZS5Gb250U2V0KGVudiwgZm9udHMpO1xuICAgIGVudi5lZmZlY3RzLnB1c2gobmV3X2ZvbnRzZXQpO1xuICAgIGlmICghZW52Ll9mb250TWFwKSBlbnYuX2ZvbnRNYXAgPSB7fTtcbiAgICBlbnYuX2ZvbnRNYXBbZm9udEtleV0gPSBuZXdfZm9udHNldDtcbiAgICByZXR1cm4gbmV3X2ZvbnRzZXQ7XG59O1xuXG50cmVlLkZvbnRTZXQgPSBmdW5jdGlvbiBGb250U2V0KGVudiwgZm9udHMpIHtcbiAgICB0aGlzLmZvbnRzID0gZm9udHM7XG4gICAgdGhpcy5uYW1lID0gJ2ZvbnRzZXQtJyArIGVudi5lZmZlY3RzLmxlbmd0aDtcbn07XG5cbnRyZWUuRm9udFNldC5wcm90b3R5cGUudG9YTUwgPSBmdW5jdGlvbihlbnYpIHtcbiAgICByZXR1cm4gJzxGb250U2V0IG5hbWU9XCInICtcbiAgICAgICAgdGhpcy5uYW1lICtcbiAgICAgICAgJ1wiPlxcbicgK1xuICAgICAgICB0aGlzLmZvbnRzLm1hcChmdW5jdGlvbihmKSB7XG4gICAgICAgICAgICByZXR1cm4gJyAgPEZvbnQgZmFjZS1uYW1lPVwiJyArIGYgKydcIi8+JztcbiAgICAgICAgfSkuam9pbignXFxuJykgK1xuICAgICAgICAnXFxuPC9Gb250U2V0Pic7XG59O1xuXG59KShyZXF1aXJlKCcuLi90cmVlJykpO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NhcnRvL2xpYi9jYXJ0by90cmVlL2ZvbnRzZXQuanNcbi8vIG1vZHVsZSBpZCA9IDk1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 96 */
/* no static exports found */
/* all exports used */
/*!************************************************!*\
  !*** ./~/carto/lib/carto/tree/frame_offset.js ***!
  \************************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var tree = __webpack_require__(/*! ../tree */ 0);\n\n// Storage for Frame offset value\n// and stores them as bit-sequences so that they can be combined,\n// inverted, and compared quickly.\ntree.FrameOffset = function(op, value, index) {\n    value = parseInt(value, 10);\n    if (value > tree.FrameOffset.max || value <= 0) {\n        throw {\n            message: 'Only frame-offset levels between 1 and ' +\n                tree.FrameOffset.max + ' supported.',\n            index: index\n        };\n    }\n\n    if (op !== '=') {\n        throw {\n            message: 'only = operator is supported for frame-offset',\n            index: index\n        };\n    }\n    return value;\n};\n\ntree.FrameOffset.max = 32;\ntree.FrameOffset.none = 0;\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTYuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NhcnRvL2xpYi9jYXJ0by90cmVlL2ZyYW1lX29mZnNldC5qcz9lZjBhIl0sInNvdXJjZXNDb250ZW50IjpbInZhciB0cmVlID0gcmVxdWlyZSgnLi4vdHJlZScpO1xuXG4vLyBTdG9yYWdlIGZvciBGcmFtZSBvZmZzZXQgdmFsdWVcbi8vIGFuZCBzdG9yZXMgdGhlbSBhcyBiaXQtc2VxdWVuY2VzIHNvIHRoYXQgdGhleSBjYW4gYmUgY29tYmluZWQsXG4vLyBpbnZlcnRlZCwgYW5kIGNvbXBhcmVkIHF1aWNrbHkuXG50cmVlLkZyYW1lT2Zmc2V0ID0gZnVuY3Rpb24ob3AsIHZhbHVlLCBpbmRleCkge1xuICAgIHZhbHVlID0gcGFyc2VJbnQodmFsdWUsIDEwKTtcbiAgICBpZiAodmFsdWUgPiB0cmVlLkZyYW1lT2Zmc2V0Lm1heCB8fCB2YWx1ZSA8PSAwKSB7XG4gICAgICAgIHRocm93IHtcbiAgICAgICAgICAgIG1lc3NhZ2U6ICdPbmx5IGZyYW1lLW9mZnNldCBsZXZlbHMgYmV0d2VlbiAxIGFuZCAnICtcbiAgICAgICAgICAgICAgICB0cmVlLkZyYW1lT2Zmc2V0Lm1heCArICcgc3VwcG9ydGVkLicsXG4gICAgICAgICAgICBpbmRleDogaW5kZXhcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBpZiAob3AgIT09ICc9Jykge1xuICAgICAgICB0aHJvdyB7XG4gICAgICAgICAgICBtZXNzYWdlOiAnb25seSA9IG9wZXJhdG9yIGlzIHN1cHBvcnRlZCBmb3IgZnJhbWUtb2Zmc2V0JyxcbiAgICAgICAgICAgIGluZGV4OiBpbmRleFxuICAgICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWU7XG59O1xuXG50cmVlLkZyYW1lT2Zmc2V0Lm1heCA9IDMyO1xudHJlZS5GcmFtZU9mZnNldC5ub25lID0gMDtcblxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NhcnRvL2xpYi9jYXJ0by90cmVlL2ZyYW1lX29mZnNldC5qc1xuLy8gbW9kdWxlIGlkID0gOTZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 97 */
/* no static exports found */
/* all exports used */
/*!***********************************************!*\
  !*** ./~/carto/lib/carto/tree/imagefilter.js ***!
  \***********************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("(function(tree) {\n\ntree.ImageFilter = function ImageFilter(filter, args) {\n    this.filter = filter;\n    this.args = args || null;\n};\n\ntree.ImageFilter.prototype = {\n    is: 'imagefilter',\n    ev: function() { return this; },\n\n    toString: function() {\n        if (this.args) {\n            return this.filter + '(' + this.args.join(',') + ')';\n        } else {\n            return this.filter;\n        }\n    }\n};\n\n\n})(__webpack_require__(/*! ../tree */ 0));\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTcuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NhcnRvL2xpYi9jYXJ0by90cmVlL2ltYWdlZmlsdGVyLmpzPzg5YjQiXSwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uKHRyZWUpIHtcblxudHJlZS5JbWFnZUZpbHRlciA9IGZ1bmN0aW9uIEltYWdlRmlsdGVyKGZpbHRlciwgYXJncykge1xuICAgIHRoaXMuZmlsdGVyID0gZmlsdGVyO1xuICAgIHRoaXMuYXJncyA9IGFyZ3MgfHwgbnVsbDtcbn07XG5cbnRyZWUuSW1hZ2VGaWx0ZXIucHJvdG90eXBlID0ge1xuICAgIGlzOiAnaW1hZ2VmaWx0ZXInLFxuICAgIGV2OiBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXM7IH0sXG5cbiAgICB0b1N0cmluZzogZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICh0aGlzLmFyZ3MpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmZpbHRlciArICcoJyArIHRoaXMuYXJncy5qb2luKCcsJykgKyAnKSc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5maWx0ZXI7XG4gICAgICAgIH1cbiAgICB9XG59O1xuXG5cbn0pKHJlcXVpcmUoJy4uL3RyZWUnKSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY2FydG8vbGliL2NhcnRvL3RyZWUvaW1hZ2VmaWx0ZXIuanNcbi8vIG1vZHVsZSBpZCA9IDk3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 98 */
/* no static exports found */
/* all exports used */
/*!*******************************************!*\
  !*** ./~/carto/lib/carto/tree/invalid.js ***!
  \*******************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("(function (tree) {\ntree.Invalid = function Invalid(chunk, index, message) {\n    this.chunk = chunk;\n    this.index = index;\n    this.type = 'syntax';\n    this.message = message || \"Invalid code: \" + this.chunk;\n};\n\ntree.Invalid.prototype.is = 'invalid';\n\ntree.Invalid.prototype.ev = function(env) {\n    env.error({\n        chunk: this.chunk,\n        index: this.index,\n        type: 'syntax',\n        message: this.message || \"Invalid code: \" + this.chunk\n    });\n    return {\n        is: 'undefined'\n    };\n};\n})(__webpack_require__(/*! ../tree */ 0));\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTguanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NhcnRvL2xpYi9jYXJ0by90cmVlL2ludmFsaWQuanM/NjZjNiJdLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gKHRyZWUpIHtcbnRyZWUuSW52YWxpZCA9IGZ1bmN0aW9uIEludmFsaWQoY2h1bmssIGluZGV4LCBtZXNzYWdlKSB7XG4gICAgdGhpcy5jaHVuayA9IGNodW5rO1xuICAgIHRoaXMuaW5kZXggPSBpbmRleDtcbiAgICB0aGlzLnR5cGUgPSAnc3ludGF4JztcbiAgICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlIHx8IFwiSW52YWxpZCBjb2RlOiBcIiArIHRoaXMuY2h1bms7XG59O1xuXG50cmVlLkludmFsaWQucHJvdG90eXBlLmlzID0gJ2ludmFsaWQnO1xuXG50cmVlLkludmFsaWQucHJvdG90eXBlLmV2ID0gZnVuY3Rpb24oZW52KSB7XG4gICAgZW52LmVycm9yKHtcbiAgICAgICAgY2h1bms6IHRoaXMuY2h1bmssXG4gICAgICAgIGluZGV4OiB0aGlzLmluZGV4LFxuICAgICAgICB0eXBlOiAnc3ludGF4JyxcbiAgICAgICAgbWVzc2FnZTogdGhpcy5tZXNzYWdlIHx8IFwiSW52YWxpZCBjb2RlOiBcIiArIHRoaXMuY2h1bmtcbiAgICB9KTtcbiAgICByZXR1cm4ge1xuICAgICAgICBpczogJ3VuZGVmaW5lZCdcbiAgICB9O1xufTtcbn0pKHJlcXVpcmUoJy4uL3RyZWUnKSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY2FydG8vbGliL2NhcnRvL3RyZWUvaW52YWxpZC5qc1xuLy8gbW9kdWxlIGlkID0gOThcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 99 */
/* no static exports found */
/* all exports used */
/*!*******************************************!*\
  !*** ./~/carto/lib/carto/tree/keyword.js ***!
  \*******************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("(function(tree) {\n\ntree.Keyword = function Keyword(value) {\n    this.value = value;\n    var special = {\n        'transparent': 'color',\n        'true': 'boolean',\n        'false': 'boolean'\n    };\n    this.is = special[value] ? special[value] : 'keyword';\n};\ntree.Keyword.prototype = {\n    ev: function() { return this; },\n    toString: function() { return this.value; }\n};\n\n})(__webpack_require__(/*! ../tree */ 0));\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTkuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NhcnRvL2xpYi9jYXJ0by90cmVlL2tleXdvcmQuanM/MzgxMyJdLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24odHJlZSkge1xuXG50cmVlLktleXdvcmQgPSBmdW5jdGlvbiBLZXl3b3JkKHZhbHVlKSB7XG4gICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgIHZhciBzcGVjaWFsID0ge1xuICAgICAgICAndHJhbnNwYXJlbnQnOiAnY29sb3InLFxuICAgICAgICAndHJ1ZSc6ICdib29sZWFuJyxcbiAgICAgICAgJ2ZhbHNlJzogJ2Jvb2xlYW4nXG4gICAgfTtcbiAgICB0aGlzLmlzID0gc3BlY2lhbFt2YWx1ZV0gPyBzcGVjaWFsW3ZhbHVlXSA6ICdrZXl3b3JkJztcbn07XG50cmVlLktleXdvcmQucHJvdG90eXBlID0ge1xuICAgIGV2OiBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXM7IH0sXG4gICAgdG9TdHJpbmc6IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpcy52YWx1ZTsgfVxufTtcblxufSkocmVxdWlyZSgnLi4vdHJlZScpKTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jYXJ0by9saWIvY2FydG8vdHJlZS9rZXl3b3JkLmpzXG4vLyBtb2R1bGUgaWQgPSA5OVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 100 */
/* no static exports found */
/* all exports used */
/*!*****************************************!*\
  !*** ./~/carto/lib/carto/tree/layer.js ***!
  \*****************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("(function(tree) {\n\ntree.LayerXML = function(obj, styles) {\n    var dsoptions = [];\n    for (var i in obj.Datasource) {\n        dsoptions.push('<Parameter name=\"' + i + '\"><![CDATA[' +\n            obj.Datasource[i] + ']]></Parameter>');\n    }\n\n    var prop_string = '';\n    for (var prop in obj.properties) {\n        if (prop === 'minzoom') {\n            prop_string += '  maxzoom=\"' + tree.Zoom.ranges[obj.properties[prop]] + '\"\\n';\n        } else if (prop === 'maxzoom') {\n            prop_string += '  minzoom=\"' + tree.Zoom.ranges[obj.properties[prop]+1] + '\"\\n';\n        } else {\n            prop_string += '  ' + prop + '=\"' + obj.properties[prop] + '\"\\n';\n        }\n    }\n\n    return '<Layer' +\n        ' name=\"' + obj.name + '\"\\n' +\n        prop_string +\n        ((typeof obj.status === 'undefined') ? '' : '  status=\"' + obj.status + '\"\\n') +\n        ((typeof obj.srs === 'undefined') ? '' : '  srs=\"' + obj.srs + '\"') + '>\\n    ' +\n        styles.reverse().map(function(s) {\n            return '<StyleName>' + s + '</StyleName>';\n        }).join('\\n    ') +\n        (dsoptions.length ?\n        '\\n    <Datasource>\\n       ' +\n        dsoptions.join('\\n       ') +\n        '\\n    </Datasource>\\n'\n        : '') +\n        '  </Layer>\\n';\n};\n\n})(__webpack_require__(/*! ../tree */ 0));\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTAwLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9jYXJ0by9saWIvY2FydG8vdHJlZS9sYXllci5qcz9hMWUyIl0sInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbih0cmVlKSB7XG5cbnRyZWUuTGF5ZXJYTUwgPSBmdW5jdGlvbihvYmosIHN0eWxlcykge1xuICAgIHZhciBkc29wdGlvbnMgPSBbXTtcbiAgICBmb3IgKHZhciBpIGluIG9iai5EYXRhc291cmNlKSB7XG4gICAgICAgIGRzb3B0aW9ucy5wdXNoKCc8UGFyYW1ldGVyIG5hbWU9XCInICsgaSArICdcIj48IVtDREFUQVsnICtcbiAgICAgICAgICAgIG9iai5EYXRhc291cmNlW2ldICsgJ11dPjwvUGFyYW1ldGVyPicpO1xuICAgIH1cblxuICAgIHZhciBwcm9wX3N0cmluZyA9ICcnO1xuICAgIGZvciAodmFyIHByb3AgaW4gb2JqLnByb3BlcnRpZXMpIHtcbiAgICAgICAgaWYgKHByb3AgPT09ICdtaW56b29tJykge1xuICAgICAgICAgICAgcHJvcF9zdHJpbmcgKz0gJyAgbWF4em9vbT1cIicgKyB0cmVlLlpvb20ucmFuZ2VzW29iai5wcm9wZXJ0aWVzW3Byb3BdXSArICdcIlxcbic7XG4gICAgICAgIH0gZWxzZSBpZiAocHJvcCA9PT0gJ21heHpvb20nKSB7XG4gICAgICAgICAgICBwcm9wX3N0cmluZyArPSAnICBtaW56b29tPVwiJyArIHRyZWUuWm9vbS5yYW5nZXNbb2JqLnByb3BlcnRpZXNbcHJvcF0rMV0gKyAnXCJcXG4nO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcHJvcF9zdHJpbmcgKz0gJyAgJyArIHByb3AgKyAnPVwiJyArIG9iai5wcm9wZXJ0aWVzW3Byb3BdICsgJ1wiXFxuJztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiAnPExheWVyJyArXG4gICAgICAgICcgbmFtZT1cIicgKyBvYmoubmFtZSArICdcIlxcbicgK1xuICAgICAgICBwcm9wX3N0cmluZyArXG4gICAgICAgICgodHlwZW9mIG9iai5zdGF0dXMgPT09ICd1bmRlZmluZWQnKSA/ICcnIDogJyAgc3RhdHVzPVwiJyArIG9iai5zdGF0dXMgKyAnXCJcXG4nKSArXG4gICAgICAgICgodHlwZW9mIG9iai5zcnMgPT09ICd1bmRlZmluZWQnKSA/ICcnIDogJyAgc3JzPVwiJyArIG9iai5zcnMgKyAnXCInKSArICc+XFxuICAgICcgK1xuICAgICAgICBzdHlsZXMucmV2ZXJzZSgpLm1hcChmdW5jdGlvbihzKSB7XG4gICAgICAgICAgICByZXR1cm4gJzxTdHlsZU5hbWU+JyArIHMgKyAnPC9TdHlsZU5hbWU+JztcbiAgICAgICAgfSkuam9pbignXFxuICAgICcpICtcbiAgICAgICAgKGRzb3B0aW9ucy5sZW5ndGggP1xuICAgICAgICAnXFxuICAgIDxEYXRhc291cmNlPlxcbiAgICAgICAnICtcbiAgICAgICAgZHNvcHRpb25zLmpvaW4oJ1xcbiAgICAgICAnKSArXG4gICAgICAgICdcXG4gICAgPC9EYXRhc291cmNlPlxcbidcbiAgICAgICAgOiAnJykgK1xuICAgICAgICAnICA8L0xheWVyPlxcbic7XG59O1xuXG59KShyZXF1aXJlKCcuLi90cmVlJykpO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NhcnRvL2xpYi9jYXJ0by90cmVlL2xheWVyLmpzXG4vLyBtb2R1bGUgaWQgPSAxMDBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 101 */
/* no static exports found */
/* all exports used */
/*!*******************************************!*\
  !*** ./~/carto/lib/carto/tree/literal.js ***!
  \*******************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("// A literal is a literal string for Mapnik - the\n// result of the combination of a `tree.Field` with any\n// other type.\n(function(tree) {\n\ntree.Literal = function Field(content) {\n    this.value = content || '';\n    this.is = 'field';\n};\n\ntree.Literal.prototype = {\n    toString: function() {\n        return this.value;\n    },\n    'ev': function() {\n        return this;\n    }\n};\n\n})(__webpack_require__(/*! ../tree */ 0));\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTAxLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9jYXJ0by9saWIvY2FydG8vdHJlZS9saXRlcmFsLmpzPzA5ZWQiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQSBsaXRlcmFsIGlzIGEgbGl0ZXJhbCBzdHJpbmcgZm9yIE1hcG5payAtIHRoZVxuLy8gcmVzdWx0IG9mIHRoZSBjb21iaW5hdGlvbiBvZiBhIGB0cmVlLkZpZWxkYCB3aXRoIGFueVxuLy8gb3RoZXIgdHlwZS5cbihmdW5jdGlvbih0cmVlKSB7XG5cbnRyZWUuTGl0ZXJhbCA9IGZ1bmN0aW9uIEZpZWxkKGNvbnRlbnQpIHtcbiAgICB0aGlzLnZhbHVlID0gY29udGVudCB8fCAnJztcbiAgICB0aGlzLmlzID0gJ2ZpZWxkJztcbn07XG5cbnRyZWUuTGl0ZXJhbC5wcm90b3R5cGUgPSB7XG4gICAgdG9TdHJpbmc6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy52YWx1ZTtcbiAgICB9LFxuICAgICdldic6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG59O1xuXG59KShyZXF1aXJlKCcuLi90cmVlJykpO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NhcnRvL2xpYi9jYXJ0by90cmVlL2xpdGVyYWwuanNcbi8vIG1vZHVsZSBpZCA9IDEwMVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 102 */
/* no static exports found */
/* all exports used */
/*!*********************************************!*\
  !*** ./~/carto/lib/carto/tree/operation.js ***!
  \*********************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("// An operation is an expression with an op in between two operands,\n// like 2 + 1.\n(function(tree) {\n\ntree.Operation = function Operation(op, operands, index) {\n    this.op = op.trim();\n    this.operands = operands;\n    this.index = index;\n};\n\ntree.Operation.prototype.is = 'operation';\n\ntree.Operation.prototype.ev = function(env) {\n    var a = this.operands[0].ev(env),\n        b = this.operands[1].ev(env),\n        temp;\n\n    if (a.is === 'undefined' || b.is === 'undefined') {\n        return {\n            is: 'undefined',\n            value: 'undefined'\n        };\n    }\n\n    if (a instanceof tree.Dimension && b instanceof tree.Color) {\n        if (this.op === '*' || this.op === '+') {\n            temp = b, b = a, a = temp;\n        } else {\n            env.error({\n                name: \"OperationError\",\n                message: \"Can't substract or divide a color from a number\",\n                index: this.index\n            });\n        }\n    }\n\n    // Only concatenate plain strings, because this is easily\n    // pre-processed\n    if (a instanceof tree.Quoted && b instanceof tree.Quoted && this.op !== '+') {\n        env.error({\n           message: \"Can't subtract, divide, or multiply strings.\",\n           index: this.index,\n           type: 'runtime',\n           filename: this.filename\n        });\n        return {\n            is: 'undefined',\n            value: 'undefined'\n        };\n    }\n\n    // Fields, literals, dimensions, and quoted strings can be combined.\n    if (a instanceof tree.Field || b instanceof tree.Field ||\n        a instanceof tree.Literal || b instanceof tree.Literal) {\n        if (a.is === 'color' || b.is === 'color') {\n            env.error({\n               message: \"Can't subtract, divide, or multiply colors in expressions.\",\n               index: this.index,\n               type: 'runtime',\n               filename: this.filename\n            });\n            return {\n                is: 'undefined',\n                value: 'undefined'\n            };\n        } else {\n            return new tree.Literal(a.ev(env).toString(true) + this.op + b.ev(env).toString(true));\n        }\n    }\n\n    if (a.operate === undefined) {\n        env.error({\n           message: 'Cannot do math with type ' + a.is + '.',\n           index: this.index,\n           type: 'runtime',\n           filename: this.filename\n        });\n        return {\n            is: 'undefined',\n            value: 'undefined'\n        };\n    }\n\n    return a.operate(env, this.op, b);\n};\n\ntree.operate = function(op, a, b) {\n    switch (op) {\n        case '+': return a + b;\n        case '-': return a - b;\n        case '*': return a * b;\n        case '%': return a % b;\n        case '/': return a / b;\n    }\n};\n\n})(__webpack_require__(/*! ../tree */ 0));\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTAyLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9jYXJ0by9saWIvY2FydG8vdHJlZS9vcGVyYXRpb24uanM/Nzc2NCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBBbiBvcGVyYXRpb24gaXMgYW4gZXhwcmVzc2lvbiB3aXRoIGFuIG9wIGluIGJldHdlZW4gdHdvIG9wZXJhbmRzLFxuLy8gbGlrZSAyICsgMS5cbihmdW5jdGlvbih0cmVlKSB7XG5cbnRyZWUuT3BlcmF0aW9uID0gZnVuY3Rpb24gT3BlcmF0aW9uKG9wLCBvcGVyYW5kcywgaW5kZXgpIHtcbiAgICB0aGlzLm9wID0gb3AudHJpbSgpO1xuICAgIHRoaXMub3BlcmFuZHMgPSBvcGVyYW5kcztcbiAgICB0aGlzLmluZGV4ID0gaW5kZXg7XG59O1xuXG50cmVlLk9wZXJhdGlvbi5wcm90b3R5cGUuaXMgPSAnb3BlcmF0aW9uJztcblxudHJlZS5PcGVyYXRpb24ucHJvdG90eXBlLmV2ID0gZnVuY3Rpb24oZW52KSB7XG4gICAgdmFyIGEgPSB0aGlzLm9wZXJhbmRzWzBdLmV2KGVudiksXG4gICAgICAgIGIgPSB0aGlzLm9wZXJhbmRzWzFdLmV2KGVudiksXG4gICAgICAgIHRlbXA7XG5cbiAgICBpZiAoYS5pcyA9PT0gJ3VuZGVmaW5lZCcgfHwgYi5pcyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGlzOiAndW5kZWZpbmVkJyxcbiAgICAgICAgICAgIHZhbHVlOiAndW5kZWZpbmVkJ1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGlmIChhIGluc3RhbmNlb2YgdHJlZS5EaW1lbnNpb24gJiYgYiBpbnN0YW5jZW9mIHRyZWUuQ29sb3IpIHtcbiAgICAgICAgaWYgKHRoaXMub3AgPT09ICcqJyB8fCB0aGlzLm9wID09PSAnKycpIHtcbiAgICAgICAgICAgIHRlbXAgPSBiLCBiID0gYSwgYSA9IHRlbXA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBlbnYuZXJyb3Ioe1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiT3BlcmF0aW9uRXJyb3JcIixcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiBcIkNhbid0IHN1YnN0cmFjdCBvciBkaXZpZGUgYSBjb2xvciBmcm9tIGEgbnVtYmVyXCIsXG4gICAgICAgICAgICAgICAgaW5kZXg6IHRoaXMuaW5kZXhcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gT25seSBjb25jYXRlbmF0ZSBwbGFpbiBzdHJpbmdzLCBiZWNhdXNlIHRoaXMgaXMgZWFzaWx5XG4gICAgLy8gcHJlLXByb2Nlc3NlZFxuICAgIGlmIChhIGluc3RhbmNlb2YgdHJlZS5RdW90ZWQgJiYgYiBpbnN0YW5jZW9mIHRyZWUuUXVvdGVkICYmIHRoaXMub3AgIT09ICcrJykge1xuICAgICAgICBlbnYuZXJyb3Ioe1xuICAgICAgICAgICBtZXNzYWdlOiBcIkNhbid0IHN1YnRyYWN0LCBkaXZpZGUsIG9yIG11bHRpcGx5IHN0cmluZ3MuXCIsXG4gICAgICAgICAgIGluZGV4OiB0aGlzLmluZGV4LFxuICAgICAgICAgICB0eXBlOiAncnVudGltZScsXG4gICAgICAgICAgIGZpbGVuYW1lOiB0aGlzLmZpbGVuYW1lXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgaXM6ICd1bmRlZmluZWQnLFxuICAgICAgICAgICAgdmFsdWU6ICd1bmRlZmluZWQnXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gRmllbGRzLCBsaXRlcmFscywgZGltZW5zaW9ucywgYW5kIHF1b3RlZCBzdHJpbmdzIGNhbiBiZSBjb21iaW5lZC5cbiAgICBpZiAoYSBpbnN0YW5jZW9mIHRyZWUuRmllbGQgfHwgYiBpbnN0YW5jZW9mIHRyZWUuRmllbGQgfHxcbiAgICAgICAgYSBpbnN0YW5jZW9mIHRyZWUuTGl0ZXJhbCB8fCBiIGluc3RhbmNlb2YgdHJlZS5MaXRlcmFsKSB7XG4gICAgICAgIGlmIChhLmlzID09PSAnY29sb3InIHx8IGIuaXMgPT09ICdjb2xvcicpIHtcbiAgICAgICAgICAgIGVudi5lcnJvcih7XG4gICAgICAgICAgICAgICBtZXNzYWdlOiBcIkNhbid0IHN1YnRyYWN0LCBkaXZpZGUsIG9yIG11bHRpcGx5IGNvbG9ycyBpbiBleHByZXNzaW9ucy5cIixcbiAgICAgICAgICAgICAgIGluZGV4OiB0aGlzLmluZGV4LFxuICAgICAgICAgICAgICAgdHlwZTogJ3J1bnRpbWUnLFxuICAgICAgICAgICAgICAgZmlsZW5hbWU6IHRoaXMuZmlsZW5hbWVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBpczogJ3VuZGVmaW5lZCcsXG4gICAgICAgICAgICAgICAgdmFsdWU6ICd1bmRlZmluZWQnXG4gICAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyB0cmVlLkxpdGVyYWwoYS5ldihlbnYpLnRvU3RyaW5nKHRydWUpICsgdGhpcy5vcCArIGIuZXYoZW52KS50b1N0cmluZyh0cnVlKSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoYS5vcGVyYXRlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgZW52LmVycm9yKHtcbiAgICAgICAgICAgbWVzc2FnZTogJ0Nhbm5vdCBkbyBtYXRoIHdpdGggdHlwZSAnICsgYS5pcyArICcuJyxcbiAgICAgICAgICAgaW5kZXg6IHRoaXMuaW5kZXgsXG4gICAgICAgICAgIHR5cGU6ICdydW50aW1lJyxcbiAgICAgICAgICAgZmlsZW5hbWU6IHRoaXMuZmlsZW5hbWVcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBpczogJ3VuZGVmaW5lZCcsXG4gICAgICAgICAgICB2YWx1ZTogJ3VuZGVmaW5lZCdcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gYS5vcGVyYXRlKGVudiwgdGhpcy5vcCwgYik7XG59O1xuXG50cmVlLm9wZXJhdGUgPSBmdW5jdGlvbihvcCwgYSwgYikge1xuICAgIHN3aXRjaCAob3ApIHtcbiAgICAgICAgY2FzZSAnKyc6IHJldHVybiBhICsgYjtcbiAgICAgICAgY2FzZSAnLSc6IHJldHVybiBhIC0gYjtcbiAgICAgICAgY2FzZSAnKic6IHJldHVybiBhICogYjtcbiAgICAgICAgY2FzZSAnJSc6IHJldHVybiBhICUgYjtcbiAgICAgICAgY2FzZSAnLyc6IHJldHVybiBhIC8gYjtcbiAgICB9XG59O1xuXG59KShyZXF1aXJlKCcuLi90cmVlJykpO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NhcnRvL2xpYi9jYXJ0by90cmVlL29wZXJhdGlvbi5qc1xuLy8gbW9kdWxlIGlkID0gMTAyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 103 */
/* no static exports found */
/* all exports used */
/*!******************************************!*\
  !*** ./~/carto/lib/carto/tree/quoted.js ***!
  \******************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("(function(tree) {\n\ntree.Quoted = function Quoted(content) {\n    this.value = content || '';\n};\n\ntree.Quoted.prototype = {\n    is: 'string',\n\n    toString: function(quotes) {\n        var escapedValue = this.value\n            .replace(/&/g, '&amp;')\n        var xmlvalue = escapedValue\n            .replace(/\\'/g, '\\\\\\'')\n            .replace(/\\\"/g, '&quot;')\n            .replace(/</g, '&lt;')\n            .replace(/\\>/g, '&gt;');\n        return (quotes === true) ? \"'\" + xmlvalue + \"'\" : escapedValue;\n    },\n\n    'ev': function() {\n        return this;\n    },\n\n    operate: function(env, op, other) {\n        return new tree.Quoted(tree.operate(op, this.toString(), other.toString(this.contains_field)));\n    }\n};\n\n})(__webpack_require__(/*! ../tree */ 0));\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTAzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9jYXJ0by9saWIvY2FydG8vdHJlZS9xdW90ZWQuanM/NTUxYSJdLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24odHJlZSkge1xuXG50cmVlLlF1b3RlZCA9IGZ1bmN0aW9uIFF1b3RlZChjb250ZW50KSB7XG4gICAgdGhpcy52YWx1ZSA9IGNvbnRlbnQgfHwgJyc7XG59O1xuXG50cmVlLlF1b3RlZC5wcm90b3R5cGUgPSB7XG4gICAgaXM6ICdzdHJpbmcnLFxuXG4gICAgdG9TdHJpbmc6IGZ1bmN0aW9uKHF1b3Rlcykge1xuICAgICAgICB2YXIgZXNjYXBlZFZhbHVlID0gdGhpcy52YWx1ZVxuICAgICAgICAgICAgLnJlcGxhY2UoLyYvZywgJyZhbXA7JylcbiAgICAgICAgdmFyIHhtbHZhbHVlID0gZXNjYXBlZFZhbHVlXG4gICAgICAgICAgICAucmVwbGFjZSgvXFwnL2csICdcXFxcXFwnJylcbiAgICAgICAgICAgIC5yZXBsYWNlKC9cXFwiL2csICcmcXVvdDsnKVxuICAgICAgICAgICAgLnJlcGxhY2UoLzwvZywgJyZsdDsnKVxuICAgICAgICAgICAgLnJlcGxhY2UoL1xcPi9nLCAnJmd0OycpO1xuICAgICAgICByZXR1cm4gKHF1b3RlcyA9PT0gdHJ1ZSkgPyBcIidcIiArIHhtbHZhbHVlICsgXCInXCIgOiBlc2NhcGVkVmFsdWU7XG4gICAgfSxcblxuICAgICdldic6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgb3BlcmF0ZTogZnVuY3Rpb24oZW52LCBvcCwgb3RoZXIpIHtcbiAgICAgICAgcmV0dXJuIG5ldyB0cmVlLlF1b3RlZCh0cmVlLm9wZXJhdGUob3AsIHRoaXMudG9TdHJpbmcoKSwgb3RoZXIudG9TdHJpbmcodGhpcy5jb250YWluc19maWVsZCkpKTtcbiAgICB9XG59O1xuXG59KShyZXF1aXJlKCcuLi90cmVlJykpO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NhcnRvL2xpYi9jYXJ0by90cmVlL3F1b3RlZC5qc1xuLy8gbW9kdWxlIGlkID0gMTAzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 104 */
/* no static exports found */
/* all exports used */
/*!*********************************************!*\
  !*** ./~/carto/lib/carto/tree/reference.js ***!
  \*********************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global) {// Carto pulls in a reference from the `mapnik-reference`\n// module. This file builds indexes from that file for its various\n// options, and provides validation methods for property: value\n// combinations.\n(function(tree) {\n\nvar _ = global._ || __webpack_require__(/*! underscore */ 4),\n    ref = {};\n\nref.setData = function(data) {\n    ref.data = data;\n    ref.selector_cache = generateSelectorCache(data);\n    ref.mapnikFunctions = generateMapnikFunctions(data);\n\n    ref.mapnikFunctions.matrix = [6];\n    ref.mapnikFunctions.translate = [1, 2];\n    ref.mapnikFunctions.scale = [1, 2];\n    ref.mapnikFunctions.rotate = [1, 3];\n    ref.mapnikFunctions.skewX = [1];\n    ref.mapnikFunctions.skewY = [1];\n\n    ref.required_cache = generateRequiredProperties(data);\n};\n\nref.setVersion = function(version) {\n    var mapnik_reference = __webpack_require__(/*! mapnik-reference */ 141);\n    if (mapnik_reference.version.hasOwnProperty(version)) {\n        ref.setData(mapnik_reference.version[version]);\n        return true;\n    } else {\n        return false;\n    }\n};\n\nref.selectorData = function(selector, i) {\n    if (ref.selector_cache[selector]) return ref.selector_cache[selector][i];\n};\n\nref.validSelector = function(selector) { return !!ref.selector_cache[selector]; };\nref.selectorName = function(selector) { return ref.selectorData(selector, 2); };\nref.selector = function(selector) { return ref.selectorData(selector, 0); };\nref.symbolizer = function(selector) { return ref.selectorData(selector, 1); };\n\nfunction generateSelectorCache(data) {\n    var index = {};\n    for (var i in data.symbolizers) {\n        for (var j in data.symbolizers[i]) {\n            if (data.symbolizers[i][j].hasOwnProperty('css')) {\n                index[data.symbolizers[i][j].css] = [data.symbolizers[i][j], i, j];\n            }\n        }\n    }\n    return index;\n}\n\nfunction generateMapnikFunctions(data) {\n    var functions = {};\n    for (var i in data.symbolizers) {\n        for (var j in data.symbolizers[i]) {\n            if (data.symbolizers[i][j].type === 'functions') {\n                for (var k = 0; k < data.symbolizers[i][j].functions.length; k++) {\n                    var fn = data.symbolizers[i][j].functions[k];\n                    functions[fn[0]] = fn[1];\n                }\n            }\n        }\n    }\n    return functions;\n}\n\nfunction generateRequiredProperties(data) {\n    var cache = {};\n    for (var symbolizer_name in data.symbolizers) {\n        cache[symbolizer_name] = [];\n        for (var j in data.symbolizers[symbolizer_name]) {\n            if (data.symbolizers[symbolizer_name][j].required) {\n                cache[symbolizer_name].push(data.symbolizers[symbolizer_name][j].css);\n            }\n        }\n    }\n    return cache;\n}\n\nref.requiredProperties = function(symbolizer_name, rules) {\n    var req = ref.required_cache[symbolizer_name];\n    for (var i in req) {\n        if (!(req[i] in rules)) {\n            return 'Property ' + req[i] + ' required for defining ' +\n                symbolizer_name + ' styles.';\n        }\n    }\n};\n\n// TODO: finish implementation - this is dead code\nref._validateValue = {\n    'font': function(env, value) {\n        if (env.validation_data && env.validation_data.fonts) {\n            return env.validation_data.fonts.indexOf(value) != -1;\n        } else {\n            return true;\n        }\n    }\n};\n\nref.isFont = function(selector) {\n    return ref.selector(selector).validate == 'font';\n};\n\n// https://gist.github.com/982927\nref.editDistance = function(a, b){\n    if (a.length === 0) return b.length;\n    if (b.length === 0) return a.length;\n    var matrix = [];\n    for (var i = 0; i <= b.length; i++) { matrix[i] = [i]; }\n    for (var j = 0; j <= a.length; j++) { matrix[0][j] = j; }\n    for (i = 1; i <= b.length; i++) {\n        for (j = 1; j <= a.length; j++) {\n            if (b.charAt(i-1) == a.charAt(j-1)) {\n                matrix[i][j] = matrix[i-1][j-1];\n            } else {\n                matrix[i][j] = Math.min(matrix[i-1][j-1] + 1, // substitution\n                    Math.min(matrix[i][j-1] + 1, // insertion\n                    matrix[i-1][j] + 1)); // deletion\n            }\n        }\n    }\n    return matrix[b.length][a.length];\n};\n\nfunction validateFunctions(value, selector) {\n    if (value.value[0].is === 'string') return true;\n    for (var i in value.value) {\n        for (var j in value.value[i].value) {\n            if (value.value[i].value[j].is !== 'call') return false;\n            var f = _.find(ref\n                .selector(selector).functions, function(x) {\n                    return x[0] == value.value[i].value[j].name;\n                });\n            if (!(f && f[1] == -1)) {\n                // This filter is unknown or given an incorrect number of arguments\n                if (!f || f[1] !== value.value[i].value[j].args.length) return false;\n            }\n        }\n    }\n    return true;\n}\n\nfunction validateKeyword(value, selector) {\n    if (typeof ref.selector(selector).type === 'object') {\n        return ref.selector(selector).type\n            .indexOf(value.value[0].value) !== -1;\n    } else {\n        // allow unquoted keywords as strings\n        return ref.selector(selector).type === 'string';\n    }\n}\n\nref.validValue = function(env, selector, value) {\n    var i, j;\n    // TODO: handle in reusable way\n    if (!ref.selector(selector)) {\n        return false;\n    } else if (value.value[0].is == 'keyword') {\n        return validateKeyword(value, selector);\n    } else if (value.value[0].is == 'undefined') {\n        // caught earlier in the chain - ignore here so that\n        // error is not overridden\n        return true;\n    } else if (ref.selector(selector).type == 'numbers') {\n        for (i in value.value) {\n            if (value.value[i].is !== 'float') {\n                return false;\n            }\n        }\n        return true;\n    } else if (ref.selector(selector).type == 'tags') {\n        if (!value.value) return false;\n        if (!value.value[0].value) {\n            return value.value[0].is === 'tag';\n        }\n        for (i = 0; i < value.value[0].value.length; i++) {\n            if (value.value[0].value[i].is !== 'tag') return false;\n        }\n        return true;\n    } else if (ref.selector(selector).type == 'functions') {\n        // For backwards compatibility, you can specify a string for `functions`-compatible\n        // values, though they will not be validated.\n        return validateFunctions(value, selector);\n    } else if (ref.selector(selector).type === 'unsigned') {\n        if (value.value[0].is === 'float') {\n            value.value[0].round();\n            return true;\n        } else {\n            return false;\n        }\n    } else if ((ref.selector(selector).expression)) {\n        return true;\n    } else {\n        if (ref.selector(selector).validate) {\n            var valid = false;\n            for (i = 0; i < value.value.length; i++) {\n                if (ref.selector(selector).type == value.value[i].is &&\n                    ref\n                        ._validateValue\n                            [ref.selector(selector).validate]\n                            (env, value.value[i].value)) {\n                    return true;\n                }\n            }\n            return valid;\n        } else {\n            return ref.selector(selector).type == value.value[0].is;\n        }\n    }\n};\n\ntree.Reference = ref;\n\n})(__webpack_require__(/*! ../tree */ 0));\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./../../../../webpack/buildin/global.js */ 3)))//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 105 */
/* no static exports found */
/* all exports used */
/*!****************************************!*\
  !*** ./~/carto/lib/carto/tree/rule.js ***!
  \****************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("(function(tree) {\n// a rule is a single property and value combination, or variable\n// name and value combination, like\n// polygon-opacity: 1.0; or @opacity: 1.0;\ntree.Rule = function Rule(name, value, index, filename) {\n    var parts = name.split('/');\n    this.name = parts.pop();\n    this.instance = parts.length ? parts[0] : '__default__';\n    this.value = (value instanceof tree.Value) ?\n        value : new tree.Value([value]);\n    this.index = index;\n    this.symbolizer = tree.Reference.symbolizer(this.name);\n    this.filename = filename;\n    this.variable = (name.charAt(0) === '@');\n};\n\ntree.Rule.prototype.is = 'rule';\n\ntree.Rule.prototype.clone = function() {\n    var clone = Object.create(tree.Rule.prototype);\n    clone.name = this.name;\n    clone.value = this.value;\n    clone.index = this.index;\n    clone.instance = this.instance;\n    clone.symbolizer = this.symbolizer;\n    clone.filename = this.filename;\n    clone.variable = this.variable;\n    return clone;\n};\n\ntree.Rule.prototype.updateID = function() {\n    return this.id = this.zoom + '#' + this.instance + '#' + this.name;\n};\n\ntree.Rule.prototype.toString = function() {\n    return '[' + tree.Zoom.toString(this.zoom) + '] ' + this.name + ': ' + this.value;\n};\n\nfunction getMean(name) {\n    return Object.keys(tree.Reference.selector_cache).map(function(f) {\n        return [f, tree.Reference.editDistance(name, f)];\n    }).sort(function(a, b) { return a[1] - b[1]; });\n}\n\n// second argument, if true, outputs the value of this\n// rule without the usual attribute=\"content\" wrapping. Right\n// now this is just for the TextSymbolizer, but applies to other\n// properties in reference.json which specify serialization=content\ntree.Rule.prototype.toXML = function(env, content, sep, format) {\n    if (!tree.Reference.validSelector(this.name)) {\n        var mean = getMean(this.name);\n        var mean_message = '';\n        if (mean[0][1] < 3) {\n            mean_message = '. Did you mean ' + mean[0][0] + '?';\n        }\n        return env.error({\n            message: \"Unrecognized rule: \" + this.name + mean_message,\n            index: this.index,\n            type: 'syntax',\n            filename: this.filename\n        });\n    }\n\n    if ((this.value instanceof tree.Value) &&\n        !tree.Reference.validValue(env, this.name, this.value)) {\n        if (!tree.Reference.selector(this.name)) {\n            return env.error({\n                message: 'Unrecognized property: ' +\n                    this.name,\n                index: this.index,\n                type: 'syntax',\n                filename: this.filename\n            });\n        } else {\n            var typename;\n            if (tree.Reference.selector(this.name).validate) {\n                typename = tree.Reference.selector(this.name).validate;\n            } else if (typeof tree.Reference.selector(this.name).type === 'object') {\n                typename = 'keyword (options: ' + tree.Reference.selector(this.name).type.join(', ') + ')';\n            } else {\n                typename = tree.Reference.selector(this.name).type;\n            }\n            return env.error({\n                message: 'Invalid value for ' +\n                    this.name +\n                    ', the type ' + typename +\n                    ' is expected. ' + this.value +\n                    ' (of type ' + this.value.value[0].is + ') ' +\n                    ' was given.',\n                index: this.index,\n                type: 'syntax',\n                filename: this.filename\n            });\n        }\n    }\n\n    if (this.variable) {\n        return '';\n    } else if (tree.Reference.isFont(this.name) && this.value.value.length > 1) {\n        var f = tree._getFontSet(env, this.value.value);\n        return 'fontset-name=\"' + f.name + '\"';\n    } else if (content) {\n        return this.value.toString(env, this.name, sep);\n    } else {\n        return tree.Reference.selectorName(this.name) +\n            '=\"' +\n            this.value.toString(env, this.name) +\n            '\"';\n    }\n};\n\n// TODO: Rule ev chain should add fontsets to env.frames\ntree.Rule.prototype.ev = function(context) {\n    return new tree.Rule(this.name,\n        this.value.ev(context),\n        this.index,\n        this.filename);\n};\n\n})(__webpack_require__(/*! ../tree */ 0));\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTA1LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9jYXJ0by9saWIvY2FydG8vdHJlZS9ydWxlLmpzPzVjYmUiXSwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uKHRyZWUpIHtcbi8vIGEgcnVsZSBpcyBhIHNpbmdsZSBwcm9wZXJ0eSBhbmQgdmFsdWUgY29tYmluYXRpb24sIG9yIHZhcmlhYmxlXG4vLyBuYW1lIGFuZCB2YWx1ZSBjb21iaW5hdGlvbiwgbGlrZVxuLy8gcG9seWdvbi1vcGFjaXR5OiAxLjA7IG9yIEBvcGFjaXR5OiAxLjA7XG50cmVlLlJ1bGUgPSBmdW5jdGlvbiBSdWxlKG5hbWUsIHZhbHVlLCBpbmRleCwgZmlsZW5hbWUpIHtcbiAgICB2YXIgcGFydHMgPSBuYW1lLnNwbGl0KCcvJyk7XG4gICAgdGhpcy5uYW1lID0gcGFydHMucG9wKCk7XG4gICAgdGhpcy5pbnN0YW5jZSA9IHBhcnRzLmxlbmd0aCA/IHBhcnRzWzBdIDogJ19fZGVmYXVsdF9fJztcbiAgICB0aGlzLnZhbHVlID0gKHZhbHVlIGluc3RhbmNlb2YgdHJlZS5WYWx1ZSkgP1xuICAgICAgICB2YWx1ZSA6IG5ldyB0cmVlLlZhbHVlKFt2YWx1ZV0pO1xuICAgIHRoaXMuaW5kZXggPSBpbmRleDtcbiAgICB0aGlzLnN5bWJvbGl6ZXIgPSB0cmVlLlJlZmVyZW5jZS5zeW1ib2xpemVyKHRoaXMubmFtZSk7XG4gICAgdGhpcy5maWxlbmFtZSA9IGZpbGVuYW1lO1xuICAgIHRoaXMudmFyaWFibGUgPSAobmFtZS5jaGFyQXQoMCkgPT09ICdAJyk7XG59O1xuXG50cmVlLlJ1bGUucHJvdG90eXBlLmlzID0gJ3J1bGUnO1xuXG50cmVlLlJ1bGUucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGNsb25lID0gT2JqZWN0LmNyZWF0ZSh0cmVlLlJ1bGUucHJvdG90eXBlKTtcbiAgICBjbG9uZS5uYW1lID0gdGhpcy5uYW1lO1xuICAgIGNsb25lLnZhbHVlID0gdGhpcy52YWx1ZTtcbiAgICBjbG9uZS5pbmRleCA9IHRoaXMuaW5kZXg7XG4gICAgY2xvbmUuaW5zdGFuY2UgPSB0aGlzLmluc3RhbmNlO1xuICAgIGNsb25lLnN5bWJvbGl6ZXIgPSB0aGlzLnN5bWJvbGl6ZXI7XG4gICAgY2xvbmUuZmlsZW5hbWUgPSB0aGlzLmZpbGVuYW1lO1xuICAgIGNsb25lLnZhcmlhYmxlID0gdGhpcy52YXJpYWJsZTtcbiAgICByZXR1cm4gY2xvbmU7XG59O1xuXG50cmVlLlJ1bGUucHJvdG90eXBlLnVwZGF0ZUlEID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuaWQgPSB0aGlzLnpvb20gKyAnIycgKyB0aGlzLmluc3RhbmNlICsgJyMnICsgdGhpcy5uYW1lO1xufTtcblxudHJlZS5SdWxlLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiAnWycgKyB0cmVlLlpvb20udG9TdHJpbmcodGhpcy56b29tKSArICddICcgKyB0aGlzLm5hbWUgKyAnOiAnICsgdGhpcy52YWx1ZTtcbn07XG5cbmZ1bmN0aW9uIGdldE1lYW4obmFtZSkge1xuICAgIHJldHVybiBPYmplY3Qua2V5cyh0cmVlLlJlZmVyZW5jZS5zZWxlY3Rvcl9jYWNoZSkubWFwKGZ1bmN0aW9uKGYpIHtcbiAgICAgICAgcmV0dXJuIFtmLCB0cmVlLlJlZmVyZW5jZS5lZGl0RGlzdGFuY2UobmFtZSwgZildO1xuICAgIH0pLnNvcnQoZnVuY3Rpb24oYSwgYikgeyByZXR1cm4gYVsxXSAtIGJbMV07IH0pO1xufVxuXG4vLyBzZWNvbmQgYXJndW1lbnQsIGlmIHRydWUsIG91dHB1dHMgdGhlIHZhbHVlIG9mIHRoaXNcbi8vIHJ1bGUgd2l0aG91dCB0aGUgdXN1YWwgYXR0cmlidXRlPVwiY29udGVudFwiIHdyYXBwaW5nLiBSaWdodFxuLy8gbm93IHRoaXMgaXMganVzdCBmb3IgdGhlIFRleHRTeW1ib2xpemVyLCBidXQgYXBwbGllcyB0byBvdGhlclxuLy8gcHJvcGVydGllcyBpbiByZWZlcmVuY2UuanNvbiB3aGljaCBzcGVjaWZ5IHNlcmlhbGl6YXRpb249Y29udGVudFxudHJlZS5SdWxlLnByb3RvdHlwZS50b1hNTCA9IGZ1bmN0aW9uKGVudiwgY29udGVudCwgc2VwLCBmb3JtYXQpIHtcbiAgICBpZiAoIXRyZWUuUmVmZXJlbmNlLnZhbGlkU2VsZWN0b3IodGhpcy5uYW1lKSkge1xuICAgICAgICB2YXIgbWVhbiA9IGdldE1lYW4odGhpcy5uYW1lKTtcbiAgICAgICAgdmFyIG1lYW5fbWVzc2FnZSA9ICcnO1xuICAgICAgICBpZiAobWVhblswXVsxXSA8IDMpIHtcbiAgICAgICAgICAgIG1lYW5fbWVzc2FnZSA9ICcuIERpZCB5b3UgbWVhbiAnICsgbWVhblswXVswXSArICc/JztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZW52LmVycm9yKHtcbiAgICAgICAgICAgIG1lc3NhZ2U6IFwiVW5yZWNvZ25pemVkIHJ1bGU6IFwiICsgdGhpcy5uYW1lICsgbWVhbl9tZXNzYWdlLFxuICAgICAgICAgICAgaW5kZXg6IHRoaXMuaW5kZXgsXG4gICAgICAgICAgICB0eXBlOiAnc3ludGF4JyxcbiAgICAgICAgICAgIGZpbGVuYW1lOiB0aGlzLmZpbGVuYW1lXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmICgodGhpcy52YWx1ZSBpbnN0YW5jZW9mIHRyZWUuVmFsdWUpICYmXG4gICAgICAgICF0cmVlLlJlZmVyZW5jZS52YWxpZFZhbHVlKGVudiwgdGhpcy5uYW1lLCB0aGlzLnZhbHVlKSkge1xuICAgICAgICBpZiAoIXRyZWUuUmVmZXJlbmNlLnNlbGVjdG9yKHRoaXMubmFtZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBlbnYuZXJyb3Ioe1xuICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdVbnJlY29nbml6ZWQgcHJvcGVydHk6ICcgK1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm5hbWUsXG4gICAgICAgICAgICAgICAgaW5kZXg6IHRoaXMuaW5kZXgsXG4gICAgICAgICAgICAgICAgdHlwZTogJ3N5bnRheCcsXG4gICAgICAgICAgICAgICAgZmlsZW5hbWU6IHRoaXMuZmlsZW5hbWVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIHR5cGVuYW1lO1xuICAgICAgICAgICAgaWYgKHRyZWUuUmVmZXJlbmNlLnNlbGVjdG9yKHRoaXMubmFtZSkudmFsaWRhdGUpIHtcbiAgICAgICAgICAgICAgICB0eXBlbmFtZSA9IHRyZWUuUmVmZXJlbmNlLnNlbGVjdG9yKHRoaXMubmFtZSkudmFsaWRhdGU7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiB0cmVlLlJlZmVyZW5jZS5zZWxlY3Rvcih0aGlzLm5hbWUpLnR5cGUgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgdHlwZW5hbWUgPSAna2V5d29yZCAob3B0aW9uczogJyArIHRyZWUuUmVmZXJlbmNlLnNlbGVjdG9yKHRoaXMubmFtZSkudHlwZS5qb2luKCcsICcpICsgJyknO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0eXBlbmFtZSA9IHRyZWUuUmVmZXJlbmNlLnNlbGVjdG9yKHRoaXMubmFtZSkudHlwZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBlbnYuZXJyb3Ioe1xuICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdJbnZhbGlkIHZhbHVlIGZvciAnICtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5uYW1lICtcbiAgICAgICAgICAgICAgICAgICAgJywgdGhlIHR5cGUgJyArIHR5cGVuYW1lICtcbiAgICAgICAgICAgICAgICAgICAgJyBpcyBleHBlY3RlZC4gJyArIHRoaXMudmFsdWUgK1xuICAgICAgICAgICAgICAgICAgICAnIChvZiB0eXBlICcgKyB0aGlzLnZhbHVlLnZhbHVlWzBdLmlzICsgJykgJyArXG4gICAgICAgICAgICAgICAgICAgICcgd2FzIGdpdmVuLicsXG4gICAgICAgICAgICAgICAgaW5kZXg6IHRoaXMuaW5kZXgsXG4gICAgICAgICAgICAgICAgdHlwZTogJ3N5bnRheCcsXG4gICAgICAgICAgICAgICAgZmlsZW5hbWU6IHRoaXMuZmlsZW5hbWVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHRoaXMudmFyaWFibGUpIHtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgIH0gZWxzZSBpZiAodHJlZS5SZWZlcmVuY2UuaXNGb250KHRoaXMubmFtZSkgJiYgdGhpcy52YWx1ZS52YWx1ZS5sZW5ndGggPiAxKSB7XG4gICAgICAgIHZhciBmID0gdHJlZS5fZ2V0Rm9udFNldChlbnYsIHRoaXMudmFsdWUudmFsdWUpO1xuICAgICAgICByZXR1cm4gJ2ZvbnRzZXQtbmFtZT1cIicgKyBmLm5hbWUgKyAnXCInO1xuICAgIH0gZWxzZSBpZiAoY29udGVudCkge1xuICAgICAgICByZXR1cm4gdGhpcy52YWx1ZS50b1N0cmluZyhlbnYsIHRoaXMubmFtZSwgc2VwKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdHJlZS5SZWZlcmVuY2Uuc2VsZWN0b3JOYW1lKHRoaXMubmFtZSkgK1xuICAgICAgICAgICAgJz1cIicgK1xuICAgICAgICAgICAgdGhpcy52YWx1ZS50b1N0cmluZyhlbnYsIHRoaXMubmFtZSkgK1xuICAgICAgICAgICAgJ1wiJztcbiAgICB9XG59O1xuXG4vLyBUT0RPOiBSdWxlIGV2IGNoYWluIHNob3VsZCBhZGQgZm9udHNldHMgdG8gZW52LmZyYW1lc1xudHJlZS5SdWxlLnByb3RvdHlwZS5ldiA9IGZ1bmN0aW9uKGNvbnRleHQpIHtcbiAgICByZXR1cm4gbmV3IHRyZWUuUnVsZSh0aGlzLm5hbWUsXG4gICAgICAgIHRoaXMudmFsdWUuZXYoY29udGV4dCksXG4gICAgICAgIHRoaXMuaW5kZXgsXG4gICAgICAgIHRoaXMuZmlsZW5hbWUpO1xufTtcblxufSkocmVxdWlyZSgnLi4vdHJlZScpKTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jYXJ0by9saWIvY2FydG8vdHJlZS9ydWxlLmpzXG4vLyBtb2R1bGUgaWQgPSAxMDVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 106 */
/* no static exports found */
/* all exports used */
/*!*******************************************!*\
  !*** ./~/carto/lib/carto/tree/ruleset.js ***!
  \*******************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("(function(tree) {\n\ntree.Ruleset = function Ruleset(selectors, rules) {\n    this.selectors = selectors;\n    this.rules = rules;\n    // static cache of find() function\n    this._lookups = {};\n};\ntree.Ruleset.prototype = {\n    is: 'ruleset',\n    'ev': function(env) {\n        var i,\n            ruleset = new tree.Ruleset(this.selectors, this.rules.slice(0));\n        ruleset.root = this.root;\n\n        // push the current ruleset to the frames stack\n        env.frames.unshift(ruleset);\n\n        // Evaluate everything else\n        for (i = 0, rule; i < ruleset.rules.length; i++) {\n            rule = ruleset.rules[i];\n            ruleset.rules[i] = rule.ev ? rule.ev(env) : rule;\n        }\n\n        // Pop the stack\n        env.frames.shift();\n\n        return ruleset;\n    },\n    match: function(args) {\n        return !args || args.length === 0;\n    },\n    variables: function() {\n        if (this._variables) { return this._variables; }\n        else {\n            return this._variables = this.rules.reduce(function(hash, r) {\n                if (r instanceof tree.Rule && r.variable === true) {\n                    hash[r.name] = r;\n                }\n                return hash;\n            }, {});\n        }\n    },\n    variable: function(name) {\n        return this.variables()[name];\n    },\n    rulesets: function() {\n        if (this._rulesets) { return this._rulesets; }\n        else {\n            return this._rulesets = this.rules.filter(function(r) {\n                return (r instanceof tree.Ruleset);\n            });\n        }\n    },\n    find: function(selector, self) {\n        self = self || this;\n        var rules = [], rule, match,\n            key = selector.toString();\n\n        if (key in this._lookups) { return this._lookups[key]; }\n\n        this.rulesets().forEach(function(rule) {\n            if (rule !== self) {\n                for (var j = 0; j < rule.selectors.length; j++) {\n                    match = selector.match(rule.selectors[j]);\n                    if (match) {\n                        if (selector.elements.length > 1) {\n                            Array.prototype.push.apply(rules, rule.find(\n                                new tree.Selector(null, null, null, selector.elements.slice(1)), self));\n                        } else {\n                            rules.push(rule);\n                        }\n                        break;\n                    }\n                }\n            }\n        });\n        return this._lookups[key] = rules;\n    },\n    // Zooms can use variables. This replaces tree.Zoom objects on selectors\n    // with simple bit-arrays that we can compare easily.\n    evZooms: function(env) {\n        for (var i = 0; i < this.selectors.length; i++) {\n            var zval = tree.Zoom.all;\n            for (var z = 0; z < this.selectors[i].zoom.length; z++) {\n                zval = zval & this.selectors[i].zoom[z].ev(env).zoom;\n            }\n            this.selectors[i].zoom = zval;\n        }\n    },\n    flatten: function(result, parents, env) {\n        var selectors = [], i, j;\n        if (this.selectors.length === 0) {\n            env.frames = env.frames.concat(this.rules);\n        }\n        // evaluate zoom variables on this object.\n        this.evZooms(env);\n        for (i = 0; i < this.selectors.length; i++) {\n            var child = this.selectors[i];\n\n            if (!child.filters) {\n                // TODO: is this internal inconsistency?\n                // This is an invalid filterset.\n                continue;\n            }\n\n            if (parents.length) {\n                for (j = 0; j < parents.length; j++) {\n                    var parent = parents[j];\n\n                    var mergedFilters = parent.filters.cloneWith(child.filters);\n                    if (mergedFilters === null) {\n                        // Filters could be added, but they didn't change the\n                        // filters. This means that we only have to clone when\n                        // the zoom levels or the attachment is different too.\n                        if (parent.zoom === (parent.zoom & child.zoom) &&\n                            parent.frame_offset === child.frame_offset &&\n                            parent.attachment === child.attachment &&\n                            parent.elements.join() === child.elements.join()) {\n                            selectors.push(parent);\n                            continue;\n                        } else {\n                            mergedFilters = parent.filters;\n                        }\n                    } else if (!mergedFilters) {\n                        // The merged filters are invalid, that means we don't\n                        // have to clone.\n                        continue;\n                    }\n\n                    var clone = Object.create(tree.Selector.prototype);\n                    clone.filters = mergedFilters;\n                    clone.zoom = parent.zoom & child.zoom;\n                    clone.frame_offset = child.frame_offset;\n                    clone.elements = parent.elements.concat(child.elements);\n                    if (parent.attachment && child.attachment) {\n                        clone.attachment = parent.attachment + '/' + child.attachment;\n                    }\n                    else clone.attachment = child.attachment || parent.attachment;\n                    clone.conditions = parent.conditions + child.conditions;\n                    clone.index = child.index;\n                    selectors.push(clone);\n                }\n            } else {\n                selectors.push(child);\n            }\n        }\n\n        var rules = [];\n        for (i = 0; i < this.rules.length; i++) {\n            var rule = this.rules[i];\n\n            // Recursively flatten any nested rulesets\n            if (rule instanceof tree.Ruleset) {\n                rule.flatten(result, selectors, env);\n            } else if (rule instanceof tree.Rule) {\n                rules.push(rule);\n            } else if (rule instanceof tree.Invalid) {\n                env.error(rule);\n            }\n        }\n\n        var index = rules.length ? rules[0].index : false;\n        for (i = 0; i < selectors.length; i++) {\n            // For specificity sort, use the position of the first rule to allow\n            // defining attachments that are under current element as a descendant\n            // selector.\n            if (index !== false) {\n                selectors[i].index = index;\n            }\n            result.push(new tree.Definition(selectors[i], rules.slice()));\n        }\n\n        return result;\n    }\n};\n})(__webpack_require__(/*! ../tree */ 0));\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 107 */
/* no static exports found */
/* all exports used */
/*!********************************************!*\
  !*** ./~/carto/lib/carto/tree/selector.js ***!
  \********************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("(function(tree) {\n\ntree.Selector = function Selector(filters, zoom, frame_offset, elements, attachment, conditions, index) {\n    this.elements = elements || [];\n    this.attachment = attachment;\n    this.filters = filters || {};\n    this.frame_offset = frame_offset;\n    this.zoom = typeof zoom !== 'undefined' ? zoom : tree.Zoom.all;\n    this.conditions = conditions;\n    this.index = index;\n};\n\n// Determine the specificity of this selector\n// based on the specificity of its elements - calling\n// Element.specificity() in order to do so\n//\n// [ID, Class, Filters, Position in document]\ntree.Selector.prototype.specificity = function() {\n    return this.elements.reduce(function(memo, e) {\n        var spec = e.specificity();\n        memo[0] += spec[0];\n        memo[1] += spec[1];\n        return memo;\n    }, [0, 0, this.conditions, this.index]);\n};\n\n})(__webpack_require__(/*! ../tree */ 0));\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTA3LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9jYXJ0by9saWIvY2FydG8vdHJlZS9zZWxlY3Rvci5qcz8yYTQ5Il0sInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbih0cmVlKSB7XG5cbnRyZWUuU2VsZWN0b3IgPSBmdW5jdGlvbiBTZWxlY3RvcihmaWx0ZXJzLCB6b29tLCBmcmFtZV9vZmZzZXQsIGVsZW1lbnRzLCBhdHRhY2htZW50LCBjb25kaXRpb25zLCBpbmRleCkge1xuICAgIHRoaXMuZWxlbWVudHMgPSBlbGVtZW50cyB8fCBbXTtcbiAgICB0aGlzLmF0dGFjaG1lbnQgPSBhdHRhY2htZW50O1xuICAgIHRoaXMuZmlsdGVycyA9IGZpbHRlcnMgfHwge307XG4gICAgdGhpcy5mcmFtZV9vZmZzZXQgPSBmcmFtZV9vZmZzZXQ7XG4gICAgdGhpcy56b29tID0gdHlwZW9mIHpvb20gIT09ICd1bmRlZmluZWQnID8gem9vbSA6IHRyZWUuWm9vbS5hbGw7XG4gICAgdGhpcy5jb25kaXRpb25zID0gY29uZGl0aW9ucztcbiAgICB0aGlzLmluZGV4ID0gaW5kZXg7XG59O1xuXG4vLyBEZXRlcm1pbmUgdGhlIHNwZWNpZmljaXR5IG9mIHRoaXMgc2VsZWN0b3Jcbi8vIGJhc2VkIG9uIHRoZSBzcGVjaWZpY2l0eSBvZiBpdHMgZWxlbWVudHMgLSBjYWxsaW5nXG4vLyBFbGVtZW50LnNwZWNpZmljaXR5KCkgaW4gb3JkZXIgdG8gZG8gc29cbi8vXG4vLyBbSUQsIENsYXNzLCBGaWx0ZXJzLCBQb3NpdGlvbiBpbiBkb2N1bWVudF1cbnRyZWUuU2VsZWN0b3IucHJvdG90eXBlLnNwZWNpZmljaXR5ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuZWxlbWVudHMucmVkdWNlKGZ1bmN0aW9uKG1lbW8sIGUpIHtcbiAgICAgICAgdmFyIHNwZWMgPSBlLnNwZWNpZmljaXR5KCk7XG4gICAgICAgIG1lbW9bMF0gKz0gc3BlY1swXTtcbiAgICAgICAgbWVtb1sxXSArPSBzcGVjWzFdO1xuICAgICAgICByZXR1cm4gbWVtbztcbiAgICB9LCBbMCwgMCwgdGhpcy5jb25kaXRpb25zLCB0aGlzLmluZGV4XSk7XG59O1xuXG59KShyZXF1aXJlKCcuLi90cmVlJykpO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NhcnRvL2xpYi9jYXJ0by90cmVlL3NlbGVjdG9yLmpzXG4vLyBtb2R1bGUgaWQgPSAxMDdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 108 */
/* no static exports found */
/* all exports used */
/*!*****************************************!*\
  !*** ./~/carto/lib/carto/tree/style.js ***!
  \*****************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global) {(function(tree) {\nvar _ = global._ || __webpack_require__(/*! underscore */ 4);\n\n// Given a style's name, attachment, definitions, and an environment object,\n// return a stringified style for Mapnik\ntree.StyleXML = function(name, attachment, definitions, env) {\n    var existing = {};\n    var image_filters = [], image_filters_inflate = [], direct_image_filters = [], comp_op = [], opacity = [];\n\n    for (var i = 0; i < definitions.length; i++) {\n        for (var j = 0; j < definitions[i].rules.length; j++) {\n            if (definitions[i].rules[j].name === 'image-filters') {\n                image_filters.push(definitions[i].rules[j]);\n            }\n            if (definitions[i].rules[j].name === 'image-filters-inflate') {\n                image_filters_inflate.push(definitions[i].rules[j]);\n            }\n            if (definitions[i].rules[j].name === 'direct-image-filters') {\n                direct_image_filters.push(definitions[i].rules[j]);\n            }\n            if (definitions[i].rules[j].name === 'comp-op') {\n                comp_op.push(definitions[i].rules[j]);\n            }\n            if (definitions[i].rules[j].name === 'opacity') {\n                opacity.push(definitions[i].rules[j]);\n            }\n        }\n    }\n\n    var rules = definitions.map(function(definition) {\n        return definition.toXML(env, existing);\n    });\n\n    var attrs_xml = '';\n\n    if (image_filters.length) {\n        attrs_xml += ' image-filters=\"' + _.chain(image_filters)\n            // prevent identical filters from being duplicated in the style\n            .uniq(function(i) { return i.id; }).map(function(f) {\n            return f.ev(env).toXML(env, true, ',', 'image-filter');\n        }).value().join(',') + '\"';\n    }\n\n    if (image_filters_inflate.length) {\n        attrs_xml += ' image-filters-inflate=\"' + image_filters_inflate[0].value.ev(env).toString() + '\"';\n    }\n\n    if (direct_image_filters.length) {\n        attrs_xml += ' direct-image-filters=\"' + _.chain(direct_image_filters)\n            // prevent identical filters from being duplicated in the style\n            .uniq(function(i) { return i.id; }).map(function(f) {\n            return f.ev(env).toXML(env, true, ',', 'direct-image-filter');\n        }).value().join(',') + '\"';\n    }\n\n    if (comp_op.length && comp_op[0].value.ev(env).value != 'src-over') {\n        attrs_xml += ' comp-op=\"' + comp_op[0].value.ev(env).toString() + '\"';\n    }\n\n    if (opacity.length && opacity[0].value.ev(env).value != 1) {\n        attrs_xml += ' opacity=\"' + opacity[0].value.ev(env).toString() + '\"';\n    }\n    var rule_string = rules.join('');\n    if (!attrs_xml && !rule_string) return '';\n    return '<Style name=\"' + name + '\" filter-mode=\"first\"' + attrs_xml + '>\\n' + rule_string + '</Style>';\n};\n\n})(__webpack_require__(/*! ../tree */ 0));\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./../../../../webpack/buildin/global.js */ 3)))//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTA4LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9jYXJ0by9saWIvY2FydG8vdHJlZS9zdHlsZS5qcz8yNjU0Il0sInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbih0cmVlKSB7XG52YXIgXyA9IGdsb2JhbC5fIHx8IHJlcXVpcmUoJ3VuZGVyc2NvcmUnKTtcblxuLy8gR2l2ZW4gYSBzdHlsZSdzIG5hbWUsIGF0dGFjaG1lbnQsIGRlZmluaXRpb25zLCBhbmQgYW4gZW52aXJvbm1lbnQgb2JqZWN0LFxuLy8gcmV0dXJuIGEgc3RyaW5naWZpZWQgc3R5bGUgZm9yIE1hcG5pa1xudHJlZS5TdHlsZVhNTCA9IGZ1bmN0aW9uKG5hbWUsIGF0dGFjaG1lbnQsIGRlZmluaXRpb25zLCBlbnYpIHtcbiAgICB2YXIgZXhpc3RpbmcgPSB7fTtcbiAgICB2YXIgaW1hZ2VfZmlsdGVycyA9IFtdLCBpbWFnZV9maWx0ZXJzX2luZmxhdGUgPSBbXSwgZGlyZWN0X2ltYWdlX2ZpbHRlcnMgPSBbXSwgY29tcF9vcCA9IFtdLCBvcGFjaXR5ID0gW107XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRlZmluaXRpb25zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgZGVmaW5pdGlvbnNbaV0ucnVsZXMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgIGlmIChkZWZpbml0aW9uc1tpXS5ydWxlc1tqXS5uYW1lID09PSAnaW1hZ2UtZmlsdGVycycpIHtcbiAgICAgICAgICAgICAgICBpbWFnZV9maWx0ZXJzLnB1c2goZGVmaW5pdGlvbnNbaV0ucnVsZXNbal0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGRlZmluaXRpb25zW2ldLnJ1bGVzW2pdLm5hbWUgPT09ICdpbWFnZS1maWx0ZXJzLWluZmxhdGUnKSB7XG4gICAgICAgICAgICAgICAgaW1hZ2VfZmlsdGVyc19pbmZsYXRlLnB1c2goZGVmaW5pdGlvbnNbaV0ucnVsZXNbal0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGRlZmluaXRpb25zW2ldLnJ1bGVzW2pdLm5hbWUgPT09ICdkaXJlY3QtaW1hZ2UtZmlsdGVycycpIHtcbiAgICAgICAgICAgICAgICBkaXJlY3RfaW1hZ2VfZmlsdGVycy5wdXNoKGRlZmluaXRpb25zW2ldLnJ1bGVzW2pdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChkZWZpbml0aW9uc1tpXS5ydWxlc1tqXS5uYW1lID09PSAnY29tcC1vcCcpIHtcbiAgICAgICAgICAgICAgICBjb21wX29wLnB1c2goZGVmaW5pdGlvbnNbaV0ucnVsZXNbal0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGRlZmluaXRpb25zW2ldLnJ1bGVzW2pdLm5hbWUgPT09ICdvcGFjaXR5Jykge1xuICAgICAgICAgICAgICAgIG9wYWNpdHkucHVzaChkZWZpbml0aW9uc1tpXS5ydWxlc1tqXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgcnVsZXMgPSBkZWZpbml0aW9ucy5tYXAoZnVuY3Rpb24oZGVmaW5pdGlvbikge1xuICAgICAgICByZXR1cm4gZGVmaW5pdGlvbi50b1hNTChlbnYsIGV4aXN0aW5nKTtcbiAgICB9KTtcblxuICAgIHZhciBhdHRyc194bWwgPSAnJztcblxuICAgIGlmIChpbWFnZV9maWx0ZXJzLmxlbmd0aCkge1xuICAgICAgICBhdHRyc194bWwgKz0gJyBpbWFnZS1maWx0ZXJzPVwiJyArIF8uY2hhaW4oaW1hZ2VfZmlsdGVycylcbiAgICAgICAgICAgIC8vIHByZXZlbnQgaWRlbnRpY2FsIGZpbHRlcnMgZnJvbSBiZWluZyBkdXBsaWNhdGVkIGluIHRoZSBzdHlsZVxuICAgICAgICAgICAgLnVuaXEoZnVuY3Rpb24oaSkgeyByZXR1cm4gaS5pZDsgfSkubWFwKGZ1bmN0aW9uKGYpIHtcbiAgICAgICAgICAgIHJldHVybiBmLmV2KGVudikudG9YTUwoZW52LCB0cnVlLCAnLCcsICdpbWFnZS1maWx0ZXInKTtcbiAgICAgICAgfSkudmFsdWUoKS5qb2luKCcsJykgKyAnXCInO1xuICAgIH1cblxuICAgIGlmIChpbWFnZV9maWx0ZXJzX2luZmxhdGUubGVuZ3RoKSB7XG4gICAgICAgIGF0dHJzX3htbCArPSAnIGltYWdlLWZpbHRlcnMtaW5mbGF0ZT1cIicgKyBpbWFnZV9maWx0ZXJzX2luZmxhdGVbMF0udmFsdWUuZXYoZW52KS50b1N0cmluZygpICsgJ1wiJztcbiAgICB9XG5cbiAgICBpZiAoZGlyZWN0X2ltYWdlX2ZpbHRlcnMubGVuZ3RoKSB7XG4gICAgICAgIGF0dHJzX3htbCArPSAnIGRpcmVjdC1pbWFnZS1maWx0ZXJzPVwiJyArIF8uY2hhaW4oZGlyZWN0X2ltYWdlX2ZpbHRlcnMpXG4gICAgICAgICAgICAvLyBwcmV2ZW50IGlkZW50aWNhbCBmaWx0ZXJzIGZyb20gYmVpbmcgZHVwbGljYXRlZCBpbiB0aGUgc3R5bGVcbiAgICAgICAgICAgIC51bmlxKGZ1bmN0aW9uKGkpIHsgcmV0dXJuIGkuaWQ7IH0pLm1hcChmdW5jdGlvbihmKSB7XG4gICAgICAgICAgICByZXR1cm4gZi5ldihlbnYpLnRvWE1MKGVudiwgdHJ1ZSwgJywnLCAnZGlyZWN0LWltYWdlLWZpbHRlcicpO1xuICAgICAgICB9KS52YWx1ZSgpLmpvaW4oJywnKSArICdcIic7XG4gICAgfVxuXG4gICAgaWYgKGNvbXBfb3AubGVuZ3RoICYmIGNvbXBfb3BbMF0udmFsdWUuZXYoZW52KS52YWx1ZSAhPSAnc3JjLW92ZXInKSB7XG4gICAgICAgIGF0dHJzX3htbCArPSAnIGNvbXAtb3A9XCInICsgY29tcF9vcFswXS52YWx1ZS5ldihlbnYpLnRvU3RyaW5nKCkgKyAnXCInO1xuICAgIH1cblxuICAgIGlmIChvcGFjaXR5Lmxlbmd0aCAmJiBvcGFjaXR5WzBdLnZhbHVlLmV2KGVudikudmFsdWUgIT0gMSkge1xuICAgICAgICBhdHRyc194bWwgKz0gJyBvcGFjaXR5PVwiJyArIG9wYWNpdHlbMF0udmFsdWUuZXYoZW52KS50b1N0cmluZygpICsgJ1wiJztcbiAgICB9XG4gICAgdmFyIHJ1bGVfc3RyaW5nID0gcnVsZXMuam9pbignJyk7XG4gICAgaWYgKCFhdHRyc194bWwgJiYgIXJ1bGVfc3RyaW5nKSByZXR1cm4gJyc7XG4gICAgcmV0dXJuICc8U3R5bGUgbmFtZT1cIicgKyBuYW1lICsgJ1wiIGZpbHRlci1tb2RlPVwiZmlyc3RcIicgKyBhdHRyc194bWwgKyAnPlxcbicgKyBydWxlX3N0cmluZyArICc8L1N0eWxlPic7XG59O1xuXG59KShyZXF1aXJlKCcuLi90cmVlJykpO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NhcnRvL2xpYi9jYXJ0by90cmVlL3N0eWxlLmpzXG4vLyBtb2R1bGUgaWQgPSAxMDhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBIiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 109 */
/* no static exports found */
/* all exports used */
/*!***************************************!*\
  !*** ./~/carto/lib/carto/tree/url.js ***!
  \***************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("(function(tree) {\n\ntree.URL = function URL(val, paths) {\n    this.value = val;\n    this.paths = paths;\n};\n\ntree.URL.prototype = {\n    is: 'uri',\n    toString: function() {\n        return this.value.toString();\n    },\n    ev: function(ctx) {\n        return new tree.URL(this.value.ev(ctx), this.paths);\n    }\n};\n\n})(__webpack_require__(/*! ../tree */ 0));\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTA5LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9jYXJ0by9saWIvY2FydG8vdHJlZS91cmwuanM/NjNhYiJdLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24odHJlZSkge1xuXG50cmVlLlVSTCA9IGZ1bmN0aW9uIFVSTCh2YWwsIHBhdGhzKSB7XG4gICAgdGhpcy52YWx1ZSA9IHZhbDtcbiAgICB0aGlzLnBhdGhzID0gcGF0aHM7XG59O1xuXG50cmVlLlVSTC5wcm90b3R5cGUgPSB7XG4gICAgaXM6ICd1cmknLFxuICAgIHRvU3RyaW5nOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsdWUudG9TdHJpbmcoKTtcbiAgICB9LFxuICAgIGV2OiBmdW5jdGlvbihjdHgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyB0cmVlLlVSTCh0aGlzLnZhbHVlLmV2KGN0eCksIHRoaXMucGF0aHMpO1xuICAgIH1cbn07XG5cbn0pKHJlcXVpcmUoJy4uL3RyZWUnKSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY2FydG8vbGliL2NhcnRvL3RyZWUvdXJsLmpzXG4vLyBtb2R1bGUgaWQgPSAxMDlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 110 */
/* no static exports found */
/* all exports used */
/*!*****************************************!*\
  !*** ./~/carto/lib/carto/tree/value.js ***!
  \*****************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("(function(tree) {\n\ntree.Value = function Value(value) {\n    this.value = value;\n};\n\ntree.Value.prototype = {\n    is: 'value',\n    ev: function(env) {\n        if (this.value.length === 1) {\n            return this.value[0].ev(env);\n        } else {\n            return new tree.Value(this.value.map(function(v) {\n                return v.ev(env);\n            }));\n        }\n    },\n    toString: function(env, selector, sep, format) {\n        return this.value.map(function(e) {\n            return e.toString(env, format);\n        }).join(sep || ', ');\n    },\n    clone: function() {\n        var obj = Object.create(tree.Value.prototype);\n        if (Array.isArray(obj)) obj.value = this.value.slice();\n        else obj.value = this.value;\n        obj.is = this.is;\n        return obj;\n    },\n\n    toJS: function(env) {\n      //var v = this.value[0].value[0];\n      var val = this.ev(env);\n      var v = val.toString();\n      if(val.is === \"color\" || val.is === 'uri' || val.is === 'string' || val.is === 'keyword') {\n        v = \"'\" + v + \"'\";\n      } else if (val.is === 'field') {\n        // replace [variable] by ctx['variable']\n        v = v.replace(/\\[([^\\]]*)\\]/g, function(matched) {\n            return matched.replace(/\\[(.*)\\]/g, \"data['$1']\");\n        });\n      }else if (val.is === 'call') {\n        v = JSON.stringify({\n            name: val.name,\n            args: val.args\n        })\n      }\n      return \"_value = \" + v + \";\";\n    }\n\n};\n\n})(__webpack_require__(/*! ../tree */ 0));\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTEwLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9jYXJ0by9saWIvY2FydG8vdHJlZS92YWx1ZS5qcz9mNjg1Il0sInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbih0cmVlKSB7XG5cbnRyZWUuVmFsdWUgPSBmdW5jdGlvbiBWYWx1ZSh2YWx1ZSkge1xuICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbn07XG5cbnRyZWUuVmFsdWUucHJvdG90eXBlID0ge1xuICAgIGlzOiAndmFsdWUnLFxuICAgIGV2OiBmdW5jdGlvbihlbnYpIHtcbiAgICAgICAgaWYgKHRoaXMudmFsdWUubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy52YWx1ZVswXS5ldihlbnYpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyB0cmVlLlZhbHVlKHRoaXMudmFsdWUubWFwKGZ1bmN0aW9uKHYpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdi5ldihlbnYpO1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9XG4gICAgfSxcbiAgICB0b1N0cmluZzogZnVuY3Rpb24oZW52LCBzZWxlY3Rvciwgc2VwLCBmb3JtYXQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsdWUubWFwKGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgIHJldHVybiBlLnRvU3RyaW5nKGVudiwgZm9ybWF0KTtcbiAgICAgICAgfSkuam9pbihzZXAgfHwgJywgJyk7XG4gICAgfSxcbiAgICBjbG9uZTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBvYmogPSBPYmplY3QuY3JlYXRlKHRyZWUuVmFsdWUucHJvdG90eXBlKTtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkob2JqKSkgb2JqLnZhbHVlID0gdGhpcy52YWx1ZS5zbGljZSgpO1xuICAgICAgICBlbHNlIG9iai52YWx1ZSA9IHRoaXMudmFsdWU7XG4gICAgICAgIG9iai5pcyA9IHRoaXMuaXM7XG4gICAgICAgIHJldHVybiBvYmo7XG4gICAgfSxcblxuICAgIHRvSlM6IGZ1bmN0aW9uKGVudikge1xuICAgICAgLy92YXIgdiA9IHRoaXMudmFsdWVbMF0udmFsdWVbMF07XG4gICAgICB2YXIgdmFsID0gdGhpcy5ldihlbnYpO1xuICAgICAgdmFyIHYgPSB2YWwudG9TdHJpbmcoKTtcbiAgICAgIGlmKHZhbC5pcyA9PT0gXCJjb2xvclwiIHx8IHZhbC5pcyA9PT0gJ3VyaScgfHwgdmFsLmlzID09PSAnc3RyaW5nJyB8fCB2YWwuaXMgPT09ICdrZXl3b3JkJykge1xuICAgICAgICB2ID0gXCInXCIgKyB2ICsgXCInXCI7XG4gICAgICB9IGVsc2UgaWYgKHZhbC5pcyA9PT0gJ2ZpZWxkJykge1xuICAgICAgICAvLyByZXBsYWNlIFt2YXJpYWJsZV0gYnkgY3R4Wyd2YXJpYWJsZSddXG4gICAgICAgIHYgPSB2LnJlcGxhY2UoL1xcWyhbXlxcXV0qKVxcXS9nLCBmdW5jdGlvbihtYXRjaGVkKSB7XG4gICAgICAgICAgICByZXR1cm4gbWF0Y2hlZC5yZXBsYWNlKC9cXFsoLiopXFxdL2csIFwiZGF0YVsnJDEnXVwiKTtcbiAgICAgICAgfSk7XG4gICAgICB9ZWxzZSBpZiAodmFsLmlzID09PSAnY2FsbCcpIHtcbiAgICAgICAgdiA9IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICAgIG5hbWU6IHZhbC5uYW1lLFxuICAgICAgICAgICAgYXJnczogdmFsLmFyZ3NcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICAgIHJldHVybiBcIl92YWx1ZSA9IFwiICsgdiArIFwiO1wiO1xuICAgIH1cblxufTtcblxufSkocmVxdWlyZSgnLi4vdHJlZScpKTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jYXJ0by9saWIvY2FydG8vdHJlZS92YWx1ZS5qc1xuLy8gbW9kdWxlIGlkID0gMTEwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 111 */
/* no static exports found */
/* all exports used */
/*!********************************************!*\
  !*** ./~/carto/lib/carto/tree/variable.js ***!
  \********************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("(function(tree) {\n\ntree.Variable = function Variable(name, index, filename) {\n    this.name = name;\n    this.index = index;\n    this.filename = filename;\n};\n\ntree.Variable.prototype = {\n    is: 'variable',\n    toString: function() {\n        return this.name;\n    },\n    ev: function(env) {\n        var variable,\n            v,\n            name = this.name;\n\n        if (this._css) return this._css;\n\n        var thisframe = env.frames.filter(function(f) {\n            return f.name == this.name;\n        }.bind(this));\n        if (thisframe.length) {\n            return thisframe[0].value.ev(env);\n        } else {\n            env.error({\n                message: 'variable ' + this.name + ' is undefined',\n                index: this.index,\n                type: 'runtime',\n                filename: this.filename\n            });\n            return {\n                is: 'undefined',\n                value: 'undefined'\n            };\n        }\n    }\n};\n\n})(__webpack_require__(/*! ../tree */ 0));\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTExLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9jYXJ0by9saWIvY2FydG8vdHJlZS92YXJpYWJsZS5qcz9iYWNhIl0sInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbih0cmVlKSB7XG5cbnRyZWUuVmFyaWFibGUgPSBmdW5jdGlvbiBWYXJpYWJsZShuYW1lLCBpbmRleCwgZmlsZW5hbWUpIHtcbiAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgIHRoaXMuaW5kZXggPSBpbmRleDtcbiAgICB0aGlzLmZpbGVuYW1lID0gZmlsZW5hbWU7XG59O1xuXG50cmVlLlZhcmlhYmxlLnByb3RvdHlwZSA9IHtcbiAgICBpczogJ3ZhcmlhYmxlJyxcbiAgICB0b1N0cmluZzogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm5hbWU7XG4gICAgfSxcbiAgICBldjogZnVuY3Rpb24oZW52KSB7XG4gICAgICAgIHZhciB2YXJpYWJsZSxcbiAgICAgICAgICAgIHYsXG4gICAgICAgICAgICBuYW1lID0gdGhpcy5uYW1lO1xuXG4gICAgICAgIGlmICh0aGlzLl9jc3MpIHJldHVybiB0aGlzLl9jc3M7XG5cbiAgICAgICAgdmFyIHRoaXNmcmFtZSA9IGVudi5mcmFtZXMuZmlsdGVyKGZ1bmN0aW9uKGYpIHtcbiAgICAgICAgICAgIHJldHVybiBmLm5hbWUgPT0gdGhpcy5uYW1lO1xuICAgICAgICB9LmJpbmQodGhpcykpO1xuICAgICAgICBpZiAodGhpc2ZyYW1lLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXNmcmFtZVswXS52YWx1ZS5ldihlbnYpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZW52LmVycm9yKHtcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiAndmFyaWFibGUgJyArIHRoaXMubmFtZSArICcgaXMgdW5kZWZpbmVkJyxcbiAgICAgICAgICAgICAgICBpbmRleDogdGhpcy5pbmRleCxcbiAgICAgICAgICAgICAgICB0eXBlOiAncnVudGltZScsXG4gICAgICAgICAgICAgICAgZmlsZW5hbWU6IHRoaXMuZmlsZW5hbWVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBpczogJ3VuZGVmaW5lZCcsXG4gICAgICAgICAgICAgICAgdmFsdWU6ICd1bmRlZmluZWQnXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfVxufTtcblxufSkocmVxdWlyZSgnLi4vdHJlZScpKTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jYXJ0by9saWIvY2FydG8vdHJlZS92YXJpYWJsZS5qc1xuLy8gbW9kdWxlIGlkID0gMTExXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 112 */
/* no static exports found */
/* all exports used */
/*!****************************************!*\
  !*** ./~/carto/lib/carto/tree/zoom.js ***!
  \****************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var tree = __webpack_require__(/*! ../tree */ 0);\n\n// Storage for zoom ranges. Only supports continuous ranges,\n// and stores them as bit-sequences so that they can be combined,\n// inverted, and compared quickly.\ntree.Zoom = function(op, value, index) {\n    this.op = op;\n    this.value = value;\n    this.index = index;\n};\n\ntree.Zoom.prototype.setZoom = function(zoom) {\n    this.zoom = zoom;\n    return this;\n};\n\ntree.Zoom.prototype.ev = function(env) {\n    var start = 0,\n        end = Infinity,\n        value = parseInt(this.value.ev(env).toString(), 10),\n        zoom = 0;\n\n    if (value > tree.Zoom.maxZoom || value < 0) {\n        env.error({\n            message: 'Only zoom levels between 0 and ' +\n                tree.Zoom.maxZoom + ' supported.',\n            index: this.index\n        });\n    }\n\n    switch (this.op) {\n        case '=':\n            this.zoom = 1 << value;\n            return this;\n        case '>':\n            start = value + 1;\n            break;\n        case '>=':\n            start = value;\n            break;\n        case '<':\n            end = value - 1;\n            break;\n        case '<=':\n            end = value;\n            break;\n    }\n    for (var i = 0; i <= tree.Zoom.maxZoom; i++) {\n        if (i >= start && i <= end) {\n            zoom |= (1 << i);\n        }\n    }\n    this.zoom = zoom;\n    return this;\n};\n\ntree.Zoom.prototype.toString = function() {\n    return this.zoom;\n};\n\n// Covers all zoomlevels from 0 to 22\ntree.Zoom.all = 0x7FFFFF;\n\ntree.Zoom.maxZoom = 22;\n\ntree.Zoom.ranges = {\n     0: 1000000000,\n     1: 500000000,\n     2: 200000000,\n     3: 100000000,\n     4: 50000000,\n     5: 25000000,\n     6: 12500000,\n     7: 6500000,\n     8: 3000000,\n     9: 1500000,\n    10: 750000,\n    11: 400000,\n    12: 200000,\n    13: 100000,\n    14: 50000,\n    15: 25000,\n    16: 12500,\n    17: 5000,\n    18: 2500,\n    19: 1500,\n    20: 750,\n    21: 500,\n    22: 250,\n    23: 100\n};\n\n// Only works for single range zooms. `[XXX....XXXXX.........]` is invalid.\ntree.Zoom.prototype.toXML = function() {\n    var conditions = [];\n    if (this.zoom != tree.Zoom.all) {\n        var start = null, end = null;\n        for (var i = 0; i <= tree.Zoom.maxZoom; i++) {\n            if (this.zoom & (1 << i)) {\n                if (start === null) start = i;\n                end = i;\n            }\n        }\n        if (start > 0) conditions.push('    <MaxScaleDenominator>' +\n            tree.Zoom.ranges[start] + '</MaxScaleDenominator>\\n');\n        if (end < 22) conditions.push('    <MinScaleDenominator>' +\n            tree.Zoom.ranges[end + 1] + '</MinScaleDenominator>\\n');\n    }\n    return conditions;\n};\n\ntree.Zoom.prototype.toString = function() {\n    var str = '';\n    for (var i = 0; i <= tree.Zoom.maxZoom; i++) {\n        str += (this.zoom & (1 << i)) ? 'X' : '.';\n    }\n    return str;\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTEyLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9jYXJ0by9saWIvY2FydG8vdHJlZS96b29tLmpzPzdhYTAiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIHRyZWUgPSByZXF1aXJlKCcuLi90cmVlJyk7XG5cbi8vIFN0b3JhZ2UgZm9yIHpvb20gcmFuZ2VzLiBPbmx5IHN1cHBvcnRzIGNvbnRpbnVvdXMgcmFuZ2VzLFxuLy8gYW5kIHN0b3JlcyB0aGVtIGFzIGJpdC1zZXF1ZW5jZXMgc28gdGhhdCB0aGV5IGNhbiBiZSBjb21iaW5lZCxcbi8vIGludmVydGVkLCBhbmQgY29tcGFyZWQgcXVpY2tseS5cbnRyZWUuWm9vbSA9IGZ1bmN0aW9uKG9wLCB2YWx1ZSwgaW5kZXgpIHtcbiAgICB0aGlzLm9wID0gb3A7XG4gICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgIHRoaXMuaW5kZXggPSBpbmRleDtcbn07XG5cbnRyZWUuWm9vbS5wcm90b3R5cGUuc2V0Wm9vbSA9IGZ1bmN0aW9uKHpvb20pIHtcbiAgICB0aGlzLnpvb20gPSB6b29tO1xuICAgIHJldHVybiB0aGlzO1xufTtcblxudHJlZS5ab29tLnByb3RvdHlwZS5ldiA9IGZ1bmN0aW9uKGVudikge1xuICAgIHZhciBzdGFydCA9IDAsXG4gICAgICAgIGVuZCA9IEluZmluaXR5LFxuICAgICAgICB2YWx1ZSA9IHBhcnNlSW50KHRoaXMudmFsdWUuZXYoZW52KS50b1N0cmluZygpLCAxMCksXG4gICAgICAgIHpvb20gPSAwO1xuXG4gICAgaWYgKHZhbHVlID4gdHJlZS5ab29tLm1heFpvb20gfHwgdmFsdWUgPCAwKSB7XG4gICAgICAgIGVudi5lcnJvcih7XG4gICAgICAgICAgICBtZXNzYWdlOiAnT25seSB6b29tIGxldmVscyBiZXR3ZWVuIDAgYW5kICcgK1xuICAgICAgICAgICAgICAgIHRyZWUuWm9vbS5tYXhab29tICsgJyBzdXBwb3J0ZWQuJyxcbiAgICAgICAgICAgIGluZGV4OiB0aGlzLmluZGV4XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHN3aXRjaCAodGhpcy5vcCkge1xuICAgICAgICBjYXNlICc9JzpcbiAgICAgICAgICAgIHRoaXMuem9vbSA9IDEgPDwgdmFsdWU7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgY2FzZSAnPic6XG4gICAgICAgICAgICBzdGFydCA9IHZhbHVlICsgMTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICc+PSc6XG4gICAgICAgICAgICBzdGFydCA9IHZhbHVlO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJzwnOlxuICAgICAgICAgICAgZW5kID0gdmFsdWUgLSAxO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJzw9JzpcbiAgICAgICAgICAgIGVuZCA9IHZhbHVlO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDw9IHRyZWUuWm9vbS5tYXhab29tOyBpKyspIHtcbiAgICAgICAgaWYgKGkgPj0gc3RhcnQgJiYgaSA8PSBlbmQpIHtcbiAgICAgICAgICAgIHpvb20gfD0gKDEgPDwgaSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdGhpcy56b29tID0gem9vbTtcbiAgICByZXR1cm4gdGhpcztcbn07XG5cbnRyZWUuWm9vbS5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy56b29tO1xufTtcblxuLy8gQ292ZXJzIGFsbCB6b29tbGV2ZWxzIGZyb20gMCB0byAyMlxudHJlZS5ab29tLmFsbCA9IDB4N0ZGRkZGO1xuXG50cmVlLlpvb20ubWF4Wm9vbSA9IDIyO1xuXG50cmVlLlpvb20ucmFuZ2VzID0ge1xuICAgICAwOiAxMDAwMDAwMDAwLFxuICAgICAxOiA1MDAwMDAwMDAsXG4gICAgIDI6IDIwMDAwMDAwMCxcbiAgICAgMzogMTAwMDAwMDAwLFxuICAgICA0OiA1MDAwMDAwMCxcbiAgICAgNTogMjUwMDAwMDAsXG4gICAgIDY6IDEyNTAwMDAwLFxuICAgICA3OiA2NTAwMDAwLFxuICAgICA4OiAzMDAwMDAwLFxuICAgICA5OiAxNTAwMDAwLFxuICAgIDEwOiA3NTAwMDAsXG4gICAgMTE6IDQwMDAwMCxcbiAgICAxMjogMjAwMDAwLFxuICAgIDEzOiAxMDAwMDAsXG4gICAgMTQ6IDUwMDAwLFxuICAgIDE1OiAyNTAwMCxcbiAgICAxNjogMTI1MDAsXG4gICAgMTc6IDUwMDAsXG4gICAgMTg6IDI1MDAsXG4gICAgMTk6IDE1MDAsXG4gICAgMjA6IDc1MCxcbiAgICAyMTogNTAwLFxuICAgIDIyOiAyNTAsXG4gICAgMjM6IDEwMFxufTtcblxuLy8gT25seSB3b3JrcyBmb3Igc2luZ2xlIHJhbmdlIHpvb21zLiBgW1hYWC4uLi5YWFhYWC4uLi4uLi4uLl1gIGlzIGludmFsaWQuXG50cmVlLlpvb20ucHJvdG90eXBlLnRvWE1MID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGNvbmRpdGlvbnMgPSBbXTtcbiAgICBpZiAodGhpcy56b29tICE9IHRyZWUuWm9vbS5hbGwpIHtcbiAgICAgICAgdmFyIHN0YXJ0ID0gbnVsbCwgZW5kID0gbnVsbDtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPD0gdHJlZS5ab29tLm1heFpvb207IGkrKykge1xuICAgICAgICAgICAgaWYgKHRoaXMuem9vbSAmICgxIDw8IGkpKSB7XG4gICAgICAgICAgICAgICAgaWYgKHN0YXJ0ID09PSBudWxsKSBzdGFydCA9IGk7XG4gICAgICAgICAgICAgICAgZW5kID0gaTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoc3RhcnQgPiAwKSBjb25kaXRpb25zLnB1c2goJyAgICA8TWF4U2NhbGVEZW5vbWluYXRvcj4nICtcbiAgICAgICAgICAgIHRyZWUuWm9vbS5yYW5nZXNbc3RhcnRdICsgJzwvTWF4U2NhbGVEZW5vbWluYXRvcj5cXG4nKTtcbiAgICAgICAgaWYgKGVuZCA8IDIyKSBjb25kaXRpb25zLnB1c2goJyAgICA8TWluU2NhbGVEZW5vbWluYXRvcj4nICtcbiAgICAgICAgICAgIHRyZWUuWm9vbS5yYW5nZXNbZW5kICsgMV0gKyAnPC9NaW5TY2FsZURlbm9taW5hdG9yPlxcbicpO1xuICAgIH1cbiAgICByZXR1cm4gY29uZGl0aW9ucztcbn07XG5cbnRyZWUuWm9vbS5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgc3RyID0gJyc7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPD0gdHJlZS5ab29tLm1heFpvb207IGkrKykge1xuICAgICAgICBzdHIgKz0gKHRoaXMuem9vbSAmICgxIDw8IGkpKSA/ICdYJyA6ICcuJztcbiAgICB9XG4gICAgcmV0dXJuIHN0cjtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY2FydG8vbGliL2NhcnRvL3RyZWUvem9vbS5qc1xuLy8gbW9kdWxlIGlkID0gMTEyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 113 */
/* no static exports found */
/* all exports used */
/*!********************************************!*\
  !*** ./~/core-js/library/fn/array/from.js ***!
  \********************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("__webpack_require__(/*! ../../modules/es6.string.iterator */ 138);\n__webpack_require__(/*! ../../modules/es6.array.from */ 137);\nmodule.exports = __webpack_require__(/*! ../../modules/_core */ 28).Array.from;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTEzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvZm4vYXJyYXkvZnJvbS5qcz82NjlkIl0sInNvdXJjZXNDb250ZW50IjpbInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM2LnN0cmluZy5pdGVyYXRvcicpO1xucmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczYuYXJyYXkuZnJvbScpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuQXJyYXkuZnJvbTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L2ZuL2FycmF5L2Zyb20uanNcbi8vIG1vZHVsZSBpZCA9IDExM1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 114 */
/* no static exports found */
/* all exports used */
/*!**************************************************!*\
  !*** ./~/core-js/library/modules/_a-function.js ***!
  \**************************************************/
/***/ (function(module, exports) {

eval("module.exports = function(it){\n  if(typeof it != 'function')throw TypeError(it + ' is not a function!');\n  return it;\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTE0LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fYS1mdW5jdGlvbi5qcz9kNTNlIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpe1xuICBpZih0eXBlb2YgaXQgIT0gJ2Z1bmN0aW9uJyl0aHJvdyBUeXBlRXJyb3IoaXQgKyAnIGlzIG5vdCBhIGZ1bmN0aW9uIScpO1xuICByZXR1cm4gaXQ7XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fYS1mdW5jdGlvbi5qc1xuLy8gbW9kdWxlIGlkID0gMTE0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 115 */
/* no static exports found */
/* all exports used */
/*!******************************************************!*\
  !*** ./~/core-js/library/modules/_array-includes.js ***!
  \******************************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("// false -> Array#indexOf\n// true  -> Array#includes\nvar toIObject = __webpack_require__(/*! ./_to-iobject */ 49)\n  , toLength  = __webpack_require__(/*! ./_to-length */ 50)\n  , toIndex   = __webpack_require__(/*! ./_to-index */ 134);\nmodule.exports = function(IS_INCLUDES){\n  return function($this, el, fromIndex){\n    var O      = toIObject($this)\n      , length = toLength(O.length)\n      , index  = toIndex(fromIndex, length)\n      , value;\n    // Array#includes uses SameValueZero equality algorithm\n    if(IS_INCLUDES && el != el)while(length > index){\n      value = O[index++];\n      if(value != value)return true;\n    // Array#toIndex ignores holes, Array#includes - not\n    } else for(;length > index; index++)if(IS_INCLUDES || index in O){\n      if(O[index] === el)return IS_INCLUDES || index || 0;\n    } return !IS_INCLUDES && -1;\n  };\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTE1LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fYXJyYXktaW5jbHVkZXMuanM/NjE5OSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBmYWxzZSAtPiBBcnJheSNpbmRleE9mXG4vLyB0cnVlICAtPiBBcnJheSNpbmNsdWRlc1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKVxuICAsIHRvTGVuZ3RoICA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpXG4gICwgdG9JbmRleCAgID0gcmVxdWlyZSgnLi9fdG8taW5kZXgnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oSVNfSU5DTFVERVMpe1xuICByZXR1cm4gZnVuY3Rpb24oJHRoaXMsIGVsLCBmcm9tSW5kZXgpe1xuICAgIHZhciBPICAgICAgPSB0b0lPYmplY3QoJHRoaXMpXG4gICAgICAsIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKVxuICAgICAgLCBpbmRleCAgPSB0b0luZGV4KGZyb21JbmRleCwgbGVuZ3RoKVxuICAgICAgLCB2YWx1ZTtcbiAgICAvLyBBcnJheSNpbmNsdWRlcyB1c2VzIFNhbWVWYWx1ZVplcm8gZXF1YWxpdHkgYWxnb3JpdGhtXG4gICAgaWYoSVNfSU5DTFVERVMgJiYgZWwgIT0gZWwpd2hpbGUobGVuZ3RoID4gaW5kZXgpe1xuICAgICAgdmFsdWUgPSBPW2luZGV4KytdO1xuICAgICAgaWYodmFsdWUgIT0gdmFsdWUpcmV0dXJuIHRydWU7XG4gICAgLy8gQXJyYXkjdG9JbmRleCBpZ25vcmVzIGhvbGVzLCBBcnJheSNpbmNsdWRlcyAtIG5vdFxuICAgIH0gZWxzZSBmb3IoO2xlbmd0aCA+IGluZGV4OyBpbmRleCsrKWlmKElTX0lOQ0xVREVTIHx8IGluZGV4IGluIE8pe1xuICAgICAgaWYoT1tpbmRleF0gPT09IGVsKXJldHVybiBJU19JTkNMVURFUyB8fCBpbmRleCB8fCAwO1xuICAgIH0gcmV0dXJuICFJU19JTkNMVURFUyAmJiAtMTtcbiAgfTtcbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19hcnJheS1pbmNsdWRlcy5qc1xuLy8gbW9kdWxlIGlkID0gMTE1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 116 */
/* no static exports found */
/* all exports used */
/*!***********************************************!*\
  !*** ./~/core-js/library/modules/_classof.js ***!
  \***********************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("// getting tag from 19.1.3.6 Object.prototype.toString()\nvar cof = __webpack_require__(/*! ./_cof */ 41)\n  , TAG = __webpack_require__(/*! ./_wks */ 5)('toStringTag')\n  // ES3 wrong here\n  , ARG = cof(function(){ return arguments; }()) == 'Arguments';\n\n// fallback for IE11 Script Access Denied error\nvar tryGet = function(it, key){\n  try {\n    return it[key];\n  } catch(e){ /* empty */ }\n};\n\nmodule.exports = function(it){\n  var O, T, B;\n  return it === undefined ? 'Undefined' : it === null ? 'Null'\n    // @@toStringTag case\n    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T\n    // builtinTag case\n    : ARG ? cof(O)\n    // ES3 arguments fallback\n    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTE2LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fY2xhc3NvZi5qcz9iNGIzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGdldHRpbmcgdGFnIGZyb20gMTkuMS4zLjYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZygpXG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJylcbiAgLCBUQUcgPSByZXF1aXJlKCcuL193a3MnKSgndG9TdHJpbmdUYWcnKVxuICAvLyBFUzMgd3JvbmcgaGVyZVxuICAsIEFSRyA9IGNvZihmdW5jdGlvbigpeyByZXR1cm4gYXJndW1lbnRzOyB9KCkpID09ICdBcmd1bWVudHMnO1xuXG4vLyBmYWxsYmFjayBmb3IgSUUxMSBTY3JpcHQgQWNjZXNzIERlbmllZCBlcnJvclxudmFyIHRyeUdldCA9IGZ1bmN0aW9uKGl0LCBrZXkpe1xuICB0cnkge1xuICAgIHJldHVybiBpdFtrZXldO1xuICB9IGNhdGNoKGUpeyAvKiBlbXB0eSAqLyB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXtcbiAgdmFyIE8sIFQsIEI7XG4gIHJldHVybiBpdCA9PT0gdW5kZWZpbmVkID8gJ1VuZGVmaW5lZCcgOiBpdCA9PT0gbnVsbCA/ICdOdWxsJ1xuICAgIC8vIEBAdG9TdHJpbmdUYWcgY2FzZVxuICAgIDogdHlwZW9mIChUID0gdHJ5R2V0KE8gPSBPYmplY3QoaXQpLCBUQUcpKSA9PSAnc3RyaW5nJyA/IFRcbiAgICAvLyBidWlsdGluVGFnIGNhc2VcbiAgICA6IEFSRyA/IGNvZihPKVxuICAgIC8vIEVTMyBhcmd1bWVudHMgZmFsbGJhY2tcbiAgICA6IChCID0gY29mKE8pKSA9PSAnT2JqZWN0JyAmJiB0eXBlb2YgTy5jYWxsZWUgPT0gJ2Z1bmN0aW9uJyA/ICdBcmd1bWVudHMnIDogQjtcbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19jbGFzc29mLmpzXG4vLyBtb2R1bGUgaWQgPSAxMTZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 117 */
/* no static exports found */
/* all exports used */
/*!*******************************************************!*\
  !*** ./~/core-js/library/modules/_create-property.js ***!
  \*******************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar $defineProperty = __webpack_require__(/*! ./_object-dp */ 23)\n  , createDesc      = __webpack_require__(/*! ./_property-desc */ 32);\n\nmodule.exports = function(object, index, value){\n  if(index in object)$defineProperty.f(object, index, createDesc(0, value));\n  else object[index] = value;\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTE3LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fY3JlYXRlLXByb3BlcnR5LmpzPzFhZDEiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xudmFyICRkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpXG4gICwgY3JlYXRlRGVzYyAgICAgID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG9iamVjdCwgaW5kZXgsIHZhbHVlKXtcbiAgaWYoaW5kZXggaW4gb2JqZWN0KSRkZWZpbmVQcm9wZXJ0eS5mKG9iamVjdCwgaW5kZXgsIGNyZWF0ZURlc2MoMCwgdmFsdWUpKTtcbiAgZWxzZSBvYmplY3RbaW5kZXhdID0gdmFsdWU7XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fY3JlYXRlLXByb3BlcnR5LmpzXG4vLyBtb2R1bGUgaWQgPSAxMTdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 118 */
/* no static exports found */
/* all exports used */
/*!********************************************!*\
  !*** ./~/core-js/library/modules/_html.js ***!
  \********************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = __webpack_require__(/*! ./_global */ 10).document && document.documentElement;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTE4LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faHRtbC5qcz9lNWFmIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuZG9jdW1lbnQgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faHRtbC5qc1xuLy8gbW9kdWxlIGlkID0gMTE4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUEiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 119 */
/* no static exports found */
/* all exports used */
/*!******************************************************!*\
  !*** ./~/core-js/library/modules/_ie8-dom-define.js ***!
  \******************************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = !__webpack_require__(/*! ./_descriptors */ 20) && !__webpack_require__(/*! ./_fails */ 46)(function(){\n  return Object.defineProperty(__webpack_require__(/*! ./_dom-create */ 43)('div'), 'a', {get: function(){ return 7; }}).a != 7;\n});//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTE5LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faWU4LWRvbS1kZWZpbmUuanM/YmQxZiJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9ICFyZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uKCl7XG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkocmVxdWlyZSgnLi9fZG9tLWNyZWF0ZScpKCdkaXYnKSwgJ2EnLCB7Z2V0OiBmdW5jdGlvbigpeyByZXR1cm4gNzsgfX0pLmEgIT0gNztcbn0pO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faWU4LWRvbS1kZWZpbmUuanNcbi8vIG1vZHVsZSBpZCA9IDExOVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 120 */
/* no static exports found */
/* all exports used */
/*!***********************************************!*\
  !*** ./~/core-js/library/modules/_iobject.js ***!
  \***********************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("// fallback for non-array-like ES3 and non-enumerable old V8 strings\nvar cof = __webpack_require__(/*! ./_cof */ 41);\nmodule.exports = Object('z').propertyIsEnumerable(0) ? Object : function(it){\n  return cof(it) == 'String' ? it.split('') : Object(it);\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTIwLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faW9iamVjdC5qcz81Y2Y5Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIGZhbGxiYWNrIGZvciBub24tYXJyYXktbGlrZSBFUzMgYW5kIG5vbi1lbnVtZXJhYmxlIG9sZCBWOCBzdHJpbmdzXG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdCgneicpLnByb3BlcnR5SXNFbnVtZXJhYmxlKDApID8gT2JqZWN0IDogZnVuY3Rpb24oaXQpe1xuICByZXR1cm4gY29mKGl0KSA9PSAnU3RyaW5nJyA/IGl0LnNwbGl0KCcnKSA6IE9iamVjdChpdCk7XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faW9iamVjdC5qc1xuLy8gbW9kdWxlIGlkID0gMTIwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 121 */
/* no static exports found */
/* all exports used */
/*!*****************************************************!*\
  !*** ./~/core-js/library/modules/_is-array-iter.js ***!
  \*****************************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("// check on default Array iterator\nvar Iterators  = __webpack_require__(/*! ./_iterators */ 31)\n  , ITERATOR   = __webpack_require__(/*! ./_wks */ 5)('iterator')\n  , ArrayProto = Array.prototype;\n\nmodule.exports = function(it){\n  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTIxLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faXMtYXJyYXktaXRlci5qcz9hNGIzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGNoZWNrIG9uIGRlZmF1bHQgQXJyYXkgaXRlcmF0b3JcbnZhciBJdGVyYXRvcnMgID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJylcbiAgLCBJVEVSQVRPUiAgID0gcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJylcbiAgLCBBcnJheVByb3RvID0gQXJyYXkucHJvdG90eXBlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXtcbiAgcmV0dXJuIGl0ICE9PSB1bmRlZmluZWQgJiYgKEl0ZXJhdG9ycy5BcnJheSA9PT0gaXQgfHwgQXJyYXlQcm90b1tJVEVSQVRPUl0gPT09IGl0KTtcbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pcy1hcnJheS1pdGVyLmpzXG4vLyBtb2R1bGUgaWQgPSAxMjFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 122 */
/* no static exports found */
/* all exports used */
/*!*************************************************!*\
  !*** ./~/core-js/library/modules/_iter-call.js ***!
  \*************************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("// call something on iterator step with safe closing on error\nvar anObject = __webpack_require__(/*! ./_an-object */ 19);\nmodule.exports = function(iterator, fn, value, entries){\n  try {\n    return entries ? fn(anObject(value)[0], value[1]) : fn(value);\n  // 7.4.6 IteratorClose(iterator, completion)\n  } catch(e){\n    var ret = iterator['return'];\n    if(ret !== undefined)anObject(ret.call(iterator));\n    throw e;\n  }\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTIyLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faXRlci1jYWxsLmpzPzUxODkiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gY2FsbCBzb21ldGhpbmcgb24gaXRlcmF0b3Igc3RlcCB3aXRoIHNhZmUgY2xvc2luZyBvbiBlcnJvclxudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0ZXJhdG9yLCBmbiwgdmFsdWUsIGVudHJpZXMpe1xuICB0cnkge1xuICAgIHJldHVybiBlbnRyaWVzID8gZm4oYW5PYmplY3QodmFsdWUpWzBdLCB2YWx1ZVsxXSkgOiBmbih2YWx1ZSk7XG4gIC8vIDcuNC42IEl0ZXJhdG9yQ2xvc2UoaXRlcmF0b3IsIGNvbXBsZXRpb24pXG4gIH0gY2F0Y2goZSl7XG4gICAgdmFyIHJldCA9IGl0ZXJhdG9yWydyZXR1cm4nXTtcbiAgICBpZihyZXQgIT09IHVuZGVmaW5lZClhbk9iamVjdChyZXQuY2FsbChpdGVyYXRvcikpO1xuICAgIHRocm93IGU7XG4gIH1cbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pdGVyLWNhbGwuanNcbi8vIG1vZHVsZSBpZCA9IDEyMlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 123 */
/* no static exports found */
/* all exports used */
/*!***************************************************!*\
  !*** ./~/core-js/library/modules/_iter-create.js ***!
  \***************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar create         = __webpack_require__(/*! ./_object-create */ 127)\n  , descriptor     = __webpack_require__(/*! ./_property-desc */ 32)\n  , setToStringTag = __webpack_require__(/*! ./_set-to-string-tag */ 47)\n  , IteratorPrototype = {};\n\n// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()\n__webpack_require__(/*! ./_hide */ 22)(IteratorPrototype, __webpack_require__(/*! ./_wks */ 5)('iterator'), function(){ return this; });\n\nmodule.exports = function(Constructor, NAME, next){\n  Constructor.prototype = create(IteratorPrototype, {next: descriptor(1, next)});\n  setToStringTag(Constructor, NAME + ' Iterator');\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTIzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faXRlci1jcmVhdGUuanM/MDEyNyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG52YXIgY3JlYXRlICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJylcbiAgLCBkZXNjcmlwdG9yICAgICA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKVxuICAsIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKVxuICAsIEl0ZXJhdG9yUHJvdG90eXBlID0ge307XG5cbi8vIDI1LjEuMi4xLjEgJUl0ZXJhdG9yUHJvdG90eXBlJVtAQGl0ZXJhdG9yXSgpXG5yZXF1aXJlKCcuL19oaWRlJykoSXRlcmF0b3JQcm90b3R5cGUsIHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpLCBmdW5jdGlvbigpeyByZXR1cm4gdGhpczsgfSk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oQ29uc3RydWN0b3IsIE5BTUUsIG5leHQpe1xuICBDb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBjcmVhdGUoSXRlcmF0b3JQcm90b3R5cGUsIHtuZXh0OiBkZXNjcmlwdG9yKDEsIG5leHQpfSk7XG4gIHNldFRvU3RyaW5nVGFnKENvbnN0cnVjdG9yLCBOQU1FICsgJyBJdGVyYXRvcicpO1xufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2l0ZXItY3JlYXRlLmpzXG4vLyBtb2R1bGUgaWQgPSAxMjNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 124 */
/* no static exports found */
/* all exports used */
/*!***************************************************!*\
  !*** ./~/core-js/library/modules/_iter-define.js ***!
  \***************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar LIBRARY        = __webpack_require__(/*! ./_library */ 126)\n  , $export        = __webpack_require__(/*! ./_export */ 45)\n  , redefine       = __webpack_require__(/*! ./_redefine */ 132)\n  , hide           = __webpack_require__(/*! ./_hide */ 22)\n  , has            = __webpack_require__(/*! ./_has */ 21)\n  , Iterators      = __webpack_require__(/*! ./_iterators */ 31)\n  , $iterCreate    = __webpack_require__(/*! ./_iter-create */ 123)\n  , setToStringTag = __webpack_require__(/*! ./_set-to-string-tag */ 47)\n  , getPrototypeOf = __webpack_require__(/*! ./_object-gpo */ 129)\n  , ITERATOR       = __webpack_require__(/*! ./_wks */ 5)('iterator')\n  , BUGGY          = !([].keys && 'next' in [].keys()) // Safari has buggy iterators w/o `next`\n  , FF_ITERATOR    = '@@iterator'\n  , KEYS           = 'keys'\n  , VALUES         = 'values';\n\nvar returnThis = function(){ return this; };\n\nmodule.exports = function(Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED){\n  $iterCreate(Constructor, NAME, next);\n  var getMethod = function(kind){\n    if(!BUGGY && kind in proto)return proto[kind];\n    switch(kind){\n      case KEYS: return function keys(){ return new Constructor(this, kind); };\n      case VALUES: return function values(){ return new Constructor(this, kind); };\n    } return function entries(){ return new Constructor(this, kind); };\n  };\n  var TAG        = NAME + ' Iterator'\n    , DEF_VALUES = DEFAULT == VALUES\n    , VALUES_BUG = false\n    , proto      = Base.prototype\n    , $native    = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT]\n    , $default   = $native || getMethod(DEFAULT)\n    , $entries   = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined\n    , $anyNative = NAME == 'Array' ? proto.entries || $native : $native\n    , methods, key, IteratorPrototype;\n  // Fix native\n  if($anyNative){\n    IteratorPrototype = getPrototypeOf($anyNative.call(new Base));\n    if(IteratorPrototype !== Object.prototype){\n      // Set @@toStringTag to native iterators\n      setToStringTag(IteratorPrototype, TAG, true);\n      // fix for some old engines\n      if(!LIBRARY && !has(IteratorPrototype, ITERATOR))hide(IteratorPrototype, ITERATOR, returnThis);\n    }\n  }\n  // fix Array#{values, @@iterator}.name in V8 / FF\n  if(DEF_VALUES && $native && $native.name !== VALUES){\n    VALUES_BUG = true;\n    $default = function values(){ return $native.call(this); };\n  }\n  // Define iterator\n  if((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])){\n    hide(proto, ITERATOR, $default);\n  }\n  // Plug for library\n  Iterators[NAME] = $default;\n  Iterators[TAG]  = returnThis;\n  if(DEFAULT){\n    methods = {\n      values:  DEF_VALUES ? $default : getMethod(VALUES),\n      keys:    IS_SET     ? $default : getMethod(KEYS),\n      entries: $entries\n    };\n    if(FORCED)for(key in methods){\n      if(!(key in proto))redefine(proto, key, methods[key]);\n    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);\n  }\n  return methods;\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTI0LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faXRlci1kZWZpbmUuanM/OWE5NCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG52YXIgTElCUkFSWSAgICAgICAgPSByZXF1aXJlKCcuL19saWJyYXJ5JylcbiAgLCAkZXhwb3J0ICAgICAgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgcmVkZWZpbmUgICAgICAgPSByZXF1aXJlKCcuL19yZWRlZmluZScpXG4gICwgaGlkZSAgICAgICAgICAgPSByZXF1aXJlKCcuL19oaWRlJylcbiAgLCBoYXMgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2hhcycpXG4gICwgSXRlcmF0b3JzICAgICAgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKVxuICAsICRpdGVyQ3JlYXRlICAgID0gcmVxdWlyZSgnLi9faXRlci1jcmVhdGUnKVxuICAsIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKVxuICAsIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpXG4gICwgSVRFUkFUT1IgICAgICAgPSByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKVxuICAsIEJVR0dZICAgICAgICAgID0gIShbXS5rZXlzICYmICduZXh0JyBpbiBbXS5rZXlzKCkpIC8vIFNhZmFyaSBoYXMgYnVnZ3kgaXRlcmF0b3JzIHcvbyBgbmV4dGBcbiAgLCBGRl9JVEVSQVRPUiAgICA9ICdAQGl0ZXJhdG9yJ1xuICAsIEtFWVMgICAgICAgICAgID0gJ2tleXMnXG4gICwgVkFMVUVTICAgICAgICAgPSAndmFsdWVzJztcblxudmFyIHJldHVyblRoaXMgPSBmdW5jdGlvbigpeyByZXR1cm4gdGhpczsgfTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihCYXNlLCBOQU1FLCBDb25zdHJ1Y3RvciwgbmV4dCwgREVGQVVMVCwgSVNfU0VULCBGT1JDRUQpe1xuICAkaXRlckNyZWF0ZShDb25zdHJ1Y3RvciwgTkFNRSwgbmV4dCk7XG4gIHZhciBnZXRNZXRob2QgPSBmdW5jdGlvbihraW5kKXtcbiAgICBpZighQlVHR1kgJiYga2luZCBpbiBwcm90bylyZXR1cm4gcHJvdG9ba2luZF07XG4gICAgc3dpdGNoKGtpbmQpe1xuICAgICAgY2FzZSBLRVlTOiByZXR1cm4gZnVuY3Rpb24ga2V5cygpeyByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRoaXMsIGtpbmQpOyB9O1xuICAgICAgY2FzZSBWQUxVRVM6IHJldHVybiBmdW5jdGlvbiB2YWx1ZXMoKXsgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih0aGlzLCBraW5kKTsgfTtcbiAgICB9IHJldHVybiBmdW5jdGlvbiBlbnRyaWVzKCl7IHJldHVybiBuZXcgQ29uc3RydWN0b3IodGhpcywga2luZCk7IH07XG4gIH07XG4gIHZhciBUQUcgICAgICAgID0gTkFNRSArICcgSXRlcmF0b3InXG4gICAgLCBERUZfVkFMVUVTID0gREVGQVVMVCA9PSBWQUxVRVNcbiAgICAsIFZBTFVFU19CVUcgPSBmYWxzZVxuICAgICwgcHJvdG8gICAgICA9IEJhc2UucHJvdG90eXBlXG4gICAgLCAkbmF0aXZlICAgID0gcHJvdG9bSVRFUkFUT1JdIHx8IHByb3RvW0ZGX0lURVJBVE9SXSB8fCBERUZBVUxUICYmIHByb3RvW0RFRkFVTFRdXG4gICAgLCAkZGVmYXVsdCAgID0gJG5hdGl2ZSB8fCBnZXRNZXRob2QoREVGQVVMVClcbiAgICAsICRlbnRyaWVzICAgPSBERUZBVUxUID8gIURFRl9WQUxVRVMgPyAkZGVmYXVsdCA6IGdldE1ldGhvZCgnZW50cmllcycpIDogdW5kZWZpbmVkXG4gICAgLCAkYW55TmF0aXZlID0gTkFNRSA9PSAnQXJyYXknID8gcHJvdG8uZW50cmllcyB8fCAkbmF0aXZlIDogJG5hdGl2ZVxuICAgICwgbWV0aG9kcywga2V5LCBJdGVyYXRvclByb3RvdHlwZTtcbiAgLy8gRml4IG5hdGl2ZVxuICBpZigkYW55TmF0aXZlKXtcbiAgICBJdGVyYXRvclByb3RvdHlwZSA9IGdldFByb3RvdHlwZU9mKCRhbnlOYXRpdmUuY2FsbChuZXcgQmFzZSkpO1xuICAgIGlmKEl0ZXJhdG9yUHJvdG90eXBlICE9PSBPYmplY3QucHJvdG90eXBlKXtcbiAgICAgIC8vIFNldCBAQHRvU3RyaW5nVGFnIHRvIG5hdGl2ZSBpdGVyYXRvcnNcbiAgICAgIHNldFRvU3RyaW5nVGFnKEl0ZXJhdG9yUHJvdG90eXBlLCBUQUcsIHRydWUpO1xuICAgICAgLy8gZml4IGZvciBzb21lIG9sZCBlbmdpbmVzXG4gICAgICBpZighTElCUkFSWSAmJiAhaGFzKEl0ZXJhdG9yUHJvdG90eXBlLCBJVEVSQVRPUikpaGlkZShJdGVyYXRvclByb3RvdHlwZSwgSVRFUkFUT1IsIHJldHVyblRoaXMpO1xuICAgIH1cbiAgfVxuICAvLyBmaXggQXJyYXkje3ZhbHVlcywgQEBpdGVyYXRvcn0ubmFtZSBpbiBWOCAvIEZGXG4gIGlmKERFRl9WQUxVRVMgJiYgJG5hdGl2ZSAmJiAkbmF0aXZlLm5hbWUgIT09IFZBTFVFUyl7XG4gICAgVkFMVUVTX0JVRyA9IHRydWU7XG4gICAgJGRlZmF1bHQgPSBmdW5jdGlvbiB2YWx1ZXMoKXsgcmV0dXJuICRuYXRpdmUuY2FsbCh0aGlzKTsgfTtcbiAgfVxuICAvLyBEZWZpbmUgaXRlcmF0b3JcbiAgaWYoKCFMSUJSQVJZIHx8IEZPUkNFRCkgJiYgKEJVR0dZIHx8IFZBTFVFU19CVUcgfHwgIXByb3RvW0lURVJBVE9SXSkpe1xuICAgIGhpZGUocHJvdG8sIElURVJBVE9SLCAkZGVmYXVsdCk7XG4gIH1cbiAgLy8gUGx1ZyBmb3IgbGlicmFyeVxuICBJdGVyYXRvcnNbTkFNRV0gPSAkZGVmYXVsdDtcbiAgSXRlcmF0b3JzW1RBR10gID0gcmV0dXJuVGhpcztcbiAgaWYoREVGQVVMVCl7XG4gICAgbWV0aG9kcyA9IHtcbiAgICAgIHZhbHVlczogIERFRl9WQUxVRVMgPyAkZGVmYXVsdCA6IGdldE1ldGhvZChWQUxVRVMpLFxuICAgICAga2V5czogICAgSVNfU0VUICAgICA/ICRkZWZhdWx0IDogZ2V0TWV0aG9kKEtFWVMpLFxuICAgICAgZW50cmllczogJGVudHJpZXNcbiAgICB9O1xuICAgIGlmKEZPUkNFRClmb3Ioa2V5IGluIG1ldGhvZHMpe1xuICAgICAgaWYoIShrZXkgaW4gcHJvdG8pKXJlZGVmaW5lKHByb3RvLCBrZXksIG1ldGhvZHNba2V5XSk7XG4gICAgfSBlbHNlICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKEJVR0dZIHx8IFZBTFVFU19CVUcpLCBOQU1FLCBtZXRob2RzKTtcbiAgfVxuICByZXR1cm4gbWV0aG9kcztcbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pdGVyLWRlZmluZS5qc1xuLy8gbW9kdWxlIGlkID0gMTI0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 125 */
/* no static exports found */
/* all exports used */
/*!***************************************************!*\
  !*** ./~/core-js/library/modules/_iter-detect.js ***!
  \***************************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var ITERATOR     = __webpack_require__(/*! ./_wks */ 5)('iterator')\n  , SAFE_CLOSING = false;\n\ntry {\n  var riter = [7][ITERATOR]();\n  riter['return'] = function(){ SAFE_CLOSING = true; };\n  Array.from(riter, function(){ throw 2; });\n} catch(e){ /* empty */ }\n\nmodule.exports = function(exec, skipClosing){\n  if(!skipClosing && !SAFE_CLOSING)return false;\n  var safe = false;\n  try {\n    var arr  = [7]\n      , iter = arr[ITERATOR]();\n    iter.next = function(){ return {done: safe = true}; };\n    arr[ITERATOR] = function(){ return iter; };\n    exec(arr);\n  } catch(e){ /* empty */ }\n  return safe;\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTI1LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faXRlci1kZXRlY3QuanM/MGE5MSJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgSVRFUkFUT1IgICAgID0gcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJylcbiAgLCBTQUZFX0NMT1NJTkcgPSBmYWxzZTtcblxudHJ5IHtcbiAgdmFyIHJpdGVyID0gWzddW0lURVJBVE9SXSgpO1xuICByaXRlclsncmV0dXJuJ10gPSBmdW5jdGlvbigpeyBTQUZFX0NMT1NJTkcgPSB0cnVlOyB9O1xuICBBcnJheS5mcm9tKHJpdGVyLCBmdW5jdGlvbigpeyB0aHJvdyAyOyB9KTtcbn0gY2F0Y2goZSl7IC8qIGVtcHR5ICovIH1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihleGVjLCBza2lwQ2xvc2luZyl7XG4gIGlmKCFza2lwQ2xvc2luZyAmJiAhU0FGRV9DTE9TSU5HKXJldHVybiBmYWxzZTtcbiAgdmFyIHNhZmUgPSBmYWxzZTtcbiAgdHJ5IHtcbiAgICB2YXIgYXJyICA9IFs3XVxuICAgICAgLCBpdGVyID0gYXJyW0lURVJBVE9SXSgpO1xuICAgIGl0ZXIubmV4dCA9IGZ1bmN0aW9uKCl7IHJldHVybiB7ZG9uZTogc2FmZSA9IHRydWV9OyB9O1xuICAgIGFycltJVEVSQVRPUl0gPSBmdW5jdGlvbigpeyByZXR1cm4gaXRlcjsgfTtcbiAgICBleGVjKGFycik7XG4gIH0gY2F0Y2goZSl7IC8qIGVtcHR5ICovIH1cbiAgcmV0dXJuIHNhZmU7XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faXRlci1kZXRlY3QuanNcbi8vIG1vZHVsZSBpZCA9IDEyNVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 126 */
/* no static exports found */
/* all exports used */
/*!***********************************************!*\
  !*** ./~/core-js/library/modules/_library.js ***!
  \***********************************************/
/***/ (function(module, exports) {

eval("module.exports = true;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTI2LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fbGlicmFyeS5qcz8yYzgwIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gdHJ1ZTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2xpYnJhcnkuanNcbi8vIG1vZHVsZSBpZCA9IDEyNlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 127 */
/* no static exports found */
/* all exports used */
/*!*****************************************************!*\
  !*** ./~/core-js/library/modules/_object-create.js ***!
  \*****************************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])\nvar anObject    = __webpack_require__(/*! ./_an-object */ 19)\n  , dPs         = __webpack_require__(/*! ./_object-dps */ 128)\n  , enumBugKeys = __webpack_require__(/*! ./_enum-bug-keys */ 44)\n  , IE_PROTO    = __webpack_require__(/*! ./_shared-key */ 33)('IE_PROTO')\n  , Empty       = function(){ /* empty */ }\n  , PROTOTYPE   = 'prototype';\n\n// Create object with fake `null` prototype: use iframe Object with cleared prototype\nvar createDict = function(){\n  // Thrash, waste and sodomy: IE GC bug\n  var iframe = __webpack_require__(/*! ./_dom-create */ 43)('iframe')\n    , i      = enumBugKeys.length\n    , lt     = '<'\n    , gt     = '>'\n    , iframeDocument;\n  iframe.style.display = 'none';\n  __webpack_require__(/*! ./_html */ 118).appendChild(iframe);\n  iframe.src = 'javascript:'; // eslint-disable-line no-script-url\n  // createDict = iframe.contentWindow.Object;\n  // html.removeChild(iframe);\n  iframeDocument = iframe.contentWindow.document;\n  iframeDocument.open();\n  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);\n  iframeDocument.close();\n  createDict = iframeDocument.F;\n  while(i--)delete createDict[PROTOTYPE][enumBugKeys[i]];\n  return createDict();\n};\n\nmodule.exports = Object.create || function create(O, Properties){\n  var result;\n  if(O !== null){\n    Empty[PROTOTYPE] = anObject(O);\n    result = new Empty;\n    Empty[PROTOTYPE] = null;\n    // add \"__proto__\" for Object.getPrototypeOf polyfill\n    result[IE_PROTO] = O;\n  } else result = createDict();\n  return Properties === undefined ? result : dPs(result, Properties);\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTI3LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWNyZWF0ZS5qcz9kOGNmIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIDE5LjEuMi4yIC8gMTUuMi4zLjUgT2JqZWN0LmNyZWF0ZShPIFssIFByb3BlcnRpZXNdKVxudmFyIGFuT2JqZWN0ICAgID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0JylcbiAgLCBkUHMgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1kcHMnKVxuICAsIGVudW1CdWdLZXlzID0gcmVxdWlyZSgnLi9fZW51bS1idWcta2V5cycpXG4gICwgSUVfUFJPVE8gICAgPSByZXF1aXJlKCcuL19zaGFyZWQta2V5JykoJ0lFX1BST1RPJylcbiAgLCBFbXB0eSAgICAgICA9IGZ1bmN0aW9uKCl7IC8qIGVtcHR5ICovIH1cbiAgLCBQUk9UT1RZUEUgICA9ICdwcm90b3R5cGUnO1xuXG4vLyBDcmVhdGUgb2JqZWN0IHdpdGggZmFrZSBgbnVsbGAgcHJvdG90eXBlOiB1c2UgaWZyYW1lIE9iamVjdCB3aXRoIGNsZWFyZWQgcHJvdG90eXBlXG52YXIgY3JlYXRlRGljdCA9IGZ1bmN0aW9uKCl7XG4gIC8vIFRocmFzaCwgd2FzdGUgYW5kIHNvZG9teTogSUUgR0MgYnVnXG4gIHZhciBpZnJhbWUgPSByZXF1aXJlKCcuL19kb20tY3JlYXRlJykoJ2lmcmFtZScpXG4gICAgLCBpICAgICAgPSBlbnVtQnVnS2V5cy5sZW5ndGhcbiAgICAsIGx0ICAgICA9ICc8J1xuICAgICwgZ3QgICAgID0gJz4nXG4gICAgLCBpZnJhbWVEb2N1bWVudDtcbiAgaWZyYW1lLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gIHJlcXVpcmUoJy4vX2h0bWwnKS5hcHBlbmRDaGlsZChpZnJhbWUpO1xuICBpZnJhbWUuc3JjID0gJ2phdmFzY3JpcHQ6JzsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1zY3JpcHQtdXJsXG4gIC8vIGNyZWF0ZURpY3QgPSBpZnJhbWUuY29udGVudFdpbmRvdy5PYmplY3Q7XG4gIC8vIGh0bWwucmVtb3ZlQ2hpbGQoaWZyYW1lKTtcbiAgaWZyYW1lRG9jdW1lbnQgPSBpZnJhbWUuY29udGVudFdpbmRvdy5kb2N1bWVudDtcbiAgaWZyYW1lRG9jdW1lbnQub3BlbigpO1xuICBpZnJhbWVEb2N1bWVudC53cml0ZShsdCArICdzY3JpcHQnICsgZ3QgKyAnZG9jdW1lbnQuRj1PYmplY3QnICsgbHQgKyAnL3NjcmlwdCcgKyBndCk7XG4gIGlmcmFtZURvY3VtZW50LmNsb3NlKCk7XG4gIGNyZWF0ZURpY3QgPSBpZnJhbWVEb2N1bWVudC5GO1xuICB3aGlsZShpLS0pZGVsZXRlIGNyZWF0ZURpY3RbUFJPVE9UWVBFXVtlbnVtQnVnS2V5c1tpXV07XG4gIHJldHVybiBjcmVhdGVEaWN0KCk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5jcmVhdGUgfHwgZnVuY3Rpb24gY3JlYXRlKE8sIFByb3BlcnRpZXMpe1xuICB2YXIgcmVzdWx0O1xuICBpZihPICE9PSBudWxsKXtcbiAgICBFbXB0eVtQUk9UT1RZUEVdID0gYW5PYmplY3QoTyk7XG4gICAgcmVzdWx0ID0gbmV3IEVtcHR5O1xuICAgIEVtcHR5W1BST1RPVFlQRV0gPSBudWxsO1xuICAgIC8vIGFkZCBcIl9fcHJvdG9fX1wiIGZvciBPYmplY3QuZ2V0UHJvdG90eXBlT2YgcG9seWZpbGxcbiAgICByZXN1bHRbSUVfUFJPVE9dID0gTztcbiAgfSBlbHNlIHJlc3VsdCA9IGNyZWF0ZURpY3QoKTtcbiAgcmV0dXJuIFByb3BlcnRpZXMgPT09IHVuZGVmaW5lZCA/IHJlc3VsdCA6IGRQcyhyZXN1bHQsIFByb3BlcnRpZXMpO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWNyZWF0ZS5qc1xuLy8gbW9kdWxlIGlkID0gMTI3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 128 */
/* no static exports found */
/* all exports used */
/*!**************************************************!*\
  !*** ./~/core-js/library/modules/_object-dps.js ***!
  \**************************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var dP       = __webpack_require__(/*! ./_object-dp */ 23)\n  , anObject = __webpack_require__(/*! ./_an-object */ 19)\n  , getKeys  = __webpack_require__(/*! ./_object-keys */ 131);\n\nmodule.exports = __webpack_require__(/*! ./_descriptors */ 20) ? Object.defineProperties : function defineProperties(O, Properties){\n  anObject(O);\n  var keys   = getKeys(Properties)\n    , length = keys.length\n    , i = 0\n    , P;\n  while(length > i)dP.f(O, P = keys[i++], Properties[P]);\n  return O;\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTI4LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWRwcy5qcz80N2ZkIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBkUCAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpXG4gICwgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKVxuICAsIGdldEtleXMgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gT2JqZWN0LmRlZmluZVByb3BlcnRpZXMgOiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKE8sIFByb3BlcnRpZXMpe1xuICBhbk9iamVjdChPKTtcbiAgdmFyIGtleXMgICA9IGdldEtleXMoUHJvcGVydGllcylcbiAgICAsIGxlbmd0aCA9IGtleXMubGVuZ3RoXG4gICAgLCBpID0gMFxuICAgICwgUDtcbiAgd2hpbGUobGVuZ3RoID4gaSlkUC5mKE8sIFAgPSBrZXlzW2krK10sIFByb3BlcnRpZXNbUF0pO1xuICByZXR1cm4gTztcbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtZHBzLmpzXG4vLyBtb2R1bGUgaWQgPSAxMjhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 129 */
/* no static exports found */
/* all exports used */
/*!**************************************************!*\
  !*** ./~/core-js/library/modules/_object-gpo.js ***!
  \**************************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)\nvar has         = __webpack_require__(/*! ./_has */ 21)\n  , toObject    = __webpack_require__(/*! ./_to-object */ 51)\n  , IE_PROTO    = __webpack_require__(/*! ./_shared-key */ 33)('IE_PROTO')\n  , ObjectProto = Object.prototype;\n\nmodule.exports = Object.getPrototypeOf || function(O){\n  O = toObject(O);\n  if(has(O, IE_PROTO))return O[IE_PROTO];\n  if(typeof O.constructor == 'function' && O instanceof O.constructor){\n    return O.constructor.prototype;\n  } return O instanceof Object ? ObjectProto : null;\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTI5LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWdwby5qcz9kNDdkIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIDE5LjEuMi45IC8gMTUuMi4zLjIgT2JqZWN0LmdldFByb3RvdHlwZU9mKE8pXG52YXIgaGFzICAgICAgICAgPSByZXF1aXJlKCcuL19oYXMnKVxuICAsIHRvT2JqZWN0ICAgID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0JylcbiAgLCBJRV9QUk9UTyAgICA9IHJlcXVpcmUoJy4vX3NoYXJlZC1rZXknKSgnSUVfUFJPVE8nKVxuICAsIE9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24oTyl7XG4gIE8gPSB0b09iamVjdChPKTtcbiAgaWYoaGFzKE8sIElFX1BST1RPKSlyZXR1cm4gT1tJRV9QUk9UT107XG4gIGlmKHR5cGVvZiBPLmNvbnN0cnVjdG9yID09ICdmdW5jdGlvbicgJiYgTyBpbnN0YW5jZW9mIE8uY29uc3RydWN0b3Ipe1xuICAgIHJldHVybiBPLmNvbnN0cnVjdG9yLnByb3RvdHlwZTtcbiAgfSByZXR1cm4gTyBpbnN0YW5jZW9mIE9iamVjdCA/IE9iamVjdFByb3RvIDogbnVsbDtcbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtZ3BvLmpzXG4vLyBtb2R1bGUgaWQgPSAxMjlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 130 */
/* no static exports found */
/* all exports used */
/*!************************************************************!*\
  !*** ./~/core-js/library/modules/_object-keys-internal.js ***!
  \************************************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var has          = __webpack_require__(/*! ./_has */ 21)\n  , toIObject    = __webpack_require__(/*! ./_to-iobject */ 49)\n  , arrayIndexOf = __webpack_require__(/*! ./_array-includes */ 115)(false)\n  , IE_PROTO     = __webpack_require__(/*! ./_shared-key */ 33)('IE_PROTO');\n\nmodule.exports = function(object, names){\n  var O      = toIObject(object)\n    , i      = 0\n    , result = []\n    , key;\n  for(key in O)if(key != IE_PROTO)has(O, key) && result.push(key);\n  // Don't enum bug & hidden keys\n  while(names.length > i)if(has(O, key = names[i++])){\n    ~arrayIndexOf(result, key) || result.push(key);\n  }\n  return result;\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTMwLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWtleXMtaW50ZXJuYWwuanM/ZmNlYSJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgaGFzICAgICAgICAgID0gcmVxdWlyZSgnLi9faGFzJylcbiAgLCB0b0lPYmplY3QgICAgPSByZXF1aXJlKCcuL190by1pb2JqZWN0JylcbiAgLCBhcnJheUluZGV4T2YgPSByZXF1aXJlKCcuL19hcnJheS1pbmNsdWRlcycpKGZhbHNlKVxuICAsIElFX1BST1RPICAgICA9IHJlcXVpcmUoJy4vX3NoYXJlZC1rZXknKSgnSUVfUFJPVE8nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihvYmplY3QsIG5hbWVzKXtcbiAgdmFyIE8gICAgICA9IHRvSU9iamVjdChvYmplY3QpXG4gICAgLCBpICAgICAgPSAwXG4gICAgLCByZXN1bHQgPSBbXVxuICAgICwga2V5O1xuICBmb3Ioa2V5IGluIE8paWYoa2V5ICE9IElFX1BST1RPKWhhcyhPLCBrZXkpICYmIHJlc3VsdC5wdXNoKGtleSk7XG4gIC8vIERvbid0IGVudW0gYnVnICYgaGlkZGVuIGtleXNcbiAgd2hpbGUobmFtZXMubGVuZ3RoID4gaSlpZihoYXMoTywga2V5ID0gbmFtZXNbaSsrXSkpe1xuICAgIH5hcnJheUluZGV4T2YocmVzdWx0LCBrZXkpIHx8IHJlc3VsdC5wdXNoKGtleSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3Qta2V5cy1pbnRlcm5hbC5qc1xuLy8gbW9kdWxlIGlkID0gMTMwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 131 */
/* no static exports found */
/* all exports used */
/*!***************************************************!*\
  !*** ./~/core-js/library/modules/_object-keys.js ***!
  \***************************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("// 19.1.2.14 / 15.2.3.14 Object.keys(O)\nvar $keys       = __webpack_require__(/*! ./_object-keys-internal */ 130)\n  , enumBugKeys = __webpack_require__(/*! ./_enum-bug-keys */ 44);\n\nmodule.exports = Object.keys || function keys(O){\n  return $keys(O, enumBugKeys);\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTMxLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWtleXMuanM/ZjViYyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyAxOS4xLjIuMTQgLyAxNS4yLjMuMTQgT2JqZWN0LmtleXMoTylcbnZhciAka2V5cyAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzLWludGVybmFsJylcbiAgLCBlbnVtQnVnS2V5cyA9IHJlcXVpcmUoJy4vX2VudW0tYnVnLWtleXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3Qua2V5cyB8fCBmdW5jdGlvbiBrZXlzKE8pe1xuICByZXR1cm4gJGtleXMoTywgZW51bUJ1Z0tleXMpO1xufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1rZXlzLmpzXG4vLyBtb2R1bGUgaWQgPSAxMzFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 132 */
/* no static exports found */
/* all exports used */
/*!************************************************!*\
  !*** ./~/core-js/library/modules/_redefine.js ***!
  \************************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = __webpack_require__(/*! ./_hide */ 22);//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTMyLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fcmVkZWZpbmUuanM/MTQ1NSJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3JlZGVmaW5lLmpzXG4vLyBtb2R1bGUgaWQgPSAxMzJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQSIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 133 */
/* no static exports found */
/* all exports used */
/*!*************************************************!*\
  !*** ./~/core-js/library/modules/_string-at.js ***!
  \*************************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var toInteger = __webpack_require__(/*! ./_to-integer */ 34)\n  , defined   = __webpack_require__(/*! ./_defined */ 29);\n// true  -> String#at\n// false -> String#codePointAt\nmodule.exports = function(TO_STRING){\n  return function(that, pos){\n    var s = String(defined(that))\n      , i = toInteger(pos)\n      , l = s.length\n      , a, b;\n    if(i < 0 || i >= l)return TO_STRING ? '' : undefined;\n    a = s.charCodeAt(i);\n    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff\n      ? TO_STRING ? s.charAt(i) : a\n      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;\n  };\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTMzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fc3RyaW5nLWF0LmpzPzQxM2EiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKVxuICAsIGRlZmluZWQgICA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbi8vIHRydWUgIC0+IFN0cmluZyNhdFxuLy8gZmFsc2UgLT4gU3RyaW5nI2NvZGVQb2ludEF0XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKFRPX1NUUklORyl7XG4gIHJldHVybiBmdW5jdGlvbih0aGF0LCBwb3Mpe1xuICAgIHZhciBzID0gU3RyaW5nKGRlZmluZWQodGhhdCkpXG4gICAgICAsIGkgPSB0b0ludGVnZXIocG9zKVxuICAgICAgLCBsID0gcy5sZW5ndGhcbiAgICAgICwgYSwgYjtcbiAgICBpZihpIDwgMCB8fCBpID49IGwpcmV0dXJuIFRPX1NUUklORyA/ICcnIDogdW5kZWZpbmVkO1xuICAgIGEgPSBzLmNoYXJDb2RlQXQoaSk7XG4gICAgcmV0dXJuIGEgPCAweGQ4MDAgfHwgYSA+IDB4ZGJmZiB8fCBpICsgMSA9PT0gbCB8fCAoYiA9IHMuY2hhckNvZGVBdChpICsgMSkpIDwgMHhkYzAwIHx8IGIgPiAweGRmZmZcbiAgICAgID8gVE9fU1RSSU5HID8gcy5jaGFyQXQoaSkgOiBhXG4gICAgICA6IFRPX1NUUklORyA/IHMuc2xpY2UoaSwgaSArIDIpIDogKGEgLSAweGQ4MDAgPDwgMTApICsgKGIgLSAweGRjMDApICsgMHgxMDAwMDtcbiAgfTtcbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19zdHJpbmctYXQuanNcbi8vIG1vZHVsZSBpZCA9IDEzM1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 134 */
/* no static exports found */
/* all exports used */
/*!************************************************!*\
  !*** ./~/core-js/library/modules/_to-index.js ***!
  \************************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var toInteger = __webpack_require__(/*! ./_to-integer */ 34)\n  , max       = Math.max\n  , min       = Math.min;\nmodule.exports = function(index, length){\n  index = toInteger(index);\n  return index < 0 ? max(index + length, 0) : min(index, length);\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTM0LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fdG8taW5kZXguanM/OWZkNCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpXG4gICwgbWF4ICAgICAgID0gTWF0aC5tYXhcbiAgLCBtaW4gICAgICAgPSBNYXRoLm1pbjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaW5kZXgsIGxlbmd0aCl7XG4gIGluZGV4ID0gdG9JbnRlZ2VyKGluZGV4KTtcbiAgcmV0dXJuIGluZGV4IDwgMCA/IG1heChpbmRleCArIGxlbmd0aCwgMCkgOiBtaW4oaW5kZXgsIGxlbmd0aCk7XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fdG8taW5kZXguanNcbi8vIG1vZHVsZSBpZCA9IDEzNFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 135 */
/* no static exports found */
/* all exports used */
/*!****************************************************!*\
  !*** ./~/core-js/library/modules/_to-primitive.js ***!
  \****************************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("// 7.1.1 ToPrimitive(input [, PreferredType])\nvar isObject = __webpack_require__(/*! ./_is-object */ 30);\n// instead of the ES6 spec version, we didn't implement @@toPrimitive case\n// and the second argument - flag - preferred type is a string\nmodule.exports = function(it, S){\n  if(!isObject(it))return it;\n  var fn, val;\n  if(S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;\n  if(typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it)))return val;\n  if(!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;\n  throw TypeError(\"Can't convert object to primitive value\");\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTM1LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fdG8tcHJpbWl0aXZlLmpzPzQ5YTQiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gNy4xLjEgVG9QcmltaXRpdmUoaW5wdXQgWywgUHJlZmVycmVkVHlwZV0pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbi8vIGluc3RlYWQgb2YgdGhlIEVTNiBzcGVjIHZlcnNpb24sIHdlIGRpZG4ndCBpbXBsZW1lbnQgQEB0b1ByaW1pdGl2ZSBjYXNlXG4vLyBhbmQgdGhlIHNlY29uZCBhcmd1bWVudCAtIGZsYWcgLSBwcmVmZXJyZWQgdHlwZSBpcyBhIHN0cmluZ1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCwgUyl7XG4gIGlmKCFpc09iamVjdChpdCkpcmV0dXJuIGl0O1xuICB2YXIgZm4sIHZhbDtcbiAgaWYoUyAmJiB0eXBlb2YgKGZuID0gaXQudG9TdHJpbmcpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaXQpKSlyZXR1cm4gdmFsO1xuICBpZih0eXBlb2YgKGZuID0gaXQudmFsdWVPZikgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKXJldHVybiB2YWw7XG4gIGlmKCFTICYmIHR5cGVvZiAoZm4gPSBpdC50b1N0cmluZykgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKXJldHVybiB2YWw7XG4gIHRocm93IFR5cGVFcnJvcihcIkNhbid0IGNvbnZlcnQgb2JqZWN0IHRvIHByaW1pdGl2ZSB2YWx1ZVwiKTtcbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL190by1wcmltaXRpdmUuanNcbi8vIG1vZHVsZSBpZCA9IDEzNVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 136 */
/* no static exports found */
/* all exports used */
/*!***************************************************************!*\
  !*** ./~/core-js/library/modules/core.get-iterator-method.js ***!
  \***************************************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var classof   = __webpack_require__(/*! ./_classof */ 116)\n  , ITERATOR  = __webpack_require__(/*! ./_wks */ 5)('iterator')\n  , Iterators = __webpack_require__(/*! ./_iterators */ 31);\nmodule.exports = __webpack_require__(/*! ./_core */ 28).getIteratorMethod = function(it){\n  if(it != undefined)return it[ITERATOR]\n    || it['@@iterator']\n    || Iterators[classof(it)];\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTM2LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9jb3JlLmdldC1pdGVyYXRvci1tZXRob2QuanM/OWM4OCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgY2xhc3NvZiAgID0gcmVxdWlyZSgnLi9fY2xhc3NvZicpXG4gICwgSVRFUkFUT1IgID0gcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJylcbiAgLCBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fY29yZScpLmdldEl0ZXJhdG9yTWV0aG9kID0gZnVuY3Rpb24oaXQpe1xuICBpZihpdCAhPSB1bmRlZmluZWQpcmV0dXJuIGl0W0lURVJBVE9SXVxuICAgIHx8IGl0WydAQGl0ZXJhdG9yJ11cbiAgICB8fCBJdGVyYXRvcnNbY2xhc3NvZihpdCldO1xufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvY29yZS5nZXQtaXRlcmF0b3ItbWV0aG9kLmpzXG4vLyBtb2R1bGUgaWQgPSAxMzZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 137 */
/* no static exports found */
/* all exports used */
/*!*****************************************************!*\
  !*** ./~/core-js/library/modules/es6.array.from.js ***!
  \*****************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar ctx            = __webpack_require__(/*! ./_ctx */ 42)\n  , $export        = __webpack_require__(/*! ./_export */ 45)\n  , toObject       = __webpack_require__(/*! ./_to-object */ 51)\n  , call           = __webpack_require__(/*! ./_iter-call */ 122)\n  , isArrayIter    = __webpack_require__(/*! ./_is-array-iter */ 121)\n  , toLength       = __webpack_require__(/*! ./_to-length */ 50)\n  , createProperty = __webpack_require__(/*! ./_create-property */ 117)\n  , getIterFn      = __webpack_require__(/*! ./core.get-iterator-method */ 136);\n\n$export($export.S + $export.F * !__webpack_require__(/*! ./_iter-detect */ 125)(function(iter){ Array.from(iter); }), 'Array', {\n  // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)\n  from: function from(arrayLike/*, mapfn = undefined, thisArg = undefined*/){\n    var O       = toObject(arrayLike)\n      , C       = typeof this == 'function' ? this : Array\n      , aLen    = arguments.length\n      , mapfn   = aLen > 1 ? arguments[1] : undefined\n      , mapping = mapfn !== undefined\n      , index   = 0\n      , iterFn  = getIterFn(O)\n      , length, result, step, iterator;\n    if(mapping)mapfn = ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2);\n    // if object isn't iterable or it's array with default iterator - use simple case\n    if(iterFn != undefined && !(C == Array && isArrayIter(iterFn))){\n      for(iterator = iterFn.call(O), result = new C; !(step = iterator.next()).done; index++){\n        createProperty(result, index, mapping ? call(iterator, mapfn, [step.value, index], true) : step.value);\n      }\n    } else {\n      length = toLength(O.length);\n      for(result = new C(length); length > index; index++){\n        createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);\n      }\n    }\n    result.length = index;\n    return result;\n  }\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTM3LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYuYXJyYXkuZnJvbS5qcz9jZTdkIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcbnZhciBjdHggICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2N0eCcpXG4gICwgJGV4cG9ydCAgICAgICAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIHRvT2JqZWN0ICAgICAgID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0JylcbiAgLCBjYWxsICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2l0ZXItY2FsbCcpXG4gICwgaXNBcnJheUl0ZXIgICAgPSByZXF1aXJlKCcuL19pcy1hcnJheS1pdGVyJylcbiAgLCB0b0xlbmd0aCAgICAgICA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpXG4gICwgY3JlYXRlUHJvcGVydHkgPSByZXF1aXJlKCcuL19jcmVhdGUtcHJvcGVydHknKVxuICAsIGdldEl0ZXJGbiAgICAgID0gcmVxdWlyZSgnLi9jb3JlLmdldC1pdGVyYXRvci1tZXRob2QnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9faXRlci1kZXRlY3QnKShmdW5jdGlvbihpdGVyKXsgQXJyYXkuZnJvbShpdGVyKTsgfSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4yLjEgQXJyYXkuZnJvbShhcnJheUxpa2UsIG1hcGZuID0gdW5kZWZpbmVkLCB0aGlzQXJnID0gdW5kZWZpbmVkKVxuICBmcm9tOiBmdW5jdGlvbiBmcm9tKGFycmF5TGlrZS8qLCBtYXBmbiA9IHVuZGVmaW5lZCwgdGhpc0FyZyA9IHVuZGVmaW5lZCovKXtcbiAgICB2YXIgTyAgICAgICA9IHRvT2JqZWN0KGFycmF5TGlrZSlcbiAgICAgICwgQyAgICAgICA9IHR5cGVvZiB0aGlzID09ICdmdW5jdGlvbicgPyB0aGlzIDogQXJyYXlcbiAgICAgICwgYUxlbiAgICA9IGFyZ3VtZW50cy5sZW5ndGhcbiAgICAgICwgbWFwZm4gICA9IGFMZW4gPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkXG4gICAgICAsIG1hcHBpbmcgPSBtYXBmbiAhPT0gdW5kZWZpbmVkXG4gICAgICAsIGluZGV4ICAgPSAwXG4gICAgICAsIGl0ZXJGbiAgPSBnZXRJdGVyRm4oTylcbiAgICAgICwgbGVuZ3RoLCByZXN1bHQsIHN0ZXAsIGl0ZXJhdG9yO1xuICAgIGlmKG1hcHBpbmcpbWFwZm4gPSBjdHgobWFwZm4sIGFMZW4gPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkLCAyKTtcbiAgICAvLyBpZiBvYmplY3QgaXNuJ3QgaXRlcmFibGUgb3IgaXQncyBhcnJheSB3aXRoIGRlZmF1bHQgaXRlcmF0b3IgLSB1c2Ugc2ltcGxlIGNhc2VcbiAgICBpZihpdGVyRm4gIT0gdW5kZWZpbmVkICYmICEoQyA9PSBBcnJheSAmJiBpc0FycmF5SXRlcihpdGVyRm4pKSl7XG4gICAgICBmb3IoaXRlcmF0b3IgPSBpdGVyRm4uY2FsbChPKSwgcmVzdWx0ID0gbmV3IEM7ICEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZTsgaW5kZXgrKyl7XG4gICAgICAgIGNyZWF0ZVByb3BlcnR5KHJlc3VsdCwgaW5kZXgsIG1hcHBpbmcgPyBjYWxsKGl0ZXJhdG9yLCBtYXBmbiwgW3N0ZXAudmFsdWUsIGluZGV4XSwgdHJ1ZSkgOiBzdGVwLnZhbHVlKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICAgICAgZm9yKHJlc3VsdCA9IG5ldyBDKGxlbmd0aCk7IGxlbmd0aCA+IGluZGV4OyBpbmRleCsrKXtcbiAgICAgICAgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBpbmRleCwgbWFwcGluZyA/IG1hcGZuKE9baW5kZXhdLCBpbmRleCkgOiBPW2luZGV4XSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJlc3VsdC5sZW5ndGggPSBpbmRleDtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYuYXJyYXkuZnJvbS5qc1xuLy8gbW9kdWxlIGlkID0gMTM3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 138 */
/* no static exports found */
/* all exports used */
/*!**********************************************************!*\
  !*** ./~/core-js/library/modules/es6.string.iterator.js ***!
  \**********************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar $at  = __webpack_require__(/*! ./_string-at */ 133)(true);\n\n// 21.1.3.27 String.prototype[@@iterator]()\n__webpack_require__(/*! ./_iter-define */ 124)(String, 'String', function(iterated){\n  this._t = String(iterated); // target\n  this._i = 0;                // next index\n// 21.1.5.2.1 %StringIteratorPrototype%.next()\n}, function(){\n  var O     = this._t\n    , index = this._i\n    , point;\n  if(index >= O.length)return {value: undefined, done: true};\n  point = $at(O, index);\n  this._i += point.length;\n  return {value: point, done: false};\n});//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTM4LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYuc3RyaW5nLml0ZXJhdG9yLmpzP2ZlMTgiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xudmFyICRhdCAgPSByZXF1aXJlKCcuL19zdHJpbmctYXQnKSh0cnVlKTtcblxuLy8gMjEuMS4zLjI3IFN0cmluZy5wcm90b3R5cGVbQEBpdGVyYXRvcl0oKVxucmVxdWlyZSgnLi9faXRlci1kZWZpbmUnKShTdHJpbmcsICdTdHJpbmcnLCBmdW5jdGlvbihpdGVyYXRlZCl7XG4gIHRoaXMuX3QgPSBTdHJpbmcoaXRlcmF0ZWQpOyAvLyB0YXJnZXRcbiAgdGhpcy5faSA9IDA7ICAgICAgICAgICAgICAgIC8vIG5leHQgaW5kZXhcbi8vIDIxLjEuNS4yLjEgJVN0cmluZ0l0ZXJhdG9yUHJvdG90eXBlJS5uZXh0KClcbn0sIGZ1bmN0aW9uKCl7XG4gIHZhciBPICAgICA9IHRoaXMuX3RcbiAgICAsIGluZGV4ID0gdGhpcy5faVxuICAgICwgcG9pbnQ7XG4gIGlmKGluZGV4ID49IE8ubGVuZ3RoKXJldHVybiB7dmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZX07XG4gIHBvaW50ID0gJGF0KE8sIGluZGV4KTtcbiAgdGhpcy5faSArPSBwb2ludC5sZW5ndGg7XG4gIHJldHVybiB7dmFsdWU6IHBvaW50LCBkb25lOiBmYWxzZX07XG59KTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM2LnN0cmluZy5pdGVyYXRvci5qc1xuLy8gbW9kdWxlIGlkID0gMTM4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 139 */
/* no static exports found */
/* all exports used */
/*!**************************!*\
  !*** ./~/crypt/crypt.js ***!
  \**************************/
/***/ (function(module, exports) {

eval("(function() {\n  var base64map\n      = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',\n\n  crypt = {\n    // Bit-wise rotation left\n    rotl: function(n, b) {\n      return (n << b) | (n >>> (32 - b));\n    },\n\n    // Bit-wise rotation right\n    rotr: function(n, b) {\n      return (n << (32 - b)) | (n >>> b);\n    },\n\n    // Swap big-endian to little-endian and vice versa\n    endian: function(n) {\n      // If number given, swap endian\n      if (n.constructor == Number) {\n        return crypt.rotl(n, 8) & 0x00FF00FF | crypt.rotl(n, 24) & 0xFF00FF00;\n      }\n\n      // Else, assume array and swap all items\n      for (var i = 0; i < n.length; i++)\n        n[i] = crypt.endian(n[i]);\n      return n;\n    },\n\n    // Generate an array of any length of random bytes\n    randomBytes: function(n) {\n      for (var bytes = []; n > 0; n--)\n        bytes.push(Math.floor(Math.random() * 256));\n      return bytes;\n    },\n\n    // Convert a byte array to big-endian 32-bit words\n    bytesToWords: function(bytes) {\n      for (var words = [], i = 0, b = 0; i < bytes.length; i++, b += 8)\n        words[b >>> 5] |= bytes[i] << (24 - b % 32);\n      return words;\n    },\n\n    // Convert big-endian 32-bit words to a byte array\n    wordsToBytes: function(words) {\n      for (var bytes = [], b = 0; b < words.length * 32; b += 8)\n        bytes.push((words[b >>> 5] >>> (24 - b % 32)) & 0xFF);\n      return bytes;\n    },\n\n    // Convert a byte array to a hex string\n    bytesToHex: function(bytes) {\n      for (var hex = [], i = 0; i < bytes.length; i++) {\n        hex.push((bytes[i] >>> 4).toString(16));\n        hex.push((bytes[i] & 0xF).toString(16));\n      }\n      return hex.join('');\n    },\n\n    // Convert a hex string to a byte array\n    hexToBytes: function(hex) {\n      for (var bytes = [], c = 0; c < hex.length; c += 2)\n        bytes.push(parseInt(hex.substr(c, 2), 16));\n      return bytes;\n    },\n\n    // Convert a byte array to a base-64 string\n    bytesToBase64: function(bytes) {\n      for (var base64 = [], i = 0; i < bytes.length; i += 3) {\n        var triplet = (bytes[i] << 16) | (bytes[i + 1] << 8) | bytes[i + 2];\n        for (var j = 0; j < 4; j++)\n          if (i * 8 + j * 6 <= bytes.length * 8)\n            base64.push(base64map.charAt((triplet >>> 6 * (3 - j)) & 0x3F));\n          else\n            base64.push('=');\n      }\n      return base64.join('');\n    },\n\n    // Convert a base-64 string to a byte array\n    base64ToBytes: function(base64) {\n      // Remove non-base-64 characters\n      base64 = base64.replace(/[^A-Z0-9+\\/]/ig, '');\n\n      for (var bytes = [], i = 0, imod4 = 0; i < base64.length;\n          imod4 = ++i % 4) {\n        if (imod4 == 0) continue;\n        bytes.push(((base64map.indexOf(base64.charAt(i - 1))\n            & (Math.pow(2, -2 * imod4 + 8) - 1)) << (imod4 * 2))\n            | (base64map.indexOf(base64.charAt(i)) >>> (6 - imod4 * 2)));\n      }\n      return bytes;\n    }\n  };\n\n  module.exports = crypt;\n})();\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTM5LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9jcnlwdC9jcnlwdC5qcz9iMWUyIl0sInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbigpIHtcbiAgdmFyIGJhc2U2NG1hcFxuICAgICAgPSAnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLycsXG5cbiAgY3J5cHQgPSB7XG4gICAgLy8gQml0LXdpc2Ugcm90YXRpb24gbGVmdFxuICAgIHJvdGw6IGZ1bmN0aW9uKG4sIGIpIHtcbiAgICAgIHJldHVybiAobiA8PCBiKSB8IChuID4+PiAoMzIgLSBiKSk7XG4gICAgfSxcblxuICAgIC8vIEJpdC13aXNlIHJvdGF0aW9uIHJpZ2h0XG4gICAgcm90cjogZnVuY3Rpb24obiwgYikge1xuICAgICAgcmV0dXJuIChuIDw8ICgzMiAtIGIpKSB8IChuID4+PiBiKTtcbiAgICB9LFxuXG4gICAgLy8gU3dhcCBiaWctZW5kaWFuIHRvIGxpdHRsZS1lbmRpYW4gYW5kIHZpY2UgdmVyc2FcbiAgICBlbmRpYW46IGZ1bmN0aW9uKG4pIHtcbiAgICAgIC8vIElmIG51bWJlciBnaXZlbiwgc3dhcCBlbmRpYW5cbiAgICAgIGlmIChuLmNvbnN0cnVjdG9yID09IE51bWJlcikge1xuICAgICAgICByZXR1cm4gY3J5cHQucm90bChuLCA4KSAmIDB4MDBGRjAwRkYgfCBjcnlwdC5yb3RsKG4sIDI0KSAmIDB4RkYwMEZGMDA7XG4gICAgICB9XG5cbiAgICAgIC8vIEVsc2UsIGFzc3VtZSBhcnJheSBhbmQgc3dhcCBhbGwgaXRlbXNcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbi5sZW5ndGg7IGkrKylcbiAgICAgICAgbltpXSA9IGNyeXB0LmVuZGlhbihuW2ldKTtcbiAgICAgIHJldHVybiBuO1xuICAgIH0sXG5cbiAgICAvLyBHZW5lcmF0ZSBhbiBhcnJheSBvZiBhbnkgbGVuZ3RoIG9mIHJhbmRvbSBieXRlc1xuICAgIHJhbmRvbUJ5dGVzOiBmdW5jdGlvbihuKSB7XG4gICAgICBmb3IgKHZhciBieXRlcyA9IFtdOyBuID4gMDsgbi0tKVxuICAgICAgICBieXRlcy5wdXNoKE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDI1NikpO1xuICAgICAgcmV0dXJuIGJ5dGVzO1xuICAgIH0sXG5cbiAgICAvLyBDb252ZXJ0IGEgYnl0ZSBhcnJheSB0byBiaWctZW5kaWFuIDMyLWJpdCB3b3Jkc1xuICAgIGJ5dGVzVG9Xb3JkczogZnVuY3Rpb24oYnl0ZXMpIHtcbiAgICAgIGZvciAodmFyIHdvcmRzID0gW10sIGkgPSAwLCBiID0gMDsgaSA8IGJ5dGVzLmxlbmd0aDsgaSsrLCBiICs9IDgpXG4gICAgICAgIHdvcmRzW2IgPj4+IDVdIHw9IGJ5dGVzW2ldIDw8ICgyNCAtIGIgJSAzMik7XG4gICAgICByZXR1cm4gd29yZHM7XG4gICAgfSxcblxuICAgIC8vIENvbnZlcnQgYmlnLWVuZGlhbiAzMi1iaXQgd29yZHMgdG8gYSBieXRlIGFycmF5XG4gICAgd29yZHNUb0J5dGVzOiBmdW5jdGlvbih3b3Jkcykge1xuICAgICAgZm9yICh2YXIgYnl0ZXMgPSBbXSwgYiA9IDA7IGIgPCB3b3Jkcy5sZW5ndGggKiAzMjsgYiArPSA4KVxuICAgICAgICBieXRlcy5wdXNoKCh3b3Jkc1tiID4+PiA1XSA+Pj4gKDI0IC0gYiAlIDMyKSkgJiAweEZGKTtcbiAgICAgIHJldHVybiBieXRlcztcbiAgICB9LFxuXG4gICAgLy8gQ29udmVydCBhIGJ5dGUgYXJyYXkgdG8gYSBoZXggc3RyaW5nXG4gICAgYnl0ZXNUb0hleDogZnVuY3Rpb24oYnl0ZXMpIHtcbiAgICAgIGZvciAodmFyIGhleCA9IFtdLCBpID0gMDsgaSA8IGJ5dGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGhleC5wdXNoKChieXRlc1tpXSA+Pj4gNCkudG9TdHJpbmcoMTYpKTtcbiAgICAgICAgaGV4LnB1c2goKGJ5dGVzW2ldICYgMHhGKS50b1N0cmluZygxNikpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGhleC5qb2luKCcnKTtcbiAgICB9LFxuXG4gICAgLy8gQ29udmVydCBhIGhleCBzdHJpbmcgdG8gYSBieXRlIGFycmF5XG4gICAgaGV4VG9CeXRlczogZnVuY3Rpb24oaGV4KSB7XG4gICAgICBmb3IgKHZhciBieXRlcyA9IFtdLCBjID0gMDsgYyA8IGhleC5sZW5ndGg7IGMgKz0gMilcbiAgICAgICAgYnl0ZXMucHVzaChwYXJzZUludChoZXguc3Vic3RyKGMsIDIpLCAxNikpO1xuICAgICAgcmV0dXJuIGJ5dGVzO1xuICAgIH0sXG5cbiAgICAvLyBDb252ZXJ0IGEgYnl0ZSBhcnJheSB0byBhIGJhc2UtNjQgc3RyaW5nXG4gICAgYnl0ZXNUb0Jhc2U2NDogZnVuY3Rpb24oYnl0ZXMpIHtcbiAgICAgIGZvciAodmFyIGJhc2U2NCA9IFtdLCBpID0gMDsgaSA8IGJ5dGVzLmxlbmd0aDsgaSArPSAzKSB7XG4gICAgICAgIHZhciB0cmlwbGV0ID0gKGJ5dGVzW2ldIDw8IDE2KSB8IChieXRlc1tpICsgMV0gPDwgOCkgfCBieXRlc1tpICsgMl07XG4gICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgNDsgaisrKVxuICAgICAgICAgIGlmIChpICogOCArIGogKiA2IDw9IGJ5dGVzLmxlbmd0aCAqIDgpXG4gICAgICAgICAgICBiYXNlNjQucHVzaChiYXNlNjRtYXAuY2hhckF0KCh0cmlwbGV0ID4+PiA2ICogKDMgLSBqKSkgJiAweDNGKSk7XG4gICAgICAgICAgZWxzZVxuICAgICAgICAgICAgYmFzZTY0LnB1c2goJz0nKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlNjQuam9pbignJyk7XG4gICAgfSxcblxuICAgIC8vIENvbnZlcnQgYSBiYXNlLTY0IHN0cmluZyB0byBhIGJ5dGUgYXJyYXlcbiAgICBiYXNlNjRUb0J5dGVzOiBmdW5jdGlvbihiYXNlNjQpIHtcbiAgICAgIC8vIFJlbW92ZSBub24tYmFzZS02NCBjaGFyYWN0ZXJzXG4gICAgICBiYXNlNjQgPSBiYXNlNjQucmVwbGFjZSgvW15BLVowLTkrXFwvXS9pZywgJycpO1xuXG4gICAgICBmb3IgKHZhciBieXRlcyA9IFtdLCBpID0gMCwgaW1vZDQgPSAwOyBpIDwgYmFzZTY0Lmxlbmd0aDtcbiAgICAgICAgICBpbW9kNCA9ICsraSAlIDQpIHtcbiAgICAgICAgaWYgKGltb2Q0ID09IDApIGNvbnRpbnVlO1xuICAgICAgICBieXRlcy5wdXNoKCgoYmFzZTY0bWFwLmluZGV4T2YoYmFzZTY0LmNoYXJBdChpIC0gMSkpXG4gICAgICAgICAgICAmIChNYXRoLnBvdygyLCAtMiAqIGltb2Q0ICsgOCkgLSAxKSkgPDwgKGltb2Q0ICogMikpXG4gICAgICAgICAgICB8IChiYXNlNjRtYXAuaW5kZXhPZihiYXNlNjQuY2hhckF0KGkpKSA+Pj4gKDYgLSBpbW9kNCAqIDIpKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gYnl0ZXM7XG4gICAgfVxuICB9O1xuXG4gIG1vZHVsZS5leHBvcnRzID0gY3J5cHQ7XG59KSgpO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NyeXB0L2NyeXB0LmpzXG4vLyBtb2R1bGUgaWQgPSAxMzlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 140 */
/* no static exports found */
/* all exports used */
/*!******************************!*\
  !*** ./~/is-buffer/index.js ***!
  \******************************/
/***/ (function(module, exports) {

eval("/*!\n * Determine if an object is a Buffer\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\n\n// The _isBuffer check is for Safari 5-7 support, because it's missing\n// Object.prototype.constructor. Remove this eventually\nmodule.exports = function (obj) {\n  return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)\n}\n\nfunction isBuffer (obj) {\n  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)\n}\n\n// For Node v0.10 support. Remove this eventually.\nfunction isSlowBuffer (obj) {\n  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0))\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTQwLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9pcy1idWZmZXIvaW5kZXguanM/MWY2YSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIERldGVybWluZSBpZiBhbiBvYmplY3QgaXMgYSBCdWZmZXJcbiAqXG4gKiBAYXV0aG9yICAgRmVyb3NzIEFib3VraGFkaWplaCA8ZmVyb3NzQGZlcm9zcy5vcmc+IDxodHRwOi8vZmVyb3NzLm9yZz5cbiAqIEBsaWNlbnNlICBNSVRcbiAqL1xuXG4vLyBUaGUgX2lzQnVmZmVyIGNoZWNrIGlzIGZvciBTYWZhcmkgNS03IHN1cHBvcnQsIGJlY2F1c2UgaXQncyBtaXNzaW5nXG4vLyBPYmplY3QucHJvdG90eXBlLmNvbnN0cnVjdG9yLiBSZW1vdmUgdGhpcyBldmVudHVhbGx5XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmopIHtcbiAgcmV0dXJuIG9iaiAhPSBudWxsICYmIChpc0J1ZmZlcihvYmopIHx8IGlzU2xvd0J1ZmZlcihvYmopIHx8ICEhb2JqLl9pc0J1ZmZlcilcbn1cblxuZnVuY3Rpb24gaXNCdWZmZXIgKG9iaikge1xuICByZXR1cm4gISFvYmouY29uc3RydWN0b3IgJiYgdHlwZW9mIG9iai5jb25zdHJ1Y3Rvci5pc0J1ZmZlciA9PT0gJ2Z1bmN0aW9uJyAmJiBvYmouY29uc3RydWN0b3IuaXNCdWZmZXIob2JqKVxufVxuXG4vLyBGb3IgTm9kZSB2MC4xMCBzdXBwb3J0LiBSZW1vdmUgdGhpcyBldmVudHVhbGx5LlxuZnVuY3Rpb24gaXNTbG93QnVmZmVyIChvYmopIHtcbiAgcmV0dXJuIHR5cGVvZiBvYmoucmVhZEZsb2F0TEUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIG9iai5zbGljZSA9PT0gJ2Z1bmN0aW9uJyAmJiBpc0J1ZmZlcihvYmouc2xpY2UoMCwgMCkpXG59XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vaXMtYnVmZmVyL2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSAxNDBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 141 */
/* no static exports found */
/* all exports used */
/*!*************************************!*\
  !*** ./~/mapnik-reference/index.js ***!
  \*************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(__dirname) {var fs = __webpack_require__(/*! fs */ 11),\n    path = __webpack_require__(/*! path */ 12),\n    existsSync = __webpack_require__(/*! fs */ 11).existsSync || __webpack_require__(/*! path */ 12).existsSync;\n\n// Load all stated versions into the module exports\nmodule.exports.version = {};\n\nvar refs = [\n '2.0.0',\n '2.0.1',\n '2.0.2',\n '2.1.0',\n '2.1.1',\n '2.2.0',\n '2.3.0',\n '3.0.0'\n];\n\nrefs.map(function(version) {\n    module.exports.version[version] = !(function webpackMissingModule() { var e = new Error(\"Cannot find module \\\".\\\"\"); e.code = 'MODULE_NOT_FOUND'; throw e; }());\n    var ds_path = path.join(__dirname, version, 'datasources.json');\n    if (existsSync(ds_path)) {\n        module.exports.version[version].datasources = !(function webpackMissingModule() { var e = new Error(\"Cannot find module \\\".\\\"\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()).datasources;\n    }\n});\n\n/* WEBPACK VAR INJECTION */}.call(exports, \"/\"))//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTQxLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9tYXBuaWstcmVmZXJlbmNlL2luZGV4LmpzP2RhNTQiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGZzID0gcmVxdWlyZSgnZnMnKSxcbiAgICBwYXRoID0gcmVxdWlyZSgncGF0aCcpLFxuICAgIGV4aXN0c1N5bmMgPSByZXF1aXJlKCdmcycpLmV4aXN0c1N5bmMgfHwgcmVxdWlyZSgncGF0aCcpLmV4aXN0c1N5bmM7XG5cbi8vIExvYWQgYWxsIHN0YXRlZCB2ZXJzaW9ucyBpbnRvIHRoZSBtb2R1bGUgZXhwb3J0c1xubW9kdWxlLmV4cG9ydHMudmVyc2lvbiA9IHt9O1xuXG52YXIgcmVmcyA9IFtcbiAnMi4wLjAnLFxuICcyLjAuMScsXG4gJzIuMC4yJyxcbiAnMi4xLjAnLFxuICcyLjEuMScsXG4gJzIuMi4wJyxcbiAnMi4zLjAnLFxuICczLjAuMCdcbl07XG5cbnJlZnMubWFwKGZ1bmN0aW9uKHZlcnNpb24pIHtcbiAgICBtb2R1bGUuZXhwb3J0cy52ZXJzaW9uW3ZlcnNpb25dID0gcmVxdWlyZShwYXRoLmpvaW4oX19kaXJuYW1lLCB2ZXJzaW9uLCAncmVmZXJlbmNlLmpzb24nKSk7XG4gICAgdmFyIGRzX3BhdGggPSBwYXRoLmpvaW4oX19kaXJuYW1lLCB2ZXJzaW9uLCAnZGF0YXNvdXJjZXMuanNvbicpO1xuICAgIGlmIChleGlzdHNTeW5jKGRzX3BhdGgpKSB7XG4gICAgICAgIG1vZHVsZS5leHBvcnRzLnZlcnNpb25bdmVyc2lvbl0uZGF0YXNvdXJjZXMgPSByZXF1aXJlKGRzX3BhdGgpLmRhdGFzb3VyY2VzO1xuICAgIH1cbn0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L21hcG5pay1yZWZlcmVuY2UvaW5kZXguanNcbi8vIG1vZHVsZSBpZCA9IDE0MVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBIiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 142 */
/* no static exports found */
/* all exports used */
/*!***************************!*\
  !*** ./~/ramda/src/ap.js ***!
  \***************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var _concat = __webpack_require__(/*! ./internal/_concat */ 154);\nvar _curry2 = __webpack_require__(/*! ./internal/_curry2 */ 1);\nvar _reduce = __webpack_require__(/*! ./internal/_reduce */ 16);\nvar map = __webpack_require__(/*! ./map */ 8);\n\n\n/**\n * ap applies a list of functions to a list of values.\n *\n * Dispatches to the `ap` method of the second argument, if present. Also\n * treats curried functions as applicatives.\n *\n * @func\n * @memberOf R\n * @since v0.3.0\n * @category Function\n * @sig [a -> b] -> [a] -> [b]\n * @sig Apply f => f (a -> b) -> f a -> f b\n * @param {Array} fns An array of functions\n * @param {Array} vs An array of values\n * @return {Array} An array of results of applying each of `fns` to all of `vs` in turn.\n * @example\n *\n *      R.ap([R.multiply(2), R.add(3)], [1,2,3]); //=> [2, 4, 6, 4, 5, 6]\n *      R.ap([R.concat('tasty '), R.toUpper], ['pizza', 'salad']); //=> [\"tasty pizza\", \"tasty salad\", \"PIZZA\", \"SALAD\"]\n * @symb R.ap([f, g], [a, b]) = [f(a), f(b), g(a), g(b)]\n */\nmodule.exports = _curry2(function ap(applicative, fn) {\n  return (\n    typeof applicative.ap === 'function' ?\n      applicative.ap(fn) :\n    typeof applicative === 'function' ?\n      function(x) { return applicative(x)(fn(x)); } :\n    // else\n      _reduce(function(acc, f) { return _concat(acc, map(f, fn)); }, [], applicative)\n  );\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTQyLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9yYW1kYS9zcmMvYXAuanM/OWU1NyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX2NvbmNhdCA9IHJlcXVpcmUoJy4vaW50ZXJuYWwvX2NvbmNhdCcpO1xudmFyIF9jdXJyeTIgPSByZXF1aXJlKCcuL2ludGVybmFsL19jdXJyeTInKTtcbnZhciBfcmVkdWNlID0gcmVxdWlyZSgnLi9pbnRlcm5hbC9fcmVkdWNlJyk7XG52YXIgbWFwID0gcmVxdWlyZSgnLi9tYXAnKTtcblxuXG4vKipcbiAqIGFwIGFwcGxpZXMgYSBsaXN0IG9mIGZ1bmN0aW9ucyB0byBhIGxpc3Qgb2YgdmFsdWVzLlxuICpcbiAqIERpc3BhdGNoZXMgdG8gdGhlIGBhcGAgbWV0aG9kIG9mIHRoZSBzZWNvbmQgYXJndW1lbnQsIGlmIHByZXNlbnQuIEFsc29cbiAqIHRyZWF0cyBjdXJyaWVkIGZ1bmN0aW9ucyBhcyBhcHBsaWNhdGl2ZXMuXG4gKlxuICogQGZ1bmNcbiAqIEBtZW1iZXJPZiBSXG4gKiBAc2luY2UgdjAuMy4wXG4gKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAqIEBzaWcgW2EgLT4gYl0gLT4gW2FdIC0+IFtiXVxuICogQHNpZyBBcHBseSBmID0+IGYgKGEgLT4gYikgLT4gZiBhIC0+IGYgYlxuICogQHBhcmFtIHtBcnJheX0gZm5zIEFuIGFycmF5IG9mIGZ1bmN0aW9uc1xuICogQHBhcmFtIHtBcnJheX0gdnMgQW4gYXJyYXkgb2YgdmFsdWVzXG4gKiBAcmV0dXJuIHtBcnJheX0gQW4gYXJyYXkgb2YgcmVzdWx0cyBvZiBhcHBseWluZyBlYWNoIG9mIGBmbnNgIHRvIGFsbCBvZiBgdnNgIGluIHR1cm4uXG4gKiBAZXhhbXBsZVxuICpcbiAqICAgICAgUi5hcChbUi5tdWx0aXBseSgyKSwgUi5hZGQoMyldLCBbMSwyLDNdKTsgLy89PiBbMiwgNCwgNiwgNCwgNSwgNl1cbiAqICAgICAgUi5hcChbUi5jb25jYXQoJ3Rhc3R5ICcpLCBSLnRvVXBwZXJdLCBbJ3BpenphJywgJ3NhbGFkJ10pOyAvLz0+IFtcInRhc3R5IHBpenphXCIsIFwidGFzdHkgc2FsYWRcIiwgXCJQSVpaQVwiLCBcIlNBTEFEXCJdXG4gKiBAc3ltYiBSLmFwKFtmLCBnXSwgW2EsIGJdKSA9IFtmKGEpLCBmKGIpLCBnKGEpLCBnKGIpXVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IF9jdXJyeTIoZnVuY3Rpb24gYXAoYXBwbGljYXRpdmUsIGZuKSB7XG4gIHJldHVybiAoXG4gICAgdHlwZW9mIGFwcGxpY2F0aXZlLmFwID09PSAnZnVuY3Rpb24nID9cbiAgICAgIGFwcGxpY2F0aXZlLmFwKGZuKSA6XG4gICAgdHlwZW9mIGFwcGxpY2F0aXZlID09PSAnZnVuY3Rpb24nID9cbiAgICAgIGZ1bmN0aW9uKHgpIHsgcmV0dXJuIGFwcGxpY2F0aXZlKHgpKGZuKHgpKTsgfSA6XG4gICAgLy8gZWxzZVxuICAgICAgX3JlZHVjZShmdW5jdGlvbihhY2MsIGYpIHsgcmV0dXJuIF9jb25jYXQoYWNjLCBtYXAoZiwgZm4pKTsgfSwgW10sIGFwcGxpY2F0aXZlKVxuICApO1xufSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcmFtZGEvc3JjL2FwLmpzXG4vLyBtb2R1bGUgaWQgPSAxNDJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 143 */
/* no static exports found */
/* all exports used */
/*!*****************************!*\
  !*** ./~/ramda/src/bind.js ***!
  \*****************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var _arity = __webpack_require__(/*! ./internal/_arity */ 14);\nvar _curry2 = __webpack_require__(/*! ./internal/_curry2 */ 1);\n\n\n/**\n * Creates a function that is bound to a context.\n * Note: `R.bind` does not provide the additional argument-binding capabilities of\n * [Function.prototype.bind](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind).\n *\n * @func\n * @memberOf R\n * @since v0.6.0\n * @category Function\n * @category Object\n * @sig (* -> *) -> {*} -> (* -> *)\n * @param {Function} fn The function to bind to context\n * @param {Object} thisObj The context to bind `fn` to\n * @return {Function} A function that will execute in the context of `thisObj`.\n * @see R.partial\n * @example\n *\n *      var log = R.bind(console.log, console);\n *      R.pipe(R.assoc('a', 2), R.tap(log), R.assoc('a', 3))({a: 1}); //=> {a: 3}\n *      // logs {a: 2}\n * @symb R.bind(f, o)(a, b) = f.call(o, a, b)\n */\nmodule.exports = _curry2(function bind(fn, thisObj) {\n  return _arity(fn.length, function() {\n    return fn.apply(thisObj, arguments);\n  });\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTQzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9yYW1kYS9zcmMvYmluZC5qcz84MTUzIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBfYXJpdHkgPSByZXF1aXJlKCcuL2ludGVybmFsL19hcml0eScpO1xudmFyIF9jdXJyeTIgPSByZXF1aXJlKCcuL2ludGVybmFsL19jdXJyeTInKTtcblxuXG4vKipcbiAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGlzIGJvdW5kIHRvIGEgY29udGV4dC5cbiAqIE5vdGU6IGBSLmJpbmRgIGRvZXMgbm90IHByb3ZpZGUgdGhlIGFkZGl0aW9uYWwgYXJndW1lbnQtYmluZGluZyBjYXBhYmlsaXRpZXMgb2ZcbiAqIFtGdW5jdGlvbi5wcm90b3R5cGUuYmluZF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvRnVuY3Rpb24vYmluZCkuXG4gKlxuICogQGZ1bmNcbiAqIEBtZW1iZXJPZiBSXG4gKiBAc2luY2UgdjAuNi4wXG4gKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAqIEBjYXRlZ29yeSBPYmplY3RcbiAqIEBzaWcgKCogLT4gKikgLT4geyp9IC0+ICgqIC0+ICopXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgZnVuY3Rpb24gdG8gYmluZCB0byBjb250ZXh0XG4gKiBAcGFyYW0ge09iamVjdH0gdGhpc09iaiBUaGUgY29udGV4dCB0byBiaW5kIGBmbmAgdG9cbiAqIEByZXR1cm4ge0Z1bmN0aW9ufSBBIGZ1bmN0aW9uIHRoYXQgd2lsbCBleGVjdXRlIGluIHRoZSBjb250ZXh0IG9mIGB0aGlzT2JqYC5cbiAqIEBzZWUgUi5wYXJ0aWFsXG4gKiBAZXhhbXBsZVxuICpcbiAqICAgICAgdmFyIGxvZyA9IFIuYmluZChjb25zb2xlLmxvZywgY29uc29sZSk7XG4gKiAgICAgIFIucGlwZShSLmFzc29jKCdhJywgMiksIFIudGFwKGxvZyksIFIuYXNzb2MoJ2EnLCAzKSkoe2E6IDF9KTsgLy89PiB7YTogM31cbiAqICAgICAgLy8gbG9ncyB7YTogMn1cbiAqIEBzeW1iIFIuYmluZChmLCBvKShhLCBiKSA9IGYuY2FsbChvLCBhLCBiKVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IF9jdXJyeTIoZnVuY3Rpb24gYmluZChmbiwgdGhpc09iaikge1xuICByZXR1cm4gX2FyaXR5KGZuLmxlbmd0aCwgZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoaXNPYmosIGFyZ3VtZW50cyk7XG4gIH0pO1xufSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcmFtZGEvc3JjL2JpbmQuanNcbi8vIG1vZHVsZSBpZCA9IDE0M1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 144 */
/* no static exports found */
/* all exports used */
/*!*****************************!*\
  !*** ./~/ramda/src/cond.js ***!
  \*****************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var _arity = __webpack_require__(/*! ./internal/_arity */ 14);\nvar _curry1 = __webpack_require__(/*! ./internal/_curry1 */ 2);\nvar map = __webpack_require__(/*! ./map */ 8);\nvar max = __webpack_require__(/*! ./max */ 63);\nvar reduce = __webpack_require__(/*! ./reduce */ 26);\n\n\n/**\n * Returns a function, `fn`, which encapsulates `if/else, if/else, ...` logic.\n * `R.cond` takes a list of [predicate, transformer] pairs. All of the arguments\n * to `fn` are applied to each of the predicates in turn until one returns a\n * \"truthy\" value, at which point `fn` returns the result of applying its\n * arguments to the corresponding transformer. If none of the predicates\n * matches, `fn` returns undefined.\n *\n * @func\n * @memberOf R\n * @since v0.6.0\n * @category Logic\n * @sig [[(*... -> Boolean),(*... -> *)]] -> (*... -> *)\n * @param {Array} pairs A list of [predicate, transformer]\n * @return {Function}\n * @example\n *\n *      var fn = R.cond([\n *        [R.equals(0),   R.always('water freezes at 0°C')],\n *        [R.equals(100), R.always('water boils at 100°C')],\n *        [R.T,           temp => 'nothing special happens at ' + temp + '°C']\n *      ]);\n *      fn(0); //=> 'water freezes at 0°C'\n *      fn(50); //=> 'nothing special happens at 50°C'\n *      fn(100); //=> 'water boils at 100°C'\n */\nmodule.exports = _curry1(function cond(pairs) {\n  var arity = reduce(max,\n                     0,\n                     map(function(pair) { return pair[0].length; }, pairs));\n  return _arity(arity, function() {\n    var idx = 0;\n    while (idx < pairs.length) {\n      if (pairs[idx][0].apply(this, arguments)) {\n        return pairs[idx][1].apply(this, arguments);\n      }\n      idx += 1;\n    }\n  });\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTQ0LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9yYW1kYS9zcmMvY29uZC5qcz83NjU5Il0sInNvdXJjZXNDb250ZW50IjpbInZhciBfYXJpdHkgPSByZXF1aXJlKCcuL2ludGVybmFsL19hcml0eScpO1xudmFyIF9jdXJyeTEgPSByZXF1aXJlKCcuL2ludGVybmFsL19jdXJyeTEnKTtcbnZhciBtYXAgPSByZXF1aXJlKCcuL21hcCcpO1xudmFyIG1heCA9IHJlcXVpcmUoJy4vbWF4Jyk7XG52YXIgcmVkdWNlID0gcmVxdWlyZSgnLi9yZWR1Y2UnKTtcblxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiwgYGZuYCwgd2hpY2ggZW5jYXBzdWxhdGVzIGBpZi9lbHNlLCBpZi9lbHNlLCAuLi5gIGxvZ2ljLlxuICogYFIuY29uZGAgdGFrZXMgYSBsaXN0IG9mIFtwcmVkaWNhdGUsIHRyYW5zZm9ybWVyXSBwYWlycy4gQWxsIG9mIHRoZSBhcmd1bWVudHNcbiAqIHRvIGBmbmAgYXJlIGFwcGxpZWQgdG8gZWFjaCBvZiB0aGUgcHJlZGljYXRlcyBpbiB0dXJuIHVudGlsIG9uZSByZXR1cm5zIGFcbiAqIFwidHJ1dGh5XCIgdmFsdWUsIGF0IHdoaWNoIHBvaW50IGBmbmAgcmV0dXJucyB0aGUgcmVzdWx0IG9mIGFwcGx5aW5nIGl0c1xuICogYXJndW1lbnRzIHRvIHRoZSBjb3JyZXNwb25kaW5nIHRyYW5zZm9ybWVyLiBJZiBub25lIG9mIHRoZSBwcmVkaWNhdGVzXG4gKiBtYXRjaGVzLCBgZm5gIHJldHVybnMgdW5kZWZpbmVkLlxuICpcbiAqIEBmdW5jXG4gKiBAbWVtYmVyT2YgUlxuICogQHNpbmNlIHYwLjYuMFxuICogQGNhdGVnb3J5IExvZ2ljXG4gKiBAc2lnIFtbKCouLi4gLT4gQm9vbGVhbiksKCouLi4gLT4gKildXSAtPiAoKi4uLiAtPiAqKVxuICogQHBhcmFtIHtBcnJheX0gcGFpcnMgQSBsaXN0IG9mIFtwcmVkaWNhdGUsIHRyYW5zZm9ybWVyXVxuICogQHJldHVybiB7RnVuY3Rpb259XG4gKiBAZXhhbXBsZVxuICpcbiAqICAgICAgdmFyIGZuID0gUi5jb25kKFtcbiAqICAgICAgICBbUi5lcXVhbHMoMCksICAgUi5hbHdheXMoJ3dhdGVyIGZyZWV6ZXMgYXQgMMKwQycpXSxcbiAqICAgICAgICBbUi5lcXVhbHMoMTAwKSwgUi5hbHdheXMoJ3dhdGVyIGJvaWxzIGF0IDEwMMKwQycpXSxcbiAqICAgICAgICBbUi5ULCAgICAgICAgICAgdGVtcCA9PiAnbm90aGluZyBzcGVjaWFsIGhhcHBlbnMgYXQgJyArIHRlbXAgKyAnwrBDJ11cbiAqICAgICAgXSk7XG4gKiAgICAgIGZuKDApOyAvLz0+ICd3YXRlciBmcmVlemVzIGF0IDDCsEMnXG4gKiAgICAgIGZuKDUwKTsgLy89PiAnbm90aGluZyBzcGVjaWFsIGhhcHBlbnMgYXQgNTDCsEMnXG4gKiAgICAgIGZuKDEwMCk7IC8vPT4gJ3dhdGVyIGJvaWxzIGF0IDEwMMKwQydcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBfY3VycnkxKGZ1bmN0aW9uIGNvbmQocGFpcnMpIHtcbiAgdmFyIGFyaXR5ID0gcmVkdWNlKG1heCxcbiAgICAgICAgICAgICAgICAgICAgIDAsXG4gICAgICAgICAgICAgICAgICAgICBtYXAoZnVuY3Rpb24ocGFpcikgeyByZXR1cm4gcGFpclswXS5sZW5ndGg7IH0sIHBhaXJzKSk7XG4gIHJldHVybiBfYXJpdHkoYXJpdHksIGZ1bmN0aW9uKCkge1xuICAgIHZhciBpZHggPSAwO1xuICAgIHdoaWxlIChpZHggPCBwYWlycy5sZW5ndGgpIHtcbiAgICAgIGlmIChwYWlyc1tpZHhdWzBdLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpIHtcbiAgICAgICAgcmV0dXJuIHBhaXJzW2lkeF1bMV0uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIH1cbiAgICAgIGlkeCArPSAxO1xuICAgIH1cbiAgfSk7XG59KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9yYW1kYS9zcmMvY29uZC5qc1xuLy8gbW9kdWxlIGlkID0gMTQ0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 145 */
/* no static exports found */
/* all exports used */
/*!**********************************!*\
  !*** ./~/ramda/src/defaultTo.js ***!
  \**********************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var _curry2 = __webpack_require__(/*! ./internal/_curry2 */ 1);\n\n\n/**\n * Returns the second argument if it is not `null`, `undefined` or `NaN`\n * otherwise the first argument is returned.\n *\n * @func\n * @memberOf R\n * @since v0.10.0\n * @category Logic\n * @sig a -> b -> a | b\n * @param {a} default The default value.\n * @param {b} val `val` will be returned instead of `default` unless `val` is `null`, `undefined` or `NaN`.\n * @return {*} The second value if it is not `null`, `undefined` or `NaN`, otherwise the default value\n * @example\n *\n *      var defaultTo42 = R.defaultTo(42);\n *\n *      defaultTo42(null);  //=> 42\n *      defaultTo42(undefined);  //=> 42\n *      defaultTo42('Ramda');  //=> 'Ramda'\n *      // parseInt('string') results in NaN\n *      defaultTo42(parseInt('string')); //=> 42\n */\nmodule.exports = _curry2(function defaultTo(d, v) {\n  return v == null || v !== v ? d : v;\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTQ1LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9yYW1kYS9zcmMvZGVmYXVsdFRvLmpzP2JlNWUiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIF9jdXJyeTIgPSByZXF1aXJlKCcuL2ludGVybmFsL19jdXJyeTInKTtcblxuXG4vKipcbiAqIFJldHVybnMgdGhlIHNlY29uZCBhcmd1bWVudCBpZiBpdCBpcyBub3QgYG51bGxgLCBgdW5kZWZpbmVkYCBvciBgTmFOYFxuICogb3RoZXJ3aXNlIHRoZSBmaXJzdCBhcmd1bWVudCBpcyByZXR1cm5lZC5cbiAqXG4gKiBAZnVuY1xuICogQG1lbWJlck9mIFJcbiAqIEBzaW5jZSB2MC4xMC4wXG4gKiBAY2F0ZWdvcnkgTG9naWNcbiAqIEBzaWcgYSAtPiBiIC0+IGEgfCBiXG4gKiBAcGFyYW0ge2F9IGRlZmF1bHQgVGhlIGRlZmF1bHQgdmFsdWUuXG4gKiBAcGFyYW0ge2J9IHZhbCBgdmFsYCB3aWxsIGJlIHJldHVybmVkIGluc3RlYWQgb2YgYGRlZmF1bHRgIHVubGVzcyBgdmFsYCBpcyBgbnVsbGAsIGB1bmRlZmluZWRgIG9yIGBOYU5gLlxuICogQHJldHVybiB7Kn0gVGhlIHNlY29uZCB2YWx1ZSBpZiBpdCBpcyBub3QgYG51bGxgLCBgdW5kZWZpbmVkYCBvciBgTmFOYCwgb3RoZXJ3aXNlIHRoZSBkZWZhdWx0IHZhbHVlXG4gKiBAZXhhbXBsZVxuICpcbiAqICAgICAgdmFyIGRlZmF1bHRUbzQyID0gUi5kZWZhdWx0VG8oNDIpO1xuICpcbiAqICAgICAgZGVmYXVsdFRvNDIobnVsbCk7ICAvLz0+IDQyXG4gKiAgICAgIGRlZmF1bHRUbzQyKHVuZGVmaW5lZCk7ICAvLz0+IDQyXG4gKiAgICAgIGRlZmF1bHRUbzQyKCdSYW1kYScpOyAgLy89PiAnUmFtZGEnXG4gKiAgICAgIC8vIHBhcnNlSW50KCdzdHJpbmcnKSByZXN1bHRzIGluIE5hTlxuICogICAgICBkZWZhdWx0VG80MihwYXJzZUludCgnc3RyaW5nJykpOyAvLz0+IDQyXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gX2N1cnJ5MihmdW5jdGlvbiBkZWZhdWx0VG8oZCwgdikge1xuICByZXR1cm4gdiA9PSBudWxsIHx8IHYgIT09IHYgPyBkIDogdjtcbn0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3JhbWRhL3NyYy9kZWZhdWx0VG8uanNcbi8vIG1vZHVsZSBpZCA9IDE0NVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 146 */
/* no static exports found */
/* all exports used */
/*!*******************************!*\
  !*** ./~/ramda/src/either.js ***!
  \*******************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var _curry2 = __webpack_require__(/*! ./internal/_curry2 */ 1);\nvar _isFunction = __webpack_require__(/*! ./internal/_isFunction */ 59);\nvar lift = __webpack_require__(/*! ./lift */ 176);\nvar or = __webpack_require__(/*! ./or */ 181);\n\n\n/**\n * A function wrapping calls to the two functions in an `||` operation,\n * returning the result of the first function if it is truth-y and the result\n * of the second function otherwise. Note that this is short-circuited,\n * meaning that the second function will not be invoked if the first returns a\n * truth-y value.\n *\n * In addition to functions, `R.either` also accepts any fantasy-land compatible\n * applicative functor.\n *\n * @func\n * @memberOf R\n * @since v0.12.0\n * @category Logic\n * @sig (*... -> Boolean) -> (*... -> Boolean) -> (*... -> Boolean)\n * @param {Function} f a predicate\n * @param {Function} g another predicate\n * @return {Function} a function that applies its arguments to `f` and `g` and `||`s their outputs together.\n * @see R.or\n * @example\n *\n *      var gt10 = x => x > 10;\n *      var even = x => x % 2 === 0;\n *      var f = R.either(gt10, even);\n *      f(101); //=> true\n *      f(8); //=> true\n */\nmodule.exports = _curry2(function either(f, g) {\n  return _isFunction(f) ?\n    function _either() {\n      return f.apply(this, arguments) || g.apply(this, arguments);\n    } :\n    lift(or)(f, g);\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTQ2LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9yYW1kYS9zcmMvZWl0aGVyLmpzP2EwZWEiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIF9jdXJyeTIgPSByZXF1aXJlKCcuL2ludGVybmFsL19jdXJyeTInKTtcbnZhciBfaXNGdW5jdGlvbiA9IHJlcXVpcmUoJy4vaW50ZXJuYWwvX2lzRnVuY3Rpb24nKTtcbnZhciBsaWZ0ID0gcmVxdWlyZSgnLi9saWZ0Jyk7XG52YXIgb3IgPSByZXF1aXJlKCcuL29yJyk7XG5cblxuLyoqXG4gKiBBIGZ1bmN0aW9uIHdyYXBwaW5nIGNhbGxzIHRvIHRoZSB0d28gZnVuY3Rpb25zIGluIGFuIGB8fGAgb3BlcmF0aW9uLFxuICogcmV0dXJuaW5nIHRoZSByZXN1bHQgb2YgdGhlIGZpcnN0IGZ1bmN0aW9uIGlmIGl0IGlzIHRydXRoLXkgYW5kIHRoZSByZXN1bHRcbiAqIG9mIHRoZSBzZWNvbmQgZnVuY3Rpb24gb3RoZXJ3aXNlLiBOb3RlIHRoYXQgdGhpcyBpcyBzaG9ydC1jaXJjdWl0ZWQsXG4gKiBtZWFuaW5nIHRoYXQgdGhlIHNlY29uZCBmdW5jdGlvbiB3aWxsIG5vdCBiZSBpbnZva2VkIGlmIHRoZSBmaXJzdCByZXR1cm5zIGFcbiAqIHRydXRoLXkgdmFsdWUuXG4gKlxuICogSW4gYWRkaXRpb24gdG8gZnVuY3Rpb25zLCBgUi5laXRoZXJgIGFsc28gYWNjZXB0cyBhbnkgZmFudGFzeS1sYW5kIGNvbXBhdGlibGVcbiAqIGFwcGxpY2F0aXZlIGZ1bmN0b3IuXG4gKlxuICogQGZ1bmNcbiAqIEBtZW1iZXJPZiBSXG4gKiBAc2luY2UgdjAuMTIuMFxuICogQGNhdGVnb3J5IExvZ2ljXG4gKiBAc2lnICgqLi4uIC0+IEJvb2xlYW4pIC0+ICgqLi4uIC0+IEJvb2xlYW4pIC0+ICgqLi4uIC0+IEJvb2xlYW4pXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmIGEgcHJlZGljYXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBnIGFub3RoZXIgcHJlZGljYXRlXG4gKiBAcmV0dXJuIHtGdW5jdGlvbn0gYSBmdW5jdGlvbiB0aGF0IGFwcGxpZXMgaXRzIGFyZ3VtZW50cyB0byBgZmAgYW5kIGBnYCBhbmQgYHx8YHMgdGhlaXIgb3V0cHV0cyB0b2dldGhlci5cbiAqIEBzZWUgUi5vclxuICogQGV4YW1wbGVcbiAqXG4gKiAgICAgIHZhciBndDEwID0geCA9PiB4ID4gMTA7XG4gKiAgICAgIHZhciBldmVuID0geCA9PiB4ICUgMiA9PT0gMDtcbiAqICAgICAgdmFyIGYgPSBSLmVpdGhlcihndDEwLCBldmVuKTtcbiAqICAgICAgZigxMDEpOyAvLz0+IHRydWVcbiAqICAgICAgZig4KTsgLy89PiB0cnVlXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gX2N1cnJ5MihmdW5jdGlvbiBlaXRoZXIoZiwgZykge1xuICByZXR1cm4gX2lzRnVuY3Rpb24oZikgP1xuICAgIGZ1bmN0aW9uIF9laXRoZXIoKSB7XG4gICAgICByZXR1cm4gZi5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IGcuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9IDpcbiAgICBsaWZ0KG9yKShmLCBnKTtcbn0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3JhbWRhL3NyYy9laXRoZXIuanNcbi8vIG1vZHVsZSBpZCA9IDE0NlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 147 */
/* no static exports found */
/* all exports used */
/*!*******************************!*\
  !*** ./~/ramda/src/filter.js ***!
  \*******************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var _curry2 = __webpack_require__(/*! ./internal/_curry2 */ 1);\nvar _dispatchable = __webpack_require__(/*! ./internal/_dispatchable */ 58);\nvar _filter = __webpack_require__(/*! ./internal/_filter */ 158);\nvar _isObject = __webpack_require__(/*! ./internal/_isObject */ 163);\nvar _reduce = __webpack_require__(/*! ./internal/_reduce */ 16);\nvar _xfilter = __webpack_require__(/*! ./internal/_xfilter */ 170);\nvar keys = __webpack_require__(/*! ./keys */ 17);\n\n\n/**\n * Takes a predicate and a \"filterable\", and returns a new filterable of the\n * same type containing the members of the given filterable which satisfy the\n * given predicate.\n *\n * Dispatches to the `filter` method of the second argument, if present.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig Filterable f => (a -> Boolean) -> f a -> f a\n * @param {Function} pred\n * @param {Array} filterable\n * @return {Array}\n * @see R.reject, R.transduce, R.addIndex\n * @example\n *\n *      var isEven = n => n % 2 === 0;\n *\n *      R.filter(isEven, [1, 2, 3, 4]); //=> [2, 4]\n *\n *      R.filter(isEven, {a: 1, b: 2, c: 3, d: 4}); //=> {b: 2, d: 4}\n */\nmodule.exports = _curry2(_dispatchable(['filter'], _xfilter, function(pred, filterable) {\n  return (\n    _isObject(filterable) ?\n      _reduce(function(acc, key) {\n        if (pred(filterable[key])) {\n          acc[key] = filterable[key];\n        }\n        return acc;\n      }, {}, keys(filterable)) :\n    // else\n      _filter(pred, filterable)\n  );\n}));\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTQ3LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9yYW1kYS9zcmMvZmlsdGVyLmpzPzhlOTQiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIF9jdXJyeTIgPSByZXF1aXJlKCcuL2ludGVybmFsL19jdXJyeTInKTtcbnZhciBfZGlzcGF0Y2hhYmxlID0gcmVxdWlyZSgnLi9pbnRlcm5hbC9fZGlzcGF0Y2hhYmxlJyk7XG52YXIgX2ZpbHRlciA9IHJlcXVpcmUoJy4vaW50ZXJuYWwvX2ZpbHRlcicpO1xudmFyIF9pc09iamVjdCA9IHJlcXVpcmUoJy4vaW50ZXJuYWwvX2lzT2JqZWN0Jyk7XG52YXIgX3JlZHVjZSA9IHJlcXVpcmUoJy4vaW50ZXJuYWwvX3JlZHVjZScpO1xudmFyIF94ZmlsdGVyID0gcmVxdWlyZSgnLi9pbnRlcm5hbC9feGZpbHRlcicpO1xudmFyIGtleXMgPSByZXF1aXJlKCcuL2tleXMnKTtcblxuXG4vKipcbiAqIFRha2VzIGEgcHJlZGljYXRlIGFuZCBhIFwiZmlsdGVyYWJsZVwiLCBhbmQgcmV0dXJucyBhIG5ldyBmaWx0ZXJhYmxlIG9mIHRoZVxuICogc2FtZSB0eXBlIGNvbnRhaW5pbmcgdGhlIG1lbWJlcnMgb2YgdGhlIGdpdmVuIGZpbHRlcmFibGUgd2hpY2ggc2F0aXNmeSB0aGVcbiAqIGdpdmVuIHByZWRpY2F0ZS5cbiAqXG4gKiBEaXNwYXRjaGVzIHRvIHRoZSBgZmlsdGVyYCBtZXRob2Qgb2YgdGhlIHNlY29uZCBhcmd1bWVudCwgaWYgcHJlc2VudC5cbiAqXG4gKiBBY3RzIGFzIGEgdHJhbnNkdWNlciBpZiBhIHRyYW5zZm9ybWVyIGlzIGdpdmVuIGluIGxpc3QgcG9zaXRpb24uXG4gKlxuICogQGZ1bmNcbiAqIEBtZW1iZXJPZiBSXG4gKiBAc2luY2UgdjAuMS4wXG4gKiBAY2F0ZWdvcnkgTGlzdFxuICogQHNpZyBGaWx0ZXJhYmxlIGYgPT4gKGEgLT4gQm9vbGVhbikgLT4gZiBhIC0+IGYgYVxuICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZFxuICogQHBhcmFtIHtBcnJheX0gZmlsdGVyYWJsZVxuICogQHJldHVybiB7QXJyYXl9XG4gKiBAc2VlIFIucmVqZWN0LCBSLnRyYW5zZHVjZSwgUi5hZGRJbmRleFxuICogQGV4YW1wbGVcbiAqXG4gKiAgICAgIHZhciBpc0V2ZW4gPSBuID0+IG4gJSAyID09PSAwO1xuICpcbiAqICAgICAgUi5maWx0ZXIoaXNFdmVuLCBbMSwgMiwgMywgNF0pOyAvLz0+IFsyLCA0XVxuICpcbiAqICAgICAgUi5maWx0ZXIoaXNFdmVuLCB7YTogMSwgYjogMiwgYzogMywgZDogNH0pOyAvLz0+IHtiOiAyLCBkOiA0fVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IF9jdXJyeTIoX2Rpc3BhdGNoYWJsZShbJ2ZpbHRlciddLCBfeGZpbHRlciwgZnVuY3Rpb24ocHJlZCwgZmlsdGVyYWJsZSkge1xuICByZXR1cm4gKFxuICAgIF9pc09iamVjdChmaWx0ZXJhYmxlKSA/XG4gICAgICBfcmVkdWNlKGZ1bmN0aW9uKGFjYywga2V5KSB7XG4gICAgICAgIGlmIChwcmVkKGZpbHRlcmFibGVba2V5XSkpIHtcbiAgICAgICAgICBhY2Nba2V5XSA9IGZpbHRlcmFibGVba2V5XTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYWNjO1xuICAgICAgfSwge30sIGtleXMoZmlsdGVyYWJsZSkpIDpcbiAgICAvLyBlbHNlXG4gICAgICBfZmlsdGVyKHByZWQsIGZpbHRlcmFibGUpXG4gICk7XG59KSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcmFtZGEvc3JjL2ZpbHRlci5qc1xuLy8gbW9kdWxlIGlkID0gMTQ3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 148 */
/* no static exports found */
/* all exports used */
/*!**********************************!*\
  !*** ./~/ramda/src/identical.js ***!
  \**********************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var _curry2 = __webpack_require__(/*! ./internal/_curry2 */ 1);\n\n\n/**\n * Returns true if its arguments are identical, false otherwise. Values are\n * identical if they reference the same memory. `NaN` is identical to `NaN`;\n * `0` and `-0` are not identical.\n *\n * @func\n * @memberOf R\n * @since v0.15.0\n * @category Relation\n * @sig a -> a -> Boolean\n * @param {*} a\n * @param {*} b\n * @return {Boolean}\n * @example\n *\n *      var o = {};\n *      R.identical(o, o); //=> true\n *      R.identical(1, 1); //=> true\n *      R.identical(1, '1'); //=> false\n *      R.identical([], []); //=> false\n *      R.identical(0, -0); //=> false\n *      R.identical(NaN, NaN); //=> true\n */\nmodule.exports = _curry2(function identical(a, b) {\n  // SameValue algorithm\n  if (a === b) { // Steps 1-5, 7-10\n    // Steps 6.b-6.e: +0 != -0\n    return a !== 0 || 1 / a === 1 / b;\n  } else {\n    // Step 6.a: NaN == NaN\n    return a !== a && b !== b;\n  }\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTQ4LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9yYW1kYS9zcmMvaWRlbnRpY2FsLmpzPzY1ZTQiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIF9jdXJyeTIgPSByZXF1aXJlKCcuL2ludGVybmFsL19jdXJyeTInKTtcblxuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiBpdHMgYXJndW1lbnRzIGFyZSBpZGVudGljYWwsIGZhbHNlIG90aGVyd2lzZS4gVmFsdWVzIGFyZVxuICogaWRlbnRpY2FsIGlmIHRoZXkgcmVmZXJlbmNlIHRoZSBzYW1lIG1lbW9yeS4gYE5hTmAgaXMgaWRlbnRpY2FsIHRvIGBOYU5gO1xuICogYDBgIGFuZCBgLTBgIGFyZSBub3QgaWRlbnRpY2FsLlxuICpcbiAqIEBmdW5jXG4gKiBAbWVtYmVyT2YgUlxuICogQHNpbmNlIHYwLjE1LjBcbiAqIEBjYXRlZ29yeSBSZWxhdGlvblxuICogQHNpZyBhIC0+IGEgLT4gQm9vbGVhblxuICogQHBhcmFtIHsqfSBhXG4gKiBAcGFyYW0geyp9IGJcbiAqIEByZXR1cm4ge0Jvb2xlYW59XG4gKiBAZXhhbXBsZVxuICpcbiAqICAgICAgdmFyIG8gPSB7fTtcbiAqICAgICAgUi5pZGVudGljYWwobywgbyk7IC8vPT4gdHJ1ZVxuICogICAgICBSLmlkZW50aWNhbCgxLCAxKTsgLy89PiB0cnVlXG4gKiAgICAgIFIuaWRlbnRpY2FsKDEsICcxJyk7IC8vPT4gZmFsc2VcbiAqICAgICAgUi5pZGVudGljYWwoW10sIFtdKTsgLy89PiBmYWxzZVxuICogICAgICBSLmlkZW50aWNhbCgwLCAtMCk7IC8vPT4gZmFsc2VcbiAqICAgICAgUi5pZGVudGljYWwoTmFOLCBOYU4pOyAvLz0+IHRydWVcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBfY3VycnkyKGZ1bmN0aW9uIGlkZW50aWNhbChhLCBiKSB7XG4gIC8vIFNhbWVWYWx1ZSBhbGdvcml0aG1cbiAgaWYgKGEgPT09IGIpIHsgLy8gU3RlcHMgMS01LCA3LTEwXG4gICAgLy8gU3RlcHMgNi5iLTYuZTogKzAgIT0gLTBcbiAgICByZXR1cm4gYSAhPT0gMCB8fCAxIC8gYSA9PT0gMSAvIGI7XG4gIH0gZWxzZSB7XG4gICAgLy8gU3RlcCA2LmE6IE5hTiA9PSBOYU5cbiAgICByZXR1cm4gYSAhPT0gYSAmJiBiICE9PSBiO1xuICB9XG59KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9yYW1kYS9zcmMvaWRlbnRpY2FsLmpzXG4vLyBtb2R1bGUgaWQgPSAxNDhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 149 */
/* no static exports found */
/* all exports used */
/*!*********************************!*\
  !*** ./~/ramda/src/identity.js ***!
  \*********************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var _curry1 = __webpack_require__(/*! ./internal/_curry1 */ 2);\nvar _identity = __webpack_require__(/*! ./internal/_identity */ 160);\n\n\n/**\n * A function that does nothing but return the parameter supplied to it. Good\n * as a default or placeholder function.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig a -> a\n * @param {*} x The value to return.\n * @return {*} The input value, `x`.\n * @example\n *\n *      R.identity(1); //=> 1\n *\n *      var obj = {};\n *      R.identity(obj) === obj; //=> true\n * @symb R.identity(a) = a\n */\nmodule.exports = _curry1(_identity);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTQ5LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9yYW1kYS9zcmMvaWRlbnRpdHkuanM/YTBmOSJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX2N1cnJ5MSA9IHJlcXVpcmUoJy4vaW50ZXJuYWwvX2N1cnJ5MScpO1xudmFyIF9pZGVudGl0eSA9IHJlcXVpcmUoJy4vaW50ZXJuYWwvX2lkZW50aXR5Jyk7XG5cblxuLyoqXG4gKiBBIGZ1bmN0aW9uIHRoYXQgZG9lcyBub3RoaW5nIGJ1dCByZXR1cm4gdGhlIHBhcmFtZXRlciBzdXBwbGllZCB0byBpdC4gR29vZFxuICogYXMgYSBkZWZhdWx0IG9yIHBsYWNlaG9sZGVyIGZ1bmN0aW9uLlxuICpcbiAqIEBmdW5jXG4gKiBAbWVtYmVyT2YgUlxuICogQHNpbmNlIHYwLjEuMFxuICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gKiBAc2lnIGEgLT4gYVxuICogQHBhcmFtIHsqfSB4IFRoZSB2YWx1ZSB0byByZXR1cm4uXG4gKiBAcmV0dXJuIHsqfSBUaGUgaW5wdXQgdmFsdWUsIGB4YC5cbiAqIEBleGFtcGxlXG4gKlxuICogICAgICBSLmlkZW50aXR5KDEpOyAvLz0+IDFcbiAqXG4gKiAgICAgIHZhciBvYmogPSB7fTtcbiAqICAgICAgUi5pZGVudGl0eShvYmopID09PSBvYmo7IC8vPT4gdHJ1ZVxuICogQHN5bWIgUi5pZGVudGl0eShhKSA9IGFcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBfY3VycnkxKF9pZGVudGl0eSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcmFtZGEvc3JjL2lkZW50aXR5LmpzXG4vLyBtb2R1bGUgaWQgPSAxNDlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 150 */
/* no static exports found */
/* all exports used */
/*!*******************************!*\
  !*** ./~/ramda/src/ifElse.js ***!
  \*******************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var _curry3 = __webpack_require__(/*! ./internal/_curry3 */ 7);\nvar curryN = __webpack_require__(/*! ./curryN */ 6);\n\n\n/**\n * Creates a function that will process either the `onTrue` or the `onFalse`\n * function depending upon the result of the `condition` predicate.\n *\n * @func\n * @memberOf R\n * @since v0.8.0\n * @category Logic\n * @sig (*... -> Boolean) -> (*... -> *) -> (*... -> *) -> (*... -> *)\n * @param {Function} condition A predicate function\n * @param {Function} onTrue A function to invoke when the `condition` evaluates to a truthy value.\n * @param {Function} onFalse A function to invoke when the `condition` evaluates to a falsy value.\n * @return {Function} A new unary function that will process either the `onTrue` or the `onFalse`\n *                    function depending upon the result of the `condition` predicate.\n * @see R.unless, R.when\n * @example\n *\n *      var incCount = R.ifElse(\n *        R.has('count'),\n *        R.over(R.lensProp('count'), R.inc),\n *        R.assoc('count', 1)\n *      );\n *      incCount({});           //=> { count: 1 }\n *      incCount({ count: 1 }); //=> { count: 2 }\n */\nmodule.exports = _curry3(function ifElse(condition, onTrue, onFalse) {\n  return curryN(Math.max(condition.length, onTrue.length, onFalse.length),\n    function _ifElse() {\n      return condition.apply(this, arguments) ? onTrue.apply(this, arguments) : onFalse.apply(this, arguments);\n    }\n  );\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTUwLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9yYW1kYS9zcmMvaWZFbHNlLmpzPzVkNmMiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIF9jdXJyeTMgPSByZXF1aXJlKCcuL2ludGVybmFsL19jdXJyeTMnKTtcbnZhciBjdXJyeU4gPSByZXF1aXJlKCcuL2N1cnJ5TicpO1xuXG5cbi8qKlxuICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgd2lsbCBwcm9jZXNzIGVpdGhlciB0aGUgYG9uVHJ1ZWAgb3IgdGhlIGBvbkZhbHNlYFxuICogZnVuY3Rpb24gZGVwZW5kaW5nIHVwb24gdGhlIHJlc3VsdCBvZiB0aGUgYGNvbmRpdGlvbmAgcHJlZGljYXRlLlxuICpcbiAqIEBmdW5jXG4gKiBAbWVtYmVyT2YgUlxuICogQHNpbmNlIHYwLjguMFxuICogQGNhdGVnb3J5IExvZ2ljXG4gKiBAc2lnICgqLi4uIC0+IEJvb2xlYW4pIC0+ICgqLi4uIC0+ICopIC0+ICgqLi4uIC0+ICopIC0+ICgqLi4uIC0+ICopXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjb25kaXRpb24gQSBwcmVkaWNhdGUgZnVuY3Rpb25cbiAqIEBwYXJhbSB7RnVuY3Rpb259IG9uVHJ1ZSBBIGZ1bmN0aW9uIHRvIGludm9rZSB3aGVuIHRoZSBgY29uZGl0aW9uYCBldmFsdWF0ZXMgdG8gYSB0cnV0aHkgdmFsdWUuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBvbkZhbHNlIEEgZnVuY3Rpb24gdG8gaW52b2tlIHdoZW4gdGhlIGBjb25kaXRpb25gIGV2YWx1YXRlcyB0byBhIGZhbHN5IHZhbHVlLlxuICogQHJldHVybiB7RnVuY3Rpb259IEEgbmV3IHVuYXJ5IGZ1bmN0aW9uIHRoYXQgd2lsbCBwcm9jZXNzIGVpdGhlciB0aGUgYG9uVHJ1ZWAgb3IgdGhlIGBvbkZhbHNlYFxuICogICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGRlcGVuZGluZyB1cG9uIHRoZSByZXN1bHQgb2YgdGhlIGBjb25kaXRpb25gIHByZWRpY2F0ZS5cbiAqIEBzZWUgUi51bmxlc3MsIFIud2hlblxuICogQGV4YW1wbGVcbiAqXG4gKiAgICAgIHZhciBpbmNDb3VudCA9IFIuaWZFbHNlKFxuICogICAgICAgIFIuaGFzKCdjb3VudCcpLFxuICogICAgICAgIFIub3ZlcihSLmxlbnNQcm9wKCdjb3VudCcpLCBSLmluYyksXG4gKiAgICAgICAgUi5hc3NvYygnY291bnQnLCAxKVxuICogICAgICApO1xuICogICAgICBpbmNDb3VudCh7fSk7ICAgICAgICAgICAvLz0+IHsgY291bnQ6IDEgfVxuICogICAgICBpbmNDb3VudCh7IGNvdW50OiAxIH0pOyAvLz0+IHsgY291bnQ6IDIgfVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IF9jdXJyeTMoZnVuY3Rpb24gaWZFbHNlKGNvbmRpdGlvbiwgb25UcnVlLCBvbkZhbHNlKSB7XG4gIHJldHVybiBjdXJyeU4oTWF0aC5tYXgoY29uZGl0aW9uLmxlbmd0aCwgb25UcnVlLmxlbmd0aCwgb25GYWxzZS5sZW5ndGgpLFxuICAgIGZ1bmN0aW9uIF9pZkVsc2UoKSB7XG4gICAgICByZXR1cm4gY29uZGl0aW9uLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgPyBvblRydWUuYXBwbHkodGhpcywgYXJndW1lbnRzKSA6IG9uRmFsc2UuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9XG4gICk7XG59KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9yYW1kYS9zcmMvaWZFbHNlLmpzXG4vLyBtb2R1bGUgaWQgPSAxNTBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 151 */
/* no static exports found */
/* all exports used */
/*!****************************************************!*\
  !*** ./~/ramda/src/internal/_arrayFromIterator.js ***!
  \****************************************************/
/***/ (function(module, exports) {

eval("module.exports = function _arrayFromIterator(iter) {\n  var list = [];\n  var next;\n  while (!(next = iter.next()).done) {\n    list.push(next.value);\n  }\n  return list;\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTUxLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9yYW1kYS9zcmMvaW50ZXJuYWwvX2FycmF5RnJvbUl0ZXJhdG9yLmpzP2Y5MGYiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBfYXJyYXlGcm9tSXRlcmF0b3IoaXRlcikge1xuICB2YXIgbGlzdCA9IFtdO1xuICB2YXIgbmV4dDtcbiAgd2hpbGUgKCEobmV4dCA9IGl0ZXIubmV4dCgpKS5kb25lKSB7XG4gICAgbGlzdC5wdXNoKG5leHQudmFsdWUpO1xuICB9XG4gIHJldHVybiBsaXN0O1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9yYW1kYS9zcmMvaW50ZXJuYWwvX2FycmF5RnJvbUl0ZXJhdG9yLmpzXG4vLyBtb2R1bGUgaWQgPSAxNTFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 152 */
/* no static exports found */
/* all exports used */
/*!*****************************************!*\
  !*** ./~/ramda/src/internal/_assign.js ***!
  \*****************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var _objectAssign = __webpack_require__(/*! ./_objectAssign */ 165);\n\nmodule.exports =\n  typeof Object.assign === 'function' ? Object.assign : _objectAssign;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTUyLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9yYW1kYS9zcmMvaW50ZXJuYWwvX2Fzc2lnbi5qcz9mNzhkIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBfb2JqZWN0QXNzaWduID0gcmVxdWlyZSgnLi9fb2JqZWN0QXNzaWduJyk7XG5cbm1vZHVsZS5leHBvcnRzID1cbiAgdHlwZW9mIE9iamVjdC5hc3NpZ24gPT09ICdmdW5jdGlvbicgPyBPYmplY3QuYXNzaWduIDogX29iamVjdEFzc2lnbjtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9yYW1kYS9zcmMvaW50ZXJuYWwvX2Fzc2lnbi5qc1xuLy8gbW9kdWxlIGlkID0gMTUyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 153 */
/* no static exports found */
/* all exports used */
/*!*********************************************!*\
  !*** ./~/ramda/src/internal/_complement.js ***!
  \*********************************************/
/***/ (function(module, exports) {

eval("module.exports = function _complement(f) {\n  return function() {\n    return !f.apply(this, arguments);\n  };\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTUzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9yYW1kYS9zcmMvaW50ZXJuYWwvX2NvbXBsZW1lbnQuanM/NDRhZiJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIF9jb21wbGVtZW50KGYpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiAhZi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9O1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9yYW1kYS9zcmMvaW50ZXJuYWwvX2NvbXBsZW1lbnQuanNcbi8vIG1vZHVsZSBpZCA9IDE1M1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 154 */
/* no static exports found */
/* all exports used */
/*!*****************************************!*\
  !*** ./~/ramda/src/internal/_concat.js ***!
  \*****************************************/
/***/ (function(module, exports) {

eval("/**\n * Private `concat` function to merge two array-like objects.\n *\n * @private\n * @param {Array|Arguments} [set1=[]] An array-like object.\n * @param {Array|Arguments} [set2=[]] An array-like object.\n * @return {Array} A new, merged array.\n * @example\n *\n *      _concat([4, 5, 6], [1, 2, 3]); //=> [4, 5, 6, 1, 2, 3]\n */\nmodule.exports = function _concat(set1, set2) {\n  set1 = set1 || [];\n  set2 = set2 || [];\n  var idx;\n  var len1 = set1.length;\n  var len2 = set2.length;\n  var result = [];\n\n  idx = 0;\n  while (idx < len1) {\n    result[result.length] = set1[idx];\n    idx += 1;\n  }\n  idx = 0;\n  while (idx < len2) {\n    result[result.length] = set2[idx];\n    idx += 1;\n  }\n  return result;\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTU0LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9yYW1kYS9zcmMvaW50ZXJuYWwvX2NvbmNhdC5qcz9hZmJhIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogUHJpdmF0ZSBgY29uY2F0YCBmdW5jdGlvbiB0byBtZXJnZSB0d28gYXJyYXktbGlrZSBvYmplY3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fEFyZ3VtZW50c30gW3NldDE9W11dIEFuIGFycmF5LWxpa2Ugb2JqZWN0LlxuICogQHBhcmFtIHtBcnJheXxBcmd1bWVudHN9IFtzZXQyPVtdXSBBbiBhcnJheS1saWtlIG9iamVjdC5cbiAqIEByZXR1cm4ge0FycmF5fSBBIG5ldywgbWVyZ2VkIGFycmF5LlxuICogQGV4YW1wbGVcbiAqXG4gKiAgICAgIF9jb25jYXQoWzQsIDUsIDZdLCBbMSwgMiwgM10pOyAvLz0+IFs0LCA1LCA2LCAxLCAyLCAzXVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIF9jb25jYXQoc2V0MSwgc2V0Mikge1xuICBzZXQxID0gc2V0MSB8fCBbXTtcbiAgc2V0MiA9IHNldDIgfHwgW107XG4gIHZhciBpZHg7XG4gIHZhciBsZW4xID0gc2V0MS5sZW5ndGg7XG4gIHZhciBsZW4yID0gc2V0Mi5sZW5ndGg7XG4gIHZhciByZXN1bHQgPSBbXTtcblxuICBpZHggPSAwO1xuICB3aGlsZSAoaWR4IDwgbGVuMSkge1xuICAgIHJlc3VsdFtyZXN1bHQubGVuZ3RoXSA9IHNldDFbaWR4XTtcbiAgICBpZHggKz0gMTtcbiAgfVxuICBpZHggPSAwO1xuICB3aGlsZSAoaWR4IDwgbGVuMikge1xuICAgIHJlc3VsdFtyZXN1bHQubGVuZ3RoXSA9IHNldDJbaWR4XTtcbiAgICBpZHggKz0gMTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9yYW1kYS9zcmMvaW50ZXJuYWwvX2NvbmNhdC5qc1xuLy8gbW9kdWxlIGlkID0gMTU0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 155 */
/* no static exports found */
/* all exports used */
/*!*******************************************!*\
  !*** ./~/ramda/src/internal/_contains.js ***!
  \*******************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var _indexOf = __webpack_require__(/*! ./_indexOf */ 161);\n\n\nmodule.exports = function _contains(a, list) {\n  return _indexOf(list, a, 0) >= 0;\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTU1LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9yYW1kYS9zcmMvaW50ZXJuYWwvX2NvbnRhaW5zLmpzPzY0ZTIiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIF9pbmRleE9mID0gcmVxdWlyZSgnLi9faW5kZXhPZicpO1xuXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gX2NvbnRhaW5zKGEsIGxpc3QpIHtcbiAgcmV0dXJuIF9pbmRleE9mKGxpc3QsIGEsIDApID49IDA7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3JhbWRhL3NyYy9pbnRlcm5hbC9fY29udGFpbnMuanNcbi8vIG1vZHVsZSBpZCA9IDE1NVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 156 */
/* no static exports found */
/* all exports used */
/*!*****************************************!*\
  !*** ./~/ramda/src/internal/_curryN.js ***!
  \*****************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var _arity = __webpack_require__(/*! ./_arity */ 14);\nvar _isPlaceholder = __webpack_require__(/*! ./_isPlaceholder */ 25);\n\n\n/**\n * Internal curryN function.\n *\n * @private\n * @category Function\n * @param {Number} length The arity of the curried function.\n * @param {Array} received An array of arguments received thus far.\n * @param {Function} fn The function to curry.\n * @return {Function} The curried function.\n */\nmodule.exports = function _curryN(length, received, fn) {\n  return function() {\n    var combined = [];\n    var argsIdx = 0;\n    var left = length;\n    var combinedIdx = 0;\n    while (combinedIdx < received.length || argsIdx < arguments.length) {\n      var result;\n      if (combinedIdx < received.length &&\n          (!_isPlaceholder(received[combinedIdx]) ||\n           argsIdx >= arguments.length)) {\n        result = received[combinedIdx];\n      } else {\n        result = arguments[argsIdx];\n        argsIdx += 1;\n      }\n      combined[combinedIdx] = result;\n      if (!_isPlaceholder(result)) {\n        left -= 1;\n      }\n      combinedIdx += 1;\n    }\n    return left <= 0 ? fn.apply(this, combined)\n                     : _arity(left, _curryN(length, combined, fn));\n  };\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTU2LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9yYW1kYS9zcmMvaW50ZXJuYWwvX2N1cnJ5Ti5qcz8wNTgwIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBfYXJpdHkgPSByZXF1aXJlKCcuL19hcml0eScpO1xudmFyIF9pc1BsYWNlaG9sZGVyID0gcmVxdWlyZSgnLi9faXNQbGFjZWhvbGRlcicpO1xuXG5cbi8qKlxuICogSW50ZXJuYWwgY3VycnlOIGZ1bmN0aW9uLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAqIEBwYXJhbSB7TnVtYmVyfSBsZW5ndGggVGhlIGFyaXR5IG9mIHRoZSBjdXJyaWVkIGZ1bmN0aW9uLlxuICogQHBhcmFtIHtBcnJheX0gcmVjZWl2ZWQgQW4gYXJyYXkgb2YgYXJndW1lbnRzIHJlY2VpdmVkIHRodXMgZmFyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGZ1bmN0aW9uIHRvIGN1cnJ5LlxuICogQHJldHVybiB7RnVuY3Rpb259IFRoZSBjdXJyaWVkIGZ1bmN0aW9uLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIF9jdXJyeU4obGVuZ3RoLCByZWNlaXZlZCwgZm4pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBjb21iaW5lZCA9IFtdO1xuICAgIHZhciBhcmdzSWR4ID0gMDtcbiAgICB2YXIgbGVmdCA9IGxlbmd0aDtcbiAgICB2YXIgY29tYmluZWRJZHggPSAwO1xuICAgIHdoaWxlIChjb21iaW5lZElkeCA8IHJlY2VpdmVkLmxlbmd0aCB8fCBhcmdzSWR4IDwgYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgdmFyIHJlc3VsdDtcbiAgICAgIGlmIChjb21iaW5lZElkeCA8IHJlY2VpdmVkLmxlbmd0aCAmJlxuICAgICAgICAgICghX2lzUGxhY2Vob2xkZXIocmVjZWl2ZWRbY29tYmluZWRJZHhdKSB8fFxuICAgICAgICAgICBhcmdzSWR4ID49IGFyZ3VtZW50cy5sZW5ndGgpKSB7XG4gICAgICAgIHJlc3VsdCA9IHJlY2VpdmVkW2NvbWJpbmVkSWR4XTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3VsdCA9IGFyZ3VtZW50c1thcmdzSWR4XTtcbiAgICAgICAgYXJnc0lkeCArPSAxO1xuICAgICAgfVxuICAgICAgY29tYmluZWRbY29tYmluZWRJZHhdID0gcmVzdWx0O1xuICAgICAgaWYgKCFfaXNQbGFjZWhvbGRlcihyZXN1bHQpKSB7XG4gICAgICAgIGxlZnQgLT0gMTtcbiAgICAgIH1cbiAgICAgIGNvbWJpbmVkSWR4ICs9IDE7XG4gICAgfVxuICAgIHJldHVybiBsZWZ0IDw9IDAgPyBmbi5hcHBseSh0aGlzLCBjb21iaW5lZClcbiAgICAgICAgICAgICAgICAgICAgIDogX2FyaXR5KGxlZnQsIF9jdXJyeU4obGVuZ3RoLCBjb21iaW5lZCwgZm4pKTtcbiAgfTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcmFtZGEvc3JjL2ludGVybmFsL19jdXJyeU4uanNcbi8vIG1vZHVsZSBpZCA9IDE1NlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 157 */
/* no static exports found */
/* all exports used */
/*!*****************************************!*\
  !*** ./~/ramda/src/internal/_equals.js ***!
  \*****************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var _arrayFromIterator = __webpack_require__(/*! ./_arrayFromIterator */ 151);\nvar _functionName = __webpack_require__(/*! ./_functionName */ 159);\nvar _has = __webpack_require__(/*! ./_has */ 15);\nvar identical = __webpack_require__(/*! ../identical */ 148);\nvar keys = __webpack_require__(/*! ../keys */ 17);\nvar type = __webpack_require__(/*! ../type */ 192);\n\n\nmodule.exports = function _equals(a, b, stackA, stackB) {\n  if (identical(a, b)) {\n    return true;\n  }\n\n  if (type(a) !== type(b)) {\n    return false;\n  }\n\n  if (a == null || b == null) {\n    return false;\n  }\n\n  if (typeof a.equals === 'function' || typeof b.equals === 'function') {\n    return typeof a.equals === 'function' && a.equals(b) &&\n           typeof b.equals === 'function' && b.equals(a);\n  }\n\n  switch (type(a)) {\n    case 'Arguments':\n    case 'Array':\n    case 'Object':\n      if (typeof a.constructor === 'function' &&\n          _functionName(a.constructor) === 'Promise') {\n        return a === b;\n      }\n      break;\n    case 'Boolean':\n    case 'Number':\n    case 'String':\n      if (!(typeof a === typeof b && identical(a.valueOf(), b.valueOf()))) {\n        return false;\n      }\n      break;\n    case 'Date':\n      if (!identical(a.valueOf(), b.valueOf())) {\n        return false;\n      }\n      break;\n    case 'Error':\n      return a.name === b.name && a.message === b.message;\n    case 'RegExp':\n      if (!(a.source === b.source &&\n            a.global === b.global &&\n            a.ignoreCase === b.ignoreCase &&\n            a.multiline === b.multiline &&\n            a.sticky === b.sticky &&\n            a.unicode === b.unicode)) {\n        return false;\n      }\n      break;\n    case 'Map':\n    case 'Set':\n      if (!_equals(_arrayFromIterator(a.entries()), _arrayFromIterator(b.entries()), stackA, stackB)) {\n        return false;\n      }\n      break;\n    case 'Int8Array':\n    case 'Uint8Array':\n    case 'Uint8ClampedArray':\n    case 'Int16Array':\n    case 'Uint16Array':\n    case 'Int32Array':\n    case 'Uint32Array':\n    case 'Float32Array':\n    case 'Float64Array':\n      break;\n    case 'ArrayBuffer':\n      break;\n    default:\n      // Values of other types are only equal if identical.\n      return false;\n  }\n\n  var keysA = keys(a);\n  if (keysA.length !== keys(b).length) {\n    return false;\n  }\n\n  var idx = stackA.length - 1;\n  while (idx >= 0) {\n    if (stackA[idx] === a) {\n      return stackB[idx] === b;\n    }\n    idx -= 1;\n  }\n\n  stackA.push(a);\n  stackB.push(b);\n  idx = keysA.length - 1;\n  while (idx >= 0) {\n    var key = keysA[idx];\n    if (!(_has(key, b) && _equals(b[key], a[key], stackA, stackB))) {\n      return false;\n    }\n    idx -= 1;\n  }\n  stackA.pop();\n  stackB.pop();\n  return true;\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTU3LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9yYW1kYS9zcmMvaW50ZXJuYWwvX2VxdWFscy5qcz9mY2ZhIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBfYXJyYXlGcm9tSXRlcmF0b3IgPSByZXF1aXJlKCcuL19hcnJheUZyb21JdGVyYXRvcicpO1xudmFyIF9mdW5jdGlvbk5hbWUgPSByZXF1aXJlKCcuL19mdW5jdGlvbk5hbWUnKTtcbnZhciBfaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgaWRlbnRpY2FsID0gcmVxdWlyZSgnLi4vaWRlbnRpY2FsJyk7XG52YXIga2V5cyA9IHJlcXVpcmUoJy4uL2tleXMnKTtcbnZhciB0eXBlID0gcmVxdWlyZSgnLi4vdHlwZScpO1xuXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gX2VxdWFscyhhLCBiLCBzdGFja0EsIHN0YWNrQikge1xuICBpZiAoaWRlbnRpY2FsKGEsIGIpKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpZiAodHlwZShhKSAhPT0gdHlwZShiKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlmIChhID09IG51bGwgfHwgYiA9PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBhLmVxdWFscyA9PT0gJ2Z1bmN0aW9uJyB8fCB0eXBlb2YgYi5lcXVhbHMgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gdHlwZW9mIGEuZXF1YWxzID09PSAnZnVuY3Rpb24nICYmIGEuZXF1YWxzKGIpICYmXG4gICAgICAgICAgIHR5cGVvZiBiLmVxdWFscyA9PT0gJ2Z1bmN0aW9uJyAmJiBiLmVxdWFscyhhKTtcbiAgfVxuXG4gIHN3aXRjaCAodHlwZShhKSkge1xuICAgIGNhc2UgJ0FyZ3VtZW50cyc6XG4gICAgY2FzZSAnQXJyYXknOlxuICAgIGNhc2UgJ09iamVjdCc6XG4gICAgICBpZiAodHlwZW9mIGEuY29uc3RydWN0b3IgPT09ICdmdW5jdGlvbicgJiZcbiAgICAgICAgICBfZnVuY3Rpb25OYW1lKGEuY29uc3RydWN0b3IpID09PSAnUHJvbWlzZScpIHtcbiAgICAgICAgcmV0dXJuIGEgPT09IGI7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlICdCb29sZWFuJzpcbiAgICBjYXNlICdOdW1iZXInOlxuICAgIGNhc2UgJ1N0cmluZyc6XG4gICAgICBpZiAoISh0eXBlb2YgYSA9PT0gdHlwZW9mIGIgJiYgaWRlbnRpY2FsKGEudmFsdWVPZigpLCBiLnZhbHVlT2YoKSkpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ0RhdGUnOlxuICAgICAgaWYgKCFpZGVudGljYWwoYS52YWx1ZU9mKCksIGIudmFsdWVPZigpKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlICdFcnJvcic6XG4gICAgICByZXR1cm4gYS5uYW1lID09PSBiLm5hbWUgJiYgYS5tZXNzYWdlID09PSBiLm1lc3NhZ2U7XG4gICAgY2FzZSAnUmVnRXhwJzpcbiAgICAgIGlmICghKGEuc291cmNlID09PSBiLnNvdXJjZSAmJlxuICAgICAgICAgICAgYS5nbG9iYWwgPT09IGIuZ2xvYmFsICYmXG4gICAgICAgICAgICBhLmlnbm9yZUNhc2UgPT09IGIuaWdub3JlQ2FzZSAmJlxuICAgICAgICAgICAgYS5tdWx0aWxpbmUgPT09IGIubXVsdGlsaW5lICYmXG4gICAgICAgICAgICBhLnN0aWNreSA9PT0gYi5zdGlja3kgJiZcbiAgICAgICAgICAgIGEudW5pY29kZSA9PT0gYi51bmljb2RlKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlICdNYXAnOlxuICAgIGNhc2UgJ1NldCc6XG4gICAgICBpZiAoIV9lcXVhbHMoX2FycmF5RnJvbUl0ZXJhdG9yKGEuZW50cmllcygpKSwgX2FycmF5RnJvbUl0ZXJhdG9yKGIuZW50cmllcygpKSwgc3RhY2tBLCBzdGFja0IpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ0ludDhBcnJheSc6XG4gICAgY2FzZSAnVWludDhBcnJheSc6XG4gICAgY2FzZSAnVWludDhDbGFtcGVkQXJyYXknOlxuICAgIGNhc2UgJ0ludDE2QXJyYXknOlxuICAgIGNhc2UgJ1VpbnQxNkFycmF5JzpcbiAgICBjYXNlICdJbnQzMkFycmF5JzpcbiAgICBjYXNlICdVaW50MzJBcnJheSc6XG4gICAgY2FzZSAnRmxvYXQzMkFycmF5JzpcbiAgICBjYXNlICdGbG9hdDY0QXJyYXknOlxuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnQXJyYXlCdWZmZXInOlxuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIC8vIFZhbHVlcyBvZiBvdGhlciB0eXBlcyBhcmUgb25seSBlcXVhbCBpZiBpZGVudGljYWwuXG4gICAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIga2V5c0EgPSBrZXlzKGEpO1xuICBpZiAoa2V5c0EubGVuZ3RoICE9PSBrZXlzKGIpLmxlbmd0aCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBpZHggPSBzdGFja0EubGVuZ3RoIC0gMTtcbiAgd2hpbGUgKGlkeCA+PSAwKSB7XG4gICAgaWYgKHN0YWNrQVtpZHhdID09PSBhKSB7XG4gICAgICByZXR1cm4gc3RhY2tCW2lkeF0gPT09IGI7XG4gICAgfVxuICAgIGlkeCAtPSAxO1xuICB9XG5cbiAgc3RhY2tBLnB1c2goYSk7XG4gIHN0YWNrQi5wdXNoKGIpO1xuICBpZHggPSBrZXlzQS5sZW5ndGggLSAxO1xuICB3aGlsZSAoaWR4ID49IDApIHtcbiAgICB2YXIga2V5ID0ga2V5c0FbaWR4XTtcbiAgICBpZiAoIShfaGFzKGtleSwgYikgJiYgX2VxdWFscyhiW2tleV0sIGFba2V5XSwgc3RhY2tBLCBzdGFja0IpKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZHggLT0gMTtcbiAgfVxuICBzdGFja0EucG9wKCk7XG4gIHN0YWNrQi5wb3AoKTtcbiAgcmV0dXJuIHRydWU7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3JhbWRhL3NyYy9pbnRlcm5hbC9fZXF1YWxzLmpzXG4vLyBtb2R1bGUgaWQgPSAxNTdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 158 */
/* no static exports found */
/* all exports used */
/*!*****************************************!*\
  !*** ./~/ramda/src/internal/_filter.js ***!
  \*****************************************/
/***/ (function(module, exports) {

eval("module.exports = function _filter(fn, list) {\n  var idx = 0;\n  var len = list.length;\n  var result = [];\n\n  while (idx < len) {\n    if (fn(list[idx])) {\n      result[result.length] = list[idx];\n    }\n    idx += 1;\n  }\n  return result;\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTU4LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9yYW1kYS9zcmMvaW50ZXJuYWwvX2ZpbHRlci5qcz8xNGNmIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gX2ZpbHRlcihmbiwgbGlzdCkge1xuICB2YXIgaWR4ID0gMDtcbiAgdmFyIGxlbiA9IGxpc3QubGVuZ3RoO1xuICB2YXIgcmVzdWx0ID0gW107XG5cbiAgd2hpbGUgKGlkeCA8IGxlbikge1xuICAgIGlmIChmbihsaXN0W2lkeF0pKSB7XG4gICAgICByZXN1bHRbcmVzdWx0Lmxlbmd0aF0gPSBsaXN0W2lkeF07XG4gICAgfVxuICAgIGlkeCArPSAxO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3JhbWRhL3NyYy9pbnRlcm5hbC9fZmlsdGVyLmpzXG4vLyBtb2R1bGUgaWQgPSAxNThcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 159 */
/* no static exports found */
/* all exports used */
/*!***********************************************!*\
  !*** ./~/ramda/src/internal/_functionName.js ***!
  \***********************************************/
/***/ (function(module, exports) {

eval("module.exports = function _functionName(f) {\n  // String(x => x) evaluates to \"x => x\", so the pattern may not match.\n  var match = String(f).match(/^function (\\w*)/);\n  return match == null ? '' : match[1];\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTU5LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9yYW1kYS9zcmMvaW50ZXJuYWwvX2Z1bmN0aW9uTmFtZS5qcz82YjFkIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gX2Z1bmN0aW9uTmFtZShmKSB7XG4gIC8vIFN0cmluZyh4ID0+IHgpIGV2YWx1YXRlcyB0byBcInggPT4geFwiLCBzbyB0aGUgcGF0dGVybiBtYXkgbm90IG1hdGNoLlxuICB2YXIgbWF0Y2ggPSBTdHJpbmcoZikubWF0Y2goL15mdW5jdGlvbiAoXFx3KikvKTtcbiAgcmV0dXJuIG1hdGNoID09IG51bGwgPyAnJyA6IG1hdGNoWzFdO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9yYW1kYS9zcmMvaW50ZXJuYWwvX2Z1bmN0aW9uTmFtZS5qc1xuLy8gbW9kdWxlIGlkID0gMTU5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 160 */
/* no static exports found */
/* all exports used */
/*!*******************************************!*\
  !*** ./~/ramda/src/internal/_identity.js ***!
  \*******************************************/
/***/ (function(module, exports) {

eval("module.exports = function _identity(x) { return x; };\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTYwLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9yYW1kYS9zcmMvaW50ZXJuYWwvX2lkZW50aXR5LmpzP2U5OWMiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBfaWRlbnRpdHkoeCkgeyByZXR1cm4geDsgfTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9yYW1kYS9zcmMvaW50ZXJuYWwvX2lkZW50aXR5LmpzXG4vLyBtb2R1bGUgaWQgPSAxNjBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 161 */
/* no static exports found */
/* all exports used */
/*!******************************************!*\
  !*** ./~/ramda/src/internal/_indexOf.js ***!
  \******************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var equals = __webpack_require__(/*! ../equals */ 56);\n\n\nmodule.exports = function _indexOf(list, a, idx) {\n  var inf, item;\n  // Array.prototype.indexOf doesn't exist below IE9\n  if (typeof list.indexOf === 'function') {\n    switch (typeof a) {\n      case 'number':\n        if (a === 0) {\n          // manually crawl the list to distinguish between +0 and -0\n          inf = 1 / a;\n          while (idx < list.length) {\n            item = list[idx];\n            if (item === 0 && 1 / item === inf) {\n              return idx;\n            }\n            idx += 1;\n          }\n          return -1;\n        } else if (a !== a) {\n          // NaN\n          while (idx < list.length) {\n            item = list[idx];\n            if (typeof item === 'number' && item !== item) {\n              return idx;\n            }\n            idx += 1;\n          }\n          return -1;\n        }\n        // non-zero numbers can utilise Set\n        return list.indexOf(a, idx);\n\n      // all these types can utilise Set\n      case 'string':\n      case 'boolean':\n      case 'function':\n      case 'undefined':\n        return list.indexOf(a, idx);\n\n      case 'object':\n        if (a === null) {\n          // null can utilise Set\n          return list.indexOf(a, idx);\n        }\n    }\n  }\n  // anything else not covered above, defer to R.equals\n  while (idx < list.length) {\n    if (equals(list[idx], a)) {\n      return idx;\n    }\n    idx += 1;\n  }\n  return -1;\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTYxLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9yYW1kYS9zcmMvaW50ZXJuYWwvX2luZGV4T2YuanM/Y2VmMSJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZXF1YWxzID0gcmVxdWlyZSgnLi4vZXF1YWxzJyk7XG5cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBfaW5kZXhPZihsaXN0LCBhLCBpZHgpIHtcbiAgdmFyIGluZiwgaXRlbTtcbiAgLy8gQXJyYXkucHJvdG90eXBlLmluZGV4T2YgZG9lc24ndCBleGlzdCBiZWxvdyBJRTlcbiAgaWYgKHR5cGVvZiBsaXN0LmluZGV4T2YgPT09ICdmdW5jdGlvbicpIHtcbiAgICBzd2l0Y2ggKHR5cGVvZiBhKSB7XG4gICAgICBjYXNlICdudW1iZXInOlxuICAgICAgICBpZiAoYSA9PT0gMCkge1xuICAgICAgICAgIC8vIG1hbnVhbGx5IGNyYXdsIHRoZSBsaXN0IHRvIGRpc3Rpbmd1aXNoIGJldHdlZW4gKzAgYW5kIC0wXG4gICAgICAgICAgaW5mID0gMSAvIGE7XG4gICAgICAgICAgd2hpbGUgKGlkeCA8IGxpc3QubGVuZ3RoKSB7XG4gICAgICAgICAgICBpdGVtID0gbGlzdFtpZHhdO1xuICAgICAgICAgICAgaWYgKGl0ZW0gPT09IDAgJiYgMSAvIGl0ZW0gPT09IGluZikge1xuICAgICAgICAgICAgICByZXR1cm4gaWR4O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWR4ICs9IDE7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgfSBlbHNlIGlmIChhICE9PSBhKSB7XG4gICAgICAgICAgLy8gTmFOXG4gICAgICAgICAgd2hpbGUgKGlkeCA8IGxpc3QubGVuZ3RoKSB7XG4gICAgICAgICAgICBpdGVtID0gbGlzdFtpZHhdO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBpdGVtID09PSAnbnVtYmVyJyAmJiBpdGVtICE9PSBpdGVtKSB7XG4gICAgICAgICAgICAgIHJldHVybiBpZHg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZHggKz0gMTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICB9XG4gICAgICAgIC8vIG5vbi16ZXJvIG51bWJlcnMgY2FuIHV0aWxpc2UgU2V0XG4gICAgICAgIHJldHVybiBsaXN0LmluZGV4T2YoYSwgaWR4KTtcblxuICAgICAgLy8gYWxsIHRoZXNlIHR5cGVzIGNhbiB1dGlsaXNlIFNldFxuICAgICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgIGNhc2UgJ2Jvb2xlYW4nOlxuICAgICAgY2FzZSAnZnVuY3Rpb24nOlxuICAgICAgY2FzZSAndW5kZWZpbmVkJzpcbiAgICAgICAgcmV0dXJuIGxpc3QuaW5kZXhPZihhLCBpZHgpO1xuXG4gICAgICBjYXNlICdvYmplY3QnOlxuICAgICAgICBpZiAoYSA9PT0gbnVsbCkge1xuICAgICAgICAgIC8vIG51bGwgY2FuIHV0aWxpc2UgU2V0XG4gICAgICAgICAgcmV0dXJuIGxpc3QuaW5kZXhPZihhLCBpZHgpO1xuICAgICAgICB9XG4gICAgfVxuICB9XG4gIC8vIGFueXRoaW5nIGVsc2Ugbm90IGNvdmVyZWQgYWJvdmUsIGRlZmVyIHRvIFIuZXF1YWxzXG4gIHdoaWxlIChpZHggPCBsaXN0Lmxlbmd0aCkge1xuICAgIGlmIChlcXVhbHMobGlzdFtpZHhdLCBhKSkge1xuICAgICAgcmV0dXJuIGlkeDtcbiAgICB9XG4gICAgaWR4ICs9IDE7XG4gIH1cbiAgcmV0dXJuIC0xO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9yYW1kYS9zcmMvaW50ZXJuYWwvX2luZGV4T2YuanNcbi8vIG1vZHVsZSBpZCA9IDE2MVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 162 */
/* no static exports found */
/* all exports used */
/*!**********************************************!*\
  !*** ./~/ramda/src/internal/_isArguments.js ***!
  \**********************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var _has = __webpack_require__(/*! ./_has */ 15);\n\n\nmodule.exports = (function() {\n  var toString = Object.prototype.toString;\n  return toString.call(arguments) === '[object Arguments]' ?\n    function _isArguments(x) { return toString.call(x) === '[object Arguments]'; } :\n    function _isArguments(x) { return _has('callee', x); };\n}());\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTYyLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9yYW1kYS9zcmMvaW50ZXJuYWwvX2lzQXJndW1lbnRzLmpzPzc2MjUiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIF9oYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcblxuXG5tb2R1bGUuZXhwb3J0cyA9IChmdW5jdGlvbigpIHtcbiAgdmFyIHRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwoYXJndW1lbnRzKSA9PT0gJ1tvYmplY3QgQXJndW1lbnRzXScgP1xuICAgIGZ1bmN0aW9uIF9pc0FyZ3VtZW50cyh4KSB7IHJldHVybiB0b1N0cmluZy5jYWxsKHgpID09PSAnW29iamVjdCBBcmd1bWVudHNdJzsgfSA6XG4gICAgZnVuY3Rpb24gX2lzQXJndW1lbnRzKHgpIHsgcmV0dXJuIF9oYXMoJ2NhbGxlZScsIHgpOyB9O1xufSgpKTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9yYW1kYS9zcmMvaW50ZXJuYWwvX2lzQXJndW1lbnRzLmpzXG4vLyBtb2R1bGUgaWQgPSAxNjJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 163 */
/* no static exports found */
/* all exports used */
/*!*******************************************!*\
  !*** ./~/ramda/src/internal/_isObject.js ***!
  \*******************************************/
/***/ (function(module, exports) {

eval("module.exports = function _isObject(x) {\n  return Object.prototype.toString.call(x) === '[object Object]';\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTYzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9yYW1kYS9zcmMvaW50ZXJuYWwvX2lzT2JqZWN0LmpzPzQ0MjciXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBfaXNPYmplY3QoeCkge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHgpID09PSAnW29iamVjdCBPYmplY3RdJztcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcmFtZGEvc3JjL2ludGVybmFsL19pc09iamVjdC5qc1xuLy8gbW9kdWxlIGlkID0gMTYzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 164 */
/* no static exports found */
/* all exports used */
/*!************************************************!*\
  !*** ./~/ramda/src/internal/_isTransformer.js ***!
  \************************************************/
/***/ (function(module, exports) {

eval("module.exports = function _isTransformer(obj) {\n  return typeof obj['@@transducer/step'] === 'function';\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTY0LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9yYW1kYS9zcmMvaW50ZXJuYWwvX2lzVHJhbnNmb3JtZXIuanM/N2I1MiJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIF9pc1RyYW5zZm9ybWVyKG9iaikge1xuICByZXR1cm4gdHlwZW9mIG9ialsnQEB0cmFuc2R1Y2VyL3N0ZXAnXSA9PT0gJ2Z1bmN0aW9uJztcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcmFtZGEvc3JjL2ludGVybmFsL19pc1RyYW5zZm9ybWVyLmpzXG4vLyBtb2R1bGUgaWQgPSAxNjRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 165 */
/* no static exports found */
/* all exports used */
/*!***********************************************!*\
  !*** ./~/ramda/src/internal/_objectAssign.js ***!
  \***********************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var _has = __webpack_require__(/*! ./_has */ 15);\n\n// Based on https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\nmodule.exports = function _objectAssign(target) {\n  if (target == null) {\n    throw new TypeError('Cannot convert undefined or null to object');\n  }\n\n  var output = Object(target);\n  var idx = 1;\n  var length = arguments.length;\n  while (idx < length) {\n    var source = arguments[idx];\n    if (source != null) {\n      for (var nextKey in source) {\n        if (_has(nextKey, source)) {\n          output[nextKey] = source[nextKey];\n        }\n      }\n    }\n    idx += 1;\n  }\n  return output;\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTY1LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9yYW1kYS9zcmMvaW50ZXJuYWwvX29iamVjdEFzc2lnbi5qcz83ZTg2Il0sInNvdXJjZXNDb250ZW50IjpbInZhciBfaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG5cbi8vIEJhc2VkIG9uIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL09iamVjdC9hc3NpZ25cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gX29iamVjdEFzc2lnbih0YXJnZXQpIHtcbiAgaWYgKHRhcmdldCA9PSBudWxsKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQ2Fubm90IGNvbnZlcnQgdW5kZWZpbmVkIG9yIG51bGwgdG8gb2JqZWN0Jyk7XG4gIH1cblxuICB2YXIgb3V0cHV0ID0gT2JqZWN0KHRhcmdldCk7XG4gIHZhciBpZHggPSAxO1xuICB2YXIgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgd2hpbGUgKGlkeCA8IGxlbmd0aCkge1xuICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaWR4XTtcbiAgICBpZiAoc291cmNlICE9IG51bGwpIHtcbiAgICAgIGZvciAodmFyIG5leHRLZXkgaW4gc291cmNlKSB7XG4gICAgICAgIGlmIChfaGFzKG5leHRLZXksIHNvdXJjZSkpIHtcbiAgICAgICAgICBvdXRwdXRbbmV4dEtleV0gPSBzb3VyY2VbbmV4dEtleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgaWR4ICs9IDE7XG4gIH1cbiAgcmV0dXJuIG91dHB1dDtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcmFtZGEvc3JjL2ludGVybmFsL19vYmplY3RBc3NpZ24uanNcbi8vIG1vZHVsZSBpZCA9IDE2NVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 166 */
/* no static exports found */
/* all exports used */
/*!***************************************!*\
  !*** ./~/ramda/src/internal/_pipe.js ***!
  \***************************************/
/***/ (function(module, exports) {

eval("module.exports = function _pipe(f, g) {\n  return function() {\n    return g.call(this, f.apply(this, arguments));\n  };\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTY2LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9yYW1kYS9zcmMvaW50ZXJuYWwvX3BpcGUuanM/YThjYyJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIF9waXBlKGYsIGcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBnLmNhbGwodGhpcywgZi5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcmFtZGEvc3JjL2ludGVybmFsL19waXBlLmpzXG4vLyBtb2R1bGUgaWQgPSAxNjZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 167 */
/* no static exports found */
/* all exports used */
/*!****************************************!*\
  !*** ./~/ramda/src/internal/_quote.js ***!
  \****************************************/
/***/ (function(module, exports) {

eval("module.exports = function _quote(s) {\n  var escaped = s\n    .replace(/\\\\/g, '\\\\\\\\')\n    .replace(/[\\b]/g, '\\\\b')  // \\b matches word boundary; [\\b] matches backspace\n    .replace(/\\f/g, '\\\\f')\n    .replace(/\\n/g, '\\\\n')\n    .replace(/\\r/g, '\\\\r')\n    .replace(/\\t/g, '\\\\t')\n    .replace(/\\v/g, '\\\\v')\n    .replace(/\\0/g, '\\\\0');\n\n  return '\"' + escaped.replace(/\"/g, '\\\\\"') + '\"';\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTY3LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9yYW1kYS9zcmMvaW50ZXJuYWwvX3F1b3RlLmpzPzM4ZjQiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBfcXVvdGUocykge1xuICB2YXIgZXNjYXBlZCA9IHNcbiAgICAucmVwbGFjZSgvXFxcXC9nLCAnXFxcXFxcXFwnKVxuICAgIC5yZXBsYWNlKC9bXFxiXS9nLCAnXFxcXGInKSAgLy8gXFxiIG1hdGNoZXMgd29yZCBib3VuZGFyeTsgW1xcYl0gbWF0Y2hlcyBiYWNrc3BhY2VcbiAgICAucmVwbGFjZSgvXFxmL2csICdcXFxcZicpXG4gICAgLnJlcGxhY2UoL1xcbi9nLCAnXFxcXG4nKVxuICAgIC5yZXBsYWNlKC9cXHIvZywgJ1xcXFxyJylcbiAgICAucmVwbGFjZSgvXFx0L2csICdcXFxcdCcpXG4gICAgLnJlcGxhY2UoL1xcdi9nLCAnXFxcXHYnKVxuICAgIC5yZXBsYWNlKC9cXDAvZywgJ1xcXFwwJyk7XG5cbiAgcmV0dXJuICdcIicgKyBlc2NhcGVkLnJlcGxhY2UoL1wiL2csICdcXFxcXCInKSArICdcIic7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3JhbWRhL3NyYy9pbnRlcm5hbC9fcXVvdGUuanNcbi8vIG1vZHVsZSBpZCA9IDE2N1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 168 */
/* no static exports found */
/* all exports used */
/*!**********************************************!*\
  !*** ./~/ramda/src/internal/_toISOString.js ***!
  \**********************************************/
/***/ (function(module, exports) {

eval("/**\n * Polyfill from <https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString>.\n */\nmodule.exports = (function() {\n  var pad = function pad(n) { return (n < 10 ? '0' : '') + n; };\n\n  return typeof Date.prototype.toISOString === 'function' ?\n    function _toISOString(d) {\n      return d.toISOString();\n    } :\n    function _toISOString(d) {\n      return (\n        d.getUTCFullYear() + '-' +\n        pad(d.getUTCMonth() + 1) + '-' +\n        pad(d.getUTCDate()) + 'T' +\n        pad(d.getUTCHours()) + ':' +\n        pad(d.getUTCMinutes()) + ':' +\n        pad(d.getUTCSeconds()) + '.' +\n        (d.getUTCMilliseconds() / 1000).toFixed(3).slice(2, 5) + 'Z'\n      );\n    };\n}());\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTY4LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9yYW1kYS9zcmMvaW50ZXJuYWwvX3RvSVNPU3RyaW5nLmpzPzM5MzUiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBQb2x5ZmlsbCBmcm9tIDxodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9EYXRlL3RvSVNPU3RyaW5nPi5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSAoZnVuY3Rpb24oKSB7XG4gIHZhciBwYWQgPSBmdW5jdGlvbiBwYWQobikgeyByZXR1cm4gKG4gPCAxMCA/ICcwJyA6ICcnKSArIG47IH07XG5cbiAgcmV0dXJuIHR5cGVvZiBEYXRlLnByb3RvdHlwZS50b0lTT1N0cmluZyA9PT0gJ2Z1bmN0aW9uJyA/XG4gICAgZnVuY3Rpb24gX3RvSVNPU3RyaW5nKGQpIHtcbiAgICAgIHJldHVybiBkLnRvSVNPU3RyaW5nKCk7XG4gICAgfSA6XG4gICAgZnVuY3Rpb24gX3RvSVNPU3RyaW5nKGQpIHtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIGQuZ2V0VVRDRnVsbFllYXIoKSArICctJyArXG4gICAgICAgIHBhZChkLmdldFVUQ01vbnRoKCkgKyAxKSArICctJyArXG4gICAgICAgIHBhZChkLmdldFVUQ0RhdGUoKSkgKyAnVCcgK1xuICAgICAgICBwYWQoZC5nZXRVVENIb3VycygpKSArICc6JyArXG4gICAgICAgIHBhZChkLmdldFVUQ01pbnV0ZXMoKSkgKyAnOicgK1xuICAgICAgICBwYWQoZC5nZXRVVENTZWNvbmRzKCkpICsgJy4nICtcbiAgICAgICAgKGQuZ2V0VVRDTWlsbGlzZWNvbmRzKCkgLyAxMDAwKS50b0ZpeGVkKDMpLnNsaWNlKDIsIDUpICsgJ1onXG4gICAgICApO1xuICAgIH07XG59KCkpO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3JhbWRhL3NyYy9pbnRlcm5hbC9fdG9JU09TdHJpbmcuanNcbi8vIG1vZHVsZSBpZCA9IDE2OFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 169 */
/* no static exports found */
/* all exports used */
/*!*******************************************!*\
  !*** ./~/ramda/src/internal/_toString.js ***!
  \*******************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var _contains = __webpack_require__(/*! ./_contains */ 155);\nvar _map = __webpack_require__(/*! ./_map */ 61);\nvar _quote = __webpack_require__(/*! ./_quote */ 167);\nvar _toISOString = __webpack_require__(/*! ./_toISOString */ 168);\nvar keys = __webpack_require__(/*! ../keys */ 17);\nvar reject = __webpack_require__(/*! ../reject */ 185);\n\n\nmodule.exports = function _toString(x, seen) {\n  var recur = function recur(y) {\n    var xs = seen.concat([x]);\n    return _contains(y, xs) ? '<Circular>' : _toString(y, xs);\n  };\n\n  //  mapPairs :: (Object, [String]) -> [String]\n  var mapPairs = function(obj, keys) {\n    return _map(function(k) { return _quote(k) + ': ' + recur(obj[k]); }, keys.slice().sort());\n  };\n\n  switch (Object.prototype.toString.call(x)) {\n    case '[object Arguments]':\n      return '(function() { return arguments; }(' + _map(recur, x).join(', ') + '))';\n    case '[object Array]':\n      return '[' + _map(recur, x).concat(mapPairs(x, reject(function(k) { return /^\\d+$/.test(k); }, keys(x)))).join(', ') + ']';\n    case '[object Boolean]':\n      return typeof x === 'object' ? 'new Boolean(' + recur(x.valueOf()) + ')' : x.toString();\n    case '[object Date]':\n      return 'new Date(' + (isNaN(x.valueOf()) ? recur(NaN) : _quote(_toISOString(x))) + ')';\n    case '[object Null]':\n      return 'null';\n    case '[object Number]':\n      return typeof x === 'object' ? 'new Number(' + recur(x.valueOf()) + ')' : 1 / x === -Infinity ? '-0' : x.toString(10);\n    case '[object String]':\n      return typeof x === 'object' ? 'new String(' + recur(x.valueOf()) + ')' : _quote(x);\n    case '[object Undefined]':\n      return 'undefined';\n    default:\n      if (typeof x.toString === 'function') {\n        var repr = x.toString();\n        if (repr !== '[object Object]') {\n          return repr;\n        }\n      }\n      return '{' + mapPairs(x, keys(x)).join(', ') + '}';\n  }\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTY5LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9yYW1kYS9zcmMvaW50ZXJuYWwvX3RvU3RyaW5nLmpzPzFmZWIiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIF9jb250YWlucyA9IHJlcXVpcmUoJy4vX2NvbnRhaW5zJyk7XG52YXIgX21hcCA9IHJlcXVpcmUoJy4vX21hcCcpO1xudmFyIF9xdW90ZSA9IHJlcXVpcmUoJy4vX3F1b3RlJyk7XG52YXIgX3RvSVNPU3RyaW5nID0gcmVxdWlyZSgnLi9fdG9JU09TdHJpbmcnKTtcbnZhciBrZXlzID0gcmVxdWlyZSgnLi4va2V5cycpO1xudmFyIHJlamVjdCA9IHJlcXVpcmUoJy4uL3JlamVjdCcpO1xuXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gX3RvU3RyaW5nKHgsIHNlZW4pIHtcbiAgdmFyIHJlY3VyID0gZnVuY3Rpb24gcmVjdXIoeSkge1xuICAgIHZhciB4cyA9IHNlZW4uY29uY2F0KFt4XSk7XG4gICAgcmV0dXJuIF9jb250YWlucyh5LCB4cykgPyAnPENpcmN1bGFyPicgOiBfdG9TdHJpbmcoeSwgeHMpO1xuICB9O1xuXG4gIC8vICBtYXBQYWlycyA6OiAoT2JqZWN0LCBbU3RyaW5nXSkgLT4gW1N0cmluZ11cbiAgdmFyIG1hcFBhaXJzID0gZnVuY3Rpb24ob2JqLCBrZXlzKSB7XG4gICAgcmV0dXJuIF9tYXAoZnVuY3Rpb24oaykgeyByZXR1cm4gX3F1b3RlKGspICsgJzogJyArIHJlY3VyKG9ialtrXSk7IH0sIGtleXMuc2xpY2UoKS5zb3J0KCkpO1xuICB9O1xuXG4gIHN3aXRjaCAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHgpKSB7XG4gICAgY2FzZSAnW29iamVjdCBBcmd1bWVudHNdJzpcbiAgICAgIHJldHVybiAnKGZ1bmN0aW9uKCkgeyByZXR1cm4gYXJndW1lbnRzOyB9KCcgKyBfbWFwKHJlY3VyLCB4KS5qb2luKCcsICcpICsgJykpJztcbiAgICBjYXNlICdbb2JqZWN0IEFycmF5XSc6XG4gICAgICByZXR1cm4gJ1snICsgX21hcChyZWN1ciwgeCkuY29uY2F0KG1hcFBhaXJzKHgsIHJlamVjdChmdW5jdGlvbihrKSB7IHJldHVybiAvXlxcZCskLy50ZXN0KGspOyB9LCBrZXlzKHgpKSkpLmpvaW4oJywgJykgKyAnXSc7XG4gICAgY2FzZSAnW29iamVjdCBCb29sZWFuXSc6XG4gICAgICByZXR1cm4gdHlwZW9mIHggPT09ICdvYmplY3QnID8gJ25ldyBCb29sZWFuKCcgKyByZWN1cih4LnZhbHVlT2YoKSkgKyAnKScgOiB4LnRvU3RyaW5nKCk7XG4gICAgY2FzZSAnW29iamVjdCBEYXRlXSc6XG4gICAgICByZXR1cm4gJ25ldyBEYXRlKCcgKyAoaXNOYU4oeC52YWx1ZU9mKCkpID8gcmVjdXIoTmFOKSA6IF9xdW90ZShfdG9JU09TdHJpbmcoeCkpKSArICcpJztcbiAgICBjYXNlICdbb2JqZWN0IE51bGxdJzpcbiAgICAgIHJldHVybiAnbnVsbCc7XG4gICAgY2FzZSAnW29iamVjdCBOdW1iZXJdJzpcbiAgICAgIHJldHVybiB0eXBlb2YgeCA9PT0gJ29iamVjdCcgPyAnbmV3IE51bWJlcignICsgcmVjdXIoeC52YWx1ZU9mKCkpICsgJyknIDogMSAvIHggPT09IC1JbmZpbml0eSA/ICctMCcgOiB4LnRvU3RyaW5nKDEwKTtcbiAgICBjYXNlICdbb2JqZWN0IFN0cmluZ10nOlxuICAgICAgcmV0dXJuIHR5cGVvZiB4ID09PSAnb2JqZWN0JyA/ICduZXcgU3RyaW5nKCcgKyByZWN1cih4LnZhbHVlT2YoKSkgKyAnKScgOiBfcXVvdGUoeCk7XG4gICAgY2FzZSAnW29iamVjdCBVbmRlZmluZWRdJzpcbiAgICAgIHJldHVybiAndW5kZWZpbmVkJztcbiAgICBkZWZhdWx0OlxuICAgICAgaWYgKHR5cGVvZiB4LnRvU3RyaW5nID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHZhciByZXByID0geC50b1N0cmluZygpO1xuICAgICAgICBpZiAocmVwciAhPT0gJ1tvYmplY3QgT2JqZWN0XScpIHtcbiAgICAgICAgICByZXR1cm4gcmVwcjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuICd7JyArIG1hcFBhaXJzKHgsIGtleXMoeCkpLmpvaW4oJywgJykgKyAnfSc7XG4gIH1cbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcmFtZGEvc3JjL2ludGVybmFsL190b1N0cmluZy5qc1xuLy8gbW9kdWxlIGlkID0gMTY5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 170 */
/* no static exports found */
/* all exports used */
/*!******************************************!*\
  !*** ./~/ramda/src/internal/_xfilter.js ***!
  \******************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var _curry2 = __webpack_require__(/*! ./_curry2 */ 1);\nvar _xfBase = __webpack_require__(/*! ./_xfBase */ 62);\n\n\nmodule.exports = (function() {\n  function XFilter(f, xf) {\n    this.xf = xf;\n    this.f = f;\n  }\n  XFilter.prototype['@@transducer/init'] = _xfBase.init;\n  XFilter.prototype['@@transducer/result'] = _xfBase.result;\n  XFilter.prototype['@@transducer/step'] = function(result, input) {\n    return this.f(input) ? this.xf['@@transducer/step'](result, input) : result;\n  };\n\n  return _curry2(function _xfilter(f, xf) { return new XFilter(f, xf); });\n}());\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTcwLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9yYW1kYS9zcmMvaW50ZXJuYWwvX3hmaWx0ZXIuanM/Y2FkMSJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX2N1cnJ5MiA9IHJlcXVpcmUoJy4vX2N1cnJ5MicpO1xudmFyIF94ZkJhc2UgPSByZXF1aXJlKCcuL194ZkJhc2UnKTtcblxuXG5tb2R1bGUuZXhwb3J0cyA9IChmdW5jdGlvbigpIHtcbiAgZnVuY3Rpb24gWEZpbHRlcihmLCB4Zikge1xuICAgIHRoaXMueGYgPSB4ZjtcbiAgICB0aGlzLmYgPSBmO1xuICB9XG4gIFhGaWx0ZXIucHJvdG90eXBlWydAQHRyYW5zZHVjZXIvaW5pdCddID0gX3hmQmFzZS5pbml0O1xuICBYRmlsdGVyLnByb3RvdHlwZVsnQEB0cmFuc2R1Y2VyL3Jlc3VsdCddID0gX3hmQmFzZS5yZXN1bHQ7XG4gIFhGaWx0ZXIucHJvdG90eXBlWydAQHRyYW5zZHVjZXIvc3RlcCddID0gZnVuY3Rpb24ocmVzdWx0LCBpbnB1dCkge1xuICAgIHJldHVybiB0aGlzLmYoaW5wdXQpID8gdGhpcy54ZlsnQEB0cmFuc2R1Y2VyL3N0ZXAnXShyZXN1bHQsIGlucHV0KSA6IHJlc3VsdDtcbiAgfTtcblxuICByZXR1cm4gX2N1cnJ5MihmdW5jdGlvbiBfeGZpbHRlcihmLCB4ZikgeyByZXR1cm4gbmV3IFhGaWx0ZXIoZiwgeGYpOyB9KTtcbn0oKSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcmFtZGEvc3JjL2ludGVybmFsL194ZmlsdGVyLmpzXG4vLyBtb2R1bGUgaWQgPSAxNzBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 171 */
/* no static exports found */
/* all exports used */
/*!***************************************!*\
  !*** ./~/ramda/src/internal/_xmap.js ***!
  \***************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var _curry2 = __webpack_require__(/*! ./_curry2 */ 1);\nvar _xfBase = __webpack_require__(/*! ./_xfBase */ 62);\n\n\nmodule.exports = (function() {\n  function XMap(f, xf) {\n    this.xf = xf;\n    this.f = f;\n  }\n  XMap.prototype['@@transducer/init'] = _xfBase.init;\n  XMap.prototype['@@transducer/result'] = _xfBase.result;\n  XMap.prototype['@@transducer/step'] = function(result, input) {\n    return this.xf['@@transducer/step'](result, this.f(input));\n  };\n\n  return _curry2(function _xmap(f, xf) { return new XMap(f, xf); });\n}());\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTcxLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9yYW1kYS9zcmMvaW50ZXJuYWwvX3htYXAuanM/ODE0ZiJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX2N1cnJ5MiA9IHJlcXVpcmUoJy4vX2N1cnJ5MicpO1xudmFyIF94ZkJhc2UgPSByZXF1aXJlKCcuL194ZkJhc2UnKTtcblxuXG5tb2R1bGUuZXhwb3J0cyA9IChmdW5jdGlvbigpIHtcbiAgZnVuY3Rpb24gWE1hcChmLCB4Zikge1xuICAgIHRoaXMueGYgPSB4ZjtcbiAgICB0aGlzLmYgPSBmO1xuICB9XG4gIFhNYXAucHJvdG90eXBlWydAQHRyYW5zZHVjZXIvaW5pdCddID0gX3hmQmFzZS5pbml0O1xuICBYTWFwLnByb3RvdHlwZVsnQEB0cmFuc2R1Y2VyL3Jlc3VsdCddID0gX3hmQmFzZS5yZXN1bHQ7XG4gIFhNYXAucHJvdG90eXBlWydAQHRyYW5zZHVjZXIvc3RlcCddID0gZnVuY3Rpb24ocmVzdWx0LCBpbnB1dCkge1xuICAgIHJldHVybiB0aGlzLnhmWydAQHRyYW5zZHVjZXIvc3RlcCddKHJlc3VsdCwgdGhpcy5mKGlucHV0KSk7XG4gIH07XG5cbiAgcmV0dXJuIF9jdXJyeTIoZnVuY3Rpb24gX3htYXAoZiwgeGYpIHsgcmV0dXJuIG5ldyBYTWFwKGYsIHhmKTsgfSk7XG59KCkpO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3JhbWRhL3NyYy9pbnRlcm5hbC9feG1hcC5qc1xuLy8gbW9kdWxlIGlkID0gMTcxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 172 */
/* no static exports found */
/* all exports used */
/*!****************************************!*\
  !*** ./~/ramda/src/internal/_xwrap.js ***!
  \****************************************/
/***/ (function(module, exports) {

eval("module.exports = (function() {\n  function XWrap(fn) {\n    this.f = fn;\n  }\n  XWrap.prototype['@@transducer/init'] = function() {\n    throw new Error('init not implemented on XWrap');\n  };\n  XWrap.prototype['@@transducer/result'] = function(acc) { return acc; };\n  XWrap.prototype['@@transducer/step'] = function(acc, x) {\n    return this.f(acc, x);\n  };\n\n  return function _xwrap(fn) { return new XWrap(fn); };\n}());\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTcyLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9yYW1kYS9zcmMvaW50ZXJuYWwvX3h3cmFwLmpzPzQ5NjIiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSAoZnVuY3Rpb24oKSB7XG4gIGZ1bmN0aW9uIFhXcmFwKGZuKSB7XG4gICAgdGhpcy5mID0gZm47XG4gIH1cbiAgWFdyYXAucHJvdG90eXBlWydAQHRyYW5zZHVjZXIvaW5pdCddID0gZnVuY3Rpb24oKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdpbml0IG5vdCBpbXBsZW1lbnRlZCBvbiBYV3JhcCcpO1xuICB9O1xuICBYV3JhcC5wcm90b3R5cGVbJ0BAdHJhbnNkdWNlci9yZXN1bHQnXSA9IGZ1bmN0aW9uKGFjYykgeyByZXR1cm4gYWNjOyB9O1xuICBYV3JhcC5wcm90b3R5cGVbJ0BAdHJhbnNkdWNlci9zdGVwJ10gPSBmdW5jdGlvbihhY2MsIHgpIHtcbiAgICByZXR1cm4gdGhpcy5mKGFjYywgeCk7XG4gIH07XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIF94d3JhcChmbikgeyByZXR1cm4gbmV3IFhXcmFwKGZuKTsgfTtcbn0oKSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcmFtZGEvc3JjL2ludGVybmFsL194d3JhcC5qc1xuLy8gbW9kdWxlIGlkID0gMTcyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 173 */
/* no static exports found */
/* all exports used */
/*!********************************!*\
  !*** ./~/ramda/src/invoker.js ***!
  \********************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var _curry2 = __webpack_require__(/*! ./internal/_curry2 */ 1);\nvar _isFunction = __webpack_require__(/*! ./internal/_isFunction */ 59);\nvar curryN = __webpack_require__(/*! ./curryN */ 6);\nvar toString = __webpack_require__(/*! ./toString */ 191);\n\n\n/**\n * Turns a named method with a specified arity into a function that can be\n * called directly supplied with arguments and a target object.\n *\n * The returned function is curried and accepts `arity + 1` parameters where\n * the final parameter is the target object.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig Number -> String -> (a -> b -> ... -> n -> Object -> *)\n * @param {Number} arity Number of arguments the returned function should take\n *        before the target object.\n * @param {String} method Name of the method to call.\n * @return {Function} A new curried function.\n * @example\n *\n *      var sliceFrom = R.invoker(1, 'slice');\n *      sliceFrom(6, 'abcdefghijklm'); //=> 'ghijklm'\n *      var sliceFrom6 = R.invoker(2, 'slice')(6);\n *      sliceFrom6(8, 'abcdefghijklm'); //=> 'gh'\n * @symb R.invoker(0, 'method')(o) = o['method']()\n * @symb R.invoker(1, 'method')(a, o) = o['method'](a)\n * @symb R.invoker(2, 'method')(a, b, o) = o['method'](a, b)\n */\nmodule.exports = _curry2(function invoker(arity, method) {\n  return curryN(arity + 1, function() {\n    var target = arguments[arity];\n    if (target != null && _isFunction(target[method])) {\n      return target[method].apply(target, Array.prototype.slice.call(arguments, 0, arity));\n    }\n    throw new TypeError(toString(target) + ' does not have a method named \"' + method + '\"');\n  });\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTczLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9yYW1kYS9zcmMvaW52b2tlci5qcz9mMjBlIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBfY3VycnkyID0gcmVxdWlyZSgnLi9pbnRlcm5hbC9fY3VycnkyJyk7XG52YXIgX2lzRnVuY3Rpb24gPSByZXF1aXJlKCcuL2ludGVybmFsL19pc0Z1bmN0aW9uJyk7XG52YXIgY3VycnlOID0gcmVxdWlyZSgnLi9jdXJyeU4nKTtcbnZhciB0b1N0cmluZyA9IHJlcXVpcmUoJy4vdG9TdHJpbmcnKTtcblxuXG4vKipcbiAqIFR1cm5zIGEgbmFtZWQgbWV0aG9kIHdpdGggYSBzcGVjaWZpZWQgYXJpdHkgaW50byBhIGZ1bmN0aW9uIHRoYXQgY2FuIGJlXG4gKiBjYWxsZWQgZGlyZWN0bHkgc3VwcGxpZWQgd2l0aCBhcmd1bWVudHMgYW5kIGEgdGFyZ2V0IG9iamVjdC5cbiAqXG4gKiBUaGUgcmV0dXJuZWQgZnVuY3Rpb24gaXMgY3VycmllZCBhbmQgYWNjZXB0cyBgYXJpdHkgKyAxYCBwYXJhbWV0ZXJzIHdoZXJlXG4gKiB0aGUgZmluYWwgcGFyYW1ldGVyIGlzIHRoZSB0YXJnZXQgb2JqZWN0LlxuICpcbiAqIEBmdW5jXG4gKiBAbWVtYmVyT2YgUlxuICogQHNpbmNlIHYwLjEuMFxuICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gKiBAc2lnIE51bWJlciAtPiBTdHJpbmcgLT4gKGEgLT4gYiAtPiAuLi4gLT4gbiAtPiBPYmplY3QgLT4gKilcbiAqIEBwYXJhbSB7TnVtYmVyfSBhcml0eSBOdW1iZXIgb2YgYXJndW1lbnRzIHRoZSByZXR1cm5lZCBmdW5jdGlvbiBzaG91bGQgdGFrZVxuICogICAgICAgIGJlZm9yZSB0aGUgdGFyZ2V0IG9iamVjdC5cbiAqIEBwYXJhbSB7U3RyaW5nfSBtZXRob2QgTmFtZSBvZiB0aGUgbWV0aG9kIHRvIGNhbGwuXG4gKiBAcmV0dXJuIHtGdW5jdGlvbn0gQSBuZXcgY3VycmllZCBmdW5jdGlvbi5cbiAqIEBleGFtcGxlXG4gKlxuICogICAgICB2YXIgc2xpY2VGcm9tID0gUi5pbnZva2VyKDEsICdzbGljZScpO1xuICogICAgICBzbGljZUZyb20oNiwgJ2FiY2RlZmdoaWprbG0nKTsgLy89PiAnZ2hpamtsbSdcbiAqICAgICAgdmFyIHNsaWNlRnJvbTYgPSBSLmludm9rZXIoMiwgJ3NsaWNlJykoNik7XG4gKiAgICAgIHNsaWNlRnJvbTYoOCwgJ2FiY2RlZmdoaWprbG0nKTsgLy89PiAnZ2gnXG4gKiBAc3ltYiBSLmludm9rZXIoMCwgJ21ldGhvZCcpKG8pID0gb1snbWV0aG9kJ10oKVxuICogQHN5bWIgUi5pbnZva2VyKDEsICdtZXRob2QnKShhLCBvKSA9IG9bJ21ldGhvZCddKGEpXG4gKiBAc3ltYiBSLmludm9rZXIoMiwgJ21ldGhvZCcpKGEsIGIsIG8pID0gb1snbWV0aG9kJ10oYSwgYilcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBfY3VycnkyKGZ1bmN0aW9uIGludm9rZXIoYXJpdHksIG1ldGhvZCkge1xuICByZXR1cm4gY3VycnlOKGFyaXR5ICsgMSwgZnVuY3Rpb24oKSB7XG4gICAgdmFyIHRhcmdldCA9IGFyZ3VtZW50c1thcml0eV07XG4gICAgaWYgKHRhcmdldCAhPSBudWxsICYmIF9pc0Z1bmN0aW9uKHRhcmdldFttZXRob2RdKSkge1xuICAgICAgcmV0dXJuIHRhcmdldFttZXRob2RdLmFwcGx5KHRhcmdldCwgQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAwLCBhcml0eSkpO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKHRvU3RyaW5nKHRhcmdldCkgKyAnIGRvZXMgbm90IGhhdmUgYSBtZXRob2QgbmFtZWQgXCInICsgbWV0aG9kICsgJ1wiJyk7XG4gIH0pO1xufSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcmFtZGEvc3JjL2ludm9rZXIuanNcbi8vIG1vZHVsZSBpZCA9IDE3M1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 174 */
/* no static exports found */
/* all exports used */
/*!************************************!*\
  !*** ./~/ramda/src/isArrayLike.js ***!
  \************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var _curry1 = __webpack_require__(/*! ./internal/_curry1 */ 2);\nvar _isArray = __webpack_require__(/*! ./internal/_isArray */ 37);\nvar _isString = __webpack_require__(/*! ./internal/_isString */ 60);\n\n\n/**\n * Tests whether or not an object is similar to an array.\n *\n * @func\n * @memberOf R\n * @since v0.5.0\n * @category Type\n * @category List\n * @sig * -> Boolean\n * @param {*} x The object to test.\n * @return {Boolean} `true` if `x` has a numeric length property and extreme indices defined; `false` otherwise.\n * @deprecated since v0.23.0\n * @example\n *\n *      R.isArrayLike([]); //=> true\n *      R.isArrayLike(true); //=> false\n *      R.isArrayLike({}); //=> false\n *      R.isArrayLike({length: 10}); //=> false\n *      R.isArrayLike({0: 'zero', 9: 'nine', length: 10}); //=> true\n */\nmodule.exports = _curry1(function isArrayLike(x) {\n  if (_isArray(x)) { return true; }\n  if (!x) { return false; }\n  if (typeof x !== 'object') { return false; }\n  if (_isString(x)) { return false; }\n  if (x.nodeType === 1) { return !!x.length; }\n  if (x.length === 0) { return true; }\n  if (x.length > 0) {\n    return x.hasOwnProperty(0) && x.hasOwnProperty(x.length - 1);\n  }\n  return false;\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTc0LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9yYW1kYS9zcmMvaXNBcnJheUxpa2UuanM/NjcyZCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX2N1cnJ5MSA9IHJlcXVpcmUoJy4vaW50ZXJuYWwvX2N1cnJ5MScpO1xudmFyIF9pc0FycmF5ID0gcmVxdWlyZSgnLi9pbnRlcm5hbC9faXNBcnJheScpO1xudmFyIF9pc1N0cmluZyA9IHJlcXVpcmUoJy4vaW50ZXJuYWwvX2lzU3RyaW5nJyk7XG5cblxuLyoqXG4gKiBUZXN0cyB3aGV0aGVyIG9yIG5vdCBhbiBvYmplY3QgaXMgc2ltaWxhciB0byBhbiBhcnJheS5cbiAqXG4gKiBAZnVuY1xuICogQG1lbWJlck9mIFJcbiAqIEBzaW5jZSB2MC41LjBcbiAqIEBjYXRlZ29yeSBUeXBlXG4gKiBAY2F0ZWdvcnkgTGlzdFxuICogQHNpZyAqIC0+IEJvb2xlYW5cbiAqIEBwYXJhbSB7Kn0geCBUaGUgb2JqZWN0IHRvIHRlc3QuXG4gKiBAcmV0dXJuIHtCb29sZWFufSBgdHJ1ZWAgaWYgYHhgIGhhcyBhIG51bWVyaWMgbGVuZ3RoIHByb3BlcnR5IGFuZCBleHRyZW1lIGluZGljZXMgZGVmaW5lZDsgYGZhbHNlYCBvdGhlcndpc2UuXG4gKiBAZGVwcmVjYXRlZCBzaW5jZSB2MC4yMy4wXG4gKiBAZXhhbXBsZVxuICpcbiAqICAgICAgUi5pc0FycmF5TGlrZShbXSk7IC8vPT4gdHJ1ZVxuICogICAgICBSLmlzQXJyYXlMaWtlKHRydWUpOyAvLz0+IGZhbHNlXG4gKiAgICAgIFIuaXNBcnJheUxpa2Uoe30pOyAvLz0+IGZhbHNlXG4gKiAgICAgIFIuaXNBcnJheUxpa2Uoe2xlbmd0aDogMTB9KTsgLy89PiBmYWxzZVxuICogICAgICBSLmlzQXJyYXlMaWtlKHswOiAnemVybycsIDk6ICduaW5lJywgbGVuZ3RoOiAxMH0pOyAvLz0+IHRydWVcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBfY3VycnkxKGZ1bmN0aW9uIGlzQXJyYXlMaWtlKHgpIHtcbiAgaWYgKF9pc0FycmF5KHgpKSB7IHJldHVybiB0cnVlOyB9XG4gIGlmICgheCkgeyByZXR1cm4gZmFsc2U7IH1cbiAgaWYgKHR5cGVvZiB4ICE9PSAnb2JqZWN0JykgeyByZXR1cm4gZmFsc2U7IH1cbiAgaWYgKF9pc1N0cmluZyh4KSkgeyByZXR1cm4gZmFsc2U7IH1cbiAgaWYgKHgubm9kZVR5cGUgPT09IDEpIHsgcmV0dXJuICEheC5sZW5ndGg7IH1cbiAgaWYgKHgubGVuZ3RoID09PSAwKSB7IHJldHVybiB0cnVlOyB9XG4gIGlmICh4Lmxlbmd0aCA+IDApIHtcbiAgICByZXR1cm4geC5oYXNPd25Qcm9wZXJ0eSgwKSAmJiB4Lmhhc093blByb3BlcnR5KHgubGVuZ3RoIC0gMSk7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcmFtZGEvc3JjL2lzQXJyYXlMaWtlLmpzXG4vLyBtb2R1bGUgaWQgPSAxNzRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 175 */
/* no static exports found */
/* all exports used */
/*!******************************!*\
  !*** ./~/ramda/src/isNil.js ***!
  \******************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var _curry1 = __webpack_require__(/*! ./internal/_curry1 */ 2);\n\n\n/**\n * Checks if the input value is `null` or `undefined`.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category Type\n * @sig * -> Boolean\n * @param {*} x The value to test.\n * @return {Boolean} `true` if `x` is `undefined` or `null`, otherwise `false`.\n * @example\n *\n *      R.isNil(null); //=> true\n *      R.isNil(undefined); //=> true\n *      R.isNil(0); //=> false\n *      R.isNil([]); //=> false\n */\nmodule.exports = _curry1(function isNil(x) { return x == null; });\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTc1LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9yYW1kYS9zcmMvaXNOaWwuanM/OTU4NyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX2N1cnJ5MSA9IHJlcXVpcmUoJy4vaW50ZXJuYWwvX2N1cnJ5MScpO1xuXG5cbi8qKlxuICogQ2hlY2tzIGlmIHRoZSBpbnB1dCB2YWx1ZSBpcyBgbnVsbGAgb3IgYHVuZGVmaW5lZGAuXG4gKlxuICogQGZ1bmNcbiAqIEBtZW1iZXJPZiBSXG4gKiBAc2luY2UgdjAuOS4wXG4gKiBAY2F0ZWdvcnkgVHlwZVxuICogQHNpZyAqIC0+IEJvb2xlYW5cbiAqIEBwYXJhbSB7Kn0geCBUaGUgdmFsdWUgdG8gdGVzdC5cbiAqIEByZXR1cm4ge0Jvb2xlYW59IGB0cnVlYCBpZiBgeGAgaXMgYHVuZGVmaW5lZGAgb3IgYG51bGxgLCBvdGhlcndpc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogICAgICBSLmlzTmlsKG51bGwpOyAvLz0+IHRydWVcbiAqICAgICAgUi5pc05pbCh1bmRlZmluZWQpOyAvLz0+IHRydWVcbiAqICAgICAgUi5pc05pbCgwKTsgLy89PiBmYWxzZVxuICogICAgICBSLmlzTmlsKFtdKTsgLy89PiBmYWxzZVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IF9jdXJyeTEoZnVuY3Rpb24gaXNOaWwoeCkgeyByZXR1cm4geCA9PSBudWxsOyB9KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9yYW1kYS9zcmMvaXNOaWwuanNcbi8vIG1vZHVsZSBpZCA9IDE3NVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 176 */
/* no static exports found */
/* all exports used */
/*!*****************************!*\
  !*** ./~/ramda/src/lift.js ***!
  \*****************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var _curry1 = __webpack_require__(/*! ./internal/_curry1 */ 2);\nvar liftN = __webpack_require__(/*! ./liftN */ 177);\n\n\n/**\n * \"lifts\" a function of arity > 1 so that it may \"map over\" a list, Function or other\n * object that satisfies the [FantasyLand Apply spec](https://github.com/fantasyland/fantasy-land#apply).\n *\n * @func\n * @memberOf R\n * @since v0.7.0\n * @category Function\n * @sig (*... -> *) -> ([*]... -> [*])\n * @param {Function} fn The function to lift into higher context\n * @return {Function} The lifted function.\n * @see R.liftN\n * @example\n *\n *      var madd3 = R.lift((a, b, c) => a + b + c);\n *\n *      madd3([1,2,3], [1,2,3], [1]); //=> [3, 4, 5, 4, 5, 6, 5, 6, 7]\n *\n *      var madd5 = R.lift((a, b, c, d, e) => a + b + c + d + e);\n *\n *      madd5([1,2], [3], [4, 5], [6], [7, 8]); //=> [21, 22, 22, 23, 22, 23, 23, 24]\n */\nmodule.exports = _curry1(function lift(fn) {\n  return liftN(fn.length, fn);\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTc2LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9yYW1kYS9zcmMvbGlmdC5qcz82YmFmIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBfY3VycnkxID0gcmVxdWlyZSgnLi9pbnRlcm5hbC9fY3VycnkxJyk7XG52YXIgbGlmdE4gPSByZXF1aXJlKCcuL2xpZnROJyk7XG5cblxuLyoqXG4gKiBcImxpZnRzXCIgYSBmdW5jdGlvbiBvZiBhcml0eSA+IDEgc28gdGhhdCBpdCBtYXkgXCJtYXAgb3ZlclwiIGEgbGlzdCwgRnVuY3Rpb24gb3Igb3RoZXJcbiAqIG9iamVjdCB0aGF0IHNhdGlzZmllcyB0aGUgW0ZhbnRhc3lMYW5kIEFwcGx5IHNwZWNdKGh0dHBzOi8vZ2l0aHViLmNvbS9mYW50YXN5bGFuZC9mYW50YXN5LWxhbmQjYXBwbHkpLlxuICpcbiAqIEBmdW5jXG4gKiBAbWVtYmVyT2YgUlxuICogQHNpbmNlIHYwLjcuMFxuICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gKiBAc2lnICgqLi4uIC0+ICopIC0+IChbKl0uLi4gLT4gWypdKVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGZ1bmN0aW9uIHRvIGxpZnQgaW50byBoaWdoZXIgY29udGV4dFxuICogQHJldHVybiB7RnVuY3Rpb259IFRoZSBsaWZ0ZWQgZnVuY3Rpb24uXG4gKiBAc2VlIFIubGlmdE5cbiAqIEBleGFtcGxlXG4gKlxuICogICAgICB2YXIgbWFkZDMgPSBSLmxpZnQoKGEsIGIsIGMpID0+IGEgKyBiICsgYyk7XG4gKlxuICogICAgICBtYWRkMyhbMSwyLDNdLCBbMSwyLDNdLCBbMV0pOyAvLz0+IFszLCA0LCA1LCA0LCA1LCA2LCA1LCA2LCA3XVxuICpcbiAqICAgICAgdmFyIG1hZGQ1ID0gUi5saWZ0KChhLCBiLCBjLCBkLCBlKSA9PiBhICsgYiArIGMgKyBkICsgZSk7XG4gKlxuICogICAgICBtYWRkNShbMSwyXSwgWzNdLCBbNCwgNV0sIFs2XSwgWzcsIDhdKTsgLy89PiBbMjEsIDIyLCAyMiwgMjMsIDIyLCAyMywgMjMsIDI0XVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IF9jdXJyeTEoZnVuY3Rpb24gbGlmdChmbikge1xuICByZXR1cm4gbGlmdE4oZm4ubGVuZ3RoLCBmbik7XG59KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9yYW1kYS9zcmMvbGlmdC5qc1xuLy8gbW9kdWxlIGlkID0gMTc2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 177 */
/* no static exports found */
/* all exports used */
/*!******************************!*\
  !*** ./~/ramda/src/liftN.js ***!
  \******************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var _curry2 = __webpack_require__(/*! ./internal/_curry2 */ 1);\nvar _reduce = __webpack_require__(/*! ./internal/_reduce */ 16);\nvar ap = __webpack_require__(/*! ./ap */ 142);\nvar curryN = __webpack_require__(/*! ./curryN */ 6);\nvar map = __webpack_require__(/*! ./map */ 8);\n\n\n/**\n * \"lifts\" a function to be the specified arity, so that it may \"map over\" that\n * many lists, Functions or other objects that satisfy the [FantasyLand Apply spec](https://github.com/fantasyland/fantasy-land#apply).\n *\n * @func\n * @memberOf R\n * @since v0.7.0\n * @category Function\n * @sig Number -> (*... -> *) -> ([*]... -> [*])\n * @param {Function} fn The function to lift into higher context\n * @return {Function} The lifted function.\n * @see R.lift, R.ap\n * @example\n *\n *      var madd3 = R.liftN(3, (...args) => R.sum(args));\n *      madd3([1,2,3], [1,2,3], [1]); //=> [3, 4, 5, 4, 5, 6, 5, 6, 7]\n */\nmodule.exports = _curry2(function liftN(arity, fn) {\n  var lifted = curryN(arity, fn);\n  return curryN(arity, function() {\n    return _reduce(ap, map(lifted, arguments[0]), Array.prototype.slice.call(arguments, 1));\n  });\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTc3LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9yYW1kYS9zcmMvbGlmdE4uanM/Zjc4ZCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX2N1cnJ5MiA9IHJlcXVpcmUoJy4vaW50ZXJuYWwvX2N1cnJ5MicpO1xudmFyIF9yZWR1Y2UgPSByZXF1aXJlKCcuL2ludGVybmFsL19yZWR1Y2UnKTtcbnZhciBhcCA9IHJlcXVpcmUoJy4vYXAnKTtcbnZhciBjdXJyeU4gPSByZXF1aXJlKCcuL2N1cnJ5TicpO1xudmFyIG1hcCA9IHJlcXVpcmUoJy4vbWFwJyk7XG5cblxuLyoqXG4gKiBcImxpZnRzXCIgYSBmdW5jdGlvbiB0byBiZSB0aGUgc3BlY2lmaWVkIGFyaXR5LCBzbyB0aGF0IGl0IG1heSBcIm1hcCBvdmVyXCIgdGhhdFxuICogbWFueSBsaXN0cywgRnVuY3Rpb25zIG9yIG90aGVyIG9iamVjdHMgdGhhdCBzYXRpc2Z5IHRoZSBbRmFudGFzeUxhbmQgQXBwbHkgc3BlY10oaHR0cHM6Ly9naXRodWIuY29tL2ZhbnRhc3lsYW5kL2ZhbnRhc3ktbGFuZCNhcHBseSkuXG4gKlxuICogQGZ1bmNcbiAqIEBtZW1iZXJPZiBSXG4gKiBAc2luY2UgdjAuNy4wXG4gKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAqIEBzaWcgTnVtYmVyIC0+ICgqLi4uIC0+ICopIC0+IChbKl0uLi4gLT4gWypdKVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGZ1bmN0aW9uIHRvIGxpZnQgaW50byBoaWdoZXIgY29udGV4dFxuICogQHJldHVybiB7RnVuY3Rpb259IFRoZSBsaWZ0ZWQgZnVuY3Rpb24uXG4gKiBAc2VlIFIubGlmdCwgUi5hcFxuICogQGV4YW1wbGVcbiAqXG4gKiAgICAgIHZhciBtYWRkMyA9IFIubGlmdE4oMywgKC4uLmFyZ3MpID0+IFIuc3VtKGFyZ3MpKTtcbiAqICAgICAgbWFkZDMoWzEsMiwzXSwgWzEsMiwzXSwgWzFdKTsgLy89PiBbMywgNCwgNSwgNCwgNSwgNiwgNSwgNiwgN11cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBfY3VycnkyKGZ1bmN0aW9uIGxpZnROKGFyaXR5LCBmbikge1xuICB2YXIgbGlmdGVkID0gY3VycnlOKGFyaXR5LCBmbik7XG4gIHJldHVybiBjdXJyeU4oYXJpdHksIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBfcmVkdWNlKGFwLCBtYXAobGlmdGVkLCBhcmd1bWVudHNbMF0pLCBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpKTtcbiAgfSk7XG59KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9yYW1kYS9zcmMvbGlmdE4uanNcbi8vIG1vZHVsZSBpZCA9IDE3N1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 178 */
/* no static exports found */
/* all exports used */
/*!******************************!*\
  !*** ./~/ramda/src/merge.js ***!
  \******************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var _assign = __webpack_require__(/*! ./internal/_assign */ 152);\nvar _curry2 = __webpack_require__(/*! ./internal/_curry2 */ 1);\n\n\n/**\n * Create a new object with the own properties of the first object merged with\n * the own properties of the second object. If a key exists in both objects,\n * the value from the second object will be used.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Object\n * @sig {k: v} -> {k: v} -> {k: v}\n * @param {Object} l\n * @param {Object} r\n * @return {Object}\n * @see R.mergeWith, R.mergeWithKey\n * @example\n *\n *      R.merge({ 'name': 'fred', 'age': 10 }, { 'age': 40 });\n *      //=> { 'name': 'fred', 'age': 40 }\n *\n *      var resetToDefault = R.merge(R.__, {x: 0});\n *      resetToDefault({x: 5, y: 2}); //=> {x: 0, y: 2}\n * @symb R.merge({ x: 1, y: 2 }, { y: 5, z: 3 }) = { x: 1, y: 5, z: 3 }\n */\nmodule.exports = _curry2(function merge(l, r) {\n  return _assign({}, l, r);\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTc4LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9yYW1kYS9zcmMvbWVyZ2UuanM/NGYwNiJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX2Fzc2lnbiA9IHJlcXVpcmUoJy4vaW50ZXJuYWwvX2Fzc2lnbicpO1xudmFyIF9jdXJyeTIgPSByZXF1aXJlKCcuL2ludGVybmFsL19jdXJyeTInKTtcblxuXG4vKipcbiAqIENyZWF0ZSBhIG5ldyBvYmplY3Qgd2l0aCB0aGUgb3duIHByb3BlcnRpZXMgb2YgdGhlIGZpcnN0IG9iamVjdCBtZXJnZWQgd2l0aFxuICogdGhlIG93biBwcm9wZXJ0aWVzIG9mIHRoZSBzZWNvbmQgb2JqZWN0LiBJZiBhIGtleSBleGlzdHMgaW4gYm90aCBvYmplY3RzLFxuICogdGhlIHZhbHVlIGZyb20gdGhlIHNlY29uZCBvYmplY3Qgd2lsbCBiZSB1c2VkLlxuICpcbiAqIEBmdW5jXG4gKiBAbWVtYmVyT2YgUlxuICogQHNpbmNlIHYwLjEuMFxuICogQGNhdGVnb3J5IE9iamVjdFxuICogQHNpZyB7azogdn0gLT4ge2s6IHZ9IC0+IHtrOiB2fVxuICogQHBhcmFtIHtPYmplY3R9IGxcbiAqIEBwYXJhbSB7T2JqZWN0fSByXG4gKiBAcmV0dXJuIHtPYmplY3R9XG4gKiBAc2VlIFIubWVyZ2VXaXRoLCBSLm1lcmdlV2l0aEtleVxuICogQGV4YW1wbGVcbiAqXG4gKiAgICAgIFIubWVyZ2UoeyAnbmFtZSc6ICdmcmVkJywgJ2FnZSc6IDEwIH0sIHsgJ2FnZSc6IDQwIH0pO1xuICogICAgICAvLz0+IHsgJ25hbWUnOiAnZnJlZCcsICdhZ2UnOiA0MCB9XG4gKlxuICogICAgICB2YXIgcmVzZXRUb0RlZmF1bHQgPSBSLm1lcmdlKFIuX18sIHt4OiAwfSk7XG4gKiAgICAgIHJlc2V0VG9EZWZhdWx0KHt4OiA1LCB5OiAyfSk7IC8vPT4ge3g6IDAsIHk6IDJ9XG4gKiBAc3ltYiBSLm1lcmdlKHsgeDogMSwgeTogMiB9LCB7IHk6IDUsIHo6IDMgfSkgPSB7IHg6IDEsIHk6IDUsIHo6IDMgfVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IF9jdXJyeTIoZnVuY3Rpb24gbWVyZ2UobCwgcikge1xuICByZXR1cm4gX2Fzc2lnbih7fSwgbCwgcik7XG59KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9yYW1kYS9zcmMvbWVyZ2UuanNcbi8vIG1vZHVsZSBpZCA9IDE3OFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 179 */
/* no static exports found */
/* all exports used */
/*!**********************************!*\
  !*** ./~/ramda/src/mergeWith.js ***!
  \**********************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var _curry3 = __webpack_require__(/*! ./internal/_curry3 */ 7);\nvar mergeWithKey = __webpack_require__(/*! ./mergeWithKey */ 180);\n\n\n/**\n * Creates a new object with the own properties of the two provided objects. If\n * a key exists in both objects, the provided function is applied to the values\n * associated with the key in each object, with the result being used as the\n * value associated with the key in the returned object. The key will be\n * excluded from the returned object if the resulting value is `undefined`.\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category Object\n * @sig (a -> a -> a) -> {a} -> {a} -> {a}\n * @param {Function} fn\n * @param {Object} l\n * @param {Object} r\n * @return {Object}\n * @see R.merge, R.mergeWithKey\n * @example\n *\n *      R.mergeWith(R.concat,\n *                  { a: true, values: [10, 20] },\n *                  { b: true, values: [15, 35] });\n *      //=> { a: true, b: true, values: [10, 20, 15, 35] }\n */\nmodule.exports = _curry3(function mergeWith(fn, l, r) {\n  return mergeWithKey(function(_, _l, _r) {\n    return fn(_l, _r);\n  }, l, r);\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTc5LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9yYW1kYS9zcmMvbWVyZ2VXaXRoLmpzP2U4YzciXSwic291cmNlc0NvbnRlbnQiOlsidmFyIF9jdXJyeTMgPSByZXF1aXJlKCcuL2ludGVybmFsL19jdXJyeTMnKTtcbnZhciBtZXJnZVdpdGhLZXkgPSByZXF1aXJlKCcuL21lcmdlV2l0aEtleScpO1xuXG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBvYmplY3Qgd2l0aCB0aGUgb3duIHByb3BlcnRpZXMgb2YgdGhlIHR3byBwcm92aWRlZCBvYmplY3RzLiBJZlxuICogYSBrZXkgZXhpc3RzIGluIGJvdGggb2JqZWN0cywgdGhlIHByb3ZpZGVkIGZ1bmN0aW9uIGlzIGFwcGxpZWQgdG8gdGhlIHZhbHVlc1xuICogYXNzb2NpYXRlZCB3aXRoIHRoZSBrZXkgaW4gZWFjaCBvYmplY3QsIHdpdGggdGhlIHJlc3VsdCBiZWluZyB1c2VkIGFzIHRoZVxuICogdmFsdWUgYXNzb2NpYXRlZCB3aXRoIHRoZSBrZXkgaW4gdGhlIHJldHVybmVkIG9iamVjdC4gVGhlIGtleSB3aWxsIGJlXG4gKiBleGNsdWRlZCBmcm9tIHRoZSByZXR1cm5lZCBvYmplY3QgaWYgdGhlIHJlc3VsdGluZyB2YWx1ZSBpcyBgdW5kZWZpbmVkYC5cbiAqXG4gKiBAZnVuY1xuICogQG1lbWJlck9mIFJcbiAqIEBzaW5jZSB2MC4xOS4wXG4gKiBAY2F0ZWdvcnkgT2JqZWN0XG4gKiBAc2lnIChhIC0+IGEgLT4gYSkgLT4ge2F9IC0+IHthfSAtPiB7YX1cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXG4gKiBAcGFyYW0ge09iamVjdH0gbFxuICogQHBhcmFtIHtPYmplY3R9IHJcbiAqIEByZXR1cm4ge09iamVjdH1cbiAqIEBzZWUgUi5tZXJnZSwgUi5tZXJnZVdpdGhLZXlcbiAqIEBleGFtcGxlXG4gKlxuICogICAgICBSLm1lcmdlV2l0aChSLmNvbmNhdCxcbiAqICAgICAgICAgICAgICAgICAgeyBhOiB0cnVlLCB2YWx1ZXM6IFsxMCwgMjBdIH0sXG4gKiAgICAgICAgICAgICAgICAgIHsgYjogdHJ1ZSwgdmFsdWVzOiBbMTUsIDM1XSB9KTtcbiAqICAgICAgLy89PiB7IGE6IHRydWUsIGI6IHRydWUsIHZhbHVlczogWzEwLCAyMCwgMTUsIDM1XSB9XG4gKi9cbm1vZHVsZS5leHBvcnRzID0gX2N1cnJ5MyhmdW5jdGlvbiBtZXJnZVdpdGgoZm4sIGwsIHIpIHtcbiAgcmV0dXJuIG1lcmdlV2l0aEtleShmdW5jdGlvbihfLCBfbCwgX3IpIHtcbiAgICByZXR1cm4gZm4oX2wsIF9yKTtcbiAgfSwgbCwgcik7XG59KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9yYW1kYS9zcmMvbWVyZ2VXaXRoLmpzXG4vLyBtb2R1bGUgaWQgPSAxNzlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 180 */
/* no static exports found */
/* all exports used */
/*!*************************************!*\
  !*** ./~/ramda/src/mergeWithKey.js ***!
  \*************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var _curry3 = __webpack_require__(/*! ./internal/_curry3 */ 7);\nvar _has = __webpack_require__(/*! ./internal/_has */ 15);\n\n\n/**\n * Creates a new object with the own properties of the two provided objects. If\n * a key exists in both objects, the provided function is applied to the key\n * and the values associated with the key in each object, with the result being\n * used as the value associated with the key in the returned object. The key\n * will be excluded from the returned object if the resulting value is\n * `undefined`.\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category Object\n * @sig (String -> a -> a -> a) -> {a} -> {a} -> {a}\n * @param {Function} fn\n * @param {Object} l\n * @param {Object} r\n * @return {Object}\n * @see R.merge, R.mergeWith\n * @example\n *\n *      let concatValues = (k, l, r) => k == 'values' ? R.concat(l, r) : r\n *      R.mergeWithKey(concatValues,\n *                     { a: true, thing: 'foo', values: [10, 20] },\n *                     { b: true, thing: 'bar', values: [15, 35] });\n *      //=> { a: true, b: true, thing: 'bar', values: [10, 20, 15, 35] }\n * @symb R.mergeWithKey(f, { x: 1, y: 2 }, { y: 5, z: 3 }) = { x: 1, y: f('y', 2, 5), z: 3 }\n */\nmodule.exports = _curry3(function mergeWithKey(fn, l, r) {\n  var result = {};\n  var k;\n\n  for (k in l) {\n    if (_has(k, l)) {\n      result[k] = _has(k, r) ? fn(k, l[k], r[k]) : l[k];\n    }\n  }\n\n  for (k in r) {\n    if (_has(k, r) && !(_has(k, result))) {\n      result[k] = r[k];\n    }\n  }\n\n  return result;\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTgwLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9yYW1kYS9zcmMvbWVyZ2VXaXRoS2V5LmpzP2I4MDYiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIF9jdXJyeTMgPSByZXF1aXJlKCcuL2ludGVybmFsL19jdXJyeTMnKTtcbnZhciBfaGFzID0gcmVxdWlyZSgnLi9pbnRlcm5hbC9faGFzJyk7XG5cblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IG9iamVjdCB3aXRoIHRoZSBvd24gcHJvcGVydGllcyBvZiB0aGUgdHdvIHByb3ZpZGVkIG9iamVjdHMuIElmXG4gKiBhIGtleSBleGlzdHMgaW4gYm90aCBvYmplY3RzLCB0aGUgcHJvdmlkZWQgZnVuY3Rpb24gaXMgYXBwbGllZCB0byB0aGUga2V5XG4gKiBhbmQgdGhlIHZhbHVlcyBhc3NvY2lhdGVkIHdpdGggdGhlIGtleSBpbiBlYWNoIG9iamVjdCwgd2l0aCB0aGUgcmVzdWx0IGJlaW5nXG4gKiB1c2VkIGFzIHRoZSB2YWx1ZSBhc3NvY2lhdGVkIHdpdGggdGhlIGtleSBpbiB0aGUgcmV0dXJuZWQgb2JqZWN0LiBUaGUga2V5XG4gKiB3aWxsIGJlIGV4Y2x1ZGVkIGZyb20gdGhlIHJldHVybmVkIG9iamVjdCBpZiB0aGUgcmVzdWx0aW5nIHZhbHVlIGlzXG4gKiBgdW5kZWZpbmVkYC5cbiAqXG4gKiBAZnVuY1xuICogQG1lbWJlck9mIFJcbiAqIEBzaW5jZSB2MC4xOS4wXG4gKiBAY2F0ZWdvcnkgT2JqZWN0XG4gKiBAc2lnIChTdHJpbmcgLT4gYSAtPiBhIC0+IGEpIC0+IHthfSAtPiB7YX0gLT4ge2F9XG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxuICogQHBhcmFtIHtPYmplY3R9IGxcbiAqIEBwYXJhbSB7T2JqZWN0fSByXG4gKiBAcmV0dXJuIHtPYmplY3R9XG4gKiBAc2VlIFIubWVyZ2UsIFIubWVyZ2VXaXRoXG4gKiBAZXhhbXBsZVxuICpcbiAqICAgICAgbGV0IGNvbmNhdFZhbHVlcyA9IChrLCBsLCByKSA9PiBrID09ICd2YWx1ZXMnID8gUi5jb25jYXQobCwgcikgOiByXG4gKiAgICAgIFIubWVyZ2VXaXRoS2V5KGNvbmNhdFZhbHVlcyxcbiAqICAgICAgICAgICAgICAgICAgICAgeyBhOiB0cnVlLCB0aGluZzogJ2ZvbycsIHZhbHVlczogWzEwLCAyMF0gfSxcbiAqICAgICAgICAgICAgICAgICAgICAgeyBiOiB0cnVlLCB0aGluZzogJ2JhcicsIHZhbHVlczogWzE1LCAzNV0gfSk7XG4gKiAgICAgIC8vPT4geyBhOiB0cnVlLCBiOiB0cnVlLCB0aGluZzogJ2JhcicsIHZhbHVlczogWzEwLCAyMCwgMTUsIDM1XSB9XG4gKiBAc3ltYiBSLm1lcmdlV2l0aEtleShmLCB7IHg6IDEsIHk6IDIgfSwgeyB5OiA1LCB6OiAzIH0pID0geyB4OiAxLCB5OiBmKCd5JywgMiwgNSksIHo6IDMgfVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IF9jdXJyeTMoZnVuY3Rpb24gbWVyZ2VXaXRoS2V5KGZuLCBsLCByKSB7XG4gIHZhciByZXN1bHQgPSB7fTtcbiAgdmFyIGs7XG5cbiAgZm9yIChrIGluIGwpIHtcbiAgICBpZiAoX2hhcyhrLCBsKSkge1xuICAgICAgcmVzdWx0W2tdID0gX2hhcyhrLCByKSA/IGZuKGssIGxba10sIHJba10pIDogbFtrXTtcbiAgICB9XG4gIH1cblxuICBmb3IgKGsgaW4gcikge1xuICAgIGlmIChfaGFzKGssIHIpICYmICEoX2hhcyhrLCByZXN1bHQpKSkge1xuICAgICAgcmVzdWx0W2tdID0gcltrXTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcmFtZGEvc3JjL21lcmdlV2l0aEtleS5qc1xuLy8gbW9kdWxlIGlkID0gMTgwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 181 */
/* no static exports found */
/* all exports used */
/*!***************************!*\
  !*** ./~/ramda/src/or.js ***!
  \***************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var _curry2 = __webpack_require__(/*! ./internal/_curry2 */ 1);\n\n\n/**\n * Returns `true` if one or both of its arguments are `true`. Returns `false`\n * if both arguments are `false`.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Logic\n * @sig a -> b -> a | b\n * @param {Any} a\n * @param {Any} b\n * @return {Any} the first argument if truthy, otherwise the second argument.\n * @see R.either\n * @example\n *\n *      R.or(true, true); //=> true\n *      R.or(true, false); //=> true\n *      R.or(false, true); //=> true\n *      R.or(false, false); //=> false\n */\nmodule.exports = _curry2(function or(a, b) {\n  return a || b;\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTgxLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9yYW1kYS9zcmMvb3IuanM/MDAzZCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX2N1cnJ5MiA9IHJlcXVpcmUoJy4vaW50ZXJuYWwvX2N1cnJ5MicpO1xuXG5cbi8qKlxuICogUmV0dXJucyBgdHJ1ZWAgaWYgb25lIG9yIGJvdGggb2YgaXRzIGFyZ3VtZW50cyBhcmUgYHRydWVgLiBSZXR1cm5zIGBmYWxzZWBcbiAqIGlmIGJvdGggYXJndW1lbnRzIGFyZSBgZmFsc2VgLlxuICpcbiAqIEBmdW5jXG4gKiBAbWVtYmVyT2YgUlxuICogQHNpbmNlIHYwLjEuMFxuICogQGNhdGVnb3J5IExvZ2ljXG4gKiBAc2lnIGEgLT4gYiAtPiBhIHwgYlxuICogQHBhcmFtIHtBbnl9IGFcbiAqIEBwYXJhbSB7QW55fSBiXG4gKiBAcmV0dXJuIHtBbnl9IHRoZSBmaXJzdCBhcmd1bWVudCBpZiB0cnV0aHksIG90aGVyd2lzZSB0aGUgc2Vjb25kIGFyZ3VtZW50LlxuICogQHNlZSBSLmVpdGhlclxuICogQGV4YW1wbGVcbiAqXG4gKiAgICAgIFIub3IodHJ1ZSwgdHJ1ZSk7IC8vPT4gdHJ1ZVxuICogICAgICBSLm9yKHRydWUsIGZhbHNlKTsgLy89PiB0cnVlXG4gKiAgICAgIFIub3IoZmFsc2UsIHRydWUpOyAvLz0+IHRydWVcbiAqICAgICAgUi5vcihmYWxzZSwgZmFsc2UpOyAvLz0+IGZhbHNlXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gX2N1cnJ5MihmdW5jdGlvbiBvcihhLCBiKSB7XG4gIHJldHVybiBhIHx8IGI7XG59KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9yYW1kYS9zcmMvb3IuanNcbi8vIG1vZHVsZSBpZCA9IDE4MVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 182 */
/* no static exports found */
/* all exports used */
/*!*******************************!*\
  !*** ./~/ramda/src/pickBy.js ***!
  \*******************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var _curry2 = __webpack_require__(/*! ./internal/_curry2 */ 1);\n\n\n/**\n * Returns a partial copy of an object containing only the keys that satisfy\n * the supplied predicate.\n *\n * @func\n * @memberOf R\n * @since v0.8.0\n * @category Object\n * @sig (v, k -> Boolean) -> {k: v} -> {k: v}\n * @param {Function} pred A predicate to determine whether or not a key\n *        should be included on the output object.\n * @param {Object} obj The object to copy from\n * @return {Object} A new object with only properties that satisfy `pred`\n *         on it.\n * @see R.pick, R.filter\n * @example\n *\n *      var isUpperCase = (val, key) => key.toUpperCase() === key;\n *      R.pickBy(isUpperCase, {a: 1, b: 2, A: 3, B: 4}); //=> {A: 3, B: 4}\n */\nmodule.exports = _curry2(function pickBy(test, obj) {\n  var result = {};\n  for (var prop in obj) {\n    if (test(obj[prop], prop, obj)) {\n      result[prop] = obj[prop];\n    }\n  }\n  return result;\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTgyLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9yYW1kYS9zcmMvcGlja0J5LmpzPzUwMjgiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIF9jdXJyeTIgPSByZXF1aXJlKCcuL2ludGVybmFsL19jdXJyeTInKTtcblxuXG4vKipcbiAqIFJldHVybnMgYSBwYXJ0aWFsIGNvcHkgb2YgYW4gb2JqZWN0IGNvbnRhaW5pbmcgb25seSB0aGUga2V5cyB0aGF0IHNhdGlzZnlcbiAqIHRoZSBzdXBwbGllZCBwcmVkaWNhdGUuXG4gKlxuICogQGZ1bmNcbiAqIEBtZW1iZXJPZiBSXG4gKiBAc2luY2UgdjAuOC4wXG4gKiBAY2F0ZWdvcnkgT2JqZWN0XG4gKiBAc2lnICh2LCBrIC0+IEJvb2xlYW4pIC0+IHtrOiB2fSAtPiB7azogdn1cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWQgQSBwcmVkaWNhdGUgdG8gZGV0ZXJtaW5lIHdoZXRoZXIgb3Igbm90IGEga2V5XG4gKiAgICAgICAgc2hvdWxkIGJlIGluY2x1ZGVkIG9uIHRoZSBvdXRwdXQgb2JqZWN0LlxuICogQHBhcmFtIHtPYmplY3R9IG9iaiBUaGUgb2JqZWN0IHRvIGNvcHkgZnJvbVxuICogQHJldHVybiB7T2JqZWN0fSBBIG5ldyBvYmplY3Qgd2l0aCBvbmx5IHByb3BlcnRpZXMgdGhhdCBzYXRpc2Z5IGBwcmVkYFxuICogICAgICAgICBvbiBpdC5cbiAqIEBzZWUgUi5waWNrLCBSLmZpbHRlclxuICogQGV4YW1wbGVcbiAqXG4gKiAgICAgIHZhciBpc1VwcGVyQ2FzZSA9ICh2YWwsIGtleSkgPT4ga2V5LnRvVXBwZXJDYXNlKCkgPT09IGtleTtcbiAqICAgICAgUi5waWNrQnkoaXNVcHBlckNhc2UsIHthOiAxLCBiOiAyLCBBOiAzLCBCOiA0fSk7IC8vPT4ge0E6IDMsIEI6IDR9XG4gKi9cbm1vZHVsZS5leHBvcnRzID0gX2N1cnJ5MihmdW5jdGlvbiBwaWNrQnkodGVzdCwgb2JqKSB7XG4gIHZhciByZXN1bHQgPSB7fTtcbiAgZm9yICh2YXIgcHJvcCBpbiBvYmopIHtcbiAgICBpZiAodGVzdChvYmpbcHJvcF0sIHByb3AsIG9iaikpIHtcbiAgICAgIHJlc3VsdFtwcm9wXSA9IG9ialtwcm9wXTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3JhbWRhL3NyYy9waWNrQnkuanNcbi8vIG1vZHVsZSBpZCA9IDE4MlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 183 */
/* no static exports found */
/* all exports used */
/*!*****************************!*\
  !*** ./~/ramda/src/pipe.js ***!
  \*****************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var _arity = __webpack_require__(/*! ./internal/_arity */ 14);\nvar _pipe = __webpack_require__(/*! ./internal/_pipe */ 166);\nvar reduce = __webpack_require__(/*! ./reduce */ 26);\nvar tail = __webpack_require__(/*! ./tail */ 190);\n\n\n/**\n * Performs left-to-right function composition. The leftmost function may have\n * any arity; the remaining functions must be unary.\n *\n * In some libraries this function is named `sequence`.\n *\n * **Note:** The result of pipe is not automatically curried.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig (((a, b, ..., n) -> o), (o -> p), ..., (x -> y), (y -> z)) -> ((a, b, ..., n) -> z)\n * @param {...Function} functions\n * @return {Function}\n * @see R.compose\n * @example\n *\n *      var f = R.pipe(Math.pow, R.negate, R.inc);\n *\n *      f(3, 4); // -(3^4) + 1\n * @symb R.pipe(f, g, h)(a, b) = h(g(f(a, b)))\n */\nmodule.exports = function pipe() {\n  if (arguments.length === 0) {\n    throw new Error('pipe requires at least one argument');\n  }\n  return _arity(arguments[0].length,\n                reduce(_pipe, arguments[0], tail(arguments)));\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTgzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9yYW1kYS9zcmMvcGlwZS5qcz8zYTU1Il0sInNvdXJjZXNDb250ZW50IjpbInZhciBfYXJpdHkgPSByZXF1aXJlKCcuL2ludGVybmFsL19hcml0eScpO1xudmFyIF9waXBlID0gcmVxdWlyZSgnLi9pbnRlcm5hbC9fcGlwZScpO1xudmFyIHJlZHVjZSA9IHJlcXVpcmUoJy4vcmVkdWNlJyk7XG52YXIgdGFpbCA9IHJlcXVpcmUoJy4vdGFpbCcpO1xuXG5cbi8qKlxuICogUGVyZm9ybXMgbGVmdC10by1yaWdodCBmdW5jdGlvbiBjb21wb3NpdGlvbi4gVGhlIGxlZnRtb3N0IGZ1bmN0aW9uIG1heSBoYXZlXG4gKiBhbnkgYXJpdHk7IHRoZSByZW1haW5pbmcgZnVuY3Rpb25zIG11c3QgYmUgdW5hcnkuXG4gKlxuICogSW4gc29tZSBsaWJyYXJpZXMgdGhpcyBmdW5jdGlvbiBpcyBuYW1lZCBgc2VxdWVuY2VgLlxuICpcbiAqICoqTm90ZToqKiBUaGUgcmVzdWx0IG9mIHBpcGUgaXMgbm90IGF1dG9tYXRpY2FsbHkgY3VycmllZC5cbiAqXG4gKiBAZnVuY1xuICogQG1lbWJlck9mIFJcbiAqIEBzaW5jZSB2MC4xLjBcbiAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICogQHNpZyAoKChhLCBiLCAuLi4sIG4pIC0+IG8pLCAobyAtPiBwKSwgLi4uLCAoeCAtPiB5KSwgKHkgLT4geikpIC0+ICgoYSwgYiwgLi4uLCBuKSAtPiB6KVxuICogQHBhcmFtIHsuLi5GdW5jdGlvbn0gZnVuY3Rpb25zXG4gKiBAcmV0dXJuIHtGdW5jdGlvbn1cbiAqIEBzZWUgUi5jb21wb3NlXG4gKiBAZXhhbXBsZVxuICpcbiAqICAgICAgdmFyIGYgPSBSLnBpcGUoTWF0aC5wb3csIFIubmVnYXRlLCBSLmluYyk7XG4gKlxuICogICAgICBmKDMsIDQpOyAvLyAtKDNeNCkgKyAxXG4gKiBAc3ltYiBSLnBpcGUoZiwgZywgaCkoYSwgYikgPSBoKGcoZihhLCBiKSkpXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gcGlwZSgpIHtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3BpcGUgcmVxdWlyZXMgYXQgbGVhc3Qgb25lIGFyZ3VtZW50Jyk7XG4gIH1cbiAgcmV0dXJuIF9hcml0eShhcmd1bWVudHNbMF0ubGVuZ3RoLFxuICAgICAgICAgICAgICAgIHJlZHVjZShfcGlwZSwgYXJndW1lbnRzWzBdLCB0YWlsKGFyZ3VtZW50cykpKTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcmFtZGEvc3JjL3BpcGUuanNcbi8vIG1vZHVsZSBpZCA9IDE4M1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 184 */
/* no static exports found */
/* all exports used */
/*!******************************!*\
  !*** ./~/ramda/src/pluck.js ***!
  \******************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var _curry2 = __webpack_require__(/*! ./internal/_curry2 */ 1);\nvar map = __webpack_require__(/*! ./map */ 8);\nvar prop = __webpack_require__(/*! ./prop */ 65);\n\n\n/**\n * Returns a new list by plucking the same named property off all objects in\n * the list supplied.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig k -> [{k: v}] -> [v]\n * @param {Number|String} key The key name to pluck off of each object.\n * @param {Array} list The array to consider.\n * @return {Array} The list of values for the given key.\n * @see R.props\n * @example\n *\n *      R.pluck('a')([{a: 1}, {a: 2}]); //=> [1, 2]\n *      R.pluck(0)([[1, 2], [3, 4]]);   //=> [1, 3]\n * @symb R.pluck('x', [{x: 1, y: 2}, {x: 3, y: 4}, {x: 5, y: 6}]) = [1, 3, 5]\n * @symb R.pluck(0, [[1, 2], [3, 4], [5, 6]]) = [1, 3, 5]\n */\nmodule.exports = _curry2(function pluck(p, list) {\n  return map(prop(p), list);\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTg0LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9yYW1kYS9zcmMvcGx1Y2suanM/ZTU0MCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX2N1cnJ5MiA9IHJlcXVpcmUoJy4vaW50ZXJuYWwvX2N1cnJ5MicpO1xudmFyIG1hcCA9IHJlcXVpcmUoJy4vbWFwJyk7XG52YXIgcHJvcCA9IHJlcXVpcmUoJy4vcHJvcCcpO1xuXG5cbi8qKlxuICogUmV0dXJucyBhIG5ldyBsaXN0IGJ5IHBsdWNraW5nIHRoZSBzYW1lIG5hbWVkIHByb3BlcnR5IG9mZiBhbGwgb2JqZWN0cyBpblxuICogdGhlIGxpc3Qgc3VwcGxpZWQuXG4gKlxuICogQGZ1bmNcbiAqIEBtZW1iZXJPZiBSXG4gKiBAc2luY2UgdjAuMS4wXG4gKiBAY2F0ZWdvcnkgTGlzdFxuICogQHNpZyBrIC0+IFt7azogdn1dIC0+IFt2XVxuICogQHBhcmFtIHtOdW1iZXJ8U3RyaW5nfSBrZXkgVGhlIGtleSBuYW1lIHRvIHBsdWNrIG9mZiBvZiBlYWNoIG9iamVjdC5cbiAqIEBwYXJhbSB7QXJyYXl9IGxpc3QgVGhlIGFycmF5IHRvIGNvbnNpZGVyLlxuICogQHJldHVybiB7QXJyYXl9IFRoZSBsaXN0IG9mIHZhbHVlcyBmb3IgdGhlIGdpdmVuIGtleS5cbiAqIEBzZWUgUi5wcm9wc1xuICogQGV4YW1wbGVcbiAqXG4gKiAgICAgIFIucGx1Y2soJ2EnKShbe2E6IDF9LCB7YTogMn1dKTsgLy89PiBbMSwgMl1cbiAqICAgICAgUi5wbHVjaygwKShbWzEsIDJdLCBbMywgNF1dKTsgICAvLz0+IFsxLCAzXVxuICogQHN5bWIgUi5wbHVjaygneCcsIFt7eDogMSwgeTogMn0sIHt4OiAzLCB5OiA0fSwge3g6IDUsIHk6IDZ9XSkgPSBbMSwgMywgNV1cbiAqIEBzeW1iIFIucGx1Y2soMCwgW1sxLCAyXSwgWzMsIDRdLCBbNSwgNl1dKSA9IFsxLCAzLCA1XVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IF9jdXJyeTIoZnVuY3Rpb24gcGx1Y2socCwgbGlzdCkge1xuICByZXR1cm4gbWFwKHByb3AocCksIGxpc3QpO1xufSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcmFtZGEvc3JjL3BsdWNrLmpzXG4vLyBtb2R1bGUgaWQgPSAxODRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 185 */
/* no static exports found */
/* all exports used */
/*!*******************************!*\
  !*** ./~/ramda/src/reject.js ***!
  \*******************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var _complement = __webpack_require__(/*! ./internal/_complement */ 153);\nvar _curry2 = __webpack_require__(/*! ./internal/_curry2 */ 1);\nvar filter = __webpack_require__(/*! ./filter */ 147);\n\n\n/**\n * The complement of `filter`.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig Filterable f => (a -> Boolean) -> f a -> f a\n * @param {Function} pred\n * @param {Array} filterable\n * @return {Array}\n * @see R.filter, R.transduce, R.addIndex\n * @example\n *\n *      var isOdd = (n) => n % 2 === 1;\n *\n *      R.reject(isOdd, [1, 2, 3, 4]); //=> [2, 4]\n *\n *      R.reject(isOdd, {a: 1, b: 2, c: 3, d: 4}); //=> {b: 2, d: 4}\n */\nmodule.exports = _curry2(function reject(pred, filterable) {\n  return filter(_complement(pred), filterable);\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTg1LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9yYW1kYS9zcmMvcmVqZWN0LmpzP2VlZGMiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIF9jb21wbGVtZW50ID0gcmVxdWlyZSgnLi9pbnRlcm5hbC9fY29tcGxlbWVudCcpO1xudmFyIF9jdXJyeTIgPSByZXF1aXJlKCcuL2ludGVybmFsL19jdXJyeTInKTtcbnZhciBmaWx0ZXIgPSByZXF1aXJlKCcuL2ZpbHRlcicpO1xuXG5cbi8qKlxuICogVGhlIGNvbXBsZW1lbnQgb2YgYGZpbHRlcmAuXG4gKlxuICogQWN0cyBhcyBhIHRyYW5zZHVjZXIgaWYgYSB0cmFuc2Zvcm1lciBpcyBnaXZlbiBpbiBsaXN0IHBvc2l0aW9uLlxuICpcbiAqIEBmdW5jXG4gKiBAbWVtYmVyT2YgUlxuICogQHNpbmNlIHYwLjEuMFxuICogQGNhdGVnb3J5IExpc3RcbiAqIEBzaWcgRmlsdGVyYWJsZSBmID0+IChhIC0+IEJvb2xlYW4pIC0+IGYgYSAtPiBmIGFcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRcbiAqIEBwYXJhbSB7QXJyYXl9IGZpbHRlcmFibGVcbiAqIEByZXR1cm4ge0FycmF5fVxuICogQHNlZSBSLmZpbHRlciwgUi50cmFuc2R1Y2UsIFIuYWRkSW5kZXhcbiAqIEBleGFtcGxlXG4gKlxuICogICAgICB2YXIgaXNPZGQgPSAobikgPT4gbiAlIDIgPT09IDE7XG4gKlxuICogICAgICBSLnJlamVjdChpc09kZCwgWzEsIDIsIDMsIDRdKTsgLy89PiBbMiwgNF1cbiAqXG4gKiAgICAgIFIucmVqZWN0KGlzT2RkLCB7YTogMSwgYjogMiwgYzogMywgZDogNH0pOyAvLz0+IHtiOiAyLCBkOiA0fVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IF9jdXJyeTIoZnVuY3Rpb24gcmVqZWN0KHByZWQsIGZpbHRlcmFibGUpIHtcbiAgcmV0dXJuIGZpbHRlcihfY29tcGxlbWVudChwcmVkKSwgZmlsdGVyYWJsZSk7XG59KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9yYW1kYS9zcmMvcmVqZWN0LmpzXG4vLyBtb2R1bGUgaWQgPSAxODVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 186 */
/* no static exports found */
/* all exports used */
/*!********************************!*\
  !*** ./~/ramda/src/replace.js ***!
  \********************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var _curry3 = __webpack_require__(/*! ./internal/_curry3 */ 7);\n\n\n/**\n * Replace a substring or regex match in a string with a replacement.\n *\n * @func\n * @memberOf R\n * @since v0.7.0\n * @category String\n * @sig RegExp|String -> String -> String -> String\n * @param {RegExp|String} pattern A regular expression or a substring to match.\n * @param {String} replacement The string to replace the matches with.\n * @param {String} str The String to do the search and replacement in.\n * @return {String} The result.\n * @example\n *\n *      R.replace('foo', 'bar', 'foo foo foo'); //=> 'bar foo foo'\n *      R.replace(/foo/, 'bar', 'foo foo foo'); //=> 'bar foo foo'\n *\n *      // Use the \"g\" (global) flag to replace all occurrences:\n *      R.replace(/foo/g, 'bar', 'foo foo foo'); //=> 'bar bar bar'\n */\nmodule.exports = _curry3(function replace(regex, replacement, str) {\n  return str.replace(regex, replacement);\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTg2LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9yYW1kYS9zcmMvcmVwbGFjZS5qcz9lNjgxIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBfY3VycnkzID0gcmVxdWlyZSgnLi9pbnRlcm5hbC9fY3VycnkzJyk7XG5cblxuLyoqXG4gKiBSZXBsYWNlIGEgc3Vic3RyaW5nIG9yIHJlZ2V4IG1hdGNoIGluIGEgc3RyaW5nIHdpdGggYSByZXBsYWNlbWVudC5cbiAqXG4gKiBAZnVuY1xuICogQG1lbWJlck9mIFJcbiAqIEBzaW5jZSB2MC43LjBcbiAqIEBjYXRlZ29yeSBTdHJpbmdcbiAqIEBzaWcgUmVnRXhwfFN0cmluZyAtPiBTdHJpbmcgLT4gU3RyaW5nIC0+IFN0cmluZ1xuICogQHBhcmFtIHtSZWdFeHB8U3RyaW5nfSBwYXR0ZXJuIEEgcmVndWxhciBleHByZXNzaW9uIG9yIGEgc3Vic3RyaW5nIHRvIG1hdGNoLlxuICogQHBhcmFtIHtTdHJpbmd9IHJlcGxhY2VtZW50IFRoZSBzdHJpbmcgdG8gcmVwbGFjZSB0aGUgbWF0Y2hlcyB3aXRoLlxuICogQHBhcmFtIHtTdHJpbmd9IHN0ciBUaGUgU3RyaW5nIHRvIGRvIHRoZSBzZWFyY2ggYW5kIHJlcGxhY2VtZW50IGluLlxuICogQHJldHVybiB7U3RyaW5nfSBUaGUgcmVzdWx0LlxuICogQGV4YW1wbGVcbiAqXG4gKiAgICAgIFIucmVwbGFjZSgnZm9vJywgJ2JhcicsICdmb28gZm9vIGZvbycpOyAvLz0+ICdiYXIgZm9vIGZvbydcbiAqICAgICAgUi5yZXBsYWNlKC9mb28vLCAnYmFyJywgJ2ZvbyBmb28gZm9vJyk7IC8vPT4gJ2JhciBmb28gZm9vJ1xuICpcbiAqICAgICAgLy8gVXNlIHRoZSBcImdcIiAoZ2xvYmFsKSBmbGFnIHRvIHJlcGxhY2UgYWxsIG9jY3VycmVuY2VzOlxuICogICAgICBSLnJlcGxhY2UoL2Zvby9nLCAnYmFyJywgJ2ZvbyBmb28gZm9vJyk7IC8vPT4gJ2JhciBiYXIgYmFyJ1xuICovXG5tb2R1bGUuZXhwb3J0cyA9IF9jdXJyeTMoZnVuY3Rpb24gcmVwbGFjZShyZWdleCwgcmVwbGFjZW1lbnQsIHN0cikge1xuICByZXR1cm4gc3RyLnJlcGxhY2UocmVnZXgsIHJlcGxhY2VtZW50KTtcbn0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3JhbWRhL3NyYy9yZXBsYWNlLmpzXG4vLyBtb2R1bGUgaWQgPSAxODZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 187 */
/* no static exports found */
/* all exports used */
/*!********************************!*\
  !*** ./~/ramda/src/reverse.js ***!
  \********************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var _curry1 = __webpack_require__(/*! ./internal/_curry1 */ 2);\nvar _isString = __webpack_require__(/*! ./internal/_isString */ 60);\n\n\n/**\n * Returns a new list or string with the elements or characters in reverse\n * order.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig [a] -> [a]\n * @sig String -> String\n * @param {Array|String} list\n * @return {Array|String}\n * @example\n *\n *      R.reverse([1, 2, 3]);  //=> [3, 2, 1]\n *      R.reverse([1, 2]);     //=> [2, 1]\n *      R.reverse([1]);        //=> [1]\n *      R.reverse([]);         //=> []\n *\n *      R.reverse('abc');      //=> 'cba'\n *      R.reverse('ab');       //=> 'ba'\n *      R.reverse('a');        //=> 'a'\n *      R.reverse('');         //=> ''\n */\nmodule.exports = _curry1(function reverse(list) {\n  return _isString(list) ? list.split('').reverse().join('') :\n                           Array.prototype.slice.call(list, 0).reverse();\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTg3LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9yYW1kYS9zcmMvcmV2ZXJzZS5qcz8wNTMyIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBfY3VycnkxID0gcmVxdWlyZSgnLi9pbnRlcm5hbC9fY3VycnkxJyk7XG52YXIgX2lzU3RyaW5nID0gcmVxdWlyZSgnLi9pbnRlcm5hbC9faXNTdHJpbmcnKTtcblxuXG4vKipcbiAqIFJldHVybnMgYSBuZXcgbGlzdCBvciBzdHJpbmcgd2l0aCB0aGUgZWxlbWVudHMgb3IgY2hhcmFjdGVycyBpbiByZXZlcnNlXG4gKiBvcmRlci5cbiAqXG4gKiBAZnVuY1xuICogQG1lbWJlck9mIFJcbiAqIEBzaW5jZSB2MC4xLjBcbiAqIEBjYXRlZ29yeSBMaXN0XG4gKiBAc2lnIFthXSAtPiBbYV1cbiAqIEBzaWcgU3RyaW5nIC0+IFN0cmluZ1xuICogQHBhcmFtIHtBcnJheXxTdHJpbmd9IGxpc3RcbiAqIEByZXR1cm4ge0FycmF5fFN0cmluZ31cbiAqIEBleGFtcGxlXG4gKlxuICogICAgICBSLnJldmVyc2UoWzEsIDIsIDNdKTsgIC8vPT4gWzMsIDIsIDFdXG4gKiAgICAgIFIucmV2ZXJzZShbMSwgMl0pOyAgICAgLy89PiBbMiwgMV1cbiAqICAgICAgUi5yZXZlcnNlKFsxXSk7ICAgICAgICAvLz0+IFsxXVxuICogICAgICBSLnJldmVyc2UoW10pOyAgICAgICAgIC8vPT4gW11cbiAqXG4gKiAgICAgIFIucmV2ZXJzZSgnYWJjJyk7ICAgICAgLy89PiAnY2JhJ1xuICogICAgICBSLnJldmVyc2UoJ2FiJyk7ICAgICAgIC8vPT4gJ2JhJ1xuICogICAgICBSLnJldmVyc2UoJ2EnKTsgICAgICAgIC8vPT4gJ2EnXG4gKiAgICAgIFIucmV2ZXJzZSgnJyk7ICAgICAgICAgLy89PiAnJ1xuICovXG5tb2R1bGUuZXhwb3J0cyA9IF9jdXJyeTEoZnVuY3Rpb24gcmV2ZXJzZShsaXN0KSB7XG4gIHJldHVybiBfaXNTdHJpbmcobGlzdCkgPyBsaXN0LnNwbGl0KCcnKS5yZXZlcnNlKCkuam9pbignJykgOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwobGlzdCwgMCkucmV2ZXJzZSgpO1xufSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcmFtZGEvc3JjL3JldmVyc2UuanNcbi8vIG1vZHVsZSBpZCA9IDE4N1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 188 */
/* no static exports found */
/* all exports used */
/*!******************************!*\
  !*** ./~/ramda/src/slice.js ***!
  \******************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var _checkForMethod = __webpack_require__(/*! ./internal/_checkForMethod */ 57);\nvar _curry3 = __webpack_require__(/*! ./internal/_curry3 */ 7);\n\n\n/**\n * Returns the elements of the given list or string (or object with a `slice`\n * method) from `fromIndex` (inclusive) to `toIndex` (exclusive).\n *\n * Dispatches to the `slice` method of the third argument, if present.\n *\n * @func\n * @memberOf R\n * @since v0.1.4\n * @category List\n * @sig Number -> Number -> [a] -> [a]\n * @sig Number -> Number -> String -> String\n * @param {Number} fromIndex The start index (inclusive).\n * @param {Number} toIndex The end index (exclusive).\n * @param {*} list\n * @return {*}\n * @example\n *\n *      R.slice(1, 3, ['a', 'b', 'c', 'd']);        //=> ['b', 'c']\n *      R.slice(1, Infinity, ['a', 'b', 'c', 'd']); //=> ['b', 'c', 'd']\n *      R.slice(0, -1, ['a', 'b', 'c', 'd']);       //=> ['a', 'b', 'c']\n *      R.slice(-3, -1, ['a', 'b', 'c', 'd']);      //=> ['b', 'c']\n *      R.slice(0, 3, 'ramda');                     //=> 'ram'\n */\nmodule.exports = _curry3(_checkForMethod('slice', function slice(fromIndex, toIndex, list) {\n  return Array.prototype.slice.call(list, fromIndex, toIndex);\n}));\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTg4LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9yYW1kYS9zcmMvc2xpY2UuanM/NjAyZCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX2NoZWNrRm9yTWV0aG9kID0gcmVxdWlyZSgnLi9pbnRlcm5hbC9fY2hlY2tGb3JNZXRob2QnKTtcbnZhciBfY3VycnkzID0gcmVxdWlyZSgnLi9pbnRlcm5hbC9fY3VycnkzJyk7XG5cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBlbGVtZW50cyBvZiB0aGUgZ2l2ZW4gbGlzdCBvciBzdHJpbmcgKG9yIG9iamVjdCB3aXRoIGEgYHNsaWNlYFxuICogbWV0aG9kKSBmcm9tIGBmcm9tSW5kZXhgIChpbmNsdXNpdmUpIHRvIGB0b0luZGV4YCAoZXhjbHVzaXZlKS5cbiAqXG4gKiBEaXNwYXRjaGVzIHRvIHRoZSBgc2xpY2VgIG1ldGhvZCBvZiB0aGUgdGhpcmQgYXJndW1lbnQsIGlmIHByZXNlbnQuXG4gKlxuICogQGZ1bmNcbiAqIEBtZW1iZXJPZiBSXG4gKiBAc2luY2UgdjAuMS40XG4gKiBAY2F0ZWdvcnkgTGlzdFxuICogQHNpZyBOdW1iZXIgLT4gTnVtYmVyIC0+IFthXSAtPiBbYV1cbiAqIEBzaWcgTnVtYmVyIC0+IE51bWJlciAtPiBTdHJpbmcgLT4gU3RyaW5nXG4gKiBAcGFyYW0ge051bWJlcn0gZnJvbUluZGV4IFRoZSBzdGFydCBpbmRleCAoaW5jbHVzaXZlKS5cbiAqIEBwYXJhbSB7TnVtYmVyfSB0b0luZGV4IFRoZSBlbmQgaW5kZXggKGV4Y2x1c2l2ZSkuXG4gKiBAcGFyYW0geyp9IGxpc3RcbiAqIEByZXR1cm4geyp9XG4gKiBAZXhhbXBsZVxuICpcbiAqICAgICAgUi5zbGljZSgxLCAzLCBbJ2EnLCAnYicsICdjJywgJ2QnXSk7ICAgICAgICAvLz0+IFsnYicsICdjJ11cbiAqICAgICAgUi5zbGljZSgxLCBJbmZpbml0eSwgWydhJywgJ2InLCAnYycsICdkJ10pOyAvLz0+IFsnYicsICdjJywgJ2QnXVxuICogICAgICBSLnNsaWNlKDAsIC0xLCBbJ2EnLCAnYicsICdjJywgJ2QnXSk7ICAgICAgIC8vPT4gWydhJywgJ2InLCAnYyddXG4gKiAgICAgIFIuc2xpY2UoLTMsIC0xLCBbJ2EnLCAnYicsICdjJywgJ2QnXSk7ICAgICAgLy89PiBbJ2InLCAnYyddXG4gKiAgICAgIFIuc2xpY2UoMCwgMywgJ3JhbWRhJyk7ICAgICAgICAgICAgICAgICAgICAgLy89PiAncmFtJ1xuICovXG5tb2R1bGUuZXhwb3J0cyA9IF9jdXJyeTMoX2NoZWNrRm9yTWV0aG9kKCdzbGljZScsIGZ1bmN0aW9uIHNsaWNlKGZyb21JbmRleCwgdG9JbmRleCwgbGlzdCkge1xuICByZXR1cm4gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwobGlzdCwgZnJvbUluZGV4LCB0b0luZGV4KTtcbn0pKTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9yYW1kYS9zcmMvc2xpY2UuanNcbi8vIG1vZHVsZSBpZCA9IDE4OFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 189 */
/* no static exports found */
/* all exports used */
/*!******************************!*\
  !*** ./~/ramda/src/split.js ***!
  \******************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var invoker = __webpack_require__(/*! ./invoker */ 173);\n\n\n/**\n * Splits a string into an array of strings based on the given\n * separator.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category String\n * @sig (String | RegExp) -> String -> [String]\n * @param {String|RegExp} sep The pattern.\n * @param {String} str The string to separate into an array.\n * @return {Array} The array of strings from `str` separated by `str`.\n * @see R.join\n * @example\n *\n *      var pathComponents = R.split('/');\n *      R.tail(pathComponents('/usr/local/bin/node')); //=> ['usr', 'local', 'bin', 'node']\n *\n *      R.split('.', 'a.b.c.xyz.d'); //=> ['a', 'b', 'c', 'xyz', 'd']\n */\nmodule.exports = invoker(1, 'split');\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTg5LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9yYW1kYS9zcmMvc3BsaXQuanM/OWMxNyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgaW52b2tlciA9IHJlcXVpcmUoJy4vaW52b2tlcicpO1xuXG5cbi8qKlxuICogU3BsaXRzIGEgc3RyaW5nIGludG8gYW4gYXJyYXkgb2Ygc3RyaW5ncyBiYXNlZCBvbiB0aGUgZ2l2ZW5cbiAqIHNlcGFyYXRvci5cbiAqXG4gKiBAZnVuY1xuICogQG1lbWJlck9mIFJcbiAqIEBzaW5jZSB2MC4xLjBcbiAqIEBjYXRlZ29yeSBTdHJpbmdcbiAqIEBzaWcgKFN0cmluZyB8IFJlZ0V4cCkgLT4gU3RyaW5nIC0+IFtTdHJpbmddXG4gKiBAcGFyYW0ge1N0cmluZ3xSZWdFeHB9IHNlcCBUaGUgcGF0dGVybi5cbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHIgVGhlIHN0cmluZyB0byBzZXBhcmF0ZSBpbnRvIGFuIGFycmF5LlxuICogQHJldHVybiB7QXJyYXl9IFRoZSBhcnJheSBvZiBzdHJpbmdzIGZyb20gYHN0cmAgc2VwYXJhdGVkIGJ5IGBzdHJgLlxuICogQHNlZSBSLmpvaW5cbiAqIEBleGFtcGxlXG4gKlxuICogICAgICB2YXIgcGF0aENvbXBvbmVudHMgPSBSLnNwbGl0KCcvJyk7XG4gKiAgICAgIFIudGFpbChwYXRoQ29tcG9uZW50cygnL3Vzci9sb2NhbC9iaW4vbm9kZScpKTsgLy89PiBbJ3VzcicsICdsb2NhbCcsICdiaW4nLCAnbm9kZSddXG4gKlxuICogICAgICBSLnNwbGl0KCcuJywgJ2EuYi5jLnh5ei5kJyk7IC8vPT4gWydhJywgJ2InLCAnYycsICd4eXonLCAnZCddXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gaW52b2tlcigxLCAnc3BsaXQnKTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9yYW1kYS9zcmMvc3BsaXQuanNcbi8vIG1vZHVsZSBpZCA9IDE4OVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 190 */
/* no static exports found */
/* all exports used */
/*!*****************************!*\
  !*** ./~/ramda/src/tail.js ***!
  \*****************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var _checkForMethod = __webpack_require__(/*! ./internal/_checkForMethod */ 57);\nvar _curry1 = __webpack_require__(/*! ./internal/_curry1 */ 2);\nvar slice = __webpack_require__(/*! ./slice */ 188);\n\n\n/**\n * Returns all but the first element of the given list or string (or object\n * with a `tail` method).\n *\n * Dispatches to the `slice` method of the first argument, if present.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig [a] -> [a]\n * @sig String -> String\n * @param {*} list\n * @return {*}\n * @see R.head, R.init, R.last\n * @example\n *\n *      R.tail([1, 2, 3]);  //=> [2, 3]\n *      R.tail([1, 2]);     //=> [2]\n *      R.tail([1]);        //=> []\n *      R.tail([]);         //=> []\n *\n *      R.tail('abc');  //=> 'bc'\n *      R.tail('ab');   //=> 'b'\n *      R.tail('a');    //=> ''\n *      R.tail('');     //=> ''\n */\nmodule.exports = _curry1(_checkForMethod('tail', slice(1, Infinity)));\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTkwLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9yYW1kYS9zcmMvdGFpbC5qcz83OGI1Il0sInNvdXJjZXNDb250ZW50IjpbInZhciBfY2hlY2tGb3JNZXRob2QgPSByZXF1aXJlKCcuL2ludGVybmFsL19jaGVja0Zvck1ldGhvZCcpO1xudmFyIF9jdXJyeTEgPSByZXF1aXJlKCcuL2ludGVybmFsL19jdXJyeTEnKTtcbnZhciBzbGljZSA9IHJlcXVpcmUoJy4vc2xpY2UnKTtcblxuXG4vKipcbiAqIFJldHVybnMgYWxsIGJ1dCB0aGUgZmlyc3QgZWxlbWVudCBvZiB0aGUgZ2l2ZW4gbGlzdCBvciBzdHJpbmcgKG9yIG9iamVjdFxuICogd2l0aCBhIGB0YWlsYCBtZXRob2QpLlxuICpcbiAqIERpc3BhdGNoZXMgdG8gdGhlIGBzbGljZWAgbWV0aG9kIG9mIHRoZSBmaXJzdCBhcmd1bWVudCwgaWYgcHJlc2VudC5cbiAqXG4gKiBAZnVuY1xuICogQG1lbWJlck9mIFJcbiAqIEBzaW5jZSB2MC4xLjBcbiAqIEBjYXRlZ29yeSBMaXN0XG4gKiBAc2lnIFthXSAtPiBbYV1cbiAqIEBzaWcgU3RyaW5nIC0+IFN0cmluZ1xuICogQHBhcmFtIHsqfSBsaXN0XG4gKiBAcmV0dXJuIHsqfVxuICogQHNlZSBSLmhlYWQsIFIuaW5pdCwgUi5sYXN0XG4gKiBAZXhhbXBsZVxuICpcbiAqICAgICAgUi50YWlsKFsxLCAyLCAzXSk7ICAvLz0+IFsyLCAzXVxuICogICAgICBSLnRhaWwoWzEsIDJdKTsgICAgIC8vPT4gWzJdXG4gKiAgICAgIFIudGFpbChbMV0pOyAgICAgICAgLy89PiBbXVxuICogICAgICBSLnRhaWwoW10pOyAgICAgICAgIC8vPT4gW11cbiAqXG4gKiAgICAgIFIudGFpbCgnYWJjJyk7ICAvLz0+ICdiYydcbiAqICAgICAgUi50YWlsKCdhYicpOyAgIC8vPT4gJ2InXG4gKiAgICAgIFIudGFpbCgnYScpOyAgICAvLz0+ICcnXG4gKiAgICAgIFIudGFpbCgnJyk7ICAgICAvLz0+ICcnXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gX2N1cnJ5MShfY2hlY2tGb3JNZXRob2QoJ3RhaWwnLCBzbGljZSgxLCBJbmZpbml0eSkpKTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9yYW1kYS9zcmMvdGFpbC5qc1xuLy8gbW9kdWxlIGlkID0gMTkwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 191 */
/* no static exports found */
/* all exports used */
/*!*********************************!*\
  !*** ./~/ramda/src/toString.js ***!
  \*********************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var _curry1 = __webpack_require__(/*! ./internal/_curry1 */ 2);\nvar _toString = __webpack_require__(/*! ./internal/_toString */ 169);\n\n\n/**\n * Returns the string representation of the given value. `eval`'ing the output\n * should result in a value equivalent to the input value. Many of the built-in\n * `toString` methods do not satisfy this requirement.\n *\n * If the given value is an `[object Object]` with a `toString` method other\n * than `Object.prototype.toString`, this method is invoked with no arguments\n * to produce the return value. This means user-defined constructor functions\n * can provide a suitable `toString` method. For example:\n *\n *     function Point(x, y) {\n *       this.x = x;\n *       this.y = y;\n *     }\n *\n *     Point.prototype.toString = function() {\n *       return 'new Point(' + this.x + ', ' + this.y + ')';\n *     };\n *\n *     R.toString(new Point(1, 2)); //=> 'new Point(1, 2)'\n *\n * @func\n * @memberOf R\n * @since v0.14.0\n * @category String\n * @sig * -> String\n * @param {*} val\n * @return {String}\n * @example\n *\n *      R.toString(42); //=> '42'\n *      R.toString('abc'); //=> '\"abc\"'\n *      R.toString([1, 2, 3]); //=> '[1, 2, 3]'\n *      R.toString({foo: 1, bar: 2, baz: 3}); //=> '{\"bar\": 2, \"baz\": 3, \"foo\": 1}'\n *      R.toString(new Date('2001-02-03T04:05:06Z')); //=> 'new Date(\"2001-02-03T04:05:06.000Z\")'\n */\nmodule.exports = _curry1(function toString(val) { return _toString(val, []); });\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTkxLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9yYW1kYS9zcmMvdG9TdHJpbmcuanM/OTQxMCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX2N1cnJ5MSA9IHJlcXVpcmUoJy4vaW50ZXJuYWwvX2N1cnJ5MScpO1xudmFyIF90b1N0cmluZyA9IHJlcXVpcmUoJy4vaW50ZXJuYWwvX3RvU3RyaW5nJyk7XG5cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIGdpdmVuIHZhbHVlLiBgZXZhbGAnaW5nIHRoZSBvdXRwdXRcbiAqIHNob3VsZCByZXN1bHQgaW4gYSB2YWx1ZSBlcXVpdmFsZW50IHRvIHRoZSBpbnB1dCB2YWx1ZS4gTWFueSBvZiB0aGUgYnVpbHQtaW5cbiAqIGB0b1N0cmluZ2AgbWV0aG9kcyBkbyBub3Qgc2F0aXNmeSB0aGlzIHJlcXVpcmVtZW50LlxuICpcbiAqIElmIHRoZSBnaXZlbiB2YWx1ZSBpcyBhbiBgW29iamVjdCBPYmplY3RdYCB3aXRoIGEgYHRvU3RyaW5nYCBtZXRob2Qgb3RoZXJcbiAqIHRoYW4gYE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmdgLCB0aGlzIG1ldGhvZCBpcyBpbnZva2VkIHdpdGggbm8gYXJndW1lbnRzXG4gKiB0byBwcm9kdWNlIHRoZSByZXR1cm4gdmFsdWUuIFRoaXMgbWVhbnMgdXNlci1kZWZpbmVkIGNvbnN0cnVjdG9yIGZ1bmN0aW9uc1xuICogY2FuIHByb3ZpZGUgYSBzdWl0YWJsZSBgdG9TdHJpbmdgIG1ldGhvZC4gRm9yIGV4YW1wbGU6XG4gKlxuICogICAgIGZ1bmN0aW9uIFBvaW50KHgsIHkpIHtcbiAqICAgICAgIHRoaXMueCA9IHg7XG4gKiAgICAgICB0aGlzLnkgPSB5O1xuICogICAgIH1cbiAqXG4gKiAgICAgUG9pbnQucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gKiAgICAgICByZXR1cm4gJ25ldyBQb2ludCgnICsgdGhpcy54ICsgJywgJyArIHRoaXMueSArICcpJztcbiAqICAgICB9O1xuICpcbiAqICAgICBSLnRvU3RyaW5nKG5ldyBQb2ludCgxLCAyKSk7IC8vPT4gJ25ldyBQb2ludCgxLCAyKSdcbiAqXG4gKiBAZnVuY1xuICogQG1lbWJlck9mIFJcbiAqIEBzaW5jZSB2MC4xNC4wXG4gKiBAY2F0ZWdvcnkgU3RyaW5nXG4gKiBAc2lnICogLT4gU3RyaW5nXG4gKiBAcGFyYW0geyp9IHZhbFxuICogQHJldHVybiB7U3RyaW5nfVxuICogQGV4YW1wbGVcbiAqXG4gKiAgICAgIFIudG9TdHJpbmcoNDIpOyAvLz0+ICc0MidcbiAqICAgICAgUi50b1N0cmluZygnYWJjJyk7IC8vPT4gJ1wiYWJjXCInXG4gKiAgICAgIFIudG9TdHJpbmcoWzEsIDIsIDNdKTsgLy89PiAnWzEsIDIsIDNdJ1xuICogICAgICBSLnRvU3RyaW5nKHtmb286IDEsIGJhcjogMiwgYmF6OiAzfSk7IC8vPT4gJ3tcImJhclwiOiAyLCBcImJhelwiOiAzLCBcImZvb1wiOiAxfSdcbiAqICAgICAgUi50b1N0cmluZyhuZXcgRGF0ZSgnMjAwMS0wMi0wM1QwNDowNTowNlonKSk7IC8vPT4gJ25ldyBEYXRlKFwiMjAwMS0wMi0wM1QwNDowNTowNi4wMDBaXCIpJ1xuICovXG5tb2R1bGUuZXhwb3J0cyA9IF9jdXJyeTEoZnVuY3Rpb24gdG9TdHJpbmcodmFsKSB7IHJldHVybiBfdG9TdHJpbmcodmFsLCBbXSk7IH0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3JhbWRhL3NyYy90b1N0cmluZy5qc1xuLy8gbW9kdWxlIGlkID0gMTkxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 192 */
/* no static exports found */
/* all exports used */
/*!*****************************!*\
  !*** ./~/ramda/src/type.js ***!
  \*****************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var _curry1 = __webpack_require__(/*! ./internal/_curry1 */ 2);\n\n\n/**\n * Gives a single-word string description of the (native) type of a value,\n * returning such answers as 'Object', 'Number', 'Array', or 'Null'. Does not\n * attempt to distinguish user Object types any further, reporting them all as\n * 'Object'.\n *\n * @func\n * @memberOf R\n * @since v0.8.0\n * @category Type\n * @sig (* -> {*}) -> String\n * @param {*} val The value to test\n * @return {String}\n * @example\n *\n *      R.type({}); //=> \"Object\"\n *      R.type(1); //=> \"Number\"\n *      R.type(false); //=> \"Boolean\"\n *      R.type('s'); //=> \"String\"\n *      R.type(null); //=> \"Null\"\n *      R.type([]); //=> \"Array\"\n *      R.type(/[A-z]/); //=> \"RegExp\"\n */\nmodule.exports = _curry1(function type(val) {\n  return val === null      ? 'Null'      :\n         val === undefined ? 'Undefined' :\n         Object.prototype.toString.call(val).slice(8, -1);\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTkyLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9yYW1kYS9zcmMvdHlwZS5qcz84Y2NlIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBfY3VycnkxID0gcmVxdWlyZSgnLi9pbnRlcm5hbC9fY3VycnkxJyk7XG5cblxuLyoqXG4gKiBHaXZlcyBhIHNpbmdsZS13b3JkIHN0cmluZyBkZXNjcmlwdGlvbiBvZiB0aGUgKG5hdGl2ZSkgdHlwZSBvZiBhIHZhbHVlLFxuICogcmV0dXJuaW5nIHN1Y2ggYW5zd2VycyBhcyAnT2JqZWN0JywgJ051bWJlcicsICdBcnJheScsIG9yICdOdWxsJy4gRG9lcyBub3RcbiAqIGF0dGVtcHQgdG8gZGlzdGluZ3Vpc2ggdXNlciBPYmplY3QgdHlwZXMgYW55IGZ1cnRoZXIsIHJlcG9ydGluZyB0aGVtIGFsbCBhc1xuICogJ09iamVjdCcuXG4gKlxuICogQGZ1bmNcbiAqIEBtZW1iZXJPZiBSXG4gKiBAc2luY2UgdjAuOC4wXG4gKiBAY2F0ZWdvcnkgVHlwZVxuICogQHNpZyAoKiAtPiB7Kn0pIC0+IFN0cmluZ1xuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBleGFtcGxlXG4gKlxuICogICAgICBSLnR5cGUoe30pOyAvLz0+IFwiT2JqZWN0XCJcbiAqICAgICAgUi50eXBlKDEpOyAvLz0+IFwiTnVtYmVyXCJcbiAqICAgICAgUi50eXBlKGZhbHNlKTsgLy89PiBcIkJvb2xlYW5cIlxuICogICAgICBSLnR5cGUoJ3MnKTsgLy89PiBcIlN0cmluZ1wiXG4gKiAgICAgIFIudHlwZShudWxsKTsgLy89PiBcIk51bGxcIlxuICogICAgICBSLnR5cGUoW10pOyAvLz0+IFwiQXJyYXlcIlxuICogICAgICBSLnR5cGUoL1tBLXpdLyk7IC8vPT4gXCJSZWdFeHBcIlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IF9jdXJyeTEoZnVuY3Rpb24gdHlwZSh2YWwpIHtcbiAgcmV0dXJuIHZhbCA9PT0gbnVsbCAgICAgID8gJ051bGwnICAgICAgOlxuICAgICAgICAgdmFsID09PSB1bmRlZmluZWQgPyAnVW5kZWZpbmVkJyA6XG4gICAgICAgICBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsKS5zbGljZSg4LCAtMSk7XG59KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9yYW1kYS9zcmMvdHlwZS5qc1xuLy8gbW9kdWxlIGlkID0gMTkyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 193 */
/* no static exports found */
/* all exports used */
/*!**************************************************!*\
  !*** ./~/tangram-reference/1.0.0/reference.json ***!
  \**************************************************/
/***/ (function(module, exports) {

eval("module.exports = {\n\t\"version\": \"1.0.0\",\n\t\"symbolizers\": {\n\t\t\"polygon\": {\n\t\t\t\"fill\": {\n\t\t\t\t\"css\": \"polygon-fill\",\n\t\t\t\t\"type\": \"color\",\n\t\t\t\t\"default-value\": \"rgba(128,128,128,1)\",\n\t\t\t\t\"default-meaning\": \"gray and fully opaque (alpha = 1), same as rgb(128,128,128)\",\n\t\t\t\t\"doc\": \"Fill color to assign to a polygon\"\n\t\t\t},\n\t\t\t\"fill-opacity\": {\n\t\t\t\t\"css\": \"polygon-opacity\",\n\t\t\t\t\"type\": \"float\",\n\t\t\t\t\"doc\": \"The opacity of the polygon\",\n\t\t\t\t\"default-value\": 1,\n\t\t\t\t\"default-meaning\": \"opaque\"\n\t\t\t},\n\t\t\t\"comp-op\": {\n\t\t\t\t\"css\": \"polygon-comp-op\",\n\t\t\t\t\"default-value\": \"src-over\",\n\t\t\t\t\"default-meaning\": \"Add the current symbolizer on top of other symbolizer.\",\n\t\t\t\t\"doc\": \"Composite operation. This defines how this symbolizer should behave relative to symbolizers atop or below it.\",\n\t\t\t\t\"type\": [\n\t\t\t\t\t\"multiply\",\n\t\t\t\t\t\"add\",\n\t\t\t\t\t\"overlay\"\n\t\t\t\t],\n\t\t\t\t\"expression\": true\n\t\t\t}\n\t\t},\n\t\t\"polygon-pattern\": {\n\t\t\t\"file\": {\n\t\t\t\t\"css\": \"polygon-pattern-file\",\n\t\t\t\t\"type\": \"uri\",\n\t\t\t\t\"expression\": true,\n\t\t\t\t\"default-value\": \"none\",\n\t\t\t\t\"required\": true,\n\t\t\t\t\"doc\": \"Image to use as a repeated pattern fill within a polygon. Accepted formats: svg, jpg, png, tiff, and webp.\",\n\t\t\t\t\"default-meaning\": \"\"\n\t\t\t}\n\t\t},\n\t\t\"line\": {\n\t\t\t\"stroke\": {\n\t\t\t\t\"css\": \"line-color\",\n\t\t\t\t\"default-value\": \"rgba(0,0,0,1)\",\n\t\t\t\t\"type\": \"color\",\n\t\t\t\t\"default-meaning\": \"black and fully opaque (alpha = 1), same as rgb(0,0,0)\",\n\t\t\t\t\"doc\": \"The color of a drawn line\"\n\t\t\t},\n\t\t\t\"stroke-width\": {\n\t\t\t\t\"css\": \"line-width\",\n\t\t\t\t\"default-value\": 1,\n\t\t\t\t\"type\": \"float\",\n\t\t\t\t\"doc\": \"The width of a line in pixels\"\n\t\t\t},\n\t\t\t\"stroke-opacity\": {\n\t\t\t\t\"css\": \"line-opacity\",\n\t\t\t\t\"default-value\": 1,\n\t\t\t\t\"type\": \"float\",\n\t\t\t\t\"default-meaning\": \"opaque\",\n\t\t\t\t\"doc\": \"The opacity of a line\"\n\t\t\t},\n\t\t\t\"stroke-linejoin\": {\n\t\t\t\t\"css\": \"line-join\",\n\t\t\t\t\"default-value\": \"miter\",\n\t\t\t\t\"type\": [\n\t\t\t\t\t\"miter\",\n\t\t\t\t\t\"miter-revert\",\n\t\t\t\t\t\"round\",\n\t\t\t\t\t\"bevel\"\n\t\t\t\t],\n\t\t\t\t\"expression\": true,\n\t\t\t\t\"doc\": \"The behavior of lines when joining.\",\n\t\t\t\t\"default-meaning\": \"The line joins will be rendered using a miter look.\"\n\t\t\t},\n\t\t\t\"stroke-linecap\": {\n\t\t\t\t\"css\": \"line-cap\",\n\t\t\t\t\"default-value\": \"butt\",\n\t\t\t\t\"type\": [\n\t\t\t\t\t\"butt\",\n\t\t\t\t\t\"round\",\n\t\t\t\t\t\"square\"\n\t\t\t\t],\n\t\t\t\t\"expression\": true,\n\t\t\t\t\"doc\": \"The display of line endings.\",\n\t\t\t\t\"default-meaning\": \"The line endings will be rendered using a butt look.\"\n\t\t\t},\n\t\t\t\"comp-op\": {\n\t\t\t\t\"css\": \"line-comp-op\",\n\t\t\t\t\"default-value\": \"overlay\",\n\t\t\t\t\"default-meaning\": \"Add the current symbolizer on top of other symbolizer.\",\n\t\t\t\t\"doc\": \"Composite operation. This defines how this symbolizer should behave relative to symbolizers atop or below it.\",\n\t\t\t\t\"type\": [\n\t\t\t\t\t\"multiply\",\n\t\t\t\t\t\"add\",\n\t\t\t\t\t\"overlay\"\n\t\t\t\t],\n\t\t\t\t\"expression\": true\n\t\t\t},\n\t\t\t\"stroke-dasharray\": {\n\t\t\t\t\"css\": \"line-dasharray\",\n\t\t\t\t\"type\": \"numbers\",\n\t\t\t\t\"expression\": true,\n\t\t\t\t\"doc\": \"A pair of length values [a,b], where (a) is the dash length and (b) is the gap length respectively. More than two values are supported for more complex patterns.\",\n\t\t\t\t\"default-value\": \"none\",\n\t\t\t\t\"default-meaning\": \"The line will be drawn without dashes.\"\n\t\t\t}\n\t\t},\n\t\t\"markers\": {\n\t\t\t\"file\": {\n\t\t\t\t\"css\": \"marker-file\",\n\t\t\t\t\"doc\": \"A file that this marker shows at each placement. If no file is given, the marker will show an ellipse. Accepted formats: svg, jpg, png, tiff, and webp.\",\n\t\t\t\t\"default-value\": \"none\",\n\t\t\t\t\"default-meaning\": \"An ellipse or circle, if width equals height.\",\n\t\t\t\t\"type\": \"uri\",\n\t\t\t\t\"expression\": true\n\t\t\t},\n\t\t\t\"opacity\": {\n\t\t\t\t\"css\": \"marker-opacity\",\n\t\t\t\t\"doc\": \"The overall opacity of the marker, if set, overrides both the opacity of both the fill and stroke\",\n\t\t\t\t\"default-value\": 1,\n\t\t\t\t\"default-meaning\": \"The stroke-opacity and fill-opacity will be used\",\n\t\t\t\t\"type\": \"float\"\n\t\t\t},\n\t\t\t\"fill\": {\n\t\t\t\t\"css\": \"marker-fill\",\n\t\t\t\t\"default-value\": \"#FFF\",\n\t\t\t\t\"doc\": \"The color of the area of the marker.\",\n\t\t\t\t\"type\": \"color\",\n\t\t\t\t\"expression\": true\n\t\t\t},\n\t\t\t\"allow-overlap\": {\n\t\t\t\t\"css\": \"marker-allow-overlap\",\n\t\t\t\t\"type\": \"boolean\",\n\t\t\t\t\"expression\": true,\n\t\t\t\t\"default-value\": false,\n\t\t\t\t\"doc\": \"Control whether overlapping markers are shown or hidden.\",\n\t\t\t\t\"default-meaning\": \"Do not allow markers to overlap with each other - overlapping markers will not be shown.\"\n\t\t\t},\n\t\t\t\"width\": {\n\t\t\t\t\"css\": \"marker-width\",\n\t\t\t\t\"default-value\": 10,\n\t\t\t\t\"doc\": \"The width of the marker, if using one of the default types.\",\n\t\t\t\t\"type\": \"float\",\n\t\t\t\t\"expression\": true,\n\t\t\t\t\"default-meaning\": \"The marker width is 10 pixels.\"\n\t\t\t},\n\t\t\t\"fill-opacity\": {\n\t\t\t\t\"css\": \"marker-fill-opacity\",\n\t\t\t\t\"doc\": \"The fill opacity of the marker.\",\n\t\t\t\t\"default-value\": 1,\n\t\t\t\t\"expression\": true,\n\t\t\t\t\"default-meaning\": \"Color is fully opaque.\",\n\t\t\t\t\"type\": \"float\"\n\t\t\t},\n\t\t\t\"comp-op\": {\n\t\t\t\t\"css\": \"marker-comp-op\",\n\t\t\t\t\"default-value\": \"src-over\",\n\t\t\t\t\"default-meaning\": \"Add the current symbolizer on top of other symbolizer.\",\n\t\t\t\t\"doc\": \"Composite operation. This defines how this symbolizer should behave relative to symbolizers atop or below it.\",\n\t\t\t\t\"type\": [\n\t\t\t\t\t\"multiply\",\n\t\t\t\t\t\"add\",\n\t\t\t\t\t\"overlay\"\n\t\t\t\t],\n\t\t\t\t\"expression\": true\n\t\t\t},\n\t\t\t\"stroke\": {\n\t\t\t\t\"css\": \"marker-line-color\",\n\t\t\t\t\"doc\": \"The color of the stroke around the marker.\",\n\t\t\t\t\"default-value\": \"black\",\n\t\t\t\t\"type\": \"color\",\n\t\t\t\t\"expression\": true,\n\t\t\t\t\"default-meaning\": \"The marker will be drawn with a black outline.\"\n\t\t\t},\n\t\t\t\"stroke-width\": {\n\t\t\t\t\"css\": \"marker-line-width\",\n\t\t\t\t\"default-value\": 0.5,\n\t\t\t\t\"doc\": \"The width of the stroke around the marker, in pixels. This is positioned on the boundary, so high values can cover the area itself.\",\n\t\t\t\t\"type\": \"float\",\n\t\t\t\t\"expression\": true,\n\t\t\t\t\"default-meaning\": \"The marker will be drawn with an outline of .5 pixels wide.\"\n\t\t\t},\n\t\t\t\"stroke-opacity\": {\n\t\t\t\t\"css\": \"marker-line-opacity\",\n\t\t\t\t\"default-value\": 1,\n\t\t\t\t\"default-meaning\": \"Color is fully opaque.\",\n\t\t\t\t\"doc\": \"The opacity of a line.\",\n\t\t\t\t\"type\": \"float\",\n\t\t\t\t\"expression\": true\n\t\t\t},\n\t\t\t\"placement\": {\n\t\t\t\t\"css\": \"marker-placement\",\n\t\t\t\t\"type\": [\n\t\t\t\t\t\"point\"\n\t\t\t\t],\n\t\t\t\t\"expression\": true,\n\t\t\t\t\"default-value\": \"point\",\n\t\t\t\t\"default-meaning\": \"Place markers at the center point (centroid) of the geometry.\",\n\t\t\t\t\"doc\": \"Attempt to place markers on a point, in the center of a polygon, or if markers-placement:line, then multiple times along a line. 'interior' placement can be used to ensure that points placed on polygons are forced to be inside the polygon interior. The 'vertex-first' and 'vertex-last' options can be used to place markers at the first or last vertex of lines or polygons.\"\n\t\t\t},\n\t\t\t\"marker-type\": {\n\t\t\t\t\"css\": \"marker-type\",\n\t\t\t\t\"type\": [\n\t\t\t\t\t\"ellipse\"\n\t\t\t\t],\n\t\t\t\t\"expression\": true,\n\t\t\t\t\"default-value\": \"ellipse\",\n\t\t\t\t\"default-meaning\": \"The marker shape is an ellipse.\",\n\t\t\t\t\"doc\": \"The default marker-type. If a SVG file is not given as the marker-file parameter, the renderer provides either an arrow or an ellipse (a circle if height is equal to width).\",\n\t\t\t\t\"status\": \"deprecated\"\n\t\t\t}\n\t\t},\n\t\t\"text\": {\n\t\t\t\"name\": {\n\t\t\t\t\"css\": \"text-name\",\n\t\t\t\t\"type\": \"string\",\n\t\t\t\t\"expression\": true,\n\t\t\t\t\"required\": true,\n\t\t\t\t\"default-value\": \"none\",\n\t\t\t\t\"serialization\": \"content\",\n\t\t\t\t\"doc\": \"Value to use for a text label. Data columns are specified using brackets like [column_name].\",\n\t\t\t\t\"default-meaning\": \"\"\n\t\t\t},\n\t\t\t\"size\": {\n\t\t\t\t\"css\": \"text-size\",\n\t\t\t\t\"type\": \"float\",\n\t\t\t\t\"expression\": true,\n\t\t\t\t\"default-value\": 10,\n\t\t\t\t\"doc\": \"Text size in pixels.\",\n\t\t\t\t\"default-meaning\": \"Font size of 10 will be used to render text.\"\n\t\t\t},\n\t\t\t\"fill\": {\n\t\t\t\t\"css\": \"text-fill\",\n\t\t\t\t\"type\": \"color\",\n\t\t\t\t\"expression\": true,\n\t\t\t\t\"doc\": \"Specifies the color for the text.\",\n\t\t\t\t\"default-value\": \"black\",\n\t\t\t\t\"default-meaning\": \"The text will be rendered black.\"\n\t\t\t},\n\t\t\t\"opacity\": {\n\t\t\t\t\"css\": \"text-opacity\",\n\t\t\t\t\"doc\": \"A number from 0 to 1 specifying the opacity for the text.\",\n\t\t\t\t\"default-value\": 1,\n\t\t\t\t\"default-meaning\": \"Fully opaque\",\n\t\t\t\t\"expression\": true,\n\t\t\t\t\"type\": \"float\"\n\t\t\t}\n\t\t}\n\t},\n\t\"colors\": {\n\t\t\"aliceblue\": [\n\t\t\t240,\n\t\t\t248,\n\t\t\t255\n\t\t],\n\t\t\"antiquewhite\": [\n\t\t\t250,\n\t\t\t235,\n\t\t\t215\n\t\t],\n\t\t\"aqua\": [\n\t\t\t0,\n\t\t\t255,\n\t\t\t255\n\t\t],\n\t\t\"aquamarine\": [\n\t\t\t127,\n\t\t\t255,\n\t\t\t212\n\t\t],\n\t\t\"azure\": [\n\t\t\t240,\n\t\t\t255,\n\t\t\t255\n\t\t],\n\t\t\"beige\": [\n\t\t\t245,\n\t\t\t245,\n\t\t\t220\n\t\t],\n\t\t\"bisque\": [\n\t\t\t255,\n\t\t\t228,\n\t\t\t196\n\t\t],\n\t\t\"black\": [\n\t\t\t0,\n\t\t\t0,\n\t\t\t0\n\t\t],\n\t\t\"blanchedalmond\": [\n\t\t\t255,\n\t\t\t235,\n\t\t\t205\n\t\t],\n\t\t\"blue\": [\n\t\t\t0,\n\t\t\t0,\n\t\t\t255\n\t\t],\n\t\t\"blueviolet\": [\n\t\t\t138,\n\t\t\t43,\n\t\t\t226\n\t\t],\n\t\t\"brown\": [\n\t\t\t165,\n\t\t\t42,\n\t\t\t42\n\t\t],\n\t\t\"burlywood\": [\n\t\t\t222,\n\t\t\t184,\n\t\t\t135\n\t\t],\n\t\t\"cadetblue\": [\n\t\t\t95,\n\t\t\t158,\n\t\t\t160\n\t\t],\n\t\t\"chartreuse\": [\n\t\t\t127,\n\t\t\t255,\n\t\t\t0\n\t\t],\n\t\t\"chocolate\": [\n\t\t\t210,\n\t\t\t105,\n\t\t\t30\n\t\t],\n\t\t\"coral\": [\n\t\t\t255,\n\t\t\t127,\n\t\t\t80\n\t\t],\n\t\t\"cornflowerblue\": [\n\t\t\t100,\n\t\t\t149,\n\t\t\t237\n\t\t],\n\t\t\"cornsilk\": [\n\t\t\t255,\n\t\t\t248,\n\t\t\t220\n\t\t],\n\t\t\"crimson\": [\n\t\t\t220,\n\t\t\t20,\n\t\t\t60\n\t\t],\n\t\t\"cyan\": [\n\t\t\t0,\n\t\t\t255,\n\t\t\t255\n\t\t],\n\t\t\"darkblue\": [\n\t\t\t0,\n\t\t\t0,\n\t\t\t139\n\t\t],\n\t\t\"darkcyan\": [\n\t\t\t0,\n\t\t\t139,\n\t\t\t139\n\t\t],\n\t\t\"darkgoldenrod\": [\n\t\t\t184,\n\t\t\t134,\n\t\t\t11\n\t\t],\n\t\t\"darkgray\": [\n\t\t\t169,\n\t\t\t169,\n\t\t\t169\n\t\t],\n\t\t\"darkgreen\": [\n\t\t\t0,\n\t\t\t100,\n\t\t\t0\n\t\t],\n\t\t\"darkgrey\": [\n\t\t\t169,\n\t\t\t169,\n\t\t\t169\n\t\t],\n\t\t\"darkkhaki\": [\n\t\t\t189,\n\t\t\t183,\n\t\t\t107\n\t\t],\n\t\t\"darkmagenta\": [\n\t\t\t139,\n\t\t\t0,\n\t\t\t139\n\t\t],\n\t\t\"darkolivegreen\": [\n\t\t\t85,\n\t\t\t107,\n\t\t\t47\n\t\t],\n\t\t\"darkorange\": [\n\t\t\t255,\n\t\t\t140,\n\t\t\t0\n\t\t],\n\t\t\"darkorchid\": [\n\t\t\t153,\n\t\t\t50,\n\t\t\t204\n\t\t],\n\t\t\"darkred\": [\n\t\t\t139,\n\t\t\t0,\n\t\t\t0\n\t\t],\n\t\t\"darksalmon\": [\n\t\t\t233,\n\t\t\t150,\n\t\t\t122\n\t\t],\n\t\t\"darkseagreen\": [\n\t\t\t143,\n\t\t\t188,\n\t\t\t143\n\t\t],\n\t\t\"darkslateblue\": [\n\t\t\t72,\n\t\t\t61,\n\t\t\t139\n\t\t],\n\t\t\"darkslategrey\": [\n\t\t\t47,\n\t\t\t79,\n\t\t\t79\n\t\t],\n\t\t\"darkturquoise\": [\n\t\t\t0,\n\t\t\t206,\n\t\t\t209\n\t\t],\n\t\t\"darkviolet\": [\n\t\t\t148,\n\t\t\t0,\n\t\t\t211\n\t\t],\n\t\t\"deeppink\": [\n\t\t\t255,\n\t\t\t20,\n\t\t\t147\n\t\t],\n\t\t\"deepskyblue\": [\n\t\t\t0,\n\t\t\t191,\n\t\t\t255\n\t\t],\n\t\t\"dimgray\": [\n\t\t\t105,\n\t\t\t105,\n\t\t\t105\n\t\t],\n\t\t\"dimgrey\": [\n\t\t\t105,\n\t\t\t105,\n\t\t\t105\n\t\t],\n\t\t\"dodgerblue\": [\n\t\t\t30,\n\t\t\t144,\n\t\t\t255\n\t\t],\n\t\t\"firebrick\": [\n\t\t\t178,\n\t\t\t34,\n\t\t\t34\n\t\t],\n\t\t\"floralwhite\": [\n\t\t\t255,\n\t\t\t250,\n\t\t\t240\n\t\t],\n\t\t\"forestgreen\": [\n\t\t\t34,\n\t\t\t139,\n\t\t\t34\n\t\t],\n\t\t\"fuchsia\": [\n\t\t\t255,\n\t\t\t0,\n\t\t\t255\n\t\t],\n\t\t\"gainsboro\": [\n\t\t\t220,\n\t\t\t220,\n\t\t\t220\n\t\t],\n\t\t\"ghostwhite\": [\n\t\t\t248,\n\t\t\t248,\n\t\t\t255\n\t\t],\n\t\t\"gold\": [\n\t\t\t255,\n\t\t\t215,\n\t\t\t0\n\t\t],\n\t\t\"goldenrod\": [\n\t\t\t218,\n\t\t\t165,\n\t\t\t32\n\t\t],\n\t\t\"gray\": [\n\t\t\t128,\n\t\t\t128,\n\t\t\t128\n\t\t],\n\t\t\"grey\": [\n\t\t\t128,\n\t\t\t128,\n\t\t\t128\n\t\t],\n\t\t\"green\": [\n\t\t\t0,\n\t\t\t128,\n\t\t\t0\n\t\t],\n\t\t\"greenyellow\": [\n\t\t\t173,\n\t\t\t255,\n\t\t\t47\n\t\t],\n\t\t\"honeydew\": [\n\t\t\t240,\n\t\t\t255,\n\t\t\t240\n\t\t],\n\t\t\"hotpink\": [\n\t\t\t255,\n\t\t\t105,\n\t\t\t180\n\t\t],\n\t\t\"indianred\": [\n\t\t\t205,\n\t\t\t92,\n\t\t\t92\n\t\t],\n\t\t\"indigo\": [\n\t\t\t75,\n\t\t\t0,\n\t\t\t130\n\t\t],\n\t\t\"ivory\": [\n\t\t\t255,\n\t\t\t255,\n\t\t\t240\n\t\t],\n\t\t\"khaki\": [\n\t\t\t240,\n\t\t\t230,\n\t\t\t140\n\t\t],\n\t\t\"lavender\": [\n\t\t\t230,\n\t\t\t230,\n\t\t\t250\n\t\t],\n\t\t\"lavenderblush\": [\n\t\t\t255,\n\t\t\t240,\n\t\t\t245\n\t\t],\n\t\t\"lawngreen\": [\n\t\t\t124,\n\t\t\t252,\n\t\t\t0\n\t\t],\n\t\t\"lemonchiffon\": [\n\t\t\t255,\n\t\t\t250,\n\t\t\t205\n\t\t],\n\t\t\"lightblue\": [\n\t\t\t173,\n\t\t\t216,\n\t\t\t230\n\t\t],\n\t\t\"lightcoral\": [\n\t\t\t240,\n\t\t\t128,\n\t\t\t128\n\t\t],\n\t\t\"lightcyan\": [\n\t\t\t224,\n\t\t\t255,\n\t\t\t255\n\t\t],\n\t\t\"lightgoldenrodyellow\": [\n\t\t\t250,\n\t\t\t250,\n\t\t\t210\n\t\t],\n\t\t\"lightgray\": [\n\t\t\t211,\n\t\t\t211,\n\t\t\t211\n\t\t],\n\t\t\"lightgreen\": [\n\t\t\t144,\n\t\t\t238,\n\t\t\t144\n\t\t],\n\t\t\"lightgrey\": [\n\t\t\t211,\n\t\t\t211,\n\t\t\t211\n\t\t],\n\t\t\"lightpink\": [\n\t\t\t255,\n\t\t\t182,\n\t\t\t193\n\t\t],\n\t\t\"lightsalmon\": [\n\t\t\t255,\n\t\t\t160,\n\t\t\t122\n\t\t],\n\t\t\"lightseagreen\": [\n\t\t\t32,\n\t\t\t178,\n\t\t\t170\n\t\t],\n\t\t\"lightskyblue\": [\n\t\t\t135,\n\t\t\t206,\n\t\t\t250\n\t\t],\n\t\t\"lightslategray\": [\n\t\t\t119,\n\t\t\t136,\n\t\t\t153\n\t\t],\n\t\t\"lightslategrey\": [\n\t\t\t119,\n\t\t\t136,\n\t\t\t153\n\t\t],\n\t\t\"lightsteelblue\": [\n\t\t\t176,\n\t\t\t196,\n\t\t\t222\n\t\t],\n\t\t\"lightyellow\": [\n\t\t\t255,\n\t\t\t255,\n\t\t\t224\n\t\t],\n\t\t\"lime\": [\n\t\t\t0,\n\t\t\t255,\n\t\t\t0\n\t\t],\n\t\t\"limegreen\": [\n\t\t\t50,\n\t\t\t205,\n\t\t\t50\n\t\t],\n\t\t\"linen\": [\n\t\t\t250,\n\t\t\t240,\n\t\t\t230\n\t\t],\n\t\t\"magenta\": [\n\t\t\t255,\n\t\t\t0,\n\t\t\t255\n\t\t],\n\t\t\"maroon\": [\n\t\t\t128,\n\t\t\t0,\n\t\t\t0\n\t\t],\n\t\t\"mediumaquamarine\": [\n\t\t\t102,\n\t\t\t205,\n\t\t\t170\n\t\t],\n\t\t\"mediumblue\": [\n\t\t\t0,\n\t\t\t0,\n\t\t\t205\n\t\t],\n\t\t\"mediumorchid\": [\n\t\t\t186,\n\t\t\t85,\n\t\t\t211\n\t\t],\n\t\t\"mediumpurple\": [\n\t\t\t147,\n\t\t\t112,\n\t\t\t219\n\t\t],\n\t\t\"mediumseagreen\": [\n\t\t\t60,\n\t\t\t179,\n\t\t\t113\n\t\t],\n\t\t\"mediumslateblue\": [\n\t\t\t123,\n\t\t\t104,\n\t\t\t238\n\t\t],\n\t\t\"mediumspringgreen\": [\n\t\t\t0,\n\t\t\t250,\n\t\t\t154\n\t\t],\n\t\t\"mediumturquoise\": [\n\t\t\t72,\n\t\t\t209,\n\t\t\t204\n\t\t],\n\t\t\"mediumvioletred\": [\n\t\t\t199,\n\t\t\t21,\n\t\t\t133\n\t\t],\n\t\t\"midnightblue\": [\n\t\t\t25,\n\t\t\t25,\n\t\t\t112\n\t\t],\n\t\t\"mintcream\": [\n\t\t\t245,\n\t\t\t255,\n\t\t\t250\n\t\t],\n\t\t\"mistyrose\": [\n\t\t\t255,\n\t\t\t228,\n\t\t\t225\n\t\t],\n\t\t\"moccasin\": [\n\t\t\t255,\n\t\t\t228,\n\t\t\t181\n\t\t],\n\t\t\"navajowhite\": [\n\t\t\t255,\n\t\t\t222,\n\t\t\t173\n\t\t],\n\t\t\"navy\": [\n\t\t\t0,\n\t\t\t0,\n\t\t\t128\n\t\t],\n\t\t\"oldlace\": [\n\t\t\t253,\n\t\t\t245,\n\t\t\t230\n\t\t],\n\t\t\"olive\": [\n\t\t\t128,\n\t\t\t128,\n\t\t\t0\n\t\t],\n\t\t\"olivedrab\": [\n\t\t\t107,\n\t\t\t142,\n\t\t\t35\n\t\t],\n\t\t\"orange\": [\n\t\t\t255,\n\t\t\t165,\n\t\t\t0\n\t\t],\n\t\t\"orangered\": [\n\t\t\t255,\n\t\t\t69,\n\t\t\t0\n\t\t],\n\t\t\"orchid\": [\n\t\t\t218,\n\t\t\t112,\n\t\t\t214\n\t\t],\n\t\t\"palegoldenrod\": [\n\t\t\t238,\n\t\t\t232,\n\t\t\t170\n\t\t],\n\t\t\"palegreen\": [\n\t\t\t152,\n\t\t\t251,\n\t\t\t152\n\t\t],\n\t\t\"paleturquoise\": [\n\t\t\t175,\n\t\t\t238,\n\t\t\t238\n\t\t],\n\t\t\"palevioletred\": [\n\t\t\t219,\n\t\t\t112,\n\t\t\t147\n\t\t],\n\t\t\"papayawhip\": [\n\t\t\t255,\n\t\t\t239,\n\t\t\t213\n\t\t],\n\t\t\"peachpuff\": [\n\t\t\t255,\n\t\t\t218,\n\t\t\t185\n\t\t],\n\t\t\"peru\": [\n\t\t\t205,\n\t\t\t133,\n\t\t\t63\n\t\t],\n\t\t\"pink\": [\n\t\t\t255,\n\t\t\t192,\n\t\t\t203\n\t\t],\n\t\t\"plum\": [\n\t\t\t221,\n\t\t\t160,\n\t\t\t221\n\t\t],\n\t\t\"powderblue\": [\n\t\t\t176,\n\t\t\t224,\n\t\t\t230\n\t\t],\n\t\t\"purple\": [\n\t\t\t128,\n\t\t\t0,\n\t\t\t128\n\t\t],\n\t\t\"red\": [\n\t\t\t255,\n\t\t\t0,\n\t\t\t0\n\t\t],\n\t\t\"rosybrown\": [\n\t\t\t188,\n\t\t\t143,\n\t\t\t143\n\t\t],\n\t\t\"royalblue\": [\n\t\t\t65,\n\t\t\t105,\n\t\t\t225\n\t\t],\n\t\t\"saddlebrown\": [\n\t\t\t139,\n\t\t\t69,\n\t\t\t19\n\t\t],\n\t\t\"salmon\": [\n\t\t\t250,\n\t\t\t128,\n\t\t\t114\n\t\t],\n\t\t\"sandybrown\": [\n\t\t\t244,\n\t\t\t164,\n\t\t\t96\n\t\t],\n\t\t\"seagreen\": [\n\t\t\t46,\n\t\t\t139,\n\t\t\t87\n\t\t],\n\t\t\"seashell\": [\n\t\t\t255,\n\t\t\t245,\n\t\t\t238\n\t\t],\n\t\t\"sienna\": [\n\t\t\t160,\n\t\t\t82,\n\t\t\t45\n\t\t],\n\t\t\"silver\": [\n\t\t\t192,\n\t\t\t192,\n\t\t\t192\n\t\t],\n\t\t\"skyblue\": [\n\t\t\t135,\n\t\t\t206,\n\t\t\t235\n\t\t],\n\t\t\"slateblue\": [\n\t\t\t106,\n\t\t\t90,\n\t\t\t205\n\t\t],\n\t\t\"slategray\": [\n\t\t\t112,\n\t\t\t128,\n\t\t\t144\n\t\t],\n\t\t\"slategrey\": [\n\t\t\t112,\n\t\t\t128,\n\t\t\t144\n\t\t],\n\t\t\"snow\": [\n\t\t\t255,\n\t\t\t250,\n\t\t\t250\n\t\t],\n\t\t\"springgreen\": [\n\t\t\t0,\n\t\t\t255,\n\t\t\t127\n\t\t],\n\t\t\"steelblue\": [\n\t\t\t70,\n\t\t\t130,\n\t\t\t180\n\t\t],\n\t\t\"tan\": [\n\t\t\t210,\n\t\t\t180,\n\t\t\t140\n\t\t],\n\t\t\"teal\": [\n\t\t\t0,\n\t\t\t128,\n\t\t\t128\n\t\t],\n\t\t\"thistle\": [\n\t\t\t216,\n\t\t\t191,\n\t\t\t216\n\t\t],\n\t\t\"tomato\": [\n\t\t\t255,\n\t\t\t99,\n\t\t\t71\n\t\t],\n\t\t\"turquoise\": [\n\t\t\t64,\n\t\t\t224,\n\t\t\t208\n\t\t],\n\t\t\"violet\": [\n\t\t\t238,\n\t\t\t130,\n\t\t\t238\n\t\t],\n\t\t\"wheat\": [\n\t\t\t245,\n\t\t\t222,\n\t\t\t179\n\t\t],\n\t\t\"white\": [\n\t\t\t255,\n\t\t\t255,\n\t\t\t255\n\t\t],\n\t\t\"whitesmoke\": [\n\t\t\t245,\n\t\t\t245,\n\t\t\t245\n\t\t],\n\t\t\"yellow\": [\n\t\t\t255,\n\t\t\t255,\n\t\t\t0\n\t\t],\n\t\t\"yellowgreen\": [\n\t\t\t154,\n\t\t\t205,\n\t\t\t50\n\t\t],\n\t\t\"transparent\": [\n\t\t\t0,\n\t\t\t0,\n\t\t\t0,\n\t\t\t0\n\t\t]\n\t}\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 194 */
/* no static exports found */
/* all exports used */
/*!***********************************************!*\
  !*** ./~/util/~/inherits/inherits_browser.js ***!
  \***********************************************/
/***/ (function(module, exports) {

eval("if (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    ctor.prototype = Object.create(superCtor.prototype, {\n      constructor: {\n        value: ctor,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    var TempCtor = function () {}\n    TempCtor.prototype = superCtor.prototype\n    ctor.prototype = new TempCtor()\n    ctor.prototype.constructor = ctor\n  }\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTk0LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi91dGlsL34vaW5oZXJpdHMvaW5oZXJpdHNfYnJvd3Nlci5qcz9hYmE1Il0sInNvdXJjZXNDb250ZW50IjpbImlmICh0eXBlb2YgT2JqZWN0LmNyZWF0ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAvLyBpbXBsZW1lbnRhdGlvbiBmcm9tIHN0YW5kYXJkIG5vZGUuanMgJ3V0aWwnIG1vZHVsZVxuICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGluaGVyaXRzKGN0b3IsIHN1cGVyQ3Rvcikge1xuICAgIGN0b3Iuc3VwZXJfID0gc3VwZXJDdG9yXG4gICAgY3Rvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ3Rvci5wcm90b3R5cGUsIHtcbiAgICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICAgIHZhbHVlOiBjdG9yLFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgfVxuICAgIH0pO1xuICB9O1xufSBlbHNlIHtcbiAgLy8gb2xkIHNjaG9vbCBzaGltIGZvciBvbGQgYnJvd3NlcnNcbiAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpbmhlcml0cyhjdG9yLCBzdXBlckN0b3IpIHtcbiAgICBjdG9yLnN1cGVyXyA9IHN1cGVyQ3RvclxuICAgIHZhciBUZW1wQ3RvciA9IGZ1bmN0aW9uICgpIHt9XG4gICAgVGVtcEN0b3IucHJvdG90eXBlID0gc3VwZXJDdG9yLnByb3RvdHlwZVxuICAgIGN0b3IucHJvdG90eXBlID0gbmV3IFRlbXBDdG9yKClcbiAgICBjdG9yLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGN0b3JcbiAgfVxufVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3V0aWwvfi9pbmhlcml0cy9pbmhlcml0c19icm93c2VyLmpzXG4vLyBtb2R1bGUgaWQgPSAxOTRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 195 */
/* no static exports found */
/* all exports used */
/*!*******************************************!*\
  !*** ./~/util/support/isBufferBrowser.js ***!
  \*******************************************/
/***/ (function(module, exports) {

eval("module.exports = function isBuffer(arg) {\n  return arg && typeof arg === 'object'\n    && typeof arg.copy === 'function'\n    && typeof arg.fill === 'function'\n    && typeof arg.readUInt8 === 'function';\n}//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTk1LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi91dGlsL3N1cHBvcnQvaXNCdWZmZXJCcm93c2VyLmpzPzg1OTYiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0J1ZmZlcihhcmcpIHtcbiAgcmV0dXJuIGFyZyAmJiB0eXBlb2YgYXJnID09PSAnb2JqZWN0J1xuICAgICYmIHR5cGVvZiBhcmcuY29weSA9PT0gJ2Z1bmN0aW9uJ1xuICAgICYmIHR5cGVvZiBhcmcuZmlsbCA9PT0gJ2Z1bmN0aW9uJ1xuICAgICYmIHR5cGVvZiBhcmcucmVhZFVJbnQ4ID09PSAnZnVuY3Rpb24nO1xufVxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi91dGlsL3N1cHBvcnQvaXNCdWZmZXJCcm93c2VyLmpzXG4vLyBtb2R1bGUgaWQgPSAxOTVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=");

/***/ })
/******/ ])));
},{}],43:[function(_dereq_,module,exports){
// Generated by CoffeeScript 1.12.4
var Dumper, Inline, Utils;

Utils = _dereq_('./Utils');

Inline = _dereq_('./Inline');

Dumper = (function() {
  function Dumper() {}

  Dumper.indentation = 4;

  Dumper.prototype.dump = function(input, inline, indent, exceptionOnInvalidType, objectEncoder) {
    var i, key, len, output, prefix, value, willBeInlined;
    if (inline == null) {
      inline = 0;
    }
    if (indent == null) {
      indent = 0;
    }
    if (exceptionOnInvalidType == null) {
      exceptionOnInvalidType = false;
    }
    if (objectEncoder == null) {
      objectEncoder = null;
    }
    output = '';
    prefix = (indent ? Utils.strRepeat(' ', indent) : '');
    if (inline <= 0 || typeof input !== 'object' || input instanceof Date || Utils.isEmpty(input)) {
      output += prefix + Inline.dump(input, exceptionOnInvalidType, objectEncoder);
    } else {
      if (input instanceof Array) {
        for (i = 0, len = input.length; i < len; i++) {
          value = input[i];
          willBeInlined = inline - 1 <= 0 || typeof value !== 'object' || Utils.isEmpty(value);
          output += prefix + '-' + (willBeInlined ? ' ' : "\n") + this.dump(value, inline - 1, (willBeInlined ? 0 : indent + this.indentation), exceptionOnInvalidType, objectEncoder) + (willBeInlined ? "\n" : '');
        }
      } else {
        for (key in input) {
          value = input[key];
          willBeInlined = inline - 1 <= 0 || typeof value !== 'object' || Utils.isEmpty(value);
          output += prefix + Inline.dump(key, exceptionOnInvalidType, objectEncoder) + ':' + (willBeInlined ? ' ' : "\n") + this.dump(value, inline - 1, (willBeInlined ? 0 : indent + this.indentation), exceptionOnInvalidType, objectEncoder) + (willBeInlined ? "\n" : '');
        }
      }
    }
    return output;
  };

  return Dumper;

})();

module.exports = Dumper;

},{"./Inline":48,"./Utils":52}],44:[function(_dereq_,module,exports){
// Generated by CoffeeScript 1.12.4
var Escaper, Pattern;

Pattern = _dereq_('./Pattern');

Escaper = (function() {
  var ch;

  function Escaper() {}

  Escaper.LIST_ESCAPEES = ['\\', '\\\\', '\\"', '"', "\x00", "\x01", "\x02", "\x03", "\x04", "\x05", "\x06", "\x07", "\x08", "\x09", "\x0a", "\x0b", "\x0c", "\x0d", "\x0e", "\x0f", "\x10", "\x11", "\x12", "\x13", "\x14", "\x15", "\x16", "\x17", "\x18", "\x19", "\x1a", "\x1b", "\x1c", "\x1d", "\x1e", "\x1f", (ch = String.fromCharCode)(0x0085), ch(0x00A0), ch(0x2028), ch(0x2029)];

  Escaper.LIST_ESCAPED = ['\\\\', '\\"', '\\"', '\\"', "\\0", "\\x01", "\\x02", "\\x03", "\\x04", "\\x05", "\\x06", "\\a", "\\b", "\\t", "\\n", "\\v", "\\f", "\\r", "\\x0e", "\\x0f", "\\x10", "\\x11", "\\x12", "\\x13", "\\x14", "\\x15", "\\x16", "\\x17", "\\x18", "\\x19", "\\x1a", "\\e", "\\x1c", "\\x1d", "\\x1e", "\\x1f", "\\N", "\\_", "\\L", "\\P"];

  Escaper.MAPPING_ESCAPEES_TO_ESCAPED = (function() {
    var i, j, mapping, ref;
    mapping = {};
    for (i = j = 0, ref = Escaper.LIST_ESCAPEES.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
      mapping[Escaper.LIST_ESCAPEES[i]] = Escaper.LIST_ESCAPED[i];
    }
    return mapping;
  })();

  Escaper.PATTERN_CHARACTERS_TO_ESCAPE = new Pattern('[\\x00-\\x1f]|\xc2\x85|\xc2\xa0|\xe2\x80\xa8|\xe2\x80\xa9');

  Escaper.PATTERN_MAPPING_ESCAPEES = new Pattern(Escaper.LIST_ESCAPEES.join('|').split('\\').join('\\\\'));

  Escaper.PATTERN_SINGLE_QUOTING = new Pattern('[\\s\'":{}[\\],&*#?]|^[-?|<>=!%@`]');

  Escaper.requiresDoubleQuoting = function(value) {
    return this.PATTERN_CHARACTERS_TO_ESCAPE.test(value);
  };

  Escaper.escapeWithDoubleQuotes = function(value) {
    var result;
    result = this.PATTERN_MAPPING_ESCAPEES.replace(value, (function(_this) {
      return function(str) {
        return _this.MAPPING_ESCAPEES_TO_ESCAPED[str];
      };
    })(this));
    return '"' + result + '"';
  };

  Escaper.requiresSingleQuoting = function(value) {
    return this.PATTERN_SINGLE_QUOTING.test(value);
  };

  Escaper.escapeWithSingleQuotes = function(value) {
    return "'" + value.replace(/'/g, "''") + "'";
  };

  return Escaper;

})();

module.exports = Escaper;

},{"./Pattern":50}],45:[function(_dereq_,module,exports){
// Generated by CoffeeScript 1.12.4
var DumpException,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

DumpException = (function(superClass) {
  extend(DumpException, superClass);

  function DumpException(message, parsedLine, snippet) {
    this.message = message;
    this.parsedLine = parsedLine;
    this.snippet = snippet;
  }

  DumpException.prototype.toString = function() {
    if ((this.parsedLine != null) && (this.snippet != null)) {
      return '<DumpException> ' + this.message + ' (line ' + this.parsedLine + ': \'' + this.snippet + '\')';
    } else {
      return '<DumpException> ' + this.message;
    }
  };

  return DumpException;

})(Error);

module.exports = DumpException;

},{}],46:[function(_dereq_,module,exports){
// Generated by CoffeeScript 1.12.4
var ParseException,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ParseException = (function(superClass) {
  extend(ParseException, superClass);

  function ParseException(message, parsedLine, snippet) {
    this.message = message;
    this.parsedLine = parsedLine;
    this.snippet = snippet;
  }

  ParseException.prototype.toString = function() {
    if ((this.parsedLine != null) && (this.snippet != null)) {
      return '<ParseException> ' + this.message + ' (line ' + this.parsedLine + ': \'' + this.snippet + '\')';
    } else {
      return '<ParseException> ' + this.message;
    }
  };

  return ParseException;

})(Error);

module.exports = ParseException;

},{}],47:[function(_dereq_,module,exports){
// Generated by CoffeeScript 1.12.4
var ParseMore,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ParseMore = (function(superClass) {
  extend(ParseMore, superClass);

  function ParseMore(message, parsedLine, snippet) {
    this.message = message;
    this.parsedLine = parsedLine;
    this.snippet = snippet;
  }

  ParseMore.prototype.toString = function() {
    if ((this.parsedLine != null) && (this.snippet != null)) {
      return '<ParseMore> ' + this.message + ' (line ' + this.parsedLine + ': \'' + this.snippet + '\')';
    } else {
      return '<ParseMore> ' + this.message;
    }
  };

  return ParseMore;

})(Error);

module.exports = ParseMore;

},{}],48:[function(_dereq_,module,exports){
// Generated by CoffeeScript 1.12.4
var DumpException, Escaper, Inline, ParseException, ParseMore, Pattern, Unescaper, Utils,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

Pattern = _dereq_('./Pattern');

Unescaper = _dereq_('./Unescaper');

Escaper = _dereq_('./Escaper');

Utils = _dereq_('./Utils');

ParseException = _dereq_('./Exception/ParseException');

ParseMore = _dereq_('./Exception/ParseMore');

DumpException = _dereq_('./Exception/DumpException');

Inline = (function() {
  function Inline() {}

  Inline.REGEX_QUOTED_STRING = '(?:"(?:[^"\\\\]*(?:\\\\.[^"\\\\]*)*)"|\'(?:[^\']*(?:\'\'[^\']*)*)\')';

  Inline.PATTERN_TRAILING_COMMENTS = new Pattern('^\\s*#.*$');

  Inline.PATTERN_QUOTED_SCALAR = new Pattern('^' + Inline.REGEX_QUOTED_STRING);

  Inline.PATTERN_THOUSAND_NUMERIC_SCALAR = new Pattern('^(-|\\+)?[0-9,]+(\\.[0-9]+)?$');

  Inline.PATTERN_SCALAR_BY_DELIMITERS = {};

  Inline.settings = {};

  Inline.configure = function(exceptionOnInvalidType, objectDecoder) {
    if (exceptionOnInvalidType == null) {
      exceptionOnInvalidType = null;
    }
    if (objectDecoder == null) {
      objectDecoder = null;
    }
    this.settings.exceptionOnInvalidType = exceptionOnInvalidType;
    this.settings.objectDecoder = objectDecoder;
  };

  Inline.parse = function(value, exceptionOnInvalidType, objectDecoder) {
    var context, result;
    if (exceptionOnInvalidType == null) {
      exceptionOnInvalidType = false;
    }
    if (objectDecoder == null) {
      objectDecoder = null;
    }
    this.settings.exceptionOnInvalidType = exceptionOnInvalidType;
    this.settings.objectDecoder = objectDecoder;
    if (value == null) {
      return '';
    }
    value = Utils.trim(value);
    if (0 === value.length) {
      return '';
    }
    context = {
      exceptionOnInvalidType: exceptionOnInvalidType,
      objectDecoder: objectDecoder,
      i: 0
    };
    switch (value.charAt(0)) {
      case '[':
        result = this.parseSequence(value, context);
        ++context.i;
        break;
      case '{':
        result = this.parseMapping(value, context);
        ++context.i;
        break;
      default:
        result = this.parseScalar(value, null, ['"', "'"], context);
    }
    if (this.PATTERN_TRAILING_COMMENTS.replace(value.slice(context.i), '') !== '') {
      throw new ParseException('Unexpected characters near "' + value.slice(context.i) + '".');
    }
    return result;
  };

  Inline.dump = function(value, exceptionOnInvalidType, objectEncoder) {
    var ref, result, type;
    if (exceptionOnInvalidType == null) {
      exceptionOnInvalidType = false;
    }
    if (objectEncoder == null) {
      objectEncoder = null;
    }
    if (value == null) {
      return 'null';
    }
    type = typeof value;
    if (type === 'object') {
      if (value instanceof Date) {
        return value.toISOString();
      } else if (objectEncoder != null) {
        result = objectEncoder(value);
        if (typeof result === 'string' || (result != null)) {
          return result;
        }
      }
      return this.dumpObject(value);
    }
    if (type === 'boolean') {
      return (value ? 'true' : 'false');
    }
    if (Utils.isDigits(value)) {
      return (type === 'string' ? "'" + value + "'" : String(parseInt(value)));
    }
    if (Utils.isNumeric(value)) {
      return (type === 'string' ? "'" + value + "'" : String(parseFloat(value)));
    }
    if (type === 'number') {
      return (value === 2e308 ? '.Inf' : (value === -2e308 ? '-.Inf' : (isNaN(value) ? '.NaN' : value)));
    }
    if (Escaper.requiresDoubleQuoting(value)) {
      return Escaper.escapeWithDoubleQuotes(value);
    }
    if (Escaper.requiresSingleQuoting(value)) {
      return Escaper.escapeWithSingleQuotes(value);
    }
    if ('' === value) {
      return '""';
    }
    if (Utils.PATTERN_DATE.test(value)) {
      return "'" + value + "'";
    }
    if ((ref = value.toLowerCase()) === 'null' || ref === '~' || ref === 'true' || ref === 'false') {
      return "'" + value + "'";
    }
    return value;
  };

  Inline.dumpObject = function(value, exceptionOnInvalidType, objectSupport) {
    var j, key, len1, output, val;
    if (objectSupport == null) {
      objectSupport = null;
    }
    if (value instanceof Array) {
      output = [];
      for (j = 0, len1 = value.length; j < len1; j++) {
        val = value[j];
        output.push(this.dump(val));
      }
      return '[' + output.join(', ') + ']';
    } else {
      output = [];
      for (key in value) {
        val = value[key];
        output.push(this.dump(key) + ': ' + this.dump(val));
      }
      return '{' + output.join(', ') + '}';
    }
  };

  Inline.parseScalar = function(scalar, delimiters, stringDelimiters, context, evaluate) {
    var i, joinedDelimiters, match, output, pattern, ref, ref1, strpos, tmp;
    if (delimiters == null) {
      delimiters = null;
    }
    if (stringDelimiters == null) {
      stringDelimiters = ['"', "'"];
    }
    if (context == null) {
      context = null;
    }
    if (evaluate == null) {
      evaluate = true;
    }
    if (context == null) {
      context = {
        exceptionOnInvalidType: this.settings.exceptionOnInvalidType,
        objectDecoder: this.settings.objectDecoder,
        i: 0
      };
    }
    i = context.i;
    if (ref = scalar.charAt(i), indexOf.call(stringDelimiters, ref) >= 0) {
      output = this.parseQuotedScalar(scalar, context);
      i = context.i;
      if (delimiters != null) {
        tmp = Utils.ltrim(scalar.slice(i), ' ');
        if (!(ref1 = tmp.charAt(0), indexOf.call(delimiters, ref1) >= 0)) {
          throw new ParseException('Unexpected characters (' + scalar.slice(i) + ').');
        }
      }
    } else {
      if (!delimiters) {
        output = scalar.slice(i);
        i += output.length;
        strpos = output.indexOf(' #');
        if (strpos !== -1) {
          output = Utils.rtrim(output.slice(0, strpos));
        }
      } else {
        joinedDelimiters = delimiters.join('|');
        pattern = this.PATTERN_SCALAR_BY_DELIMITERS[joinedDelimiters];
        if (pattern == null) {
          pattern = new Pattern('^(.+?)(' + joinedDelimiters + ')');
          this.PATTERN_SCALAR_BY_DELIMITERS[joinedDelimiters] = pattern;
        }
        if (match = pattern.exec(scalar.slice(i))) {
          output = match[1];
          i += output.length;
        } else {
          throw new ParseException('Malformed inline YAML string (' + scalar + ').');
        }
      }
      if (evaluate) {
        output = this.evaluateScalar(output, context);
      }
    }
    context.i = i;
    return output;
  };

  Inline.parseQuotedScalar = function(scalar, context) {
    var i, match, output;
    i = context.i;
    if (!(match = this.PATTERN_QUOTED_SCALAR.exec(scalar.slice(i)))) {
      throw new ParseMore('Malformed inline YAML string (' + scalar.slice(i) + ').');
    }
    output = match[0].substr(1, match[0].length - 2);
    if ('"' === scalar.charAt(i)) {
      output = Unescaper.unescapeDoubleQuotedString(output);
    } else {
      output = Unescaper.unescapeSingleQuotedString(output);
    }
    i += match[0].length;
    context.i = i;
    return output;
  };

  Inline.parseSequence = function(sequence, context) {
    var e, i, isQuoted, len, output, ref, value;
    output = [];
    len = sequence.length;
    i = context.i;
    i += 1;
    while (i < len) {
      context.i = i;
      switch (sequence.charAt(i)) {
        case '[':
          output.push(this.parseSequence(sequence, context));
          i = context.i;
          break;
        case '{':
          output.push(this.parseMapping(sequence, context));
          i = context.i;
          break;
        case ']':
          return output;
        case ',':
        case ' ':
        case "\n":
          break;
        default:
          isQuoted = ((ref = sequence.charAt(i)) === '"' || ref === "'");
          value = this.parseScalar(sequence, [',', ']'], ['"', "'"], context);
          i = context.i;
          if (!isQuoted && typeof value === 'string' && (value.indexOf(': ') !== -1 || value.indexOf(":\n") !== -1)) {
            try {
              value = this.parseMapping('{' + value + '}');
            } catch (error) {
              e = error;
            }
          }
          output.push(value);
          --i;
      }
      ++i;
    }
    throw new ParseMore('Malformed inline YAML string ' + sequence);
  };

  Inline.parseMapping = function(mapping, context) {
    var done, i, key, len, output, shouldContinueWhileLoop, value;
    output = {};
    len = mapping.length;
    i = context.i;
    i += 1;
    shouldContinueWhileLoop = false;
    while (i < len) {
      context.i = i;
      switch (mapping.charAt(i)) {
        case ' ':
        case ',':
        case "\n":
          ++i;
          context.i = i;
          shouldContinueWhileLoop = true;
          break;
        case '}':
          return output;
      }
      if (shouldContinueWhileLoop) {
        shouldContinueWhileLoop = false;
        continue;
      }
      key = this.parseScalar(mapping, [':', ' ', "\n"], ['"', "'"], context, false);
      i = context.i;
      done = false;
      while (i < len) {
        context.i = i;
        switch (mapping.charAt(i)) {
          case '[':
            value = this.parseSequence(mapping, context);
            i = context.i;
            if (output[key] === void 0) {
              output[key] = value;
            }
            done = true;
            break;
          case '{':
            value = this.parseMapping(mapping, context);
            i = context.i;
            if (output[key] === void 0) {
              output[key] = value;
            }
            done = true;
            break;
          case ':':
          case ' ':
          case "\n":
            break;
          default:
            value = this.parseScalar(mapping, [',', '}'], ['"', "'"], context);
            i = context.i;
            if (output[key] === void 0) {
              output[key] = value;
            }
            done = true;
            --i;
        }
        ++i;
        if (done) {
          break;
        }
      }
    }
    throw new ParseMore('Malformed inline YAML string ' + mapping);
  };

  Inline.evaluateScalar = function(scalar, context) {
    var cast, date, exceptionOnInvalidType, firstChar, firstSpace, firstWord, objectDecoder, raw, scalarLower, subValue, trimmedScalar;
    scalar = Utils.trim(scalar);
    scalarLower = scalar.toLowerCase();
    switch (scalarLower) {
      case 'null':
      case '':
      case '~':
        return null;
      case 'true':
        return true;
      case 'false':
        return false;
      case '.inf':
        return 2e308;
      case '.nan':
        return 0/0;
      case '-.inf':
        return 2e308;
      default:
        firstChar = scalarLower.charAt(0);
        switch (firstChar) {
          case '!':
            firstSpace = scalar.indexOf(' ');
            if (firstSpace === -1) {
              firstWord = scalarLower;
            } else {
              firstWord = scalarLower.slice(0, firstSpace);
            }
            switch (firstWord) {
              case '!':
                if (firstSpace !== -1) {
                  return parseInt(this.parseScalar(scalar.slice(2)));
                }
                return null;
              case '!str':
                return Utils.ltrim(scalar.slice(4));
              case '!!str':
                return Utils.ltrim(scalar.slice(5));
              case '!!int':
                return parseInt(this.parseScalar(scalar.slice(5)));
              case '!!bool':
                return Utils.parseBoolean(this.parseScalar(scalar.slice(6)), false);
              case '!!float':
                return parseFloat(this.parseScalar(scalar.slice(7)));
              case '!!timestamp':
                return Utils.stringToDate(Utils.ltrim(scalar.slice(11)));
              default:
                if (context == null) {
                  context = {
                    exceptionOnInvalidType: this.settings.exceptionOnInvalidType,
                    objectDecoder: this.settings.objectDecoder,
                    i: 0
                  };
                }
                objectDecoder = context.objectDecoder, exceptionOnInvalidType = context.exceptionOnInvalidType;
                if (objectDecoder) {
                  trimmedScalar = Utils.rtrim(scalar);
                  firstSpace = trimmedScalar.indexOf(' ');
                  if (firstSpace === -1) {
                    return objectDecoder(trimmedScalar, null);
                  } else {
                    subValue = Utils.ltrim(trimmedScalar.slice(firstSpace + 1));
                    if (!(subValue.length > 0)) {
                      subValue = null;
                    }
                    return objectDecoder(trimmedScalar.slice(0, firstSpace), subValue);
                  }
                }
                if (exceptionOnInvalidType) {
                  throw new ParseException('Custom object support when parsing a YAML file has been disabled.');
                }
                return null;
            }
            break;
          case '0':
            if ('0x' === scalar.slice(0, 2)) {
              return Utils.hexDec(scalar);
            } else if (Utils.isDigits(scalar)) {
              return Utils.octDec(scalar);
            } else if (Utils.isNumeric(scalar)) {
              return parseFloat(scalar);
            } else {
              return scalar;
            }
            break;
          case '+':
            if (Utils.isDigits(scalar)) {
              raw = scalar;
              cast = parseInt(raw);
              if (raw === String(cast)) {
                return cast;
              } else {
                return raw;
              }
            } else if (Utils.isNumeric(scalar)) {
              return parseFloat(scalar);
            } else if (this.PATTERN_THOUSAND_NUMERIC_SCALAR.test(scalar)) {
              return parseFloat(scalar.replace(',', ''));
            }
            return scalar;
          case '-':
            if (Utils.isDigits(scalar.slice(1))) {
              if ('0' === scalar.charAt(1)) {
                return -Utils.octDec(scalar.slice(1));
              } else {
                raw = scalar.slice(1);
                cast = parseInt(raw);
                if (raw === String(cast)) {
                  return -cast;
                } else {
                  return -raw;
                }
              }
            } else if (Utils.isNumeric(scalar)) {
              return parseFloat(scalar);
            } else if (this.PATTERN_THOUSAND_NUMERIC_SCALAR.test(scalar)) {
              return parseFloat(scalar.replace(',', ''));
            }
            return scalar;
          default:
            if (date = Utils.stringToDate(scalar)) {
              return date;
            } else if (Utils.isNumeric(scalar)) {
              return parseFloat(scalar);
            } else if (this.PATTERN_THOUSAND_NUMERIC_SCALAR.test(scalar)) {
              return parseFloat(scalar.replace(',', ''));
            }
            return scalar;
        }
    }
  };

  return Inline;

})();

module.exports = Inline;

},{"./Escaper":44,"./Exception/DumpException":45,"./Exception/ParseException":46,"./Exception/ParseMore":47,"./Pattern":50,"./Unescaper":51,"./Utils":52}],49:[function(_dereq_,module,exports){
// Generated by CoffeeScript 1.12.4
var Inline, ParseException, ParseMore, Parser, Pattern, Utils;

Inline = _dereq_('./Inline');

Pattern = _dereq_('./Pattern');

Utils = _dereq_('./Utils');

ParseException = _dereq_('./Exception/ParseException');

ParseMore = _dereq_('./Exception/ParseMore');

Parser = (function() {
  Parser.prototype.PATTERN_FOLDED_SCALAR_ALL = new Pattern('^(?:(?<type>![^\\|>]*)\\s+)?(?<separator>\\||>)(?<modifiers>\\+|\\-|\\d+|\\+\\d+|\\-\\d+|\\d+\\+|\\d+\\-)?(?<comments> +#.*)?$');

  Parser.prototype.PATTERN_FOLDED_SCALAR_END = new Pattern('(?<separator>\\||>)(?<modifiers>\\+|\\-|\\d+|\\+\\d+|\\-\\d+|\\d+\\+|\\d+\\-)?(?<comments> +#.*)?$');

  Parser.prototype.PATTERN_SEQUENCE_ITEM = new Pattern('^\\-((?<leadspaces>\\s+)(?<value>.+?))?\\s*$');

  Parser.prototype.PATTERN_ANCHOR_VALUE = new Pattern('^&(?<ref>[^ ]+) *(?<value>.*)');

  Parser.prototype.PATTERN_COMPACT_NOTATION = new Pattern('^(?<key>' + Inline.REGEX_QUOTED_STRING + '|[^ \'"\\{\\[].*?) *\\:(\\s+(?<value>.+?))?\\s*$');

  Parser.prototype.PATTERN_MAPPING_ITEM = new Pattern('^(?<key>' + Inline.REGEX_QUOTED_STRING + '|[^ \'"\\[\\{].*?) *\\:(\\s+(?<value>.+?))?\\s*$');

  Parser.prototype.PATTERN_DECIMAL = new Pattern('\\d+');

  Parser.prototype.PATTERN_INDENT_SPACES = new Pattern('^ +');

  Parser.prototype.PATTERN_TRAILING_LINES = new Pattern('(\n*)$');

  Parser.prototype.PATTERN_YAML_HEADER = new Pattern('^\\%YAML[: ][\\d\\.]+.*\n', 'm');

  Parser.prototype.PATTERN_LEADING_COMMENTS = new Pattern('^(\\#.*?\n)+', 'm');

  Parser.prototype.PATTERN_DOCUMENT_MARKER_START = new Pattern('^\\-\\-\\-.*?\n', 'm');

  Parser.prototype.PATTERN_DOCUMENT_MARKER_END = new Pattern('^\\.\\.\\.\\s*$', 'm');

  Parser.prototype.PATTERN_FOLDED_SCALAR_BY_INDENTATION = {};

  Parser.prototype.CONTEXT_NONE = 0;

  Parser.prototype.CONTEXT_SEQUENCE = 1;

  Parser.prototype.CONTEXT_MAPPING = 2;

  function Parser(offset) {
    this.offset = offset != null ? offset : 0;
    this.lines = [];
    this.currentLineNb = -1;
    this.currentLine = '';
    this.refs = {};
  }

  Parser.prototype.parse = function(value, exceptionOnInvalidType, objectDecoder) {
    var alias, allowOverwrite, block, c, context, data, e, first, i, indent, isRef, j, k, key, l, lastKey, len, len1, len2, len3, lineCount, m, matches, mergeNode, n, name, parsed, parsedItem, parser, ref, ref1, ref2, refName, refValue, val, values;
    if (exceptionOnInvalidType == null) {
      exceptionOnInvalidType = false;
    }
    if (objectDecoder == null) {
      objectDecoder = null;
    }
    this.currentLineNb = -1;
    this.currentLine = '';
    this.lines = this.cleanup(value).split("\n");
    data = null;
    context = this.CONTEXT_NONE;
    allowOverwrite = false;
    while (this.moveToNextLine()) {
      if (this.isCurrentLineEmpty()) {
        continue;
      }
      if ("\t" === this.currentLine[0]) {
        throw new ParseException('A YAML file cannot contain tabs as indentation.', this.getRealCurrentLineNb() + 1, this.currentLine);
      }
      isRef = mergeNode = false;
      if (values = this.PATTERN_SEQUENCE_ITEM.exec(this.currentLine)) {
        if (this.CONTEXT_MAPPING === context) {
          throw new ParseException('You cannot define a sequence item when in a mapping');
        }
        context = this.CONTEXT_SEQUENCE;
        if (data == null) {
          data = [];
        }
        if ((values.value != null) && (matches = this.PATTERN_ANCHOR_VALUE.exec(values.value))) {
          isRef = matches.ref;
          values.value = matches.value;
        }
        if (!(values.value != null) || '' === Utils.trim(values.value, ' ') || Utils.ltrim(values.value, ' ').indexOf('#') === 0) {
          if (this.currentLineNb < this.lines.length - 1 && !this.isNextLineUnIndentedCollection()) {
            c = this.getRealCurrentLineNb() + 1;
            parser = new Parser(c);
            parser.refs = this.refs;
            data.push(parser.parse(this.getNextEmbedBlock(null, true), exceptionOnInvalidType, objectDecoder));
          } else {
            data.push(null);
          }
        } else {
          if (((ref = values.leadspaces) != null ? ref.length : void 0) && (matches = this.PATTERN_COMPACT_NOTATION.exec(values.value))) {
            c = this.getRealCurrentLineNb();
            parser = new Parser(c);
            parser.refs = this.refs;
            block = values.value;
            indent = this.getCurrentLineIndentation();
            if (this.isNextLineIndented(false)) {
              block += "\n" + this.getNextEmbedBlock(indent + values.leadspaces.length + 1, true);
            }
            data.push(parser.parse(block, exceptionOnInvalidType, objectDecoder));
          } else {
            data.push(this.parseValue(values.value, exceptionOnInvalidType, objectDecoder));
          }
        }
      } else if ((values = this.PATTERN_MAPPING_ITEM.exec(this.currentLine)) && values.key.indexOf(' #') === -1) {
        if (this.CONTEXT_SEQUENCE === context) {
          throw new ParseException('You cannot define a mapping item when in a sequence');
        }
        context = this.CONTEXT_MAPPING;
        if (data == null) {
          data = {};
        }
        Inline.configure(exceptionOnInvalidType, objectDecoder);
        try {
          key = Inline.parseScalar(values.key);
        } catch (error) {
          e = error;
          e.parsedLine = this.getRealCurrentLineNb() + 1;
          e.snippet = this.currentLine;
          throw e;
        }
        if ('<<' === key) {
          mergeNode = true;
          allowOverwrite = true;
          if (((ref1 = values.value) != null ? ref1.indexOf('*') : void 0) === 0) {
            refName = values.value.slice(1);
            if (this.refs[refName] == null) {
              throw new ParseException('Reference "' + refName + '" does not exist.', this.getRealCurrentLineNb() + 1, this.currentLine);
            }
            refValue = this.refs[refName];
            if (typeof refValue !== 'object') {
              throw new ParseException('YAML merge keys used with a scalar value instead of an object.', this.getRealCurrentLineNb() + 1, this.currentLine);
            }
            if (refValue instanceof Array) {
              for (i = j = 0, len = refValue.length; j < len; i = ++j) {
                value = refValue[i];
                if (data[name = String(i)] == null) {
                  data[name] = value;
                }
              }
            } else {
              for (key in refValue) {
                value = refValue[key];
                if (data[key] == null) {
                  data[key] = value;
                }
              }
            }
          } else {
            if ((values.value != null) && values.value !== '') {
              value = values.value;
            } else {
              value = this.getNextEmbedBlock();
            }
            c = this.getRealCurrentLineNb() + 1;
            parser = new Parser(c);
            parser.refs = this.refs;
            parsed = parser.parse(value, exceptionOnInvalidType);
            if (typeof parsed !== 'object') {
              throw new ParseException('YAML merge keys used with a scalar value instead of an object.', this.getRealCurrentLineNb() + 1, this.currentLine);
            }
            if (parsed instanceof Array) {
              for (l = 0, len1 = parsed.length; l < len1; l++) {
                parsedItem = parsed[l];
                if (typeof parsedItem !== 'object') {
                  throw new ParseException('Merge items must be objects.', this.getRealCurrentLineNb() + 1, parsedItem);
                }
                if (parsedItem instanceof Array) {
                  for (i = m = 0, len2 = parsedItem.length; m < len2; i = ++m) {
                    value = parsedItem[i];
                    k = String(i);
                    if (!data.hasOwnProperty(k)) {
                      data[k] = value;
                    }
                  }
                } else {
                  for (key in parsedItem) {
                    value = parsedItem[key];
                    if (!data.hasOwnProperty(key)) {
                      data[key] = value;
                    }
                  }
                }
              }
            } else {
              for (key in parsed) {
                value = parsed[key];
                if (!data.hasOwnProperty(key)) {
                  data[key] = value;
                }
              }
            }
          }
        } else if ((values.value != null) && (matches = this.PATTERN_ANCHOR_VALUE.exec(values.value))) {
          isRef = matches.ref;
          values.value = matches.value;
        }
        if (mergeNode) {

        } else if (!(values.value != null) || '' === Utils.trim(values.value, ' ') || Utils.ltrim(values.value, ' ').indexOf('#') === 0) {
          if (!(this.isNextLineIndented()) && !(this.isNextLineUnIndentedCollection())) {
            if (allowOverwrite || data[key] === void 0) {
              data[key] = null;
            }
          } else {
            c = this.getRealCurrentLineNb() + 1;
            parser = new Parser(c);
            parser.refs = this.refs;
            val = parser.parse(this.getNextEmbedBlock(), exceptionOnInvalidType, objectDecoder);
            if (allowOverwrite || data[key] === void 0) {
              data[key] = val;
            }
          }
        } else {
          val = this.parseValue(values.value, exceptionOnInvalidType, objectDecoder);
          if (allowOverwrite || data[key] === void 0) {
            data[key] = val;
          }
        }
      } else {
        lineCount = this.lines.length;
        if (1 === lineCount || (2 === lineCount && Utils.isEmpty(this.lines[1]))) {
          try {
            value = Inline.parse(this.lines[0], exceptionOnInvalidType, objectDecoder);
          } catch (error) {
            e = error;
            e.parsedLine = this.getRealCurrentLineNb() + 1;
            e.snippet = this.currentLine;
            throw e;
          }
          if (typeof value === 'object') {
            if (value instanceof Array) {
              first = value[0];
            } else {
              for (key in value) {
                first = value[key];
                break;
              }
            }
            if (typeof first === 'string' && first.indexOf('*') === 0) {
              data = [];
              for (n = 0, len3 = value.length; n < len3; n++) {
                alias = value[n];
                data.push(this.refs[alias.slice(1)]);
              }
              value = data;
            }
          }
          return value;
        } else if ((ref2 = Utils.ltrim(value).charAt(0)) === '[' || ref2 === '{') {
          try {
            return Inline.parse(value, exceptionOnInvalidType, objectDecoder);
          } catch (error) {
            e = error;
            e.parsedLine = this.getRealCurrentLineNb() + 1;
            e.snippet = this.currentLine;
            throw e;
          }
        }
        throw new ParseException('Unable to parse.', this.getRealCurrentLineNb() + 1, this.currentLine);
      }
      if (isRef) {
        if (data instanceof Array) {
          this.refs[isRef] = data[data.length - 1];
        } else {
          lastKey = null;
          for (key in data) {
            lastKey = key;
          }
          this.refs[isRef] = data[lastKey];
        }
      }
    }
    if (Utils.isEmpty(data)) {
      return null;
    } else {
      return data;
    }
  };

  Parser.prototype.getRealCurrentLineNb = function() {
    return this.currentLineNb + this.offset;
  };

  Parser.prototype.getCurrentLineIndentation = function() {
    return this.currentLine.length - Utils.ltrim(this.currentLine, ' ').length;
  };

  Parser.prototype.getNextEmbedBlock = function(indentation, includeUnindentedCollection) {
    var data, indent, isItUnindentedCollection, newIndent, removeComments, removeCommentsPattern, unindentedEmbedBlock;
    if (indentation == null) {
      indentation = null;
    }
    if (includeUnindentedCollection == null) {
      includeUnindentedCollection = false;
    }
    this.moveToNextLine();
    if (indentation == null) {
      newIndent = this.getCurrentLineIndentation();
      unindentedEmbedBlock = this.isStringUnIndentedCollectionItem(this.currentLine);
      if (!(this.isCurrentLineEmpty()) && 0 === newIndent && !unindentedEmbedBlock) {
        throw new ParseException('Indentation problem.', this.getRealCurrentLineNb() + 1, this.currentLine);
      }
    } else {
      newIndent = indentation;
    }
    data = [this.currentLine.slice(newIndent)];
    if (!includeUnindentedCollection) {
      isItUnindentedCollection = this.isStringUnIndentedCollectionItem(this.currentLine);
    }
    removeCommentsPattern = this.PATTERN_FOLDED_SCALAR_END;
    removeComments = !removeCommentsPattern.test(this.currentLine);
    while (this.moveToNextLine()) {
      indent = this.getCurrentLineIndentation();
      if (indent === newIndent) {
        removeComments = !removeCommentsPattern.test(this.currentLine);
      }
      if (removeComments && this.isCurrentLineComment()) {
        continue;
      }
      if (this.isCurrentLineBlank()) {
        data.push(this.currentLine.slice(newIndent));
        continue;
      }
      if (isItUnindentedCollection && !this.isStringUnIndentedCollectionItem(this.currentLine) && indent === newIndent) {
        this.moveToPreviousLine();
        break;
      }
      if (indent >= newIndent) {
        data.push(this.currentLine.slice(newIndent));
      } else if (Utils.ltrim(this.currentLine).charAt(0) === '#') {

      } else if (0 === indent) {
        this.moveToPreviousLine();
        break;
      } else {
        throw new ParseException('Indentation problem.', this.getRealCurrentLineNb() + 1, this.currentLine);
      }
    }
    return data.join("\n");
  };

  Parser.prototype.moveToNextLine = function() {
    if (this.currentLineNb >= this.lines.length - 1) {
      return false;
    }
    this.currentLine = this.lines[++this.currentLineNb];
    return true;
  };

  Parser.prototype.moveToPreviousLine = function() {
    this.currentLine = this.lines[--this.currentLineNb];
  };

  Parser.prototype.parseValue = function(value, exceptionOnInvalidType, objectDecoder) {
    var e, foldedIndent, matches, modifiers, pos, ref, ref1, val;
    if (0 === value.indexOf('*')) {
      pos = value.indexOf('#');
      if (pos !== -1) {
        value = value.substr(1, pos - 2);
      } else {
        value = value.slice(1);
      }
      if (this.refs[value] === void 0) {
        throw new ParseException('Reference "' + value + '" does not exist.', this.currentLine);
      }
      return this.refs[value];
    }
    if (matches = this.PATTERN_FOLDED_SCALAR_ALL.exec(value)) {
      modifiers = (ref = matches.modifiers) != null ? ref : '';
      foldedIndent = Math.abs(parseInt(modifiers));
      if (isNaN(foldedIndent)) {
        foldedIndent = 0;
      }
      val = this.parseFoldedScalar(matches.separator, this.PATTERN_DECIMAL.replace(modifiers, ''), foldedIndent);
      if (matches.type != null) {
        Inline.configure(exceptionOnInvalidType, objectDecoder);
        return Inline.parseScalar(matches.type + ' ' + val);
      } else {
        return val;
      }
    }
    if ((ref1 = value.charAt(0)) === '[' || ref1 === '{' || ref1 === '"' || ref1 === "'") {
      while (true) {
        try {
          return Inline.parse(value, exceptionOnInvalidType, objectDecoder);
        } catch (error) {
          e = error;
          if (e instanceof ParseMore && this.moveToNextLine()) {
            value += "\n" + Utils.trim(this.currentLine, ' ');
          } else {
            e.parsedLine = this.getRealCurrentLineNb() + 1;
            e.snippet = this.currentLine;
            throw e;
          }
        }
      }
    } else {
      if (this.isNextLineIndented()) {
        value += "\n" + this.getNextEmbedBlock();
      }
      return Inline.parse(value, exceptionOnInvalidType, objectDecoder);
    }
  };

  Parser.prototype.parseFoldedScalar = function(separator, indicator, indentation) {
    var isCurrentLineBlank, j, len, line, matches, newText, notEOF, pattern, ref, text;
    if (indicator == null) {
      indicator = '';
    }
    if (indentation == null) {
      indentation = 0;
    }
    notEOF = this.moveToNextLine();
    if (!notEOF) {
      return '';
    }
    isCurrentLineBlank = this.isCurrentLineBlank();
    text = '';
    while (notEOF && isCurrentLineBlank) {
      if (notEOF = this.moveToNextLine()) {
        text += "\n";
        isCurrentLineBlank = this.isCurrentLineBlank();
      }
    }
    if (0 === indentation) {
      if (matches = this.PATTERN_INDENT_SPACES.exec(this.currentLine)) {
        indentation = matches[0].length;
      }
    }
    if (indentation > 0) {
      pattern = this.PATTERN_FOLDED_SCALAR_BY_INDENTATION[indentation];
      if (pattern == null) {
        pattern = new Pattern('^ {' + indentation + '}(.*)$');
        Parser.prototype.PATTERN_FOLDED_SCALAR_BY_INDENTATION[indentation] = pattern;
      }
      while (notEOF && (isCurrentLineBlank || (matches = pattern.exec(this.currentLine)))) {
        if (isCurrentLineBlank) {
          text += this.currentLine.slice(indentation);
        } else {
          text += matches[1];
        }
        if (notEOF = this.moveToNextLine()) {
          text += "\n";
          isCurrentLineBlank = this.isCurrentLineBlank();
        }
      }
    } else if (notEOF) {
      text += "\n";
    }
    if (notEOF) {
      this.moveToPreviousLine();
    }
    if ('>' === separator) {
      newText = '';
      ref = text.split("\n");
      for (j = 0, len = ref.length; j < len; j++) {
        line = ref[j];
        if (line.length === 0 || line.charAt(0) === ' ') {
          newText = Utils.rtrim(newText, ' ') + line + "\n";
        } else {
          newText += line + ' ';
        }
      }
      text = newText;
    }
    if ('+' !== indicator) {
      text = Utils.rtrim(text);
    }
    if ('' === indicator) {
      text = this.PATTERN_TRAILING_LINES.replace(text, "\n");
    } else if ('-' === indicator) {
      text = this.PATTERN_TRAILING_LINES.replace(text, '');
    }
    return text;
  };

  Parser.prototype.isNextLineIndented = function(ignoreComments) {
    var EOF, currentIndentation, ret;
    if (ignoreComments == null) {
      ignoreComments = true;
    }
    currentIndentation = this.getCurrentLineIndentation();
    EOF = !this.moveToNextLine();
    if (ignoreComments) {
      while (!EOF && this.isCurrentLineEmpty()) {
        EOF = !this.moveToNextLine();
      }
    } else {
      while (!EOF && this.isCurrentLineBlank()) {
        EOF = !this.moveToNextLine();
      }
    }
    if (EOF) {
      return false;
    }
    ret = false;
    if (this.getCurrentLineIndentation() > currentIndentation) {
      ret = true;
    }
    this.moveToPreviousLine();
    return ret;
  };

  Parser.prototype.isCurrentLineEmpty = function() {
    var trimmedLine;
    trimmedLine = Utils.trim(this.currentLine, ' ');
    return trimmedLine.length === 0 || trimmedLine.charAt(0) === '#';
  };

  Parser.prototype.isCurrentLineBlank = function() {
    return '' === Utils.trim(this.currentLine, ' ');
  };

  Parser.prototype.isCurrentLineComment = function() {
    var ltrimmedLine;
    ltrimmedLine = Utils.ltrim(this.currentLine, ' ');
    return ltrimmedLine.charAt(0) === '#';
  };

  Parser.prototype.cleanup = function(value) {
    var count, i, indent, j, l, len, len1, line, lines, ref, ref1, ref2, smallestIndent, trimmedValue;
    if (value.indexOf("\r") !== -1) {
      value = value.split("\r\n").join("\n").split("\r").join("\n");
    }
    count = 0;
    ref = this.PATTERN_YAML_HEADER.replaceAll(value, ''), value = ref[0], count = ref[1];
    this.offset += count;
    ref1 = this.PATTERN_LEADING_COMMENTS.replaceAll(value, '', 1), trimmedValue = ref1[0], count = ref1[1];
    if (count === 1) {
      this.offset += Utils.subStrCount(value, "\n") - Utils.subStrCount(trimmedValue, "\n");
      value = trimmedValue;
    }
    ref2 = this.PATTERN_DOCUMENT_MARKER_START.replaceAll(value, '', 1), trimmedValue = ref2[0], count = ref2[1];
    if (count === 1) {
      this.offset += Utils.subStrCount(value, "\n") - Utils.subStrCount(trimmedValue, "\n");
      value = trimmedValue;
      value = this.PATTERN_DOCUMENT_MARKER_END.replace(value, '');
    }
    lines = value.split("\n");
    smallestIndent = -1;
    for (j = 0, len = lines.length; j < len; j++) {
      line = lines[j];
      if (Utils.trim(line, ' ').length === 0) {
        continue;
      }
      indent = line.length - Utils.ltrim(line).length;
      if (smallestIndent === -1 || indent < smallestIndent) {
        smallestIndent = indent;
      }
    }
    if (smallestIndent > 0) {
      for (i = l = 0, len1 = lines.length; l < len1; i = ++l) {
        line = lines[i];
        lines[i] = line.slice(smallestIndent);
      }
      value = lines.join("\n");
    }
    return value;
  };

  Parser.prototype.isNextLineUnIndentedCollection = function(currentIndentation) {
    var notEOF, ret;
    if (currentIndentation == null) {
      currentIndentation = null;
    }
    if (currentIndentation == null) {
      currentIndentation = this.getCurrentLineIndentation();
    }
    notEOF = this.moveToNextLine();
    while (notEOF && this.isCurrentLineEmpty()) {
      notEOF = this.moveToNextLine();
    }
    if (false === notEOF) {
      return false;
    }
    ret = false;
    if (this.getCurrentLineIndentation() === currentIndentation && this.isStringUnIndentedCollectionItem(this.currentLine)) {
      ret = true;
    }
    this.moveToPreviousLine();
    return ret;
  };

  Parser.prototype.isStringUnIndentedCollectionItem = function() {
    return this.currentLine === '-' || this.currentLine.slice(0, 2) === '- ';
  };

  return Parser;

})();

module.exports = Parser;

},{"./Exception/ParseException":46,"./Exception/ParseMore":47,"./Inline":48,"./Pattern":50,"./Utils":52}],50:[function(_dereq_,module,exports){
// Generated by CoffeeScript 1.12.4
var Pattern;

Pattern = (function() {
  Pattern.prototype.regex = null;

  Pattern.prototype.rawRegex = null;

  Pattern.prototype.cleanedRegex = null;

  Pattern.prototype.mapping = null;

  function Pattern(rawRegex, modifiers) {
    var _char, capturingBracketNumber, cleanedRegex, i, len, mapping, name, part, subChar;
    if (modifiers == null) {
      modifiers = '';
    }
    cleanedRegex = '';
    len = rawRegex.length;
    mapping = null;
    capturingBracketNumber = 0;
    i = 0;
    while (i < len) {
      _char = rawRegex.charAt(i);
      if (_char === '\\') {
        cleanedRegex += rawRegex.slice(i, +(i + 1) + 1 || 9e9);
        i++;
      } else if (_char === '(') {
        if (i < len - 2) {
          part = rawRegex.slice(i, +(i + 2) + 1 || 9e9);
          if (part === '(?:') {
            i += 2;
            cleanedRegex += part;
          } else if (part === '(?<') {
            capturingBracketNumber++;
            i += 2;
            name = '';
            while (i + 1 < len) {
              subChar = rawRegex.charAt(i + 1);
              if (subChar === '>') {
                cleanedRegex += '(';
                i++;
                if (name.length > 0) {
                  if (mapping == null) {
                    mapping = {};
                  }
                  mapping[name] = capturingBracketNumber;
                }
                break;
              } else {
                name += subChar;
              }
              i++;
            }
          } else {
            cleanedRegex += _char;
            capturingBracketNumber++;
          }
        } else {
          cleanedRegex += _char;
        }
      } else {
        cleanedRegex += _char;
      }
      i++;
    }
    this.rawRegex = rawRegex;
    this.cleanedRegex = cleanedRegex;
    this.regex = new RegExp(this.cleanedRegex, 'g' + modifiers.replace('g', ''));
    this.mapping = mapping;
  }

  Pattern.prototype.exec = function(str) {
    var index, matches, name, ref;
    this.regex.lastIndex = 0;
    matches = this.regex.exec(str);
    if (matches == null) {
      return null;
    }
    if (this.mapping != null) {
      ref = this.mapping;
      for (name in ref) {
        index = ref[name];
        matches[name] = matches[index];
      }
    }
    return matches;
  };

  Pattern.prototype.test = function(str) {
    this.regex.lastIndex = 0;
    return this.regex.test(str);
  };

  Pattern.prototype.replace = function(str, replacement) {
    this.regex.lastIndex = 0;
    return str.replace(this.regex, replacement);
  };

  Pattern.prototype.replaceAll = function(str, replacement, limit) {
    var count;
    if (limit == null) {
      limit = 0;
    }
    this.regex.lastIndex = 0;
    count = 0;
    while (this.regex.test(str) && (limit === 0 || count < limit)) {
      this.regex.lastIndex = 0;
      str = str.replace(this.regex, replacement);
      count++;
    }
    return [str, count];
  };

  return Pattern;

})();

module.exports = Pattern;

},{}],51:[function(_dereq_,module,exports){
// Generated by CoffeeScript 1.12.4
var Pattern, Unescaper, Utils;

Utils = _dereq_('./Utils');

Pattern = _dereq_('./Pattern');

Unescaper = (function() {
  function Unescaper() {}

  Unescaper.PATTERN_ESCAPED_CHARACTER = new Pattern('\\\\([0abt\tnvfre "\\/\\\\N_LP]|x[0-9a-fA-F]{2}|u[0-9a-fA-F]{4}|U[0-9a-fA-F]{8})');

  Unescaper.unescapeSingleQuotedString = function(value) {
    return value.replace(/\'\'/g, '\'');
  };

  Unescaper.unescapeDoubleQuotedString = function(value) {
    if (this._unescapeCallback == null) {
      this._unescapeCallback = (function(_this) {
        return function(str) {
          return _this.unescapeCharacter(str);
        };
      })(this);
    }
    return this.PATTERN_ESCAPED_CHARACTER.replace(value, this._unescapeCallback);
  };

  Unescaper.unescapeCharacter = function(value) {
    var ch;
    ch = String.fromCharCode;
    switch (value.charAt(1)) {
      case '0':
        return ch(0);
      case 'a':
        return ch(7);
      case 'b':
        return ch(8);
      case 't':
        return "\t";
      case "\t":
        return "\t";
      case 'n':
        return "\n";
      case 'v':
        return ch(11);
      case 'f':
        return ch(12);
      case 'r':
        return ch(13);
      case 'e':
        return ch(27);
      case ' ':
        return ' ';
      case '"':
        return '"';
      case '/':
        return '/';
      case '\\':
        return '\\';
      case 'N':
        return ch(0x0085);
      case '_':
        return ch(0x00A0);
      case 'L':
        return ch(0x2028);
      case 'P':
        return ch(0x2029);
      case 'x':
        return Utils.utf8chr(Utils.hexDec(value.substr(2, 2)));
      case 'u':
        return Utils.utf8chr(Utils.hexDec(value.substr(2, 4)));
      case 'U':
        return Utils.utf8chr(Utils.hexDec(value.substr(2, 8)));
      default:
        return '';
    }
  };

  return Unescaper;

})();

module.exports = Unescaper;

},{"./Pattern":50,"./Utils":52}],52:[function(_dereq_,module,exports){
// Generated by CoffeeScript 1.12.4
var Pattern, Utils,
  hasProp = {}.hasOwnProperty;

Pattern = _dereq_('./Pattern');

Utils = (function() {
  function Utils() {}

  Utils.REGEX_LEFT_TRIM_BY_CHAR = {};

  Utils.REGEX_RIGHT_TRIM_BY_CHAR = {};

  Utils.REGEX_SPACES = /\s+/g;

  Utils.REGEX_DIGITS = /^\d+$/;

  Utils.REGEX_OCTAL = /[^0-7]/gi;

  Utils.REGEX_HEXADECIMAL = /[^a-f0-9]/gi;

  Utils.PATTERN_DATE = new Pattern('^' + '(?<year>[0-9][0-9][0-9][0-9])' + '-(?<month>[0-9][0-9]?)' + '-(?<day>[0-9][0-9]?)' + '(?:(?:[Tt]|[ \t]+)' + '(?<hour>[0-9][0-9]?)' + ':(?<minute>[0-9][0-9])' + ':(?<second>[0-9][0-9])' + '(?:\.(?<fraction>[0-9]*))?' + '(?:[ \t]*(?<tz>Z|(?<tz_sign>[-+])(?<tz_hour>[0-9][0-9]?)' + '(?::(?<tz_minute>[0-9][0-9]))?))?)?' + '$', 'i');

  Utils.LOCAL_TIMEZONE_OFFSET = new Date().getTimezoneOffset() * 60 * 1000;

  Utils.trim = function(str, _char) {
    var regexLeft, regexRight;
    if (_char == null) {
      _char = '\\s';
    }
    regexLeft = this.REGEX_LEFT_TRIM_BY_CHAR[_char];
    if (regexLeft == null) {
      this.REGEX_LEFT_TRIM_BY_CHAR[_char] = regexLeft = new RegExp('^' + _char + '' + _char + '*');
    }
    regexLeft.lastIndex = 0;
    regexRight = this.REGEX_RIGHT_TRIM_BY_CHAR[_char];
    if (regexRight == null) {
      this.REGEX_RIGHT_TRIM_BY_CHAR[_char] = regexRight = new RegExp(_char + '' + _char + '*$');
    }
    regexRight.lastIndex = 0;
    return str.replace(regexLeft, '').replace(regexRight, '');
  };

  Utils.ltrim = function(str, _char) {
    var regexLeft;
    if (_char == null) {
      _char = '\\s';
    }
    regexLeft = this.REGEX_LEFT_TRIM_BY_CHAR[_char];
    if (regexLeft == null) {
      this.REGEX_LEFT_TRIM_BY_CHAR[_char] = regexLeft = new RegExp('^' + _char + '' + _char + '*');
    }
    regexLeft.lastIndex = 0;
    return str.replace(regexLeft, '');
  };

  Utils.rtrim = function(str, _char) {
    var regexRight;
    if (_char == null) {
      _char = '\\s';
    }
    regexRight = this.REGEX_RIGHT_TRIM_BY_CHAR[_char];
    if (regexRight == null) {
      this.REGEX_RIGHT_TRIM_BY_CHAR[_char] = regexRight = new RegExp(_char + '' + _char + '*$');
    }
    regexRight.lastIndex = 0;
    return str.replace(regexRight, '');
  };

  Utils.isEmpty = function(value) {
    return !value || value === '' || value === '0' || (value instanceof Array && value.length === 0) || this.isEmptyObject(value);
  };

  Utils.isEmptyObject = function(value) {
    var k;
    return value instanceof Object && ((function() {
      var results;
      results = [];
      for (k in value) {
        if (!hasProp.call(value, k)) continue;
        results.push(k);
      }
      return results;
    })()).length === 0;
  };

  Utils.subStrCount = function(string, subString, start, length) {
    var c, i, j, len, ref, sublen;
    c = 0;
    string = '' + string;
    subString = '' + subString;
    if (start != null) {
      string = string.slice(start);
    }
    if (length != null) {
      string = string.slice(0, length);
    }
    len = string.length;
    sublen = subString.length;
    for (i = j = 0, ref = len; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
      if (subString === string.slice(i, sublen)) {
        c++;
        i += sublen - 1;
      }
    }
    return c;
  };

  Utils.isDigits = function(input) {
    this.REGEX_DIGITS.lastIndex = 0;
    return this.REGEX_DIGITS.test(input);
  };

  Utils.octDec = function(input) {
    this.REGEX_OCTAL.lastIndex = 0;
    return parseInt((input + '').replace(this.REGEX_OCTAL, ''), 8);
  };

  Utils.hexDec = function(input) {
    this.REGEX_HEXADECIMAL.lastIndex = 0;
    input = this.trim(input);
    if ((input + '').slice(0, 2) === '0x') {
      input = (input + '').slice(2);
    }
    return parseInt((input + '').replace(this.REGEX_HEXADECIMAL, ''), 16);
  };

  Utils.utf8chr = function(c) {
    var ch;
    ch = String.fromCharCode;
    if (0x80 > (c %= 0x200000)) {
      return ch(c);
    }
    if (0x800 > c) {
      return ch(0xC0 | c >> 6) + ch(0x80 | c & 0x3F);
    }
    if (0x10000 > c) {
      return ch(0xE0 | c >> 12) + ch(0x80 | c >> 6 & 0x3F) + ch(0x80 | c & 0x3F);
    }
    return ch(0xF0 | c >> 18) + ch(0x80 | c >> 12 & 0x3F) + ch(0x80 | c >> 6 & 0x3F) + ch(0x80 | c & 0x3F);
  };

  Utils.parseBoolean = function(input, strict) {
    var lowerInput;
    if (strict == null) {
      strict = true;
    }
    if (typeof input === 'string') {
      lowerInput = input.toLowerCase();
      if (!strict) {
        if (lowerInput === 'no') {
          return false;
        }
      }
      if (lowerInput === '0') {
        return false;
      }
      if (lowerInput === 'false') {
        return false;
      }
      if (lowerInput === '') {
        return false;
      }
      return true;
    }
    return !!input;
  };

  Utils.isNumeric = function(input) {
    this.REGEX_SPACES.lastIndex = 0;
    return typeof input === 'number' || typeof input === 'string' && !isNaN(input) && input.replace(this.REGEX_SPACES, '') !== '';
  };

  Utils.stringToDate = function(str) {
    var date, day, fraction, hour, info, minute, month, second, tz_hour, tz_minute, tz_offset, year;
    if (!(str != null ? str.length : void 0)) {
      return null;
    }
    info = this.PATTERN_DATE.exec(str);
    if (!info) {
      return null;
    }
    year = parseInt(info.year, 10);
    month = parseInt(info.month, 10) - 1;
    day = parseInt(info.day, 10);
    if (info.hour == null) {
      date = new Date(Date.UTC(year, month, day));
      return date;
    }
    hour = parseInt(info.hour, 10);
    minute = parseInt(info.minute, 10);
    second = parseInt(info.second, 10);
    if (info.fraction != null) {
      fraction = info.fraction.slice(0, 3);
      while (fraction.length < 3) {
        fraction += '0';
      }
      fraction = parseInt(fraction, 10);
    } else {
      fraction = 0;
    }
    if (info.tz != null) {
      tz_hour = parseInt(info.tz_hour, 10);
      if (info.tz_minute != null) {
        tz_minute = parseInt(info.tz_minute, 10);
      } else {
        tz_minute = 0;
      }
      tz_offset = (tz_hour * 60 + tz_minute) * 60000;
      if ('-' === info.tz_sign) {
        tz_offset *= -1;
      }
    }
    date = new Date(Date.UTC(year, month, day, hour, minute, second, fraction));
    if (tz_offset) {
      date.setTime(date.getTime() - tz_offset);
    }
    return date;
  };

  Utils.strRepeat = function(str, number) {
    var i, res;
    res = '';
    i = 0;
    while (i < number) {
      res += str;
      i++;
    }
    return res;
  };

  Utils.getStringFromFile = function(path, callback) {
    var data, fs, j, len1, name, ref, req, xhr;
    if (callback == null) {
      callback = null;
    }
    xhr = null;
    if (typeof window !== "undefined" && window !== null) {
      if (window.XMLHttpRequest) {
        xhr = new XMLHttpRequest();
      } else if (window.ActiveXObject) {
        ref = ["Msxml2.XMLHTTP.6.0", "Msxml2.XMLHTTP.3.0", "Msxml2.XMLHTTP", "Microsoft.XMLHTTP"];
        for (j = 0, len1 = ref.length; j < len1; j++) {
          name = ref[j];
          try {
            xhr = new ActiveXObject(name);
          } catch (error) {}
        }
      }
    }
    if (xhr != null) {
      if (callback != null) {
        xhr.onreadystatechange = function() {
          if (xhr.readyState === 4) {
            if (xhr.status === 200 || xhr.status === 0) {
              return callback(xhr.responseText);
            } else {
              return callback(null);
            }
          }
        };
        xhr.open('GET', path, true);
        return xhr.send(null);
      } else {
        xhr.open('GET', path, false);
        xhr.send(null);
        if (xhr.status === 200 || xhr.status === 0) {
          return xhr.responseText;
        }
        return null;
      }
    } else {
      req = _dereq_;
      fs = req('fs');
      if (callback != null) {
        return fs.readFile(path, function(err, data) {
          if (err) {
            return callback(null);
          } else {
            return callback(String(data));
          }
        });
      } else {
        data = fs.readFileSync(path);
        if (data != null) {
          return String(data);
        }
        return null;
      }
    }
  };

  return Utils;

})();

module.exports = Utils;

},{"./Pattern":50}],53:[function(_dereq_,module,exports){
// Generated by CoffeeScript 1.12.4
var Dumper, Parser, Utils, Yaml;

Parser = _dereq_('./Parser');

Dumper = _dereq_('./Dumper');

Utils = _dereq_('./Utils');

Yaml = (function() {
  function Yaml() {}

  Yaml.parse = function(input, exceptionOnInvalidType, objectDecoder) {
    if (exceptionOnInvalidType == null) {
      exceptionOnInvalidType = false;
    }
    if (objectDecoder == null) {
      objectDecoder = null;
    }
    return new Parser().parse(input, exceptionOnInvalidType, objectDecoder);
  };

  Yaml.parseFile = function(path, callback, exceptionOnInvalidType, objectDecoder) {
    var input;
    if (callback == null) {
      callback = null;
    }
    if (exceptionOnInvalidType == null) {
      exceptionOnInvalidType = false;
    }
    if (objectDecoder == null) {
      objectDecoder = null;
    }
    if (callback != null) {
      return Utils.getStringFromFile(path, (function(_this) {
        return function(input) {
          var result;
          result = null;
          if (input != null) {
            result = _this.parse(input, exceptionOnInvalidType, objectDecoder);
          }
          callback(result);
        };
      })(this));
    } else {
      input = Utils.getStringFromFile(path);
      if (input != null) {
        return this.parse(input, exceptionOnInvalidType, objectDecoder);
      }
      return null;
    }
  };

  Yaml.dump = function(input, inline, indent, exceptionOnInvalidType, objectEncoder) {
    var yaml;
    if (inline == null) {
      inline = 2;
    }
    if (indent == null) {
      indent = 4;
    }
    if (exceptionOnInvalidType == null) {
      exceptionOnInvalidType = false;
    }
    if (objectEncoder == null) {
      objectEncoder = null;
    }
    yaml = new Dumper();
    yaml.indentation = indent;
    return yaml.dump(input, inline, 0, exceptionOnInvalidType, objectEncoder);
  };

  Yaml.register = function() {
    var require_handler;
    require_handler = function(module, filename) {
      return module.exports = YAML.parseFile(filename);
    };
    if ((typeof _dereq_ !== "undefined" && _dereq_ !== null ? _dereq_.extensions : void 0) != null) {
      _dereq_.extensions['.yml'] = require_handler;
      return _dereq_.extensions['.yaml'] = require_handler;
    }
  };

  Yaml.stringify = function(input, inline, indent, exceptionOnInvalidType, objectEncoder) {
    return this.dump(input, inline, indent, exceptionOnInvalidType, objectEncoder);
  };

  Yaml.load = function(path, callback, exceptionOnInvalidType, objectDecoder) {
    return this.parseFile(path, callback, exceptionOnInvalidType, objectDecoder);
  };

  return Yaml;

})();

if (typeof window !== "undefined" && window !== null) {
  window.YAML = Yaml;
}

if (typeof window === "undefined" || window === null) {
  this.YAML = Yaml;
}

module.exports = Yaml;

},{"./Dumper":43,"./Parser":49,"./Utils":52}],54:[function(_dereq_,module,exports){
'use strict';

var _tangram = _dereq_('./tangram');

var _tangram2 = _interopRequireDefault(_tangram);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.exports = _tangram2.default;

},{"./tangram":55}],55:[function(_dereq_,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _assign = _dereq_('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _tangramCartocss = _dereq_('tangram-cartocss');

var _tangramCartocss2 = _interopRequireDefault(_tangramCartocss);

var _yaml = _dereq_('./yaml');

var _yaml2 = _interopRequireDefault(_yaml);

var _md = _dereq_('md5');

var _md2 = _interopRequireDefault(_md);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var SOURCES = {
  mapnik: {
    type: 'MVT'
  }
};

var generateSources = function generateSources(url, subdomains) {
  // TODO: make this dynamic if it is neccessary
  var source = SOURCES['mapnik'];

  return {
    type: source.type,
    url: url,
    url_subdomains: subdomains
  };
};

var TC = function TC(map, cb) {
  var _this = this;

  var self = this;
  this.layer = Tangram.leafletLayer({
    scene: _yaml2.default.getBaseFile()
  }).addTo(map);

  this.scene = this.layer.scene;

  this.scene.subscribe({
    load: function load() {
      _this.scene.setIntrospection(true);
      cb();
    }
  });
};

TC.prototype = {
  onLoaded: function onLoaded(cb) {
    this.scene.subscribe({
      view_complete: function view_complete() {
        cb();
      }
    });
  },

  addEvents: function addEvents(ev) {
    undefined.tangramLayer.setSelectionEvents(ev);
  },

  addLayer: function addLayer(layer, i) {
    var _this2 = this;

    var config = _tangramCartocss2.default.carto2Draw(layer.meta.cartocss, i);

    config.forEach(function (l) {
      var ly = {
        data: {
          layer: layer.id,
          source: 'CartoDB'
        },
        draw: l.draw,
        visible: layer.visible
      };

      var layerName = (0, _md2.default)(layer.id + l.name);

      _this2.scene.config.layers[layerName] = ly;

      (0, _assign2.default)(_this2.scene.config.styles, l.styles);

      (0, _assign2.default)(_this2.scene.config.textures, l.textures);
    });

    this.scene.updateConfig({ rebuild: true });
  },

  addDataSource: function addDataSource(url, subdomains) {
    this.scene.setDataSource('CartoDB', generateSources(url, subdomains));
  }
};

exports.default = TC;

},{"./yaml":56,"babel-runtime/core-js/object/assign":1,"md5":41,"tangram-cartocss":42}],56:[function(_dereq_,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _yamljs = _dereq_('yamljs');

var _yamljs2 = _interopRequireDefault(_yamljs);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var SOURCES = {
  mapnik: {
    type: 'MVT',
    url: function url(_url) {
      return _url.replace('{layerIndexes}', 'mapnik').replace('.png', '.mvt');
    }
  }
};

var getBaseProperties = function getBaseProperties() {
  return {
    global: {
      language: 'en'
    },
    fonts: {
      Montserrat: {
        url: 'https://fonts.gstatic.com/s/montserrat/v7/zhcz-_WihjSQC0oHJ9TCYL3hpw3pgy2gAi-Ip7WPMi0.woff'
      }
    },
    layers: {},
    styles: {
      polygons_blend: {
        base: 'polygons',
        blend: 'overlay'
      },
      lines_blend: {
        base: 'lines',
        blend: 'overlay'
      },
      points_blend: {
        base: 'points',
        blend: 'overlay'
      }
    }
  };
};

var generateYAML = function generateYAML() {
  return _yamljs2.default.stringify(getBaseProperties(), 3);
};

var getBaseFile = function getBaseFile() {
  return URL.createObjectURL(new Blob([generateYAML()]));
};

var yaml;
exports.default = yaml = {
  getBaseFile: getBaseFile
};

},{"yamljs":53}]},{},[54])(54)
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
