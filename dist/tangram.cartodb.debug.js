(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.TangramCarto = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){
module.exports = { "default": _dereq_("core-js/library/fn/object/assign"), __esModule: true };
},{"core-js/library/fn/object/assign":4}],2:[function(_dereq_,module,exports){
module.exports = { "default": _dereq_("core-js/library/fn/object/keys"), __esModule: true };
},{"core-js/library/fn/object/keys":5}],3:[function(_dereq_,module,exports){
var charenc = {
  // UTF-8 encoding
  utf8: {
    // Convert a string to a byte array
    stringToBytes: function(str) {
      return charenc.bin.stringToBytes(unescape(encodeURIComponent(str)));
    },

    // Convert a byte array to a string
    bytesToString: function(bytes) {
      return decodeURIComponent(escape(charenc.bin.bytesToString(bytes)));
    }
  },

  // Binary encoding
  bin: {
    // Convert a string to a byte array
    stringToBytes: function(str) {
      for (var bytes = [], i = 0; i < str.length; i++)
        bytes.push(str.charCodeAt(i) & 0xFF);
      return bytes;
    },

    // Convert a byte array to a string
    bytesToString: function(bytes) {
      for (var str = [], i = 0; i < bytes.length; i++)
        str.push(String.fromCharCode(bytes[i]));
      return str.join('');
    }
  }
};

module.exports = charenc;

},{}],4:[function(_dereq_,module,exports){
_dereq_('../../modules/es6.object.assign');
module.exports = _dereq_('../../modules/_core').Object.assign;
},{"../../modules/_core":10,"../../modules/es6.object.assign":41}],5:[function(_dereq_,module,exports){
_dereq_('../../modules/es6.object.keys');
module.exports = _dereq_('../../modules/_core').Object.keys;
},{"../../modules/_core":10,"../../modules/es6.object.keys":42}],6:[function(_dereq_,module,exports){
module.exports = function(it){
  if(typeof it != 'function')throw TypeError(it + ' is not a function!');
  return it;
};
},{}],7:[function(_dereq_,module,exports){
var isObject = _dereq_('./_is-object');
module.exports = function(it){
  if(!isObject(it))throw TypeError(it + ' is not an object!');
  return it;
};
},{"./_is-object":23}],8:[function(_dereq_,module,exports){
// false -> Array#indexOf
// true  -> Array#includes
var toIObject = _dereq_('./_to-iobject')
  , toLength  = _dereq_('./_to-length')
  , toIndex   = _dereq_('./_to-index');
module.exports = function(IS_INCLUDES){
  return function($this, el, fromIndex){
    var O      = toIObject($this)
      , length = toLength(O.length)
      , index  = toIndex(fromIndex, length)
      , value;
    // Array#includes uses SameValueZero equality algorithm
    if(IS_INCLUDES && el != el)while(length > index){
      value = O[index++];
      if(value != value)return true;
    // Array#toIndex ignores holes, Array#includes - not
    } else for(;length > index; index++)if(IS_INCLUDES || index in O){
      if(O[index] === el)return IS_INCLUDES || index || 0;
    } return !IS_INCLUDES && -1;
  };
};
},{"./_to-index":34,"./_to-iobject":36,"./_to-length":37}],9:[function(_dereq_,module,exports){
var toString = {}.toString;

module.exports = function(it){
  return toString.call(it).slice(8, -1);
};
},{}],10:[function(_dereq_,module,exports){
var core = module.exports = {version: '2.4.0'};
if(typeof __e == 'number')__e = core; // eslint-disable-line no-undef
},{}],11:[function(_dereq_,module,exports){
// optional / simple context binding
var aFunction = _dereq_('./_a-function');
module.exports = function(fn, that, length){
  aFunction(fn);
  if(that === undefined)return fn;
  switch(length){
    case 1: return function(a){
      return fn.call(that, a);
    };
    case 2: return function(a, b){
      return fn.call(that, a, b);
    };
    case 3: return function(a, b, c){
      return fn.call(that, a, b, c);
    };
  }
  return function(/* ...args */){
    return fn.apply(that, arguments);
  };
};
},{"./_a-function":6}],12:[function(_dereq_,module,exports){
// 7.2.1 RequireObjectCoercible(argument)
module.exports = function(it){
  if(it == undefined)throw TypeError("Can't call method on  " + it);
  return it;
};
},{}],13:[function(_dereq_,module,exports){
// Thank's IE8 for his funny defineProperty
module.exports = !_dereq_('./_fails')(function(){
  return Object.defineProperty({}, 'a', {get: function(){ return 7; }}).a != 7;
});
},{"./_fails":17}],14:[function(_dereq_,module,exports){
var isObject = _dereq_('./_is-object')
  , document = _dereq_('./_global').document
  // in old IE typeof document.createElement is 'object'
  , is = isObject(document) && isObject(document.createElement);
module.exports = function(it){
  return is ? document.createElement(it) : {};
};
},{"./_global":18,"./_is-object":23}],15:[function(_dereq_,module,exports){
// IE 8- don't enum bug keys
module.exports = (
  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
).split(',');
},{}],16:[function(_dereq_,module,exports){
var global    = _dereq_('./_global')
  , core      = _dereq_('./_core')
  , ctx       = _dereq_('./_ctx')
  , hide      = _dereq_('./_hide')
  , PROTOTYPE = 'prototype';

var $export = function(type, name, source){
  var IS_FORCED = type & $export.F
    , IS_GLOBAL = type & $export.G
    , IS_STATIC = type & $export.S
    , IS_PROTO  = type & $export.P
    , IS_BIND   = type & $export.B
    , IS_WRAP   = type & $export.W
    , exports   = IS_GLOBAL ? core : core[name] || (core[name] = {})
    , expProto  = exports[PROTOTYPE]
    , target    = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE]
    , key, own, out;
  if(IS_GLOBAL)source = name;
  for(key in source){
    // contains in native
    own = !IS_FORCED && target && target[key] !== undefined;
    if(own && key in exports)continue;
    // export native or passed
    out = own ? target[key] : source[key];
    // prevent global pollution for namespaces
    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]
    // bind timers to global for call from export context
    : IS_BIND && own ? ctx(out, global)
    // wrap global constructors for prevent change them in library
    : IS_WRAP && target[key] == out ? (function(C){
      var F = function(a, b, c){
        if(this instanceof C){
          switch(arguments.length){
            case 0: return new C;
            case 1: return new C(a);
            case 2: return new C(a, b);
          } return new C(a, b, c);
        } return C.apply(this, arguments);
      };
      F[PROTOTYPE] = C[PROTOTYPE];
      return F;
    // make static versions for prototype methods
    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%
    if(IS_PROTO){
      (exports.virtual || (exports.virtual = {}))[key] = out;
      // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%
      if(type & $export.R && expProto && !expProto[key])hide(expProto, key, out);
    }
  }
};
// type bitmap
$export.F = 1;   // forced
$export.G = 2;   // global
$export.S = 4;   // static
$export.P = 8;   // proto
$export.B = 16;  // bind
$export.W = 32;  // wrap
$export.U = 64;  // safe
$export.R = 128; // real proto method for `library` 
module.exports = $export;
},{"./_core":10,"./_ctx":11,"./_global":18,"./_hide":20}],17:[function(_dereq_,module,exports){
module.exports = function(exec){
  try {
    return !!exec();
  } catch(e){
    return true;
  }
};
},{}],18:[function(_dereq_,module,exports){
// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
var global = module.exports = typeof window != 'undefined' && window.Math == Math
  ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();
if(typeof __g == 'number')__g = global; // eslint-disable-line no-undef
},{}],19:[function(_dereq_,module,exports){
var hasOwnProperty = {}.hasOwnProperty;
module.exports = function(it, key){
  return hasOwnProperty.call(it, key);
};
},{}],20:[function(_dereq_,module,exports){
var dP         = _dereq_('./_object-dp')
  , createDesc = _dereq_('./_property-desc');
module.exports = _dereq_('./_descriptors') ? function(object, key, value){
  return dP.f(object, key, createDesc(1, value));
} : function(object, key, value){
  object[key] = value;
  return object;
};
},{"./_descriptors":13,"./_object-dp":25,"./_property-desc":31}],21:[function(_dereq_,module,exports){
module.exports = !_dereq_('./_descriptors') && !_dereq_('./_fails')(function(){
  return Object.defineProperty(_dereq_('./_dom-create')('div'), 'a', {get: function(){ return 7; }}).a != 7;
});
},{"./_descriptors":13,"./_dom-create":14,"./_fails":17}],22:[function(_dereq_,module,exports){
// fallback for non-array-like ES3 and non-enumerable old V8 strings
var cof = _dereq_('./_cof');
module.exports = Object('z').propertyIsEnumerable(0) ? Object : function(it){
  return cof(it) == 'String' ? it.split('') : Object(it);
};
},{"./_cof":9}],23:[function(_dereq_,module,exports){
module.exports = function(it){
  return typeof it === 'object' ? it !== null : typeof it === 'function';
};
},{}],24:[function(_dereq_,module,exports){
'use strict';
// 19.1.2.1 Object.assign(target, source, ...)
var getKeys  = _dereq_('./_object-keys')
  , gOPS     = _dereq_('./_object-gops')
  , pIE      = _dereq_('./_object-pie')
  , toObject = _dereq_('./_to-object')
  , IObject  = _dereq_('./_iobject')
  , $assign  = Object.assign;

// should work with symbols and should have deterministic property order (V8 bug)
module.exports = !$assign || _dereq_('./_fails')(function(){
  var A = {}
    , B = {}
    , S = Symbol()
    , K = 'abcdefghijklmnopqrst';
  A[S] = 7;
  K.split('').forEach(function(k){ B[k] = k; });
  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
}) ? function assign(target, source){ // eslint-disable-line no-unused-vars
  var T     = toObject(target)
    , aLen  = arguments.length
    , index = 1
    , getSymbols = gOPS.f
    , isEnum     = pIE.f;
  while(aLen > index){
    var S      = IObject(arguments[index++])
      , keys   = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S)
      , length = keys.length
      , j      = 0
      , key;
    while(length > j)if(isEnum.call(S, key = keys[j++]))T[key] = S[key];
  } return T;
} : $assign;
},{"./_fails":17,"./_iobject":22,"./_object-gops":26,"./_object-keys":28,"./_object-pie":29,"./_to-object":38}],25:[function(_dereq_,module,exports){
var anObject       = _dereq_('./_an-object')
  , IE8_DOM_DEFINE = _dereq_('./_ie8-dom-define')
  , toPrimitive    = _dereq_('./_to-primitive')
  , dP             = Object.defineProperty;

exports.f = _dereq_('./_descriptors') ? Object.defineProperty : function defineProperty(O, P, Attributes){
  anObject(O);
  P = toPrimitive(P, true);
  anObject(Attributes);
  if(IE8_DOM_DEFINE)try {
    return dP(O, P, Attributes);
  } catch(e){ /* empty */ }
  if('get' in Attributes || 'set' in Attributes)throw TypeError('Accessors not supported!');
  if('value' in Attributes)O[P] = Attributes.value;
  return O;
};
},{"./_an-object":7,"./_descriptors":13,"./_ie8-dom-define":21,"./_to-primitive":39}],26:[function(_dereq_,module,exports){
exports.f = Object.getOwnPropertySymbols;
},{}],27:[function(_dereq_,module,exports){
var has          = _dereq_('./_has')
  , toIObject    = _dereq_('./_to-iobject')
  , arrayIndexOf = _dereq_('./_array-includes')(false)
  , IE_PROTO     = _dereq_('./_shared-key')('IE_PROTO');

module.exports = function(object, names){
  var O      = toIObject(object)
    , i      = 0
    , result = []
    , key;
  for(key in O)if(key != IE_PROTO)has(O, key) && result.push(key);
  // Don't enum bug & hidden keys
  while(names.length > i)if(has(O, key = names[i++])){
    ~arrayIndexOf(result, key) || result.push(key);
  }
  return result;
};
},{"./_array-includes":8,"./_has":19,"./_shared-key":32,"./_to-iobject":36}],28:[function(_dereq_,module,exports){
// 19.1.2.14 / 15.2.3.14 Object.keys(O)
var $keys       = _dereq_('./_object-keys-internal')
  , enumBugKeys = _dereq_('./_enum-bug-keys');

module.exports = Object.keys || function keys(O){
  return $keys(O, enumBugKeys);
};
},{"./_enum-bug-keys":15,"./_object-keys-internal":27}],29:[function(_dereq_,module,exports){
exports.f = {}.propertyIsEnumerable;
},{}],30:[function(_dereq_,module,exports){
// most Object methods by ES6 should accept primitives
var $export = _dereq_('./_export')
  , core    = _dereq_('./_core')
  , fails   = _dereq_('./_fails');
module.exports = function(KEY, exec){
  var fn  = (core.Object || {})[KEY] || Object[KEY]
    , exp = {};
  exp[KEY] = exec(fn);
  $export($export.S + $export.F * fails(function(){ fn(1); }), 'Object', exp);
};
},{"./_core":10,"./_export":16,"./_fails":17}],31:[function(_dereq_,module,exports){
module.exports = function(bitmap, value){
  return {
    enumerable  : !(bitmap & 1),
    configurable: !(bitmap & 2),
    writable    : !(bitmap & 4),
    value       : value
  };
};
},{}],32:[function(_dereq_,module,exports){
var shared = _dereq_('./_shared')('keys')
  , uid    = _dereq_('./_uid');
module.exports = function(key){
  return shared[key] || (shared[key] = uid(key));
};
},{"./_shared":33,"./_uid":40}],33:[function(_dereq_,module,exports){
var global = _dereq_('./_global')
  , SHARED = '__core-js_shared__'
  , store  = global[SHARED] || (global[SHARED] = {});
module.exports = function(key){
  return store[key] || (store[key] = {});
};
},{"./_global":18}],34:[function(_dereq_,module,exports){
var toInteger = _dereq_('./_to-integer')
  , max       = Math.max
  , min       = Math.min;
module.exports = function(index, length){
  index = toInteger(index);
  return index < 0 ? max(index + length, 0) : min(index, length);
};
},{"./_to-integer":35}],35:[function(_dereq_,module,exports){
// 7.1.4 ToInteger
var ceil  = Math.ceil
  , floor = Math.floor;
module.exports = function(it){
  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
};
},{}],36:[function(_dereq_,module,exports){
// to indexed object, toObject with fallback for non-array-like ES3 strings
var IObject = _dereq_('./_iobject')
  , defined = _dereq_('./_defined');
module.exports = function(it){
  return IObject(defined(it));
};
},{"./_defined":12,"./_iobject":22}],37:[function(_dereq_,module,exports){
// 7.1.15 ToLength
var toInteger = _dereq_('./_to-integer')
  , min       = Math.min;
module.exports = function(it){
  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
};
},{"./_to-integer":35}],38:[function(_dereq_,module,exports){
// 7.1.13 ToObject(argument)
var defined = _dereq_('./_defined');
module.exports = function(it){
  return Object(defined(it));
};
},{"./_defined":12}],39:[function(_dereq_,module,exports){
// 7.1.1 ToPrimitive(input [, PreferredType])
var isObject = _dereq_('./_is-object');
// instead of the ES6 spec version, we didn't implement @@toPrimitive case
// and the second argument - flag - preferred type is a string
module.exports = function(it, S){
  if(!isObject(it))return it;
  var fn, val;
  if(S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;
  if(typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it)))return val;
  if(!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;
  throw TypeError("Can't convert object to primitive value");
};
},{"./_is-object":23}],40:[function(_dereq_,module,exports){
var id = 0
  , px = Math.random();
module.exports = function(key){
  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
};
},{}],41:[function(_dereq_,module,exports){
// 19.1.3.1 Object.assign(target, source)
var $export = _dereq_('./_export');

$export($export.S + $export.F, 'Object', {assign: _dereq_('./_object-assign')});
},{"./_export":16,"./_object-assign":24}],42:[function(_dereq_,module,exports){
// 19.1.2.14 Object.keys(O)
var toObject = _dereq_('./_to-object')
  , $keys    = _dereq_('./_object-keys');

_dereq_('./_object-sap')('keys', function(){
  return function keys(it){
    return $keys(toObject(it));
  };
});
},{"./_object-keys":28,"./_object-sap":30,"./_to-object":38}],43:[function(_dereq_,module,exports){
(function() {
  var base64map
      = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',

  crypt = {
    // Bit-wise rotation left
    rotl: function(n, b) {
      return (n << b) | (n >>> (32 - b));
    },

    // Bit-wise rotation right
    rotr: function(n, b) {
      return (n << (32 - b)) | (n >>> b);
    },

    // Swap big-endian to little-endian and vice versa
    endian: function(n) {
      // If number given, swap endian
      if (n.constructor == Number) {
        return crypt.rotl(n, 8) & 0x00FF00FF | crypt.rotl(n, 24) & 0xFF00FF00;
      }

      // Else, assume array and swap all items
      for (var i = 0; i < n.length; i++)
        n[i] = crypt.endian(n[i]);
      return n;
    },

    // Generate an array of any length of random bytes
    randomBytes: function(n) {
      for (var bytes = []; n > 0; n--)
        bytes.push(Math.floor(Math.random() * 256));
      return bytes;
    },

    // Convert a byte array to big-endian 32-bit words
    bytesToWords: function(bytes) {
      for (var words = [], i = 0, b = 0; i < bytes.length; i++, b += 8)
        words[b >>> 5] |= bytes[i] << (24 - b % 32);
      return words;
    },

    // Convert big-endian 32-bit words to a byte array
    wordsToBytes: function(words) {
      for (var bytes = [], b = 0; b < words.length * 32; b += 8)
        bytes.push((words[b >>> 5] >>> (24 - b % 32)) & 0xFF);
      return bytes;
    },

    // Convert a byte array to a hex string
    bytesToHex: function(bytes) {
      for (var hex = [], i = 0; i < bytes.length; i++) {
        hex.push((bytes[i] >>> 4).toString(16));
        hex.push((bytes[i] & 0xF).toString(16));
      }
      return hex.join('');
    },

    // Convert a hex string to a byte array
    hexToBytes: function(hex) {
      for (var bytes = [], c = 0; c < hex.length; c += 2)
        bytes.push(parseInt(hex.substr(c, 2), 16));
      return bytes;
    },

    // Convert a byte array to a base-64 string
    bytesToBase64: function(bytes) {
      for (var base64 = [], i = 0; i < bytes.length; i += 3) {
        var triplet = (bytes[i] << 16) | (bytes[i + 1] << 8) | bytes[i + 2];
        for (var j = 0; j < 4; j++)
          if (i * 8 + j * 6 <= bytes.length * 8)
            base64.push(base64map.charAt((triplet >>> 6 * (3 - j)) & 0x3F));
          else
            base64.push('=');
      }
      return base64.join('');
    },

    // Convert a base-64 string to a byte array
    base64ToBytes: function(base64) {
      // Remove non-base-64 characters
      base64 = base64.replace(/[^A-Z0-9+\/]/ig, '');

      for (var bytes = [], i = 0, imod4 = 0; i < base64.length;
          imod4 = ++i % 4) {
        if (imod4 == 0) continue;
        bytes.push(((base64map.indexOf(base64.charAt(i - 1))
            & (Math.pow(2, -2 * imod4 + 8) - 1)) << (imod4 * 2))
            | (base64map.indexOf(base64.charAt(i)) >>> (6 - imod4 * 2)));
      }
      return bytes;
    }
  };

  module.exports = crypt;
})();

},{}],44:[function(_dereq_,module,exports){
/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */

// The _isBuffer check is for Safari 5-7 support, because it's missing
// Object.prototype.constructor. Remove this eventually
module.exports = function (obj) {
  return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)
}

function isBuffer (obj) {
  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
}

// For Node v0.10 support. Remove this eventually.
function isSlowBuffer (obj) {
  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0))
}

},{}],45:[function(_dereq_,module,exports){
(function(){
  var crypt = _dereq_('crypt'),
      utf8 = _dereq_('charenc').utf8,
      isBuffer = _dereq_('is-buffer'),
      bin = _dereq_('charenc').bin,

  // The core
  md5 = function (message, options) {
    // Convert to byte array
    if (message.constructor == String)
      if (options && options.encoding === 'binary')
        message = bin.stringToBytes(message);
      else
        message = utf8.stringToBytes(message);
    else if (isBuffer(message))
      message = Array.prototype.slice.call(message, 0);
    else if (!Array.isArray(message))
      message = message.toString();
    // else, assume byte array already

    var m = crypt.bytesToWords(message),
        l = message.length * 8,
        a =  1732584193,
        b = -271733879,
        c = -1732584194,
        d =  271733878;

    // Swap endian
    for (var i = 0; i < m.length; i++) {
      m[i] = ((m[i] <<  8) | (m[i] >>> 24)) & 0x00FF00FF |
             ((m[i] << 24) | (m[i] >>>  8)) & 0xFF00FF00;
    }

    // Padding
    m[l >>> 5] |= 0x80 << (l % 32);
    m[(((l + 64) >>> 9) << 4) + 14] = l;

    // Method shortcuts
    var FF = md5._ff,
        GG = md5._gg,
        HH = md5._hh,
        II = md5._ii;

    for (var i = 0; i < m.length; i += 16) {

      var aa = a,
          bb = b,
          cc = c,
          dd = d;

      a = FF(a, b, c, d, m[i+ 0],  7, -680876936);
      d = FF(d, a, b, c, m[i+ 1], 12, -389564586);
      c = FF(c, d, a, b, m[i+ 2], 17,  606105819);
      b = FF(b, c, d, a, m[i+ 3], 22, -1044525330);
      a = FF(a, b, c, d, m[i+ 4],  7, -176418897);
      d = FF(d, a, b, c, m[i+ 5], 12,  1200080426);
      c = FF(c, d, a, b, m[i+ 6], 17, -1473231341);
      b = FF(b, c, d, a, m[i+ 7], 22, -45705983);
      a = FF(a, b, c, d, m[i+ 8],  7,  1770035416);
      d = FF(d, a, b, c, m[i+ 9], 12, -1958414417);
      c = FF(c, d, a, b, m[i+10], 17, -42063);
      b = FF(b, c, d, a, m[i+11], 22, -1990404162);
      a = FF(a, b, c, d, m[i+12],  7,  1804603682);
      d = FF(d, a, b, c, m[i+13], 12, -40341101);
      c = FF(c, d, a, b, m[i+14], 17, -1502002290);
      b = FF(b, c, d, a, m[i+15], 22,  1236535329);

      a = GG(a, b, c, d, m[i+ 1],  5, -165796510);
      d = GG(d, a, b, c, m[i+ 6],  9, -1069501632);
      c = GG(c, d, a, b, m[i+11], 14,  643717713);
      b = GG(b, c, d, a, m[i+ 0], 20, -373897302);
      a = GG(a, b, c, d, m[i+ 5],  5, -701558691);
      d = GG(d, a, b, c, m[i+10],  9,  38016083);
      c = GG(c, d, a, b, m[i+15], 14, -660478335);
      b = GG(b, c, d, a, m[i+ 4], 20, -405537848);
      a = GG(a, b, c, d, m[i+ 9],  5,  568446438);
      d = GG(d, a, b, c, m[i+14],  9, -1019803690);
      c = GG(c, d, a, b, m[i+ 3], 14, -187363961);
      b = GG(b, c, d, a, m[i+ 8], 20,  1163531501);
      a = GG(a, b, c, d, m[i+13],  5, -1444681467);
      d = GG(d, a, b, c, m[i+ 2],  9, -51403784);
      c = GG(c, d, a, b, m[i+ 7], 14,  1735328473);
      b = GG(b, c, d, a, m[i+12], 20, -1926607734);

      a = HH(a, b, c, d, m[i+ 5],  4, -378558);
      d = HH(d, a, b, c, m[i+ 8], 11, -2022574463);
      c = HH(c, d, a, b, m[i+11], 16,  1839030562);
      b = HH(b, c, d, a, m[i+14], 23, -35309556);
      a = HH(a, b, c, d, m[i+ 1],  4, -1530992060);
      d = HH(d, a, b, c, m[i+ 4], 11,  1272893353);
      c = HH(c, d, a, b, m[i+ 7], 16, -155497632);
      b = HH(b, c, d, a, m[i+10], 23, -1094730640);
      a = HH(a, b, c, d, m[i+13],  4,  681279174);
      d = HH(d, a, b, c, m[i+ 0], 11, -358537222);
      c = HH(c, d, a, b, m[i+ 3], 16, -722521979);
      b = HH(b, c, d, a, m[i+ 6], 23,  76029189);
      a = HH(a, b, c, d, m[i+ 9],  4, -640364487);
      d = HH(d, a, b, c, m[i+12], 11, -421815835);
      c = HH(c, d, a, b, m[i+15], 16,  530742520);
      b = HH(b, c, d, a, m[i+ 2], 23, -995338651);

      a = II(a, b, c, d, m[i+ 0],  6, -198630844);
      d = II(d, a, b, c, m[i+ 7], 10,  1126891415);
      c = II(c, d, a, b, m[i+14], 15, -1416354905);
      b = II(b, c, d, a, m[i+ 5], 21, -57434055);
      a = II(a, b, c, d, m[i+12],  6,  1700485571);
      d = II(d, a, b, c, m[i+ 3], 10, -1894986606);
      c = II(c, d, a, b, m[i+10], 15, -1051523);
      b = II(b, c, d, a, m[i+ 1], 21, -2054922799);
      a = II(a, b, c, d, m[i+ 8],  6,  1873313359);
      d = II(d, a, b, c, m[i+15], 10, -30611744);
      c = II(c, d, a, b, m[i+ 6], 15, -1560198380);
      b = II(b, c, d, a, m[i+13], 21,  1309151649);
      a = II(a, b, c, d, m[i+ 4],  6, -145523070);
      d = II(d, a, b, c, m[i+11], 10, -1120210379);
      c = II(c, d, a, b, m[i+ 2], 15,  718787259);
      b = II(b, c, d, a, m[i+ 9], 21, -343485551);

      a = (a + aa) >>> 0;
      b = (b + bb) >>> 0;
      c = (c + cc) >>> 0;
      d = (d + dd) >>> 0;
    }

    return crypt.endian([a, b, c, d]);
  };

  // Auxiliary functions
  md5._ff  = function (a, b, c, d, x, s, t) {
    var n = a + (b & c | ~b & d) + (x >>> 0) + t;
    return ((n << s) | (n >>> (32 - s))) + b;
  };
  md5._gg  = function (a, b, c, d, x, s, t) {
    var n = a + (b & d | c & ~d) + (x >>> 0) + t;
    return ((n << s) | (n >>> (32 - s))) + b;
  };
  md5._hh  = function (a, b, c, d, x, s, t) {
    var n = a + (b ^ c ^ d) + (x >>> 0) + t;
    return ((n << s) | (n >>> (32 - s))) + b;
  };
  md5._ii  = function (a, b, c, d, x, s, t) {
    var n = a + (c ^ (b | ~d)) + (x >>> 0) + t;
    return ((n << s) | (n >>> (32 - s))) + b;
  };

  // Package private blocksize
  md5._blocksize = 16;
  md5._digestsize = 16;

  module.exports = function (message, options) {
    if (message === undefined || message === null)
      throw new Error('Illegal argument ' + message);

    var digestbytes = crypt.wordsToBytes(md5(message, options));
    return options && options.asBytes ? digestbytes :
        options && options.asString ? bin.bytesToString(digestbytes) :
        crypt.bytesToHex(digestbytes);
  };

})();

},{"charenc":3,"crypt":43,"is-buffer":44}],46:[function(_dereq_,module,exports){
(function(e, a) { for(var i in a) e[i] = a[i]; }(this, /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 76);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/* no static exports found */
/* all exports used */
/*!***********************************!*\
  !*** ./~/carto/lib/carto/tree.js ***!
  \***********************************/
/***/ (function(module, exports, __webpack_require__) {

eval("/**\n * TODO: document this. What does this do?\n */\nif(true) {\n  module.exports.find = function (obj, fun) {\n      for (var i = 0, r; i < obj.length; i++) {\n          if (r = fun.call(obj, obj[i])) { return r; }\n      }\n      return null;\n  };\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL34vY2FydG8vbGliL2NhcnRvL3RyZWUuanM/OTFiNSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFRPRE86IGRvY3VtZW50IHRoaXMuIFdoYXQgZG9lcyB0aGlzIGRvP1xuICovXG5pZih0eXBlb2YobW9kdWxlKSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICBtb2R1bGUuZXhwb3J0cy5maW5kID0gZnVuY3Rpb24gKG9iaiwgZnVuKSB7XG4gICAgICBmb3IgKHZhciBpID0gMCwgcjsgaSA8IG9iai5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGlmIChyID0gZnVuLmNhbGwob2JqLCBvYmpbaV0pKSB7IHJldHVybiByOyB9XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVsbDtcbiAgfTtcbn1cblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jYXJ0by9saWIvY2FydG8vdHJlZS5qc1xuLy8gbW9kdWxlIGlkID0gMFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 1 */
/* no static exports found */
/* all exports used */
/*!*****************************************!*\
  !*** ./~/ramda/src/internal/_curry2.js ***!
  \*****************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var _curry1 = __webpack_require__(/*! ./_curry1 */ 2);\nvar _isPlaceholder = __webpack_require__(/*! ./_isPlaceholder */ 25);\n\n\n/**\n * Optimized internal two-arity curry function.\n *\n * @private\n * @category Function\n * @param {Function} fn The function to curry.\n * @return {Function} The curried function.\n */\nmodule.exports = function _curry2(fn) {\n  return function f2(a, b) {\n    switch (arguments.length) {\n      case 0:\n        return f2;\n      case 1:\n        return _isPlaceholder(a) ? f2\n             : _curry1(function(_b) { return fn(a, _b); });\n      default:\n        return _isPlaceholder(a) && _isPlaceholder(b) ? f2\n             : _isPlaceholder(a) ? _curry1(function(_a) { return fn(_a, b); })\n             : _isPlaceholder(b) ? _curry1(function(_b) { return fn(a, _b); })\n             : fn(a, b);\n    }\n  };\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL34vcmFtZGEvc3JjL2ludGVybmFsL19jdXJyeTIuanM/YzNhZCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX2N1cnJ5MSA9IHJlcXVpcmUoJy4vX2N1cnJ5MScpO1xudmFyIF9pc1BsYWNlaG9sZGVyID0gcmVxdWlyZSgnLi9faXNQbGFjZWhvbGRlcicpO1xuXG5cbi8qKlxuICogT3B0aW1pemVkIGludGVybmFsIHR3by1hcml0eSBjdXJyeSBmdW5jdGlvbi5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgZnVuY3Rpb24gdG8gY3VycnkuXG4gKiBAcmV0dXJuIHtGdW5jdGlvbn0gVGhlIGN1cnJpZWQgZnVuY3Rpb24uXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gX2N1cnJ5Mihmbikge1xuICByZXR1cm4gZnVuY3Rpb24gZjIoYSwgYikge1xuICAgIHN3aXRjaCAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgY2FzZSAwOlxuICAgICAgICByZXR1cm4gZjI7XG4gICAgICBjYXNlIDE6XG4gICAgICAgIHJldHVybiBfaXNQbGFjZWhvbGRlcihhKSA/IGYyXG4gICAgICAgICAgICAgOiBfY3VycnkxKGZ1bmN0aW9uKF9iKSB7IHJldHVybiBmbihhLCBfYik7IH0pO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIF9pc1BsYWNlaG9sZGVyKGEpICYmIF9pc1BsYWNlaG9sZGVyKGIpID8gZjJcbiAgICAgICAgICAgICA6IF9pc1BsYWNlaG9sZGVyKGEpID8gX2N1cnJ5MShmdW5jdGlvbihfYSkgeyByZXR1cm4gZm4oX2EsIGIpOyB9KVxuICAgICAgICAgICAgIDogX2lzUGxhY2Vob2xkZXIoYikgPyBfY3VycnkxKGZ1bmN0aW9uKF9iKSB7IHJldHVybiBmbihhLCBfYik7IH0pXG4gICAgICAgICAgICAgOiBmbihhLCBiKTtcbiAgICB9XG4gIH07XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3JhbWRhL3NyYy9pbnRlcm5hbC9fY3VycnkyLmpzXG4vLyBtb2R1bGUgaWQgPSAxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 2 */
/* no static exports found */
/* all exports used */
/*!*****************************************!*\
  !*** ./~/ramda/src/internal/_curry1.js ***!
  \*****************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var _isPlaceholder = __webpack_require__(/*! ./_isPlaceholder */ 25);\n\n\n/**\n * Optimized internal one-arity curry function.\n *\n * @private\n * @category Function\n * @param {Function} fn The function to curry.\n * @return {Function} The curried function.\n */\nmodule.exports = function _curry1(fn) {\n  return function f1(a) {\n    if (arguments.length === 0 || _isPlaceholder(a)) {\n      return f1;\n    } else {\n      return fn.apply(this, arguments);\n    }\n  };\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL34vcmFtZGEvc3JjL2ludGVybmFsL19jdXJyeTEuanM/MjA0NCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX2lzUGxhY2Vob2xkZXIgPSByZXF1aXJlKCcuL19pc1BsYWNlaG9sZGVyJyk7XG5cblxuLyoqXG4gKiBPcHRpbWl6ZWQgaW50ZXJuYWwgb25lLWFyaXR5IGN1cnJ5IGZ1bmN0aW9uLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBmdW5jdGlvbiB0byBjdXJyeS5cbiAqIEByZXR1cm4ge0Z1bmN0aW9ufSBUaGUgY3VycmllZCBmdW5jdGlvbi5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBfY3VycnkxKGZuKSB7XG4gIHJldHVybiBmdW5jdGlvbiBmMShhKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDAgfHwgX2lzUGxhY2Vob2xkZXIoYSkpIHtcbiAgICAgIHJldHVybiBmMTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfVxuICB9O1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9yYW1kYS9zcmMvaW50ZXJuYWwvX2N1cnJ5MS5qc1xuLy8gbW9kdWxlIGlkID0gMlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 3 */
/* no static exports found */
/* all exports used */
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/***/ (function(module, exports) {

eval("var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanM/MzY5OCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZztcclxuXHJcbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXHJcbmcgPSAoZnVuY3Rpb24oKSB7XHJcblx0cmV0dXJuIHRoaXM7XHJcbn0pKCk7XHJcblxyXG50cnkge1xyXG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxyXG5cdGcgPSBnIHx8IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKSB8fCAoMSxldmFsKShcInRoaXNcIik7XHJcbn0gY2F0Y2goZSkge1xyXG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXHJcblx0aWYodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIilcclxuXHRcdGcgPSB3aW5kb3c7XHJcbn1cclxuXHJcbi8vIGcgY2FuIHN0aWxsIGJlIHVuZGVmaW5lZCwgYnV0IG5vdGhpbmcgdG8gZG8gYWJvdXQgaXQuLi5cclxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3NcclxuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBnO1xyXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAod2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanNcbi8vIG1vZHVsZSBpZCA9IDNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 4 */
/* no static exports found */
/* all exports used */
/*!************************************!*\
  !*** ./~/underscore/underscore.js ***!
  \************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;//     Underscore.js 1.8.3\n//     http://underscorejs.org\n//     (c) 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n//     Underscore may be freely distributed under the MIT license.\n\n(function() {\n\n  // Baseline setup\n  // --------------\n\n  // Establish the root object, `window` in the browser, or `exports` on the server.\n  var root = this;\n\n  // Save the previous value of the `_` variable.\n  var previousUnderscore = root._;\n\n  // Save bytes in the minified (but not gzipped) version:\n  var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;\n\n  // Create quick reference variables for speed access to core prototypes.\n  var\n    push             = ArrayProto.push,\n    slice            = ArrayProto.slice,\n    toString         = ObjProto.toString,\n    hasOwnProperty   = ObjProto.hasOwnProperty;\n\n  // All **ECMAScript 5** native function implementations that we hope to use\n  // are declared here.\n  var\n    nativeIsArray      = Array.isArray,\n    nativeKeys         = Object.keys,\n    nativeBind         = FuncProto.bind,\n    nativeCreate       = Object.create;\n\n  // Naked function reference for surrogate-prototype-swapping.\n  var Ctor = function(){};\n\n  // Create a safe reference to the Underscore object for use below.\n  var _ = function(obj) {\n    if (obj instanceof _) return obj;\n    if (!(this instanceof _)) return new _(obj);\n    this._wrapped = obj;\n  };\n\n  // Export the Underscore object for **Node.js**, with\n  // backwards-compatibility for the old `require()` API. If we're in\n  // the browser, add `_` as a global object.\n  if (true) {\n    if (typeof module !== 'undefined' && module.exports) {\n      exports = module.exports = _;\n    }\n    exports._ = _;\n  } else {\n    root._ = _;\n  }\n\n  // Current version.\n  _.VERSION = '1.8.3';\n\n  // Internal function that returns an efficient (for current engines) version\n  // of the passed-in callback, to be repeatedly applied in other Underscore\n  // functions.\n  var optimizeCb = function(func, context, argCount) {\n    if (context === void 0) return func;\n    switch (argCount == null ? 3 : argCount) {\n      case 1: return function(value) {\n        return func.call(context, value);\n      };\n      case 2: return function(value, other) {\n        return func.call(context, value, other);\n      };\n      case 3: return function(value, index, collection) {\n        return func.call(context, value, index, collection);\n      };\n      case 4: return function(accumulator, value, index, collection) {\n        return func.call(context, accumulator, value, index, collection);\n      };\n    }\n    return function() {\n      return func.apply(context, arguments);\n    };\n  };\n\n  // A mostly-internal function to generate callbacks that can be applied\n  // to each element in a collection, returning the desired result — either\n  // identity, an arbitrary callback, a property matcher, or a property accessor.\n  var cb = function(value, context, argCount) {\n    if (value == null) return _.identity;\n    if (_.isFunction(value)) return optimizeCb(value, context, argCount);\n    if (_.isObject(value)) return _.matcher(value);\n    return _.property(value);\n  };\n  _.iteratee = function(value, context) {\n    return cb(value, context, Infinity);\n  };\n\n  // An internal function for creating assigner functions.\n  var createAssigner = function(keysFunc, undefinedOnly) {\n    return function(obj) {\n      var length = arguments.length;\n      if (length < 2 || obj == null) return obj;\n      for (var index = 1; index < length; index++) {\n        var source = arguments[index],\n            keys = keysFunc(source),\n            l = keys.length;\n        for (var i = 0; i < l; i++) {\n          var key = keys[i];\n          if (!undefinedOnly || obj[key] === void 0) obj[key] = source[key];\n        }\n      }\n      return obj;\n    };\n  };\n\n  // An internal function for creating a new object that inherits from another.\n  var baseCreate = function(prototype) {\n    if (!_.isObject(prototype)) return {};\n    if (nativeCreate) return nativeCreate(prototype);\n    Ctor.prototype = prototype;\n    var result = new Ctor;\n    Ctor.prototype = null;\n    return result;\n  };\n\n  var property = function(key) {\n    return function(obj) {\n      return obj == null ? void 0 : obj[key];\n    };\n  };\n\n  // Helper for collection methods to determine whether a collection\n  // should be iterated as an array or as an object\n  // Related: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength\n  // Avoids a very nasty iOS 8 JIT bug on ARM-64. #2094\n  var MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;\n  var getLength = property('length');\n  var isArrayLike = function(collection) {\n    var length = getLength(collection);\n    return typeof length == 'number' && length >= 0 && length <= MAX_ARRAY_INDEX;\n  };\n\n  // Collection Functions\n  // --------------------\n\n  // The cornerstone, an `each` implementation, aka `forEach`.\n  // Handles raw objects in addition to array-likes. Treats all\n  // sparse array-likes as if they were dense.\n  _.each = _.forEach = function(obj, iteratee, context) {\n    iteratee = optimizeCb(iteratee, context);\n    var i, length;\n    if (isArrayLike(obj)) {\n      for (i = 0, length = obj.length; i < length; i++) {\n        iteratee(obj[i], i, obj);\n      }\n    } else {\n      var keys = _.keys(obj);\n      for (i = 0, length = keys.length; i < length; i++) {\n        iteratee(obj[keys[i]], keys[i], obj);\n      }\n    }\n    return obj;\n  };\n\n  // Return the results of applying the iteratee to each element.\n  _.map = _.collect = function(obj, iteratee, context) {\n    iteratee = cb(iteratee, context);\n    var keys = !isArrayLike(obj) && _.keys(obj),\n        length = (keys || obj).length,\n        results = Array(length);\n    for (var index = 0; index < length; index++) {\n      var currentKey = keys ? keys[index] : index;\n      results[index] = iteratee(obj[currentKey], currentKey, obj);\n    }\n    return results;\n  };\n\n  // Create a reducing function iterating left or right.\n  function createReduce(dir) {\n    // Optimized iterator function as using arguments.length\n    // in the main function will deoptimize the, see #1991.\n    function iterator(obj, iteratee, memo, keys, index, length) {\n      for (; index >= 0 && index < length; index += dir) {\n        var currentKey = keys ? keys[index] : index;\n        memo = iteratee(memo, obj[currentKey], currentKey, obj);\n      }\n      return memo;\n    }\n\n    return function(obj, iteratee, memo, context) {\n      iteratee = optimizeCb(iteratee, context, 4);\n      var keys = !isArrayLike(obj) && _.keys(obj),\n          length = (keys || obj).length,\n          index = dir > 0 ? 0 : length - 1;\n      // Determine the initial value if none is provided.\n      if (arguments.length < 3) {\n        memo = obj[keys ? keys[index] : index];\n        index += dir;\n      }\n      return iterator(obj, iteratee, memo, keys, index, length);\n    };\n  }\n\n  // **Reduce** builds up a single result from a list of values, aka `inject`,\n  // or `foldl`.\n  _.reduce = _.foldl = _.inject = createReduce(1);\n\n  // The right-associative version of reduce, also known as `foldr`.\n  _.reduceRight = _.foldr = createReduce(-1);\n\n  // Return the first value which passes a truth test. Aliased as `detect`.\n  _.find = _.detect = function(obj, predicate, context) {\n    var key;\n    if (isArrayLike(obj)) {\n      key = _.findIndex(obj, predicate, context);\n    } else {\n      key = _.findKey(obj, predicate, context);\n    }\n    if (key !== void 0 && key !== -1) return obj[key];\n  };\n\n  // Return all the elements that pass a truth test.\n  // Aliased as `select`.\n  _.filter = _.select = function(obj, predicate, context) {\n    var results = [];\n    predicate = cb(predicate, context);\n    _.each(obj, function(value, index, list) {\n      if (predicate(value, index, list)) results.push(value);\n    });\n    return results;\n  };\n\n  // Return all the elements for which a truth test fails.\n  _.reject = function(obj, predicate, context) {\n    return _.filter(obj, _.negate(cb(predicate)), context);\n  };\n\n  // Determine whether all of the elements match a truth test.\n  // Aliased as `all`.\n  _.every = _.all = function(obj, predicate, context) {\n    predicate = cb(predicate, context);\n    var keys = !isArrayLike(obj) && _.keys(obj),\n        length = (keys || obj).length;\n    for (var index = 0; index < length; index++) {\n      var currentKey = keys ? keys[index] : index;\n      if (!predicate(obj[currentKey], currentKey, obj)) return false;\n    }\n    return true;\n  };\n\n  // Determine if at least one element in the object matches a truth test.\n  // Aliased as `any`.\n  _.some = _.any = function(obj, predicate, context) {\n    predicate = cb(predicate, context);\n    var keys = !isArrayLike(obj) && _.keys(obj),\n        length = (keys || obj).length;\n    for (var index = 0; index < length; index++) {\n      var currentKey = keys ? keys[index] : index;\n      if (predicate(obj[currentKey], currentKey, obj)) return true;\n    }\n    return false;\n  };\n\n  // Determine if the array or object contains a given item (using `===`).\n  // Aliased as `includes` and `include`.\n  _.contains = _.includes = _.include = function(obj, item, fromIndex, guard) {\n    if (!isArrayLike(obj)) obj = _.values(obj);\n    if (typeof fromIndex != 'number' || guard) fromIndex = 0;\n    return _.indexOf(obj, item, fromIndex) >= 0;\n  };\n\n  // Invoke a method (with arguments) on every item in a collection.\n  _.invoke = function(obj, method) {\n    var args = slice.call(arguments, 2);\n    var isFunc = _.isFunction(method);\n    return _.map(obj, function(value) {\n      var func = isFunc ? method : value[method];\n      return func == null ? func : func.apply(value, args);\n    });\n  };\n\n  // Convenience version of a common use case of `map`: fetching a property.\n  _.pluck = function(obj, key) {\n    return _.map(obj, _.property(key));\n  };\n\n  // Convenience version of a common use case of `filter`: selecting only objects\n  // containing specific `key:value` pairs.\n  _.where = function(obj, attrs) {\n    return _.filter(obj, _.matcher(attrs));\n  };\n\n  // Convenience version of a common use case of `find`: getting the first object\n  // containing specific `key:value` pairs.\n  _.findWhere = function(obj, attrs) {\n    return _.find(obj, _.matcher(attrs));\n  };\n\n  // Return the maximum element (or element-based computation).\n  _.max = function(obj, iteratee, context) {\n    var result = -Infinity, lastComputed = -Infinity,\n        value, computed;\n    if (iteratee == null && obj != null) {\n      obj = isArrayLike(obj) ? obj : _.values(obj);\n      for (var i = 0, length = obj.length; i < length; i++) {\n        value = obj[i];\n        if (value > result) {\n          result = value;\n        }\n      }\n    } else {\n      iteratee = cb(iteratee, context);\n      _.each(obj, function(value, index, list) {\n        computed = iteratee(value, index, list);\n        if (computed > lastComputed || computed === -Infinity && result === -Infinity) {\n          result = value;\n          lastComputed = computed;\n        }\n      });\n    }\n    return result;\n  };\n\n  // Return the minimum element (or element-based computation).\n  _.min = function(obj, iteratee, context) {\n    var result = Infinity, lastComputed = Infinity,\n        value, computed;\n    if (iteratee == null && obj != null) {\n      obj = isArrayLike(obj) ? obj : _.values(obj);\n      for (var i = 0, length = obj.length; i < length; i++) {\n        value = obj[i];\n        if (value < result) {\n          result = value;\n        }\n      }\n    } else {\n      iteratee = cb(iteratee, context);\n      _.each(obj, function(value, index, list) {\n        computed = iteratee(value, index, list);\n        if (computed < lastComputed || computed === Infinity && result === Infinity) {\n          result = value;\n          lastComputed = computed;\n        }\n      });\n    }\n    return result;\n  };\n\n  // Shuffle a collection, using the modern version of the\n  // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).\n  _.shuffle = function(obj) {\n    var set = isArrayLike(obj) ? obj : _.values(obj);\n    var length = set.length;\n    var shuffled = Array(length);\n    for (var index = 0, rand; index < length; index++) {\n      rand = _.random(0, index);\n      if (rand !== index) shuffled[index] = shuffled[rand];\n      shuffled[rand] = set[index];\n    }\n    return shuffled;\n  };\n\n  // Sample **n** random values from a collection.\n  // If **n** is not specified, returns a single random element.\n  // The internal `guard` argument allows it to work with `map`.\n  _.sample = function(obj, n, guard) {\n    if (n == null || guard) {\n      if (!isArrayLike(obj)) obj = _.values(obj);\n      return obj[_.random(obj.length - 1)];\n    }\n    return _.shuffle(obj).slice(0, Math.max(0, n));\n  };\n\n  // Sort the object's values by a criterion produced by an iteratee.\n  _.sortBy = function(obj, iteratee, context) {\n    iteratee = cb(iteratee, context);\n    return _.pluck(_.map(obj, function(value, index, list) {\n      return {\n        value: value,\n        index: index,\n        criteria: iteratee(value, index, list)\n      };\n    }).sort(function(left, right) {\n      var a = left.criteria;\n      var b = right.criteria;\n      if (a !== b) {\n        if (a > b || a === void 0) return 1;\n        if (a < b || b === void 0) return -1;\n      }\n      return left.index - right.index;\n    }), 'value');\n  };\n\n  // An internal function used for aggregate \"group by\" operations.\n  var group = function(behavior) {\n    return function(obj, iteratee, context) {\n      var result = {};\n      iteratee = cb(iteratee, context);\n      _.each(obj, function(value, index) {\n        var key = iteratee(value, index, obj);\n        behavior(result, value, key);\n      });\n      return result;\n    };\n  };\n\n  // Groups the object's values by a criterion. Pass either a string attribute\n  // to group by, or a function that returns the criterion.\n  _.groupBy = group(function(result, value, key) {\n    if (_.has(result, key)) result[key].push(value); else result[key] = [value];\n  });\n\n  // Indexes the object's values by a criterion, similar to `groupBy`, but for\n  // when you know that your index values will be unique.\n  _.indexBy = group(function(result, value, key) {\n    result[key] = value;\n  });\n\n  // Counts instances of an object that group by a certain criterion. Pass\n  // either a string attribute to count by, or a function that returns the\n  // criterion.\n  _.countBy = group(function(result, value, key) {\n    if (_.has(result, key)) result[key]++; else result[key] = 1;\n  });\n\n  // Safely create a real, live array from anything iterable.\n  _.toArray = function(obj) {\n    if (!obj) return [];\n    if (_.isArray(obj)) return slice.call(obj);\n    if (isArrayLike(obj)) return _.map(obj, _.identity);\n    return _.values(obj);\n  };\n\n  // Return the number of elements in an object.\n  _.size = function(obj) {\n    if (obj == null) return 0;\n    return isArrayLike(obj) ? obj.length : _.keys(obj).length;\n  };\n\n  // Split a collection into two arrays: one whose elements all satisfy the given\n  // predicate, and one whose elements all do not satisfy the predicate.\n  _.partition = function(obj, predicate, context) {\n    predicate = cb(predicate, context);\n    var pass = [], fail = [];\n    _.each(obj, function(value, key, obj) {\n      (predicate(value, key, obj) ? pass : fail).push(value);\n    });\n    return [pass, fail];\n  };\n\n  // Array Functions\n  // ---------------\n\n  // Get the first element of an array. Passing **n** will return the first N\n  // values in the array. Aliased as `head` and `take`. The **guard** check\n  // allows it to work with `_.map`.\n  _.first = _.head = _.take = function(array, n, guard) {\n    if (array == null) return void 0;\n    if (n == null || guard) return array[0];\n    return _.initial(array, array.length - n);\n  };\n\n  // Returns everything but the last entry of the array. Especially useful on\n  // the arguments object. Passing **n** will return all the values in\n  // the array, excluding the last N.\n  _.initial = function(array, n, guard) {\n    return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));\n  };\n\n  // Get the last element of an array. Passing **n** will return the last N\n  // values in the array.\n  _.last = function(array, n, guard) {\n    if (array == null) return void 0;\n    if (n == null || guard) return array[array.length - 1];\n    return _.rest(array, Math.max(0, array.length - n));\n  };\n\n  // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.\n  // Especially useful on the arguments object. Passing an **n** will return\n  // the rest N values in the array.\n  _.rest = _.tail = _.drop = function(array, n, guard) {\n    return slice.call(array, n == null || guard ? 1 : n);\n  };\n\n  // Trim out all falsy values from an array.\n  _.compact = function(array) {\n    return _.filter(array, _.identity);\n  };\n\n  // Internal implementation of a recursive `flatten` function.\n  var flatten = function(input, shallow, strict, startIndex) {\n    var output = [], idx = 0;\n    for (var i = startIndex || 0, length = getLength(input); i < length; i++) {\n      var value = input[i];\n      if (isArrayLike(value) && (_.isArray(value) || _.isArguments(value))) {\n        //flatten current level of array or arguments object\n        if (!shallow) value = flatten(value, shallow, strict);\n        var j = 0, len = value.length;\n        output.length += len;\n        while (j < len) {\n          output[idx++] = value[j++];\n        }\n      } else if (!strict) {\n        output[idx++] = value;\n      }\n    }\n    return output;\n  };\n\n  // Flatten out an array, either recursively (by default), or just one level.\n  _.flatten = function(array, shallow) {\n    return flatten(array, shallow, false);\n  };\n\n  // Return a version of the array that does not contain the specified value(s).\n  _.without = function(array) {\n    return _.difference(array, slice.call(arguments, 1));\n  };\n\n  // Produce a duplicate-free version of the array. If the array has already\n  // been sorted, you have the option of using a faster algorithm.\n  // Aliased as `unique`.\n  _.uniq = _.unique = function(array, isSorted, iteratee, context) {\n    if (!_.isBoolean(isSorted)) {\n      context = iteratee;\n      iteratee = isSorted;\n      isSorted = false;\n    }\n    if (iteratee != null) iteratee = cb(iteratee, context);\n    var result = [];\n    var seen = [];\n    for (var i = 0, length = getLength(array); i < length; i++) {\n      var value = array[i],\n          computed = iteratee ? iteratee(value, i, array) : value;\n      if (isSorted) {\n        if (!i || seen !== computed) result.push(value);\n        seen = computed;\n      } else if (iteratee) {\n        if (!_.contains(seen, computed)) {\n          seen.push(computed);\n          result.push(value);\n        }\n      } else if (!_.contains(result, value)) {\n        result.push(value);\n      }\n    }\n    return result;\n  };\n\n  // Produce an array that contains the union: each distinct element from all of\n  // the passed-in arrays.\n  _.union = function() {\n    return _.uniq(flatten(arguments, true, true));\n  };\n\n  // Produce an array that contains every item shared between all the\n  // passed-in arrays.\n  _.intersection = function(array) {\n    var result = [];\n    var argsLength = arguments.length;\n    for (var i = 0, length = getLength(array); i < length; i++) {\n      var item = array[i];\n      if (_.contains(result, item)) continue;\n      for (var j = 1; j < argsLength; j++) {\n        if (!_.contains(arguments[j], item)) break;\n      }\n      if (j === argsLength) result.push(item);\n    }\n    return result;\n  };\n\n  // Take the difference between one array and a number of other arrays.\n  // Only the elements present in just the first array will remain.\n  _.difference = function(array) {\n    var rest = flatten(arguments, true, true, 1);\n    return _.filter(array, function(value){\n      return !_.contains(rest, value);\n    });\n  };\n\n  // Zip together multiple lists into a single array -- elements that share\n  // an index go together.\n  _.zip = function() {\n    return _.unzip(arguments);\n  };\n\n  // Complement of _.zip. Unzip accepts an array of arrays and groups\n  // each array's elements on shared indices\n  _.unzip = function(array) {\n    var length = array && _.max(array, getLength).length || 0;\n    var result = Array(length);\n\n    for (var index = 0; index < length; index++) {\n      result[index] = _.pluck(array, index);\n    }\n    return result;\n  };\n\n  // Converts lists into objects. Pass either a single array of `[key, value]`\n  // pairs, or two parallel arrays of the same length -- one of keys, and one of\n  // the corresponding values.\n  _.object = function(list, values) {\n    var result = {};\n    for (var i = 0, length = getLength(list); i < length; i++) {\n      if (values) {\n        result[list[i]] = values[i];\n      } else {\n        result[list[i][0]] = list[i][1];\n      }\n    }\n    return result;\n  };\n\n  // Generator function to create the findIndex and findLastIndex functions\n  function createPredicateIndexFinder(dir) {\n    return function(array, predicate, context) {\n      predicate = cb(predicate, context);\n      var length = getLength(array);\n      var index = dir > 0 ? 0 : length - 1;\n      for (; index >= 0 && index < length; index += dir) {\n        if (predicate(array[index], index, array)) return index;\n      }\n      return -1;\n    };\n  }\n\n  // Returns the first index on an array-like that passes a predicate test\n  _.findIndex = createPredicateIndexFinder(1);\n  _.findLastIndex = createPredicateIndexFinder(-1);\n\n  // Use a comparator function to figure out the smallest index at which\n  // an object should be inserted so as to maintain order. Uses binary search.\n  _.sortedIndex = function(array, obj, iteratee, context) {\n    iteratee = cb(iteratee, context, 1);\n    var value = iteratee(obj);\n    var low = 0, high = getLength(array);\n    while (low < high) {\n      var mid = Math.floor((low + high) / 2);\n      if (iteratee(array[mid]) < value) low = mid + 1; else high = mid;\n    }\n    return low;\n  };\n\n  // Generator function to create the indexOf and lastIndexOf functions\n  function createIndexFinder(dir, predicateFind, sortedIndex) {\n    return function(array, item, idx) {\n      var i = 0, length = getLength(array);\n      if (typeof idx == 'number') {\n        if (dir > 0) {\n            i = idx >= 0 ? idx : Math.max(idx + length, i);\n        } else {\n            length = idx >= 0 ? Math.min(idx + 1, length) : idx + length + 1;\n        }\n      } else if (sortedIndex && idx && length) {\n        idx = sortedIndex(array, item);\n        return array[idx] === item ? idx : -1;\n      }\n      if (item !== item) {\n        idx = predicateFind(slice.call(array, i, length), _.isNaN);\n        return idx >= 0 ? idx + i : -1;\n      }\n      for (idx = dir > 0 ? i : length - 1; idx >= 0 && idx < length; idx += dir) {\n        if (array[idx] === item) return idx;\n      }\n      return -1;\n    };\n  }\n\n  // Return the position of the first occurrence of an item in an array,\n  // or -1 if the item is not included in the array.\n  // If the array is large and already in sort order, pass `true`\n  // for **isSorted** to use binary search.\n  _.indexOf = createIndexFinder(1, _.findIndex, _.sortedIndex);\n  _.lastIndexOf = createIndexFinder(-1, _.findLastIndex);\n\n  // Generate an integer Array containing an arithmetic progression. A port of\n  // the native Python `range()` function. See\n  // [the Python documentation](http://docs.python.org/library/functions.html#range).\n  _.range = function(start, stop, step) {\n    if (stop == null) {\n      stop = start || 0;\n      start = 0;\n    }\n    step = step || 1;\n\n    var length = Math.max(Math.ceil((stop - start) / step), 0);\n    var range = Array(length);\n\n    for (var idx = 0; idx < length; idx++, start += step) {\n      range[idx] = start;\n    }\n\n    return range;\n  };\n\n  // Function (ahem) Functions\n  // ------------------\n\n  // Determines whether to execute a function as a constructor\n  // or a normal function with the provided arguments\n  var executeBound = function(sourceFunc, boundFunc, context, callingContext, args) {\n    if (!(callingContext instanceof boundFunc)) return sourceFunc.apply(context, args);\n    var self = baseCreate(sourceFunc.prototype);\n    var result = sourceFunc.apply(self, args);\n    if (_.isObject(result)) return result;\n    return self;\n  };\n\n  // Create a function bound to a given object (assigning `this`, and arguments,\n  // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if\n  // available.\n  _.bind = function(func, context) {\n    if (nativeBind && func.bind === nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));\n    if (!_.isFunction(func)) throw new TypeError('Bind must be called on a function');\n    var args = slice.call(arguments, 2);\n    var bound = function() {\n      return executeBound(func, bound, context, this, args.concat(slice.call(arguments)));\n    };\n    return bound;\n  };\n\n  // Partially apply a function by creating a version that has had some of its\n  // arguments pre-filled, without changing its dynamic `this` context. _ acts\n  // as a placeholder, allowing any combination of arguments to be pre-filled.\n  _.partial = function(func) {\n    var boundArgs = slice.call(arguments, 1);\n    var bound = function() {\n      var position = 0, length = boundArgs.length;\n      var args = Array(length);\n      for (var i = 0; i < length; i++) {\n        args[i] = boundArgs[i] === _ ? arguments[position++] : boundArgs[i];\n      }\n      while (position < arguments.length) args.push(arguments[position++]);\n      return executeBound(func, bound, this, this, args);\n    };\n    return bound;\n  };\n\n  // Bind a number of an object's methods to that object. Remaining arguments\n  // are the method names to be bound. Useful for ensuring that all callbacks\n  // defined on an object belong to it.\n  _.bindAll = function(obj) {\n    var i, length = arguments.length, key;\n    if (length <= 1) throw new Error('bindAll must be passed function names');\n    for (i = 1; i < length; i++) {\n      key = arguments[i];\n      obj[key] = _.bind(obj[key], obj);\n    }\n    return obj;\n  };\n\n  // Memoize an expensive function by storing its results.\n  _.memoize = function(func, hasher) {\n    var memoize = function(key) {\n      var cache = memoize.cache;\n      var address = '' + (hasher ? hasher.apply(this, arguments) : key);\n      if (!_.has(cache, address)) cache[address] = func.apply(this, arguments);\n      return cache[address];\n    };\n    memoize.cache = {};\n    return memoize;\n  };\n\n  // Delays a function for the given number of milliseconds, and then calls\n  // it with the arguments supplied.\n  _.delay = function(func, wait) {\n    var args = slice.call(arguments, 2);\n    return setTimeout(function(){\n      return func.apply(null, args);\n    }, wait);\n  };\n\n  // Defers a function, scheduling it to run after the current call stack has\n  // cleared.\n  _.defer = _.partial(_.delay, _, 1);\n\n  // Returns a function, that, when invoked, will only be triggered at most once\n  // during a given window of time. Normally, the throttled function will run\n  // as much as it can, without ever going more than once per `wait` duration;\n  // but if you'd like to disable the execution on the leading edge, pass\n  // `{leading: false}`. To disable execution on the trailing edge, ditto.\n  _.throttle = function(func, wait, options) {\n    var context, args, result;\n    var timeout = null;\n    var previous = 0;\n    if (!options) options = {};\n    var later = function() {\n      previous = options.leading === false ? 0 : _.now();\n      timeout = null;\n      result = func.apply(context, args);\n      if (!timeout) context = args = null;\n    };\n    return function() {\n      var now = _.now();\n      if (!previous && options.leading === false) previous = now;\n      var remaining = wait - (now - previous);\n      context = this;\n      args = arguments;\n      if (remaining <= 0 || remaining > wait) {\n        if (timeout) {\n          clearTimeout(timeout);\n          timeout = null;\n        }\n        previous = now;\n        result = func.apply(context, args);\n        if (!timeout) context = args = null;\n      } else if (!timeout && options.trailing !== false) {\n        timeout = setTimeout(later, remaining);\n      }\n      return result;\n    };\n  };\n\n  // Returns a function, that, as long as it continues to be invoked, will not\n  // be triggered. The function will be called after it stops being called for\n  // N milliseconds. If `immediate` is passed, trigger the function on the\n  // leading edge, instead of the trailing.\n  _.debounce = function(func, wait, immediate) {\n    var timeout, args, context, timestamp, result;\n\n    var later = function() {\n      var last = _.now() - timestamp;\n\n      if (last < wait && last >= 0) {\n        timeout = setTimeout(later, wait - last);\n      } else {\n        timeout = null;\n        if (!immediate) {\n          result = func.apply(context, args);\n          if (!timeout) context = args = null;\n        }\n      }\n    };\n\n    return function() {\n      context = this;\n      args = arguments;\n      timestamp = _.now();\n      var callNow = immediate && !timeout;\n      if (!timeout) timeout = setTimeout(later, wait);\n      if (callNow) {\n        result = func.apply(context, args);\n        context = args = null;\n      }\n\n      return result;\n    };\n  };\n\n  // Returns the first function passed as an argument to the second,\n  // allowing you to adjust arguments, run code before and after, and\n  // conditionally execute the original function.\n  _.wrap = function(func, wrapper) {\n    return _.partial(wrapper, func);\n  };\n\n  // Returns a negated version of the passed-in predicate.\n  _.negate = function(predicate) {\n    return function() {\n      return !predicate.apply(this, arguments);\n    };\n  };\n\n  // Returns a function that is the composition of a list of functions, each\n  // consuming the return value of the function that follows.\n  _.compose = function() {\n    var args = arguments;\n    var start = args.length - 1;\n    return function() {\n      var i = start;\n      var result = args[start].apply(this, arguments);\n      while (i--) result = args[i].call(this, result);\n      return result;\n    };\n  };\n\n  // Returns a function that will only be executed on and after the Nth call.\n  _.after = function(times, func) {\n    return function() {\n      if (--times < 1) {\n        return func.apply(this, arguments);\n      }\n    };\n  };\n\n  // Returns a function that will only be executed up to (but not including) the Nth call.\n  _.before = function(times, func) {\n    var memo;\n    return function() {\n      if (--times > 0) {\n        memo = func.apply(this, arguments);\n      }\n      if (times <= 1) func = null;\n      return memo;\n    };\n  };\n\n  // Returns a function that will be executed at most one time, no matter how\n  // often you call it. Useful for lazy initialization.\n  _.once = _.partial(_.before, 2);\n\n  // Object Functions\n  // ----------------\n\n  // Keys in IE < 9 that won't be iterated by `for key in ...` and thus missed.\n  var hasEnumBug = !{toString: null}.propertyIsEnumerable('toString');\n  var nonEnumerableProps = ['valueOf', 'isPrototypeOf', 'toString',\n                      'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString'];\n\n  function collectNonEnumProps(obj, keys) {\n    var nonEnumIdx = nonEnumerableProps.length;\n    var constructor = obj.constructor;\n    var proto = (_.isFunction(constructor) && constructor.prototype) || ObjProto;\n\n    // Constructor is a special case.\n    var prop = 'constructor';\n    if (_.has(obj, prop) && !_.contains(keys, prop)) keys.push(prop);\n\n    while (nonEnumIdx--) {\n      prop = nonEnumerableProps[nonEnumIdx];\n      if (prop in obj && obj[prop] !== proto[prop] && !_.contains(keys, prop)) {\n        keys.push(prop);\n      }\n    }\n  }\n\n  // Retrieve the names of an object's own properties.\n  // Delegates to **ECMAScript 5**'s native `Object.keys`\n  _.keys = function(obj) {\n    if (!_.isObject(obj)) return [];\n    if (nativeKeys) return nativeKeys(obj);\n    var keys = [];\n    for (var key in obj) if (_.has(obj, key)) keys.push(key);\n    // Ahem, IE < 9.\n    if (hasEnumBug) collectNonEnumProps(obj, keys);\n    return keys;\n  };\n\n  // Retrieve all the property names of an object.\n  _.allKeys = function(obj) {\n    if (!_.isObject(obj)) return [];\n    var keys = [];\n    for (var key in obj) keys.push(key);\n    // Ahem, IE < 9.\n    if (hasEnumBug) collectNonEnumProps(obj, keys);\n    return keys;\n  };\n\n  // Retrieve the values of an object's properties.\n  _.values = function(obj) {\n    var keys = _.keys(obj);\n    var length = keys.length;\n    var values = Array(length);\n    for (var i = 0; i < length; i++) {\n      values[i] = obj[keys[i]];\n    }\n    return values;\n  };\n\n  // Returns the results of applying the iteratee to each element of the object\n  // In contrast to _.map it returns an object\n  _.mapObject = function(obj, iteratee, context) {\n    iteratee = cb(iteratee, context);\n    var keys =  _.keys(obj),\n          length = keys.length,\n          results = {},\n          currentKey;\n      for (var index = 0; index < length; index++) {\n        currentKey = keys[index];\n        results[currentKey] = iteratee(obj[currentKey], currentKey, obj);\n      }\n      return results;\n  };\n\n  // Convert an object into a list of `[key, value]` pairs.\n  _.pairs = function(obj) {\n    var keys = _.keys(obj);\n    var length = keys.length;\n    var pairs = Array(length);\n    for (var i = 0; i < length; i++) {\n      pairs[i] = [keys[i], obj[keys[i]]];\n    }\n    return pairs;\n  };\n\n  // Invert the keys and values of an object. The values must be serializable.\n  _.invert = function(obj) {\n    var result = {};\n    var keys = _.keys(obj);\n    for (var i = 0, length = keys.length; i < length; i++) {\n      result[obj[keys[i]]] = keys[i];\n    }\n    return result;\n  };\n\n  // Return a sorted list of the function names available on the object.\n  // Aliased as `methods`\n  _.functions = _.methods = function(obj) {\n    var names = [];\n    for (var key in obj) {\n      if (_.isFunction(obj[key])) names.push(key);\n    }\n    return names.sort();\n  };\n\n  // Extend a given object with all the properties in passed-in object(s).\n  _.extend = createAssigner(_.allKeys);\n\n  // Assigns a given object with all the own properties in the passed-in object(s)\n  // (https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)\n  _.extendOwn = _.assign = createAssigner(_.keys);\n\n  // Returns the first key on an object that passes a predicate test\n  _.findKey = function(obj, predicate, context) {\n    predicate = cb(predicate, context);\n    var keys = _.keys(obj), key;\n    for (var i = 0, length = keys.length; i < length; i++) {\n      key = keys[i];\n      if (predicate(obj[key], key, obj)) return key;\n    }\n  };\n\n  // Return a copy of the object only containing the whitelisted properties.\n  _.pick = function(object, oiteratee, context) {\n    var result = {}, obj = object, iteratee, keys;\n    if (obj == null) return result;\n    if (_.isFunction(oiteratee)) {\n      keys = _.allKeys(obj);\n      iteratee = optimizeCb(oiteratee, context);\n    } else {\n      keys = flatten(arguments, false, false, 1);\n      iteratee = function(value, key, obj) { return key in obj; };\n      obj = Object(obj);\n    }\n    for (var i = 0, length = keys.length; i < length; i++) {\n      var key = keys[i];\n      var value = obj[key];\n      if (iteratee(value, key, obj)) result[key] = value;\n    }\n    return result;\n  };\n\n   // Return a copy of the object without the blacklisted properties.\n  _.omit = function(obj, iteratee, context) {\n    if (_.isFunction(iteratee)) {\n      iteratee = _.negate(iteratee);\n    } else {\n      var keys = _.map(flatten(arguments, false, false, 1), String);\n      iteratee = function(value, key) {\n        return !_.contains(keys, key);\n      };\n    }\n    return _.pick(obj, iteratee, context);\n  };\n\n  // Fill in a given object with default properties.\n  _.defaults = createAssigner(_.allKeys, true);\n\n  // Creates an object that inherits from the given prototype object.\n  // If additional properties are provided then they will be added to the\n  // created object.\n  _.create = function(prototype, props) {\n    var result = baseCreate(prototype);\n    if (props) _.extendOwn(result, props);\n    return result;\n  };\n\n  // Create a (shallow-cloned) duplicate of an object.\n  _.clone = function(obj) {\n    if (!_.isObject(obj)) return obj;\n    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);\n  };\n\n  // Invokes interceptor with the obj, and then returns obj.\n  // The primary purpose of this method is to \"tap into\" a method chain, in\n  // order to perform operations on intermediate results within the chain.\n  _.tap = function(obj, interceptor) {\n    interceptor(obj);\n    return obj;\n  };\n\n  // Returns whether an object has a given set of `key:value` pairs.\n  _.isMatch = function(object, attrs) {\n    var keys = _.keys(attrs), length = keys.length;\n    if (object == null) return !length;\n    var obj = Object(object);\n    for (var i = 0; i < length; i++) {\n      var key = keys[i];\n      if (attrs[key] !== obj[key] || !(key in obj)) return false;\n    }\n    return true;\n  };\n\n\n  // Internal recursive comparison function for `isEqual`.\n  var eq = function(a, b, aStack, bStack) {\n    // Identical objects are equal. `0 === -0`, but they aren't identical.\n    // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).\n    if (a === b) return a !== 0 || 1 / a === 1 / b;\n    // A strict comparison is necessary because `null == undefined`.\n    if (a == null || b == null) return a === b;\n    // Unwrap any wrapped objects.\n    if (a instanceof _) a = a._wrapped;\n    if (b instanceof _) b = b._wrapped;\n    // Compare `[[Class]]` names.\n    var className = toString.call(a);\n    if (className !== toString.call(b)) return false;\n    switch (className) {\n      // Strings, numbers, regular expressions, dates, and booleans are compared by value.\n      case '[object RegExp]':\n      // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')\n      case '[object String]':\n        // Primitives and their corresponding object wrappers are equivalent; thus, `\"5\"` is\n        // equivalent to `new String(\"5\")`.\n        return '' + a === '' + b;\n      case '[object Number]':\n        // `NaN`s are equivalent, but non-reflexive.\n        // Object(NaN) is equivalent to NaN\n        if (+a !== +a) return +b !== +b;\n        // An `egal` comparison is performed for other numeric values.\n        return +a === 0 ? 1 / +a === 1 / b : +a === +b;\n      case '[object Date]':\n      case '[object Boolean]':\n        // Coerce dates and booleans to numeric primitive values. Dates are compared by their\n        // millisecond representations. Note that invalid dates with millisecond representations\n        // of `NaN` are not equivalent.\n        return +a === +b;\n    }\n\n    var areArrays = className === '[object Array]';\n    if (!areArrays) {\n      if (typeof a != 'object' || typeof b != 'object') return false;\n\n      // Objects with different constructors are not equivalent, but `Object`s or `Array`s\n      // from different frames are.\n      var aCtor = a.constructor, bCtor = b.constructor;\n      if (aCtor !== bCtor && !(_.isFunction(aCtor) && aCtor instanceof aCtor &&\n                               _.isFunction(bCtor) && bCtor instanceof bCtor)\n                          && ('constructor' in a && 'constructor' in b)) {\n        return false;\n      }\n    }\n    // Assume equality for cyclic structures. The algorithm for detecting cyclic\n    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.\n\n    // Initializing stack of traversed objects.\n    // It's done here since we only need them for objects and arrays comparison.\n    aStack = aStack || [];\n    bStack = bStack || [];\n    var length = aStack.length;\n    while (length--) {\n      // Linear search. Performance is inversely proportional to the number of\n      // unique nested structures.\n      if (aStack[length] === a) return bStack[length] === b;\n    }\n\n    // Add the first object to the stack of traversed objects.\n    aStack.push(a);\n    bStack.push(b);\n\n    // Recursively compare objects and arrays.\n    if (areArrays) {\n      // Compare array lengths to determine if a deep comparison is necessary.\n      length = a.length;\n      if (length !== b.length) return false;\n      // Deep compare the contents, ignoring non-numeric properties.\n      while (length--) {\n        if (!eq(a[length], b[length], aStack, bStack)) return false;\n      }\n    } else {\n      // Deep compare objects.\n      var keys = _.keys(a), key;\n      length = keys.length;\n      // Ensure that both objects contain the same number of properties before comparing deep equality.\n      if (_.keys(b).length !== length) return false;\n      while (length--) {\n        // Deep compare each member\n        key = keys[length];\n        if (!(_.has(b, key) && eq(a[key], b[key], aStack, bStack))) return false;\n      }\n    }\n    // Remove the first object from the stack of traversed objects.\n    aStack.pop();\n    bStack.pop();\n    return true;\n  };\n\n  // Perform a deep comparison to check if two objects are equal.\n  _.isEqual = function(a, b) {\n    return eq(a, b);\n  };\n\n  // Is a given array, string, or object empty?\n  // An \"empty\" object has no enumerable own-properties.\n  _.isEmpty = function(obj) {\n    if (obj == null) return true;\n    if (isArrayLike(obj) && (_.isArray(obj) || _.isString(obj) || _.isArguments(obj))) return obj.length === 0;\n    return _.keys(obj).length === 0;\n  };\n\n  // Is a given value a DOM element?\n  _.isElement = function(obj) {\n    return !!(obj && obj.nodeType === 1);\n  };\n\n  // Is a given value an array?\n  // Delegates to ECMA5's native Array.isArray\n  _.isArray = nativeIsArray || function(obj) {\n    return toString.call(obj) === '[object Array]';\n  };\n\n  // Is a given variable an object?\n  _.isObject = function(obj) {\n    var type = typeof obj;\n    return type === 'function' || type === 'object' && !!obj;\n  };\n\n  // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp, isError.\n  _.each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp', 'Error'], function(name) {\n    _['is' + name] = function(obj) {\n      return toString.call(obj) === '[object ' + name + ']';\n    };\n  });\n\n  // Define a fallback version of the method in browsers (ahem, IE < 9), where\n  // there isn't any inspectable \"Arguments\" type.\n  if (!_.isArguments(arguments)) {\n    _.isArguments = function(obj) {\n      return _.has(obj, 'callee');\n    };\n  }\n\n  // Optimize `isFunction` if appropriate. Work around some typeof bugs in old v8,\n  // IE 11 (#1621), and in Safari 8 (#1929).\n  if (typeof /./ != 'function' && typeof Int8Array != 'object') {\n    _.isFunction = function(obj) {\n      return typeof obj == 'function' || false;\n    };\n  }\n\n  // Is a given object a finite number?\n  _.isFinite = function(obj) {\n    return isFinite(obj) && !isNaN(parseFloat(obj));\n  };\n\n  // Is the given value `NaN`? (NaN is the only number which does not equal itself).\n  _.isNaN = function(obj) {\n    return _.isNumber(obj) && obj !== +obj;\n  };\n\n  // Is a given value a boolean?\n  _.isBoolean = function(obj) {\n    return obj === true || obj === false || toString.call(obj) === '[object Boolean]';\n  };\n\n  // Is a given value equal to null?\n  _.isNull = function(obj) {\n    return obj === null;\n  };\n\n  // Is a given variable undefined?\n  _.isUndefined = function(obj) {\n    return obj === void 0;\n  };\n\n  // Shortcut function for checking if an object has a given property directly\n  // on itself (in other words, not on a prototype).\n  _.has = function(obj, key) {\n    return obj != null && hasOwnProperty.call(obj, key);\n  };\n\n  // Utility Functions\n  // -----------------\n\n  // Run Underscore.js in *noConflict* mode, returning the `_` variable to its\n  // previous owner. Returns a reference to the Underscore object.\n  _.noConflict = function() {\n    root._ = previousUnderscore;\n    return this;\n  };\n\n  // Keep the identity function around for default iteratees.\n  _.identity = function(value) {\n    return value;\n  };\n\n  // Predicate-generating functions. Often useful outside of Underscore.\n  _.constant = function(value) {\n    return function() {\n      return value;\n    };\n  };\n\n  _.noop = function(){};\n\n  _.property = property;\n\n  // Generates a function for a given object that returns a given property.\n  _.propertyOf = function(obj) {\n    return obj == null ? function(){} : function(key) {\n      return obj[key];\n    };\n  };\n\n  // Returns a predicate for checking whether an object has a given set of\n  // `key:value` pairs.\n  _.matcher = _.matches = function(attrs) {\n    attrs = _.extendOwn({}, attrs);\n    return function(obj) {\n      return _.isMatch(obj, attrs);\n    };\n  };\n\n  // Run a function **n** times.\n  _.times = function(n, iteratee, context) {\n    var accum = Array(Math.max(0, n));\n    iteratee = optimizeCb(iteratee, context, 1);\n    for (var i = 0; i < n; i++) accum[i] = iteratee(i);\n    return accum;\n  };\n\n  // Return a random integer between min and max (inclusive).\n  _.random = function(min, max) {\n    if (max == null) {\n      max = min;\n      min = 0;\n    }\n    return min + Math.floor(Math.random() * (max - min + 1));\n  };\n\n  // A (possibly faster) way to get the current timestamp as an integer.\n  _.now = Date.now || function() {\n    return new Date().getTime();\n  };\n\n   // List of HTML entities for escaping.\n  var escapeMap = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#x27;',\n    '`': '&#x60;'\n  };\n  var unescapeMap = _.invert(escapeMap);\n\n  // Functions for escaping and unescaping strings to/from HTML interpolation.\n  var createEscaper = function(map) {\n    var escaper = function(match) {\n      return map[match];\n    };\n    // Regexes for identifying a key that needs to be escaped\n    var source = '(?:' + _.keys(map).join('|') + ')';\n    var testRegexp = RegExp(source);\n    var replaceRegexp = RegExp(source, 'g');\n    return function(string) {\n      string = string == null ? '' : '' + string;\n      return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;\n    };\n  };\n  _.escape = createEscaper(escapeMap);\n  _.unescape = createEscaper(unescapeMap);\n\n  // If the value of the named `property` is a function then invoke it with the\n  // `object` as context; otherwise, return it.\n  _.result = function(object, property, fallback) {\n    var value = object == null ? void 0 : object[property];\n    if (value === void 0) {\n      value = fallback;\n    }\n    return _.isFunction(value) ? value.call(object) : value;\n  };\n\n  // Generate a unique integer id (unique within the entire client session).\n  // Useful for temporary DOM ids.\n  var idCounter = 0;\n  _.uniqueId = function(prefix) {\n    var id = ++idCounter + '';\n    return prefix ? prefix + id : id;\n  };\n\n  // By default, Underscore uses ERB-style template delimiters, change the\n  // following template settings to use alternative delimiters.\n  _.templateSettings = {\n    evaluate    : /<%([\\s\\S]+?)%>/g,\n    interpolate : /<%=([\\s\\S]+?)%>/g,\n    escape      : /<%-([\\s\\S]+?)%>/g\n  };\n\n  // When customizing `templateSettings`, if you don't want to define an\n  // interpolation, evaluation or escaping regex, we need one that is\n  // guaranteed not to match.\n  var noMatch = /(.)^/;\n\n  // Certain characters need to be escaped so that they can be put into a\n  // string literal.\n  var escapes = {\n    \"'\":      \"'\",\n    '\\\\':     '\\\\',\n    '\\r':     'r',\n    '\\n':     'n',\n    '\\u2028': 'u2028',\n    '\\u2029': 'u2029'\n  };\n\n  var escaper = /\\\\|'|\\r|\\n|\\u2028|\\u2029/g;\n\n  var escapeChar = function(match) {\n    return '\\\\' + escapes[match];\n  };\n\n  // JavaScript micro-templating, similar to John Resig's implementation.\n  // Underscore templating handles arbitrary delimiters, preserves whitespace,\n  // and correctly escapes quotes within interpolated code.\n  // NB: `oldSettings` only exists for backwards compatibility.\n  _.template = function(text, settings, oldSettings) {\n    if (!settings && oldSettings) settings = oldSettings;\n    settings = _.defaults({}, settings, _.templateSettings);\n\n    // Combine delimiters into one regular expression via alternation.\n    var matcher = RegExp([\n      (settings.escape || noMatch).source,\n      (settings.interpolate || noMatch).source,\n      (settings.evaluate || noMatch).source\n    ].join('|') + '|$', 'g');\n\n    // Compile the template source, escaping string literals appropriately.\n    var index = 0;\n    var source = \"__p+='\";\n    text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {\n      source += text.slice(index, offset).replace(escaper, escapeChar);\n      index = offset + match.length;\n\n      if (escape) {\n        source += \"'+\\n((__t=(\" + escape + \"))==null?'':_.escape(__t))+\\n'\";\n      } else if (interpolate) {\n        source += \"'+\\n((__t=(\" + interpolate + \"))==null?'':__t)+\\n'\";\n      } else if (evaluate) {\n        source += \"';\\n\" + evaluate + \"\\n__p+='\";\n      }\n\n      // Adobe VMs need the match returned to produce the correct offest.\n      return match;\n    });\n    source += \"';\\n\";\n\n    // If a variable is not specified, place data values in local scope.\n    if (!settings.variable) source = 'with(obj||{}){\\n' + source + '}\\n';\n\n    source = \"var __t,__p='',__j=Array.prototype.join,\" +\n      \"print=function(){__p+=__j.call(arguments,'');};\\n\" +\n      source + 'return __p;\\n';\n\n    try {\n      var render = new Function(settings.variable || 'obj', '_', source);\n    } catch (e) {\n      e.source = source;\n      throw e;\n    }\n\n    var template = function(data) {\n      return render.call(this, data, _);\n    };\n\n    // Provide the compiled source as a convenience for precompilation.\n    var argument = settings.variable || 'obj';\n    template.source = 'function(' + argument + '){\\n' + source + '}';\n\n    return template;\n  };\n\n  // Add a \"chain\" function. Start chaining a wrapped Underscore object.\n  _.chain = function(obj) {\n    var instance = _(obj);\n    instance._chain = true;\n    return instance;\n  };\n\n  // OOP\n  // ---------------\n  // If Underscore is called as a function, it returns a wrapped object that\n  // can be used OO-style. This wrapper holds altered versions of all the\n  // underscore functions. Wrapped objects may be chained.\n\n  // Helper function to continue chaining intermediate results.\n  var result = function(instance, obj) {\n    return instance._chain ? _(obj).chain() : obj;\n  };\n\n  // Add your own custom functions to the Underscore object.\n  _.mixin = function(obj) {\n    _.each(_.functions(obj), function(name) {\n      var func = _[name] = obj[name];\n      _.prototype[name] = function() {\n        var args = [this._wrapped];\n        push.apply(args, arguments);\n        return result(this, func.apply(_, args));\n      };\n    });\n  };\n\n  // Add all of the Underscore functions to the wrapper object.\n  _.mixin(_);\n\n  // Add all mutator Array functions to the wrapper.\n  _.each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {\n    var method = ArrayProto[name];\n    _.prototype[name] = function() {\n      var obj = this._wrapped;\n      method.apply(obj, arguments);\n      if ((name === 'shift' || name === 'splice') && obj.length === 0) delete obj[0];\n      return result(this, obj);\n    };\n  });\n\n  // Add all accessor Array functions to the wrapper.\n  _.each(['concat', 'join', 'slice'], function(name) {\n    var method = ArrayProto[name];\n    _.prototype[name] = function() {\n      return result(this, method.apply(this._wrapped, arguments));\n    };\n  });\n\n  // Extracts the result from a wrapped and chained object.\n  _.prototype.value = function() {\n    return this._wrapped;\n  };\n\n  // Provide unwrapping proxy for some methods used in engine operations\n  // such as arithmetic and JSON stringification.\n  _.prototype.valueOf = _.prototype.toJSON = _.prototype.value;\n\n  _.prototype.toString = function() {\n    return '' + this._wrapped;\n  };\n\n  // AMD registration happens at the end for compatibility with AMD loaders\n  // that may not enforce next-turn semantics on modules. Even though general\n  // practice for AMD registration is to be anonymous, underscore registers\n  // as a named module because, like jQuery, it is a base library that is\n  // popular enough to be bundled in a third party lib, but not be part of\n  // an AMD load request. Those cases could generate an error when an\n  // anonymous define() is called outside of a loader request.\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {\n      return _;\n    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  }\n}.call(this));\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 5 */
/* no static exports found */
/* all exports used */
/*!*******************************************!*\
  !*** ./~/core-js/library/modules/_wks.js ***!
  \*******************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var store      = __webpack_require__(/*! ./_shared */ 48)('wks')\n  , uid        = __webpack_require__(/*! ./_uid */ 52)\n  , Symbol     = __webpack_require__(/*! ./_global */ 10).Symbol\n  , USE_SYMBOL = typeof Symbol == 'function';\n\nvar $exports = module.exports = function(name){\n  return store[name] || (store[name] =\n    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));\n};\n\n$exports.store = store;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3drcy5qcz8zMDI3Il0sInNvdXJjZXNDb250ZW50IjpbInZhciBzdG9yZSAgICAgID0gcmVxdWlyZSgnLi9fc2hhcmVkJykoJ3drcycpXG4gICwgdWlkICAgICAgICA9IHJlcXVpcmUoJy4vX3VpZCcpXG4gICwgU3ltYm9sICAgICA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLlN5bWJvbFxuICAsIFVTRV9TWU1CT0wgPSB0eXBlb2YgU3ltYm9sID09ICdmdW5jdGlvbic7XG5cbnZhciAkZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24obmFtZSl7XG4gIHJldHVybiBzdG9yZVtuYW1lXSB8fCAoc3RvcmVbbmFtZV0gPVxuICAgIFVTRV9TWU1CT0wgJiYgU3ltYm9sW25hbWVdIHx8IChVU0VfU1lNQk9MID8gU3ltYm9sIDogdWlkKSgnU3ltYm9sLicgKyBuYW1lKSk7XG59O1xuXG4kZXhwb3J0cy5zdG9yZSA9IHN0b3JlO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fd2tzLmpzXG4vLyBtb2R1bGUgaWQgPSA1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 6 */
/* no static exports found */
/* all exports used */
/*!*******************************!*\
  !*** ./~/ramda/src/curryN.js ***!
  \*******************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var _arity = __webpack_require__(/*! ./internal/_arity */ 14);\nvar _curry1 = __webpack_require__(/*! ./internal/_curry1 */ 2);\nvar _curry2 = __webpack_require__(/*! ./internal/_curry2 */ 1);\nvar _curryN = __webpack_require__(/*! ./internal/_curryN */ 156);\n\n\n/**\n * Returns a curried equivalent of the provided function, with the specified\n * arity. The curried function has two unusual capabilities. First, its\n * arguments needn't be provided one at a time. If `g` is `R.curryN(3, f)`, the\n * following are equivalent:\n *\n *   - `g(1)(2)(3)`\n *   - `g(1)(2, 3)`\n *   - `g(1, 2)(3)`\n *   - `g(1, 2, 3)`\n *\n * Secondly, the special placeholder value `R.__` may be used to specify\n * \"gaps\", allowing partial application of any combination of arguments,\n * regardless of their positions. If `g` is as above and `_` is `R.__`, the\n * following are equivalent:\n *\n *   - `g(1, 2, 3)`\n *   - `g(_, 2, 3)(1)`\n *   - `g(_, _, 3)(1)(2)`\n *   - `g(_, _, 3)(1, 2)`\n *   - `g(_, 2)(1)(3)`\n *   - `g(_, 2)(1, 3)`\n *   - `g(_, 2)(_, 3)(1)`\n *\n * @func\n * @memberOf R\n * @since v0.5.0\n * @category Function\n * @sig Number -> (* -> a) -> (* -> a)\n * @param {Number} length The arity for the returned function.\n * @param {Function} fn The function to curry.\n * @return {Function} A new, curried function.\n * @see R.curry\n * @example\n *\n *      var sumArgs = (...args) => R.sum(args);\n *\n *      var curriedAddFourNumbers = R.curryN(4, sumArgs);\n *      var f = curriedAddFourNumbers(1, 2);\n *      var g = f(3);\n *      g(4); //=> 10\n */\nmodule.exports = _curry2(function curryN(length, fn) {\n  if (length === 1) {\n    return _curry1(fn);\n  }\n  return _arity(length, _curryN(length, [], fn));\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL34vcmFtZGEvc3JjL2N1cnJ5Ti5qcz9iMzY5Il0sInNvdXJjZXNDb250ZW50IjpbInZhciBfYXJpdHkgPSByZXF1aXJlKCcuL2ludGVybmFsL19hcml0eScpO1xudmFyIF9jdXJyeTEgPSByZXF1aXJlKCcuL2ludGVybmFsL19jdXJyeTEnKTtcbnZhciBfY3VycnkyID0gcmVxdWlyZSgnLi9pbnRlcm5hbC9fY3VycnkyJyk7XG52YXIgX2N1cnJ5TiA9IHJlcXVpcmUoJy4vaW50ZXJuYWwvX2N1cnJ5TicpO1xuXG5cbi8qKlxuICogUmV0dXJucyBhIGN1cnJpZWQgZXF1aXZhbGVudCBvZiB0aGUgcHJvdmlkZWQgZnVuY3Rpb24sIHdpdGggdGhlIHNwZWNpZmllZFxuICogYXJpdHkuIFRoZSBjdXJyaWVkIGZ1bmN0aW9uIGhhcyB0d28gdW51c3VhbCBjYXBhYmlsaXRpZXMuIEZpcnN0LCBpdHNcbiAqIGFyZ3VtZW50cyBuZWVkbid0IGJlIHByb3ZpZGVkIG9uZSBhdCBhIHRpbWUuIElmIGBnYCBpcyBgUi5jdXJyeU4oMywgZilgLCB0aGVcbiAqIGZvbGxvd2luZyBhcmUgZXF1aXZhbGVudDpcbiAqXG4gKiAgIC0gYGcoMSkoMikoMylgXG4gKiAgIC0gYGcoMSkoMiwgMylgXG4gKiAgIC0gYGcoMSwgMikoMylgXG4gKiAgIC0gYGcoMSwgMiwgMylgXG4gKlxuICogU2Vjb25kbHksIHRoZSBzcGVjaWFsIHBsYWNlaG9sZGVyIHZhbHVlIGBSLl9fYCBtYXkgYmUgdXNlZCB0byBzcGVjaWZ5XG4gKiBcImdhcHNcIiwgYWxsb3dpbmcgcGFydGlhbCBhcHBsaWNhdGlvbiBvZiBhbnkgY29tYmluYXRpb24gb2YgYXJndW1lbnRzLFxuICogcmVnYXJkbGVzcyBvZiB0aGVpciBwb3NpdGlvbnMuIElmIGBnYCBpcyBhcyBhYm92ZSBhbmQgYF9gIGlzIGBSLl9fYCwgdGhlXG4gKiBmb2xsb3dpbmcgYXJlIGVxdWl2YWxlbnQ6XG4gKlxuICogICAtIGBnKDEsIDIsIDMpYFxuICogICAtIGBnKF8sIDIsIDMpKDEpYFxuICogICAtIGBnKF8sIF8sIDMpKDEpKDIpYFxuICogICAtIGBnKF8sIF8sIDMpKDEsIDIpYFxuICogICAtIGBnKF8sIDIpKDEpKDMpYFxuICogICAtIGBnKF8sIDIpKDEsIDMpYFxuICogICAtIGBnKF8sIDIpKF8sIDMpKDEpYFxuICpcbiAqIEBmdW5jXG4gKiBAbWVtYmVyT2YgUlxuICogQHNpbmNlIHYwLjUuMFxuICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gKiBAc2lnIE51bWJlciAtPiAoKiAtPiBhKSAtPiAoKiAtPiBhKVxuICogQHBhcmFtIHtOdW1iZXJ9IGxlbmd0aCBUaGUgYXJpdHkgZm9yIHRoZSByZXR1cm5lZCBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBmdW5jdGlvbiB0byBjdXJyeS5cbiAqIEByZXR1cm4ge0Z1bmN0aW9ufSBBIG5ldywgY3VycmllZCBmdW5jdGlvbi5cbiAqIEBzZWUgUi5jdXJyeVxuICogQGV4YW1wbGVcbiAqXG4gKiAgICAgIHZhciBzdW1BcmdzID0gKC4uLmFyZ3MpID0+IFIuc3VtKGFyZ3MpO1xuICpcbiAqICAgICAgdmFyIGN1cnJpZWRBZGRGb3VyTnVtYmVycyA9IFIuY3VycnlOKDQsIHN1bUFyZ3MpO1xuICogICAgICB2YXIgZiA9IGN1cnJpZWRBZGRGb3VyTnVtYmVycygxLCAyKTtcbiAqICAgICAgdmFyIGcgPSBmKDMpO1xuICogICAgICBnKDQpOyAvLz0+IDEwXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gX2N1cnJ5MihmdW5jdGlvbiBjdXJyeU4obGVuZ3RoLCBmbikge1xuICBpZiAobGVuZ3RoID09PSAxKSB7XG4gICAgcmV0dXJuIF9jdXJyeTEoZm4pO1xuICB9XG4gIHJldHVybiBfYXJpdHkobGVuZ3RoLCBfY3VycnlOKGxlbmd0aCwgW10sIGZuKSk7XG59KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9yYW1kYS9zcmMvY3VycnlOLmpzXG4vLyBtb2R1bGUgaWQgPSA2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 7 */
/* no static exports found */
/* all exports used */
/*!*****************************************!*\
  !*** ./~/ramda/src/internal/_curry3.js ***!
  \*****************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var _curry1 = __webpack_require__(/*! ./_curry1 */ 2);\nvar _curry2 = __webpack_require__(/*! ./_curry2 */ 1);\nvar _isPlaceholder = __webpack_require__(/*! ./_isPlaceholder */ 25);\n\n\n/**\n * Optimized internal three-arity curry function.\n *\n * @private\n * @category Function\n * @param {Function} fn The function to curry.\n * @return {Function} The curried function.\n */\nmodule.exports = function _curry3(fn) {\n  return function f3(a, b, c) {\n    switch (arguments.length) {\n      case 0:\n        return f3;\n      case 1:\n        return _isPlaceholder(a) ? f3\n             : _curry2(function(_b, _c) { return fn(a, _b, _c); });\n      case 2:\n        return _isPlaceholder(a) && _isPlaceholder(b) ? f3\n             : _isPlaceholder(a) ? _curry2(function(_a, _c) { return fn(_a, b, _c); })\n             : _isPlaceholder(b) ? _curry2(function(_b, _c) { return fn(a, _b, _c); })\n             : _curry1(function(_c) { return fn(a, b, _c); });\n      default:\n        return _isPlaceholder(a) && _isPlaceholder(b) && _isPlaceholder(c) ? f3\n             : _isPlaceholder(a) && _isPlaceholder(b) ? _curry2(function(_a, _b) { return fn(_a, _b, c); })\n             : _isPlaceholder(a) && _isPlaceholder(c) ? _curry2(function(_a, _c) { return fn(_a, b, _c); })\n             : _isPlaceholder(b) && _isPlaceholder(c) ? _curry2(function(_b, _c) { return fn(a, _b, _c); })\n             : _isPlaceholder(a) ? _curry1(function(_a) { return fn(_a, b, c); })\n             : _isPlaceholder(b) ? _curry1(function(_b) { return fn(a, _b, c); })\n             : _isPlaceholder(c) ? _curry1(function(_c) { return fn(a, b, _c); })\n             : fn(a, b, c);\n    }\n  };\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL34vcmFtZGEvc3JjL2ludGVybmFsL19jdXJyeTMuanM/ODNlYiJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX2N1cnJ5MSA9IHJlcXVpcmUoJy4vX2N1cnJ5MScpO1xudmFyIF9jdXJyeTIgPSByZXF1aXJlKCcuL19jdXJyeTInKTtcbnZhciBfaXNQbGFjZWhvbGRlciA9IHJlcXVpcmUoJy4vX2lzUGxhY2Vob2xkZXInKTtcblxuXG4vKipcbiAqIE9wdGltaXplZCBpbnRlcm5hbCB0aHJlZS1hcml0eSBjdXJyeSBmdW5jdGlvbi5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgZnVuY3Rpb24gdG8gY3VycnkuXG4gKiBAcmV0dXJuIHtGdW5jdGlvbn0gVGhlIGN1cnJpZWQgZnVuY3Rpb24uXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gX2N1cnJ5Myhmbikge1xuICByZXR1cm4gZnVuY3Rpb24gZjMoYSwgYiwgYykge1xuICAgIHN3aXRjaCAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgY2FzZSAwOlxuICAgICAgICByZXR1cm4gZjM7XG4gICAgICBjYXNlIDE6XG4gICAgICAgIHJldHVybiBfaXNQbGFjZWhvbGRlcihhKSA/IGYzXG4gICAgICAgICAgICAgOiBfY3VycnkyKGZ1bmN0aW9uKF9iLCBfYykgeyByZXR1cm4gZm4oYSwgX2IsIF9jKTsgfSk7XG4gICAgICBjYXNlIDI6XG4gICAgICAgIHJldHVybiBfaXNQbGFjZWhvbGRlcihhKSAmJiBfaXNQbGFjZWhvbGRlcihiKSA/IGYzXG4gICAgICAgICAgICAgOiBfaXNQbGFjZWhvbGRlcihhKSA/IF9jdXJyeTIoZnVuY3Rpb24oX2EsIF9jKSB7IHJldHVybiBmbihfYSwgYiwgX2MpOyB9KVxuICAgICAgICAgICAgIDogX2lzUGxhY2Vob2xkZXIoYikgPyBfY3VycnkyKGZ1bmN0aW9uKF9iLCBfYykgeyByZXR1cm4gZm4oYSwgX2IsIF9jKTsgfSlcbiAgICAgICAgICAgICA6IF9jdXJyeTEoZnVuY3Rpb24oX2MpIHsgcmV0dXJuIGZuKGEsIGIsIF9jKTsgfSk7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gX2lzUGxhY2Vob2xkZXIoYSkgJiYgX2lzUGxhY2Vob2xkZXIoYikgJiYgX2lzUGxhY2Vob2xkZXIoYykgPyBmM1xuICAgICAgICAgICAgIDogX2lzUGxhY2Vob2xkZXIoYSkgJiYgX2lzUGxhY2Vob2xkZXIoYikgPyBfY3VycnkyKGZ1bmN0aW9uKF9hLCBfYikgeyByZXR1cm4gZm4oX2EsIF9iLCBjKTsgfSlcbiAgICAgICAgICAgICA6IF9pc1BsYWNlaG9sZGVyKGEpICYmIF9pc1BsYWNlaG9sZGVyKGMpID8gX2N1cnJ5MihmdW5jdGlvbihfYSwgX2MpIHsgcmV0dXJuIGZuKF9hLCBiLCBfYyk7IH0pXG4gICAgICAgICAgICAgOiBfaXNQbGFjZWhvbGRlcihiKSAmJiBfaXNQbGFjZWhvbGRlcihjKSA/IF9jdXJyeTIoZnVuY3Rpb24oX2IsIF9jKSB7IHJldHVybiBmbihhLCBfYiwgX2MpOyB9KVxuICAgICAgICAgICAgIDogX2lzUGxhY2Vob2xkZXIoYSkgPyBfY3VycnkxKGZ1bmN0aW9uKF9hKSB7IHJldHVybiBmbihfYSwgYiwgYyk7IH0pXG4gICAgICAgICAgICAgOiBfaXNQbGFjZWhvbGRlcihiKSA/IF9jdXJyeTEoZnVuY3Rpb24oX2IpIHsgcmV0dXJuIGZuKGEsIF9iLCBjKTsgfSlcbiAgICAgICAgICAgICA6IF9pc1BsYWNlaG9sZGVyKGMpID8gX2N1cnJ5MShmdW5jdGlvbihfYykgeyByZXR1cm4gZm4oYSwgYiwgX2MpOyB9KVxuICAgICAgICAgICAgIDogZm4oYSwgYiwgYyk7XG4gICAgfVxuICB9O1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9yYW1kYS9zcmMvaW50ZXJuYWwvX2N1cnJ5My5qc1xuLy8gbW9kdWxlIGlkID0gN1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 8 */
/* no static exports found */
/* all exports used */
/*!****************************!*\
  !*** ./~/ramda/src/map.js ***!
  \****************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var _curry2 = __webpack_require__(/*! ./internal/_curry2 */ 1);\nvar _dispatchable = __webpack_require__(/*! ./internal/_dispatchable */ 58);\nvar _map = __webpack_require__(/*! ./internal/_map */ 61);\nvar _reduce = __webpack_require__(/*! ./internal/_reduce */ 16);\nvar _xmap = __webpack_require__(/*! ./internal/_xmap */ 171);\nvar curryN = __webpack_require__(/*! ./curryN */ 6);\nvar keys = __webpack_require__(/*! ./keys */ 17);\n\n\n/**\n * Takes a function and\n * a [functor](https://github.com/fantasyland/fantasy-land#functor),\n * applies the function to each of the functor's values, and returns\n * a functor of the same shape.\n *\n * Ramda provides suitable `map` implementations for `Array` and `Object`,\n * so this function may be applied to `[1, 2, 3]` or `{x: 1, y: 2, z: 3}`.\n *\n * Dispatches to the `map` method of the second argument, if present.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * Also treats functions as functors and will compose them together.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig Functor f => (a -> b) -> f a -> f b\n * @param {Function} fn The function to be called on every element of the input `list`.\n * @param {Array} list The list to be iterated over.\n * @return {Array} The new list.\n * @see R.transduce, R.addIndex\n * @example\n *\n *      var double = x => x * 2;\n *\n *      R.map(double, [1, 2, 3]); //=> [2, 4, 6]\n *\n *      R.map(double, {x: 1, y: 2, z: 3}); //=> {x: 2, y: 4, z: 6}\n * @symb R.map(f, [a, b]) = [f(a), f(b)]\n * @symb R.map(f, { x: a, y: b }) = { x: f(a), y: f(b) }\n * @symb R.map(f, functor_o) = functor_o.map(f)\n */\nmodule.exports = _curry2(_dispatchable(['map'], _xmap, function map(fn, functor) {\n  switch (Object.prototype.toString.call(functor)) {\n    case '[object Function]':\n      return curryN(functor.length, function() {\n        return fn.call(this, functor.apply(this, arguments));\n      });\n    case '[object Object]':\n      return _reduce(function(acc, key) {\n        acc[key] = fn(functor[key]);\n        return acc;\n      }, {}, keys(functor));\n    default:\n      return _map(fn, functor);\n  }\n}));\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL34vcmFtZGEvc3JjL21hcC5qcz81MGRiIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBfY3VycnkyID0gcmVxdWlyZSgnLi9pbnRlcm5hbC9fY3VycnkyJyk7XG52YXIgX2Rpc3BhdGNoYWJsZSA9IHJlcXVpcmUoJy4vaW50ZXJuYWwvX2Rpc3BhdGNoYWJsZScpO1xudmFyIF9tYXAgPSByZXF1aXJlKCcuL2ludGVybmFsL19tYXAnKTtcbnZhciBfcmVkdWNlID0gcmVxdWlyZSgnLi9pbnRlcm5hbC9fcmVkdWNlJyk7XG52YXIgX3htYXAgPSByZXF1aXJlKCcuL2ludGVybmFsL194bWFwJyk7XG52YXIgY3VycnlOID0gcmVxdWlyZSgnLi9jdXJyeU4nKTtcbnZhciBrZXlzID0gcmVxdWlyZSgnLi9rZXlzJyk7XG5cblxuLyoqXG4gKiBUYWtlcyBhIGZ1bmN0aW9uIGFuZFxuICogYSBbZnVuY3Rvcl0oaHR0cHM6Ly9naXRodWIuY29tL2ZhbnRhc3lsYW5kL2ZhbnRhc3ktbGFuZCNmdW5jdG9yKSxcbiAqIGFwcGxpZXMgdGhlIGZ1bmN0aW9uIHRvIGVhY2ggb2YgdGhlIGZ1bmN0b3IncyB2YWx1ZXMsIGFuZCByZXR1cm5zXG4gKiBhIGZ1bmN0b3Igb2YgdGhlIHNhbWUgc2hhcGUuXG4gKlxuICogUmFtZGEgcHJvdmlkZXMgc3VpdGFibGUgYG1hcGAgaW1wbGVtZW50YXRpb25zIGZvciBgQXJyYXlgIGFuZCBgT2JqZWN0YCxcbiAqIHNvIHRoaXMgZnVuY3Rpb24gbWF5IGJlIGFwcGxpZWQgdG8gYFsxLCAyLCAzXWAgb3IgYHt4OiAxLCB5OiAyLCB6OiAzfWAuXG4gKlxuICogRGlzcGF0Y2hlcyB0byB0aGUgYG1hcGAgbWV0aG9kIG9mIHRoZSBzZWNvbmQgYXJndW1lbnQsIGlmIHByZXNlbnQuXG4gKlxuICogQWN0cyBhcyBhIHRyYW5zZHVjZXIgaWYgYSB0cmFuc2Zvcm1lciBpcyBnaXZlbiBpbiBsaXN0IHBvc2l0aW9uLlxuICpcbiAqIEFsc28gdHJlYXRzIGZ1bmN0aW9ucyBhcyBmdW5jdG9ycyBhbmQgd2lsbCBjb21wb3NlIHRoZW0gdG9nZXRoZXIuXG4gKlxuICogQGZ1bmNcbiAqIEBtZW1iZXJPZiBSXG4gKiBAc2luY2UgdjAuMS4wXG4gKiBAY2F0ZWdvcnkgTGlzdFxuICogQHNpZyBGdW5jdG9yIGYgPT4gKGEgLT4gYikgLT4gZiBhIC0+IGYgYlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGZ1bmN0aW9uIHRvIGJlIGNhbGxlZCBvbiBldmVyeSBlbGVtZW50IG9mIHRoZSBpbnB1dCBgbGlzdGAuXG4gKiBAcGFyYW0ge0FycmF5fSBsaXN0IFRoZSBsaXN0IHRvIGJlIGl0ZXJhdGVkIG92ZXIuXG4gKiBAcmV0dXJuIHtBcnJheX0gVGhlIG5ldyBsaXN0LlxuICogQHNlZSBSLnRyYW5zZHVjZSwgUi5hZGRJbmRleFxuICogQGV4YW1wbGVcbiAqXG4gKiAgICAgIHZhciBkb3VibGUgPSB4ID0+IHggKiAyO1xuICpcbiAqICAgICAgUi5tYXAoZG91YmxlLCBbMSwgMiwgM10pOyAvLz0+IFsyLCA0LCA2XVxuICpcbiAqICAgICAgUi5tYXAoZG91YmxlLCB7eDogMSwgeTogMiwgejogM30pOyAvLz0+IHt4OiAyLCB5OiA0LCB6OiA2fVxuICogQHN5bWIgUi5tYXAoZiwgW2EsIGJdKSA9IFtmKGEpLCBmKGIpXVxuICogQHN5bWIgUi5tYXAoZiwgeyB4OiBhLCB5OiBiIH0pID0geyB4OiBmKGEpLCB5OiBmKGIpIH1cbiAqIEBzeW1iIFIubWFwKGYsIGZ1bmN0b3JfbykgPSBmdW5jdG9yX28ubWFwKGYpXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gX2N1cnJ5MihfZGlzcGF0Y2hhYmxlKFsnbWFwJ10sIF94bWFwLCBmdW5jdGlvbiBtYXAoZm4sIGZ1bmN0b3IpIHtcbiAgc3dpdGNoIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZnVuY3RvcikpIHtcbiAgICBjYXNlICdbb2JqZWN0IEZ1bmN0aW9uXSc6XG4gICAgICByZXR1cm4gY3VycnlOKGZ1bmN0b3IubGVuZ3RoLCBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGZuLmNhbGwodGhpcywgZnVuY3Rvci5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgICAgIH0pO1xuICAgIGNhc2UgJ1tvYmplY3QgT2JqZWN0XSc6XG4gICAgICByZXR1cm4gX3JlZHVjZShmdW5jdGlvbihhY2MsIGtleSkge1xuICAgICAgICBhY2Nba2V5XSA9IGZuKGZ1bmN0b3Jba2V5XSk7XG4gICAgICAgIHJldHVybiBhY2M7XG4gICAgICB9LCB7fSwga2V5cyhmdW5jdG9yKSk7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBfbWFwKGZuLCBmdW5jdG9yKTtcbiAgfVxufSkpO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3JhbWRhL3NyYy9tYXAuanNcbi8vIG1vZHVsZSBpZCA9IDhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 9 */
/* no static exports found */
/* all exports used */
/*!********************************!*\
  !*** ./src/utils/reference.js ***!
  \********************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _curry = __webpack_require__(/*! ramda/src/curry */ 24);\n\nvar _curry2 = _interopRequireDefault(_curry);\n\nvar _tangramReference = __webpack_require__(/*! tangram-reference */ 67);\n\nvar _tangramReference2 = _interopRequireDefault(_tangramReference);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar Ref = _tangramReference2.default.load('1.0.0');\n\nvar TangramReference = {};\n\nexports.default = TangramReference;\n\n\nvar getProperty = (0, _curry2.default)(function (type, prop) {\n\tvar obj = Ref.symbolizers[type];\n\treturn prop ? obj[prop] : obj;\n});\n\nTangramReference.getPoint = getProperty('markers');\n\nTangramReference.getLine = getProperty('line');\n\nTangramReference.getPolygon = getProperty('polygon');\n\nTangramReference.getText = getProperty('text');\n\nTangramReference.getPolygonPattern = getProperty('polygon-pattern');\n\nTangramReference.checkSymbolizer = (0, _curry2.default)(function (sym, c3ss) {\n\treturn c3ss.symbolizers.indexOf(sym) !== -1 ? c3ss : null;\n});\n\nTangramReference.checkType = (0, _curry2.default)(function (ref, val) {\n\treturn ref.type.indexOf(val) !== -1 ? val : null;\n});//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9zcmMvdXRpbHMvcmVmZXJlbmNlLmpzPzU3YTAiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3VycnkgfSBmcm9tICdyYW1kYSc7XG5pbXBvcnQgcmVmZXJlbmNlIGZyb20gJ3RhbmdyYW0tcmVmZXJlbmNlJztcblxuY29uc3QgUmVmID0gcmVmZXJlbmNlLmxvYWQoJzEuMC4wJyk7XG5cbnZhciBUYW5ncmFtUmVmZXJlbmNlID0ge307XG5cbmV4cG9ydCBkZWZhdWx0IFRhbmdyYW1SZWZlcmVuY2U7XG5cbmNvbnN0IGdldFByb3BlcnR5ID0gY3VycnkoZnVuY3Rpb24gKHR5cGUsIHByb3ApIHtcblx0Y29uc3Qgb2JqID0gUmVmLnN5bWJvbGl6ZXJzW3R5cGVdO1xuXHRyZXR1cm4gcHJvcCA/IG9ialtwcm9wXSA6IG9iajtcbn0pO1xuXG5UYW5ncmFtUmVmZXJlbmNlLmdldFBvaW50ID0gZ2V0UHJvcGVydHkoJ21hcmtlcnMnKTtcblxuVGFuZ3JhbVJlZmVyZW5jZS5nZXRMaW5lID0gZ2V0UHJvcGVydHkoJ2xpbmUnKTtcblxuVGFuZ3JhbVJlZmVyZW5jZS5nZXRQb2x5Z29uID0gZ2V0UHJvcGVydHkoJ3BvbHlnb24nKTtcblxuVGFuZ3JhbVJlZmVyZW5jZS5nZXRUZXh0ID0gZ2V0UHJvcGVydHkoJ3RleHQnKTtcblxuVGFuZ3JhbVJlZmVyZW5jZS5nZXRQb2x5Z29uUGF0dGVybiA9IGdldFByb3BlcnR5KCdwb2x5Z29uLXBhdHRlcm4nKTtcblxuVGFuZ3JhbVJlZmVyZW5jZS5jaGVja1N5bWJvbGl6ZXIgPSBjdXJyeShmdW5jdGlvbihzeW0sIGMzc3MpIHtcblx0cmV0dXJuIGMzc3Muc3ltYm9saXplcnMuaW5kZXhPZihzeW0pICE9PSAtMSA/IGMzc3MgOiBudWxsO1xufSk7XG5cblRhbmdyYW1SZWZlcmVuY2UuY2hlY2tUeXBlID0gY3VycnkoZnVuY3Rpb24ocmVmLCB2YWwpIHtcblx0cmV0dXJuIHJlZi50eXBlLmluZGV4T2YodmFsKSAhPT0gLTEgPyB2YWwgOiBudWxsO1xufSk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gc3JjL3V0aWxzL3JlZmVyZW5jZS5qcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUNBO0FBQ0E7Ozs7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 10 */
/* no static exports found */
/* all exports used */
/*!**********************************************!*\
  !*** ./~/core-js/library/modules/_global.js ***!
  \**********************************************/
/***/ (function(module, exports) {

eval("// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028\nvar global = module.exports = typeof window != 'undefined' && window.Math == Math\n  ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();\nif(typeof __g == 'number')__g = global; // eslint-disable-line no-undef//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTAuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19nbG9iYWwuanM/NzdhYSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvODYjaXNzdWVjb21tZW50LTExNTc1OTAyOFxudmFyIGdsb2JhbCA9IG1vZHVsZS5leHBvcnRzID0gdHlwZW9mIHdpbmRvdyAhPSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuTWF0aCA9PSBNYXRoXG4gID8gd2luZG93IDogdHlwZW9mIHNlbGYgIT0gJ3VuZGVmaW5lZCcgJiYgc2VsZi5NYXRoID09IE1hdGggPyBzZWxmIDogRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcbmlmKHR5cGVvZiBfX2cgPT0gJ251bWJlcicpX19nID0gZ2xvYmFsOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19nbG9iYWwuanNcbi8vIG1vZHVsZSBpZCA9IDEwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 11 */
/* no static exports found */
/* all exports used */
/*!*******************************************!*\
  !*** ./~/node-libs-browser/mock/empty.js ***!
  \*******************************************/
/***/ (function(module, exports) {

eval("//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTEuanMiLCJzb3VyY2VzIjpbXSwibWFwcGluZ3MiOiIiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 12 */
/* no static exports found */
/* all exports used */
/*!************************************!*\
  !*** ./~/path-browserify/index.js ***!
  \************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// resolves . and .. elements in a path array with directory names there\n// must be no slashes, empty elements, or device names (c:\\) in the array\n// (so also no leading and trailing slashes - it does not distinguish\n// relative and absolute paths)\nfunction normalizeArray(parts, allowAboveRoot) {\n  // if the path tries to go above the root, `up` ends up > 0\n  var up = 0;\n  for (var i = parts.length - 1; i >= 0; i--) {\n    var last = parts[i];\n    if (last === '.') {\n      parts.splice(i, 1);\n    } else if (last === '..') {\n      parts.splice(i, 1);\n      up++;\n    } else if (up) {\n      parts.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (allowAboveRoot) {\n    for (; up--; up) {\n      parts.unshift('..');\n    }\n  }\n\n  return parts;\n}\n\n// Split a filename into [root, dir, basename, ext], unix version\n// 'root' is just a slash, or nothing.\nvar splitPathRe =\n    /^(\\/?|)([\\s\\S]*?)((?:\\.{1,2}|[^\\/]+?|)(\\.[^.\\/]*|))(?:[\\/]*)$/;\nvar splitPath = function(filename) {\n  return splitPathRe.exec(filename).slice(1);\n};\n\n// path.resolve([from ...], to)\n// posix version\nexports.resolve = function() {\n  var resolvedPath = '',\n      resolvedAbsolute = false;\n\n  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n    var path = (i >= 0) ? arguments[i] : process.cwd();\n\n    // Skip empty and invalid entries\n    if (typeof path !== 'string') {\n      throw new TypeError('Arguments to path.resolve must be strings');\n    } else if (!path) {\n      continue;\n    }\n\n    resolvedPath = path + '/' + resolvedPath;\n    resolvedAbsolute = path.charAt(0) === '/';\n  }\n\n  // At this point the path should be resolved to a full absolute path, but\n  // handle relative paths to be safe (might happen when process.cwd() fails)\n\n  // Normalize the path\n  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {\n    return !!p;\n  }), !resolvedAbsolute).join('/');\n\n  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';\n};\n\n// path.normalize(path)\n// posix version\nexports.normalize = function(path) {\n  var isAbsolute = exports.isAbsolute(path),\n      trailingSlash = substr(path, -1) === '/';\n\n  // Normalize the path\n  path = normalizeArray(filter(path.split('/'), function(p) {\n    return !!p;\n  }), !isAbsolute).join('/');\n\n  if (!path && !isAbsolute) {\n    path = '.';\n  }\n  if (path && trailingSlash) {\n    path += '/';\n  }\n\n  return (isAbsolute ? '/' : '') + path;\n};\n\n// posix version\nexports.isAbsolute = function(path) {\n  return path.charAt(0) === '/';\n};\n\n// posix version\nexports.join = function() {\n  var paths = Array.prototype.slice.call(arguments, 0);\n  return exports.normalize(filter(paths, function(p, index) {\n    if (typeof p !== 'string') {\n      throw new TypeError('Arguments to path.join must be strings');\n    }\n    return p;\n  }).join('/'));\n};\n\n\n// path.relative(from, to)\n// posix version\nexports.relative = function(from, to) {\n  from = exports.resolve(from).substr(1);\n  to = exports.resolve(to).substr(1);\n\n  function trim(arr) {\n    var start = 0;\n    for (; start < arr.length; start++) {\n      if (arr[start] !== '') break;\n    }\n\n    var end = arr.length - 1;\n    for (; end >= 0; end--) {\n      if (arr[end] !== '') break;\n    }\n\n    if (start > end) return [];\n    return arr.slice(start, end - start + 1);\n  }\n\n  var fromParts = trim(from.split('/'));\n  var toParts = trim(to.split('/'));\n\n  var length = Math.min(fromParts.length, toParts.length);\n  var samePartsLength = length;\n  for (var i = 0; i < length; i++) {\n    if (fromParts[i] !== toParts[i]) {\n      samePartsLength = i;\n      break;\n    }\n  }\n\n  var outputParts = [];\n  for (var i = samePartsLength; i < fromParts.length; i++) {\n    outputParts.push('..');\n  }\n\n  outputParts = outputParts.concat(toParts.slice(samePartsLength));\n\n  return outputParts.join('/');\n};\n\nexports.sep = '/';\nexports.delimiter = ':';\n\nexports.dirname = function(path) {\n  var result = splitPath(path),\n      root = result[0],\n      dir = result[1];\n\n  if (!root && !dir) {\n    // No dirname whatsoever\n    return '.';\n  }\n\n  if (dir) {\n    // It has a dirname, strip trailing slash\n    dir = dir.substr(0, dir.length - 1);\n  }\n\n  return root + dir;\n};\n\n\nexports.basename = function(path, ext) {\n  var f = splitPath(path)[2];\n  // TODO: make this comparison case-insensitive on windows?\n  if (ext && f.substr(-1 * ext.length) === ext) {\n    f = f.substr(0, f.length - ext.length);\n  }\n  return f;\n};\n\n\nexports.extname = function(path) {\n  return splitPath(path)[3];\n};\n\nfunction filter (xs, f) {\n    if (xs.filter) return xs.filter(f);\n    var res = [];\n    for (var i = 0; i < xs.length; i++) {\n        if (f(xs[i], i, xs)) res.push(xs[i]);\n    }\n    return res;\n}\n\n// String.prototype.substr - negative index don't work in IE8\nvar substr = 'ab'.substr(-1) === 'b'\n    ? function (str, start, len) { return str.substr(start, len) }\n    : function (str, start, len) {\n        if (start < 0) start = str.length + start;\n        return str.substr(start, len);\n    }\n;\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./../process/browser.js */ 36)))//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 13 */
/* no static exports found */
/* all exports used */
/*!********************************!*\
  !*** ./~/ramda/src/compose.js ***!
  \********************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var pipe = __webpack_require__(/*! ./pipe */ 183);\nvar reverse = __webpack_require__(/*! ./reverse */ 187);\n\n\n/**\n * Performs right-to-left function composition. The rightmost function may have\n * any arity; the remaining functions must be unary.\n *\n * **Note:** The result of compose is not automatically curried.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig ((y -> z), (x -> y), ..., (o -> p), ((a, b, ..., n) -> o)) -> ((a, b, ..., n) -> z)\n * @param {...Function} ...functions The functions to compose\n * @return {Function}\n * @see R.pipe\n * @example\n *\n *      var classyGreeting = (firstName, lastName) => \"The name's \" + lastName + \", \" + firstName + \" \" + lastName\n *      var yellGreeting = R.compose(R.toUpper, classyGreeting);\n *      yellGreeting('James', 'Bond'); //=> \"THE NAME'S BOND, JAMES BOND\"\n *\n *      R.compose(Math.abs, R.add(1), R.multiply(2))(-4) //=> 7\n *\n * @symb R.compose(f, g, h)(a, b) = f(g(h(a, b)))\n */\nmodule.exports = function compose() {\n  if (arguments.length === 0) {\n    throw new Error('compose requires at least one argument');\n  }\n  return pipe.apply(this, reverse(arguments));\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3JhbWRhL3NyYy9jb21wb3NlLmpzPzVmOGUiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIHBpcGUgPSByZXF1aXJlKCcuL3BpcGUnKTtcbnZhciByZXZlcnNlID0gcmVxdWlyZSgnLi9yZXZlcnNlJyk7XG5cblxuLyoqXG4gKiBQZXJmb3JtcyByaWdodC10by1sZWZ0IGZ1bmN0aW9uIGNvbXBvc2l0aW9uLiBUaGUgcmlnaHRtb3N0IGZ1bmN0aW9uIG1heSBoYXZlXG4gKiBhbnkgYXJpdHk7IHRoZSByZW1haW5pbmcgZnVuY3Rpb25zIG11c3QgYmUgdW5hcnkuXG4gKlxuICogKipOb3RlOioqIFRoZSByZXN1bHQgb2YgY29tcG9zZSBpcyBub3QgYXV0b21hdGljYWxseSBjdXJyaWVkLlxuICpcbiAqIEBmdW5jXG4gKiBAbWVtYmVyT2YgUlxuICogQHNpbmNlIHYwLjEuMFxuICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gKiBAc2lnICgoeSAtPiB6KSwgKHggLT4geSksIC4uLiwgKG8gLT4gcCksICgoYSwgYiwgLi4uLCBuKSAtPiBvKSkgLT4gKChhLCBiLCAuLi4sIG4pIC0+IHopXG4gKiBAcGFyYW0gey4uLkZ1bmN0aW9ufSAuLi5mdW5jdGlvbnMgVGhlIGZ1bmN0aW9ucyB0byBjb21wb3NlXG4gKiBAcmV0dXJuIHtGdW5jdGlvbn1cbiAqIEBzZWUgUi5waXBlXG4gKiBAZXhhbXBsZVxuICpcbiAqICAgICAgdmFyIGNsYXNzeUdyZWV0aW5nID0gKGZpcnN0TmFtZSwgbGFzdE5hbWUpID0+IFwiVGhlIG5hbWUncyBcIiArIGxhc3ROYW1lICsgXCIsIFwiICsgZmlyc3ROYW1lICsgXCIgXCIgKyBsYXN0TmFtZVxuICogICAgICB2YXIgeWVsbEdyZWV0aW5nID0gUi5jb21wb3NlKFIudG9VcHBlciwgY2xhc3N5R3JlZXRpbmcpO1xuICogICAgICB5ZWxsR3JlZXRpbmcoJ0phbWVzJywgJ0JvbmQnKTsgLy89PiBcIlRIRSBOQU1FJ1MgQk9ORCwgSkFNRVMgQk9ORFwiXG4gKlxuICogICAgICBSLmNvbXBvc2UoTWF0aC5hYnMsIFIuYWRkKDEpLCBSLm11bHRpcGx5KDIpKSgtNCkgLy89PiA3XG4gKlxuICogQHN5bWIgUi5jb21wb3NlKGYsIGcsIGgpKGEsIGIpID0gZihnKGgoYSwgYikpKVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNvbXBvc2UoKSB7XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjb21wb3NlIHJlcXVpcmVzIGF0IGxlYXN0IG9uZSBhcmd1bWVudCcpO1xuICB9XG4gIHJldHVybiBwaXBlLmFwcGx5KHRoaXMsIHJldmVyc2UoYXJndW1lbnRzKSk7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3JhbWRhL3NyYy9jb21wb3NlLmpzXG4vLyBtb2R1bGUgaWQgPSAxM1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 14 */
/* no static exports found */
/* all exports used */
/*!****************************************!*\
  !*** ./~/ramda/src/internal/_arity.js ***!
  \****************************************/
/***/ (function(module, exports) {

eval("module.exports = function _arity(n, fn) {\n  /* eslint-disable no-unused-vars */\n  switch (n) {\n    case 0: return function() { return fn.apply(this, arguments); };\n    case 1: return function(a0) { return fn.apply(this, arguments); };\n    case 2: return function(a0, a1) { return fn.apply(this, arguments); };\n    case 3: return function(a0, a1, a2) { return fn.apply(this, arguments); };\n    case 4: return function(a0, a1, a2, a3) { return fn.apply(this, arguments); };\n    case 5: return function(a0, a1, a2, a3, a4) { return fn.apply(this, arguments); };\n    case 6: return function(a0, a1, a2, a3, a4, a5) { return fn.apply(this, arguments); };\n    case 7: return function(a0, a1, a2, a3, a4, a5, a6) { return fn.apply(this, arguments); };\n    case 8: return function(a0, a1, a2, a3, a4, a5, a6, a7) { return fn.apply(this, arguments); };\n    case 9: return function(a0, a1, a2, a3, a4, a5, a6, a7, a8) { return fn.apply(this, arguments); };\n    case 10: return function(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9) { return fn.apply(this, arguments); };\n    default: throw new Error('First argument to _arity must be a non-negative integer no greater than ten');\n  }\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTQuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3JhbWRhL3NyYy9pbnRlcm5hbC9fYXJpdHkuanM/NjIwMCJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIF9hcml0eShuLCBmbikge1xuICAvKiBlc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtdmFycyAqL1xuICBzd2l0Y2ggKG4pIHtcbiAgICBjYXNlIDA6IHJldHVybiBmdW5jdGlvbigpIHsgcmV0dXJuIGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH07XG4gICAgY2FzZSAxOiByZXR1cm4gZnVuY3Rpb24oYTApIHsgcmV0dXJuIGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH07XG4gICAgY2FzZSAyOiByZXR1cm4gZnVuY3Rpb24oYTAsIGExKSB7IHJldHVybiBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9O1xuICAgIGNhc2UgMzogcmV0dXJuIGZ1bmN0aW9uKGEwLCBhMSwgYTIpIHsgcmV0dXJuIGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH07XG4gICAgY2FzZSA0OiByZXR1cm4gZnVuY3Rpb24oYTAsIGExLCBhMiwgYTMpIHsgcmV0dXJuIGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH07XG4gICAgY2FzZSA1OiByZXR1cm4gZnVuY3Rpb24oYTAsIGExLCBhMiwgYTMsIGE0KSB7IHJldHVybiBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9O1xuICAgIGNhc2UgNjogcmV0dXJuIGZ1bmN0aW9uKGEwLCBhMSwgYTIsIGEzLCBhNCwgYTUpIHsgcmV0dXJuIGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH07XG4gICAgY2FzZSA3OiByZXR1cm4gZnVuY3Rpb24oYTAsIGExLCBhMiwgYTMsIGE0LCBhNSwgYTYpIHsgcmV0dXJuIGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH07XG4gICAgY2FzZSA4OiByZXR1cm4gZnVuY3Rpb24oYTAsIGExLCBhMiwgYTMsIGE0LCBhNSwgYTYsIGE3KSB7IHJldHVybiBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9O1xuICAgIGNhc2UgOTogcmV0dXJuIGZ1bmN0aW9uKGEwLCBhMSwgYTIsIGEzLCBhNCwgYTUsIGE2LCBhNywgYTgpIHsgcmV0dXJuIGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH07XG4gICAgY2FzZSAxMDogcmV0dXJuIGZ1bmN0aW9uKGEwLCBhMSwgYTIsIGEzLCBhNCwgYTUsIGE2LCBhNywgYTgsIGE5KSB7IHJldHVybiBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9O1xuICAgIGRlZmF1bHQ6IHRocm93IG5ldyBFcnJvcignRmlyc3QgYXJndW1lbnQgdG8gX2FyaXR5IG11c3QgYmUgYSBub24tbmVnYXRpdmUgaW50ZWdlciBubyBncmVhdGVyIHRoYW4gdGVuJyk7XG4gIH1cbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcmFtZGEvc3JjL2ludGVybmFsL19hcml0eS5qc1xuLy8gbW9kdWxlIGlkID0gMTRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 15 */
/* no static exports found */
/* all exports used */
/*!**************************************!*\
  !*** ./~/ramda/src/internal/_has.js ***!
  \**************************************/
/***/ (function(module, exports) {

eval("module.exports = function _has(prop, obj) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTUuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3JhbWRhL3NyYy9pbnRlcm5hbC9faGFzLmpzPzU5ZTYiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBfaGFzKHByb3AsIG9iaikge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCk7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3JhbWRhL3NyYy9pbnRlcm5hbC9faGFzLmpzXG4vLyBtb2R1bGUgaWQgPSAxNVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 16 */
/* no static exports found */
/* all exports used */
/*!*****************************************!*\
  !*** ./~/ramda/src/internal/_reduce.js ***!
  \*****************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var _xwrap = __webpack_require__(/*! ./_xwrap */ 172);\nvar bind = __webpack_require__(/*! ../bind */ 143);\nvar isArrayLike = __webpack_require__(/*! ../isArrayLike */ 174);\n\n\nmodule.exports = (function() {\n  function _arrayReduce(xf, acc, list) {\n    var idx = 0;\n    var len = list.length;\n    while (idx < len) {\n      acc = xf['@@transducer/step'](acc, list[idx]);\n      if (acc && acc['@@transducer/reduced']) {\n        acc = acc['@@transducer/value'];\n        break;\n      }\n      idx += 1;\n    }\n    return xf['@@transducer/result'](acc);\n  }\n\n  function _iterableReduce(xf, acc, iter) {\n    var step = iter.next();\n    while (!step.done) {\n      acc = xf['@@transducer/step'](acc, step.value);\n      if (acc && acc['@@transducer/reduced']) {\n        acc = acc['@@transducer/value'];\n        break;\n      }\n      step = iter.next();\n    }\n    return xf['@@transducer/result'](acc);\n  }\n\n  function _methodReduce(xf, acc, obj) {\n    return xf['@@transducer/result'](obj.reduce(bind(xf['@@transducer/step'], xf), acc));\n  }\n\n  var symIterator = (typeof Symbol !== 'undefined') ? Symbol.iterator : '@@iterator';\n  return function _reduce(fn, acc, list) {\n    if (typeof fn === 'function') {\n      fn = _xwrap(fn);\n    }\n    if (isArrayLike(list)) {\n      return _arrayReduce(fn, acc, list);\n    }\n    if (typeof list.reduce === 'function') {\n      return _methodReduce(fn, acc, list);\n    }\n    if (list[symIterator] != null) {\n      return _iterableReduce(fn, acc, list[symIterator]());\n    }\n    if (typeof list.next === 'function') {\n      return _iterableReduce(fn, acc, list);\n    }\n    throw new TypeError('reduce: list must be array or iterable');\n  };\n}());\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTYuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3JhbWRhL3NyYy9pbnRlcm5hbC9fcmVkdWNlLmpzP2M3NTMiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIF94d3JhcCA9IHJlcXVpcmUoJy4vX3h3cmFwJyk7XG52YXIgYmluZCA9IHJlcXVpcmUoJy4uL2JpbmQnKTtcbnZhciBpc0FycmF5TGlrZSA9IHJlcXVpcmUoJy4uL2lzQXJyYXlMaWtlJyk7XG5cblxubW9kdWxlLmV4cG9ydHMgPSAoZnVuY3Rpb24oKSB7XG4gIGZ1bmN0aW9uIF9hcnJheVJlZHVjZSh4ZiwgYWNjLCBsaXN0KSB7XG4gICAgdmFyIGlkeCA9IDA7XG4gICAgdmFyIGxlbiA9IGxpc3QubGVuZ3RoO1xuICAgIHdoaWxlIChpZHggPCBsZW4pIHtcbiAgICAgIGFjYyA9IHhmWydAQHRyYW5zZHVjZXIvc3RlcCddKGFjYywgbGlzdFtpZHhdKTtcbiAgICAgIGlmIChhY2MgJiYgYWNjWydAQHRyYW5zZHVjZXIvcmVkdWNlZCddKSB7XG4gICAgICAgIGFjYyA9IGFjY1snQEB0cmFuc2R1Y2VyL3ZhbHVlJ107XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgaWR4ICs9IDE7XG4gICAgfVxuICAgIHJldHVybiB4ZlsnQEB0cmFuc2R1Y2VyL3Jlc3VsdCddKGFjYyk7XG4gIH1cblxuICBmdW5jdGlvbiBfaXRlcmFibGVSZWR1Y2UoeGYsIGFjYywgaXRlcikge1xuICAgIHZhciBzdGVwID0gaXRlci5uZXh0KCk7XG4gICAgd2hpbGUgKCFzdGVwLmRvbmUpIHtcbiAgICAgIGFjYyA9IHhmWydAQHRyYW5zZHVjZXIvc3RlcCddKGFjYywgc3RlcC52YWx1ZSk7XG4gICAgICBpZiAoYWNjICYmIGFjY1snQEB0cmFuc2R1Y2VyL3JlZHVjZWQnXSkge1xuICAgICAgICBhY2MgPSBhY2NbJ0BAdHJhbnNkdWNlci92YWx1ZSddO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIHN0ZXAgPSBpdGVyLm5leHQoKTtcbiAgICB9XG4gICAgcmV0dXJuIHhmWydAQHRyYW5zZHVjZXIvcmVzdWx0J10oYWNjKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9tZXRob2RSZWR1Y2UoeGYsIGFjYywgb2JqKSB7XG4gICAgcmV0dXJuIHhmWydAQHRyYW5zZHVjZXIvcmVzdWx0J10ob2JqLnJlZHVjZShiaW5kKHhmWydAQHRyYW5zZHVjZXIvc3RlcCddLCB4ZiksIGFjYykpO1xuICB9XG5cbiAgdmFyIHN5bUl0ZXJhdG9yID0gKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnKSA/IFN5bWJvbC5pdGVyYXRvciA6ICdAQGl0ZXJhdG9yJztcbiAgcmV0dXJuIGZ1bmN0aW9uIF9yZWR1Y2UoZm4sIGFjYywgbGlzdCkge1xuICAgIGlmICh0eXBlb2YgZm4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGZuID0gX3h3cmFwKGZuKTtcbiAgICB9XG4gICAgaWYgKGlzQXJyYXlMaWtlKGxpc3QpKSB7XG4gICAgICByZXR1cm4gX2FycmF5UmVkdWNlKGZuLCBhY2MsIGxpc3QpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGxpc3QucmVkdWNlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXR1cm4gX21ldGhvZFJlZHVjZShmbiwgYWNjLCBsaXN0KTtcbiAgICB9XG4gICAgaWYgKGxpc3Rbc3ltSXRlcmF0b3JdICE9IG51bGwpIHtcbiAgICAgIHJldHVybiBfaXRlcmFibGVSZWR1Y2UoZm4sIGFjYywgbGlzdFtzeW1JdGVyYXRvcl0oKSk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgbGlzdC5uZXh0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXR1cm4gX2l0ZXJhYmxlUmVkdWNlKGZuLCBhY2MsIGxpc3QpO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdyZWR1Y2U6IGxpc3QgbXVzdCBiZSBhcnJheSBvciBpdGVyYWJsZScpO1xuICB9O1xufSgpKTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9yYW1kYS9zcmMvaW50ZXJuYWwvX3JlZHVjZS5qc1xuLy8gbW9kdWxlIGlkID0gMTZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 17 */
/* no static exports found */
/* all exports used */
/*!*****************************!*\
  !*** ./~/ramda/src/keys.js ***!
  \*****************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var _curry1 = __webpack_require__(/*! ./internal/_curry1 */ 2);\nvar _has = __webpack_require__(/*! ./internal/_has */ 15);\nvar _isArguments = __webpack_require__(/*! ./internal/_isArguments */ 162);\n\n\n/**\n * Returns a list containing the names of all the enumerable own properties of\n * the supplied object.\n * Note that the order of the output array is not guaranteed to be consistent\n * across different JS platforms.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Object\n * @sig {k: v} -> [k]\n * @param {Object} obj The object to extract properties from\n * @return {Array} An array of the object's own properties.\n * @example\n *\n *      R.keys({a: 1, b: 2, c: 3}); //=> ['a', 'b', 'c']\n */\nmodule.exports = (function() {\n  // cover IE < 9 keys issues\n  var hasEnumBug = !({toString: null}).propertyIsEnumerable('toString');\n  var nonEnumerableProps = ['constructor', 'valueOf', 'isPrototypeOf', 'toString',\n                            'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString'];\n  // Safari bug\n  var hasArgsEnumBug = (function() {\n    'use strict';\n    return arguments.propertyIsEnumerable('length');\n  }());\n\n  var contains = function contains(list, item) {\n    var idx = 0;\n    while (idx < list.length) {\n      if (list[idx] === item) {\n        return true;\n      }\n      idx += 1;\n    }\n    return false;\n  };\n\n  return typeof Object.keys === 'function' && !hasArgsEnumBug ?\n    _curry1(function keys(obj) {\n      return Object(obj) !== obj ? [] : Object.keys(obj);\n    }) :\n    _curry1(function keys(obj) {\n      if (Object(obj) !== obj) {\n        return [];\n      }\n      var prop, nIdx;\n      var ks = [];\n      var checkArgsLength = hasArgsEnumBug && _isArguments(obj);\n      for (prop in obj) {\n        if (_has(prop, obj) && (!checkArgsLength || prop !== 'length')) {\n          ks[ks.length] = prop;\n        }\n      }\n      if (hasEnumBug) {\n        nIdx = nonEnumerableProps.length - 1;\n        while (nIdx >= 0) {\n          prop = nonEnumerableProps[nIdx];\n          if (_has(prop, obj) && !contains(ks, prop)) {\n            ks[ks.length] = prop;\n          }\n          nIdx -= 1;\n        }\n      }\n      return ks;\n    });\n}());\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTcuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3JhbWRhL3NyYy9rZXlzLmpzPzE0ODgiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIF9jdXJyeTEgPSByZXF1aXJlKCcuL2ludGVybmFsL19jdXJyeTEnKTtcbnZhciBfaGFzID0gcmVxdWlyZSgnLi9pbnRlcm5hbC9faGFzJyk7XG52YXIgX2lzQXJndW1lbnRzID0gcmVxdWlyZSgnLi9pbnRlcm5hbC9faXNBcmd1bWVudHMnKTtcblxuXG4vKipcbiAqIFJldHVybnMgYSBsaXN0IGNvbnRhaW5pbmcgdGhlIG5hbWVzIG9mIGFsbCB0aGUgZW51bWVyYWJsZSBvd24gcHJvcGVydGllcyBvZlxuICogdGhlIHN1cHBsaWVkIG9iamVjdC5cbiAqIE5vdGUgdGhhdCB0aGUgb3JkZXIgb2YgdGhlIG91dHB1dCBhcnJheSBpcyBub3QgZ3VhcmFudGVlZCB0byBiZSBjb25zaXN0ZW50XG4gKiBhY3Jvc3MgZGlmZmVyZW50IEpTIHBsYXRmb3Jtcy5cbiAqXG4gKiBAZnVuY1xuICogQG1lbWJlck9mIFJcbiAqIEBzaW5jZSB2MC4xLjBcbiAqIEBjYXRlZ29yeSBPYmplY3RcbiAqIEBzaWcge2s6IHZ9IC0+IFtrXVxuICogQHBhcmFtIHtPYmplY3R9IG9iaiBUaGUgb2JqZWN0IHRvIGV4dHJhY3QgcHJvcGVydGllcyBmcm9tXG4gKiBAcmV0dXJuIHtBcnJheX0gQW4gYXJyYXkgb2YgdGhlIG9iamVjdCdzIG93biBwcm9wZXJ0aWVzLlxuICogQGV4YW1wbGVcbiAqXG4gKiAgICAgIFIua2V5cyh7YTogMSwgYjogMiwgYzogM30pOyAvLz0+IFsnYScsICdiJywgJ2MnXVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IChmdW5jdGlvbigpIHtcbiAgLy8gY292ZXIgSUUgPCA5IGtleXMgaXNzdWVzXG4gIHZhciBoYXNFbnVtQnVnID0gISh7dG9TdHJpbmc6IG51bGx9KS5wcm9wZXJ0eUlzRW51bWVyYWJsZSgndG9TdHJpbmcnKTtcbiAgdmFyIG5vbkVudW1lcmFibGVQcm9wcyA9IFsnY29uc3RydWN0b3InLCAndmFsdWVPZicsICdpc1Byb3RvdHlwZU9mJywgJ3RvU3RyaW5nJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAncHJvcGVydHlJc0VudW1lcmFibGUnLCAnaGFzT3duUHJvcGVydHknLCAndG9Mb2NhbGVTdHJpbmcnXTtcbiAgLy8gU2FmYXJpIGJ1Z1xuICB2YXIgaGFzQXJnc0VudW1CdWcgPSAoZnVuY3Rpb24oKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIHJldHVybiBhcmd1bWVudHMucHJvcGVydHlJc0VudW1lcmFibGUoJ2xlbmd0aCcpO1xuICB9KCkpO1xuXG4gIHZhciBjb250YWlucyA9IGZ1bmN0aW9uIGNvbnRhaW5zKGxpc3QsIGl0ZW0pIHtcbiAgICB2YXIgaWR4ID0gMDtcbiAgICB3aGlsZSAoaWR4IDwgbGlzdC5sZW5ndGgpIHtcbiAgICAgIGlmIChsaXN0W2lkeF0gPT09IGl0ZW0pIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICBpZHggKz0gMTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9O1xuXG4gIHJldHVybiB0eXBlb2YgT2JqZWN0LmtleXMgPT09ICdmdW5jdGlvbicgJiYgIWhhc0FyZ3NFbnVtQnVnID9cbiAgICBfY3VycnkxKGZ1bmN0aW9uIGtleXMob2JqKSB7XG4gICAgICByZXR1cm4gT2JqZWN0KG9iaikgIT09IG9iaiA/IFtdIDogT2JqZWN0LmtleXMob2JqKTtcbiAgICB9KSA6XG4gICAgX2N1cnJ5MShmdW5jdGlvbiBrZXlzKG9iaikge1xuICAgICAgaWYgKE9iamVjdChvYmopICE9PSBvYmopIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgdmFyIHByb3AsIG5JZHg7XG4gICAgICB2YXIga3MgPSBbXTtcbiAgICAgIHZhciBjaGVja0FyZ3NMZW5ndGggPSBoYXNBcmdzRW51bUJ1ZyAmJiBfaXNBcmd1bWVudHMob2JqKTtcbiAgICAgIGZvciAocHJvcCBpbiBvYmopIHtcbiAgICAgICAgaWYgKF9oYXMocHJvcCwgb2JqKSAmJiAoIWNoZWNrQXJnc0xlbmd0aCB8fCBwcm9wICE9PSAnbGVuZ3RoJykpIHtcbiAgICAgICAgICBrc1trcy5sZW5ndGhdID0gcHJvcDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGhhc0VudW1CdWcpIHtcbiAgICAgICAgbklkeCA9IG5vbkVudW1lcmFibGVQcm9wcy5sZW5ndGggLSAxO1xuICAgICAgICB3aGlsZSAobklkeCA+PSAwKSB7XG4gICAgICAgICAgcHJvcCA9IG5vbkVudW1lcmFibGVQcm9wc1tuSWR4XTtcbiAgICAgICAgICBpZiAoX2hhcyhwcm9wLCBvYmopICYmICFjb250YWlucyhrcywgcHJvcCkpIHtcbiAgICAgICAgICAgIGtzW2tzLmxlbmd0aF0gPSBwcm9wO1xuICAgICAgICAgIH1cbiAgICAgICAgICBuSWR4IC09IDE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBrcztcbiAgICB9KTtcbn0oKSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcmFtZGEvc3JjL2tleXMuanNcbi8vIG1vZHVsZSBpZCA9IDE3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 18 */
/* no static exports found */
/* all exports used */
/*!****************************************!*\
  !*** ./src/utils/reference-helpers.js ***!
  \****************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getColorFn = exports.getBlendFn = exports.getExecutedFn = exports.getEitherProp = exports.getPropertyOrDefFn = exports.getPropertyFnSafe = exports.getPropertyFn = exports.getPropOrDef = exports.getProp = exports.getDefProp = exports.generateDefaultFromRef = undefined;\n\nvar _applySpec = __webpack_require__(/*! ramda/src/applySpec */ 55);\n\nvar _applySpec2 = _interopRequireDefault(_applySpec);\n\nvar _apply = __webpack_require__(/*! ramda/src/apply */ 54);\n\nvar _apply2 = _interopRequireDefault(_apply);\n\nvar _values = __webpack_require__(/*! ramda/src/values */ 66);\n\nvar _values2 = _interopRequireDefault(_values);\n\nvar _defaultTo = __webpack_require__(/*! ramda/src/defaultTo */ 145);\n\nvar _defaultTo2 = _interopRequireDefault(_defaultTo);\n\nvar _ifElse = __webpack_require__(/*! ramda/src/ifElse */ 150);\n\nvar _ifElse2 = _interopRequireDefault(_ifElse);\n\nvar _prop = __webpack_require__(/*! ramda/src/prop */ 65);\n\nvar _prop2 = _interopRequireDefault(_prop);\n\nvar _compose = __webpack_require__(/*! ramda/src/compose */ 13);\n\nvar _compose2 = _interopRequireDefault(_compose);\n\nvar _either = __webpack_require__(/*! ramda/src/either */ 146);\n\nvar _either2 = _interopRequireDefault(_either);\n\nvar _curry = __webpack_require__(/*! ramda/src/curry */ 24);\n\nvar _curry2 = _interopRequireDefault(_curry);\n\nvar _utils = __webpack_require__(/*! ../utils/utils */ 38);\n\nvar _utils2 = _interopRequireDefault(_utils);\n\nvar _reference = __webpack_require__(/*! ../utils/reference */ 9);\n\nvar _reference2 = _interopRequireDefault(_reference);\n\nvar _colors = __webpack_require__(/*! ../style/colors */ 77);\n\nvar _colors2 = _interopRequireDefault(_colors);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/*\n  INTERNAL REFERENCE FUNCTIONS\n */\n\nvar curryComp = _utils2.default.curryCompose3;\n\n/*\n  REFERENCE HELPER\n */\n\nvar generateDefaultFromRef = function generateDefaultFromRef(Ref, prop) {\n  return { js: _utils2.default.generateDefault('\"' + Ref[prop]['default-value'] + '\"') };\n};\n\nvar getDefProp = (0, _curry2.default)(function (prop, ref) {\n  return generateDefaultFromRef(ref, prop);\n});\n\n// ref = 'stroke-opacity' -> get {stroke-opacity: {css: 'line-opacity'}} -> line-opacity;\n// ref['line-opacity'];\nvar getProp = (0, _curry2.default)(function (prop, ref, c3ss) {\n  return _utils2.default.pick(_utils2.default.pick(prop + '.css', ref), c3ss);\n});\n\nvar getPropOrDef = (0, _either2.default)(getProp, getDefProp);\n\nvar getPropertyFn = curryComp((0, _compose2.default)(_utils2.default.buildCCSSFn, (0, _prop2.default)('js'), // get property js from object\ngetProp));\n\nvar getPropertyFnSafe = (0, _ifElse2.default)(getProp, getPropertyFn, function () {\n  return void 0;\n});\n\nvar getPropertyOrDefFn = curryComp((0, _compose2.default)(_utils2.default.buildCCSSFn, (0, _prop2.default)('js'), getPropOrDef));\n\nvar getEitherProp = function getEitherProp(propA, propB, ref) {\n  return (0, _either2.default)(getPropertyFnSafe(propA, ref), getPropertyOrDefFn(propB, ref));\n};\n\nvar getExecutedFn = curryComp((0, _compose2.default)(_utils2.default.buildAndExecuteFn, (0, _prop2.default)('js'), getPropOrDef));\n\nvar getBlendFn = (0, _curry2.default)(function (ref, c3ss) {\n  return (0, _compose2.default)((0, _defaultTo2.default)('overlay'), _reference2.default.checkType(ref['comp-op']), getExecutedFn('comp-op'))(ref, c3ss);\n});\n\nvar getColorFn = function getColorFn(fill, alpha) {\n  return (0, _compose2.default)((0, _apply2.default)(_colors2.default.getAlphaColor), _values2.default, (0, _applySpec2.default)({\n    fill: fill,\n    alpha: alpha\n  }));\n};\n\nexports.generateDefaultFromRef = generateDefaultFromRef;\nexports.getDefProp = getDefProp;\nexports.getProp = getProp;\nexports.getPropOrDef = getPropOrDef;\nexports.getPropertyFn = getPropertyFn;\nexports.getPropertyFnSafe = getPropertyFnSafe;\nexports.getPropertyOrDefFn = getPropertyOrDefFn;\nexports.getEitherProp = getEitherProp;\nexports.getExecutedFn = getExecutedFn;\nexports.getBlendFn = getBlendFn;\nexports.getColorFn = getColorFn;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTguanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL3V0aWxzL3JlZmVyZW5jZS1oZWxwZXJzLmpzP2NhNjkiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY29tcG9zZSwgY3VycnksIGVpdGhlciwgcHJvcCwgZGVmYXVsdFRvLCBhcHBseSwgdmFsdWVzLCBpZkVsc2UsIGFwcGx5U3BlYyB9IGZyb20gJ3JhbWRhJztcbmltcG9ydCBVdGlscyBmcm9tICcuLi91dGlscy91dGlscyc7XG5pbXBvcnQgVGFuZ3JhbVJlZmVyZW5jZSBmcm9tICcuLi91dGlscy9yZWZlcmVuY2UnO1xuaW1wb3J0IENvbG9ycyBmcm9tICcuLi9zdHlsZS9jb2xvcnMnO1xuXG5cbi8qXG4gIElOVEVSTkFMIFJFRkVSRU5DRSBGVU5DVElPTlNcbiAqL1xuXG5jb25zdCBjdXJyeUNvbXAgPSBVdGlscy5jdXJyeUNvbXBvc2UzO1xuXG4vKlxuICBSRUZFUkVOQ0UgSEVMUEVSXG4gKi9cblxuY29uc3QgZ2VuZXJhdGVEZWZhdWx0RnJvbVJlZiA9IGZ1bmN0aW9uKFJlZiwgcHJvcCkge1xuXHRyZXR1cm4geyBqczogVXRpbHMuZ2VuZXJhdGVEZWZhdWx0KGBcIiR7UmVmW3Byb3BdWydkZWZhdWx0LXZhbHVlJ119XCJgKSB9O1xufTtcblxuY29uc3QgZ2V0RGVmUHJvcCA9IGN1cnJ5KChwcm9wLCByZWYpID0+IHtcbiAgcmV0dXJuIGdlbmVyYXRlRGVmYXVsdEZyb21SZWYocmVmLCBwcm9wKTtcbn0pO1xuXG4vLyByZWYgPSAnc3Ryb2tlLW9wYWNpdHknIC0+IGdldCB7c3Ryb2tlLW9wYWNpdHk6IHtjc3M6ICdsaW5lLW9wYWNpdHknfX0gLT4gbGluZS1vcGFjaXR5O1xuLy8gcmVmWydsaW5lLW9wYWNpdHknXTtcbmNvbnN0IGdldFByb3AgPSBjdXJyeSgocHJvcCwgcmVmLCBjM3NzKSA9PiB7XG4gIHJldHVybiBVdGlscy5waWNrKFV0aWxzLnBpY2socHJvcCArICcuY3NzJywgcmVmKSwgYzNzcyk7XG59KTtcblxuY29uc3QgZ2V0UHJvcE9yRGVmID0gZWl0aGVyKGdldFByb3AsIGdldERlZlByb3ApO1xuXG5cbmNvbnN0IGdldFByb3BlcnR5Rm4gPSBjdXJyeUNvbXAoY29tcG9zZShcbiAgVXRpbHMuYnVpbGRDQ1NTRm4sXG4gIHByb3AoJ2pzJyksIC8vIGdldCBwcm9wZXJ0eSBqcyBmcm9tIG9iamVjdFxuICBnZXRQcm9wXG4pKTtcblxuY29uc3QgZ2V0UHJvcGVydHlGblNhZmUgPSBpZkVsc2UoXG4gIGdldFByb3AsXG4gIGdldFByb3BlcnR5Rm4sXG4gICgpID0+IHZvaWQgMFxuKTtcblxuY29uc3QgZ2V0UHJvcGVydHlPckRlZkZuID0gY3VycnlDb21wKGNvbXBvc2UoXG4gIFV0aWxzLmJ1aWxkQ0NTU0ZuLFxuICBwcm9wKCdqcycpLFxuICBnZXRQcm9wT3JEZWZcbikpO1xuXG5jb25zdCBnZXRFaXRoZXJQcm9wID0gKHByb3BBLCBwcm9wQiwgcmVmKSA9PiBlaXRoZXIoXG4gIGdldFByb3BlcnR5Rm5TYWZlKHByb3BBLCByZWYpLFxuICBnZXRQcm9wZXJ0eU9yRGVmRm4ocHJvcEIsIHJlZilcbik7XG5cbmNvbnN0IGdldEV4ZWN1dGVkRm4gPSBjdXJyeUNvbXAoY29tcG9zZShcbiAgVXRpbHMuYnVpbGRBbmRFeGVjdXRlRm4sXG4gIHByb3AoJ2pzJyksXG4gIGdldFByb3BPckRlZlxuKSk7XG5cbmNvbnN0IGdldEJsZW5kRm4gPSBjdXJyeSgocmVmLCBjM3NzKSA9PiBjb21wb3NlKFxuICBkZWZhdWx0VG8oJ292ZXJsYXknKSxcbiAgVGFuZ3JhbVJlZmVyZW5jZS5jaGVja1R5cGUocmVmWydjb21wLW9wJ10pLFxuICBnZXRFeGVjdXRlZEZuKCdjb21wLW9wJylcbikocmVmLCBjM3NzKSk7XG5cbmNvbnN0IGdldENvbG9yRm4gPSAoZmlsbCwgYWxwaGEpID0+IHtcbiAgcmV0dXJuIGNvbXBvc2UoXG4gICAgYXBwbHkoQ29sb3JzLmdldEFscGhhQ29sb3IpLFxuICAgIHZhbHVlcyxcbiAgICBhcHBseVNwZWMoe1xuICAgICAgZmlsbDogZmlsbCxcbiAgICAgIGFscGhhOiBhbHBoYVxuICAgIH0pXG4gICk7XG59O1xuXG5leHBvcnQge1xuICBnZW5lcmF0ZURlZmF1bHRGcm9tUmVmLFxuICBnZXREZWZQcm9wLFxuICBnZXRQcm9wLFxuICBnZXRQcm9wT3JEZWYsXG4gIGdldFByb3BlcnR5Rm4sXG4gIGdldFByb3BlcnR5Rm5TYWZlLFxuICBnZXRQcm9wZXJ0eU9yRGVmRm4sXG4gIGdldEVpdGhlclByb3AsXG4gIGdldEV4ZWN1dGVkRm4sXG4gIGdldEJsZW5kRm4sXG4gIGdldENvbG9yRm5cbn07XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gc3JjL3V0aWxzL3JlZmVyZW5jZS1oZWxwZXJzLmpzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQ0E7QUFDQTs7O0FBQUE7QUFDQTs7O0FBQUE7QUFDQTs7Ozs7QUFFQTs7OztBQUlBO0FBQ0E7QUFDQTs7OztBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFHQTtBQUNBO0FBRUE7QUFHQTtBQUFBO0FBQ0E7QUFFQTtBQUNBO0FBS0E7QUFBQTtBQUFBO0FBQ0E7QUFJQTtBQUNBO0FBS0E7QUFBQTtBQUFBO0FBQ0E7QUFLQTtBQUNBO0FBSUE7QUFDQTtBQUZBO0FBS0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 19 */
/* no static exports found */
/* all exports used */
/*!*************************************************!*\
  !*** ./~/core-js/library/modules/_an-object.js ***!
  \*************************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var isObject = __webpack_require__(/*! ./_is-object */ 30);\nmodule.exports = function(it){\n  if(!isObject(it))throw TypeError(it + ' is not an object!');\n  return it;\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTkuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19hbi1vYmplY3QuanM/MGRhMyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpe1xuICBpZighaXNPYmplY3QoaXQpKXRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGFuIG9iamVjdCEnKTtcbiAgcmV0dXJuIGl0O1xufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2FuLW9iamVjdC5qc1xuLy8gbW9kdWxlIGlkID0gMTlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 20 */
/* no static exports found */
/* all exports used */
/*!***************************************************!*\
  !*** ./~/core-js/library/modules/_descriptors.js ***!
  \***************************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("// Thank's IE8 for his funny defineProperty\nmodule.exports = !__webpack_require__(/*! ./_fails */ 46)(function(){\n  return Object.defineProperty({}, 'a', {get: function(){ return 7; }}).a != 7;\n});//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjAuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19kZXNjcmlwdG9ycy5qcz83MDUxIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIFRoYW5rJ3MgSUU4IGZvciBoaXMgZnVubnkgZGVmaW5lUHJvcGVydHlcbm1vZHVsZS5leHBvcnRzID0gIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24oKXtcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSwgJ2EnLCB7Z2V0OiBmdW5jdGlvbigpeyByZXR1cm4gNzsgfX0pLmEgIT0gNztcbn0pO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZGVzY3JpcHRvcnMuanNcbi8vIG1vZHVsZSBpZCA9IDIwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 21 */
/* no static exports found */
/* all exports used */
/*!*******************************************!*\
  !*** ./~/core-js/library/modules/_has.js ***!
  \*******************************************/
/***/ (function(module, exports) {

eval("var hasOwnProperty = {}.hasOwnProperty;\nmodule.exports = function(it, key){\n  return hasOwnProperty.call(it, key);\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjEuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19oYXMuanM/ZDg1MCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgaGFzT3duUHJvcGVydHkgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQsIGtleSl7XG4gIHJldHVybiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGl0LCBrZXkpO1xufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2hhcy5qc1xuLy8gbW9kdWxlIGlkID0gMjFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 22 */
/* no static exports found */
/* all exports used */
/*!********************************************!*\
  !*** ./~/core-js/library/modules/_hide.js ***!
  \********************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var dP         = __webpack_require__(/*! ./_object-dp */ 23)\n  , createDesc = __webpack_require__(/*! ./_property-desc */ 32);\nmodule.exports = __webpack_require__(/*! ./_descriptors */ 20) ? function(object, key, value){\n  return dP.f(object, key, createDesc(1, value));\n} : function(object, key, value){\n  object[key] = value;\n  return object;\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjIuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19oaWRlLmpzP2E2ZGEiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGRQICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKVxuICAsIGNyZWF0ZURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBmdW5jdGlvbihvYmplY3QsIGtleSwgdmFsdWUpe1xuICByZXR1cm4gZFAuZihvYmplY3QsIGtleSwgY3JlYXRlRGVzYygxLCB2YWx1ZSkpO1xufSA6IGZ1bmN0aW9uKG9iamVjdCwga2V5LCB2YWx1ZSl7XG4gIG9iamVjdFtrZXldID0gdmFsdWU7XG4gIHJldHVybiBvYmplY3Q7XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faGlkZS5qc1xuLy8gbW9kdWxlIGlkID0gMjJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 23 */
/* no static exports found */
/* all exports used */
/*!*************************************************!*\
  !*** ./~/core-js/library/modules/_object-dp.js ***!
  \*************************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var anObject       = __webpack_require__(/*! ./_an-object */ 19)\n  , IE8_DOM_DEFINE = __webpack_require__(/*! ./_ie8-dom-define */ 119)\n  , toPrimitive    = __webpack_require__(/*! ./_to-primitive */ 135)\n  , dP             = Object.defineProperty;\n\nexports.f = __webpack_require__(/*! ./_descriptors */ 20) ? Object.defineProperty : function defineProperty(O, P, Attributes){\n  anObject(O);\n  P = toPrimitive(P, true);\n  anObject(Attributes);\n  if(IE8_DOM_DEFINE)try {\n    return dP(O, P, Attributes);\n  } catch(e){ /* empty */ }\n  if('get' in Attributes || 'set' in Attributes)throw TypeError('Accessors not supported!');\n  if('value' in Attributes)O[P] = Attributes.value;\n  return O;\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtZHAuanM/NDExNiJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgYW5PYmplY3QgICAgICAgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKVxuICAsIElFOF9ET01fREVGSU5FID0gcmVxdWlyZSgnLi9faWU4LWRvbS1kZWZpbmUnKVxuICAsIHRvUHJpbWl0aXZlICAgID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJylcbiAgLCBkUCAgICAgICAgICAgICA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcblxuZXhwb3J0cy5mID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSA6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpe1xuICBhbk9iamVjdChPKTtcbiAgUCA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xuICBhbk9iamVjdChBdHRyaWJ1dGVzKTtcbiAgaWYoSUU4X0RPTV9ERUZJTkUpdHJ5IHtcbiAgICByZXR1cm4gZFAoTywgUCwgQXR0cmlidXRlcyk7XG4gIH0gY2F0Y2goZSl7IC8qIGVtcHR5ICovIH1cbiAgaWYoJ2dldCcgaW4gQXR0cmlidXRlcyB8fCAnc2V0JyBpbiBBdHRyaWJ1dGVzKXRocm93IFR5cGVFcnJvcignQWNjZXNzb3JzIG5vdCBzdXBwb3J0ZWQhJyk7XG4gIGlmKCd2YWx1ZScgaW4gQXR0cmlidXRlcylPW1BdID0gQXR0cmlidXRlcy52YWx1ZTtcbiAgcmV0dXJuIE87XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWRwLmpzXG4vLyBtb2R1bGUgaWQgPSAyM1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 24 */
/* no static exports found */
/* all exports used */
/*!******************************!*\
  !*** ./~/ramda/src/curry.js ***!
  \******************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var _curry1 = __webpack_require__(/*! ./internal/_curry1 */ 2);\nvar curryN = __webpack_require__(/*! ./curryN */ 6);\n\n\n/**\n * Returns a curried equivalent of the provided function. The curried function\n * has two unusual capabilities. First, its arguments needn't be provided one\n * at a time. If `f` is a ternary function and `g` is `R.curry(f)`, the\n * following are equivalent:\n *\n *   - `g(1)(2)(3)`\n *   - `g(1)(2, 3)`\n *   - `g(1, 2)(3)`\n *   - `g(1, 2, 3)`\n *\n * Secondly, the special placeholder value `R.__` may be used to specify\n * \"gaps\", allowing partial application of any combination of arguments,\n * regardless of their positions. If `g` is as above and `_` is `R.__`, the\n * following are equivalent:\n *\n *   - `g(1, 2, 3)`\n *   - `g(_, 2, 3)(1)`\n *   - `g(_, _, 3)(1)(2)`\n *   - `g(_, _, 3)(1, 2)`\n *   - `g(_, 2)(1)(3)`\n *   - `g(_, 2)(1, 3)`\n *   - `g(_, 2)(_, 3)(1)`\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig (* -> a) -> (* -> a)\n * @param {Function} fn The function to curry.\n * @return {Function} A new, curried function.\n * @see R.curryN\n * @example\n *\n *      var addFourNumbers = (a, b, c, d) => a + b + c + d;\n *\n *      var curriedAddFourNumbers = R.curry(addFourNumbers);\n *      var f = curriedAddFourNumbers(1, 2);\n *      var g = f(3);\n *      g(4); //=> 10\n */\nmodule.exports = _curry1(function curry(fn) {\n  return curryN(fn.length, fn);\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjQuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3JhbWRhL3NyYy9jdXJyeS5qcz81NjU1Il0sInNvdXJjZXNDb250ZW50IjpbInZhciBfY3VycnkxID0gcmVxdWlyZSgnLi9pbnRlcm5hbC9fY3VycnkxJyk7XG52YXIgY3VycnlOID0gcmVxdWlyZSgnLi9jdXJyeU4nKTtcblxuXG4vKipcbiAqIFJldHVybnMgYSBjdXJyaWVkIGVxdWl2YWxlbnQgb2YgdGhlIHByb3ZpZGVkIGZ1bmN0aW9uLiBUaGUgY3VycmllZCBmdW5jdGlvblxuICogaGFzIHR3byB1bnVzdWFsIGNhcGFiaWxpdGllcy4gRmlyc3QsIGl0cyBhcmd1bWVudHMgbmVlZG4ndCBiZSBwcm92aWRlZCBvbmVcbiAqIGF0IGEgdGltZS4gSWYgYGZgIGlzIGEgdGVybmFyeSBmdW5jdGlvbiBhbmQgYGdgIGlzIGBSLmN1cnJ5KGYpYCwgdGhlXG4gKiBmb2xsb3dpbmcgYXJlIGVxdWl2YWxlbnQ6XG4gKlxuICogICAtIGBnKDEpKDIpKDMpYFxuICogICAtIGBnKDEpKDIsIDMpYFxuICogICAtIGBnKDEsIDIpKDMpYFxuICogICAtIGBnKDEsIDIsIDMpYFxuICpcbiAqIFNlY29uZGx5LCB0aGUgc3BlY2lhbCBwbGFjZWhvbGRlciB2YWx1ZSBgUi5fX2AgbWF5IGJlIHVzZWQgdG8gc3BlY2lmeVxuICogXCJnYXBzXCIsIGFsbG93aW5nIHBhcnRpYWwgYXBwbGljYXRpb24gb2YgYW55IGNvbWJpbmF0aW9uIG9mIGFyZ3VtZW50cyxcbiAqIHJlZ2FyZGxlc3Mgb2YgdGhlaXIgcG9zaXRpb25zLiBJZiBgZ2AgaXMgYXMgYWJvdmUgYW5kIGBfYCBpcyBgUi5fX2AsIHRoZVxuICogZm9sbG93aW5nIGFyZSBlcXVpdmFsZW50OlxuICpcbiAqICAgLSBgZygxLCAyLCAzKWBcbiAqICAgLSBgZyhfLCAyLCAzKSgxKWBcbiAqICAgLSBgZyhfLCBfLCAzKSgxKSgyKWBcbiAqICAgLSBgZyhfLCBfLCAzKSgxLCAyKWBcbiAqICAgLSBgZyhfLCAyKSgxKSgzKWBcbiAqICAgLSBgZyhfLCAyKSgxLCAzKWBcbiAqICAgLSBgZyhfLCAyKShfLCAzKSgxKWBcbiAqXG4gKiBAZnVuY1xuICogQG1lbWJlck9mIFJcbiAqIEBzaW5jZSB2MC4xLjBcbiAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICogQHNpZyAoKiAtPiBhKSAtPiAoKiAtPiBhKVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGZ1bmN0aW9uIHRvIGN1cnJ5LlxuICogQHJldHVybiB7RnVuY3Rpb259IEEgbmV3LCBjdXJyaWVkIGZ1bmN0aW9uLlxuICogQHNlZSBSLmN1cnJ5TlxuICogQGV4YW1wbGVcbiAqXG4gKiAgICAgIHZhciBhZGRGb3VyTnVtYmVycyA9IChhLCBiLCBjLCBkKSA9PiBhICsgYiArIGMgKyBkO1xuICpcbiAqICAgICAgdmFyIGN1cnJpZWRBZGRGb3VyTnVtYmVycyA9IFIuY3VycnkoYWRkRm91ck51bWJlcnMpO1xuICogICAgICB2YXIgZiA9IGN1cnJpZWRBZGRGb3VyTnVtYmVycygxLCAyKTtcbiAqICAgICAgdmFyIGcgPSBmKDMpO1xuICogICAgICBnKDQpOyAvLz0+IDEwXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gX2N1cnJ5MShmdW5jdGlvbiBjdXJyeShmbikge1xuICByZXR1cm4gY3VycnlOKGZuLmxlbmd0aCwgZm4pO1xufSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcmFtZGEvc3JjL2N1cnJ5LmpzXG4vLyBtb2R1bGUgaWQgPSAyNFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 25 */
/* no static exports found */
/* all exports used */
/*!************************************************!*\
  !*** ./~/ramda/src/internal/_isPlaceholder.js ***!
  \************************************************/
/***/ (function(module, exports) {

eval("module.exports = function _isPlaceholder(a) {\n  return a != null &&\n         typeof a === 'object' &&\n         a['@@functional/placeholder'] === true;\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjUuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3JhbWRhL3NyYy9pbnRlcm5hbC9faXNQbGFjZWhvbGRlci5qcz9lNzQzIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gX2lzUGxhY2Vob2xkZXIoYSkge1xuICByZXR1cm4gYSAhPSBudWxsICYmXG4gICAgICAgICB0eXBlb2YgYSA9PT0gJ29iamVjdCcgJiZcbiAgICAgICAgIGFbJ0BAZnVuY3Rpb25hbC9wbGFjZWhvbGRlciddID09PSB0cnVlO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9yYW1kYS9zcmMvaW50ZXJuYWwvX2lzUGxhY2Vob2xkZXIuanNcbi8vIG1vZHVsZSBpZCA9IDI1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 26 */
/* no static exports found */
/* all exports used */
/*!*******************************!*\
  !*** ./~/ramda/src/reduce.js ***!
  \*******************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var _curry3 = __webpack_require__(/*! ./internal/_curry3 */ 7);\nvar _reduce = __webpack_require__(/*! ./internal/_reduce */ 16);\n\n\n/**\n * Returns a single item by iterating through the list, successively calling\n * the iterator function and passing it an accumulator value and the current\n * value from the array, and then passing the result to the next call.\n *\n * The iterator function receives two values: *(acc, value)*. It may use\n * `R.reduced` to shortcut the iteration.\n *\n * The arguments' order of `reduceRight`'s iterator function is *(value, acc)*.\n *\n * Note: `R.reduce` does not skip deleted or unassigned indices (sparse\n * arrays), unlike the native `Array.prototype.reduce` method. For more details\n * on this behavior, see:\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce#Description\n *\n * Dispatches to the `reduce` method of the third argument, if present.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig ((a, b) -> a) -> a -> [b] -> a\n * @param {Function} fn The iterator function. Receives two values, the accumulator and the\n *        current element from the array.\n * @param {*} acc The accumulator value.\n * @param {Array} list The list to iterate over.\n * @return {*} The final, accumulated value.\n * @see R.reduced, R.addIndex, R.reduceRight\n * @example\n *\n *      R.reduce(R.subtract, 0, [1, 2, 3, 4]) // => ((((0 - 1) - 2) - 3) - 4) = -10\n *                -               -10\n *               / \\              / \\\n *              -   4           -6   4\n *             / \\              / \\\n *            -   3   ==>     -3   3\n *           / \\              / \\\n *          -   2           -1   2\n *         / \\              / \\\n *        0   1            0   1\n *\n * @symb R.reduce(f, a, [b, c, d]) = f(f(f(a, b), c), d)\n */\nmodule.exports = _curry3(_reduce);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjYuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3JhbWRhL3NyYy9yZWR1Y2UuanM/YTA3YyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX2N1cnJ5MyA9IHJlcXVpcmUoJy4vaW50ZXJuYWwvX2N1cnJ5MycpO1xudmFyIF9yZWR1Y2UgPSByZXF1aXJlKCcuL2ludGVybmFsL19yZWR1Y2UnKTtcblxuXG4vKipcbiAqIFJldHVybnMgYSBzaW5nbGUgaXRlbSBieSBpdGVyYXRpbmcgdGhyb3VnaCB0aGUgbGlzdCwgc3VjY2Vzc2l2ZWx5IGNhbGxpbmdcbiAqIHRoZSBpdGVyYXRvciBmdW5jdGlvbiBhbmQgcGFzc2luZyBpdCBhbiBhY2N1bXVsYXRvciB2YWx1ZSBhbmQgdGhlIGN1cnJlbnRcbiAqIHZhbHVlIGZyb20gdGhlIGFycmF5LCBhbmQgdGhlbiBwYXNzaW5nIHRoZSByZXN1bHQgdG8gdGhlIG5leHQgY2FsbC5cbiAqXG4gKiBUaGUgaXRlcmF0b3IgZnVuY3Rpb24gcmVjZWl2ZXMgdHdvIHZhbHVlczogKihhY2MsIHZhbHVlKSouIEl0IG1heSB1c2VcbiAqIGBSLnJlZHVjZWRgIHRvIHNob3J0Y3V0IHRoZSBpdGVyYXRpb24uXG4gKlxuICogVGhlIGFyZ3VtZW50cycgb3JkZXIgb2YgYHJlZHVjZVJpZ2h0YCdzIGl0ZXJhdG9yIGZ1bmN0aW9uIGlzICoodmFsdWUsIGFjYykqLlxuICpcbiAqIE5vdGU6IGBSLnJlZHVjZWAgZG9lcyBub3Qgc2tpcCBkZWxldGVkIG9yIHVuYXNzaWduZWQgaW5kaWNlcyAoc3BhcnNlXG4gKiBhcnJheXMpLCB1bmxpa2UgdGhlIG5hdGl2ZSBgQXJyYXkucHJvdG90eXBlLnJlZHVjZWAgbWV0aG9kLiBGb3IgbW9yZSBkZXRhaWxzXG4gKiBvbiB0aGlzIGJlaGF2aW9yLCBzZWU6XG4gKiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9BcnJheS9yZWR1Y2UjRGVzY3JpcHRpb25cbiAqXG4gKiBEaXNwYXRjaGVzIHRvIHRoZSBgcmVkdWNlYCBtZXRob2Qgb2YgdGhlIHRoaXJkIGFyZ3VtZW50LCBpZiBwcmVzZW50LlxuICpcbiAqIEBmdW5jXG4gKiBAbWVtYmVyT2YgUlxuICogQHNpbmNlIHYwLjEuMFxuICogQGNhdGVnb3J5IExpc3RcbiAqIEBzaWcgKChhLCBiKSAtPiBhKSAtPiBhIC0+IFtiXSAtPiBhXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgaXRlcmF0b3IgZnVuY3Rpb24uIFJlY2VpdmVzIHR3byB2YWx1ZXMsIHRoZSBhY2N1bXVsYXRvciBhbmQgdGhlXG4gKiAgICAgICAgY3VycmVudCBlbGVtZW50IGZyb20gdGhlIGFycmF5LlxuICogQHBhcmFtIHsqfSBhY2MgVGhlIGFjY3VtdWxhdG9yIHZhbHVlLlxuICogQHBhcmFtIHtBcnJheX0gbGlzdCBUaGUgbGlzdCB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcmV0dXJuIHsqfSBUaGUgZmluYWwsIGFjY3VtdWxhdGVkIHZhbHVlLlxuICogQHNlZSBSLnJlZHVjZWQsIFIuYWRkSW5kZXgsIFIucmVkdWNlUmlnaHRcbiAqIEBleGFtcGxlXG4gKlxuICogICAgICBSLnJlZHVjZShSLnN1YnRyYWN0LCAwLCBbMSwgMiwgMywgNF0pIC8vID0+ICgoKCgwIC0gMSkgLSAyKSAtIDMpIC0gNCkgPSAtMTBcbiAqICAgICAgICAgICAgICAgIC0gICAgICAgICAgICAgICAtMTBcbiAqICAgICAgICAgICAgICAgLyBcXCAgICAgICAgICAgICAgLyBcXFxuICogICAgICAgICAgICAgIC0gICA0ICAgICAgICAgICAtNiAgIDRcbiAqICAgICAgICAgICAgIC8gXFwgICAgICAgICAgICAgIC8gXFxcbiAqICAgICAgICAgICAgLSAgIDMgICA9PT4gICAgIC0zICAgM1xuICogICAgICAgICAgIC8gXFwgICAgICAgICAgICAgIC8gXFxcbiAqICAgICAgICAgIC0gICAyICAgICAgICAgICAtMSAgIDJcbiAqICAgICAgICAgLyBcXCAgICAgICAgICAgICAgLyBcXFxuICogICAgICAgIDAgICAxICAgICAgICAgICAgMCAgIDFcbiAqXG4gKiBAc3ltYiBSLnJlZHVjZShmLCBhLCBbYiwgYywgZF0pID0gZihmKGYoYSwgYiksIGMpLCBkKVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IF9jdXJyeTMoX3JlZHVjZSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcmFtZGEvc3JjL3JlZHVjZS5qc1xuLy8gbW9kdWxlIGlkID0gMjZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 27 */
/* no static exports found */
/* all exports used */
/*!************************************!*\
  !*** ./~/carto/lib/carto/index.js ***!
  \************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(process, __dirname) {var util = __webpack_require__(/*! util */ 68),\n    fs = __webpack_require__(/*! fs */ 11),\n    path = __webpack_require__(/*! path */ 12);\n\n\nfunction getVersion() {\n    if (process.browser) {\n        return __webpack_require__(/*! ../../package.json */ 39).version.split('.');\n    } else if (parseInt(process.version.split('.')[1], 10) > 4) {\n        return __webpack_require__(/*! ../../package.json */ 39).version.split('.');\n    } else {\n        // older node\n        var package_json = JSON.parse(fs.readFileSync(path.join(__dirname,'../../package.json')));\n        return package_json.version.split('.');\n    }\n}\n\nvar carto = {\n    version: getVersion(),\n    Parser: __webpack_require__(/*! ./parser */ 82).Parser,\n    Renderer: __webpack_require__(/*! ./renderer */ 83).Renderer,\n    tree: __webpack_require__(/*! ./tree */ 0),\n    RendererJS: __webpack_require__(/*! ./renderer_js */ 84),\n    default_reference: __webpack_require__(/*! ./torque-reference */ 69),\n\n    // @TODO\n    writeError: function(ctx, options) {\n        var message = '';\n        var extract = ctx.extract;\n        var error = [];\n\n        options = options || {};\n\n        if (options.silent) { return; }\n\n        options.indent = options.indent || '';\n\n        if (!('index' in ctx) || !extract) {\n            return util.error(options.indent + (ctx.stack || ctx.message));\n        }\n\n        if (typeof(extract[0]) === 'string') {\n            error.push(stylize((ctx.line - 1) + ' ' + extract[0], 'grey'));\n        }\n\n        if (extract[1] === '' && typeof extract[2] === 'undefined') {\n            extract[1] = '¶';\n        }\n        error.push(ctx.line + ' ' + extract[1].slice(0, ctx.column) +\n            stylize(stylize(extract[1][ctx.column], 'bold') +\n            extract[1].slice(ctx.column + 1), 'yellow'));\n\n        if (typeof(extract[2]) === 'string') {\n            error.push(stylize((ctx.line + 1) + ' ' + extract[2], 'grey'));\n        }\n        error = options.indent + error.join('\\n' + options.indent) + '\\033[0m\\n';\n\n        message = options.indent + message + stylize(ctx.message, 'red');\n        if (ctx.filename) (message += stylize(' in ', 'red') + ctx.filename);\n\n        util.error(message, error);\n\n        if (ctx.callLine) {\n            util.error(stylize('from ', 'red') + (ctx.filename || ''));\n            util.error(stylize(ctx.callLine, 'grey') + ' ' + ctx.callExtract);\n        }\n        if (ctx.stack) { util.error(stylize(ctx.stack, 'red')); }\n    }\n};\n\n__webpack_require__(/*! ./tree/call */ 85);\n__webpack_require__(/*! ./tree/color */ 86);\n__webpack_require__(/*! ./tree/comment */ 87);\n__webpack_require__(/*! ./tree/definition */ 88);\n__webpack_require__(/*! ./tree/dimension */ 89);\n__webpack_require__(/*! ./tree/element */ 90);\n__webpack_require__(/*! ./tree/expression */ 91);\n__webpack_require__(/*! ./tree/filterset */ 94);\n__webpack_require__(/*! ./tree/filter */ 93);\n__webpack_require__(/*! ./tree/field */ 92);\n__webpack_require__(/*! ./tree/keyword */ 99);\n__webpack_require__(/*! ./tree/layer */ 100);\n__webpack_require__(/*! ./tree/literal */ 101);\n__webpack_require__(/*! ./tree/operation */ 102);\n__webpack_require__(/*! ./tree/quoted */ 103);\n__webpack_require__(/*! ./tree/imagefilter */ 97);\n__webpack_require__(/*! ./tree/reference */ 104);\n__webpack_require__(/*! ./tree/rule */ 105);\n__webpack_require__(/*! ./tree/ruleset */ 106);\n__webpack_require__(/*! ./tree/selector */ 107);\n__webpack_require__(/*! ./tree/style */ 108);\n__webpack_require__(/*! ./tree/url */ 109);\n__webpack_require__(/*! ./tree/value */ 110);\n__webpack_require__(/*! ./tree/variable */ 111);\n__webpack_require__(/*! ./tree/zoom */ 112);\n__webpack_require__(/*! ./tree/invalid */ 98);\n__webpack_require__(/*! ./tree/fontset */ 95);\n__webpack_require__(/*! ./tree/frame_offset */ 96);\n__webpack_require__(/*! ./functions */ 81);\n\nfor (var k in carto) { exports[k] = carto[k]; }\n\n// Stylize a string\nfunction stylize(str, style) {\n    var styles = {\n        'bold' : [1, 22],\n        'inverse' : [7, 27],\n        'underline' : [4, 24],\n        'yellow' : [33, 39],\n        'green' : [32, 39],\n        'red' : [31, 39],\n        'grey' : [90, 39]\n    };\n    return '\\033[' + styles[style][0] + 'm' + str +\n           '\\033[' + styles[style][1] + 'm';\n}\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./../../../process/browser.js */ 36), \"/\"))//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjcuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NhcnRvL2xpYi9jYXJ0by9pbmRleC5qcz82ZTQ1Il0sInNvdXJjZXNDb250ZW50IjpbInZhciB1dGlsID0gcmVxdWlyZSgndXRpbCcpLFxuICAgIGZzID0gcmVxdWlyZSgnZnMnKSxcbiAgICBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xuXG5cbmZ1bmN0aW9uIGdldFZlcnNpb24oKSB7XG4gICAgaWYgKHByb2Nlc3MuYnJvd3Nlcikge1xuICAgICAgICByZXR1cm4gcmVxdWlyZSgnLi4vLi4vcGFja2FnZS5qc29uJykudmVyc2lvbi5zcGxpdCgnLicpO1xuICAgIH0gZWxzZSBpZiAocGFyc2VJbnQocHJvY2Vzcy52ZXJzaW9uLnNwbGl0KCcuJylbMV0sIDEwKSA+IDQpIHtcbiAgICAgICAgcmV0dXJuIHJlcXVpcmUoJy4uLy4uL3BhY2thZ2UuanNvbicpLnZlcnNpb24uc3BsaXQoJy4nKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICAvLyBvbGRlciBub2RlXG4gICAgICAgIHZhciBwYWNrYWdlX2pzb24gPSBKU09OLnBhcnNlKGZzLnJlYWRGaWxlU3luYyhwYXRoLmpvaW4oX19kaXJuYW1lLCcuLi8uLi9wYWNrYWdlLmpzb24nKSkpO1xuICAgICAgICByZXR1cm4gcGFja2FnZV9qc29uLnZlcnNpb24uc3BsaXQoJy4nKTtcbiAgICB9XG59XG5cbnZhciBjYXJ0byA9IHtcbiAgICB2ZXJzaW9uOiBnZXRWZXJzaW9uKCksXG4gICAgUGFyc2VyOiByZXF1aXJlKCcuL3BhcnNlcicpLlBhcnNlcixcbiAgICBSZW5kZXJlcjogcmVxdWlyZSgnLi9yZW5kZXJlcicpLlJlbmRlcmVyLFxuICAgIHRyZWU6IHJlcXVpcmUoJy4vdHJlZScpLFxuICAgIFJlbmRlcmVySlM6IHJlcXVpcmUoJy4vcmVuZGVyZXJfanMnKSxcbiAgICBkZWZhdWx0X3JlZmVyZW5jZTogcmVxdWlyZSgnLi90b3JxdWUtcmVmZXJlbmNlJyksXG5cbiAgICAvLyBAVE9ET1xuICAgIHdyaXRlRXJyb3I6IGZ1bmN0aW9uKGN0eCwgb3B0aW9ucykge1xuICAgICAgICB2YXIgbWVzc2FnZSA9ICcnO1xuICAgICAgICB2YXIgZXh0cmFjdCA9IGN0eC5leHRyYWN0O1xuICAgICAgICB2YXIgZXJyb3IgPSBbXTtcblxuICAgICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICAgICAgICBpZiAob3B0aW9ucy5zaWxlbnQpIHsgcmV0dXJuOyB9XG5cbiAgICAgICAgb3B0aW9ucy5pbmRlbnQgPSBvcHRpb25zLmluZGVudCB8fCAnJztcblxuICAgICAgICBpZiAoISgnaW5kZXgnIGluIGN0eCkgfHwgIWV4dHJhY3QpIHtcbiAgICAgICAgICAgIHJldHVybiB1dGlsLmVycm9yKG9wdGlvbnMuaW5kZW50ICsgKGN0eC5zdGFjayB8fCBjdHgubWVzc2FnZSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGVvZihleHRyYWN0WzBdKSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIGVycm9yLnB1c2goc3R5bGl6ZSgoY3R4LmxpbmUgLSAxKSArICcgJyArIGV4dHJhY3RbMF0sICdncmV5JykpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGV4dHJhY3RbMV0gPT09ICcnICYmIHR5cGVvZiBleHRyYWN0WzJdID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgZXh0cmFjdFsxXSA9ICfCtic7XG4gICAgICAgIH1cbiAgICAgICAgZXJyb3IucHVzaChjdHgubGluZSArICcgJyArIGV4dHJhY3RbMV0uc2xpY2UoMCwgY3R4LmNvbHVtbikgK1xuICAgICAgICAgICAgc3R5bGl6ZShzdHlsaXplKGV4dHJhY3RbMV1bY3R4LmNvbHVtbl0sICdib2xkJykgK1xuICAgICAgICAgICAgZXh0cmFjdFsxXS5zbGljZShjdHguY29sdW1uICsgMSksICd5ZWxsb3cnKSk7XG5cbiAgICAgICAgaWYgKHR5cGVvZihleHRyYWN0WzJdKSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIGVycm9yLnB1c2goc3R5bGl6ZSgoY3R4LmxpbmUgKyAxKSArICcgJyArIGV4dHJhY3RbMl0sICdncmV5JykpO1xuICAgICAgICB9XG4gICAgICAgIGVycm9yID0gb3B0aW9ucy5pbmRlbnQgKyBlcnJvci5qb2luKCdcXG4nICsgb3B0aW9ucy5pbmRlbnQpICsgJ1xcMDMzWzBtXFxuJztcblxuICAgICAgICBtZXNzYWdlID0gb3B0aW9ucy5pbmRlbnQgKyBtZXNzYWdlICsgc3R5bGl6ZShjdHgubWVzc2FnZSwgJ3JlZCcpO1xuICAgICAgICBpZiAoY3R4LmZpbGVuYW1lKSAobWVzc2FnZSArPSBzdHlsaXplKCcgaW4gJywgJ3JlZCcpICsgY3R4LmZpbGVuYW1lKTtcblxuICAgICAgICB1dGlsLmVycm9yKG1lc3NhZ2UsIGVycm9yKTtcblxuICAgICAgICBpZiAoY3R4LmNhbGxMaW5lKSB7XG4gICAgICAgICAgICB1dGlsLmVycm9yKHN0eWxpemUoJ2Zyb20gJywgJ3JlZCcpICsgKGN0eC5maWxlbmFtZSB8fCAnJykpO1xuICAgICAgICAgICAgdXRpbC5lcnJvcihzdHlsaXplKGN0eC5jYWxsTGluZSwgJ2dyZXknKSArICcgJyArIGN0eC5jYWxsRXh0cmFjdCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGN0eC5zdGFjaykgeyB1dGlsLmVycm9yKHN0eWxpemUoY3R4LnN0YWNrLCAncmVkJykpOyB9XG4gICAgfVxufTtcblxucmVxdWlyZSgnLi90cmVlL2NhbGwnKTtcbnJlcXVpcmUoJy4vdHJlZS9jb2xvcicpO1xucmVxdWlyZSgnLi90cmVlL2NvbW1lbnQnKTtcbnJlcXVpcmUoJy4vdHJlZS9kZWZpbml0aW9uJyk7XG5yZXF1aXJlKCcuL3RyZWUvZGltZW5zaW9uJyk7XG5yZXF1aXJlKCcuL3RyZWUvZWxlbWVudCcpO1xucmVxdWlyZSgnLi90cmVlL2V4cHJlc3Npb24nKTtcbnJlcXVpcmUoJy4vdHJlZS9maWx0ZXJzZXQnKTtcbnJlcXVpcmUoJy4vdHJlZS9maWx0ZXInKTtcbnJlcXVpcmUoJy4vdHJlZS9maWVsZCcpO1xucmVxdWlyZSgnLi90cmVlL2tleXdvcmQnKTtcbnJlcXVpcmUoJy4vdHJlZS9sYXllcicpO1xucmVxdWlyZSgnLi90cmVlL2xpdGVyYWwnKTtcbnJlcXVpcmUoJy4vdHJlZS9vcGVyYXRpb24nKTtcbnJlcXVpcmUoJy4vdHJlZS9xdW90ZWQnKTtcbnJlcXVpcmUoJy4vdHJlZS9pbWFnZWZpbHRlcicpO1xucmVxdWlyZSgnLi90cmVlL3JlZmVyZW5jZScpO1xucmVxdWlyZSgnLi90cmVlL3J1bGUnKTtcbnJlcXVpcmUoJy4vdHJlZS9ydWxlc2V0Jyk7XG5yZXF1aXJlKCcuL3RyZWUvc2VsZWN0b3InKTtcbnJlcXVpcmUoJy4vdHJlZS9zdHlsZScpO1xucmVxdWlyZSgnLi90cmVlL3VybCcpO1xucmVxdWlyZSgnLi90cmVlL3ZhbHVlJyk7XG5yZXF1aXJlKCcuL3RyZWUvdmFyaWFibGUnKTtcbnJlcXVpcmUoJy4vdHJlZS96b29tJyk7XG5yZXF1aXJlKCcuL3RyZWUvaW52YWxpZCcpO1xucmVxdWlyZSgnLi90cmVlL2ZvbnRzZXQnKTtcbnJlcXVpcmUoJy4vdHJlZS9mcmFtZV9vZmZzZXQnKTtcbnJlcXVpcmUoJy4vZnVuY3Rpb25zJyk7XG5cbmZvciAodmFyIGsgaW4gY2FydG8pIHsgZXhwb3J0c1trXSA9IGNhcnRvW2tdOyB9XG5cbi8vIFN0eWxpemUgYSBzdHJpbmdcbmZ1bmN0aW9uIHN0eWxpemUoc3RyLCBzdHlsZSkge1xuICAgIHZhciBzdHlsZXMgPSB7XG4gICAgICAgICdib2xkJyA6IFsxLCAyMl0sXG4gICAgICAgICdpbnZlcnNlJyA6IFs3LCAyN10sXG4gICAgICAgICd1bmRlcmxpbmUnIDogWzQsIDI0XSxcbiAgICAgICAgJ3llbGxvdycgOiBbMzMsIDM5XSxcbiAgICAgICAgJ2dyZWVuJyA6IFszMiwgMzldLFxuICAgICAgICAncmVkJyA6IFszMSwgMzldLFxuICAgICAgICAnZ3JleScgOiBbOTAsIDM5XVxuICAgIH07XG4gICAgcmV0dXJuICdcXDAzM1snICsgc3R5bGVzW3N0eWxlXVswXSArICdtJyArIHN0ciArXG4gICAgICAgICAgICdcXDAzM1snICsgc3R5bGVzW3N0eWxlXVsxXSArICdtJztcbn1cblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jYXJ0by9saWIvY2FydG8vaW5kZXguanNcbi8vIG1vZHVsZSBpZCA9IDI3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QSIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 28 */
/* no static exports found */
/* all exports used */
/*!********************************************!*\
  !*** ./~/core-js/library/modules/_core.js ***!
  \********************************************/
/***/ (function(module, exports) {

eval("var core = module.exports = {version: '2.4.0'};\nif(typeof __e == 'number')__e = core; // eslint-disable-line no-undef//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjguanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19jb3JlLmpzPzFiNjIiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGNvcmUgPSBtb2R1bGUuZXhwb3J0cyA9IHt2ZXJzaW9uOiAnMi40LjAnfTtcbmlmKHR5cGVvZiBfX2UgPT0gJ251bWJlcicpX19lID0gY29yZTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZlxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fY29yZS5qc1xuLy8gbW9kdWxlIGlkID0gMjhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 29 */
/* no static exports found */
/* all exports used */
/*!***********************************************!*\
  !*** ./~/core-js/library/modules/_defined.js ***!
  \***********************************************/
/***/ (function(module, exports) {

eval("// 7.2.1 RequireObjectCoercible(argument)\nmodule.exports = function(it){\n  if(it == undefined)throw TypeError(\"Can't call method on  \" + it);\n  return it;\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjkuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19kZWZpbmVkLmpzPzQ1ZDMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gNy4yLjEgUmVxdWlyZU9iamVjdENvZXJjaWJsZShhcmd1bWVudClcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpe1xuICBpZihpdCA9PSB1bmRlZmluZWQpdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3QgY2FsbCBtZXRob2Qgb24gIFwiICsgaXQpO1xuICByZXR1cm4gaXQ7XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZGVmaW5lZC5qc1xuLy8gbW9kdWxlIGlkID0gMjlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 30 */
/* no static exports found */
/* all exports used */
/*!*************************************************!*\
  !*** ./~/core-js/library/modules/_is-object.js ***!
  \*************************************************/
/***/ (function(module, exports) {

eval("module.exports = function(it){\n  return typeof it === 'object' ? it !== null : typeof it === 'function';\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzAuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pcy1vYmplY3QuanM/MjRjOCJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXtcbiAgcmV0dXJuIHR5cGVvZiBpdCA9PT0gJ29iamVjdCcgPyBpdCAhPT0gbnVsbCA6IHR5cGVvZiBpdCA9PT0gJ2Z1bmN0aW9uJztcbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pcy1vYmplY3QuanNcbi8vIG1vZHVsZSBpZCA9IDMwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 31 */
/* no static exports found */
/* all exports used */
/*!*************************************************!*\
  !*** ./~/core-js/library/modules/_iterators.js ***!
  \*************************************************/
/***/ (function(module, exports) {

eval("module.exports = {};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzEuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pdGVyYXRvcnMuanM/YWZmNyJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHt9O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faXRlcmF0b3JzLmpzXG4vLyBtb2R1bGUgaWQgPSAzMVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 32 */
/* no static exports found */
/* all exports used */
/*!*****************************************************!*\
  !*** ./~/core-js/library/modules/_property-desc.js ***!
  \*****************************************************/
/***/ (function(module, exports) {

eval("module.exports = function(bitmap, value){\n  return {\n    enumerable  : !(bitmap & 1),\n    configurable: !(bitmap & 2),\n    writable    : !(bitmap & 4),\n    value       : value\n  };\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzIuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19wcm9wZXJ0eS1kZXNjLmpzPzFlODYiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihiaXRtYXAsIHZhbHVlKXtcbiAgcmV0dXJuIHtcbiAgICBlbnVtZXJhYmxlICA6ICEoYml0bWFwICYgMSksXG4gICAgY29uZmlndXJhYmxlOiAhKGJpdG1hcCAmIDIpLFxuICAgIHdyaXRhYmxlICAgIDogIShiaXRtYXAgJiA0KSxcbiAgICB2YWx1ZSAgICAgICA6IHZhbHVlXG4gIH07XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fcHJvcGVydHktZGVzYy5qc1xuLy8gbW9kdWxlIGlkID0gMzJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 33 */
/* no static exports found */
/* all exports used */
/*!**************************************************!*\
  !*** ./~/core-js/library/modules/_shared-key.js ***!
  \**************************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var shared = __webpack_require__(/*! ./_shared */ 48)('keys')\n  , uid    = __webpack_require__(/*! ./_uid */ 52);\nmodule.exports = function(key){\n  return shared[key] || (shared[key] = uid(key));\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19zaGFyZWQta2V5LmpzPzJhNmMiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpKCdrZXlzJylcbiAgLCB1aWQgICAgPSByZXF1aXJlKCcuL191aWQnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oa2V5KXtcbiAgcmV0dXJuIHNoYXJlZFtrZXldIHx8IChzaGFyZWRba2V5XSA9IHVpZChrZXkpKTtcbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19zaGFyZWQta2V5LmpzXG4vLyBtb2R1bGUgaWQgPSAzM1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 34 */
/* no static exports found */
/* all exports used */
/*!**************************************************!*\
  !*** ./~/core-js/library/modules/_to-integer.js ***!
  \**************************************************/
/***/ (function(module, exports) {

eval("// 7.1.4 ToInteger\nvar ceil  = Math.ceil\n  , floor = Math.floor;\nmodule.exports = function(it){\n  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzQuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL190by1pbnRlZ2VyLmpzP2Y2NWYiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gNy4xLjQgVG9JbnRlZ2VyXG52YXIgY2VpbCAgPSBNYXRoLmNlaWxcbiAgLCBmbG9vciA9IE1hdGguZmxvb3I7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXtcbiAgcmV0dXJuIGlzTmFOKGl0ID0gK2l0KSA/IDAgOiAoaXQgPiAwID8gZmxvb3IgOiBjZWlsKShpdCk7XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fdG8taW50ZWdlci5qc1xuLy8gbW9kdWxlIGlkID0gMzRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 35 */
/* no static exports found */
/* all exports used */
/*!**********************!*\
  !*** ./~/md5/md5.js ***!
  \**********************/
/***/ (function(module, exports, __webpack_require__) {

eval("(function(){\r\n  var crypt = __webpack_require__(/*! crypt */ 139),\r\n      utf8 = __webpack_require__(/*! charenc */ 40).utf8,\r\n      isBuffer = __webpack_require__(/*! is-buffer */ 140),\r\n      bin = __webpack_require__(/*! charenc */ 40).bin,\r\n\r\n  // The core\r\n  md5 = function (message, options) {\r\n    // Convert to byte array\r\n    if (message.constructor == String)\r\n      if (options && options.encoding === 'binary')\r\n        message = bin.stringToBytes(message);\r\n      else\r\n        message = utf8.stringToBytes(message);\r\n    else if (isBuffer(message))\r\n      message = Array.prototype.slice.call(message, 0);\r\n    else if (!Array.isArray(message))\r\n      message = message.toString();\r\n    // else, assume byte array already\r\n\r\n    var m = crypt.bytesToWords(message),\r\n        l = message.length * 8,\r\n        a =  1732584193,\r\n        b = -271733879,\r\n        c = -1732584194,\r\n        d =  271733878;\r\n\r\n    // Swap endian\r\n    for (var i = 0; i < m.length; i++) {\r\n      m[i] = ((m[i] <<  8) | (m[i] >>> 24)) & 0x00FF00FF |\r\n             ((m[i] << 24) | (m[i] >>>  8)) & 0xFF00FF00;\r\n    }\r\n\r\n    // Padding\r\n    m[l >>> 5] |= 0x80 << (l % 32);\r\n    m[(((l + 64) >>> 9) << 4) + 14] = l;\r\n\r\n    // Method shortcuts\r\n    var FF = md5._ff,\r\n        GG = md5._gg,\r\n        HH = md5._hh,\r\n        II = md5._ii;\r\n\r\n    for (var i = 0; i < m.length; i += 16) {\r\n\r\n      var aa = a,\r\n          bb = b,\r\n          cc = c,\r\n          dd = d;\r\n\r\n      a = FF(a, b, c, d, m[i+ 0],  7, -680876936);\r\n      d = FF(d, a, b, c, m[i+ 1], 12, -389564586);\r\n      c = FF(c, d, a, b, m[i+ 2], 17,  606105819);\r\n      b = FF(b, c, d, a, m[i+ 3], 22, -1044525330);\r\n      a = FF(a, b, c, d, m[i+ 4],  7, -176418897);\r\n      d = FF(d, a, b, c, m[i+ 5], 12,  1200080426);\r\n      c = FF(c, d, a, b, m[i+ 6], 17, -1473231341);\r\n      b = FF(b, c, d, a, m[i+ 7], 22, -45705983);\r\n      a = FF(a, b, c, d, m[i+ 8],  7,  1770035416);\r\n      d = FF(d, a, b, c, m[i+ 9], 12, -1958414417);\r\n      c = FF(c, d, a, b, m[i+10], 17, -42063);\r\n      b = FF(b, c, d, a, m[i+11], 22, -1990404162);\r\n      a = FF(a, b, c, d, m[i+12],  7,  1804603682);\r\n      d = FF(d, a, b, c, m[i+13], 12, -40341101);\r\n      c = FF(c, d, a, b, m[i+14], 17, -1502002290);\r\n      b = FF(b, c, d, a, m[i+15], 22,  1236535329);\r\n\r\n      a = GG(a, b, c, d, m[i+ 1],  5, -165796510);\r\n      d = GG(d, a, b, c, m[i+ 6],  9, -1069501632);\r\n      c = GG(c, d, a, b, m[i+11], 14,  643717713);\r\n      b = GG(b, c, d, a, m[i+ 0], 20, -373897302);\r\n      a = GG(a, b, c, d, m[i+ 5],  5, -701558691);\r\n      d = GG(d, a, b, c, m[i+10],  9,  38016083);\r\n      c = GG(c, d, a, b, m[i+15], 14, -660478335);\r\n      b = GG(b, c, d, a, m[i+ 4], 20, -405537848);\r\n      a = GG(a, b, c, d, m[i+ 9],  5,  568446438);\r\n      d = GG(d, a, b, c, m[i+14],  9, -1019803690);\r\n      c = GG(c, d, a, b, m[i+ 3], 14, -187363961);\r\n      b = GG(b, c, d, a, m[i+ 8], 20,  1163531501);\r\n      a = GG(a, b, c, d, m[i+13],  5, -1444681467);\r\n      d = GG(d, a, b, c, m[i+ 2],  9, -51403784);\r\n      c = GG(c, d, a, b, m[i+ 7], 14,  1735328473);\r\n      b = GG(b, c, d, a, m[i+12], 20, -1926607734);\r\n\r\n      a = HH(a, b, c, d, m[i+ 5],  4, -378558);\r\n      d = HH(d, a, b, c, m[i+ 8], 11, -2022574463);\r\n      c = HH(c, d, a, b, m[i+11], 16,  1839030562);\r\n      b = HH(b, c, d, a, m[i+14], 23, -35309556);\r\n      a = HH(a, b, c, d, m[i+ 1],  4, -1530992060);\r\n      d = HH(d, a, b, c, m[i+ 4], 11,  1272893353);\r\n      c = HH(c, d, a, b, m[i+ 7], 16, -155497632);\r\n      b = HH(b, c, d, a, m[i+10], 23, -1094730640);\r\n      a = HH(a, b, c, d, m[i+13],  4,  681279174);\r\n      d = HH(d, a, b, c, m[i+ 0], 11, -358537222);\r\n      c = HH(c, d, a, b, m[i+ 3], 16, -722521979);\r\n      b = HH(b, c, d, a, m[i+ 6], 23,  76029189);\r\n      a = HH(a, b, c, d, m[i+ 9],  4, -640364487);\r\n      d = HH(d, a, b, c, m[i+12], 11, -421815835);\r\n      c = HH(c, d, a, b, m[i+15], 16,  530742520);\r\n      b = HH(b, c, d, a, m[i+ 2], 23, -995338651);\r\n\r\n      a = II(a, b, c, d, m[i+ 0],  6, -198630844);\r\n      d = II(d, a, b, c, m[i+ 7], 10,  1126891415);\r\n      c = II(c, d, a, b, m[i+14], 15, -1416354905);\r\n      b = II(b, c, d, a, m[i+ 5], 21, -57434055);\r\n      a = II(a, b, c, d, m[i+12],  6,  1700485571);\r\n      d = II(d, a, b, c, m[i+ 3], 10, -1894986606);\r\n      c = II(c, d, a, b, m[i+10], 15, -1051523);\r\n      b = II(b, c, d, a, m[i+ 1], 21, -2054922799);\r\n      a = II(a, b, c, d, m[i+ 8],  6,  1873313359);\r\n      d = II(d, a, b, c, m[i+15], 10, -30611744);\r\n      c = II(c, d, a, b, m[i+ 6], 15, -1560198380);\r\n      b = II(b, c, d, a, m[i+13], 21,  1309151649);\r\n      a = II(a, b, c, d, m[i+ 4],  6, -145523070);\r\n      d = II(d, a, b, c, m[i+11], 10, -1120210379);\r\n      c = II(c, d, a, b, m[i+ 2], 15,  718787259);\r\n      b = II(b, c, d, a, m[i+ 9], 21, -343485551);\r\n\r\n      a = (a + aa) >>> 0;\r\n      b = (b + bb) >>> 0;\r\n      c = (c + cc) >>> 0;\r\n      d = (d + dd) >>> 0;\r\n    }\r\n\r\n    return crypt.endian([a, b, c, d]);\r\n  };\r\n\r\n  // Auxiliary functions\r\n  md5._ff  = function (a, b, c, d, x, s, t) {\r\n    var n = a + (b & c | ~b & d) + (x >>> 0) + t;\r\n    return ((n << s) | (n >>> (32 - s))) + b;\r\n  };\r\n  md5._gg  = function (a, b, c, d, x, s, t) {\r\n    var n = a + (b & d | c & ~d) + (x >>> 0) + t;\r\n    return ((n << s) | (n >>> (32 - s))) + b;\r\n  };\r\n  md5._hh  = function (a, b, c, d, x, s, t) {\r\n    var n = a + (b ^ c ^ d) + (x >>> 0) + t;\r\n    return ((n << s) | (n >>> (32 - s))) + b;\r\n  };\r\n  md5._ii  = function (a, b, c, d, x, s, t) {\r\n    var n = a + (c ^ (b | ~d)) + (x >>> 0) + t;\r\n    return ((n << s) | (n >>> (32 - s))) + b;\r\n  };\r\n\r\n  // Package private blocksize\r\n  md5._blocksize = 16;\r\n  md5._digestsize = 16;\r\n\r\n  module.exports = function (message, options) {\r\n    if (message === undefined || message === null)\r\n      throw new Error('Illegal argument ' + message);\r\n\r\n    var digestbytes = crypt.wordsToBytes(md5(message, options));\r\n    return options && options.asBytes ? digestbytes :\r\n        options && options.asString ? bin.bytesToString(digestbytes) :\r\n        crypt.bytesToHex(digestbytes);\r\n  };\r\n\r\n})();\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 36 */
/* no static exports found */
/* all exports used */
/*!******************************!*\
  !*** ./~/process/browser.js ***!
  \******************************/
/***/ (function(module, exports) {

eval("// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 37 */
/* no static exports found */
/* all exports used */
/*!******************************************!*\
  !*** ./~/ramda/src/internal/_isArray.js ***!
  \******************************************/
/***/ (function(module, exports) {

eval("/**\n * Tests whether or not an object is an array.\n *\n * @private\n * @param {*} val The object to test.\n * @return {Boolean} `true` if `val` is an array, `false` otherwise.\n * @example\n *\n *      _isArray([]); //=> true\n *      _isArray(null); //=> false\n *      _isArray({}); //=> false\n */\nmodule.exports = Array.isArray || function _isArray(val) {\n  return (val != null &&\n          val.length >= 0 &&\n          Object.prototype.toString.call(val) === '[object Array]');\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzcuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3JhbWRhL3NyYy9pbnRlcm5hbC9faXNBcnJheS5qcz9iNmM3Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVGVzdHMgd2hldGhlciBvciBub3QgYW4gb2JqZWN0IGlzIGFuIGFycmF5LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgb2JqZWN0IHRvIHRlc3QuXG4gKiBAcmV0dXJuIHtCb29sZWFufSBgdHJ1ZWAgaWYgYHZhbGAgaXMgYW4gYXJyYXksIGBmYWxzZWAgb3RoZXJ3aXNlLlxuICogQGV4YW1wbGVcbiAqXG4gKiAgICAgIF9pc0FycmF5KFtdKTsgLy89PiB0cnVlXG4gKiAgICAgIF9pc0FycmF5KG51bGwpOyAvLz0+IGZhbHNlXG4gKiAgICAgIF9pc0FycmF5KHt9KTsgLy89PiBmYWxzZVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gX2lzQXJyYXkodmFsKSB7XG4gIHJldHVybiAodmFsICE9IG51bGwgJiZcbiAgICAgICAgICB2YWwubGVuZ3RoID49IDAgJiZcbiAgICAgICAgICBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgQXJyYXldJyk7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3JhbWRhL3NyYy9pbnRlcm5hbC9faXNBcnJheS5qc1xuLy8gbW9kdWxlIGlkID0gMzdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 38 */
/* no static exports found */
/* all exports used */
/*!****************************!*\
  !*** ./src/utils/utils.js ***!
  \****************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n\t\tvalue: true\n});\n\nvar _split = __webpack_require__(/*! ramda/src/split */ 189);\n\nvar _split2 = _interopRequireDefault(_split);\n\nvar _reduce = __webpack_require__(/*! ramda/src/reduce */ 26);\n\nvar _reduce2 = _interopRequireDefault(_reduce);\n\nvar _map = __webpack_require__(/*! ramda/src/map */ 8);\n\nvar _map2 = _interopRequireDefault(_map);\n\nvar _replace = __webpack_require__(/*! ramda/src/replace */ 186);\n\nvar _replace2 = _interopRequireDefault(_replace);\n\nvar _compose = __webpack_require__(/*! ramda/src/compose */ 13);\n\nvar _compose2 = _interopRequireDefault(_compose);\n\nvar _toConsumableArray2 = __webpack_require__(/*! babel-runtime/helpers/toConsumableArray */ 80);\n\nvar _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);\n\nvar _curry = __webpack_require__(/*! ramda/src/curry */ 24);\n\nvar _curry2 = _interopRequireDefault(_curry);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar Utils = {};\n\nexports.default = Utils;\n\n\nvar geometries = {\n\t\t'1': '\"point\"',\n\t\t'2': '\"line\"',\n\t\t'3': '\"polygon\"'\n};\n\nUtils.curryCompose3 = function (compose) {\n\t\treturn (0, _curry2.default)(function (a, b, c) {\n\t\t\t\treturn compose(a, b, c);\n\t\t});\n};\n\nUtils.wrapCodeInFunction = function (innerCode) {\n\t\tvar attr = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [' '];\n\n\t\tattr = attr.join(',');\n\n\t\treturn ('function (' + attr + ') {\\n\\t\\t\\t\\tvar _value = null;\\n\\t\\t\\t\\t' + innerCode + '\\n\\t\\t\\t\\treturn _value;\\n\\t\\t\\t}').replace(/(\\t)/g, '');\n};\n\nUtils.functionString = function (fn) {\n\t\tvar args = fn.substring(fn.indexOf('(') + 1, fn.indexOf(')')).replace(/\\s/g, '');\n\n\t\targs = args ? args.split(',') : [];\n\n\t\tvar body = fn.substring(fn.indexOf('{') + 1, fn.lastIndexOf('}'));\n\t\tvar func = new (Function.prototype.bind.apply(Function, [null].concat((0, _toConsumableArray3.default)(args), [body])))();\n\n\t\tfunc.toString = function () {\n\t\t\t\treturn fn;\n\t\t};\n\n\t\treturn func;\n};\n\nUtils.transpile2Tangram = (0, _compose2.default)((0, _replace2.default)(/ctx.zoom/g, '$zoom'), (0, _replace2.default)(/data\\[/g, 'feature['), (0, _replace2.default)(/data\\['mapnik::geometry_type'\\] === (\\d)/g, function ($0, $1) {\n\t\treturn '$geometry === ' + geometries[$1];\n}));\n\nUtils.buildCCSSFn = function (js, attr) {\n\t\tvar fn = '';\n\n\t\tfor (var i = 0; i < js.length; i++) {\n\t\t\t\tfn += Utils.transpile2Tangram(js[i]);\n\t\t}\n\n\t\treturn Utils.functionString(Utils.wrapCodeInFunction(fn, attr));\n};\n\nUtils.cleanForExecuting = (0, _replace2.default)(/data\\['.*'\\] (===|>|<|>=|<=) ('?(.+)(?='|\\)| &&))/g, 'true');\n\nUtils.buildAndExecuteFn = function (js) {\n\t\treturn Utils.buildCCSSFn((0, _map2.default)(Utils.cleanForExecuting, js), ['$zoom'])(10);\n};\n\nUtils.generateDefault = function (val) {\n\t\treturn 'return ' + val + ';';\n};\n\nUtils.pick = (0, _curry2.default)(function (path, obj) {\n\t\treturn (0, _reduce2.default)(function (accumulator, key) {\n\t\t\t\treturn accumulator[key];\n\t\t}, obj, (0, _split2.default)('.', path));\n});//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzguanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL3V0aWxzL3V0aWxzLmpzP2JlNzMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3VycnksIGNvbXBvc2UsIHJlcGxhY2UsIHJlZHVjZSwgc3BsaXQsIG1hcCB9IGZyb20gJ3JhbWRhJztcblxudmFyIFV0aWxzID0ge307XG5cbmV4cG9ydCBkZWZhdWx0IFV0aWxzO1xuXG5jb25zdCBnZW9tZXRyaWVzID0ge1xuICAnMSc6ICdcInBvaW50XCInLFxuICAnMic6ICdcImxpbmVcIicsXG4gICczJzogJ1wicG9seWdvblwiJ1xufTtcblxuVXRpbHMuY3VycnlDb21wb3NlMyA9IGZ1bmN0aW9uIChjb21wb3NlKSB7XG4gIHJldHVybiBjdXJyeSgoYSxiLGMpID0+IGNvbXBvc2UoYSxiLGMpKTtcbn07XG5cblV0aWxzLndyYXBDb2RlSW5GdW5jdGlvbiA9IGZ1bmN0aW9uKGlubmVyQ29kZSwgYXR0ciA9IFsnICddKSB7XG5cdGF0dHIgPSBhdHRyLmpvaW4oJywnKTtcblxuXHRyZXR1cm4gYGZ1bmN0aW9uICgke2F0dHJ9KSB7XG5cdFx0XHRcdHZhciBfdmFsdWUgPSBudWxsO1xuXHRcdFx0XHQke2lubmVyQ29kZX1cblx0XHRcdFx0cmV0dXJuIF92YWx1ZTtcblx0XHRcdH1gLnJlcGxhY2UoLyhcXHQpL2csICcnKTtcbn07XG5cblV0aWxzLmZ1bmN0aW9uU3RyaW5nID0gZnVuY3Rpb24oZm4pIHtcblx0bGV0IGFyZ3MgPSBmblxuXHRcdFx0LnN1YnN0cmluZyggZm4uaW5kZXhPZignKCcpICsgMSwgZm4uaW5kZXhPZignKScpIClcblx0XHRcdC5yZXBsYWNlKC9cXHMvZywgJycpO1xuXG5cdGFyZ3MgPSBhcmdzID8gYXJncy5zcGxpdCgnLCcpIDogW107XG5cblx0bGV0IGJvZHkgPSBmbi5zdWJzdHJpbmcoIGZuLmluZGV4T2YoJ3snKSArIDEsIGZuLmxhc3RJbmRleE9mKCd9JykpO1xuXHRsZXQgZnVuYyA9IG5ldyBGdW5jdGlvbiguLi5hcmdzLCBib2R5KTtcblxuXHRmdW5jLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGZuO1xuXHR9O1xuXG5cdHJldHVybiBmdW5jO1xufTtcblxuVXRpbHMudHJhbnNwaWxlMlRhbmdyYW0gPSBjb21wb3NlKFxuICByZXBsYWNlKC9jdHguem9vbS9nLCAnJHpvb20nKSxcbiAgcmVwbGFjZSgvZGF0YVxcWy9nLCAnZmVhdHVyZVsnKSxcbiAgcmVwbGFjZSgvZGF0YVxcWydtYXBuaWs6Omdlb21ldHJ5X3R5cGUnXFxdID09PSAoXFxkKS9nLCAoJDAsICQxKSA9PiB7XG4gICAgcmV0dXJuICckZ2VvbWV0cnkgPT09ICcgKyBnZW9tZXRyaWVzWyQxXTtcbiAgfSlcbik7XG5cblV0aWxzLmJ1aWxkQ0NTU0ZuID0gZnVuY3Rpb24oanMsIGF0dHIpIHtcblx0bGV0IGZuID0gJyc7XG5cblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBqcy5sZW5ndGg7IGkrKykge1xuXHRcdGZuICs9IFV0aWxzLnRyYW5zcGlsZTJUYW5ncmFtKGpzW2ldKTtcblx0fVxuXG5cdHJldHVybiBVdGlscy5mdW5jdGlvblN0cmluZyhVdGlscy53cmFwQ29kZUluRnVuY3Rpb24oZm4sIGF0dHIpKTtcbn07XG5cblV0aWxzLmNsZWFuRm9yRXhlY3V0aW5nID0gcmVwbGFjZSgvZGF0YVxcWycuKidcXF0gKD09PXw+fDx8Pj18PD0pICgnPyguKykoPz0nfFxcKXwgJiYpKS9nLCAndHJ1ZScpO1xuXG5VdGlscy5idWlsZEFuZEV4ZWN1dGVGbiA9ICBmdW5jdGlvbiAoanMpIHtcbiAgcmV0dXJuIFV0aWxzLmJ1aWxkQ0NTU0ZuKFxuICAgIG1hcChcbiAgICAgIFV0aWxzLmNsZWFuRm9yRXhlY3V0aW5nLFxuICAgICAganNcbiAgICAgICksXG4gICAgICBbJyR6b29tJ11cbiAgICApKDEwKTtcbn07XG5cblV0aWxzLmdlbmVyYXRlRGVmYXVsdCA9IGZ1bmN0aW9uKHZhbCkge1xuXHRyZXR1cm4gYHJldHVybiAke3ZhbH07YDtcbn07XG5cblV0aWxzLnBpY2sgPSBjdXJyeSgocGF0aCwgb2JqKSA9PiB7XG4gIHJldHVybiByZWR1Y2UoKGFjY3VtdWxhdG9yLCBrZXkpID0+IHtcbiAgICByZXR1cm4gYWNjdW11bGF0b3Jba2V5XTtcbiAgfSwgb2JqLCBzcGxpdCgnLicsIHBhdGgpKTtcbn0pO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIHNyYy91dGlscy91dGlscy5qcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBSEE7QUFDQTtBQUtBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUlBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFPQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 39 */
/* no static exports found */
/* all exports used */
/*!******************************!*\
  !*** ./~/carto/package.json ***!
  \******************************/
/***/ (function(module, exports) {

eval("module.exports = {\n\t\"name\": \"carto\",\n\t\"version\": \"0.15.1-cdb3\",\n\t\"description\": \"CartoCSS Stylesheet Compiler\",\n\t\"url\": \"https://github.com/cartodb/carto\",\n\t\"repository\": {\n\t\t\"type\": \"git\",\n\t\t\"url\": \"http://github.com/cartodb/carto.git\"\n\t},\n\t\"author\": {\n\t\t\"name\": \"CartoDB\",\n\t\t\"url\": \"http://cartodb.com/\"\n\t},\n\t\"keywords\": [\n\t\t\"maps\",\n\t\t\"css\",\n\t\t\"stylesheets\"\n\t],\n\t\"contributors\": [\n\t\t\"Tom MacWright <macwright@gmail.com>\",\n\t\t\"Konstantin Käfer\",\n\t\t\"Alexis Sellier <self@cloudhead.net>\",\n\t\t\"Raul Ochoa <rochoa@cartodb.com>\",\n\t\t\"Javi Santana <jsantana@cartodb.com>\"\n\t],\n\t\"licenses\": [\n\t\t{\n\t\t\t\"type\": \"Apache\"\n\t\t}\n\t],\n\t\"bin\": {\n\t\t\"carto\": \"./bin/carto\"\n\t},\n\t\"man\": \"./man/carto.1\",\n\t\"main\": \"./lib/carto/index\",\n\t\"engines\": {\n\t\t\"node\": \">=0.4.x\"\n\t},\n\t\"dependencies\": {\n\t\t\"underscore\": \"1.8.3\",\n\t\t\"mapnik-reference\": \"~6.0.2\",\n\t\t\"optimist\": \"~0.6.0\"\n\t},\n\t\"devDependencies\": {\n\t\t\"mocha\": \"1.12.x\",\n\t\t\"jshint\": \"0.2.x\",\n\t\t\"sax\": \"0.1.x\",\n\t\t\"istanbul\": \"~0.2.14\",\n\t\t\"coveralls\": \"~2.10.1\",\n\t\t\"browserify\": \"~7.0.0\",\n\t\t\"uglify-js\": \"1.3.3\"\n\t},\n\t\"scripts\": {\n\t\t\"pretest\": \"npm install\",\n\t\t\"test\": \"mocha -R spec\",\n\t\t\"coverage\": \"istanbul cover ./node_modules/.bin/_mocha && coveralls < ./coverage/lcov.info\"\n\t}\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzkuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NhcnRvL3BhY2thZ2UuanNvbj85YmEyIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0ge1xuXHRcIm5hbWVcIjogXCJjYXJ0b1wiLFxuXHRcInZlcnNpb25cIjogXCIwLjE1LjEtY2RiM1wiLFxuXHRcImRlc2NyaXB0aW9uXCI6IFwiQ2FydG9DU1MgU3R5bGVzaGVldCBDb21waWxlclwiLFxuXHRcInVybFwiOiBcImh0dHBzOi8vZ2l0aHViLmNvbS9jYXJ0b2RiL2NhcnRvXCIsXG5cdFwicmVwb3NpdG9yeVwiOiB7XG5cdFx0XCJ0eXBlXCI6IFwiZ2l0XCIsXG5cdFx0XCJ1cmxcIjogXCJodHRwOi8vZ2l0aHViLmNvbS9jYXJ0b2RiL2NhcnRvLmdpdFwiXG5cdH0sXG5cdFwiYXV0aG9yXCI6IHtcblx0XHRcIm5hbWVcIjogXCJDYXJ0b0RCXCIsXG5cdFx0XCJ1cmxcIjogXCJodHRwOi8vY2FydG9kYi5jb20vXCJcblx0fSxcblx0XCJrZXl3b3Jkc1wiOiBbXG5cdFx0XCJtYXBzXCIsXG5cdFx0XCJjc3NcIixcblx0XHRcInN0eWxlc2hlZXRzXCJcblx0XSxcblx0XCJjb250cmlidXRvcnNcIjogW1xuXHRcdFwiVG9tIE1hY1dyaWdodCA8bWFjd3JpZ2h0QGdtYWlsLmNvbT5cIixcblx0XHRcIktvbnN0YW50aW4gS8OkZmVyXCIsXG5cdFx0XCJBbGV4aXMgU2VsbGllciA8c2VsZkBjbG91ZGhlYWQubmV0PlwiLFxuXHRcdFwiUmF1bCBPY2hvYSA8cm9jaG9hQGNhcnRvZGIuY29tPlwiLFxuXHRcdFwiSmF2aSBTYW50YW5hIDxqc2FudGFuYUBjYXJ0b2RiLmNvbT5cIlxuXHRdLFxuXHRcImxpY2Vuc2VzXCI6IFtcblx0XHR7XG5cdFx0XHRcInR5cGVcIjogXCJBcGFjaGVcIlxuXHRcdH1cblx0XSxcblx0XCJiaW5cIjoge1xuXHRcdFwiY2FydG9cIjogXCIuL2Jpbi9jYXJ0b1wiXG5cdH0sXG5cdFwibWFuXCI6IFwiLi9tYW4vY2FydG8uMVwiLFxuXHRcIm1haW5cIjogXCIuL2xpYi9jYXJ0by9pbmRleFwiLFxuXHRcImVuZ2luZXNcIjoge1xuXHRcdFwibm9kZVwiOiBcIj49MC40LnhcIlxuXHR9LFxuXHRcImRlcGVuZGVuY2llc1wiOiB7XG5cdFx0XCJ1bmRlcnNjb3JlXCI6IFwiMS44LjNcIixcblx0XHRcIm1hcG5pay1yZWZlcmVuY2VcIjogXCJ+Ni4wLjJcIixcblx0XHRcIm9wdGltaXN0XCI6IFwifjAuNi4wXCJcblx0fSxcblx0XCJkZXZEZXBlbmRlbmNpZXNcIjoge1xuXHRcdFwibW9jaGFcIjogXCIxLjEyLnhcIixcblx0XHRcImpzaGludFwiOiBcIjAuMi54XCIsXG5cdFx0XCJzYXhcIjogXCIwLjEueFwiLFxuXHRcdFwiaXN0YW5idWxcIjogXCJ+MC4yLjE0XCIsXG5cdFx0XCJjb3ZlcmFsbHNcIjogXCJ+Mi4xMC4xXCIsXG5cdFx0XCJicm93c2VyaWZ5XCI6IFwifjcuMC4wXCIsXG5cdFx0XCJ1Z2xpZnktanNcIjogXCIxLjMuM1wiXG5cdH0sXG5cdFwic2NyaXB0c1wiOiB7XG5cdFx0XCJwcmV0ZXN0XCI6IFwibnBtIGluc3RhbGxcIixcblx0XHRcInRlc3RcIjogXCJtb2NoYSAtUiBzcGVjXCIsXG5cdFx0XCJjb3ZlcmFnZVwiOiBcImlzdGFuYnVsIGNvdmVyIC4vbm9kZV9tb2R1bGVzLy5iaW4vX21vY2hhICYmIGNvdmVyYWxscyA8IC4vY292ZXJhZ2UvbGNvdi5pbmZvXCJcblx0fVxufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY2FydG8vcGFja2FnZS5qc29uXG4vLyBtb2R1bGUgaWQgPSAzOVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 40 */
/* no static exports found */
/* all exports used */
/*!******************************!*\
  !*** ./~/charenc/charenc.js ***!
  \******************************/
/***/ (function(module, exports) {

eval("var charenc = {\n  // UTF-8 encoding\n  utf8: {\n    // Convert a string to a byte array\n    stringToBytes: function(str) {\n      return charenc.bin.stringToBytes(unescape(encodeURIComponent(str)));\n    },\n\n    // Convert a byte array to a string\n    bytesToString: function(bytes) {\n      return decodeURIComponent(escape(charenc.bin.bytesToString(bytes)));\n    }\n  },\n\n  // Binary encoding\n  bin: {\n    // Convert a string to a byte array\n    stringToBytes: function(str) {\n      for (var bytes = [], i = 0; i < str.length; i++)\n        bytes.push(str.charCodeAt(i) & 0xFF);\n      return bytes;\n    },\n\n    // Convert a byte array to a string\n    bytesToString: function(bytes) {\n      for (var str = [], i = 0; i < bytes.length; i++)\n        str.push(String.fromCharCode(bytes[i]));\n      return str.join('');\n    }\n  }\n};\n\nmodule.exports = charenc;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDAuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NoYXJlbmMvY2hhcmVuYy5qcz9lZjRiIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBjaGFyZW5jID0ge1xuICAvLyBVVEYtOCBlbmNvZGluZ1xuICB1dGY4OiB7XG4gICAgLy8gQ29udmVydCBhIHN0cmluZyB0byBhIGJ5dGUgYXJyYXlcbiAgICBzdHJpbmdUb0J5dGVzOiBmdW5jdGlvbihzdHIpIHtcbiAgICAgIHJldHVybiBjaGFyZW5jLmJpbi5zdHJpbmdUb0J5dGVzKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChzdHIpKSk7XG4gICAgfSxcblxuICAgIC8vIENvbnZlcnQgYSBieXRlIGFycmF5IHRvIGEgc3RyaW5nXG4gICAgYnl0ZXNUb1N0cmluZzogZnVuY3Rpb24oYnl0ZXMpIHtcbiAgICAgIHJldHVybiBkZWNvZGVVUklDb21wb25lbnQoZXNjYXBlKGNoYXJlbmMuYmluLmJ5dGVzVG9TdHJpbmcoYnl0ZXMpKSk7XG4gICAgfVxuICB9LFxuXG4gIC8vIEJpbmFyeSBlbmNvZGluZ1xuICBiaW46IHtcbiAgICAvLyBDb252ZXJ0IGEgc3RyaW5nIHRvIGEgYnl0ZSBhcnJheVxuICAgIHN0cmluZ1RvQnl0ZXM6IGZ1bmN0aW9uKHN0cikge1xuICAgICAgZm9yICh2YXIgYnl0ZXMgPSBbXSwgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyBpKyspXG4gICAgICAgIGJ5dGVzLnB1c2goc3RyLmNoYXJDb2RlQXQoaSkgJiAweEZGKTtcbiAgICAgIHJldHVybiBieXRlcztcbiAgICB9LFxuXG4gICAgLy8gQ29udmVydCBhIGJ5dGUgYXJyYXkgdG8gYSBzdHJpbmdcbiAgICBieXRlc1RvU3RyaW5nOiBmdW5jdGlvbihieXRlcykge1xuICAgICAgZm9yICh2YXIgc3RyID0gW10sIGkgPSAwOyBpIDwgYnl0ZXMubGVuZ3RoOyBpKyspXG4gICAgICAgIHN0ci5wdXNoKFN0cmluZy5mcm9tQ2hhckNvZGUoYnl0ZXNbaV0pKTtcbiAgICAgIHJldHVybiBzdHIuam9pbignJyk7XG4gICAgfVxuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGNoYXJlbmM7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY2hhcmVuYy9jaGFyZW5jLmpzXG4vLyBtb2R1bGUgaWQgPSA0MFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 41 */
/* no static exports found */
/* all exports used */
/*!*******************************************!*\
  !*** ./~/core-js/library/modules/_cof.js ***!
  \*******************************************/
/***/ (function(module, exports) {

eval("var toString = {}.toString;\n\nmodule.exports = function(it){\n  return toString.call(it).slice(8, -1);\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDEuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19jb2YuanM/NDhlYSJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgdG9TdHJpbmcgPSB7fS50b1N0cmluZztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKGl0KS5zbGljZSg4LCAtMSk7XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fY29mLmpzXG4vLyBtb2R1bGUgaWQgPSA0MVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 42 */
/* no static exports found */
/* all exports used */
/*!*******************************************!*\
  !*** ./~/core-js/library/modules/_ctx.js ***!
  \*******************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("// optional / simple context binding\nvar aFunction = __webpack_require__(/*! ./_a-function */ 114);\nmodule.exports = function(fn, that, length){\n  aFunction(fn);\n  if(that === undefined)return fn;\n  switch(length){\n    case 1: return function(a){\n      return fn.call(that, a);\n    };\n    case 2: return function(a, b){\n      return fn.call(that, a, b);\n    };\n    case 3: return function(a, b, c){\n      return fn.call(that, a, b, c);\n    };\n  }\n  return function(/* ...args */){\n    return fn.apply(that, arguments);\n  };\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDIuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19jdHguanM/Y2UwMCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBvcHRpb25hbCAvIHNpbXBsZSBjb250ZXh0IGJpbmRpbmdcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGZuLCB0aGF0LCBsZW5ndGgpe1xuICBhRnVuY3Rpb24oZm4pO1xuICBpZih0aGF0ID09PSB1bmRlZmluZWQpcmV0dXJuIGZuO1xuICBzd2l0Y2gobGVuZ3RoKXtcbiAgICBjYXNlIDE6IHJldHVybiBmdW5jdGlvbihhKXtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEpO1xuICAgIH07XG4gICAgY2FzZSAyOiByZXR1cm4gZnVuY3Rpb24oYSwgYil7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhLCBiKTtcbiAgICB9O1xuICAgIGNhc2UgMzogcmV0dXJuIGZ1bmN0aW9uKGEsIGIsIGMpe1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYiwgYyk7XG4gICAgfTtcbiAgfVxuICByZXR1cm4gZnVuY3Rpb24oLyogLi4uYXJncyAqLyl7XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoYXQsIGFyZ3VtZW50cyk7XG4gIH07XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fY3R4LmpzXG4vLyBtb2R1bGUgaWQgPSA0MlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 43 */
/* no static exports found */
/* all exports used */
/*!**************************************************!*\
  !*** ./~/core-js/library/modules/_dom-create.js ***!
  \**************************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var isObject = __webpack_require__(/*! ./_is-object */ 30)\n  , document = __webpack_require__(/*! ./_global */ 10).document\n  // in old IE typeof document.createElement is 'object'\n  , is = isObject(document) && isObject(document.createElement);\nmodule.exports = function(it){\n  return is ? document.createElement(it) : {};\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19kb20tY3JlYXRlLmpzP2FiNDQiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0JylcbiAgLCBkb2N1bWVudCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLmRvY3VtZW50XG4gIC8vIGluIG9sZCBJRSB0eXBlb2YgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCBpcyAnb2JqZWN0J1xuICAsIGlzID0gaXNPYmplY3QoZG9jdW1lbnQpICYmIGlzT2JqZWN0KGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7XG4gIHJldHVybiBpcyA/IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoaXQpIDoge307XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZG9tLWNyZWF0ZS5qc1xuLy8gbW9kdWxlIGlkID0gNDNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 44 */
/* no static exports found */
/* all exports used */
/*!*****************************************************!*\
  !*** ./~/core-js/library/modules/_enum-bug-keys.js ***!
  \*****************************************************/
/***/ (function(module, exports) {

eval("// IE 8- don't enum bug keys\nmodule.exports = (\n  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'\n).split(',');//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDQuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19lbnVtLWJ1Zy1rZXlzLmpzPzc1OTgiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gSUUgOC0gZG9uJ3QgZW51bSBidWcga2V5c1xubW9kdWxlLmV4cG9ydHMgPSAoXG4gICdjb25zdHJ1Y3RvcixoYXNPd25Qcm9wZXJ0eSxpc1Byb3RvdHlwZU9mLHByb3BlcnR5SXNFbnVtZXJhYmxlLHRvTG9jYWxlU3RyaW5nLHRvU3RyaW5nLHZhbHVlT2YnXG4pLnNwbGl0KCcsJyk7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19lbnVtLWJ1Zy1rZXlzLmpzXG4vLyBtb2R1bGUgaWQgPSA0NFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 45 */
/* no static exports found */
/* all exports used */
/*!**********************************************!*\
  !*** ./~/core-js/library/modules/_export.js ***!
  \**********************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var global    = __webpack_require__(/*! ./_global */ 10)\n  , core      = __webpack_require__(/*! ./_core */ 28)\n  , ctx       = __webpack_require__(/*! ./_ctx */ 42)\n  , hide      = __webpack_require__(/*! ./_hide */ 22)\n  , PROTOTYPE = 'prototype';\n\nvar $export = function(type, name, source){\n  var IS_FORCED = type & $export.F\n    , IS_GLOBAL = type & $export.G\n    , IS_STATIC = type & $export.S\n    , IS_PROTO  = type & $export.P\n    , IS_BIND   = type & $export.B\n    , IS_WRAP   = type & $export.W\n    , exports   = IS_GLOBAL ? core : core[name] || (core[name] = {})\n    , expProto  = exports[PROTOTYPE]\n    , target    = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE]\n    , key, own, out;\n  if(IS_GLOBAL)source = name;\n  for(key in source){\n    // contains in native\n    own = !IS_FORCED && target && target[key] !== undefined;\n    if(own && key in exports)continue;\n    // export native or passed\n    out = own ? target[key] : source[key];\n    // prevent global pollution for namespaces\n    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]\n    // bind timers to global for call from export context\n    : IS_BIND && own ? ctx(out, global)\n    // wrap global constructors for prevent change them in library\n    : IS_WRAP && target[key] == out ? (function(C){\n      var F = function(a, b, c){\n        if(this instanceof C){\n          switch(arguments.length){\n            case 0: return new C;\n            case 1: return new C(a);\n            case 2: return new C(a, b);\n          } return new C(a, b, c);\n        } return C.apply(this, arguments);\n      };\n      F[PROTOTYPE] = C[PROTOTYPE];\n      return F;\n    // make static versions for prototype methods\n    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;\n    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%\n    if(IS_PROTO){\n      (exports.virtual || (exports.virtual = {}))[key] = out;\n      // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%\n      if(type & $export.R && expProto && !expProto[key])hide(expProto, key, out);\n    }\n  }\n};\n// type bitmap\n$export.F = 1;   // forced\n$export.G = 2;   // global\n$export.S = 4;   // static\n$export.P = 8;   // proto\n$export.B = 16;  // bind\n$export.W = 32;  // wrap\n$export.U = 64;  // safe\n$export.R = 128; // real proto method for `library` \nmodule.exports = $export;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDUuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19leHBvcnQuanM/ZWNlMiJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZ2xvYmFsICAgID0gcmVxdWlyZSgnLi9fZ2xvYmFsJylcbiAgLCBjb3JlICAgICAgPSByZXF1aXJlKCcuL19jb3JlJylcbiAgLCBjdHggICAgICAgPSByZXF1aXJlKCcuL19jdHgnKVxuICAsIGhpZGUgICAgICA9IHJlcXVpcmUoJy4vX2hpZGUnKVxuICAsIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xuXG52YXIgJGV4cG9ydCA9IGZ1bmN0aW9uKHR5cGUsIG5hbWUsIHNvdXJjZSl7XG4gIHZhciBJU19GT1JDRUQgPSB0eXBlICYgJGV4cG9ydC5GXG4gICAgLCBJU19HTE9CQUwgPSB0eXBlICYgJGV4cG9ydC5HXG4gICAgLCBJU19TVEFUSUMgPSB0eXBlICYgJGV4cG9ydC5TXG4gICAgLCBJU19QUk9UTyAgPSB0eXBlICYgJGV4cG9ydC5QXG4gICAgLCBJU19CSU5EICAgPSB0eXBlICYgJGV4cG9ydC5CXG4gICAgLCBJU19XUkFQICAgPSB0eXBlICYgJGV4cG9ydC5XXG4gICAgLCBleHBvcnRzICAgPSBJU19HTE9CQUwgPyBjb3JlIDogY29yZVtuYW1lXSB8fCAoY29yZVtuYW1lXSA9IHt9KVxuICAgICwgZXhwUHJvdG8gID0gZXhwb3J0c1tQUk9UT1RZUEVdXG4gICAgLCB0YXJnZXQgICAgPSBJU19HTE9CQUwgPyBnbG9iYWwgOiBJU19TVEFUSUMgPyBnbG9iYWxbbmFtZV0gOiAoZ2xvYmFsW25hbWVdIHx8IHt9KVtQUk9UT1RZUEVdXG4gICAgLCBrZXksIG93biwgb3V0O1xuICBpZihJU19HTE9CQUwpc291cmNlID0gbmFtZTtcbiAgZm9yKGtleSBpbiBzb3VyY2Upe1xuICAgIC8vIGNvbnRhaW5zIGluIG5hdGl2ZVxuICAgIG93biA9ICFJU19GT1JDRUQgJiYgdGFyZ2V0ICYmIHRhcmdldFtrZXldICE9PSB1bmRlZmluZWQ7XG4gICAgaWYob3duICYmIGtleSBpbiBleHBvcnRzKWNvbnRpbnVlO1xuICAgIC8vIGV4cG9ydCBuYXRpdmUgb3IgcGFzc2VkXG4gICAgb3V0ID0gb3duID8gdGFyZ2V0W2tleV0gOiBzb3VyY2Vba2V5XTtcbiAgICAvLyBwcmV2ZW50IGdsb2JhbCBwb2xsdXRpb24gZm9yIG5hbWVzcGFjZXNcbiAgICBleHBvcnRzW2tleV0gPSBJU19HTE9CQUwgJiYgdHlwZW9mIHRhcmdldFtrZXldICE9ICdmdW5jdGlvbicgPyBzb3VyY2Vba2V5XVxuICAgIC8vIGJpbmQgdGltZXJzIHRvIGdsb2JhbCBmb3IgY2FsbCBmcm9tIGV4cG9ydCBjb250ZXh0XG4gICAgOiBJU19CSU5EICYmIG93biA/IGN0eChvdXQsIGdsb2JhbClcbiAgICAvLyB3cmFwIGdsb2JhbCBjb25zdHJ1Y3RvcnMgZm9yIHByZXZlbnQgY2hhbmdlIHRoZW0gaW4gbGlicmFyeVxuICAgIDogSVNfV1JBUCAmJiB0YXJnZXRba2V5XSA9PSBvdXQgPyAoZnVuY3Rpb24oQyl7XG4gICAgICB2YXIgRiA9IGZ1bmN0aW9uKGEsIGIsIGMpe1xuICAgICAgICBpZih0aGlzIGluc3RhbmNlb2YgQyl7XG4gICAgICAgICAgc3dpdGNoKGFyZ3VtZW50cy5sZW5ndGgpe1xuICAgICAgICAgICAgY2FzZSAwOiByZXR1cm4gbmV3IEM7XG4gICAgICAgICAgICBjYXNlIDE6IHJldHVybiBuZXcgQyhhKTtcbiAgICAgICAgICAgIGNhc2UgMjogcmV0dXJuIG5ldyBDKGEsIGIpO1xuICAgICAgICAgIH0gcmV0dXJuIG5ldyBDKGEsIGIsIGMpO1xuICAgICAgICB9IHJldHVybiBDLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB9O1xuICAgICAgRltQUk9UT1RZUEVdID0gQ1tQUk9UT1RZUEVdO1xuICAgICAgcmV0dXJuIEY7XG4gICAgLy8gbWFrZSBzdGF0aWMgdmVyc2lvbnMgZm9yIHByb3RvdHlwZSBtZXRob2RzXG4gICAgfSkob3V0KSA6IElTX1BST1RPICYmIHR5cGVvZiBvdXQgPT0gJ2Z1bmN0aW9uJyA/IGN0eChGdW5jdGlvbi5jYWxsLCBvdXQpIDogb3V0O1xuICAgIC8vIGV4cG9ydCBwcm90byBtZXRob2RzIHRvIGNvcmUuJUNPTlNUUlVDVE9SJS5tZXRob2RzLiVOQU1FJVxuICAgIGlmKElTX1BST1RPKXtcbiAgICAgIChleHBvcnRzLnZpcnR1YWwgfHwgKGV4cG9ydHMudmlydHVhbCA9IHt9KSlba2V5XSA9IG91dDtcbiAgICAgIC8vIGV4cG9ydCBwcm90byBtZXRob2RzIHRvIGNvcmUuJUNPTlNUUlVDVE9SJS5wcm90b3R5cGUuJU5BTUUlXG4gICAgICBpZih0eXBlICYgJGV4cG9ydC5SICYmIGV4cFByb3RvICYmICFleHBQcm90b1trZXldKWhpZGUoZXhwUHJvdG8sIGtleSwgb3V0KTtcbiAgICB9XG4gIH1cbn07XG4vLyB0eXBlIGJpdG1hcFxuJGV4cG9ydC5GID0gMTsgICAvLyBmb3JjZWRcbiRleHBvcnQuRyA9IDI7ICAgLy8gZ2xvYmFsXG4kZXhwb3J0LlMgPSA0OyAgIC8vIHN0YXRpY1xuJGV4cG9ydC5QID0gODsgICAvLyBwcm90b1xuJGV4cG9ydC5CID0gMTY7ICAvLyBiaW5kXG4kZXhwb3J0LlcgPSAzMjsgIC8vIHdyYXBcbiRleHBvcnQuVSA9IDY0OyAgLy8gc2FmZVxuJGV4cG9ydC5SID0gMTI4OyAvLyByZWFsIHByb3RvIG1ldGhvZCBmb3IgYGxpYnJhcnlgIFxubW9kdWxlLmV4cG9ydHMgPSAkZXhwb3J0O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZXhwb3J0LmpzXG4vLyBtb2R1bGUgaWQgPSA0NVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 46 */
/* no static exports found */
/* all exports used */
/*!*********************************************!*\
  !*** ./~/core-js/library/modules/_fails.js ***!
  \*********************************************/
/***/ (function(module, exports) {

eval("module.exports = function(exec){\n  try {\n    return !!exec();\n  } catch(e){\n    return true;\n  }\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDYuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19mYWlscy5qcz85MzVkIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oZXhlYyl7XG4gIHRyeSB7XG4gICAgcmV0dXJuICEhZXhlYygpO1xuICB9IGNhdGNoKGUpe1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZmFpbHMuanNcbi8vIG1vZHVsZSBpZCA9IDQ2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 47 */
/* no static exports found */
/* all exports used */
/*!*********************************************************!*\
  !*** ./~/core-js/library/modules/_set-to-string-tag.js ***!
  \*********************************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var def = __webpack_require__(/*! ./_object-dp */ 23).f\n  , has = __webpack_require__(/*! ./_has */ 21)\n  , TAG = __webpack_require__(/*! ./_wks */ 5)('toStringTag');\n\nmodule.exports = function(it, tag, stat){\n  if(it && !has(it = stat ? it : it.prototype, TAG))def(it, TAG, {configurable: true, value: tag});\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDcuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19zZXQtdG8tc3RyaW5nLXRhZy5qcz9jOTQ1Il0sInNvdXJjZXNDb250ZW50IjpbInZhciBkZWYgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mXG4gICwgaGFzID0gcmVxdWlyZSgnLi9faGFzJylcbiAgLCBUQUcgPSByZXF1aXJlKCcuL193a3MnKSgndG9TdHJpbmdUYWcnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCwgdGFnLCBzdGF0KXtcbiAgaWYoaXQgJiYgIWhhcyhpdCA9IHN0YXQgPyBpdCA6IGl0LnByb3RvdHlwZSwgVEFHKSlkZWYoaXQsIFRBRywge2NvbmZpZ3VyYWJsZTogdHJ1ZSwgdmFsdWU6IHRhZ30pO1xufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3NldC10by1zdHJpbmctdGFnLmpzXG4vLyBtb2R1bGUgaWQgPSA0N1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 48 */
/* no static exports found */
/* all exports used */
/*!**********************************************!*\
  !*** ./~/core-js/library/modules/_shared.js ***!
  \**********************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var global = __webpack_require__(/*! ./_global */ 10)\n  , SHARED = '__core-js_shared__'\n  , store  = global[SHARED] || (global[SHARED] = {});\nmodule.exports = function(key){\n  return store[key] || (store[key] = {});\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDguanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19zaGFyZWQuanM/N2I2YyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJylcbiAgLCBTSEFSRUQgPSAnX19jb3JlLWpzX3NoYXJlZF9fJ1xuICAsIHN0b3JlICA9IGdsb2JhbFtTSEFSRURdIHx8IChnbG9iYWxbU0hBUkVEXSA9IHt9KTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oa2V5KXtcbiAgcmV0dXJuIHN0b3JlW2tleV0gfHwgKHN0b3JlW2tleV0gPSB7fSk7XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fc2hhcmVkLmpzXG4vLyBtb2R1bGUgaWQgPSA0OFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 49 */
/* no static exports found */
/* all exports used */
/*!**************************************************!*\
  !*** ./~/core-js/library/modules/_to-iobject.js ***!
  \**************************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("// to indexed object, toObject with fallback for non-array-like ES3 strings\nvar IObject = __webpack_require__(/*! ./_iobject */ 120)\n  , defined = __webpack_require__(/*! ./_defined */ 29);\nmodule.exports = function(it){\n  return IObject(defined(it));\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDkuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL190by1pb2JqZWN0LmpzPzY5NDYiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gdG8gaW5kZXhlZCBvYmplY3QsIHRvT2JqZWN0IHdpdGggZmFsbGJhY2sgZm9yIG5vbi1hcnJheS1saWtlIEVTMyBzdHJpbmdzXG52YXIgSU9iamVjdCA9IHJlcXVpcmUoJy4vX2lvYmplY3QnKVxuICAsIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXtcbiAgcmV0dXJuIElPYmplY3QoZGVmaW5lZChpdCkpO1xufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3RvLWlvYmplY3QuanNcbi8vIG1vZHVsZSBpZCA9IDQ5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 50 */
/* no static exports found */
/* all exports used */
/*!*************************************************!*\
  !*** ./~/core-js/library/modules/_to-length.js ***!
  \*************************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("// 7.1.15 ToLength\nvar toInteger = __webpack_require__(/*! ./_to-integer */ 34)\n  , min       = Math.min;\nmodule.exports = function(it){\n  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTAuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL190by1sZW5ndGguanM/NjJhNyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyA3LjEuMTUgVG9MZW5ndGhcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJylcbiAgLCBtaW4gICAgICAgPSBNYXRoLm1pbjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpe1xuICByZXR1cm4gaXQgPiAwID8gbWluKHRvSW50ZWdlcihpdCksIDB4MWZmZmZmZmZmZmZmZmYpIDogMDsgLy8gcG93KDIsIDUzKSAtIDEgPT0gOTAwNzE5OTI1NDc0MDk5MVxufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3RvLWxlbmd0aC5qc1xuLy8gbW9kdWxlIGlkID0gNTBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 51 */
/* no static exports found */
/* all exports used */
/*!*************************************************!*\
  !*** ./~/core-js/library/modules/_to-object.js ***!
  \*************************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("// 7.1.13 ToObject(argument)\nvar defined = __webpack_require__(/*! ./_defined */ 29);\nmodule.exports = function(it){\n  return Object(defined(it));\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTEuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL190by1vYmplY3QuanM/YjVjMCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyA3LjEuMTMgVG9PYmplY3QoYXJndW1lbnQpXG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpe1xuICByZXR1cm4gT2JqZWN0KGRlZmluZWQoaXQpKTtcbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL190by1vYmplY3QuanNcbi8vIG1vZHVsZSBpZCA9IDUxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 52 */
/* no static exports found */
/* all exports used */
/*!*******************************************!*\
  !*** ./~/core-js/library/modules/_uid.js ***!
  \*******************************************/
/***/ (function(module, exports) {

eval("var id = 0\n  , px = Math.random();\nmodule.exports = function(key){\n  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTIuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL191aWQuanM/ZThjZCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgaWQgPSAwXG4gICwgcHggPSBNYXRoLnJhbmRvbSgpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihrZXkpe1xuICByZXR1cm4gJ1N5bWJvbCgnLmNvbmNhdChrZXkgPT09IHVuZGVmaW5lZCA/ICcnIDoga2V5LCAnKV8nLCAoKytpZCArIHB4KS50b1N0cmluZygzNikpO1xufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3VpZC5qc1xuLy8gbW9kdWxlIGlkID0gNTJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 53 */
/* no static exports found */
/* all exports used */
/*!****************************!*\
  !*** ./~/mapnik-reference ***!
  \****************************/
/***/ (function(module, exports) {

eval("function webpackEmptyContext(req) {\n\tthrow new Error(\"Cannot find module '\" + req + \"'.\");\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 53;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L21hcG5pay1yZWZlcmVuY2U/ZDY3OSJdLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiB3ZWJwYWNrRW1wdHlDb250ZXh0KHJlcSkge1xuXHR0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiICsgcmVxICsgXCInLlwiKTtcbn1cbndlYnBhY2tFbXB0eUNvbnRleHQua2V5cyA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gW107IH07XG53ZWJwYWNrRW1wdHlDb250ZXh0LnJlc29sdmUgPSB3ZWJwYWNrRW1wdHlDb250ZXh0O1xubW9kdWxlLmV4cG9ydHMgPSB3ZWJwYWNrRW1wdHlDb250ZXh0O1xud2VicGFja0VtcHR5Q29udGV4dC5pZCA9IDUzO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9tYXBuaWstcmVmZXJlbmNlXG4vLyBtb2R1bGUgaWQgPSA1M1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 54 */
/* no static exports found */
/* all exports used */
/*!******************************!*\
  !*** ./~/ramda/src/apply.js ***!
  \******************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var _curry2 = __webpack_require__(/*! ./internal/_curry2 */ 1);\n\n\n/**\n * Applies function `fn` to the argument list `args`. This is useful for\n * creating a fixed-arity function from a variadic function. `fn` should be a\n * bound function if context is significant.\n *\n * @func\n * @memberOf R\n * @since v0.7.0\n * @category Function\n * @sig (*... -> a) -> [*] -> a\n * @param {Function} fn The function which will be called with `args`\n * @param {Array} args The arguments to call `fn` with\n * @return {*} result The result, equivalent to `fn(...args)`\n * @see R.call, R.unapply\n * @example\n *\n *      var nums = [1, 2, 3, -99, 42, 6, 7];\n *      R.apply(Math.max, nums); //=> 42\n * @symb R.apply(f, [a, b, c]) = f(a, b, c)\n */\nmodule.exports = _curry2(function apply(fn, args) {\n  return fn.apply(this, args);\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTQuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3JhbWRhL3NyYy9hcHBseS5qcz8yNTIwIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBfY3VycnkyID0gcmVxdWlyZSgnLi9pbnRlcm5hbC9fY3VycnkyJyk7XG5cblxuLyoqXG4gKiBBcHBsaWVzIGZ1bmN0aW9uIGBmbmAgdG8gdGhlIGFyZ3VtZW50IGxpc3QgYGFyZ3NgLiBUaGlzIGlzIHVzZWZ1bCBmb3JcbiAqIGNyZWF0aW5nIGEgZml4ZWQtYXJpdHkgZnVuY3Rpb24gZnJvbSBhIHZhcmlhZGljIGZ1bmN0aW9uLiBgZm5gIHNob3VsZCBiZSBhXG4gKiBib3VuZCBmdW5jdGlvbiBpZiBjb250ZXh0IGlzIHNpZ25pZmljYW50LlxuICpcbiAqIEBmdW5jXG4gKiBAbWVtYmVyT2YgUlxuICogQHNpbmNlIHYwLjcuMFxuICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gKiBAc2lnICgqLi4uIC0+IGEpIC0+IFsqXSAtPiBhXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgZnVuY3Rpb24gd2hpY2ggd2lsbCBiZSBjYWxsZWQgd2l0aCBgYXJnc2BcbiAqIEBwYXJhbSB7QXJyYXl9IGFyZ3MgVGhlIGFyZ3VtZW50cyB0byBjYWxsIGBmbmAgd2l0aFxuICogQHJldHVybiB7Kn0gcmVzdWx0IFRoZSByZXN1bHQsIGVxdWl2YWxlbnQgdG8gYGZuKC4uLmFyZ3MpYFxuICogQHNlZSBSLmNhbGwsIFIudW5hcHBseVxuICogQGV4YW1wbGVcbiAqXG4gKiAgICAgIHZhciBudW1zID0gWzEsIDIsIDMsIC05OSwgNDIsIDYsIDddO1xuICogICAgICBSLmFwcGx5KE1hdGgubWF4LCBudW1zKTsgLy89PiA0MlxuICogQHN5bWIgUi5hcHBseShmLCBbYSwgYiwgY10pID0gZihhLCBiLCBjKVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IF9jdXJyeTIoZnVuY3Rpb24gYXBwbHkoZm4sIGFyZ3MpIHtcbiAgcmV0dXJuIGZuLmFwcGx5KHRoaXMsIGFyZ3MpO1xufSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcmFtZGEvc3JjL2FwcGx5LmpzXG4vLyBtb2R1bGUgaWQgPSA1NFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 55 */
/* no static exports found */
/* all exports used */
/*!**********************************!*\
  !*** ./~/ramda/src/applySpec.js ***!
  \**********************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var _curry1 = __webpack_require__(/*! ./internal/_curry1 */ 2);\nvar apply = __webpack_require__(/*! ./apply */ 54);\nvar curryN = __webpack_require__(/*! ./curryN */ 6);\nvar map = __webpack_require__(/*! ./map */ 8);\nvar max = __webpack_require__(/*! ./max */ 63);\nvar pluck = __webpack_require__(/*! ./pluck */ 184);\nvar reduce = __webpack_require__(/*! ./reduce */ 26);\nvar values = __webpack_require__(/*! ./values */ 66);\n\n\n/**\n * Given a spec object recursively mapping properties to functions, creates a\n * function producing an object of the same structure, by mapping each property\n * to the result of calling its associated function with the supplied arguments.\n *\n * @func\n * @memberOf R\n * @since v0.20.0\n * @category Function\n * @sig {k: ((a, b, ..., m) -> v)} -> ((a, b, ..., m) -> {k: v})\n * @param {Object} spec an object recursively mapping properties to functions for\n *        producing the values for these properties.\n * @return {Function} A function that returns an object of the same structure\n * as `spec', with each property set to the value returned by calling its\n * associated function with the supplied arguments.\n * @see R.converge, R.juxt\n * @example\n *\n *      var getMetrics = R.applySpec({\n *                                      sum: R.add,\n *                                      nested: { mul: R.multiply }\n *                                   });\n *      getMetrics(2, 4); // => { sum: 6, nested: { mul: 8 } }\n * @symb R.applySpec({ x: f, y: { z: g } })(a, b) = { x: f(a, b), y: { z: g(a, b) } }\n */\nmodule.exports = _curry1(function applySpec(spec) {\n  spec = map(function(v) { return typeof v == 'function' ? v : applySpec(v); },\n             spec);\n  return curryN(reduce(max, 0, pluck('length', values(spec))),\n                function() {\n                  var args = arguments;\n                  return map(function(f) { return apply(f, args); }, spec);\n                });\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTUuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3JhbWRhL3NyYy9hcHBseVNwZWMuanM/OWMxZSJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX2N1cnJ5MSA9IHJlcXVpcmUoJy4vaW50ZXJuYWwvX2N1cnJ5MScpO1xudmFyIGFwcGx5ID0gcmVxdWlyZSgnLi9hcHBseScpO1xudmFyIGN1cnJ5TiA9IHJlcXVpcmUoJy4vY3VycnlOJyk7XG52YXIgbWFwID0gcmVxdWlyZSgnLi9tYXAnKTtcbnZhciBtYXggPSByZXF1aXJlKCcuL21heCcpO1xudmFyIHBsdWNrID0gcmVxdWlyZSgnLi9wbHVjaycpO1xudmFyIHJlZHVjZSA9IHJlcXVpcmUoJy4vcmVkdWNlJyk7XG52YXIgdmFsdWVzID0gcmVxdWlyZSgnLi92YWx1ZXMnKTtcblxuXG4vKipcbiAqIEdpdmVuIGEgc3BlYyBvYmplY3QgcmVjdXJzaXZlbHkgbWFwcGluZyBwcm9wZXJ0aWVzIHRvIGZ1bmN0aW9ucywgY3JlYXRlcyBhXG4gKiBmdW5jdGlvbiBwcm9kdWNpbmcgYW4gb2JqZWN0IG9mIHRoZSBzYW1lIHN0cnVjdHVyZSwgYnkgbWFwcGluZyBlYWNoIHByb3BlcnR5XG4gKiB0byB0aGUgcmVzdWx0IG9mIGNhbGxpbmcgaXRzIGFzc29jaWF0ZWQgZnVuY3Rpb24gd2l0aCB0aGUgc3VwcGxpZWQgYXJndW1lbnRzLlxuICpcbiAqIEBmdW5jXG4gKiBAbWVtYmVyT2YgUlxuICogQHNpbmNlIHYwLjIwLjBcbiAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICogQHNpZyB7azogKChhLCBiLCAuLi4sIG0pIC0+IHYpfSAtPiAoKGEsIGIsIC4uLiwgbSkgLT4ge2s6IHZ9KVxuICogQHBhcmFtIHtPYmplY3R9IHNwZWMgYW4gb2JqZWN0IHJlY3Vyc2l2ZWx5IG1hcHBpbmcgcHJvcGVydGllcyB0byBmdW5jdGlvbnMgZm9yXG4gKiAgICAgICAgcHJvZHVjaW5nIHRoZSB2YWx1ZXMgZm9yIHRoZXNlIHByb3BlcnRpZXMuXG4gKiBAcmV0dXJuIHtGdW5jdGlvbn0gQSBmdW5jdGlvbiB0aGF0IHJldHVybnMgYW4gb2JqZWN0IG9mIHRoZSBzYW1lIHN0cnVjdHVyZVxuICogYXMgYHNwZWMnLCB3aXRoIGVhY2ggcHJvcGVydHkgc2V0IHRvIHRoZSB2YWx1ZSByZXR1cm5lZCBieSBjYWxsaW5nIGl0c1xuICogYXNzb2NpYXRlZCBmdW5jdGlvbiB3aXRoIHRoZSBzdXBwbGllZCBhcmd1bWVudHMuXG4gKiBAc2VlIFIuY29udmVyZ2UsIFIuanV4dFxuICogQGV4YW1wbGVcbiAqXG4gKiAgICAgIHZhciBnZXRNZXRyaWNzID0gUi5hcHBseVNwZWMoe1xuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1bTogUi5hZGQsXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmVzdGVkOiB7IG11bDogUi5tdWx0aXBseSB9XG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gKiAgICAgIGdldE1ldHJpY3MoMiwgNCk7IC8vID0+IHsgc3VtOiA2LCBuZXN0ZWQ6IHsgbXVsOiA4IH0gfVxuICogQHN5bWIgUi5hcHBseVNwZWMoeyB4OiBmLCB5OiB7IHo6IGcgfSB9KShhLCBiKSA9IHsgeDogZihhLCBiKSwgeTogeyB6OiBnKGEsIGIpIH0gfVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IF9jdXJyeTEoZnVuY3Rpb24gYXBwbHlTcGVjKHNwZWMpIHtcbiAgc3BlYyA9IG1hcChmdW5jdGlvbih2KSB7IHJldHVybiB0eXBlb2YgdiA9PSAnZnVuY3Rpb24nID8gdiA6IGFwcGx5U3BlYyh2KTsgfSxcbiAgICAgICAgICAgICBzcGVjKTtcbiAgcmV0dXJuIGN1cnJ5TihyZWR1Y2UobWF4LCAwLCBwbHVjaygnbGVuZ3RoJywgdmFsdWVzKHNwZWMpKSksXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cztcbiAgICAgICAgICAgICAgICAgIHJldHVybiBtYXAoZnVuY3Rpb24oZikgeyByZXR1cm4gYXBwbHkoZiwgYXJncyk7IH0sIHNwZWMpO1xuICAgICAgICAgICAgICAgIH0pO1xufSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcmFtZGEvc3JjL2FwcGx5U3BlYy5qc1xuLy8gbW9kdWxlIGlkID0gNTVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 56 */
/* no static exports found */
/* all exports used */
/*!*******************************!*\
  !*** ./~/ramda/src/equals.js ***!
  \*******************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var _curry2 = __webpack_require__(/*! ./internal/_curry2 */ 1);\nvar _equals = __webpack_require__(/*! ./internal/_equals */ 157);\n\n\n/**\n * Returns `true` if its arguments are equivalent, `false` otherwise. Handles\n * cyclical data structures.\n *\n * Dispatches symmetrically to the `equals` methods of both arguments, if\n * present.\n *\n * @func\n * @memberOf R\n * @since v0.15.0\n * @category Relation\n * @sig a -> b -> Boolean\n * @param {*} a\n * @param {*} b\n * @return {Boolean}\n * @example\n *\n *      R.equals(1, 1); //=> true\n *      R.equals(1, '1'); //=> false\n *      R.equals([1, 2, 3], [1, 2, 3]); //=> true\n *\n *      var a = {}; a.v = a;\n *      var b = {}; b.v = b;\n *      R.equals(a, b); //=> true\n */\nmodule.exports = _curry2(function equals(a, b) {\n  return _equals(a, b, [], []);\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTYuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3JhbWRhL3NyYy9lcXVhbHMuanM/ZGFhNyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX2N1cnJ5MiA9IHJlcXVpcmUoJy4vaW50ZXJuYWwvX2N1cnJ5MicpO1xudmFyIF9lcXVhbHMgPSByZXF1aXJlKCcuL2ludGVybmFsL19lcXVhbHMnKTtcblxuXG4vKipcbiAqIFJldHVybnMgYHRydWVgIGlmIGl0cyBhcmd1bWVudHMgYXJlIGVxdWl2YWxlbnQsIGBmYWxzZWAgb3RoZXJ3aXNlLiBIYW5kbGVzXG4gKiBjeWNsaWNhbCBkYXRhIHN0cnVjdHVyZXMuXG4gKlxuICogRGlzcGF0Y2hlcyBzeW1tZXRyaWNhbGx5IHRvIHRoZSBgZXF1YWxzYCBtZXRob2RzIG9mIGJvdGggYXJndW1lbnRzLCBpZlxuICogcHJlc2VudC5cbiAqXG4gKiBAZnVuY1xuICogQG1lbWJlck9mIFJcbiAqIEBzaW5jZSB2MC4xNS4wXG4gKiBAY2F0ZWdvcnkgUmVsYXRpb25cbiAqIEBzaWcgYSAtPiBiIC0+IEJvb2xlYW5cbiAqIEBwYXJhbSB7Kn0gYVxuICogQHBhcmFtIHsqfSBiXG4gKiBAcmV0dXJuIHtCb29sZWFufVxuICogQGV4YW1wbGVcbiAqXG4gKiAgICAgIFIuZXF1YWxzKDEsIDEpOyAvLz0+IHRydWVcbiAqICAgICAgUi5lcXVhbHMoMSwgJzEnKTsgLy89PiBmYWxzZVxuICogICAgICBSLmVxdWFscyhbMSwgMiwgM10sIFsxLCAyLCAzXSk7IC8vPT4gdHJ1ZVxuICpcbiAqICAgICAgdmFyIGEgPSB7fTsgYS52ID0gYTtcbiAqICAgICAgdmFyIGIgPSB7fTsgYi52ID0gYjtcbiAqICAgICAgUi5lcXVhbHMoYSwgYik7IC8vPT4gdHJ1ZVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IF9jdXJyeTIoZnVuY3Rpb24gZXF1YWxzKGEsIGIpIHtcbiAgcmV0dXJuIF9lcXVhbHMoYSwgYiwgW10sIFtdKTtcbn0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3JhbWRhL3NyYy9lcXVhbHMuanNcbi8vIG1vZHVsZSBpZCA9IDU2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 57 */
/* no static exports found */
/* all exports used */
/*!*************************************************!*\
  !*** ./~/ramda/src/internal/_checkForMethod.js ***!
  \*************************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var _isArray = __webpack_require__(/*! ./_isArray */ 37);\n\n\n/**\n * This checks whether a function has a [methodname] function. If it isn't an\n * array it will execute that function otherwise it will default to the ramda\n * implementation.\n *\n * @private\n * @param {Function} fn ramda implemtation\n * @param {String} methodname property to check for a custom implementation\n * @return {Object} Whatever the return value of the method is.\n */\nmodule.exports = function _checkForMethod(methodname, fn) {\n  return function() {\n    var length = arguments.length;\n    if (length === 0) {\n      return fn();\n    }\n    var obj = arguments[length - 1];\n    return (_isArray(obj) || typeof obj[methodname] !== 'function') ?\n      fn.apply(this, arguments) :\n      obj[methodname].apply(obj, Array.prototype.slice.call(arguments, 0, length - 1));\n  };\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTcuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3JhbWRhL3NyYy9pbnRlcm5hbC9fY2hlY2tGb3JNZXRob2QuanM/YjAwNiJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX2lzQXJyYXkgPSByZXF1aXJlKCcuL19pc0FycmF5Jyk7XG5cblxuLyoqXG4gKiBUaGlzIGNoZWNrcyB3aGV0aGVyIGEgZnVuY3Rpb24gaGFzIGEgW21ldGhvZG5hbWVdIGZ1bmN0aW9uLiBJZiBpdCBpc24ndCBhblxuICogYXJyYXkgaXQgd2lsbCBleGVjdXRlIHRoYXQgZnVuY3Rpb24gb3RoZXJ3aXNlIGl0IHdpbGwgZGVmYXVsdCB0byB0aGUgcmFtZGFcbiAqIGltcGxlbWVudGF0aW9uLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiByYW1kYSBpbXBsZW10YXRpb25cbiAqIEBwYXJhbSB7U3RyaW5nfSBtZXRob2RuYW1lIHByb3BlcnR5IHRvIGNoZWNrIGZvciBhIGN1c3RvbSBpbXBsZW1lbnRhdGlvblxuICogQHJldHVybiB7T2JqZWN0fSBXaGF0ZXZlciB0aGUgcmV0dXJuIHZhbHVlIG9mIHRoZSBtZXRob2QgaXMuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gX2NoZWNrRm9yTWV0aG9kKG1ldGhvZG5hbWUsIGZuKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICBpZiAobGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gZm4oKTtcbiAgICB9XG4gICAgdmFyIG9iaiA9IGFyZ3VtZW50c1tsZW5ndGggLSAxXTtcbiAgICByZXR1cm4gKF9pc0FycmF5KG9iaikgfHwgdHlwZW9mIG9ialttZXRob2RuYW1lXSAhPT0gJ2Z1bmN0aW9uJykgP1xuICAgICAgZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKSA6XG4gICAgICBvYmpbbWV0aG9kbmFtZV0uYXBwbHkob2JqLCBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDAsIGxlbmd0aCAtIDEpKTtcbiAgfTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcmFtZGEvc3JjL2ludGVybmFsL19jaGVja0Zvck1ldGhvZC5qc1xuLy8gbW9kdWxlIGlkID0gNTdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 58 */
/* no static exports found */
/* all exports used */
/*!***********************************************!*\
  !*** ./~/ramda/src/internal/_dispatchable.js ***!
  \***********************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var _isArray = __webpack_require__(/*! ./_isArray */ 37);\nvar _isTransformer = __webpack_require__(/*! ./_isTransformer */ 164);\n\n\n/**\n * Returns a function that dispatches with different strategies based on the\n * object in list position (last argument). If it is an array, executes [fn].\n * Otherwise, if it has a function with one of the given method names, it will\n * execute that function (functor case). Otherwise, if it is a transformer,\n * uses transducer [xf] to return a new transformer (transducer case).\n * Otherwise, it will default to executing [fn].\n *\n * @private\n * @param {Array} methodNames properties to check for a custom implementation\n * @param {Function} xf transducer to initialize if object is transformer\n * @param {Function} fn default ramda implementation\n * @return {Function} A function that dispatches on object in list position\n */\nmodule.exports = function _dispatchable(methodNames, xf, fn) {\n  return function() {\n    if (arguments.length === 0) {\n      return fn();\n    }\n    var args = Array.prototype.slice.call(arguments, 0);\n    var obj = args.pop();\n    if (!_isArray(obj)) {\n      var idx = 0;\n      while (idx < methodNames.length) {\n        if (typeof obj[methodNames[idx]] === 'function') {\n          return obj[methodNames[idx]].apply(obj, args);\n        }\n        idx += 1;\n      }\n      if (_isTransformer(obj)) {\n        var transducer = xf.apply(null, args);\n        return transducer(obj);\n      }\n    }\n    return fn.apply(this, arguments);\n  };\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTguanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3JhbWRhL3NyYy9pbnRlcm5hbC9fZGlzcGF0Y2hhYmxlLmpzPzIyZmYiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIF9pc0FycmF5ID0gcmVxdWlyZSgnLi9faXNBcnJheScpO1xudmFyIF9pc1RyYW5zZm9ybWVyID0gcmVxdWlyZSgnLi9faXNUcmFuc2Zvcm1lcicpO1xuXG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRoYXQgZGlzcGF0Y2hlcyB3aXRoIGRpZmZlcmVudCBzdHJhdGVnaWVzIGJhc2VkIG9uIHRoZVxuICogb2JqZWN0IGluIGxpc3QgcG9zaXRpb24gKGxhc3QgYXJndW1lbnQpLiBJZiBpdCBpcyBhbiBhcnJheSwgZXhlY3V0ZXMgW2ZuXS5cbiAqIE90aGVyd2lzZSwgaWYgaXQgaGFzIGEgZnVuY3Rpb24gd2l0aCBvbmUgb2YgdGhlIGdpdmVuIG1ldGhvZCBuYW1lcywgaXQgd2lsbFxuICogZXhlY3V0ZSB0aGF0IGZ1bmN0aW9uIChmdW5jdG9yIGNhc2UpLiBPdGhlcndpc2UsIGlmIGl0IGlzIGEgdHJhbnNmb3JtZXIsXG4gKiB1c2VzIHRyYW5zZHVjZXIgW3hmXSB0byByZXR1cm4gYSBuZXcgdHJhbnNmb3JtZXIgKHRyYW5zZHVjZXIgY2FzZSkuXG4gKiBPdGhlcndpc2UsIGl0IHdpbGwgZGVmYXVsdCB0byBleGVjdXRpbmcgW2ZuXS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gbWV0aG9kTmFtZXMgcHJvcGVydGllcyB0byBjaGVjayBmb3IgYSBjdXN0b20gaW1wbGVtZW50YXRpb25cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHhmIHRyYW5zZHVjZXIgdG8gaW5pdGlhbGl6ZSBpZiBvYmplY3QgaXMgdHJhbnNmb3JtZXJcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIGRlZmF1bHQgcmFtZGEgaW1wbGVtZW50YXRpb25cbiAqIEByZXR1cm4ge0Z1bmN0aW9ufSBBIGZ1bmN0aW9uIHRoYXQgZGlzcGF0Y2hlcyBvbiBvYmplY3QgaW4gbGlzdCBwb3NpdGlvblxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIF9kaXNwYXRjaGFibGUobWV0aG9kTmFtZXMsIHhmLCBmbikge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiBmbigpO1xuICAgIH1cbiAgICB2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMCk7XG4gICAgdmFyIG9iaiA9IGFyZ3MucG9wKCk7XG4gICAgaWYgKCFfaXNBcnJheShvYmopKSB7XG4gICAgICB2YXIgaWR4ID0gMDtcbiAgICAgIHdoaWxlIChpZHggPCBtZXRob2ROYW1lcy5sZW5ndGgpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBvYmpbbWV0aG9kTmFtZXNbaWR4XV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICByZXR1cm4gb2JqW21ldGhvZE5hbWVzW2lkeF1dLmFwcGx5KG9iaiwgYXJncyk7XG4gICAgICAgIH1cbiAgICAgICAgaWR4ICs9IDE7XG4gICAgICB9XG4gICAgICBpZiAoX2lzVHJhbnNmb3JtZXIob2JqKSkge1xuICAgICAgICB2YXIgdHJhbnNkdWNlciA9IHhmLmFwcGx5KG51bGwsIGFyZ3MpO1xuICAgICAgICByZXR1cm4gdHJhbnNkdWNlcihvYmopO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcmFtZGEvc3JjL2ludGVybmFsL19kaXNwYXRjaGFibGUuanNcbi8vIG1vZHVsZSBpZCA9IDU4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 59 */
/* no static exports found */
/* all exports used */
/*!*********************************************!*\
  !*** ./~/ramda/src/internal/_isFunction.js ***!
  \*********************************************/
/***/ (function(module, exports) {

eval("module.exports = function _isFunction(x) {\n  return Object.prototype.toString.call(x) === '[object Function]';\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTkuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3JhbWRhL3NyYy9pbnRlcm5hbC9faXNGdW5jdGlvbi5qcz9kN2I0Il0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gX2lzRnVuY3Rpb24oeCkge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHgpID09PSAnW29iamVjdCBGdW5jdGlvbl0nO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9yYW1kYS9zcmMvaW50ZXJuYWwvX2lzRnVuY3Rpb24uanNcbi8vIG1vZHVsZSBpZCA9IDU5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 60 */
/* no static exports found */
/* all exports used */
/*!*******************************************!*\
  !*** ./~/ramda/src/internal/_isString.js ***!
  \*******************************************/
/***/ (function(module, exports) {

eval("module.exports = function _isString(x) {\n  return Object.prototype.toString.call(x) === '[object String]';\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjAuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3JhbWRhL3NyYy9pbnRlcm5hbC9faXNTdHJpbmcuanM/MDViYyJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIF9pc1N0cmluZyh4KSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoeCkgPT09ICdbb2JqZWN0IFN0cmluZ10nO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9yYW1kYS9zcmMvaW50ZXJuYWwvX2lzU3RyaW5nLmpzXG4vLyBtb2R1bGUgaWQgPSA2MFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 61 */
/* no static exports found */
/* all exports used */
/*!**************************************!*\
  !*** ./~/ramda/src/internal/_map.js ***!
  \**************************************/
/***/ (function(module, exports) {

eval("module.exports = function _map(fn, functor) {\n  var idx = 0;\n  var len = functor.length;\n  var result = Array(len);\n  while (idx < len) {\n    result[idx] = fn(functor[idx]);\n    idx += 1;\n  }\n  return result;\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjEuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3JhbWRhL3NyYy9pbnRlcm5hbC9fbWFwLmpzP2ZiMDMiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBfbWFwKGZuLCBmdW5jdG9yKSB7XG4gIHZhciBpZHggPSAwO1xuICB2YXIgbGVuID0gZnVuY3Rvci5sZW5ndGg7XG4gIHZhciByZXN1bHQgPSBBcnJheShsZW4pO1xuICB3aGlsZSAoaWR4IDwgbGVuKSB7XG4gICAgcmVzdWx0W2lkeF0gPSBmbihmdW5jdG9yW2lkeF0pO1xuICAgIGlkeCArPSAxO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3JhbWRhL3NyYy9pbnRlcm5hbC9fbWFwLmpzXG4vLyBtb2R1bGUgaWQgPSA2MVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 62 */
/* no static exports found */
/* all exports used */
/*!*****************************************!*\
  !*** ./~/ramda/src/internal/_xfBase.js ***!
  \*****************************************/
/***/ (function(module, exports) {

eval("module.exports = {\n  init: function() {\n    return this.xf['@@transducer/init']();\n  },\n  result: function(result) {\n    return this.xf['@@transducer/result'](result);\n  }\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjIuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3JhbWRhL3NyYy9pbnRlcm5hbC9feGZCYXNlLmpzPzZjNTEiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSB7XG4gIGluaXQ6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLnhmWydAQHRyYW5zZHVjZXIvaW5pdCddKCk7XG4gIH0sXG4gIHJlc3VsdDogZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgcmV0dXJuIHRoaXMueGZbJ0BAdHJhbnNkdWNlci9yZXN1bHQnXShyZXN1bHQpO1xuICB9XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3JhbWRhL3NyYy9pbnRlcm5hbC9feGZCYXNlLmpzXG4vLyBtb2R1bGUgaWQgPSA2MlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 63 */
/* no static exports found */
/* all exports used */
/*!****************************!*\
  !*** ./~/ramda/src/max.js ***!
  \****************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var _curry2 = __webpack_require__(/*! ./internal/_curry2 */ 1);\n\n\n/**\n * Returns the larger of its two arguments.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig Ord a => a -> a -> a\n * @param {*} a\n * @param {*} b\n * @return {*}\n * @see R.maxBy, R.min\n * @example\n *\n *      R.max(789, 123); //=> 789\n *      R.max('a', 'b'); //=> 'b'\n */\nmodule.exports = _curry2(function max(a, b) { return b > a ? b : a; });\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3JhbWRhL3NyYy9tYXguanM/NDIwOCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX2N1cnJ5MiA9IHJlcXVpcmUoJy4vaW50ZXJuYWwvX2N1cnJ5MicpO1xuXG5cbi8qKlxuICogUmV0dXJucyB0aGUgbGFyZ2VyIG9mIGl0cyB0d28gYXJndW1lbnRzLlxuICpcbiAqIEBmdW5jXG4gKiBAbWVtYmVyT2YgUlxuICogQHNpbmNlIHYwLjEuMFxuICogQGNhdGVnb3J5IFJlbGF0aW9uXG4gKiBAc2lnIE9yZCBhID0+IGEgLT4gYSAtPiBhXG4gKiBAcGFyYW0geyp9IGFcbiAqIEBwYXJhbSB7Kn0gYlxuICogQHJldHVybiB7Kn1cbiAqIEBzZWUgUi5tYXhCeSwgUi5taW5cbiAqIEBleGFtcGxlXG4gKlxuICogICAgICBSLm1heCg3ODksIDEyMyk7IC8vPT4gNzg5XG4gKiAgICAgIFIubWF4KCdhJywgJ2InKTsgLy89PiAnYidcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBfY3VycnkyKGZ1bmN0aW9uIG1heChhLCBiKSB7IHJldHVybiBiID4gYSA/IGIgOiBhOyB9KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9yYW1kYS9zcmMvbWF4LmpzXG4vLyBtb2R1bGUgaWQgPSA2M1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 64 */
/* no static exports found */
/* all exports used */
/*!****************************!*\
  !*** ./~/ramda/src/not.js ***!
  \****************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var _curry1 = __webpack_require__(/*! ./internal/_curry1 */ 2);\n\n\n/**\n * A function that returns the `!` of its argument. It will return `true` when\n * passed false-y value, and `false` when passed a truth-y one.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Logic\n * @sig * -> Boolean\n * @param {*} a any value\n * @return {Boolean} the logical inverse of passed argument.\n * @see R.complement\n * @example\n *\n *      R.not(true); //=> false\n *      R.not(false); //=> true\n *      R.not(0); //=> true\n *      R.not(1); //=> false\n */\nmodule.exports = _curry1(function not(a) {\n  return !a;\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjQuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3JhbWRhL3NyYy9ub3QuanM/M2ZmNiJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX2N1cnJ5MSA9IHJlcXVpcmUoJy4vaW50ZXJuYWwvX2N1cnJ5MScpO1xuXG5cbi8qKlxuICogQSBmdW5jdGlvbiB0aGF0IHJldHVybnMgdGhlIGAhYCBvZiBpdHMgYXJndW1lbnQuIEl0IHdpbGwgcmV0dXJuIGB0cnVlYCB3aGVuXG4gKiBwYXNzZWQgZmFsc2UteSB2YWx1ZSwgYW5kIGBmYWxzZWAgd2hlbiBwYXNzZWQgYSB0cnV0aC15IG9uZS5cbiAqXG4gKiBAZnVuY1xuICogQG1lbWJlck9mIFJcbiAqIEBzaW5jZSB2MC4xLjBcbiAqIEBjYXRlZ29yeSBMb2dpY1xuICogQHNpZyAqIC0+IEJvb2xlYW5cbiAqIEBwYXJhbSB7Kn0gYSBhbnkgdmFsdWVcbiAqIEByZXR1cm4ge0Jvb2xlYW59IHRoZSBsb2dpY2FsIGludmVyc2Ugb2YgcGFzc2VkIGFyZ3VtZW50LlxuICogQHNlZSBSLmNvbXBsZW1lbnRcbiAqIEBleGFtcGxlXG4gKlxuICogICAgICBSLm5vdCh0cnVlKTsgLy89PiBmYWxzZVxuICogICAgICBSLm5vdChmYWxzZSk7IC8vPT4gdHJ1ZVxuICogICAgICBSLm5vdCgwKTsgLy89PiB0cnVlXG4gKiAgICAgIFIubm90KDEpOyAvLz0+IGZhbHNlXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gX2N1cnJ5MShmdW5jdGlvbiBub3QoYSkge1xuICByZXR1cm4gIWE7XG59KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9yYW1kYS9zcmMvbm90LmpzXG4vLyBtb2R1bGUgaWQgPSA2NFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 65 */
/* no static exports found */
/* all exports used */
/*!*****************************!*\
  !*** ./~/ramda/src/prop.js ***!
  \*****************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var _curry2 = __webpack_require__(/*! ./internal/_curry2 */ 1);\n\n\n/**\n * Returns a function that when supplied an object returns the indicated\n * property of that object, if it exists.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Object\n * @sig s -> {s: a} -> a | Undefined\n * @param {String} p The property name\n * @param {Object} obj The object to query\n * @return {*} The value at `obj.p`.\n * @see R.path\n * @example\n *\n *      R.prop('x', {x: 100}); //=> 100\n *      R.prop('x', {}); //=> undefined\n */\nmodule.exports = _curry2(function prop(p, obj) { return obj[p]; });\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjUuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3JhbWRhL3NyYy9wcm9wLmpzP2YyMzEiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIF9jdXJyeTIgPSByZXF1aXJlKCcuL2ludGVybmFsL19jdXJyeTInKTtcblxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0aGF0IHdoZW4gc3VwcGxpZWQgYW4gb2JqZWN0IHJldHVybnMgdGhlIGluZGljYXRlZFxuICogcHJvcGVydHkgb2YgdGhhdCBvYmplY3QsIGlmIGl0IGV4aXN0cy5cbiAqXG4gKiBAZnVuY1xuICogQG1lbWJlck9mIFJcbiAqIEBzaW5jZSB2MC4xLjBcbiAqIEBjYXRlZ29yeSBPYmplY3RcbiAqIEBzaWcgcyAtPiB7czogYX0gLT4gYSB8IFVuZGVmaW5lZFxuICogQHBhcmFtIHtTdHJpbmd9IHAgVGhlIHByb3BlcnR5IG5hbWVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmogVGhlIG9iamVjdCB0byBxdWVyeVxuICogQHJldHVybiB7Kn0gVGhlIHZhbHVlIGF0IGBvYmoucGAuXG4gKiBAc2VlIFIucGF0aFxuICogQGV4YW1wbGVcbiAqXG4gKiAgICAgIFIucHJvcCgneCcsIHt4OiAxMDB9KTsgLy89PiAxMDBcbiAqICAgICAgUi5wcm9wKCd4Jywge30pOyAvLz0+IHVuZGVmaW5lZFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IF9jdXJyeTIoZnVuY3Rpb24gcHJvcChwLCBvYmopIHsgcmV0dXJuIG9ialtwXTsgfSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcmFtZGEvc3JjL3Byb3AuanNcbi8vIG1vZHVsZSBpZCA9IDY1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 66 */
/* no static exports found */
/* all exports used */
/*!*******************************!*\
  !*** ./~/ramda/src/values.js ***!
  \*******************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var _curry1 = __webpack_require__(/*! ./internal/_curry1 */ 2);\nvar keys = __webpack_require__(/*! ./keys */ 17);\n\n\n/**\n * Returns a list of all the enumerable own properties of the supplied object.\n * Note that the order of the output array is not guaranteed across different\n * JS platforms.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Object\n * @sig {k: v} -> [v]\n * @param {Object} obj The object to extract values from\n * @return {Array} An array of the values of the object's own properties.\n * @example\n *\n *      R.values({a: 1, b: 2, c: 3}); //=> [1, 2, 3]\n */\nmodule.exports = _curry1(function values(obj) {\n  var props = keys(obj);\n  var len = props.length;\n  var vals = [];\n  var idx = 0;\n  while (idx < len) {\n    vals[idx] = obj[props[idx]];\n    idx += 1;\n  }\n  return vals;\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjYuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3JhbWRhL3NyYy92YWx1ZXMuanM/OGUzNyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX2N1cnJ5MSA9IHJlcXVpcmUoJy4vaW50ZXJuYWwvX2N1cnJ5MScpO1xudmFyIGtleXMgPSByZXF1aXJlKCcuL2tleXMnKTtcblxuXG4vKipcbiAqIFJldHVybnMgYSBsaXN0IG9mIGFsbCB0aGUgZW51bWVyYWJsZSBvd24gcHJvcGVydGllcyBvZiB0aGUgc3VwcGxpZWQgb2JqZWN0LlxuICogTm90ZSB0aGF0IHRoZSBvcmRlciBvZiB0aGUgb3V0cHV0IGFycmF5IGlzIG5vdCBndWFyYW50ZWVkIGFjcm9zcyBkaWZmZXJlbnRcbiAqIEpTIHBsYXRmb3Jtcy5cbiAqXG4gKiBAZnVuY1xuICogQG1lbWJlck9mIFJcbiAqIEBzaW5jZSB2MC4xLjBcbiAqIEBjYXRlZ29yeSBPYmplY3RcbiAqIEBzaWcge2s6IHZ9IC0+IFt2XVxuICogQHBhcmFtIHtPYmplY3R9IG9iaiBUaGUgb2JqZWN0IHRvIGV4dHJhY3QgdmFsdWVzIGZyb21cbiAqIEByZXR1cm4ge0FycmF5fSBBbiBhcnJheSBvZiB0aGUgdmFsdWVzIG9mIHRoZSBvYmplY3QncyBvd24gcHJvcGVydGllcy5cbiAqIEBleGFtcGxlXG4gKlxuICogICAgICBSLnZhbHVlcyh7YTogMSwgYjogMiwgYzogM30pOyAvLz0+IFsxLCAyLCAzXVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IF9jdXJyeTEoZnVuY3Rpb24gdmFsdWVzKG9iaikge1xuICB2YXIgcHJvcHMgPSBrZXlzKG9iaik7XG4gIHZhciBsZW4gPSBwcm9wcy5sZW5ndGg7XG4gIHZhciB2YWxzID0gW107XG4gIHZhciBpZHggPSAwO1xuICB3aGlsZSAoaWR4IDwgbGVuKSB7XG4gICAgdmFsc1tpZHhdID0gb2JqW3Byb3BzW2lkeF1dO1xuICAgIGlkeCArPSAxO1xuICB9XG4gIHJldHVybiB2YWxzO1xufSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcmFtZGEvc3JjL3ZhbHVlcy5qc1xuLy8gbW9kdWxlIGlkID0gNjZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 67 */
/* no static exports found */
/* all exports used */
/*!**************************************!*\
  !*** ./~/tangram-reference/index.js ***!
  \**************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var fs = __webpack_require__(/*! fs */ 11),\n    path = __webpack_require__(/*! path */ 12),\n    existsSync = __webpack_require__(/*! fs */ 11).existsSync || __webpack_require__(/*! path */ 12).existsSync;\n\nvar versions = [\n    '1.0.0'\n];\n\nmodule.exports.versions = versions;\n\nmodule.exports.load = function(version) {\n    if (versions.indexOf(version) <= -1) {\n\tthrow new Error(\"Unknown mapnik-reference version: '\" + version + \"'\");\n    }\n    var ref = __webpack_require__(/*! ./1.0.0/reference.json */ 193);\n //    var ds_path = path.join(__dirname, version, 'datasources.json');\n //    if (existsSync(ds_path)) {\n\t// ref.datasources = require(ds_path).datasources;\n //    }\n    return ref;\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjcuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3RhbmdyYW0tcmVmZXJlbmNlL2luZGV4LmpzPzg1NGIiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGZzID0gcmVxdWlyZSgnZnMnKSxcbiAgICBwYXRoID0gcmVxdWlyZSgncGF0aCcpLFxuICAgIGV4aXN0c1N5bmMgPSByZXF1aXJlKCdmcycpLmV4aXN0c1N5bmMgfHwgcmVxdWlyZSgncGF0aCcpLmV4aXN0c1N5bmM7XG5cbnZhciB2ZXJzaW9ucyA9IFtcbiAgICAnMS4wLjAnXG5dO1xuXG5tb2R1bGUuZXhwb3J0cy52ZXJzaW9ucyA9IHZlcnNpb25zO1xuXG5tb2R1bGUuZXhwb3J0cy5sb2FkID0gZnVuY3Rpb24odmVyc2lvbikge1xuICAgIGlmICh2ZXJzaW9ucy5pbmRleE9mKHZlcnNpb24pIDw9IC0xKSB7XG5cdHRocm93IG5ldyBFcnJvcihcIlVua25vd24gbWFwbmlrLXJlZmVyZW5jZSB2ZXJzaW9uOiAnXCIgKyB2ZXJzaW9uICsgXCInXCIpO1xuICAgIH1cbiAgICB2YXIgcmVmID0gcmVxdWlyZSgnLi8xLjAuMC9yZWZlcmVuY2UuanNvbicpO1xuIC8vICAgIHZhciBkc19wYXRoID0gcGF0aC5qb2luKF9fZGlybmFtZSwgdmVyc2lvbiwgJ2RhdGFzb3VyY2VzLmpzb24nKTtcbiAvLyAgICBpZiAoZXhpc3RzU3luYyhkc19wYXRoKSkge1xuXHQvLyByZWYuZGF0YXNvdXJjZXMgPSByZXF1aXJlKGRzX3BhdGgpLmRhdGFzb3VyY2VzO1xuIC8vICAgIH1cbiAgICByZXR1cm4gcmVmO1xufVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3RhbmdyYW0tcmVmZXJlbmNlL2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSA2N1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 68 */
/* no static exports found */
/* all exports used */
/*!************************!*\
  !*** ./~/util/util.js ***!
  \************************/
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global, process) {// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar formatRegExp = /%[sdj%]/g;\nexports.format = function(f) {\n  if (!isString(f)) {\n    var objects = [];\n    for (var i = 0; i < arguments.length; i++) {\n      objects.push(inspect(arguments[i]));\n    }\n    return objects.join(' ');\n  }\n\n  var i = 1;\n  var args = arguments;\n  var len = args.length;\n  var str = String(f).replace(formatRegExp, function(x) {\n    if (x === '%%') return '%';\n    if (i >= len) return x;\n    switch (x) {\n      case '%s': return String(args[i++]);\n      case '%d': return Number(args[i++]);\n      case '%j':\n        try {\n          return JSON.stringify(args[i++]);\n        } catch (_) {\n          return '[Circular]';\n        }\n      default:\n        return x;\n    }\n  });\n  for (var x = args[i]; i < len; x = args[++i]) {\n    if (isNull(x) || !isObject(x)) {\n      str += ' ' + x;\n    } else {\n      str += ' ' + inspect(x);\n    }\n  }\n  return str;\n};\n\n\n// Mark that a method should not be used.\n// Returns a modified function which warns once by default.\n// If --no-deprecation is set, then it is a no-op.\nexports.deprecate = function(fn, msg) {\n  // Allow for deprecating things in the process of starting up.\n  if (isUndefined(global.process)) {\n    return function() {\n      return exports.deprecate(fn, msg).apply(this, arguments);\n    };\n  }\n\n  if (process.noDeprecation === true) {\n    return fn;\n  }\n\n  var warned = false;\n  function deprecated() {\n    if (!warned) {\n      if (process.throwDeprecation) {\n        throw new Error(msg);\n      } else if (process.traceDeprecation) {\n        console.trace(msg);\n      } else {\n        console.error(msg);\n      }\n      warned = true;\n    }\n    return fn.apply(this, arguments);\n  }\n\n  return deprecated;\n};\n\n\nvar debugs = {};\nvar debugEnviron;\nexports.debuglog = function(set) {\n  if (isUndefined(debugEnviron))\n    debugEnviron = process.env.NODE_DEBUG || '';\n  set = set.toUpperCase();\n  if (!debugs[set]) {\n    if (new RegExp('\\\\b' + set + '\\\\b', 'i').test(debugEnviron)) {\n      var pid = process.pid;\n      debugs[set] = function() {\n        var msg = exports.format.apply(exports, arguments);\n        console.error('%s %d: %s', set, pid, msg);\n      };\n    } else {\n      debugs[set] = function() {};\n    }\n  }\n  return debugs[set];\n};\n\n\n/**\n * Echos the value of a value. Trys to print the value out\n * in the best way possible given the different types.\n *\n * @param {Object} obj The object to print out.\n * @param {Object} opts Optional options object that alters the output.\n */\n/* legacy: obj, showHidden, depth, colors*/\nfunction inspect(obj, opts) {\n  // default options\n  var ctx = {\n    seen: [],\n    stylize: stylizeNoColor\n  };\n  // legacy...\n  if (arguments.length >= 3) ctx.depth = arguments[2];\n  if (arguments.length >= 4) ctx.colors = arguments[3];\n  if (isBoolean(opts)) {\n    // legacy...\n    ctx.showHidden = opts;\n  } else if (opts) {\n    // got an \"options\" object\n    exports._extend(ctx, opts);\n  }\n  // set default options\n  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;\n  if (isUndefined(ctx.depth)) ctx.depth = 2;\n  if (isUndefined(ctx.colors)) ctx.colors = false;\n  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;\n  if (ctx.colors) ctx.stylize = stylizeWithColor;\n  return formatValue(ctx, obj, ctx.depth);\n}\nexports.inspect = inspect;\n\n\n// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics\ninspect.colors = {\n  'bold' : [1, 22],\n  'italic' : [3, 23],\n  'underline' : [4, 24],\n  'inverse' : [7, 27],\n  'white' : [37, 39],\n  'grey' : [90, 39],\n  'black' : [30, 39],\n  'blue' : [34, 39],\n  'cyan' : [36, 39],\n  'green' : [32, 39],\n  'magenta' : [35, 39],\n  'red' : [31, 39],\n  'yellow' : [33, 39]\n};\n\n// Don't use 'blue' not visible on cmd.exe\ninspect.styles = {\n  'special': 'cyan',\n  'number': 'yellow',\n  'boolean': 'yellow',\n  'undefined': 'grey',\n  'null': 'bold',\n  'string': 'green',\n  'date': 'magenta',\n  // \"name\": intentionally not styling\n  'regexp': 'red'\n};\n\n\nfunction stylizeWithColor(str, styleType) {\n  var style = inspect.styles[styleType];\n\n  if (style) {\n    return '\\u001b[' + inspect.colors[style][0] + 'm' + str +\n           '\\u001b[' + inspect.colors[style][1] + 'm';\n  } else {\n    return str;\n  }\n}\n\n\nfunction stylizeNoColor(str, styleType) {\n  return str;\n}\n\n\nfunction arrayToHash(array) {\n  var hash = {};\n\n  array.forEach(function(val, idx) {\n    hash[val] = true;\n  });\n\n  return hash;\n}\n\n\nfunction formatValue(ctx, value, recurseTimes) {\n  // Provide a hook for user-specified inspect functions.\n  // Check that value is an object with an inspect function on it\n  if (ctx.customInspect &&\n      value &&\n      isFunction(value.inspect) &&\n      // Filter out the util module, it's inspect function is special\n      value.inspect !== exports.inspect &&\n      // Also filter out any prototype objects using the circular check.\n      !(value.constructor && value.constructor.prototype === value)) {\n    var ret = value.inspect(recurseTimes, ctx);\n    if (!isString(ret)) {\n      ret = formatValue(ctx, ret, recurseTimes);\n    }\n    return ret;\n  }\n\n  // Primitive types cannot have properties\n  var primitive = formatPrimitive(ctx, value);\n  if (primitive) {\n    return primitive;\n  }\n\n  // Look up the keys of the object.\n  var keys = Object.keys(value);\n  var visibleKeys = arrayToHash(keys);\n\n  if (ctx.showHidden) {\n    keys = Object.getOwnPropertyNames(value);\n  }\n\n  // IE doesn't make error fields non-enumerable\n  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx\n  if (isError(value)\n      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {\n    return formatError(value);\n  }\n\n  // Some type of object without properties can be shortcutted.\n  if (keys.length === 0) {\n    if (isFunction(value)) {\n      var name = value.name ? ': ' + value.name : '';\n      return ctx.stylize('[Function' + name + ']', 'special');\n    }\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    }\n    if (isDate(value)) {\n      return ctx.stylize(Date.prototype.toString.call(value), 'date');\n    }\n    if (isError(value)) {\n      return formatError(value);\n    }\n  }\n\n  var base = '', array = false, braces = ['{', '}'];\n\n  // Make Array say that they are Array\n  if (isArray(value)) {\n    array = true;\n    braces = ['[', ']'];\n  }\n\n  // Make functions say that they are functions\n  if (isFunction(value)) {\n    var n = value.name ? ': ' + value.name : '';\n    base = ' [Function' + n + ']';\n  }\n\n  // Make RegExps say that they are RegExps\n  if (isRegExp(value)) {\n    base = ' ' + RegExp.prototype.toString.call(value);\n  }\n\n  // Make dates with properties first say the date\n  if (isDate(value)) {\n    base = ' ' + Date.prototype.toUTCString.call(value);\n  }\n\n  // Make error with message first say the error\n  if (isError(value)) {\n    base = ' ' + formatError(value);\n  }\n\n  if (keys.length === 0 && (!array || value.length == 0)) {\n    return braces[0] + base + braces[1];\n  }\n\n  if (recurseTimes < 0) {\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    } else {\n      return ctx.stylize('[Object]', 'special');\n    }\n  }\n\n  ctx.seen.push(value);\n\n  var output;\n  if (array) {\n    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);\n  } else {\n    output = keys.map(function(key) {\n      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);\n    });\n  }\n\n  ctx.seen.pop();\n\n  return reduceToSingleString(output, base, braces);\n}\n\n\nfunction formatPrimitive(ctx, value) {\n  if (isUndefined(value))\n    return ctx.stylize('undefined', 'undefined');\n  if (isString(value)) {\n    var simple = '\\'' + JSON.stringify(value).replace(/^\"|\"$/g, '')\n                                             .replace(/'/g, \"\\\\'\")\n                                             .replace(/\\\\\"/g, '\"') + '\\'';\n    return ctx.stylize(simple, 'string');\n  }\n  if (isNumber(value))\n    return ctx.stylize('' + value, 'number');\n  if (isBoolean(value))\n    return ctx.stylize('' + value, 'boolean');\n  // For some reason typeof null is \"object\", so special case here.\n  if (isNull(value))\n    return ctx.stylize('null', 'null');\n}\n\n\nfunction formatError(value) {\n  return '[' + Error.prototype.toString.call(value) + ']';\n}\n\n\nfunction formatArray(ctx, value, recurseTimes, visibleKeys, keys) {\n  var output = [];\n  for (var i = 0, l = value.length; i < l; ++i) {\n    if (hasOwnProperty(value, String(i))) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          String(i), true));\n    } else {\n      output.push('');\n    }\n  }\n  keys.forEach(function(key) {\n    if (!key.match(/^\\d+$/)) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          key, true));\n    }\n  });\n  return output;\n}\n\n\nfunction formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {\n  var name, str, desc;\n  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };\n  if (desc.get) {\n    if (desc.set) {\n      str = ctx.stylize('[Getter/Setter]', 'special');\n    } else {\n      str = ctx.stylize('[Getter]', 'special');\n    }\n  } else {\n    if (desc.set) {\n      str = ctx.stylize('[Setter]', 'special');\n    }\n  }\n  if (!hasOwnProperty(visibleKeys, key)) {\n    name = '[' + key + ']';\n  }\n  if (!str) {\n    if (ctx.seen.indexOf(desc.value) < 0) {\n      if (isNull(recurseTimes)) {\n        str = formatValue(ctx, desc.value, null);\n      } else {\n        str = formatValue(ctx, desc.value, recurseTimes - 1);\n      }\n      if (str.indexOf('\\n') > -1) {\n        if (array) {\n          str = str.split('\\n').map(function(line) {\n            return '  ' + line;\n          }).join('\\n').substr(2);\n        } else {\n          str = '\\n' + str.split('\\n').map(function(line) {\n            return '   ' + line;\n          }).join('\\n');\n        }\n      }\n    } else {\n      str = ctx.stylize('[Circular]', 'special');\n    }\n  }\n  if (isUndefined(name)) {\n    if (array && key.match(/^\\d+$/)) {\n      return str;\n    }\n    name = JSON.stringify('' + key);\n    if (name.match(/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)) {\n      name = name.substr(1, name.length - 2);\n      name = ctx.stylize(name, 'name');\n    } else {\n      name = name.replace(/'/g, \"\\\\'\")\n                 .replace(/\\\\\"/g, '\"')\n                 .replace(/(^\"|\"$)/g, \"'\");\n      name = ctx.stylize(name, 'string');\n    }\n  }\n\n  return name + ': ' + str;\n}\n\n\nfunction reduceToSingleString(output, base, braces) {\n  var numLinesEst = 0;\n  var length = output.reduce(function(prev, cur) {\n    numLinesEst++;\n    if (cur.indexOf('\\n') >= 0) numLinesEst++;\n    return prev + cur.replace(/\\u001b\\[\\d\\d?m/g, '').length + 1;\n  }, 0);\n\n  if (length > 60) {\n    return braces[0] +\n           (base === '' ? '' : base + '\\n ') +\n           ' ' +\n           output.join(',\\n  ') +\n           ' ' +\n           braces[1];\n  }\n\n  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];\n}\n\n\n// NOTE: These type checking functions intentionally don't use `instanceof`\n// because it is fragile and can be easily faked with `Object.create()`.\nfunction isArray(ar) {\n  return Array.isArray(ar);\n}\nexports.isArray = isArray;\n\nfunction isBoolean(arg) {\n  return typeof arg === 'boolean';\n}\nexports.isBoolean = isBoolean;\n\nfunction isNull(arg) {\n  return arg === null;\n}\nexports.isNull = isNull;\n\nfunction isNullOrUndefined(arg) {\n  return arg == null;\n}\nexports.isNullOrUndefined = isNullOrUndefined;\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\nexports.isNumber = isNumber;\n\nfunction isString(arg) {\n  return typeof arg === 'string';\n}\nexports.isString = isString;\n\nfunction isSymbol(arg) {\n  return typeof arg === 'symbol';\n}\nexports.isSymbol = isSymbol;\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\nexports.isUndefined = isUndefined;\n\nfunction isRegExp(re) {\n  return isObject(re) && objectToString(re) === '[object RegExp]';\n}\nexports.isRegExp = isRegExp;\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\nexports.isObject = isObject;\n\nfunction isDate(d) {\n  return isObject(d) && objectToString(d) === '[object Date]';\n}\nexports.isDate = isDate;\n\nfunction isError(e) {\n  return isObject(e) &&\n      (objectToString(e) === '[object Error]' || e instanceof Error);\n}\nexports.isError = isError;\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\nexports.isFunction = isFunction;\n\nfunction isPrimitive(arg) {\n  return arg === null ||\n         typeof arg === 'boolean' ||\n         typeof arg === 'number' ||\n         typeof arg === 'string' ||\n         typeof arg === 'symbol' ||  // ES6 symbol\n         typeof arg === 'undefined';\n}\nexports.isPrimitive = isPrimitive;\n\nexports.isBuffer = __webpack_require__(/*! ./support/isBuffer */ 195);\n\nfunction objectToString(o) {\n  return Object.prototype.toString.call(o);\n}\n\n\nfunction pad(n) {\n  return n < 10 ? '0' + n.toString(10) : n.toString(10);\n}\n\n\nvar months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',\n              'Oct', 'Nov', 'Dec'];\n\n// 26 Feb 16:19:34\nfunction timestamp() {\n  var d = new Date();\n  var time = [pad(d.getHours()),\n              pad(d.getMinutes()),\n              pad(d.getSeconds())].join(':');\n  return [d.getDate(), months[d.getMonth()], time].join(' ');\n}\n\n\n// log is just a thin wrapper to console.log that prepends a timestamp\nexports.log = function() {\n  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));\n};\n\n\n/**\n * Inherit the prototype methods from one constructor into another.\n *\n * The Function.prototype.inherits from lang.js rewritten as a standalone\n * function (not on Function.prototype). NOTE: If this file is to be loaded\n * during bootstrapping this function needs to be rewritten using some native\n * functions as prototype setup using normal JavaScript does not work as\n * expected during bootstrapping (see mirror.js in r114903).\n *\n * @param {function} ctor Constructor function which needs to inherit the\n *     prototype.\n * @param {function} superCtor Constructor function to inherit prototype from.\n */\nexports.inherits = __webpack_require__(/*! inherits */ 194);\n\nexports._extend = function(origin, add) {\n  // Don't do anything if add isn't an object\n  if (!add || !isObject(add)) return origin;\n\n  var keys = Object.keys(add);\n  var i = keys.length;\n  while (i--) {\n    origin[keys[i]] = add[keys[i]];\n  }\n  return origin;\n};\n\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./../webpack/buildin/global.js */ 3), __webpack_require__(/*! ./../process/browser.js */ 36)))//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 69 */
/* no static exports found */
/* all exports used */
/*!*************************!*\
  !*** external "window" ***!
  \*************************/
/***/ (function(module, exports) {

eval("(function() { module.exports = this[\"window\"]; }());//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjkuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJ3aW5kb3dcIj9kOTdjIl0sInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbigpIHsgbW9kdWxlLmV4cG9ydHMgPSB0aGlzW1wid2luZG93XCJdOyB9KCkpO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIGV4dGVybmFsIFwid2luZG93XCJcbi8vIG1vZHVsZSBpZCA9IDY5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUEiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 70 */
/* no static exports found */
/* all exports used */
/*!**********************!*\
  !*** ./src/carto.js ***!
  \**********************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _carto = __webpack_require__(/*! carto */ 27);\n\nvar _carto2 = _interopRequireDefault(_carto);\n\nvar _points = __webpack_require__(/*! ./basic/points */ 73);\n\nvar _points2 = _interopRequireDefault(_points);\n\nvar _polygons = __webpack_require__(/*! ./basic/polygons */ 74);\n\nvar _polygons2 = _interopRequireDefault(_polygons);\n\nvar _lines = __webpack_require__(/*! ./basic/lines */ 72);\n\nvar _lines2 = _interopRequireDefault(_lines);\n\nvar _text = __webpack_require__(/*! ./basic/text */ 75);\n\nvar _text2 = _interopRequireDefault(_text);\n\nvar _tangramReference = __webpack_require__(/*! tangram-reference */ 67);\n\nvar _tangramReference2 = _interopRequireDefault(_tangramReference);\n\nvar _md = __webpack_require__(/*! md5 */ 35);\n\nvar _md2 = _interopRequireDefault(_md);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar ref = _tangramReference2.default.load('1.0.0');\nvar CartoCSSRenderer = new _carto2.default.RendererJS({\n  reference: ref,\n  strict: true\n});\n\nvar extractFeatures = function extractFeatures(ccss, index) {\n  var layers = CartoCSSRenderer.render(ccss).getLayers(),\n      id = (0, _md2.default)(ccss),\n      tLy = [];\n\n  // NOTE: this is wrong, we have to separate the layers.\n  for (var i = 0; i < layers.length; i++) {\n    var ly = layers[i].shader,\n        draw = {},\n        textures = {},\n        styles = {};\n\n    Object.assign(draw, _points2.default.getDraw(ly, id), _polygons2.default.getDraw(ly, id), _lines2.default.getDraw(ly, id), _text2.default.getDraw(ly, id));\n\n    Object.assign(textures, _points2.default.getTextures(ly), _polygons2.default.getTextures(ly));\n\n    Object.assign(styles, _points2.default.getStyle(ly, id, index), _polygons2.default.getStyle(ly, id, index), _lines2.default.getStyle(ly, id, index), _text2.default.getStyle(ly, id, index));\n\n    tLy.push({ textures: textures, draw: draw, styles: styles, name: ly.attachment });\n  }\n\n  return tLy;\n};\n\nvar C2T;\n\nexports.default = C2T = {\n  extractFeatures: extractFeatures\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzAuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL2NhcnRvLmpzPzgxYTEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IENhcnRvIGZyb20gJ2NhcnRvJztcbmltcG9ydCBQb2ludHMgZnJvbSAnLi9iYXNpYy9wb2ludHMnO1xuaW1wb3J0IFBvbHlnb25zIGZyb20gJy4vYmFzaWMvcG9seWdvbnMnO1xuaW1wb3J0IExpbmVzIGZyb20gJy4vYmFzaWMvbGluZXMnO1xuaW1wb3J0IFRleHRQb2ludHMgZnJvbSAnLi9iYXNpYy90ZXh0JztcbmltcG9ydCB0YW5ncmFtUmVmZXJlbmNlIGZyb20gJ3RhbmdyYW0tcmVmZXJlbmNlJztcbmltcG9ydCBNRDUgZnJvbSAnbWQ1JztcblxuY29uc3QgcmVmID0gdGFuZ3JhbVJlZmVyZW5jZS5sb2FkKCcxLjAuMCcpO1xuY29uc3QgQ2FydG9DU1NSZW5kZXJlciA9IG5ldyBDYXJ0by5SZW5kZXJlckpTKHtcbiAgcmVmZXJlbmNlOiByZWYsXG4gIHN0cmljdDogdHJ1ZVxufSk7XG5cbmNvbnN0IGV4dHJhY3RGZWF0dXJlcyA9IGZ1bmN0aW9uIChjY3NzLCBpbmRleCkge1xuICBsZXQgbGF5ZXJzID0gQ2FydG9DU1NSZW5kZXJlci5yZW5kZXIoY2NzcykuZ2V0TGF5ZXJzKCksXG4gICAgICBpZCA9IE1ENShjY3NzKSxcbiAgICAgIHRMeSA9IFtdO1xuXG4gIC8vIE5PVEU6IHRoaXMgaXMgd3JvbmcsIHdlIGhhdmUgdG8gc2VwYXJhdGUgdGhlIGxheWVycy5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsYXllcnMubGVuZ3RoOyBpKyspIHtcblx0XHRsZXQgbHkgPSBsYXllcnNbaV0uc2hhZGVyLFxuICAgICAgICBkcmF3ID0ge30sXG4gICAgICAgIHRleHR1cmVzID0ge30sXG4gICAgICAgIHN0eWxlcyA9IHt9O1xuXG4gICAgT2JqZWN0LmFzc2lnbihcbiAgICAgICAgZHJhdyxcbiAgICAgICAgUG9pbnRzLmdldERyYXcobHksIGlkKSxcbiAgICAgICAgUG9seWdvbnMuZ2V0RHJhdyhseSwgaWQpLFxuICAgICAgICBMaW5lcy5nZXREcmF3KGx5LCBpZCksXG4gICAgICAgIFRleHRQb2ludHMuZ2V0RHJhdyhseSwgaWQpXG4gICAgICApO1xuXG4gICAgT2JqZWN0LmFzc2lnbihcbiAgICAgICAgdGV4dHVyZXMsXG4gICAgICAgIFBvaW50cy5nZXRUZXh0dXJlcyhseSksXG4gICAgICAgIFBvbHlnb25zLmdldFRleHR1cmVzKGx5KVxuICAgICAgKTtcblxuICAgIE9iamVjdC5hc3NpZ24oXG4gICAgICAgIHN0eWxlcyxcbiAgICAgICAgUG9pbnRzLmdldFN0eWxlKGx5LCBpZCwgaW5kZXgpLFxuICAgICAgICBQb2x5Z29ucy5nZXRTdHlsZShseSwgaWQsIGluZGV4KSxcbiAgICAgICAgTGluZXMuZ2V0U3R5bGUobHksIGlkLCBpbmRleCksXG4gICAgICAgIFRleHRQb2ludHMuZ2V0U3R5bGUobHksIGlkLCBpbmRleClcbiAgICAgICk7XG5cbiAgICB0THkucHVzaCh7dGV4dHVyZXMsIGRyYXcsIHN0eWxlcywgbmFtZTpseS5hdHRhY2htZW50fSk7XG4gIH1cblxuICByZXR1cm4gdEx5O1xufTtcblxudmFyIEMyVDtcblxuZXhwb3J0IGRlZmF1bHQgQzJUID0ge1xuICBleHRyYWN0RmVhdHVyZXNcbn07XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gc3JjL2NhcnRvLmpzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTtBQUNBOzs7QUFBQTtBQUNBOzs7QUFBQTtBQUNBOzs7QUFBQTtBQUNBOzs7QUFBQTtBQUNBOzs7QUFBQTtBQUNBOzs7QUFBQTtBQUNBOzs7OztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRkE7QUFDQTtBQUlBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUlBO0FBQ0E7QUFPQTtBQUNBO0FBS0E7QUFDQTtBQU9BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBREEiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 71 */
/* no static exports found */
/* all exports used */
/*!****************************!*\
  !*** ./~/assert/assert.js ***!
  \****************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(global) {\n\n// compare and isBuffer taken from https://github.com/feross/buffer/blob/680e9e5e488f22aac27599a57dc844a6315928dd/index.js\n// original notice:\n\n/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\nfunction compare(a, b) {\n  if (a === b) {\n    return 0;\n  }\n\n  var x = a.length;\n  var y = b.length;\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i];\n      y = b[i];\n      break;\n    }\n  }\n\n  if (x < y) {\n    return -1;\n  }\n  if (y < x) {\n    return 1;\n  }\n  return 0;\n}\nfunction isBuffer(b) {\n  if (global.Buffer && typeof global.Buffer.isBuffer === 'function') {\n    return global.Buffer.isBuffer(b);\n  }\n  return !!(b != null && b._isBuffer);\n}\n\n// based on node assert, original notice:\n\n// http://wiki.commonjs.org/wiki/Unit_Testing/1.0\n//\n// THIS IS NOT TESTED NOR LIKELY TO WORK OUTSIDE V8!\n//\n// Originally from narwhal.js (http://narwhaljs.org)\n// Copyright (c) 2009 Thomas Robinson <280north.com>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the 'Software'), to\n// deal in the Software without restriction, including without limitation the\n// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n// sell copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar util = __webpack_require__(/*! util/ */ 68);\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar pSlice = Array.prototype.slice;\nvar functionsHaveNames = (function () {\n  return function foo() {}.name === 'foo';\n}());\nfunction pToString (obj) {\n  return Object.prototype.toString.call(obj);\n}\nfunction isView(arrbuf) {\n  if (isBuffer(arrbuf)) {\n    return false;\n  }\n  if (typeof global.ArrayBuffer !== 'function') {\n    return false;\n  }\n  if (typeof ArrayBuffer.isView === 'function') {\n    return ArrayBuffer.isView(arrbuf);\n  }\n  if (!arrbuf) {\n    return false;\n  }\n  if (arrbuf instanceof DataView) {\n    return true;\n  }\n  if (arrbuf.buffer && arrbuf.buffer instanceof ArrayBuffer) {\n    return true;\n  }\n  return false;\n}\n// 1. The assert module provides functions that throw\n// AssertionError's when particular conditions are not met. The\n// assert module must conform to the following interface.\n\nvar assert = module.exports = ok;\n\n// 2. The AssertionError is defined in assert.\n// new assert.AssertionError({ message: message,\n//                             actual: actual,\n//                             expected: expected })\n\nvar regex = /\\s*function\\s+([^\\(\\s]*)\\s*/;\n// based on https://github.com/ljharb/function.prototype.name/blob/adeeeec8bfcc6068b187d7d9fb3d5bb1d3a30899/implementation.js\nfunction getName(func) {\n  if (!util.isFunction(func)) {\n    return;\n  }\n  if (functionsHaveNames) {\n    return func.name;\n  }\n  var str = func.toString();\n  var match = str.match(regex);\n  return match && match[1];\n}\nassert.AssertionError = function AssertionError(options) {\n  this.name = 'AssertionError';\n  this.actual = options.actual;\n  this.expected = options.expected;\n  this.operator = options.operator;\n  if (options.message) {\n    this.message = options.message;\n    this.generatedMessage = false;\n  } else {\n    this.message = getMessage(this);\n    this.generatedMessage = true;\n  }\n  var stackStartFunction = options.stackStartFunction || fail;\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, stackStartFunction);\n  } else {\n    // non v8 browsers so we can have a stacktrace\n    var err = new Error();\n    if (err.stack) {\n      var out = err.stack;\n\n      // try to strip useless frames\n      var fn_name = getName(stackStartFunction);\n      var idx = out.indexOf('\\n' + fn_name);\n      if (idx >= 0) {\n        // once we have located the function frame\n        // we need to strip out everything before it (and its line)\n        var next_line = out.indexOf('\\n', idx + 1);\n        out = out.substring(next_line + 1);\n      }\n\n      this.stack = out;\n    }\n  }\n};\n\n// assert.AssertionError instanceof Error\nutil.inherits(assert.AssertionError, Error);\n\nfunction truncate(s, n) {\n  if (typeof s === 'string') {\n    return s.length < n ? s : s.slice(0, n);\n  } else {\n    return s;\n  }\n}\nfunction inspect(something) {\n  if (functionsHaveNames || !util.isFunction(something)) {\n    return util.inspect(something);\n  }\n  var rawname = getName(something);\n  var name = rawname ? ': ' + rawname : '';\n  return '[Function' +  name + ']';\n}\nfunction getMessage(self) {\n  return truncate(inspect(self.actual), 128) + ' ' +\n         self.operator + ' ' +\n         truncate(inspect(self.expected), 128);\n}\n\n// At present only the three keys mentioned above are used and\n// understood by the spec. Implementations or sub modules can pass\n// other keys to the AssertionError's constructor - they will be\n// ignored.\n\n// 3. All of the following functions must throw an AssertionError\n// when a corresponding condition is not met, with a message that\n// may be undefined if not provided.  All assertion methods provide\n// both the actual and expected values to the assertion error for\n// display purposes.\n\nfunction fail(actual, expected, message, operator, stackStartFunction) {\n  throw new assert.AssertionError({\n    message: message,\n    actual: actual,\n    expected: expected,\n    operator: operator,\n    stackStartFunction: stackStartFunction\n  });\n}\n\n// EXTENSION! allows for well behaved errors defined elsewhere.\nassert.fail = fail;\n\n// 4. Pure assertion tests whether a value is truthy, as determined\n// by !!guard.\n// assert.ok(guard, message_opt);\n// This statement is equivalent to assert.equal(true, !!guard,\n// message_opt);. To test strictly for the value true, use\n// assert.strictEqual(true, guard, message_opt);.\n\nfunction ok(value, message) {\n  if (!value) fail(value, true, message, '==', assert.ok);\n}\nassert.ok = ok;\n\n// 5. The equality assertion tests shallow, coercive equality with\n// ==.\n// assert.equal(actual, expected, message_opt);\n\nassert.equal = function equal(actual, expected, message) {\n  if (actual != expected) fail(actual, expected, message, '==', assert.equal);\n};\n\n// 6. The non-equality assertion tests for whether two objects are not equal\n// with != assert.notEqual(actual, expected, message_opt);\n\nassert.notEqual = function notEqual(actual, expected, message) {\n  if (actual == expected) {\n    fail(actual, expected, message, '!=', assert.notEqual);\n  }\n};\n\n// 7. The equivalence assertion tests a deep equality relation.\n// assert.deepEqual(actual, expected, message_opt);\n\nassert.deepEqual = function deepEqual(actual, expected, message) {\n  if (!_deepEqual(actual, expected, false)) {\n    fail(actual, expected, message, 'deepEqual', assert.deepEqual);\n  }\n};\n\nassert.deepStrictEqual = function deepStrictEqual(actual, expected, message) {\n  if (!_deepEqual(actual, expected, true)) {\n    fail(actual, expected, message, 'deepStrictEqual', assert.deepStrictEqual);\n  }\n};\n\nfunction _deepEqual(actual, expected, strict, memos) {\n  // 7.1. All identical values are equivalent, as determined by ===.\n  if (actual === expected) {\n    return true;\n  } else if (isBuffer(actual) && isBuffer(expected)) {\n    return compare(actual, expected) === 0;\n\n  // 7.2. If the expected value is a Date object, the actual value is\n  // equivalent if it is also a Date object that refers to the same time.\n  } else if (util.isDate(actual) && util.isDate(expected)) {\n    return actual.getTime() === expected.getTime();\n\n  // 7.3 If the expected value is a RegExp object, the actual value is\n  // equivalent if it is also a RegExp object with the same source and\n  // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).\n  } else if (util.isRegExp(actual) && util.isRegExp(expected)) {\n    return actual.source === expected.source &&\n           actual.global === expected.global &&\n           actual.multiline === expected.multiline &&\n           actual.lastIndex === expected.lastIndex &&\n           actual.ignoreCase === expected.ignoreCase;\n\n  // 7.4. Other pairs that do not both pass typeof value == 'object',\n  // equivalence is determined by ==.\n  } else if ((actual === null || typeof actual !== 'object') &&\n             (expected === null || typeof expected !== 'object')) {\n    return strict ? actual === expected : actual == expected;\n\n  // If both values are instances of typed arrays, wrap their underlying\n  // ArrayBuffers in a Buffer each to increase performance\n  // This optimization requires the arrays to have the same type as checked by\n  // Object.prototype.toString (aka pToString). Never perform binary\n  // comparisons for Float*Arrays, though, since e.g. +0 === -0 but their\n  // bit patterns are not identical.\n  } else if (isView(actual) && isView(expected) &&\n             pToString(actual) === pToString(expected) &&\n             !(actual instanceof Float32Array ||\n               actual instanceof Float64Array)) {\n    return compare(new Uint8Array(actual.buffer),\n                   new Uint8Array(expected.buffer)) === 0;\n\n  // 7.5 For all other Object pairs, including Array objects, equivalence is\n  // determined by having the same number of owned properties (as verified\n  // with Object.prototype.hasOwnProperty.call), the same set of keys\n  // (although not necessarily the same order), equivalent values for every\n  // corresponding key, and an identical 'prototype' property. Note: this\n  // accounts for both named and indexed properties on Arrays.\n  } else if (isBuffer(actual) !== isBuffer(expected)) {\n    return false;\n  } else {\n    memos = memos || {actual: [], expected: []};\n\n    var actualIndex = memos.actual.indexOf(actual);\n    if (actualIndex !== -1) {\n      if (actualIndex === memos.expected.indexOf(expected)) {\n        return true;\n      }\n    }\n\n    memos.actual.push(actual);\n    memos.expected.push(expected);\n\n    return objEquiv(actual, expected, strict, memos);\n  }\n}\n\nfunction isArguments(object) {\n  return Object.prototype.toString.call(object) == '[object Arguments]';\n}\n\nfunction objEquiv(a, b, strict, actualVisitedObjects) {\n  if (a === null || a === undefined || b === null || b === undefined)\n    return false;\n  // if one is a primitive, the other must be same\n  if (util.isPrimitive(a) || util.isPrimitive(b))\n    return a === b;\n  if (strict && Object.getPrototypeOf(a) !== Object.getPrototypeOf(b))\n    return false;\n  var aIsArgs = isArguments(a);\n  var bIsArgs = isArguments(b);\n  if ((aIsArgs && !bIsArgs) || (!aIsArgs && bIsArgs))\n    return false;\n  if (aIsArgs) {\n    a = pSlice.call(a);\n    b = pSlice.call(b);\n    return _deepEqual(a, b, strict);\n  }\n  var ka = objectKeys(a);\n  var kb = objectKeys(b);\n  var key, i;\n  // having the same number of owned properties (keys incorporates\n  // hasOwnProperty)\n  if (ka.length !== kb.length)\n    return false;\n  //the same set of keys (although not necessarily the same order),\n  ka.sort();\n  kb.sort();\n  //~~~cheap key test\n  for (i = ka.length - 1; i >= 0; i--) {\n    if (ka[i] !== kb[i])\n      return false;\n  }\n  //equivalent values for every corresponding key, and\n  //~~~possibly expensive deep test\n  for (i = ka.length - 1; i >= 0; i--) {\n    key = ka[i];\n    if (!_deepEqual(a[key], b[key], strict, actualVisitedObjects))\n      return false;\n  }\n  return true;\n}\n\n// 8. The non-equivalence assertion tests for any deep inequality.\n// assert.notDeepEqual(actual, expected, message_opt);\n\nassert.notDeepEqual = function notDeepEqual(actual, expected, message) {\n  if (_deepEqual(actual, expected, false)) {\n    fail(actual, expected, message, 'notDeepEqual', assert.notDeepEqual);\n  }\n};\n\nassert.notDeepStrictEqual = notDeepStrictEqual;\nfunction notDeepStrictEqual(actual, expected, message) {\n  if (_deepEqual(actual, expected, true)) {\n    fail(actual, expected, message, 'notDeepStrictEqual', notDeepStrictEqual);\n  }\n}\n\n\n// 9. The strict equality assertion tests strict equality, as determined by ===.\n// assert.strictEqual(actual, expected, message_opt);\n\nassert.strictEqual = function strictEqual(actual, expected, message) {\n  if (actual !== expected) {\n    fail(actual, expected, message, '===', assert.strictEqual);\n  }\n};\n\n// 10. The strict non-equality assertion tests for strict inequality, as\n// determined by !==.  assert.notStrictEqual(actual, expected, message_opt);\n\nassert.notStrictEqual = function notStrictEqual(actual, expected, message) {\n  if (actual === expected) {\n    fail(actual, expected, message, '!==', assert.notStrictEqual);\n  }\n};\n\nfunction expectedException(actual, expected) {\n  if (!actual || !expected) {\n    return false;\n  }\n\n  if (Object.prototype.toString.call(expected) == '[object RegExp]') {\n    return expected.test(actual);\n  }\n\n  try {\n    if (actual instanceof expected) {\n      return true;\n    }\n  } catch (e) {\n    // Ignore.  The instanceof check doesn't work for arrow functions.\n  }\n\n  if (Error.isPrototypeOf(expected)) {\n    return false;\n  }\n\n  return expected.call({}, actual) === true;\n}\n\nfunction _tryBlock(block) {\n  var error;\n  try {\n    block();\n  } catch (e) {\n    error = e;\n  }\n  return error;\n}\n\nfunction _throws(shouldThrow, block, expected, message) {\n  var actual;\n\n  if (typeof block !== 'function') {\n    throw new TypeError('\"block\" argument must be a function');\n  }\n\n  if (typeof expected === 'string') {\n    message = expected;\n    expected = null;\n  }\n\n  actual = _tryBlock(block);\n\n  message = (expected && expected.name ? ' (' + expected.name + ').' : '.') +\n            (message ? ' ' + message : '.');\n\n  if (shouldThrow && !actual) {\n    fail(actual, expected, 'Missing expected exception' + message);\n  }\n\n  var userProvidedMessage = typeof message === 'string';\n  var isUnwantedException = !shouldThrow && util.isError(actual);\n  var isUnexpectedException = !shouldThrow && actual && !expected;\n\n  if ((isUnwantedException &&\n      userProvidedMessage &&\n      expectedException(actual, expected)) ||\n      isUnexpectedException) {\n    fail(actual, expected, 'Got unwanted exception' + message);\n  }\n\n  if ((shouldThrow && actual && expected &&\n      !expectedException(actual, expected)) || (!shouldThrow && actual)) {\n    throw actual;\n  }\n}\n\n// 11. Expected to throw an error:\n// assert.throws(block, Error_opt, message_opt);\n\nassert.throws = function(block, /*optional*/error, /*optional*/message) {\n  _throws(true, block, error, message);\n};\n\n// EXTENSION! This is annoying to write outside this module.\nassert.doesNotThrow = function(block, /*optional*/error, /*optional*/message) {\n  _throws(false, block, error, message);\n};\n\nassert.ifError = function(err) { if (err) throw err; };\n\nvar objectKeys = Object.keys || function (obj) {\n  var keys = [];\n  for (var key in obj) {\n    if (hasOwn.call(obj, key)) keys.push(key);\n  }\n  return keys;\n};\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./../webpack/buildin/global.js */ 3)))//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 72 */
/* no static exports found */
/* all exports used */
/*!****************************!*\
  !*** ./src/basic/lines.js ***!
  \****************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _identity = __webpack_require__(/*! ramda/src/identity */ 149);\n\nvar _identity2 = _interopRequireDefault(_identity);\n\nvar _cond = __webpack_require__(/*! ramda/src/cond */ 144);\n\nvar _cond2 = _interopRequireDefault(_cond);\n\nvar _equals = __webpack_require__(/*! ramda/src/equals */ 56);\n\nvar _equals2 = _interopRequireDefault(_equals);\n\nvar _not = __webpack_require__(/*! ramda/src/not */ 64);\n\nvar _not2 = _interopRequireDefault(_not);\n\nvar _compose = __webpack_require__(/*! ramda/src/compose */ 13);\n\nvar _compose2 = _interopRequireDefault(_compose);\n\nvar _curry = __webpack_require__(/*! ramda/src/curry */ 24);\n\nvar _curry2 = _interopRequireDefault(_curry);\n\nvar _referenceHelpers = __webpack_require__(/*! ../utils/reference-helpers */ 18);\n\nvar _reference = __webpack_require__(/*! ../utils/reference */ 9);\n\nvar _reference2 = _interopRequireDefault(_reference);\n\nvar _geom = __webpack_require__(/*! ../utils/geom */ 78);\n\nvar _geom2 = _interopRequireDefault(_geom);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/*\n\t ___       ___  ________   _______   ________\n\t|\\  \\     |\\  \\|\\   ___  \\|\\  ___ \\ |\\   ____\\\n\t\\ \\  \\    \\ \\  \\ \\  \\\\ \\  \\ \\   __/|\\ \\  \\___|_\n\t \\ \\  \\    \\ \\  \\ \\  \\\\ \\  \\ \\  \\_|/_\\ \\_____  \\\n\t  \\ \\  \\____\\ \\  \\ \\  \\\\ \\  \\ \\  \\_|\\ \\|____|\\  \\\n\t   \\ \\_______\\ \\__\\ \\__\\\\ \\__\\ \\_______\\____\\_\\  \\\n\t    \\|_______|\\|__|\\|__| \\|__|\\|_______|\\_________\\\n\t                                       \\|_________|\n\n */\n\n/*\n\tEXTERNAL DEPENDENCIES\n */\n\nvar notEq = (0, _curry2.default)((0, _compose2.default)(_not2.default, _equals2.default));\n\n/*\n\tINTERNAL DEPENDENCIES\n */\n\nvar LR = _reference2.default.getLine(null); // Line reference\n/*\n\tINTERNAL LINE FUNCTIONS\n */\n\nvar checkLineSym = _reference2.default.checkSymbolizer('line');\n\n/**\n * Function for getting the color in rgba\n *\n * @param   {object} c3ss compiled carto css\n * @returns {object} with a function that contain the conditions to return a color with alpha channel\n */\n\nvar getColor = (0, _referenceHelpers.getColorFn)((0, _referenceHelpers.getPropertyOrDefFn)('stroke', LR), (0, _referenceHelpers.getPropertyOrDefFn)('stroke-opacity', LR));\n\n/**\n * Function for getting extrude property\n *\n * @param   {object} c3ss compiled carto css\n * @returns {object} with a function that contain the conditions to return the extrude\n */\n\nvar getExtrude = (0, _referenceHelpers.getPropertyOrDefFn)('tg-stroke-extrude');\n\n/**\n * Function for getting the width in meters dynamically by zoom\n *\n * @param   {object} c3ss compiled carto css\n * @returns {object} witha a function with the conditions to return width value\n */\n\nvar getWidth = (0, _compose2.default)(_geom2.default.px2Meters, (0, _referenceHelpers.getPropertyOrDefFn)('stroke-width', LR));\n\n/**\n * Function for getting the cap statically\n *\n * @param   {object} c3ss compiled carto css\n * @returns {string} with cap value Ex: round\n */\nvar getCap = (0, _referenceHelpers.getExecutedFn)('stroke-linecap', LR);\n\n/**\n * Function for getting the join statically\n *\n * @param   {object} c3ss compiled carto css\n * @returns {string} with join value Ex: round\n */\nvar getJoin = (0, _referenceHelpers.getExecutedFn)('stroke-linejoin', LR);\n\n/**\n * Function for getting the blend statically\n *\n * @param   {object} c3ss compiled carto css\n * @returns {string} with blending value Ex: \"multiply\"\n */\nvar getBlending = (0, _referenceHelpers.getBlendFn)(LR);\n\n/**\n * Function for getting dash value statically\n *\n * @param   {object} c3ss compiled carto css\n * @returns {string} with dash value Ex: [2, 1]\n */\n\nvar getDashed = (0, _compose2.default)((0, _cond2.default)([[notEq('none'), _identity2.default]]), (0, _referenceHelpers.getExecutedFn)('stroke-dasharray', LR));\n\n/**\n * Basic Line\n */\n\nvar Line = {};\n\nexports.default = Line;\n\n/**\n * Function to get the draw object of a line.\n *\n * @param   {object} c3ss compiled carto css\n * @returns {function} function with the conditions to return alpha value\n */\n\nLine.getDraw = function (c3ss, id) {\n  var draw = {};\n  if (checkLineSym(c3ss)) {\n    draw['lines_' + id] = {\n      color: getColor(c3ss),\n      width: getWidth(c3ss),\n      cap: getCap(c3ss),\n      join: getJoin(c3ss)\n    };\n  }\n\n  return draw;\n};\n\n/**\n * Function to get the style configuration of a line.\n *\n * @returns default style configuration for lines\n */\nLine.getStyle = function (c3ss, id, ord) {\n  var style = {};\n\n  style['lines_' + id] = {\n    base: 'lines',\n    blend: getBlending(c3ss),\n    dash: getDashed(c3ss),\n    blend_order: typeof ord === 'number' ? ord + 1 : 1\n  };\n\n  return style;\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzIuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL2Jhc2ljL2xpbmVzLmpzPzRlYWMiXSwic291cmNlc0NvbnRlbnQiOlsiLypcblx0IF9fXyAgICAgICBfX18gIF9fX19fX19fICAgX19fX19fXyAgIF9fX19fX19fXG5cdHxcXCAgXFwgICAgIHxcXCAgXFx8XFwgICBfX18gIFxcfFxcICBfX18gXFwgfFxcICAgX19fX1xcXG5cdFxcIFxcICBcXCAgICBcXCBcXCAgXFwgXFwgIFxcXFwgXFwgIFxcIFxcICAgX18vfFxcIFxcICBcXF9fX3xfXG5cdCBcXCBcXCAgXFwgICAgXFwgXFwgIFxcIFxcICBcXFxcIFxcICBcXCBcXCAgXFxffC9fXFwgXFxfX19fXyAgXFxcblx0ICBcXCBcXCAgXFxfX19fXFwgXFwgIFxcIFxcICBcXFxcIFxcICBcXCBcXCAgXFxffFxcIFxcfF9fX198XFwgIFxcXG5cdCAgIFxcIFxcX19fX19fX1xcIFxcX19cXCBcXF9fXFxcXCBcXF9fXFwgXFxfX19fX19fXFxfX19fXFxfXFwgIFxcXG5cdCAgICBcXHxfX19fX19ffFxcfF9ffFxcfF9ffCBcXHxfX3xcXHxfX19fX19ffFxcX19fX19fX19fXFxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXFx8X19fX19fX19ffFxuXG4gKi9cblxuLypcblx0RVhURVJOQUwgREVQRU5ERU5DSUVTXG4gKi9cblxuaW1wb3J0IHtjdXJyeSwgY29tcG9zZSwgbm90LCBlcXVhbHMsIGlkZW50aXR5LCBjb25kfSBmcm9tICdyYW1kYSc7XG5cbi8qXG5cdElOVEVSTkFMIERFUEVOREVOQ0lFU1xuICovXG5cbmltcG9ydCB7IGdldEV4ZWN1dGVkRm4sIGdldFByb3BlcnR5T3JEZWZGbiwgZ2V0QmxlbmRGbiwgZ2V0Q29sb3JGbiB9IGZyb20gJy4uL3V0aWxzL3JlZmVyZW5jZS1oZWxwZXJzJztcbmltcG9ydCBUYW5ncmFtUmVmZXJlbmNlIGZyb20gJy4uL3V0aWxzL3JlZmVyZW5jZSc7XG5pbXBvcnQgR2VvbSBmcm9tICcuLi91dGlscy9nZW9tJztcblxuY29uc3Qgbm90RXEgPSBjdXJyeShjb21wb3NlKG5vdCwgZXF1YWxzKSk7XG5cbmNvbnN0IExSID0gVGFuZ3JhbVJlZmVyZW5jZS5nZXRMaW5lKG51bGwpOyAvLyBMaW5lIHJlZmVyZW5jZVxuLypcblx0SU5URVJOQUwgTElORSBGVU5DVElPTlNcbiAqL1xuXG5jb25zdCBjaGVja0xpbmVTeW0gPSBUYW5ncmFtUmVmZXJlbmNlLmNoZWNrU3ltYm9saXplcignbGluZScpO1xuXG4vKipcbiAqIEZ1bmN0aW9uIGZvciBnZXR0aW5nIHRoZSBjb2xvciBpbiByZ2JhXG4gKlxuICogQHBhcmFtICAge29iamVjdH0gYzNzcyBjb21waWxlZCBjYXJ0byBjc3NcbiAqIEByZXR1cm5zIHtvYmplY3R9IHdpdGggYSBmdW5jdGlvbiB0aGF0IGNvbnRhaW4gdGhlIGNvbmRpdGlvbnMgdG8gcmV0dXJuIGEgY29sb3Igd2l0aCBhbHBoYSBjaGFubmVsXG4gKi9cblxuY29uc3QgZ2V0Q29sb3IgPSBnZXRDb2xvckZuKFxuICBnZXRQcm9wZXJ0eU9yRGVmRm4oJ3N0cm9rZScsIExSKSxcbiAgZ2V0UHJvcGVydHlPckRlZkZuKCdzdHJva2Utb3BhY2l0eScsIExSKVxuKTtcblxuLyoqXG4gKiBGdW5jdGlvbiBmb3IgZ2V0dGluZyBleHRydWRlIHByb3BlcnR5XG4gKlxuICogQHBhcmFtICAge29iamVjdH0gYzNzcyBjb21waWxlZCBjYXJ0byBjc3NcbiAqIEByZXR1cm5zIHtvYmplY3R9IHdpdGggYSBmdW5jdGlvbiB0aGF0IGNvbnRhaW4gdGhlIGNvbmRpdGlvbnMgdG8gcmV0dXJuIHRoZSBleHRydWRlXG4gKi9cblxuY29uc3QgZ2V0RXh0cnVkZSA9IGdldFByb3BlcnR5T3JEZWZGbigndGctc3Ryb2tlLWV4dHJ1ZGUnKTtcblxuLyoqXG4gKiBGdW5jdGlvbiBmb3IgZ2V0dGluZyB0aGUgd2lkdGggaW4gbWV0ZXJzIGR5bmFtaWNhbGx5IGJ5IHpvb21cbiAqXG4gKiBAcGFyYW0gICB7b2JqZWN0fSBjM3NzIGNvbXBpbGVkIGNhcnRvIGNzc1xuICogQHJldHVybnMge29iamVjdH0gd2l0aGEgYSBmdW5jdGlvbiB3aXRoIHRoZSBjb25kaXRpb25zIHRvIHJldHVybiB3aWR0aCB2YWx1ZVxuICovXG5cbmNvbnN0IGdldFdpZHRoID0gY29tcG9zZShcbiAgR2VvbS5weDJNZXRlcnMsXG4gIGdldFByb3BlcnR5T3JEZWZGbignc3Ryb2tlLXdpZHRoJywgTFIpXG4pO1xuXG4vKipcbiAqIEZ1bmN0aW9uIGZvciBnZXR0aW5nIHRoZSBjYXAgc3RhdGljYWxseVxuICpcbiAqIEBwYXJhbSAgIHtvYmplY3R9IGMzc3MgY29tcGlsZWQgY2FydG8gY3NzXG4gKiBAcmV0dXJucyB7c3RyaW5nfSB3aXRoIGNhcCB2YWx1ZSBFeDogcm91bmRcbiAqL1xuY29uc3QgZ2V0Q2FwID0gZ2V0RXhlY3V0ZWRGbignc3Ryb2tlLWxpbmVjYXAnLCBMUik7XG5cbi8qKlxuICogRnVuY3Rpb24gZm9yIGdldHRpbmcgdGhlIGpvaW4gc3RhdGljYWxseVxuICpcbiAqIEBwYXJhbSAgIHtvYmplY3R9IGMzc3MgY29tcGlsZWQgY2FydG8gY3NzXG4gKiBAcmV0dXJucyB7c3RyaW5nfSB3aXRoIGpvaW4gdmFsdWUgRXg6IHJvdW5kXG4gKi9cbmNvbnN0IGdldEpvaW4gPSBnZXRFeGVjdXRlZEZuKCdzdHJva2UtbGluZWpvaW4nLCBMUik7XG5cbi8qKlxuICogRnVuY3Rpb24gZm9yIGdldHRpbmcgdGhlIGJsZW5kIHN0YXRpY2FsbHlcbiAqXG4gKiBAcGFyYW0gICB7b2JqZWN0fSBjM3NzIGNvbXBpbGVkIGNhcnRvIGNzc1xuICogQHJldHVybnMge3N0cmluZ30gd2l0aCBibGVuZGluZyB2YWx1ZSBFeDogXCJtdWx0aXBseVwiXG4gKi9cbmNvbnN0IGdldEJsZW5kaW5nID0gZ2V0QmxlbmRGbihMUik7XG5cbi8qKlxuICogRnVuY3Rpb24gZm9yIGdldHRpbmcgZGFzaCB2YWx1ZSBzdGF0aWNhbGx5XG4gKlxuICogQHBhcmFtICAge29iamVjdH0gYzNzcyBjb21waWxlZCBjYXJ0byBjc3NcbiAqIEByZXR1cm5zIHtzdHJpbmd9IHdpdGggZGFzaCB2YWx1ZSBFeDogWzIsIDFdXG4gKi9cblxuY29uc3QgZ2V0RGFzaGVkID0gY29tcG9zZShcbiAgY29uZChbXG4gICAgW25vdEVxKCdub25lJyksIGlkZW50aXR5XVxuICBdKSxcbiAgZ2V0RXhlY3V0ZWRGbignc3Ryb2tlLWRhc2hhcnJheScsIExSKVxuKTtcblxuLyoqXG4gKiBCYXNpYyBMaW5lXG4gKi9cblxudmFyIExpbmUgPSB7fTtcblxuZXhwb3J0IGRlZmF1bHQgTGluZTtcblxuLyoqXG4gKiBGdW5jdGlvbiB0byBnZXQgdGhlIGRyYXcgb2JqZWN0IG9mIGEgbGluZS5cbiAqXG4gKiBAcGFyYW0gICB7b2JqZWN0fSBjM3NzIGNvbXBpbGVkIGNhcnRvIGNzc1xuICogQHJldHVybnMge2Z1bmN0aW9ufSBmdW5jdGlvbiB3aXRoIHRoZSBjb25kaXRpb25zIHRvIHJldHVybiBhbHBoYSB2YWx1ZVxuICovXG5cbkxpbmUuZ2V0RHJhdyA9IChjM3NzLCBpZCkgPT4ge1xuICBsZXQgZHJhdyA9IHt9O1xuICBpZiAoY2hlY2tMaW5lU3ltKGMzc3MpKSB7XG4gICAgZHJhd1snbGluZXNfJyArIGlkXSA9IHtcbiAgICAgIGNvbG9yOiBnZXRDb2xvcihjM3NzKSxcbiAgICAgIHdpZHRoOiBnZXRXaWR0aChjM3NzKSxcbiAgICAgIGNhcDogZ2V0Q2FwKGMzc3MpLFxuICAgICAgam9pbjogZ2V0Sm9pbihjM3NzKVxuICAgIH07XG4gIH1cblxuICByZXR1cm4gZHJhdztcbn07XG5cbi8qKlxuICogRnVuY3Rpb24gdG8gZ2V0IHRoZSBzdHlsZSBjb25maWd1cmF0aW9uIG9mIGEgbGluZS5cbiAqXG4gKiBAcmV0dXJucyBkZWZhdWx0IHN0eWxlIGNvbmZpZ3VyYXRpb24gZm9yIGxpbmVzXG4gKi9cbkxpbmUuZ2V0U3R5bGUgPSBmdW5jdGlvbihjM3NzLCBpZCwgb3JkKSB7XG4gIGxldCBzdHlsZSA9IHt9O1xuXG4gIHN0eWxlWydsaW5lc18nICsgaWRdID0ge1xuICAgIGJhc2U6ICdsaW5lcycsXG4gICAgYmxlbmQ6IGdldEJsZW5kaW5nKGMzc3MpLFxuICAgIGRhc2g6IGdldERhc2hlZChjM3NzKSxcbiAgICBibGVuZF9vcmRlcjogdHlwZW9mIG9yZCA9PT0gJ251bWJlcicgPyBvcmQgKyAxIDogMVxuICB9O1xuXG4gIHJldHVybiBzdHlsZTtcbn07XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gc3JjL2Jhc2ljL2xpbmVzLmpzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFzQkE7QUFDQTtBQUFBO0FBQ0E7OztBQUFBO0FBQ0E7Ozs7O0FBekJBOzs7Ozs7Ozs7Ozs7QUFZQTs7OztBQWNBO0FBQ0E7QUFUQTs7OztBQVVBO0FBQ0E7Ozs7QUFJQTtBQUNBO0FBQ0E7Ozs7Ozs7QUFPQTtBQUNBO0FBSUE7Ozs7Ozs7QUFPQTtBQUNBO0FBQ0E7Ozs7Ozs7QUFPQTtBQUNBO0FBSUE7Ozs7OztBQU1BO0FBQ0E7QUFDQTs7Ozs7O0FBTUE7QUFDQTtBQUNBOzs7Ozs7QUFNQTtBQUNBO0FBQ0E7Ozs7Ozs7QUFPQTtBQUNBO0FBTUE7Ozs7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7O0FBT0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUpBO0FBTUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7OztBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFKQTtBQUNBO0FBTUE7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 73 */
/* no static exports found */
/* all exports used */
/*!*****************************!*\
  !*** ./src/basic/points.js ***!
  \*****************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _merge = __webpack_require__(/*! ramda/src/merge */ 178);\n\nvar _merge2 = _interopRequireDefault(_merge);\n\nvar _mergeWith = __webpack_require__(/*! ramda/src/mergeWith */ 179);\n\nvar _mergeWith2 = _interopRequireDefault(_mergeWith);\n\nvar _applySpec = __webpack_require__(/*! ramda/src/applySpec */ 55);\n\nvar _applySpec2 = _interopRequireDefault(_applySpec);\n\nvar _isNil = __webpack_require__(/*! ramda/src/isNil */ 175);\n\nvar _isNil2 = _interopRequireDefault(_isNil);\n\nvar _not = __webpack_require__(/*! ramda/src/not */ 64);\n\nvar _not2 = _interopRequireDefault(_not);\n\nvar _pickBy = __webpack_require__(/*! ramda/src/pickBy */ 182);\n\nvar _pickBy2 = _interopRequireDefault(_pickBy);\n\nvar _compose = __webpack_require__(/*! ramda/src/compose */ 13);\n\nvar _compose2 = _interopRequireDefault(_compose);\n\nvar _md = __webpack_require__(/*! md5 */ 35);\n\nvar _md2 = _interopRequireDefault(_md);\n\nvar _referenceHelpers = __webpack_require__(/*! ../utils/reference-helpers */ 18);\n\nvar _reference = __webpack_require__(/*! ../utils/reference */ 9);\n\nvar _reference2 = _interopRequireDefault(_reference);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/*\n\tINTERNAL DEPENDENCIES\n */\n\nvar PR = _reference2.default.getPoint(null); // Point reference\n\n/*\n\tINTERNAL MARKER FUNCTIONS\n */\n\n/*\n\t ________  ________  ___  ________   _________\n\t|\\   __  \\|\\   __  \\|\\  \\|\\   ___  \\|\\___   ___\\\n\t\\ \\  \\|\\  \\ \\  \\|\\  \\ \\  \\ \\  \\\\ \\  \\|___ \\  \\_|\n\t \\ \\   ____\\ \\  \\\\\\  \\ \\  \\ \\  \\\\ \\  \\   \\ \\  \\\n\t  \\ \\  \\___|\\ \\  \\\\\\  \\ \\  \\ \\  \\\\ \\  \\   \\ \\  \\\n\t   \\ \\__\\    \\ \\_______\\ \\__\\ \\__\\\\ \\__\\   \\ \\__\\\n\t    \\|__|     \\|_______|\\|__|\\|__| \\|__|    \\|__|\n\n */\n\n/*\n\tEXTERNAL DEPENDENCIES\n */\nvar checkMarkerSym = _reference2.default.checkSymbolizer('markers');\n\n/**\n * get colors from cartocss with the alpha channel applied\n * @param  {object} c3ss compiled carto css\n * @return {object}      draw object with color and border_color\n */\n\nvar getColor = (0, _referenceHelpers.getColorFn)((0, _referenceHelpers.getPropertyOrDefFn)('fill', PR), (0, _referenceHelpers.getEitherProp)('fill-opacity', 'opacity', PR));\n\nvar getOutlineColor = (0, _referenceHelpers.getColorFn)((0, _referenceHelpers.getPropertyFnSafe)('stroke', PR), (0, _referenceHelpers.getEitherProp)('stroke-opacity', 'opacity', PR));\n\nvar getColors = (0, _compose2.default)((0, _pickBy2.default)((0, _compose2.default)(_not2.default, _isNil2.default)), (0, _applySpec2.default)({\n  color: getColor,\n  outline: {\n    color: getOutlineColor\n  }\n}));\n\n/**\n * getWidth for the marker and his border\n * @param  {object} c3ss compiled carto css\n * @return {object}      size and border_width\n */\n\nvar getMarkerWidth = (0, _referenceHelpers.getPropertyFnSafe)('width', PR);\n\nvar getOutlineWidth = (0, _referenceHelpers.getPropertyFnSafe)('stroke-width', PR);\n\nvar getWidths = (0, _compose2.default)((0, _pickBy2.default)((0, _compose2.default)(_not2.default, _isNil2.default)), (0, _applySpec2.default)({\n  size: getMarkerWidth,\n  outline: {\n    width: getOutlineWidth\n  }\n}));\n\n/**\n * Get collide from allow-overlap in cartocss [NON-DYNAMIC]\n * @param  {object} c3ss compiled carto css\n * @return {object}      return draw object with a non-dynamic collide option\n */\n\nvar getCollide = (0, _referenceHelpers.getExecutedFn)('allow-overlap', PR);\n\nvar getTextureFile = (0, _referenceHelpers.getExecutedFn)('file', PR);\n\n/**\n * Get texture from marker-file in cartocss [NON-DYNAMIC]\n * @param  {object} c3ss compiled carto css\n * @return {object}      return draw object with a non-dynamic texture.\n */\nvar getTexture = (0, _compose2.default)(_md2.default, getTextureFile);\n\nvar getBlending = (0, _referenceHelpers.getBlendFn)(PR);\n\n/**\n * Basic point\n */\n\nvar Point = {};\n\nexports.default = Point;\n\n/**\n * Get the draw (for tangram) object of a point from compiled carto css\n * @param  {object} c3ss compiled carto @class\n * @return {object}      object with the draw types and their properties\n */\n\nPoint.getDraw = function (c3ss, id) {\n  var point = {},\n      draw = {};\n\n  if (checkMarkerSym(c3ss)) {\n\n    point = (0, _mergeWith2.default)(_merge2.default, getWidths(c3ss), getColors(c3ss));\n\n    point.collide = !getCollide(c3ss);\n  }\n\n  draw['points_' + id] = point;\n\n  return draw;\n};\n\n// TODO\n/**\n * [getStyle description]\n * @param  {[type]} c3ss  [description]\n * @return {[type]}       [description]\n */\nPoint.getStyle = function (c3ss, id, ord) {\n  var style = {};\n  style['points_' + id] = {\n    base: 'points',\n    blend: 'overlay',\n    blend_order: ord || 1\n  };\n\n  if (checkMarkerSym(c3ss)) {\n    var p = style['points_' + id];\n    p.texture = getTextureFile(c3ss) !== 'none' ? getTexture(c3ss) : void 0;\n    p.blend = getBlending(c3ss);\n  }\n\n  return style;\n};\n\nPoint.getTextures = function (c3ss) {\n  var tex = {};\n  if (checkMarkerSym(c3ss)) {\n    var texture = getTextureFile(c3ss);\n\n    if (texture !== 'none') {\n      tex[(0, _md2.default)(texture)] = { url: texture };\n    }\n\n    return tex;\n  }\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL2Jhc2ljL3BvaW50cy5qcz8yNWFhIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXG5cdCBfX19fX19fXyAgX19fX19fX18gIF9fXyAgX19fX19fX18gICBfX19fX19fX19cblx0fFxcICAgX18gIFxcfFxcICAgX18gIFxcfFxcICBcXHxcXCAgIF9fXyAgXFx8XFxfX18gICBfX19cXFxuXHRcXCBcXCAgXFx8XFwgIFxcIFxcICBcXHxcXCAgXFwgXFwgIFxcIFxcICBcXFxcIFxcICBcXHxfX18gXFwgIFxcX3xcblx0IFxcIFxcICAgX19fX1xcIFxcICBcXFxcXFwgIFxcIFxcICBcXCBcXCAgXFxcXCBcXCAgXFwgICBcXCBcXCAgXFxcblx0ICBcXCBcXCAgXFxfX198XFwgXFwgIFxcXFxcXCAgXFwgXFwgIFxcIFxcICBcXFxcIFxcICBcXCAgIFxcIFxcICBcXFxuXHQgICBcXCBcXF9fXFwgICAgXFwgXFxfX19fX19fXFwgXFxfX1xcIFxcX19cXFxcIFxcX19cXCAgIFxcIFxcX19cXFxuXHQgICAgXFx8X198ICAgICBcXHxfX19fX19ffFxcfF9ffFxcfF9ffCBcXHxfX3wgICAgXFx8X198XG5cbiAqL1xuXG4vKlxuXHRFWFRFUk5BTCBERVBFTkRFTkNJRVNcbiAqL1xuaW1wb3J0IE1ENSBmcm9tICdtZDUnO1xuaW1wb3J0IHtjb21wb3NlLCBwaWNrQnksIG5vdCwgaXNOaWwsIGFwcGx5U3BlYywgbWVyZ2UsIG1lcmdlV2l0aH0gZnJvbSAncmFtZGEnO1xuXG4vKlxuXHRJTlRFUk5BTCBERVBFTkRFTkNJRVNcbiAqL1xuXG5pbXBvcnQgeyBnZXRFeGVjdXRlZEZuLCBnZXRQcm9wZXJ0eU9yRGVmRm4sIGdldEJsZW5kRm4sIGdldFByb3BlcnR5Rm5TYWZlLCBnZXRFaXRoZXJQcm9wLCBnZXRDb2xvckZuIH0gZnJvbSAnLi4vdXRpbHMvcmVmZXJlbmNlLWhlbHBlcnMnO1xuaW1wb3J0IFRhbmdyYW1SZWZlcmVuY2UgZnJvbSAnLi4vdXRpbHMvcmVmZXJlbmNlJztcblxuY29uc3QgUFIgPSBUYW5ncmFtUmVmZXJlbmNlLmdldFBvaW50KG51bGwpOyAvLyBQb2ludCByZWZlcmVuY2VcblxuLypcblx0SU5URVJOQUwgTUFSS0VSIEZVTkNUSU9OU1xuICovXG5cbmNvbnN0IGNoZWNrTWFya2VyU3ltID0gVGFuZ3JhbVJlZmVyZW5jZS5jaGVja1N5bWJvbGl6ZXIoJ21hcmtlcnMnKTtcblxuLyoqXG4gKiBnZXQgY29sb3JzIGZyb20gY2FydG9jc3Mgd2l0aCB0aGUgYWxwaGEgY2hhbm5lbCBhcHBsaWVkXG4gKiBAcGFyYW0gIHtvYmplY3R9IGMzc3MgY29tcGlsZWQgY2FydG8gY3NzXG4gKiBAcmV0dXJuIHtvYmplY3R9ICAgICAgZHJhdyBvYmplY3Qgd2l0aCBjb2xvciBhbmQgYm9yZGVyX2NvbG9yXG4gKi9cblxuY29uc3QgZ2V0Q29sb3IgPSBnZXRDb2xvckZuKFxuICBnZXRQcm9wZXJ0eU9yRGVmRm4oJ2ZpbGwnLCBQUiksXG4gIGdldEVpdGhlclByb3AoJ2ZpbGwtb3BhY2l0eScsICdvcGFjaXR5JywgUFIpXG4pO1xuXG5jb25zdCBnZXRPdXRsaW5lQ29sb3IgPSBnZXRDb2xvckZuKFxuICBnZXRQcm9wZXJ0eUZuU2FmZSgnc3Ryb2tlJywgUFIpLFxuICBnZXRFaXRoZXJQcm9wKCdzdHJva2Utb3BhY2l0eScsICdvcGFjaXR5JywgUFIpXG4pO1xuXG5jb25zdCBnZXRDb2xvcnMgPSBjb21wb3NlKFxuICBwaWNrQnkoY29tcG9zZShub3QsaXNOaWwpKSxcbiAgYXBwbHlTcGVjKHtcbiAgICBjb2xvcjogZ2V0Q29sb3IsXG4gICAgb3V0bGluZToge1xuICAgICAgY29sb3I6IGdldE91dGxpbmVDb2xvclxuICAgIH1cbiAgfSlcbik7XG5cbi8qKlxuICogZ2V0V2lkdGggZm9yIHRoZSBtYXJrZXIgYW5kIGhpcyBib3JkZXJcbiAqIEBwYXJhbSAge29iamVjdH0gYzNzcyBjb21waWxlZCBjYXJ0byBjc3NcbiAqIEByZXR1cm4ge29iamVjdH0gICAgICBzaXplIGFuZCBib3JkZXJfd2lkdGhcbiAqL1xuXG5jb25zdCBnZXRNYXJrZXJXaWR0aCA9IGdldFByb3BlcnR5Rm5TYWZlKCd3aWR0aCcsIFBSKTtcblxuY29uc3QgZ2V0T3V0bGluZVdpZHRoID0gZ2V0UHJvcGVydHlGblNhZmUoJ3N0cm9rZS13aWR0aCcsIFBSKTtcblxuY29uc3QgZ2V0V2lkdGhzID0gY29tcG9zZShcbiAgcGlja0J5KGNvbXBvc2Uobm90LCBpc05pbCkpLFxuICBhcHBseVNwZWMoe1xuICAgIHNpemU6IGdldE1hcmtlcldpZHRoLFxuICAgIG91dGxpbmU6IHtcbiAgICAgIHdpZHRoOiBnZXRPdXRsaW5lV2lkdGhcbiAgICB9XG4gIH0pXG4pO1xuXG4vKipcbiAqIEdldCBjb2xsaWRlIGZyb20gYWxsb3ctb3ZlcmxhcCBpbiBjYXJ0b2NzcyBbTk9OLURZTkFNSUNdXG4gKiBAcGFyYW0gIHtvYmplY3R9IGMzc3MgY29tcGlsZWQgY2FydG8gY3NzXG4gKiBAcmV0dXJuIHtvYmplY3R9ICAgICAgcmV0dXJuIGRyYXcgb2JqZWN0IHdpdGggYSBub24tZHluYW1pYyBjb2xsaWRlIG9wdGlvblxuICovXG5cbmNvbnN0IGdldENvbGxpZGUgPSBnZXRFeGVjdXRlZEZuKCdhbGxvdy1vdmVybGFwJywgUFIpO1xuXG5jb25zdCBnZXRUZXh0dXJlRmlsZSA9IGdldEV4ZWN1dGVkRm4oJ2ZpbGUnLCBQUik7XG5cbi8qKlxuICogR2V0IHRleHR1cmUgZnJvbSBtYXJrZXItZmlsZSBpbiBjYXJ0b2NzcyBbTk9OLURZTkFNSUNdXG4gKiBAcGFyYW0gIHtvYmplY3R9IGMzc3MgY29tcGlsZWQgY2FydG8gY3NzXG4gKiBAcmV0dXJuIHtvYmplY3R9ICAgICAgcmV0dXJuIGRyYXcgb2JqZWN0IHdpdGggYSBub24tZHluYW1pYyB0ZXh0dXJlLlxuICovXG5jb25zdCBnZXRUZXh0dXJlID0gY29tcG9zZShcbiAgTUQ1LFxuICBnZXRUZXh0dXJlRmlsZVxuKTtcblxuY29uc3QgZ2V0QmxlbmRpbmcgPSBnZXRCbGVuZEZuKFBSKTtcblxuLyoqXG4gKiBCYXNpYyBwb2ludFxuICovXG5cbnZhciBQb2ludCA9IHt9O1xuXG5leHBvcnQgZGVmYXVsdCBQb2ludDtcblxuXG4vKipcbiAqIEdldCB0aGUgZHJhdyAoZm9yIHRhbmdyYW0pIG9iamVjdCBvZiBhIHBvaW50IGZyb20gY29tcGlsZWQgY2FydG8gY3NzXG4gKiBAcGFyYW0gIHtvYmplY3R9IGMzc3MgY29tcGlsZWQgY2FydG8gQGNsYXNzXG4gKiBAcmV0dXJuIHtvYmplY3R9ICAgICAgb2JqZWN0IHdpdGggdGhlIGRyYXcgdHlwZXMgYW5kIHRoZWlyIHByb3BlcnRpZXNcbiAqL1xuUG9pbnQuZ2V0RHJhdyA9IGZ1bmN0aW9uKGMzc3MsIGlkKSB7XG5cdHZhciBwb2ludCA9IHt9LFxuICAgICAgZHJhdyA9IHt9O1xuXG5cdGlmIChjaGVja01hcmtlclN5bShjM3NzKSkge1xuXG5cdFx0cG9pbnQgPSBtZXJnZVdpdGgoXG4gICAgICAgIG1lcmdlLFxuXHRcdFx0XHRnZXRXaWR0aHMoYzNzcyksXG5cdFx0XHRcdGdldENvbG9ycyhjM3NzKVxuXHRcdFx0KTtcblxuICAgIHBvaW50LmNvbGxpZGUgPSAhZ2V0Q29sbGlkZShjM3NzKTtcblx0fVxuXG4gIGRyYXdbJ3BvaW50c18nICsgaWRdID0gcG9pbnQ7XG5cbiAgcmV0dXJuIGRyYXc7XG59O1xuXG4vLyBUT0RPXG4vKipcbiAqIFtnZXRTdHlsZSBkZXNjcmlwdGlvbl1cbiAqIEBwYXJhbSAge1t0eXBlXX0gYzNzcyAgW2Rlc2NyaXB0aW9uXVxuICogQHJldHVybiB7W3R5cGVdfSAgICAgICBbZGVzY3JpcHRpb25dXG4gKi9cblBvaW50LmdldFN0eWxlID0gZnVuY3Rpb24oYzNzcywgaWQsIG9yZCkge1xuICBsZXQgc3R5bGUgPSB7fTtcbiAgc3R5bGVbJ3BvaW50c18nICsgaWRdID0ge1xuICAgIGJhc2U6ICdwb2ludHMnLFxuICAgIGJsZW5kOiAnb3ZlcmxheScsXG4gICAgYmxlbmRfb3JkZXI6IG9yZCB8fCAxXG4gIH07XG5cblx0aWYgKGNoZWNrTWFya2VyU3ltKGMzc3MpKSB7XG4gICAgbGV0IHAgPSBzdHlsZVsncG9pbnRzXycgKyBpZF07XG4gICAgcC50ZXh0dXJlID0gZ2V0VGV4dHVyZUZpbGUoYzNzcykgIT09ICdub25lJyA/IGdldFRleHR1cmUoYzNzcykgOiB2b2lkIDA7XG4gICAgcC5ibGVuZCA9IGdldEJsZW5kaW5nKGMzc3MpO1xuXHR9XG5cblx0cmV0dXJuIHN0eWxlO1xufTtcblxuUG9pbnQuZ2V0VGV4dHVyZXMgPSBmdW5jdGlvbihjM3NzKSB7XG4gIGxldCB0ZXggPSB7fTtcblx0aWYgKGNoZWNrTWFya2VyU3ltKGMzc3MpKSB7XG5cdFx0bGV0IHRleHR1cmUgPSBnZXRUZXh0dXJlRmlsZShjM3NzKTtcblxuXHRcdGlmICh0ZXh0dXJlICE9PSAnbm9uZScpIHtcblx0XHRcdHRleFtNRDUodGV4dHVyZSldID0ge3VybDogdGV4dHVyZX07XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRleDtcblx0fVxufTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBzcmMvYmFzaWMvcG9pbnRzLmpzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBY0E7QUFDQTs7O0FBTUE7QUFDQTtBQUFBO0FBQ0E7Ozs7O0FBTkE7Ozs7QUFPQTtBQUNBO0FBQ0E7Ozs7QUExQkE7Ozs7Ozs7Ozs7O0FBV0E7OztBQW1CQTtBQUNBO0FBQ0E7Ozs7OztBQU1BO0FBQ0E7QUFJQTtBQUNBO0FBSUE7QUFHQTtBQUNBO0FBQ0E7QUFEQTtBQUZBO0FBQ0E7QUFPQTs7Ozs7O0FBTUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQURBO0FBRkE7QUFDQTtBQU9BOzs7Ozs7QUFNQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7OztBQUtBO0FBQ0E7QUFJQTtBQUNBO0FBQ0E7Ozs7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOzs7Ozs7QUFLQTtBQUNBO0FBQUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7O0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBSEE7QUFDQTtBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 74 */
/* no static exports found */
/* all exports used */
/*!*******************************!*\
  !*** ./src/basic/polygons.js ***!
  \*******************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _compose = __webpack_require__(/*! ramda/src/compose */ 13);\n\nvar _compose2 = _interopRequireDefault(_compose);\n\nvar _md = __webpack_require__(/*! md5 */ 35);\n\nvar _md2 = _interopRequireDefault(_md);\n\nvar _referenceHelpers = __webpack_require__(/*! ../utils/reference-helpers */ 18);\n\nvar _reference = __webpack_require__(/*! ../utils/reference */ 9);\n\nvar _reference2 = _interopRequireDefault(_reference);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/*\n\tINTERNAL DEPENDENCIES\n */\n\nvar PR = _reference2.default.getPolygon(null); // Polygon reference\n/*\n ________  ________  ___           ___    ___ ________  ________  ________   ________\n|\\   __  \\|\\   __  \\|\\  \\         |\\  \\  /  /|\\   ____\\|\\   __  \\|\\   ___  \\|\\   ____\\\n\\ \\  \\|\\  \\ \\  \\|\\  \\ \\  \\        \\ \\  \\/  / | \\  \\___|\\ \\  \\|\\  \\ \\  \\\\ \\  \\ \\  \\___|_\n \\ \\   ____\\ \\  \\\\\\  \\ \\  \\        \\ \\    / / \\ \\  \\  __\\ \\  \\\\\\  \\ \\  \\\\ \\  \\ \\_____  \\\n  \\ \\  \\___|\\ \\  \\\\\\  \\ \\  \\____    \\/  /  /   \\ \\  \\|\\  \\ \\  \\\\\\  \\ \\  \\\\ \\  \\|____|\\  \\\n   \\ \\__\\    \\ \\_______\\ \\_______\\__/  / /      \\ \\_______\\ \\_______\\ \\__\\\\ \\__\\____\\_\\  \\\n    \\|__|     \\|_______|\\|_______|\\___/ /        \\|_______|\\|_______|\\|__| \\|__|\\_________\\\n                                 \\|___|/                                       \\|_________|\n\n */\n\n/*\n\tEXTERNAL DEPENDENCIES\n */\nvar PPR = _reference2.default.getPolygonPattern(null);\n\n/*\n\tINTERNAL POLYGONS FUNCTIONS\n */\n\nvar checkPolygonSym = _reference2.default.checkSymbolizer('polygon');\nvar checkPolPatternSym = _reference2.default.checkSymbolizer('polygon-pattern');\n\n/**\n * Function for getting the color in rgba\n *\n * @param   {object} c3ss compiled carto css\n * @returns {object} with a function that contain the conditions to return a color with alpha channel\n */\nvar getColor = (0, _referenceHelpers.getColorFn)((0, _referenceHelpers.getPropertyOrDefFn)('fill', PR), (0, _referenceHelpers.getPropertyOrDefFn)('fill-opacity', PR));\n\n/**\n * Function for getting the extrude of a polygon\n *\n * @param   {object} c3ss compiled carto css\n * @returns {object} with a function that contain the conditions to return an extrude value\n */\n\nvar getExtrude = (0, _referenceHelpers.getPropertyOrDefFn)('tg-polygon-extrude');\n\n/**\n * Function for getting the texture as string\n *\n * @param   {object} c3ss compiled carto css\n * @returns {string} with the path of texture\n */\n\nvar getTextureFile = (0, _referenceHelpers.getExecutedFn)('file', PPR);\n\nvar getTexture = (0, _compose2.default)(_md2.default, getTextureFile);\n\nvar getBlending = (0, _referenceHelpers.getBlendFn)(PR);\n\n/**\n * Basic Polygon\n */\n\nvar Polygon = {};\n\nexports.default = Polygon;\n\n/**\n * Function to get the draw object of a polygon.\n *\n * @param   {object} c3ss compiled carto css\n * @returns {function} function with the conditions to return alpha value\n */\n\nPolygon.getDraw = function (c3ss, id) {\n  var draw = {};\n\n  if (checkPolygonSym(c3ss)) {\n    draw['polygons_' + id] = {\n      color: getColor(c3ss)\n    };\n  }\n\n  return draw;\n};\n\n/**\n * Function to get the style configuration of a polygon.\n *\n * @returns default style configuration for polygon\n */\nPolygon.getStyle = function (c3ss, id, ord) {\n  var style = {};\n\n  style['polygons_' + id] = {\n    base: 'polygons',\n    blend: getBlending(c3ss),\n    blend_order: ord || 1\n  };\n\n  if (checkPolPatternSym(c3ss)) {\n    style['polygons_' + id].material = {\n      diffuse: {\n        texture: getTexture(c3ss),\n        mapping: 'uv'\n      }\n    };\n  }\n\n  return style;\n};\n\nPolygon.getTextures = function (c3ss) {\n  var tex = {};\n  if (checkPolPatternSym(c3ss)) {\n    var texture = getTextureFile(c3ss);\n\n    if (texture) {\n      tex[(0, _md2.default)(texture)] = { url: texture };\n    }\n  }\n  return tex;\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzQuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL2Jhc2ljL3BvbHlnb25zLmpzPzcyZGIiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiBfX19fX19fXyAgX19fX19fX18gIF9fXyAgICAgICAgICAgX19fICAgIF9fXyBfX19fX19fXyAgX19fX19fX18gIF9fX19fX19fICAgX19fX19fX19cbnxcXCAgIF9fICBcXHxcXCAgIF9fICBcXHxcXCAgXFwgICAgICAgICB8XFwgIFxcICAvICAvfFxcICAgX19fX1xcfFxcICAgX18gIFxcfFxcICAgX19fICBcXHxcXCAgIF9fX19cXFxuXFwgXFwgIFxcfFxcICBcXCBcXCAgXFx8XFwgIFxcIFxcICBcXCAgICAgICAgXFwgXFwgIFxcLyAgLyB8IFxcICBcXF9fX3xcXCBcXCAgXFx8XFwgIFxcIFxcICBcXFxcIFxcICBcXCBcXCAgXFxfX198X1xuIFxcIFxcICAgX19fX1xcIFxcICBcXFxcXFwgIFxcIFxcICBcXCAgICAgICAgXFwgXFwgICAgLyAvIFxcIFxcICBcXCAgX19cXCBcXCAgXFxcXFxcICBcXCBcXCAgXFxcXCBcXCAgXFwgXFxfX19fXyAgXFxcbiAgXFwgXFwgIFxcX19ffFxcIFxcICBcXFxcXFwgIFxcIFxcICBcXF9fX18gICAgXFwvICAvICAvICAgXFwgXFwgIFxcfFxcICBcXCBcXCAgXFxcXFxcICBcXCBcXCAgXFxcXCBcXCAgXFx8X19fX3xcXCAgXFxcbiAgIFxcIFxcX19cXCAgICBcXCBcXF9fX19fX19cXCBcXF9fX19fX19cXF9fLyAgLyAvICAgICAgXFwgXFxfX19fX19fXFwgXFxfX19fX19fXFwgXFxfX1xcXFwgXFxfX1xcX19fX1xcX1xcICBcXFxuICAgIFxcfF9ffCAgICAgXFx8X19fX19fX3xcXHxfX19fX19ffFxcX19fLyAvICAgICAgICBcXHxfX19fX19ffFxcfF9fX19fX198XFx8X198IFxcfF9ffFxcX19fX19fX19fXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxcfF9fX3wvICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXFx8X19fX19fX19ffFxuXG4gKi9cblxuLypcblx0RVhURVJOQUwgREVQRU5ERU5DSUVTXG4gKi9cbmltcG9ydCBNRDUgZnJvbSAnbWQ1JztcbmltcG9ydCB7IGNvbXBvc2UgfSBmcm9tICdyYW1kYSc7XG5cbi8qXG5cdElOVEVSTkFMIERFUEVOREVOQ0lFU1xuICovXG5cbmltcG9ydCB7IGdldEV4ZWN1dGVkRm4sIGdldFByb3BlcnR5T3JEZWZGbiwgZ2V0QmxlbmRGbiwgZ2V0Q29sb3JGbiB9IGZyb20gJy4uL3V0aWxzL3JlZmVyZW5jZS1oZWxwZXJzJztcbmltcG9ydCBUYW5ncmFtUmVmZXJlbmNlIGZyb20gJy4uL3V0aWxzL3JlZmVyZW5jZSc7XG5cbmNvbnN0IFBSID0gVGFuZ3JhbVJlZmVyZW5jZS5nZXRQb2x5Z29uKG51bGwpOyAvLyBQb2x5Z29uIHJlZmVyZW5jZVxuY29uc3QgUFBSID0gVGFuZ3JhbVJlZmVyZW5jZS5nZXRQb2x5Z29uUGF0dGVybihudWxsKTtcblxuLypcblx0SU5URVJOQUwgUE9MWUdPTlMgRlVOQ1RJT05TXG4gKi9cblxuY29uc3QgY2hlY2tQb2x5Z29uU3ltID0gVGFuZ3JhbVJlZmVyZW5jZS5jaGVja1N5bWJvbGl6ZXIoJ3BvbHlnb24nKTtcbmNvbnN0IGNoZWNrUG9sUGF0dGVyblN5bSA9IFRhbmdyYW1SZWZlcmVuY2UuY2hlY2tTeW1ib2xpemVyKCdwb2x5Z29uLXBhdHRlcm4nKTtcblxuLyoqXG4gKiBGdW5jdGlvbiBmb3IgZ2V0dGluZyB0aGUgY29sb3IgaW4gcmdiYVxuICpcbiAqIEBwYXJhbSAgIHtvYmplY3R9IGMzc3MgY29tcGlsZWQgY2FydG8gY3NzXG4gKiBAcmV0dXJucyB7b2JqZWN0fSB3aXRoIGEgZnVuY3Rpb24gdGhhdCBjb250YWluIHRoZSBjb25kaXRpb25zIHRvIHJldHVybiBhIGNvbG9yIHdpdGggYWxwaGEgY2hhbm5lbFxuICovXG5jb25zdCBnZXRDb2xvciA9IGdldENvbG9yRm4oXG4gIGdldFByb3BlcnR5T3JEZWZGbignZmlsbCcsIFBSKSxcbiAgZ2V0UHJvcGVydHlPckRlZkZuKCdmaWxsLW9wYWNpdHknLCBQUilcbik7XG5cbi8qKlxuICogRnVuY3Rpb24gZm9yIGdldHRpbmcgdGhlIGV4dHJ1ZGUgb2YgYSBwb2x5Z29uXG4gKlxuICogQHBhcmFtICAge29iamVjdH0gYzNzcyBjb21waWxlZCBjYXJ0byBjc3NcbiAqIEByZXR1cm5zIHtvYmplY3R9IHdpdGggYSBmdW5jdGlvbiB0aGF0IGNvbnRhaW4gdGhlIGNvbmRpdGlvbnMgdG8gcmV0dXJuIGFuIGV4dHJ1ZGUgdmFsdWVcbiAqL1xuXG5jb25zdCBnZXRFeHRydWRlID0gZ2V0UHJvcGVydHlPckRlZkZuKCd0Zy1wb2x5Z29uLWV4dHJ1ZGUnKTtcblxuLyoqXG4gKiBGdW5jdGlvbiBmb3IgZ2V0dGluZyB0aGUgdGV4dHVyZSBhcyBzdHJpbmdcbiAqXG4gKiBAcGFyYW0gICB7b2JqZWN0fSBjM3NzIGNvbXBpbGVkIGNhcnRvIGNzc1xuICogQHJldHVybnMge3N0cmluZ30gd2l0aCB0aGUgcGF0aCBvZiB0ZXh0dXJlXG4gKi9cblxuY29uc3QgZ2V0VGV4dHVyZUZpbGUgPSBnZXRFeGVjdXRlZEZuKCdmaWxlJywgUFBSKTtcblxuY29uc3QgZ2V0VGV4dHVyZSA9IGNvbXBvc2UoXG4gIE1ENSxcbiAgZ2V0VGV4dHVyZUZpbGVcbik7XG5cbmNvbnN0IGdldEJsZW5kaW5nID0gZ2V0QmxlbmRGbihQUik7XG5cbi8qKlxuICogQmFzaWMgUG9seWdvblxuICovXG5cbnZhciBQb2x5Z29uID0ge307XG5cbmV4cG9ydCBkZWZhdWx0IFBvbHlnb247XG5cbi8qKlxuICogRnVuY3Rpb24gdG8gZ2V0IHRoZSBkcmF3IG9iamVjdCBvZiBhIHBvbHlnb24uXG4gKlxuICogQHBhcmFtICAge29iamVjdH0gYzNzcyBjb21waWxlZCBjYXJ0byBjc3NcbiAqIEByZXR1cm5zIHtmdW5jdGlvbn0gZnVuY3Rpb24gd2l0aCB0aGUgY29uZGl0aW9ucyB0byByZXR1cm4gYWxwaGEgdmFsdWVcbiAqL1xuUG9seWdvbi5nZXREcmF3ID0gKGMzc3MsIGlkKSA9PiB7XG4gIGxldCBkcmF3ID0ge307XG5cbiAgaWYgKGNoZWNrUG9seWdvblN5bShjM3NzKSkge1xuICAgIGRyYXdbJ3BvbHlnb25zXycgKyBpZF0gPSB7XG4gICAgICBjb2xvcjogZ2V0Q29sb3IoYzNzcylcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIGRyYXc7XG59O1xuXG4vKipcbiAqIEZ1bmN0aW9uIHRvIGdldCB0aGUgc3R5bGUgY29uZmlndXJhdGlvbiBvZiBhIHBvbHlnb24uXG4gKlxuICogQHJldHVybnMgZGVmYXVsdCBzdHlsZSBjb25maWd1cmF0aW9uIGZvciBwb2x5Z29uXG4gKi9cblBvbHlnb24uZ2V0U3R5bGUgPSBmdW5jdGlvbihjM3NzLCBpZCwgb3JkKSB7XG4gIGxldCBzdHlsZSA9IHt9O1xuXG4gIHN0eWxlWydwb2x5Z29uc18nICsgaWRdID0ge1xuICAgIGJhc2U6ICdwb2x5Z29ucycsXG4gICAgYmxlbmQ6IGdldEJsZW5kaW5nKGMzc3MpLFxuICAgIGJsZW5kX29yZGVyOiBvcmQgfHwgMVxuICB9O1xuXG4gIGlmIChjaGVja1BvbFBhdHRlcm5TeW0oYzNzcykpIHtcbiAgICBzdHlsZVsncG9seWdvbnNfJyArIGlkXS5tYXRlcmlhbCA9IHtcbiAgICAgIGRpZmZ1c2U6IHtcbiAgICAgICAgdGV4dHVyZTogZ2V0VGV4dHVyZShjM3NzKSxcbiAgICAgICAgbWFwcGluZzogJ3V2J1xuICAgICAgfVxuICAgIH07XG4gIH1cblxuXHRyZXR1cm4gc3R5bGU7XG59O1xuXG5Qb2x5Z29uLmdldFRleHR1cmVzID0gYzNzcyA9PiB7XG4gIGxldCB0ZXggPSB7fTtcbiAgaWYgKGNoZWNrUG9sUGF0dGVyblN5bShjM3NzKSkge1xuICAgIGxldCB0ZXh0dXJlID0gZ2V0VGV4dHVyZUZpbGUoYzNzcyk7XG5cbiAgICBpZiAodGV4dHVyZSkge1xuICAgICAgdGV4W01ENSh0ZXh0dXJlKV0gPSB7dXJsOiB0ZXh0dXJlfTtcbiAgICB9XG5cbiAgfVxuICByZXR1cm4gdGV4O1xufTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBzcmMvYmFzaWMvcG9seWdvbnMuanMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFlQTtBQUNBOzs7QUFNQTtBQUNBO0FBQUE7QUFDQTs7Ozs7QUFOQTs7OztBQU9BO0FBekJBOzs7Ozs7Ozs7Ozs7QUFZQTs7O0FBY0E7QUFDQTtBQUNBOzs7O0FBSUE7QUFDQTtBQUNBO0FBQ0E7Ozs7OztBQU1BO0FBQ0E7QUFJQTs7Ozs7OztBQU9BO0FBQ0E7QUFDQTs7Ozs7OztBQU9BO0FBQ0E7QUFDQTtBQUNBO0FBSUE7QUFDQTtBQUNBOzs7O0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7OztBQU1BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQURBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7OztBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBSEE7QUFDQTtBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFGQTtBQURBO0FBTUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 75 */
/* no static exports found */
/* all exports used */
/*!***************************!*\
  !*** ./src/basic/text.js ***!
  \***************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _referenceHelpers = __webpack_require__(/*! ../utils/reference-helpers */ 18);\n\nvar _reference = __webpack_require__(/*! ../utils/reference */ 9);\n\nvar _reference2 = _interopRequireDefault(_reference);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n   _________  _______      ___    ___ _________\n  |\\___   ___\\\\  ___ \\    |\\  \\  /  /|\\___   ___\\\n  \\|___ \\  \\_\\ \\   __/|   \\ \\  \\/  / ||___ \\  \\_|\n      \\ \\  \\ \\ \\  \\_|/__  \\ \\    / /     \\ \\  \\\n        \\ \\  \\ \\ \\  \\_|\\ \\  /     \\/       \\ \\  \\\n        \\ \\__\\ \\ \\_______\\/  /\\   \\         \\ \\__\\\n          \\|__|  \\|_______/__/ /\\ __\\        \\|__|\n                          |__|/ \\|__|\n\n */\n\n/*\n  EXTERNAL DEPENDENCIES\n*/\n\n/*\n  INTERNAL DEPENDENCIES\n*/\n\nvar TR = _reference2.default.getText(null);\n\n/*\n  INTERNAL POLYGONS FUNCTIONS\n*/\n\nvar checkTextSym = _reference2.default.checkSymbolizer('text');\n\nvar getTextName = (0, _referenceHelpers.getPropertyFnSafe)('name', TR);\n\nvar getSize = (0, _referenceHelpers.getPropertyFnSafe)('size', TR);\n\nvar getColor = (0, _referenceHelpers.getColorFn)((0, _referenceHelpers.getPropertyFnSafe)('fill', TR), (0, _referenceHelpers.getPropertyOrDefFn)('opacity', TR));\n\nvar TextPoint = {};\n\nexports.default = TextPoint;\n\n\nTextPoint.getDraw = function (c3ss, id) {\n  var draw = {};\n\n  if (checkTextSym(c3ss)) {\n    draw['text_' + id] = {\n      collide: false,\n      color: 'transparent',\n      text: {\n        text_source: getTextName(c3ss),\n        font: {\n          size: getSize(c3ss),\n          fill: getColor(c3ss)\n        },\n        optional: false\n      }\n    };\n  }\n\n  return draw;\n};\n\nTextPoint.getStyle = function (c3ss, id, ord) {\n  var style = {};\n\n  style['text_' + id] = {\n    base: 'points',\n    blend: 'overlay',\n    blend_order: ord || 1\n  };\n\n  return style;\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzUuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL2Jhc2ljL3RleHQuanM/YTkwNyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAgIF9fX19fX19fXyAgX19fX19fXyAgICAgIF9fXyAgICBfX18gX19fX19fX19fXG4gIHxcXF9fXyAgIF9fX1xcXFwgIF9fXyBcXCAgICB8XFwgIFxcICAvICAvfFxcX19fICAgX19fXFxcbiAgXFx8X19fIFxcICBcXF9cXCBcXCAgIF9fL3wgICBcXCBcXCAgXFwvICAvIHx8X19fIFxcICBcXF98XG4gICAgICBcXCBcXCAgXFwgXFwgXFwgIFxcX3wvX18gIFxcIFxcICAgIC8gLyAgICAgXFwgXFwgIFxcXG4gICAgICAgIFxcIFxcICBcXCBcXCBcXCAgXFxffFxcIFxcICAvICAgICBcXC8gICAgICAgXFwgXFwgIFxcXG4gICAgICAgIFxcIFxcX19cXCBcXCBcXF9fX19fX19cXC8gIC9cXCAgIFxcICAgICAgICAgXFwgXFxfX1xcXG4gICAgICAgICAgXFx8X198ICBcXHxfX19fX19fL19fLyAvXFwgX19cXCAgICAgICAgXFx8X198XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHxfX3wvIFxcfF9ffFxuXG4gKi9cblxuLypcbiAgRVhURVJOQUwgREVQRU5ERU5DSUVTXG4qL1xuXG4vKlxuICBJTlRFUk5BTCBERVBFTkRFTkNJRVNcbiovXG5cbmltcG9ydCB7IGdldFByb3BlcnR5Rm5TYWZlLCBnZXRQcm9wZXJ0eU9yRGVmRm4sIGdldENvbG9yRm4gfSBmcm9tICcuLi91dGlscy9yZWZlcmVuY2UtaGVscGVycyc7XG5pbXBvcnQgVGFuZ3JhbVJlZmVyZW5jZSBmcm9tICcuLi91dGlscy9yZWZlcmVuY2UnO1xuXG5jb25zdCBUUiA9IFRhbmdyYW1SZWZlcmVuY2UuZ2V0VGV4dChudWxsKTtcblxuLypcbiAgSU5URVJOQUwgUE9MWUdPTlMgRlVOQ1RJT05TXG4qL1xuXG5jb25zdCBjaGVja1RleHRTeW0gPSBUYW5ncmFtUmVmZXJlbmNlLmNoZWNrU3ltYm9saXplcigndGV4dCcpO1xuXG5jb25zdCBnZXRUZXh0TmFtZSA9IGdldFByb3BlcnR5Rm5TYWZlKCduYW1lJywgVFIpO1xuXG5jb25zdCBnZXRTaXplID0gZ2V0UHJvcGVydHlGblNhZmUoJ3NpemUnLCBUUik7XG5cbmNvbnN0IGdldENvbG9yID0gZ2V0Q29sb3JGbihcbiAgZ2V0UHJvcGVydHlGblNhZmUoJ2ZpbGwnLCBUUiksXG4gIGdldFByb3BlcnR5T3JEZWZGbignb3BhY2l0eScsIFRSKVxuKTtcblxudmFyIFRleHRQb2ludCA9IHt9O1xuXG5leHBvcnQgZGVmYXVsdCBUZXh0UG9pbnQ7XG5cblRleHRQb2ludC5nZXREcmF3ID0gKGMzc3MsIGlkKSA9PiB7XG4gIGxldCBkcmF3ID0ge307XG5cbiAgaWYgKGNoZWNrVGV4dFN5bShjM3NzKSkge1xuICAgIGRyYXdbJ3RleHRfJyArIGlkXSA9IHtcbiAgICAgIGNvbGxpZGU6IGZhbHNlLFxuICAgICAgY29sb3I6ICd0cmFuc3BhcmVudCcsXG4gICAgICB0ZXh0OiB7XG4gICAgICAgIHRleHRfc291cmNlOiBnZXRUZXh0TmFtZShjM3NzKSxcbiAgICAgICAgZm9udDoge1xuICAgICAgICAgIHNpemU6IGdldFNpemUoYzNzcyksXG4gICAgICAgICAgZmlsbDogZ2V0Q29sb3IoYzNzcylcbiAgICAgICAgfSxcbiAgICAgICAgb3B0aW9uYWw6IGZhbHNlXG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBkcmF3O1xufTtcblxuXG5UZXh0UG9pbnQuZ2V0U3R5bGUgPSAoYzNzcywgaWQsIG9yZCkgPT4ge1xuICBsZXQgc3R5bGUgPSB7fTtcblxuICBzdHlsZVsndGV4dF8nICsgaWRdID0ge1xuICAgIGJhc2U6ICdwb2ludHMnLFxuICAgIGJsZW5kOiAnb3ZlcmxheScsXG4gICAgYmxlbmRfb3JkZXI6IG9yZCB8fCAxXG4gIH07XG5cbiAgcmV0dXJuIHN0eWxlO1xufTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBzcmMvYmFzaWMvdGV4dC5qcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBb0JBO0FBQ0E7QUFBQTtBQUNBOzs7OztBQXRCQTs7Ozs7Ozs7Ozs7O0FBWUE7Ozs7QUFJQTs7OztBQU9BO0FBQ0E7QUFDQTs7OztBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRkE7QUFJQTtBQU5BO0FBSEE7QUFZQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFIQTtBQUNBO0FBS0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 76 */
/* no static exports found */
/* all exports used */
/*!***********************!*\
  !*** ./src/module.js ***!
  \***********************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _carto = __webpack_require__(/*! ./carto */ 70);\n\nvar _carto2 = _interopRequireDefault(_carto);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nmodule.exports = {\n  carto2Draw: _carto2.default.extractFeatures\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzYuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL21vZHVsZS5qcz80NzQyIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBDQ1NTIGZyb20gJy4vY2FydG8nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgY2FydG8yRHJhdzogQ0NTUy5leHRyYWN0RmVhdHVyZXMsXG59O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIHNyYy9tb2R1bGUuanMiXSwibWFwcGluZ3MiOiI7O0FBQUE7QUFDQTs7Ozs7QUFDQTtBQUNBO0FBREEiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 77 */
/* no static exports found */
/* all exports used */
/*!*****************************!*\
  !*** ./src/style/colors.js ***!
  \*****************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _utils = __webpack_require__(/*! ../utils/utils */ 38);\n\nvar _utils2 = _interopRequireDefault(_utils);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar Colors = {};\n\nexports.default = Colors;\n\n\nvar C = Colors;\n\nColors._isHex = _utils2.default.functionString('function isHex (c) {\\n\\t\\treturn c.indexOf(\\'#\\') >= 0;\\n\\t}');\n\nColors._isRGB = _utils2.default.functionString('function (c) {\\n\\t\\treturn c.indexOf(\\'rgb\\') >= 0;\\n\\t}');\n\nColors._isRGBA = _utils2.default.functionString('function (c) {\\n\\t\\treturn c.indexOf(\\'rgba\\') >= 0;\\n\\t}');\n\nColors.toSixHex = _utils2.default.functionString('function (c) {\\n\\t\\t\\tif (c.length === 7) {\\n\\t\\t\\t\\treturn c;\\n\\t\\t\\t}\\n\\t\\t\\telse {\\n\\t\\t\\t\\tvar r = c[1],\\n\\t\\t\\t\\t\\tg = c[2],\\n\\t\\t\\t\\t\\tb = c[3];\\n\\n\\t\\t\\t\\treturn \\'#\\' + r + r + g + g + b + b;\\n\\t\\t\\t}\\n\\t\\t}');\n\nColors.hexToInt = _utils2.default.functionString('function (hex) {\\n\\t\\treturn parseInt(\\'0x\\' + hex);\\n\\t}');\n\nColors.toRGB = _utils2.default.functionString('function (c) {\\n\\t\\tvar r = ' + C.hexToInt + '(c.substr(1, 2)) + \\', \\',\\n\\t\\t\\tg = ' + C.hexToInt + '(c.substr(3, 2)) + \\', \\',\\n\\t\\t\\tb = ' + C.hexToInt + '(c.substr(5, 2));\\n\\n\\t\\treturn \\'rgb(\\' + r + g + b + \\')\\';\\n\\t}');\n\nColors.toRGBA = _utils2.default.functionString('function (rgb, alpha) {\\n\\t\\treturn rgb.replace(\\'rgb\\', \\'rgba\\').replace(\\')\\', \\', \\' + alpha + \\')\\');\\n\\t}');\n\nColors.getAlphaColorFn = _utils2.default.functionString('function (color, opacity) {\\n\\t\\t// TODO: review this fallback to \\'black\\' color.\\n\\t\\tcolor = color || \\'#000\\';\\n    var toRGBA = ' + C.toRGBA + ';\\n\\t\\tif ( ' + C._isRGBA + '(color) ) {\\n\\t\\t\\treturn color;\\n\\t\\t}\\n\\t\\telse {\\n\\t\\t\\tif ( ' + C._isHex + '(color) ) {\\n\\t\\t\\t\\treturn toRGBA( ' + C.toRGB + '( ' + C.toSixHex + '(color) ), opacity );\\n\\t\\t\\t}\\n\\t\\t\\telse if ( ' + C._isRGB + '(color) ) {\\n\\t\\t\\t\\treturn toRGBA(color);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}');\n\nColors.getAlphaColor = function (color, opacity) {\n\tif (color && typeof opacity !== 'number') {\n\t\treturn _utils2.default.functionString('function () {\\n          var op = ' + opacity + '();\\n          return ' + C.getAlphaColorFn + '(' + color + '(), typeof op === \"number\" ? op : 1);\\n      }');\n\t}\n\n\treturn color;\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzcuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL3N0eWxlL2NvbG9ycy5qcz8wYTg2Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBVdGlscyBmcm9tICcuLi91dGlscy91dGlscyc7XG52YXIgQ29sb3JzID0ge307XG5cbmV4cG9ydCBkZWZhdWx0IENvbG9ycztcblxubGV0IEMgPSBDb2xvcnM7XG5cbkNvbG9ycy5faXNIZXggPSBVdGlscy5mdW5jdGlvblN0cmluZyhcbiAgYGZ1bmN0aW9uIGlzSGV4IChjKSB7XG5cdFx0cmV0dXJuIGMuaW5kZXhPZignIycpID49IDA7XG5cdH1gXG4pO1xuXG5Db2xvcnMuX2lzUkdCID0gVXRpbHMuZnVuY3Rpb25TdHJpbmcoXG4gIGBmdW5jdGlvbiAoYykge1xuXHRcdHJldHVybiBjLmluZGV4T2YoJ3JnYicpID49IDA7XG5cdH1gXG4pO1xuXG5Db2xvcnMuX2lzUkdCQSA9IFV0aWxzLmZ1bmN0aW9uU3RyaW5nKFxuICBgZnVuY3Rpb24gKGMpIHtcblx0XHRyZXR1cm4gYy5pbmRleE9mKCdyZ2JhJykgPj0gMDtcblx0fWBcbik7XG5cbkNvbG9ycy50b1NpeEhleCA9IFV0aWxzLmZ1bmN0aW9uU3RyaW5nKFxuICBgZnVuY3Rpb24gKGMpIHtcblx0XHRcdGlmIChjLmxlbmd0aCA9PT0gNykge1xuXHRcdFx0XHRyZXR1cm4gYztcblx0XHRcdH1cblx0XHRcdGVsc2Uge1xuXHRcdFx0XHR2YXIgciA9IGNbMV0sXG5cdFx0XHRcdFx0ZyA9IGNbMl0sXG5cdFx0XHRcdFx0YiA9IGNbM107XG5cblx0XHRcdFx0cmV0dXJuICcjJyArIHIgKyByICsgZyArIGcgKyBiICsgYjtcblx0XHRcdH1cblx0XHR9YFxuKTtcblxuQ29sb3JzLmhleFRvSW50ID0gVXRpbHMuZnVuY3Rpb25TdHJpbmcoXG4gIGBmdW5jdGlvbiAoaGV4KSB7XG5cdFx0cmV0dXJuIHBhcnNlSW50KCcweCcgKyBoZXgpO1xuXHR9YFxuKTtcblxuQ29sb3JzLnRvUkdCID0gVXRpbHMuZnVuY3Rpb25TdHJpbmcoXG4gIGBmdW5jdGlvbiAoYykge1xuXHRcdHZhciByID0gJHtDLmhleFRvSW50fShjLnN1YnN0cigxLCAyKSkgKyAnLCAnLFxuXHRcdFx0ZyA9ICR7Qy5oZXhUb0ludH0oYy5zdWJzdHIoMywgMikpICsgJywgJyxcblx0XHRcdGIgPSAke0MuaGV4VG9JbnR9KGMuc3Vic3RyKDUsIDIpKTtcblxuXHRcdHJldHVybiAncmdiKCcgKyByICsgZyArIGIgKyAnKSc7XG5cdH1gXG4pO1xuXG5Db2xvcnMudG9SR0JBID0gVXRpbHMuZnVuY3Rpb25TdHJpbmcoXG4gIGBmdW5jdGlvbiAocmdiLCBhbHBoYSkge1xuXHRcdHJldHVybiByZ2IucmVwbGFjZSgncmdiJywgJ3JnYmEnKS5yZXBsYWNlKCcpJywgJywgJyArIGFscGhhICsgJyknKTtcblx0fWBcbik7XG5cbkNvbG9ycy5nZXRBbHBoYUNvbG9yRm4gPSBVdGlscy5mdW5jdGlvblN0cmluZyhcbiAgYGZ1bmN0aW9uIChjb2xvciwgb3BhY2l0eSkge1xuXHRcdC8vIFRPRE86IHJldmlldyB0aGlzIGZhbGxiYWNrIHRvICdibGFjaycgY29sb3IuXG5cdFx0Y29sb3IgPSBjb2xvciB8fCAnIzAwMCc7XG4gICAgdmFyIHRvUkdCQSA9ICR7Qy50b1JHQkF9O1xuXHRcdGlmICggJHtDLl9pc1JHQkF9KGNvbG9yKSApIHtcblx0XHRcdHJldHVybiBjb2xvcjtcblx0XHR9XG5cdFx0ZWxzZSB7XG5cdFx0XHRpZiAoICR7Qy5faXNIZXh9KGNvbG9yKSApIHtcblx0XHRcdFx0cmV0dXJuIHRvUkdCQSggJHtDLnRvUkdCfSggJHtDLnRvU2l4SGV4fShjb2xvcikgKSwgb3BhY2l0eSApO1xuXHRcdFx0fVxuXHRcdFx0ZWxzZSBpZiAoICR7Qy5faXNSR0J9KGNvbG9yKSApIHtcblx0XHRcdFx0cmV0dXJuIHRvUkdCQShjb2xvcik7XG5cdFx0XHR9XG5cdFx0fVxuXHR9YFxuKTtcblxuQ29sb3JzLmdldEFscGhhQ29sb3IgPSBmdW5jdGlvbiAoY29sb3IsIG9wYWNpdHkpIHtcbiAgaWYgKGNvbG9yICYmIHR5cGVvZiBvcGFjaXR5ICE9PSAnbnVtYmVyJykge1xuICAgIHJldHVybiBVdGlscy5mdW5jdGlvblN0cmluZyhcbiAgICAgIGBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdmFyIG9wID0gJHtvcGFjaXR5fSgpO1xuICAgICAgICAgIHJldHVybiAke0MuZ2V0QWxwaGFDb2xvckZufSgke2NvbG9yfSgpLCB0eXBlb2Ygb3AgPT09IFwibnVtYmVyXCIgPyBvcCA6IDEpO1xuICAgICAgfWBcbiAgICApO1xuICB9XG5cbiAgcmV0dXJuIGNvbG9yO1xufTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBzcmMvc3R5bGUvY29sb3JzLmpzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTtBQUNBOzs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUtBO0FBQ0E7QUFLQTtBQUNBO0FBS0E7QUFDQTtBQWNBO0FBQ0E7QUFLQTtBQUNBO0FBU0E7QUFDQTtBQUtBO0FBQ0E7QUFrQkE7QUFDQTtBQUNBO0FBTUE7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 78 */
/* no static exports found */
/* all exports used */
/*!***************************!*\
  !*** ./src/utils/geom.js ***!
  \***************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar Geom = {};\n\nexports.default = Geom;\n\n\nGeom.px2Meters = function (fn) {\n  return ('function () {\\n  \\t\\tvar val = (' + fn + '());\\n  \\t\\treturn val * $meters_per_pixel;\\n  \\t}').replace(/(\\t)/g, '');\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzguanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL3V0aWxzL2dlb20uanM/YmFjMyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgR2VvbSA9IHt9O1xuXG5leHBvcnQgZGVmYXVsdCBHZW9tO1xuXG5HZW9tLnB4Mk1ldGVycyA9IGZ1bmN0aW9uIChmbikge1xuICByZXR1cm4gYGZ1bmN0aW9uICgpIHtcbiAgXHRcdHZhciB2YWwgPSAoJHtmbn0oKSk7XG4gIFx0XHRyZXR1cm4gdmFsICogJG1ldGVyc19wZXJfcGl4ZWw7XG4gIFx0fWAucmVwbGFjZSgvKFxcdCkvZywgJycpO1xufTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBzcmMvdXRpbHMvZ2VvbS5qcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUlBIiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 79 */
/* no static exports found */
/* all exports used */
/*!***********************************************!*\
  !*** ./~/babel-runtime/core-js/array/from.js ***!
  \***********************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = { \"default\": __webpack_require__(/*! core-js/library/fn/array/from */ 113), __esModule: true };//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzkuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9hcnJheS9mcm9tLmpzP2VmYzIiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSB7IFwiZGVmYXVsdFwiOiByZXF1aXJlKFwiY29yZS1qcy9saWJyYXJ5L2ZuL2FycmF5L2Zyb21cIiksIF9fZXNNb2R1bGU6IHRydWUgfTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vYmFiZWwtcnVudGltZS9jb3JlLWpzL2FycmF5L2Zyb20uanNcbi8vIG1vZHVsZSBpZCA9IDc5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUEiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 80 */
/* no static exports found */
/* all exports used */
/*!******************************************************!*\
  !*** ./~/babel-runtime/helpers/toConsumableArray.js ***!
  \******************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nexports.__esModule = true;\n\nvar _from = __webpack_require__(/*! ../core-js/array/from */ 79);\n\nvar _from2 = _interopRequireDefault(_from);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = function (arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  } else {\n    return (0, _from2.default)(arr);\n  }\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODAuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2JhYmVsLXJ1bnRpbWUvaGVscGVycy90b0NvbnN1bWFibGVBcnJheS5qcz8xODI1Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX2Zyb20gPSByZXF1aXJlKFwiLi4vY29yZS1qcy9hcnJheS9mcm9tXCIpO1xuXG52YXIgX2Zyb20yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZnJvbSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGZ1bmN0aW9uIChhcnIpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkge1xuICAgIGZvciAodmFyIGkgPSAwLCBhcnIyID0gQXJyYXkoYXJyLmxlbmd0aCk7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHtcbiAgICAgIGFycjJbaV0gPSBhcnJbaV07XG4gICAgfVxuXG4gICAgcmV0dXJuIGFycjI7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuICgwLCBfZnJvbTIuZGVmYXVsdCkoYXJyKTtcbiAgfVxufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vYmFiZWwtcnVudGltZS9oZWxwZXJzL3RvQ29uc3VtYWJsZUFycmF5LmpzXG4vLyBtb2R1bGUgaWQgPSA4MFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 81 */
/* no static exports found */
/* all exports used */
/*!****************************************!*\
  !*** ./~/carto/lib/carto/functions.js ***!
  \****************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("(function (tree) {\n\ntree.functions = {\n    rgb: function (r, g, b) {\n        return this.rgba(r, g, b, 1.0);\n    },\n    rgba: function (r, g, b, a) {\n        var rgb = [r, g, b].map(function (c) { return number(c); });\n        a = number(a);\n        if (rgb.some(isNaN) || isNaN(a)) return null;\n        return new tree.Color(rgb, a);\n    },\n    // Only require val\n    stop: function (val) {\n        var color, mode;\n        if (arguments.length > 1) color = arguments[1];\n        if (arguments.length > 2) mode = arguments[2];\n\n        return {\n            is: 'tag',\n            val: val,\n            color: color,\n            mode: mode,\n            toString: function(env) {\n                return '\\n\\t<stop value=\"' + val.ev(env) + '\"' +\n                    (color ? ' color=\"' + color.ev(env) + '\" ' : '') +\n                    (mode ? ' mode=\"' + mode.ev(env) + '\" ' : '') +\n                    '/>';\n            }\n        };\n    },\n    hsl: function (h, s, l) {\n        return this.hsla(h, s, l, 1.0);\n    },\n    hsla: function (h, s, l, a) {\n        h = (number(h) % 360) / 360;\n        s = number(s); l = number(l); a = number(a);\n        if ([h, s, l, a].some(isNaN)) return null;\n\n        var m2 = l <= 0.5 ? l * (s + 1) : l + s - l * s,\n            m1 = l * 2 - m2;\n\n        return this.rgba(hue(h + 1/3) * 255,\n                         hue(h)       * 255,\n                         hue(h - 1/3) * 255,\n                         a);\n\n        function hue(h) {\n            h = h < 0 ? h + 1 : (h > 1 ? h - 1 : h);\n            if      (h * 6 < 1) return m1 + (m2 - m1) * h * 6;\n            else if (h * 2 < 1) return m2;\n            else if (h * 3 < 2) return m1 + (m2 - m1) * (2/3 - h) * 6;\n            else                return m1;\n        }\n    },\n    hue: function (color) {\n        if (!('toHSL' in color)) return null;\n        return new tree.Dimension(Math.round(color.toHSL().h));\n    },\n    saturation: function (color) {\n        if (!('toHSL' in color)) return null;\n        return new tree.Dimension(Math.round(color.toHSL().s * 100), '%');\n    },\n    lightness: function (color) {\n        if (!('toHSL' in color)) return null;\n        return new tree.Dimension(Math.round(color.toHSL().l * 100), '%');\n    },\n    alpha: function (color) {\n        if (!('toHSL' in color)) return null;\n        return new tree.Dimension(color.toHSL().a);\n    },\n    saturate: function (color, amount) {\n        if (!('toHSL' in color)) return null;\n        var hsl = color.toHSL();\n\n        hsl.s += amount.value / 100;\n        hsl.s = clamp(hsl.s);\n        return hsla(hsl);\n    },\n    desaturate: function (color, amount) {\n        if (!('toHSL' in color)) return null;\n        var hsl = color.toHSL();\n\n        hsl.s -= amount.value / 100;\n        hsl.s = clamp(hsl.s);\n        return hsla(hsl);\n    },\n    lighten: function (color, amount) {\n        if (!('toHSL' in color)) return null;\n        var hsl = color.toHSL();\n\n        hsl.l += amount.value / 100;\n        hsl.l = clamp(hsl.l);\n        return hsla(hsl);\n    },\n    darken: function (color, amount) {\n        if (!('toHSL' in color)) return null;\n        var hsl = color.toHSL();\n\n        hsl.l -= amount.value / 100;\n        hsl.l = clamp(hsl.l);\n        return hsla(hsl);\n    },\n    fadein: function (color, amount) {\n        if (!('toHSL' in color)) return null;\n        var hsl = color.toHSL();\n\n        hsl.a += amount.value / 100;\n        hsl.a = clamp(hsl.a);\n        return hsla(hsl);\n    },\n    fadeout: function (color, amount) {\n        if (!('toHSL' in color)) return null;\n        var hsl = color.toHSL();\n\n        hsl.a -= amount.value / 100;\n        hsl.a = clamp(hsl.a);\n        return hsla(hsl);\n    },\n    spin: function (color, amount) {\n        if (!('toHSL' in color)) return null;\n        var hsl = color.toHSL();\n        var hue = (hsl.h + amount.value) % 360;\n\n        hsl.h = hue < 0 ? 360 + hue : hue;\n\n        return hsla(hsl);\n    },\n    replace: function (entity, a, b) {\n        if (entity.is === 'field') {\n            return entity.toString + '.replace(' + a.toString() + ', ' + b.toString() + ')';\n        } else {\n            return entity.replace(a, b);\n        }\n    },\n    //\n    // Copyright (c) 2006-2009 Hampton Catlin, Nathan Weizenbaum, and Chris Eppstein\n    // http://sass-lang.com\n    //\n    mix: function (color1, color2, weight) {\n        var p = weight.value / 100.0;\n        var w = p * 2 - 1;\n        var a = color1.toHSL().a - color2.toHSL().a;\n\n        var w1 = (((w * a == -1) ? w : (w + a) / (1 + w * a)) + 1) / 2.0;\n        var w2 = 1 - w1;\n\n        var rgb = [color1.rgb[0] * w1 + color2.rgb[0] * w2,\n                   color1.rgb[1] * w1 + color2.rgb[1] * w2,\n                   color1.rgb[2] * w1 + color2.rgb[2] * w2];\n\n        var alpha = color1.alpha * p + color2.alpha * (1 - p);\n\n        return new tree.Color(rgb, alpha);\n    },\n    greyscale: function (color) {\n        return this.desaturate(color, new tree.Dimension(100));\n    },\n    '%': function (quoted /* arg, arg, ...*/) {\n        var args = Array.prototype.slice.call(arguments, 1),\n            str = quoted.value;\n\n        for (var i = 0; i < args.length; i++) {\n            str = str.replace(/%s/,    args[i].value)\n                     .replace(/%[da]/, args[i].toString());\n        }\n        str = str.replace(/%%/g, '%');\n        return new tree.Quoted(str);\n    }\n};\n\nvar image_filter_functors = [\n    'emboss', 'blur', 'gray', 'sobel', 'edge-detect',\n    'x-gradient', 'y-gradient', 'sharpen'];\n\nfor (var i = 0; i < image_filter_functors.length; i++) {\n    var f = image_filter_functors[i];\n    tree.functions[f] = (function(f) {\n        return function() {\n            return new tree.ImageFilter(f);\n        };\n    })(f);\n}\n\ntree.functions['agg-stack-blur'] = function(x, y) {\n    return new tree.ImageFilter('agg-stack-blur', [x, y]);\n};\n\ntree.functions['scale-hsla'] = function(h0,h1,s0,s1,l0,l1,a0,a1) {\n    return new tree.ImageFilter('scale-hsla', [h0,h1,s0,s1,l0,l1,a0,a1]);\n};\n\nfunction hsla(h) {\n    return tree.functions.hsla(h.h, h.s, h.l, h.a);\n}\n\nfunction number(n) {\n    if (n instanceof tree.Dimension) {\n        return parseFloat(n.unit == '%' ? n.value / 100 : n.value);\n    } else if (typeof(n) === 'number') {\n        return n;\n    } else {\n        return NaN;\n    }\n}\n\nfunction clamp(val) {\n    return Math.min(1, Math.max(0, val));\n}\n\n})(__webpack_require__(/*! ./tree */ 0));\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODEuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NhcnRvL2xpYi9jYXJ0by9mdW5jdGlvbnMuanM/NDE3MyJdLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gKHRyZWUpIHtcblxudHJlZS5mdW5jdGlvbnMgPSB7XG4gICAgcmdiOiBmdW5jdGlvbiAociwgZywgYikge1xuICAgICAgICByZXR1cm4gdGhpcy5yZ2JhKHIsIGcsIGIsIDEuMCk7XG4gICAgfSxcbiAgICByZ2JhOiBmdW5jdGlvbiAociwgZywgYiwgYSkge1xuICAgICAgICB2YXIgcmdiID0gW3IsIGcsIGJdLm1hcChmdW5jdGlvbiAoYykgeyByZXR1cm4gbnVtYmVyKGMpOyB9KTtcbiAgICAgICAgYSA9IG51bWJlcihhKTtcbiAgICAgICAgaWYgKHJnYi5zb21lKGlzTmFOKSB8fCBpc05hTihhKSkgcmV0dXJuIG51bGw7XG4gICAgICAgIHJldHVybiBuZXcgdHJlZS5Db2xvcihyZ2IsIGEpO1xuICAgIH0sXG4gICAgLy8gT25seSByZXF1aXJlIHZhbFxuICAgIHN0b3A6IGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgICAgdmFyIGNvbG9yLCBtb2RlO1xuICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIGNvbG9yID0gYXJndW1lbnRzWzFdO1xuICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDIpIG1vZGUgPSBhcmd1bWVudHNbMl07XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGlzOiAndGFnJyxcbiAgICAgICAgICAgIHZhbDogdmFsLFxuICAgICAgICAgICAgY29sb3I6IGNvbG9yLFxuICAgICAgICAgICAgbW9kZTogbW9kZSxcbiAgICAgICAgICAgIHRvU3RyaW5nOiBmdW5jdGlvbihlbnYpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ1xcblxcdDxzdG9wIHZhbHVlPVwiJyArIHZhbC5ldihlbnYpICsgJ1wiJyArXG4gICAgICAgICAgICAgICAgICAgIChjb2xvciA/ICcgY29sb3I9XCInICsgY29sb3IuZXYoZW52KSArICdcIiAnIDogJycpICtcbiAgICAgICAgICAgICAgICAgICAgKG1vZGUgPyAnIG1vZGU9XCInICsgbW9kZS5ldihlbnYpICsgJ1wiICcgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgICAnLz4nO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH0sXG4gICAgaHNsOiBmdW5jdGlvbiAoaCwgcywgbCkge1xuICAgICAgICByZXR1cm4gdGhpcy5oc2xhKGgsIHMsIGwsIDEuMCk7XG4gICAgfSxcbiAgICBoc2xhOiBmdW5jdGlvbiAoaCwgcywgbCwgYSkge1xuICAgICAgICBoID0gKG51bWJlcihoKSAlIDM2MCkgLyAzNjA7XG4gICAgICAgIHMgPSBudW1iZXIocyk7IGwgPSBudW1iZXIobCk7IGEgPSBudW1iZXIoYSk7XG4gICAgICAgIGlmIChbaCwgcywgbCwgYV0uc29tZShpc05hTikpIHJldHVybiBudWxsO1xuXG4gICAgICAgIHZhciBtMiA9IGwgPD0gMC41ID8gbCAqIChzICsgMSkgOiBsICsgcyAtIGwgKiBzLFxuICAgICAgICAgICAgbTEgPSBsICogMiAtIG0yO1xuXG4gICAgICAgIHJldHVybiB0aGlzLnJnYmEoaHVlKGggKyAxLzMpICogMjU1LFxuICAgICAgICAgICAgICAgICAgICAgICAgIGh1ZShoKSAgICAgICAqIDI1NSxcbiAgICAgICAgICAgICAgICAgICAgICAgICBodWUoaCAtIDEvMykgKiAyNTUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgYSk7XG5cbiAgICAgICAgZnVuY3Rpb24gaHVlKGgpIHtcbiAgICAgICAgICAgIGggPSBoIDwgMCA/IGggKyAxIDogKGggPiAxID8gaCAtIDEgOiBoKTtcbiAgICAgICAgICAgIGlmICAgICAgKGggKiA2IDwgMSkgcmV0dXJuIG0xICsgKG0yIC0gbTEpICogaCAqIDY7XG4gICAgICAgICAgICBlbHNlIGlmIChoICogMiA8IDEpIHJldHVybiBtMjtcbiAgICAgICAgICAgIGVsc2UgaWYgKGggKiAzIDwgMikgcmV0dXJuIG0xICsgKG0yIC0gbTEpICogKDIvMyAtIGgpICogNjtcbiAgICAgICAgICAgIGVsc2UgICAgICAgICAgICAgICAgcmV0dXJuIG0xO1xuICAgICAgICB9XG4gICAgfSxcbiAgICBodWU6IGZ1bmN0aW9uIChjb2xvcikge1xuICAgICAgICBpZiAoISgndG9IU0wnIGluIGNvbG9yKSkgcmV0dXJuIG51bGw7XG4gICAgICAgIHJldHVybiBuZXcgdHJlZS5EaW1lbnNpb24oTWF0aC5yb3VuZChjb2xvci50b0hTTCgpLmgpKTtcbiAgICB9LFxuICAgIHNhdHVyYXRpb246IGZ1bmN0aW9uIChjb2xvcikge1xuICAgICAgICBpZiAoISgndG9IU0wnIGluIGNvbG9yKSkgcmV0dXJuIG51bGw7XG4gICAgICAgIHJldHVybiBuZXcgdHJlZS5EaW1lbnNpb24oTWF0aC5yb3VuZChjb2xvci50b0hTTCgpLnMgKiAxMDApLCAnJScpO1xuICAgIH0sXG4gICAgbGlnaHRuZXNzOiBmdW5jdGlvbiAoY29sb3IpIHtcbiAgICAgICAgaWYgKCEoJ3RvSFNMJyBpbiBjb2xvcikpIHJldHVybiBudWxsO1xuICAgICAgICByZXR1cm4gbmV3IHRyZWUuRGltZW5zaW9uKE1hdGgucm91bmQoY29sb3IudG9IU0woKS5sICogMTAwKSwgJyUnKTtcbiAgICB9LFxuICAgIGFscGhhOiBmdW5jdGlvbiAoY29sb3IpIHtcbiAgICAgICAgaWYgKCEoJ3RvSFNMJyBpbiBjb2xvcikpIHJldHVybiBudWxsO1xuICAgICAgICByZXR1cm4gbmV3IHRyZWUuRGltZW5zaW9uKGNvbG9yLnRvSFNMKCkuYSk7XG4gICAgfSxcbiAgICBzYXR1cmF0ZTogZnVuY3Rpb24gKGNvbG9yLCBhbW91bnQpIHtcbiAgICAgICAgaWYgKCEoJ3RvSFNMJyBpbiBjb2xvcikpIHJldHVybiBudWxsO1xuICAgICAgICB2YXIgaHNsID0gY29sb3IudG9IU0woKTtcblxuICAgICAgICBoc2wucyArPSBhbW91bnQudmFsdWUgLyAxMDA7XG4gICAgICAgIGhzbC5zID0gY2xhbXAoaHNsLnMpO1xuICAgICAgICByZXR1cm4gaHNsYShoc2wpO1xuICAgIH0sXG4gICAgZGVzYXR1cmF0ZTogZnVuY3Rpb24gKGNvbG9yLCBhbW91bnQpIHtcbiAgICAgICAgaWYgKCEoJ3RvSFNMJyBpbiBjb2xvcikpIHJldHVybiBudWxsO1xuICAgICAgICB2YXIgaHNsID0gY29sb3IudG9IU0woKTtcblxuICAgICAgICBoc2wucyAtPSBhbW91bnQudmFsdWUgLyAxMDA7XG4gICAgICAgIGhzbC5zID0gY2xhbXAoaHNsLnMpO1xuICAgICAgICByZXR1cm4gaHNsYShoc2wpO1xuICAgIH0sXG4gICAgbGlnaHRlbjogZnVuY3Rpb24gKGNvbG9yLCBhbW91bnQpIHtcbiAgICAgICAgaWYgKCEoJ3RvSFNMJyBpbiBjb2xvcikpIHJldHVybiBudWxsO1xuICAgICAgICB2YXIgaHNsID0gY29sb3IudG9IU0woKTtcblxuICAgICAgICBoc2wubCArPSBhbW91bnQudmFsdWUgLyAxMDA7XG4gICAgICAgIGhzbC5sID0gY2xhbXAoaHNsLmwpO1xuICAgICAgICByZXR1cm4gaHNsYShoc2wpO1xuICAgIH0sXG4gICAgZGFya2VuOiBmdW5jdGlvbiAoY29sb3IsIGFtb3VudCkge1xuICAgICAgICBpZiAoISgndG9IU0wnIGluIGNvbG9yKSkgcmV0dXJuIG51bGw7XG4gICAgICAgIHZhciBoc2wgPSBjb2xvci50b0hTTCgpO1xuXG4gICAgICAgIGhzbC5sIC09IGFtb3VudC52YWx1ZSAvIDEwMDtcbiAgICAgICAgaHNsLmwgPSBjbGFtcChoc2wubCk7XG4gICAgICAgIHJldHVybiBoc2xhKGhzbCk7XG4gICAgfSxcbiAgICBmYWRlaW46IGZ1bmN0aW9uIChjb2xvciwgYW1vdW50KSB7XG4gICAgICAgIGlmICghKCd0b0hTTCcgaW4gY29sb3IpKSByZXR1cm4gbnVsbDtcbiAgICAgICAgdmFyIGhzbCA9IGNvbG9yLnRvSFNMKCk7XG5cbiAgICAgICAgaHNsLmEgKz0gYW1vdW50LnZhbHVlIC8gMTAwO1xuICAgICAgICBoc2wuYSA9IGNsYW1wKGhzbC5hKTtcbiAgICAgICAgcmV0dXJuIGhzbGEoaHNsKTtcbiAgICB9LFxuICAgIGZhZGVvdXQ6IGZ1bmN0aW9uIChjb2xvciwgYW1vdW50KSB7XG4gICAgICAgIGlmICghKCd0b0hTTCcgaW4gY29sb3IpKSByZXR1cm4gbnVsbDtcbiAgICAgICAgdmFyIGhzbCA9IGNvbG9yLnRvSFNMKCk7XG5cbiAgICAgICAgaHNsLmEgLT0gYW1vdW50LnZhbHVlIC8gMTAwO1xuICAgICAgICBoc2wuYSA9IGNsYW1wKGhzbC5hKTtcbiAgICAgICAgcmV0dXJuIGhzbGEoaHNsKTtcbiAgICB9LFxuICAgIHNwaW46IGZ1bmN0aW9uIChjb2xvciwgYW1vdW50KSB7XG4gICAgICAgIGlmICghKCd0b0hTTCcgaW4gY29sb3IpKSByZXR1cm4gbnVsbDtcbiAgICAgICAgdmFyIGhzbCA9IGNvbG9yLnRvSFNMKCk7XG4gICAgICAgIHZhciBodWUgPSAoaHNsLmggKyBhbW91bnQudmFsdWUpICUgMzYwO1xuXG4gICAgICAgIGhzbC5oID0gaHVlIDwgMCA/IDM2MCArIGh1ZSA6IGh1ZTtcblxuICAgICAgICByZXR1cm4gaHNsYShoc2wpO1xuICAgIH0sXG4gICAgcmVwbGFjZTogZnVuY3Rpb24gKGVudGl0eSwgYSwgYikge1xuICAgICAgICBpZiAoZW50aXR5LmlzID09PSAnZmllbGQnKSB7XG4gICAgICAgICAgICByZXR1cm4gZW50aXR5LnRvU3RyaW5nICsgJy5yZXBsYWNlKCcgKyBhLnRvU3RyaW5nKCkgKyAnLCAnICsgYi50b1N0cmluZygpICsgJyknO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGVudGl0eS5yZXBsYWNlKGEsIGIpO1xuICAgICAgICB9XG4gICAgfSxcbiAgICAvL1xuICAgIC8vIENvcHlyaWdodCAoYykgMjAwNi0yMDA5IEhhbXB0b24gQ2F0bGluLCBOYXRoYW4gV2VpemVuYmF1bSwgYW5kIENocmlzIEVwcHN0ZWluXG4gICAgLy8gaHR0cDovL3Nhc3MtbGFuZy5jb21cbiAgICAvL1xuICAgIG1peDogZnVuY3Rpb24gKGNvbG9yMSwgY29sb3IyLCB3ZWlnaHQpIHtcbiAgICAgICAgdmFyIHAgPSB3ZWlnaHQudmFsdWUgLyAxMDAuMDtcbiAgICAgICAgdmFyIHcgPSBwICogMiAtIDE7XG4gICAgICAgIHZhciBhID0gY29sb3IxLnRvSFNMKCkuYSAtIGNvbG9yMi50b0hTTCgpLmE7XG5cbiAgICAgICAgdmFyIHcxID0gKCgodyAqIGEgPT0gLTEpID8gdyA6ICh3ICsgYSkgLyAoMSArIHcgKiBhKSkgKyAxKSAvIDIuMDtcbiAgICAgICAgdmFyIHcyID0gMSAtIHcxO1xuXG4gICAgICAgIHZhciByZ2IgPSBbY29sb3IxLnJnYlswXSAqIHcxICsgY29sb3IyLnJnYlswXSAqIHcyLFxuICAgICAgICAgICAgICAgICAgIGNvbG9yMS5yZ2JbMV0gKiB3MSArIGNvbG9yMi5yZ2JbMV0gKiB3MixcbiAgICAgICAgICAgICAgICAgICBjb2xvcjEucmdiWzJdICogdzEgKyBjb2xvcjIucmdiWzJdICogdzJdO1xuXG4gICAgICAgIHZhciBhbHBoYSA9IGNvbG9yMS5hbHBoYSAqIHAgKyBjb2xvcjIuYWxwaGEgKiAoMSAtIHApO1xuXG4gICAgICAgIHJldHVybiBuZXcgdHJlZS5Db2xvcihyZ2IsIGFscGhhKTtcbiAgICB9LFxuICAgIGdyZXlzY2FsZTogZnVuY3Rpb24gKGNvbG9yKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRlc2F0dXJhdGUoY29sb3IsIG5ldyB0cmVlLkRpbWVuc2lvbigxMDApKTtcbiAgICB9LFxuICAgICclJzogZnVuY3Rpb24gKHF1b3RlZCAvKiBhcmcsIGFyZywgLi4uKi8pIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpLFxuICAgICAgICAgICAgc3RyID0gcXVvdGVkLnZhbHVlO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJncy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgc3RyID0gc3RyLnJlcGxhY2UoLyVzLywgICAgYXJnc1tpXS52YWx1ZSlcbiAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC8lW2RhXS8sIGFyZ3NbaV0udG9TdHJpbmcoKSk7XG4gICAgICAgIH1cbiAgICAgICAgc3RyID0gc3RyLnJlcGxhY2UoLyUlL2csICclJyk7XG4gICAgICAgIHJldHVybiBuZXcgdHJlZS5RdW90ZWQoc3RyKTtcbiAgICB9XG59O1xuXG52YXIgaW1hZ2VfZmlsdGVyX2Z1bmN0b3JzID0gW1xuICAgICdlbWJvc3MnLCAnYmx1cicsICdncmF5JywgJ3NvYmVsJywgJ2VkZ2UtZGV0ZWN0JyxcbiAgICAneC1ncmFkaWVudCcsICd5LWdyYWRpZW50JywgJ3NoYXJwZW4nXTtcblxuZm9yICh2YXIgaSA9IDA7IGkgPCBpbWFnZV9maWx0ZXJfZnVuY3RvcnMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgZiA9IGltYWdlX2ZpbHRlcl9mdW5jdG9yc1tpXTtcbiAgICB0cmVlLmZ1bmN0aW9uc1tmXSA9IChmdW5jdGlvbihmKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgdHJlZS5JbWFnZUZpbHRlcihmKTtcbiAgICAgICAgfTtcbiAgICB9KShmKTtcbn1cblxudHJlZS5mdW5jdGlvbnNbJ2FnZy1zdGFjay1ibHVyJ10gPSBmdW5jdGlvbih4LCB5KSB7XG4gICAgcmV0dXJuIG5ldyB0cmVlLkltYWdlRmlsdGVyKCdhZ2ctc3RhY2stYmx1cicsIFt4LCB5XSk7XG59O1xuXG50cmVlLmZ1bmN0aW9uc1snc2NhbGUtaHNsYSddID0gZnVuY3Rpb24oaDAsaDEsczAsczEsbDAsbDEsYTAsYTEpIHtcbiAgICByZXR1cm4gbmV3IHRyZWUuSW1hZ2VGaWx0ZXIoJ3NjYWxlLWhzbGEnLCBbaDAsaDEsczAsczEsbDAsbDEsYTAsYTFdKTtcbn07XG5cbmZ1bmN0aW9uIGhzbGEoaCkge1xuICAgIHJldHVybiB0cmVlLmZ1bmN0aW9ucy5oc2xhKGguaCwgaC5zLCBoLmwsIGguYSk7XG59XG5cbmZ1bmN0aW9uIG51bWJlcihuKSB7XG4gICAgaWYgKG4gaW5zdGFuY2VvZiB0cmVlLkRpbWVuc2lvbikge1xuICAgICAgICByZXR1cm4gcGFyc2VGbG9hdChuLnVuaXQgPT0gJyUnID8gbi52YWx1ZSAvIDEwMCA6IG4udmFsdWUpO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mKG4pID09PSAnbnVtYmVyJykge1xuICAgICAgICByZXR1cm4gbjtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gTmFOO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gY2xhbXAodmFsKSB7XG4gICAgcmV0dXJuIE1hdGgubWluKDEsIE1hdGgubWF4KDAsIHZhbCkpO1xufVxuXG59KShyZXF1aXJlKCcuL3RyZWUnKSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY2FydG8vbGliL2NhcnRvL2Z1bmN0aW9ucy5qc1xuLy8gbW9kdWxlIGlkID0gODFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 82 */
/* no static exports found */
/* all exports used */
/*!*************************************!*\
  !*** ./~/carto/lib/carto/parser.js ***!
  \*************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global) {var carto = exports,\n    tree = __webpack_require__(/*! ./tree */ 0),\n    _ = global._ || __webpack_require__(/*! underscore */ 4);\n\n//    Token matching is done with the `$` function, which either takes\n//    a terminal string or regexp, or a non-terminal function to call.\n//    It also takes care of moving all the indices forwards.\ncarto.Parser = function Parser(env) {\n    var input,       // LeSS input string\n        i,           // current index in `input`\n        j,           // current chunk\n        temp,        // temporarily holds a chunk's state, for backtracking\n        memo,        // temporarily holds `i`, when backtracking\n        furthest,    // furthest index the parser has gone to\n        chunks,      // chunkified input\n        current,     // index of current chunk, in `input`\n        parser;\n\n    var that = this;\n\n    // This function is called after all files\n    // have been imported through `@import`.\n    var finish = function() {};\n\n    function save()    {\n        temp = chunks[j];\n        memo = i;\n        current = i;\n    }\n    function restore() {\n        chunks[j] = temp;\n        i = memo;\n        current = i;\n    }\n\n    function sync() {\n        if (i > current) {\n            chunks[j] = chunks[j].slice(i - current);\n            current = i;\n        }\n    }\n    //\n    // Parse from a token, regexp or string, and move forward if match\n    //\n    function $(tok) {\n        var match, args, length, c, index, endIndex, k;\n\n        // Non-terminal\n        if (tok instanceof Function) {\n            return tok.call(parser.parsers);\n        // Terminal\n        // Either match a single character in the input,\n        // or match a regexp in the current chunk (chunk[j]).\n        } else if (typeof(tok) === 'string') {\n            match = input.charAt(i) === tok ? tok : null;\n            length = 1;\n            sync();\n        } else {\n            sync();\n\n            match = tok.exec(chunks[j]);\n            if (match) {\n                length = match[0].length;\n            } else {\n                return null;\n            }\n        }\n\n        // The match is confirmed, add the match length to `i`,\n        // and consume any extra white-space characters (' ' || '\\n')\n        // which come after that. The reason for this is that LeSS's\n        // grammar is mostly white-space insensitive.\n        if (match) {\n            var mem = i += length;\n            endIndex = i + chunks[j].length - length;\n\n            while (i < endIndex) {\n                c = input.charCodeAt(i);\n                if (! (c === 32 || c === 10 || c === 9)) { break; }\n                i++;\n            }\n            chunks[j] = chunks[j].slice(length + (i - mem));\n            current = i;\n\n            if (chunks[j].length === 0 && j < chunks.length - 1) { j++; }\n\n            if (typeof(match) === 'string') {\n                return match;\n            } else {\n                return match.length === 1 ? match[0] : match;\n            }\n        }\n    }\n\n    // Same as $(), but don't change the state of the parser,\n    // just return the match.\n    function peek(tok) {\n        if (typeof(tok) === 'string') {\n            return input.charAt(i) === tok;\n        } else {\n            return !!tok.test(chunks[j]);\n        }\n    }\n\n    function extractErrorLine(style, errorIndex) {\n        return (style.slice(0, errorIndex).match(/\\n/g) || '').length + 1;\n    }\n\n\n    // Make an error object from a passed set of properties.\n    // Accepted properties:\n    // - `message`: Text of the error message.\n    // - `filename`: Filename where the error occurred.\n    // - `index`: Char. index where the error occurred.\n    function makeError(err) {\n        var einput;\n        var errorTemplate;\n\n        _.defaults(err, {\n            index: furthest,\n            filename: env.filename,\n            message: 'Parse error.',\n            line: 0,\n            column: -1\n        });\n\n        if (err.filename && that.env.inputs && that.env.inputs[err.filename]) {\n            einput = that.env.inputs[err.filename];\n        } else {\n            einput = input;\n        }\n\n        err.line = extractErrorLine(einput, err.index);\n        for (var n = err.index; n >= 0 && einput.charAt(n) !== '\\n'; n--) {\n            err.column++;\n        }\n        errorTemplate = _.template('<%=filename%>:<%=line%>:<%=column%> <%=message%>');\n        return new Error(errorTemplate(err));\n    }\n\n    this.env = env = env || {};\n    this.env.filename = this.env.filename || null;\n    this.env.inputs = this.env.inputs || {};\n\n    // The Parser\n    parser = {\n\n        extractErrorLine: extractErrorLine,\n        //\n        // Parse an input string into an abstract syntax tree.\n        // Throws an error on parse errors.\n        parse: function(str) {\n            var root, start, end, zone, line, lines, buff = [], c, error = null;\n\n            i = j = current = furthest = 0;\n            chunks = [];\n            input = str.replace(/\\r\\n/g, '\\n');\n            if (env.filename) {\n                that.env.inputs[env.filename] = input;\n            }\n\n            var early_exit = false;\n\n            // Split the input into chunks.\n            chunks = (function (chunks) {\n                var j = 0,\n                    skip = /(?:@\\{[\\w-]+\\}|[^\"'`\\{\\}\\/\\(\\)\\\\])+/g,\n                    comment = /\\/\\*(?:[^*]|\\*+[^\\/*])*\\*+\\/|\\/\\/.*/g,\n                    string = /\"((?:[^\"\\\\\\r\\n]|\\\\.)*)\"|'((?:[^'\\\\\\r\\n]|\\\\.)*)'|`((?:[^`]|\\\\.)*)`/g,\n                    level = 0,\n                    match,\n                    chunk = chunks[0],\n                    inParam;\n\n                for (var i = 0, c, cc; i < input.length;) {\n                    skip.lastIndex = i;\n                    if (match = skip.exec(input)) {\n                        if (match.index === i) {\n                            i += match[0].length;\n                            chunk.push(match[0]);\n                        }\n                    }\n                    c = input.charAt(i);\n                    comment.lastIndex = string.lastIndex = i;\n\n                    if (match = string.exec(input)) {\n                        if (match.index === i) {\n                            i += match[0].length;\n                            chunk.push(match[0]);\n                            continue;\n                        }\n                    }\n\n                    if (!inParam && c === '/') {\n                        cc = input.charAt(i + 1);\n                        if (cc === '/' || cc === '*') {\n                            if (match = comment.exec(input)) {\n                                if (match.index === i) {\n                                    i += match[0].length;\n                                    chunk.push(match[0]);\n                                    continue;\n                                }\n                            }\n                        }\n                    }\n\n                    switch (c) {\n                        case '{': if (! inParam) { level ++;        chunk.push(c);                           break; }\n                        case '}': if (! inParam) { level --;        chunk.push(c); chunks[++j] = chunk = []; break; }\n                        case '(': if (! inParam) { inParam = true;  chunk.push(c);                           break; }\n                        case ')': if (  inParam) { inParam = false; chunk.push(c);                           break; }\n                        default:                                    chunk.push(c);\n                    }\n\n                    i++;\n                }\n                if (level !== 0) {\n                    error = {\n                        index: i - 1,\n                        type: 'Parse',\n                        message: (level > 0) ? \"missing closing `}`\" : \"missing opening `{`\"\n                    };\n                }\n\n                return chunks.map(function (c) { return c.join(''); });\n            })([[]]);\n\n            if (error) {\n                throw makeError(error);\n            }\n\n            // Start with the primary rule.\n            // The whole syntax tree is held under a Ruleset node,\n            // with the `root` property set to true, so no `{}` are\n            // output.\n            root = new tree.Ruleset([], $(this.parsers.primary));\n            root.root = true;\n\n            // Get an array of Ruleset objects, flattened\n            // and sorted according to specificitySort\n            root.toList = (function() {\n                var line, lines, column;\n                return function(env) {\n                    env.error = function(e) {\n                        if (!env.errors) env.errors = new Error('');\n                        if (env.errors.message) {\n                            env.errors.message += '\\n' + makeError(e).message;\n                        } else {\n                            env.errors.message = makeError(e).message;\n                        }\n                    };\n                    env.frames = env.frames || [];\n\n\n                    // call populates Invalid-caused errors\n                    var definitions = this.flatten([], [], env);\n                    definitions.sort(specificitySort);\n                    return definitions;\n                };\n            })();\n\n            // Sort rules by specificity: this function expects selectors to be\n            // split already.\n            //\n            // Written to be used as a .sort(Function);\n            // argument.\n            //\n            // [1, 0, 0, 467] > [0, 0, 1, 520]\n            var specificitySort = function(a, b) {\n                var as = a.specificity;\n                var bs = b.specificity;\n\n                if (as[0] != bs[0]) return bs[0] - as[0];\n                if (as[1] != bs[1]) return bs[1] - as[1];\n                if (as[2] != bs[2]) return bs[2] - as[2];\n                return bs[3] - as[3];\n            };\n\n            return root;\n        },\n\n        // Here in, the parsing rules/functions\n        //\n        // The basic structure of the syntax tree generated is as follows:\n        //\n        //   Ruleset ->  Rule -> Value -> Expression -> Entity\n        //\n        //  In general, most rules will try to parse a token with the `$()` function, and if the return\n        //  value is truly, will return a new node, of the relevant type. Sometimes, we need to check\n        //  first, before parsing, that's when we use `peek()`.\n        parsers: {\n            // The `primary` rule is the *entry* and *exit* point of the parser.\n            // The rules here can appear at any level of the parse tree.\n            //\n            // The recursive nature of the grammar is an interplay between the `block`\n            // rule, which represents `{ ... }`, the `ruleset` rule, and this `primary` rule,\n            // as represented by this simplified grammar:\n            //\n            //     primary  →  (ruleset | rule)+\n            //     ruleset  →  selector+ block\n            //     block    →  '{' primary '}'\n            //\n            // Only at one point is the primary rule not called from the\n            // block rule: at the root level.\n            primary: function() {\n                var node, root = [];\n\n                while ((node = $(this.rule) || $(this.ruleset) ||\n                               $(this.comment)) ||\n                               $(/^[\\s\\n]+/) || (node = $(this.invalid))) {\n                    if (node) root.push(node);\n                }\n                return root;\n            },\n\n            invalid: function () {\n                var chunk = $(/^[^;\\n]*[;\\n]/);\n\n                // To fail gracefully, match everything until a semicolon or linebreak.\n                if (chunk) {\n                    return new tree.Invalid(chunk, memo);\n                }\n            },\n\n            // We create a Comment node for CSS comments `/* */`,\n            // but keep the LeSS comments `//` silent, by just skipping\n            // over them.\n            comment: function() {\n                var comment;\n\n                if (input.charAt(i) !== '/') return;\n\n                if (input.charAt(i + 1) === '/') {\n                    return new tree.Comment($(/^\\/\\/.*/), true);\n                } else if (comment = $(/^\\/\\*(?:[^*]|\\*+[^\\/*])*\\*+\\/\\n?/)) {\n                    return new tree.Comment(comment);\n                }\n            },\n\n            // Entities are tokens which can be found inside an Expression\n            entities: {\n\n                // A string, which supports escaping \" and ' \"milky way\" 'he\\'s the one!'\n                quoted: function() {\n                    if (input.charAt(i) !== '\"' && input.charAt(i) !== \"'\") return;\n                    var str = $(/^\"((?:[^\"\\\\\\r\\n]|\\\\.)*)\"|'((?:[^'\\\\\\r\\n]|\\\\.)*)'/);\n                    if (str) {\n                        return new tree.Quoted(str[1] || str[2]);\n                    }\n                },\n\n                // A reference to a Mapnik field, like [NAME]\n                // Behind the scenes, this has the same representation, but Carto\n                // needs to be careful to warn when unsupported operations are used.\n                field: function() {\n                    if (! $('[')) return;\n                    var field_name = $(/(^[^\\]]+)/);\n                    if (! $(']')) return;\n                    if (field_name) return new tree.Field(field_name[1]);\n                },\n\n                // This is a comparison operator\n                comparison: function() {\n                    var str = $(/^=~|=|!=|<=|>=|<|>/);\n                    if (str) {\n                        return str;\n                    }\n                },\n\n                // A catch-all word, such as: hard-light\n                // These can start with either a letter or a dash (-),\n                // and then contain numbers, underscores, and letters.\n                keyword: function() {\n                    var k = $(/^[A-Za-z-]+[A-Za-z-0-9_]*/);\n                    if (k) { return new tree.Keyword(k); }\n                },\n\n                // A function call like rgb(255, 0, 255)\n                // The arguments are parsed with the `entities.arguments` parser.\n                call: function() {\n                    var name, args;\n\n                    if (!(name = /^([\\w\\-]+|%)\\(/.exec(chunks[j]))) return;\n\n                    name = name[1];\n\n                    if (name === 'url') {\n                        // url() is handled by the url parser instead\n                        return null;\n                    } else {\n                        i += name.length;\n                    }\n\n                    $('('); // Parse the '(' and consume whitespace.\n\n                    args = $(this.entities['arguments']);\n\n                    if (!$(')')) return;\n\n                    if (name) {\n                        return new tree.Call(name, args, i);\n                    }\n                },\n                // Arguments are comma-separated expressions\n                'arguments': function() {\n                    var args = [], arg;\n\n                    while (arg = $(this.expression)) {\n                        args.push(arg);\n                        if (! $(',')) { break; }\n                    }\n\n                    return args;\n                },\n                literal: function() {\n                    return $(this.entities.dimension) ||\n                        $(this.entities.keywordcolor) ||\n                        $(this.entities.hexcolor) ||\n                        $(this.entities.quoted);\n                },\n\n                // Parse url() tokens\n                //\n                // We use a specific rule for urls, because they don't really behave like\n                // standard function calls. The difference is that the argument doesn't have\n                // to be enclosed within a string, so it can't be parsed as an Expression.\n                url: function() {\n                    var value;\n\n                    if (input.charAt(i) !== 'u' || !$(/^url\\(/)) return;\n                    value = $(this.entities.quoted) || $(this.entities.variable) ||\n                            $(/^[\\-\\w%@$\\/.&=:;#+?~]+/) || '';\n                    if (! $(')')) {\n                        return new tree.Invalid(value, memo, 'Missing closing ) in URL.');\n                    } else {\n                        return new tree.URL((typeof value.value !== 'undefined' ||\n                            value instanceof tree.Variable) ?\n                            value : new tree.Quoted(value));\n                    }\n                },\n\n                // A Variable entity, such as `@fink`, in\n                //\n                //     width: @fink + 2px\n                //\n                // We use a different parser for variable definitions,\n                // see `parsers.variable`.\n                variable: function() {\n                    var name, index = i;\n\n                    if (input.charAt(i) === '@' && (name = $(/^@[\\w-]+/))) {\n                        return new tree.Variable(name, index, env.filename);\n                    }\n                },\n\n                hexcolor: function() {\n                    var rgb;\n                    if (input.charAt(i) === '#' && (rgb = $(/^#([a-fA-F0-9]{6}|[a-fA-F0-9]{3})/))) {\n                        return new tree.Color(rgb[1]);\n                    }\n                },\n\n                keywordcolor: function() {\n                    var rgb = chunks[j].match(/^[a-z]+/);\n                    if (rgb && rgb[0] in tree.Reference.data.colors) {\n                        return new tree.Color(tree.Reference.data.colors[$(/^[a-z]+/)]);\n                    }\n                },\n\n                // A Dimension, that is, a number and a unit. The only\n                // unit that has an effect is %\n                dimension: function() {\n                    var c = input.charCodeAt(i);\n                    if ((c > 57 || c < 45) || c === 47) return;\n                    var value = $(/^(-?\\d*\\.?\\d+(?:[eE][-+]?\\d+)?)(\\%|\\w+)?/);\n                    if (value) {\n                        return new tree.Dimension(value[1], value[2], memo);\n                    }\n                }\n\n            },\n\n            // The variable part of a variable definition.\n            // Used in the `rule` parser. Like @fink:\n            variable: function() {\n                var name;\n\n                if (input.charAt(i) === '@' && (name = $(/^(@[\\w-]+)\\s*:/))) {\n                    return name[1];\n                }\n            },\n\n            // Entities are the smallest recognized token,\n            // and can be found inside a rule's value.\n            entity: function() {\n                return $(this.entities.call) ||\n                    $(this.entities.literal) ||\n                    $(this.entities.field) ||\n                    $(this.entities.variable) ||\n                    $(this.entities.url) ||\n                    $(this.entities.keyword);\n            },\n\n            // A Rule terminator. Note that we use `peek()` to check for '}',\n            // because the `block` rule will be expecting it, but we still need to make sure\n            // it's there, if ';' was ommitted.\n            end: function() {\n                return $(';') || peek('}');\n            },\n\n            // Elements are the building blocks for Selectors. They consist of\n            // an element name, such as a tag a class, or `*`.\n            element: function() {\n                var e = $(/^(?:[.#][\\w\\-]+|\\*|Map)/);\n                if (e) return new tree.Element(e);\n            },\n\n            // Attachments allow adding multiple lines, polygons etc. to an\n            // object. There can only be one attachment per selector.\n            attachment: function() {\n                var s = $(/^::([\\w\\-]+(?:\\/[\\w\\-]+)*)/);\n                if (s) return s[1];\n            },\n\n            // Selectors are made out of one or more Elements, see above.\n            selector: function() {\n                var a, attachment,\n                    e, elements = [],\n                    f, filters = new tree.Filterset(),\n                    z, zooms = [],\n                    frame_offset = tree.FrameOffset.none;\n                    segments = 0, conditions = 0;\n\n                while (\n                        (e = $(this.element)) ||\n                        (z = $(this.zoom)) ||\n                        (fo = $(this.frame_offset)) ||\n                        (f = $(this.filter)) ||\n                        (a = $(this.attachment))\n                    ) {\n                    segments++;\n                    if (e) {\n                        elements.push(e);\n                    } else if (z) {\n                        zooms.push(z);\n                        conditions++;\n                    } else if (fo) {\n                        frame_offset = fo;\n                        conditions++;\n                    } else if (f) {\n                        var err = filters.add(f);\n                        if (err) {\n                            throw makeError({\n                                message: err,\n                                index: i - 1\n                            });\n                        }\n                        conditions++;\n                    } else if (attachment) {\n                        throw makeError({\n                            message: 'Encountered second attachment name.',\n                            index: i - 1\n                        });\n                    } else {\n                        attachment = a;\n                    }\n\n                    var c = input.charAt(i);\n                    if (c === '{' || c === '}' || c === ';' || c === ',') { break; }\n                }\n\n                if (segments) {\n                    return new tree.Selector(filters, zooms, frame_offset, elements, attachment, conditions, memo);\n                }\n            },\n\n            filter: function() {\n                save();\n                var key, op, val;\n                if (! $('[')) return;\n                if (key = $(/^[a-zA-Z0-9\\-_]+/) ||\n                    $(this.entities.quoted) ||\n                    $(this.entities.variable) ||\n                    $(this.entities.keyword) ||\n                    $(this.entities.field)) {\n                    // TODO: remove at 1.0.0\n                    if (key instanceof tree.Quoted) {\n                        key = new tree.Field(key.toString());\n                    }\n                    if ((op = $(this.entities.comparison)) &&\n                        (val = $(this.entities.quoted) ||\n                             $(this.entities.variable) ||\n                             $(this.entities.dimension) ||\n                             $(this.entities.keyword) ||\n                             $(this.entities.field))) {\n                        if (! $(']')) {\n                            throw makeError({\n                                message: 'Missing closing ] of filter.',\n                                index: memo - 1\n                            });\n                        }\n                        if (!key.is) key = new tree.Field(key);\n                        return new tree.Filter(key, op, val, memo, env.filename);\n                    }\n                }\n            },\n\n            frame_offset: function() {\n                save();\n                var op, val;\n                if ($(/^\\[\\s*frame-offset/g) &&\n                    (op = $(this.entities.comparison)) &&\n                    (val = $(/^\\d+/)) &&\n                    $(']'))  {\n                        return tree.FrameOffset(op, val, memo);\n                }\n            },\n\n            zoom: function() {\n                save();\n                var op, val;\n                if ($(/^\\[\\s*zoom/g) &&\n                    (op = $(this.entities.comparison)) &&\n                    (val = $(this.entities.variable) || $(this.entities.dimension)) && $(']')) {\n                        return new tree.Zoom(op, val, memo);\n                } else {\n                    // backtrack\n                    restore();\n                }\n            },\n\n            // The `block` rule is used by `ruleset`\n            // It's a wrapper around the `primary` rule, with added `{}`.\n            block: function() {\n                var content;\n\n                if ($('{') && (content = $(this.primary)) && $('}')) {\n                    return content;\n                }\n            },\n\n            // div, .class, body > p {...}\n            ruleset: function() {\n                var selectors = [], s, f, l, rules, filters = [];\n                save();\n\n                while (s = $(this.selector)) {\n                    selectors.push(s);\n                    while ($(this.comment)) {}\n                    if (! $(',')) { break; }\n                    while ($(this.comment)) {}\n                }\n                if (s) {\n                    while ($(this.comment)) {}\n                }\n\n                if (selectors.length > 0 && (rules = $(this.block))) {\n                    if (selectors.length === 1 &&\n                        selectors[0].elements.length &&\n                        selectors[0].elements[0].value === 'Map') {\n                        var rs = new tree.Ruleset(selectors, rules);\n                        rs.isMap = true;\n                        return rs;\n                    }\n                    return new tree.Ruleset(selectors, rules);\n                } else {\n                    // Backtrack\n                    restore();\n                }\n            },\n\n            rule: function() {\n                var name, value, c = input.charAt(i);\n                save();\n\n                if (c === '.' || c === '#') { return; }\n\n                if (name = $(this.variable) || $(this.property)) {\n                    value = $(this.value);\n\n                    if (value && $(this.end)) {\n                        return new tree.Rule(name, value, memo, env.filename);\n                    } else {\n                        furthest = i;\n                        restore();\n                    }\n                }\n            },\n\n            font: function() {\n                var value = [], expression = [], weight, font, e;\n\n                while (e = $(this.entity)) {\n                    expression.push(e);\n                }\n\n                value.push(new tree.Expression(expression));\n\n                if ($(',')) {\n                    while (e = $(this.expression)) {\n                        value.push(e);\n                        if (! $(',')) { break; }\n                    }\n                }\n                return new tree.Value(value);\n            },\n\n            // A Value is a comma-delimited list of Expressions\n            // In a Rule, a Value represents everything after the `:`,\n            // and before the `;`.\n            value: function() {\n                var e, expressions = [];\n\n                while (e = $(this.expression)) {\n                    expressions.push(e);\n                    if (! $(',')) { break; }\n                }\n\n                if (expressions.length > 1) {\n                    return new tree.Value(expressions.map(function(e) {\n                        return e.value[0];\n                    }));\n                } else if (expressions.length === 1) {\n                    return new tree.Value(expressions);\n                }\n            },\n            // A sub-expression, contained by parenthensis\n            sub: function() {\n                var e, expressions = [];\n\n                if ($('(')) {\n                  while (e = $(this.expression)) {\n                      expressions.push(e);\n                      if (! $(',')) { break; }\n                  }\n                  $(')');\n                }\n\n                if (expressions.length > 1) {\n                    return new tree.Value(expressions.map(function(e) {\n                        return e.value[0];\n                    }));\n                } else if (expressions.length === 1) {\n                    return new tree.Value(expressions);\n                }\n            },\n            // This is a misnomer because it actually handles multiplication\n            // and division.\n            multiplication: function() {\n                var m, a, op, operation;\n                if (m = $(this.operand)) {\n                    while ((op = ($('/') || $('*') || $('%'))) && (a = $(this.operand))) {\n                        operation = new tree.Operation(op, [operation || m, a], memo);\n                    }\n                    return operation || m;\n                }\n            },\n            addition: function() {\n                var m, a, op, operation;\n                if (m = $(this.multiplication)) {\n                    while ((op = $(/^[-+]\\s+/) || (input.charAt(i - 1) != ' ' && ($('+') || $('-')))) &&\n                           (a = $(this.multiplication))) {\n                        operation = new tree.Operation(op, [operation || m, a], memo);\n                    }\n                    return operation || m;\n                }\n            },\n\n            // An operand is anything that can be part of an operation,\n            // such as a Color, or a Variable\n            operand: function() {\n                return $(this.sub) || $(this.entity);\n            },\n\n            // Expressions either represent mathematical operations,\n            // or white-space delimited Entities.  @var * 2\n            expression: function() {\n                var e, delim, entities = [], d;\n\n                while (e = $(this.addition) || $(this.entity)) {\n                    entities.push(e);\n                }\n\n                if (entities.length > 0) {\n                    return new tree.Expression(entities);\n                }\n            },\n            property: function() {\n                var name = $(/^(([a-z][-a-z_0-9]*\\/)?\\*?-?[-a-z_0-9]+)\\s*:/);\n                if (name) return name[1];\n            }\n        }\n    };\n    return parser;\n};\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./../../../webpack/buildin/global.js */ 3)))//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 83 */
/* no static exports found */
/* all exports used */
/*!***************************************!*\
  !*** ./~/carto/lib/carto/renderer.js ***!
  \***************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global) {var _ = global._ || __webpack_require__(/*! underscore */ 4);\nvar carto = __webpack_require__(/*! ./index */ 27);\n\ncarto.Renderer = function Renderer(env, options) {\n    this.env = env || {};\n    this.options = options || {};\n    this.options.mapnik_version = this.options.mapnik_version || '3.0.0';\n};\n\n/**\n * Prepare a MSS document (given as an string) into a\n * XML Style fragment (mostly useful for debugging)\n *\n * @param {String} data the mss contents as a string.\n */\ncarto.Renderer.prototype.renderMSS = function render(data) {\n    // effects is a container for side-effects, which currently\n    // are limited to FontSets.\n    var env = _.defaults(this.env, {\n        benchmark: false,\n        validation_data: false,\n        effects: []\n    });\n\n    if (!carto.tree.Reference.setVersion(this.options.mapnik_version)) {\n        throw new Error(\"Could not set mapnik version to \" + this.options.mapnik_version);\n    }\n\n    var output = [];\n    var styles = [];\n\n    if (env.benchmark) console.time('Parsing MSS');\n    var parser = (carto.Parser(env)).parse(data);\n    if (env.benchmark) console.timeEnd('Parsing MSS');\n\n    if (env.benchmark) console.time('Rule generation');\n    var rule_list = parser.toList(env);\n    if (env.benchmark) console.timeEnd('Rule generation');\n\n    if (env.benchmark) console.time('Rule inheritance');\n    var rules = inheritDefinitions(rule_list, env);\n    if (env.benchmark) console.timeEnd('Rule inheritance');\n\n    if (env.benchmark) console.time('Style sort');\n    var sorted = sortStyles(rules,env);\n    if (env.benchmark) console.timeEnd('Style sort');\n\n    if (env.benchmark) console.time('Total Style generation');\n    for (var k = 0, rule, style_name; k < sorted.length; k++) {\n        rule = sorted[k];\n        style_name = 'style' + (rule.attachment !== '__default__' ? '-' + rule.attachment : '');\n        styles.push(style_name);\n        var bench_name = '\\tStyle \"'+style_name+'\" (#'+k+') toXML';\n        if (env.benchmark) console.time(bench_name);\n        // env.effects can be modified by this call\n        output.push(carto.tree.StyleXML(style_name, rule.attachment, rule, env));\n        if (env.benchmark) console.timeEnd(bench_name);\n    }\n    if (env.benchmark) console.timeEnd('Total Style generation');\n    if (env.errors) throw env.errors;\n    return output.join('\\n');\n};\n\n/**\n * Prepare a MML document (given as an object) into a\n * fully-localized XML file ready for Mapnik2 consumption\n *\n * @param {String} m - the JSON file as a string.\n */\ncarto.Renderer.prototype.render = function render(m) {\n    // effects is a container for side-effects, which currently\n    // are limited to FontSets.\n    var env = _.defaults(this.env, {\n        benchmark: false,\n        validation_data: false,\n        effects: [],\n        ppi: 90.714\n    });\n\n    if (!carto.tree.Reference.setVersion(this.options.mapnik_version)) {\n        throw new Error(\"Could not set mapnik version to \" + this.options.mapnik_version);\n    }\n\n    var output = [];\n\n    // Transform stylesheets into definitions.\n    var definitions = _.chain(m.Stylesheet)\n        .map(function(s) {\n            if (typeof s == 'string') {\n                throw new Error(\"Stylesheet object is expected not a string: '\" + s + \"'\");\n            }\n            // Passing the environment from stylesheet to stylesheet,\n            // allows frames and effects to be maintained.\n            env = _.extend(env, {filename:s.id});\n\n            var time = +new Date(),\n                root = (carto.Parser(env)).parse(s.data);\n            if (env.benchmark)\n                console.warn('Parsing time: ' + (new Date() - time) + 'ms');\n            return root.toList(env);\n        })\n        .flatten()\n        .value();\n\n    function appliesTo(name, classIndex) {\n        return function(definition) {\n            return definition.appliesTo(l.name, classIndex);\n        };\n    }\n\n    // Iterate through layers and create styles custom-built\n    // for each of them, and apply those styles to the layers.\n    var styles, l, classIndex, rules, sorted, matching;\n    for (var i = 0; i < m.Layer.length; i++) {\n        l = m.Layer[i];\n        styles = [];\n        classIndex = {};\n\n        if (env.benchmark) console.warn('processing layer: ' + l.id);\n        // Classes are given as space-separated alphanumeric strings.\n        var classes = (l['class'] || '').split(/\\s+/g);\n        for (var j = 0; j < classes.length; j++) {\n            classIndex[classes[j]] = true;\n        }\n        matching = definitions.filter(appliesTo(l.name, classIndex));\n        rules = inheritDefinitions(matching, env);\n        sorted = sortStyles(rules, env);\n\n        for (var k = 0, rule, style_name; k < sorted.length; k++) {\n            rule = sorted[k];\n            style_name = l.name + (rule.attachment !== '__default__' ? '-' + rule.attachment : '');\n\n            // env.effects can be modified by this call\n            var styleXML = carto.tree.StyleXML(style_name, rule.attachment, rule, env);\n\n            if (styleXML) {\n                output.push(styleXML);\n                styles.push(style_name);\n            }\n        }\n\n        output.push(carto.tree.LayerXML(l, styles));\n    }\n\n    output.unshift(env.effects.map(function(e) {\n        return e.toXML(env);\n    }).join('\\n'));\n\n    var map_properties = getMapProperties(m, definitions, env);\n\n    // Exit on errors.\n    if (env.errors) throw env.errors;\n\n    // Pass TileJSON and other custom parameters through to Mapnik XML.\n    var parameters = _.reduce(m, function(memo, v, k) {\n        if (!v && v !== 0) return memo;\n\n        switch (k) {\n        // Known skippable properties.\n        case 'srs':\n        case 'Layer':\n        case 'Stylesheet':\n            break;\n        // Non URL-bound TileJSON properties.\n        case 'bounds':\n        case 'center':\n        case 'minzoom':\n        case 'maxzoom':\n        case 'version':\n            memo.push('  <Parameter name=\"' + k + '\">' + v + '</Parameter>');\n            break;\n        // Properties that require CDATA.\n        case 'name':\n        case 'description':\n        case 'legend':\n        case 'attribution':\n        case 'template':\n            memo.push('  <Parameter name=\"' + k + '\"><![CDATA[' + v + ']]></Parameter>');\n            break;\n        // Mapnik image format.\n        case 'format':\n            memo.push('  <Parameter name=\"' + k + '\">' + v + '</Parameter>');\n            break;\n        // Mapnik interactivity settings.\n        case 'interactivity':\n            memo.push('  <Parameter name=\"interactivity_layer\">' + v.layer + '</Parameter>');\n            memo.push('  <Parameter name=\"interactivity_fields\">' + v.fields + '</Parameter>');\n            break;\n        // Support any additional scalar properties.\n        default:\n            if ('string' === typeof v) {\n                memo.push('  <Parameter name=\"' + k + '\"><![CDATA[' + v + ']]></Parameter>');\n            } else if ('number' === typeof v) {\n                memo.push('  <Parameter name=\"' + k + '\">' + v + '</Parameter>');\n            } else if ('boolean' === typeof v) {\n                memo.push('  <Parameter name=\"' + k + '\">' + v + '</Parameter>');\n            }\n            break;\n        }\n        return memo;\n    }, []);\n    if (parameters.length) output.unshift(\n        '<Parameters>\\n' +\n        parameters.join('\\n') +\n        '\\n</Parameters>\\n'\n    );\n\n    var properties = _.map(map_properties, function(v) { return ' ' + v; }).join('');\n\n    output.unshift(\n        '<?xml version=\"1.0\" ' +\n        'encoding=\"utf-8\"?>\\n' +\n        '<!DOCTYPE Map[]>\\n' +\n        '<Map' + properties +'>\\n');\n    output.push('</Map>');\n    return output.join('\\n');\n};\n\n/**\n * This function currently modifies 'current'\n * @param {Array}  current  current list of rules\n * @param {Object} definition a Definition object to add to the rules\n * @param {Object} byFilter an object/dictionary of existing filters. This is\n * actually keyed `attachment->filter`\n * @param {Object} env the current environment\n*/\nfunction addRules(current, definition, byFilter, env) {\n    var newFilters = definition.filters,\n        newRules = definition.rules,\n        updatedFilters, clone, previous;\n\n    // The current definition might have been split up into\n    // multiple definitions already.\n    for (var k = 0; k < current.length; k++) {\n        updatedFilters = current[k].filters.cloneWith(newFilters);\n        if (updatedFilters) {\n            previous = byFilter[updatedFilters];\n            if (previous) {\n                // There's already a definition with those exact\n                // filters. Add the current definitions' rules\n                // and stop processing it as the existing rule\n                // has already gone down the inheritance chain.\n                previous.addRules(newRules);\n            } else {\n                clone = current[k].clone(updatedFilters);\n                // Make sure that we're only maintaining the clone\n                // when we did actually add rules. If not, there's\n                // no need to keep the clone around.\n                if (clone.addRules(newRules)) {\n                    // We inserted an element before this one, so we need\n                    // to make sure that in the next loop iteration, we're\n                    // not performing the same task for this element again,\n                    // hence the k++.\n                    byFilter[updatedFilters] = clone;\n                    current.splice(k, 0, clone);\n                    k++;\n                }\n            }\n        } else if (updatedFilters === null) {\n            // if updatedFilters is null, then adding the filters doesn't\n            // invalidate or split the selector, so we addRules to the\n            // combined selector\n\n            // Filters can be added, but they don't change the\n            // filters. This means we don't have to split the\n            // definition.\n            //\n            // this is cloned here because of shared classes, see\n            // sharedclass.mss\n            current[k] = current[k].clone();\n            current[k].addRules(newRules);\n        }\n        // if updatedFeatures is false, then the filters split the rule,\n        // so they aren't the same inheritance chain\n    }\n    return current;\n}\n\n/**\n * Apply inherited styles from their ancestors to them.\n *\n * called either once per render (in the case of mss) or per layer\n * (for mml)\n *\n * @param {Object} definitions - a list of definitions objects\n *   that contain .rules\n * @param {Object} env - the environment\n * @return {Array<Array>} an array of arrays is returned,\n *   in which each array refers to a specific attachment\n */\nfunction inheritDefinitions(definitions, env) {\n    var inheritTime = +new Date();\n    // definitions are ordered by specificity,\n    // high (index 0) to low\n    var byAttachment = {},\n        byFilter = {};\n    var result = [];\n    var current, previous, attachment;\n\n    // Evaluate the filters specified by each definition with the given\n    // environment to correctly resolve variable references\n    definitions.forEach(function(d) {\n        d.filters.ev(env);\n    });\n\n    for (var i = 0; i < definitions.length; i++) {\n\n        attachment = definitions[i].attachment;\n        current = [definitions[i]];\n\n        if (!byAttachment[attachment]) {\n            byAttachment[attachment] = [];\n            byAttachment[attachment].attachment = attachment;\n            byFilter[attachment] = {};\n            result.push(byAttachment[attachment]);\n        }\n\n        // Iterate over all subsequent rules.\n        for (var j = i + 1; j < definitions.length; j++) {\n            if (definitions[j].attachment === attachment) {\n                // Only inherit rules from the same attachment.\n                current = addRules(current, definitions[j], byFilter[attachment], env);\n            }\n        }\n\n        for (var k = 0; k < current.length; k++) {\n            byFilter[attachment][current[k].filters] = current[k];\n            byAttachment[attachment].push(current[k]);\n        }\n    }\n\n    if (env.benchmark) console.warn('Inheritance time: ' + ((new Date() - inheritTime)) + 'ms');\n\n    return result;\n\n}\n\n// Sort styles by the minimum index of their rules.\n// This sorts a slice of the styles, so it returns a sorted\n// array but does not change the input.\nfunction sortStylesIndex(a, b) { return b.index - a.index; }\nfunction sortStyles(styles, env) {\n    for (var i = 0; i < styles.length; i++) {\n        var style = styles[i];\n        style.index = Infinity;\n        for (var b = 0; b < style.length; b++) {\n            var rules = style[b].rules;\n            for (var r = 0; r < rules.length; r++) {\n                var rule = rules[r];\n                if (rule.index < style.index) {\n                    style.index = rule.index;\n                }\n            }\n        }\n    }\n\n    var result = styles.slice();\n    result.sort(sortStylesIndex);\n    return result;\n}\n\n/**\n * Find a rule like Map { background-color: #fff; },\n * if any, and return a list of properties to be inserted\n * into the <Map element of the resulting XML. Translates\n * properties of the mml object at `m` directly into XML\n * properties.\n *\n * @param {Object} m the mml object.\n * @param {Array} definitions the output of toList.\n * @param {Object} env\n * @return {String} rendered properties.\n */\nfunction getMapProperties(m, definitions, env) {\n    var rules = {};\n    var symbolizers = carto.tree.Reference.data.symbolizers.map;\n\n    _(m).each(function(value, key) {\n        if (key in symbolizers) rules[key] = key + '=\"' + value + '\"';\n    });\n\n    definitions.filter(function(r) {\n        return r.elements.join('') === 'Map';\n    }).forEach(function(r) {\n        for (var i = 0; i < r.rules.length; i++) {\n            var key = r.rules[i].name;\n            if (!(key in symbolizers)) {\n                env.error({\n                    message: 'Rule ' + key + ' not allowed for Map.',\n                    index: r.rules[i].index\n                });\n            }\n            rules[key] = r.rules[i].ev(env).toXML(env);\n        }\n    });\n    return rules;\n}\n\nmodule.exports = carto;\nmodule.exports.addRules = addRules;\nmodule.exports.inheritDefinitions = inheritDefinitions;\nmodule.exports.sortStyles = sortStyles;\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./../../../webpack/buildin/global.js */ 3)))//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 84 */
/* no static exports found */
/* all exports used */
/*!******************************************!*\
  !*** ./~/carto/lib/carto/renderer_js.js ***!
  \******************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global) {(function(carto) {\nvar tree = __webpack_require__(/*! ./tree */ 0);\nvar _ = global._ || __webpack_require__(/*! underscore */ 4);\n\n\nfunction CartoCSS(style, options) {\n  this.options = options || {};\n  this.imageURLs = [];\n  if(style) {\n    this.setStyle(style);\n  }\n}\n\nCartoCSS.Layer = function(shader, options) {\n  this.options = options;\n  this.shader = shader;\n};\n\n\nCartoCSS.Layer.prototype = {\n\n  fullName: function() {\n    return this.shader.attachment;\n  },\n\n  name: function() {\n    return this.fullName().split('::')[0];\n  },\n\n  // frames this layer need to be rendered\n  frames: function() {\n    return this.shader.frames;\n  },\n\n  attachment: function() {\n    return this.fullName().split('::')[1];\n  },\n\n  eval: function(prop) {\n    var p = this.shader[prop];\n    if (!p || !p.style) return;\n    return p.style({}, { zoom: 0, 'frame-offset': 0 });\n  },\n\n  /*\n   * `props`: feature properties\n   * `context`: rendering properties, i.e zoom\n   */\n  getStyle: function(props, context) {\n    var style = {};\n    for(var i in this.shader) {\n      if(i !== 'attachment' && i !== 'zoom' && i !== 'frames' && i !== 'symbolizers') {\n        style[i] = this.shader[i].style(props, context);\n      }\n    }\n    return style;\n  },\n\n  /**\n   * return the symbolizers that need to be rendered with\n   * this style. The order is the rendering order.\n   * @returns a list with 3 possible values 'line', 'marker', 'polygon'\n   */\n  getSymbolizers: function() {\n    return this.shader.symbolizers;\n  },\n\n  /**\n   * returns if the style varies with some feature property.\n   * Useful to optimize rendering\n   */\n  isVariable: function() {\n    for(var i in this.shader) {\n      if(i !== 'attachment' && i !== 'zoom' && i !== 'frames' && i !== 'symbolizers') {\n        if (!this.shader[i].constant) {\n          return true;\n        }\n      }\n    }\n    return false;\n  },\n\n  getShader: function() {\n    return this.shader;\n  },\n\n  /**\n   * returns true if a feature needs to be rendered\n   */\n  filter: function(featureType, props, context) {\n    for(var i in this.shader) {\n     var s = this.shader[i](props, context);\n     if(s) {\n       return true;\n     }\n    }\n    return false;\n  },\n\n  //\n  // given a geoemtry type returns the transformed one acording the CartoCSS\n  // For points there are two kind of types: point and sprite, the first one\n  // is a circle, second one is an image sprite\n  //\n  // the other geometry types are the same than geojson (polygon, linestring...)\n  //\n  transformGeometry: function(type) {\n    return type;\n  },\n\n  transformGeometries: function(geojson) {\n    return geojson;\n  }\n\n};\n\nCartoCSS.prototype = {\n\n  setStyle: function(style) {\n    var layers = this.parse(style);\n    if(!layers) {\n      throw new Error(this.parse_env.errors);\n    }\n    this.layers = layers.map(function(shader) {\n        return new CartoCSS.Layer(shader);\n    });\n  },\n\n  getLayers: function() {\n    return this.layers;\n  },\n\n  getDefault: function() {\n    return this.findLayer({ attachment: '__default__' });\n  },\n\n  findLayer: function(where) {\n    return _.find(this.layers, function(value) {\n      for (var key in where) {\n        var v = value[key];\n        if (typeof(v) === 'function') {\n          v = v.call(value);\n        }\n        if (where[key] !== v) return false;\n      }\n      return true;\n    });\n  },\n\n  _createFn: function(ops) {\n    var body = ops.join('\\n');\n    if(this.options.debug) console.log(body);\n    return Function(\"data\",\"ctx\", \"var _value = null; \" +  body + \"; return _value; \");\n  },\n\n  _compile: function(shader) {\n    if(typeof shader === 'string') {\n        shader = eval(\"(function() { return \" + shader +\"; })()\");\n    }\n    this.shader_src = shader;\n    for(var attr in shader) {\n        var c = mapper[attr];\n        if(c) {\n            this.compiled[c] = eval(\"(function() { return shader[attr]; })();\");\n        }\n    }\n  },\n  getImageURLs: function(){\n    return this.imageURLs;\n  },\n\n  parse: function(cartocss) {\n    var parse_env = {\n      frames: [],\n      errors: [],\n      error: function(obj) {\n        this.errors.push(obj);\n      }\n    };\n    this.parse_env = parse_env;\n\n    var ruleset = null;\n    try {\n      ruleset = (new carto.Parser(parse_env)).parse(cartocss);\n    } catch(e) {\n      // add the style.mss string to match the response from the server\n      parse_env.errors.push(e.message);\n      return;\n    }\n    if(ruleset) {\n\n      function defKey(def) {\n        return def.elements[0] + \"::\" + def.attachment;\n      }\n      var defs = ruleset.toList(parse_env);\n      defs.reverse();\n      // group by elements[0].value::attachment\n      var layers = {};\n      for(var i = 0; i < defs.length; ++i) {\n        var def = defs[i];\n        var key = defKey(def);\n        var layer = layers[key] = (layers[key] || {\n          symbolizers: []\n        });\n\n        for(var u = 0; u<def.rules.length; u++){\n          var rule = def.rules[u];\n            if(rule.name === \"marker-file\" || rule.name === \"point-file\"){\n              var value = rule.value.value[0].value[0].value.value;\n              this.imageURLs.push(value);\n            }\n        }\n\n        layer.frames = [];\n        layer.zoom = tree.Zoom.all;\n        var props = def.toJS(parse_env);\n        if (this.options.debug) console.log(\"props\", props);\n        for(var v in props) {\n          var lyr = layer[v] = layer[v] || {\n            constant: false,\n            symbolizer: null,\n            js: [],\n            index: 0\n          };\n          // build javascript statements\n          lyr.js.push(props[v].map(function(a) { return a.js; }).join('\\n'));\n          // get symbolizer for prop\n          lyr.symbolizer = _.first(props[v].map(function(a) { return a.symbolizer; }));\n          // serach the max index to know rendering order\n          lyr.index = _.max(props[v].map(function(a) { return a.index; }).concat(lyr.index));\n          lyr.constant = !_.any(props[v].map(function(a) { return !a.constant; }));\n        }\n      }\n\n      var ordered_layers = [];\n      if (this.options.debug) console.log(layers);\n\n      var done = {};\n      for(var i = 0; i < defs.length; ++i) {\n        var def = defs[i];\n\n        if (this.options.strict) {\n          def.toXML(parse_env, {});\n          if (parse_env.errors.message) {\n            throw new Error(parse_env.errors.message);\n          }\n        }\n\n        var k = defKey(def);\n        var layer = layers[k];\n        if(!done[k]) {\n          if(this.options.debug) console.log(\"**\", k);\n          for(var prop in layer) {\n            if (prop !== 'zoom' && prop !== 'frames' && prop !== 'symbolizers') {\n              if(this.options.debug) console.log(\"*\", prop);\n              layer[prop].style = this._createFn(layer[prop].js);\n              layer.symbolizers.push(layer[prop].symbolizer);\n              layer.symbolizers = _.uniq(layer.symbolizers);\n            }\n          }\n          layer.attachment = k;\n          ordered_layers.push(layer);\n          done[k] = true;\n        }\n        layer.zoom |= def.zoom;\n        layer.frames.push(def.frame_offset);\n      }\n\n      // uniq the frames\n      for(i = 0; i < ordered_layers.length; ++i) {\n        ordered_layers[i].frames = _.uniq(ordered_layers[i].frames);\n      }\n\n      return ordered_layers;\n\n    }\n    return null;\n  }\n};\n\n\ncarto.RendererJS = function (options) {\n    this.options = options || {};\n    this.options.mapnik_version = this.options.mapnik_version || 'latest';\n    this.reference = this.options.reference || __webpack_require__(/*! ./torque-reference */ 69).version.latest;\n    this.options.strict = this.options.hasOwnProperty('strict') ? this.options.strict : false;\n};\n\n// Prepare a javascript object which contains the layers\ncarto.RendererJS.prototype.render = function render(cartocss, callback) {\n    tree.Reference.setData(this.reference);\n    return new CartoCSS(cartocss, this.options);\n}\n\nif(true) {\n  module.exports = carto.RendererJS;\n}\n\n\n})(__webpack_require__(/*! ../carto */ 27));\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./../../../webpack/buildin/global.js */ 3)))//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 85 */
/* no static exports found */
/* all exports used */
/*!****************************************!*\
  !*** ./~/carto/lib/carto/tree/call.js ***!
  \****************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global) {(function(tree) {\nvar _ = global._ || __webpack_require__(/*! underscore */ 4);\ntree.Call = function Call(name, args, index) {\n    this.name = name;\n    this.args = args;\n    this.index = index;\n};\n\ntree.Call.prototype = {\n    is: 'call',\n    // When evuating a function call,\n    // we either find the function in `tree.functions` [1],\n    // in which case we call it, passing the  evaluated arguments,\n    // or we simply print it out as it appeared originally [2].\n    // The *functions.js* file contains the built-in functions.\n    // The reason why we evaluate the arguments, is in the case where\n    // we try to pass a variable to a function, like: `saturate(@color)`.\n    // The function should receive the value, not the variable.\n    'ev': function(env) {\n        var args = this.args.map(function(a) { return a.ev(env); });\n\n        for (var i = 0; i < args.length; i++) {\n            if (args[i].is === 'undefined') {\n                return {\n                    is: 'undefined',\n                    value: 'undefined'\n                };\n            }\n        }\n\n        if (this.name in tree.functions) {\n            if (tree.functions[this.name].length <= args.length) {\n                var val = tree.functions[this.name].apply(tree.functions, args);\n                if (val === null) {\n                    env.error({\n                        message: 'incorrect arguments given to ' + this.name + '()',\n                        index: this.index,\n                        type: 'runtime',\n                        filename: this.filename\n                    });\n                    return { is: 'undefined', value: 'undefined' };\n                }\n                return val;\n            } else {\n                env.error({\n                    message: 'incorrect number of arguments for ' + this.name +\n                        '(). ' + tree.functions[this.name].length + ' expected.',\n                    index: this.index,\n                    type: 'runtime',\n                    filename: this.filename\n                });\n                return {\n                    is: 'undefined',\n                    value: 'undefined'\n                };\n            }\n        } else {\n            var fn = tree.Reference.mapnikFunctions[this.name];\n            if (fn === undefined) {\n                var functions = _.pairs(tree.Reference.mapnikFunctions);\n                // cheap closest, needs improvement.\n                var name = this.name;\n                var mean = functions.map(function(f) {\n                    return [f[0], tree.Reference.editDistance(name, f[0]), f[1]];\n                }).sort(function(a, b) {\n                    return a[1] - b[1];\n                });\n                env.error({\n                    message: 'unknown function ' + this.name + '(), did you mean ' +\n                        mean[0][0] + '(' + mean[0][2] + ')',\n                    index: this.index,\n                    type: 'runtime',\n                    filename: this.filename\n                });\n                return {\n                    is: 'undefined',\n                    value: 'undefined'\n                };\n            }\n            if (fn !== args.length &&\n                !(Array.isArray(fn) && _.include(fn, args.length)) &&\n                // support variable-arg functions like `colorize-alpha`\n                fn !== -1) {\n                env.error({\n                    message: 'function ' + this.name + '() takes ' +\n                        fn + ' arguments and was given ' + args.length,\n                    index: this.index,\n                    type: 'runtime',\n                    filename: this.filename\n                });\n                return {\n                    is: 'undefined',\n                    value: 'undefined'\n                };\n            } else {\n                // Save the evaluated versions of arguments\n                this.args = args;\n                return this;\n            }\n        }\n    },\n\n    toString: function(env, format) {\n        if (this.args.length) {\n            return this.name + '(' + this.args.join(',') + ')';\n        } else {\n            return this.name;\n        }\n    }\n};\n\n})(__webpack_require__(/*! ../tree */ 0));\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./../../../../webpack/buildin/global.js */ 3)))//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODUuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NhcnRvL2xpYi9jYXJ0by90cmVlL2NhbGwuanM/ODkwMCJdLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24odHJlZSkge1xudmFyIF8gPSBnbG9iYWwuXyB8fCByZXF1aXJlKCd1bmRlcnNjb3JlJyk7XG50cmVlLkNhbGwgPSBmdW5jdGlvbiBDYWxsKG5hbWUsIGFyZ3MsIGluZGV4KSB7XG4gICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICB0aGlzLmFyZ3MgPSBhcmdzO1xuICAgIHRoaXMuaW5kZXggPSBpbmRleDtcbn07XG5cbnRyZWUuQ2FsbC5wcm90b3R5cGUgPSB7XG4gICAgaXM6ICdjYWxsJyxcbiAgICAvLyBXaGVuIGV2dWF0aW5nIGEgZnVuY3Rpb24gY2FsbCxcbiAgICAvLyB3ZSBlaXRoZXIgZmluZCB0aGUgZnVuY3Rpb24gaW4gYHRyZWUuZnVuY3Rpb25zYCBbMV0sXG4gICAgLy8gaW4gd2hpY2ggY2FzZSB3ZSBjYWxsIGl0LCBwYXNzaW5nIHRoZSAgZXZhbHVhdGVkIGFyZ3VtZW50cyxcbiAgICAvLyBvciB3ZSBzaW1wbHkgcHJpbnQgaXQgb3V0IGFzIGl0IGFwcGVhcmVkIG9yaWdpbmFsbHkgWzJdLlxuICAgIC8vIFRoZSAqZnVuY3Rpb25zLmpzKiBmaWxlIGNvbnRhaW5zIHRoZSBidWlsdC1pbiBmdW5jdGlvbnMuXG4gICAgLy8gVGhlIHJlYXNvbiB3aHkgd2UgZXZhbHVhdGUgdGhlIGFyZ3VtZW50cywgaXMgaW4gdGhlIGNhc2Ugd2hlcmVcbiAgICAvLyB3ZSB0cnkgdG8gcGFzcyBhIHZhcmlhYmxlIHRvIGEgZnVuY3Rpb24sIGxpa2U6IGBzYXR1cmF0ZShAY29sb3IpYC5cbiAgICAvLyBUaGUgZnVuY3Rpb24gc2hvdWxkIHJlY2VpdmUgdGhlIHZhbHVlLCBub3QgdGhlIHZhcmlhYmxlLlxuICAgICdldic6IGZ1bmN0aW9uKGVudikge1xuICAgICAgICB2YXIgYXJncyA9IHRoaXMuYXJncy5tYXAoZnVuY3Rpb24oYSkgeyByZXR1cm4gYS5ldihlbnYpOyB9KTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChhcmdzW2ldLmlzID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIGlzOiAndW5kZWZpbmVkJyxcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICd1bmRlZmluZWQnXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLm5hbWUgaW4gdHJlZS5mdW5jdGlvbnMpIHtcbiAgICAgICAgICAgIGlmICh0cmVlLmZ1bmN0aW9uc1t0aGlzLm5hbWVdLmxlbmd0aCA8PSBhcmdzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHZhciB2YWwgPSB0cmVlLmZ1bmN0aW9uc1t0aGlzLm5hbWVdLmFwcGx5KHRyZWUuZnVuY3Rpb25zLCBhcmdzKTtcbiAgICAgICAgICAgICAgICBpZiAodmFsID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGVudi5lcnJvcih7XG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAnaW5jb3JyZWN0IGFyZ3VtZW50cyBnaXZlbiB0byAnICsgdGhpcy5uYW1lICsgJygpJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4OiB0aGlzLmluZGV4LFxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ3J1bnRpbWUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgZmlsZW5hbWU6IHRoaXMuZmlsZW5hbWVcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7IGlzOiAndW5kZWZpbmVkJywgdmFsdWU6ICd1bmRlZmluZWQnIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiB2YWw7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGVudi5lcnJvcih7XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdpbmNvcnJlY3QgbnVtYmVyIG9mIGFyZ3VtZW50cyBmb3IgJyArIHRoaXMubmFtZSArXG4gICAgICAgICAgICAgICAgICAgICAgICAnKCkuICcgKyB0cmVlLmZ1bmN0aW9uc1t0aGlzLm5hbWVdLmxlbmd0aCArICcgZXhwZWN0ZWQuJyxcbiAgICAgICAgICAgICAgICAgICAgaW5kZXg6IHRoaXMuaW5kZXgsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdydW50aW1lJyxcbiAgICAgICAgICAgICAgICAgICAgZmlsZW5hbWU6IHRoaXMuZmlsZW5hbWVcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBpczogJ3VuZGVmaW5lZCcsXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiAndW5kZWZpbmVkJ1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgZm4gPSB0cmVlLlJlZmVyZW5jZS5tYXBuaWtGdW5jdGlvbnNbdGhpcy5uYW1lXTtcbiAgICAgICAgICAgIGlmIChmbiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgdmFyIGZ1bmN0aW9ucyA9IF8ucGFpcnModHJlZS5SZWZlcmVuY2UubWFwbmlrRnVuY3Rpb25zKTtcbiAgICAgICAgICAgICAgICAvLyBjaGVhcCBjbG9zZXN0LCBuZWVkcyBpbXByb3ZlbWVudC5cbiAgICAgICAgICAgICAgICB2YXIgbmFtZSA9IHRoaXMubmFtZTtcbiAgICAgICAgICAgICAgICB2YXIgbWVhbiA9IGZ1bmN0aW9ucy5tYXAoZnVuY3Rpb24oZikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gW2ZbMF0sIHRyZWUuUmVmZXJlbmNlLmVkaXREaXN0YW5jZShuYW1lLCBmWzBdKSwgZlsxXV07XG4gICAgICAgICAgICAgICAgfSkuc29ydChmdW5jdGlvbihhLCBiKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBhWzFdIC0gYlsxXTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBlbnYuZXJyb3Ioe1xuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAndW5rbm93biBmdW5jdGlvbiAnICsgdGhpcy5uYW1lICsgJygpLCBkaWQgeW91IG1lYW4gJyArXG4gICAgICAgICAgICAgICAgICAgICAgICBtZWFuWzBdWzBdICsgJygnICsgbWVhblswXVsyXSArICcpJyxcbiAgICAgICAgICAgICAgICAgICAgaW5kZXg6IHRoaXMuaW5kZXgsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdydW50aW1lJyxcbiAgICAgICAgICAgICAgICAgICAgZmlsZW5hbWU6IHRoaXMuZmlsZW5hbWVcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBpczogJ3VuZGVmaW5lZCcsXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiAndW5kZWZpbmVkJ1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZm4gIT09IGFyZ3MubGVuZ3RoICYmXG4gICAgICAgICAgICAgICAgIShBcnJheS5pc0FycmF5KGZuKSAmJiBfLmluY2x1ZGUoZm4sIGFyZ3MubGVuZ3RoKSkgJiZcbiAgICAgICAgICAgICAgICAvLyBzdXBwb3J0IHZhcmlhYmxlLWFyZyBmdW5jdGlvbnMgbGlrZSBgY29sb3JpemUtYWxwaGFgXG4gICAgICAgICAgICAgICAgZm4gIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgZW52LmVycm9yKHtcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogJ2Z1bmN0aW9uICcgKyB0aGlzLm5hbWUgKyAnKCkgdGFrZXMgJyArXG4gICAgICAgICAgICAgICAgICAgICAgICBmbiArICcgYXJndW1lbnRzIGFuZCB3YXMgZ2l2ZW4gJyArIGFyZ3MubGVuZ3RoLFxuICAgICAgICAgICAgICAgICAgICBpbmRleDogdGhpcy5pbmRleCxcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ3J1bnRpbWUnLFxuICAgICAgICAgICAgICAgICAgICBmaWxlbmFtZTogdGhpcy5maWxlbmFtZVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIGlzOiAndW5kZWZpbmVkJyxcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICd1bmRlZmluZWQnXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gU2F2ZSB0aGUgZXZhbHVhdGVkIHZlcnNpb25zIG9mIGFyZ3VtZW50c1xuICAgICAgICAgICAgICAgIHRoaXMuYXJncyA9IGFyZ3M7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgdG9TdHJpbmc6IGZ1bmN0aW9uKGVudiwgZm9ybWF0KSB7XG4gICAgICAgIGlmICh0aGlzLmFyZ3MubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5uYW1lICsgJygnICsgdGhpcy5hcmdzLmpvaW4oJywnKSArICcpJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm5hbWU7XG4gICAgICAgIH1cbiAgICB9XG59O1xuXG59KShyZXF1aXJlKCcuLi90cmVlJykpO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NhcnRvL2xpYi9jYXJ0by90cmVlL2NhbGwuanNcbi8vIG1vZHVsZSBpZCA9IDg1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0EiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 86 */
/* no static exports found */
/* all exports used */
/*!*****************************************!*\
  !*** ./~/carto/lib/carto/tree/color.js ***!
  \*****************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("(function(tree) {\n// RGB Colors - #ff0014, #eee\n// can be initialized with a 3 or 6 char string or a 3 or 4 element\n// numerical array\ntree.Color = function Color(rgb, a) {\n    // The end goal here, is to parse the arguments\n    // into an integer triplet, such as `128, 255, 0`\n    //\n    // This facilitates operations and conversions.\n    if (Array.isArray(rgb)) {\n        this.rgb = rgb.slice(0, 3);\n    } else if (rgb.length == 6) {\n        this.rgb = rgb.match(/.{2}/g).map(function(c) {\n            return parseInt(c, 16);\n        });\n    } else {\n        this.rgb = rgb.split('').map(function(c) {\n            return parseInt(c + c, 16);\n        });\n    }\n\n    if (typeof(a) === 'number') {\n        this.alpha = a;\n    } else if (rgb.length === 4) {\n        this.alpha = rgb[3];\n    } else {\n        this.alpha = 1;\n    }\n};\n\ntree.Color.prototype = {\n    is: 'color',\n    'ev': function() { return this; },\n\n    // If we have some transparency, the only way to represent it\n    // is via `rgba`. Otherwise, we use the hex representation,\n    // which has better compatibility with older browsers.\n    // Values are capped between `0` and `255`, rounded and zero-padded.\n    toString: function() {\n        if (this.alpha < 1.0) {\n            return 'rgba(' + this.rgb.map(function(c) {\n                return Math.round(c);\n            }).concat(this.alpha).join(', ') + ')';\n        } else {\n            return '#' + this.rgb.map(function(i) {\n                i = Math.round(i);\n                i = (i > 255 ? 255 : (i < 0 ? 0 : i)).toString(16);\n                return i.length === 1 ? '0' + i : i;\n            }).join('');\n        }\n    },\n\n    // Operations have to be done per-channel, if not,\n    // channels will spill onto each other. Once we have\n    // our result, in the form of an integer triplet,\n    // we create a new Color node to hold the result.\n    operate: function(env, op, other) {\n        var result = [];\n\n        if (! (other instanceof tree.Color)) {\n            other = other.toColor();\n        }\n\n        for (var c = 0; c < 3; c++) {\n            result[c] = tree.operate(op, this.rgb[c], other.rgb[c]);\n        }\n        return new tree.Color(result);\n    },\n\n    toHSL: function() {\n        var r = this.rgb[0] / 255,\n            g = this.rgb[1] / 255,\n            b = this.rgb[2] / 255,\n            a = this.alpha;\n\n        var max = Math.max(r, g, b), min = Math.min(r, g, b);\n        var h, s, l = (max + min) / 2, d = max - min;\n\n        if (max === min) {\n            h = s = 0;\n        } else {\n            s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n\n            switch (max) {\n                case r: h = (g - b) / d + (g < b ? 6 : 0); break;\n                case g: h = (b - r) / d + 2; break;\n                case b: h = (r - g) / d + 4; break;\n            }\n            h /= 6;\n        }\n        return { h: h * 360, s: s, l: l, a: a };\n    }\n};\n\n})(__webpack_require__(/*! ../tree */ 0));\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODYuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NhcnRvL2xpYi9jYXJ0by90cmVlL2NvbG9yLmpzP2JjZjIiXSwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uKHRyZWUpIHtcbi8vIFJHQiBDb2xvcnMgLSAjZmYwMDE0LCAjZWVlXG4vLyBjYW4gYmUgaW5pdGlhbGl6ZWQgd2l0aCBhIDMgb3IgNiBjaGFyIHN0cmluZyBvciBhIDMgb3IgNCBlbGVtZW50XG4vLyBudW1lcmljYWwgYXJyYXlcbnRyZWUuQ29sb3IgPSBmdW5jdGlvbiBDb2xvcihyZ2IsIGEpIHtcbiAgICAvLyBUaGUgZW5kIGdvYWwgaGVyZSwgaXMgdG8gcGFyc2UgdGhlIGFyZ3VtZW50c1xuICAgIC8vIGludG8gYW4gaW50ZWdlciB0cmlwbGV0LCBzdWNoIGFzIGAxMjgsIDI1NSwgMGBcbiAgICAvL1xuICAgIC8vIFRoaXMgZmFjaWxpdGF0ZXMgb3BlcmF0aW9ucyBhbmQgY29udmVyc2lvbnMuXG4gICAgaWYgKEFycmF5LmlzQXJyYXkocmdiKSkge1xuICAgICAgICB0aGlzLnJnYiA9IHJnYi5zbGljZSgwLCAzKTtcbiAgICB9IGVsc2UgaWYgKHJnYi5sZW5ndGggPT0gNikge1xuICAgICAgICB0aGlzLnJnYiA9IHJnYi5tYXRjaCgvLnsyfS9nKS5tYXAoZnVuY3Rpb24oYykge1xuICAgICAgICAgICAgcmV0dXJuIHBhcnNlSW50KGMsIDE2KTtcbiAgICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5yZ2IgPSByZ2Iuc3BsaXQoJycpLm1hcChmdW5jdGlvbihjKSB7XG4gICAgICAgICAgICByZXR1cm4gcGFyc2VJbnQoYyArIGMsIDE2KTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZihhKSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgdGhpcy5hbHBoYSA9IGE7XG4gICAgfSBlbHNlIGlmIChyZ2IubGVuZ3RoID09PSA0KSB7XG4gICAgICAgIHRoaXMuYWxwaGEgPSByZ2JbM107XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5hbHBoYSA9IDE7XG4gICAgfVxufTtcblxudHJlZS5Db2xvci5wcm90b3R5cGUgPSB7XG4gICAgaXM6ICdjb2xvcicsXG4gICAgJ2V2JzogZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9LFxuXG4gICAgLy8gSWYgd2UgaGF2ZSBzb21lIHRyYW5zcGFyZW5jeSwgdGhlIG9ubHkgd2F5IHRvIHJlcHJlc2VudCBpdFxuICAgIC8vIGlzIHZpYSBgcmdiYWAuIE90aGVyd2lzZSwgd2UgdXNlIHRoZSBoZXggcmVwcmVzZW50YXRpb24sXG4gICAgLy8gd2hpY2ggaGFzIGJldHRlciBjb21wYXRpYmlsaXR5IHdpdGggb2xkZXIgYnJvd3NlcnMuXG4gICAgLy8gVmFsdWVzIGFyZSBjYXBwZWQgYmV0d2VlbiBgMGAgYW5kIGAyNTVgLCByb3VuZGVkIGFuZCB6ZXJvLXBhZGRlZC5cbiAgICB0b1N0cmluZzogZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICh0aGlzLmFscGhhIDwgMS4wKSB7XG4gICAgICAgICAgICByZXR1cm4gJ3JnYmEoJyArIHRoaXMucmdiLm1hcChmdW5jdGlvbihjKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIE1hdGgucm91bmQoYyk7XG4gICAgICAgICAgICB9KS5jb25jYXQodGhpcy5hbHBoYSkuam9pbignLCAnKSArICcpJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiAnIycgKyB0aGlzLnJnYi5tYXAoZnVuY3Rpb24oaSkge1xuICAgICAgICAgICAgICAgIGkgPSBNYXRoLnJvdW5kKGkpO1xuICAgICAgICAgICAgICAgIGkgPSAoaSA+IDI1NSA/IDI1NSA6IChpIDwgMCA/IDAgOiBpKSkudG9TdHJpbmcoMTYpO1xuICAgICAgICAgICAgICAgIHJldHVybiBpLmxlbmd0aCA9PT0gMSA/ICcwJyArIGkgOiBpO1xuICAgICAgICAgICAgfSkuam9pbignJyk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgLy8gT3BlcmF0aW9ucyBoYXZlIHRvIGJlIGRvbmUgcGVyLWNoYW5uZWwsIGlmIG5vdCxcbiAgICAvLyBjaGFubmVscyB3aWxsIHNwaWxsIG9udG8gZWFjaCBvdGhlci4gT25jZSB3ZSBoYXZlXG4gICAgLy8gb3VyIHJlc3VsdCwgaW4gdGhlIGZvcm0gb2YgYW4gaW50ZWdlciB0cmlwbGV0LFxuICAgIC8vIHdlIGNyZWF0ZSBhIG5ldyBDb2xvciBub2RlIHRvIGhvbGQgdGhlIHJlc3VsdC5cbiAgICBvcGVyYXRlOiBmdW5jdGlvbihlbnYsIG9wLCBvdGhlcikge1xuICAgICAgICB2YXIgcmVzdWx0ID0gW107XG5cbiAgICAgICAgaWYgKCEgKG90aGVyIGluc3RhbmNlb2YgdHJlZS5Db2xvcikpIHtcbiAgICAgICAgICAgIG90aGVyID0gb3RoZXIudG9Db2xvcigpO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yICh2YXIgYyA9IDA7IGMgPCAzOyBjKyspIHtcbiAgICAgICAgICAgIHJlc3VsdFtjXSA9IHRyZWUub3BlcmF0ZShvcCwgdGhpcy5yZ2JbY10sIG90aGVyLnJnYltjXSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyB0cmVlLkNvbG9yKHJlc3VsdCk7XG4gICAgfSxcblxuICAgIHRvSFNMOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHIgPSB0aGlzLnJnYlswXSAvIDI1NSxcbiAgICAgICAgICAgIGcgPSB0aGlzLnJnYlsxXSAvIDI1NSxcbiAgICAgICAgICAgIGIgPSB0aGlzLnJnYlsyXSAvIDI1NSxcbiAgICAgICAgICAgIGEgPSB0aGlzLmFscGhhO1xuXG4gICAgICAgIHZhciBtYXggPSBNYXRoLm1heChyLCBnLCBiKSwgbWluID0gTWF0aC5taW4ociwgZywgYik7XG4gICAgICAgIHZhciBoLCBzLCBsID0gKG1heCArIG1pbikgLyAyLCBkID0gbWF4IC0gbWluO1xuXG4gICAgICAgIGlmIChtYXggPT09IG1pbikge1xuICAgICAgICAgICAgaCA9IHMgPSAwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcyA9IGwgPiAwLjUgPyBkIC8gKDIgLSBtYXggLSBtaW4pIDogZCAvIChtYXggKyBtaW4pO1xuXG4gICAgICAgICAgICBzd2l0Y2ggKG1heCkge1xuICAgICAgICAgICAgICAgIGNhc2UgcjogaCA9IChnIC0gYikgLyBkICsgKGcgPCBiID8gNiA6IDApOyBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIGc6IGggPSAoYiAtIHIpIC8gZCArIDI7IGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgYjogaCA9IChyIC0gZykgLyBkICsgNDsgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBoIC89IDY7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgaDogaCAqIDM2MCwgczogcywgbDogbCwgYTogYSB9O1xuICAgIH1cbn07XG5cbn0pKHJlcXVpcmUoJy4uL3RyZWUnKSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY2FydG8vbGliL2NhcnRvL3RyZWUvY29sb3IuanNcbi8vIG1vZHVsZSBpZCA9IDg2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 87 */
/* no static exports found */
/* all exports used */
/*!*******************************************!*\
  !*** ./~/carto/lib/carto/tree/comment.js ***!
  \*******************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("(function(tree) {\n\ntree.Comment = function Comment(value, silent) {\n    this.value = value;\n    this.silent = !!silent;\n};\n\ntree.Comment.prototype = {\n    toString: function(env) {\n        return '<!--' + this.value + '-->';\n    },\n    'ev': function() { return this; }\n};\n\n})(__webpack_require__(/*! ../tree */ 0));\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODcuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NhcnRvL2xpYi9jYXJ0by90cmVlL2NvbW1lbnQuanM/Y2QzNCJdLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24odHJlZSkge1xuXG50cmVlLkNvbW1lbnQgPSBmdW5jdGlvbiBDb21tZW50KHZhbHVlLCBzaWxlbnQpIHtcbiAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgdGhpcy5zaWxlbnQgPSAhIXNpbGVudDtcbn07XG5cbnRyZWUuQ29tbWVudC5wcm90b3R5cGUgPSB7XG4gICAgdG9TdHJpbmc6IGZ1bmN0aW9uKGVudikge1xuICAgICAgICByZXR1cm4gJzwhLS0nICsgdGhpcy52YWx1ZSArICctLT4nO1xuICAgIH0sXG4gICAgJ2V2JzogZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9XG59O1xuXG59KShyZXF1aXJlKCcuLi90cmVlJykpO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NhcnRvL2xpYi9jYXJ0by90cmVlL2NvbW1lbnQuanNcbi8vIG1vZHVsZSBpZCA9IDg3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 88 */
/* no static exports found */
/* all exports used */
/*!**********************************************!*\
  !*** ./~/carto/lib/carto/tree/definition.js ***!
  \**********************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global) {(function(tree) {\nvar assert = __webpack_require__(/*! assert */ 71),\n    _ = global._ || __webpack_require__(/*! underscore */ 4);\n\n// A definition is the combination of a selector and rules, like\n// #foo {\n//     polygon-opacity:1.0;\n// }\n//\n// The selector can have filters\ntree.Definition = function Definition(selector, rules) {\n    this.elements = selector.elements;\n    assert.ok(selector.filters instanceof tree.Filterset);\n    this.rules = rules;\n    this.ruleIndex = {};\n    for (var i = 0; i < this.rules.length; i++) {\n        if ('zoom' in this.rules[i]) this.rules[i] = this.rules[i].clone();\n        this.rules[i].zoom = selector.zoom;\n        this.ruleIndex[this.rules[i].updateID()] = true;\n    }\n    this.filters = selector.filters;\n    this.zoom = selector.zoom;\n    this.frame_offset = selector.frame_offset;\n    this.attachment = selector.attachment || '__default__';\n    this.specificity = selector.specificity();\n};\n\ntree.Definition.prototype.toString = function() {\n    var str = this.filters.toString();\n    for (var i = 0; i < this.rules.length; i++) {\n        str += '\\n    ' + this.rules[i];\n    }\n    return str;\n};\n\ntree.Definition.prototype.clone = function(filters) {\n    if (filters) assert.ok(filters instanceof tree.Filterset);\n    var clone = Object.create(tree.Definition.prototype);\n    clone.rules = this.rules.slice();\n    clone.ruleIndex = _.clone(this.ruleIndex);\n    clone.filters = filters ? filters : this.filters.clone();\n    clone.attachment = this.attachment;\n    return clone;\n};\n\ntree.Definition.prototype.addRules = function(rules) {\n    var added = 0;\n\n    // Add only unique rules.\n    for (var i = 0; i < rules.length; i++) {\n        if (!this.ruleIndex[rules[i].id]) {\n            this.rules.push(rules[i]);\n            this.ruleIndex[rules[i].id] = true;\n            added++;\n        }\n    }\n\n    return added;\n};\n\n// Determine whether this selector matches a given id\n// and array of classes, by determining whether\n// all elements it contains match.\ntree.Definition.prototype.appliesTo = function(id, classes) {\n    for (var i = 0, l = this.elements.length; i < l; i++) {\n        var elem = this.elements[i];\n        if (!(elem.wildcard ||\n            (elem.type === 'class' && classes[elem.clean]) ||\n            (elem.type === 'id' && id === elem.clean))) return false;\n    }\n    return true;\n};\n\nfunction symbolizerName(symbolizer) {\n    function capitalize(str) { return str[1].toUpperCase(); }\n    return symbolizer.charAt(0).toUpperCase() +\n           symbolizer.slice(1).replace(/\\-./, capitalize) + 'Symbolizer';\n}\n\n// Get a simple list of the symbolizers, in order\nfunction symbolizerList(sym_order) {\n    return sym_order.sort(function(a, b) { return a[1] - b[1]; })\n        .map(function(v) { return v[0]; });\n}\n\ntree.Definition.prototype.symbolizersToXML = function(env, symbolizers, zoom) {\n    var xml = zoom.toXML(env).join('') + this.filters.toXML(env);\n\n    // Sort symbolizers by the index of their first property definition\n    var sym_order = [], indexes = [];\n    for (var key in symbolizers) {\n        indexes = [];\n        for (var prop in symbolizers[key]) {\n            indexes.push(symbolizers[key][prop].index);\n        }\n        var min_idx = Math.min.apply(Math, indexes);\n        sym_order.push([key, min_idx]);\n    }\n\n    sym_order = symbolizerList(sym_order);\n    var sym_count = 0;\n\n    for (var i = 0; i < sym_order.length; i++) {\n        var attributes = symbolizers[sym_order[i]];\n        var symbolizer = sym_order[i].split('/').pop();\n\n        // Skip the magical * symbolizer which is used for universal properties\n        // which are bubbled up to Style elements intead of Symbolizer elements.\n        if (symbolizer === '*') continue;\n        sym_count++;\n\n        var fail = tree.Reference.requiredProperties(symbolizer, attributes);\n        if (fail) {\n            var rule = attributes[Object.keys(attributes).shift()];\n            env.error({\n                message: fail,\n                index: rule.index,\n                filename: rule.filename\n            });\n        }\n\n        var name = symbolizerName(symbolizer);\n\n        var selfclosing = true, tagcontent;\n        xml += '    <' + name + ' ';\n        for (var j in attributes) {\n            if (symbolizer === 'map') env.error({\n                message: 'Map properties are not permitted in other rules',\n                index: attributes[j].index,\n                filename: attributes[j].filename\n            });\n            var x = tree.Reference.selector(attributes[j].name);\n            if (x && x.serialization && x.serialization === 'content') {\n                selfclosing = false;\n                tagcontent = attributes[j].ev(env).toXML(env, true);\n            } else if (x && x.serialization && x.serialization === 'tag') {\n                selfclosing = false;\n                tagcontent = attributes[j].ev(env).toXML(env, true);\n            } else {\n                xml += attributes[j].ev(env).toXML(env) + ' ';\n            }\n        }\n        if (selfclosing) {\n            xml += '/>\\n';\n        } else if (typeof tagcontent !== \"undefined\") {\n            if (tagcontent.indexOf('<') != -1) {\n                xml += '>' + tagcontent + '</' + name + '>\\n';\n            } else {\n                xml += '><![CDATA[' + tagcontent + ']]></' + name + '>\\n';\n            }\n        }\n    }\n    if (!sym_count || !xml) return '';\n    return '  <Rule>\\n' + xml + '  </Rule>\\n';\n};\n\n// Take a zoom range of zooms and 'i', the index of a rule in this.rules,\n// and finds all applicable symbolizers\ntree.Definition.prototype.collectSymbolizers = function(zooms, i) {\n    var symbolizers = {}, child;\n\n    for (var j = i; j < this.rules.length; j++) {\n        child = this.rules[j];\n        var key = child.instance + '/' + child.symbolizer;\n        if (zooms.current & child.zoom &&\n           (!(key in symbolizers) ||\n           (!(child.name in symbolizers[key])))) {\n            zooms.current &= child.zoom;\n            if (!(key in symbolizers)) {\n                symbolizers[key] = {};\n            }\n            symbolizers[key][child.name] = child;\n        }\n    }\n\n    if (Object.keys(symbolizers).length) {\n        zooms.rule &= (zooms.available &= ~zooms.current);\n        return symbolizers;\n    }\n};\n\n// The tree.Zoom.toString function ignores the holes in zoom ranges and outputs\n// scaledenominators that cover the whole range from the first to last bit set.\n// This algorithm can produces zoom ranges that may have holes. However,\n// when using the filter-mode=\"first\", more specific zoom filters will always\n// end up before broader ranges. The filter-mode will pick those first before\n// resorting to the zoom range with the hole and stop processing further rules.\ntree.Definition.prototype.toXML = function(env, existing) {\n    var filter = this.filters.toString();\n    if (!(filter in existing)) existing[filter] = tree.Zoom.all;\n\n    var available = tree.Zoom.all, xml = '', zoom, symbolizers,\n        zooms = { available: tree.Zoom.all };\n    for (var i = 0; i < this.rules.length && available; i++) {\n        zooms.rule = this.rules[i].zoom;\n        if (!(existing[filter] & zooms.rule)) continue;\n\n        while (zooms.current = zooms.rule & available) {\n            if (symbolizers = this.collectSymbolizers(zooms, i)) {\n                if (!(existing[filter] & zooms.current)) continue;\n                xml += this.symbolizersToXML(env, symbolizers,\n                    (new tree.Zoom()).setZoom(existing[filter] & zooms.current));\n                existing[filter] &= ~zooms.current;\n            }\n        }\n    }\n\n    return xml;\n};\n\ntree.Definition.prototype.toJS = function(env) {\n  var shaderAttrs = {};\n\n  // merge conditions from filters with zoom condition of the\n  // definition\n  var zoom = \"(\" + this.zoom + \" & (1 << ctx.zoom))\";\n  var frame_offset = this.frame_offset;\n  var _if = this.filters.toJS(env);\n  var filters = [zoom];\n  if(_if) filters.push(_if);\n  if(frame_offset) filters.push('ctx[\"frame-offset\"] === ' + frame_offset);\n  _if = filters.join(\" && \");\n  _.each(this.rules, function(rule) {\n      if(rule instanceof tree.Rule) {\n        shaderAttrs[rule.name] = shaderAttrs[rule.name] || [];\n\n        var r = {\n          index: rule.index,\n          symbolizer: rule.symbolizer\n        };\n\n        if (_if) {\n          r.js = \"if(\" + _if + \"){\" + rule.value.toJS(env) + \"}\"\n        } else {\n          r.js = rule.value.toJS(env);\n        }\n\n        r.constant = rule.value.ev(env).is !== 'field';\n        r.filtered = !!_if;\n\n        shaderAttrs[rule.name].push(r);\n      } else {\n        throw new Error(\"Ruleset not supported\");\n        //if (rule instanceof tree.Ruleset) {\n          //var sh = rule.toJS(env);\n          //for(var v in sh) {\n            //shaderAttrs[v] = shaderAttrs[v] || [];\n            //for(var attr in sh[v]) {\n              //shaderAttrs[v].push(sh[v][attr]);\n            //}\n          //}\n        //}\n      }\n  });\n  return shaderAttrs;\n};\n\n\n})(__webpack_require__(/*! ../tree */ 0));\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./../../../../webpack/buildin/global.js */ 3)))//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 89 */
/* no static exports found */
/* all exports used */
/*!*********************************************!*\
  !*** ./~/carto/lib/carto/tree/dimension.js ***!
  \*********************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global) {(function(tree) {\nvar _ = global._ || __webpack_require__(/*! underscore */ 4);\n//\n// A number with a unit\n//\ntree.Dimension = function Dimension(value, unit, index) {\n    this.value = parseFloat(value);\n    this.unit = unit || null;\n    this.index = index;\n};\n\ntree.Dimension.prototype = {\n    is: 'float',\n    physical_units: ['m', 'cm', 'in', 'mm', 'pt', 'pc'],\n    screen_units: ['px', '%'],\n    all_units: ['m', 'cm', 'in', 'mm', 'pt', 'pc', 'px', '%'],\n    densities: {\n        m: 0.0254,\n        mm: 25.4,\n        cm: 2.54,\n        pt: 72,\n        pc: 6\n    },\n    ev: function (env) {\n        if (this.unit && !_.contains(this.all_units, this.unit)) {\n            env.error({\n                message: \"Invalid unit: '\" + this.unit + \"'\",\n                index: this.index\n            });\n            return { is: 'undefined', value: 'undefined' };\n        }\n\n        // normalize units which are not px or %\n        if (this.unit && _.contains(this.physical_units, this.unit)) {\n            if (!env.ppi) {\n                env.error({\n                    message: \"ppi is not set, so metric units can't be used\",\n                    index: this.index\n                });\n                return { is: 'undefined', value: 'undefined' };\n            }\n            // convert all units to inch\n            // convert inch to px using ppi\n            this.value = (this.value / this.densities[this.unit]) * env.ppi;\n            this.unit = 'px';\n        }\n\n        return this;\n    },\n    round: function() {\n        this.value = Math.round(this.value);\n        return this;\n    },\n    toColor: function() {\n        return new tree.Color([this.value, this.value, this.value]);\n    },\n    round: function() {\n        this.value = Math.round(this.value);\n        return this;\n    },\n    toString: function() {\n        return this.value.toString();\n    },\n    operate: function(env, op, other) {\n        if (this.unit === '%' && other.unit !== '%') {\n            env.error({\n                message: 'If two operands differ, the first must not be %',\n                index: this.index\n            });\n            return {\n                is: 'undefined',\n                value: 'undefined'\n            };\n        }\n\n        if (this.unit !== '%' && other.unit === '%') {\n            if (op === '*' || op === '/' || op === '%') {\n                env.error({\n                    message: 'Percent values can only be added or subtracted from other values',\n                    index: this.index\n                });\n                return {\n                    is: 'undefined',\n                    value: 'undefined'\n                };\n            }\n\n            return new tree.Dimension(tree.operate(op,\n                    this.value, this.value * other.value * 0.01),\n                this.unit);\n        }\n\n        //here the operands are either the same (% or undefined or px), or one is undefined and the other is px\n        return new tree.Dimension(tree.operate(op, this.value, other.value),\n            this.unit || other.unit);\n    }\n};\n\n})(__webpack_require__(/*! ../tree */ 0));\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./../../../../webpack/buildin/global.js */ 3)))//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODkuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NhcnRvL2xpYi9jYXJ0by90cmVlL2RpbWVuc2lvbi5qcz9jYmU4Il0sInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbih0cmVlKSB7XG52YXIgXyA9IGdsb2JhbC5fIHx8IHJlcXVpcmUoJ3VuZGVyc2NvcmUnKTtcbi8vXG4vLyBBIG51bWJlciB3aXRoIGEgdW5pdFxuLy9cbnRyZWUuRGltZW5zaW9uID0gZnVuY3Rpb24gRGltZW5zaW9uKHZhbHVlLCB1bml0LCBpbmRleCkge1xuICAgIHRoaXMudmFsdWUgPSBwYXJzZUZsb2F0KHZhbHVlKTtcbiAgICB0aGlzLnVuaXQgPSB1bml0IHx8IG51bGw7XG4gICAgdGhpcy5pbmRleCA9IGluZGV4O1xufTtcblxudHJlZS5EaW1lbnNpb24ucHJvdG90eXBlID0ge1xuICAgIGlzOiAnZmxvYXQnLFxuICAgIHBoeXNpY2FsX3VuaXRzOiBbJ20nLCAnY20nLCAnaW4nLCAnbW0nLCAncHQnLCAncGMnXSxcbiAgICBzY3JlZW5fdW5pdHM6IFsncHgnLCAnJSddLFxuICAgIGFsbF91bml0czogWydtJywgJ2NtJywgJ2luJywgJ21tJywgJ3B0JywgJ3BjJywgJ3B4JywgJyUnXSxcbiAgICBkZW5zaXRpZXM6IHtcbiAgICAgICAgbTogMC4wMjU0LFxuICAgICAgICBtbTogMjUuNCxcbiAgICAgICAgY206IDIuNTQsXG4gICAgICAgIHB0OiA3MixcbiAgICAgICAgcGM6IDZcbiAgICB9LFxuICAgIGV2OiBmdW5jdGlvbiAoZW52KSB7XG4gICAgICAgIGlmICh0aGlzLnVuaXQgJiYgIV8uY29udGFpbnModGhpcy5hbGxfdW5pdHMsIHRoaXMudW5pdCkpIHtcbiAgICAgICAgICAgIGVudi5lcnJvcih7XG4gICAgICAgICAgICAgICAgbWVzc2FnZTogXCJJbnZhbGlkIHVuaXQ6ICdcIiArIHRoaXMudW5pdCArIFwiJ1wiLFxuICAgICAgICAgICAgICAgIGluZGV4OiB0aGlzLmluZGV4XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiB7IGlzOiAndW5kZWZpbmVkJywgdmFsdWU6ICd1bmRlZmluZWQnIH07XG4gICAgICAgIH1cblxuICAgICAgICAvLyBub3JtYWxpemUgdW5pdHMgd2hpY2ggYXJlIG5vdCBweCBvciAlXG4gICAgICAgIGlmICh0aGlzLnVuaXQgJiYgXy5jb250YWlucyh0aGlzLnBoeXNpY2FsX3VuaXRzLCB0aGlzLnVuaXQpKSB7XG4gICAgICAgICAgICBpZiAoIWVudi5wcGkpIHtcbiAgICAgICAgICAgICAgICBlbnYuZXJyb3Ioe1xuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBcInBwaSBpcyBub3Qgc2V0LCBzbyBtZXRyaWMgdW5pdHMgY2FuJ3QgYmUgdXNlZFwiLFxuICAgICAgICAgICAgICAgICAgICBpbmRleDogdGhpcy5pbmRleFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybiB7IGlzOiAndW5kZWZpbmVkJywgdmFsdWU6ICd1bmRlZmluZWQnIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBjb252ZXJ0IGFsbCB1bml0cyB0byBpbmNoXG4gICAgICAgICAgICAvLyBjb252ZXJ0IGluY2ggdG8gcHggdXNpbmcgcHBpXG4gICAgICAgICAgICB0aGlzLnZhbHVlID0gKHRoaXMudmFsdWUgLyB0aGlzLmRlbnNpdGllc1t0aGlzLnVuaXRdKSAqIGVudi5wcGk7XG4gICAgICAgICAgICB0aGlzLnVuaXQgPSAncHgnO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcbiAgICByb3VuZDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMudmFsdWUgPSBNYXRoLnJvdW5kKHRoaXMudmFsdWUpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuICAgIHRvQ29sb3I6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gbmV3IHRyZWUuQ29sb3IoW3RoaXMudmFsdWUsIHRoaXMudmFsdWUsIHRoaXMudmFsdWVdKTtcbiAgICB9LFxuICAgIHJvdW5kOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy52YWx1ZSA9IE1hdGgucm91bmQodGhpcy52YWx1ZSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG4gICAgdG9TdHJpbmc6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy52YWx1ZS50b1N0cmluZygpO1xuICAgIH0sXG4gICAgb3BlcmF0ZTogZnVuY3Rpb24oZW52LCBvcCwgb3RoZXIpIHtcbiAgICAgICAgaWYgKHRoaXMudW5pdCA9PT0gJyUnICYmIG90aGVyLnVuaXQgIT09ICclJykge1xuICAgICAgICAgICAgZW52LmVycm9yKHtcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiAnSWYgdHdvIG9wZXJhbmRzIGRpZmZlciwgdGhlIGZpcnN0IG11c3Qgbm90IGJlICUnLFxuICAgICAgICAgICAgICAgIGluZGV4OiB0aGlzLmluZGV4XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgaXM6ICd1bmRlZmluZWQnLFxuICAgICAgICAgICAgICAgIHZhbHVlOiAndW5kZWZpbmVkJ1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLnVuaXQgIT09ICclJyAmJiBvdGhlci51bml0ID09PSAnJScpIHtcbiAgICAgICAgICAgIGlmIChvcCA9PT0gJyonIHx8IG9wID09PSAnLycgfHwgb3AgPT09ICclJykge1xuICAgICAgICAgICAgICAgIGVudi5lcnJvcih7XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdQZXJjZW50IHZhbHVlcyBjYW4gb25seSBiZSBhZGRlZCBvciBzdWJ0cmFjdGVkIGZyb20gb3RoZXIgdmFsdWVzJyxcbiAgICAgICAgICAgICAgICAgICAgaW5kZXg6IHRoaXMuaW5kZXhcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBpczogJ3VuZGVmaW5lZCcsXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiAndW5kZWZpbmVkJ1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBuZXcgdHJlZS5EaW1lbnNpb24odHJlZS5vcGVyYXRlKG9wLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLnZhbHVlLCB0aGlzLnZhbHVlICogb3RoZXIudmFsdWUgKiAwLjAxKSxcbiAgICAgICAgICAgICAgICB0aGlzLnVuaXQpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy9oZXJlIHRoZSBvcGVyYW5kcyBhcmUgZWl0aGVyIHRoZSBzYW1lICglIG9yIHVuZGVmaW5lZCBvciBweCksIG9yIG9uZSBpcyB1bmRlZmluZWQgYW5kIHRoZSBvdGhlciBpcyBweFxuICAgICAgICByZXR1cm4gbmV3IHRyZWUuRGltZW5zaW9uKHRyZWUub3BlcmF0ZShvcCwgdGhpcy52YWx1ZSwgb3RoZXIudmFsdWUpLFxuICAgICAgICAgICAgdGhpcy51bml0IHx8IG90aGVyLnVuaXQpO1xuICAgIH1cbn07XG5cbn0pKHJlcXVpcmUoJy4uL3RyZWUnKSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY2FydG8vbGliL2NhcnRvL3RyZWUvZGltZW5zaW9uLmpzXG4vLyBtb2R1bGUgaWQgPSA4OVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QSIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 90 */
/* no static exports found */
/* all exports used */
/*!*******************************************!*\
  !*** ./~/carto/lib/carto/tree/element.js ***!
  \*******************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("(function(tree) {\n\n// An element is an id or class selector\ntree.Element = function Element(value) {\n    this.value = value.trim();\n    if (this.value[0] === '#') {\n        this.type = 'id';\n        this.clean = this.value.replace(/^#/, '');\n    }\n    if (this.value[0] === '.') {\n        this.type = 'class';\n        this.clean = this.value.replace(/^\\./, '');\n    }\n    if (this.value.indexOf('*') !== -1) {\n        this.type = 'wildcard';\n    }\n};\n\n// Determine the 'specificity matrix' of this\n// specific selector\ntree.Element.prototype.specificity = function() {\n    return [\n        (this.type === 'id') ? 1 : 0, // a\n        (this.type === 'class') ? 1 : 0  // b\n    ];\n};\n\ntree.Element.prototype.toString = function() { return this.value; };\n\n})(__webpack_require__(/*! ../tree */ 0));\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTAuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NhcnRvL2xpYi9jYXJ0by90cmVlL2VsZW1lbnQuanM/MGQ1NyJdLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24odHJlZSkge1xuXG4vLyBBbiBlbGVtZW50IGlzIGFuIGlkIG9yIGNsYXNzIHNlbGVjdG9yXG50cmVlLkVsZW1lbnQgPSBmdW5jdGlvbiBFbGVtZW50KHZhbHVlKSB7XG4gICAgdGhpcy52YWx1ZSA9IHZhbHVlLnRyaW0oKTtcbiAgICBpZiAodGhpcy52YWx1ZVswXSA9PT0gJyMnKSB7XG4gICAgICAgIHRoaXMudHlwZSA9ICdpZCc7XG4gICAgICAgIHRoaXMuY2xlYW4gPSB0aGlzLnZhbHVlLnJlcGxhY2UoL14jLywgJycpO1xuICAgIH1cbiAgICBpZiAodGhpcy52YWx1ZVswXSA9PT0gJy4nKSB7XG4gICAgICAgIHRoaXMudHlwZSA9ICdjbGFzcyc7XG4gICAgICAgIHRoaXMuY2xlYW4gPSB0aGlzLnZhbHVlLnJlcGxhY2UoL15cXC4vLCAnJyk7XG4gICAgfVxuICAgIGlmICh0aGlzLnZhbHVlLmluZGV4T2YoJyonKSAhPT0gLTEpIHtcbiAgICAgICAgdGhpcy50eXBlID0gJ3dpbGRjYXJkJztcbiAgICB9XG59O1xuXG4vLyBEZXRlcm1pbmUgdGhlICdzcGVjaWZpY2l0eSBtYXRyaXgnIG9mIHRoaXNcbi8vIHNwZWNpZmljIHNlbGVjdG9yXG50cmVlLkVsZW1lbnQucHJvdG90eXBlLnNwZWNpZmljaXR5ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIFtcbiAgICAgICAgKHRoaXMudHlwZSA9PT0gJ2lkJykgPyAxIDogMCwgLy8gYVxuICAgICAgICAodGhpcy50eXBlID09PSAnY2xhc3MnKSA/IDEgOiAwICAvLyBiXG4gICAgXTtcbn07XG5cbnRyZWUuRWxlbWVudC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXMudmFsdWU7IH07XG5cbn0pKHJlcXVpcmUoJy4uL3RyZWUnKSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY2FydG8vbGliL2NhcnRvL3RyZWUvZWxlbWVudC5qc1xuLy8gbW9kdWxlIGlkID0gOTBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 91 */
/* no static exports found */
/* all exports used */
/*!**********************************************!*\
  !*** ./~/carto/lib/carto/tree/expression.js ***!
  \**********************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("(function(tree) {\n\ntree.Expression = function Expression(value) {\n    this.value = value;\n};\n\ntree.Expression.prototype = {\n    is: 'expression',\n    ev: function(env) {\n        if (this.value.length > 1) {\n            return new tree.Expression(this.value.map(function(e) {\n                return e.ev(env);\n            }));\n        } else {\n            return this.value[0].ev(env);\n        }\n    },\n\n    toString: function(env) {\n        return this.value.map(function(e) {\n            return e.toString(env);\n        }).join(' ');\n    }\n};\n\n})(__webpack_require__(/*! ../tree */ 0));\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTEuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NhcnRvL2xpYi9jYXJ0by90cmVlL2V4cHJlc3Npb24uanM/Zjg3MyJdLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24odHJlZSkge1xuXG50cmVlLkV4cHJlc3Npb24gPSBmdW5jdGlvbiBFeHByZXNzaW9uKHZhbHVlKSB7XG4gICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xufTtcblxudHJlZS5FeHByZXNzaW9uLnByb3RvdHlwZSA9IHtcbiAgICBpczogJ2V4cHJlc3Npb24nLFxuICAgIGV2OiBmdW5jdGlvbihlbnYpIHtcbiAgICAgICAgaWYgKHRoaXMudmFsdWUubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyB0cmVlLkV4cHJlc3Npb24odGhpcy52YWx1ZS5tYXAoZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBlLmV2KGVudik7XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy52YWx1ZVswXS5ldihlbnYpO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIHRvU3RyaW5nOiBmdW5jdGlvbihlbnYpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsdWUubWFwKGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgIHJldHVybiBlLnRvU3RyaW5nKGVudik7XG4gICAgICAgIH0pLmpvaW4oJyAnKTtcbiAgICB9XG59O1xuXG59KShyZXF1aXJlKCcuLi90cmVlJykpO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NhcnRvL2xpYi9jYXJ0by90cmVlL2V4cHJlc3Npb24uanNcbi8vIG1vZHVsZSBpZCA9IDkxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 92 */
/* no static exports found */
/* all exports used */
/*!*****************************************!*\
  !*** ./~/carto/lib/carto/tree/field.js ***!
  \*****************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("(function(tree) {\n\ntree.Field = function Field(content) {\n    this.value = content || '';\n};\n\ntree.Field.prototype = {\n    is: 'field',\n    toString: function() {\n        return '[' + this.value + ']';\n    },\n    'ev': function() {\n        return this;\n    }\n};\n\n})(__webpack_require__(/*! ../tree */ 0));\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTIuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NhcnRvL2xpYi9jYXJ0by90cmVlL2ZpZWxkLmpzPzczZjUiXSwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uKHRyZWUpIHtcblxudHJlZS5GaWVsZCA9IGZ1bmN0aW9uIEZpZWxkKGNvbnRlbnQpIHtcbiAgICB0aGlzLnZhbHVlID0gY29udGVudCB8fCAnJztcbn07XG5cbnRyZWUuRmllbGQucHJvdG90eXBlID0ge1xuICAgIGlzOiAnZmllbGQnLFxuICAgIHRvU3RyaW5nOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuICdbJyArIHRoaXMudmFsdWUgKyAnXSc7XG4gICAgfSxcbiAgICAnZXYnOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxufTtcblxufSkocmVxdWlyZSgnLi4vdHJlZScpKTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jYXJ0by9saWIvY2FydG8vdHJlZS9maWVsZC5qc1xuLy8gbW9kdWxlIGlkID0gOTJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 93 */
/* no static exports found */
/* all exports used */
/*!******************************************!*\
  !*** ./~/carto/lib/carto/tree/filter.js ***!
  \******************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("(function(tree) {\n\ntree.Filter = function Filter(key, op, val, index, filename) {\n    this.key = key;\n    this.op = op;\n    this.val = val;\n    this.index = index;\n    this.filename = filename;\n\n    this.id = this.key + this.op + this.val;\n};\n\n// xmlsafe, numeric, suffix\nvar ops = {\n    '<': [' &lt; ', 'numeric'],\n    '>': [' &gt; ', 'numeric'],\n    '=': [' = ', 'both'],\n    '!=': [' != ', 'both'],\n    '<=': [' &lt;= ', 'numeric'],\n    '>=': [' &gt;= ', 'numeric'],\n    '=~': ['.match(', 'string', ')']\n};\n\ntree.Filter.prototype.ev = function(env) {\n    this.key = this.key.ev(env);\n    this.val = this.val.ev(env);\n    return this;\n};\n\ntree.Filter.prototype.toXML = function(env) {\n    if (tree.Reference.data.filter) {\n        if (this.key.is === 'keyword' && -1 === tree.Reference.data.filter.value.indexOf(this.key.toString())) {\n            env.error({\n                message: this.key.toString() + ' is not a valid keyword in a filter expression',\n                index: this.index,\n                filename: this.filename\n            });\n        }\n        if (this.val.is === 'keyword' && -1 === tree.Reference.data.filter.value.indexOf(this.val.toString())) {\n            env.error({\n                message: this.val.toString() + ' is not a valid keyword in a filter expression',\n                index: this.index,\n                filename: this.filename\n            });\n        }\n    }\n    var key = this.key.toString(false);\n    var val = this.val.toString(this.val.is == 'string');\n\n    if (\n        (ops[this.op][1] == 'numeric' && isNaN(val) && this.val.is !== 'field') ||\n        (ops[this.op][1] == 'string' && (val)[0] != \"'\")\n    ) {\n        env.error({\n            message: 'Cannot use operator \"' + this.op + '\" with value ' + this.val,\n            index: this.index,\n            filename: this.filename\n        });\n    }\n\n    return key + ops[this.op][0] + val + (ops[this.op][2] || '');\n};\n\ntree.Filter.prototype.toString = function() {\n    return '[' + this.id + ']';\n};\n\n})(__webpack_require__(/*! ../tree */ 0));\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NhcnRvL2xpYi9jYXJ0by90cmVlL2ZpbHRlci5qcz83NWRlIl0sInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbih0cmVlKSB7XG5cbnRyZWUuRmlsdGVyID0gZnVuY3Rpb24gRmlsdGVyKGtleSwgb3AsIHZhbCwgaW5kZXgsIGZpbGVuYW1lKSB7XG4gICAgdGhpcy5rZXkgPSBrZXk7XG4gICAgdGhpcy5vcCA9IG9wO1xuICAgIHRoaXMudmFsID0gdmFsO1xuICAgIHRoaXMuaW5kZXggPSBpbmRleDtcbiAgICB0aGlzLmZpbGVuYW1lID0gZmlsZW5hbWU7XG5cbiAgICB0aGlzLmlkID0gdGhpcy5rZXkgKyB0aGlzLm9wICsgdGhpcy52YWw7XG59O1xuXG4vLyB4bWxzYWZlLCBudW1lcmljLCBzdWZmaXhcbnZhciBvcHMgPSB7XG4gICAgJzwnOiBbJyAmbHQ7ICcsICdudW1lcmljJ10sXG4gICAgJz4nOiBbJyAmZ3Q7ICcsICdudW1lcmljJ10sXG4gICAgJz0nOiBbJyA9ICcsICdib3RoJ10sXG4gICAgJyE9JzogWycgIT0gJywgJ2JvdGgnXSxcbiAgICAnPD0nOiBbJyAmbHQ7PSAnLCAnbnVtZXJpYyddLFxuICAgICc+PSc6IFsnICZndDs9ICcsICdudW1lcmljJ10sXG4gICAgJz1+JzogWycubWF0Y2goJywgJ3N0cmluZycsICcpJ11cbn07XG5cbnRyZWUuRmlsdGVyLnByb3RvdHlwZS5ldiA9IGZ1bmN0aW9uKGVudikge1xuICAgIHRoaXMua2V5ID0gdGhpcy5rZXkuZXYoZW52KTtcbiAgICB0aGlzLnZhbCA9IHRoaXMudmFsLmV2KGVudik7XG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG50cmVlLkZpbHRlci5wcm90b3R5cGUudG9YTUwgPSBmdW5jdGlvbihlbnYpIHtcbiAgICBpZiAodHJlZS5SZWZlcmVuY2UuZGF0YS5maWx0ZXIpIHtcbiAgICAgICAgaWYgKHRoaXMua2V5LmlzID09PSAna2V5d29yZCcgJiYgLTEgPT09IHRyZWUuUmVmZXJlbmNlLmRhdGEuZmlsdGVyLnZhbHVlLmluZGV4T2YodGhpcy5rZXkudG9TdHJpbmcoKSkpIHtcbiAgICAgICAgICAgIGVudi5lcnJvcih7XG4gICAgICAgICAgICAgICAgbWVzc2FnZTogdGhpcy5rZXkudG9TdHJpbmcoKSArICcgaXMgbm90IGEgdmFsaWQga2V5d29yZCBpbiBhIGZpbHRlciBleHByZXNzaW9uJyxcbiAgICAgICAgICAgICAgICBpbmRleDogdGhpcy5pbmRleCxcbiAgICAgICAgICAgICAgICBmaWxlbmFtZTogdGhpcy5maWxlbmFtZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMudmFsLmlzID09PSAna2V5d29yZCcgJiYgLTEgPT09IHRyZWUuUmVmZXJlbmNlLmRhdGEuZmlsdGVyLnZhbHVlLmluZGV4T2YodGhpcy52YWwudG9TdHJpbmcoKSkpIHtcbiAgICAgICAgICAgIGVudi5lcnJvcih7XG4gICAgICAgICAgICAgICAgbWVzc2FnZTogdGhpcy52YWwudG9TdHJpbmcoKSArICcgaXMgbm90IGEgdmFsaWQga2V5d29yZCBpbiBhIGZpbHRlciBleHByZXNzaW9uJyxcbiAgICAgICAgICAgICAgICBpbmRleDogdGhpcy5pbmRleCxcbiAgICAgICAgICAgICAgICBmaWxlbmFtZTogdGhpcy5maWxlbmFtZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdmFyIGtleSA9IHRoaXMua2V5LnRvU3RyaW5nKGZhbHNlKTtcbiAgICB2YXIgdmFsID0gdGhpcy52YWwudG9TdHJpbmcodGhpcy52YWwuaXMgPT0gJ3N0cmluZycpO1xuXG4gICAgaWYgKFxuICAgICAgICAob3BzW3RoaXMub3BdWzFdID09ICdudW1lcmljJyAmJiBpc05hTih2YWwpICYmIHRoaXMudmFsLmlzICE9PSAnZmllbGQnKSB8fFxuICAgICAgICAob3BzW3RoaXMub3BdWzFdID09ICdzdHJpbmcnICYmICh2YWwpWzBdICE9IFwiJ1wiKVxuICAgICkge1xuICAgICAgICBlbnYuZXJyb3Ioe1xuICAgICAgICAgICAgbWVzc2FnZTogJ0Nhbm5vdCB1c2Ugb3BlcmF0b3IgXCInICsgdGhpcy5vcCArICdcIiB3aXRoIHZhbHVlICcgKyB0aGlzLnZhbCxcbiAgICAgICAgICAgIGluZGV4OiB0aGlzLmluZGV4LFxuICAgICAgICAgICAgZmlsZW5hbWU6IHRoaXMuZmlsZW5hbWVcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGtleSArIG9wc1t0aGlzLm9wXVswXSArIHZhbCArIChvcHNbdGhpcy5vcF1bMl0gfHwgJycpO1xufTtcblxudHJlZS5GaWx0ZXIucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuICdbJyArIHRoaXMuaWQgKyAnXSc7XG59O1xuXG59KShyZXF1aXJlKCcuLi90cmVlJykpO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NhcnRvL2xpYi9jYXJ0by90cmVlL2ZpbHRlci5qc1xuLy8gbW9kdWxlIGlkID0gOTNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 94 */
/* no static exports found */
/* all exports used */
/*!*********************************************!*\
  !*** ./~/carto/lib/carto/tree/filterset.js ***!
  \*********************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global) {var tree = __webpack_require__(/*! ../tree */ 0);\nvar _ = global._ || __webpack_require__(/*! underscore */ 4);\n\ntree.Filterset = function Filterset() {\n    this.filters = {};\n};\n\ntree.Filterset.prototype.toXML = function(env) {\n    var filters = [];\n    for (var id in this.filters) {\n        filters.push('(' + this.filters[id].toXML(env).trim() + ')');\n    }\n    if (filters.length) {\n        return '    <Filter>' + filters.join(' and ') + '</Filter>\\n';\n    } else {\n        return '';\n    }\n};\n\ntree.Filterset.prototype.toString = function() {\n    var arr = [];\n    for (var id in this.filters) arr.push(this.filters[id].id);\n    return arr.sort().join('\\t');\n};\n\ntree.Filterset.prototype.ev = function(env) {\n    for (var i in this.filters) {\n        this.filters[i].ev(env);\n    }\n    return this;\n};\n\ntree.Filterset.prototype.clone = function() {\n    var clone = new tree.Filterset();\n    for (var id in this.filters) {\n        clone.filters[id] = this.filters[id];\n    }\n    return clone;\n};\n\n// Note: other has to be a tree.Filterset.\ntree.Filterset.prototype.cloneWith = function(other) {\n    var additions = [];\n    for (var id in other.filters) {\n        var status = this.addable(other.filters[id]);\n        // status is true, false or null. if it's null we don't fail this\n        // clone nor do we add the filter.\n        if (status === false) {\n            return false;\n        }\n        if (status === true) {\n            // Adding the filter will override another value.\n            additions.push(other.filters[id]);\n        }\n    }\n\n    // Adding the other filters doesn't make this filterset invalid, but it\n    // doesn't add anything to it either.\n    if (!additions.length) {\n        return null;\n    }\n\n    // We can successfully add all filters. Now clone the filterset and add the\n    // new rules.\n    var clone = new tree.Filterset();\n\n    // We can add the rules that are already present without going through the\n    // add function as a Filterset is always in it's simplest canonical form.\n    for (id in this.filters) {\n        clone.filters[id] = this.filters[id];\n    }\n\n    // Only add new filters that actually change the filter.\n    while (id = additions.shift()) {\n        clone.add(id);\n    }\n\n    return clone;\n};\n\ntree.Filterset.prototype.toJS = function(env) {\n  var opMap = {\n    '=': '==='\n  };\n  return _.map(this.filters, function(filter) {\n    var op = filter.op;\n    if(op in opMap) {\n      op = opMap[op];\n    }\n    var val = filter.val;\n    if(filter._val !== undefined) {\n      val = filter._val.toString(true);\n    }\n    var attrs = \"data\";\n    if (op === '=~') {\n      return \"(\" + attrs + \"['\" + filter.key.value  + \"'] + '').match(\" + (val.is === 'string' ? \"'\" + val.toString().replace(/'/g, \"\\\\'\") + \"'\" : val) + \")\";\n    }\n    return attrs + \"['\" + filter.key.value  + \"'] \" + op + \" \" + (val.is === 'string' ? \"'\" + val.toString().replace(/'/g, \"\\\\'\") + \"'\" : val);\n  }).join(' && ');\n};\n\n// Returns true when the new filter can be added, false otherwise.\n// It can also return null, and on the other side we test for === true or\n// false\ntree.Filterset.prototype.addable = function(filter) {\n    var key = filter.key.toString(),\n        value = filter.val.toString();\n\n    if (value.match(/^[0-9]+(\\.[0-9]*)?$/)) value = parseFloat(value);\n\n    switch (filter.op) {\n        case '=':\n            // if there is already foo= and we're adding foo=\n            if (this.filters[key + '='] !== undefined) {\n                if (this.filters[key + '='].val.toString() != value) {\n                    return false;\n                } else {\n                    return null;\n                }\n            }\n            if (this.filters[key + '!=' + value] !== undefined) return false;\n            if (this.filters[key + '>'] !== undefined && this.filters[key + '>'].val >= value) return false;\n            if (this.filters[key + '<'] !== undefined && this.filters[key + '<'].val <= value) return false;\n            if (this.filters[key + '>='] !== undefined  && this.filters[key + '>='].val > value) return false;\n            if (this.filters[key + '<='] !== undefined  && this.filters[key + '<='].val < value) return false;\n            return true;\n\n        case '=~':\n            return true;\n\n        case '!=':\n            if (this.filters[key + '='] !== undefined) return (this.filters[key + '='].val == value) ? false : null;\n            if (this.filters[key + '!=' + value] !== undefined) return null;\n            if (this.filters[key + '>'] !== undefined && this.filters[key + '>'].val >= value) return null;\n            if (this.filters[key + '<'] !== undefined && this.filters[key + '<'].val <= value) return null;\n            if (this.filters[key + '>='] !== undefined && this.filters[key + '>='].val > value) return null;\n            if (this.filters[key + '<='] !== undefined && this.filters[key + '<='].val < value) return null;\n            return true;\n\n        case '>':\n            if (key + '=' in this.filters) {\n                if (this.filters[key + '='].val <= value) {\n                    return false;\n                } else {\n                    return null;\n                }\n            }\n            if (this.filters[key + '<'] !== undefined && this.filters[key + '<'].val <= value) return false;\n            if (this.filters[key + '<='] !== undefined  && this.filters[key + '<='].val <= value) return false;\n            if (this.filters[key + '>'] !== undefined && this.filters[key + '>'].val >= value) return null;\n            if (this.filters[key + '>='] !== undefined  && this.filters[key + '>='].val > value) return null;\n            return true;\n\n        case '>=':\n            if (this.filters[key + '=' ] !== undefined) return (this.filters[key + '='].val < value) ? false : null;\n            if (this.filters[key + '<' ] !== undefined && this.filters[key + '<'].val <= value) return false;\n            if (this.filters[key + '<='] !== undefined && this.filters[key + '<='].val < value) return false;\n            if (this.filters[key + '>' ] !== undefined && this.filters[key + '>'].val >= value) return null;\n            if (this.filters[key + '>='] !== undefined && this.filters[key + '>='].val >= value) return null;\n            return true;\n\n        case '<':\n            if (this.filters[key + '=' ] !== undefined) return (this.filters[key + '='].val >= value) ? false : null;\n            if (this.filters[key + '>' ] !== undefined && this.filters[key + '>'].val >= value) return false;\n            if (this.filters[key + '>='] !== undefined && this.filters[key + '>='].val >= value) return false;\n            if (this.filters[key + '<' ] !== undefined && this.filters[key + '<'].val <= value) return null;\n            if (this.filters[key + '<='] !== undefined && this.filters[key + '<='].val < value) return null;\n            return true;\n\n        case '<=':\n            if (this.filters[key + '=' ] !== undefined) return (this.filters[key + '='].val > value) ? false : null;\n            if (this.filters[key + '>' ] !== undefined && this.filters[key + '>'].val >= value) return false;\n            if (this.filters[key + '>='] !== undefined && this.filters[key + '>='].val > value) return false;\n            if (this.filters[key + '<' ] !== undefined && this.filters[key + '<'].val <= value) return null;\n            if (this.filters[key + '<='] !== undefined && this.filters[key + '<='].val <= value) return null;\n            return true;\n    }\n};\n\n// Does the new filter constitute a conflict?\ntree.Filterset.prototype.conflict = function(filter) {\n    var key = filter.key.toString(),\n        value = filter.val.toString();\n\n    if (!isNaN(parseFloat(value))) value = parseFloat(value);\n\n    // if (a=b) && (a=c)\n    // if (a=b) && (a!=b)\n    // or (a!=b) && (a=b)\n    if ((filter.op === '=' && this.filters[key + '='] !== undefined &&\n        value != this.filters[key + '='].val.toString()) ||\n        (filter.op === '!=' && this.filters[key + '='] !== undefined &&\n        value == this.filters[key + '='].val.toString()) ||\n        (filter.op === '=' && this.filters[key + '!='] !== undefined &&\n        value == this.filters[key + '!='].val.toString())) {\n        return filter.toString() + ' added to ' + this.toString() + ' produces an invalid filter';\n    }\n\n    return false;\n};\n\n// Only call this function for filters that have been cleared by .addable().\ntree.Filterset.prototype.add = function(filter, env) {\n    var key = filter.key.toString(),\n        id,\n        op = filter.op,\n        conflict = this.conflict(filter),\n        numval;\n\n    if (conflict) return conflict;\n\n    if (op === '=') {\n        for (var i in this.filters) {\n            if (this.filters[i].key == key) delete this.filters[i];\n        }\n        this.filters[key + '='] = filter;\n    } else if (op === '!=') {\n        this.filters[key + '!=' + filter.val] = filter;\n    } else if (op === '=~') {\n        this.filters[key + '=~' + filter.val] = filter;\n    } else if (op === '>') {\n        // If there are other filters that are also >\n        // but are less than this one, they don't matter, so\n        // remove them.\n        for (var j in this.filters) {\n            if (this.filters[j].key == key && this.filters[j].val <= filter.val) {\n                delete this.filters[j];\n            }\n        }\n        this.filters[key + '>'] = filter;\n    } else if (op === '>=') {\n        for (var k in this.filters) {\n            numval = (+this.filters[k].val.toString());\n            if (this.filters[k].key == key && numval < filter.val) {\n                delete this.filters[k];\n            }\n        }\n        if (this.filters[key + '!=' + filter.val] !== undefined) {\n            delete this.filters[key + '!=' + filter.val];\n            filter.op = '>';\n            this.filters[key + '>'] = filter;\n        }\n        else {\n            this.filters[key + '>='] = filter;\n        }\n    } else if (op === '<') {\n        for (var l in this.filters) {\n            numval = (+this.filters[l].val.toString());\n            if (this.filters[l].key == key && numval >= filter.val) {\n                delete this.filters[l];\n            }\n        }\n        this.filters[key + '<'] = filter;\n    } else if (op === '<=') {\n        for (var m in this.filters) {\n            numval = (+this.filters[m].val.toString());\n            if (this.filters[m].key == key && numval > filter.val) {\n                delete this.filters[m];\n            }\n        }\n        if (this.filters[key + '!=' + filter.val] !== undefined) {\n            delete this.filters[key + '!=' + filter.val];\n            filter.op = '<';\n            this.filters[key + '<'] = filter;\n        }\n        else {\n            this.filters[key + '<='] = filter;\n        }\n    }\n};\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./../../../../webpack/buildin/global.js */ 3)))//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 95 */
/* no static exports found */
/* all exports used */
/*!*******************************************!*\
  !*** ./~/carto/lib/carto/tree/fontset.js ***!
  \*******************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("(function(tree) {\n\ntree._getFontSet = function(env, fonts) {\n    var fontKey = fonts.join('');\n    if (env._fontMap && env._fontMap[fontKey]) {\n        return env._fontMap[fontKey];\n    }\n\n    var new_fontset = new tree.FontSet(env, fonts);\n    env.effects.push(new_fontset);\n    if (!env._fontMap) env._fontMap = {};\n    env._fontMap[fontKey] = new_fontset;\n    return new_fontset;\n};\n\ntree.FontSet = function FontSet(env, fonts) {\n    this.fonts = fonts;\n    this.name = 'fontset-' + env.effects.length;\n};\n\ntree.FontSet.prototype.toXML = function(env) {\n    return '<FontSet name=\"' +\n        this.name +\n        '\">\\n' +\n        this.fonts.map(function(f) {\n            return '  <Font face-name=\"' + f +'\"/>';\n        }).join('\\n') +\n        '\\n</FontSet>';\n};\n\n})(__webpack_require__(/*! ../tree */ 0));\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTUuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NhcnRvL2xpYi9jYXJ0by90cmVlL2ZvbnRzZXQuanM/OTZhOSJdLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24odHJlZSkge1xuXG50cmVlLl9nZXRGb250U2V0ID0gZnVuY3Rpb24oZW52LCBmb250cykge1xuICAgIHZhciBmb250S2V5ID0gZm9udHMuam9pbignJyk7XG4gICAgaWYgKGVudi5fZm9udE1hcCAmJiBlbnYuX2ZvbnRNYXBbZm9udEtleV0pIHtcbiAgICAgICAgcmV0dXJuIGVudi5fZm9udE1hcFtmb250S2V5XTtcbiAgICB9XG5cbiAgICB2YXIgbmV3X2ZvbnRzZXQgPSBuZXcgdHJlZS5Gb250U2V0KGVudiwgZm9udHMpO1xuICAgIGVudi5lZmZlY3RzLnB1c2gobmV3X2ZvbnRzZXQpO1xuICAgIGlmICghZW52Ll9mb250TWFwKSBlbnYuX2ZvbnRNYXAgPSB7fTtcbiAgICBlbnYuX2ZvbnRNYXBbZm9udEtleV0gPSBuZXdfZm9udHNldDtcbiAgICByZXR1cm4gbmV3X2ZvbnRzZXQ7XG59O1xuXG50cmVlLkZvbnRTZXQgPSBmdW5jdGlvbiBGb250U2V0KGVudiwgZm9udHMpIHtcbiAgICB0aGlzLmZvbnRzID0gZm9udHM7XG4gICAgdGhpcy5uYW1lID0gJ2ZvbnRzZXQtJyArIGVudi5lZmZlY3RzLmxlbmd0aDtcbn07XG5cbnRyZWUuRm9udFNldC5wcm90b3R5cGUudG9YTUwgPSBmdW5jdGlvbihlbnYpIHtcbiAgICByZXR1cm4gJzxGb250U2V0IG5hbWU9XCInICtcbiAgICAgICAgdGhpcy5uYW1lICtcbiAgICAgICAgJ1wiPlxcbicgK1xuICAgICAgICB0aGlzLmZvbnRzLm1hcChmdW5jdGlvbihmKSB7XG4gICAgICAgICAgICByZXR1cm4gJyAgPEZvbnQgZmFjZS1uYW1lPVwiJyArIGYgKydcIi8+JztcbiAgICAgICAgfSkuam9pbignXFxuJykgK1xuICAgICAgICAnXFxuPC9Gb250U2V0Pic7XG59O1xuXG59KShyZXF1aXJlKCcuLi90cmVlJykpO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NhcnRvL2xpYi9jYXJ0by90cmVlL2ZvbnRzZXQuanNcbi8vIG1vZHVsZSBpZCA9IDk1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 96 */
/* no static exports found */
/* all exports used */
/*!************************************************!*\
  !*** ./~/carto/lib/carto/tree/frame_offset.js ***!
  \************************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var tree = __webpack_require__(/*! ../tree */ 0);\n\n// Storage for Frame offset value\n// and stores them as bit-sequences so that they can be combined,\n// inverted, and compared quickly.\ntree.FrameOffset = function(op, value, index) {\n    value = parseInt(value, 10);\n    if (value > tree.FrameOffset.max || value <= 0) {\n        throw {\n            message: 'Only frame-offset levels between 1 and ' +\n                tree.FrameOffset.max + ' supported.',\n            index: index\n        };\n    }\n\n    if (op !== '=') {\n        throw {\n            message: 'only = operator is supported for frame-offset',\n            index: index\n        };\n    }\n    return value;\n};\n\ntree.FrameOffset.max = 32;\ntree.FrameOffset.none = 0;\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTYuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NhcnRvL2xpYi9jYXJ0by90cmVlL2ZyYW1lX29mZnNldC5qcz9lZjBhIl0sInNvdXJjZXNDb250ZW50IjpbInZhciB0cmVlID0gcmVxdWlyZSgnLi4vdHJlZScpO1xuXG4vLyBTdG9yYWdlIGZvciBGcmFtZSBvZmZzZXQgdmFsdWVcbi8vIGFuZCBzdG9yZXMgdGhlbSBhcyBiaXQtc2VxdWVuY2VzIHNvIHRoYXQgdGhleSBjYW4gYmUgY29tYmluZWQsXG4vLyBpbnZlcnRlZCwgYW5kIGNvbXBhcmVkIHF1aWNrbHkuXG50cmVlLkZyYW1lT2Zmc2V0ID0gZnVuY3Rpb24ob3AsIHZhbHVlLCBpbmRleCkge1xuICAgIHZhbHVlID0gcGFyc2VJbnQodmFsdWUsIDEwKTtcbiAgICBpZiAodmFsdWUgPiB0cmVlLkZyYW1lT2Zmc2V0Lm1heCB8fCB2YWx1ZSA8PSAwKSB7XG4gICAgICAgIHRocm93IHtcbiAgICAgICAgICAgIG1lc3NhZ2U6ICdPbmx5IGZyYW1lLW9mZnNldCBsZXZlbHMgYmV0d2VlbiAxIGFuZCAnICtcbiAgICAgICAgICAgICAgICB0cmVlLkZyYW1lT2Zmc2V0Lm1heCArICcgc3VwcG9ydGVkLicsXG4gICAgICAgICAgICBpbmRleDogaW5kZXhcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBpZiAob3AgIT09ICc9Jykge1xuICAgICAgICB0aHJvdyB7XG4gICAgICAgICAgICBtZXNzYWdlOiAnb25seSA9IG9wZXJhdG9yIGlzIHN1cHBvcnRlZCBmb3IgZnJhbWUtb2Zmc2V0JyxcbiAgICAgICAgICAgIGluZGV4OiBpbmRleFxuICAgICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWU7XG59O1xuXG50cmVlLkZyYW1lT2Zmc2V0Lm1heCA9IDMyO1xudHJlZS5GcmFtZU9mZnNldC5ub25lID0gMDtcblxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NhcnRvL2xpYi9jYXJ0by90cmVlL2ZyYW1lX29mZnNldC5qc1xuLy8gbW9kdWxlIGlkID0gOTZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 97 */
/* no static exports found */
/* all exports used */
/*!***********************************************!*\
  !*** ./~/carto/lib/carto/tree/imagefilter.js ***!
  \***********************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("(function(tree) {\n\ntree.ImageFilter = function ImageFilter(filter, args) {\n    this.filter = filter;\n    this.args = args || null;\n};\n\ntree.ImageFilter.prototype = {\n    is: 'imagefilter',\n    ev: function() { return this; },\n\n    toString: function() {\n        if (this.args) {\n            return this.filter + '(' + this.args.join(',') + ')';\n        } else {\n            return this.filter;\n        }\n    }\n};\n\n\n})(__webpack_require__(/*! ../tree */ 0));\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTcuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NhcnRvL2xpYi9jYXJ0by90cmVlL2ltYWdlZmlsdGVyLmpzPzg5YjQiXSwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uKHRyZWUpIHtcblxudHJlZS5JbWFnZUZpbHRlciA9IGZ1bmN0aW9uIEltYWdlRmlsdGVyKGZpbHRlciwgYXJncykge1xuICAgIHRoaXMuZmlsdGVyID0gZmlsdGVyO1xuICAgIHRoaXMuYXJncyA9IGFyZ3MgfHwgbnVsbDtcbn07XG5cbnRyZWUuSW1hZ2VGaWx0ZXIucHJvdG90eXBlID0ge1xuICAgIGlzOiAnaW1hZ2VmaWx0ZXInLFxuICAgIGV2OiBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXM7IH0sXG5cbiAgICB0b1N0cmluZzogZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICh0aGlzLmFyZ3MpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmZpbHRlciArICcoJyArIHRoaXMuYXJncy5qb2luKCcsJykgKyAnKSc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5maWx0ZXI7XG4gICAgICAgIH1cbiAgICB9XG59O1xuXG5cbn0pKHJlcXVpcmUoJy4uL3RyZWUnKSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY2FydG8vbGliL2NhcnRvL3RyZWUvaW1hZ2VmaWx0ZXIuanNcbi8vIG1vZHVsZSBpZCA9IDk3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 98 */
/* no static exports found */
/* all exports used */
/*!*******************************************!*\
  !*** ./~/carto/lib/carto/tree/invalid.js ***!
  \*******************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("(function (tree) {\ntree.Invalid = function Invalid(chunk, index, message) {\n    this.chunk = chunk;\n    this.index = index;\n    this.type = 'syntax';\n    this.message = message || \"Invalid code: \" + this.chunk;\n};\n\ntree.Invalid.prototype.is = 'invalid';\n\ntree.Invalid.prototype.ev = function(env) {\n    env.error({\n        chunk: this.chunk,\n        index: this.index,\n        type: 'syntax',\n        message: this.message || \"Invalid code: \" + this.chunk\n    });\n    return {\n        is: 'undefined'\n    };\n};\n})(__webpack_require__(/*! ../tree */ 0));\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTguanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NhcnRvL2xpYi9jYXJ0by90cmVlL2ludmFsaWQuanM/NjZjNiJdLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gKHRyZWUpIHtcbnRyZWUuSW52YWxpZCA9IGZ1bmN0aW9uIEludmFsaWQoY2h1bmssIGluZGV4LCBtZXNzYWdlKSB7XG4gICAgdGhpcy5jaHVuayA9IGNodW5rO1xuICAgIHRoaXMuaW5kZXggPSBpbmRleDtcbiAgICB0aGlzLnR5cGUgPSAnc3ludGF4JztcbiAgICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlIHx8IFwiSW52YWxpZCBjb2RlOiBcIiArIHRoaXMuY2h1bms7XG59O1xuXG50cmVlLkludmFsaWQucHJvdG90eXBlLmlzID0gJ2ludmFsaWQnO1xuXG50cmVlLkludmFsaWQucHJvdG90eXBlLmV2ID0gZnVuY3Rpb24oZW52KSB7XG4gICAgZW52LmVycm9yKHtcbiAgICAgICAgY2h1bms6IHRoaXMuY2h1bmssXG4gICAgICAgIGluZGV4OiB0aGlzLmluZGV4LFxuICAgICAgICB0eXBlOiAnc3ludGF4JyxcbiAgICAgICAgbWVzc2FnZTogdGhpcy5tZXNzYWdlIHx8IFwiSW52YWxpZCBjb2RlOiBcIiArIHRoaXMuY2h1bmtcbiAgICB9KTtcbiAgICByZXR1cm4ge1xuICAgICAgICBpczogJ3VuZGVmaW5lZCdcbiAgICB9O1xufTtcbn0pKHJlcXVpcmUoJy4uL3RyZWUnKSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY2FydG8vbGliL2NhcnRvL3RyZWUvaW52YWxpZC5qc1xuLy8gbW9kdWxlIGlkID0gOThcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 99 */
/* no static exports found */
/* all exports used */
/*!*******************************************!*\
  !*** ./~/carto/lib/carto/tree/keyword.js ***!
  \*******************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("(function(tree) {\n\ntree.Keyword = function Keyword(value) {\n    this.value = value;\n    var special = {\n        'transparent': 'color',\n        'true': 'boolean',\n        'false': 'boolean'\n    };\n    this.is = special[value] ? special[value] : 'keyword';\n};\ntree.Keyword.prototype = {\n    ev: function() { return this; },\n    toString: function() { return this.value; }\n};\n\n})(__webpack_require__(/*! ../tree */ 0));\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTkuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NhcnRvL2xpYi9jYXJ0by90cmVlL2tleXdvcmQuanM/MzgxMyJdLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24odHJlZSkge1xuXG50cmVlLktleXdvcmQgPSBmdW5jdGlvbiBLZXl3b3JkKHZhbHVlKSB7XG4gICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgIHZhciBzcGVjaWFsID0ge1xuICAgICAgICAndHJhbnNwYXJlbnQnOiAnY29sb3InLFxuICAgICAgICAndHJ1ZSc6ICdib29sZWFuJyxcbiAgICAgICAgJ2ZhbHNlJzogJ2Jvb2xlYW4nXG4gICAgfTtcbiAgICB0aGlzLmlzID0gc3BlY2lhbFt2YWx1ZV0gPyBzcGVjaWFsW3ZhbHVlXSA6ICdrZXl3b3JkJztcbn07XG50cmVlLktleXdvcmQucHJvdG90eXBlID0ge1xuICAgIGV2OiBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXM7IH0sXG4gICAgdG9TdHJpbmc6IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpcy52YWx1ZTsgfVxufTtcblxufSkocmVxdWlyZSgnLi4vdHJlZScpKTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jYXJ0by9saWIvY2FydG8vdHJlZS9rZXl3b3JkLmpzXG4vLyBtb2R1bGUgaWQgPSA5OVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 100 */
/* no static exports found */
/* all exports used */
/*!*****************************************!*\
  !*** ./~/carto/lib/carto/tree/layer.js ***!
  \*****************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("(function(tree) {\n\ntree.LayerXML = function(obj, styles) {\n    var dsoptions = [];\n    for (var i in obj.Datasource) {\n        dsoptions.push('<Parameter name=\"' + i + '\"><![CDATA[' +\n            obj.Datasource[i] + ']]></Parameter>');\n    }\n\n    var prop_string = '';\n    for (var prop in obj.properties) {\n        if (prop === 'minzoom') {\n            prop_string += '  maxzoom=\"' + tree.Zoom.ranges[obj.properties[prop]] + '\"\\n';\n        } else if (prop === 'maxzoom') {\n            prop_string += '  minzoom=\"' + tree.Zoom.ranges[obj.properties[prop]+1] + '\"\\n';\n        } else {\n            prop_string += '  ' + prop + '=\"' + obj.properties[prop] + '\"\\n';\n        }\n    }\n\n    return '<Layer' +\n        ' name=\"' + obj.name + '\"\\n' +\n        prop_string +\n        ((typeof obj.status === 'undefined') ? '' : '  status=\"' + obj.status + '\"\\n') +\n        ((typeof obj.srs === 'undefined') ? '' : '  srs=\"' + obj.srs + '\"') + '>\\n    ' +\n        styles.reverse().map(function(s) {\n            return '<StyleName>' + s + '</StyleName>';\n        }).join('\\n    ') +\n        (dsoptions.length ?\n        '\\n    <Datasource>\\n       ' +\n        dsoptions.join('\\n       ') +\n        '\\n    </Datasource>\\n'\n        : '') +\n        '  </Layer>\\n';\n};\n\n})(__webpack_require__(/*! ../tree */ 0));\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTAwLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9jYXJ0by9saWIvY2FydG8vdHJlZS9sYXllci5qcz9hMWUyIl0sInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbih0cmVlKSB7XG5cbnRyZWUuTGF5ZXJYTUwgPSBmdW5jdGlvbihvYmosIHN0eWxlcykge1xuICAgIHZhciBkc29wdGlvbnMgPSBbXTtcbiAgICBmb3IgKHZhciBpIGluIG9iai5EYXRhc291cmNlKSB7XG4gICAgICAgIGRzb3B0aW9ucy5wdXNoKCc8UGFyYW1ldGVyIG5hbWU9XCInICsgaSArICdcIj48IVtDREFUQVsnICtcbiAgICAgICAgICAgIG9iai5EYXRhc291cmNlW2ldICsgJ11dPjwvUGFyYW1ldGVyPicpO1xuICAgIH1cblxuICAgIHZhciBwcm9wX3N0cmluZyA9ICcnO1xuICAgIGZvciAodmFyIHByb3AgaW4gb2JqLnByb3BlcnRpZXMpIHtcbiAgICAgICAgaWYgKHByb3AgPT09ICdtaW56b29tJykge1xuICAgICAgICAgICAgcHJvcF9zdHJpbmcgKz0gJyAgbWF4em9vbT1cIicgKyB0cmVlLlpvb20ucmFuZ2VzW29iai5wcm9wZXJ0aWVzW3Byb3BdXSArICdcIlxcbic7XG4gICAgICAgIH0gZWxzZSBpZiAocHJvcCA9PT0gJ21heHpvb20nKSB7XG4gICAgICAgICAgICBwcm9wX3N0cmluZyArPSAnICBtaW56b29tPVwiJyArIHRyZWUuWm9vbS5yYW5nZXNbb2JqLnByb3BlcnRpZXNbcHJvcF0rMV0gKyAnXCJcXG4nO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcHJvcF9zdHJpbmcgKz0gJyAgJyArIHByb3AgKyAnPVwiJyArIG9iai5wcm9wZXJ0aWVzW3Byb3BdICsgJ1wiXFxuJztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiAnPExheWVyJyArXG4gICAgICAgICcgbmFtZT1cIicgKyBvYmoubmFtZSArICdcIlxcbicgK1xuICAgICAgICBwcm9wX3N0cmluZyArXG4gICAgICAgICgodHlwZW9mIG9iai5zdGF0dXMgPT09ICd1bmRlZmluZWQnKSA/ICcnIDogJyAgc3RhdHVzPVwiJyArIG9iai5zdGF0dXMgKyAnXCJcXG4nKSArXG4gICAgICAgICgodHlwZW9mIG9iai5zcnMgPT09ICd1bmRlZmluZWQnKSA/ICcnIDogJyAgc3JzPVwiJyArIG9iai5zcnMgKyAnXCInKSArICc+XFxuICAgICcgK1xuICAgICAgICBzdHlsZXMucmV2ZXJzZSgpLm1hcChmdW5jdGlvbihzKSB7XG4gICAgICAgICAgICByZXR1cm4gJzxTdHlsZU5hbWU+JyArIHMgKyAnPC9TdHlsZU5hbWU+JztcbiAgICAgICAgfSkuam9pbignXFxuICAgICcpICtcbiAgICAgICAgKGRzb3B0aW9ucy5sZW5ndGggP1xuICAgICAgICAnXFxuICAgIDxEYXRhc291cmNlPlxcbiAgICAgICAnICtcbiAgICAgICAgZHNvcHRpb25zLmpvaW4oJ1xcbiAgICAgICAnKSArXG4gICAgICAgICdcXG4gICAgPC9EYXRhc291cmNlPlxcbidcbiAgICAgICAgOiAnJykgK1xuICAgICAgICAnICA8L0xheWVyPlxcbic7XG59O1xuXG59KShyZXF1aXJlKCcuLi90cmVlJykpO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NhcnRvL2xpYi9jYXJ0by90cmVlL2xheWVyLmpzXG4vLyBtb2R1bGUgaWQgPSAxMDBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 101 */
/* no static exports found */
/* all exports used */
/*!*******************************************!*\
  !*** ./~/carto/lib/carto/tree/literal.js ***!
  \*******************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("// A literal is a literal string for Mapnik - the\n// result of the combination of a `tree.Field` with any\n// other type.\n(function(tree) {\n\ntree.Literal = function Field(content) {\n    this.value = content || '';\n    this.is = 'field';\n};\n\ntree.Literal.prototype = {\n    toString: function() {\n        return this.value;\n    },\n    'ev': function() {\n        return this;\n    }\n};\n\n})(__webpack_require__(/*! ../tree */ 0));\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTAxLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9jYXJ0by9saWIvY2FydG8vdHJlZS9saXRlcmFsLmpzPzA5ZWQiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQSBsaXRlcmFsIGlzIGEgbGl0ZXJhbCBzdHJpbmcgZm9yIE1hcG5payAtIHRoZVxuLy8gcmVzdWx0IG9mIHRoZSBjb21iaW5hdGlvbiBvZiBhIGB0cmVlLkZpZWxkYCB3aXRoIGFueVxuLy8gb3RoZXIgdHlwZS5cbihmdW5jdGlvbih0cmVlKSB7XG5cbnRyZWUuTGl0ZXJhbCA9IGZ1bmN0aW9uIEZpZWxkKGNvbnRlbnQpIHtcbiAgICB0aGlzLnZhbHVlID0gY29udGVudCB8fCAnJztcbiAgICB0aGlzLmlzID0gJ2ZpZWxkJztcbn07XG5cbnRyZWUuTGl0ZXJhbC5wcm90b3R5cGUgPSB7XG4gICAgdG9TdHJpbmc6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy52YWx1ZTtcbiAgICB9LFxuICAgICdldic6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG59O1xuXG59KShyZXF1aXJlKCcuLi90cmVlJykpO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NhcnRvL2xpYi9jYXJ0by90cmVlL2xpdGVyYWwuanNcbi8vIG1vZHVsZSBpZCA9IDEwMVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 102 */
/* no static exports found */
/* all exports used */
/*!*********************************************!*\
  !*** ./~/carto/lib/carto/tree/operation.js ***!
  \*********************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("// An operation is an expression with an op in between two operands,\n// like 2 + 1.\n(function(tree) {\n\ntree.Operation = function Operation(op, operands, index) {\n    this.op = op.trim();\n    this.operands = operands;\n    this.index = index;\n};\n\ntree.Operation.prototype.is = 'operation';\n\ntree.Operation.prototype.ev = function(env) {\n    var a = this.operands[0].ev(env),\n        b = this.operands[1].ev(env),\n        temp;\n\n    if (a.is === 'undefined' || b.is === 'undefined') {\n        return {\n            is: 'undefined',\n            value: 'undefined'\n        };\n    }\n\n    if (a instanceof tree.Dimension && b instanceof tree.Color) {\n        if (this.op === '*' || this.op === '+') {\n            temp = b, b = a, a = temp;\n        } else {\n            env.error({\n                name: \"OperationError\",\n                message: \"Can't substract or divide a color from a number\",\n                index: this.index\n            });\n        }\n    }\n\n    // Only concatenate plain strings, because this is easily\n    // pre-processed\n    if (a instanceof tree.Quoted && b instanceof tree.Quoted && this.op !== '+') {\n        env.error({\n           message: \"Can't subtract, divide, or multiply strings.\",\n           index: this.index,\n           type: 'runtime',\n           filename: this.filename\n        });\n        return {\n            is: 'undefined',\n            value: 'undefined'\n        };\n    }\n\n    // Fields, literals, dimensions, and quoted strings can be combined.\n    if (a instanceof tree.Field || b instanceof tree.Field ||\n        a instanceof tree.Literal || b instanceof tree.Literal) {\n        if (a.is === 'color' || b.is === 'color') {\n            env.error({\n               message: \"Can't subtract, divide, or multiply colors in expressions.\",\n               index: this.index,\n               type: 'runtime',\n               filename: this.filename\n            });\n            return {\n                is: 'undefined',\n                value: 'undefined'\n            };\n        } else {\n            return new tree.Literal(a.ev(env).toString(true) + this.op + b.ev(env).toString(true));\n        }\n    }\n\n    if (a.operate === undefined) {\n        env.error({\n           message: 'Cannot do math with type ' + a.is + '.',\n           index: this.index,\n           type: 'runtime',\n           filename: this.filename\n        });\n        return {\n            is: 'undefined',\n            value: 'undefined'\n        };\n    }\n\n    return a.operate(env, this.op, b);\n};\n\ntree.operate = function(op, a, b) {\n    switch (op) {\n        case '+': return a + b;\n        case '-': return a - b;\n        case '*': return a * b;\n        case '%': return a % b;\n        case '/': return a / b;\n    }\n};\n\n})(__webpack_require__(/*! ../tree */ 0));\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTAyLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9jYXJ0by9saWIvY2FydG8vdHJlZS9vcGVyYXRpb24uanM/Nzc2NCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBBbiBvcGVyYXRpb24gaXMgYW4gZXhwcmVzc2lvbiB3aXRoIGFuIG9wIGluIGJldHdlZW4gdHdvIG9wZXJhbmRzLFxuLy8gbGlrZSAyICsgMS5cbihmdW5jdGlvbih0cmVlKSB7XG5cbnRyZWUuT3BlcmF0aW9uID0gZnVuY3Rpb24gT3BlcmF0aW9uKG9wLCBvcGVyYW5kcywgaW5kZXgpIHtcbiAgICB0aGlzLm9wID0gb3AudHJpbSgpO1xuICAgIHRoaXMub3BlcmFuZHMgPSBvcGVyYW5kcztcbiAgICB0aGlzLmluZGV4ID0gaW5kZXg7XG59O1xuXG50cmVlLk9wZXJhdGlvbi5wcm90b3R5cGUuaXMgPSAnb3BlcmF0aW9uJztcblxudHJlZS5PcGVyYXRpb24ucHJvdG90eXBlLmV2ID0gZnVuY3Rpb24oZW52KSB7XG4gICAgdmFyIGEgPSB0aGlzLm9wZXJhbmRzWzBdLmV2KGVudiksXG4gICAgICAgIGIgPSB0aGlzLm9wZXJhbmRzWzFdLmV2KGVudiksXG4gICAgICAgIHRlbXA7XG5cbiAgICBpZiAoYS5pcyA9PT0gJ3VuZGVmaW5lZCcgfHwgYi5pcyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGlzOiAndW5kZWZpbmVkJyxcbiAgICAgICAgICAgIHZhbHVlOiAndW5kZWZpbmVkJ1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGlmIChhIGluc3RhbmNlb2YgdHJlZS5EaW1lbnNpb24gJiYgYiBpbnN0YW5jZW9mIHRyZWUuQ29sb3IpIHtcbiAgICAgICAgaWYgKHRoaXMub3AgPT09ICcqJyB8fCB0aGlzLm9wID09PSAnKycpIHtcbiAgICAgICAgICAgIHRlbXAgPSBiLCBiID0gYSwgYSA9IHRlbXA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBlbnYuZXJyb3Ioe1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiT3BlcmF0aW9uRXJyb3JcIixcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiBcIkNhbid0IHN1YnN0cmFjdCBvciBkaXZpZGUgYSBjb2xvciBmcm9tIGEgbnVtYmVyXCIsXG4gICAgICAgICAgICAgICAgaW5kZXg6IHRoaXMuaW5kZXhcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gT25seSBjb25jYXRlbmF0ZSBwbGFpbiBzdHJpbmdzLCBiZWNhdXNlIHRoaXMgaXMgZWFzaWx5XG4gICAgLy8gcHJlLXByb2Nlc3NlZFxuICAgIGlmIChhIGluc3RhbmNlb2YgdHJlZS5RdW90ZWQgJiYgYiBpbnN0YW5jZW9mIHRyZWUuUXVvdGVkICYmIHRoaXMub3AgIT09ICcrJykge1xuICAgICAgICBlbnYuZXJyb3Ioe1xuICAgICAgICAgICBtZXNzYWdlOiBcIkNhbid0IHN1YnRyYWN0LCBkaXZpZGUsIG9yIG11bHRpcGx5IHN0cmluZ3MuXCIsXG4gICAgICAgICAgIGluZGV4OiB0aGlzLmluZGV4LFxuICAgICAgICAgICB0eXBlOiAncnVudGltZScsXG4gICAgICAgICAgIGZpbGVuYW1lOiB0aGlzLmZpbGVuYW1lXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgaXM6ICd1bmRlZmluZWQnLFxuICAgICAgICAgICAgdmFsdWU6ICd1bmRlZmluZWQnXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gRmllbGRzLCBsaXRlcmFscywgZGltZW5zaW9ucywgYW5kIHF1b3RlZCBzdHJpbmdzIGNhbiBiZSBjb21iaW5lZC5cbiAgICBpZiAoYSBpbnN0YW5jZW9mIHRyZWUuRmllbGQgfHwgYiBpbnN0YW5jZW9mIHRyZWUuRmllbGQgfHxcbiAgICAgICAgYSBpbnN0YW5jZW9mIHRyZWUuTGl0ZXJhbCB8fCBiIGluc3RhbmNlb2YgdHJlZS5MaXRlcmFsKSB7XG4gICAgICAgIGlmIChhLmlzID09PSAnY29sb3InIHx8IGIuaXMgPT09ICdjb2xvcicpIHtcbiAgICAgICAgICAgIGVudi5lcnJvcih7XG4gICAgICAgICAgICAgICBtZXNzYWdlOiBcIkNhbid0IHN1YnRyYWN0LCBkaXZpZGUsIG9yIG11bHRpcGx5IGNvbG9ycyBpbiBleHByZXNzaW9ucy5cIixcbiAgICAgICAgICAgICAgIGluZGV4OiB0aGlzLmluZGV4LFxuICAgICAgICAgICAgICAgdHlwZTogJ3J1bnRpbWUnLFxuICAgICAgICAgICAgICAgZmlsZW5hbWU6IHRoaXMuZmlsZW5hbWVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBpczogJ3VuZGVmaW5lZCcsXG4gICAgICAgICAgICAgICAgdmFsdWU6ICd1bmRlZmluZWQnXG4gICAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyB0cmVlLkxpdGVyYWwoYS5ldihlbnYpLnRvU3RyaW5nKHRydWUpICsgdGhpcy5vcCArIGIuZXYoZW52KS50b1N0cmluZyh0cnVlKSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoYS5vcGVyYXRlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgZW52LmVycm9yKHtcbiAgICAgICAgICAgbWVzc2FnZTogJ0Nhbm5vdCBkbyBtYXRoIHdpdGggdHlwZSAnICsgYS5pcyArICcuJyxcbiAgICAgICAgICAgaW5kZXg6IHRoaXMuaW5kZXgsXG4gICAgICAgICAgIHR5cGU6ICdydW50aW1lJyxcbiAgICAgICAgICAgZmlsZW5hbWU6IHRoaXMuZmlsZW5hbWVcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBpczogJ3VuZGVmaW5lZCcsXG4gICAgICAgICAgICB2YWx1ZTogJ3VuZGVmaW5lZCdcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gYS5vcGVyYXRlKGVudiwgdGhpcy5vcCwgYik7XG59O1xuXG50cmVlLm9wZXJhdGUgPSBmdW5jdGlvbihvcCwgYSwgYikge1xuICAgIHN3aXRjaCAob3ApIHtcbiAgICAgICAgY2FzZSAnKyc6IHJldHVybiBhICsgYjtcbiAgICAgICAgY2FzZSAnLSc6IHJldHVybiBhIC0gYjtcbiAgICAgICAgY2FzZSAnKic6IHJldHVybiBhICogYjtcbiAgICAgICAgY2FzZSAnJSc6IHJldHVybiBhICUgYjtcbiAgICAgICAgY2FzZSAnLyc6IHJldHVybiBhIC8gYjtcbiAgICB9XG59O1xuXG59KShyZXF1aXJlKCcuLi90cmVlJykpO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NhcnRvL2xpYi9jYXJ0by90cmVlL29wZXJhdGlvbi5qc1xuLy8gbW9kdWxlIGlkID0gMTAyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 103 */
/* no static exports found */
/* all exports used */
/*!******************************************!*\
  !*** ./~/carto/lib/carto/tree/quoted.js ***!
  \******************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("(function(tree) {\n\ntree.Quoted = function Quoted(content) {\n    this.value = content || '';\n};\n\ntree.Quoted.prototype = {\n    is: 'string',\n\n    toString: function(quotes) {\n        var escapedValue = this.value\n            .replace(/&/g, '&amp;')\n        var xmlvalue = escapedValue\n            .replace(/\\'/g, '\\\\\\'')\n            .replace(/\\\"/g, '&quot;')\n            .replace(/</g, '&lt;')\n            .replace(/\\>/g, '&gt;');\n        return (quotes === true) ? \"'\" + xmlvalue + \"'\" : escapedValue;\n    },\n\n    'ev': function() {\n        return this;\n    },\n\n    operate: function(env, op, other) {\n        return new tree.Quoted(tree.operate(op, this.toString(), other.toString(this.contains_field)));\n    }\n};\n\n})(__webpack_require__(/*! ../tree */ 0));\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTAzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9jYXJ0by9saWIvY2FydG8vdHJlZS9xdW90ZWQuanM/NTUxYSJdLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24odHJlZSkge1xuXG50cmVlLlF1b3RlZCA9IGZ1bmN0aW9uIFF1b3RlZChjb250ZW50KSB7XG4gICAgdGhpcy52YWx1ZSA9IGNvbnRlbnQgfHwgJyc7XG59O1xuXG50cmVlLlF1b3RlZC5wcm90b3R5cGUgPSB7XG4gICAgaXM6ICdzdHJpbmcnLFxuXG4gICAgdG9TdHJpbmc6IGZ1bmN0aW9uKHF1b3Rlcykge1xuICAgICAgICB2YXIgZXNjYXBlZFZhbHVlID0gdGhpcy52YWx1ZVxuICAgICAgICAgICAgLnJlcGxhY2UoLyYvZywgJyZhbXA7JylcbiAgICAgICAgdmFyIHhtbHZhbHVlID0gZXNjYXBlZFZhbHVlXG4gICAgICAgICAgICAucmVwbGFjZSgvXFwnL2csICdcXFxcXFwnJylcbiAgICAgICAgICAgIC5yZXBsYWNlKC9cXFwiL2csICcmcXVvdDsnKVxuICAgICAgICAgICAgLnJlcGxhY2UoLzwvZywgJyZsdDsnKVxuICAgICAgICAgICAgLnJlcGxhY2UoL1xcPi9nLCAnJmd0OycpO1xuICAgICAgICByZXR1cm4gKHF1b3RlcyA9PT0gdHJ1ZSkgPyBcIidcIiArIHhtbHZhbHVlICsgXCInXCIgOiBlc2NhcGVkVmFsdWU7XG4gICAgfSxcblxuICAgICdldic6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgb3BlcmF0ZTogZnVuY3Rpb24oZW52LCBvcCwgb3RoZXIpIHtcbiAgICAgICAgcmV0dXJuIG5ldyB0cmVlLlF1b3RlZCh0cmVlLm9wZXJhdGUob3AsIHRoaXMudG9TdHJpbmcoKSwgb3RoZXIudG9TdHJpbmcodGhpcy5jb250YWluc19maWVsZCkpKTtcbiAgICB9XG59O1xuXG59KShyZXF1aXJlKCcuLi90cmVlJykpO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NhcnRvL2xpYi9jYXJ0by90cmVlL3F1b3RlZC5qc1xuLy8gbW9kdWxlIGlkID0gMTAzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 104 */
/* no static exports found */
/* all exports used */
/*!*********************************************!*\
  !*** ./~/carto/lib/carto/tree/reference.js ***!
  \*********************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global) {// Carto pulls in a reference from the `mapnik-reference`\n// module. This file builds indexes from that file for its various\n// options, and provides validation methods for property: value\n// combinations.\n(function(tree) {\n\nvar _ = global._ || __webpack_require__(/*! underscore */ 4),\n    ref = {};\n\nref.setData = function(data) {\n    ref.data = data;\n    ref.selector_cache = generateSelectorCache(data);\n    ref.mapnikFunctions = generateMapnikFunctions(data);\n\n    ref.mapnikFunctions.matrix = [6];\n    ref.mapnikFunctions.translate = [1, 2];\n    ref.mapnikFunctions.scale = [1, 2];\n    ref.mapnikFunctions.rotate = [1, 3];\n    ref.mapnikFunctions.skewX = [1];\n    ref.mapnikFunctions.skewY = [1];\n\n    ref.required_cache = generateRequiredProperties(data);\n};\n\nref.setVersion = function(version) {\n    var mapnik_reference = __webpack_require__(/*! mapnik-reference */ 141);\n    if (mapnik_reference.version.hasOwnProperty(version)) {\n        ref.setData(mapnik_reference.version[version]);\n        return true;\n    } else {\n        return false;\n    }\n};\n\nref.selectorData = function(selector, i) {\n    if (ref.selector_cache[selector]) return ref.selector_cache[selector][i];\n};\n\nref.validSelector = function(selector) { return !!ref.selector_cache[selector]; };\nref.selectorName = function(selector) { return ref.selectorData(selector, 2); };\nref.selector = function(selector) { return ref.selectorData(selector, 0); };\nref.symbolizer = function(selector) { return ref.selectorData(selector, 1); };\n\nfunction generateSelectorCache(data) {\n    var index = {};\n    for (var i in data.symbolizers) {\n        for (var j in data.symbolizers[i]) {\n            if (data.symbolizers[i][j].hasOwnProperty('css')) {\n                index[data.symbolizers[i][j].css] = [data.symbolizers[i][j], i, j];\n            }\n        }\n    }\n    return index;\n}\n\nfunction generateMapnikFunctions(data) {\n    var functions = {};\n    for (var i in data.symbolizers) {\n        for (var j in data.symbolizers[i]) {\n            if (data.symbolizers[i][j].type === 'functions') {\n                for (var k = 0; k < data.symbolizers[i][j].functions.length; k++) {\n                    var fn = data.symbolizers[i][j].functions[k];\n                    functions[fn[0]] = fn[1];\n                }\n            }\n        }\n    }\n    return functions;\n}\n\nfunction generateRequiredProperties(data) {\n    var cache = {};\n    for (var symbolizer_name in data.symbolizers) {\n        cache[symbolizer_name] = [];\n        for (var j in data.symbolizers[symbolizer_name]) {\n            if (data.symbolizers[symbolizer_name][j].required) {\n                cache[symbolizer_name].push(data.symbolizers[symbolizer_name][j].css);\n            }\n        }\n    }\n    return cache;\n}\n\nref.requiredProperties = function(symbolizer_name, rules) {\n    var req = ref.required_cache[symbolizer_name];\n    for (var i in req) {\n        if (!(req[i] in rules)) {\n            return 'Property ' + req[i] + ' required for defining ' +\n                symbolizer_name + ' styles.';\n        }\n    }\n};\n\n// TODO: finish implementation - this is dead code\nref._validateValue = {\n    'font': function(env, value) {\n        if (env.validation_data && env.validation_data.fonts) {\n            return env.validation_data.fonts.indexOf(value) != -1;\n        } else {\n            return true;\n        }\n    }\n};\n\nref.isFont = function(selector) {\n    return ref.selector(selector).validate == 'font';\n};\n\n// https://gist.github.com/982927\nref.editDistance = function(a, b){\n    if (a.length === 0) return b.length;\n    if (b.length === 0) return a.length;\n    var matrix = [];\n    for (var i = 0; i <= b.length; i++) { matrix[i] = [i]; }\n    for (var j = 0; j <= a.length; j++) { matrix[0][j] = j; }\n    for (i = 1; i <= b.length; i++) {\n        for (j = 1; j <= a.length; j++) {\n            if (b.charAt(i-1) == a.charAt(j-1)) {\n                matrix[i][j] = matrix[i-1][j-1];\n            } else {\n                matrix[i][j] = Math.min(matrix[i-1][j-1] + 1, // substitution\n                    Math.min(matrix[i][j-1] + 1, // insertion\n                    matrix[i-1][j] + 1)); // deletion\n            }\n        }\n    }\n    return matrix[b.length][a.length];\n};\n\nfunction validateFunctions(value, selector) {\n    if (value.value[0].is === 'string') return true;\n    for (var i in value.value) {\n        for (var j in value.value[i].value) {\n            if (value.value[i].value[j].is !== 'call') return false;\n            var f = _.find(ref\n                .selector(selector).functions, function(x) {\n                    return x[0] == value.value[i].value[j].name;\n                });\n            if (!(f && f[1] == -1)) {\n                // This filter is unknown or given an incorrect number of arguments\n                if (!f || f[1] !== value.value[i].value[j].args.length) return false;\n            }\n        }\n    }\n    return true;\n}\n\nfunction validateKeyword(value, selector) {\n    if (typeof ref.selector(selector).type === 'object') {\n        return ref.selector(selector).type\n            .indexOf(value.value[0].value) !== -1;\n    } else {\n        // allow unquoted keywords as strings\n        return ref.selector(selector).type === 'string';\n    }\n}\n\nref.validValue = function(env, selector, value) {\n    var i, j;\n    // TODO: handle in reusable way\n    if (!ref.selector(selector)) {\n        return false;\n    } else if (value.value[0].is == 'keyword') {\n        return validateKeyword(value, selector);\n    } else if (value.value[0].is == 'undefined') {\n        // caught earlier in the chain - ignore here so that\n        // error is not overridden\n        return true;\n    } else if (ref.selector(selector).type == 'numbers') {\n        for (i in value.value) {\n            if (value.value[i].is !== 'float') {\n                return false;\n            }\n        }\n        return true;\n    } else if (ref.selector(selector).type == 'tags') {\n        if (!value.value) return false;\n        if (!value.value[0].value) {\n            return value.value[0].is === 'tag';\n        }\n        for (i = 0; i < value.value[0].value.length; i++) {\n            if (value.value[0].value[i].is !== 'tag') return false;\n        }\n        return true;\n    } else if (ref.selector(selector).type == 'functions') {\n        // For backwards compatibility, you can specify a string for `functions`-compatible\n        // values, though they will not be validated.\n        return validateFunctions(value, selector);\n    } else if (ref.selector(selector).type === 'unsigned') {\n        if (value.value[0].is === 'float') {\n            value.value[0].round();\n            return true;\n        } else {\n            return false;\n        }\n    } else if ((ref.selector(selector).expression)) {\n        return true;\n    } else {\n        if (ref.selector(selector).validate) {\n            var valid = false;\n            for (i = 0; i < value.value.length; i++) {\n                if (ref.selector(selector).type == value.value[i].is &&\n                    ref\n                        ._validateValue\n                            [ref.selector(selector).validate]\n                            (env, value.value[i].value)) {\n                    return true;\n                }\n            }\n            return valid;\n        } else {\n            return ref.selector(selector).type == value.value[0].is;\n        }\n    }\n};\n\ntree.Reference = ref;\n\n})(__webpack_require__(/*! ../tree */ 0));\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./../../../../webpack/buildin/global.js */ 3)))//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 105 */
/* no static exports found */
/* all exports used */
/*!****************************************!*\
  !*** ./~/carto/lib/carto/tree/rule.js ***!
  \****************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("(function(tree) {\n// a rule is a single property and value combination, or variable\n// name and value combination, like\n// polygon-opacity: 1.0; or @opacity: 1.0;\ntree.Rule = function Rule(name, value, index, filename) {\n    var parts = name.split('/');\n    this.name = parts.pop();\n    this.instance = parts.length ? parts[0] : '__default__';\n    this.value = (value instanceof tree.Value) ?\n        value : new tree.Value([value]);\n    this.index = index;\n    this.symbolizer = tree.Reference.symbolizer(this.name);\n    this.filename = filename;\n    this.variable = (name.charAt(0) === '@');\n};\n\ntree.Rule.prototype.is = 'rule';\n\ntree.Rule.prototype.clone = function() {\n    var clone = Object.create(tree.Rule.prototype);\n    clone.name = this.name;\n    clone.value = this.value;\n    clone.index = this.index;\n    clone.instance = this.instance;\n    clone.symbolizer = this.symbolizer;\n    clone.filename = this.filename;\n    clone.variable = this.variable;\n    return clone;\n};\n\ntree.Rule.prototype.updateID = function() {\n    return this.id = this.zoom + '#' + this.instance + '#' + this.name;\n};\n\ntree.Rule.prototype.toString = function() {\n    return '[' + tree.Zoom.toString(this.zoom) + '] ' + this.name + ': ' + this.value;\n};\n\nfunction getMean(name) {\n    return Object.keys(tree.Reference.selector_cache).map(function(f) {\n        return [f, tree.Reference.editDistance(name, f)];\n    }).sort(function(a, b) { return a[1] - b[1]; });\n}\n\n// second argument, if true, outputs the value of this\n// rule without the usual attribute=\"content\" wrapping. Right\n// now this is just for the TextSymbolizer, but applies to other\n// properties in reference.json which specify serialization=content\ntree.Rule.prototype.toXML = function(env, content, sep, format) {\n    if (!tree.Reference.validSelector(this.name)) {\n        var mean = getMean(this.name);\n        var mean_message = '';\n        if (mean[0][1] < 3) {\n            mean_message = '. Did you mean ' + mean[0][0] + '?';\n        }\n        return env.error({\n            message: \"Unrecognized rule: \" + this.name + mean_message,\n            index: this.index,\n            type: 'syntax',\n            filename: this.filename\n        });\n    }\n\n    if ((this.value instanceof tree.Value) &&\n        !tree.Reference.validValue(env, this.name, this.value)) {\n        if (!tree.Reference.selector(this.name)) {\n            return env.error({\n                message: 'Unrecognized property: ' +\n                    this.name,\n                index: this.index,\n                type: 'syntax',\n                filename: this.filename\n            });\n        } else {\n            var typename;\n            if (tree.Reference.selector(this.name).validate) {\n                typename = tree.Reference.selector(this.name).validate;\n            } else if (typeof tree.Reference.selector(this.name).type === 'object') {\n                typename = 'keyword (options: ' + tree.Reference.selector(this.name).type.join(', ') + ')';\n            } else {\n                typename = tree.Reference.selector(this.name).type;\n            }\n            return env.error({\n                message: 'Invalid value for ' +\n                    this.name +\n                    ', the type ' + typename +\n                    ' is expected. ' + this.value +\n                    ' (of type ' + this.value.value[0].is + ') ' +\n                    ' was given.',\n                index: this.index,\n                type: 'syntax',\n                filename: this.filename\n            });\n        }\n    }\n\n    if (this.variable) {\n        return '';\n    } else if (tree.Reference.isFont(this.name) && this.value.value.length > 1) {\n        var f = tree._getFontSet(env, this.value.value);\n        return 'fontset-name=\"' + f.name + '\"';\n    } else if (content) {\n        return this.value.toString(env, this.name, sep);\n    } else {\n        return tree.Reference.selectorName(this.name) +\n            '=\"' +\n            this.value.toString(env, this.name) +\n            '\"';\n    }\n};\n\n// TODO: Rule ev chain should add fontsets to env.frames\ntree.Rule.prototype.ev = function(context) {\n    return new tree.Rule(this.name,\n        this.value.ev(context),\n        this.index,\n        this.filename);\n};\n\n})(__webpack_require__(/*! ../tree */ 0));\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTA1LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9jYXJ0by9saWIvY2FydG8vdHJlZS9ydWxlLmpzPzVjYmUiXSwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uKHRyZWUpIHtcbi8vIGEgcnVsZSBpcyBhIHNpbmdsZSBwcm9wZXJ0eSBhbmQgdmFsdWUgY29tYmluYXRpb24sIG9yIHZhcmlhYmxlXG4vLyBuYW1lIGFuZCB2YWx1ZSBjb21iaW5hdGlvbiwgbGlrZVxuLy8gcG9seWdvbi1vcGFjaXR5OiAxLjA7IG9yIEBvcGFjaXR5OiAxLjA7XG50cmVlLlJ1bGUgPSBmdW5jdGlvbiBSdWxlKG5hbWUsIHZhbHVlLCBpbmRleCwgZmlsZW5hbWUpIHtcbiAgICB2YXIgcGFydHMgPSBuYW1lLnNwbGl0KCcvJyk7XG4gICAgdGhpcy5uYW1lID0gcGFydHMucG9wKCk7XG4gICAgdGhpcy5pbnN0YW5jZSA9IHBhcnRzLmxlbmd0aCA/IHBhcnRzWzBdIDogJ19fZGVmYXVsdF9fJztcbiAgICB0aGlzLnZhbHVlID0gKHZhbHVlIGluc3RhbmNlb2YgdHJlZS5WYWx1ZSkgP1xuICAgICAgICB2YWx1ZSA6IG5ldyB0cmVlLlZhbHVlKFt2YWx1ZV0pO1xuICAgIHRoaXMuaW5kZXggPSBpbmRleDtcbiAgICB0aGlzLnN5bWJvbGl6ZXIgPSB0cmVlLlJlZmVyZW5jZS5zeW1ib2xpemVyKHRoaXMubmFtZSk7XG4gICAgdGhpcy5maWxlbmFtZSA9IGZpbGVuYW1lO1xuICAgIHRoaXMudmFyaWFibGUgPSAobmFtZS5jaGFyQXQoMCkgPT09ICdAJyk7XG59O1xuXG50cmVlLlJ1bGUucHJvdG90eXBlLmlzID0gJ3J1bGUnO1xuXG50cmVlLlJ1bGUucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGNsb25lID0gT2JqZWN0LmNyZWF0ZSh0cmVlLlJ1bGUucHJvdG90eXBlKTtcbiAgICBjbG9uZS5uYW1lID0gdGhpcy5uYW1lO1xuICAgIGNsb25lLnZhbHVlID0gdGhpcy52YWx1ZTtcbiAgICBjbG9uZS5pbmRleCA9IHRoaXMuaW5kZXg7XG4gICAgY2xvbmUuaW5zdGFuY2UgPSB0aGlzLmluc3RhbmNlO1xuICAgIGNsb25lLnN5bWJvbGl6ZXIgPSB0aGlzLnN5bWJvbGl6ZXI7XG4gICAgY2xvbmUuZmlsZW5hbWUgPSB0aGlzLmZpbGVuYW1lO1xuICAgIGNsb25lLnZhcmlhYmxlID0gdGhpcy52YXJpYWJsZTtcbiAgICByZXR1cm4gY2xvbmU7XG59O1xuXG50cmVlLlJ1bGUucHJvdG90eXBlLnVwZGF0ZUlEID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuaWQgPSB0aGlzLnpvb20gKyAnIycgKyB0aGlzLmluc3RhbmNlICsgJyMnICsgdGhpcy5uYW1lO1xufTtcblxudHJlZS5SdWxlLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiAnWycgKyB0cmVlLlpvb20udG9TdHJpbmcodGhpcy56b29tKSArICddICcgKyB0aGlzLm5hbWUgKyAnOiAnICsgdGhpcy52YWx1ZTtcbn07XG5cbmZ1bmN0aW9uIGdldE1lYW4obmFtZSkge1xuICAgIHJldHVybiBPYmplY3Qua2V5cyh0cmVlLlJlZmVyZW5jZS5zZWxlY3Rvcl9jYWNoZSkubWFwKGZ1bmN0aW9uKGYpIHtcbiAgICAgICAgcmV0dXJuIFtmLCB0cmVlLlJlZmVyZW5jZS5lZGl0RGlzdGFuY2UobmFtZSwgZildO1xuICAgIH0pLnNvcnQoZnVuY3Rpb24oYSwgYikgeyByZXR1cm4gYVsxXSAtIGJbMV07IH0pO1xufVxuXG4vLyBzZWNvbmQgYXJndW1lbnQsIGlmIHRydWUsIG91dHB1dHMgdGhlIHZhbHVlIG9mIHRoaXNcbi8vIHJ1bGUgd2l0aG91dCB0aGUgdXN1YWwgYXR0cmlidXRlPVwiY29udGVudFwiIHdyYXBwaW5nLiBSaWdodFxuLy8gbm93IHRoaXMgaXMganVzdCBmb3IgdGhlIFRleHRTeW1ib2xpemVyLCBidXQgYXBwbGllcyB0byBvdGhlclxuLy8gcHJvcGVydGllcyBpbiByZWZlcmVuY2UuanNvbiB3aGljaCBzcGVjaWZ5IHNlcmlhbGl6YXRpb249Y29udGVudFxudHJlZS5SdWxlLnByb3RvdHlwZS50b1hNTCA9IGZ1bmN0aW9uKGVudiwgY29udGVudCwgc2VwLCBmb3JtYXQpIHtcbiAgICBpZiAoIXRyZWUuUmVmZXJlbmNlLnZhbGlkU2VsZWN0b3IodGhpcy5uYW1lKSkge1xuICAgICAgICB2YXIgbWVhbiA9IGdldE1lYW4odGhpcy5uYW1lKTtcbiAgICAgICAgdmFyIG1lYW5fbWVzc2FnZSA9ICcnO1xuICAgICAgICBpZiAobWVhblswXVsxXSA8IDMpIHtcbiAgICAgICAgICAgIG1lYW5fbWVzc2FnZSA9ICcuIERpZCB5b3UgbWVhbiAnICsgbWVhblswXVswXSArICc/JztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZW52LmVycm9yKHtcbiAgICAgICAgICAgIG1lc3NhZ2U6IFwiVW5yZWNvZ25pemVkIHJ1bGU6IFwiICsgdGhpcy5uYW1lICsgbWVhbl9tZXNzYWdlLFxuICAgICAgICAgICAgaW5kZXg6IHRoaXMuaW5kZXgsXG4gICAgICAgICAgICB0eXBlOiAnc3ludGF4JyxcbiAgICAgICAgICAgIGZpbGVuYW1lOiB0aGlzLmZpbGVuYW1lXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmICgodGhpcy52YWx1ZSBpbnN0YW5jZW9mIHRyZWUuVmFsdWUpICYmXG4gICAgICAgICF0cmVlLlJlZmVyZW5jZS52YWxpZFZhbHVlKGVudiwgdGhpcy5uYW1lLCB0aGlzLnZhbHVlKSkge1xuICAgICAgICBpZiAoIXRyZWUuUmVmZXJlbmNlLnNlbGVjdG9yKHRoaXMubmFtZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBlbnYuZXJyb3Ioe1xuICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdVbnJlY29nbml6ZWQgcHJvcGVydHk6ICcgK1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm5hbWUsXG4gICAgICAgICAgICAgICAgaW5kZXg6IHRoaXMuaW5kZXgsXG4gICAgICAgICAgICAgICAgdHlwZTogJ3N5bnRheCcsXG4gICAgICAgICAgICAgICAgZmlsZW5hbWU6IHRoaXMuZmlsZW5hbWVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIHR5cGVuYW1lO1xuICAgICAgICAgICAgaWYgKHRyZWUuUmVmZXJlbmNlLnNlbGVjdG9yKHRoaXMubmFtZSkudmFsaWRhdGUpIHtcbiAgICAgICAgICAgICAgICB0eXBlbmFtZSA9IHRyZWUuUmVmZXJlbmNlLnNlbGVjdG9yKHRoaXMubmFtZSkudmFsaWRhdGU7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiB0cmVlLlJlZmVyZW5jZS5zZWxlY3Rvcih0aGlzLm5hbWUpLnR5cGUgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgdHlwZW5hbWUgPSAna2V5d29yZCAob3B0aW9uczogJyArIHRyZWUuUmVmZXJlbmNlLnNlbGVjdG9yKHRoaXMubmFtZSkudHlwZS5qb2luKCcsICcpICsgJyknO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0eXBlbmFtZSA9IHRyZWUuUmVmZXJlbmNlLnNlbGVjdG9yKHRoaXMubmFtZSkudHlwZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBlbnYuZXJyb3Ioe1xuICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdJbnZhbGlkIHZhbHVlIGZvciAnICtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5uYW1lICtcbiAgICAgICAgICAgICAgICAgICAgJywgdGhlIHR5cGUgJyArIHR5cGVuYW1lICtcbiAgICAgICAgICAgICAgICAgICAgJyBpcyBleHBlY3RlZC4gJyArIHRoaXMudmFsdWUgK1xuICAgICAgICAgICAgICAgICAgICAnIChvZiB0eXBlICcgKyB0aGlzLnZhbHVlLnZhbHVlWzBdLmlzICsgJykgJyArXG4gICAgICAgICAgICAgICAgICAgICcgd2FzIGdpdmVuLicsXG4gICAgICAgICAgICAgICAgaW5kZXg6IHRoaXMuaW5kZXgsXG4gICAgICAgICAgICAgICAgdHlwZTogJ3N5bnRheCcsXG4gICAgICAgICAgICAgICAgZmlsZW5hbWU6IHRoaXMuZmlsZW5hbWVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHRoaXMudmFyaWFibGUpIHtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgIH0gZWxzZSBpZiAodHJlZS5SZWZlcmVuY2UuaXNGb250KHRoaXMubmFtZSkgJiYgdGhpcy52YWx1ZS52YWx1ZS5sZW5ndGggPiAxKSB7XG4gICAgICAgIHZhciBmID0gdHJlZS5fZ2V0Rm9udFNldChlbnYsIHRoaXMudmFsdWUudmFsdWUpO1xuICAgICAgICByZXR1cm4gJ2ZvbnRzZXQtbmFtZT1cIicgKyBmLm5hbWUgKyAnXCInO1xuICAgIH0gZWxzZSBpZiAoY29udGVudCkge1xuICAgICAgICByZXR1cm4gdGhpcy52YWx1ZS50b1N0cmluZyhlbnYsIHRoaXMubmFtZSwgc2VwKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdHJlZS5SZWZlcmVuY2Uuc2VsZWN0b3JOYW1lKHRoaXMubmFtZSkgK1xuICAgICAgICAgICAgJz1cIicgK1xuICAgICAgICAgICAgdGhpcy52YWx1ZS50b1N0cmluZyhlbnYsIHRoaXMubmFtZSkgK1xuICAgICAgICAgICAgJ1wiJztcbiAgICB9XG59O1xuXG4vLyBUT0RPOiBSdWxlIGV2IGNoYWluIHNob3VsZCBhZGQgZm9udHNldHMgdG8gZW52LmZyYW1lc1xudHJlZS5SdWxlLnByb3RvdHlwZS5ldiA9IGZ1bmN0aW9uKGNvbnRleHQpIHtcbiAgICByZXR1cm4gbmV3IHRyZWUuUnVsZSh0aGlzLm5hbWUsXG4gICAgICAgIHRoaXMudmFsdWUuZXYoY29udGV4dCksXG4gICAgICAgIHRoaXMuaW5kZXgsXG4gICAgICAgIHRoaXMuZmlsZW5hbWUpO1xufTtcblxufSkocmVxdWlyZSgnLi4vdHJlZScpKTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jYXJ0by9saWIvY2FydG8vdHJlZS9ydWxlLmpzXG4vLyBtb2R1bGUgaWQgPSAxMDVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 106 */
/* no static exports found */
/* all exports used */
/*!*******************************************!*\
  !*** ./~/carto/lib/carto/tree/ruleset.js ***!
  \*******************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("(function(tree) {\n\ntree.Ruleset = function Ruleset(selectors, rules) {\n    this.selectors = selectors;\n    this.rules = rules;\n    // static cache of find() function\n    this._lookups = {};\n};\ntree.Ruleset.prototype = {\n    is: 'ruleset',\n    'ev': function(env) {\n        var i,\n            ruleset = new tree.Ruleset(this.selectors, this.rules.slice(0));\n        ruleset.root = this.root;\n\n        // push the current ruleset to the frames stack\n        env.frames.unshift(ruleset);\n\n        // Evaluate everything else\n        for (i = 0, rule; i < ruleset.rules.length; i++) {\n            rule = ruleset.rules[i];\n            ruleset.rules[i] = rule.ev ? rule.ev(env) : rule;\n        }\n\n        // Pop the stack\n        env.frames.shift();\n\n        return ruleset;\n    },\n    match: function(args) {\n        return !args || args.length === 0;\n    },\n    variables: function() {\n        if (this._variables) { return this._variables; }\n        else {\n            return this._variables = this.rules.reduce(function(hash, r) {\n                if (r instanceof tree.Rule && r.variable === true) {\n                    hash[r.name] = r;\n                }\n                return hash;\n            }, {});\n        }\n    },\n    variable: function(name) {\n        return this.variables()[name];\n    },\n    rulesets: function() {\n        if (this._rulesets) { return this._rulesets; }\n        else {\n            return this._rulesets = this.rules.filter(function(r) {\n                return (r instanceof tree.Ruleset);\n            });\n        }\n    },\n    find: function(selector, self) {\n        self = self || this;\n        var rules = [], rule, match,\n            key = selector.toString();\n\n        if (key in this._lookups) { return this._lookups[key]; }\n\n        this.rulesets().forEach(function(rule) {\n            if (rule !== self) {\n                for (var j = 0; j < rule.selectors.length; j++) {\n                    match = selector.match(rule.selectors[j]);\n                    if (match) {\n                        if (selector.elements.length > 1) {\n                            Array.prototype.push.apply(rules, rule.find(\n                                new tree.Selector(null, null, null, selector.elements.slice(1)), self));\n                        } else {\n                            rules.push(rule);\n                        }\n                        break;\n                    }\n                }\n            }\n        });\n        return this._lookups[key] = rules;\n    },\n    // Zooms can use variables. This replaces tree.Zoom objects on selectors\n    // with simple bit-arrays that we can compare easily.\n    evZooms: function(env) {\n        for (var i = 0; i < this.selectors.length; i++) {\n            var zval = tree.Zoom.all;\n            for (var z = 0; z < this.selectors[i].zoom.length; z++) {\n                zval = zval & this.selectors[i].zoom[z].ev(env).zoom;\n            }\n            this.selectors[i].zoom = zval;\n        }\n    },\n    flatten: function(result, parents, env) {\n        var selectors = [], i, j;\n        if (this.selectors.length === 0) {\n            env.frames = env.frames.concat(this.rules);\n        }\n        // evaluate zoom variables on this object.\n        this.evZooms(env);\n        for (i = 0; i < this.selectors.length; i++) {\n            var child = this.selectors[i];\n\n            if (!child.filters) {\n                // TODO: is this internal inconsistency?\n                // This is an invalid filterset.\n                continue;\n            }\n\n            if (parents.length) {\n                for (j = 0; j < parents.length; j++) {\n                    var parent = parents[j];\n\n                    var mergedFilters = parent.filters.cloneWith(child.filters);\n                    if (mergedFilters === null) {\n                        // Filters could be added, but they didn't change the\n                        // filters. This means that we only have to clone when\n                        // the zoom levels or the attachment is different too.\n                        if (parent.zoom === (parent.zoom & child.zoom) &&\n                            parent.frame_offset === child.frame_offset &&\n                            parent.attachment === child.attachment &&\n                            parent.elements.join() === child.elements.join()) {\n                            selectors.push(parent);\n                            continue;\n                        } else {\n                            mergedFilters = parent.filters;\n                        }\n                    } else if (!mergedFilters) {\n                        // The merged filters are invalid, that means we don't\n                        // have to clone.\n                        continue;\n                    }\n\n                    var clone = Object.create(tree.Selector.prototype);\n                    clone.filters = mergedFilters;\n                    clone.zoom = parent.zoom & child.zoom;\n                    clone.frame_offset = child.frame_offset;\n                    clone.elements = parent.elements.concat(child.elements);\n                    if (parent.attachment && child.attachment) {\n                        clone.attachment = parent.attachment + '/' + child.attachment;\n                    }\n                    else clone.attachment = child.attachment || parent.attachment;\n                    clone.conditions = parent.conditions + child.conditions;\n                    clone.index = child.index;\n                    selectors.push(clone);\n                }\n            } else {\n                selectors.push(child);\n            }\n        }\n\n        var rules = [];\n        for (i = 0; i < this.rules.length; i++) {\n            var rule = this.rules[i];\n\n            // Recursively flatten any nested rulesets\n            if (rule instanceof tree.Ruleset) {\n                rule.flatten(result, selectors, env);\n            } else if (rule instanceof tree.Rule) {\n                rules.push(rule);\n            } else if (rule instanceof tree.Invalid) {\n                env.error(rule);\n            }\n        }\n\n        var index = rules.length ? rules[0].index : false;\n        for (i = 0; i < selectors.length; i++) {\n            // For specificity sort, use the position of the first rule to allow\n            // defining attachments that are under current element as a descendant\n            // selector.\n            if (index !== false) {\n                selectors[i].index = index;\n            }\n            result.push(new tree.Definition(selectors[i], rules.slice()));\n        }\n\n        return result;\n    }\n};\n})(__webpack_require__(/*! ../tree */ 0));\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 107 */
/* no static exports found */
/* all exports used */
/*!********************************************!*\
  !*** ./~/carto/lib/carto/tree/selector.js ***!
  \********************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("(function(tree) {\n\ntree.Selector = function Selector(filters, zoom, frame_offset, elements, attachment, conditions, index) {\n    this.elements = elements || [];\n    this.attachment = attachment;\n    this.filters = filters || {};\n    this.frame_offset = frame_offset;\n    this.zoom = typeof zoom !== 'undefined' ? zoom : tree.Zoom.all;\n    this.conditions = conditions;\n    this.index = index;\n};\n\n// Determine the specificity of this selector\n// based on the specificity of its elements - calling\n// Element.specificity() in order to do so\n//\n// [ID, Class, Filters, Position in document]\ntree.Selector.prototype.specificity = function() {\n    return this.elements.reduce(function(memo, e) {\n        var spec = e.specificity();\n        memo[0] += spec[0];\n        memo[1] += spec[1];\n        return memo;\n    }, [0, 0, this.conditions, this.index]);\n};\n\n})(__webpack_require__(/*! ../tree */ 0));\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTA3LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9jYXJ0by9saWIvY2FydG8vdHJlZS9zZWxlY3Rvci5qcz8yYTQ5Il0sInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbih0cmVlKSB7XG5cbnRyZWUuU2VsZWN0b3IgPSBmdW5jdGlvbiBTZWxlY3RvcihmaWx0ZXJzLCB6b29tLCBmcmFtZV9vZmZzZXQsIGVsZW1lbnRzLCBhdHRhY2htZW50LCBjb25kaXRpb25zLCBpbmRleCkge1xuICAgIHRoaXMuZWxlbWVudHMgPSBlbGVtZW50cyB8fCBbXTtcbiAgICB0aGlzLmF0dGFjaG1lbnQgPSBhdHRhY2htZW50O1xuICAgIHRoaXMuZmlsdGVycyA9IGZpbHRlcnMgfHwge307XG4gICAgdGhpcy5mcmFtZV9vZmZzZXQgPSBmcmFtZV9vZmZzZXQ7XG4gICAgdGhpcy56b29tID0gdHlwZW9mIHpvb20gIT09ICd1bmRlZmluZWQnID8gem9vbSA6IHRyZWUuWm9vbS5hbGw7XG4gICAgdGhpcy5jb25kaXRpb25zID0gY29uZGl0aW9ucztcbiAgICB0aGlzLmluZGV4ID0gaW5kZXg7XG59O1xuXG4vLyBEZXRlcm1pbmUgdGhlIHNwZWNpZmljaXR5IG9mIHRoaXMgc2VsZWN0b3Jcbi8vIGJhc2VkIG9uIHRoZSBzcGVjaWZpY2l0eSBvZiBpdHMgZWxlbWVudHMgLSBjYWxsaW5nXG4vLyBFbGVtZW50LnNwZWNpZmljaXR5KCkgaW4gb3JkZXIgdG8gZG8gc29cbi8vXG4vLyBbSUQsIENsYXNzLCBGaWx0ZXJzLCBQb3NpdGlvbiBpbiBkb2N1bWVudF1cbnRyZWUuU2VsZWN0b3IucHJvdG90eXBlLnNwZWNpZmljaXR5ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuZWxlbWVudHMucmVkdWNlKGZ1bmN0aW9uKG1lbW8sIGUpIHtcbiAgICAgICAgdmFyIHNwZWMgPSBlLnNwZWNpZmljaXR5KCk7XG4gICAgICAgIG1lbW9bMF0gKz0gc3BlY1swXTtcbiAgICAgICAgbWVtb1sxXSArPSBzcGVjWzFdO1xuICAgICAgICByZXR1cm4gbWVtbztcbiAgICB9LCBbMCwgMCwgdGhpcy5jb25kaXRpb25zLCB0aGlzLmluZGV4XSk7XG59O1xuXG59KShyZXF1aXJlKCcuLi90cmVlJykpO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NhcnRvL2xpYi9jYXJ0by90cmVlL3NlbGVjdG9yLmpzXG4vLyBtb2R1bGUgaWQgPSAxMDdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 108 */
/* no static exports found */
/* all exports used */
/*!*****************************************!*\
  !*** ./~/carto/lib/carto/tree/style.js ***!
  \*****************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global) {(function(tree) {\nvar _ = global._ || __webpack_require__(/*! underscore */ 4);\n\n// Given a style's name, attachment, definitions, and an environment object,\n// return a stringified style for Mapnik\ntree.StyleXML = function(name, attachment, definitions, env) {\n    var existing = {};\n    var image_filters = [], image_filters_inflate = [], direct_image_filters = [], comp_op = [], opacity = [];\n\n    for (var i = 0; i < definitions.length; i++) {\n        for (var j = 0; j < definitions[i].rules.length; j++) {\n            if (definitions[i].rules[j].name === 'image-filters') {\n                image_filters.push(definitions[i].rules[j]);\n            }\n            if (definitions[i].rules[j].name === 'image-filters-inflate') {\n                image_filters_inflate.push(definitions[i].rules[j]);\n            }\n            if (definitions[i].rules[j].name === 'direct-image-filters') {\n                direct_image_filters.push(definitions[i].rules[j]);\n            }\n            if (definitions[i].rules[j].name === 'comp-op') {\n                comp_op.push(definitions[i].rules[j]);\n            }\n            if (definitions[i].rules[j].name === 'opacity') {\n                opacity.push(definitions[i].rules[j]);\n            }\n        }\n    }\n\n    var rules = definitions.map(function(definition) {\n        return definition.toXML(env, existing);\n    });\n\n    var attrs_xml = '';\n\n    if (image_filters.length) {\n        attrs_xml += ' image-filters=\"' + _.chain(image_filters)\n            // prevent identical filters from being duplicated in the style\n            .uniq(function(i) { return i.id; }).map(function(f) {\n            return f.ev(env).toXML(env, true, ',', 'image-filter');\n        }).value().join(',') + '\"';\n    }\n\n    if (image_filters_inflate.length) {\n        attrs_xml += ' image-filters-inflate=\"' + image_filters_inflate[0].value.ev(env).toString() + '\"';\n    }\n\n    if (direct_image_filters.length) {\n        attrs_xml += ' direct-image-filters=\"' + _.chain(direct_image_filters)\n            // prevent identical filters from being duplicated in the style\n            .uniq(function(i) { return i.id; }).map(function(f) {\n            return f.ev(env).toXML(env, true, ',', 'direct-image-filter');\n        }).value().join(',') + '\"';\n    }\n\n    if (comp_op.length && comp_op[0].value.ev(env).value != 'src-over') {\n        attrs_xml += ' comp-op=\"' + comp_op[0].value.ev(env).toString() + '\"';\n    }\n\n    if (opacity.length && opacity[0].value.ev(env).value != 1) {\n        attrs_xml += ' opacity=\"' + opacity[0].value.ev(env).toString() + '\"';\n    }\n    var rule_string = rules.join('');\n    if (!attrs_xml && !rule_string) return '';\n    return '<Style name=\"' + name + '\" filter-mode=\"first\"' + attrs_xml + '>\\n' + rule_string + '</Style>';\n};\n\n})(__webpack_require__(/*! ../tree */ 0));\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./../../../../webpack/buildin/global.js */ 3)))//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTA4LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9jYXJ0by9saWIvY2FydG8vdHJlZS9zdHlsZS5qcz8yNjU0Il0sInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbih0cmVlKSB7XG52YXIgXyA9IGdsb2JhbC5fIHx8IHJlcXVpcmUoJ3VuZGVyc2NvcmUnKTtcblxuLy8gR2l2ZW4gYSBzdHlsZSdzIG5hbWUsIGF0dGFjaG1lbnQsIGRlZmluaXRpb25zLCBhbmQgYW4gZW52aXJvbm1lbnQgb2JqZWN0LFxuLy8gcmV0dXJuIGEgc3RyaW5naWZpZWQgc3R5bGUgZm9yIE1hcG5pa1xudHJlZS5TdHlsZVhNTCA9IGZ1bmN0aW9uKG5hbWUsIGF0dGFjaG1lbnQsIGRlZmluaXRpb25zLCBlbnYpIHtcbiAgICB2YXIgZXhpc3RpbmcgPSB7fTtcbiAgICB2YXIgaW1hZ2VfZmlsdGVycyA9IFtdLCBpbWFnZV9maWx0ZXJzX2luZmxhdGUgPSBbXSwgZGlyZWN0X2ltYWdlX2ZpbHRlcnMgPSBbXSwgY29tcF9vcCA9IFtdLCBvcGFjaXR5ID0gW107XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRlZmluaXRpb25zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgZGVmaW5pdGlvbnNbaV0ucnVsZXMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgIGlmIChkZWZpbml0aW9uc1tpXS5ydWxlc1tqXS5uYW1lID09PSAnaW1hZ2UtZmlsdGVycycpIHtcbiAgICAgICAgICAgICAgICBpbWFnZV9maWx0ZXJzLnB1c2goZGVmaW5pdGlvbnNbaV0ucnVsZXNbal0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGRlZmluaXRpb25zW2ldLnJ1bGVzW2pdLm5hbWUgPT09ICdpbWFnZS1maWx0ZXJzLWluZmxhdGUnKSB7XG4gICAgICAgICAgICAgICAgaW1hZ2VfZmlsdGVyc19pbmZsYXRlLnB1c2goZGVmaW5pdGlvbnNbaV0ucnVsZXNbal0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGRlZmluaXRpb25zW2ldLnJ1bGVzW2pdLm5hbWUgPT09ICdkaXJlY3QtaW1hZ2UtZmlsdGVycycpIHtcbiAgICAgICAgICAgICAgICBkaXJlY3RfaW1hZ2VfZmlsdGVycy5wdXNoKGRlZmluaXRpb25zW2ldLnJ1bGVzW2pdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChkZWZpbml0aW9uc1tpXS5ydWxlc1tqXS5uYW1lID09PSAnY29tcC1vcCcpIHtcbiAgICAgICAgICAgICAgICBjb21wX29wLnB1c2goZGVmaW5pdGlvbnNbaV0ucnVsZXNbal0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGRlZmluaXRpb25zW2ldLnJ1bGVzW2pdLm5hbWUgPT09ICdvcGFjaXR5Jykge1xuICAgICAgICAgICAgICAgIG9wYWNpdHkucHVzaChkZWZpbml0aW9uc1tpXS5ydWxlc1tqXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgcnVsZXMgPSBkZWZpbml0aW9ucy5tYXAoZnVuY3Rpb24oZGVmaW5pdGlvbikge1xuICAgICAgICByZXR1cm4gZGVmaW5pdGlvbi50b1hNTChlbnYsIGV4aXN0aW5nKTtcbiAgICB9KTtcblxuICAgIHZhciBhdHRyc194bWwgPSAnJztcblxuICAgIGlmIChpbWFnZV9maWx0ZXJzLmxlbmd0aCkge1xuICAgICAgICBhdHRyc194bWwgKz0gJyBpbWFnZS1maWx0ZXJzPVwiJyArIF8uY2hhaW4oaW1hZ2VfZmlsdGVycylcbiAgICAgICAgICAgIC8vIHByZXZlbnQgaWRlbnRpY2FsIGZpbHRlcnMgZnJvbSBiZWluZyBkdXBsaWNhdGVkIGluIHRoZSBzdHlsZVxuICAgICAgICAgICAgLnVuaXEoZnVuY3Rpb24oaSkgeyByZXR1cm4gaS5pZDsgfSkubWFwKGZ1bmN0aW9uKGYpIHtcbiAgICAgICAgICAgIHJldHVybiBmLmV2KGVudikudG9YTUwoZW52LCB0cnVlLCAnLCcsICdpbWFnZS1maWx0ZXInKTtcbiAgICAgICAgfSkudmFsdWUoKS5qb2luKCcsJykgKyAnXCInO1xuICAgIH1cblxuICAgIGlmIChpbWFnZV9maWx0ZXJzX2luZmxhdGUubGVuZ3RoKSB7XG4gICAgICAgIGF0dHJzX3htbCArPSAnIGltYWdlLWZpbHRlcnMtaW5mbGF0ZT1cIicgKyBpbWFnZV9maWx0ZXJzX2luZmxhdGVbMF0udmFsdWUuZXYoZW52KS50b1N0cmluZygpICsgJ1wiJztcbiAgICB9XG5cbiAgICBpZiAoZGlyZWN0X2ltYWdlX2ZpbHRlcnMubGVuZ3RoKSB7XG4gICAgICAgIGF0dHJzX3htbCArPSAnIGRpcmVjdC1pbWFnZS1maWx0ZXJzPVwiJyArIF8uY2hhaW4oZGlyZWN0X2ltYWdlX2ZpbHRlcnMpXG4gICAgICAgICAgICAvLyBwcmV2ZW50IGlkZW50aWNhbCBmaWx0ZXJzIGZyb20gYmVpbmcgZHVwbGljYXRlZCBpbiB0aGUgc3R5bGVcbiAgICAgICAgICAgIC51bmlxKGZ1bmN0aW9uKGkpIHsgcmV0dXJuIGkuaWQ7IH0pLm1hcChmdW5jdGlvbihmKSB7XG4gICAgICAgICAgICByZXR1cm4gZi5ldihlbnYpLnRvWE1MKGVudiwgdHJ1ZSwgJywnLCAnZGlyZWN0LWltYWdlLWZpbHRlcicpO1xuICAgICAgICB9KS52YWx1ZSgpLmpvaW4oJywnKSArICdcIic7XG4gICAgfVxuXG4gICAgaWYgKGNvbXBfb3AubGVuZ3RoICYmIGNvbXBfb3BbMF0udmFsdWUuZXYoZW52KS52YWx1ZSAhPSAnc3JjLW92ZXInKSB7XG4gICAgICAgIGF0dHJzX3htbCArPSAnIGNvbXAtb3A9XCInICsgY29tcF9vcFswXS52YWx1ZS5ldihlbnYpLnRvU3RyaW5nKCkgKyAnXCInO1xuICAgIH1cblxuICAgIGlmIChvcGFjaXR5Lmxlbmd0aCAmJiBvcGFjaXR5WzBdLnZhbHVlLmV2KGVudikudmFsdWUgIT0gMSkge1xuICAgICAgICBhdHRyc194bWwgKz0gJyBvcGFjaXR5PVwiJyArIG9wYWNpdHlbMF0udmFsdWUuZXYoZW52KS50b1N0cmluZygpICsgJ1wiJztcbiAgICB9XG4gICAgdmFyIHJ1bGVfc3RyaW5nID0gcnVsZXMuam9pbignJyk7XG4gICAgaWYgKCFhdHRyc194bWwgJiYgIXJ1bGVfc3RyaW5nKSByZXR1cm4gJyc7XG4gICAgcmV0dXJuICc8U3R5bGUgbmFtZT1cIicgKyBuYW1lICsgJ1wiIGZpbHRlci1tb2RlPVwiZmlyc3RcIicgKyBhdHRyc194bWwgKyAnPlxcbicgKyBydWxlX3N0cmluZyArICc8L1N0eWxlPic7XG59O1xuXG59KShyZXF1aXJlKCcuLi90cmVlJykpO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NhcnRvL2xpYi9jYXJ0by90cmVlL3N0eWxlLmpzXG4vLyBtb2R1bGUgaWQgPSAxMDhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBIiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 109 */
/* no static exports found */
/* all exports used */
/*!***************************************!*\
  !*** ./~/carto/lib/carto/tree/url.js ***!
  \***************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("(function(tree) {\n\ntree.URL = function URL(val, paths) {\n    this.value = val;\n    this.paths = paths;\n};\n\ntree.URL.prototype = {\n    is: 'uri',\n    toString: function() {\n        return this.value.toString();\n    },\n    ev: function(ctx) {\n        return new tree.URL(this.value.ev(ctx), this.paths);\n    }\n};\n\n})(__webpack_require__(/*! ../tree */ 0));\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTA5LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9jYXJ0by9saWIvY2FydG8vdHJlZS91cmwuanM/NjNhYiJdLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24odHJlZSkge1xuXG50cmVlLlVSTCA9IGZ1bmN0aW9uIFVSTCh2YWwsIHBhdGhzKSB7XG4gICAgdGhpcy52YWx1ZSA9IHZhbDtcbiAgICB0aGlzLnBhdGhzID0gcGF0aHM7XG59O1xuXG50cmVlLlVSTC5wcm90b3R5cGUgPSB7XG4gICAgaXM6ICd1cmknLFxuICAgIHRvU3RyaW5nOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsdWUudG9TdHJpbmcoKTtcbiAgICB9LFxuICAgIGV2OiBmdW5jdGlvbihjdHgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyB0cmVlLlVSTCh0aGlzLnZhbHVlLmV2KGN0eCksIHRoaXMucGF0aHMpO1xuICAgIH1cbn07XG5cbn0pKHJlcXVpcmUoJy4uL3RyZWUnKSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY2FydG8vbGliL2NhcnRvL3RyZWUvdXJsLmpzXG4vLyBtb2R1bGUgaWQgPSAxMDlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 110 */
/* no static exports found */
/* all exports used */
/*!*****************************************!*\
  !*** ./~/carto/lib/carto/tree/value.js ***!
  \*****************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("(function(tree) {\n\ntree.Value = function Value(value) {\n    this.value = value;\n};\n\ntree.Value.prototype = {\n    is: 'value',\n    ev: function(env) {\n        if (this.value.length === 1) {\n            return this.value[0].ev(env);\n        } else {\n            return new tree.Value(this.value.map(function(v) {\n                return v.ev(env);\n            }));\n        }\n    },\n    toString: function(env, selector, sep, format) {\n        return this.value.map(function(e) {\n            return e.toString(env, format);\n        }).join(sep || ', ');\n    },\n    clone: function() {\n        var obj = Object.create(tree.Value.prototype);\n        if (Array.isArray(obj)) obj.value = this.value.slice();\n        else obj.value = this.value;\n        obj.is = this.is;\n        return obj;\n    },\n\n    toJS: function(env) {\n      //var v = this.value[0].value[0];\n      var val = this.ev(env);\n      var v = val.toString();\n      if(val.is === \"color\" || val.is === 'uri' || val.is === 'string' || val.is === 'keyword') {\n        v = \"'\" + v + \"'\";\n      } else if (val.is === 'field') {\n        // replace [variable] by ctx['variable']\n        v = v.replace(/\\[([^\\]]*)\\]/g, function(matched) {\n            return matched.replace(/\\[(.*)\\]/g, \"data['$1']\");\n        });\n      }else if (val.is === 'call') {\n        v = JSON.stringify({\n            name: val.name,\n            args: val.args\n        })\n      }\n      return \"_value = \" + v + \";\";\n    }\n\n};\n\n})(__webpack_require__(/*! ../tree */ 0));\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTEwLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9jYXJ0by9saWIvY2FydG8vdHJlZS92YWx1ZS5qcz9mNjg1Il0sInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbih0cmVlKSB7XG5cbnRyZWUuVmFsdWUgPSBmdW5jdGlvbiBWYWx1ZSh2YWx1ZSkge1xuICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbn07XG5cbnRyZWUuVmFsdWUucHJvdG90eXBlID0ge1xuICAgIGlzOiAndmFsdWUnLFxuICAgIGV2OiBmdW5jdGlvbihlbnYpIHtcbiAgICAgICAgaWYgKHRoaXMudmFsdWUubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy52YWx1ZVswXS5ldihlbnYpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyB0cmVlLlZhbHVlKHRoaXMudmFsdWUubWFwKGZ1bmN0aW9uKHYpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdi5ldihlbnYpO1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9XG4gICAgfSxcbiAgICB0b1N0cmluZzogZnVuY3Rpb24oZW52LCBzZWxlY3Rvciwgc2VwLCBmb3JtYXQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsdWUubWFwKGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgIHJldHVybiBlLnRvU3RyaW5nKGVudiwgZm9ybWF0KTtcbiAgICAgICAgfSkuam9pbihzZXAgfHwgJywgJyk7XG4gICAgfSxcbiAgICBjbG9uZTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBvYmogPSBPYmplY3QuY3JlYXRlKHRyZWUuVmFsdWUucHJvdG90eXBlKTtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkob2JqKSkgb2JqLnZhbHVlID0gdGhpcy52YWx1ZS5zbGljZSgpO1xuICAgICAgICBlbHNlIG9iai52YWx1ZSA9IHRoaXMudmFsdWU7XG4gICAgICAgIG9iai5pcyA9IHRoaXMuaXM7XG4gICAgICAgIHJldHVybiBvYmo7XG4gICAgfSxcblxuICAgIHRvSlM6IGZ1bmN0aW9uKGVudikge1xuICAgICAgLy92YXIgdiA9IHRoaXMudmFsdWVbMF0udmFsdWVbMF07XG4gICAgICB2YXIgdmFsID0gdGhpcy5ldihlbnYpO1xuICAgICAgdmFyIHYgPSB2YWwudG9TdHJpbmcoKTtcbiAgICAgIGlmKHZhbC5pcyA9PT0gXCJjb2xvclwiIHx8IHZhbC5pcyA9PT0gJ3VyaScgfHwgdmFsLmlzID09PSAnc3RyaW5nJyB8fCB2YWwuaXMgPT09ICdrZXl3b3JkJykge1xuICAgICAgICB2ID0gXCInXCIgKyB2ICsgXCInXCI7XG4gICAgICB9IGVsc2UgaWYgKHZhbC5pcyA9PT0gJ2ZpZWxkJykge1xuICAgICAgICAvLyByZXBsYWNlIFt2YXJpYWJsZV0gYnkgY3R4Wyd2YXJpYWJsZSddXG4gICAgICAgIHYgPSB2LnJlcGxhY2UoL1xcWyhbXlxcXV0qKVxcXS9nLCBmdW5jdGlvbihtYXRjaGVkKSB7XG4gICAgICAgICAgICByZXR1cm4gbWF0Y2hlZC5yZXBsYWNlKC9cXFsoLiopXFxdL2csIFwiZGF0YVsnJDEnXVwiKTtcbiAgICAgICAgfSk7XG4gICAgICB9ZWxzZSBpZiAodmFsLmlzID09PSAnY2FsbCcpIHtcbiAgICAgICAgdiA9IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICAgIG5hbWU6IHZhbC5uYW1lLFxuICAgICAgICAgICAgYXJnczogdmFsLmFyZ3NcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICAgIHJldHVybiBcIl92YWx1ZSA9IFwiICsgdiArIFwiO1wiO1xuICAgIH1cblxufTtcblxufSkocmVxdWlyZSgnLi4vdHJlZScpKTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jYXJ0by9saWIvY2FydG8vdHJlZS92YWx1ZS5qc1xuLy8gbW9kdWxlIGlkID0gMTEwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 111 */
/* no static exports found */
/* all exports used */
/*!********************************************!*\
  !*** ./~/carto/lib/carto/tree/variable.js ***!
  \********************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("(function(tree) {\n\ntree.Variable = function Variable(name, index, filename) {\n    this.name = name;\n    this.index = index;\n    this.filename = filename;\n};\n\ntree.Variable.prototype = {\n    is: 'variable',\n    toString: function() {\n        return this.name;\n    },\n    ev: function(env) {\n        var variable,\n            v,\n            name = this.name;\n\n        if (this._css) return this._css;\n\n        var thisframe = env.frames.filter(function(f) {\n            return f.name == this.name;\n        }.bind(this));\n        if (thisframe.length) {\n            return thisframe[0].value.ev(env);\n        } else {\n            env.error({\n                message: 'variable ' + this.name + ' is undefined',\n                index: this.index,\n                type: 'runtime',\n                filename: this.filename\n            });\n            return {\n                is: 'undefined',\n                value: 'undefined'\n            };\n        }\n    }\n};\n\n})(__webpack_require__(/*! ../tree */ 0));\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTExLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9jYXJ0by9saWIvY2FydG8vdHJlZS92YXJpYWJsZS5qcz9iYWNhIl0sInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbih0cmVlKSB7XG5cbnRyZWUuVmFyaWFibGUgPSBmdW5jdGlvbiBWYXJpYWJsZShuYW1lLCBpbmRleCwgZmlsZW5hbWUpIHtcbiAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgIHRoaXMuaW5kZXggPSBpbmRleDtcbiAgICB0aGlzLmZpbGVuYW1lID0gZmlsZW5hbWU7XG59O1xuXG50cmVlLlZhcmlhYmxlLnByb3RvdHlwZSA9IHtcbiAgICBpczogJ3ZhcmlhYmxlJyxcbiAgICB0b1N0cmluZzogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm5hbWU7XG4gICAgfSxcbiAgICBldjogZnVuY3Rpb24oZW52KSB7XG4gICAgICAgIHZhciB2YXJpYWJsZSxcbiAgICAgICAgICAgIHYsXG4gICAgICAgICAgICBuYW1lID0gdGhpcy5uYW1lO1xuXG4gICAgICAgIGlmICh0aGlzLl9jc3MpIHJldHVybiB0aGlzLl9jc3M7XG5cbiAgICAgICAgdmFyIHRoaXNmcmFtZSA9IGVudi5mcmFtZXMuZmlsdGVyKGZ1bmN0aW9uKGYpIHtcbiAgICAgICAgICAgIHJldHVybiBmLm5hbWUgPT0gdGhpcy5uYW1lO1xuICAgICAgICB9LmJpbmQodGhpcykpO1xuICAgICAgICBpZiAodGhpc2ZyYW1lLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXNmcmFtZVswXS52YWx1ZS5ldihlbnYpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZW52LmVycm9yKHtcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiAndmFyaWFibGUgJyArIHRoaXMubmFtZSArICcgaXMgdW5kZWZpbmVkJyxcbiAgICAgICAgICAgICAgICBpbmRleDogdGhpcy5pbmRleCxcbiAgICAgICAgICAgICAgICB0eXBlOiAncnVudGltZScsXG4gICAgICAgICAgICAgICAgZmlsZW5hbWU6IHRoaXMuZmlsZW5hbWVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBpczogJ3VuZGVmaW5lZCcsXG4gICAgICAgICAgICAgICAgdmFsdWU6ICd1bmRlZmluZWQnXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfVxufTtcblxufSkocmVxdWlyZSgnLi4vdHJlZScpKTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jYXJ0by9saWIvY2FydG8vdHJlZS92YXJpYWJsZS5qc1xuLy8gbW9kdWxlIGlkID0gMTExXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 112 */
/* no static exports found */
/* all exports used */
/*!****************************************!*\
  !*** ./~/carto/lib/carto/tree/zoom.js ***!
  \****************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var tree = __webpack_require__(/*! ../tree */ 0);\n\n// Storage for zoom ranges. Only supports continuous ranges,\n// and stores them as bit-sequences so that they can be combined,\n// inverted, and compared quickly.\ntree.Zoom = function(op, value, index) {\n    this.op = op;\n    this.value = value;\n    this.index = index;\n};\n\ntree.Zoom.prototype.setZoom = function(zoom) {\n    this.zoom = zoom;\n    return this;\n};\n\ntree.Zoom.prototype.ev = function(env) {\n    var start = 0,\n        end = Infinity,\n        value = parseInt(this.value.ev(env).toString(), 10),\n        zoom = 0;\n\n    if (value > tree.Zoom.maxZoom || value < 0) {\n        env.error({\n            message: 'Only zoom levels between 0 and ' +\n                tree.Zoom.maxZoom + ' supported.',\n            index: this.index\n        });\n    }\n\n    switch (this.op) {\n        case '=':\n            this.zoom = 1 << value;\n            return this;\n        case '>':\n            start = value + 1;\n            break;\n        case '>=':\n            start = value;\n            break;\n        case '<':\n            end = value - 1;\n            break;\n        case '<=':\n            end = value;\n            break;\n    }\n    for (var i = 0; i <= tree.Zoom.maxZoom; i++) {\n        if (i >= start && i <= end) {\n            zoom |= (1 << i);\n        }\n    }\n    this.zoom = zoom;\n    return this;\n};\n\ntree.Zoom.prototype.toString = function() {\n    return this.zoom;\n};\n\n// Covers all zoomlevels from 0 to 22\ntree.Zoom.all = 0x7FFFFF;\n\ntree.Zoom.maxZoom = 22;\n\ntree.Zoom.ranges = {\n     0: 1000000000,\n     1: 500000000,\n     2: 200000000,\n     3: 100000000,\n     4: 50000000,\n     5: 25000000,\n     6: 12500000,\n     7: 6500000,\n     8: 3000000,\n     9: 1500000,\n    10: 750000,\n    11: 400000,\n    12: 200000,\n    13: 100000,\n    14: 50000,\n    15: 25000,\n    16: 12500,\n    17: 5000,\n    18: 2500,\n    19: 1500,\n    20: 750,\n    21: 500,\n    22: 250,\n    23: 100\n};\n\n// Only works for single range zooms. `[XXX....XXXXX.........]` is invalid.\ntree.Zoom.prototype.toXML = function() {\n    var conditions = [];\n    if (this.zoom != tree.Zoom.all) {\n        var start = null, end = null;\n        for (var i = 0; i <= tree.Zoom.maxZoom; i++) {\n            if (this.zoom & (1 << i)) {\n                if (start === null) start = i;\n                end = i;\n            }\n        }\n        if (start > 0) conditions.push('    <MaxScaleDenominator>' +\n            tree.Zoom.ranges[start] + '</MaxScaleDenominator>\\n');\n        if (end < 22) conditions.push('    <MinScaleDenominator>' +\n            tree.Zoom.ranges[end + 1] + '</MinScaleDenominator>\\n');\n    }\n    return conditions;\n};\n\ntree.Zoom.prototype.toString = function() {\n    var str = '';\n    for (var i = 0; i <= tree.Zoom.maxZoom; i++) {\n        str += (this.zoom & (1 << i)) ? 'X' : '.';\n    }\n    return str;\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTEyLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9jYXJ0by9saWIvY2FydG8vdHJlZS96b29tLmpzPzdhYTAiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIHRyZWUgPSByZXF1aXJlKCcuLi90cmVlJyk7XG5cbi8vIFN0b3JhZ2UgZm9yIHpvb20gcmFuZ2VzLiBPbmx5IHN1cHBvcnRzIGNvbnRpbnVvdXMgcmFuZ2VzLFxuLy8gYW5kIHN0b3JlcyB0aGVtIGFzIGJpdC1zZXF1ZW5jZXMgc28gdGhhdCB0aGV5IGNhbiBiZSBjb21iaW5lZCxcbi8vIGludmVydGVkLCBhbmQgY29tcGFyZWQgcXVpY2tseS5cbnRyZWUuWm9vbSA9IGZ1bmN0aW9uKG9wLCB2YWx1ZSwgaW5kZXgpIHtcbiAgICB0aGlzLm9wID0gb3A7XG4gICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgIHRoaXMuaW5kZXggPSBpbmRleDtcbn07XG5cbnRyZWUuWm9vbS5wcm90b3R5cGUuc2V0Wm9vbSA9IGZ1bmN0aW9uKHpvb20pIHtcbiAgICB0aGlzLnpvb20gPSB6b29tO1xuICAgIHJldHVybiB0aGlzO1xufTtcblxudHJlZS5ab29tLnByb3RvdHlwZS5ldiA9IGZ1bmN0aW9uKGVudikge1xuICAgIHZhciBzdGFydCA9IDAsXG4gICAgICAgIGVuZCA9IEluZmluaXR5LFxuICAgICAgICB2YWx1ZSA9IHBhcnNlSW50KHRoaXMudmFsdWUuZXYoZW52KS50b1N0cmluZygpLCAxMCksXG4gICAgICAgIHpvb20gPSAwO1xuXG4gICAgaWYgKHZhbHVlID4gdHJlZS5ab29tLm1heFpvb20gfHwgdmFsdWUgPCAwKSB7XG4gICAgICAgIGVudi5lcnJvcih7XG4gICAgICAgICAgICBtZXNzYWdlOiAnT25seSB6b29tIGxldmVscyBiZXR3ZWVuIDAgYW5kICcgK1xuICAgICAgICAgICAgICAgIHRyZWUuWm9vbS5tYXhab29tICsgJyBzdXBwb3J0ZWQuJyxcbiAgICAgICAgICAgIGluZGV4OiB0aGlzLmluZGV4XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHN3aXRjaCAodGhpcy5vcCkge1xuICAgICAgICBjYXNlICc9JzpcbiAgICAgICAgICAgIHRoaXMuem9vbSA9IDEgPDwgdmFsdWU7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgY2FzZSAnPic6XG4gICAgICAgICAgICBzdGFydCA9IHZhbHVlICsgMTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICc+PSc6XG4gICAgICAgICAgICBzdGFydCA9IHZhbHVlO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJzwnOlxuICAgICAgICAgICAgZW5kID0gdmFsdWUgLSAxO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJzw9JzpcbiAgICAgICAgICAgIGVuZCA9IHZhbHVlO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDw9IHRyZWUuWm9vbS5tYXhab29tOyBpKyspIHtcbiAgICAgICAgaWYgKGkgPj0gc3RhcnQgJiYgaSA8PSBlbmQpIHtcbiAgICAgICAgICAgIHpvb20gfD0gKDEgPDwgaSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdGhpcy56b29tID0gem9vbTtcbiAgICByZXR1cm4gdGhpcztcbn07XG5cbnRyZWUuWm9vbS5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy56b29tO1xufTtcblxuLy8gQ292ZXJzIGFsbCB6b29tbGV2ZWxzIGZyb20gMCB0byAyMlxudHJlZS5ab29tLmFsbCA9IDB4N0ZGRkZGO1xuXG50cmVlLlpvb20ubWF4Wm9vbSA9IDIyO1xuXG50cmVlLlpvb20ucmFuZ2VzID0ge1xuICAgICAwOiAxMDAwMDAwMDAwLFxuICAgICAxOiA1MDAwMDAwMDAsXG4gICAgIDI6IDIwMDAwMDAwMCxcbiAgICAgMzogMTAwMDAwMDAwLFxuICAgICA0OiA1MDAwMDAwMCxcbiAgICAgNTogMjUwMDAwMDAsXG4gICAgIDY6IDEyNTAwMDAwLFxuICAgICA3OiA2NTAwMDAwLFxuICAgICA4OiAzMDAwMDAwLFxuICAgICA5OiAxNTAwMDAwLFxuICAgIDEwOiA3NTAwMDAsXG4gICAgMTE6IDQwMDAwMCxcbiAgICAxMjogMjAwMDAwLFxuICAgIDEzOiAxMDAwMDAsXG4gICAgMTQ6IDUwMDAwLFxuICAgIDE1OiAyNTAwMCxcbiAgICAxNjogMTI1MDAsXG4gICAgMTc6IDUwMDAsXG4gICAgMTg6IDI1MDAsXG4gICAgMTk6IDE1MDAsXG4gICAgMjA6IDc1MCxcbiAgICAyMTogNTAwLFxuICAgIDIyOiAyNTAsXG4gICAgMjM6IDEwMFxufTtcblxuLy8gT25seSB3b3JrcyBmb3Igc2luZ2xlIHJhbmdlIHpvb21zLiBgW1hYWC4uLi5YWFhYWC4uLi4uLi4uLl1gIGlzIGludmFsaWQuXG50cmVlLlpvb20ucHJvdG90eXBlLnRvWE1MID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGNvbmRpdGlvbnMgPSBbXTtcbiAgICBpZiAodGhpcy56b29tICE9IHRyZWUuWm9vbS5hbGwpIHtcbiAgICAgICAgdmFyIHN0YXJ0ID0gbnVsbCwgZW5kID0gbnVsbDtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPD0gdHJlZS5ab29tLm1heFpvb207IGkrKykge1xuICAgICAgICAgICAgaWYgKHRoaXMuem9vbSAmICgxIDw8IGkpKSB7XG4gICAgICAgICAgICAgICAgaWYgKHN0YXJ0ID09PSBudWxsKSBzdGFydCA9IGk7XG4gICAgICAgICAgICAgICAgZW5kID0gaTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoc3RhcnQgPiAwKSBjb25kaXRpb25zLnB1c2goJyAgICA8TWF4U2NhbGVEZW5vbWluYXRvcj4nICtcbiAgICAgICAgICAgIHRyZWUuWm9vbS5yYW5nZXNbc3RhcnRdICsgJzwvTWF4U2NhbGVEZW5vbWluYXRvcj5cXG4nKTtcbiAgICAgICAgaWYgKGVuZCA8IDIyKSBjb25kaXRpb25zLnB1c2goJyAgICA8TWluU2NhbGVEZW5vbWluYXRvcj4nICtcbiAgICAgICAgICAgIHRyZWUuWm9vbS5yYW5nZXNbZW5kICsgMV0gKyAnPC9NaW5TY2FsZURlbm9taW5hdG9yPlxcbicpO1xuICAgIH1cbiAgICByZXR1cm4gY29uZGl0aW9ucztcbn07XG5cbnRyZWUuWm9vbS5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgc3RyID0gJyc7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPD0gdHJlZS5ab29tLm1heFpvb207IGkrKykge1xuICAgICAgICBzdHIgKz0gKHRoaXMuem9vbSAmICgxIDw8IGkpKSA/ICdYJyA6ICcuJztcbiAgICB9XG4gICAgcmV0dXJuIHN0cjtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY2FydG8vbGliL2NhcnRvL3RyZWUvem9vbS5qc1xuLy8gbW9kdWxlIGlkID0gMTEyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 113 */
/* no static exports found */
/* all exports used */
/*!********************************************!*\
  !*** ./~/core-js/library/fn/array/from.js ***!
  \********************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("__webpack_require__(/*! ../../modules/es6.string.iterator */ 138);\n__webpack_require__(/*! ../../modules/es6.array.from */ 137);\nmodule.exports = __webpack_require__(/*! ../../modules/_core */ 28).Array.from;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTEzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvZm4vYXJyYXkvZnJvbS5qcz82NjlkIl0sInNvdXJjZXNDb250ZW50IjpbInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM2LnN0cmluZy5pdGVyYXRvcicpO1xucmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczYuYXJyYXkuZnJvbScpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuQXJyYXkuZnJvbTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L2ZuL2FycmF5L2Zyb20uanNcbi8vIG1vZHVsZSBpZCA9IDExM1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 114 */
/* no static exports found */
/* all exports used */
/*!**************************************************!*\
  !*** ./~/core-js/library/modules/_a-function.js ***!
  \**************************************************/
/***/ (function(module, exports) {

eval("module.exports = function(it){\n  if(typeof it != 'function')throw TypeError(it + ' is not a function!');\n  return it;\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTE0LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fYS1mdW5jdGlvbi5qcz9kNTNlIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpe1xuICBpZih0eXBlb2YgaXQgIT0gJ2Z1bmN0aW9uJyl0aHJvdyBUeXBlRXJyb3IoaXQgKyAnIGlzIG5vdCBhIGZ1bmN0aW9uIScpO1xuICByZXR1cm4gaXQ7XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fYS1mdW5jdGlvbi5qc1xuLy8gbW9kdWxlIGlkID0gMTE0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 115 */
/* no static exports found */
/* all exports used */
/*!******************************************************!*\
  !*** ./~/core-js/library/modules/_array-includes.js ***!
  \******************************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("// false -> Array#indexOf\n// true  -> Array#includes\nvar toIObject = __webpack_require__(/*! ./_to-iobject */ 49)\n  , toLength  = __webpack_require__(/*! ./_to-length */ 50)\n  , toIndex   = __webpack_require__(/*! ./_to-index */ 134);\nmodule.exports = function(IS_INCLUDES){\n  return function($this, el, fromIndex){\n    var O      = toIObject($this)\n      , length = toLength(O.length)\n      , index  = toIndex(fromIndex, length)\n      , value;\n    // Array#includes uses SameValueZero equality algorithm\n    if(IS_INCLUDES && el != el)while(length > index){\n      value = O[index++];\n      if(value != value)return true;\n    // Array#toIndex ignores holes, Array#includes - not\n    } else for(;length > index; index++)if(IS_INCLUDES || index in O){\n      if(O[index] === el)return IS_INCLUDES || index || 0;\n    } return !IS_INCLUDES && -1;\n  };\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTE1LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fYXJyYXktaW5jbHVkZXMuanM/NjE5OSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBmYWxzZSAtPiBBcnJheSNpbmRleE9mXG4vLyB0cnVlICAtPiBBcnJheSNpbmNsdWRlc1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKVxuICAsIHRvTGVuZ3RoICA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpXG4gICwgdG9JbmRleCAgID0gcmVxdWlyZSgnLi9fdG8taW5kZXgnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oSVNfSU5DTFVERVMpe1xuICByZXR1cm4gZnVuY3Rpb24oJHRoaXMsIGVsLCBmcm9tSW5kZXgpe1xuICAgIHZhciBPICAgICAgPSB0b0lPYmplY3QoJHRoaXMpXG4gICAgICAsIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKVxuICAgICAgLCBpbmRleCAgPSB0b0luZGV4KGZyb21JbmRleCwgbGVuZ3RoKVxuICAgICAgLCB2YWx1ZTtcbiAgICAvLyBBcnJheSNpbmNsdWRlcyB1c2VzIFNhbWVWYWx1ZVplcm8gZXF1YWxpdHkgYWxnb3JpdGhtXG4gICAgaWYoSVNfSU5DTFVERVMgJiYgZWwgIT0gZWwpd2hpbGUobGVuZ3RoID4gaW5kZXgpe1xuICAgICAgdmFsdWUgPSBPW2luZGV4KytdO1xuICAgICAgaWYodmFsdWUgIT0gdmFsdWUpcmV0dXJuIHRydWU7XG4gICAgLy8gQXJyYXkjdG9JbmRleCBpZ25vcmVzIGhvbGVzLCBBcnJheSNpbmNsdWRlcyAtIG5vdFxuICAgIH0gZWxzZSBmb3IoO2xlbmd0aCA+IGluZGV4OyBpbmRleCsrKWlmKElTX0lOQ0xVREVTIHx8IGluZGV4IGluIE8pe1xuICAgICAgaWYoT1tpbmRleF0gPT09IGVsKXJldHVybiBJU19JTkNMVURFUyB8fCBpbmRleCB8fCAwO1xuICAgIH0gcmV0dXJuICFJU19JTkNMVURFUyAmJiAtMTtcbiAgfTtcbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19hcnJheS1pbmNsdWRlcy5qc1xuLy8gbW9kdWxlIGlkID0gMTE1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 116 */
/* no static exports found */
/* all exports used */
/*!***********************************************!*\
  !*** ./~/core-js/library/modules/_classof.js ***!
  \***********************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("// getting tag from 19.1.3.6 Object.prototype.toString()\nvar cof = __webpack_require__(/*! ./_cof */ 41)\n  , TAG = __webpack_require__(/*! ./_wks */ 5)('toStringTag')\n  // ES3 wrong here\n  , ARG = cof(function(){ return arguments; }()) == 'Arguments';\n\n// fallback for IE11 Script Access Denied error\nvar tryGet = function(it, key){\n  try {\n    return it[key];\n  } catch(e){ /* empty */ }\n};\n\nmodule.exports = function(it){\n  var O, T, B;\n  return it === undefined ? 'Undefined' : it === null ? 'Null'\n    // @@toStringTag case\n    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T\n    // builtinTag case\n    : ARG ? cof(O)\n    // ES3 arguments fallback\n    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTE2LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fY2xhc3NvZi5qcz9iNGIzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGdldHRpbmcgdGFnIGZyb20gMTkuMS4zLjYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZygpXG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJylcbiAgLCBUQUcgPSByZXF1aXJlKCcuL193a3MnKSgndG9TdHJpbmdUYWcnKVxuICAvLyBFUzMgd3JvbmcgaGVyZVxuICAsIEFSRyA9IGNvZihmdW5jdGlvbigpeyByZXR1cm4gYXJndW1lbnRzOyB9KCkpID09ICdBcmd1bWVudHMnO1xuXG4vLyBmYWxsYmFjayBmb3IgSUUxMSBTY3JpcHQgQWNjZXNzIERlbmllZCBlcnJvclxudmFyIHRyeUdldCA9IGZ1bmN0aW9uKGl0LCBrZXkpe1xuICB0cnkge1xuICAgIHJldHVybiBpdFtrZXldO1xuICB9IGNhdGNoKGUpeyAvKiBlbXB0eSAqLyB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXtcbiAgdmFyIE8sIFQsIEI7XG4gIHJldHVybiBpdCA9PT0gdW5kZWZpbmVkID8gJ1VuZGVmaW5lZCcgOiBpdCA9PT0gbnVsbCA/ICdOdWxsJ1xuICAgIC8vIEBAdG9TdHJpbmdUYWcgY2FzZVxuICAgIDogdHlwZW9mIChUID0gdHJ5R2V0KE8gPSBPYmplY3QoaXQpLCBUQUcpKSA9PSAnc3RyaW5nJyA/IFRcbiAgICAvLyBidWlsdGluVGFnIGNhc2VcbiAgICA6IEFSRyA/IGNvZihPKVxuICAgIC8vIEVTMyBhcmd1bWVudHMgZmFsbGJhY2tcbiAgICA6IChCID0gY29mKE8pKSA9PSAnT2JqZWN0JyAmJiB0eXBlb2YgTy5jYWxsZWUgPT0gJ2Z1bmN0aW9uJyA/ICdBcmd1bWVudHMnIDogQjtcbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19jbGFzc29mLmpzXG4vLyBtb2R1bGUgaWQgPSAxMTZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 117 */
/* no static exports found */
/* all exports used */
/*!*******************************************************!*\
  !*** ./~/core-js/library/modules/_create-property.js ***!
  \*******************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar $defineProperty = __webpack_require__(/*! ./_object-dp */ 23)\n  , createDesc      = __webpack_require__(/*! ./_property-desc */ 32);\n\nmodule.exports = function(object, index, value){\n  if(index in object)$defineProperty.f(object, index, createDesc(0, value));\n  else object[index] = value;\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTE3LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fY3JlYXRlLXByb3BlcnR5LmpzPzFhZDEiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xudmFyICRkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpXG4gICwgY3JlYXRlRGVzYyAgICAgID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG9iamVjdCwgaW5kZXgsIHZhbHVlKXtcbiAgaWYoaW5kZXggaW4gb2JqZWN0KSRkZWZpbmVQcm9wZXJ0eS5mKG9iamVjdCwgaW5kZXgsIGNyZWF0ZURlc2MoMCwgdmFsdWUpKTtcbiAgZWxzZSBvYmplY3RbaW5kZXhdID0gdmFsdWU7XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fY3JlYXRlLXByb3BlcnR5LmpzXG4vLyBtb2R1bGUgaWQgPSAxMTdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 118 */
/* no static exports found */
/* all exports used */
/*!********************************************!*\
  !*** ./~/core-js/library/modules/_html.js ***!
  \********************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = __webpack_require__(/*! ./_global */ 10).document && document.documentElement;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTE4LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faHRtbC5qcz9lNWFmIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuZG9jdW1lbnQgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faHRtbC5qc1xuLy8gbW9kdWxlIGlkID0gMTE4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUEiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 119 */
/* no static exports found */
/* all exports used */
/*!******************************************************!*\
  !*** ./~/core-js/library/modules/_ie8-dom-define.js ***!
  \******************************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = !__webpack_require__(/*! ./_descriptors */ 20) && !__webpack_require__(/*! ./_fails */ 46)(function(){\n  return Object.defineProperty(__webpack_require__(/*! ./_dom-create */ 43)('div'), 'a', {get: function(){ return 7; }}).a != 7;\n});//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTE5LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faWU4LWRvbS1kZWZpbmUuanM/YmQxZiJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9ICFyZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uKCl7XG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkocmVxdWlyZSgnLi9fZG9tLWNyZWF0ZScpKCdkaXYnKSwgJ2EnLCB7Z2V0OiBmdW5jdGlvbigpeyByZXR1cm4gNzsgfX0pLmEgIT0gNztcbn0pO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faWU4LWRvbS1kZWZpbmUuanNcbi8vIG1vZHVsZSBpZCA9IDExOVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 120 */
/* no static exports found */
/* all exports used */
/*!***********************************************!*\
  !*** ./~/core-js/library/modules/_iobject.js ***!
  \***********************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("// fallback for non-array-like ES3 and non-enumerable old V8 strings\nvar cof = __webpack_require__(/*! ./_cof */ 41);\nmodule.exports = Object('z').propertyIsEnumerable(0) ? Object : function(it){\n  return cof(it) == 'String' ? it.split('') : Object(it);\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTIwLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faW9iamVjdC5qcz81Y2Y5Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIGZhbGxiYWNrIGZvciBub24tYXJyYXktbGlrZSBFUzMgYW5kIG5vbi1lbnVtZXJhYmxlIG9sZCBWOCBzdHJpbmdzXG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdCgneicpLnByb3BlcnR5SXNFbnVtZXJhYmxlKDApID8gT2JqZWN0IDogZnVuY3Rpb24oaXQpe1xuICByZXR1cm4gY29mKGl0KSA9PSAnU3RyaW5nJyA/IGl0LnNwbGl0KCcnKSA6IE9iamVjdChpdCk7XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faW9iamVjdC5qc1xuLy8gbW9kdWxlIGlkID0gMTIwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 121 */
/* no static exports found */
/* all exports used */
/*!*****************************************************!*\
  !*** ./~/core-js/library/modules/_is-array-iter.js ***!
  \*****************************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("// check on default Array iterator\nvar Iterators  = __webpack_require__(/*! ./_iterators */ 31)\n  , ITERATOR   = __webpack_require__(/*! ./_wks */ 5)('iterator')\n  , ArrayProto = Array.prototype;\n\nmodule.exports = function(it){\n  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTIxLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faXMtYXJyYXktaXRlci5qcz9hNGIzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGNoZWNrIG9uIGRlZmF1bHQgQXJyYXkgaXRlcmF0b3JcbnZhciBJdGVyYXRvcnMgID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJylcbiAgLCBJVEVSQVRPUiAgID0gcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJylcbiAgLCBBcnJheVByb3RvID0gQXJyYXkucHJvdG90eXBlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXtcbiAgcmV0dXJuIGl0ICE9PSB1bmRlZmluZWQgJiYgKEl0ZXJhdG9ycy5BcnJheSA9PT0gaXQgfHwgQXJyYXlQcm90b1tJVEVSQVRPUl0gPT09IGl0KTtcbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pcy1hcnJheS1pdGVyLmpzXG4vLyBtb2R1bGUgaWQgPSAxMjFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 122 */
/* no static exports found */
/* all exports used */
/*!*************************************************!*\
  !*** ./~/core-js/library/modules/_iter-call.js ***!
  \*************************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("// call something on iterator step with safe closing on error\nvar anObject = __webpack_require__(/*! ./_an-object */ 19);\nmodule.exports = function(iterator, fn, value, entries){\n  try {\n    return entries ? fn(anObject(value)[0], value[1]) : fn(value);\n  // 7.4.6 IteratorClose(iterator, completion)\n  } catch(e){\n    var ret = iterator['return'];\n    if(ret !== undefined)anObject(ret.call(iterator));\n    throw e;\n  }\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTIyLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faXRlci1jYWxsLmpzPzUxODkiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gY2FsbCBzb21ldGhpbmcgb24gaXRlcmF0b3Igc3RlcCB3aXRoIHNhZmUgY2xvc2luZyBvbiBlcnJvclxudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0ZXJhdG9yLCBmbiwgdmFsdWUsIGVudHJpZXMpe1xuICB0cnkge1xuICAgIHJldHVybiBlbnRyaWVzID8gZm4oYW5PYmplY3QodmFsdWUpWzBdLCB2YWx1ZVsxXSkgOiBmbih2YWx1ZSk7XG4gIC8vIDcuNC42IEl0ZXJhdG9yQ2xvc2UoaXRlcmF0b3IsIGNvbXBsZXRpb24pXG4gIH0gY2F0Y2goZSl7XG4gICAgdmFyIHJldCA9IGl0ZXJhdG9yWydyZXR1cm4nXTtcbiAgICBpZihyZXQgIT09IHVuZGVmaW5lZClhbk9iamVjdChyZXQuY2FsbChpdGVyYXRvcikpO1xuICAgIHRocm93IGU7XG4gIH1cbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pdGVyLWNhbGwuanNcbi8vIG1vZHVsZSBpZCA9IDEyMlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 123 */
/* no static exports found */
/* all exports used */
/*!***************************************************!*\
  !*** ./~/core-js/library/modules/_iter-create.js ***!
  \***************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar create         = __webpack_require__(/*! ./_object-create */ 127)\n  , descriptor     = __webpack_require__(/*! ./_property-desc */ 32)\n  , setToStringTag = __webpack_require__(/*! ./_set-to-string-tag */ 47)\n  , IteratorPrototype = {};\n\n// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()\n__webpack_require__(/*! ./_hide */ 22)(IteratorPrototype, __webpack_require__(/*! ./_wks */ 5)('iterator'), function(){ return this; });\n\nmodule.exports = function(Constructor, NAME, next){\n  Constructor.prototype = create(IteratorPrototype, {next: descriptor(1, next)});\n  setToStringTag(Constructor, NAME + ' Iterator');\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTIzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faXRlci1jcmVhdGUuanM/MDEyNyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG52YXIgY3JlYXRlICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJylcbiAgLCBkZXNjcmlwdG9yICAgICA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKVxuICAsIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKVxuICAsIEl0ZXJhdG9yUHJvdG90eXBlID0ge307XG5cbi8vIDI1LjEuMi4xLjEgJUl0ZXJhdG9yUHJvdG90eXBlJVtAQGl0ZXJhdG9yXSgpXG5yZXF1aXJlKCcuL19oaWRlJykoSXRlcmF0b3JQcm90b3R5cGUsIHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpLCBmdW5jdGlvbigpeyByZXR1cm4gdGhpczsgfSk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oQ29uc3RydWN0b3IsIE5BTUUsIG5leHQpe1xuICBDb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBjcmVhdGUoSXRlcmF0b3JQcm90b3R5cGUsIHtuZXh0OiBkZXNjcmlwdG9yKDEsIG5leHQpfSk7XG4gIHNldFRvU3RyaW5nVGFnKENvbnN0cnVjdG9yLCBOQU1FICsgJyBJdGVyYXRvcicpO1xufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2l0ZXItY3JlYXRlLmpzXG4vLyBtb2R1bGUgaWQgPSAxMjNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 124 */
/* no static exports found */
/* all exports used */
/*!***************************************************!*\
  !*** ./~/core-js/library/modules/_iter-define.js ***!
  \***************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar LIBRARY        = __webpack_require__(/*! ./_library */ 126)\n  , $export        = __webpack_require__(/*! ./_export */ 45)\n  , redefine       = __webpack_require__(/*! ./_redefine */ 132)\n  , hide           = __webpack_require__(/*! ./_hide */ 22)\n  , has            = __webpack_require__(/*! ./_has */ 21)\n  , Iterators      = __webpack_require__(/*! ./_iterators */ 31)\n  , $iterCreate    = __webpack_require__(/*! ./_iter-create */ 123)\n  , setToStringTag = __webpack_require__(/*! ./_set-to-string-tag */ 47)\n  , getPrototypeOf = __webpack_require__(/*! ./_object-gpo */ 129)\n  , ITERATOR       = __webpack_require__(/*! ./_wks */ 5)('iterator')\n  , BUGGY          = !([].keys && 'next' in [].keys()) // Safari has buggy iterators w/o `next`\n  , FF_ITERATOR    = '@@iterator'\n  , KEYS           = 'keys'\n  , VALUES         = 'values';\n\nvar returnThis = function(){ return this; };\n\nmodule.exports = function(Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED){\n  $iterCreate(Constructor, NAME, next);\n  var getMethod = function(kind){\n    if(!BUGGY && kind in proto)return proto[kind];\n    switch(kind){\n      case KEYS: return function keys(){ return new Constructor(this, kind); };\n      case VALUES: return function values(){ return new Constructor(this, kind); };\n    } return function entries(){ return new Constructor(this, kind); };\n  };\n  var TAG        = NAME + ' Iterator'\n    , DEF_VALUES = DEFAULT == VALUES\n    , VALUES_BUG = false\n    , proto      = Base.prototype\n    , $native    = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT]\n    , $default   = $native || getMethod(DEFAULT)\n    , $entries   = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined\n    , $anyNative = NAME == 'Array' ? proto.entries || $native : $native\n    , methods, key, IteratorPrototype;\n  // Fix native\n  if($anyNative){\n    IteratorPrototype = getPrototypeOf($anyNative.call(new Base));\n    if(IteratorPrototype !== Object.prototype){\n      // Set @@toStringTag to native iterators\n      setToStringTag(IteratorPrototype, TAG, true);\n      // fix for some old engines\n      if(!LIBRARY && !has(IteratorPrototype, ITERATOR))hide(IteratorPrototype, ITERATOR, returnThis);\n    }\n  }\n  // fix Array#{values, @@iterator}.name in V8 / FF\n  if(DEF_VALUES && $native && $native.name !== VALUES){\n    VALUES_BUG = true;\n    $default = function values(){ return $native.call(this); };\n  }\n  // Define iterator\n  if((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])){\n    hide(proto, ITERATOR, $default);\n  }\n  // Plug for library\n  Iterators[NAME] = $default;\n  Iterators[TAG]  = returnThis;\n  if(DEFAULT){\n    methods = {\n      values:  DEF_VALUES ? $default : getMethod(VALUES),\n      keys:    IS_SET     ? $default : getMethod(KEYS),\n      entries: $entries\n    };\n    if(FORCED)for(key in methods){\n      if(!(key in proto))redefine(proto, key, methods[key]);\n    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);\n  }\n  return methods;\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTI0LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faXRlci1kZWZpbmUuanM/OWE5NCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG52YXIgTElCUkFSWSAgICAgICAgPSByZXF1aXJlKCcuL19saWJyYXJ5JylcbiAgLCAkZXhwb3J0ICAgICAgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgcmVkZWZpbmUgICAgICAgPSByZXF1aXJlKCcuL19yZWRlZmluZScpXG4gICwgaGlkZSAgICAgICAgICAgPSByZXF1aXJlKCcuL19oaWRlJylcbiAgLCBoYXMgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2hhcycpXG4gICwgSXRlcmF0b3JzICAgICAgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKVxuICAsICRpdGVyQ3JlYXRlICAgID0gcmVxdWlyZSgnLi9faXRlci1jcmVhdGUnKVxuICAsIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKVxuICAsIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpXG4gICwgSVRFUkFUT1IgICAgICAgPSByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKVxuICAsIEJVR0dZICAgICAgICAgID0gIShbXS5rZXlzICYmICduZXh0JyBpbiBbXS5rZXlzKCkpIC8vIFNhZmFyaSBoYXMgYnVnZ3kgaXRlcmF0b3JzIHcvbyBgbmV4dGBcbiAgLCBGRl9JVEVSQVRPUiAgICA9ICdAQGl0ZXJhdG9yJ1xuICAsIEtFWVMgICAgICAgICAgID0gJ2tleXMnXG4gICwgVkFMVUVTICAgICAgICAgPSAndmFsdWVzJztcblxudmFyIHJldHVyblRoaXMgPSBmdW5jdGlvbigpeyByZXR1cm4gdGhpczsgfTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihCYXNlLCBOQU1FLCBDb25zdHJ1Y3RvciwgbmV4dCwgREVGQVVMVCwgSVNfU0VULCBGT1JDRUQpe1xuICAkaXRlckNyZWF0ZShDb25zdHJ1Y3RvciwgTkFNRSwgbmV4dCk7XG4gIHZhciBnZXRNZXRob2QgPSBmdW5jdGlvbihraW5kKXtcbiAgICBpZighQlVHR1kgJiYga2luZCBpbiBwcm90bylyZXR1cm4gcHJvdG9ba2luZF07XG4gICAgc3dpdGNoKGtpbmQpe1xuICAgICAgY2FzZSBLRVlTOiByZXR1cm4gZnVuY3Rpb24ga2V5cygpeyByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRoaXMsIGtpbmQpOyB9O1xuICAgICAgY2FzZSBWQUxVRVM6IHJldHVybiBmdW5jdGlvbiB2YWx1ZXMoKXsgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih0aGlzLCBraW5kKTsgfTtcbiAgICB9IHJldHVybiBmdW5jdGlvbiBlbnRyaWVzKCl7IHJldHVybiBuZXcgQ29uc3RydWN0b3IodGhpcywga2luZCk7IH07XG4gIH07XG4gIHZhciBUQUcgICAgICAgID0gTkFNRSArICcgSXRlcmF0b3InXG4gICAgLCBERUZfVkFMVUVTID0gREVGQVVMVCA9PSBWQUxVRVNcbiAgICAsIFZBTFVFU19CVUcgPSBmYWxzZVxuICAgICwgcHJvdG8gICAgICA9IEJhc2UucHJvdG90eXBlXG4gICAgLCAkbmF0aXZlICAgID0gcHJvdG9bSVRFUkFUT1JdIHx8IHByb3RvW0ZGX0lURVJBVE9SXSB8fCBERUZBVUxUICYmIHByb3RvW0RFRkFVTFRdXG4gICAgLCAkZGVmYXVsdCAgID0gJG5hdGl2ZSB8fCBnZXRNZXRob2QoREVGQVVMVClcbiAgICAsICRlbnRyaWVzICAgPSBERUZBVUxUID8gIURFRl9WQUxVRVMgPyAkZGVmYXVsdCA6IGdldE1ldGhvZCgnZW50cmllcycpIDogdW5kZWZpbmVkXG4gICAgLCAkYW55TmF0aXZlID0gTkFNRSA9PSAnQXJyYXknID8gcHJvdG8uZW50cmllcyB8fCAkbmF0aXZlIDogJG5hdGl2ZVxuICAgICwgbWV0aG9kcywga2V5LCBJdGVyYXRvclByb3RvdHlwZTtcbiAgLy8gRml4IG5hdGl2ZVxuICBpZigkYW55TmF0aXZlKXtcbiAgICBJdGVyYXRvclByb3RvdHlwZSA9IGdldFByb3RvdHlwZU9mKCRhbnlOYXRpdmUuY2FsbChuZXcgQmFzZSkpO1xuICAgIGlmKEl0ZXJhdG9yUHJvdG90eXBlICE9PSBPYmplY3QucHJvdG90eXBlKXtcbiAgICAgIC8vIFNldCBAQHRvU3RyaW5nVGFnIHRvIG5hdGl2ZSBpdGVyYXRvcnNcbiAgICAgIHNldFRvU3RyaW5nVGFnKEl0ZXJhdG9yUHJvdG90eXBlLCBUQUcsIHRydWUpO1xuICAgICAgLy8gZml4IGZvciBzb21lIG9sZCBlbmdpbmVzXG4gICAgICBpZighTElCUkFSWSAmJiAhaGFzKEl0ZXJhdG9yUHJvdG90eXBlLCBJVEVSQVRPUikpaGlkZShJdGVyYXRvclByb3RvdHlwZSwgSVRFUkFUT1IsIHJldHVyblRoaXMpO1xuICAgIH1cbiAgfVxuICAvLyBmaXggQXJyYXkje3ZhbHVlcywgQEBpdGVyYXRvcn0ubmFtZSBpbiBWOCAvIEZGXG4gIGlmKERFRl9WQUxVRVMgJiYgJG5hdGl2ZSAmJiAkbmF0aXZlLm5hbWUgIT09IFZBTFVFUyl7XG4gICAgVkFMVUVTX0JVRyA9IHRydWU7XG4gICAgJGRlZmF1bHQgPSBmdW5jdGlvbiB2YWx1ZXMoKXsgcmV0dXJuICRuYXRpdmUuY2FsbCh0aGlzKTsgfTtcbiAgfVxuICAvLyBEZWZpbmUgaXRlcmF0b3JcbiAgaWYoKCFMSUJSQVJZIHx8IEZPUkNFRCkgJiYgKEJVR0dZIHx8IFZBTFVFU19CVUcgfHwgIXByb3RvW0lURVJBVE9SXSkpe1xuICAgIGhpZGUocHJvdG8sIElURVJBVE9SLCAkZGVmYXVsdCk7XG4gIH1cbiAgLy8gUGx1ZyBmb3IgbGlicmFyeVxuICBJdGVyYXRvcnNbTkFNRV0gPSAkZGVmYXVsdDtcbiAgSXRlcmF0b3JzW1RBR10gID0gcmV0dXJuVGhpcztcbiAgaWYoREVGQVVMVCl7XG4gICAgbWV0aG9kcyA9IHtcbiAgICAgIHZhbHVlczogIERFRl9WQUxVRVMgPyAkZGVmYXVsdCA6IGdldE1ldGhvZChWQUxVRVMpLFxuICAgICAga2V5czogICAgSVNfU0VUICAgICA/ICRkZWZhdWx0IDogZ2V0TWV0aG9kKEtFWVMpLFxuICAgICAgZW50cmllczogJGVudHJpZXNcbiAgICB9O1xuICAgIGlmKEZPUkNFRClmb3Ioa2V5IGluIG1ldGhvZHMpe1xuICAgICAgaWYoIShrZXkgaW4gcHJvdG8pKXJlZGVmaW5lKHByb3RvLCBrZXksIG1ldGhvZHNba2V5XSk7XG4gICAgfSBlbHNlICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKEJVR0dZIHx8IFZBTFVFU19CVUcpLCBOQU1FLCBtZXRob2RzKTtcbiAgfVxuICByZXR1cm4gbWV0aG9kcztcbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pdGVyLWRlZmluZS5qc1xuLy8gbW9kdWxlIGlkID0gMTI0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 125 */
/* no static exports found */
/* all exports used */
/*!***************************************************!*\
  !*** ./~/core-js/library/modules/_iter-detect.js ***!
  \***************************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var ITERATOR     = __webpack_require__(/*! ./_wks */ 5)('iterator')\n  , SAFE_CLOSING = false;\n\ntry {\n  var riter = [7][ITERATOR]();\n  riter['return'] = function(){ SAFE_CLOSING = true; };\n  Array.from(riter, function(){ throw 2; });\n} catch(e){ /* empty */ }\n\nmodule.exports = function(exec, skipClosing){\n  if(!skipClosing && !SAFE_CLOSING)return false;\n  var safe = false;\n  try {\n    var arr  = [7]\n      , iter = arr[ITERATOR]();\n    iter.next = function(){ return {done: safe = true}; };\n    arr[ITERATOR] = function(){ return iter; };\n    exec(arr);\n  } catch(e){ /* empty */ }\n  return safe;\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTI1LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faXRlci1kZXRlY3QuanM/MGE5MSJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgSVRFUkFUT1IgICAgID0gcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJylcbiAgLCBTQUZFX0NMT1NJTkcgPSBmYWxzZTtcblxudHJ5IHtcbiAgdmFyIHJpdGVyID0gWzddW0lURVJBVE9SXSgpO1xuICByaXRlclsncmV0dXJuJ10gPSBmdW5jdGlvbigpeyBTQUZFX0NMT1NJTkcgPSB0cnVlOyB9O1xuICBBcnJheS5mcm9tKHJpdGVyLCBmdW5jdGlvbigpeyB0aHJvdyAyOyB9KTtcbn0gY2F0Y2goZSl7IC8qIGVtcHR5ICovIH1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihleGVjLCBza2lwQ2xvc2luZyl7XG4gIGlmKCFza2lwQ2xvc2luZyAmJiAhU0FGRV9DTE9TSU5HKXJldHVybiBmYWxzZTtcbiAgdmFyIHNhZmUgPSBmYWxzZTtcbiAgdHJ5IHtcbiAgICB2YXIgYXJyICA9IFs3XVxuICAgICAgLCBpdGVyID0gYXJyW0lURVJBVE9SXSgpO1xuICAgIGl0ZXIubmV4dCA9IGZ1bmN0aW9uKCl7IHJldHVybiB7ZG9uZTogc2FmZSA9IHRydWV9OyB9O1xuICAgIGFycltJVEVSQVRPUl0gPSBmdW5jdGlvbigpeyByZXR1cm4gaXRlcjsgfTtcbiAgICBleGVjKGFycik7XG4gIH0gY2F0Y2goZSl7IC8qIGVtcHR5ICovIH1cbiAgcmV0dXJuIHNhZmU7XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faXRlci1kZXRlY3QuanNcbi8vIG1vZHVsZSBpZCA9IDEyNVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 126 */
/* no static exports found */
/* all exports used */
/*!***********************************************!*\
  !*** ./~/core-js/library/modules/_library.js ***!
  \***********************************************/
/***/ (function(module, exports) {

eval("module.exports = true;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTI2LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fbGlicmFyeS5qcz8yYzgwIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gdHJ1ZTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2xpYnJhcnkuanNcbi8vIG1vZHVsZSBpZCA9IDEyNlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 127 */
/* no static exports found */
/* all exports used */
/*!*****************************************************!*\
  !*** ./~/core-js/library/modules/_object-create.js ***!
  \*****************************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])\nvar anObject    = __webpack_require__(/*! ./_an-object */ 19)\n  , dPs         = __webpack_require__(/*! ./_object-dps */ 128)\n  , enumBugKeys = __webpack_require__(/*! ./_enum-bug-keys */ 44)\n  , IE_PROTO    = __webpack_require__(/*! ./_shared-key */ 33)('IE_PROTO')\n  , Empty       = function(){ /* empty */ }\n  , PROTOTYPE   = 'prototype';\n\n// Create object with fake `null` prototype: use iframe Object with cleared prototype\nvar createDict = function(){\n  // Thrash, waste and sodomy: IE GC bug\n  var iframe = __webpack_require__(/*! ./_dom-create */ 43)('iframe')\n    , i      = enumBugKeys.length\n    , lt     = '<'\n    , gt     = '>'\n    , iframeDocument;\n  iframe.style.display = 'none';\n  __webpack_require__(/*! ./_html */ 118).appendChild(iframe);\n  iframe.src = 'javascript:'; // eslint-disable-line no-script-url\n  // createDict = iframe.contentWindow.Object;\n  // html.removeChild(iframe);\n  iframeDocument = iframe.contentWindow.document;\n  iframeDocument.open();\n  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);\n  iframeDocument.close();\n  createDict = iframeDocument.F;\n  while(i--)delete createDict[PROTOTYPE][enumBugKeys[i]];\n  return createDict();\n};\n\nmodule.exports = Object.create || function create(O, Properties){\n  var result;\n  if(O !== null){\n    Empty[PROTOTYPE] = anObject(O);\n    result = new Empty;\n    Empty[PROTOTYPE] = null;\n    // add \"__proto__\" for Object.getPrototypeOf polyfill\n    result[IE_PROTO] = O;\n  } else result = createDict();\n  return Properties === undefined ? result : dPs(result, Properties);\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTI3LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWNyZWF0ZS5qcz9kOGNmIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIDE5LjEuMi4yIC8gMTUuMi4zLjUgT2JqZWN0LmNyZWF0ZShPIFssIFByb3BlcnRpZXNdKVxudmFyIGFuT2JqZWN0ICAgID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0JylcbiAgLCBkUHMgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1kcHMnKVxuICAsIGVudW1CdWdLZXlzID0gcmVxdWlyZSgnLi9fZW51bS1idWcta2V5cycpXG4gICwgSUVfUFJPVE8gICAgPSByZXF1aXJlKCcuL19zaGFyZWQta2V5JykoJ0lFX1BST1RPJylcbiAgLCBFbXB0eSAgICAgICA9IGZ1bmN0aW9uKCl7IC8qIGVtcHR5ICovIH1cbiAgLCBQUk9UT1RZUEUgICA9ICdwcm90b3R5cGUnO1xuXG4vLyBDcmVhdGUgb2JqZWN0IHdpdGggZmFrZSBgbnVsbGAgcHJvdG90eXBlOiB1c2UgaWZyYW1lIE9iamVjdCB3aXRoIGNsZWFyZWQgcHJvdG90eXBlXG52YXIgY3JlYXRlRGljdCA9IGZ1bmN0aW9uKCl7XG4gIC8vIFRocmFzaCwgd2FzdGUgYW5kIHNvZG9teTogSUUgR0MgYnVnXG4gIHZhciBpZnJhbWUgPSByZXF1aXJlKCcuL19kb20tY3JlYXRlJykoJ2lmcmFtZScpXG4gICAgLCBpICAgICAgPSBlbnVtQnVnS2V5cy5sZW5ndGhcbiAgICAsIGx0ICAgICA9ICc8J1xuICAgICwgZ3QgICAgID0gJz4nXG4gICAgLCBpZnJhbWVEb2N1bWVudDtcbiAgaWZyYW1lLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gIHJlcXVpcmUoJy4vX2h0bWwnKS5hcHBlbmRDaGlsZChpZnJhbWUpO1xuICBpZnJhbWUuc3JjID0gJ2phdmFzY3JpcHQ6JzsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1zY3JpcHQtdXJsXG4gIC8vIGNyZWF0ZURpY3QgPSBpZnJhbWUuY29udGVudFdpbmRvdy5PYmplY3Q7XG4gIC8vIGh0bWwucmVtb3ZlQ2hpbGQoaWZyYW1lKTtcbiAgaWZyYW1lRG9jdW1lbnQgPSBpZnJhbWUuY29udGVudFdpbmRvdy5kb2N1bWVudDtcbiAgaWZyYW1lRG9jdW1lbnQub3BlbigpO1xuICBpZnJhbWVEb2N1bWVudC53cml0ZShsdCArICdzY3JpcHQnICsgZ3QgKyAnZG9jdW1lbnQuRj1PYmplY3QnICsgbHQgKyAnL3NjcmlwdCcgKyBndCk7XG4gIGlmcmFtZURvY3VtZW50LmNsb3NlKCk7XG4gIGNyZWF0ZURpY3QgPSBpZnJhbWVEb2N1bWVudC5GO1xuICB3aGlsZShpLS0pZGVsZXRlIGNyZWF0ZURpY3RbUFJPVE9UWVBFXVtlbnVtQnVnS2V5c1tpXV07XG4gIHJldHVybiBjcmVhdGVEaWN0KCk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5jcmVhdGUgfHwgZnVuY3Rpb24gY3JlYXRlKE8sIFByb3BlcnRpZXMpe1xuICB2YXIgcmVzdWx0O1xuICBpZihPICE9PSBudWxsKXtcbiAgICBFbXB0eVtQUk9UT1RZUEVdID0gYW5PYmplY3QoTyk7XG4gICAgcmVzdWx0ID0gbmV3IEVtcHR5O1xuICAgIEVtcHR5W1BST1RPVFlQRV0gPSBudWxsO1xuICAgIC8vIGFkZCBcIl9fcHJvdG9fX1wiIGZvciBPYmplY3QuZ2V0UHJvdG90eXBlT2YgcG9seWZpbGxcbiAgICByZXN1bHRbSUVfUFJPVE9dID0gTztcbiAgfSBlbHNlIHJlc3VsdCA9IGNyZWF0ZURpY3QoKTtcbiAgcmV0dXJuIFByb3BlcnRpZXMgPT09IHVuZGVmaW5lZCA/IHJlc3VsdCA6IGRQcyhyZXN1bHQsIFByb3BlcnRpZXMpO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWNyZWF0ZS5qc1xuLy8gbW9kdWxlIGlkID0gMTI3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 128 */
/* no static exports found */
/* all exports used */
/*!**************************************************!*\
  !*** ./~/core-js/library/modules/_object-dps.js ***!
  \**************************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var dP       = __webpack_require__(/*! ./_object-dp */ 23)\n  , anObject = __webpack_require__(/*! ./_an-object */ 19)\n  , getKeys  = __webpack_require__(/*! ./_object-keys */ 131);\n\nmodule.exports = __webpack_require__(/*! ./_descriptors */ 20) ? Object.defineProperties : function defineProperties(O, Properties){\n  anObject(O);\n  var keys   = getKeys(Properties)\n    , length = keys.length\n    , i = 0\n    , P;\n  while(length > i)dP.f(O, P = keys[i++], Properties[P]);\n  return O;\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTI4LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWRwcy5qcz80N2ZkIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBkUCAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpXG4gICwgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKVxuICAsIGdldEtleXMgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gT2JqZWN0LmRlZmluZVByb3BlcnRpZXMgOiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKE8sIFByb3BlcnRpZXMpe1xuICBhbk9iamVjdChPKTtcbiAgdmFyIGtleXMgICA9IGdldEtleXMoUHJvcGVydGllcylcbiAgICAsIGxlbmd0aCA9IGtleXMubGVuZ3RoXG4gICAgLCBpID0gMFxuICAgICwgUDtcbiAgd2hpbGUobGVuZ3RoID4gaSlkUC5mKE8sIFAgPSBrZXlzW2krK10sIFByb3BlcnRpZXNbUF0pO1xuICByZXR1cm4gTztcbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtZHBzLmpzXG4vLyBtb2R1bGUgaWQgPSAxMjhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 129 */
/* no static exports found */
/* all exports used */
/*!**************************************************!*\
  !*** ./~/core-js/library/modules/_object-gpo.js ***!
  \**************************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)\nvar has         = __webpack_require__(/*! ./_has */ 21)\n  , toObject    = __webpack_require__(/*! ./_to-object */ 51)\n  , IE_PROTO    = __webpack_require__(/*! ./_shared-key */ 33)('IE_PROTO')\n  , ObjectProto = Object.prototype;\n\nmodule.exports = Object.getPrototypeOf || function(O){\n  O = toObject(O);\n  if(has(O, IE_PROTO))return O[IE_PROTO];\n  if(typeof O.constructor == 'function' && O instanceof O.constructor){\n    return O.constructor.prototype;\n  } return O instanceof Object ? ObjectProto : null;\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTI5LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWdwby5qcz9kNDdkIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIDE5LjEuMi45IC8gMTUuMi4zLjIgT2JqZWN0LmdldFByb3RvdHlwZU9mKE8pXG52YXIgaGFzICAgICAgICAgPSByZXF1aXJlKCcuL19oYXMnKVxuICAsIHRvT2JqZWN0ICAgID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0JylcbiAgLCBJRV9QUk9UTyAgICA9IHJlcXVpcmUoJy4vX3NoYXJlZC1rZXknKSgnSUVfUFJPVE8nKVxuICAsIE9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24oTyl7XG4gIE8gPSB0b09iamVjdChPKTtcbiAgaWYoaGFzKE8sIElFX1BST1RPKSlyZXR1cm4gT1tJRV9QUk9UT107XG4gIGlmKHR5cGVvZiBPLmNvbnN0cnVjdG9yID09ICdmdW5jdGlvbicgJiYgTyBpbnN0YW5jZW9mIE8uY29uc3RydWN0b3Ipe1xuICAgIHJldHVybiBPLmNvbnN0cnVjdG9yLnByb3RvdHlwZTtcbiAgfSByZXR1cm4gTyBpbnN0YW5jZW9mIE9iamVjdCA/IE9iamVjdFByb3RvIDogbnVsbDtcbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtZ3BvLmpzXG4vLyBtb2R1bGUgaWQgPSAxMjlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 130 */
/* no static exports found */
/* all exports used */
/*!************************************************************!*\
  !*** ./~/core-js/library/modules/_object-keys-internal.js ***!
  \************************************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var has          = __webpack_require__(/*! ./_has */ 21)\n  , toIObject    = __webpack_require__(/*! ./_to-iobject */ 49)\n  , arrayIndexOf = __webpack_require__(/*! ./_array-includes */ 115)(false)\n  , IE_PROTO     = __webpack_require__(/*! ./_shared-key */ 33)('IE_PROTO');\n\nmodule.exports = function(object, names){\n  var O      = toIObject(object)\n    , i      = 0\n    , result = []\n    , key;\n  for(key in O)if(key != IE_PROTO)has(O, key) && result.push(key);\n  // Don't enum bug & hidden keys\n  while(names.length > i)if(has(O, key = names[i++])){\n    ~arrayIndexOf(result, key) || result.push(key);\n  }\n  return result;\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTMwLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWtleXMtaW50ZXJuYWwuanM/ZmNlYSJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgaGFzICAgICAgICAgID0gcmVxdWlyZSgnLi9faGFzJylcbiAgLCB0b0lPYmplY3QgICAgPSByZXF1aXJlKCcuL190by1pb2JqZWN0JylcbiAgLCBhcnJheUluZGV4T2YgPSByZXF1aXJlKCcuL19hcnJheS1pbmNsdWRlcycpKGZhbHNlKVxuICAsIElFX1BST1RPICAgICA9IHJlcXVpcmUoJy4vX3NoYXJlZC1rZXknKSgnSUVfUFJPVE8nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihvYmplY3QsIG5hbWVzKXtcbiAgdmFyIE8gICAgICA9IHRvSU9iamVjdChvYmplY3QpXG4gICAgLCBpICAgICAgPSAwXG4gICAgLCByZXN1bHQgPSBbXVxuICAgICwga2V5O1xuICBmb3Ioa2V5IGluIE8paWYoa2V5ICE9IElFX1BST1RPKWhhcyhPLCBrZXkpICYmIHJlc3VsdC5wdXNoKGtleSk7XG4gIC8vIERvbid0IGVudW0gYnVnICYgaGlkZGVuIGtleXNcbiAgd2hpbGUobmFtZXMubGVuZ3RoID4gaSlpZihoYXMoTywga2V5ID0gbmFtZXNbaSsrXSkpe1xuICAgIH5hcnJheUluZGV4T2YocmVzdWx0LCBrZXkpIHx8IHJlc3VsdC5wdXNoKGtleSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3Qta2V5cy1pbnRlcm5hbC5qc1xuLy8gbW9kdWxlIGlkID0gMTMwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 131 */
/* no static exports found */
/* all exports used */
/*!***************************************************!*\
  !*** ./~/core-js/library/modules/_object-keys.js ***!
  \***************************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("// 19.1.2.14 / 15.2.3.14 Object.keys(O)\nvar $keys       = __webpack_require__(/*! ./_object-keys-internal */ 130)\n  , enumBugKeys = __webpack_require__(/*! ./_enum-bug-keys */ 44);\n\nmodule.exports = Object.keys || function keys(O){\n  return $keys(O, enumBugKeys);\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTMxLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWtleXMuanM/ZjViYyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyAxOS4xLjIuMTQgLyAxNS4yLjMuMTQgT2JqZWN0LmtleXMoTylcbnZhciAka2V5cyAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzLWludGVybmFsJylcbiAgLCBlbnVtQnVnS2V5cyA9IHJlcXVpcmUoJy4vX2VudW0tYnVnLWtleXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3Qua2V5cyB8fCBmdW5jdGlvbiBrZXlzKE8pe1xuICByZXR1cm4gJGtleXMoTywgZW51bUJ1Z0tleXMpO1xufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1rZXlzLmpzXG4vLyBtb2R1bGUgaWQgPSAxMzFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 132 */
/* no static exports found */
/* all exports used */
/*!************************************************!*\
  !*** ./~/core-js/library/modules/_redefine.js ***!
  \************************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = __webpack_require__(/*! ./_hide */ 22);//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTMyLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fcmVkZWZpbmUuanM/MTQ1NSJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3JlZGVmaW5lLmpzXG4vLyBtb2R1bGUgaWQgPSAxMzJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQSIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 133 */
/* no static exports found */
/* all exports used */
/*!*************************************************!*\
  !*** ./~/core-js/library/modules/_string-at.js ***!
  \*************************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var toInteger = __webpack_require__(/*! ./_to-integer */ 34)\n  , defined   = __webpack_require__(/*! ./_defined */ 29);\n// true  -> String#at\n// false -> String#codePointAt\nmodule.exports = function(TO_STRING){\n  return function(that, pos){\n    var s = String(defined(that))\n      , i = toInteger(pos)\n      , l = s.length\n      , a, b;\n    if(i < 0 || i >= l)return TO_STRING ? '' : undefined;\n    a = s.charCodeAt(i);\n    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff\n      ? TO_STRING ? s.charAt(i) : a\n      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;\n  };\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTMzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fc3RyaW5nLWF0LmpzPzQxM2EiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKVxuICAsIGRlZmluZWQgICA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbi8vIHRydWUgIC0+IFN0cmluZyNhdFxuLy8gZmFsc2UgLT4gU3RyaW5nI2NvZGVQb2ludEF0XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKFRPX1NUUklORyl7XG4gIHJldHVybiBmdW5jdGlvbih0aGF0LCBwb3Mpe1xuICAgIHZhciBzID0gU3RyaW5nKGRlZmluZWQodGhhdCkpXG4gICAgICAsIGkgPSB0b0ludGVnZXIocG9zKVxuICAgICAgLCBsID0gcy5sZW5ndGhcbiAgICAgICwgYSwgYjtcbiAgICBpZihpIDwgMCB8fCBpID49IGwpcmV0dXJuIFRPX1NUUklORyA/ICcnIDogdW5kZWZpbmVkO1xuICAgIGEgPSBzLmNoYXJDb2RlQXQoaSk7XG4gICAgcmV0dXJuIGEgPCAweGQ4MDAgfHwgYSA+IDB4ZGJmZiB8fCBpICsgMSA9PT0gbCB8fCAoYiA9IHMuY2hhckNvZGVBdChpICsgMSkpIDwgMHhkYzAwIHx8IGIgPiAweGRmZmZcbiAgICAgID8gVE9fU1RSSU5HID8gcy5jaGFyQXQoaSkgOiBhXG4gICAgICA6IFRPX1NUUklORyA/IHMuc2xpY2UoaSwgaSArIDIpIDogKGEgLSAweGQ4MDAgPDwgMTApICsgKGIgLSAweGRjMDApICsgMHgxMDAwMDtcbiAgfTtcbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19zdHJpbmctYXQuanNcbi8vIG1vZHVsZSBpZCA9IDEzM1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 134 */
/* no static exports found */
/* all exports used */
/*!************************************************!*\
  !*** ./~/core-js/library/modules/_to-index.js ***!
  \************************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var toInteger = __webpack_require__(/*! ./_to-integer */ 34)\n  , max       = Math.max\n  , min       = Math.min;\nmodule.exports = function(index, length){\n  index = toInteger(index);\n  return index < 0 ? max(index + length, 0) : min(index, length);\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTM0LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fdG8taW5kZXguanM/OWZkNCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpXG4gICwgbWF4ICAgICAgID0gTWF0aC5tYXhcbiAgLCBtaW4gICAgICAgPSBNYXRoLm1pbjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaW5kZXgsIGxlbmd0aCl7XG4gIGluZGV4ID0gdG9JbnRlZ2VyKGluZGV4KTtcbiAgcmV0dXJuIGluZGV4IDwgMCA/IG1heChpbmRleCArIGxlbmd0aCwgMCkgOiBtaW4oaW5kZXgsIGxlbmd0aCk7XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fdG8taW5kZXguanNcbi8vIG1vZHVsZSBpZCA9IDEzNFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 135 */
/* no static exports found */
/* all exports used */
/*!****************************************************!*\
  !*** ./~/core-js/library/modules/_to-primitive.js ***!
  \****************************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("// 7.1.1 ToPrimitive(input [, PreferredType])\nvar isObject = __webpack_require__(/*! ./_is-object */ 30);\n// instead of the ES6 spec version, we didn't implement @@toPrimitive case\n// and the second argument - flag - preferred type is a string\nmodule.exports = function(it, S){\n  if(!isObject(it))return it;\n  var fn, val;\n  if(S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;\n  if(typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it)))return val;\n  if(!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;\n  throw TypeError(\"Can't convert object to primitive value\");\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTM1LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fdG8tcHJpbWl0aXZlLmpzPzQ5YTQiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gNy4xLjEgVG9QcmltaXRpdmUoaW5wdXQgWywgUHJlZmVycmVkVHlwZV0pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbi8vIGluc3RlYWQgb2YgdGhlIEVTNiBzcGVjIHZlcnNpb24sIHdlIGRpZG4ndCBpbXBsZW1lbnQgQEB0b1ByaW1pdGl2ZSBjYXNlXG4vLyBhbmQgdGhlIHNlY29uZCBhcmd1bWVudCAtIGZsYWcgLSBwcmVmZXJyZWQgdHlwZSBpcyBhIHN0cmluZ1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCwgUyl7XG4gIGlmKCFpc09iamVjdChpdCkpcmV0dXJuIGl0O1xuICB2YXIgZm4sIHZhbDtcbiAgaWYoUyAmJiB0eXBlb2YgKGZuID0gaXQudG9TdHJpbmcpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaXQpKSlyZXR1cm4gdmFsO1xuICBpZih0eXBlb2YgKGZuID0gaXQudmFsdWVPZikgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKXJldHVybiB2YWw7XG4gIGlmKCFTICYmIHR5cGVvZiAoZm4gPSBpdC50b1N0cmluZykgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKXJldHVybiB2YWw7XG4gIHRocm93IFR5cGVFcnJvcihcIkNhbid0IGNvbnZlcnQgb2JqZWN0IHRvIHByaW1pdGl2ZSB2YWx1ZVwiKTtcbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL190by1wcmltaXRpdmUuanNcbi8vIG1vZHVsZSBpZCA9IDEzNVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 136 */
/* no static exports found */
/* all exports used */
/*!***************************************************************!*\
  !*** ./~/core-js/library/modules/core.get-iterator-method.js ***!
  \***************************************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var classof   = __webpack_require__(/*! ./_classof */ 116)\n  , ITERATOR  = __webpack_require__(/*! ./_wks */ 5)('iterator')\n  , Iterators = __webpack_require__(/*! ./_iterators */ 31);\nmodule.exports = __webpack_require__(/*! ./_core */ 28).getIteratorMethod = function(it){\n  if(it != undefined)return it[ITERATOR]\n    || it['@@iterator']\n    || Iterators[classof(it)];\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTM2LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9jb3JlLmdldC1pdGVyYXRvci1tZXRob2QuanM/OWM4OCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgY2xhc3NvZiAgID0gcmVxdWlyZSgnLi9fY2xhc3NvZicpXG4gICwgSVRFUkFUT1IgID0gcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJylcbiAgLCBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fY29yZScpLmdldEl0ZXJhdG9yTWV0aG9kID0gZnVuY3Rpb24oaXQpe1xuICBpZihpdCAhPSB1bmRlZmluZWQpcmV0dXJuIGl0W0lURVJBVE9SXVxuICAgIHx8IGl0WydAQGl0ZXJhdG9yJ11cbiAgICB8fCBJdGVyYXRvcnNbY2xhc3NvZihpdCldO1xufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvY29yZS5nZXQtaXRlcmF0b3ItbWV0aG9kLmpzXG4vLyBtb2R1bGUgaWQgPSAxMzZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 137 */
/* no static exports found */
/* all exports used */
/*!*****************************************************!*\
  !*** ./~/core-js/library/modules/es6.array.from.js ***!
  \*****************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar ctx            = __webpack_require__(/*! ./_ctx */ 42)\n  , $export        = __webpack_require__(/*! ./_export */ 45)\n  , toObject       = __webpack_require__(/*! ./_to-object */ 51)\n  , call           = __webpack_require__(/*! ./_iter-call */ 122)\n  , isArrayIter    = __webpack_require__(/*! ./_is-array-iter */ 121)\n  , toLength       = __webpack_require__(/*! ./_to-length */ 50)\n  , createProperty = __webpack_require__(/*! ./_create-property */ 117)\n  , getIterFn      = __webpack_require__(/*! ./core.get-iterator-method */ 136);\n\n$export($export.S + $export.F * !__webpack_require__(/*! ./_iter-detect */ 125)(function(iter){ Array.from(iter); }), 'Array', {\n  // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)\n  from: function from(arrayLike/*, mapfn = undefined, thisArg = undefined*/){\n    var O       = toObject(arrayLike)\n      , C       = typeof this == 'function' ? this : Array\n      , aLen    = arguments.length\n      , mapfn   = aLen > 1 ? arguments[1] : undefined\n      , mapping = mapfn !== undefined\n      , index   = 0\n      , iterFn  = getIterFn(O)\n      , length, result, step, iterator;\n    if(mapping)mapfn = ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2);\n    // if object isn't iterable or it's array with default iterator - use simple case\n    if(iterFn != undefined && !(C == Array && isArrayIter(iterFn))){\n      for(iterator = iterFn.call(O), result = new C; !(step = iterator.next()).done; index++){\n        createProperty(result, index, mapping ? call(iterator, mapfn, [step.value, index], true) : step.value);\n      }\n    } else {\n      length = toLength(O.length);\n      for(result = new C(length); length > index; index++){\n        createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);\n      }\n    }\n    result.length = index;\n    return result;\n  }\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTM3LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYuYXJyYXkuZnJvbS5qcz9jZTdkIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcbnZhciBjdHggICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2N0eCcpXG4gICwgJGV4cG9ydCAgICAgICAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIHRvT2JqZWN0ICAgICAgID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0JylcbiAgLCBjYWxsICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2l0ZXItY2FsbCcpXG4gICwgaXNBcnJheUl0ZXIgICAgPSByZXF1aXJlKCcuL19pcy1hcnJheS1pdGVyJylcbiAgLCB0b0xlbmd0aCAgICAgICA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpXG4gICwgY3JlYXRlUHJvcGVydHkgPSByZXF1aXJlKCcuL19jcmVhdGUtcHJvcGVydHknKVxuICAsIGdldEl0ZXJGbiAgICAgID0gcmVxdWlyZSgnLi9jb3JlLmdldC1pdGVyYXRvci1tZXRob2QnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9faXRlci1kZXRlY3QnKShmdW5jdGlvbihpdGVyKXsgQXJyYXkuZnJvbShpdGVyKTsgfSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4yLjEgQXJyYXkuZnJvbShhcnJheUxpa2UsIG1hcGZuID0gdW5kZWZpbmVkLCB0aGlzQXJnID0gdW5kZWZpbmVkKVxuICBmcm9tOiBmdW5jdGlvbiBmcm9tKGFycmF5TGlrZS8qLCBtYXBmbiA9IHVuZGVmaW5lZCwgdGhpc0FyZyA9IHVuZGVmaW5lZCovKXtcbiAgICB2YXIgTyAgICAgICA9IHRvT2JqZWN0KGFycmF5TGlrZSlcbiAgICAgICwgQyAgICAgICA9IHR5cGVvZiB0aGlzID09ICdmdW5jdGlvbicgPyB0aGlzIDogQXJyYXlcbiAgICAgICwgYUxlbiAgICA9IGFyZ3VtZW50cy5sZW5ndGhcbiAgICAgICwgbWFwZm4gICA9IGFMZW4gPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkXG4gICAgICAsIG1hcHBpbmcgPSBtYXBmbiAhPT0gdW5kZWZpbmVkXG4gICAgICAsIGluZGV4ICAgPSAwXG4gICAgICAsIGl0ZXJGbiAgPSBnZXRJdGVyRm4oTylcbiAgICAgICwgbGVuZ3RoLCByZXN1bHQsIHN0ZXAsIGl0ZXJhdG9yO1xuICAgIGlmKG1hcHBpbmcpbWFwZm4gPSBjdHgobWFwZm4sIGFMZW4gPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkLCAyKTtcbiAgICAvLyBpZiBvYmplY3QgaXNuJ3QgaXRlcmFibGUgb3IgaXQncyBhcnJheSB3aXRoIGRlZmF1bHQgaXRlcmF0b3IgLSB1c2Ugc2ltcGxlIGNhc2VcbiAgICBpZihpdGVyRm4gIT0gdW5kZWZpbmVkICYmICEoQyA9PSBBcnJheSAmJiBpc0FycmF5SXRlcihpdGVyRm4pKSl7XG4gICAgICBmb3IoaXRlcmF0b3IgPSBpdGVyRm4uY2FsbChPKSwgcmVzdWx0ID0gbmV3IEM7ICEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZTsgaW5kZXgrKyl7XG4gICAgICAgIGNyZWF0ZVByb3BlcnR5KHJlc3VsdCwgaW5kZXgsIG1hcHBpbmcgPyBjYWxsKGl0ZXJhdG9yLCBtYXBmbiwgW3N0ZXAudmFsdWUsIGluZGV4XSwgdHJ1ZSkgOiBzdGVwLnZhbHVlKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICAgICAgZm9yKHJlc3VsdCA9IG5ldyBDKGxlbmd0aCk7IGxlbmd0aCA+IGluZGV4OyBpbmRleCsrKXtcbiAgICAgICAgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBpbmRleCwgbWFwcGluZyA/IG1hcGZuKE9baW5kZXhdLCBpbmRleCkgOiBPW2luZGV4XSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJlc3VsdC5sZW5ndGggPSBpbmRleDtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYuYXJyYXkuZnJvbS5qc1xuLy8gbW9kdWxlIGlkID0gMTM3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 138 */
/* no static exports found */
/* all exports used */
/*!**********************************************************!*\
  !*** ./~/core-js/library/modules/es6.string.iterator.js ***!
  \**********************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar $at  = __webpack_require__(/*! ./_string-at */ 133)(true);\n\n// 21.1.3.27 String.prototype[@@iterator]()\n__webpack_require__(/*! ./_iter-define */ 124)(String, 'String', function(iterated){\n  this._t = String(iterated); // target\n  this._i = 0;                // next index\n// 21.1.5.2.1 %StringIteratorPrototype%.next()\n}, function(){\n  var O     = this._t\n    , index = this._i\n    , point;\n  if(index >= O.length)return {value: undefined, done: true};\n  point = $at(O, index);\n  this._i += point.length;\n  return {value: point, done: false};\n});//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTM4LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYuc3RyaW5nLml0ZXJhdG9yLmpzP2ZlMTgiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xudmFyICRhdCAgPSByZXF1aXJlKCcuL19zdHJpbmctYXQnKSh0cnVlKTtcblxuLy8gMjEuMS4zLjI3IFN0cmluZy5wcm90b3R5cGVbQEBpdGVyYXRvcl0oKVxucmVxdWlyZSgnLi9faXRlci1kZWZpbmUnKShTdHJpbmcsICdTdHJpbmcnLCBmdW5jdGlvbihpdGVyYXRlZCl7XG4gIHRoaXMuX3QgPSBTdHJpbmcoaXRlcmF0ZWQpOyAvLyB0YXJnZXRcbiAgdGhpcy5faSA9IDA7ICAgICAgICAgICAgICAgIC8vIG5leHQgaW5kZXhcbi8vIDIxLjEuNS4yLjEgJVN0cmluZ0l0ZXJhdG9yUHJvdG90eXBlJS5uZXh0KClcbn0sIGZ1bmN0aW9uKCl7XG4gIHZhciBPICAgICA9IHRoaXMuX3RcbiAgICAsIGluZGV4ID0gdGhpcy5faVxuICAgICwgcG9pbnQ7XG4gIGlmKGluZGV4ID49IE8ubGVuZ3RoKXJldHVybiB7dmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZX07XG4gIHBvaW50ID0gJGF0KE8sIGluZGV4KTtcbiAgdGhpcy5faSArPSBwb2ludC5sZW5ndGg7XG4gIHJldHVybiB7dmFsdWU6IHBvaW50LCBkb25lOiBmYWxzZX07XG59KTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM2LnN0cmluZy5pdGVyYXRvci5qc1xuLy8gbW9kdWxlIGlkID0gMTM4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 139 */
/* no static exports found */
/* all exports used */
/*!**************************!*\
  !*** ./~/crypt/crypt.js ***!
  \**************************/
/***/ (function(module, exports) {

eval("(function() {\n  var base64map\n      = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',\n\n  crypt = {\n    // Bit-wise rotation left\n    rotl: function(n, b) {\n      return (n << b) | (n >>> (32 - b));\n    },\n\n    // Bit-wise rotation right\n    rotr: function(n, b) {\n      return (n << (32 - b)) | (n >>> b);\n    },\n\n    // Swap big-endian to little-endian and vice versa\n    endian: function(n) {\n      // If number given, swap endian\n      if (n.constructor == Number) {\n        return crypt.rotl(n, 8) & 0x00FF00FF | crypt.rotl(n, 24) & 0xFF00FF00;\n      }\n\n      // Else, assume array and swap all items\n      for (var i = 0; i < n.length; i++)\n        n[i] = crypt.endian(n[i]);\n      return n;\n    },\n\n    // Generate an array of any length of random bytes\n    randomBytes: function(n) {\n      for (var bytes = []; n > 0; n--)\n        bytes.push(Math.floor(Math.random() * 256));\n      return bytes;\n    },\n\n    // Convert a byte array to big-endian 32-bit words\n    bytesToWords: function(bytes) {\n      for (var words = [], i = 0, b = 0; i < bytes.length; i++, b += 8)\n        words[b >>> 5] |= bytes[i] << (24 - b % 32);\n      return words;\n    },\n\n    // Convert big-endian 32-bit words to a byte array\n    wordsToBytes: function(words) {\n      for (var bytes = [], b = 0; b < words.length * 32; b += 8)\n        bytes.push((words[b >>> 5] >>> (24 - b % 32)) & 0xFF);\n      return bytes;\n    },\n\n    // Convert a byte array to a hex string\n    bytesToHex: function(bytes) {\n      for (var hex = [], i = 0; i < bytes.length; i++) {\n        hex.push((bytes[i] >>> 4).toString(16));\n        hex.push((bytes[i] & 0xF).toString(16));\n      }\n      return hex.join('');\n    },\n\n    // Convert a hex string to a byte array\n    hexToBytes: function(hex) {\n      for (var bytes = [], c = 0; c < hex.length; c += 2)\n        bytes.push(parseInt(hex.substr(c, 2), 16));\n      return bytes;\n    },\n\n    // Convert a byte array to a base-64 string\n    bytesToBase64: function(bytes) {\n      for (var base64 = [], i = 0; i < bytes.length; i += 3) {\n        var triplet = (bytes[i] << 16) | (bytes[i + 1] << 8) | bytes[i + 2];\n        for (var j = 0; j < 4; j++)\n          if (i * 8 + j * 6 <= bytes.length * 8)\n            base64.push(base64map.charAt((triplet >>> 6 * (3 - j)) & 0x3F));\n          else\n            base64.push('=');\n      }\n      return base64.join('');\n    },\n\n    // Convert a base-64 string to a byte array\n    base64ToBytes: function(base64) {\n      // Remove non-base-64 characters\n      base64 = base64.replace(/[^A-Z0-9+\\/]/ig, '');\n\n      for (var bytes = [], i = 0, imod4 = 0; i < base64.length;\n          imod4 = ++i % 4) {\n        if (imod4 == 0) continue;\n        bytes.push(((base64map.indexOf(base64.charAt(i - 1))\n            & (Math.pow(2, -2 * imod4 + 8) - 1)) << (imod4 * 2))\n            | (base64map.indexOf(base64.charAt(i)) >>> (6 - imod4 * 2)));\n      }\n      return bytes;\n    }\n  };\n\n  module.exports = crypt;\n})();\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTM5LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9jcnlwdC9jcnlwdC5qcz9iMWUyIl0sInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbigpIHtcbiAgdmFyIGJhc2U2NG1hcFxuICAgICAgPSAnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLycsXG5cbiAgY3J5cHQgPSB7XG4gICAgLy8gQml0LXdpc2Ugcm90YXRpb24gbGVmdFxuICAgIHJvdGw6IGZ1bmN0aW9uKG4sIGIpIHtcbiAgICAgIHJldHVybiAobiA8PCBiKSB8IChuID4+PiAoMzIgLSBiKSk7XG4gICAgfSxcblxuICAgIC8vIEJpdC13aXNlIHJvdGF0aW9uIHJpZ2h0XG4gICAgcm90cjogZnVuY3Rpb24obiwgYikge1xuICAgICAgcmV0dXJuIChuIDw8ICgzMiAtIGIpKSB8IChuID4+PiBiKTtcbiAgICB9LFxuXG4gICAgLy8gU3dhcCBiaWctZW5kaWFuIHRvIGxpdHRsZS1lbmRpYW4gYW5kIHZpY2UgdmVyc2FcbiAgICBlbmRpYW46IGZ1bmN0aW9uKG4pIHtcbiAgICAgIC8vIElmIG51bWJlciBnaXZlbiwgc3dhcCBlbmRpYW5cbiAgICAgIGlmIChuLmNvbnN0cnVjdG9yID09IE51bWJlcikge1xuICAgICAgICByZXR1cm4gY3J5cHQucm90bChuLCA4KSAmIDB4MDBGRjAwRkYgfCBjcnlwdC5yb3RsKG4sIDI0KSAmIDB4RkYwMEZGMDA7XG4gICAgICB9XG5cbiAgICAgIC8vIEVsc2UsIGFzc3VtZSBhcnJheSBhbmQgc3dhcCBhbGwgaXRlbXNcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbi5sZW5ndGg7IGkrKylcbiAgICAgICAgbltpXSA9IGNyeXB0LmVuZGlhbihuW2ldKTtcbiAgICAgIHJldHVybiBuO1xuICAgIH0sXG5cbiAgICAvLyBHZW5lcmF0ZSBhbiBhcnJheSBvZiBhbnkgbGVuZ3RoIG9mIHJhbmRvbSBieXRlc1xuICAgIHJhbmRvbUJ5dGVzOiBmdW5jdGlvbihuKSB7XG4gICAgICBmb3IgKHZhciBieXRlcyA9IFtdOyBuID4gMDsgbi0tKVxuICAgICAgICBieXRlcy5wdXNoKE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDI1NikpO1xuICAgICAgcmV0dXJuIGJ5dGVzO1xuICAgIH0sXG5cbiAgICAvLyBDb252ZXJ0IGEgYnl0ZSBhcnJheSB0byBiaWctZW5kaWFuIDMyLWJpdCB3b3Jkc1xuICAgIGJ5dGVzVG9Xb3JkczogZnVuY3Rpb24oYnl0ZXMpIHtcbiAgICAgIGZvciAodmFyIHdvcmRzID0gW10sIGkgPSAwLCBiID0gMDsgaSA8IGJ5dGVzLmxlbmd0aDsgaSsrLCBiICs9IDgpXG4gICAgICAgIHdvcmRzW2IgPj4+IDVdIHw9IGJ5dGVzW2ldIDw8ICgyNCAtIGIgJSAzMik7XG4gICAgICByZXR1cm4gd29yZHM7XG4gICAgfSxcblxuICAgIC8vIENvbnZlcnQgYmlnLWVuZGlhbiAzMi1iaXQgd29yZHMgdG8gYSBieXRlIGFycmF5XG4gICAgd29yZHNUb0J5dGVzOiBmdW5jdGlvbih3b3Jkcykge1xuICAgICAgZm9yICh2YXIgYnl0ZXMgPSBbXSwgYiA9IDA7IGIgPCB3b3Jkcy5sZW5ndGggKiAzMjsgYiArPSA4KVxuICAgICAgICBieXRlcy5wdXNoKCh3b3Jkc1tiID4+PiA1XSA+Pj4gKDI0IC0gYiAlIDMyKSkgJiAweEZGKTtcbiAgICAgIHJldHVybiBieXRlcztcbiAgICB9LFxuXG4gICAgLy8gQ29udmVydCBhIGJ5dGUgYXJyYXkgdG8gYSBoZXggc3RyaW5nXG4gICAgYnl0ZXNUb0hleDogZnVuY3Rpb24oYnl0ZXMpIHtcbiAgICAgIGZvciAodmFyIGhleCA9IFtdLCBpID0gMDsgaSA8IGJ5dGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGhleC5wdXNoKChieXRlc1tpXSA+Pj4gNCkudG9TdHJpbmcoMTYpKTtcbiAgICAgICAgaGV4LnB1c2goKGJ5dGVzW2ldICYgMHhGKS50b1N0cmluZygxNikpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGhleC5qb2luKCcnKTtcbiAgICB9LFxuXG4gICAgLy8gQ29udmVydCBhIGhleCBzdHJpbmcgdG8gYSBieXRlIGFycmF5XG4gICAgaGV4VG9CeXRlczogZnVuY3Rpb24oaGV4KSB7XG4gICAgICBmb3IgKHZhciBieXRlcyA9IFtdLCBjID0gMDsgYyA8IGhleC5sZW5ndGg7IGMgKz0gMilcbiAgICAgICAgYnl0ZXMucHVzaChwYXJzZUludChoZXguc3Vic3RyKGMsIDIpLCAxNikpO1xuICAgICAgcmV0dXJuIGJ5dGVzO1xuICAgIH0sXG5cbiAgICAvLyBDb252ZXJ0IGEgYnl0ZSBhcnJheSB0byBhIGJhc2UtNjQgc3RyaW5nXG4gICAgYnl0ZXNUb0Jhc2U2NDogZnVuY3Rpb24oYnl0ZXMpIHtcbiAgICAgIGZvciAodmFyIGJhc2U2NCA9IFtdLCBpID0gMDsgaSA8IGJ5dGVzLmxlbmd0aDsgaSArPSAzKSB7XG4gICAgICAgIHZhciB0cmlwbGV0ID0gKGJ5dGVzW2ldIDw8IDE2KSB8IChieXRlc1tpICsgMV0gPDwgOCkgfCBieXRlc1tpICsgMl07XG4gICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgNDsgaisrKVxuICAgICAgICAgIGlmIChpICogOCArIGogKiA2IDw9IGJ5dGVzLmxlbmd0aCAqIDgpXG4gICAgICAgICAgICBiYXNlNjQucHVzaChiYXNlNjRtYXAuY2hhckF0KCh0cmlwbGV0ID4+PiA2ICogKDMgLSBqKSkgJiAweDNGKSk7XG4gICAgICAgICAgZWxzZVxuICAgICAgICAgICAgYmFzZTY0LnB1c2goJz0nKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlNjQuam9pbignJyk7XG4gICAgfSxcblxuICAgIC8vIENvbnZlcnQgYSBiYXNlLTY0IHN0cmluZyB0byBhIGJ5dGUgYXJyYXlcbiAgICBiYXNlNjRUb0J5dGVzOiBmdW5jdGlvbihiYXNlNjQpIHtcbiAgICAgIC8vIFJlbW92ZSBub24tYmFzZS02NCBjaGFyYWN0ZXJzXG4gICAgICBiYXNlNjQgPSBiYXNlNjQucmVwbGFjZSgvW15BLVowLTkrXFwvXS9pZywgJycpO1xuXG4gICAgICBmb3IgKHZhciBieXRlcyA9IFtdLCBpID0gMCwgaW1vZDQgPSAwOyBpIDwgYmFzZTY0Lmxlbmd0aDtcbiAgICAgICAgICBpbW9kNCA9ICsraSAlIDQpIHtcbiAgICAgICAgaWYgKGltb2Q0ID09IDApIGNvbnRpbnVlO1xuICAgICAgICBieXRlcy5wdXNoKCgoYmFzZTY0bWFwLmluZGV4T2YoYmFzZTY0LmNoYXJBdChpIC0gMSkpXG4gICAgICAgICAgICAmIChNYXRoLnBvdygyLCAtMiAqIGltb2Q0ICsgOCkgLSAxKSkgPDwgKGltb2Q0ICogMikpXG4gICAgICAgICAgICB8IChiYXNlNjRtYXAuaW5kZXhPZihiYXNlNjQuY2hhckF0KGkpKSA+Pj4gKDYgLSBpbW9kNCAqIDIpKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gYnl0ZXM7XG4gICAgfVxuICB9O1xuXG4gIG1vZHVsZS5leHBvcnRzID0gY3J5cHQ7XG59KSgpO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NyeXB0L2NyeXB0LmpzXG4vLyBtb2R1bGUgaWQgPSAxMzlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 140 */
/* no static exports found */
/* all exports used */
/*!******************************!*\
  !*** ./~/is-buffer/index.js ***!
  \******************************/
/***/ (function(module, exports) {

eval("/*!\n * Determine if an object is a Buffer\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\n\n// The _isBuffer check is for Safari 5-7 support, because it's missing\n// Object.prototype.constructor. Remove this eventually\nmodule.exports = function (obj) {\n  return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)\n}\n\nfunction isBuffer (obj) {\n  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)\n}\n\n// For Node v0.10 support. Remove this eventually.\nfunction isSlowBuffer (obj) {\n  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0))\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTQwLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9pcy1idWZmZXIvaW5kZXguanM/MWY2YSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIERldGVybWluZSBpZiBhbiBvYmplY3QgaXMgYSBCdWZmZXJcbiAqXG4gKiBAYXV0aG9yICAgRmVyb3NzIEFib3VraGFkaWplaCA8ZmVyb3NzQGZlcm9zcy5vcmc+IDxodHRwOi8vZmVyb3NzLm9yZz5cbiAqIEBsaWNlbnNlICBNSVRcbiAqL1xuXG4vLyBUaGUgX2lzQnVmZmVyIGNoZWNrIGlzIGZvciBTYWZhcmkgNS03IHN1cHBvcnQsIGJlY2F1c2UgaXQncyBtaXNzaW5nXG4vLyBPYmplY3QucHJvdG90eXBlLmNvbnN0cnVjdG9yLiBSZW1vdmUgdGhpcyBldmVudHVhbGx5XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmopIHtcbiAgcmV0dXJuIG9iaiAhPSBudWxsICYmIChpc0J1ZmZlcihvYmopIHx8IGlzU2xvd0J1ZmZlcihvYmopIHx8ICEhb2JqLl9pc0J1ZmZlcilcbn1cblxuZnVuY3Rpb24gaXNCdWZmZXIgKG9iaikge1xuICByZXR1cm4gISFvYmouY29uc3RydWN0b3IgJiYgdHlwZW9mIG9iai5jb25zdHJ1Y3Rvci5pc0J1ZmZlciA9PT0gJ2Z1bmN0aW9uJyAmJiBvYmouY29uc3RydWN0b3IuaXNCdWZmZXIob2JqKVxufVxuXG4vLyBGb3IgTm9kZSB2MC4xMCBzdXBwb3J0LiBSZW1vdmUgdGhpcyBldmVudHVhbGx5LlxuZnVuY3Rpb24gaXNTbG93QnVmZmVyIChvYmopIHtcbiAgcmV0dXJuIHR5cGVvZiBvYmoucmVhZEZsb2F0TEUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIG9iai5zbGljZSA9PT0gJ2Z1bmN0aW9uJyAmJiBpc0J1ZmZlcihvYmouc2xpY2UoMCwgMCkpXG59XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vaXMtYnVmZmVyL2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSAxNDBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 141 */
/* no static exports found */
/* all exports used */
/*!*************************************!*\
  !*** ./~/mapnik-reference/index.js ***!
  \*************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(__dirname) {var fs = __webpack_require__(/*! fs */ 11),\n    path = __webpack_require__(/*! path */ 12),\n    existsSync = __webpack_require__(/*! fs */ 11).existsSync || __webpack_require__(/*! path */ 12).existsSync;\n\n// Load all stated versions into the module exports\nmodule.exports.version = {};\n\nvar refs = [\n '2.0.0',\n '2.0.1',\n '2.0.2',\n '2.1.0',\n '2.1.1',\n '2.2.0',\n '2.3.0',\n '3.0.0'\n];\n\nrefs.map(function(version) {\n    module.exports.version[version] = !(function webpackMissingModule() { var e = new Error(\"Cannot find module \\\".\\\"\"); e.code = 'MODULE_NOT_FOUND'; throw e; }());\n    var ds_path = path.join(__dirname, version, 'datasources.json');\n    if (existsSync(ds_path)) {\n        module.exports.version[version].datasources = !(function webpackMissingModule() { var e = new Error(\"Cannot find module \\\".\\\"\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()).datasources;\n    }\n});\n\n/* WEBPACK VAR INJECTION */}.call(exports, \"/\"))//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTQxLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9tYXBuaWstcmVmZXJlbmNlL2luZGV4LmpzP2RhNTQiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGZzID0gcmVxdWlyZSgnZnMnKSxcbiAgICBwYXRoID0gcmVxdWlyZSgncGF0aCcpLFxuICAgIGV4aXN0c1N5bmMgPSByZXF1aXJlKCdmcycpLmV4aXN0c1N5bmMgfHwgcmVxdWlyZSgncGF0aCcpLmV4aXN0c1N5bmM7XG5cbi8vIExvYWQgYWxsIHN0YXRlZCB2ZXJzaW9ucyBpbnRvIHRoZSBtb2R1bGUgZXhwb3J0c1xubW9kdWxlLmV4cG9ydHMudmVyc2lvbiA9IHt9O1xuXG52YXIgcmVmcyA9IFtcbiAnMi4wLjAnLFxuICcyLjAuMScsXG4gJzIuMC4yJyxcbiAnMi4xLjAnLFxuICcyLjEuMScsXG4gJzIuMi4wJyxcbiAnMi4zLjAnLFxuICczLjAuMCdcbl07XG5cbnJlZnMubWFwKGZ1bmN0aW9uKHZlcnNpb24pIHtcbiAgICBtb2R1bGUuZXhwb3J0cy52ZXJzaW9uW3ZlcnNpb25dID0gcmVxdWlyZShwYXRoLmpvaW4oX19kaXJuYW1lLCB2ZXJzaW9uLCAncmVmZXJlbmNlLmpzb24nKSk7XG4gICAgdmFyIGRzX3BhdGggPSBwYXRoLmpvaW4oX19kaXJuYW1lLCB2ZXJzaW9uLCAnZGF0YXNvdXJjZXMuanNvbicpO1xuICAgIGlmIChleGlzdHNTeW5jKGRzX3BhdGgpKSB7XG4gICAgICAgIG1vZHVsZS5leHBvcnRzLnZlcnNpb25bdmVyc2lvbl0uZGF0YXNvdXJjZXMgPSByZXF1aXJlKGRzX3BhdGgpLmRhdGFzb3VyY2VzO1xuICAgIH1cbn0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L21hcG5pay1yZWZlcmVuY2UvaW5kZXguanNcbi8vIG1vZHVsZSBpZCA9IDE0MVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBIiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 142 */
/* no static exports found */
/* all exports used */
/*!***************************!*\
  !*** ./~/ramda/src/ap.js ***!
  \***************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var _concat = __webpack_require__(/*! ./internal/_concat */ 154);\nvar _curry2 = __webpack_require__(/*! ./internal/_curry2 */ 1);\nvar _reduce = __webpack_require__(/*! ./internal/_reduce */ 16);\nvar map = __webpack_require__(/*! ./map */ 8);\n\n\n/**\n * ap applies a list of functions to a list of values.\n *\n * Dispatches to the `ap` method of the second argument, if present. Also\n * treats curried functions as applicatives.\n *\n * @func\n * @memberOf R\n * @since v0.3.0\n * @category Function\n * @sig [a -> b] -> [a] -> [b]\n * @sig Apply f => f (a -> b) -> f a -> f b\n * @param {Array} fns An array of functions\n * @param {Array} vs An array of values\n * @return {Array} An array of results of applying each of `fns` to all of `vs` in turn.\n * @example\n *\n *      R.ap([R.multiply(2), R.add(3)], [1,2,3]); //=> [2, 4, 6, 4, 5, 6]\n *      R.ap([R.concat('tasty '), R.toUpper], ['pizza', 'salad']); //=> [\"tasty pizza\", \"tasty salad\", \"PIZZA\", \"SALAD\"]\n * @symb R.ap([f, g], [a, b]) = [f(a), f(b), g(a), g(b)]\n */\nmodule.exports = _curry2(function ap(applicative, fn) {\n  return (\n    typeof applicative.ap === 'function' ?\n      applicative.ap(fn) :\n    typeof applicative === 'function' ?\n      function(x) { return applicative(x)(fn(x)); } :\n    // else\n      _reduce(function(acc, f) { return _concat(acc, map(f, fn)); }, [], applicative)\n  );\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTQyLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9yYW1kYS9zcmMvYXAuanM/OWU1NyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX2NvbmNhdCA9IHJlcXVpcmUoJy4vaW50ZXJuYWwvX2NvbmNhdCcpO1xudmFyIF9jdXJyeTIgPSByZXF1aXJlKCcuL2ludGVybmFsL19jdXJyeTInKTtcbnZhciBfcmVkdWNlID0gcmVxdWlyZSgnLi9pbnRlcm5hbC9fcmVkdWNlJyk7XG52YXIgbWFwID0gcmVxdWlyZSgnLi9tYXAnKTtcblxuXG4vKipcbiAqIGFwIGFwcGxpZXMgYSBsaXN0IG9mIGZ1bmN0aW9ucyB0byBhIGxpc3Qgb2YgdmFsdWVzLlxuICpcbiAqIERpc3BhdGNoZXMgdG8gdGhlIGBhcGAgbWV0aG9kIG9mIHRoZSBzZWNvbmQgYXJndW1lbnQsIGlmIHByZXNlbnQuIEFsc29cbiAqIHRyZWF0cyBjdXJyaWVkIGZ1bmN0aW9ucyBhcyBhcHBsaWNhdGl2ZXMuXG4gKlxuICogQGZ1bmNcbiAqIEBtZW1iZXJPZiBSXG4gKiBAc2luY2UgdjAuMy4wXG4gKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAqIEBzaWcgW2EgLT4gYl0gLT4gW2FdIC0+IFtiXVxuICogQHNpZyBBcHBseSBmID0+IGYgKGEgLT4gYikgLT4gZiBhIC0+IGYgYlxuICogQHBhcmFtIHtBcnJheX0gZm5zIEFuIGFycmF5IG9mIGZ1bmN0aW9uc1xuICogQHBhcmFtIHtBcnJheX0gdnMgQW4gYXJyYXkgb2YgdmFsdWVzXG4gKiBAcmV0dXJuIHtBcnJheX0gQW4gYXJyYXkgb2YgcmVzdWx0cyBvZiBhcHBseWluZyBlYWNoIG9mIGBmbnNgIHRvIGFsbCBvZiBgdnNgIGluIHR1cm4uXG4gKiBAZXhhbXBsZVxuICpcbiAqICAgICAgUi5hcChbUi5tdWx0aXBseSgyKSwgUi5hZGQoMyldLCBbMSwyLDNdKTsgLy89PiBbMiwgNCwgNiwgNCwgNSwgNl1cbiAqICAgICAgUi5hcChbUi5jb25jYXQoJ3Rhc3R5ICcpLCBSLnRvVXBwZXJdLCBbJ3BpenphJywgJ3NhbGFkJ10pOyAvLz0+IFtcInRhc3R5IHBpenphXCIsIFwidGFzdHkgc2FsYWRcIiwgXCJQSVpaQVwiLCBcIlNBTEFEXCJdXG4gKiBAc3ltYiBSLmFwKFtmLCBnXSwgW2EsIGJdKSA9IFtmKGEpLCBmKGIpLCBnKGEpLCBnKGIpXVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IF9jdXJyeTIoZnVuY3Rpb24gYXAoYXBwbGljYXRpdmUsIGZuKSB7XG4gIHJldHVybiAoXG4gICAgdHlwZW9mIGFwcGxpY2F0aXZlLmFwID09PSAnZnVuY3Rpb24nID9cbiAgICAgIGFwcGxpY2F0aXZlLmFwKGZuKSA6XG4gICAgdHlwZW9mIGFwcGxpY2F0aXZlID09PSAnZnVuY3Rpb24nID9cbiAgICAgIGZ1bmN0aW9uKHgpIHsgcmV0dXJuIGFwcGxpY2F0aXZlKHgpKGZuKHgpKTsgfSA6XG4gICAgLy8gZWxzZVxuICAgICAgX3JlZHVjZShmdW5jdGlvbihhY2MsIGYpIHsgcmV0dXJuIF9jb25jYXQoYWNjLCBtYXAoZiwgZm4pKTsgfSwgW10sIGFwcGxpY2F0aXZlKVxuICApO1xufSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcmFtZGEvc3JjL2FwLmpzXG4vLyBtb2R1bGUgaWQgPSAxNDJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 143 */
/* no static exports found */
/* all exports used */
/*!*****************************!*\
  !*** ./~/ramda/src/bind.js ***!
  \*****************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var _arity = __webpack_require__(/*! ./internal/_arity */ 14);\nvar _curry2 = __webpack_require__(/*! ./internal/_curry2 */ 1);\n\n\n/**\n * Creates a function that is bound to a context.\n * Note: `R.bind` does not provide the additional argument-binding capabilities of\n * [Function.prototype.bind](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind).\n *\n * @func\n * @memberOf R\n * @since v0.6.0\n * @category Function\n * @category Object\n * @sig (* -> *) -> {*} -> (* -> *)\n * @param {Function} fn The function to bind to context\n * @param {Object} thisObj The context to bind `fn` to\n * @return {Function} A function that will execute in the context of `thisObj`.\n * @see R.partial\n * @example\n *\n *      var log = R.bind(console.log, console);\n *      R.pipe(R.assoc('a', 2), R.tap(log), R.assoc('a', 3))({a: 1}); //=> {a: 3}\n *      // logs {a: 2}\n * @symb R.bind(f, o)(a, b) = f.call(o, a, b)\n */\nmodule.exports = _curry2(function bind(fn, thisObj) {\n  return _arity(fn.length, function() {\n    return fn.apply(thisObj, arguments);\n  });\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTQzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9yYW1kYS9zcmMvYmluZC5qcz84MTUzIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBfYXJpdHkgPSByZXF1aXJlKCcuL2ludGVybmFsL19hcml0eScpO1xudmFyIF9jdXJyeTIgPSByZXF1aXJlKCcuL2ludGVybmFsL19jdXJyeTInKTtcblxuXG4vKipcbiAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGlzIGJvdW5kIHRvIGEgY29udGV4dC5cbiAqIE5vdGU6IGBSLmJpbmRgIGRvZXMgbm90IHByb3ZpZGUgdGhlIGFkZGl0aW9uYWwgYXJndW1lbnQtYmluZGluZyBjYXBhYmlsaXRpZXMgb2ZcbiAqIFtGdW5jdGlvbi5wcm90b3R5cGUuYmluZF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvRnVuY3Rpb24vYmluZCkuXG4gKlxuICogQGZ1bmNcbiAqIEBtZW1iZXJPZiBSXG4gKiBAc2luY2UgdjAuNi4wXG4gKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAqIEBjYXRlZ29yeSBPYmplY3RcbiAqIEBzaWcgKCogLT4gKikgLT4geyp9IC0+ICgqIC0+ICopXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgZnVuY3Rpb24gdG8gYmluZCB0byBjb250ZXh0XG4gKiBAcGFyYW0ge09iamVjdH0gdGhpc09iaiBUaGUgY29udGV4dCB0byBiaW5kIGBmbmAgdG9cbiAqIEByZXR1cm4ge0Z1bmN0aW9ufSBBIGZ1bmN0aW9uIHRoYXQgd2lsbCBleGVjdXRlIGluIHRoZSBjb250ZXh0IG9mIGB0aGlzT2JqYC5cbiAqIEBzZWUgUi5wYXJ0aWFsXG4gKiBAZXhhbXBsZVxuICpcbiAqICAgICAgdmFyIGxvZyA9IFIuYmluZChjb25zb2xlLmxvZywgY29uc29sZSk7XG4gKiAgICAgIFIucGlwZShSLmFzc29jKCdhJywgMiksIFIudGFwKGxvZyksIFIuYXNzb2MoJ2EnLCAzKSkoe2E6IDF9KTsgLy89PiB7YTogM31cbiAqICAgICAgLy8gbG9ncyB7YTogMn1cbiAqIEBzeW1iIFIuYmluZChmLCBvKShhLCBiKSA9IGYuY2FsbChvLCBhLCBiKVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IF9jdXJyeTIoZnVuY3Rpb24gYmluZChmbiwgdGhpc09iaikge1xuICByZXR1cm4gX2FyaXR5KGZuLmxlbmd0aCwgZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoaXNPYmosIGFyZ3VtZW50cyk7XG4gIH0pO1xufSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcmFtZGEvc3JjL2JpbmQuanNcbi8vIG1vZHVsZSBpZCA9IDE0M1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 144 */
/* no static exports found */
/* all exports used */
/*!*****************************!*\
  !*** ./~/ramda/src/cond.js ***!
  \*****************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var _arity = __webpack_require__(/*! ./internal/_arity */ 14);\nvar _curry1 = __webpack_require__(/*! ./internal/_curry1 */ 2);\nvar map = __webpack_require__(/*! ./map */ 8);\nvar max = __webpack_require__(/*! ./max */ 63);\nvar reduce = __webpack_require__(/*! ./reduce */ 26);\n\n\n/**\n * Returns a function, `fn`, which encapsulates `if/else, if/else, ...` logic.\n * `R.cond` takes a list of [predicate, transformer] pairs. All of the arguments\n * to `fn` are applied to each of the predicates in turn until one returns a\n * \"truthy\" value, at which point `fn` returns the result of applying its\n * arguments to the corresponding transformer. If none of the predicates\n * matches, `fn` returns undefined.\n *\n * @func\n * @memberOf R\n * @since v0.6.0\n * @category Logic\n * @sig [[(*... -> Boolean),(*... -> *)]] -> (*... -> *)\n * @param {Array} pairs A list of [predicate, transformer]\n * @return {Function}\n * @example\n *\n *      var fn = R.cond([\n *        [R.equals(0),   R.always('water freezes at 0°C')],\n *        [R.equals(100), R.always('water boils at 100°C')],\n *        [R.T,           temp => 'nothing special happens at ' + temp + '°C']\n *      ]);\n *      fn(0); //=> 'water freezes at 0°C'\n *      fn(50); //=> 'nothing special happens at 50°C'\n *      fn(100); //=> 'water boils at 100°C'\n */\nmodule.exports = _curry1(function cond(pairs) {\n  var arity = reduce(max,\n                     0,\n                     map(function(pair) { return pair[0].length; }, pairs));\n  return _arity(arity, function() {\n    var idx = 0;\n    while (idx < pairs.length) {\n      if (pairs[idx][0].apply(this, arguments)) {\n        return pairs[idx][1].apply(this, arguments);\n      }\n      idx += 1;\n    }\n  });\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTQ0LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9yYW1kYS9zcmMvY29uZC5qcz83NjU5Il0sInNvdXJjZXNDb250ZW50IjpbInZhciBfYXJpdHkgPSByZXF1aXJlKCcuL2ludGVybmFsL19hcml0eScpO1xudmFyIF9jdXJyeTEgPSByZXF1aXJlKCcuL2ludGVybmFsL19jdXJyeTEnKTtcbnZhciBtYXAgPSByZXF1aXJlKCcuL21hcCcpO1xudmFyIG1heCA9IHJlcXVpcmUoJy4vbWF4Jyk7XG52YXIgcmVkdWNlID0gcmVxdWlyZSgnLi9yZWR1Y2UnKTtcblxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiwgYGZuYCwgd2hpY2ggZW5jYXBzdWxhdGVzIGBpZi9lbHNlLCBpZi9lbHNlLCAuLi5gIGxvZ2ljLlxuICogYFIuY29uZGAgdGFrZXMgYSBsaXN0IG9mIFtwcmVkaWNhdGUsIHRyYW5zZm9ybWVyXSBwYWlycy4gQWxsIG9mIHRoZSBhcmd1bWVudHNcbiAqIHRvIGBmbmAgYXJlIGFwcGxpZWQgdG8gZWFjaCBvZiB0aGUgcHJlZGljYXRlcyBpbiB0dXJuIHVudGlsIG9uZSByZXR1cm5zIGFcbiAqIFwidHJ1dGh5XCIgdmFsdWUsIGF0IHdoaWNoIHBvaW50IGBmbmAgcmV0dXJucyB0aGUgcmVzdWx0IG9mIGFwcGx5aW5nIGl0c1xuICogYXJndW1lbnRzIHRvIHRoZSBjb3JyZXNwb25kaW5nIHRyYW5zZm9ybWVyLiBJZiBub25lIG9mIHRoZSBwcmVkaWNhdGVzXG4gKiBtYXRjaGVzLCBgZm5gIHJldHVybnMgdW5kZWZpbmVkLlxuICpcbiAqIEBmdW5jXG4gKiBAbWVtYmVyT2YgUlxuICogQHNpbmNlIHYwLjYuMFxuICogQGNhdGVnb3J5IExvZ2ljXG4gKiBAc2lnIFtbKCouLi4gLT4gQm9vbGVhbiksKCouLi4gLT4gKildXSAtPiAoKi4uLiAtPiAqKVxuICogQHBhcmFtIHtBcnJheX0gcGFpcnMgQSBsaXN0IG9mIFtwcmVkaWNhdGUsIHRyYW5zZm9ybWVyXVxuICogQHJldHVybiB7RnVuY3Rpb259XG4gKiBAZXhhbXBsZVxuICpcbiAqICAgICAgdmFyIGZuID0gUi5jb25kKFtcbiAqICAgICAgICBbUi5lcXVhbHMoMCksICAgUi5hbHdheXMoJ3dhdGVyIGZyZWV6ZXMgYXQgMMKwQycpXSxcbiAqICAgICAgICBbUi5lcXVhbHMoMTAwKSwgUi5hbHdheXMoJ3dhdGVyIGJvaWxzIGF0IDEwMMKwQycpXSxcbiAqICAgICAgICBbUi5ULCAgICAgICAgICAgdGVtcCA9PiAnbm90aGluZyBzcGVjaWFsIGhhcHBlbnMgYXQgJyArIHRlbXAgKyAnwrBDJ11cbiAqICAgICAgXSk7XG4gKiAgICAgIGZuKDApOyAvLz0+ICd3YXRlciBmcmVlemVzIGF0IDDCsEMnXG4gKiAgICAgIGZuKDUwKTsgLy89PiAnbm90aGluZyBzcGVjaWFsIGhhcHBlbnMgYXQgNTDCsEMnXG4gKiAgICAgIGZuKDEwMCk7IC8vPT4gJ3dhdGVyIGJvaWxzIGF0IDEwMMKwQydcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBfY3VycnkxKGZ1bmN0aW9uIGNvbmQocGFpcnMpIHtcbiAgdmFyIGFyaXR5ID0gcmVkdWNlKG1heCxcbiAgICAgICAgICAgICAgICAgICAgIDAsXG4gICAgICAgICAgICAgICAgICAgICBtYXAoZnVuY3Rpb24ocGFpcikgeyByZXR1cm4gcGFpclswXS5sZW5ndGg7IH0sIHBhaXJzKSk7XG4gIHJldHVybiBfYXJpdHkoYXJpdHksIGZ1bmN0aW9uKCkge1xuICAgIHZhciBpZHggPSAwO1xuICAgIHdoaWxlIChpZHggPCBwYWlycy5sZW5ndGgpIHtcbiAgICAgIGlmIChwYWlyc1tpZHhdWzBdLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpIHtcbiAgICAgICAgcmV0dXJuIHBhaXJzW2lkeF1bMV0uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIH1cbiAgICAgIGlkeCArPSAxO1xuICAgIH1cbiAgfSk7XG59KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9yYW1kYS9zcmMvY29uZC5qc1xuLy8gbW9kdWxlIGlkID0gMTQ0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 145 */
/* no static exports found */
/* all exports used */
/*!**********************************!*\
  !*** ./~/ramda/src/defaultTo.js ***!
  \**********************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var _curry2 = __webpack_require__(/*! ./internal/_curry2 */ 1);\n\n\n/**\n * Returns the second argument if it is not `null`, `undefined` or `NaN`\n * otherwise the first argument is returned.\n *\n * @func\n * @memberOf R\n * @since v0.10.0\n * @category Logic\n * @sig a -> b -> a | b\n * @param {a} default The default value.\n * @param {b} val `val` will be returned instead of `default` unless `val` is `null`, `undefined` or `NaN`.\n * @return {*} The second value if it is not `null`, `undefined` or `NaN`, otherwise the default value\n * @example\n *\n *      var defaultTo42 = R.defaultTo(42);\n *\n *      defaultTo42(null);  //=> 42\n *      defaultTo42(undefined);  //=> 42\n *      defaultTo42('Ramda');  //=> 'Ramda'\n *      // parseInt('string') results in NaN\n *      defaultTo42(parseInt('string')); //=> 42\n */\nmodule.exports = _curry2(function defaultTo(d, v) {\n  return v == null || v !== v ? d : v;\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTQ1LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9yYW1kYS9zcmMvZGVmYXVsdFRvLmpzP2JlNWUiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIF9jdXJyeTIgPSByZXF1aXJlKCcuL2ludGVybmFsL19jdXJyeTInKTtcblxuXG4vKipcbiAqIFJldHVybnMgdGhlIHNlY29uZCBhcmd1bWVudCBpZiBpdCBpcyBub3QgYG51bGxgLCBgdW5kZWZpbmVkYCBvciBgTmFOYFxuICogb3RoZXJ3aXNlIHRoZSBmaXJzdCBhcmd1bWVudCBpcyByZXR1cm5lZC5cbiAqXG4gKiBAZnVuY1xuICogQG1lbWJlck9mIFJcbiAqIEBzaW5jZSB2MC4xMC4wXG4gKiBAY2F0ZWdvcnkgTG9naWNcbiAqIEBzaWcgYSAtPiBiIC0+IGEgfCBiXG4gKiBAcGFyYW0ge2F9IGRlZmF1bHQgVGhlIGRlZmF1bHQgdmFsdWUuXG4gKiBAcGFyYW0ge2J9IHZhbCBgdmFsYCB3aWxsIGJlIHJldHVybmVkIGluc3RlYWQgb2YgYGRlZmF1bHRgIHVubGVzcyBgdmFsYCBpcyBgbnVsbGAsIGB1bmRlZmluZWRgIG9yIGBOYU5gLlxuICogQHJldHVybiB7Kn0gVGhlIHNlY29uZCB2YWx1ZSBpZiBpdCBpcyBub3QgYG51bGxgLCBgdW5kZWZpbmVkYCBvciBgTmFOYCwgb3RoZXJ3aXNlIHRoZSBkZWZhdWx0IHZhbHVlXG4gKiBAZXhhbXBsZVxuICpcbiAqICAgICAgdmFyIGRlZmF1bHRUbzQyID0gUi5kZWZhdWx0VG8oNDIpO1xuICpcbiAqICAgICAgZGVmYXVsdFRvNDIobnVsbCk7ICAvLz0+IDQyXG4gKiAgICAgIGRlZmF1bHRUbzQyKHVuZGVmaW5lZCk7ICAvLz0+IDQyXG4gKiAgICAgIGRlZmF1bHRUbzQyKCdSYW1kYScpOyAgLy89PiAnUmFtZGEnXG4gKiAgICAgIC8vIHBhcnNlSW50KCdzdHJpbmcnKSByZXN1bHRzIGluIE5hTlxuICogICAgICBkZWZhdWx0VG80MihwYXJzZUludCgnc3RyaW5nJykpOyAvLz0+IDQyXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gX2N1cnJ5MihmdW5jdGlvbiBkZWZhdWx0VG8oZCwgdikge1xuICByZXR1cm4gdiA9PSBudWxsIHx8IHYgIT09IHYgPyBkIDogdjtcbn0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3JhbWRhL3NyYy9kZWZhdWx0VG8uanNcbi8vIG1vZHVsZSBpZCA9IDE0NVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 146 */
/* no static exports found */
/* all exports used */
/*!*******************************!*\
  !*** ./~/ramda/src/either.js ***!
  \*******************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var _curry2 = __webpack_require__(/*! ./internal/_curry2 */ 1);\nvar _isFunction = __webpack_require__(/*! ./internal/_isFunction */ 59);\nvar lift = __webpack_require__(/*! ./lift */ 176);\nvar or = __webpack_require__(/*! ./or */ 181);\n\n\n/**\n * A function wrapping calls to the two functions in an `||` operation,\n * returning the result of the first function if it is truth-y and the result\n * of the second function otherwise. Note that this is short-circuited,\n * meaning that the second function will not be invoked if the first returns a\n * truth-y value.\n *\n * In addition to functions, `R.either` also accepts any fantasy-land compatible\n * applicative functor.\n *\n * @func\n * @memberOf R\n * @since v0.12.0\n * @category Logic\n * @sig (*... -> Boolean) -> (*... -> Boolean) -> (*... -> Boolean)\n * @param {Function} f a predicate\n * @param {Function} g another predicate\n * @return {Function} a function that applies its arguments to `f` and `g` and `||`s their outputs together.\n * @see R.or\n * @example\n *\n *      var gt10 = x => x > 10;\n *      var even = x => x % 2 === 0;\n *      var f = R.either(gt10, even);\n *      f(101); //=> true\n *      f(8); //=> true\n */\nmodule.exports = _curry2(function either(f, g) {\n  return _isFunction(f) ?\n    function _either() {\n      return f.apply(this, arguments) || g.apply(this, arguments);\n    } :\n    lift(or)(f, g);\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTQ2LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9yYW1kYS9zcmMvZWl0aGVyLmpzP2EwZWEiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIF9jdXJyeTIgPSByZXF1aXJlKCcuL2ludGVybmFsL19jdXJyeTInKTtcbnZhciBfaXNGdW5jdGlvbiA9IHJlcXVpcmUoJy4vaW50ZXJuYWwvX2lzRnVuY3Rpb24nKTtcbnZhciBsaWZ0ID0gcmVxdWlyZSgnLi9saWZ0Jyk7XG52YXIgb3IgPSByZXF1aXJlKCcuL29yJyk7XG5cblxuLyoqXG4gKiBBIGZ1bmN0aW9uIHdyYXBwaW5nIGNhbGxzIHRvIHRoZSB0d28gZnVuY3Rpb25zIGluIGFuIGB8fGAgb3BlcmF0aW9uLFxuICogcmV0dXJuaW5nIHRoZSByZXN1bHQgb2YgdGhlIGZpcnN0IGZ1bmN0aW9uIGlmIGl0IGlzIHRydXRoLXkgYW5kIHRoZSByZXN1bHRcbiAqIG9mIHRoZSBzZWNvbmQgZnVuY3Rpb24gb3RoZXJ3aXNlLiBOb3RlIHRoYXQgdGhpcyBpcyBzaG9ydC1jaXJjdWl0ZWQsXG4gKiBtZWFuaW5nIHRoYXQgdGhlIHNlY29uZCBmdW5jdGlvbiB3aWxsIG5vdCBiZSBpbnZva2VkIGlmIHRoZSBmaXJzdCByZXR1cm5zIGFcbiAqIHRydXRoLXkgdmFsdWUuXG4gKlxuICogSW4gYWRkaXRpb24gdG8gZnVuY3Rpb25zLCBgUi5laXRoZXJgIGFsc28gYWNjZXB0cyBhbnkgZmFudGFzeS1sYW5kIGNvbXBhdGlibGVcbiAqIGFwcGxpY2F0aXZlIGZ1bmN0b3IuXG4gKlxuICogQGZ1bmNcbiAqIEBtZW1iZXJPZiBSXG4gKiBAc2luY2UgdjAuMTIuMFxuICogQGNhdGVnb3J5IExvZ2ljXG4gKiBAc2lnICgqLi4uIC0+IEJvb2xlYW4pIC0+ICgqLi4uIC0+IEJvb2xlYW4pIC0+ICgqLi4uIC0+IEJvb2xlYW4pXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmIGEgcHJlZGljYXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBnIGFub3RoZXIgcHJlZGljYXRlXG4gKiBAcmV0dXJuIHtGdW5jdGlvbn0gYSBmdW5jdGlvbiB0aGF0IGFwcGxpZXMgaXRzIGFyZ3VtZW50cyB0byBgZmAgYW5kIGBnYCBhbmQgYHx8YHMgdGhlaXIgb3V0cHV0cyB0b2dldGhlci5cbiAqIEBzZWUgUi5vclxuICogQGV4YW1wbGVcbiAqXG4gKiAgICAgIHZhciBndDEwID0geCA9PiB4ID4gMTA7XG4gKiAgICAgIHZhciBldmVuID0geCA9PiB4ICUgMiA9PT0gMDtcbiAqICAgICAgdmFyIGYgPSBSLmVpdGhlcihndDEwLCBldmVuKTtcbiAqICAgICAgZigxMDEpOyAvLz0+IHRydWVcbiAqICAgICAgZig4KTsgLy89PiB0cnVlXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gX2N1cnJ5MihmdW5jdGlvbiBlaXRoZXIoZiwgZykge1xuICByZXR1cm4gX2lzRnVuY3Rpb24oZikgP1xuICAgIGZ1bmN0aW9uIF9laXRoZXIoKSB7XG4gICAgICByZXR1cm4gZi5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IGcuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9IDpcbiAgICBsaWZ0KG9yKShmLCBnKTtcbn0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3JhbWRhL3NyYy9laXRoZXIuanNcbi8vIG1vZHVsZSBpZCA9IDE0NlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 147 */
/* no static exports found */
/* all exports used */
/*!*******************************!*\
  !*** ./~/ramda/src/filter.js ***!
  \*******************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var _curry2 = __webpack_require__(/*! ./internal/_curry2 */ 1);\nvar _dispatchable = __webpack_require__(/*! ./internal/_dispatchable */ 58);\nvar _filter = __webpack_require__(/*! ./internal/_filter */ 158);\nvar _isObject = __webpack_require__(/*! ./internal/_isObject */ 163);\nvar _reduce = __webpack_require__(/*! ./internal/_reduce */ 16);\nvar _xfilter = __webpack_require__(/*! ./internal/_xfilter */ 170);\nvar keys = __webpack_require__(/*! ./keys */ 17);\n\n\n/**\n * Takes a predicate and a \"filterable\", and returns a new filterable of the\n * same type containing the members of the given filterable which satisfy the\n * given predicate.\n *\n * Dispatches to the `filter` method of the second argument, if present.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig Filterable f => (a -> Boolean) -> f a -> f a\n * @param {Function} pred\n * @param {Array} filterable\n * @return {Array}\n * @see R.reject, R.transduce, R.addIndex\n * @example\n *\n *      var isEven = n => n % 2 === 0;\n *\n *      R.filter(isEven, [1, 2, 3, 4]); //=> [2, 4]\n *\n *      R.filter(isEven, {a: 1, b: 2, c: 3, d: 4}); //=> {b: 2, d: 4}\n */\nmodule.exports = _curry2(_dispatchable(['filter'], _xfilter, function(pred, filterable) {\n  return (\n    _isObject(filterable) ?\n      _reduce(function(acc, key) {\n        if (pred(filterable[key])) {\n          acc[key] = filterable[key];\n        }\n        return acc;\n      }, {}, keys(filterable)) :\n    // else\n      _filter(pred, filterable)\n  );\n}));\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTQ3LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9yYW1kYS9zcmMvZmlsdGVyLmpzPzhlOTQiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIF9jdXJyeTIgPSByZXF1aXJlKCcuL2ludGVybmFsL19jdXJyeTInKTtcbnZhciBfZGlzcGF0Y2hhYmxlID0gcmVxdWlyZSgnLi9pbnRlcm5hbC9fZGlzcGF0Y2hhYmxlJyk7XG52YXIgX2ZpbHRlciA9IHJlcXVpcmUoJy4vaW50ZXJuYWwvX2ZpbHRlcicpO1xudmFyIF9pc09iamVjdCA9IHJlcXVpcmUoJy4vaW50ZXJuYWwvX2lzT2JqZWN0Jyk7XG52YXIgX3JlZHVjZSA9IHJlcXVpcmUoJy4vaW50ZXJuYWwvX3JlZHVjZScpO1xudmFyIF94ZmlsdGVyID0gcmVxdWlyZSgnLi9pbnRlcm5hbC9feGZpbHRlcicpO1xudmFyIGtleXMgPSByZXF1aXJlKCcuL2tleXMnKTtcblxuXG4vKipcbiAqIFRha2VzIGEgcHJlZGljYXRlIGFuZCBhIFwiZmlsdGVyYWJsZVwiLCBhbmQgcmV0dXJucyBhIG5ldyBmaWx0ZXJhYmxlIG9mIHRoZVxuICogc2FtZSB0eXBlIGNvbnRhaW5pbmcgdGhlIG1lbWJlcnMgb2YgdGhlIGdpdmVuIGZpbHRlcmFibGUgd2hpY2ggc2F0aXNmeSB0aGVcbiAqIGdpdmVuIHByZWRpY2F0ZS5cbiAqXG4gKiBEaXNwYXRjaGVzIHRvIHRoZSBgZmlsdGVyYCBtZXRob2Qgb2YgdGhlIHNlY29uZCBhcmd1bWVudCwgaWYgcHJlc2VudC5cbiAqXG4gKiBBY3RzIGFzIGEgdHJhbnNkdWNlciBpZiBhIHRyYW5zZm9ybWVyIGlzIGdpdmVuIGluIGxpc3QgcG9zaXRpb24uXG4gKlxuICogQGZ1bmNcbiAqIEBtZW1iZXJPZiBSXG4gKiBAc2luY2UgdjAuMS4wXG4gKiBAY2F0ZWdvcnkgTGlzdFxuICogQHNpZyBGaWx0ZXJhYmxlIGYgPT4gKGEgLT4gQm9vbGVhbikgLT4gZiBhIC0+IGYgYVxuICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZFxuICogQHBhcmFtIHtBcnJheX0gZmlsdGVyYWJsZVxuICogQHJldHVybiB7QXJyYXl9XG4gKiBAc2VlIFIucmVqZWN0LCBSLnRyYW5zZHVjZSwgUi5hZGRJbmRleFxuICogQGV4YW1wbGVcbiAqXG4gKiAgICAgIHZhciBpc0V2ZW4gPSBuID0+IG4gJSAyID09PSAwO1xuICpcbiAqICAgICAgUi5maWx0ZXIoaXNFdmVuLCBbMSwgMiwgMywgNF0pOyAvLz0+IFsyLCA0XVxuICpcbiAqICAgICAgUi5maWx0ZXIoaXNFdmVuLCB7YTogMSwgYjogMiwgYzogMywgZDogNH0pOyAvLz0+IHtiOiAyLCBkOiA0fVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IF9jdXJyeTIoX2Rpc3BhdGNoYWJsZShbJ2ZpbHRlciddLCBfeGZpbHRlciwgZnVuY3Rpb24ocHJlZCwgZmlsdGVyYWJsZSkge1xuICByZXR1cm4gKFxuICAgIF9pc09iamVjdChmaWx0ZXJhYmxlKSA/XG4gICAgICBfcmVkdWNlKGZ1bmN0aW9uKGFjYywga2V5KSB7XG4gICAgICAgIGlmIChwcmVkKGZpbHRlcmFibGVba2V5XSkpIHtcbiAgICAgICAgICBhY2Nba2V5XSA9IGZpbHRlcmFibGVba2V5XTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYWNjO1xuICAgICAgfSwge30sIGtleXMoZmlsdGVyYWJsZSkpIDpcbiAgICAvLyBlbHNlXG4gICAgICBfZmlsdGVyKHByZWQsIGZpbHRlcmFibGUpXG4gICk7XG59KSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcmFtZGEvc3JjL2ZpbHRlci5qc1xuLy8gbW9kdWxlIGlkID0gMTQ3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 148 */
/* no static exports found */
/* all exports used */
/*!**********************************!*\
  !*** ./~/ramda/src/identical.js ***!
  \**********************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var _curry2 = __webpack_require__(/*! ./internal/_curry2 */ 1);\n\n\n/**\n * Returns true if its arguments are identical, false otherwise. Values are\n * identical if they reference the same memory. `NaN` is identical to `NaN`;\n * `0` and `-0` are not identical.\n *\n * @func\n * @memberOf R\n * @since v0.15.0\n * @category Relation\n * @sig a -> a -> Boolean\n * @param {*} a\n * @param {*} b\n * @return {Boolean}\n * @example\n *\n *      var o = {};\n *      R.identical(o, o); //=> true\n *      R.identical(1, 1); //=> true\n *      R.identical(1, '1'); //=> false\n *      R.identical([], []); //=> false\n *      R.identical(0, -0); //=> false\n *      R.identical(NaN, NaN); //=> true\n */\nmodule.exports = _curry2(function identical(a, b) {\n  // SameValue algorithm\n  if (a === b) { // Steps 1-5, 7-10\n    // Steps 6.b-6.e: +0 != -0\n    return a !== 0 || 1 / a === 1 / b;\n  } else {\n    // Step 6.a: NaN == NaN\n    return a !== a && b !== b;\n  }\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTQ4LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9yYW1kYS9zcmMvaWRlbnRpY2FsLmpzPzY1ZTQiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIF9jdXJyeTIgPSByZXF1aXJlKCcuL2ludGVybmFsL19jdXJyeTInKTtcblxuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiBpdHMgYXJndW1lbnRzIGFyZSBpZGVudGljYWwsIGZhbHNlIG90aGVyd2lzZS4gVmFsdWVzIGFyZVxuICogaWRlbnRpY2FsIGlmIHRoZXkgcmVmZXJlbmNlIHRoZSBzYW1lIG1lbW9yeS4gYE5hTmAgaXMgaWRlbnRpY2FsIHRvIGBOYU5gO1xuICogYDBgIGFuZCBgLTBgIGFyZSBub3QgaWRlbnRpY2FsLlxuICpcbiAqIEBmdW5jXG4gKiBAbWVtYmVyT2YgUlxuICogQHNpbmNlIHYwLjE1LjBcbiAqIEBjYXRlZ29yeSBSZWxhdGlvblxuICogQHNpZyBhIC0+IGEgLT4gQm9vbGVhblxuICogQHBhcmFtIHsqfSBhXG4gKiBAcGFyYW0geyp9IGJcbiAqIEByZXR1cm4ge0Jvb2xlYW59XG4gKiBAZXhhbXBsZVxuICpcbiAqICAgICAgdmFyIG8gPSB7fTtcbiAqICAgICAgUi5pZGVudGljYWwobywgbyk7IC8vPT4gdHJ1ZVxuICogICAgICBSLmlkZW50aWNhbCgxLCAxKTsgLy89PiB0cnVlXG4gKiAgICAgIFIuaWRlbnRpY2FsKDEsICcxJyk7IC8vPT4gZmFsc2VcbiAqICAgICAgUi5pZGVudGljYWwoW10sIFtdKTsgLy89PiBmYWxzZVxuICogICAgICBSLmlkZW50aWNhbCgwLCAtMCk7IC8vPT4gZmFsc2VcbiAqICAgICAgUi5pZGVudGljYWwoTmFOLCBOYU4pOyAvLz0+IHRydWVcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBfY3VycnkyKGZ1bmN0aW9uIGlkZW50aWNhbChhLCBiKSB7XG4gIC8vIFNhbWVWYWx1ZSBhbGdvcml0aG1cbiAgaWYgKGEgPT09IGIpIHsgLy8gU3RlcHMgMS01LCA3LTEwXG4gICAgLy8gU3RlcHMgNi5iLTYuZTogKzAgIT0gLTBcbiAgICByZXR1cm4gYSAhPT0gMCB8fCAxIC8gYSA9PT0gMSAvIGI7XG4gIH0gZWxzZSB7XG4gICAgLy8gU3RlcCA2LmE6IE5hTiA9PSBOYU5cbiAgICByZXR1cm4gYSAhPT0gYSAmJiBiICE9PSBiO1xuICB9XG59KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9yYW1kYS9zcmMvaWRlbnRpY2FsLmpzXG4vLyBtb2R1bGUgaWQgPSAxNDhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 149 */
/* no static exports found */
/* all exports used */
/*!*********************************!*\
  !*** ./~/ramda/src/identity.js ***!
  \*********************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var _curry1 = __webpack_require__(/*! ./internal/_curry1 */ 2);\nvar _identity = __webpack_require__(/*! ./internal/_identity */ 160);\n\n\n/**\n * A function that does nothing but return the parameter supplied to it. Good\n * as a default or placeholder function.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig a -> a\n * @param {*} x The value to return.\n * @return {*} The input value, `x`.\n * @example\n *\n *      R.identity(1); //=> 1\n *\n *      var obj = {};\n *      R.identity(obj) === obj; //=> true\n * @symb R.identity(a) = a\n */\nmodule.exports = _curry1(_identity);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTQ5LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9yYW1kYS9zcmMvaWRlbnRpdHkuanM/YTBmOSJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX2N1cnJ5MSA9IHJlcXVpcmUoJy4vaW50ZXJuYWwvX2N1cnJ5MScpO1xudmFyIF9pZGVudGl0eSA9IHJlcXVpcmUoJy4vaW50ZXJuYWwvX2lkZW50aXR5Jyk7XG5cblxuLyoqXG4gKiBBIGZ1bmN0aW9uIHRoYXQgZG9lcyBub3RoaW5nIGJ1dCByZXR1cm4gdGhlIHBhcmFtZXRlciBzdXBwbGllZCB0byBpdC4gR29vZFxuICogYXMgYSBkZWZhdWx0IG9yIHBsYWNlaG9sZGVyIGZ1bmN0aW9uLlxuICpcbiAqIEBmdW5jXG4gKiBAbWVtYmVyT2YgUlxuICogQHNpbmNlIHYwLjEuMFxuICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gKiBAc2lnIGEgLT4gYVxuICogQHBhcmFtIHsqfSB4IFRoZSB2YWx1ZSB0byByZXR1cm4uXG4gKiBAcmV0dXJuIHsqfSBUaGUgaW5wdXQgdmFsdWUsIGB4YC5cbiAqIEBleGFtcGxlXG4gKlxuICogICAgICBSLmlkZW50aXR5KDEpOyAvLz0+IDFcbiAqXG4gKiAgICAgIHZhciBvYmogPSB7fTtcbiAqICAgICAgUi5pZGVudGl0eShvYmopID09PSBvYmo7IC8vPT4gdHJ1ZVxuICogQHN5bWIgUi5pZGVudGl0eShhKSA9IGFcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBfY3VycnkxKF9pZGVudGl0eSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcmFtZGEvc3JjL2lkZW50aXR5LmpzXG4vLyBtb2R1bGUgaWQgPSAxNDlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 150 */
/* no static exports found */
/* all exports used */
/*!*******************************!*\
  !*** ./~/ramda/src/ifElse.js ***!
  \*******************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var _curry3 = __webpack_require__(/*! ./internal/_curry3 */ 7);\nvar curryN = __webpack_require__(/*! ./curryN */ 6);\n\n\n/**\n * Creates a function that will process either the `onTrue` or the `onFalse`\n * function depending upon the result of the `condition` predicate.\n *\n * @func\n * @memberOf R\n * @since v0.8.0\n * @category Logic\n * @sig (*... -> Boolean) -> (*... -> *) -> (*... -> *) -> (*... -> *)\n * @param {Function} condition A predicate function\n * @param {Function} onTrue A function to invoke when the `condition` evaluates to a truthy value.\n * @param {Function} onFalse A function to invoke when the `condition` evaluates to a falsy value.\n * @return {Function} A new unary function that will process either the `onTrue` or the `onFalse`\n *                    function depending upon the result of the `condition` predicate.\n * @see R.unless, R.when\n * @example\n *\n *      var incCount = R.ifElse(\n *        R.has('count'),\n *        R.over(R.lensProp('count'), R.inc),\n *        R.assoc('count', 1)\n *      );\n *      incCount({});           //=> { count: 1 }\n *      incCount({ count: 1 }); //=> { count: 2 }\n */\nmodule.exports = _curry3(function ifElse(condition, onTrue, onFalse) {\n  return curryN(Math.max(condition.length, onTrue.length, onFalse.length),\n    function _ifElse() {\n      return condition.apply(this, arguments) ? onTrue.apply(this, arguments) : onFalse.apply(this, arguments);\n    }\n  );\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTUwLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9yYW1kYS9zcmMvaWZFbHNlLmpzPzVkNmMiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIF9jdXJyeTMgPSByZXF1aXJlKCcuL2ludGVybmFsL19jdXJyeTMnKTtcbnZhciBjdXJyeU4gPSByZXF1aXJlKCcuL2N1cnJ5TicpO1xuXG5cbi8qKlxuICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgd2lsbCBwcm9jZXNzIGVpdGhlciB0aGUgYG9uVHJ1ZWAgb3IgdGhlIGBvbkZhbHNlYFxuICogZnVuY3Rpb24gZGVwZW5kaW5nIHVwb24gdGhlIHJlc3VsdCBvZiB0aGUgYGNvbmRpdGlvbmAgcHJlZGljYXRlLlxuICpcbiAqIEBmdW5jXG4gKiBAbWVtYmVyT2YgUlxuICogQHNpbmNlIHYwLjguMFxuICogQGNhdGVnb3J5IExvZ2ljXG4gKiBAc2lnICgqLi4uIC0+IEJvb2xlYW4pIC0+ICgqLi4uIC0+ICopIC0+ICgqLi4uIC0+ICopIC0+ICgqLi4uIC0+ICopXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjb25kaXRpb24gQSBwcmVkaWNhdGUgZnVuY3Rpb25cbiAqIEBwYXJhbSB7RnVuY3Rpb259IG9uVHJ1ZSBBIGZ1bmN0aW9uIHRvIGludm9rZSB3aGVuIHRoZSBgY29uZGl0aW9uYCBldmFsdWF0ZXMgdG8gYSB0cnV0aHkgdmFsdWUuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBvbkZhbHNlIEEgZnVuY3Rpb24gdG8gaW52b2tlIHdoZW4gdGhlIGBjb25kaXRpb25gIGV2YWx1YXRlcyB0byBhIGZhbHN5IHZhbHVlLlxuICogQHJldHVybiB7RnVuY3Rpb259IEEgbmV3IHVuYXJ5IGZ1bmN0aW9uIHRoYXQgd2lsbCBwcm9jZXNzIGVpdGhlciB0aGUgYG9uVHJ1ZWAgb3IgdGhlIGBvbkZhbHNlYFxuICogICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGRlcGVuZGluZyB1cG9uIHRoZSByZXN1bHQgb2YgdGhlIGBjb25kaXRpb25gIHByZWRpY2F0ZS5cbiAqIEBzZWUgUi51bmxlc3MsIFIud2hlblxuICogQGV4YW1wbGVcbiAqXG4gKiAgICAgIHZhciBpbmNDb3VudCA9IFIuaWZFbHNlKFxuICogICAgICAgIFIuaGFzKCdjb3VudCcpLFxuICogICAgICAgIFIub3ZlcihSLmxlbnNQcm9wKCdjb3VudCcpLCBSLmluYyksXG4gKiAgICAgICAgUi5hc3NvYygnY291bnQnLCAxKVxuICogICAgICApO1xuICogICAgICBpbmNDb3VudCh7fSk7ICAgICAgICAgICAvLz0+IHsgY291bnQ6IDEgfVxuICogICAgICBpbmNDb3VudCh7IGNvdW50OiAxIH0pOyAvLz0+IHsgY291bnQ6IDIgfVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IF9jdXJyeTMoZnVuY3Rpb24gaWZFbHNlKGNvbmRpdGlvbiwgb25UcnVlLCBvbkZhbHNlKSB7XG4gIHJldHVybiBjdXJyeU4oTWF0aC5tYXgoY29uZGl0aW9uLmxlbmd0aCwgb25UcnVlLmxlbmd0aCwgb25GYWxzZS5sZW5ndGgpLFxuICAgIGZ1bmN0aW9uIF9pZkVsc2UoKSB7XG4gICAgICByZXR1cm4gY29uZGl0aW9uLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgPyBvblRydWUuYXBwbHkodGhpcywgYXJndW1lbnRzKSA6IG9uRmFsc2UuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9XG4gICk7XG59KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9yYW1kYS9zcmMvaWZFbHNlLmpzXG4vLyBtb2R1bGUgaWQgPSAxNTBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 151 */
/* no static exports found */
/* all exports used */
/*!****************************************************!*\
  !*** ./~/ramda/src/internal/_arrayFromIterator.js ***!
  \****************************************************/
/***/ (function(module, exports) {

eval("module.exports = function _arrayFromIterator(iter) {\n  var list = [];\n  var next;\n  while (!(next = iter.next()).done) {\n    list.push(next.value);\n  }\n  return list;\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTUxLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9yYW1kYS9zcmMvaW50ZXJuYWwvX2FycmF5RnJvbUl0ZXJhdG9yLmpzP2Y5MGYiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBfYXJyYXlGcm9tSXRlcmF0b3IoaXRlcikge1xuICB2YXIgbGlzdCA9IFtdO1xuICB2YXIgbmV4dDtcbiAgd2hpbGUgKCEobmV4dCA9IGl0ZXIubmV4dCgpKS5kb25lKSB7XG4gICAgbGlzdC5wdXNoKG5leHQudmFsdWUpO1xuICB9XG4gIHJldHVybiBsaXN0O1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9yYW1kYS9zcmMvaW50ZXJuYWwvX2FycmF5RnJvbUl0ZXJhdG9yLmpzXG4vLyBtb2R1bGUgaWQgPSAxNTFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 152 */
/* no static exports found */
/* all exports used */
/*!*****************************************!*\
  !*** ./~/ramda/src/internal/_assign.js ***!
  \*****************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var _objectAssign = __webpack_require__(/*! ./_objectAssign */ 165);\n\nmodule.exports =\n  typeof Object.assign === 'function' ? Object.assign : _objectAssign;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTUyLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9yYW1kYS9zcmMvaW50ZXJuYWwvX2Fzc2lnbi5qcz9mNzhkIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBfb2JqZWN0QXNzaWduID0gcmVxdWlyZSgnLi9fb2JqZWN0QXNzaWduJyk7XG5cbm1vZHVsZS5leHBvcnRzID1cbiAgdHlwZW9mIE9iamVjdC5hc3NpZ24gPT09ICdmdW5jdGlvbicgPyBPYmplY3QuYXNzaWduIDogX29iamVjdEFzc2lnbjtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9yYW1kYS9zcmMvaW50ZXJuYWwvX2Fzc2lnbi5qc1xuLy8gbW9kdWxlIGlkID0gMTUyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 153 */
/* no static exports found */
/* all exports used */
/*!*********************************************!*\
  !*** ./~/ramda/src/internal/_complement.js ***!
  \*********************************************/
/***/ (function(module, exports) {

eval("module.exports = function _complement(f) {\n  return function() {\n    return !f.apply(this, arguments);\n  };\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTUzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9yYW1kYS9zcmMvaW50ZXJuYWwvX2NvbXBsZW1lbnQuanM/NDRhZiJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIF9jb21wbGVtZW50KGYpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiAhZi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9O1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9yYW1kYS9zcmMvaW50ZXJuYWwvX2NvbXBsZW1lbnQuanNcbi8vIG1vZHVsZSBpZCA9IDE1M1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 154 */
/* no static exports found */
/* all exports used */
/*!*****************************************!*\
  !*** ./~/ramda/src/internal/_concat.js ***!
  \*****************************************/
/***/ (function(module, exports) {

eval("/**\n * Private `concat` function to merge two array-like objects.\n *\n * @private\n * @param {Array|Arguments} [set1=[]] An array-like object.\n * @param {Array|Arguments} [set2=[]] An array-like object.\n * @return {Array} A new, merged array.\n * @example\n *\n *      _concat([4, 5, 6], [1, 2, 3]); //=> [4, 5, 6, 1, 2, 3]\n */\nmodule.exports = function _concat(set1, set2) {\n  set1 = set1 || [];\n  set2 = set2 || [];\n  var idx;\n  var len1 = set1.length;\n  var len2 = set2.length;\n  var result = [];\n\n  idx = 0;\n  while (idx < len1) {\n    result[result.length] = set1[idx];\n    idx += 1;\n  }\n  idx = 0;\n  while (idx < len2) {\n    result[result.length] = set2[idx];\n    idx += 1;\n  }\n  return result;\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTU0LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9yYW1kYS9zcmMvaW50ZXJuYWwvX2NvbmNhdC5qcz9hZmJhIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogUHJpdmF0ZSBgY29uY2F0YCBmdW5jdGlvbiB0byBtZXJnZSB0d28gYXJyYXktbGlrZSBvYmplY3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fEFyZ3VtZW50c30gW3NldDE9W11dIEFuIGFycmF5LWxpa2Ugb2JqZWN0LlxuICogQHBhcmFtIHtBcnJheXxBcmd1bWVudHN9IFtzZXQyPVtdXSBBbiBhcnJheS1saWtlIG9iamVjdC5cbiAqIEByZXR1cm4ge0FycmF5fSBBIG5ldywgbWVyZ2VkIGFycmF5LlxuICogQGV4YW1wbGVcbiAqXG4gKiAgICAgIF9jb25jYXQoWzQsIDUsIDZdLCBbMSwgMiwgM10pOyAvLz0+IFs0LCA1LCA2LCAxLCAyLCAzXVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIF9jb25jYXQoc2V0MSwgc2V0Mikge1xuICBzZXQxID0gc2V0MSB8fCBbXTtcbiAgc2V0MiA9IHNldDIgfHwgW107XG4gIHZhciBpZHg7XG4gIHZhciBsZW4xID0gc2V0MS5sZW5ndGg7XG4gIHZhciBsZW4yID0gc2V0Mi5sZW5ndGg7XG4gIHZhciByZXN1bHQgPSBbXTtcblxuICBpZHggPSAwO1xuICB3aGlsZSAoaWR4IDwgbGVuMSkge1xuICAgIHJlc3VsdFtyZXN1bHQubGVuZ3RoXSA9IHNldDFbaWR4XTtcbiAgICBpZHggKz0gMTtcbiAgfVxuICBpZHggPSAwO1xuICB3aGlsZSAoaWR4IDwgbGVuMikge1xuICAgIHJlc3VsdFtyZXN1bHQubGVuZ3RoXSA9IHNldDJbaWR4XTtcbiAgICBpZHggKz0gMTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9yYW1kYS9zcmMvaW50ZXJuYWwvX2NvbmNhdC5qc1xuLy8gbW9kdWxlIGlkID0gMTU0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 155 */
/* no static exports found */
/* all exports used */
/*!*******************************************!*\
  !*** ./~/ramda/src/internal/_contains.js ***!
  \*******************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var _indexOf = __webpack_require__(/*! ./_indexOf */ 161);\n\n\nmodule.exports = function _contains(a, list) {\n  return _indexOf(list, a, 0) >= 0;\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTU1LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9yYW1kYS9zcmMvaW50ZXJuYWwvX2NvbnRhaW5zLmpzPzY0ZTIiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIF9pbmRleE9mID0gcmVxdWlyZSgnLi9faW5kZXhPZicpO1xuXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gX2NvbnRhaW5zKGEsIGxpc3QpIHtcbiAgcmV0dXJuIF9pbmRleE9mKGxpc3QsIGEsIDApID49IDA7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3JhbWRhL3NyYy9pbnRlcm5hbC9fY29udGFpbnMuanNcbi8vIG1vZHVsZSBpZCA9IDE1NVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 156 */
/* no static exports found */
/* all exports used */
/*!*****************************************!*\
  !*** ./~/ramda/src/internal/_curryN.js ***!
  \*****************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var _arity = __webpack_require__(/*! ./_arity */ 14);\nvar _isPlaceholder = __webpack_require__(/*! ./_isPlaceholder */ 25);\n\n\n/**\n * Internal curryN function.\n *\n * @private\n * @category Function\n * @param {Number} length The arity of the curried function.\n * @param {Array} received An array of arguments received thus far.\n * @param {Function} fn The function to curry.\n * @return {Function} The curried function.\n */\nmodule.exports = function _curryN(length, received, fn) {\n  return function() {\n    var combined = [];\n    var argsIdx = 0;\n    var left = length;\n    var combinedIdx = 0;\n    while (combinedIdx < received.length || argsIdx < arguments.length) {\n      var result;\n      if (combinedIdx < received.length &&\n          (!_isPlaceholder(received[combinedIdx]) ||\n           argsIdx >= arguments.length)) {\n        result = received[combinedIdx];\n      } else {\n        result = arguments[argsIdx];\n        argsIdx += 1;\n      }\n      combined[combinedIdx] = result;\n      if (!_isPlaceholder(result)) {\n        left -= 1;\n      }\n      combinedIdx += 1;\n    }\n    return left <= 0 ? fn.apply(this, combined)\n                     : _arity(left, _curryN(length, combined, fn));\n  };\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTU2LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9yYW1kYS9zcmMvaW50ZXJuYWwvX2N1cnJ5Ti5qcz8wNTgwIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBfYXJpdHkgPSByZXF1aXJlKCcuL19hcml0eScpO1xudmFyIF9pc1BsYWNlaG9sZGVyID0gcmVxdWlyZSgnLi9faXNQbGFjZWhvbGRlcicpO1xuXG5cbi8qKlxuICogSW50ZXJuYWwgY3VycnlOIGZ1bmN0aW9uLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAqIEBwYXJhbSB7TnVtYmVyfSBsZW5ndGggVGhlIGFyaXR5IG9mIHRoZSBjdXJyaWVkIGZ1bmN0aW9uLlxuICogQHBhcmFtIHtBcnJheX0gcmVjZWl2ZWQgQW4gYXJyYXkgb2YgYXJndW1lbnRzIHJlY2VpdmVkIHRodXMgZmFyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGZ1bmN0aW9uIHRvIGN1cnJ5LlxuICogQHJldHVybiB7RnVuY3Rpb259IFRoZSBjdXJyaWVkIGZ1bmN0aW9uLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIF9jdXJyeU4obGVuZ3RoLCByZWNlaXZlZCwgZm4pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBjb21iaW5lZCA9IFtdO1xuICAgIHZhciBhcmdzSWR4ID0gMDtcbiAgICB2YXIgbGVmdCA9IGxlbmd0aDtcbiAgICB2YXIgY29tYmluZWRJZHggPSAwO1xuICAgIHdoaWxlIChjb21iaW5lZElkeCA8IHJlY2VpdmVkLmxlbmd0aCB8fCBhcmdzSWR4IDwgYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgdmFyIHJlc3VsdDtcbiAgICAgIGlmIChjb21iaW5lZElkeCA8IHJlY2VpdmVkLmxlbmd0aCAmJlxuICAgICAgICAgICghX2lzUGxhY2Vob2xkZXIocmVjZWl2ZWRbY29tYmluZWRJZHhdKSB8fFxuICAgICAgICAgICBhcmdzSWR4ID49IGFyZ3VtZW50cy5sZW5ndGgpKSB7XG4gICAgICAgIHJlc3VsdCA9IHJlY2VpdmVkW2NvbWJpbmVkSWR4XTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3VsdCA9IGFyZ3VtZW50c1thcmdzSWR4XTtcbiAgICAgICAgYXJnc0lkeCArPSAxO1xuICAgICAgfVxuICAgICAgY29tYmluZWRbY29tYmluZWRJZHhdID0gcmVzdWx0O1xuICAgICAgaWYgKCFfaXNQbGFjZWhvbGRlcihyZXN1bHQpKSB7XG4gICAgICAgIGxlZnQgLT0gMTtcbiAgICAgIH1cbiAgICAgIGNvbWJpbmVkSWR4ICs9IDE7XG4gICAgfVxuICAgIHJldHVybiBsZWZ0IDw9IDAgPyBmbi5hcHBseSh0aGlzLCBjb21iaW5lZClcbiAgICAgICAgICAgICAgICAgICAgIDogX2FyaXR5KGxlZnQsIF9jdXJyeU4obGVuZ3RoLCBjb21iaW5lZCwgZm4pKTtcbiAgfTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcmFtZGEvc3JjL2ludGVybmFsL19jdXJyeU4uanNcbi8vIG1vZHVsZSBpZCA9IDE1NlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 157 */
/* no static exports found */
/* all exports used */
/*!*****************************************!*\
  !*** ./~/ramda/src/internal/_equals.js ***!
  \*****************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var _arrayFromIterator = __webpack_require__(/*! ./_arrayFromIterator */ 151);\nvar _functionName = __webpack_require__(/*! ./_functionName */ 159);\nvar _has = __webpack_require__(/*! ./_has */ 15);\nvar identical = __webpack_require__(/*! ../identical */ 148);\nvar keys = __webpack_require__(/*! ../keys */ 17);\nvar type = __webpack_require__(/*! ../type */ 192);\n\n\nmodule.exports = function _equals(a, b, stackA, stackB) {\n  if (identical(a, b)) {\n    return true;\n  }\n\n  if (type(a) !== type(b)) {\n    return false;\n  }\n\n  if (a == null || b == null) {\n    return false;\n  }\n\n  if (typeof a.equals === 'function' || typeof b.equals === 'function') {\n    return typeof a.equals === 'function' && a.equals(b) &&\n           typeof b.equals === 'function' && b.equals(a);\n  }\n\n  switch (type(a)) {\n    case 'Arguments':\n    case 'Array':\n    case 'Object':\n      if (typeof a.constructor === 'function' &&\n          _functionName(a.constructor) === 'Promise') {\n        return a === b;\n      }\n      break;\n    case 'Boolean':\n    case 'Number':\n    case 'String':\n      if (!(typeof a === typeof b && identical(a.valueOf(), b.valueOf()))) {\n        return false;\n      }\n      break;\n    case 'Date':\n      if (!identical(a.valueOf(), b.valueOf())) {\n        return false;\n      }\n      break;\n    case 'Error':\n      return a.name === b.name && a.message === b.message;\n    case 'RegExp':\n      if (!(a.source === b.source &&\n            a.global === b.global &&\n            a.ignoreCase === b.ignoreCase &&\n            a.multiline === b.multiline &&\n            a.sticky === b.sticky &&\n            a.unicode === b.unicode)) {\n        return false;\n      }\n      break;\n    case 'Map':\n    case 'Set':\n      if (!_equals(_arrayFromIterator(a.entries()), _arrayFromIterator(b.entries()), stackA, stackB)) {\n        return false;\n      }\n      break;\n    case 'Int8Array':\n    case 'Uint8Array':\n    case 'Uint8ClampedArray':\n    case 'Int16Array':\n    case 'Uint16Array':\n    case 'Int32Array':\n    case 'Uint32Array':\n    case 'Float32Array':\n    case 'Float64Array':\n      break;\n    case 'ArrayBuffer':\n      break;\n    default:\n      // Values of other types are only equal if identical.\n      return false;\n  }\n\n  var keysA = keys(a);\n  if (keysA.length !== keys(b).length) {\n    return false;\n  }\n\n  var idx = stackA.length - 1;\n  while (idx >= 0) {\n    if (stackA[idx] === a) {\n      return stackB[idx] === b;\n    }\n    idx -= 1;\n  }\n\n  stackA.push(a);\n  stackB.push(b);\n  idx = keysA.length - 1;\n  while (idx >= 0) {\n    var key = keysA[idx];\n    if (!(_has(key, b) && _equals(b[key], a[key], stackA, stackB))) {\n      return false;\n    }\n    idx -= 1;\n  }\n  stackA.pop();\n  stackB.pop();\n  return true;\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTU3LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9yYW1kYS9zcmMvaW50ZXJuYWwvX2VxdWFscy5qcz9mY2ZhIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBfYXJyYXlGcm9tSXRlcmF0b3IgPSByZXF1aXJlKCcuL19hcnJheUZyb21JdGVyYXRvcicpO1xudmFyIF9mdW5jdGlvbk5hbWUgPSByZXF1aXJlKCcuL19mdW5jdGlvbk5hbWUnKTtcbnZhciBfaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgaWRlbnRpY2FsID0gcmVxdWlyZSgnLi4vaWRlbnRpY2FsJyk7XG52YXIga2V5cyA9IHJlcXVpcmUoJy4uL2tleXMnKTtcbnZhciB0eXBlID0gcmVxdWlyZSgnLi4vdHlwZScpO1xuXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gX2VxdWFscyhhLCBiLCBzdGFja0EsIHN0YWNrQikge1xuICBpZiAoaWRlbnRpY2FsKGEsIGIpKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpZiAodHlwZShhKSAhPT0gdHlwZShiKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlmIChhID09IG51bGwgfHwgYiA9PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBhLmVxdWFscyA9PT0gJ2Z1bmN0aW9uJyB8fCB0eXBlb2YgYi5lcXVhbHMgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gdHlwZW9mIGEuZXF1YWxzID09PSAnZnVuY3Rpb24nICYmIGEuZXF1YWxzKGIpICYmXG4gICAgICAgICAgIHR5cGVvZiBiLmVxdWFscyA9PT0gJ2Z1bmN0aW9uJyAmJiBiLmVxdWFscyhhKTtcbiAgfVxuXG4gIHN3aXRjaCAodHlwZShhKSkge1xuICAgIGNhc2UgJ0FyZ3VtZW50cyc6XG4gICAgY2FzZSAnQXJyYXknOlxuICAgIGNhc2UgJ09iamVjdCc6XG4gICAgICBpZiAodHlwZW9mIGEuY29uc3RydWN0b3IgPT09ICdmdW5jdGlvbicgJiZcbiAgICAgICAgICBfZnVuY3Rpb25OYW1lKGEuY29uc3RydWN0b3IpID09PSAnUHJvbWlzZScpIHtcbiAgICAgICAgcmV0dXJuIGEgPT09IGI7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlICdCb29sZWFuJzpcbiAgICBjYXNlICdOdW1iZXInOlxuICAgIGNhc2UgJ1N0cmluZyc6XG4gICAgICBpZiAoISh0eXBlb2YgYSA9PT0gdHlwZW9mIGIgJiYgaWRlbnRpY2FsKGEudmFsdWVPZigpLCBiLnZhbHVlT2YoKSkpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ0RhdGUnOlxuICAgICAgaWYgKCFpZGVudGljYWwoYS52YWx1ZU9mKCksIGIudmFsdWVPZigpKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlICdFcnJvcic6XG4gICAgICByZXR1cm4gYS5uYW1lID09PSBiLm5hbWUgJiYgYS5tZXNzYWdlID09PSBiLm1lc3NhZ2U7XG4gICAgY2FzZSAnUmVnRXhwJzpcbiAgICAgIGlmICghKGEuc291cmNlID09PSBiLnNvdXJjZSAmJlxuICAgICAgICAgICAgYS5nbG9iYWwgPT09IGIuZ2xvYmFsICYmXG4gICAgICAgICAgICBhLmlnbm9yZUNhc2UgPT09IGIuaWdub3JlQ2FzZSAmJlxuICAgICAgICAgICAgYS5tdWx0aWxpbmUgPT09IGIubXVsdGlsaW5lICYmXG4gICAgICAgICAgICBhLnN0aWNreSA9PT0gYi5zdGlja3kgJiZcbiAgICAgICAgICAgIGEudW5pY29kZSA9PT0gYi51bmljb2RlKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlICdNYXAnOlxuICAgIGNhc2UgJ1NldCc6XG4gICAgICBpZiAoIV9lcXVhbHMoX2FycmF5RnJvbUl0ZXJhdG9yKGEuZW50cmllcygpKSwgX2FycmF5RnJvbUl0ZXJhdG9yKGIuZW50cmllcygpKSwgc3RhY2tBLCBzdGFja0IpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ0ludDhBcnJheSc6XG4gICAgY2FzZSAnVWludDhBcnJheSc6XG4gICAgY2FzZSAnVWludDhDbGFtcGVkQXJyYXknOlxuICAgIGNhc2UgJ0ludDE2QXJyYXknOlxuICAgIGNhc2UgJ1VpbnQxNkFycmF5JzpcbiAgICBjYXNlICdJbnQzMkFycmF5JzpcbiAgICBjYXNlICdVaW50MzJBcnJheSc6XG4gICAgY2FzZSAnRmxvYXQzMkFycmF5JzpcbiAgICBjYXNlICdGbG9hdDY0QXJyYXknOlxuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnQXJyYXlCdWZmZXInOlxuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIC8vIFZhbHVlcyBvZiBvdGhlciB0eXBlcyBhcmUgb25seSBlcXVhbCBpZiBpZGVudGljYWwuXG4gICAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIga2V5c0EgPSBrZXlzKGEpO1xuICBpZiAoa2V5c0EubGVuZ3RoICE9PSBrZXlzKGIpLmxlbmd0aCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBpZHggPSBzdGFja0EubGVuZ3RoIC0gMTtcbiAgd2hpbGUgKGlkeCA+PSAwKSB7XG4gICAgaWYgKHN0YWNrQVtpZHhdID09PSBhKSB7XG4gICAgICByZXR1cm4gc3RhY2tCW2lkeF0gPT09IGI7XG4gICAgfVxuICAgIGlkeCAtPSAxO1xuICB9XG5cbiAgc3RhY2tBLnB1c2goYSk7XG4gIHN0YWNrQi5wdXNoKGIpO1xuICBpZHggPSBrZXlzQS5sZW5ndGggLSAxO1xuICB3aGlsZSAoaWR4ID49IDApIHtcbiAgICB2YXIga2V5ID0ga2V5c0FbaWR4XTtcbiAgICBpZiAoIShfaGFzKGtleSwgYikgJiYgX2VxdWFscyhiW2tleV0sIGFba2V5XSwgc3RhY2tBLCBzdGFja0IpKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZHggLT0gMTtcbiAgfVxuICBzdGFja0EucG9wKCk7XG4gIHN0YWNrQi5wb3AoKTtcbiAgcmV0dXJuIHRydWU7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3JhbWRhL3NyYy9pbnRlcm5hbC9fZXF1YWxzLmpzXG4vLyBtb2R1bGUgaWQgPSAxNTdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 158 */
/* no static exports found */
/* all exports used */
/*!*****************************************!*\
  !*** ./~/ramda/src/internal/_filter.js ***!
  \*****************************************/
/***/ (function(module, exports) {

eval("module.exports = function _filter(fn, list) {\n  var idx = 0;\n  var len = list.length;\n  var result = [];\n\n  while (idx < len) {\n    if (fn(list[idx])) {\n      result[result.length] = list[idx];\n    }\n    idx += 1;\n  }\n  return result;\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTU4LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9yYW1kYS9zcmMvaW50ZXJuYWwvX2ZpbHRlci5qcz8xNGNmIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gX2ZpbHRlcihmbiwgbGlzdCkge1xuICB2YXIgaWR4ID0gMDtcbiAgdmFyIGxlbiA9IGxpc3QubGVuZ3RoO1xuICB2YXIgcmVzdWx0ID0gW107XG5cbiAgd2hpbGUgKGlkeCA8IGxlbikge1xuICAgIGlmIChmbihsaXN0W2lkeF0pKSB7XG4gICAgICByZXN1bHRbcmVzdWx0Lmxlbmd0aF0gPSBsaXN0W2lkeF07XG4gICAgfVxuICAgIGlkeCArPSAxO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3JhbWRhL3NyYy9pbnRlcm5hbC9fZmlsdGVyLmpzXG4vLyBtb2R1bGUgaWQgPSAxNThcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 159 */
/* no static exports found */
/* all exports used */
/*!***********************************************!*\
  !*** ./~/ramda/src/internal/_functionName.js ***!
  \***********************************************/
/***/ (function(module, exports) {

eval("module.exports = function _functionName(f) {\n  // String(x => x) evaluates to \"x => x\", so the pattern may not match.\n  var match = String(f).match(/^function (\\w*)/);\n  return match == null ? '' : match[1];\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTU5LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9yYW1kYS9zcmMvaW50ZXJuYWwvX2Z1bmN0aW9uTmFtZS5qcz82YjFkIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gX2Z1bmN0aW9uTmFtZShmKSB7XG4gIC8vIFN0cmluZyh4ID0+IHgpIGV2YWx1YXRlcyB0byBcInggPT4geFwiLCBzbyB0aGUgcGF0dGVybiBtYXkgbm90IG1hdGNoLlxuICB2YXIgbWF0Y2ggPSBTdHJpbmcoZikubWF0Y2goL15mdW5jdGlvbiAoXFx3KikvKTtcbiAgcmV0dXJuIG1hdGNoID09IG51bGwgPyAnJyA6IG1hdGNoWzFdO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9yYW1kYS9zcmMvaW50ZXJuYWwvX2Z1bmN0aW9uTmFtZS5qc1xuLy8gbW9kdWxlIGlkID0gMTU5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 160 */
/* no static exports found */
/* all exports used */
/*!*******************************************!*\
  !*** ./~/ramda/src/internal/_identity.js ***!
  \*******************************************/
/***/ (function(module, exports) {

eval("module.exports = function _identity(x) { return x; };\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTYwLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9yYW1kYS9zcmMvaW50ZXJuYWwvX2lkZW50aXR5LmpzP2U5OWMiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBfaWRlbnRpdHkoeCkgeyByZXR1cm4geDsgfTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9yYW1kYS9zcmMvaW50ZXJuYWwvX2lkZW50aXR5LmpzXG4vLyBtb2R1bGUgaWQgPSAxNjBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 161 */
/* no static exports found */
/* all exports used */
/*!******************************************!*\
  !*** ./~/ramda/src/internal/_indexOf.js ***!
  \******************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var equals = __webpack_require__(/*! ../equals */ 56);\n\n\nmodule.exports = function _indexOf(list, a, idx) {\n  var inf, item;\n  // Array.prototype.indexOf doesn't exist below IE9\n  if (typeof list.indexOf === 'function') {\n    switch (typeof a) {\n      case 'number':\n        if (a === 0) {\n          // manually crawl the list to distinguish between +0 and -0\n          inf = 1 / a;\n          while (idx < list.length) {\n            item = list[idx];\n            if (item === 0 && 1 / item === inf) {\n              return idx;\n            }\n            idx += 1;\n          }\n          return -1;\n        } else if (a !== a) {\n          // NaN\n          while (idx < list.length) {\n            item = list[idx];\n            if (typeof item === 'number' && item !== item) {\n              return idx;\n            }\n            idx += 1;\n          }\n          return -1;\n        }\n        // non-zero numbers can utilise Set\n        return list.indexOf(a, idx);\n\n      // all these types can utilise Set\n      case 'string':\n      case 'boolean':\n      case 'function':\n      case 'undefined':\n        return list.indexOf(a, idx);\n\n      case 'object':\n        if (a === null) {\n          // null can utilise Set\n          return list.indexOf(a, idx);\n        }\n    }\n  }\n  // anything else not covered above, defer to R.equals\n  while (idx < list.length) {\n    if (equals(list[idx], a)) {\n      return idx;\n    }\n    idx += 1;\n  }\n  return -1;\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTYxLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9yYW1kYS9zcmMvaW50ZXJuYWwvX2luZGV4T2YuanM/Y2VmMSJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZXF1YWxzID0gcmVxdWlyZSgnLi4vZXF1YWxzJyk7XG5cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBfaW5kZXhPZihsaXN0LCBhLCBpZHgpIHtcbiAgdmFyIGluZiwgaXRlbTtcbiAgLy8gQXJyYXkucHJvdG90eXBlLmluZGV4T2YgZG9lc24ndCBleGlzdCBiZWxvdyBJRTlcbiAgaWYgKHR5cGVvZiBsaXN0LmluZGV4T2YgPT09ICdmdW5jdGlvbicpIHtcbiAgICBzd2l0Y2ggKHR5cGVvZiBhKSB7XG4gICAgICBjYXNlICdudW1iZXInOlxuICAgICAgICBpZiAoYSA9PT0gMCkge1xuICAgICAgICAgIC8vIG1hbnVhbGx5IGNyYXdsIHRoZSBsaXN0IHRvIGRpc3Rpbmd1aXNoIGJldHdlZW4gKzAgYW5kIC0wXG4gICAgICAgICAgaW5mID0gMSAvIGE7XG4gICAgICAgICAgd2hpbGUgKGlkeCA8IGxpc3QubGVuZ3RoKSB7XG4gICAgICAgICAgICBpdGVtID0gbGlzdFtpZHhdO1xuICAgICAgICAgICAgaWYgKGl0ZW0gPT09IDAgJiYgMSAvIGl0ZW0gPT09IGluZikge1xuICAgICAgICAgICAgICByZXR1cm4gaWR4O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWR4ICs9IDE7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgfSBlbHNlIGlmIChhICE9PSBhKSB7XG4gICAgICAgICAgLy8gTmFOXG4gICAgICAgICAgd2hpbGUgKGlkeCA8IGxpc3QubGVuZ3RoKSB7XG4gICAgICAgICAgICBpdGVtID0gbGlzdFtpZHhdO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBpdGVtID09PSAnbnVtYmVyJyAmJiBpdGVtICE9PSBpdGVtKSB7XG4gICAgICAgICAgICAgIHJldHVybiBpZHg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZHggKz0gMTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICB9XG4gICAgICAgIC8vIG5vbi16ZXJvIG51bWJlcnMgY2FuIHV0aWxpc2UgU2V0XG4gICAgICAgIHJldHVybiBsaXN0LmluZGV4T2YoYSwgaWR4KTtcblxuICAgICAgLy8gYWxsIHRoZXNlIHR5cGVzIGNhbiB1dGlsaXNlIFNldFxuICAgICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgIGNhc2UgJ2Jvb2xlYW4nOlxuICAgICAgY2FzZSAnZnVuY3Rpb24nOlxuICAgICAgY2FzZSAndW5kZWZpbmVkJzpcbiAgICAgICAgcmV0dXJuIGxpc3QuaW5kZXhPZihhLCBpZHgpO1xuXG4gICAgICBjYXNlICdvYmplY3QnOlxuICAgICAgICBpZiAoYSA9PT0gbnVsbCkge1xuICAgICAgICAgIC8vIG51bGwgY2FuIHV0aWxpc2UgU2V0XG4gICAgICAgICAgcmV0dXJuIGxpc3QuaW5kZXhPZihhLCBpZHgpO1xuICAgICAgICB9XG4gICAgfVxuICB9XG4gIC8vIGFueXRoaW5nIGVsc2Ugbm90IGNvdmVyZWQgYWJvdmUsIGRlZmVyIHRvIFIuZXF1YWxzXG4gIHdoaWxlIChpZHggPCBsaXN0Lmxlbmd0aCkge1xuICAgIGlmIChlcXVhbHMobGlzdFtpZHhdLCBhKSkge1xuICAgICAgcmV0dXJuIGlkeDtcbiAgICB9XG4gICAgaWR4ICs9IDE7XG4gIH1cbiAgcmV0dXJuIC0xO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9yYW1kYS9zcmMvaW50ZXJuYWwvX2luZGV4T2YuanNcbi8vIG1vZHVsZSBpZCA9IDE2MVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 162 */
/* no static exports found */
/* all exports used */
/*!**********************************************!*\
  !*** ./~/ramda/src/internal/_isArguments.js ***!
  \**********************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var _has = __webpack_require__(/*! ./_has */ 15);\n\n\nmodule.exports = (function() {\n  var toString = Object.prototype.toString;\n  return toString.call(arguments) === '[object Arguments]' ?\n    function _isArguments(x) { return toString.call(x) === '[object Arguments]'; } :\n    function _isArguments(x) { return _has('callee', x); };\n}());\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTYyLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9yYW1kYS9zcmMvaW50ZXJuYWwvX2lzQXJndW1lbnRzLmpzPzc2MjUiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIF9oYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcblxuXG5tb2R1bGUuZXhwb3J0cyA9IChmdW5jdGlvbigpIHtcbiAgdmFyIHRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwoYXJndW1lbnRzKSA9PT0gJ1tvYmplY3QgQXJndW1lbnRzXScgP1xuICAgIGZ1bmN0aW9uIF9pc0FyZ3VtZW50cyh4KSB7IHJldHVybiB0b1N0cmluZy5jYWxsKHgpID09PSAnW29iamVjdCBBcmd1bWVudHNdJzsgfSA6XG4gICAgZnVuY3Rpb24gX2lzQXJndW1lbnRzKHgpIHsgcmV0dXJuIF9oYXMoJ2NhbGxlZScsIHgpOyB9O1xufSgpKTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9yYW1kYS9zcmMvaW50ZXJuYWwvX2lzQXJndW1lbnRzLmpzXG4vLyBtb2R1bGUgaWQgPSAxNjJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 163 */
/* no static exports found */
/* all exports used */
/*!*******************************************!*\
  !*** ./~/ramda/src/internal/_isObject.js ***!
  \*******************************************/
/***/ (function(module, exports) {

eval("module.exports = function _isObject(x) {\n  return Object.prototype.toString.call(x) === '[object Object]';\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTYzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9yYW1kYS9zcmMvaW50ZXJuYWwvX2lzT2JqZWN0LmpzPzQ0MjciXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBfaXNPYmplY3QoeCkge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHgpID09PSAnW29iamVjdCBPYmplY3RdJztcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcmFtZGEvc3JjL2ludGVybmFsL19pc09iamVjdC5qc1xuLy8gbW9kdWxlIGlkID0gMTYzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 164 */
/* no static exports found */
/* all exports used */
/*!************************************************!*\
  !*** ./~/ramda/src/internal/_isTransformer.js ***!
  \************************************************/
/***/ (function(module, exports) {

eval("module.exports = function _isTransformer(obj) {\n  return typeof obj['@@transducer/step'] === 'function';\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTY0LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9yYW1kYS9zcmMvaW50ZXJuYWwvX2lzVHJhbnNmb3JtZXIuanM/N2I1MiJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIF9pc1RyYW5zZm9ybWVyKG9iaikge1xuICByZXR1cm4gdHlwZW9mIG9ialsnQEB0cmFuc2R1Y2VyL3N0ZXAnXSA9PT0gJ2Z1bmN0aW9uJztcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcmFtZGEvc3JjL2ludGVybmFsL19pc1RyYW5zZm9ybWVyLmpzXG4vLyBtb2R1bGUgaWQgPSAxNjRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 165 */
/* no static exports found */
/* all exports used */
/*!***********************************************!*\
  !*** ./~/ramda/src/internal/_objectAssign.js ***!
  \***********************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var _has = __webpack_require__(/*! ./_has */ 15);\n\n// Based on https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\nmodule.exports = function _objectAssign(target) {\n  if (target == null) {\n    throw new TypeError('Cannot convert undefined or null to object');\n  }\n\n  var output = Object(target);\n  var idx = 1;\n  var length = arguments.length;\n  while (idx < length) {\n    var source = arguments[idx];\n    if (source != null) {\n      for (var nextKey in source) {\n        if (_has(nextKey, source)) {\n          output[nextKey] = source[nextKey];\n        }\n      }\n    }\n    idx += 1;\n  }\n  return output;\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTY1LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9yYW1kYS9zcmMvaW50ZXJuYWwvX29iamVjdEFzc2lnbi5qcz83ZTg2Il0sInNvdXJjZXNDb250ZW50IjpbInZhciBfaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG5cbi8vIEJhc2VkIG9uIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL09iamVjdC9hc3NpZ25cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gX29iamVjdEFzc2lnbih0YXJnZXQpIHtcbiAgaWYgKHRhcmdldCA9PSBudWxsKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQ2Fubm90IGNvbnZlcnQgdW5kZWZpbmVkIG9yIG51bGwgdG8gb2JqZWN0Jyk7XG4gIH1cblxuICB2YXIgb3V0cHV0ID0gT2JqZWN0KHRhcmdldCk7XG4gIHZhciBpZHggPSAxO1xuICB2YXIgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgd2hpbGUgKGlkeCA8IGxlbmd0aCkge1xuICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaWR4XTtcbiAgICBpZiAoc291cmNlICE9IG51bGwpIHtcbiAgICAgIGZvciAodmFyIG5leHRLZXkgaW4gc291cmNlKSB7XG4gICAgICAgIGlmIChfaGFzKG5leHRLZXksIHNvdXJjZSkpIHtcbiAgICAgICAgICBvdXRwdXRbbmV4dEtleV0gPSBzb3VyY2VbbmV4dEtleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgaWR4ICs9IDE7XG4gIH1cbiAgcmV0dXJuIG91dHB1dDtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcmFtZGEvc3JjL2ludGVybmFsL19vYmplY3RBc3NpZ24uanNcbi8vIG1vZHVsZSBpZCA9IDE2NVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 166 */
/* no static exports found */
/* all exports used */
/*!***************************************!*\
  !*** ./~/ramda/src/internal/_pipe.js ***!
  \***************************************/
/***/ (function(module, exports) {

eval("module.exports = function _pipe(f, g) {\n  return function() {\n    return g.call(this, f.apply(this, arguments));\n  };\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTY2LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9yYW1kYS9zcmMvaW50ZXJuYWwvX3BpcGUuanM/YThjYyJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIF9waXBlKGYsIGcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBnLmNhbGwodGhpcywgZi5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcmFtZGEvc3JjL2ludGVybmFsL19waXBlLmpzXG4vLyBtb2R1bGUgaWQgPSAxNjZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 167 */
/* no static exports found */
/* all exports used */
/*!****************************************!*\
  !*** ./~/ramda/src/internal/_quote.js ***!
  \****************************************/
/***/ (function(module, exports) {

eval("module.exports = function _quote(s) {\n  var escaped = s\n    .replace(/\\\\/g, '\\\\\\\\')\n    .replace(/[\\b]/g, '\\\\b')  // \\b matches word boundary; [\\b] matches backspace\n    .replace(/\\f/g, '\\\\f')\n    .replace(/\\n/g, '\\\\n')\n    .replace(/\\r/g, '\\\\r')\n    .replace(/\\t/g, '\\\\t')\n    .replace(/\\v/g, '\\\\v')\n    .replace(/\\0/g, '\\\\0');\n\n  return '\"' + escaped.replace(/\"/g, '\\\\\"') + '\"';\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTY3LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9yYW1kYS9zcmMvaW50ZXJuYWwvX3F1b3RlLmpzPzM4ZjQiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBfcXVvdGUocykge1xuICB2YXIgZXNjYXBlZCA9IHNcbiAgICAucmVwbGFjZSgvXFxcXC9nLCAnXFxcXFxcXFwnKVxuICAgIC5yZXBsYWNlKC9bXFxiXS9nLCAnXFxcXGInKSAgLy8gXFxiIG1hdGNoZXMgd29yZCBib3VuZGFyeTsgW1xcYl0gbWF0Y2hlcyBiYWNrc3BhY2VcbiAgICAucmVwbGFjZSgvXFxmL2csICdcXFxcZicpXG4gICAgLnJlcGxhY2UoL1xcbi9nLCAnXFxcXG4nKVxuICAgIC5yZXBsYWNlKC9cXHIvZywgJ1xcXFxyJylcbiAgICAucmVwbGFjZSgvXFx0L2csICdcXFxcdCcpXG4gICAgLnJlcGxhY2UoL1xcdi9nLCAnXFxcXHYnKVxuICAgIC5yZXBsYWNlKC9cXDAvZywgJ1xcXFwwJyk7XG5cbiAgcmV0dXJuICdcIicgKyBlc2NhcGVkLnJlcGxhY2UoL1wiL2csICdcXFxcXCInKSArICdcIic7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3JhbWRhL3NyYy9pbnRlcm5hbC9fcXVvdGUuanNcbi8vIG1vZHVsZSBpZCA9IDE2N1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 168 */
/* no static exports found */
/* all exports used */
/*!**********************************************!*\
  !*** ./~/ramda/src/internal/_toISOString.js ***!
  \**********************************************/
/***/ (function(module, exports) {

eval("/**\n * Polyfill from <https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString>.\n */\nmodule.exports = (function() {\n  var pad = function pad(n) { return (n < 10 ? '0' : '') + n; };\n\n  return typeof Date.prototype.toISOString === 'function' ?\n    function _toISOString(d) {\n      return d.toISOString();\n    } :\n    function _toISOString(d) {\n      return (\n        d.getUTCFullYear() + '-' +\n        pad(d.getUTCMonth() + 1) + '-' +\n        pad(d.getUTCDate()) + 'T' +\n        pad(d.getUTCHours()) + ':' +\n        pad(d.getUTCMinutes()) + ':' +\n        pad(d.getUTCSeconds()) + '.' +\n        (d.getUTCMilliseconds() / 1000).toFixed(3).slice(2, 5) + 'Z'\n      );\n    };\n}());\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTY4LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9yYW1kYS9zcmMvaW50ZXJuYWwvX3RvSVNPU3RyaW5nLmpzPzM5MzUiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBQb2x5ZmlsbCBmcm9tIDxodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9EYXRlL3RvSVNPU3RyaW5nPi5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSAoZnVuY3Rpb24oKSB7XG4gIHZhciBwYWQgPSBmdW5jdGlvbiBwYWQobikgeyByZXR1cm4gKG4gPCAxMCA/ICcwJyA6ICcnKSArIG47IH07XG5cbiAgcmV0dXJuIHR5cGVvZiBEYXRlLnByb3RvdHlwZS50b0lTT1N0cmluZyA9PT0gJ2Z1bmN0aW9uJyA/XG4gICAgZnVuY3Rpb24gX3RvSVNPU3RyaW5nKGQpIHtcbiAgICAgIHJldHVybiBkLnRvSVNPU3RyaW5nKCk7XG4gICAgfSA6XG4gICAgZnVuY3Rpb24gX3RvSVNPU3RyaW5nKGQpIHtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIGQuZ2V0VVRDRnVsbFllYXIoKSArICctJyArXG4gICAgICAgIHBhZChkLmdldFVUQ01vbnRoKCkgKyAxKSArICctJyArXG4gICAgICAgIHBhZChkLmdldFVUQ0RhdGUoKSkgKyAnVCcgK1xuICAgICAgICBwYWQoZC5nZXRVVENIb3VycygpKSArICc6JyArXG4gICAgICAgIHBhZChkLmdldFVUQ01pbnV0ZXMoKSkgKyAnOicgK1xuICAgICAgICBwYWQoZC5nZXRVVENTZWNvbmRzKCkpICsgJy4nICtcbiAgICAgICAgKGQuZ2V0VVRDTWlsbGlzZWNvbmRzKCkgLyAxMDAwKS50b0ZpeGVkKDMpLnNsaWNlKDIsIDUpICsgJ1onXG4gICAgICApO1xuICAgIH07XG59KCkpO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3JhbWRhL3NyYy9pbnRlcm5hbC9fdG9JU09TdHJpbmcuanNcbi8vIG1vZHVsZSBpZCA9IDE2OFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 169 */
/* no static exports found */
/* all exports used */
/*!*******************************************!*\
  !*** ./~/ramda/src/internal/_toString.js ***!
  \*******************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var _contains = __webpack_require__(/*! ./_contains */ 155);\nvar _map = __webpack_require__(/*! ./_map */ 61);\nvar _quote = __webpack_require__(/*! ./_quote */ 167);\nvar _toISOString = __webpack_require__(/*! ./_toISOString */ 168);\nvar keys = __webpack_require__(/*! ../keys */ 17);\nvar reject = __webpack_require__(/*! ../reject */ 185);\n\n\nmodule.exports = function _toString(x, seen) {\n  var recur = function recur(y) {\n    var xs = seen.concat([x]);\n    return _contains(y, xs) ? '<Circular>' : _toString(y, xs);\n  };\n\n  //  mapPairs :: (Object, [String]) -> [String]\n  var mapPairs = function(obj, keys) {\n    return _map(function(k) { return _quote(k) + ': ' + recur(obj[k]); }, keys.slice().sort());\n  };\n\n  switch (Object.prototype.toString.call(x)) {\n    case '[object Arguments]':\n      return '(function() { return arguments; }(' + _map(recur, x).join(', ') + '))';\n    case '[object Array]':\n      return '[' + _map(recur, x).concat(mapPairs(x, reject(function(k) { return /^\\d+$/.test(k); }, keys(x)))).join(', ') + ']';\n    case '[object Boolean]':\n      return typeof x === 'object' ? 'new Boolean(' + recur(x.valueOf()) + ')' : x.toString();\n    case '[object Date]':\n      return 'new Date(' + (isNaN(x.valueOf()) ? recur(NaN) : _quote(_toISOString(x))) + ')';\n    case '[object Null]':\n      return 'null';\n    case '[object Number]':\n      return typeof x === 'object' ? 'new Number(' + recur(x.valueOf()) + ')' : 1 / x === -Infinity ? '-0' : x.toString(10);\n    case '[object String]':\n      return typeof x === 'object' ? 'new String(' + recur(x.valueOf()) + ')' : _quote(x);\n    case '[object Undefined]':\n      return 'undefined';\n    default:\n      if (typeof x.toString === 'function') {\n        var repr = x.toString();\n        if (repr !== '[object Object]') {\n          return repr;\n        }\n      }\n      return '{' + mapPairs(x, keys(x)).join(', ') + '}';\n  }\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTY5LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9yYW1kYS9zcmMvaW50ZXJuYWwvX3RvU3RyaW5nLmpzPzFmZWIiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIF9jb250YWlucyA9IHJlcXVpcmUoJy4vX2NvbnRhaW5zJyk7XG52YXIgX21hcCA9IHJlcXVpcmUoJy4vX21hcCcpO1xudmFyIF9xdW90ZSA9IHJlcXVpcmUoJy4vX3F1b3RlJyk7XG52YXIgX3RvSVNPU3RyaW5nID0gcmVxdWlyZSgnLi9fdG9JU09TdHJpbmcnKTtcbnZhciBrZXlzID0gcmVxdWlyZSgnLi4va2V5cycpO1xudmFyIHJlamVjdCA9IHJlcXVpcmUoJy4uL3JlamVjdCcpO1xuXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gX3RvU3RyaW5nKHgsIHNlZW4pIHtcbiAgdmFyIHJlY3VyID0gZnVuY3Rpb24gcmVjdXIoeSkge1xuICAgIHZhciB4cyA9IHNlZW4uY29uY2F0KFt4XSk7XG4gICAgcmV0dXJuIF9jb250YWlucyh5LCB4cykgPyAnPENpcmN1bGFyPicgOiBfdG9TdHJpbmcoeSwgeHMpO1xuICB9O1xuXG4gIC8vICBtYXBQYWlycyA6OiAoT2JqZWN0LCBbU3RyaW5nXSkgLT4gW1N0cmluZ11cbiAgdmFyIG1hcFBhaXJzID0gZnVuY3Rpb24ob2JqLCBrZXlzKSB7XG4gICAgcmV0dXJuIF9tYXAoZnVuY3Rpb24oaykgeyByZXR1cm4gX3F1b3RlKGspICsgJzogJyArIHJlY3VyKG9ialtrXSk7IH0sIGtleXMuc2xpY2UoKS5zb3J0KCkpO1xuICB9O1xuXG4gIHN3aXRjaCAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHgpKSB7XG4gICAgY2FzZSAnW29iamVjdCBBcmd1bWVudHNdJzpcbiAgICAgIHJldHVybiAnKGZ1bmN0aW9uKCkgeyByZXR1cm4gYXJndW1lbnRzOyB9KCcgKyBfbWFwKHJlY3VyLCB4KS5qb2luKCcsICcpICsgJykpJztcbiAgICBjYXNlICdbb2JqZWN0IEFycmF5XSc6XG4gICAgICByZXR1cm4gJ1snICsgX21hcChyZWN1ciwgeCkuY29uY2F0KG1hcFBhaXJzKHgsIHJlamVjdChmdW5jdGlvbihrKSB7IHJldHVybiAvXlxcZCskLy50ZXN0KGspOyB9LCBrZXlzKHgpKSkpLmpvaW4oJywgJykgKyAnXSc7XG4gICAgY2FzZSAnW29iamVjdCBCb29sZWFuXSc6XG4gICAgICByZXR1cm4gdHlwZW9mIHggPT09ICdvYmplY3QnID8gJ25ldyBCb29sZWFuKCcgKyByZWN1cih4LnZhbHVlT2YoKSkgKyAnKScgOiB4LnRvU3RyaW5nKCk7XG4gICAgY2FzZSAnW29iamVjdCBEYXRlXSc6XG4gICAgICByZXR1cm4gJ25ldyBEYXRlKCcgKyAoaXNOYU4oeC52YWx1ZU9mKCkpID8gcmVjdXIoTmFOKSA6IF9xdW90ZShfdG9JU09TdHJpbmcoeCkpKSArICcpJztcbiAgICBjYXNlICdbb2JqZWN0IE51bGxdJzpcbiAgICAgIHJldHVybiAnbnVsbCc7XG4gICAgY2FzZSAnW29iamVjdCBOdW1iZXJdJzpcbiAgICAgIHJldHVybiB0eXBlb2YgeCA9PT0gJ29iamVjdCcgPyAnbmV3IE51bWJlcignICsgcmVjdXIoeC52YWx1ZU9mKCkpICsgJyknIDogMSAvIHggPT09IC1JbmZpbml0eSA/ICctMCcgOiB4LnRvU3RyaW5nKDEwKTtcbiAgICBjYXNlICdbb2JqZWN0IFN0cmluZ10nOlxuICAgICAgcmV0dXJuIHR5cGVvZiB4ID09PSAnb2JqZWN0JyA/ICduZXcgU3RyaW5nKCcgKyByZWN1cih4LnZhbHVlT2YoKSkgKyAnKScgOiBfcXVvdGUoeCk7XG4gICAgY2FzZSAnW29iamVjdCBVbmRlZmluZWRdJzpcbiAgICAgIHJldHVybiAndW5kZWZpbmVkJztcbiAgICBkZWZhdWx0OlxuICAgICAgaWYgKHR5cGVvZiB4LnRvU3RyaW5nID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHZhciByZXByID0geC50b1N0cmluZygpO1xuICAgICAgICBpZiAocmVwciAhPT0gJ1tvYmplY3QgT2JqZWN0XScpIHtcbiAgICAgICAgICByZXR1cm4gcmVwcjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuICd7JyArIG1hcFBhaXJzKHgsIGtleXMoeCkpLmpvaW4oJywgJykgKyAnfSc7XG4gIH1cbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcmFtZGEvc3JjL2ludGVybmFsL190b1N0cmluZy5qc1xuLy8gbW9kdWxlIGlkID0gMTY5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 170 */
/* no static exports found */
/* all exports used */
/*!******************************************!*\
  !*** ./~/ramda/src/internal/_xfilter.js ***!
  \******************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var _curry2 = __webpack_require__(/*! ./_curry2 */ 1);\nvar _xfBase = __webpack_require__(/*! ./_xfBase */ 62);\n\n\nmodule.exports = (function() {\n  function XFilter(f, xf) {\n    this.xf = xf;\n    this.f = f;\n  }\n  XFilter.prototype['@@transducer/init'] = _xfBase.init;\n  XFilter.prototype['@@transducer/result'] = _xfBase.result;\n  XFilter.prototype['@@transducer/step'] = function(result, input) {\n    return this.f(input) ? this.xf['@@transducer/step'](result, input) : result;\n  };\n\n  return _curry2(function _xfilter(f, xf) { return new XFilter(f, xf); });\n}());\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTcwLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9yYW1kYS9zcmMvaW50ZXJuYWwvX3hmaWx0ZXIuanM/Y2FkMSJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX2N1cnJ5MiA9IHJlcXVpcmUoJy4vX2N1cnJ5MicpO1xudmFyIF94ZkJhc2UgPSByZXF1aXJlKCcuL194ZkJhc2UnKTtcblxuXG5tb2R1bGUuZXhwb3J0cyA9IChmdW5jdGlvbigpIHtcbiAgZnVuY3Rpb24gWEZpbHRlcihmLCB4Zikge1xuICAgIHRoaXMueGYgPSB4ZjtcbiAgICB0aGlzLmYgPSBmO1xuICB9XG4gIFhGaWx0ZXIucHJvdG90eXBlWydAQHRyYW5zZHVjZXIvaW5pdCddID0gX3hmQmFzZS5pbml0O1xuICBYRmlsdGVyLnByb3RvdHlwZVsnQEB0cmFuc2R1Y2VyL3Jlc3VsdCddID0gX3hmQmFzZS5yZXN1bHQ7XG4gIFhGaWx0ZXIucHJvdG90eXBlWydAQHRyYW5zZHVjZXIvc3RlcCddID0gZnVuY3Rpb24ocmVzdWx0LCBpbnB1dCkge1xuICAgIHJldHVybiB0aGlzLmYoaW5wdXQpID8gdGhpcy54ZlsnQEB0cmFuc2R1Y2VyL3N0ZXAnXShyZXN1bHQsIGlucHV0KSA6IHJlc3VsdDtcbiAgfTtcblxuICByZXR1cm4gX2N1cnJ5MihmdW5jdGlvbiBfeGZpbHRlcihmLCB4ZikgeyByZXR1cm4gbmV3IFhGaWx0ZXIoZiwgeGYpOyB9KTtcbn0oKSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcmFtZGEvc3JjL2ludGVybmFsL194ZmlsdGVyLmpzXG4vLyBtb2R1bGUgaWQgPSAxNzBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 171 */
/* no static exports found */
/* all exports used */
/*!***************************************!*\
  !*** ./~/ramda/src/internal/_xmap.js ***!
  \***************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var _curry2 = __webpack_require__(/*! ./_curry2 */ 1);\nvar _xfBase = __webpack_require__(/*! ./_xfBase */ 62);\n\n\nmodule.exports = (function() {\n  function XMap(f, xf) {\n    this.xf = xf;\n    this.f = f;\n  }\n  XMap.prototype['@@transducer/init'] = _xfBase.init;\n  XMap.prototype['@@transducer/result'] = _xfBase.result;\n  XMap.prototype['@@transducer/step'] = function(result, input) {\n    return this.xf['@@transducer/step'](result, this.f(input));\n  };\n\n  return _curry2(function _xmap(f, xf) { return new XMap(f, xf); });\n}());\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTcxLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9yYW1kYS9zcmMvaW50ZXJuYWwvX3htYXAuanM/ODE0ZiJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX2N1cnJ5MiA9IHJlcXVpcmUoJy4vX2N1cnJ5MicpO1xudmFyIF94ZkJhc2UgPSByZXF1aXJlKCcuL194ZkJhc2UnKTtcblxuXG5tb2R1bGUuZXhwb3J0cyA9IChmdW5jdGlvbigpIHtcbiAgZnVuY3Rpb24gWE1hcChmLCB4Zikge1xuICAgIHRoaXMueGYgPSB4ZjtcbiAgICB0aGlzLmYgPSBmO1xuICB9XG4gIFhNYXAucHJvdG90eXBlWydAQHRyYW5zZHVjZXIvaW5pdCddID0gX3hmQmFzZS5pbml0O1xuICBYTWFwLnByb3RvdHlwZVsnQEB0cmFuc2R1Y2VyL3Jlc3VsdCddID0gX3hmQmFzZS5yZXN1bHQ7XG4gIFhNYXAucHJvdG90eXBlWydAQHRyYW5zZHVjZXIvc3RlcCddID0gZnVuY3Rpb24ocmVzdWx0LCBpbnB1dCkge1xuICAgIHJldHVybiB0aGlzLnhmWydAQHRyYW5zZHVjZXIvc3RlcCddKHJlc3VsdCwgdGhpcy5mKGlucHV0KSk7XG4gIH07XG5cbiAgcmV0dXJuIF9jdXJyeTIoZnVuY3Rpb24gX3htYXAoZiwgeGYpIHsgcmV0dXJuIG5ldyBYTWFwKGYsIHhmKTsgfSk7XG59KCkpO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3JhbWRhL3NyYy9pbnRlcm5hbC9feG1hcC5qc1xuLy8gbW9kdWxlIGlkID0gMTcxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 172 */
/* no static exports found */
/* all exports used */
/*!****************************************!*\
  !*** ./~/ramda/src/internal/_xwrap.js ***!
  \****************************************/
/***/ (function(module, exports) {

eval("module.exports = (function() {\n  function XWrap(fn) {\n    this.f = fn;\n  }\n  XWrap.prototype['@@transducer/init'] = function() {\n    throw new Error('init not implemented on XWrap');\n  };\n  XWrap.prototype['@@transducer/result'] = function(acc) { return acc; };\n  XWrap.prototype['@@transducer/step'] = function(acc, x) {\n    return this.f(acc, x);\n  };\n\n  return function _xwrap(fn) { return new XWrap(fn); };\n}());\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTcyLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9yYW1kYS9zcmMvaW50ZXJuYWwvX3h3cmFwLmpzPzQ5NjIiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSAoZnVuY3Rpb24oKSB7XG4gIGZ1bmN0aW9uIFhXcmFwKGZuKSB7XG4gICAgdGhpcy5mID0gZm47XG4gIH1cbiAgWFdyYXAucHJvdG90eXBlWydAQHRyYW5zZHVjZXIvaW5pdCddID0gZnVuY3Rpb24oKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdpbml0IG5vdCBpbXBsZW1lbnRlZCBvbiBYV3JhcCcpO1xuICB9O1xuICBYV3JhcC5wcm90b3R5cGVbJ0BAdHJhbnNkdWNlci9yZXN1bHQnXSA9IGZ1bmN0aW9uKGFjYykgeyByZXR1cm4gYWNjOyB9O1xuICBYV3JhcC5wcm90b3R5cGVbJ0BAdHJhbnNkdWNlci9zdGVwJ10gPSBmdW5jdGlvbihhY2MsIHgpIHtcbiAgICByZXR1cm4gdGhpcy5mKGFjYywgeCk7XG4gIH07XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIF94d3JhcChmbikgeyByZXR1cm4gbmV3IFhXcmFwKGZuKTsgfTtcbn0oKSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcmFtZGEvc3JjL2ludGVybmFsL194d3JhcC5qc1xuLy8gbW9kdWxlIGlkID0gMTcyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 173 */
/* no static exports found */
/* all exports used */
/*!********************************!*\
  !*** ./~/ramda/src/invoker.js ***!
  \********************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var _curry2 = __webpack_require__(/*! ./internal/_curry2 */ 1);\nvar _isFunction = __webpack_require__(/*! ./internal/_isFunction */ 59);\nvar curryN = __webpack_require__(/*! ./curryN */ 6);\nvar toString = __webpack_require__(/*! ./toString */ 191);\n\n\n/**\n * Turns a named method with a specified arity into a function that can be\n * called directly supplied with arguments and a target object.\n *\n * The returned function is curried and accepts `arity + 1` parameters where\n * the final parameter is the target object.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig Number -> String -> (a -> b -> ... -> n -> Object -> *)\n * @param {Number} arity Number of arguments the returned function should take\n *        before the target object.\n * @param {String} method Name of the method to call.\n * @return {Function} A new curried function.\n * @example\n *\n *      var sliceFrom = R.invoker(1, 'slice');\n *      sliceFrom(6, 'abcdefghijklm'); //=> 'ghijklm'\n *      var sliceFrom6 = R.invoker(2, 'slice')(6);\n *      sliceFrom6(8, 'abcdefghijklm'); //=> 'gh'\n * @symb R.invoker(0, 'method')(o) = o['method']()\n * @symb R.invoker(1, 'method')(a, o) = o['method'](a)\n * @symb R.invoker(2, 'method')(a, b, o) = o['method'](a, b)\n */\nmodule.exports = _curry2(function invoker(arity, method) {\n  return curryN(arity + 1, function() {\n    var target = arguments[arity];\n    if (target != null && _isFunction(target[method])) {\n      return target[method].apply(target, Array.prototype.slice.call(arguments, 0, arity));\n    }\n    throw new TypeError(toString(target) + ' does not have a method named \"' + method + '\"');\n  });\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTczLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9yYW1kYS9zcmMvaW52b2tlci5qcz9mMjBlIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBfY3VycnkyID0gcmVxdWlyZSgnLi9pbnRlcm5hbC9fY3VycnkyJyk7XG52YXIgX2lzRnVuY3Rpb24gPSByZXF1aXJlKCcuL2ludGVybmFsL19pc0Z1bmN0aW9uJyk7XG52YXIgY3VycnlOID0gcmVxdWlyZSgnLi9jdXJyeU4nKTtcbnZhciB0b1N0cmluZyA9IHJlcXVpcmUoJy4vdG9TdHJpbmcnKTtcblxuXG4vKipcbiAqIFR1cm5zIGEgbmFtZWQgbWV0aG9kIHdpdGggYSBzcGVjaWZpZWQgYXJpdHkgaW50byBhIGZ1bmN0aW9uIHRoYXQgY2FuIGJlXG4gKiBjYWxsZWQgZGlyZWN0bHkgc3VwcGxpZWQgd2l0aCBhcmd1bWVudHMgYW5kIGEgdGFyZ2V0IG9iamVjdC5cbiAqXG4gKiBUaGUgcmV0dXJuZWQgZnVuY3Rpb24gaXMgY3VycmllZCBhbmQgYWNjZXB0cyBgYXJpdHkgKyAxYCBwYXJhbWV0ZXJzIHdoZXJlXG4gKiB0aGUgZmluYWwgcGFyYW1ldGVyIGlzIHRoZSB0YXJnZXQgb2JqZWN0LlxuICpcbiAqIEBmdW5jXG4gKiBAbWVtYmVyT2YgUlxuICogQHNpbmNlIHYwLjEuMFxuICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gKiBAc2lnIE51bWJlciAtPiBTdHJpbmcgLT4gKGEgLT4gYiAtPiAuLi4gLT4gbiAtPiBPYmplY3QgLT4gKilcbiAqIEBwYXJhbSB7TnVtYmVyfSBhcml0eSBOdW1iZXIgb2YgYXJndW1lbnRzIHRoZSByZXR1cm5lZCBmdW5jdGlvbiBzaG91bGQgdGFrZVxuICogICAgICAgIGJlZm9yZSB0aGUgdGFyZ2V0IG9iamVjdC5cbiAqIEBwYXJhbSB7U3RyaW5nfSBtZXRob2QgTmFtZSBvZiB0aGUgbWV0aG9kIHRvIGNhbGwuXG4gKiBAcmV0dXJuIHtGdW5jdGlvbn0gQSBuZXcgY3VycmllZCBmdW5jdGlvbi5cbiAqIEBleGFtcGxlXG4gKlxuICogICAgICB2YXIgc2xpY2VGcm9tID0gUi5pbnZva2VyKDEsICdzbGljZScpO1xuICogICAgICBzbGljZUZyb20oNiwgJ2FiY2RlZmdoaWprbG0nKTsgLy89PiAnZ2hpamtsbSdcbiAqICAgICAgdmFyIHNsaWNlRnJvbTYgPSBSLmludm9rZXIoMiwgJ3NsaWNlJykoNik7XG4gKiAgICAgIHNsaWNlRnJvbTYoOCwgJ2FiY2RlZmdoaWprbG0nKTsgLy89PiAnZ2gnXG4gKiBAc3ltYiBSLmludm9rZXIoMCwgJ21ldGhvZCcpKG8pID0gb1snbWV0aG9kJ10oKVxuICogQHN5bWIgUi5pbnZva2VyKDEsICdtZXRob2QnKShhLCBvKSA9IG9bJ21ldGhvZCddKGEpXG4gKiBAc3ltYiBSLmludm9rZXIoMiwgJ21ldGhvZCcpKGEsIGIsIG8pID0gb1snbWV0aG9kJ10oYSwgYilcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBfY3VycnkyKGZ1bmN0aW9uIGludm9rZXIoYXJpdHksIG1ldGhvZCkge1xuICByZXR1cm4gY3VycnlOKGFyaXR5ICsgMSwgZnVuY3Rpb24oKSB7XG4gICAgdmFyIHRhcmdldCA9IGFyZ3VtZW50c1thcml0eV07XG4gICAgaWYgKHRhcmdldCAhPSBudWxsICYmIF9pc0Z1bmN0aW9uKHRhcmdldFttZXRob2RdKSkge1xuICAgICAgcmV0dXJuIHRhcmdldFttZXRob2RdLmFwcGx5KHRhcmdldCwgQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAwLCBhcml0eSkpO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKHRvU3RyaW5nKHRhcmdldCkgKyAnIGRvZXMgbm90IGhhdmUgYSBtZXRob2QgbmFtZWQgXCInICsgbWV0aG9kICsgJ1wiJyk7XG4gIH0pO1xufSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcmFtZGEvc3JjL2ludm9rZXIuanNcbi8vIG1vZHVsZSBpZCA9IDE3M1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 174 */
/* no static exports found */
/* all exports used */
/*!************************************!*\
  !*** ./~/ramda/src/isArrayLike.js ***!
  \************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var _curry1 = __webpack_require__(/*! ./internal/_curry1 */ 2);\nvar _isArray = __webpack_require__(/*! ./internal/_isArray */ 37);\nvar _isString = __webpack_require__(/*! ./internal/_isString */ 60);\n\n\n/**\n * Tests whether or not an object is similar to an array.\n *\n * @func\n * @memberOf R\n * @since v0.5.0\n * @category Type\n * @category List\n * @sig * -> Boolean\n * @param {*} x The object to test.\n * @return {Boolean} `true` if `x` has a numeric length property and extreme indices defined; `false` otherwise.\n * @deprecated since v0.23.0\n * @example\n *\n *      R.isArrayLike([]); //=> true\n *      R.isArrayLike(true); //=> false\n *      R.isArrayLike({}); //=> false\n *      R.isArrayLike({length: 10}); //=> false\n *      R.isArrayLike({0: 'zero', 9: 'nine', length: 10}); //=> true\n */\nmodule.exports = _curry1(function isArrayLike(x) {\n  if (_isArray(x)) { return true; }\n  if (!x) { return false; }\n  if (typeof x !== 'object') { return false; }\n  if (_isString(x)) { return false; }\n  if (x.nodeType === 1) { return !!x.length; }\n  if (x.length === 0) { return true; }\n  if (x.length > 0) {\n    return x.hasOwnProperty(0) && x.hasOwnProperty(x.length - 1);\n  }\n  return false;\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTc0LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9yYW1kYS9zcmMvaXNBcnJheUxpa2UuanM/NjcyZCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX2N1cnJ5MSA9IHJlcXVpcmUoJy4vaW50ZXJuYWwvX2N1cnJ5MScpO1xudmFyIF9pc0FycmF5ID0gcmVxdWlyZSgnLi9pbnRlcm5hbC9faXNBcnJheScpO1xudmFyIF9pc1N0cmluZyA9IHJlcXVpcmUoJy4vaW50ZXJuYWwvX2lzU3RyaW5nJyk7XG5cblxuLyoqXG4gKiBUZXN0cyB3aGV0aGVyIG9yIG5vdCBhbiBvYmplY3QgaXMgc2ltaWxhciB0byBhbiBhcnJheS5cbiAqXG4gKiBAZnVuY1xuICogQG1lbWJlck9mIFJcbiAqIEBzaW5jZSB2MC41LjBcbiAqIEBjYXRlZ29yeSBUeXBlXG4gKiBAY2F0ZWdvcnkgTGlzdFxuICogQHNpZyAqIC0+IEJvb2xlYW5cbiAqIEBwYXJhbSB7Kn0geCBUaGUgb2JqZWN0IHRvIHRlc3QuXG4gKiBAcmV0dXJuIHtCb29sZWFufSBgdHJ1ZWAgaWYgYHhgIGhhcyBhIG51bWVyaWMgbGVuZ3RoIHByb3BlcnR5IGFuZCBleHRyZW1lIGluZGljZXMgZGVmaW5lZDsgYGZhbHNlYCBvdGhlcndpc2UuXG4gKiBAZGVwcmVjYXRlZCBzaW5jZSB2MC4yMy4wXG4gKiBAZXhhbXBsZVxuICpcbiAqICAgICAgUi5pc0FycmF5TGlrZShbXSk7IC8vPT4gdHJ1ZVxuICogICAgICBSLmlzQXJyYXlMaWtlKHRydWUpOyAvLz0+IGZhbHNlXG4gKiAgICAgIFIuaXNBcnJheUxpa2Uoe30pOyAvLz0+IGZhbHNlXG4gKiAgICAgIFIuaXNBcnJheUxpa2Uoe2xlbmd0aDogMTB9KTsgLy89PiBmYWxzZVxuICogICAgICBSLmlzQXJyYXlMaWtlKHswOiAnemVybycsIDk6ICduaW5lJywgbGVuZ3RoOiAxMH0pOyAvLz0+IHRydWVcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBfY3VycnkxKGZ1bmN0aW9uIGlzQXJyYXlMaWtlKHgpIHtcbiAgaWYgKF9pc0FycmF5KHgpKSB7IHJldHVybiB0cnVlOyB9XG4gIGlmICgheCkgeyByZXR1cm4gZmFsc2U7IH1cbiAgaWYgKHR5cGVvZiB4ICE9PSAnb2JqZWN0JykgeyByZXR1cm4gZmFsc2U7IH1cbiAgaWYgKF9pc1N0cmluZyh4KSkgeyByZXR1cm4gZmFsc2U7IH1cbiAgaWYgKHgubm9kZVR5cGUgPT09IDEpIHsgcmV0dXJuICEheC5sZW5ndGg7IH1cbiAgaWYgKHgubGVuZ3RoID09PSAwKSB7IHJldHVybiB0cnVlOyB9XG4gIGlmICh4Lmxlbmd0aCA+IDApIHtcbiAgICByZXR1cm4geC5oYXNPd25Qcm9wZXJ0eSgwKSAmJiB4Lmhhc093blByb3BlcnR5KHgubGVuZ3RoIC0gMSk7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcmFtZGEvc3JjL2lzQXJyYXlMaWtlLmpzXG4vLyBtb2R1bGUgaWQgPSAxNzRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 175 */
/* no static exports found */
/* all exports used */
/*!******************************!*\
  !*** ./~/ramda/src/isNil.js ***!
  \******************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var _curry1 = __webpack_require__(/*! ./internal/_curry1 */ 2);\n\n\n/**\n * Checks if the input value is `null` or `undefined`.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category Type\n * @sig * -> Boolean\n * @param {*} x The value to test.\n * @return {Boolean} `true` if `x` is `undefined` or `null`, otherwise `false`.\n * @example\n *\n *      R.isNil(null); //=> true\n *      R.isNil(undefined); //=> true\n *      R.isNil(0); //=> false\n *      R.isNil([]); //=> false\n */\nmodule.exports = _curry1(function isNil(x) { return x == null; });\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTc1LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9yYW1kYS9zcmMvaXNOaWwuanM/OTU4NyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX2N1cnJ5MSA9IHJlcXVpcmUoJy4vaW50ZXJuYWwvX2N1cnJ5MScpO1xuXG5cbi8qKlxuICogQ2hlY2tzIGlmIHRoZSBpbnB1dCB2YWx1ZSBpcyBgbnVsbGAgb3IgYHVuZGVmaW5lZGAuXG4gKlxuICogQGZ1bmNcbiAqIEBtZW1iZXJPZiBSXG4gKiBAc2luY2UgdjAuOS4wXG4gKiBAY2F0ZWdvcnkgVHlwZVxuICogQHNpZyAqIC0+IEJvb2xlYW5cbiAqIEBwYXJhbSB7Kn0geCBUaGUgdmFsdWUgdG8gdGVzdC5cbiAqIEByZXR1cm4ge0Jvb2xlYW59IGB0cnVlYCBpZiBgeGAgaXMgYHVuZGVmaW5lZGAgb3IgYG51bGxgLCBvdGhlcndpc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogICAgICBSLmlzTmlsKG51bGwpOyAvLz0+IHRydWVcbiAqICAgICAgUi5pc05pbCh1bmRlZmluZWQpOyAvLz0+IHRydWVcbiAqICAgICAgUi5pc05pbCgwKTsgLy89PiBmYWxzZVxuICogICAgICBSLmlzTmlsKFtdKTsgLy89PiBmYWxzZVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IF9jdXJyeTEoZnVuY3Rpb24gaXNOaWwoeCkgeyByZXR1cm4geCA9PSBudWxsOyB9KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9yYW1kYS9zcmMvaXNOaWwuanNcbi8vIG1vZHVsZSBpZCA9IDE3NVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 176 */
/* no static exports found */
/* all exports used */
/*!*****************************!*\
  !*** ./~/ramda/src/lift.js ***!
  \*****************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var _curry1 = __webpack_require__(/*! ./internal/_curry1 */ 2);\nvar liftN = __webpack_require__(/*! ./liftN */ 177);\n\n\n/**\n * \"lifts\" a function of arity > 1 so that it may \"map over\" a list, Function or other\n * object that satisfies the [FantasyLand Apply spec](https://github.com/fantasyland/fantasy-land#apply).\n *\n * @func\n * @memberOf R\n * @since v0.7.0\n * @category Function\n * @sig (*... -> *) -> ([*]... -> [*])\n * @param {Function} fn The function to lift into higher context\n * @return {Function} The lifted function.\n * @see R.liftN\n * @example\n *\n *      var madd3 = R.lift((a, b, c) => a + b + c);\n *\n *      madd3([1,2,3], [1,2,3], [1]); //=> [3, 4, 5, 4, 5, 6, 5, 6, 7]\n *\n *      var madd5 = R.lift((a, b, c, d, e) => a + b + c + d + e);\n *\n *      madd5([1,2], [3], [4, 5], [6], [7, 8]); //=> [21, 22, 22, 23, 22, 23, 23, 24]\n */\nmodule.exports = _curry1(function lift(fn) {\n  return liftN(fn.length, fn);\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTc2LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9yYW1kYS9zcmMvbGlmdC5qcz82YmFmIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBfY3VycnkxID0gcmVxdWlyZSgnLi9pbnRlcm5hbC9fY3VycnkxJyk7XG52YXIgbGlmdE4gPSByZXF1aXJlKCcuL2xpZnROJyk7XG5cblxuLyoqXG4gKiBcImxpZnRzXCIgYSBmdW5jdGlvbiBvZiBhcml0eSA+IDEgc28gdGhhdCBpdCBtYXkgXCJtYXAgb3ZlclwiIGEgbGlzdCwgRnVuY3Rpb24gb3Igb3RoZXJcbiAqIG9iamVjdCB0aGF0IHNhdGlzZmllcyB0aGUgW0ZhbnRhc3lMYW5kIEFwcGx5IHNwZWNdKGh0dHBzOi8vZ2l0aHViLmNvbS9mYW50YXN5bGFuZC9mYW50YXN5LWxhbmQjYXBwbHkpLlxuICpcbiAqIEBmdW5jXG4gKiBAbWVtYmVyT2YgUlxuICogQHNpbmNlIHYwLjcuMFxuICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gKiBAc2lnICgqLi4uIC0+ICopIC0+IChbKl0uLi4gLT4gWypdKVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGZ1bmN0aW9uIHRvIGxpZnQgaW50byBoaWdoZXIgY29udGV4dFxuICogQHJldHVybiB7RnVuY3Rpb259IFRoZSBsaWZ0ZWQgZnVuY3Rpb24uXG4gKiBAc2VlIFIubGlmdE5cbiAqIEBleGFtcGxlXG4gKlxuICogICAgICB2YXIgbWFkZDMgPSBSLmxpZnQoKGEsIGIsIGMpID0+IGEgKyBiICsgYyk7XG4gKlxuICogICAgICBtYWRkMyhbMSwyLDNdLCBbMSwyLDNdLCBbMV0pOyAvLz0+IFszLCA0LCA1LCA0LCA1LCA2LCA1LCA2LCA3XVxuICpcbiAqICAgICAgdmFyIG1hZGQ1ID0gUi5saWZ0KChhLCBiLCBjLCBkLCBlKSA9PiBhICsgYiArIGMgKyBkICsgZSk7XG4gKlxuICogICAgICBtYWRkNShbMSwyXSwgWzNdLCBbNCwgNV0sIFs2XSwgWzcsIDhdKTsgLy89PiBbMjEsIDIyLCAyMiwgMjMsIDIyLCAyMywgMjMsIDI0XVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IF9jdXJyeTEoZnVuY3Rpb24gbGlmdChmbikge1xuICByZXR1cm4gbGlmdE4oZm4ubGVuZ3RoLCBmbik7XG59KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9yYW1kYS9zcmMvbGlmdC5qc1xuLy8gbW9kdWxlIGlkID0gMTc2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 177 */
/* no static exports found */
/* all exports used */
/*!******************************!*\
  !*** ./~/ramda/src/liftN.js ***!
  \******************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var _curry2 = __webpack_require__(/*! ./internal/_curry2 */ 1);\nvar _reduce = __webpack_require__(/*! ./internal/_reduce */ 16);\nvar ap = __webpack_require__(/*! ./ap */ 142);\nvar curryN = __webpack_require__(/*! ./curryN */ 6);\nvar map = __webpack_require__(/*! ./map */ 8);\n\n\n/**\n * \"lifts\" a function to be the specified arity, so that it may \"map over\" that\n * many lists, Functions or other objects that satisfy the [FantasyLand Apply spec](https://github.com/fantasyland/fantasy-land#apply).\n *\n * @func\n * @memberOf R\n * @since v0.7.0\n * @category Function\n * @sig Number -> (*... -> *) -> ([*]... -> [*])\n * @param {Function} fn The function to lift into higher context\n * @return {Function} The lifted function.\n * @see R.lift, R.ap\n * @example\n *\n *      var madd3 = R.liftN(3, (...args) => R.sum(args));\n *      madd3([1,2,3], [1,2,3], [1]); //=> [3, 4, 5, 4, 5, 6, 5, 6, 7]\n */\nmodule.exports = _curry2(function liftN(arity, fn) {\n  var lifted = curryN(arity, fn);\n  return curryN(arity, function() {\n    return _reduce(ap, map(lifted, arguments[0]), Array.prototype.slice.call(arguments, 1));\n  });\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTc3LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9yYW1kYS9zcmMvbGlmdE4uanM/Zjc4ZCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX2N1cnJ5MiA9IHJlcXVpcmUoJy4vaW50ZXJuYWwvX2N1cnJ5MicpO1xudmFyIF9yZWR1Y2UgPSByZXF1aXJlKCcuL2ludGVybmFsL19yZWR1Y2UnKTtcbnZhciBhcCA9IHJlcXVpcmUoJy4vYXAnKTtcbnZhciBjdXJyeU4gPSByZXF1aXJlKCcuL2N1cnJ5TicpO1xudmFyIG1hcCA9IHJlcXVpcmUoJy4vbWFwJyk7XG5cblxuLyoqXG4gKiBcImxpZnRzXCIgYSBmdW5jdGlvbiB0byBiZSB0aGUgc3BlY2lmaWVkIGFyaXR5LCBzbyB0aGF0IGl0IG1heSBcIm1hcCBvdmVyXCIgdGhhdFxuICogbWFueSBsaXN0cywgRnVuY3Rpb25zIG9yIG90aGVyIG9iamVjdHMgdGhhdCBzYXRpc2Z5IHRoZSBbRmFudGFzeUxhbmQgQXBwbHkgc3BlY10oaHR0cHM6Ly9naXRodWIuY29tL2ZhbnRhc3lsYW5kL2ZhbnRhc3ktbGFuZCNhcHBseSkuXG4gKlxuICogQGZ1bmNcbiAqIEBtZW1iZXJPZiBSXG4gKiBAc2luY2UgdjAuNy4wXG4gKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAqIEBzaWcgTnVtYmVyIC0+ICgqLi4uIC0+ICopIC0+IChbKl0uLi4gLT4gWypdKVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGZ1bmN0aW9uIHRvIGxpZnQgaW50byBoaWdoZXIgY29udGV4dFxuICogQHJldHVybiB7RnVuY3Rpb259IFRoZSBsaWZ0ZWQgZnVuY3Rpb24uXG4gKiBAc2VlIFIubGlmdCwgUi5hcFxuICogQGV4YW1wbGVcbiAqXG4gKiAgICAgIHZhciBtYWRkMyA9IFIubGlmdE4oMywgKC4uLmFyZ3MpID0+IFIuc3VtKGFyZ3MpKTtcbiAqICAgICAgbWFkZDMoWzEsMiwzXSwgWzEsMiwzXSwgWzFdKTsgLy89PiBbMywgNCwgNSwgNCwgNSwgNiwgNSwgNiwgN11cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBfY3VycnkyKGZ1bmN0aW9uIGxpZnROKGFyaXR5LCBmbikge1xuICB2YXIgbGlmdGVkID0gY3VycnlOKGFyaXR5LCBmbik7XG4gIHJldHVybiBjdXJyeU4oYXJpdHksIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBfcmVkdWNlKGFwLCBtYXAobGlmdGVkLCBhcmd1bWVudHNbMF0pLCBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpKTtcbiAgfSk7XG59KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9yYW1kYS9zcmMvbGlmdE4uanNcbi8vIG1vZHVsZSBpZCA9IDE3N1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 178 */
/* no static exports found */
/* all exports used */
/*!******************************!*\
  !*** ./~/ramda/src/merge.js ***!
  \******************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var _assign = __webpack_require__(/*! ./internal/_assign */ 152);\nvar _curry2 = __webpack_require__(/*! ./internal/_curry2 */ 1);\n\n\n/**\n * Create a new object with the own properties of the first object merged with\n * the own properties of the second object. If a key exists in both objects,\n * the value from the second object will be used.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Object\n * @sig {k: v} -> {k: v} -> {k: v}\n * @param {Object} l\n * @param {Object} r\n * @return {Object}\n * @see R.mergeWith, R.mergeWithKey\n * @example\n *\n *      R.merge({ 'name': 'fred', 'age': 10 }, { 'age': 40 });\n *      //=> { 'name': 'fred', 'age': 40 }\n *\n *      var resetToDefault = R.merge(R.__, {x: 0});\n *      resetToDefault({x: 5, y: 2}); //=> {x: 0, y: 2}\n * @symb R.merge({ x: 1, y: 2 }, { y: 5, z: 3 }) = { x: 1, y: 5, z: 3 }\n */\nmodule.exports = _curry2(function merge(l, r) {\n  return _assign({}, l, r);\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTc4LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9yYW1kYS9zcmMvbWVyZ2UuanM/NGYwNiJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX2Fzc2lnbiA9IHJlcXVpcmUoJy4vaW50ZXJuYWwvX2Fzc2lnbicpO1xudmFyIF9jdXJyeTIgPSByZXF1aXJlKCcuL2ludGVybmFsL19jdXJyeTInKTtcblxuXG4vKipcbiAqIENyZWF0ZSBhIG5ldyBvYmplY3Qgd2l0aCB0aGUgb3duIHByb3BlcnRpZXMgb2YgdGhlIGZpcnN0IG9iamVjdCBtZXJnZWQgd2l0aFxuICogdGhlIG93biBwcm9wZXJ0aWVzIG9mIHRoZSBzZWNvbmQgb2JqZWN0LiBJZiBhIGtleSBleGlzdHMgaW4gYm90aCBvYmplY3RzLFxuICogdGhlIHZhbHVlIGZyb20gdGhlIHNlY29uZCBvYmplY3Qgd2lsbCBiZSB1c2VkLlxuICpcbiAqIEBmdW5jXG4gKiBAbWVtYmVyT2YgUlxuICogQHNpbmNlIHYwLjEuMFxuICogQGNhdGVnb3J5IE9iamVjdFxuICogQHNpZyB7azogdn0gLT4ge2s6IHZ9IC0+IHtrOiB2fVxuICogQHBhcmFtIHtPYmplY3R9IGxcbiAqIEBwYXJhbSB7T2JqZWN0fSByXG4gKiBAcmV0dXJuIHtPYmplY3R9XG4gKiBAc2VlIFIubWVyZ2VXaXRoLCBSLm1lcmdlV2l0aEtleVxuICogQGV4YW1wbGVcbiAqXG4gKiAgICAgIFIubWVyZ2UoeyAnbmFtZSc6ICdmcmVkJywgJ2FnZSc6IDEwIH0sIHsgJ2FnZSc6IDQwIH0pO1xuICogICAgICAvLz0+IHsgJ25hbWUnOiAnZnJlZCcsICdhZ2UnOiA0MCB9XG4gKlxuICogICAgICB2YXIgcmVzZXRUb0RlZmF1bHQgPSBSLm1lcmdlKFIuX18sIHt4OiAwfSk7XG4gKiAgICAgIHJlc2V0VG9EZWZhdWx0KHt4OiA1LCB5OiAyfSk7IC8vPT4ge3g6IDAsIHk6IDJ9XG4gKiBAc3ltYiBSLm1lcmdlKHsgeDogMSwgeTogMiB9LCB7IHk6IDUsIHo6IDMgfSkgPSB7IHg6IDEsIHk6IDUsIHo6IDMgfVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IF9jdXJyeTIoZnVuY3Rpb24gbWVyZ2UobCwgcikge1xuICByZXR1cm4gX2Fzc2lnbih7fSwgbCwgcik7XG59KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9yYW1kYS9zcmMvbWVyZ2UuanNcbi8vIG1vZHVsZSBpZCA9IDE3OFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 179 */
/* no static exports found */
/* all exports used */
/*!**********************************!*\
  !*** ./~/ramda/src/mergeWith.js ***!
  \**********************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var _curry3 = __webpack_require__(/*! ./internal/_curry3 */ 7);\nvar mergeWithKey = __webpack_require__(/*! ./mergeWithKey */ 180);\n\n\n/**\n * Creates a new object with the own properties of the two provided objects. If\n * a key exists in both objects, the provided function is applied to the values\n * associated with the key in each object, with the result being used as the\n * value associated with the key in the returned object. The key will be\n * excluded from the returned object if the resulting value is `undefined`.\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category Object\n * @sig (a -> a -> a) -> {a} -> {a} -> {a}\n * @param {Function} fn\n * @param {Object} l\n * @param {Object} r\n * @return {Object}\n * @see R.merge, R.mergeWithKey\n * @example\n *\n *      R.mergeWith(R.concat,\n *                  { a: true, values: [10, 20] },\n *                  { b: true, values: [15, 35] });\n *      //=> { a: true, b: true, values: [10, 20, 15, 35] }\n */\nmodule.exports = _curry3(function mergeWith(fn, l, r) {\n  return mergeWithKey(function(_, _l, _r) {\n    return fn(_l, _r);\n  }, l, r);\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTc5LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9yYW1kYS9zcmMvbWVyZ2VXaXRoLmpzP2U4YzciXSwic291cmNlc0NvbnRlbnQiOlsidmFyIF9jdXJyeTMgPSByZXF1aXJlKCcuL2ludGVybmFsL19jdXJyeTMnKTtcbnZhciBtZXJnZVdpdGhLZXkgPSByZXF1aXJlKCcuL21lcmdlV2l0aEtleScpO1xuXG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBvYmplY3Qgd2l0aCB0aGUgb3duIHByb3BlcnRpZXMgb2YgdGhlIHR3byBwcm92aWRlZCBvYmplY3RzLiBJZlxuICogYSBrZXkgZXhpc3RzIGluIGJvdGggb2JqZWN0cywgdGhlIHByb3ZpZGVkIGZ1bmN0aW9uIGlzIGFwcGxpZWQgdG8gdGhlIHZhbHVlc1xuICogYXNzb2NpYXRlZCB3aXRoIHRoZSBrZXkgaW4gZWFjaCBvYmplY3QsIHdpdGggdGhlIHJlc3VsdCBiZWluZyB1c2VkIGFzIHRoZVxuICogdmFsdWUgYXNzb2NpYXRlZCB3aXRoIHRoZSBrZXkgaW4gdGhlIHJldHVybmVkIG9iamVjdC4gVGhlIGtleSB3aWxsIGJlXG4gKiBleGNsdWRlZCBmcm9tIHRoZSByZXR1cm5lZCBvYmplY3QgaWYgdGhlIHJlc3VsdGluZyB2YWx1ZSBpcyBgdW5kZWZpbmVkYC5cbiAqXG4gKiBAZnVuY1xuICogQG1lbWJlck9mIFJcbiAqIEBzaW5jZSB2MC4xOS4wXG4gKiBAY2F0ZWdvcnkgT2JqZWN0XG4gKiBAc2lnIChhIC0+IGEgLT4gYSkgLT4ge2F9IC0+IHthfSAtPiB7YX1cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXG4gKiBAcGFyYW0ge09iamVjdH0gbFxuICogQHBhcmFtIHtPYmplY3R9IHJcbiAqIEByZXR1cm4ge09iamVjdH1cbiAqIEBzZWUgUi5tZXJnZSwgUi5tZXJnZVdpdGhLZXlcbiAqIEBleGFtcGxlXG4gKlxuICogICAgICBSLm1lcmdlV2l0aChSLmNvbmNhdCxcbiAqICAgICAgICAgICAgICAgICAgeyBhOiB0cnVlLCB2YWx1ZXM6IFsxMCwgMjBdIH0sXG4gKiAgICAgICAgICAgICAgICAgIHsgYjogdHJ1ZSwgdmFsdWVzOiBbMTUsIDM1XSB9KTtcbiAqICAgICAgLy89PiB7IGE6IHRydWUsIGI6IHRydWUsIHZhbHVlczogWzEwLCAyMCwgMTUsIDM1XSB9XG4gKi9cbm1vZHVsZS5leHBvcnRzID0gX2N1cnJ5MyhmdW5jdGlvbiBtZXJnZVdpdGgoZm4sIGwsIHIpIHtcbiAgcmV0dXJuIG1lcmdlV2l0aEtleShmdW5jdGlvbihfLCBfbCwgX3IpIHtcbiAgICByZXR1cm4gZm4oX2wsIF9yKTtcbiAgfSwgbCwgcik7XG59KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9yYW1kYS9zcmMvbWVyZ2VXaXRoLmpzXG4vLyBtb2R1bGUgaWQgPSAxNzlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 180 */
/* no static exports found */
/* all exports used */
/*!*************************************!*\
  !*** ./~/ramda/src/mergeWithKey.js ***!
  \*************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var _curry3 = __webpack_require__(/*! ./internal/_curry3 */ 7);\nvar _has = __webpack_require__(/*! ./internal/_has */ 15);\n\n\n/**\n * Creates a new object with the own properties of the two provided objects. If\n * a key exists in both objects, the provided function is applied to the key\n * and the values associated with the key in each object, with the result being\n * used as the value associated with the key in the returned object. The key\n * will be excluded from the returned object if the resulting value is\n * `undefined`.\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category Object\n * @sig (String -> a -> a -> a) -> {a} -> {a} -> {a}\n * @param {Function} fn\n * @param {Object} l\n * @param {Object} r\n * @return {Object}\n * @see R.merge, R.mergeWith\n * @example\n *\n *      let concatValues = (k, l, r) => k == 'values' ? R.concat(l, r) : r\n *      R.mergeWithKey(concatValues,\n *                     { a: true, thing: 'foo', values: [10, 20] },\n *                     { b: true, thing: 'bar', values: [15, 35] });\n *      //=> { a: true, b: true, thing: 'bar', values: [10, 20, 15, 35] }\n * @symb R.mergeWithKey(f, { x: 1, y: 2 }, { y: 5, z: 3 }) = { x: 1, y: f('y', 2, 5), z: 3 }\n */\nmodule.exports = _curry3(function mergeWithKey(fn, l, r) {\n  var result = {};\n  var k;\n\n  for (k in l) {\n    if (_has(k, l)) {\n      result[k] = _has(k, r) ? fn(k, l[k], r[k]) : l[k];\n    }\n  }\n\n  for (k in r) {\n    if (_has(k, r) && !(_has(k, result))) {\n      result[k] = r[k];\n    }\n  }\n\n  return result;\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTgwLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9yYW1kYS9zcmMvbWVyZ2VXaXRoS2V5LmpzP2I4MDYiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIF9jdXJyeTMgPSByZXF1aXJlKCcuL2ludGVybmFsL19jdXJyeTMnKTtcbnZhciBfaGFzID0gcmVxdWlyZSgnLi9pbnRlcm5hbC9faGFzJyk7XG5cblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IG9iamVjdCB3aXRoIHRoZSBvd24gcHJvcGVydGllcyBvZiB0aGUgdHdvIHByb3ZpZGVkIG9iamVjdHMuIElmXG4gKiBhIGtleSBleGlzdHMgaW4gYm90aCBvYmplY3RzLCB0aGUgcHJvdmlkZWQgZnVuY3Rpb24gaXMgYXBwbGllZCB0byB0aGUga2V5XG4gKiBhbmQgdGhlIHZhbHVlcyBhc3NvY2lhdGVkIHdpdGggdGhlIGtleSBpbiBlYWNoIG9iamVjdCwgd2l0aCB0aGUgcmVzdWx0IGJlaW5nXG4gKiB1c2VkIGFzIHRoZSB2YWx1ZSBhc3NvY2lhdGVkIHdpdGggdGhlIGtleSBpbiB0aGUgcmV0dXJuZWQgb2JqZWN0LiBUaGUga2V5XG4gKiB3aWxsIGJlIGV4Y2x1ZGVkIGZyb20gdGhlIHJldHVybmVkIG9iamVjdCBpZiB0aGUgcmVzdWx0aW5nIHZhbHVlIGlzXG4gKiBgdW5kZWZpbmVkYC5cbiAqXG4gKiBAZnVuY1xuICogQG1lbWJlck9mIFJcbiAqIEBzaW5jZSB2MC4xOS4wXG4gKiBAY2F0ZWdvcnkgT2JqZWN0XG4gKiBAc2lnIChTdHJpbmcgLT4gYSAtPiBhIC0+IGEpIC0+IHthfSAtPiB7YX0gLT4ge2F9XG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxuICogQHBhcmFtIHtPYmplY3R9IGxcbiAqIEBwYXJhbSB7T2JqZWN0fSByXG4gKiBAcmV0dXJuIHtPYmplY3R9XG4gKiBAc2VlIFIubWVyZ2UsIFIubWVyZ2VXaXRoXG4gKiBAZXhhbXBsZVxuICpcbiAqICAgICAgbGV0IGNvbmNhdFZhbHVlcyA9IChrLCBsLCByKSA9PiBrID09ICd2YWx1ZXMnID8gUi5jb25jYXQobCwgcikgOiByXG4gKiAgICAgIFIubWVyZ2VXaXRoS2V5KGNvbmNhdFZhbHVlcyxcbiAqICAgICAgICAgICAgICAgICAgICAgeyBhOiB0cnVlLCB0aGluZzogJ2ZvbycsIHZhbHVlczogWzEwLCAyMF0gfSxcbiAqICAgICAgICAgICAgICAgICAgICAgeyBiOiB0cnVlLCB0aGluZzogJ2JhcicsIHZhbHVlczogWzE1LCAzNV0gfSk7XG4gKiAgICAgIC8vPT4geyBhOiB0cnVlLCBiOiB0cnVlLCB0aGluZzogJ2JhcicsIHZhbHVlczogWzEwLCAyMCwgMTUsIDM1XSB9XG4gKiBAc3ltYiBSLm1lcmdlV2l0aEtleShmLCB7IHg6IDEsIHk6IDIgfSwgeyB5OiA1LCB6OiAzIH0pID0geyB4OiAxLCB5OiBmKCd5JywgMiwgNSksIHo6IDMgfVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IF9jdXJyeTMoZnVuY3Rpb24gbWVyZ2VXaXRoS2V5KGZuLCBsLCByKSB7XG4gIHZhciByZXN1bHQgPSB7fTtcbiAgdmFyIGs7XG5cbiAgZm9yIChrIGluIGwpIHtcbiAgICBpZiAoX2hhcyhrLCBsKSkge1xuICAgICAgcmVzdWx0W2tdID0gX2hhcyhrLCByKSA/IGZuKGssIGxba10sIHJba10pIDogbFtrXTtcbiAgICB9XG4gIH1cblxuICBmb3IgKGsgaW4gcikge1xuICAgIGlmIChfaGFzKGssIHIpICYmICEoX2hhcyhrLCByZXN1bHQpKSkge1xuICAgICAgcmVzdWx0W2tdID0gcltrXTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcmFtZGEvc3JjL21lcmdlV2l0aEtleS5qc1xuLy8gbW9kdWxlIGlkID0gMTgwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 181 */
/* no static exports found */
/* all exports used */
/*!***************************!*\
  !*** ./~/ramda/src/or.js ***!
  \***************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var _curry2 = __webpack_require__(/*! ./internal/_curry2 */ 1);\n\n\n/**\n * Returns `true` if one or both of its arguments are `true`. Returns `false`\n * if both arguments are `false`.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Logic\n * @sig a -> b -> a | b\n * @param {Any} a\n * @param {Any} b\n * @return {Any} the first argument if truthy, otherwise the second argument.\n * @see R.either\n * @example\n *\n *      R.or(true, true); //=> true\n *      R.or(true, false); //=> true\n *      R.or(false, true); //=> true\n *      R.or(false, false); //=> false\n */\nmodule.exports = _curry2(function or(a, b) {\n  return a || b;\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTgxLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9yYW1kYS9zcmMvb3IuanM/MDAzZCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX2N1cnJ5MiA9IHJlcXVpcmUoJy4vaW50ZXJuYWwvX2N1cnJ5MicpO1xuXG5cbi8qKlxuICogUmV0dXJucyBgdHJ1ZWAgaWYgb25lIG9yIGJvdGggb2YgaXRzIGFyZ3VtZW50cyBhcmUgYHRydWVgLiBSZXR1cm5zIGBmYWxzZWBcbiAqIGlmIGJvdGggYXJndW1lbnRzIGFyZSBgZmFsc2VgLlxuICpcbiAqIEBmdW5jXG4gKiBAbWVtYmVyT2YgUlxuICogQHNpbmNlIHYwLjEuMFxuICogQGNhdGVnb3J5IExvZ2ljXG4gKiBAc2lnIGEgLT4gYiAtPiBhIHwgYlxuICogQHBhcmFtIHtBbnl9IGFcbiAqIEBwYXJhbSB7QW55fSBiXG4gKiBAcmV0dXJuIHtBbnl9IHRoZSBmaXJzdCBhcmd1bWVudCBpZiB0cnV0aHksIG90aGVyd2lzZSB0aGUgc2Vjb25kIGFyZ3VtZW50LlxuICogQHNlZSBSLmVpdGhlclxuICogQGV4YW1wbGVcbiAqXG4gKiAgICAgIFIub3IodHJ1ZSwgdHJ1ZSk7IC8vPT4gdHJ1ZVxuICogICAgICBSLm9yKHRydWUsIGZhbHNlKTsgLy89PiB0cnVlXG4gKiAgICAgIFIub3IoZmFsc2UsIHRydWUpOyAvLz0+IHRydWVcbiAqICAgICAgUi5vcihmYWxzZSwgZmFsc2UpOyAvLz0+IGZhbHNlXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gX2N1cnJ5MihmdW5jdGlvbiBvcihhLCBiKSB7XG4gIHJldHVybiBhIHx8IGI7XG59KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9yYW1kYS9zcmMvb3IuanNcbi8vIG1vZHVsZSBpZCA9IDE4MVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 182 */
/* no static exports found */
/* all exports used */
/*!*******************************!*\
  !*** ./~/ramda/src/pickBy.js ***!
  \*******************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var _curry2 = __webpack_require__(/*! ./internal/_curry2 */ 1);\n\n\n/**\n * Returns a partial copy of an object containing only the keys that satisfy\n * the supplied predicate.\n *\n * @func\n * @memberOf R\n * @since v0.8.0\n * @category Object\n * @sig (v, k -> Boolean) -> {k: v} -> {k: v}\n * @param {Function} pred A predicate to determine whether or not a key\n *        should be included on the output object.\n * @param {Object} obj The object to copy from\n * @return {Object} A new object with only properties that satisfy `pred`\n *         on it.\n * @see R.pick, R.filter\n * @example\n *\n *      var isUpperCase = (val, key) => key.toUpperCase() === key;\n *      R.pickBy(isUpperCase, {a: 1, b: 2, A: 3, B: 4}); //=> {A: 3, B: 4}\n */\nmodule.exports = _curry2(function pickBy(test, obj) {\n  var result = {};\n  for (var prop in obj) {\n    if (test(obj[prop], prop, obj)) {\n      result[prop] = obj[prop];\n    }\n  }\n  return result;\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTgyLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9yYW1kYS9zcmMvcGlja0J5LmpzPzUwMjgiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIF9jdXJyeTIgPSByZXF1aXJlKCcuL2ludGVybmFsL19jdXJyeTInKTtcblxuXG4vKipcbiAqIFJldHVybnMgYSBwYXJ0aWFsIGNvcHkgb2YgYW4gb2JqZWN0IGNvbnRhaW5pbmcgb25seSB0aGUga2V5cyB0aGF0IHNhdGlzZnlcbiAqIHRoZSBzdXBwbGllZCBwcmVkaWNhdGUuXG4gKlxuICogQGZ1bmNcbiAqIEBtZW1iZXJPZiBSXG4gKiBAc2luY2UgdjAuOC4wXG4gKiBAY2F0ZWdvcnkgT2JqZWN0XG4gKiBAc2lnICh2LCBrIC0+IEJvb2xlYW4pIC0+IHtrOiB2fSAtPiB7azogdn1cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWQgQSBwcmVkaWNhdGUgdG8gZGV0ZXJtaW5lIHdoZXRoZXIgb3Igbm90IGEga2V5XG4gKiAgICAgICAgc2hvdWxkIGJlIGluY2x1ZGVkIG9uIHRoZSBvdXRwdXQgb2JqZWN0LlxuICogQHBhcmFtIHtPYmplY3R9IG9iaiBUaGUgb2JqZWN0IHRvIGNvcHkgZnJvbVxuICogQHJldHVybiB7T2JqZWN0fSBBIG5ldyBvYmplY3Qgd2l0aCBvbmx5IHByb3BlcnRpZXMgdGhhdCBzYXRpc2Z5IGBwcmVkYFxuICogICAgICAgICBvbiBpdC5cbiAqIEBzZWUgUi5waWNrLCBSLmZpbHRlclxuICogQGV4YW1wbGVcbiAqXG4gKiAgICAgIHZhciBpc1VwcGVyQ2FzZSA9ICh2YWwsIGtleSkgPT4ga2V5LnRvVXBwZXJDYXNlKCkgPT09IGtleTtcbiAqICAgICAgUi5waWNrQnkoaXNVcHBlckNhc2UsIHthOiAxLCBiOiAyLCBBOiAzLCBCOiA0fSk7IC8vPT4ge0E6IDMsIEI6IDR9XG4gKi9cbm1vZHVsZS5leHBvcnRzID0gX2N1cnJ5MihmdW5jdGlvbiBwaWNrQnkodGVzdCwgb2JqKSB7XG4gIHZhciByZXN1bHQgPSB7fTtcbiAgZm9yICh2YXIgcHJvcCBpbiBvYmopIHtcbiAgICBpZiAodGVzdChvYmpbcHJvcF0sIHByb3AsIG9iaikpIHtcbiAgICAgIHJlc3VsdFtwcm9wXSA9IG9ialtwcm9wXTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3JhbWRhL3NyYy9waWNrQnkuanNcbi8vIG1vZHVsZSBpZCA9IDE4MlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 183 */
/* no static exports found */
/* all exports used */
/*!*****************************!*\
  !*** ./~/ramda/src/pipe.js ***!
  \*****************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var _arity = __webpack_require__(/*! ./internal/_arity */ 14);\nvar _pipe = __webpack_require__(/*! ./internal/_pipe */ 166);\nvar reduce = __webpack_require__(/*! ./reduce */ 26);\nvar tail = __webpack_require__(/*! ./tail */ 190);\n\n\n/**\n * Performs left-to-right function composition. The leftmost function may have\n * any arity; the remaining functions must be unary.\n *\n * In some libraries this function is named `sequence`.\n *\n * **Note:** The result of pipe is not automatically curried.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig (((a, b, ..., n) -> o), (o -> p), ..., (x -> y), (y -> z)) -> ((a, b, ..., n) -> z)\n * @param {...Function} functions\n * @return {Function}\n * @see R.compose\n * @example\n *\n *      var f = R.pipe(Math.pow, R.negate, R.inc);\n *\n *      f(3, 4); // -(3^4) + 1\n * @symb R.pipe(f, g, h)(a, b) = h(g(f(a, b)))\n */\nmodule.exports = function pipe() {\n  if (arguments.length === 0) {\n    throw new Error('pipe requires at least one argument');\n  }\n  return _arity(arguments[0].length,\n                reduce(_pipe, arguments[0], tail(arguments)));\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTgzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9yYW1kYS9zcmMvcGlwZS5qcz8zYTU1Il0sInNvdXJjZXNDb250ZW50IjpbInZhciBfYXJpdHkgPSByZXF1aXJlKCcuL2ludGVybmFsL19hcml0eScpO1xudmFyIF9waXBlID0gcmVxdWlyZSgnLi9pbnRlcm5hbC9fcGlwZScpO1xudmFyIHJlZHVjZSA9IHJlcXVpcmUoJy4vcmVkdWNlJyk7XG52YXIgdGFpbCA9IHJlcXVpcmUoJy4vdGFpbCcpO1xuXG5cbi8qKlxuICogUGVyZm9ybXMgbGVmdC10by1yaWdodCBmdW5jdGlvbiBjb21wb3NpdGlvbi4gVGhlIGxlZnRtb3N0IGZ1bmN0aW9uIG1heSBoYXZlXG4gKiBhbnkgYXJpdHk7IHRoZSByZW1haW5pbmcgZnVuY3Rpb25zIG11c3QgYmUgdW5hcnkuXG4gKlxuICogSW4gc29tZSBsaWJyYXJpZXMgdGhpcyBmdW5jdGlvbiBpcyBuYW1lZCBgc2VxdWVuY2VgLlxuICpcbiAqICoqTm90ZToqKiBUaGUgcmVzdWx0IG9mIHBpcGUgaXMgbm90IGF1dG9tYXRpY2FsbHkgY3VycmllZC5cbiAqXG4gKiBAZnVuY1xuICogQG1lbWJlck9mIFJcbiAqIEBzaW5jZSB2MC4xLjBcbiAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICogQHNpZyAoKChhLCBiLCAuLi4sIG4pIC0+IG8pLCAobyAtPiBwKSwgLi4uLCAoeCAtPiB5KSwgKHkgLT4geikpIC0+ICgoYSwgYiwgLi4uLCBuKSAtPiB6KVxuICogQHBhcmFtIHsuLi5GdW5jdGlvbn0gZnVuY3Rpb25zXG4gKiBAcmV0dXJuIHtGdW5jdGlvbn1cbiAqIEBzZWUgUi5jb21wb3NlXG4gKiBAZXhhbXBsZVxuICpcbiAqICAgICAgdmFyIGYgPSBSLnBpcGUoTWF0aC5wb3csIFIubmVnYXRlLCBSLmluYyk7XG4gKlxuICogICAgICBmKDMsIDQpOyAvLyAtKDNeNCkgKyAxXG4gKiBAc3ltYiBSLnBpcGUoZiwgZywgaCkoYSwgYikgPSBoKGcoZihhLCBiKSkpXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gcGlwZSgpIHtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3BpcGUgcmVxdWlyZXMgYXQgbGVhc3Qgb25lIGFyZ3VtZW50Jyk7XG4gIH1cbiAgcmV0dXJuIF9hcml0eShhcmd1bWVudHNbMF0ubGVuZ3RoLFxuICAgICAgICAgICAgICAgIHJlZHVjZShfcGlwZSwgYXJndW1lbnRzWzBdLCB0YWlsKGFyZ3VtZW50cykpKTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcmFtZGEvc3JjL3BpcGUuanNcbi8vIG1vZHVsZSBpZCA9IDE4M1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 184 */
/* no static exports found */
/* all exports used */
/*!******************************!*\
  !*** ./~/ramda/src/pluck.js ***!
  \******************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var _curry2 = __webpack_require__(/*! ./internal/_curry2 */ 1);\nvar map = __webpack_require__(/*! ./map */ 8);\nvar prop = __webpack_require__(/*! ./prop */ 65);\n\n\n/**\n * Returns a new list by plucking the same named property off all objects in\n * the list supplied.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig k -> [{k: v}] -> [v]\n * @param {Number|String} key The key name to pluck off of each object.\n * @param {Array} list The array to consider.\n * @return {Array} The list of values for the given key.\n * @see R.props\n * @example\n *\n *      R.pluck('a')([{a: 1}, {a: 2}]); //=> [1, 2]\n *      R.pluck(0)([[1, 2], [3, 4]]);   //=> [1, 3]\n * @symb R.pluck('x', [{x: 1, y: 2}, {x: 3, y: 4}, {x: 5, y: 6}]) = [1, 3, 5]\n * @symb R.pluck(0, [[1, 2], [3, 4], [5, 6]]) = [1, 3, 5]\n */\nmodule.exports = _curry2(function pluck(p, list) {\n  return map(prop(p), list);\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTg0LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9yYW1kYS9zcmMvcGx1Y2suanM/ZTU0MCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX2N1cnJ5MiA9IHJlcXVpcmUoJy4vaW50ZXJuYWwvX2N1cnJ5MicpO1xudmFyIG1hcCA9IHJlcXVpcmUoJy4vbWFwJyk7XG52YXIgcHJvcCA9IHJlcXVpcmUoJy4vcHJvcCcpO1xuXG5cbi8qKlxuICogUmV0dXJucyBhIG5ldyBsaXN0IGJ5IHBsdWNraW5nIHRoZSBzYW1lIG5hbWVkIHByb3BlcnR5IG9mZiBhbGwgb2JqZWN0cyBpblxuICogdGhlIGxpc3Qgc3VwcGxpZWQuXG4gKlxuICogQGZ1bmNcbiAqIEBtZW1iZXJPZiBSXG4gKiBAc2luY2UgdjAuMS4wXG4gKiBAY2F0ZWdvcnkgTGlzdFxuICogQHNpZyBrIC0+IFt7azogdn1dIC0+IFt2XVxuICogQHBhcmFtIHtOdW1iZXJ8U3RyaW5nfSBrZXkgVGhlIGtleSBuYW1lIHRvIHBsdWNrIG9mZiBvZiBlYWNoIG9iamVjdC5cbiAqIEBwYXJhbSB7QXJyYXl9IGxpc3QgVGhlIGFycmF5IHRvIGNvbnNpZGVyLlxuICogQHJldHVybiB7QXJyYXl9IFRoZSBsaXN0IG9mIHZhbHVlcyBmb3IgdGhlIGdpdmVuIGtleS5cbiAqIEBzZWUgUi5wcm9wc1xuICogQGV4YW1wbGVcbiAqXG4gKiAgICAgIFIucGx1Y2soJ2EnKShbe2E6IDF9LCB7YTogMn1dKTsgLy89PiBbMSwgMl1cbiAqICAgICAgUi5wbHVjaygwKShbWzEsIDJdLCBbMywgNF1dKTsgICAvLz0+IFsxLCAzXVxuICogQHN5bWIgUi5wbHVjaygneCcsIFt7eDogMSwgeTogMn0sIHt4OiAzLCB5OiA0fSwge3g6IDUsIHk6IDZ9XSkgPSBbMSwgMywgNV1cbiAqIEBzeW1iIFIucGx1Y2soMCwgW1sxLCAyXSwgWzMsIDRdLCBbNSwgNl1dKSA9IFsxLCAzLCA1XVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IF9jdXJyeTIoZnVuY3Rpb24gcGx1Y2socCwgbGlzdCkge1xuICByZXR1cm4gbWFwKHByb3AocCksIGxpc3QpO1xufSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcmFtZGEvc3JjL3BsdWNrLmpzXG4vLyBtb2R1bGUgaWQgPSAxODRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 185 */
/* no static exports found */
/* all exports used */
/*!*******************************!*\
  !*** ./~/ramda/src/reject.js ***!
  \*******************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var _complement = __webpack_require__(/*! ./internal/_complement */ 153);\nvar _curry2 = __webpack_require__(/*! ./internal/_curry2 */ 1);\nvar filter = __webpack_require__(/*! ./filter */ 147);\n\n\n/**\n * The complement of `filter`.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig Filterable f => (a -> Boolean) -> f a -> f a\n * @param {Function} pred\n * @param {Array} filterable\n * @return {Array}\n * @see R.filter, R.transduce, R.addIndex\n * @example\n *\n *      var isOdd = (n) => n % 2 === 1;\n *\n *      R.reject(isOdd, [1, 2, 3, 4]); //=> [2, 4]\n *\n *      R.reject(isOdd, {a: 1, b: 2, c: 3, d: 4}); //=> {b: 2, d: 4}\n */\nmodule.exports = _curry2(function reject(pred, filterable) {\n  return filter(_complement(pred), filterable);\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTg1LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9yYW1kYS9zcmMvcmVqZWN0LmpzP2VlZGMiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIF9jb21wbGVtZW50ID0gcmVxdWlyZSgnLi9pbnRlcm5hbC9fY29tcGxlbWVudCcpO1xudmFyIF9jdXJyeTIgPSByZXF1aXJlKCcuL2ludGVybmFsL19jdXJyeTInKTtcbnZhciBmaWx0ZXIgPSByZXF1aXJlKCcuL2ZpbHRlcicpO1xuXG5cbi8qKlxuICogVGhlIGNvbXBsZW1lbnQgb2YgYGZpbHRlcmAuXG4gKlxuICogQWN0cyBhcyBhIHRyYW5zZHVjZXIgaWYgYSB0cmFuc2Zvcm1lciBpcyBnaXZlbiBpbiBsaXN0IHBvc2l0aW9uLlxuICpcbiAqIEBmdW5jXG4gKiBAbWVtYmVyT2YgUlxuICogQHNpbmNlIHYwLjEuMFxuICogQGNhdGVnb3J5IExpc3RcbiAqIEBzaWcgRmlsdGVyYWJsZSBmID0+IChhIC0+IEJvb2xlYW4pIC0+IGYgYSAtPiBmIGFcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRcbiAqIEBwYXJhbSB7QXJyYXl9IGZpbHRlcmFibGVcbiAqIEByZXR1cm4ge0FycmF5fVxuICogQHNlZSBSLmZpbHRlciwgUi50cmFuc2R1Y2UsIFIuYWRkSW5kZXhcbiAqIEBleGFtcGxlXG4gKlxuICogICAgICB2YXIgaXNPZGQgPSAobikgPT4gbiAlIDIgPT09IDE7XG4gKlxuICogICAgICBSLnJlamVjdChpc09kZCwgWzEsIDIsIDMsIDRdKTsgLy89PiBbMiwgNF1cbiAqXG4gKiAgICAgIFIucmVqZWN0KGlzT2RkLCB7YTogMSwgYjogMiwgYzogMywgZDogNH0pOyAvLz0+IHtiOiAyLCBkOiA0fVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IF9jdXJyeTIoZnVuY3Rpb24gcmVqZWN0KHByZWQsIGZpbHRlcmFibGUpIHtcbiAgcmV0dXJuIGZpbHRlcihfY29tcGxlbWVudChwcmVkKSwgZmlsdGVyYWJsZSk7XG59KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9yYW1kYS9zcmMvcmVqZWN0LmpzXG4vLyBtb2R1bGUgaWQgPSAxODVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 186 */
/* no static exports found */
/* all exports used */
/*!********************************!*\
  !*** ./~/ramda/src/replace.js ***!
  \********************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var _curry3 = __webpack_require__(/*! ./internal/_curry3 */ 7);\n\n\n/**\n * Replace a substring or regex match in a string with a replacement.\n *\n * @func\n * @memberOf R\n * @since v0.7.0\n * @category String\n * @sig RegExp|String -> String -> String -> String\n * @param {RegExp|String} pattern A regular expression or a substring to match.\n * @param {String} replacement The string to replace the matches with.\n * @param {String} str The String to do the search and replacement in.\n * @return {String} The result.\n * @example\n *\n *      R.replace('foo', 'bar', 'foo foo foo'); //=> 'bar foo foo'\n *      R.replace(/foo/, 'bar', 'foo foo foo'); //=> 'bar foo foo'\n *\n *      // Use the \"g\" (global) flag to replace all occurrences:\n *      R.replace(/foo/g, 'bar', 'foo foo foo'); //=> 'bar bar bar'\n */\nmodule.exports = _curry3(function replace(regex, replacement, str) {\n  return str.replace(regex, replacement);\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTg2LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9yYW1kYS9zcmMvcmVwbGFjZS5qcz9lNjgxIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBfY3VycnkzID0gcmVxdWlyZSgnLi9pbnRlcm5hbC9fY3VycnkzJyk7XG5cblxuLyoqXG4gKiBSZXBsYWNlIGEgc3Vic3RyaW5nIG9yIHJlZ2V4IG1hdGNoIGluIGEgc3RyaW5nIHdpdGggYSByZXBsYWNlbWVudC5cbiAqXG4gKiBAZnVuY1xuICogQG1lbWJlck9mIFJcbiAqIEBzaW5jZSB2MC43LjBcbiAqIEBjYXRlZ29yeSBTdHJpbmdcbiAqIEBzaWcgUmVnRXhwfFN0cmluZyAtPiBTdHJpbmcgLT4gU3RyaW5nIC0+IFN0cmluZ1xuICogQHBhcmFtIHtSZWdFeHB8U3RyaW5nfSBwYXR0ZXJuIEEgcmVndWxhciBleHByZXNzaW9uIG9yIGEgc3Vic3RyaW5nIHRvIG1hdGNoLlxuICogQHBhcmFtIHtTdHJpbmd9IHJlcGxhY2VtZW50IFRoZSBzdHJpbmcgdG8gcmVwbGFjZSB0aGUgbWF0Y2hlcyB3aXRoLlxuICogQHBhcmFtIHtTdHJpbmd9IHN0ciBUaGUgU3RyaW5nIHRvIGRvIHRoZSBzZWFyY2ggYW5kIHJlcGxhY2VtZW50IGluLlxuICogQHJldHVybiB7U3RyaW5nfSBUaGUgcmVzdWx0LlxuICogQGV4YW1wbGVcbiAqXG4gKiAgICAgIFIucmVwbGFjZSgnZm9vJywgJ2JhcicsICdmb28gZm9vIGZvbycpOyAvLz0+ICdiYXIgZm9vIGZvbydcbiAqICAgICAgUi5yZXBsYWNlKC9mb28vLCAnYmFyJywgJ2ZvbyBmb28gZm9vJyk7IC8vPT4gJ2JhciBmb28gZm9vJ1xuICpcbiAqICAgICAgLy8gVXNlIHRoZSBcImdcIiAoZ2xvYmFsKSBmbGFnIHRvIHJlcGxhY2UgYWxsIG9jY3VycmVuY2VzOlxuICogICAgICBSLnJlcGxhY2UoL2Zvby9nLCAnYmFyJywgJ2ZvbyBmb28gZm9vJyk7IC8vPT4gJ2JhciBiYXIgYmFyJ1xuICovXG5tb2R1bGUuZXhwb3J0cyA9IF9jdXJyeTMoZnVuY3Rpb24gcmVwbGFjZShyZWdleCwgcmVwbGFjZW1lbnQsIHN0cikge1xuICByZXR1cm4gc3RyLnJlcGxhY2UocmVnZXgsIHJlcGxhY2VtZW50KTtcbn0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3JhbWRhL3NyYy9yZXBsYWNlLmpzXG4vLyBtb2R1bGUgaWQgPSAxODZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 187 */
/* no static exports found */
/* all exports used */
/*!********************************!*\
  !*** ./~/ramda/src/reverse.js ***!
  \********************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var _curry1 = __webpack_require__(/*! ./internal/_curry1 */ 2);\nvar _isString = __webpack_require__(/*! ./internal/_isString */ 60);\n\n\n/**\n * Returns a new list or string with the elements or characters in reverse\n * order.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig [a] -> [a]\n * @sig String -> String\n * @param {Array|String} list\n * @return {Array|String}\n * @example\n *\n *      R.reverse([1, 2, 3]);  //=> [3, 2, 1]\n *      R.reverse([1, 2]);     //=> [2, 1]\n *      R.reverse([1]);        //=> [1]\n *      R.reverse([]);         //=> []\n *\n *      R.reverse('abc');      //=> 'cba'\n *      R.reverse('ab');       //=> 'ba'\n *      R.reverse('a');        //=> 'a'\n *      R.reverse('');         //=> ''\n */\nmodule.exports = _curry1(function reverse(list) {\n  return _isString(list) ? list.split('').reverse().join('') :\n                           Array.prototype.slice.call(list, 0).reverse();\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTg3LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9yYW1kYS9zcmMvcmV2ZXJzZS5qcz8wNTMyIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBfY3VycnkxID0gcmVxdWlyZSgnLi9pbnRlcm5hbC9fY3VycnkxJyk7XG52YXIgX2lzU3RyaW5nID0gcmVxdWlyZSgnLi9pbnRlcm5hbC9faXNTdHJpbmcnKTtcblxuXG4vKipcbiAqIFJldHVybnMgYSBuZXcgbGlzdCBvciBzdHJpbmcgd2l0aCB0aGUgZWxlbWVudHMgb3IgY2hhcmFjdGVycyBpbiByZXZlcnNlXG4gKiBvcmRlci5cbiAqXG4gKiBAZnVuY1xuICogQG1lbWJlck9mIFJcbiAqIEBzaW5jZSB2MC4xLjBcbiAqIEBjYXRlZ29yeSBMaXN0XG4gKiBAc2lnIFthXSAtPiBbYV1cbiAqIEBzaWcgU3RyaW5nIC0+IFN0cmluZ1xuICogQHBhcmFtIHtBcnJheXxTdHJpbmd9IGxpc3RcbiAqIEByZXR1cm4ge0FycmF5fFN0cmluZ31cbiAqIEBleGFtcGxlXG4gKlxuICogICAgICBSLnJldmVyc2UoWzEsIDIsIDNdKTsgIC8vPT4gWzMsIDIsIDFdXG4gKiAgICAgIFIucmV2ZXJzZShbMSwgMl0pOyAgICAgLy89PiBbMiwgMV1cbiAqICAgICAgUi5yZXZlcnNlKFsxXSk7ICAgICAgICAvLz0+IFsxXVxuICogICAgICBSLnJldmVyc2UoW10pOyAgICAgICAgIC8vPT4gW11cbiAqXG4gKiAgICAgIFIucmV2ZXJzZSgnYWJjJyk7ICAgICAgLy89PiAnY2JhJ1xuICogICAgICBSLnJldmVyc2UoJ2FiJyk7ICAgICAgIC8vPT4gJ2JhJ1xuICogICAgICBSLnJldmVyc2UoJ2EnKTsgICAgICAgIC8vPT4gJ2EnXG4gKiAgICAgIFIucmV2ZXJzZSgnJyk7ICAgICAgICAgLy89PiAnJ1xuICovXG5tb2R1bGUuZXhwb3J0cyA9IF9jdXJyeTEoZnVuY3Rpb24gcmV2ZXJzZShsaXN0KSB7XG4gIHJldHVybiBfaXNTdHJpbmcobGlzdCkgPyBsaXN0LnNwbGl0KCcnKS5yZXZlcnNlKCkuam9pbignJykgOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwobGlzdCwgMCkucmV2ZXJzZSgpO1xufSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcmFtZGEvc3JjL3JldmVyc2UuanNcbi8vIG1vZHVsZSBpZCA9IDE4N1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 188 */
/* no static exports found */
/* all exports used */
/*!******************************!*\
  !*** ./~/ramda/src/slice.js ***!
  \******************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var _checkForMethod = __webpack_require__(/*! ./internal/_checkForMethod */ 57);\nvar _curry3 = __webpack_require__(/*! ./internal/_curry3 */ 7);\n\n\n/**\n * Returns the elements of the given list or string (or object with a `slice`\n * method) from `fromIndex` (inclusive) to `toIndex` (exclusive).\n *\n * Dispatches to the `slice` method of the third argument, if present.\n *\n * @func\n * @memberOf R\n * @since v0.1.4\n * @category List\n * @sig Number -> Number -> [a] -> [a]\n * @sig Number -> Number -> String -> String\n * @param {Number} fromIndex The start index (inclusive).\n * @param {Number} toIndex The end index (exclusive).\n * @param {*} list\n * @return {*}\n * @example\n *\n *      R.slice(1, 3, ['a', 'b', 'c', 'd']);        //=> ['b', 'c']\n *      R.slice(1, Infinity, ['a', 'b', 'c', 'd']); //=> ['b', 'c', 'd']\n *      R.slice(0, -1, ['a', 'b', 'c', 'd']);       //=> ['a', 'b', 'c']\n *      R.slice(-3, -1, ['a', 'b', 'c', 'd']);      //=> ['b', 'c']\n *      R.slice(0, 3, 'ramda');                     //=> 'ram'\n */\nmodule.exports = _curry3(_checkForMethod('slice', function slice(fromIndex, toIndex, list) {\n  return Array.prototype.slice.call(list, fromIndex, toIndex);\n}));\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTg4LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9yYW1kYS9zcmMvc2xpY2UuanM/NjAyZCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX2NoZWNrRm9yTWV0aG9kID0gcmVxdWlyZSgnLi9pbnRlcm5hbC9fY2hlY2tGb3JNZXRob2QnKTtcbnZhciBfY3VycnkzID0gcmVxdWlyZSgnLi9pbnRlcm5hbC9fY3VycnkzJyk7XG5cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBlbGVtZW50cyBvZiB0aGUgZ2l2ZW4gbGlzdCBvciBzdHJpbmcgKG9yIG9iamVjdCB3aXRoIGEgYHNsaWNlYFxuICogbWV0aG9kKSBmcm9tIGBmcm9tSW5kZXhgIChpbmNsdXNpdmUpIHRvIGB0b0luZGV4YCAoZXhjbHVzaXZlKS5cbiAqXG4gKiBEaXNwYXRjaGVzIHRvIHRoZSBgc2xpY2VgIG1ldGhvZCBvZiB0aGUgdGhpcmQgYXJndW1lbnQsIGlmIHByZXNlbnQuXG4gKlxuICogQGZ1bmNcbiAqIEBtZW1iZXJPZiBSXG4gKiBAc2luY2UgdjAuMS40XG4gKiBAY2F0ZWdvcnkgTGlzdFxuICogQHNpZyBOdW1iZXIgLT4gTnVtYmVyIC0+IFthXSAtPiBbYV1cbiAqIEBzaWcgTnVtYmVyIC0+IE51bWJlciAtPiBTdHJpbmcgLT4gU3RyaW5nXG4gKiBAcGFyYW0ge051bWJlcn0gZnJvbUluZGV4IFRoZSBzdGFydCBpbmRleCAoaW5jbHVzaXZlKS5cbiAqIEBwYXJhbSB7TnVtYmVyfSB0b0luZGV4IFRoZSBlbmQgaW5kZXggKGV4Y2x1c2l2ZSkuXG4gKiBAcGFyYW0geyp9IGxpc3RcbiAqIEByZXR1cm4geyp9XG4gKiBAZXhhbXBsZVxuICpcbiAqICAgICAgUi5zbGljZSgxLCAzLCBbJ2EnLCAnYicsICdjJywgJ2QnXSk7ICAgICAgICAvLz0+IFsnYicsICdjJ11cbiAqICAgICAgUi5zbGljZSgxLCBJbmZpbml0eSwgWydhJywgJ2InLCAnYycsICdkJ10pOyAvLz0+IFsnYicsICdjJywgJ2QnXVxuICogICAgICBSLnNsaWNlKDAsIC0xLCBbJ2EnLCAnYicsICdjJywgJ2QnXSk7ICAgICAgIC8vPT4gWydhJywgJ2InLCAnYyddXG4gKiAgICAgIFIuc2xpY2UoLTMsIC0xLCBbJ2EnLCAnYicsICdjJywgJ2QnXSk7ICAgICAgLy89PiBbJ2InLCAnYyddXG4gKiAgICAgIFIuc2xpY2UoMCwgMywgJ3JhbWRhJyk7ICAgICAgICAgICAgICAgICAgICAgLy89PiAncmFtJ1xuICovXG5tb2R1bGUuZXhwb3J0cyA9IF9jdXJyeTMoX2NoZWNrRm9yTWV0aG9kKCdzbGljZScsIGZ1bmN0aW9uIHNsaWNlKGZyb21JbmRleCwgdG9JbmRleCwgbGlzdCkge1xuICByZXR1cm4gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwobGlzdCwgZnJvbUluZGV4LCB0b0luZGV4KTtcbn0pKTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9yYW1kYS9zcmMvc2xpY2UuanNcbi8vIG1vZHVsZSBpZCA9IDE4OFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 189 */
/* no static exports found */
/* all exports used */
/*!******************************!*\
  !*** ./~/ramda/src/split.js ***!
  \******************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var invoker = __webpack_require__(/*! ./invoker */ 173);\n\n\n/**\n * Splits a string into an array of strings based on the given\n * separator.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category String\n * @sig (String | RegExp) -> String -> [String]\n * @param {String|RegExp} sep The pattern.\n * @param {String} str The string to separate into an array.\n * @return {Array} The array of strings from `str` separated by `str`.\n * @see R.join\n * @example\n *\n *      var pathComponents = R.split('/');\n *      R.tail(pathComponents('/usr/local/bin/node')); //=> ['usr', 'local', 'bin', 'node']\n *\n *      R.split('.', 'a.b.c.xyz.d'); //=> ['a', 'b', 'c', 'xyz', 'd']\n */\nmodule.exports = invoker(1, 'split');\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTg5LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9yYW1kYS9zcmMvc3BsaXQuanM/OWMxNyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgaW52b2tlciA9IHJlcXVpcmUoJy4vaW52b2tlcicpO1xuXG5cbi8qKlxuICogU3BsaXRzIGEgc3RyaW5nIGludG8gYW4gYXJyYXkgb2Ygc3RyaW5ncyBiYXNlZCBvbiB0aGUgZ2l2ZW5cbiAqIHNlcGFyYXRvci5cbiAqXG4gKiBAZnVuY1xuICogQG1lbWJlck9mIFJcbiAqIEBzaW5jZSB2MC4xLjBcbiAqIEBjYXRlZ29yeSBTdHJpbmdcbiAqIEBzaWcgKFN0cmluZyB8IFJlZ0V4cCkgLT4gU3RyaW5nIC0+IFtTdHJpbmddXG4gKiBAcGFyYW0ge1N0cmluZ3xSZWdFeHB9IHNlcCBUaGUgcGF0dGVybi5cbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHIgVGhlIHN0cmluZyB0byBzZXBhcmF0ZSBpbnRvIGFuIGFycmF5LlxuICogQHJldHVybiB7QXJyYXl9IFRoZSBhcnJheSBvZiBzdHJpbmdzIGZyb20gYHN0cmAgc2VwYXJhdGVkIGJ5IGBzdHJgLlxuICogQHNlZSBSLmpvaW5cbiAqIEBleGFtcGxlXG4gKlxuICogICAgICB2YXIgcGF0aENvbXBvbmVudHMgPSBSLnNwbGl0KCcvJyk7XG4gKiAgICAgIFIudGFpbChwYXRoQ29tcG9uZW50cygnL3Vzci9sb2NhbC9iaW4vbm9kZScpKTsgLy89PiBbJ3VzcicsICdsb2NhbCcsICdiaW4nLCAnbm9kZSddXG4gKlxuICogICAgICBSLnNwbGl0KCcuJywgJ2EuYi5jLnh5ei5kJyk7IC8vPT4gWydhJywgJ2InLCAnYycsICd4eXonLCAnZCddXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gaW52b2tlcigxLCAnc3BsaXQnKTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9yYW1kYS9zcmMvc3BsaXQuanNcbi8vIG1vZHVsZSBpZCA9IDE4OVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 190 */
/* no static exports found */
/* all exports used */
/*!*****************************!*\
  !*** ./~/ramda/src/tail.js ***!
  \*****************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var _checkForMethod = __webpack_require__(/*! ./internal/_checkForMethod */ 57);\nvar _curry1 = __webpack_require__(/*! ./internal/_curry1 */ 2);\nvar slice = __webpack_require__(/*! ./slice */ 188);\n\n\n/**\n * Returns all but the first element of the given list or string (or object\n * with a `tail` method).\n *\n * Dispatches to the `slice` method of the first argument, if present.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig [a] -> [a]\n * @sig String -> String\n * @param {*} list\n * @return {*}\n * @see R.head, R.init, R.last\n * @example\n *\n *      R.tail([1, 2, 3]);  //=> [2, 3]\n *      R.tail([1, 2]);     //=> [2]\n *      R.tail([1]);        //=> []\n *      R.tail([]);         //=> []\n *\n *      R.tail('abc');  //=> 'bc'\n *      R.tail('ab');   //=> 'b'\n *      R.tail('a');    //=> ''\n *      R.tail('');     //=> ''\n */\nmodule.exports = _curry1(_checkForMethod('tail', slice(1, Infinity)));\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTkwLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9yYW1kYS9zcmMvdGFpbC5qcz83OGI1Il0sInNvdXJjZXNDb250ZW50IjpbInZhciBfY2hlY2tGb3JNZXRob2QgPSByZXF1aXJlKCcuL2ludGVybmFsL19jaGVja0Zvck1ldGhvZCcpO1xudmFyIF9jdXJyeTEgPSByZXF1aXJlKCcuL2ludGVybmFsL19jdXJyeTEnKTtcbnZhciBzbGljZSA9IHJlcXVpcmUoJy4vc2xpY2UnKTtcblxuXG4vKipcbiAqIFJldHVybnMgYWxsIGJ1dCB0aGUgZmlyc3QgZWxlbWVudCBvZiB0aGUgZ2l2ZW4gbGlzdCBvciBzdHJpbmcgKG9yIG9iamVjdFxuICogd2l0aCBhIGB0YWlsYCBtZXRob2QpLlxuICpcbiAqIERpc3BhdGNoZXMgdG8gdGhlIGBzbGljZWAgbWV0aG9kIG9mIHRoZSBmaXJzdCBhcmd1bWVudCwgaWYgcHJlc2VudC5cbiAqXG4gKiBAZnVuY1xuICogQG1lbWJlck9mIFJcbiAqIEBzaW5jZSB2MC4xLjBcbiAqIEBjYXRlZ29yeSBMaXN0XG4gKiBAc2lnIFthXSAtPiBbYV1cbiAqIEBzaWcgU3RyaW5nIC0+IFN0cmluZ1xuICogQHBhcmFtIHsqfSBsaXN0XG4gKiBAcmV0dXJuIHsqfVxuICogQHNlZSBSLmhlYWQsIFIuaW5pdCwgUi5sYXN0XG4gKiBAZXhhbXBsZVxuICpcbiAqICAgICAgUi50YWlsKFsxLCAyLCAzXSk7ICAvLz0+IFsyLCAzXVxuICogICAgICBSLnRhaWwoWzEsIDJdKTsgICAgIC8vPT4gWzJdXG4gKiAgICAgIFIudGFpbChbMV0pOyAgICAgICAgLy89PiBbXVxuICogICAgICBSLnRhaWwoW10pOyAgICAgICAgIC8vPT4gW11cbiAqXG4gKiAgICAgIFIudGFpbCgnYWJjJyk7ICAvLz0+ICdiYydcbiAqICAgICAgUi50YWlsKCdhYicpOyAgIC8vPT4gJ2InXG4gKiAgICAgIFIudGFpbCgnYScpOyAgICAvLz0+ICcnXG4gKiAgICAgIFIudGFpbCgnJyk7ICAgICAvLz0+ICcnXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gX2N1cnJ5MShfY2hlY2tGb3JNZXRob2QoJ3RhaWwnLCBzbGljZSgxLCBJbmZpbml0eSkpKTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9yYW1kYS9zcmMvdGFpbC5qc1xuLy8gbW9kdWxlIGlkID0gMTkwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 191 */
/* no static exports found */
/* all exports used */
/*!*********************************!*\
  !*** ./~/ramda/src/toString.js ***!
  \*********************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var _curry1 = __webpack_require__(/*! ./internal/_curry1 */ 2);\nvar _toString = __webpack_require__(/*! ./internal/_toString */ 169);\n\n\n/**\n * Returns the string representation of the given value. `eval`'ing the output\n * should result in a value equivalent to the input value. Many of the built-in\n * `toString` methods do not satisfy this requirement.\n *\n * If the given value is an `[object Object]` with a `toString` method other\n * than `Object.prototype.toString`, this method is invoked with no arguments\n * to produce the return value. This means user-defined constructor functions\n * can provide a suitable `toString` method. For example:\n *\n *     function Point(x, y) {\n *       this.x = x;\n *       this.y = y;\n *     }\n *\n *     Point.prototype.toString = function() {\n *       return 'new Point(' + this.x + ', ' + this.y + ')';\n *     };\n *\n *     R.toString(new Point(1, 2)); //=> 'new Point(1, 2)'\n *\n * @func\n * @memberOf R\n * @since v0.14.0\n * @category String\n * @sig * -> String\n * @param {*} val\n * @return {String}\n * @example\n *\n *      R.toString(42); //=> '42'\n *      R.toString('abc'); //=> '\"abc\"'\n *      R.toString([1, 2, 3]); //=> '[1, 2, 3]'\n *      R.toString({foo: 1, bar: 2, baz: 3}); //=> '{\"bar\": 2, \"baz\": 3, \"foo\": 1}'\n *      R.toString(new Date('2001-02-03T04:05:06Z')); //=> 'new Date(\"2001-02-03T04:05:06.000Z\")'\n */\nmodule.exports = _curry1(function toString(val) { return _toString(val, []); });\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTkxLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9yYW1kYS9zcmMvdG9TdHJpbmcuanM/OTQxMCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX2N1cnJ5MSA9IHJlcXVpcmUoJy4vaW50ZXJuYWwvX2N1cnJ5MScpO1xudmFyIF90b1N0cmluZyA9IHJlcXVpcmUoJy4vaW50ZXJuYWwvX3RvU3RyaW5nJyk7XG5cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIGdpdmVuIHZhbHVlLiBgZXZhbGAnaW5nIHRoZSBvdXRwdXRcbiAqIHNob3VsZCByZXN1bHQgaW4gYSB2YWx1ZSBlcXVpdmFsZW50IHRvIHRoZSBpbnB1dCB2YWx1ZS4gTWFueSBvZiB0aGUgYnVpbHQtaW5cbiAqIGB0b1N0cmluZ2AgbWV0aG9kcyBkbyBub3Qgc2F0aXNmeSB0aGlzIHJlcXVpcmVtZW50LlxuICpcbiAqIElmIHRoZSBnaXZlbiB2YWx1ZSBpcyBhbiBgW29iamVjdCBPYmplY3RdYCB3aXRoIGEgYHRvU3RyaW5nYCBtZXRob2Qgb3RoZXJcbiAqIHRoYW4gYE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmdgLCB0aGlzIG1ldGhvZCBpcyBpbnZva2VkIHdpdGggbm8gYXJndW1lbnRzXG4gKiB0byBwcm9kdWNlIHRoZSByZXR1cm4gdmFsdWUuIFRoaXMgbWVhbnMgdXNlci1kZWZpbmVkIGNvbnN0cnVjdG9yIGZ1bmN0aW9uc1xuICogY2FuIHByb3ZpZGUgYSBzdWl0YWJsZSBgdG9TdHJpbmdgIG1ldGhvZC4gRm9yIGV4YW1wbGU6XG4gKlxuICogICAgIGZ1bmN0aW9uIFBvaW50KHgsIHkpIHtcbiAqICAgICAgIHRoaXMueCA9IHg7XG4gKiAgICAgICB0aGlzLnkgPSB5O1xuICogICAgIH1cbiAqXG4gKiAgICAgUG9pbnQucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gKiAgICAgICByZXR1cm4gJ25ldyBQb2ludCgnICsgdGhpcy54ICsgJywgJyArIHRoaXMueSArICcpJztcbiAqICAgICB9O1xuICpcbiAqICAgICBSLnRvU3RyaW5nKG5ldyBQb2ludCgxLCAyKSk7IC8vPT4gJ25ldyBQb2ludCgxLCAyKSdcbiAqXG4gKiBAZnVuY1xuICogQG1lbWJlck9mIFJcbiAqIEBzaW5jZSB2MC4xNC4wXG4gKiBAY2F0ZWdvcnkgU3RyaW5nXG4gKiBAc2lnICogLT4gU3RyaW5nXG4gKiBAcGFyYW0geyp9IHZhbFxuICogQHJldHVybiB7U3RyaW5nfVxuICogQGV4YW1wbGVcbiAqXG4gKiAgICAgIFIudG9TdHJpbmcoNDIpOyAvLz0+ICc0MidcbiAqICAgICAgUi50b1N0cmluZygnYWJjJyk7IC8vPT4gJ1wiYWJjXCInXG4gKiAgICAgIFIudG9TdHJpbmcoWzEsIDIsIDNdKTsgLy89PiAnWzEsIDIsIDNdJ1xuICogICAgICBSLnRvU3RyaW5nKHtmb286IDEsIGJhcjogMiwgYmF6OiAzfSk7IC8vPT4gJ3tcImJhclwiOiAyLCBcImJhelwiOiAzLCBcImZvb1wiOiAxfSdcbiAqICAgICAgUi50b1N0cmluZyhuZXcgRGF0ZSgnMjAwMS0wMi0wM1QwNDowNTowNlonKSk7IC8vPT4gJ25ldyBEYXRlKFwiMjAwMS0wMi0wM1QwNDowNTowNi4wMDBaXCIpJ1xuICovXG5tb2R1bGUuZXhwb3J0cyA9IF9jdXJyeTEoZnVuY3Rpb24gdG9TdHJpbmcodmFsKSB7IHJldHVybiBfdG9TdHJpbmcodmFsLCBbXSk7IH0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3JhbWRhL3NyYy90b1N0cmluZy5qc1xuLy8gbW9kdWxlIGlkID0gMTkxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 192 */
/* no static exports found */
/* all exports used */
/*!*****************************!*\
  !*** ./~/ramda/src/type.js ***!
  \*****************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var _curry1 = __webpack_require__(/*! ./internal/_curry1 */ 2);\n\n\n/**\n * Gives a single-word string description of the (native) type of a value,\n * returning such answers as 'Object', 'Number', 'Array', or 'Null'. Does not\n * attempt to distinguish user Object types any further, reporting them all as\n * 'Object'.\n *\n * @func\n * @memberOf R\n * @since v0.8.0\n * @category Type\n * @sig (* -> {*}) -> String\n * @param {*} val The value to test\n * @return {String}\n * @example\n *\n *      R.type({}); //=> \"Object\"\n *      R.type(1); //=> \"Number\"\n *      R.type(false); //=> \"Boolean\"\n *      R.type('s'); //=> \"String\"\n *      R.type(null); //=> \"Null\"\n *      R.type([]); //=> \"Array\"\n *      R.type(/[A-z]/); //=> \"RegExp\"\n */\nmodule.exports = _curry1(function type(val) {\n  return val === null      ? 'Null'      :\n         val === undefined ? 'Undefined' :\n         Object.prototype.toString.call(val).slice(8, -1);\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTkyLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9yYW1kYS9zcmMvdHlwZS5qcz84Y2NlIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBfY3VycnkxID0gcmVxdWlyZSgnLi9pbnRlcm5hbC9fY3VycnkxJyk7XG5cblxuLyoqXG4gKiBHaXZlcyBhIHNpbmdsZS13b3JkIHN0cmluZyBkZXNjcmlwdGlvbiBvZiB0aGUgKG5hdGl2ZSkgdHlwZSBvZiBhIHZhbHVlLFxuICogcmV0dXJuaW5nIHN1Y2ggYW5zd2VycyBhcyAnT2JqZWN0JywgJ051bWJlcicsICdBcnJheScsIG9yICdOdWxsJy4gRG9lcyBub3RcbiAqIGF0dGVtcHQgdG8gZGlzdGluZ3Vpc2ggdXNlciBPYmplY3QgdHlwZXMgYW55IGZ1cnRoZXIsIHJlcG9ydGluZyB0aGVtIGFsbCBhc1xuICogJ09iamVjdCcuXG4gKlxuICogQGZ1bmNcbiAqIEBtZW1iZXJPZiBSXG4gKiBAc2luY2UgdjAuOC4wXG4gKiBAY2F0ZWdvcnkgVHlwZVxuICogQHNpZyAoKiAtPiB7Kn0pIC0+IFN0cmluZ1xuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBleGFtcGxlXG4gKlxuICogICAgICBSLnR5cGUoe30pOyAvLz0+IFwiT2JqZWN0XCJcbiAqICAgICAgUi50eXBlKDEpOyAvLz0+IFwiTnVtYmVyXCJcbiAqICAgICAgUi50eXBlKGZhbHNlKTsgLy89PiBcIkJvb2xlYW5cIlxuICogICAgICBSLnR5cGUoJ3MnKTsgLy89PiBcIlN0cmluZ1wiXG4gKiAgICAgIFIudHlwZShudWxsKTsgLy89PiBcIk51bGxcIlxuICogICAgICBSLnR5cGUoW10pOyAvLz0+IFwiQXJyYXlcIlxuICogICAgICBSLnR5cGUoL1tBLXpdLyk7IC8vPT4gXCJSZWdFeHBcIlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IF9jdXJyeTEoZnVuY3Rpb24gdHlwZSh2YWwpIHtcbiAgcmV0dXJuIHZhbCA9PT0gbnVsbCAgICAgID8gJ051bGwnICAgICAgOlxuICAgICAgICAgdmFsID09PSB1bmRlZmluZWQgPyAnVW5kZWZpbmVkJyA6XG4gICAgICAgICBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsKS5zbGljZSg4LCAtMSk7XG59KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9yYW1kYS9zcmMvdHlwZS5qc1xuLy8gbW9kdWxlIGlkID0gMTkyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 193 */
/* no static exports found */
/* all exports used */
/*!**************************************************!*\
  !*** ./~/tangram-reference/1.0.0/reference.json ***!
  \**************************************************/
/***/ (function(module, exports) {

eval("module.exports = {\n\t\"version\": \"1.0.0\",\n\t\"symbolizers\": {\n\t\t\"polygon\": {\n\t\t\t\"fill\": {\n\t\t\t\t\"css\": \"polygon-fill\",\n\t\t\t\t\"type\": \"color\",\n\t\t\t\t\"default-value\": \"rgba(128,128,128,1)\",\n\t\t\t\t\"default-meaning\": \"gray and fully opaque (alpha = 1), same as rgb(128,128,128)\",\n\t\t\t\t\"doc\": \"Fill color to assign to a polygon\"\n\t\t\t},\n\t\t\t\"fill-opacity\": {\n\t\t\t\t\"css\": \"polygon-opacity\",\n\t\t\t\t\"type\": \"float\",\n\t\t\t\t\"doc\": \"The opacity of the polygon\",\n\t\t\t\t\"default-value\": 1,\n\t\t\t\t\"default-meaning\": \"opaque\"\n\t\t\t},\n\t\t\t\"comp-op\": {\n\t\t\t\t\"css\": \"polygon-comp-op\",\n\t\t\t\t\"default-value\": \"src-over\",\n\t\t\t\t\"default-meaning\": \"Add the current symbolizer on top of other symbolizer.\",\n\t\t\t\t\"doc\": \"Composite operation. This defines how this symbolizer should behave relative to symbolizers atop or below it.\",\n\t\t\t\t\"type\": [\n\t\t\t\t\t\"multiply\",\n\t\t\t\t\t\"add\",\n\t\t\t\t\t\"overlay\"\n\t\t\t\t],\n\t\t\t\t\"expression\": true\n\t\t\t}\n\t\t},\n\t\t\"polygon-pattern\": {\n\t\t\t\"file\": {\n\t\t\t\t\"css\": \"polygon-pattern-file\",\n\t\t\t\t\"type\": \"uri\",\n\t\t\t\t\"expression\": true,\n\t\t\t\t\"default-value\": \"none\",\n\t\t\t\t\"required\": true,\n\t\t\t\t\"doc\": \"Image to use as a repeated pattern fill within a polygon. Accepted formats: svg, jpg, png, tiff, and webp.\",\n\t\t\t\t\"default-meaning\": \"\"\n\t\t\t}\n\t\t},\n\t\t\"line\": {\n\t\t\t\"stroke\": {\n\t\t\t\t\"css\": \"line-color\",\n\t\t\t\t\"default-value\": \"rgba(0,0,0,1)\",\n\t\t\t\t\"type\": \"color\",\n\t\t\t\t\"default-meaning\": \"black and fully opaque (alpha = 1), same as rgb(0,0,0)\",\n\t\t\t\t\"doc\": \"The color of a drawn line\"\n\t\t\t},\n\t\t\t\"stroke-width\": {\n\t\t\t\t\"css\": \"line-width\",\n\t\t\t\t\"default-value\": 1,\n\t\t\t\t\"type\": \"float\",\n\t\t\t\t\"doc\": \"The width of a line in pixels\"\n\t\t\t},\n\t\t\t\"stroke-opacity\": {\n\t\t\t\t\"css\": \"line-opacity\",\n\t\t\t\t\"default-value\": 1,\n\t\t\t\t\"type\": \"float\",\n\t\t\t\t\"default-meaning\": \"opaque\",\n\t\t\t\t\"doc\": \"The opacity of a line\"\n\t\t\t},\n\t\t\t\"stroke-linejoin\": {\n\t\t\t\t\"css\": \"line-join\",\n\t\t\t\t\"default-value\": \"miter\",\n\t\t\t\t\"type\": [\n\t\t\t\t\t\"miter\",\n\t\t\t\t\t\"miter-revert\",\n\t\t\t\t\t\"round\",\n\t\t\t\t\t\"bevel\"\n\t\t\t\t],\n\t\t\t\t\"expression\": true,\n\t\t\t\t\"doc\": \"The behavior of lines when joining.\",\n\t\t\t\t\"default-meaning\": \"The line joins will be rendered using a miter look.\"\n\t\t\t},\n\t\t\t\"stroke-linecap\": {\n\t\t\t\t\"css\": \"line-cap\",\n\t\t\t\t\"default-value\": \"butt\",\n\t\t\t\t\"type\": [\n\t\t\t\t\t\"butt\",\n\t\t\t\t\t\"round\",\n\t\t\t\t\t\"square\"\n\t\t\t\t],\n\t\t\t\t\"expression\": true,\n\t\t\t\t\"doc\": \"The display of line endings.\",\n\t\t\t\t\"default-meaning\": \"The line endings will be rendered using a butt look.\"\n\t\t\t},\n\t\t\t\"comp-op\": {\n\t\t\t\t\"css\": \"line-comp-op\",\n\t\t\t\t\"default-value\": \"overlay\",\n\t\t\t\t\"default-meaning\": \"Add the current symbolizer on top of other symbolizer.\",\n\t\t\t\t\"doc\": \"Composite operation. This defines how this symbolizer should behave relative to symbolizers atop or below it.\",\n\t\t\t\t\"type\": [\n\t\t\t\t\t\"multiply\",\n\t\t\t\t\t\"add\",\n\t\t\t\t\t\"overlay\"\n\t\t\t\t],\n\t\t\t\t\"expression\": true\n\t\t\t},\n\t\t\t\"stroke-dasharray\": {\n\t\t\t\t\"css\": \"line-dasharray\",\n\t\t\t\t\"type\": \"numbers\",\n\t\t\t\t\"expression\": true,\n\t\t\t\t\"doc\": \"A pair of length values [a,b], where (a) is the dash length and (b) is the gap length respectively. More than two values are supported for more complex patterns.\",\n\t\t\t\t\"default-value\": \"none\",\n\t\t\t\t\"default-meaning\": \"The line will be drawn without dashes.\"\n\t\t\t}\n\t\t},\n\t\t\"markers\": {\n\t\t\t\"file\": {\n\t\t\t\t\"css\": \"marker-file\",\n\t\t\t\t\"doc\": \"A file that this marker shows at each placement. If no file is given, the marker will show an ellipse. Accepted formats: svg, jpg, png, tiff, and webp.\",\n\t\t\t\t\"default-value\": \"none\",\n\t\t\t\t\"default-meaning\": \"An ellipse or circle, if width equals height.\",\n\t\t\t\t\"type\": \"uri\",\n\t\t\t\t\"expression\": true\n\t\t\t},\n\t\t\t\"opacity\": {\n\t\t\t\t\"css\": \"marker-opacity\",\n\t\t\t\t\"doc\": \"The overall opacity of the marker, if set, overrides both the opacity of both the fill and stroke\",\n\t\t\t\t\"default-value\": 1,\n\t\t\t\t\"default-meaning\": \"The stroke-opacity and fill-opacity will be used\",\n\t\t\t\t\"type\": \"float\"\n\t\t\t},\n\t\t\t\"fill\": {\n\t\t\t\t\"css\": \"marker-fill\",\n\t\t\t\t\"default-value\": \"#FFF\",\n\t\t\t\t\"doc\": \"The color of the area of the marker.\",\n\t\t\t\t\"type\": \"color\",\n\t\t\t\t\"expression\": true\n\t\t\t},\n\t\t\t\"allow-overlap\": {\n\t\t\t\t\"css\": \"marker-allow-overlap\",\n\t\t\t\t\"type\": \"boolean\",\n\t\t\t\t\"expression\": true,\n\t\t\t\t\"default-value\": false,\n\t\t\t\t\"doc\": \"Control whether overlapping markers are shown or hidden.\",\n\t\t\t\t\"default-meaning\": \"Do not allow markers to overlap with each other - overlapping markers will not be shown.\"\n\t\t\t},\n\t\t\t\"width\": {\n\t\t\t\t\"css\": \"marker-width\",\n\t\t\t\t\"default-value\": 10,\n\t\t\t\t\"doc\": \"The width of the marker, if using one of the default types.\",\n\t\t\t\t\"type\": \"float\",\n\t\t\t\t\"expression\": true,\n\t\t\t\t\"default-meaning\": \"The marker width is 10 pixels.\"\n\t\t\t},\n\t\t\t\"fill-opacity\": {\n\t\t\t\t\"css\": \"marker-fill-opacity\",\n\t\t\t\t\"doc\": \"The fill opacity of the marker.\",\n\t\t\t\t\"default-value\": 1,\n\t\t\t\t\"expression\": true,\n\t\t\t\t\"default-meaning\": \"Color is fully opaque.\",\n\t\t\t\t\"type\": \"float\"\n\t\t\t},\n\t\t\t\"comp-op\": {\n\t\t\t\t\"css\": \"marker-comp-op\",\n\t\t\t\t\"default-value\": \"src-over\",\n\t\t\t\t\"default-meaning\": \"Add the current symbolizer on top of other symbolizer.\",\n\t\t\t\t\"doc\": \"Composite operation. This defines how this symbolizer should behave relative to symbolizers atop or below it.\",\n\t\t\t\t\"type\": [\n\t\t\t\t\t\"multiply\",\n\t\t\t\t\t\"add\",\n\t\t\t\t\t\"overlay\"\n\t\t\t\t],\n\t\t\t\t\"expression\": true\n\t\t\t},\n\t\t\t\"stroke\": {\n\t\t\t\t\"css\": \"marker-line-color\",\n\t\t\t\t\"doc\": \"The color of the stroke around the marker.\",\n\t\t\t\t\"default-value\": \"black\",\n\t\t\t\t\"type\": \"color\",\n\t\t\t\t\"expression\": true,\n\t\t\t\t\"default-meaning\": \"The marker will be drawn with a black outline.\"\n\t\t\t},\n\t\t\t\"stroke-width\": {\n\t\t\t\t\"css\": \"marker-line-width\",\n\t\t\t\t\"default-value\": 0.5,\n\t\t\t\t\"doc\": \"The width of the stroke around the marker, in pixels. This is positioned on the boundary, so high values can cover the area itself.\",\n\t\t\t\t\"type\": \"float\",\n\t\t\t\t\"expression\": true,\n\t\t\t\t\"default-meaning\": \"The marker will be drawn with an outline of .5 pixels wide.\"\n\t\t\t},\n\t\t\t\"stroke-opacity\": {\n\t\t\t\t\"css\": \"marker-line-opacity\",\n\t\t\t\t\"default-value\": 1,\n\t\t\t\t\"default-meaning\": \"Color is fully opaque.\",\n\t\t\t\t\"doc\": \"The opacity of a line.\",\n\t\t\t\t\"type\": \"float\",\n\t\t\t\t\"expression\": true\n\t\t\t},\n\t\t\t\"placement\": {\n\t\t\t\t\"css\": \"marker-placement\",\n\t\t\t\t\"type\": [\n\t\t\t\t\t\"point\"\n\t\t\t\t],\n\t\t\t\t\"expression\": true,\n\t\t\t\t\"default-value\": \"point\",\n\t\t\t\t\"default-meaning\": \"Place markers at the center point (centroid) of the geometry.\",\n\t\t\t\t\"doc\": \"Attempt to place markers on a point, in the center of a polygon, or if markers-placement:line, then multiple times along a line. 'interior' placement can be used to ensure that points placed on polygons are forced to be inside the polygon interior. The 'vertex-first' and 'vertex-last' options can be used to place markers at the first or last vertex of lines or polygons.\"\n\t\t\t},\n\t\t\t\"marker-type\": {\n\t\t\t\t\"css\": \"marker-type\",\n\t\t\t\t\"type\": [\n\t\t\t\t\t\"ellipse\"\n\t\t\t\t],\n\t\t\t\t\"expression\": true,\n\t\t\t\t\"default-value\": \"ellipse\",\n\t\t\t\t\"default-meaning\": \"The marker shape is an ellipse.\",\n\t\t\t\t\"doc\": \"The default marker-type. If a SVG file is not given as the marker-file parameter, the renderer provides either an arrow or an ellipse (a circle if height is equal to width).\",\n\t\t\t\t\"status\": \"deprecated\"\n\t\t\t}\n\t\t},\n\t\t\"text\": {\n\t\t\t\"name\": {\n\t\t\t\t\"css\": \"text-name\",\n\t\t\t\t\"type\": \"string\",\n\t\t\t\t\"expression\": true,\n\t\t\t\t\"required\": true,\n\t\t\t\t\"default-value\": \"none\",\n\t\t\t\t\"serialization\": \"content\",\n\t\t\t\t\"doc\": \"Value to use for a text label. Data columns are specified using brackets like [column_name].\",\n\t\t\t\t\"default-meaning\": \"\"\n\t\t\t},\n\t\t\t\"size\": {\n\t\t\t\t\"css\": \"text-size\",\n\t\t\t\t\"type\": \"float\",\n\t\t\t\t\"expression\": true,\n\t\t\t\t\"default-value\": 10,\n\t\t\t\t\"doc\": \"Text size in pixels.\",\n\t\t\t\t\"default-meaning\": \"Font size of 10 will be used to render text.\"\n\t\t\t},\n\t\t\t\"fill\": {\n\t\t\t\t\"css\": \"text-fill\",\n\t\t\t\t\"type\": \"color\",\n\t\t\t\t\"expression\": true,\n\t\t\t\t\"doc\": \"Specifies the color for the text.\",\n\t\t\t\t\"default-value\": \"black\",\n\t\t\t\t\"default-meaning\": \"The text will be rendered black.\"\n\t\t\t},\n\t\t\t\"opacity\": {\n\t\t\t\t\"css\": \"text-opacity\",\n\t\t\t\t\"doc\": \"A number from 0 to 1 specifying the opacity for the text.\",\n\t\t\t\t\"default-value\": 1,\n\t\t\t\t\"default-meaning\": \"Fully opaque\",\n\t\t\t\t\"expression\": true,\n\t\t\t\t\"type\": \"float\"\n\t\t\t}\n\t\t}\n\t},\n\t\"colors\": {\n\t\t\"aliceblue\": [\n\t\t\t240,\n\t\t\t248,\n\t\t\t255\n\t\t],\n\t\t\"antiquewhite\": [\n\t\t\t250,\n\t\t\t235,\n\t\t\t215\n\t\t],\n\t\t\"aqua\": [\n\t\t\t0,\n\t\t\t255,\n\t\t\t255\n\t\t],\n\t\t\"aquamarine\": [\n\t\t\t127,\n\t\t\t255,\n\t\t\t212\n\t\t],\n\t\t\"azure\": [\n\t\t\t240,\n\t\t\t255,\n\t\t\t255\n\t\t],\n\t\t\"beige\": [\n\t\t\t245,\n\t\t\t245,\n\t\t\t220\n\t\t],\n\t\t\"bisque\": [\n\t\t\t255,\n\t\t\t228,\n\t\t\t196\n\t\t],\n\t\t\"black\": [\n\t\t\t0,\n\t\t\t0,\n\t\t\t0\n\t\t],\n\t\t\"blanchedalmond\": [\n\t\t\t255,\n\t\t\t235,\n\t\t\t205\n\t\t],\n\t\t\"blue\": [\n\t\t\t0,\n\t\t\t0,\n\t\t\t255\n\t\t],\n\t\t\"blueviolet\": [\n\t\t\t138,\n\t\t\t43,\n\t\t\t226\n\t\t],\n\t\t\"brown\": [\n\t\t\t165,\n\t\t\t42,\n\t\t\t42\n\t\t],\n\t\t\"burlywood\": [\n\t\t\t222,\n\t\t\t184,\n\t\t\t135\n\t\t],\n\t\t\"cadetblue\": [\n\t\t\t95,\n\t\t\t158,\n\t\t\t160\n\t\t],\n\t\t\"chartreuse\": [\n\t\t\t127,\n\t\t\t255,\n\t\t\t0\n\t\t],\n\t\t\"chocolate\": [\n\t\t\t210,\n\t\t\t105,\n\t\t\t30\n\t\t],\n\t\t\"coral\": [\n\t\t\t255,\n\t\t\t127,\n\t\t\t80\n\t\t],\n\t\t\"cornflowerblue\": [\n\t\t\t100,\n\t\t\t149,\n\t\t\t237\n\t\t],\n\t\t\"cornsilk\": [\n\t\t\t255,\n\t\t\t248,\n\t\t\t220\n\t\t],\n\t\t\"crimson\": [\n\t\t\t220,\n\t\t\t20,\n\t\t\t60\n\t\t],\n\t\t\"cyan\": [\n\t\t\t0,\n\t\t\t255,\n\t\t\t255\n\t\t],\n\t\t\"darkblue\": [\n\t\t\t0,\n\t\t\t0,\n\t\t\t139\n\t\t],\n\t\t\"darkcyan\": [\n\t\t\t0,\n\t\t\t139,\n\t\t\t139\n\t\t],\n\t\t\"darkgoldenrod\": [\n\t\t\t184,\n\t\t\t134,\n\t\t\t11\n\t\t],\n\t\t\"darkgray\": [\n\t\t\t169,\n\t\t\t169,\n\t\t\t169\n\t\t],\n\t\t\"darkgreen\": [\n\t\t\t0,\n\t\t\t100,\n\t\t\t0\n\t\t],\n\t\t\"darkgrey\": [\n\t\t\t169,\n\t\t\t169,\n\t\t\t169\n\t\t],\n\t\t\"darkkhaki\": [\n\t\t\t189,\n\t\t\t183,\n\t\t\t107\n\t\t],\n\t\t\"darkmagenta\": [\n\t\t\t139,\n\t\t\t0,\n\t\t\t139\n\t\t],\n\t\t\"darkolivegreen\": [\n\t\t\t85,\n\t\t\t107,\n\t\t\t47\n\t\t],\n\t\t\"darkorange\": [\n\t\t\t255,\n\t\t\t140,\n\t\t\t0\n\t\t],\n\t\t\"darkorchid\": [\n\t\t\t153,\n\t\t\t50,\n\t\t\t204\n\t\t],\n\t\t\"darkred\": [\n\t\t\t139,\n\t\t\t0,\n\t\t\t0\n\t\t],\n\t\t\"darksalmon\": [\n\t\t\t233,\n\t\t\t150,\n\t\t\t122\n\t\t],\n\t\t\"darkseagreen\": [\n\t\t\t143,\n\t\t\t188,\n\t\t\t143\n\t\t],\n\t\t\"darkslateblue\": [\n\t\t\t72,\n\t\t\t61,\n\t\t\t139\n\t\t],\n\t\t\"darkslategrey\": [\n\t\t\t47,\n\t\t\t79,\n\t\t\t79\n\t\t],\n\t\t\"darkturquoise\": [\n\t\t\t0,\n\t\t\t206,\n\t\t\t209\n\t\t],\n\t\t\"darkviolet\": [\n\t\t\t148,\n\t\t\t0,\n\t\t\t211\n\t\t],\n\t\t\"deeppink\": [\n\t\t\t255,\n\t\t\t20,\n\t\t\t147\n\t\t],\n\t\t\"deepskyblue\": [\n\t\t\t0,\n\t\t\t191,\n\t\t\t255\n\t\t],\n\t\t\"dimgray\": [\n\t\t\t105,\n\t\t\t105,\n\t\t\t105\n\t\t],\n\t\t\"dimgrey\": [\n\t\t\t105,\n\t\t\t105,\n\t\t\t105\n\t\t],\n\t\t\"dodgerblue\": [\n\t\t\t30,\n\t\t\t144,\n\t\t\t255\n\t\t],\n\t\t\"firebrick\": [\n\t\t\t178,\n\t\t\t34,\n\t\t\t34\n\t\t],\n\t\t\"floralwhite\": [\n\t\t\t255,\n\t\t\t250,\n\t\t\t240\n\t\t],\n\t\t\"forestgreen\": [\n\t\t\t34,\n\t\t\t139,\n\t\t\t34\n\t\t],\n\t\t\"fuchsia\": [\n\t\t\t255,\n\t\t\t0,\n\t\t\t255\n\t\t],\n\t\t\"gainsboro\": [\n\t\t\t220,\n\t\t\t220,\n\t\t\t220\n\t\t],\n\t\t\"ghostwhite\": [\n\t\t\t248,\n\t\t\t248,\n\t\t\t255\n\t\t],\n\t\t\"gold\": [\n\t\t\t255,\n\t\t\t215,\n\t\t\t0\n\t\t],\n\t\t\"goldenrod\": [\n\t\t\t218,\n\t\t\t165,\n\t\t\t32\n\t\t],\n\t\t\"gray\": [\n\t\t\t128,\n\t\t\t128,\n\t\t\t128\n\t\t],\n\t\t\"grey\": [\n\t\t\t128,\n\t\t\t128,\n\t\t\t128\n\t\t],\n\t\t\"green\": [\n\t\t\t0,\n\t\t\t128,\n\t\t\t0\n\t\t],\n\t\t\"greenyellow\": [\n\t\t\t173,\n\t\t\t255,\n\t\t\t47\n\t\t],\n\t\t\"honeydew\": [\n\t\t\t240,\n\t\t\t255,\n\t\t\t240\n\t\t],\n\t\t\"hotpink\": [\n\t\t\t255,\n\t\t\t105,\n\t\t\t180\n\t\t],\n\t\t\"indianred\": [\n\t\t\t205,\n\t\t\t92,\n\t\t\t92\n\t\t],\n\t\t\"indigo\": [\n\t\t\t75,\n\t\t\t0,\n\t\t\t130\n\t\t],\n\t\t\"ivory\": [\n\t\t\t255,\n\t\t\t255,\n\t\t\t240\n\t\t],\n\t\t\"khaki\": [\n\t\t\t240,\n\t\t\t230,\n\t\t\t140\n\t\t],\n\t\t\"lavender\": [\n\t\t\t230,\n\t\t\t230,\n\t\t\t250\n\t\t],\n\t\t\"lavenderblush\": [\n\t\t\t255,\n\t\t\t240,\n\t\t\t245\n\t\t],\n\t\t\"lawngreen\": [\n\t\t\t124,\n\t\t\t252,\n\t\t\t0\n\t\t],\n\t\t\"lemonchiffon\": [\n\t\t\t255,\n\t\t\t250,\n\t\t\t205\n\t\t],\n\t\t\"lightblue\": [\n\t\t\t173,\n\t\t\t216,\n\t\t\t230\n\t\t],\n\t\t\"lightcoral\": [\n\t\t\t240,\n\t\t\t128,\n\t\t\t128\n\t\t],\n\t\t\"lightcyan\": [\n\t\t\t224,\n\t\t\t255,\n\t\t\t255\n\t\t],\n\t\t\"lightgoldenrodyellow\": [\n\t\t\t250,\n\t\t\t250,\n\t\t\t210\n\t\t],\n\t\t\"lightgray\": [\n\t\t\t211,\n\t\t\t211,\n\t\t\t211\n\t\t],\n\t\t\"lightgreen\": [\n\t\t\t144,\n\t\t\t238,\n\t\t\t144\n\t\t],\n\t\t\"lightgrey\": [\n\t\t\t211,\n\t\t\t211,\n\t\t\t211\n\t\t],\n\t\t\"lightpink\": [\n\t\t\t255,\n\t\t\t182,\n\t\t\t193\n\t\t],\n\t\t\"lightsalmon\": [\n\t\t\t255,\n\t\t\t160,\n\t\t\t122\n\t\t],\n\t\t\"lightseagreen\": [\n\t\t\t32,\n\t\t\t178,\n\t\t\t170\n\t\t],\n\t\t\"lightskyblue\": [\n\t\t\t135,\n\t\t\t206,\n\t\t\t250\n\t\t],\n\t\t\"lightslategray\": [\n\t\t\t119,\n\t\t\t136,\n\t\t\t153\n\t\t],\n\t\t\"lightslategrey\": [\n\t\t\t119,\n\t\t\t136,\n\t\t\t153\n\t\t],\n\t\t\"lightsteelblue\": [\n\t\t\t176,\n\t\t\t196,\n\t\t\t222\n\t\t],\n\t\t\"lightyellow\": [\n\t\t\t255,\n\t\t\t255,\n\t\t\t224\n\t\t],\n\t\t\"lime\": [\n\t\t\t0,\n\t\t\t255,\n\t\t\t0\n\t\t],\n\t\t\"limegreen\": [\n\t\t\t50,\n\t\t\t205,\n\t\t\t50\n\t\t],\n\t\t\"linen\": [\n\t\t\t250,\n\t\t\t240,\n\t\t\t230\n\t\t],\n\t\t\"magenta\": [\n\t\t\t255,\n\t\t\t0,\n\t\t\t255\n\t\t],\n\t\t\"maroon\": [\n\t\t\t128,\n\t\t\t0,\n\t\t\t0\n\t\t],\n\t\t\"mediumaquamarine\": [\n\t\t\t102,\n\t\t\t205,\n\t\t\t170\n\t\t],\n\t\t\"mediumblue\": [\n\t\t\t0,\n\t\t\t0,\n\t\t\t205\n\t\t],\n\t\t\"mediumorchid\": [\n\t\t\t186,\n\t\t\t85,\n\t\t\t211\n\t\t],\n\t\t\"mediumpurple\": [\n\t\t\t147,\n\t\t\t112,\n\t\t\t219\n\t\t],\n\t\t\"mediumseagreen\": [\n\t\t\t60,\n\t\t\t179,\n\t\t\t113\n\t\t],\n\t\t\"mediumslateblue\": [\n\t\t\t123,\n\t\t\t104,\n\t\t\t238\n\t\t],\n\t\t\"mediumspringgreen\": [\n\t\t\t0,\n\t\t\t250,\n\t\t\t154\n\t\t],\n\t\t\"mediumturquoise\": [\n\t\t\t72,\n\t\t\t209,\n\t\t\t204\n\t\t],\n\t\t\"mediumvioletred\": [\n\t\t\t199,\n\t\t\t21,\n\t\t\t133\n\t\t],\n\t\t\"midnightblue\": [\n\t\t\t25,\n\t\t\t25,\n\t\t\t112\n\t\t],\n\t\t\"mintcream\": [\n\t\t\t245,\n\t\t\t255,\n\t\t\t250\n\t\t],\n\t\t\"mistyrose\": [\n\t\t\t255,\n\t\t\t228,\n\t\t\t225\n\t\t],\n\t\t\"moccasin\": [\n\t\t\t255,\n\t\t\t228,\n\t\t\t181\n\t\t],\n\t\t\"navajowhite\": [\n\t\t\t255,\n\t\t\t222,\n\t\t\t173\n\t\t],\n\t\t\"navy\": [\n\t\t\t0,\n\t\t\t0,\n\t\t\t128\n\t\t],\n\t\t\"oldlace\": [\n\t\t\t253,\n\t\t\t245,\n\t\t\t230\n\t\t],\n\t\t\"olive\": [\n\t\t\t128,\n\t\t\t128,\n\t\t\t0\n\t\t],\n\t\t\"olivedrab\": [\n\t\t\t107,\n\t\t\t142,\n\t\t\t35\n\t\t],\n\t\t\"orange\": [\n\t\t\t255,\n\t\t\t165,\n\t\t\t0\n\t\t],\n\t\t\"orangered\": [\n\t\t\t255,\n\t\t\t69,\n\t\t\t0\n\t\t],\n\t\t\"orchid\": [\n\t\t\t218,\n\t\t\t112,\n\t\t\t214\n\t\t],\n\t\t\"palegoldenrod\": [\n\t\t\t238,\n\t\t\t232,\n\t\t\t170\n\t\t],\n\t\t\"palegreen\": [\n\t\t\t152,\n\t\t\t251,\n\t\t\t152\n\t\t],\n\t\t\"paleturquoise\": [\n\t\t\t175,\n\t\t\t238,\n\t\t\t238\n\t\t],\n\t\t\"palevioletred\": [\n\t\t\t219,\n\t\t\t112,\n\t\t\t147\n\t\t],\n\t\t\"papayawhip\": [\n\t\t\t255,\n\t\t\t239,\n\t\t\t213\n\t\t],\n\t\t\"peachpuff\": [\n\t\t\t255,\n\t\t\t218,\n\t\t\t185\n\t\t],\n\t\t\"peru\": [\n\t\t\t205,\n\t\t\t133,\n\t\t\t63\n\t\t],\n\t\t\"pink\": [\n\t\t\t255,\n\t\t\t192,\n\t\t\t203\n\t\t],\n\t\t\"plum\": [\n\t\t\t221,\n\t\t\t160,\n\t\t\t221\n\t\t],\n\t\t\"powderblue\": [\n\t\t\t176,\n\t\t\t224,\n\t\t\t230\n\t\t],\n\t\t\"purple\": [\n\t\t\t128,\n\t\t\t0,\n\t\t\t128\n\t\t],\n\t\t\"red\": [\n\t\t\t255,\n\t\t\t0,\n\t\t\t0\n\t\t],\n\t\t\"rosybrown\": [\n\t\t\t188,\n\t\t\t143,\n\t\t\t143\n\t\t],\n\t\t\"royalblue\": [\n\t\t\t65,\n\t\t\t105,\n\t\t\t225\n\t\t],\n\t\t\"saddlebrown\": [\n\t\t\t139,\n\t\t\t69,\n\t\t\t19\n\t\t],\n\t\t\"salmon\": [\n\t\t\t250,\n\t\t\t128,\n\t\t\t114\n\t\t],\n\t\t\"sandybrown\": [\n\t\t\t244,\n\t\t\t164,\n\t\t\t96\n\t\t],\n\t\t\"seagreen\": [\n\t\t\t46,\n\t\t\t139,\n\t\t\t87\n\t\t],\n\t\t\"seashell\": [\n\t\t\t255,\n\t\t\t245,\n\t\t\t238\n\t\t],\n\t\t\"sienna\": [\n\t\t\t160,\n\t\t\t82,\n\t\t\t45\n\t\t],\n\t\t\"silver\": [\n\t\t\t192,\n\t\t\t192,\n\t\t\t192\n\t\t],\n\t\t\"skyblue\": [\n\t\t\t135,\n\t\t\t206,\n\t\t\t235\n\t\t],\n\t\t\"slateblue\": [\n\t\t\t106,\n\t\t\t90,\n\t\t\t205\n\t\t],\n\t\t\"slategray\": [\n\t\t\t112,\n\t\t\t128,\n\t\t\t144\n\t\t],\n\t\t\"slategrey\": [\n\t\t\t112,\n\t\t\t128,\n\t\t\t144\n\t\t],\n\t\t\"snow\": [\n\t\t\t255,\n\t\t\t250,\n\t\t\t250\n\t\t],\n\t\t\"springgreen\": [\n\t\t\t0,\n\t\t\t255,\n\t\t\t127\n\t\t],\n\t\t\"steelblue\": [\n\t\t\t70,\n\t\t\t130,\n\t\t\t180\n\t\t],\n\t\t\"tan\": [\n\t\t\t210,\n\t\t\t180,\n\t\t\t140\n\t\t],\n\t\t\"teal\": [\n\t\t\t0,\n\t\t\t128,\n\t\t\t128\n\t\t],\n\t\t\"thistle\": [\n\t\t\t216,\n\t\t\t191,\n\t\t\t216\n\t\t],\n\t\t\"tomato\": [\n\t\t\t255,\n\t\t\t99,\n\t\t\t71\n\t\t],\n\t\t\"turquoise\": [\n\t\t\t64,\n\t\t\t224,\n\t\t\t208\n\t\t],\n\t\t\"violet\": [\n\t\t\t238,\n\t\t\t130,\n\t\t\t238\n\t\t],\n\t\t\"wheat\": [\n\t\t\t245,\n\t\t\t222,\n\t\t\t179\n\t\t],\n\t\t\"white\": [\n\t\t\t255,\n\t\t\t255,\n\t\t\t255\n\t\t],\n\t\t\"whitesmoke\": [\n\t\t\t245,\n\t\t\t245,\n\t\t\t245\n\t\t],\n\t\t\"yellow\": [\n\t\t\t255,\n\t\t\t255,\n\t\t\t0\n\t\t],\n\t\t\"yellowgreen\": [\n\t\t\t154,\n\t\t\t205,\n\t\t\t50\n\t\t],\n\t\t\"transparent\": [\n\t\t\t0,\n\t\t\t0,\n\t\t\t0,\n\t\t\t0\n\t\t]\n\t}\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 194 */
/* no static exports found */
/* all exports used */
/*!***********************************************!*\
  !*** ./~/util/~/inherits/inherits_browser.js ***!
  \***********************************************/
/***/ (function(module, exports) {

eval("if (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    ctor.prototype = Object.create(superCtor.prototype, {\n      constructor: {\n        value: ctor,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    var TempCtor = function () {}\n    TempCtor.prototype = superCtor.prototype\n    ctor.prototype = new TempCtor()\n    ctor.prototype.constructor = ctor\n  }\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTk0LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi91dGlsL34vaW5oZXJpdHMvaW5oZXJpdHNfYnJvd3Nlci5qcz9hYmE1Il0sInNvdXJjZXNDb250ZW50IjpbImlmICh0eXBlb2YgT2JqZWN0LmNyZWF0ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAvLyBpbXBsZW1lbnRhdGlvbiBmcm9tIHN0YW5kYXJkIG5vZGUuanMgJ3V0aWwnIG1vZHVsZVxuICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGluaGVyaXRzKGN0b3IsIHN1cGVyQ3Rvcikge1xuICAgIGN0b3Iuc3VwZXJfID0gc3VwZXJDdG9yXG4gICAgY3Rvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ3Rvci5wcm90b3R5cGUsIHtcbiAgICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICAgIHZhbHVlOiBjdG9yLFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgfVxuICAgIH0pO1xuICB9O1xufSBlbHNlIHtcbiAgLy8gb2xkIHNjaG9vbCBzaGltIGZvciBvbGQgYnJvd3NlcnNcbiAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpbmhlcml0cyhjdG9yLCBzdXBlckN0b3IpIHtcbiAgICBjdG9yLnN1cGVyXyA9IHN1cGVyQ3RvclxuICAgIHZhciBUZW1wQ3RvciA9IGZ1bmN0aW9uICgpIHt9XG4gICAgVGVtcEN0b3IucHJvdG90eXBlID0gc3VwZXJDdG9yLnByb3RvdHlwZVxuICAgIGN0b3IucHJvdG90eXBlID0gbmV3IFRlbXBDdG9yKClcbiAgICBjdG9yLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGN0b3JcbiAgfVxufVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3V0aWwvfi9pbmhlcml0cy9pbmhlcml0c19icm93c2VyLmpzXG4vLyBtb2R1bGUgaWQgPSAxOTRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 195 */
/* no static exports found */
/* all exports used */
/*!*******************************************!*\
  !*** ./~/util/support/isBufferBrowser.js ***!
  \*******************************************/
/***/ (function(module, exports) {

eval("module.exports = function isBuffer(arg) {\n  return arg && typeof arg === 'object'\n    && typeof arg.copy === 'function'\n    && typeof arg.fill === 'function'\n    && typeof arg.readUInt8 === 'function';\n}//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTk1LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi91dGlsL3N1cHBvcnQvaXNCdWZmZXJCcm93c2VyLmpzPzg1OTYiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0J1ZmZlcihhcmcpIHtcbiAgcmV0dXJuIGFyZyAmJiB0eXBlb2YgYXJnID09PSAnb2JqZWN0J1xuICAgICYmIHR5cGVvZiBhcmcuY29weSA9PT0gJ2Z1bmN0aW9uJ1xuICAgICYmIHR5cGVvZiBhcmcuZmlsbCA9PT0gJ2Z1bmN0aW9uJ1xuICAgICYmIHR5cGVvZiBhcmcucmVhZFVJbnQ4ID09PSAnZnVuY3Rpb24nO1xufVxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi91dGlsL3N1cHBvcnQvaXNCdWZmZXJCcm93c2VyLmpzXG4vLyBtb2R1bGUgaWQgPSAxOTVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=");

/***/ })
/******/ ])));
},{}],47:[function(_dereq_,module,exports){
// Generated by CoffeeScript 1.12.4
var Dumper, Inline, Utils;

Utils = _dereq_('./Utils');

Inline = _dereq_('./Inline');

Dumper = (function() {
  function Dumper() {}

  Dumper.indentation = 4;

  Dumper.prototype.dump = function(input, inline, indent, exceptionOnInvalidType, objectEncoder) {
    var i, key, len, output, prefix, value, willBeInlined;
    if (inline == null) {
      inline = 0;
    }
    if (indent == null) {
      indent = 0;
    }
    if (exceptionOnInvalidType == null) {
      exceptionOnInvalidType = false;
    }
    if (objectEncoder == null) {
      objectEncoder = null;
    }
    output = '';
    prefix = (indent ? Utils.strRepeat(' ', indent) : '');
    if (inline <= 0 || typeof input !== 'object' || input instanceof Date || Utils.isEmpty(input)) {
      output += prefix + Inline.dump(input, exceptionOnInvalidType, objectEncoder);
    } else {
      if (input instanceof Array) {
        for (i = 0, len = input.length; i < len; i++) {
          value = input[i];
          willBeInlined = inline - 1 <= 0 || typeof value !== 'object' || Utils.isEmpty(value);
          output += prefix + '-' + (willBeInlined ? ' ' : "\n") + this.dump(value, inline - 1, (willBeInlined ? 0 : indent + this.indentation), exceptionOnInvalidType, objectEncoder) + (willBeInlined ? "\n" : '');
        }
      } else {
        for (key in input) {
          value = input[key];
          willBeInlined = inline - 1 <= 0 || typeof value !== 'object' || Utils.isEmpty(value);
          output += prefix + Inline.dump(key, exceptionOnInvalidType, objectEncoder) + ':' + (willBeInlined ? ' ' : "\n") + this.dump(value, inline - 1, (willBeInlined ? 0 : indent + this.indentation), exceptionOnInvalidType, objectEncoder) + (willBeInlined ? "\n" : '');
        }
      }
    }
    return output;
  };

  return Dumper;

})();

module.exports = Dumper;

},{"./Inline":52,"./Utils":56}],48:[function(_dereq_,module,exports){
// Generated by CoffeeScript 1.12.4
var Escaper, Pattern;

Pattern = _dereq_('./Pattern');

Escaper = (function() {
  var ch;

  function Escaper() {}

  Escaper.LIST_ESCAPEES = ['\\', '\\\\', '\\"', '"', "\x00", "\x01", "\x02", "\x03", "\x04", "\x05", "\x06", "\x07", "\x08", "\x09", "\x0a", "\x0b", "\x0c", "\x0d", "\x0e", "\x0f", "\x10", "\x11", "\x12", "\x13", "\x14", "\x15", "\x16", "\x17", "\x18", "\x19", "\x1a", "\x1b", "\x1c", "\x1d", "\x1e", "\x1f", (ch = String.fromCharCode)(0x0085), ch(0x00A0), ch(0x2028), ch(0x2029)];

  Escaper.LIST_ESCAPED = ['\\\\', '\\"', '\\"', '\\"', "\\0", "\\x01", "\\x02", "\\x03", "\\x04", "\\x05", "\\x06", "\\a", "\\b", "\\t", "\\n", "\\v", "\\f", "\\r", "\\x0e", "\\x0f", "\\x10", "\\x11", "\\x12", "\\x13", "\\x14", "\\x15", "\\x16", "\\x17", "\\x18", "\\x19", "\\x1a", "\\e", "\\x1c", "\\x1d", "\\x1e", "\\x1f", "\\N", "\\_", "\\L", "\\P"];

  Escaper.MAPPING_ESCAPEES_TO_ESCAPED = (function() {
    var i, j, mapping, ref;
    mapping = {};
    for (i = j = 0, ref = Escaper.LIST_ESCAPEES.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
      mapping[Escaper.LIST_ESCAPEES[i]] = Escaper.LIST_ESCAPED[i];
    }
    return mapping;
  })();

  Escaper.PATTERN_CHARACTERS_TO_ESCAPE = new Pattern('[\\x00-\\x1f]|\xc2\x85|\xc2\xa0|\xe2\x80\xa8|\xe2\x80\xa9');

  Escaper.PATTERN_MAPPING_ESCAPEES = new Pattern(Escaper.LIST_ESCAPEES.join('|').split('\\').join('\\\\'));

  Escaper.PATTERN_SINGLE_QUOTING = new Pattern('[\\s\'":{}[\\],&*#?]|^[-?|<>=!%@`]');

  Escaper.requiresDoubleQuoting = function(value) {
    return this.PATTERN_CHARACTERS_TO_ESCAPE.test(value);
  };

  Escaper.escapeWithDoubleQuotes = function(value) {
    var result;
    result = this.PATTERN_MAPPING_ESCAPEES.replace(value, (function(_this) {
      return function(str) {
        return _this.MAPPING_ESCAPEES_TO_ESCAPED[str];
      };
    })(this));
    return '"' + result + '"';
  };

  Escaper.requiresSingleQuoting = function(value) {
    return this.PATTERN_SINGLE_QUOTING.test(value);
  };

  Escaper.escapeWithSingleQuotes = function(value) {
    return "'" + value.replace(/'/g, "''") + "'";
  };

  return Escaper;

})();

module.exports = Escaper;

},{"./Pattern":54}],49:[function(_dereq_,module,exports){
// Generated by CoffeeScript 1.12.4
var DumpException,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

DumpException = (function(superClass) {
  extend(DumpException, superClass);

  function DumpException(message, parsedLine, snippet) {
    this.message = message;
    this.parsedLine = parsedLine;
    this.snippet = snippet;
  }

  DumpException.prototype.toString = function() {
    if ((this.parsedLine != null) && (this.snippet != null)) {
      return '<DumpException> ' + this.message + ' (line ' + this.parsedLine + ': \'' + this.snippet + '\')';
    } else {
      return '<DumpException> ' + this.message;
    }
  };

  return DumpException;

})(Error);

module.exports = DumpException;

},{}],50:[function(_dereq_,module,exports){
// Generated by CoffeeScript 1.12.4
var ParseException,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ParseException = (function(superClass) {
  extend(ParseException, superClass);

  function ParseException(message, parsedLine, snippet) {
    this.message = message;
    this.parsedLine = parsedLine;
    this.snippet = snippet;
  }

  ParseException.prototype.toString = function() {
    if ((this.parsedLine != null) && (this.snippet != null)) {
      return '<ParseException> ' + this.message + ' (line ' + this.parsedLine + ': \'' + this.snippet + '\')';
    } else {
      return '<ParseException> ' + this.message;
    }
  };

  return ParseException;

})(Error);

module.exports = ParseException;

},{}],51:[function(_dereq_,module,exports){
// Generated by CoffeeScript 1.12.4
var ParseMore,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ParseMore = (function(superClass) {
  extend(ParseMore, superClass);

  function ParseMore(message, parsedLine, snippet) {
    this.message = message;
    this.parsedLine = parsedLine;
    this.snippet = snippet;
  }

  ParseMore.prototype.toString = function() {
    if ((this.parsedLine != null) && (this.snippet != null)) {
      return '<ParseMore> ' + this.message + ' (line ' + this.parsedLine + ': \'' + this.snippet + '\')';
    } else {
      return '<ParseMore> ' + this.message;
    }
  };

  return ParseMore;

})(Error);

module.exports = ParseMore;

},{}],52:[function(_dereq_,module,exports){
// Generated by CoffeeScript 1.12.4
var DumpException, Escaper, Inline, ParseException, ParseMore, Pattern, Unescaper, Utils,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

Pattern = _dereq_('./Pattern');

Unescaper = _dereq_('./Unescaper');

Escaper = _dereq_('./Escaper');

Utils = _dereq_('./Utils');

ParseException = _dereq_('./Exception/ParseException');

ParseMore = _dereq_('./Exception/ParseMore');

DumpException = _dereq_('./Exception/DumpException');

Inline = (function() {
  function Inline() {}

  Inline.REGEX_QUOTED_STRING = '(?:"(?:[^"\\\\]*(?:\\\\.[^"\\\\]*)*)"|\'(?:[^\']*(?:\'\'[^\']*)*)\')';

  Inline.PATTERN_TRAILING_COMMENTS = new Pattern('^\\s*#.*$');

  Inline.PATTERN_QUOTED_SCALAR = new Pattern('^' + Inline.REGEX_QUOTED_STRING);

  Inline.PATTERN_THOUSAND_NUMERIC_SCALAR = new Pattern('^(-|\\+)?[0-9,]+(\\.[0-9]+)?$');

  Inline.PATTERN_SCALAR_BY_DELIMITERS = {};

  Inline.settings = {};

  Inline.configure = function(exceptionOnInvalidType, objectDecoder) {
    if (exceptionOnInvalidType == null) {
      exceptionOnInvalidType = null;
    }
    if (objectDecoder == null) {
      objectDecoder = null;
    }
    this.settings.exceptionOnInvalidType = exceptionOnInvalidType;
    this.settings.objectDecoder = objectDecoder;
  };

  Inline.parse = function(value, exceptionOnInvalidType, objectDecoder) {
    var context, result;
    if (exceptionOnInvalidType == null) {
      exceptionOnInvalidType = false;
    }
    if (objectDecoder == null) {
      objectDecoder = null;
    }
    this.settings.exceptionOnInvalidType = exceptionOnInvalidType;
    this.settings.objectDecoder = objectDecoder;
    if (value == null) {
      return '';
    }
    value = Utils.trim(value);
    if (0 === value.length) {
      return '';
    }
    context = {
      exceptionOnInvalidType: exceptionOnInvalidType,
      objectDecoder: objectDecoder,
      i: 0
    };
    switch (value.charAt(0)) {
      case '[':
        result = this.parseSequence(value, context);
        ++context.i;
        break;
      case '{':
        result = this.parseMapping(value, context);
        ++context.i;
        break;
      default:
        result = this.parseScalar(value, null, ['"', "'"], context);
    }
    if (this.PATTERN_TRAILING_COMMENTS.replace(value.slice(context.i), '') !== '') {
      throw new ParseException('Unexpected characters near "' + value.slice(context.i) + '".');
    }
    return result;
  };

  Inline.dump = function(value, exceptionOnInvalidType, objectEncoder) {
    var ref, result, type;
    if (exceptionOnInvalidType == null) {
      exceptionOnInvalidType = false;
    }
    if (objectEncoder == null) {
      objectEncoder = null;
    }
    if (value == null) {
      return 'null';
    }
    type = typeof value;
    if (type === 'object') {
      if (value instanceof Date) {
        return value.toISOString();
      } else if (objectEncoder != null) {
        result = objectEncoder(value);
        if (typeof result === 'string' || (result != null)) {
          return result;
        }
      }
      return this.dumpObject(value);
    }
    if (type === 'boolean') {
      return (value ? 'true' : 'false');
    }
    if (Utils.isDigits(value)) {
      return (type === 'string' ? "'" + value + "'" : String(parseInt(value)));
    }
    if (Utils.isNumeric(value)) {
      return (type === 'string' ? "'" + value + "'" : String(parseFloat(value)));
    }
    if (type === 'number') {
      return (value === 2e308 ? '.Inf' : (value === -2e308 ? '-.Inf' : (isNaN(value) ? '.NaN' : value)));
    }
    if (Escaper.requiresDoubleQuoting(value)) {
      return Escaper.escapeWithDoubleQuotes(value);
    }
    if (Escaper.requiresSingleQuoting(value)) {
      return Escaper.escapeWithSingleQuotes(value);
    }
    if ('' === value) {
      return '""';
    }
    if (Utils.PATTERN_DATE.test(value)) {
      return "'" + value + "'";
    }
    if ((ref = value.toLowerCase()) === 'null' || ref === '~' || ref === 'true' || ref === 'false') {
      return "'" + value + "'";
    }
    return value;
  };

  Inline.dumpObject = function(value, exceptionOnInvalidType, objectSupport) {
    var j, key, len1, output, val;
    if (objectSupport == null) {
      objectSupport = null;
    }
    if (value instanceof Array) {
      output = [];
      for (j = 0, len1 = value.length; j < len1; j++) {
        val = value[j];
        output.push(this.dump(val));
      }
      return '[' + output.join(', ') + ']';
    } else {
      output = [];
      for (key in value) {
        val = value[key];
        output.push(this.dump(key) + ': ' + this.dump(val));
      }
      return '{' + output.join(', ') + '}';
    }
  };

  Inline.parseScalar = function(scalar, delimiters, stringDelimiters, context, evaluate) {
    var i, joinedDelimiters, match, output, pattern, ref, ref1, strpos, tmp;
    if (delimiters == null) {
      delimiters = null;
    }
    if (stringDelimiters == null) {
      stringDelimiters = ['"', "'"];
    }
    if (context == null) {
      context = null;
    }
    if (evaluate == null) {
      evaluate = true;
    }
    if (context == null) {
      context = {
        exceptionOnInvalidType: this.settings.exceptionOnInvalidType,
        objectDecoder: this.settings.objectDecoder,
        i: 0
      };
    }
    i = context.i;
    if (ref = scalar.charAt(i), indexOf.call(stringDelimiters, ref) >= 0) {
      output = this.parseQuotedScalar(scalar, context);
      i = context.i;
      if (delimiters != null) {
        tmp = Utils.ltrim(scalar.slice(i), ' ');
        if (!(ref1 = tmp.charAt(0), indexOf.call(delimiters, ref1) >= 0)) {
          throw new ParseException('Unexpected characters (' + scalar.slice(i) + ').');
        }
      }
    } else {
      if (!delimiters) {
        output = scalar.slice(i);
        i += output.length;
        strpos = output.indexOf(' #');
        if (strpos !== -1) {
          output = Utils.rtrim(output.slice(0, strpos));
        }
      } else {
        joinedDelimiters = delimiters.join('|');
        pattern = this.PATTERN_SCALAR_BY_DELIMITERS[joinedDelimiters];
        if (pattern == null) {
          pattern = new Pattern('^(.+?)(' + joinedDelimiters + ')');
          this.PATTERN_SCALAR_BY_DELIMITERS[joinedDelimiters] = pattern;
        }
        if (match = pattern.exec(scalar.slice(i))) {
          output = match[1];
          i += output.length;
        } else {
          throw new ParseException('Malformed inline YAML string (' + scalar + ').');
        }
      }
      if (evaluate) {
        output = this.evaluateScalar(output, context);
      }
    }
    context.i = i;
    return output;
  };

  Inline.parseQuotedScalar = function(scalar, context) {
    var i, match, output;
    i = context.i;
    if (!(match = this.PATTERN_QUOTED_SCALAR.exec(scalar.slice(i)))) {
      throw new ParseMore('Malformed inline YAML string (' + scalar.slice(i) + ').');
    }
    output = match[0].substr(1, match[0].length - 2);
    if ('"' === scalar.charAt(i)) {
      output = Unescaper.unescapeDoubleQuotedString(output);
    } else {
      output = Unescaper.unescapeSingleQuotedString(output);
    }
    i += match[0].length;
    context.i = i;
    return output;
  };

  Inline.parseSequence = function(sequence, context) {
    var e, i, isQuoted, len, output, ref, value;
    output = [];
    len = sequence.length;
    i = context.i;
    i += 1;
    while (i < len) {
      context.i = i;
      switch (sequence.charAt(i)) {
        case '[':
          output.push(this.parseSequence(sequence, context));
          i = context.i;
          break;
        case '{':
          output.push(this.parseMapping(sequence, context));
          i = context.i;
          break;
        case ']':
          return output;
        case ',':
        case ' ':
        case "\n":
          break;
        default:
          isQuoted = ((ref = sequence.charAt(i)) === '"' || ref === "'");
          value = this.parseScalar(sequence, [',', ']'], ['"', "'"], context);
          i = context.i;
          if (!isQuoted && typeof value === 'string' && (value.indexOf(': ') !== -1 || value.indexOf(":\n") !== -1)) {
            try {
              value = this.parseMapping('{' + value + '}');
            } catch (error) {
              e = error;
            }
          }
          output.push(value);
          --i;
      }
      ++i;
    }
    throw new ParseMore('Malformed inline YAML string ' + sequence);
  };

  Inline.parseMapping = function(mapping, context) {
    var done, i, key, len, output, shouldContinueWhileLoop, value;
    output = {};
    len = mapping.length;
    i = context.i;
    i += 1;
    shouldContinueWhileLoop = false;
    while (i < len) {
      context.i = i;
      switch (mapping.charAt(i)) {
        case ' ':
        case ',':
        case "\n":
          ++i;
          context.i = i;
          shouldContinueWhileLoop = true;
          break;
        case '}':
          return output;
      }
      if (shouldContinueWhileLoop) {
        shouldContinueWhileLoop = false;
        continue;
      }
      key = this.parseScalar(mapping, [':', ' ', "\n"], ['"', "'"], context, false);
      i = context.i;
      done = false;
      while (i < len) {
        context.i = i;
        switch (mapping.charAt(i)) {
          case '[':
            value = this.parseSequence(mapping, context);
            i = context.i;
            if (output[key] === void 0) {
              output[key] = value;
            }
            done = true;
            break;
          case '{':
            value = this.parseMapping(mapping, context);
            i = context.i;
            if (output[key] === void 0) {
              output[key] = value;
            }
            done = true;
            break;
          case ':':
          case ' ':
          case "\n":
            break;
          default:
            value = this.parseScalar(mapping, [',', '}'], ['"', "'"], context);
            i = context.i;
            if (output[key] === void 0) {
              output[key] = value;
            }
            done = true;
            --i;
        }
        ++i;
        if (done) {
          break;
        }
      }
    }
    throw new ParseMore('Malformed inline YAML string ' + mapping);
  };

  Inline.evaluateScalar = function(scalar, context) {
    var cast, date, exceptionOnInvalidType, firstChar, firstSpace, firstWord, objectDecoder, raw, scalarLower, subValue, trimmedScalar;
    scalar = Utils.trim(scalar);
    scalarLower = scalar.toLowerCase();
    switch (scalarLower) {
      case 'null':
      case '':
      case '~':
        return null;
      case 'true':
        return true;
      case 'false':
        return false;
      case '.inf':
        return 2e308;
      case '.nan':
        return 0/0;
      case '-.inf':
        return 2e308;
      default:
        firstChar = scalarLower.charAt(0);
        switch (firstChar) {
          case '!':
            firstSpace = scalar.indexOf(' ');
            if (firstSpace === -1) {
              firstWord = scalarLower;
            } else {
              firstWord = scalarLower.slice(0, firstSpace);
            }
            switch (firstWord) {
              case '!':
                if (firstSpace !== -1) {
                  return parseInt(this.parseScalar(scalar.slice(2)));
                }
                return null;
              case '!str':
                return Utils.ltrim(scalar.slice(4));
              case '!!str':
                return Utils.ltrim(scalar.slice(5));
              case '!!int':
                return parseInt(this.parseScalar(scalar.slice(5)));
              case '!!bool':
                return Utils.parseBoolean(this.parseScalar(scalar.slice(6)), false);
              case '!!float':
                return parseFloat(this.parseScalar(scalar.slice(7)));
              case '!!timestamp':
                return Utils.stringToDate(Utils.ltrim(scalar.slice(11)));
              default:
                if (context == null) {
                  context = {
                    exceptionOnInvalidType: this.settings.exceptionOnInvalidType,
                    objectDecoder: this.settings.objectDecoder,
                    i: 0
                  };
                }
                objectDecoder = context.objectDecoder, exceptionOnInvalidType = context.exceptionOnInvalidType;
                if (objectDecoder) {
                  trimmedScalar = Utils.rtrim(scalar);
                  firstSpace = trimmedScalar.indexOf(' ');
                  if (firstSpace === -1) {
                    return objectDecoder(trimmedScalar, null);
                  } else {
                    subValue = Utils.ltrim(trimmedScalar.slice(firstSpace + 1));
                    if (!(subValue.length > 0)) {
                      subValue = null;
                    }
                    return objectDecoder(trimmedScalar.slice(0, firstSpace), subValue);
                  }
                }
                if (exceptionOnInvalidType) {
                  throw new ParseException('Custom object support when parsing a YAML file has been disabled.');
                }
                return null;
            }
            break;
          case '0':
            if ('0x' === scalar.slice(0, 2)) {
              return Utils.hexDec(scalar);
            } else if (Utils.isDigits(scalar)) {
              return Utils.octDec(scalar);
            } else if (Utils.isNumeric(scalar)) {
              return parseFloat(scalar);
            } else {
              return scalar;
            }
            break;
          case '+':
            if (Utils.isDigits(scalar)) {
              raw = scalar;
              cast = parseInt(raw);
              if (raw === String(cast)) {
                return cast;
              } else {
                return raw;
              }
            } else if (Utils.isNumeric(scalar)) {
              return parseFloat(scalar);
            } else if (this.PATTERN_THOUSAND_NUMERIC_SCALAR.test(scalar)) {
              return parseFloat(scalar.replace(',', ''));
            }
            return scalar;
          case '-':
            if (Utils.isDigits(scalar.slice(1))) {
              if ('0' === scalar.charAt(1)) {
                return -Utils.octDec(scalar.slice(1));
              } else {
                raw = scalar.slice(1);
                cast = parseInt(raw);
                if (raw === String(cast)) {
                  return -cast;
                } else {
                  return -raw;
                }
              }
            } else if (Utils.isNumeric(scalar)) {
              return parseFloat(scalar);
            } else if (this.PATTERN_THOUSAND_NUMERIC_SCALAR.test(scalar)) {
              return parseFloat(scalar.replace(',', ''));
            }
            return scalar;
          default:
            if (date = Utils.stringToDate(scalar)) {
              return date;
            } else if (Utils.isNumeric(scalar)) {
              return parseFloat(scalar);
            } else if (this.PATTERN_THOUSAND_NUMERIC_SCALAR.test(scalar)) {
              return parseFloat(scalar.replace(',', ''));
            }
            return scalar;
        }
    }
  };

  return Inline;

})();

module.exports = Inline;

},{"./Escaper":48,"./Exception/DumpException":49,"./Exception/ParseException":50,"./Exception/ParseMore":51,"./Pattern":54,"./Unescaper":55,"./Utils":56}],53:[function(_dereq_,module,exports){
// Generated by CoffeeScript 1.12.4
var Inline, ParseException, ParseMore, Parser, Pattern, Utils;

Inline = _dereq_('./Inline');

Pattern = _dereq_('./Pattern');

Utils = _dereq_('./Utils');

ParseException = _dereq_('./Exception/ParseException');

ParseMore = _dereq_('./Exception/ParseMore');

Parser = (function() {
  Parser.prototype.PATTERN_FOLDED_SCALAR_ALL = new Pattern('^(?:(?<type>![^\\|>]*)\\s+)?(?<separator>\\||>)(?<modifiers>\\+|\\-|\\d+|\\+\\d+|\\-\\d+|\\d+\\+|\\d+\\-)?(?<comments> +#.*)?$');

  Parser.prototype.PATTERN_FOLDED_SCALAR_END = new Pattern('(?<separator>\\||>)(?<modifiers>\\+|\\-|\\d+|\\+\\d+|\\-\\d+|\\d+\\+|\\d+\\-)?(?<comments> +#.*)?$');

  Parser.prototype.PATTERN_SEQUENCE_ITEM = new Pattern('^\\-((?<leadspaces>\\s+)(?<value>.+?))?\\s*$');

  Parser.prototype.PATTERN_ANCHOR_VALUE = new Pattern('^&(?<ref>[^ ]+) *(?<value>.*)');

  Parser.prototype.PATTERN_COMPACT_NOTATION = new Pattern('^(?<key>' + Inline.REGEX_QUOTED_STRING + '|[^ \'"\\{\\[].*?) *\\:(\\s+(?<value>.+?))?\\s*$');

  Parser.prototype.PATTERN_MAPPING_ITEM = new Pattern('^(?<key>' + Inline.REGEX_QUOTED_STRING + '|[^ \'"\\[\\{].*?) *\\:(\\s+(?<value>.+?))?\\s*$');

  Parser.prototype.PATTERN_DECIMAL = new Pattern('\\d+');

  Parser.prototype.PATTERN_INDENT_SPACES = new Pattern('^ +');

  Parser.prototype.PATTERN_TRAILING_LINES = new Pattern('(\n*)$');

  Parser.prototype.PATTERN_YAML_HEADER = new Pattern('^\\%YAML[: ][\\d\\.]+.*\n', 'm');

  Parser.prototype.PATTERN_LEADING_COMMENTS = new Pattern('^(\\#.*?\n)+', 'm');

  Parser.prototype.PATTERN_DOCUMENT_MARKER_START = new Pattern('^\\-\\-\\-.*?\n', 'm');

  Parser.prototype.PATTERN_DOCUMENT_MARKER_END = new Pattern('^\\.\\.\\.\\s*$', 'm');

  Parser.prototype.PATTERN_FOLDED_SCALAR_BY_INDENTATION = {};

  Parser.prototype.CONTEXT_NONE = 0;

  Parser.prototype.CONTEXT_SEQUENCE = 1;

  Parser.prototype.CONTEXT_MAPPING = 2;

  function Parser(offset) {
    this.offset = offset != null ? offset : 0;
    this.lines = [];
    this.currentLineNb = -1;
    this.currentLine = '';
    this.refs = {};
  }

  Parser.prototype.parse = function(value, exceptionOnInvalidType, objectDecoder) {
    var alias, allowOverwrite, block, c, context, data, e, first, i, indent, isRef, j, k, key, l, lastKey, len, len1, len2, len3, lineCount, m, matches, mergeNode, n, name, parsed, parsedItem, parser, ref, ref1, ref2, refName, refValue, val, values;
    if (exceptionOnInvalidType == null) {
      exceptionOnInvalidType = false;
    }
    if (objectDecoder == null) {
      objectDecoder = null;
    }
    this.currentLineNb = -1;
    this.currentLine = '';
    this.lines = this.cleanup(value).split("\n");
    data = null;
    context = this.CONTEXT_NONE;
    allowOverwrite = false;
    while (this.moveToNextLine()) {
      if (this.isCurrentLineEmpty()) {
        continue;
      }
      if ("\t" === this.currentLine[0]) {
        throw new ParseException('A YAML file cannot contain tabs as indentation.', this.getRealCurrentLineNb() + 1, this.currentLine);
      }
      isRef = mergeNode = false;
      if (values = this.PATTERN_SEQUENCE_ITEM.exec(this.currentLine)) {
        if (this.CONTEXT_MAPPING === context) {
          throw new ParseException('You cannot define a sequence item when in a mapping');
        }
        context = this.CONTEXT_SEQUENCE;
        if (data == null) {
          data = [];
        }
        if ((values.value != null) && (matches = this.PATTERN_ANCHOR_VALUE.exec(values.value))) {
          isRef = matches.ref;
          values.value = matches.value;
        }
        if (!(values.value != null) || '' === Utils.trim(values.value, ' ') || Utils.ltrim(values.value, ' ').indexOf('#') === 0) {
          if (this.currentLineNb < this.lines.length - 1 && !this.isNextLineUnIndentedCollection()) {
            c = this.getRealCurrentLineNb() + 1;
            parser = new Parser(c);
            parser.refs = this.refs;
            data.push(parser.parse(this.getNextEmbedBlock(null, true), exceptionOnInvalidType, objectDecoder));
          } else {
            data.push(null);
          }
        } else {
          if (((ref = values.leadspaces) != null ? ref.length : void 0) && (matches = this.PATTERN_COMPACT_NOTATION.exec(values.value))) {
            c = this.getRealCurrentLineNb();
            parser = new Parser(c);
            parser.refs = this.refs;
            block = values.value;
            indent = this.getCurrentLineIndentation();
            if (this.isNextLineIndented(false)) {
              block += "\n" + this.getNextEmbedBlock(indent + values.leadspaces.length + 1, true);
            }
            data.push(parser.parse(block, exceptionOnInvalidType, objectDecoder));
          } else {
            data.push(this.parseValue(values.value, exceptionOnInvalidType, objectDecoder));
          }
        }
      } else if ((values = this.PATTERN_MAPPING_ITEM.exec(this.currentLine)) && values.key.indexOf(' #') === -1) {
        if (this.CONTEXT_SEQUENCE === context) {
          throw new ParseException('You cannot define a mapping item when in a sequence');
        }
        context = this.CONTEXT_MAPPING;
        if (data == null) {
          data = {};
        }
        Inline.configure(exceptionOnInvalidType, objectDecoder);
        try {
          key = Inline.parseScalar(values.key);
        } catch (error) {
          e = error;
          e.parsedLine = this.getRealCurrentLineNb() + 1;
          e.snippet = this.currentLine;
          throw e;
        }
        if ('<<' === key) {
          mergeNode = true;
          allowOverwrite = true;
          if (((ref1 = values.value) != null ? ref1.indexOf('*') : void 0) === 0) {
            refName = values.value.slice(1);
            if (this.refs[refName] == null) {
              throw new ParseException('Reference "' + refName + '" does not exist.', this.getRealCurrentLineNb() + 1, this.currentLine);
            }
            refValue = this.refs[refName];
            if (typeof refValue !== 'object') {
              throw new ParseException('YAML merge keys used with a scalar value instead of an object.', this.getRealCurrentLineNb() + 1, this.currentLine);
            }
            if (refValue instanceof Array) {
              for (i = j = 0, len = refValue.length; j < len; i = ++j) {
                value = refValue[i];
                if (data[name = String(i)] == null) {
                  data[name] = value;
                }
              }
            } else {
              for (key in refValue) {
                value = refValue[key];
                if (data[key] == null) {
                  data[key] = value;
                }
              }
            }
          } else {
            if ((values.value != null) && values.value !== '') {
              value = values.value;
            } else {
              value = this.getNextEmbedBlock();
            }
            c = this.getRealCurrentLineNb() + 1;
            parser = new Parser(c);
            parser.refs = this.refs;
            parsed = parser.parse(value, exceptionOnInvalidType);
            if (typeof parsed !== 'object') {
              throw new ParseException('YAML merge keys used with a scalar value instead of an object.', this.getRealCurrentLineNb() + 1, this.currentLine);
            }
            if (parsed instanceof Array) {
              for (l = 0, len1 = parsed.length; l < len1; l++) {
                parsedItem = parsed[l];
                if (typeof parsedItem !== 'object') {
                  throw new ParseException('Merge items must be objects.', this.getRealCurrentLineNb() + 1, parsedItem);
                }
                if (parsedItem instanceof Array) {
                  for (i = m = 0, len2 = parsedItem.length; m < len2; i = ++m) {
                    value = parsedItem[i];
                    k = String(i);
                    if (!data.hasOwnProperty(k)) {
                      data[k] = value;
                    }
                  }
                } else {
                  for (key in parsedItem) {
                    value = parsedItem[key];
                    if (!data.hasOwnProperty(key)) {
                      data[key] = value;
                    }
                  }
                }
              }
            } else {
              for (key in parsed) {
                value = parsed[key];
                if (!data.hasOwnProperty(key)) {
                  data[key] = value;
                }
              }
            }
          }
        } else if ((values.value != null) && (matches = this.PATTERN_ANCHOR_VALUE.exec(values.value))) {
          isRef = matches.ref;
          values.value = matches.value;
        }
        if (mergeNode) {

        } else if (!(values.value != null) || '' === Utils.trim(values.value, ' ') || Utils.ltrim(values.value, ' ').indexOf('#') === 0) {
          if (!(this.isNextLineIndented()) && !(this.isNextLineUnIndentedCollection())) {
            if (allowOverwrite || data[key] === void 0) {
              data[key] = null;
            }
          } else {
            c = this.getRealCurrentLineNb() + 1;
            parser = new Parser(c);
            parser.refs = this.refs;
            val = parser.parse(this.getNextEmbedBlock(), exceptionOnInvalidType, objectDecoder);
            if (allowOverwrite || data[key] === void 0) {
              data[key] = val;
            }
          }
        } else {
          val = this.parseValue(values.value, exceptionOnInvalidType, objectDecoder);
          if (allowOverwrite || data[key] === void 0) {
            data[key] = val;
          }
        }
      } else {
        lineCount = this.lines.length;
        if (1 === lineCount || (2 === lineCount && Utils.isEmpty(this.lines[1]))) {
          try {
            value = Inline.parse(this.lines[0], exceptionOnInvalidType, objectDecoder);
          } catch (error) {
            e = error;
            e.parsedLine = this.getRealCurrentLineNb() + 1;
            e.snippet = this.currentLine;
            throw e;
          }
          if (typeof value === 'object') {
            if (value instanceof Array) {
              first = value[0];
            } else {
              for (key in value) {
                first = value[key];
                break;
              }
            }
            if (typeof first === 'string' && first.indexOf('*') === 0) {
              data = [];
              for (n = 0, len3 = value.length; n < len3; n++) {
                alias = value[n];
                data.push(this.refs[alias.slice(1)]);
              }
              value = data;
            }
          }
          return value;
        } else if ((ref2 = Utils.ltrim(value).charAt(0)) === '[' || ref2 === '{') {
          try {
            return Inline.parse(value, exceptionOnInvalidType, objectDecoder);
          } catch (error) {
            e = error;
            e.parsedLine = this.getRealCurrentLineNb() + 1;
            e.snippet = this.currentLine;
            throw e;
          }
        }
        throw new ParseException('Unable to parse.', this.getRealCurrentLineNb() + 1, this.currentLine);
      }
      if (isRef) {
        if (data instanceof Array) {
          this.refs[isRef] = data[data.length - 1];
        } else {
          lastKey = null;
          for (key in data) {
            lastKey = key;
          }
          this.refs[isRef] = data[lastKey];
        }
      }
    }
    if (Utils.isEmpty(data)) {
      return null;
    } else {
      return data;
    }
  };

  Parser.prototype.getRealCurrentLineNb = function() {
    return this.currentLineNb + this.offset;
  };

  Parser.prototype.getCurrentLineIndentation = function() {
    return this.currentLine.length - Utils.ltrim(this.currentLine, ' ').length;
  };

  Parser.prototype.getNextEmbedBlock = function(indentation, includeUnindentedCollection) {
    var data, indent, isItUnindentedCollection, newIndent, removeComments, removeCommentsPattern, unindentedEmbedBlock;
    if (indentation == null) {
      indentation = null;
    }
    if (includeUnindentedCollection == null) {
      includeUnindentedCollection = false;
    }
    this.moveToNextLine();
    if (indentation == null) {
      newIndent = this.getCurrentLineIndentation();
      unindentedEmbedBlock = this.isStringUnIndentedCollectionItem(this.currentLine);
      if (!(this.isCurrentLineEmpty()) && 0 === newIndent && !unindentedEmbedBlock) {
        throw new ParseException('Indentation problem.', this.getRealCurrentLineNb() + 1, this.currentLine);
      }
    } else {
      newIndent = indentation;
    }
    data = [this.currentLine.slice(newIndent)];
    if (!includeUnindentedCollection) {
      isItUnindentedCollection = this.isStringUnIndentedCollectionItem(this.currentLine);
    }
    removeCommentsPattern = this.PATTERN_FOLDED_SCALAR_END;
    removeComments = !removeCommentsPattern.test(this.currentLine);
    while (this.moveToNextLine()) {
      indent = this.getCurrentLineIndentation();
      if (indent === newIndent) {
        removeComments = !removeCommentsPattern.test(this.currentLine);
      }
      if (removeComments && this.isCurrentLineComment()) {
        continue;
      }
      if (this.isCurrentLineBlank()) {
        data.push(this.currentLine.slice(newIndent));
        continue;
      }
      if (isItUnindentedCollection && !this.isStringUnIndentedCollectionItem(this.currentLine) && indent === newIndent) {
        this.moveToPreviousLine();
        break;
      }
      if (indent >= newIndent) {
        data.push(this.currentLine.slice(newIndent));
      } else if (Utils.ltrim(this.currentLine).charAt(0) === '#') {

      } else if (0 === indent) {
        this.moveToPreviousLine();
        break;
      } else {
        throw new ParseException('Indentation problem.', this.getRealCurrentLineNb() + 1, this.currentLine);
      }
    }
    return data.join("\n");
  };

  Parser.prototype.moveToNextLine = function() {
    if (this.currentLineNb >= this.lines.length - 1) {
      return false;
    }
    this.currentLine = this.lines[++this.currentLineNb];
    return true;
  };

  Parser.prototype.moveToPreviousLine = function() {
    this.currentLine = this.lines[--this.currentLineNb];
  };

  Parser.prototype.parseValue = function(value, exceptionOnInvalidType, objectDecoder) {
    var e, foldedIndent, matches, modifiers, pos, ref, ref1, val;
    if (0 === value.indexOf('*')) {
      pos = value.indexOf('#');
      if (pos !== -1) {
        value = value.substr(1, pos - 2);
      } else {
        value = value.slice(1);
      }
      if (this.refs[value] === void 0) {
        throw new ParseException('Reference "' + value + '" does not exist.', this.currentLine);
      }
      return this.refs[value];
    }
    if (matches = this.PATTERN_FOLDED_SCALAR_ALL.exec(value)) {
      modifiers = (ref = matches.modifiers) != null ? ref : '';
      foldedIndent = Math.abs(parseInt(modifiers));
      if (isNaN(foldedIndent)) {
        foldedIndent = 0;
      }
      val = this.parseFoldedScalar(matches.separator, this.PATTERN_DECIMAL.replace(modifiers, ''), foldedIndent);
      if (matches.type != null) {
        Inline.configure(exceptionOnInvalidType, objectDecoder);
        return Inline.parseScalar(matches.type + ' ' + val);
      } else {
        return val;
      }
    }
    if ((ref1 = value.charAt(0)) === '[' || ref1 === '{' || ref1 === '"' || ref1 === "'") {
      while (true) {
        try {
          return Inline.parse(value, exceptionOnInvalidType, objectDecoder);
        } catch (error) {
          e = error;
          if (e instanceof ParseMore && this.moveToNextLine()) {
            value += "\n" + Utils.trim(this.currentLine, ' ');
          } else {
            e.parsedLine = this.getRealCurrentLineNb() + 1;
            e.snippet = this.currentLine;
            throw e;
          }
        }
      }
    } else {
      if (this.isNextLineIndented()) {
        value += "\n" + this.getNextEmbedBlock();
      }
      return Inline.parse(value, exceptionOnInvalidType, objectDecoder);
    }
  };

  Parser.prototype.parseFoldedScalar = function(separator, indicator, indentation) {
    var isCurrentLineBlank, j, len, line, matches, newText, notEOF, pattern, ref, text;
    if (indicator == null) {
      indicator = '';
    }
    if (indentation == null) {
      indentation = 0;
    }
    notEOF = this.moveToNextLine();
    if (!notEOF) {
      return '';
    }
    isCurrentLineBlank = this.isCurrentLineBlank();
    text = '';
    while (notEOF && isCurrentLineBlank) {
      if (notEOF = this.moveToNextLine()) {
        text += "\n";
        isCurrentLineBlank = this.isCurrentLineBlank();
      }
    }
    if (0 === indentation) {
      if (matches = this.PATTERN_INDENT_SPACES.exec(this.currentLine)) {
        indentation = matches[0].length;
      }
    }
    if (indentation > 0) {
      pattern = this.PATTERN_FOLDED_SCALAR_BY_INDENTATION[indentation];
      if (pattern == null) {
        pattern = new Pattern('^ {' + indentation + '}(.*)$');
        Parser.prototype.PATTERN_FOLDED_SCALAR_BY_INDENTATION[indentation] = pattern;
      }
      while (notEOF && (isCurrentLineBlank || (matches = pattern.exec(this.currentLine)))) {
        if (isCurrentLineBlank) {
          text += this.currentLine.slice(indentation);
        } else {
          text += matches[1];
        }
        if (notEOF = this.moveToNextLine()) {
          text += "\n";
          isCurrentLineBlank = this.isCurrentLineBlank();
        }
      }
    } else if (notEOF) {
      text += "\n";
    }
    if (notEOF) {
      this.moveToPreviousLine();
    }
    if ('>' === separator) {
      newText = '';
      ref = text.split("\n");
      for (j = 0, len = ref.length; j < len; j++) {
        line = ref[j];
        if (line.length === 0 || line.charAt(0) === ' ') {
          newText = Utils.rtrim(newText, ' ') + line + "\n";
        } else {
          newText += line + ' ';
        }
      }
      text = newText;
    }
    if ('+' !== indicator) {
      text = Utils.rtrim(text);
    }
    if ('' === indicator) {
      text = this.PATTERN_TRAILING_LINES.replace(text, "\n");
    } else if ('-' === indicator) {
      text = this.PATTERN_TRAILING_LINES.replace(text, '');
    }
    return text;
  };

  Parser.prototype.isNextLineIndented = function(ignoreComments) {
    var EOF, currentIndentation, ret;
    if (ignoreComments == null) {
      ignoreComments = true;
    }
    currentIndentation = this.getCurrentLineIndentation();
    EOF = !this.moveToNextLine();
    if (ignoreComments) {
      while (!EOF && this.isCurrentLineEmpty()) {
        EOF = !this.moveToNextLine();
      }
    } else {
      while (!EOF && this.isCurrentLineBlank()) {
        EOF = !this.moveToNextLine();
      }
    }
    if (EOF) {
      return false;
    }
    ret = false;
    if (this.getCurrentLineIndentation() > currentIndentation) {
      ret = true;
    }
    this.moveToPreviousLine();
    return ret;
  };

  Parser.prototype.isCurrentLineEmpty = function() {
    var trimmedLine;
    trimmedLine = Utils.trim(this.currentLine, ' ');
    return trimmedLine.length === 0 || trimmedLine.charAt(0) === '#';
  };

  Parser.prototype.isCurrentLineBlank = function() {
    return '' === Utils.trim(this.currentLine, ' ');
  };

  Parser.prototype.isCurrentLineComment = function() {
    var ltrimmedLine;
    ltrimmedLine = Utils.ltrim(this.currentLine, ' ');
    return ltrimmedLine.charAt(0) === '#';
  };

  Parser.prototype.cleanup = function(value) {
    var count, i, indent, j, l, len, len1, line, lines, ref, ref1, ref2, smallestIndent, trimmedValue;
    if (value.indexOf("\r") !== -1) {
      value = value.split("\r\n").join("\n").split("\r").join("\n");
    }
    count = 0;
    ref = this.PATTERN_YAML_HEADER.replaceAll(value, ''), value = ref[0], count = ref[1];
    this.offset += count;
    ref1 = this.PATTERN_LEADING_COMMENTS.replaceAll(value, '', 1), trimmedValue = ref1[0], count = ref1[1];
    if (count === 1) {
      this.offset += Utils.subStrCount(value, "\n") - Utils.subStrCount(trimmedValue, "\n");
      value = trimmedValue;
    }
    ref2 = this.PATTERN_DOCUMENT_MARKER_START.replaceAll(value, '', 1), trimmedValue = ref2[0], count = ref2[1];
    if (count === 1) {
      this.offset += Utils.subStrCount(value, "\n") - Utils.subStrCount(trimmedValue, "\n");
      value = trimmedValue;
      value = this.PATTERN_DOCUMENT_MARKER_END.replace(value, '');
    }
    lines = value.split("\n");
    smallestIndent = -1;
    for (j = 0, len = lines.length; j < len; j++) {
      line = lines[j];
      if (Utils.trim(line, ' ').length === 0) {
        continue;
      }
      indent = line.length - Utils.ltrim(line).length;
      if (smallestIndent === -1 || indent < smallestIndent) {
        smallestIndent = indent;
      }
    }
    if (smallestIndent > 0) {
      for (i = l = 0, len1 = lines.length; l < len1; i = ++l) {
        line = lines[i];
        lines[i] = line.slice(smallestIndent);
      }
      value = lines.join("\n");
    }
    return value;
  };

  Parser.prototype.isNextLineUnIndentedCollection = function(currentIndentation) {
    var notEOF, ret;
    if (currentIndentation == null) {
      currentIndentation = null;
    }
    if (currentIndentation == null) {
      currentIndentation = this.getCurrentLineIndentation();
    }
    notEOF = this.moveToNextLine();
    while (notEOF && this.isCurrentLineEmpty()) {
      notEOF = this.moveToNextLine();
    }
    if (false === notEOF) {
      return false;
    }
    ret = false;
    if (this.getCurrentLineIndentation() === currentIndentation && this.isStringUnIndentedCollectionItem(this.currentLine)) {
      ret = true;
    }
    this.moveToPreviousLine();
    return ret;
  };

  Parser.prototype.isStringUnIndentedCollectionItem = function() {
    return this.currentLine === '-' || this.currentLine.slice(0, 2) === '- ';
  };

  return Parser;

})();

module.exports = Parser;

},{"./Exception/ParseException":50,"./Exception/ParseMore":51,"./Inline":52,"./Pattern":54,"./Utils":56}],54:[function(_dereq_,module,exports){
// Generated by CoffeeScript 1.12.4
var Pattern;

Pattern = (function() {
  Pattern.prototype.regex = null;

  Pattern.prototype.rawRegex = null;

  Pattern.prototype.cleanedRegex = null;

  Pattern.prototype.mapping = null;

  function Pattern(rawRegex, modifiers) {
    var _char, capturingBracketNumber, cleanedRegex, i, len, mapping, name, part, subChar;
    if (modifiers == null) {
      modifiers = '';
    }
    cleanedRegex = '';
    len = rawRegex.length;
    mapping = null;
    capturingBracketNumber = 0;
    i = 0;
    while (i < len) {
      _char = rawRegex.charAt(i);
      if (_char === '\\') {
        cleanedRegex += rawRegex.slice(i, +(i + 1) + 1 || 9e9);
        i++;
      } else if (_char === '(') {
        if (i < len - 2) {
          part = rawRegex.slice(i, +(i + 2) + 1 || 9e9);
          if (part === '(?:') {
            i += 2;
            cleanedRegex += part;
          } else if (part === '(?<') {
            capturingBracketNumber++;
            i += 2;
            name = '';
            while (i + 1 < len) {
              subChar = rawRegex.charAt(i + 1);
              if (subChar === '>') {
                cleanedRegex += '(';
                i++;
                if (name.length > 0) {
                  if (mapping == null) {
                    mapping = {};
                  }
                  mapping[name] = capturingBracketNumber;
                }
                break;
              } else {
                name += subChar;
              }
              i++;
            }
          } else {
            cleanedRegex += _char;
            capturingBracketNumber++;
          }
        } else {
          cleanedRegex += _char;
        }
      } else {
        cleanedRegex += _char;
      }
      i++;
    }
    this.rawRegex = rawRegex;
    this.cleanedRegex = cleanedRegex;
    this.regex = new RegExp(this.cleanedRegex, 'g' + modifiers.replace('g', ''));
    this.mapping = mapping;
  }

  Pattern.prototype.exec = function(str) {
    var index, matches, name, ref;
    this.regex.lastIndex = 0;
    matches = this.regex.exec(str);
    if (matches == null) {
      return null;
    }
    if (this.mapping != null) {
      ref = this.mapping;
      for (name in ref) {
        index = ref[name];
        matches[name] = matches[index];
      }
    }
    return matches;
  };

  Pattern.prototype.test = function(str) {
    this.regex.lastIndex = 0;
    return this.regex.test(str);
  };

  Pattern.prototype.replace = function(str, replacement) {
    this.regex.lastIndex = 0;
    return str.replace(this.regex, replacement);
  };

  Pattern.prototype.replaceAll = function(str, replacement, limit) {
    var count;
    if (limit == null) {
      limit = 0;
    }
    this.regex.lastIndex = 0;
    count = 0;
    while (this.regex.test(str) && (limit === 0 || count < limit)) {
      this.regex.lastIndex = 0;
      str = str.replace(this.regex, replacement);
      count++;
    }
    return [str, count];
  };

  return Pattern;

})();

module.exports = Pattern;

},{}],55:[function(_dereq_,module,exports){
// Generated by CoffeeScript 1.12.4
var Pattern, Unescaper, Utils;

Utils = _dereq_('./Utils');

Pattern = _dereq_('./Pattern');

Unescaper = (function() {
  function Unescaper() {}

  Unescaper.PATTERN_ESCAPED_CHARACTER = new Pattern('\\\\([0abt\tnvfre "\\/\\\\N_LP]|x[0-9a-fA-F]{2}|u[0-9a-fA-F]{4}|U[0-9a-fA-F]{8})');

  Unescaper.unescapeSingleQuotedString = function(value) {
    return value.replace(/\'\'/g, '\'');
  };

  Unescaper.unescapeDoubleQuotedString = function(value) {
    if (this._unescapeCallback == null) {
      this._unescapeCallback = (function(_this) {
        return function(str) {
          return _this.unescapeCharacter(str);
        };
      })(this);
    }
    return this.PATTERN_ESCAPED_CHARACTER.replace(value, this._unescapeCallback);
  };

  Unescaper.unescapeCharacter = function(value) {
    var ch;
    ch = String.fromCharCode;
    switch (value.charAt(1)) {
      case '0':
        return ch(0);
      case 'a':
        return ch(7);
      case 'b':
        return ch(8);
      case 't':
        return "\t";
      case "\t":
        return "\t";
      case 'n':
        return "\n";
      case 'v':
        return ch(11);
      case 'f':
        return ch(12);
      case 'r':
        return ch(13);
      case 'e':
        return ch(27);
      case ' ':
        return ' ';
      case '"':
        return '"';
      case '/':
        return '/';
      case '\\':
        return '\\';
      case 'N':
        return ch(0x0085);
      case '_':
        return ch(0x00A0);
      case 'L':
        return ch(0x2028);
      case 'P':
        return ch(0x2029);
      case 'x':
        return Utils.utf8chr(Utils.hexDec(value.substr(2, 2)));
      case 'u':
        return Utils.utf8chr(Utils.hexDec(value.substr(2, 4)));
      case 'U':
        return Utils.utf8chr(Utils.hexDec(value.substr(2, 8)));
      default:
        return '';
    }
  };

  return Unescaper;

})();

module.exports = Unescaper;

},{"./Pattern":54,"./Utils":56}],56:[function(_dereq_,module,exports){
// Generated by CoffeeScript 1.12.4
var Pattern, Utils,
  hasProp = {}.hasOwnProperty;

Pattern = _dereq_('./Pattern');

Utils = (function() {
  function Utils() {}

  Utils.REGEX_LEFT_TRIM_BY_CHAR = {};

  Utils.REGEX_RIGHT_TRIM_BY_CHAR = {};

  Utils.REGEX_SPACES = /\s+/g;

  Utils.REGEX_DIGITS = /^\d+$/;

  Utils.REGEX_OCTAL = /[^0-7]/gi;

  Utils.REGEX_HEXADECIMAL = /[^a-f0-9]/gi;

  Utils.PATTERN_DATE = new Pattern('^' + '(?<year>[0-9][0-9][0-9][0-9])' + '-(?<month>[0-9][0-9]?)' + '-(?<day>[0-9][0-9]?)' + '(?:(?:[Tt]|[ \t]+)' + '(?<hour>[0-9][0-9]?)' + ':(?<minute>[0-9][0-9])' + ':(?<second>[0-9][0-9])' + '(?:\.(?<fraction>[0-9]*))?' + '(?:[ \t]*(?<tz>Z|(?<tz_sign>[-+])(?<tz_hour>[0-9][0-9]?)' + '(?::(?<tz_minute>[0-9][0-9]))?))?)?' + '$', 'i');

  Utils.LOCAL_TIMEZONE_OFFSET = new Date().getTimezoneOffset() * 60 * 1000;

  Utils.trim = function(str, _char) {
    var regexLeft, regexRight;
    if (_char == null) {
      _char = '\\s';
    }
    regexLeft = this.REGEX_LEFT_TRIM_BY_CHAR[_char];
    if (regexLeft == null) {
      this.REGEX_LEFT_TRIM_BY_CHAR[_char] = regexLeft = new RegExp('^' + _char + '' + _char + '*');
    }
    regexLeft.lastIndex = 0;
    regexRight = this.REGEX_RIGHT_TRIM_BY_CHAR[_char];
    if (regexRight == null) {
      this.REGEX_RIGHT_TRIM_BY_CHAR[_char] = regexRight = new RegExp(_char + '' + _char + '*$');
    }
    regexRight.lastIndex = 0;
    return str.replace(regexLeft, '').replace(regexRight, '');
  };

  Utils.ltrim = function(str, _char) {
    var regexLeft;
    if (_char == null) {
      _char = '\\s';
    }
    regexLeft = this.REGEX_LEFT_TRIM_BY_CHAR[_char];
    if (regexLeft == null) {
      this.REGEX_LEFT_TRIM_BY_CHAR[_char] = regexLeft = new RegExp('^' + _char + '' + _char + '*');
    }
    regexLeft.lastIndex = 0;
    return str.replace(regexLeft, '');
  };

  Utils.rtrim = function(str, _char) {
    var regexRight;
    if (_char == null) {
      _char = '\\s';
    }
    regexRight = this.REGEX_RIGHT_TRIM_BY_CHAR[_char];
    if (regexRight == null) {
      this.REGEX_RIGHT_TRIM_BY_CHAR[_char] = regexRight = new RegExp(_char + '' + _char + '*$');
    }
    regexRight.lastIndex = 0;
    return str.replace(regexRight, '');
  };

  Utils.isEmpty = function(value) {
    return !value || value === '' || value === '0' || (value instanceof Array && value.length === 0) || this.isEmptyObject(value);
  };

  Utils.isEmptyObject = function(value) {
    var k;
    return value instanceof Object && ((function() {
      var results;
      results = [];
      for (k in value) {
        if (!hasProp.call(value, k)) continue;
        results.push(k);
      }
      return results;
    })()).length === 0;
  };

  Utils.subStrCount = function(string, subString, start, length) {
    var c, i, j, len, ref, sublen;
    c = 0;
    string = '' + string;
    subString = '' + subString;
    if (start != null) {
      string = string.slice(start);
    }
    if (length != null) {
      string = string.slice(0, length);
    }
    len = string.length;
    sublen = subString.length;
    for (i = j = 0, ref = len; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
      if (subString === string.slice(i, sublen)) {
        c++;
        i += sublen - 1;
      }
    }
    return c;
  };

  Utils.isDigits = function(input) {
    this.REGEX_DIGITS.lastIndex = 0;
    return this.REGEX_DIGITS.test(input);
  };

  Utils.octDec = function(input) {
    this.REGEX_OCTAL.lastIndex = 0;
    return parseInt((input + '').replace(this.REGEX_OCTAL, ''), 8);
  };

  Utils.hexDec = function(input) {
    this.REGEX_HEXADECIMAL.lastIndex = 0;
    input = this.trim(input);
    if ((input + '').slice(0, 2) === '0x') {
      input = (input + '').slice(2);
    }
    return parseInt((input + '').replace(this.REGEX_HEXADECIMAL, ''), 16);
  };

  Utils.utf8chr = function(c) {
    var ch;
    ch = String.fromCharCode;
    if (0x80 > (c %= 0x200000)) {
      return ch(c);
    }
    if (0x800 > c) {
      return ch(0xC0 | c >> 6) + ch(0x80 | c & 0x3F);
    }
    if (0x10000 > c) {
      return ch(0xE0 | c >> 12) + ch(0x80 | c >> 6 & 0x3F) + ch(0x80 | c & 0x3F);
    }
    return ch(0xF0 | c >> 18) + ch(0x80 | c >> 12 & 0x3F) + ch(0x80 | c >> 6 & 0x3F) + ch(0x80 | c & 0x3F);
  };

  Utils.parseBoolean = function(input, strict) {
    var lowerInput;
    if (strict == null) {
      strict = true;
    }
    if (typeof input === 'string') {
      lowerInput = input.toLowerCase();
      if (!strict) {
        if (lowerInput === 'no') {
          return false;
        }
      }
      if (lowerInput === '0') {
        return false;
      }
      if (lowerInput === 'false') {
        return false;
      }
      if (lowerInput === '') {
        return false;
      }
      return true;
    }
    return !!input;
  };

  Utils.isNumeric = function(input) {
    this.REGEX_SPACES.lastIndex = 0;
    return typeof input === 'number' || typeof input === 'string' && !isNaN(input) && input.replace(this.REGEX_SPACES, '') !== '';
  };

  Utils.stringToDate = function(str) {
    var date, day, fraction, hour, info, minute, month, second, tz_hour, tz_minute, tz_offset, year;
    if (!(str != null ? str.length : void 0)) {
      return null;
    }
    info = this.PATTERN_DATE.exec(str);
    if (!info) {
      return null;
    }
    year = parseInt(info.year, 10);
    month = parseInt(info.month, 10) - 1;
    day = parseInt(info.day, 10);
    if (info.hour == null) {
      date = new Date(Date.UTC(year, month, day));
      return date;
    }
    hour = parseInt(info.hour, 10);
    minute = parseInt(info.minute, 10);
    second = parseInt(info.second, 10);
    if (info.fraction != null) {
      fraction = info.fraction.slice(0, 3);
      while (fraction.length < 3) {
        fraction += '0';
      }
      fraction = parseInt(fraction, 10);
    } else {
      fraction = 0;
    }
    if (info.tz != null) {
      tz_hour = parseInt(info.tz_hour, 10);
      if (info.tz_minute != null) {
        tz_minute = parseInt(info.tz_minute, 10);
      } else {
        tz_minute = 0;
      }
      tz_offset = (tz_hour * 60 + tz_minute) * 60000;
      if ('-' === info.tz_sign) {
        tz_offset *= -1;
      }
    }
    date = new Date(Date.UTC(year, month, day, hour, minute, second, fraction));
    if (tz_offset) {
      date.setTime(date.getTime() - tz_offset);
    }
    return date;
  };

  Utils.strRepeat = function(str, number) {
    var i, res;
    res = '';
    i = 0;
    while (i < number) {
      res += str;
      i++;
    }
    return res;
  };

  Utils.getStringFromFile = function(path, callback) {
    var data, fs, j, len1, name, ref, req, xhr;
    if (callback == null) {
      callback = null;
    }
    xhr = null;
    if (typeof window !== "undefined" && window !== null) {
      if (window.XMLHttpRequest) {
        xhr = new XMLHttpRequest();
      } else if (window.ActiveXObject) {
        ref = ["Msxml2.XMLHTTP.6.0", "Msxml2.XMLHTTP.3.0", "Msxml2.XMLHTTP", "Microsoft.XMLHTTP"];
        for (j = 0, len1 = ref.length; j < len1; j++) {
          name = ref[j];
          try {
            xhr = new ActiveXObject(name);
          } catch (error) {}
        }
      }
    }
    if (xhr != null) {
      if (callback != null) {
        xhr.onreadystatechange = function() {
          if (xhr.readyState === 4) {
            if (xhr.status === 200 || xhr.status === 0) {
              return callback(xhr.responseText);
            } else {
              return callback(null);
            }
          }
        };
        xhr.open('GET', path, true);
        return xhr.send(null);
      } else {
        xhr.open('GET', path, false);
        xhr.send(null);
        if (xhr.status === 200 || xhr.status === 0) {
          return xhr.responseText;
        }
        return null;
      }
    } else {
      req = _dereq_;
      fs = req('fs');
      if (callback != null) {
        return fs.readFile(path, function(err, data) {
          if (err) {
            return callback(null);
          } else {
            return callback(String(data));
          }
        });
      } else {
        data = fs.readFileSync(path);
        if (data != null) {
          return String(data);
        }
        return null;
      }
    }
  };

  return Utils;

})();

module.exports = Utils;

},{"./Pattern":54}],57:[function(_dereq_,module,exports){
// Generated by CoffeeScript 1.12.4
var Dumper, Parser, Utils, Yaml;

Parser = _dereq_('./Parser');

Dumper = _dereq_('./Dumper');

Utils = _dereq_('./Utils');

Yaml = (function() {
  function Yaml() {}

  Yaml.parse = function(input, exceptionOnInvalidType, objectDecoder) {
    if (exceptionOnInvalidType == null) {
      exceptionOnInvalidType = false;
    }
    if (objectDecoder == null) {
      objectDecoder = null;
    }
    return new Parser().parse(input, exceptionOnInvalidType, objectDecoder);
  };

  Yaml.parseFile = function(path, callback, exceptionOnInvalidType, objectDecoder) {
    var input;
    if (callback == null) {
      callback = null;
    }
    if (exceptionOnInvalidType == null) {
      exceptionOnInvalidType = false;
    }
    if (objectDecoder == null) {
      objectDecoder = null;
    }
    if (callback != null) {
      return Utils.getStringFromFile(path, (function(_this) {
        return function(input) {
          var result;
          result = null;
          if (input != null) {
            result = _this.parse(input, exceptionOnInvalidType, objectDecoder);
          }
          callback(result);
        };
      })(this));
    } else {
      input = Utils.getStringFromFile(path);
      if (input != null) {
        return this.parse(input, exceptionOnInvalidType, objectDecoder);
      }
      return null;
    }
  };

  Yaml.dump = function(input, inline, indent, exceptionOnInvalidType, objectEncoder) {
    var yaml;
    if (inline == null) {
      inline = 2;
    }
    if (indent == null) {
      indent = 4;
    }
    if (exceptionOnInvalidType == null) {
      exceptionOnInvalidType = false;
    }
    if (objectEncoder == null) {
      objectEncoder = null;
    }
    yaml = new Dumper();
    yaml.indentation = indent;
    return yaml.dump(input, inline, 0, exceptionOnInvalidType, objectEncoder);
  };

  Yaml.register = function() {
    var require_handler;
    require_handler = function(module, filename) {
      return module.exports = YAML.parseFile(filename);
    };
    if ((typeof _dereq_ !== "undefined" && _dereq_ !== null ? _dereq_.extensions : void 0) != null) {
      _dereq_.extensions['.yml'] = require_handler;
      return _dereq_.extensions['.yaml'] = require_handler;
    }
  };

  Yaml.stringify = function(input, inline, indent, exceptionOnInvalidType, objectEncoder) {
    return this.dump(input, inline, indent, exceptionOnInvalidType, objectEncoder);
  };

  Yaml.load = function(path, callback, exceptionOnInvalidType, objectDecoder) {
    return this.parseFile(path, callback, exceptionOnInvalidType, objectDecoder);
  };

  return Yaml;

})();

if (typeof window !== "undefined" && window !== null) {
  window.YAML = Yaml;
}

if (typeof window === "undefined" || window === null) {
  this.YAML = Yaml;
}

module.exports = Yaml;

},{"./Dumper":47,"./Parser":53,"./Utils":56}],58:[function(_dereq_,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _assign = _dereq_('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _keys = _dereq_('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _tangramCartocss = _dereq_('tangram-cartocss');

var _tangramCartocss2 = _interopRequireDefault(_tangramCartocss);

var _yaml = _dereq_('./yaml');

var _yaml2 = _interopRequireDefault(_yaml);

var _md = _dereq_('md5');

var _md2 = _interopRequireDefault(_md);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

var SOURCES = {
  mapnik: {
    type: 'MVT'
  }
};

var generateSources = function generateSources(url, subdomains) {
  // TODO: make this dynamic if it is neccessary
  var source = SOURCES.mapnik;

  return {
    type: source.type,
    url: url,
    url_subdomains: subdomains
  };
};

var TC = function TC(map, cb) {
  var _this = this;

  this.layer = Tangram.leafletLayer({
    scene: _yaml2.default.getBaseFile()
  }).addTo(map);

  this.scene = this.layer.scene;

  this.scene.subscribe({
    load: function load() {
      _this.scene.setIntrospection(true);
      cb();
    }
  });
};

TC.prototype = {
  onLoaded: function onLoaded(cb) {
    this.scene.subscribe({
      view_complete: function view_complete() {
        cb();
      }
    });
  },

  addEvents: function addEvents(ev) {
    this.tangramLayer.setSelectionEvents(ev);
  },

  getTotalGeometries: function getTotalGeometries() {
    var _this2 = this;

    return (0, _keys2.default)(this.scene.tile_manager.tiles).reduce(function (sum, tileId) {
      return sum + _this2.scene.tile_manager.tiles[tileId].debug.geometry_count;
    }, 0);
  },

  addLayer: function addLayer(layer, i) {
    var _this3 = this;

    var config = _tangramCartocss2.default.carto2Draw(layer.meta.cartocss, i);

    config.forEach(function (l) {
      var ly = {
        data: {
          layer: layer.id,
          source: 'CartoDB'
        },
        draw: l.draw,
        visible: layer.visible
      };

      var layerName = (0, _md2.default)(layer.id + l.name);

      _this3.scene.config.layers[layerName] = ly;

      (0, _assign2.default)(_this3.scene.config.styles, l.styles);

      (0, _assign2.default)(_this3.scene.config.textures, l.textures);
    });

    this.scene.updateConfig({ rebuild: true });
  },

  addDataSource: function addDataSource(url, subdomains) {
    this.scene.setDataSource('CartoDB', generateSources(url, subdomains));
  }
};

exports.default = TC;

},{"./yaml":59,"babel-runtime/core-js/object/assign":1,"babel-runtime/core-js/object/keys":2,"md5":45,"tangram-cartocss":46}],59:[function(_dereq_,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _yamljs = _dereq_('yamljs');

var _yamljs2 = _interopRequireDefault(_yamljs);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

var getBaseProperties = function getBaseProperties() {
  return {
    global: {
      language: 'en'
    },
    fonts: {
      Montserrat: {
        url: 'https://fonts.gstatic.com/s/montserrat/v7/zhcz-_WihjSQC0oHJ9TCYL3hpw3pgy2gAi-Ip7WPMi0.woff'
      }
    },
    layers: {},
    styles: {
      polygons_blend: {
        base: 'polygons',
        blend: 'overlay'
      },
      lines_blend: {
        base: 'lines',
        blend: 'overlay'
      },
      points_blend: {
        base: 'points',
        blend: 'overlay'
      }
    }
  };
};

var generateYAML = function generateYAML() {
  return _yamljs2.default.stringify(getBaseProperties(), 3);
};

var getBaseFile = function getBaseFile() {
  return URL.createObjectURL(new Blob([generateYAML()]));
};

var yaml;
exports.default = yaml = {
  getBaseFile: getBaseFile
};

},{"yamljs":57}]},{},[58])(58)
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9hc3NpZ24uanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9rZXlzLmpzIiwibm9kZV9tb2R1bGVzL2NoYXJlbmMvY2hhcmVuYy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2Fzc2lnbi5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2tleXMuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2EtZnVuY3Rpb24uanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2FuLW9iamVjdC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fYXJyYXktaW5jbHVkZXMuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2NvZi5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fY29yZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fY3R4LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19kZWZpbmVkLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19kZXNjcmlwdG9ycy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZG9tLWNyZWF0ZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZW51bS1idWcta2V5cy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZXhwb3J0LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19mYWlscy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZ2xvYmFsLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19oYXMuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2hpZGUuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2llOC1kb20tZGVmaW5lLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pb2JqZWN0LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pcy1vYmplY3QuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1hc3NpZ24uanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1kcC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWdvcHMuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1rZXlzLWludGVybmFsLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3Qta2V5cy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LXBpZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LXNhcC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fcHJvcGVydHktZGVzYy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fc2hhcmVkLWtleS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fc2hhcmVkLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL190by1pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fdG8taW50ZWdlci5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fdG8taW9iamVjdC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fdG8tbGVuZ3RoLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL190by1vYmplY3QuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3RvLXByaW1pdGl2ZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fdWlkLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5vYmplY3QuYXNzaWduLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5vYmplY3Qua2V5cy5qcyIsIm5vZGVfbW9kdWxlcy9jcnlwdC9jcnlwdC5qcyIsIm5vZGVfbW9kdWxlcy9pcy1idWZmZXIvaW5kZXguanMiLCJub2RlX21vZHVsZXMvbWQ1L21kNS5qcyIsIm5vZGVfbW9kdWxlcy90YW5ncmFtLWNhcnRvY3NzL2Rpc3QvdGFuZ3JhbS1jYXJ0b2Nzcy5kZWJ1Zy5qcyIsIm5vZGVfbW9kdWxlcy95YW1sanMvbGliL0R1bXBlci5qcyIsIm5vZGVfbW9kdWxlcy95YW1sanMvbGliL0VzY2FwZXIuanMiLCJub2RlX21vZHVsZXMveWFtbGpzL2xpYi9FeGNlcHRpb24vRHVtcEV4Y2VwdGlvbi5qcyIsIm5vZGVfbW9kdWxlcy95YW1sanMvbGliL0V4Y2VwdGlvbi9QYXJzZUV4Y2VwdGlvbi5qcyIsIm5vZGVfbW9kdWxlcy95YW1sanMvbGliL0V4Y2VwdGlvbi9QYXJzZU1vcmUuanMiLCJub2RlX21vZHVsZXMveWFtbGpzL2xpYi9JbmxpbmUuanMiLCJub2RlX21vZHVsZXMveWFtbGpzL2xpYi9QYXJzZXIuanMiLCJub2RlX21vZHVsZXMveWFtbGpzL2xpYi9QYXR0ZXJuLmpzIiwibm9kZV9tb2R1bGVzL3lhbWxqcy9saWIvVW5lc2NhcGVyLmpzIiwibm9kZV9tb2R1bGVzL3lhbWxqcy9saWIvVXRpbHMuanMiLCJub2RlX21vZHVsZXMveWFtbGpzL2xpYi9ZYW1sLmpzIiwic3JjL3RhbmdyYW0uanMiLCJzcmMveWFtbC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQ0FBOztBQ0FBOztBQ0FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2pDQTtBQUNBOztBQ0RBO0FBQ0E7O0FDREE7QUFDQTtBQUNBO0FBQ0E7O0FDSEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDcEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDSkE7QUFDQTs7QUNEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ25CQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0pBO0FBQ0E7QUFDQTtBQUNBOztBQ0hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ05BO0FBQ0E7QUFDQTtBQUNBOztBQ0hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzVEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNOQTtBQUNBO0FBQ0E7QUFDQTs7QUNIQTtBQUNBO0FBQ0E7QUFDQTs7QUNIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1BBO0FBQ0E7QUFDQTs7QUNGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0pBO0FBQ0E7QUFDQTs7QUNGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDaENBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2ZBOztBQ0FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDaEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ05BOztBQ0FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0xBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNMQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDWEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNKQTtBQUNBO0FBQ0E7QUFDQTs7QUNIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDaEdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3JCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2hLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbnNFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDckRBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN4REE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDM0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzNCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMzQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3JlQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMzbEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN2SEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ25GQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN6U0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7Ozs7Ozs7O0FDeEdBOzs7O0FBQ0E7Ozs7QUFDQTs7Ozs7Ozs7QUFFQSxJQUFJOztVQUFKLEFBQWMsQUFDRixBQUNFO0FBREYsQUFDSjtBQUZNLEFBQ1Y7O0FBS0osSUFBSSxrQkFBa0IsU0FBQSxBQUFTLGdCQUFULEFBQXlCLEtBQXpCLEFBQThCLFlBQVksQUFDOUQ7QUFDQTtNQUFJLFNBQVMsUUFBYixBQUFxQixBQUVyQjs7O1VBQ1EsT0FERCxBQUNRLEFBQ2I7U0FGSyxBQUVBLEFBQ0w7b0JBSEYsQUFBTyxBQUdXLEFBRW5CO0FBTFEsQUFDTDtBQUxKOztBQVdBLElBQUksS0FBSyxTQUFMLEFBQUssR0FBQSxBQUFVLEtBQVYsQUFBZSxJQUFJO2NBQzFCOztPQUFBLEFBQUssZ0JBQVEsQUFBUTtXQUNaLGVBREksQUFBcUIsQUFDekIsQUFBSztBQURvQixBQUNoQyxHQURXLEVBQUEsQUFFVixNQUZILEFBQWEsQUFFSixBQUVUOztPQUFBLEFBQUssUUFBUSxLQUFBLEFBQUssTUFBbEIsQUFBd0IsQUFFeEI7O09BQUEsQUFBSyxNQUFMLEFBQVc7VUFDSCxnQkFBTSxBQUNWO1lBQUEsQUFBSyxNQUFMLEFBQVcsaUJBQVgsQUFBNEIsQUFDNUI7QUFDRDtBQUpILEFBQXFCLEFBT3RCO0FBUHNCLEFBQ25CO0FBUko7O0FBZ0JBLEdBQUEsQUFBRztZQUNTLGtCQUFBLEFBQVUsSUFBSSxBQUN0QjtTQUFBLEFBQUssTUFBTCxBQUFXO3FCQUNNLHlCQUFZLEFBQ3pCO0FBQ0Q7QUFISCxBQUFxQixBQUt0QjtBQUxzQixBQUNuQjtBQUhTLEFBU2I7O2FBQVcsbUJBQUEsQUFBVSxJQUFJLEFBQ3ZCO1NBQUEsQUFBSyxhQUFMLEFBQWtCLG1CQUFsQixBQUFxQyxBQUN0QztBQVhZLEFBYWI7O3NCQUFvQiw4QkFBVztpQkFDN0I7OytCQUFtQixLQUFBLEFBQUssTUFBTCxBQUFXLGFBQXZCLEFBQW9DLE9BQXBDLEFBQTJDLE9BQU8sVUFBQSxBQUFDLEtBQUQsQUFBTSxRQUFXLEFBQ3hFO2FBQU8sTUFBTSxPQUFBLEFBQUssTUFBTCxBQUFXLGFBQVgsQUFBd0IsTUFBeEIsQUFBOEIsUUFBOUIsQUFBc0MsTUFBbkQsQUFBeUQsQUFDMUQ7QUFGTSxLQUFBLEVBQVAsQUFBTyxBQUVKLEFBQ0o7QUFqQlksQUFtQmI7O1lBQVUsa0JBQUEsQUFBVSxPQUFWLEFBQWlCLEdBQUc7aUJBQzVCOztRQUFJLFNBQVMsMEJBQUEsQUFBSyxXQUFXLE1BQUEsQUFBTSxLQUF0QixBQUEyQixVQUF4QyxBQUFhLEFBQXFDLEFBRWxEOztXQUFBLEFBQU8sUUFBUSxhQUFLLEFBQ2xCO1VBQUk7O2lCQUVPLE1BREgsQUFDUyxBQUNiO2tCQUhLLEFBQ0QsQUFFSSxBQUVWO0FBSk0sQUFDSjtjQUdJLEVBTEMsQUFLQyxBQUNSO2lCQUFTLE1BTlgsQUFBUyxBQU1RLEFBR2pCO0FBVFMsQUFDUDs7VUFRSSxZQUFZLGtCQUFJLE1BQUEsQUFBTSxLQUFLLEVBQWpDLEFBQWtCLEFBQWlCLEFBRW5DOzthQUFBLEFBQUssTUFBTCxBQUFXLE9BQVgsQUFBa0IsT0FBbEIsQUFBeUIsYUFBekIsQUFBc0MsQUFFdEM7OzRCQUNFLE9BQUEsQUFBSyxNQUFMLEFBQVcsT0FEYixBQUNvQixRQUNsQixFQUZGLEFBRUksQUFHSjs7NEJBQ0UsT0FBQSxBQUFLLE1BQUwsQUFBVyxPQURiLEFBQ29CLFVBQ2xCLEVBRkYsQUFFSSxBQUVMO0FBdkJELEFBeUJBOztTQUFBLEFBQUssTUFBTCxBQUFXLGFBQWEsRUFBQyxTQUF6QixBQUF3QixBQUFVLEFBQ25DO0FBaERZLEFBa0RiOztpQkFBZSx1QkFBQSxBQUFVLEtBQVYsQUFBZSxZQUFZLEFBQ3hDO1NBQUEsQUFBSyxNQUFMLEFBQVcsY0FBWCxBQUF5QixXQUFXLGdCQUFBLEFBQWdCLEtBQXBELEFBQW9DLEFBQXFCLEFBQzFEO0FBcERILEFBQWU7QUFBQSxBQUNiOztrQixBQXNEYTs7Ozs7Ozs7O0FDNUZmOzs7Ozs7OztBQUVBLElBQU0sb0JBQW9CLFNBQUEsQUFBUyxvQkFBb0IsQUFDckQ7OztnQkFBTyxBQUNHLEFBQ0ksQUFFWjtBQUhRLEFBQ047OzthQUZHLEFBSUUsQUFDTyxBQUNMLEFBR1Q7QUFKYyxBQUNWO0FBRkcsQUFDTDtZQUxHLEFBU0csQUFDUjs7O2NBQ29CLEFBQ04sQUFDTjtlQUhBLEFBQ1ksQUFFTCxBQUVYO0FBSmdCLEFBQ1o7O2NBR1MsQUFDSCxBQUNOO2VBUEEsQUFLUyxBQUVGLEFBRVg7QUFKYSxBQUNUOztjQUdVLEFBQ0osQUFDTjtlQXJCVixBQUFPLEFBVUcsQUFTVSxBQUVILEFBSWxCO0FBTnFCLEFBQ1Y7QUFWQSxBQUNKO0FBWEMsQUFDTDtBQUZKOztBQTRCQSxJQUFNLGVBQWUsU0FBZixBQUFlLGVBQVksQUFDL0I7U0FBTyxpQkFBQSxBQUFPLFVBQVAsQUFBa0IscUJBQXpCLEFBQU8sQUFBdUMsQUFDL0M7QUFGRDs7QUFJQSxJQUFNLGNBQWMsU0FBZCxBQUFjLGNBQVksQUFDOUI7U0FBTyxJQUFBLEFBQUksZ0JBQWlCLElBQUEsQUFBSSxLQUFNLENBQXRDLEFBQU8sQUFBcUIsQUFBVSxBQUFFLEFBQ3pDO0FBRkQ7O0FBSUEsSUFBQSxBQUFJO2tCQUNXO2UsQUFBTztBQUFBLEFBQ3BCIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3ZhciBmPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrbytcIidcIik7dGhyb3cgZi5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGZ9dmFyIGw9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGwuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sbCxsLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9KSIsIm1vZHVsZS5leHBvcnRzID0geyBcImRlZmF1bHRcIjogcmVxdWlyZShcImNvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvYXNzaWduXCIpLCBfX2VzTW9kdWxlOiB0cnVlIH07IiwibW9kdWxlLmV4cG9ydHMgPSB7IFwiZGVmYXVsdFwiOiByZXF1aXJlKFwiY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9rZXlzXCIpLCBfX2VzTW9kdWxlOiB0cnVlIH07IiwidmFyIGNoYXJlbmMgPSB7XG4gIC8vIFVURi04IGVuY29kaW5nXG4gIHV0Zjg6IHtcbiAgICAvLyBDb252ZXJ0IGEgc3RyaW5nIHRvIGEgYnl0ZSBhcnJheVxuICAgIHN0cmluZ1RvQnl0ZXM6IGZ1bmN0aW9uKHN0cikge1xuICAgICAgcmV0dXJuIGNoYXJlbmMuYmluLnN0cmluZ1RvQnl0ZXModW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KHN0cikpKTtcbiAgICB9LFxuXG4gICAgLy8gQ29udmVydCBhIGJ5dGUgYXJyYXkgdG8gYSBzdHJpbmdcbiAgICBieXRlc1RvU3RyaW5nOiBmdW5jdGlvbihieXRlcykge1xuICAgICAgcmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudChlc2NhcGUoY2hhcmVuYy5iaW4uYnl0ZXNUb1N0cmluZyhieXRlcykpKTtcbiAgICB9XG4gIH0sXG5cbiAgLy8gQmluYXJ5IGVuY29kaW5nXG4gIGJpbjoge1xuICAgIC8vIENvbnZlcnQgYSBzdHJpbmcgdG8gYSBieXRlIGFycmF5XG4gICAgc3RyaW5nVG9CeXRlczogZnVuY3Rpb24oc3RyKSB7XG4gICAgICBmb3IgKHZhciBieXRlcyA9IFtdLCBpID0gMDsgaSA8IHN0ci5sZW5ndGg7IGkrKylcbiAgICAgICAgYnl0ZXMucHVzaChzdHIuY2hhckNvZGVBdChpKSAmIDB4RkYpO1xuICAgICAgcmV0dXJuIGJ5dGVzO1xuICAgIH0sXG5cbiAgICAvLyBDb252ZXJ0IGEgYnl0ZSBhcnJheSB0byBhIHN0cmluZ1xuICAgIGJ5dGVzVG9TdHJpbmc6IGZ1bmN0aW9uKGJ5dGVzKSB7XG4gICAgICBmb3IgKHZhciBzdHIgPSBbXSwgaSA9IDA7IGkgPCBieXRlcy5sZW5ndGg7IGkrKylcbiAgICAgICAgc3RyLnB1c2goU3RyaW5nLmZyb21DaGFyQ29kZShieXRlc1tpXSkpO1xuICAgICAgcmV0dXJuIHN0ci5qb2luKCcnKTtcbiAgICB9XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gY2hhcmVuYztcbiIsInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM2Lm9iamVjdC5hc3NpZ24nKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLk9iamVjdC5hc3NpZ247IiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LmtleXMnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLk9iamVjdC5rZXlzOyIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpe1xuICBpZih0eXBlb2YgaXQgIT0gJ2Z1bmN0aW9uJyl0aHJvdyBUeXBlRXJyb3IoaXQgKyAnIGlzIG5vdCBhIGZ1bmN0aW9uIScpO1xuICByZXR1cm4gaXQ7XG59OyIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7XG4gIGlmKCFpc09iamVjdChpdCkpdGhyb3cgVHlwZUVycm9yKGl0ICsgJyBpcyBub3QgYW4gb2JqZWN0IScpO1xuICByZXR1cm4gaXQ7XG59OyIsIi8vIGZhbHNlIC0+IEFycmF5I2luZGV4T2Zcbi8vIHRydWUgIC0+IEFycmF5I2luY2x1ZGVzXG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpXG4gICwgdG9MZW5ndGggID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJylcbiAgLCB0b0luZGV4ICAgPSByZXF1aXJlKCcuL190by1pbmRleCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihJU19JTkNMVURFUyl7XG4gIHJldHVybiBmdW5jdGlvbigkdGhpcywgZWwsIGZyb21JbmRleCl7XG4gICAgdmFyIE8gICAgICA9IHRvSU9iamVjdCgkdGhpcylcbiAgICAgICwgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpXG4gICAgICAsIGluZGV4ICA9IHRvSW5kZXgoZnJvbUluZGV4LCBsZW5ndGgpXG4gICAgICAsIHZhbHVlO1xuICAgIC8vIEFycmF5I2luY2x1ZGVzIHVzZXMgU2FtZVZhbHVlWmVybyBlcXVhbGl0eSBhbGdvcml0aG1cbiAgICBpZihJU19JTkNMVURFUyAmJiBlbCAhPSBlbCl3aGlsZShsZW5ndGggPiBpbmRleCl7XG4gICAgICB2YWx1ZSA9IE9baW5kZXgrK107XG4gICAgICBpZih2YWx1ZSAhPSB2YWx1ZSlyZXR1cm4gdHJ1ZTtcbiAgICAvLyBBcnJheSN0b0luZGV4IGlnbm9yZXMgaG9sZXMsIEFycmF5I2luY2x1ZGVzIC0gbm90XG4gICAgfSBlbHNlIGZvcig7bGVuZ3RoID4gaW5kZXg7IGluZGV4KyspaWYoSVNfSU5DTFVERVMgfHwgaW5kZXggaW4gTyl7XG4gICAgICBpZihPW2luZGV4XSA9PT0gZWwpcmV0dXJuIElTX0lOQ0xVREVTIHx8IGluZGV4IHx8IDA7XG4gICAgfSByZXR1cm4gIUlTX0lOQ0xVREVTICYmIC0xO1xuICB9O1xufTsiLCJ2YXIgdG9TdHJpbmcgPSB7fS50b1N0cmluZztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKGl0KS5zbGljZSg4LCAtMSk7XG59OyIsInZhciBjb3JlID0gbW9kdWxlLmV4cG9ydHMgPSB7dmVyc2lvbjogJzIuNC4wJ307XG5pZih0eXBlb2YgX19lID09ICdudW1iZXInKV9fZSA9IGNvcmU7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWYiLCIvLyBvcHRpb25hbCAvIHNpbXBsZSBjb250ZXh0IGJpbmRpbmdcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGZuLCB0aGF0LCBsZW5ndGgpe1xuICBhRnVuY3Rpb24oZm4pO1xuICBpZih0aGF0ID09PSB1bmRlZmluZWQpcmV0dXJuIGZuO1xuICBzd2l0Y2gobGVuZ3RoKXtcbiAgICBjYXNlIDE6IHJldHVybiBmdW5jdGlvbihhKXtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEpO1xuICAgIH07XG4gICAgY2FzZSAyOiByZXR1cm4gZnVuY3Rpb24oYSwgYil7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhLCBiKTtcbiAgICB9O1xuICAgIGNhc2UgMzogcmV0dXJuIGZ1bmN0aW9uKGEsIGIsIGMpe1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYiwgYyk7XG4gICAgfTtcbiAgfVxuICByZXR1cm4gZnVuY3Rpb24oLyogLi4uYXJncyAqLyl7XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoYXQsIGFyZ3VtZW50cyk7XG4gIH07XG59OyIsIi8vIDcuMi4xIFJlcXVpcmVPYmplY3RDb2VyY2libGUoYXJndW1lbnQpXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXtcbiAgaWYoaXQgPT0gdW5kZWZpbmVkKXRocm93IFR5cGVFcnJvcihcIkNhbid0IGNhbGwgbWV0aG9kIG9uICBcIiArIGl0KTtcbiAgcmV0dXJuIGl0O1xufTsiLCIvLyBUaGFuaydzIElFOCBmb3IgaGlzIGZ1bm55IGRlZmluZVByb3BlcnR5XG5tb2R1bGUuZXhwb3J0cyA9ICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uKCl7XG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoe30sICdhJywge2dldDogZnVuY3Rpb24oKXsgcmV0dXJuIDc7IH19KS5hICE9IDc7XG59KTsiLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKVxuICAsIGRvY3VtZW50ID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuZG9jdW1lbnRcbiAgLy8gaW4gb2xkIElFIHR5cGVvZiBkb2N1bWVudC5jcmVhdGVFbGVtZW50IGlzICdvYmplY3QnXG4gICwgaXMgPSBpc09iamVjdChkb2N1bWVudCkgJiYgaXNPYmplY3QoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXtcbiAgcmV0dXJuIGlzID8gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChpdCkgOiB7fTtcbn07IiwiLy8gSUUgOC0gZG9uJ3QgZW51bSBidWcga2V5c1xubW9kdWxlLmV4cG9ydHMgPSAoXG4gICdjb25zdHJ1Y3RvcixoYXNPd25Qcm9wZXJ0eSxpc1Byb3RvdHlwZU9mLHByb3BlcnR5SXNFbnVtZXJhYmxlLHRvTG9jYWxlU3RyaW5nLHRvU3RyaW5nLHZhbHVlT2YnXG4pLnNwbGl0KCcsJyk7IiwidmFyIGdsb2JhbCAgICA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpXG4gICwgY29yZSAgICAgID0gcmVxdWlyZSgnLi9fY29yZScpXG4gICwgY3R4ICAgICAgID0gcmVxdWlyZSgnLi9fY3R4JylcbiAgLCBoaWRlICAgICAgPSByZXF1aXJlKCcuL19oaWRlJylcbiAgLCBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcblxudmFyICRleHBvcnQgPSBmdW5jdGlvbih0eXBlLCBuYW1lLCBzb3VyY2Upe1xuICB2YXIgSVNfRk9SQ0VEID0gdHlwZSAmICRleHBvcnQuRlxuICAgICwgSVNfR0xPQkFMID0gdHlwZSAmICRleHBvcnQuR1xuICAgICwgSVNfU1RBVElDID0gdHlwZSAmICRleHBvcnQuU1xuICAgICwgSVNfUFJPVE8gID0gdHlwZSAmICRleHBvcnQuUFxuICAgICwgSVNfQklORCAgID0gdHlwZSAmICRleHBvcnQuQlxuICAgICwgSVNfV1JBUCAgID0gdHlwZSAmICRleHBvcnQuV1xuICAgICwgZXhwb3J0cyAgID0gSVNfR0xPQkFMID8gY29yZSA6IGNvcmVbbmFtZV0gfHwgKGNvcmVbbmFtZV0gPSB7fSlcbiAgICAsIGV4cFByb3RvICA9IGV4cG9ydHNbUFJPVE9UWVBFXVxuICAgICwgdGFyZ2V0ICAgID0gSVNfR0xPQkFMID8gZ2xvYmFsIDogSVNfU1RBVElDID8gZ2xvYmFsW25hbWVdIDogKGdsb2JhbFtuYW1lXSB8fCB7fSlbUFJPVE9UWVBFXVxuICAgICwga2V5LCBvd24sIG91dDtcbiAgaWYoSVNfR0xPQkFMKXNvdXJjZSA9IG5hbWU7XG4gIGZvcihrZXkgaW4gc291cmNlKXtcbiAgICAvLyBjb250YWlucyBpbiBuYXRpdmVcbiAgICBvd24gPSAhSVNfRk9SQ0VEICYmIHRhcmdldCAmJiB0YXJnZXRba2V5XSAhPT0gdW5kZWZpbmVkO1xuICAgIGlmKG93biAmJiBrZXkgaW4gZXhwb3J0cyljb250aW51ZTtcbiAgICAvLyBleHBvcnQgbmF0aXZlIG9yIHBhc3NlZFxuICAgIG91dCA9IG93biA/IHRhcmdldFtrZXldIDogc291cmNlW2tleV07XG4gICAgLy8gcHJldmVudCBnbG9iYWwgcG9sbHV0aW9uIGZvciBuYW1lc3BhY2VzXG4gICAgZXhwb3J0c1trZXldID0gSVNfR0xPQkFMICYmIHR5cGVvZiB0YXJnZXRba2V5XSAhPSAnZnVuY3Rpb24nID8gc291cmNlW2tleV1cbiAgICAvLyBiaW5kIHRpbWVycyB0byBnbG9iYWwgZm9yIGNhbGwgZnJvbSBleHBvcnQgY29udGV4dFxuICAgIDogSVNfQklORCAmJiBvd24gPyBjdHgob3V0LCBnbG9iYWwpXG4gICAgLy8gd3JhcCBnbG9iYWwgY29uc3RydWN0b3JzIGZvciBwcmV2ZW50IGNoYW5nZSB0aGVtIGluIGxpYnJhcnlcbiAgICA6IElTX1dSQVAgJiYgdGFyZ2V0W2tleV0gPT0gb3V0ID8gKGZ1bmN0aW9uKEMpe1xuICAgICAgdmFyIEYgPSBmdW5jdGlvbihhLCBiLCBjKXtcbiAgICAgICAgaWYodGhpcyBpbnN0YW5jZW9mIEMpe1xuICAgICAgICAgIHN3aXRjaChhcmd1bWVudHMubGVuZ3RoKXtcbiAgICAgICAgICAgIGNhc2UgMDogcmV0dXJuIG5ldyBDO1xuICAgICAgICAgICAgY2FzZSAxOiByZXR1cm4gbmV3IEMoYSk7XG4gICAgICAgICAgICBjYXNlIDI6IHJldHVybiBuZXcgQyhhLCBiKTtcbiAgICAgICAgICB9IHJldHVybiBuZXcgQyhhLCBiLCBjKTtcbiAgICAgICAgfSByZXR1cm4gQy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgfTtcbiAgICAgIEZbUFJPVE9UWVBFXSA9IENbUFJPVE9UWVBFXTtcbiAgICAgIHJldHVybiBGO1xuICAgIC8vIG1ha2Ugc3RhdGljIHZlcnNpb25zIGZvciBwcm90b3R5cGUgbWV0aG9kc1xuICAgIH0pKG91dCkgOiBJU19QUk9UTyAmJiB0eXBlb2Ygb3V0ID09ICdmdW5jdGlvbicgPyBjdHgoRnVuY3Rpb24uY2FsbCwgb3V0KSA6IG91dDtcbiAgICAvLyBleHBvcnQgcHJvdG8gbWV0aG9kcyB0byBjb3JlLiVDT05TVFJVQ1RPUiUubWV0aG9kcy4lTkFNRSVcbiAgICBpZihJU19QUk9UTyl7XG4gICAgICAoZXhwb3J0cy52aXJ0dWFsIHx8IChleHBvcnRzLnZpcnR1YWwgPSB7fSkpW2tleV0gPSBvdXQ7XG4gICAgICAvLyBleHBvcnQgcHJvdG8gbWV0aG9kcyB0byBjb3JlLiVDT05TVFJVQ1RPUiUucHJvdG90eXBlLiVOQU1FJVxuICAgICAgaWYodHlwZSAmICRleHBvcnQuUiAmJiBleHBQcm90byAmJiAhZXhwUHJvdG9ba2V5XSloaWRlKGV4cFByb3RvLCBrZXksIG91dCk7XG4gICAgfVxuICB9XG59O1xuLy8gdHlwZSBiaXRtYXBcbiRleHBvcnQuRiA9IDE7ICAgLy8gZm9yY2VkXG4kZXhwb3J0LkcgPSAyOyAgIC8vIGdsb2JhbFxuJGV4cG9ydC5TID0gNDsgICAvLyBzdGF0aWNcbiRleHBvcnQuUCA9IDg7ICAgLy8gcHJvdG9cbiRleHBvcnQuQiA9IDE2OyAgLy8gYmluZFxuJGV4cG9ydC5XID0gMzI7ICAvLyB3cmFwXG4kZXhwb3J0LlUgPSA2NDsgIC8vIHNhZmVcbiRleHBvcnQuUiA9IDEyODsgLy8gcmVhbCBwcm90byBtZXRob2QgZm9yIGBsaWJyYXJ5YCBcbm1vZHVsZS5leHBvcnRzID0gJGV4cG9ydDsiLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGV4ZWMpe1xuICB0cnkge1xuICAgIHJldHVybiAhIWV4ZWMoKTtcbiAgfSBjYXRjaChlKXtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufTsiLCIvLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvODYjaXNzdWVjb21tZW50LTExNTc1OTAyOFxudmFyIGdsb2JhbCA9IG1vZHVsZS5leHBvcnRzID0gdHlwZW9mIHdpbmRvdyAhPSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuTWF0aCA9PSBNYXRoXG4gID8gd2luZG93IDogdHlwZW9mIHNlbGYgIT0gJ3VuZGVmaW5lZCcgJiYgc2VsZi5NYXRoID09IE1hdGggPyBzZWxmIDogRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcbmlmKHR5cGVvZiBfX2cgPT0gJ251bWJlcicpX19nID0gZ2xvYmFsOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmIiwidmFyIGhhc093blByb3BlcnR5ID0ge30uaGFzT3duUHJvcGVydHk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0LCBrZXkpe1xuICByZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbChpdCwga2V5KTtcbn07IiwidmFyIGRQICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKVxuICAsIGNyZWF0ZURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBmdW5jdGlvbihvYmplY3QsIGtleSwgdmFsdWUpe1xuICByZXR1cm4gZFAuZihvYmplY3QsIGtleSwgY3JlYXRlRGVzYygxLCB2YWx1ZSkpO1xufSA6IGZ1bmN0aW9uKG9iamVjdCwga2V5LCB2YWx1ZSl7XG4gIG9iamVjdFtrZXldID0gdmFsdWU7XG4gIHJldHVybiBvYmplY3Q7XG59OyIsIm1vZHVsZS5leHBvcnRzID0gIXJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24oKXtcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyZXF1aXJlKCcuL19kb20tY3JlYXRlJykoJ2RpdicpLCAnYScsIHtnZXQ6IGZ1bmN0aW9uKCl7IHJldHVybiA3OyB9fSkuYSAhPSA3O1xufSk7IiwiLy8gZmFsbGJhY2sgZm9yIG5vbi1hcnJheS1saWtlIEVTMyBhbmQgbm9uLWVudW1lcmFibGUgb2xkIFY4IHN0cmluZ3NcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0KCd6JykucHJvcGVydHlJc0VudW1lcmFibGUoMCkgPyBPYmplY3QgOiBmdW5jdGlvbihpdCl7XG4gIHJldHVybiBjb2YoaXQpID09ICdTdHJpbmcnID8gaXQuc3BsaXQoJycpIDogT2JqZWN0KGl0KTtcbn07IiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7XG4gIHJldHVybiB0eXBlb2YgaXQgPT09ICdvYmplY3QnID8gaXQgIT09IG51bGwgOiB0eXBlb2YgaXQgPT09ICdmdW5jdGlvbic7XG59OyIsIid1c2Ugc3RyaWN0Jztcbi8vIDE5LjEuMi4xIE9iamVjdC5hc3NpZ24odGFyZ2V0LCBzb3VyY2UsIC4uLilcbnZhciBnZXRLZXlzICA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJylcbiAgLCBnT1BTICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BzJylcbiAgLCBwSUUgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1waWUnKVxuICAsIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0JylcbiAgLCBJT2JqZWN0ICA9IHJlcXVpcmUoJy4vX2lvYmplY3QnKVxuICAsICRhc3NpZ24gID0gT2JqZWN0LmFzc2lnbjtcblxuLy8gc2hvdWxkIHdvcmsgd2l0aCBzeW1ib2xzIGFuZCBzaG91bGQgaGF2ZSBkZXRlcm1pbmlzdGljIHByb3BlcnR5IG9yZGVyIChWOCBidWcpXG5tb2R1bGUuZXhwb3J0cyA9ICEkYXNzaWduIHx8IHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24oKXtcbiAgdmFyIEEgPSB7fVxuICAgICwgQiA9IHt9XG4gICAgLCBTID0gU3ltYm9sKClcbiAgICAsIEsgPSAnYWJjZGVmZ2hpamtsbW5vcHFyc3QnO1xuICBBW1NdID0gNztcbiAgSy5zcGxpdCgnJykuZm9yRWFjaChmdW5jdGlvbihrKXsgQltrXSA9IGs7IH0pO1xuICByZXR1cm4gJGFzc2lnbih7fSwgQSlbU10gIT0gNyB8fCBPYmplY3Qua2V5cygkYXNzaWduKHt9LCBCKSkuam9pbignJykgIT0gSztcbn0pID8gZnVuY3Rpb24gYXNzaWduKHRhcmdldCwgc291cmNlKXsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICB2YXIgVCAgICAgPSB0b09iamVjdCh0YXJnZXQpXG4gICAgLCBhTGVuICA9IGFyZ3VtZW50cy5sZW5ndGhcbiAgICAsIGluZGV4ID0gMVxuICAgICwgZ2V0U3ltYm9scyA9IGdPUFMuZlxuICAgICwgaXNFbnVtICAgICA9IHBJRS5mO1xuICB3aGlsZShhTGVuID4gaW5kZXgpe1xuICAgIHZhciBTICAgICAgPSBJT2JqZWN0KGFyZ3VtZW50c1tpbmRleCsrXSlcbiAgICAgICwga2V5cyAgID0gZ2V0U3ltYm9scyA/IGdldEtleXMoUykuY29uY2F0KGdldFN5bWJvbHMoUykpIDogZ2V0S2V5cyhTKVxuICAgICAgLCBsZW5ndGggPSBrZXlzLmxlbmd0aFxuICAgICAgLCBqICAgICAgPSAwXG4gICAgICAsIGtleTtcbiAgICB3aGlsZShsZW5ndGggPiBqKWlmKGlzRW51bS5jYWxsKFMsIGtleSA9IGtleXNbaisrXSkpVFtrZXldID0gU1trZXldO1xuICB9IHJldHVybiBUO1xufSA6ICRhc3NpZ247IiwidmFyIGFuT2JqZWN0ICAgICAgID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0JylcbiAgLCBJRThfRE9NX0RFRklORSA9IHJlcXVpcmUoJy4vX2llOC1kb20tZGVmaW5lJylcbiAgLCB0b1ByaW1pdGl2ZSAgICA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpXG4gICwgZFAgICAgICAgICAgICAgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG5cbmV4cG9ydHMuZiA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBPYmplY3QuZGVmaW5lUHJvcGVydHkgOiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKXtcbiAgYW5PYmplY3QoTyk7XG4gIFAgPSB0b1ByaW1pdGl2ZShQLCB0cnVlKTtcbiAgYW5PYmplY3QoQXR0cmlidXRlcyk7XG4gIGlmKElFOF9ET01fREVGSU5FKXRyeSB7XG4gICAgcmV0dXJuIGRQKE8sIFAsIEF0dHJpYnV0ZXMpO1xuICB9IGNhdGNoKGUpeyAvKiBlbXB0eSAqLyB9XG4gIGlmKCdnZXQnIGluIEF0dHJpYnV0ZXMgfHwgJ3NldCcgaW4gQXR0cmlidXRlcyl0aHJvdyBUeXBlRXJyb3IoJ0FjY2Vzc29ycyBub3Qgc3VwcG9ydGVkIScpO1xuICBpZigndmFsdWUnIGluIEF0dHJpYnV0ZXMpT1tQXSA9IEF0dHJpYnV0ZXMudmFsdWU7XG4gIHJldHVybiBPO1xufTsiLCJleHBvcnRzLmYgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzOyIsInZhciBoYXMgICAgICAgICAgPSByZXF1aXJlKCcuL19oYXMnKVxuICAsIHRvSU9iamVjdCAgICA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKVxuICAsIGFycmF5SW5kZXhPZiA9IHJlcXVpcmUoJy4vX2FycmF5LWluY2x1ZGVzJykoZmFsc2UpXG4gICwgSUVfUFJPVE8gICAgID0gcmVxdWlyZSgnLi9fc2hhcmVkLWtleScpKCdJRV9QUk9UTycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG9iamVjdCwgbmFtZXMpe1xuICB2YXIgTyAgICAgID0gdG9JT2JqZWN0KG9iamVjdClcbiAgICAsIGkgICAgICA9IDBcbiAgICAsIHJlc3VsdCA9IFtdXG4gICAgLCBrZXk7XG4gIGZvcihrZXkgaW4gTylpZihrZXkgIT0gSUVfUFJPVE8paGFzKE8sIGtleSkgJiYgcmVzdWx0LnB1c2goa2V5KTtcbiAgLy8gRG9uJ3QgZW51bSBidWcgJiBoaWRkZW4ga2V5c1xuICB3aGlsZShuYW1lcy5sZW5ndGggPiBpKWlmKGhhcyhPLCBrZXkgPSBuYW1lc1tpKytdKSl7XG4gICAgfmFycmF5SW5kZXhPZihyZXN1bHQsIGtleSkgfHwgcmVzdWx0LnB1c2goa2V5KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufTsiLCIvLyAxOS4xLjIuMTQgLyAxNS4yLjMuMTQgT2JqZWN0LmtleXMoTylcbnZhciAka2V5cyAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzLWludGVybmFsJylcbiAgLCBlbnVtQnVnS2V5cyA9IHJlcXVpcmUoJy4vX2VudW0tYnVnLWtleXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3Qua2V5cyB8fCBmdW5jdGlvbiBrZXlzKE8pe1xuICByZXR1cm4gJGtleXMoTywgZW51bUJ1Z0tleXMpO1xufTsiLCJleHBvcnRzLmYgPSB7fS5wcm9wZXJ0eUlzRW51bWVyYWJsZTsiLCIvLyBtb3N0IE9iamVjdCBtZXRob2RzIGJ5IEVTNiBzaG91bGQgYWNjZXB0IHByaW1pdGl2ZXNcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCBjb3JlICAgID0gcmVxdWlyZSgnLi9fY29yZScpXG4gICwgZmFpbHMgICA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKEtFWSwgZXhlYyl7XG4gIHZhciBmbiAgPSAoY29yZS5PYmplY3QgfHwge30pW0tFWV0gfHwgT2JqZWN0W0tFWV1cbiAgICAsIGV4cCA9IHt9O1xuICBleHBbS0VZXSA9IGV4ZWMoZm4pO1xuICAkZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIGZhaWxzKGZ1bmN0aW9uKCl7IGZuKDEpOyB9KSwgJ09iamVjdCcsIGV4cCk7XG59OyIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oYml0bWFwLCB2YWx1ZSl7XG4gIHJldHVybiB7XG4gICAgZW51bWVyYWJsZSAgOiAhKGJpdG1hcCAmIDEpLFxuICAgIGNvbmZpZ3VyYWJsZTogIShiaXRtYXAgJiAyKSxcbiAgICB3cml0YWJsZSAgICA6ICEoYml0bWFwICYgNCksXG4gICAgdmFsdWUgICAgICAgOiB2YWx1ZVxuICB9O1xufTsiLCJ2YXIgc2hhcmVkID0gcmVxdWlyZSgnLi9fc2hhcmVkJykoJ2tleXMnKVxuICAsIHVpZCAgICA9IHJlcXVpcmUoJy4vX3VpZCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihrZXkpe1xuICByZXR1cm4gc2hhcmVkW2tleV0gfHwgKHNoYXJlZFtrZXldID0gdWlkKGtleSkpO1xufTsiLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJylcbiAgLCBTSEFSRUQgPSAnX19jb3JlLWpzX3NoYXJlZF9fJ1xuICAsIHN0b3JlICA9IGdsb2JhbFtTSEFSRURdIHx8IChnbG9iYWxbU0hBUkVEXSA9IHt9KTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oa2V5KXtcbiAgcmV0dXJuIHN0b3JlW2tleV0gfHwgKHN0b3JlW2tleV0gPSB7fSk7XG59OyIsInZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJylcbiAgLCBtYXggICAgICAgPSBNYXRoLm1heFxuICAsIG1pbiAgICAgICA9IE1hdGgubWluO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpbmRleCwgbGVuZ3RoKXtcbiAgaW5kZXggPSB0b0ludGVnZXIoaW5kZXgpO1xuICByZXR1cm4gaW5kZXggPCAwID8gbWF4KGluZGV4ICsgbGVuZ3RoLCAwKSA6IG1pbihpbmRleCwgbGVuZ3RoKTtcbn07IiwiLy8gNy4xLjQgVG9JbnRlZ2VyXG52YXIgY2VpbCAgPSBNYXRoLmNlaWxcbiAgLCBmbG9vciA9IE1hdGguZmxvb3I7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXtcbiAgcmV0dXJuIGlzTmFOKGl0ID0gK2l0KSA/IDAgOiAoaXQgPiAwID8gZmxvb3IgOiBjZWlsKShpdCk7XG59OyIsIi8vIHRvIGluZGV4ZWQgb2JqZWN0LCB0b09iamVjdCB3aXRoIGZhbGxiYWNrIGZvciBub24tYXJyYXktbGlrZSBFUzMgc3RyaW5nc1xudmFyIElPYmplY3QgPSByZXF1aXJlKCcuL19pb2JqZWN0JylcbiAgLCBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7XG4gIHJldHVybiBJT2JqZWN0KGRlZmluZWQoaXQpKTtcbn07IiwiLy8gNy4xLjE1IFRvTGVuZ3RoXG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpXG4gICwgbWluICAgICAgID0gTWF0aC5taW47XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXtcbiAgcmV0dXJuIGl0ID4gMCA/IG1pbih0b0ludGVnZXIoaXQpLCAweDFmZmZmZmZmZmZmZmZmKSA6IDA7IC8vIHBvdygyLCA1MykgLSAxID09IDkwMDcxOTkyNTQ3NDA5OTFcbn07IiwiLy8gNy4xLjEzIFRvT2JqZWN0KGFyZ3VtZW50KVxudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXtcbiAgcmV0dXJuIE9iamVjdChkZWZpbmVkKGl0KSk7XG59OyIsIi8vIDcuMS4xIFRvUHJpbWl0aXZlKGlucHV0IFssIFByZWZlcnJlZFR5cGVdKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG4vLyBpbnN0ZWFkIG9mIHRoZSBFUzYgc3BlYyB2ZXJzaW9uLCB3ZSBkaWRuJ3QgaW1wbGVtZW50IEBAdG9QcmltaXRpdmUgY2FzZVxuLy8gYW5kIHRoZSBzZWNvbmQgYXJndW1lbnQgLSBmbGFnIC0gcHJlZmVycmVkIHR5cGUgaXMgYSBzdHJpbmdcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQsIFMpe1xuICBpZighaXNPYmplY3QoaXQpKXJldHVybiBpdDtcbiAgdmFyIGZuLCB2YWw7XG4gIGlmKFMgJiYgdHlwZW9mIChmbiA9IGl0LnRvU3RyaW5nKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpcmV0dXJuIHZhbDtcbiAgaWYodHlwZW9mIChmbiA9IGl0LnZhbHVlT2YpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaXQpKSlyZXR1cm4gdmFsO1xuICBpZighUyAmJiB0eXBlb2YgKGZuID0gaXQudG9TdHJpbmcpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaXQpKSlyZXR1cm4gdmFsO1xuICB0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjb252ZXJ0IG9iamVjdCB0byBwcmltaXRpdmUgdmFsdWVcIik7XG59OyIsInZhciBpZCA9IDBcbiAgLCBweCA9IE1hdGgucmFuZG9tKCk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGtleSl7XG4gIHJldHVybiAnU3ltYm9sKCcuY29uY2F0KGtleSA9PT0gdW5kZWZpbmVkID8gJycgOiBrZXksICcpXycsICgrK2lkICsgcHgpLnRvU3RyaW5nKDM2KSk7XG59OyIsIi8vIDE5LjEuMy4xIE9iamVjdC5hc3NpZ24odGFyZ2V0LCBzb3VyY2UpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiwgJ09iamVjdCcsIHthc3NpZ246IHJlcXVpcmUoJy4vX29iamVjdC1hc3NpZ24nKX0pOyIsIi8vIDE5LjEuMi4xNCBPYmplY3Qua2V5cyhPKVxudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0JylcbiAgLCAka2V5cyAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgna2V5cycsIGZ1bmN0aW9uKCl7XG4gIHJldHVybiBmdW5jdGlvbiBrZXlzKGl0KXtcbiAgICByZXR1cm4gJGtleXModG9PYmplY3QoaXQpKTtcbiAgfTtcbn0pOyIsIihmdW5jdGlvbigpIHtcbiAgdmFyIGJhc2U2NG1hcFxuICAgICAgPSAnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLycsXG5cbiAgY3J5cHQgPSB7XG4gICAgLy8gQml0LXdpc2Ugcm90YXRpb24gbGVmdFxuICAgIHJvdGw6IGZ1bmN0aW9uKG4sIGIpIHtcbiAgICAgIHJldHVybiAobiA8PCBiKSB8IChuID4+PiAoMzIgLSBiKSk7XG4gICAgfSxcblxuICAgIC8vIEJpdC13aXNlIHJvdGF0aW9uIHJpZ2h0XG4gICAgcm90cjogZnVuY3Rpb24obiwgYikge1xuICAgICAgcmV0dXJuIChuIDw8ICgzMiAtIGIpKSB8IChuID4+PiBiKTtcbiAgICB9LFxuXG4gICAgLy8gU3dhcCBiaWctZW5kaWFuIHRvIGxpdHRsZS1lbmRpYW4gYW5kIHZpY2UgdmVyc2FcbiAgICBlbmRpYW46IGZ1bmN0aW9uKG4pIHtcbiAgICAgIC8vIElmIG51bWJlciBnaXZlbiwgc3dhcCBlbmRpYW5cbiAgICAgIGlmIChuLmNvbnN0cnVjdG9yID09IE51bWJlcikge1xuICAgICAgICByZXR1cm4gY3J5cHQucm90bChuLCA4KSAmIDB4MDBGRjAwRkYgfCBjcnlwdC5yb3RsKG4sIDI0KSAmIDB4RkYwMEZGMDA7XG4gICAgICB9XG5cbiAgICAgIC8vIEVsc2UsIGFzc3VtZSBhcnJheSBhbmQgc3dhcCBhbGwgaXRlbXNcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbi5sZW5ndGg7IGkrKylcbiAgICAgICAgbltpXSA9IGNyeXB0LmVuZGlhbihuW2ldKTtcbiAgICAgIHJldHVybiBuO1xuICAgIH0sXG5cbiAgICAvLyBHZW5lcmF0ZSBhbiBhcnJheSBvZiBhbnkgbGVuZ3RoIG9mIHJhbmRvbSBieXRlc1xuICAgIHJhbmRvbUJ5dGVzOiBmdW5jdGlvbihuKSB7XG4gICAgICBmb3IgKHZhciBieXRlcyA9IFtdOyBuID4gMDsgbi0tKVxuICAgICAgICBieXRlcy5wdXNoKE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDI1NikpO1xuICAgICAgcmV0dXJuIGJ5dGVzO1xuICAgIH0sXG5cbiAgICAvLyBDb252ZXJ0IGEgYnl0ZSBhcnJheSB0byBiaWctZW5kaWFuIDMyLWJpdCB3b3Jkc1xuICAgIGJ5dGVzVG9Xb3JkczogZnVuY3Rpb24oYnl0ZXMpIHtcbiAgICAgIGZvciAodmFyIHdvcmRzID0gW10sIGkgPSAwLCBiID0gMDsgaSA8IGJ5dGVzLmxlbmd0aDsgaSsrLCBiICs9IDgpXG4gICAgICAgIHdvcmRzW2IgPj4+IDVdIHw9IGJ5dGVzW2ldIDw8ICgyNCAtIGIgJSAzMik7XG4gICAgICByZXR1cm4gd29yZHM7XG4gICAgfSxcblxuICAgIC8vIENvbnZlcnQgYmlnLWVuZGlhbiAzMi1iaXQgd29yZHMgdG8gYSBieXRlIGFycmF5XG4gICAgd29yZHNUb0J5dGVzOiBmdW5jdGlvbih3b3Jkcykge1xuICAgICAgZm9yICh2YXIgYnl0ZXMgPSBbXSwgYiA9IDA7IGIgPCB3b3Jkcy5sZW5ndGggKiAzMjsgYiArPSA4KVxuICAgICAgICBieXRlcy5wdXNoKCh3b3Jkc1tiID4+PiA1XSA+Pj4gKDI0IC0gYiAlIDMyKSkgJiAweEZGKTtcbiAgICAgIHJldHVybiBieXRlcztcbiAgICB9LFxuXG4gICAgLy8gQ29udmVydCBhIGJ5dGUgYXJyYXkgdG8gYSBoZXggc3RyaW5nXG4gICAgYnl0ZXNUb0hleDogZnVuY3Rpb24oYnl0ZXMpIHtcbiAgICAgIGZvciAodmFyIGhleCA9IFtdLCBpID0gMDsgaSA8IGJ5dGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGhleC5wdXNoKChieXRlc1tpXSA+Pj4gNCkudG9TdHJpbmcoMTYpKTtcbiAgICAgICAgaGV4LnB1c2goKGJ5dGVzW2ldICYgMHhGKS50b1N0cmluZygxNikpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGhleC5qb2luKCcnKTtcbiAgICB9LFxuXG4gICAgLy8gQ29udmVydCBhIGhleCBzdHJpbmcgdG8gYSBieXRlIGFycmF5XG4gICAgaGV4VG9CeXRlczogZnVuY3Rpb24oaGV4KSB7XG4gICAgICBmb3IgKHZhciBieXRlcyA9IFtdLCBjID0gMDsgYyA8IGhleC5sZW5ndGg7IGMgKz0gMilcbiAgICAgICAgYnl0ZXMucHVzaChwYXJzZUludChoZXguc3Vic3RyKGMsIDIpLCAxNikpO1xuICAgICAgcmV0dXJuIGJ5dGVzO1xuICAgIH0sXG5cbiAgICAvLyBDb252ZXJ0IGEgYnl0ZSBhcnJheSB0byBhIGJhc2UtNjQgc3RyaW5nXG4gICAgYnl0ZXNUb0Jhc2U2NDogZnVuY3Rpb24oYnl0ZXMpIHtcbiAgICAgIGZvciAodmFyIGJhc2U2NCA9IFtdLCBpID0gMDsgaSA8IGJ5dGVzLmxlbmd0aDsgaSArPSAzKSB7XG4gICAgICAgIHZhciB0cmlwbGV0ID0gKGJ5dGVzW2ldIDw8IDE2KSB8IChieXRlc1tpICsgMV0gPDwgOCkgfCBieXRlc1tpICsgMl07XG4gICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgNDsgaisrKVxuICAgICAgICAgIGlmIChpICogOCArIGogKiA2IDw9IGJ5dGVzLmxlbmd0aCAqIDgpXG4gICAgICAgICAgICBiYXNlNjQucHVzaChiYXNlNjRtYXAuY2hhckF0KCh0cmlwbGV0ID4+PiA2ICogKDMgLSBqKSkgJiAweDNGKSk7XG4gICAgICAgICAgZWxzZVxuICAgICAgICAgICAgYmFzZTY0LnB1c2goJz0nKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlNjQuam9pbignJyk7XG4gICAgfSxcblxuICAgIC8vIENvbnZlcnQgYSBiYXNlLTY0IHN0cmluZyB0byBhIGJ5dGUgYXJyYXlcbiAgICBiYXNlNjRUb0J5dGVzOiBmdW5jdGlvbihiYXNlNjQpIHtcbiAgICAgIC8vIFJlbW92ZSBub24tYmFzZS02NCBjaGFyYWN0ZXJzXG4gICAgICBiYXNlNjQgPSBiYXNlNjQucmVwbGFjZSgvW15BLVowLTkrXFwvXS9pZywgJycpO1xuXG4gICAgICBmb3IgKHZhciBieXRlcyA9IFtdLCBpID0gMCwgaW1vZDQgPSAwOyBpIDwgYmFzZTY0Lmxlbmd0aDtcbiAgICAgICAgICBpbW9kNCA9ICsraSAlIDQpIHtcbiAgICAgICAgaWYgKGltb2Q0ID09IDApIGNvbnRpbnVlO1xuICAgICAgICBieXRlcy5wdXNoKCgoYmFzZTY0bWFwLmluZGV4T2YoYmFzZTY0LmNoYXJBdChpIC0gMSkpXG4gICAgICAgICAgICAmIChNYXRoLnBvdygyLCAtMiAqIGltb2Q0ICsgOCkgLSAxKSkgPDwgKGltb2Q0ICogMikpXG4gICAgICAgICAgICB8IChiYXNlNjRtYXAuaW5kZXhPZihiYXNlNjQuY2hhckF0KGkpKSA+Pj4gKDYgLSBpbW9kNCAqIDIpKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gYnl0ZXM7XG4gICAgfVxuICB9O1xuXG4gIG1vZHVsZS5leHBvcnRzID0gY3J5cHQ7XG59KSgpO1xuIiwiLyohXG4gKiBEZXRlcm1pbmUgaWYgYW4gb2JqZWN0IGlzIGEgQnVmZmVyXG4gKlxuICogQGF1dGhvciAgIEZlcm9zcyBBYm91a2hhZGlqZWggPGZlcm9zc0BmZXJvc3Mub3JnPiA8aHR0cDovL2Zlcm9zcy5vcmc+XG4gKiBAbGljZW5zZSAgTUlUXG4gKi9cblxuLy8gVGhlIF9pc0J1ZmZlciBjaGVjayBpcyBmb3IgU2FmYXJpIDUtNyBzdXBwb3J0LCBiZWNhdXNlIGl0J3MgbWlzc2luZ1xuLy8gT2JqZWN0LnByb3RvdHlwZS5jb25zdHJ1Y3Rvci4gUmVtb3ZlIHRoaXMgZXZlbnR1YWxseVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqKSB7XG4gIHJldHVybiBvYmogIT0gbnVsbCAmJiAoaXNCdWZmZXIob2JqKSB8fCBpc1Nsb3dCdWZmZXIob2JqKSB8fCAhIW9iai5faXNCdWZmZXIpXG59XG5cbmZ1bmN0aW9uIGlzQnVmZmVyIChvYmopIHtcbiAgcmV0dXJuICEhb2JqLmNvbnN0cnVjdG9yICYmIHR5cGVvZiBvYmouY29uc3RydWN0b3IuaXNCdWZmZXIgPT09ICdmdW5jdGlvbicgJiYgb2JqLmNvbnN0cnVjdG9yLmlzQnVmZmVyKG9iailcbn1cblxuLy8gRm9yIE5vZGUgdjAuMTAgc3VwcG9ydC4gUmVtb3ZlIHRoaXMgZXZlbnR1YWxseS5cbmZ1bmN0aW9uIGlzU2xvd0J1ZmZlciAob2JqKSB7XG4gIHJldHVybiB0eXBlb2Ygb2JqLnJlYWRGbG9hdExFID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBvYmouc2xpY2UgPT09ICdmdW5jdGlvbicgJiYgaXNCdWZmZXIob2JqLnNsaWNlKDAsIDApKVxufVxuIiwiKGZ1bmN0aW9uKCl7XHJcbiAgdmFyIGNyeXB0ID0gcmVxdWlyZSgnY3J5cHQnKSxcclxuICAgICAgdXRmOCA9IHJlcXVpcmUoJ2NoYXJlbmMnKS51dGY4LFxyXG4gICAgICBpc0J1ZmZlciA9IHJlcXVpcmUoJ2lzLWJ1ZmZlcicpLFxyXG4gICAgICBiaW4gPSByZXF1aXJlKCdjaGFyZW5jJykuYmluLFxyXG5cclxuICAvLyBUaGUgY29yZVxyXG4gIG1kNSA9IGZ1bmN0aW9uIChtZXNzYWdlLCBvcHRpb25zKSB7XHJcbiAgICAvLyBDb252ZXJ0IHRvIGJ5dGUgYXJyYXlcclxuICAgIGlmIChtZXNzYWdlLmNvbnN0cnVjdG9yID09IFN0cmluZylcclxuICAgICAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5lbmNvZGluZyA9PT0gJ2JpbmFyeScpXHJcbiAgICAgICAgbWVzc2FnZSA9IGJpbi5zdHJpbmdUb0J5dGVzKG1lc3NhZ2UpO1xyXG4gICAgICBlbHNlXHJcbiAgICAgICAgbWVzc2FnZSA9IHV0Zjguc3RyaW5nVG9CeXRlcyhtZXNzYWdlKTtcclxuICAgIGVsc2UgaWYgKGlzQnVmZmVyKG1lc3NhZ2UpKVxyXG4gICAgICBtZXNzYWdlID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwobWVzc2FnZSwgMCk7XHJcbiAgICBlbHNlIGlmICghQXJyYXkuaXNBcnJheShtZXNzYWdlKSlcclxuICAgICAgbWVzc2FnZSA9IG1lc3NhZ2UudG9TdHJpbmcoKTtcclxuICAgIC8vIGVsc2UsIGFzc3VtZSBieXRlIGFycmF5IGFscmVhZHlcclxuXHJcbiAgICB2YXIgbSA9IGNyeXB0LmJ5dGVzVG9Xb3JkcyhtZXNzYWdlKSxcclxuICAgICAgICBsID0gbWVzc2FnZS5sZW5ndGggKiA4LFxyXG4gICAgICAgIGEgPSAgMTczMjU4NDE5MyxcclxuICAgICAgICBiID0gLTI3MTczMzg3OSxcclxuICAgICAgICBjID0gLTE3MzI1ODQxOTQsXHJcbiAgICAgICAgZCA9ICAyNzE3MzM4Nzg7XHJcblxyXG4gICAgLy8gU3dhcCBlbmRpYW5cclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbS5sZW5ndGg7IGkrKykge1xyXG4gICAgICBtW2ldID0gKChtW2ldIDw8ICA4KSB8IChtW2ldID4+PiAyNCkpICYgMHgwMEZGMDBGRiB8XHJcbiAgICAgICAgICAgICAoKG1baV0gPDwgMjQpIHwgKG1baV0gPj4+ICA4KSkgJiAweEZGMDBGRjAwO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFBhZGRpbmdcclxuICAgIG1bbCA+Pj4gNV0gfD0gMHg4MCA8PCAobCAlIDMyKTtcclxuICAgIG1bKCgobCArIDY0KSA+Pj4gOSkgPDwgNCkgKyAxNF0gPSBsO1xyXG5cclxuICAgIC8vIE1ldGhvZCBzaG9ydGN1dHNcclxuICAgIHZhciBGRiA9IG1kNS5fZmYsXHJcbiAgICAgICAgR0cgPSBtZDUuX2dnLFxyXG4gICAgICAgIEhIID0gbWQ1Ll9oaCxcclxuICAgICAgICBJSSA9IG1kNS5faWk7XHJcblxyXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtLmxlbmd0aDsgaSArPSAxNikge1xyXG5cclxuICAgICAgdmFyIGFhID0gYSxcclxuICAgICAgICAgIGJiID0gYixcclxuICAgICAgICAgIGNjID0gYyxcclxuICAgICAgICAgIGRkID0gZDtcclxuXHJcbiAgICAgIGEgPSBGRihhLCBiLCBjLCBkLCBtW2krIDBdLCAgNywgLTY4MDg3NjkzNik7XHJcbiAgICAgIGQgPSBGRihkLCBhLCBiLCBjLCBtW2krIDFdLCAxMiwgLTM4OTU2NDU4Nik7XHJcbiAgICAgIGMgPSBGRihjLCBkLCBhLCBiLCBtW2krIDJdLCAxNywgIDYwNjEwNTgxOSk7XHJcbiAgICAgIGIgPSBGRihiLCBjLCBkLCBhLCBtW2krIDNdLCAyMiwgLTEwNDQ1MjUzMzApO1xyXG4gICAgICBhID0gRkYoYSwgYiwgYywgZCwgbVtpKyA0XSwgIDcsIC0xNzY0MTg4OTcpO1xyXG4gICAgICBkID0gRkYoZCwgYSwgYiwgYywgbVtpKyA1XSwgMTIsICAxMjAwMDgwNDI2KTtcclxuICAgICAgYyA9IEZGKGMsIGQsIGEsIGIsIG1baSsgNl0sIDE3LCAtMTQ3MzIzMTM0MSk7XHJcbiAgICAgIGIgPSBGRihiLCBjLCBkLCBhLCBtW2krIDddLCAyMiwgLTQ1NzA1OTgzKTtcclxuICAgICAgYSA9IEZGKGEsIGIsIGMsIGQsIG1baSsgOF0sICA3LCAgMTc3MDAzNTQxNik7XHJcbiAgICAgIGQgPSBGRihkLCBhLCBiLCBjLCBtW2krIDldLCAxMiwgLTE5NTg0MTQ0MTcpO1xyXG4gICAgICBjID0gRkYoYywgZCwgYSwgYiwgbVtpKzEwXSwgMTcsIC00MjA2Myk7XHJcbiAgICAgIGIgPSBGRihiLCBjLCBkLCBhLCBtW2krMTFdLCAyMiwgLTE5OTA0MDQxNjIpO1xyXG4gICAgICBhID0gRkYoYSwgYiwgYywgZCwgbVtpKzEyXSwgIDcsICAxODA0NjAzNjgyKTtcclxuICAgICAgZCA9IEZGKGQsIGEsIGIsIGMsIG1baSsxM10sIDEyLCAtNDAzNDExMDEpO1xyXG4gICAgICBjID0gRkYoYywgZCwgYSwgYiwgbVtpKzE0XSwgMTcsIC0xNTAyMDAyMjkwKTtcclxuICAgICAgYiA9IEZGKGIsIGMsIGQsIGEsIG1baSsxNV0sIDIyLCAgMTIzNjUzNTMyOSk7XHJcblxyXG4gICAgICBhID0gR0coYSwgYiwgYywgZCwgbVtpKyAxXSwgIDUsIC0xNjU3OTY1MTApO1xyXG4gICAgICBkID0gR0coZCwgYSwgYiwgYywgbVtpKyA2XSwgIDksIC0xMDY5NTAxNjMyKTtcclxuICAgICAgYyA9IEdHKGMsIGQsIGEsIGIsIG1baSsxMV0sIDE0LCAgNjQzNzE3NzEzKTtcclxuICAgICAgYiA9IEdHKGIsIGMsIGQsIGEsIG1baSsgMF0sIDIwLCAtMzczODk3MzAyKTtcclxuICAgICAgYSA9IEdHKGEsIGIsIGMsIGQsIG1baSsgNV0sICA1LCAtNzAxNTU4NjkxKTtcclxuICAgICAgZCA9IEdHKGQsIGEsIGIsIGMsIG1baSsxMF0sICA5LCAgMzgwMTYwODMpO1xyXG4gICAgICBjID0gR0coYywgZCwgYSwgYiwgbVtpKzE1XSwgMTQsIC02NjA0NzgzMzUpO1xyXG4gICAgICBiID0gR0coYiwgYywgZCwgYSwgbVtpKyA0XSwgMjAsIC00MDU1Mzc4NDgpO1xyXG4gICAgICBhID0gR0coYSwgYiwgYywgZCwgbVtpKyA5XSwgIDUsICA1Njg0NDY0MzgpO1xyXG4gICAgICBkID0gR0coZCwgYSwgYiwgYywgbVtpKzE0XSwgIDksIC0xMDE5ODAzNjkwKTtcclxuICAgICAgYyA9IEdHKGMsIGQsIGEsIGIsIG1baSsgM10sIDE0LCAtMTg3MzYzOTYxKTtcclxuICAgICAgYiA9IEdHKGIsIGMsIGQsIGEsIG1baSsgOF0sIDIwLCAgMTE2MzUzMTUwMSk7XHJcbiAgICAgIGEgPSBHRyhhLCBiLCBjLCBkLCBtW2krMTNdLCAgNSwgLTE0NDQ2ODE0NjcpO1xyXG4gICAgICBkID0gR0coZCwgYSwgYiwgYywgbVtpKyAyXSwgIDksIC01MTQwMzc4NCk7XHJcbiAgICAgIGMgPSBHRyhjLCBkLCBhLCBiLCBtW2krIDddLCAxNCwgIDE3MzUzMjg0NzMpO1xyXG4gICAgICBiID0gR0coYiwgYywgZCwgYSwgbVtpKzEyXSwgMjAsIC0xOTI2NjA3NzM0KTtcclxuXHJcbiAgICAgIGEgPSBISChhLCBiLCBjLCBkLCBtW2krIDVdLCAgNCwgLTM3ODU1OCk7XHJcbiAgICAgIGQgPSBISChkLCBhLCBiLCBjLCBtW2krIDhdLCAxMSwgLTIwMjI1NzQ0NjMpO1xyXG4gICAgICBjID0gSEgoYywgZCwgYSwgYiwgbVtpKzExXSwgMTYsICAxODM5MDMwNTYyKTtcclxuICAgICAgYiA9IEhIKGIsIGMsIGQsIGEsIG1baSsxNF0sIDIzLCAtMzUzMDk1NTYpO1xyXG4gICAgICBhID0gSEgoYSwgYiwgYywgZCwgbVtpKyAxXSwgIDQsIC0xNTMwOTkyMDYwKTtcclxuICAgICAgZCA9IEhIKGQsIGEsIGIsIGMsIG1baSsgNF0sIDExLCAgMTI3Mjg5MzM1Myk7XHJcbiAgICAgIGMgPSBISChjLCBkLCBhLCBiLCBtW2krIDddLCAxNiwgLTE1NTQ5NzYzMik7XHJcbiAgICAgIGIgPSBISChiLCBjLCBkLCBhLCBtW2krMTBdLCAyMywgLTEwOTQ3MzA2NDApO1xyXG4gICAgICBhID0gSEgoYSwgYiwgYywgZCwgbVtpKzEzXSwgIDQsICA2ODEyNzkxNzQpO1xyXG4gICAgICBkID0gSEgoZCwgYSwgYiwgYywgbVtpKyAwXSwgMTEsIC0zNTg1MzcyMjIpO1xyXG4gICAgICBjID0gSEgoYywgZCwgYSwgYiwgbVtpKyAzXSwgMTYsIC03MjI1MjE5NzkpO1xyXG4gICAgICBiID0gSEgoYiwgYywgZCwgYSwgbVtpKyA2XSwgMjMsICA3NjAyOTE4OSk7XHJcbiAgICAgIGEgPSBISChhLCBiLCBjLCBkLCBtW2krIDldLCAgNCwgLTY0MDM2NDQ4Nyk7XHJcbiAgICAgIGQgPSBISChkLCBhLCBiLCBjLCBtW2krMTJdLCAxMSwgLTQyMTgxNTgzNSk7XHJcbiAgICAgIGMgPSBISChjLCBkLCBhLCBiLCBtW2krMTVdLCAxNiwgIDUzMDc0MjUyMCk7XHJcbiAgICAgIGIgPSBISChiLCBjLCBkLCBhLCBtW2krIDJdLCAyMywgLTk5NTMzODY1MSk7XHJcblxyXG4gICAgICBhID0gSUkoYSwgYiwgYywgZCwgbVtpKyAwXSwgIDYsIC0xOTg2MzA4NDQpO1xyXG4gICAgICBkID0gSUkoZCwgYSwgYiwgYywgbVtpKyA3XSwgMTAsICAxMTI2ODkxNDE1KTtcclxuICAgICAgYyA9IElJKGMsIGQsIGEsIGIsIG1baSsxNF0sIDE1LCAtMTQxNjM1NDkwNSk7XHJcbiAgICAgIGIgPSBJSShiLCBjLCBkLCBhLCBtW2krIDVdLCAyMSwgLTU3NDM0MDU1KTtcclxuICAgICAgYSA9IElJKGEsIGIsIGMsIGQsIG1baSsxMl0sICA2LCAgMTcwMDQ4NTU3MSk7XHJcbiAgICAgIGQgPSBJSShkLCBhLCBiLCBjLCBtW2krIDNdLCAxMCwgLTE4OTQ5ODY2MDYpO1xyXG4gICAgICBjID0gSUkoYywgZCwgYSwgYiwgbVtpKzEwXSwgMTUsIC0xMDUxNTIzKTtcclxuICAgICAgYiA9IElJKGIsIGMsIGQsIGEsIG1baSsgMV0sIDIxLCAtMjA1NDkyMjc5OSk7XHJcbiAgICAgIGEgPSBJSShhLCBiLCBjLCBkLCBtW2krIDhdLCAgNiwgIDE4NzMzMTMzNTkpO1xyXG4gICAgICBkID0gSUkoZCwgYSwgYiwgYywgbVtpKzE1XSwgMTAsIC0zMDYxMTc0NCk7XHJcbiAgICAgIGMgPSBJSShjLCBkLCBhLCBiLCBtW2krIDZdLCAxNSwgLTE1NjAxOTgzODApO1xyXG4gICAgICBiID0gSUkoYiwgYywgZCwgYSwgbVtpKzEzXSwgMjEsICAxMzA5MTUxNjQ5KTtcclxuICAgICAgYSA9IElJKGEsIGIsIGMsIGQsIG1baSsgNF0sICA2LCAtMTQ1NTIzMDcwKTtcclxuICAgICAgZCA9IElJKGQsIGEsIGIsIGMsIG1baSsxMV0sIDEwLCAtMTEyMDIxMDM3OSk7XHJcbiAgICAgIGMgPSBJSShjLCBkLCBhLCBiLCBtW2krIDJdLCAxNSwgIDcxODc4NzI1OSk7XHJcbiAgICAgIGIgPSBJSShiLCBjLCBkLCBhLCBtW2krIDldLCAyMSwgLTM0MzQ4NTU1MSk7XHJcblxyXG4gICAgICBhID0gKGEgKyBhYSkgPj4+IDA7XHJcbiAgICAgIGIgPSAoYiArIGJiKSA+Pj4gMDtcclxuICAgICAgYyA9IChjICsgY2MpID4+PiAwO1xyXG4gICAgICBkID0gKGQgKyBkZCkgPj4+IDA7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGNyeXB0LmVuZGlhbihbYSwgYiwgYywgZF0pO1xyXG4gIH07XHJcblxyXG4gIC8vIEF1eGlsaWFyeSBmdW5jdGlvbnNcclxuICBtZDUuX2ZmICA9IGZ1bmN0aW9uIChhLCBiLCBjLCBkLCB4LCBzLCB0KSB7XHJcbiAgICB2YXIgbiA9IGEgKyAoYiAmIGMgfCB+YiAmIGQpICsgKHggPj4+IDApICsgdDtcclxuICAgIHJldHVybiAoKG4gPDwgcykgfCAobiA+Pj4gKDMyIC0gcykpKSArIGI7XHJcbiAgfTtcclxuICBtZDUuX2dnICA9IGZ1bmN0aW9uIChhLCBiLCBjLCBkLCB4LCBzLCB0KSB7XHJcbiAgICB2YXIgbiA9IGEgKyAoYiAmIGQgfCBjICYgfmQpICsgKHggPj4+IDApICsgdDtcclxuICAgIHJldHVybiAoKG4gPDwgcykgfCAobiA+Pj4gKDMyIC0gcykpKSArIGI7XHJcbiAgfTtcclxuICBtZDUuX2hoICA9IGZ1bmN0aW9uIChhLCBiLCBjLCBkLCB4LCBzLCB0KSB7XHJcbiAgICB2YXIgbiA9IGEgKyAoYiBeIGMgXiBkKSArICh4ID4+PiAwKSArIHQ7XHJcbiAgICByZXR1cm4gKChuIDw8IHMpIHwgKG4gPj4+ICgzMiAtIHMpKSkgKyBiO1xyXG4gIH07XHJcbiAgbWQ1Ll9paSAgPSBmdW5jdGlvbiAoYSwgYiwgYywgZCwgeCwgcywgdCkge1xyXG4gICAgdmFyIG4gPSBhICsgKGMgXiAoYiB8IH5kKSkgKyAoeCA+Pj4gMCkgKyB0O1xyXG4gICAgcmV0dXJuICgobiA8PCBzKSB8IChuID4+PiAoMzIgLSBzKSkpICsgYjtcclxuICB9O1xyXG5cclxuICAvLyBQYWNrYWdlIHByaXZhdGUgYmxvY2tzaXplXHJcbiAgbWQ1Ll9ibG9ja3NpemUgPSAxNjtcclxuICBtZDUuX2RpZ2VzdHNpemUgPSAxNjtcclxuXHJcbiAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobWVzc2FnZSwgb3B0aW9ucykge1xyXG4gICAgaWYgKG1lc3NhZ2UgPT09IHVuZGVmaW5lZCB8fCBtZXNzYWdlID09PSBudWxsKVxyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0lsbGVnYWwgYXJndW1lbnQgJyArIG1lc3NhZ2UpO1xyXG5cclxuICAgIHZhciBkaWdlc3RieXRlcyA9IGNyeXB0LndvcmRzVG9CeXRlcyhtZDUobWVzc2FnZSwgb3B0aW9ucykpO1xyXG4gICAgcmV0dXJuIG9wdGlvbnMgJiYgb3B0aW9ucy5hc0J5dGVzID8gZGlnZXN0Ynl0ZXMgOlxyXG4gICAgICAgIG9wdGlvbnMgJiYgb3B0aW9ucy5hc1N0cmluZyA/IGJpbi5ieXRlc1RvU3RyaW5nKGRpZ2VzdGJ5dGVzKSA6XHJcbiAgICAgICAgY3J5cHQuYnl0ZXNUb0hleChkaWdlc3RieXRlcyk7XHJcbiAgfTtcclxuXHJcbn0pKCk7XHJcbiIsIihmdW5jdGlvbihlLCBhKSB7IGZvcih2YXIgaSBpbiBhKSBlW2ldID0gYVtpXTsgfSh0aGlzLCAvKioqKioqLyAoZnVuY3Rpb24obW9kdWxlcykgeyAvLyB3ZWJwYWNrQm9vdHN0cmFwXG4vKioqKioqLyBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4vKioqKioqLyBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4vKioqKioqLyBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbi8qKioqKiovIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuLyoqKioqKi8gXHRcdH1cbi8qKioqKiovIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuLyoqKioqKi8gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbi8qKioqKiovIFx0XHRcdGk6IG1vZHVsZUlkLFxuLyoqKioqKi8gXHRcdFx0bDogZmFsc2UsXG4vKioqKioqLyBcdFx0XHRleHBvcnRzOiB7fVxuLyoqKioqKi8gXHRcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuLyoqKioqKi8gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4vKioqKioqLyBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuLyoqKioqKi8gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbi8qKioqKiovIFx0fVxuLyoqKioqKi9cbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gaWRlbnRpdHkgZnVuY3Rpb24gZm9yIGNhbGxpbmcgaGFybW9ueSBpbXBvcnRzIHdpdGggdGhlIGNvcnJlY3QgY29udGV4dFxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmkgPSBmdW5jdGlvbih2YWx1ZSkgeyByZXR1cm4gdmFsdWU7IH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4vKioqKioqLyBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuLyoqKioqKi8gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHtcbi8qKioqKiovIFx0XHRcdFx0Y29uZmlndXJhYmxlOiBmYWxzZSxcbi8qKioqKiovIFx0XHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcbi8qKioqKiovIFx0XHRcdFx0Z2V0OiBnZXR0ZXJcbi8qKioqKiovIFx0XHRcdH0pO1xuLyoqKioqKi8gXHRcdH1cbi8qKioqKiovIFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuLyoqKioqKi8gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuLyoqKioqKi8gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbi8qKioqKiovIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4vKioqKioqLyBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuLyoqKioqKi8gXHRcdHJldHVybiBnZXR0ZXI7XG4vKioqKioqLyBcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuLyoqKioqKi8gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSA3Nik7XG4vKioqKioqLyB9KVxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKioqKiovIChbXG4vKiAwICovXG4vKiBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyogYWxsIGV4cG9ydHMgdXNlZCAqL1xuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9+L2NhcnRvL2xpYi9jYXJ0by90cmVlLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuZXZhbChcIi8qKlxcbiAqIFRPRE86IGRvY3VtZW50IHRoaXMuIFdoYXQgZG9lcyB0aGlzIGRvP1xcbiAqL1xcbmlmKHRydWUpIHtcXG4gIG1vZHVsZS5leHBvcnRzLmZpbmQgPSBmdW5jdGlvbiAob2JqLCBmdW4pIHtcXG4gICAgICBmb3IgKHZhciBpID0gMCwgcjsgaSA8IG9iai5sZW5ndGg7IGkrKykge1xcbiAgICAgICAgICBpZiAociA9IGZ1bi5jYWxsKG9iaiwgb2JqW2ldKSkgeyByZXR1cm4gcjsgfVxcbiAgICAgIH1cXG4gICAgICByZXR1cm4gbnVsbDtcXG4gIH07XFxufVxcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pTUM1cWN5SXNJbk52ZFhKalpYTWlPbHNpZDJWaWNHRmphem92THk4dUwzNHZZMkZ5ZEc4dmJHbGlMMk5oY25SdkwzUnlaV1V1YW5NL09URmlOU0pkTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lJdktpcGNiaUFxSUZSUFJFODZJR1J2WTNWdFpXNTBJSFJvYVhNdUlGZG9ZWFFnWkc5bGN5QjBhR2x6SUdSdlAxeHVJQ292WEc1cFppaDBlWEJsYjJZb2JXOWtkV3hsS1NBaFBUMGdYQ0oxYm1SbFptbHVaV1JjSWlrZ2UxeHVJQ0J0YjJSMWJHVXVaWGh3YjNKMGN5NW1hVzVrSUQwZ1puVnVZM1JwYjI0Z0tHOWlhaXdnWm5WdUtTQjdYRzRnSUNBZ0lDQm1iM0lnS0haaGNpQnBJRDBnTUN3Z2Nqc2dhU0E4SUc5aWFpNXNaVzVuZEdnN0lHa3JLeWtnZTF4dUlDQWdJQ0FnSUNBZ0lHbG1JQ2h5SUQwZ1puVnVMbU5oYkd3b2IySnFMQ0J2WW1wYmFWMHBLU0I3SUhKbGRIVnliaUJ5T3lCOVhHNGdJQ0FnSUNCOVhHNGdJQ0FnSUNCeVpYUjFjbTRnYm5Wc2JEdGNiaUFnZlR0Y2JuMWNibHh1WEc1Y2JpOHZMeTh2THk4dkx5OHZMeTh2THk4dkwxeHVMeThnVjBWQ1VFRkRTeUJHVDA5VVJWSmNiaTh2SUM0dmZpOWpZWEowYnk5c2FXSXZZMkZ5ZEc4dmRISmxaUzVxYzF4dUx5OGdiVzlrZFd4bElHbGtJRDBnTUZ4dUx5OGdiVzlrZFd4bElHTm9kVzVyY3lBOUlEQWlYU3dpYldGd2NHbHVaM01pT2lKQlFVRkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN0lpd2ljMjkxY21ObFVtOXZkQ0k2SWlKOVwiKTtcblxuLyoqKi8gfSksXG4vKiAxICovXG4vKiBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyogYWxsIGV4cG9ydHMgdXNlZCAqL1xuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9+L3JhbWRhL3NyYy9pbnRlcm5hbC9fY3VycnkyLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuZXZhbChcInZhciBfY3VycnkxID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9fY3VycnkxICovIDIpO1xcbnZhciBfaXNQbGFjZWhvbGRlciA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vX2lzUGxhY2Vob2xkZXIgKi8gMjUpO1xcblxcblxcbi8qKlxcbiAqIE9wdGltaXplZCBpbnRlcm5hbCB0d28tYXJpdHkgY3VycnkgZnVuY3Rpb24uXFxuICpcXG4gKiBAcHJpdmF0ZVxcbiAqIEBjYXRlZ29yeSBGdW5jdGlvblxcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBmdW5jdGlvbiB0byBjdXJyeS5cXG4gKiBAcmV0dXJuIHtGdW5jdGlvbn0gVGhlIGN1cnJpZWQgZnVuY3Rpb24uXFxuICovXFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBfY3VycnkyKGZuKSB7XFxuICByZXR1cm4gZnVuY3Rpb24gZjIoYSwgYikge1xcbiAgICBzd2l0Y2ggKGFyZ3VtZW50cy5sZW5ndGgpIHtcXG4gICAgICBjYXNlIDA6XFxuICAgICAgICByZXR1cm4gZjI7XFxuICAgICAgY2FzZSAxOlxcbiAgICAgICAgcmV0dXJuIF9pc1BsYWNlaG9sZGVyKGEpID8gZjJcXG4gICAgICAgICAgICAgOiBfY3VycnkxKGZ1bmN0aW9uKF9iKSB7IHJldHVybiBmbihhLCBfYik7IH0pO1xcbiAgICAgIGRlZmF1bHQ6XFxuICAgICAgICByZXR1cm4gX2lzUGxhY2Vob2xkZXIoYSkgJiYgX2lzUGxhY2Vob2xkZXIoYikgPyBmMlxcbiAgICAgICAgICAgICA6IF9pc1BsYWNlaG9sZGVyKGEpID8gX2N1cnJ5MShmdW5jdGlvbihfYSkgeyByZXR1cm4gZm4oX2EsIGIpOyB9KVxcbiAgICAgICAgICAgICA6IF9pc1BsYWNlaG9sZGVyKGIpID8gX2N1cnJ5MShmdW5jdGlvbihfYikgeyByZXR1cm4gZm4oYSwgX2IpOyB9KVxcbiAgICAgICAgICAgICA6IGZuKGEsIGIpO1xcbiAgICB9XFxuICB9O1xcbn07XFxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lNUzVxY3lJc0luTnZkWEpqWlhNaU9sc2lkMlZpY0dGamF6b3ZMeTh1TDM0dmNtRnRaR0V2YzNKakwybHVkR1Z5Ym1Gc0wxOWpkWEp5ZVRJdWFuTS9Zek5oWkNKZExDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SjJZWElnWDJOMWNuSjVNU0E5SUhKbGNYVnBjbVVvSnk0dlgyTjFjbko1TVNjcE8xeHVkbUZ5SUY5cGMxQnNZV05sYUc5c1pHVnlJRDBnY21WeGRXbHlaU2duTGk5ZmFYTlFiR0ZqWldodmJHUmxjaWNwTzF4dVhHNWNiaThxS2x4dUlDb2dUM0IwYVcxcGVtVmtJR2x1ZEdWeWJtRnNJSFIzYnkxaGNtbDBlU0JqZFhKeWVTQm1kVzVqZEdsdmJpNWNiaUFxWEc0Z0tpQkFjSEpwZG1GMFpWeHVJQ29nUUdOaGRHVm5iM0o1SUVaMWJtTjBhVzl1WEc0Z0tpQkFjR0Z5WVcwZ2UwWjFibU4wYVc5dWZTQm1iaUJVYUdVZ1puVnVZM1JwYjI0Z2RHOGdZM1Z5Y25rdVhHNGdLaUJBY21WMGRYSnVJSHRHZFc1amRHbHZibjBnVkdobElHTjFjbkpwWldRZ1puVnVZM1JwYjI0dVhHNGdLaTljYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnWm5WdVkzUnBiMjRnWDJOMWNuSjVNaWhtYmlrZ2UxeHVJQ0J5WlhSMWNtNGdablZ1WTNScGIyNGdaaklvWVN3Z1lpa2dlMXh1SUNBZ0lITjNhWFJqYUNBb1lYSm5kVzFsYm5SekxteGxibWQwYUNrZ2UxeHVJQ0FnSUNBZ1kyRnpaU0F3T2x4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnWmpJN1hHNGdJQ0FnSUNCallYTmxJREU2WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJmYVhOUWJHRmpaV2h2YkdSbGNpaGhLU0EvSUdZeVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnT2lCZlkzVnljbmt4S0daMWJtTjBhVzl1S0Y5aUtTQjdJSEpsZEhWeWJpQm1iaWhoTENCZllpazdJSDBwTzF4dUlDQWdJQ0FnWkdWbVlYVnNkRHBjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJRjlwYzFCc1lXTmxhRzlzWkdWeUtHRXBJQ1ltSUY5cGMxQnNZV05sYUc5c1pHVnlLR0lwSUQ4Z1pqSmNiaUFnSUNBZ0lDQWdJQ0FnSUNBNklGOXBjMUJzWVdObGFHOXNaR1Z5S0dFcElEOGdYMk4xY25KNU1TaG1kVzVqZEdsdmJpaGZZU2tnZXlCeVpYUjFjbTRnWm00b1gyRXNJR0lwT3lCOUtWeHVJQ0FnSUNBZ0lDQWdJQ0FnSURvZ1gybHpVR3hoWTJWb2IyeGtaWElvWWlrZ1B5QmZZM1Z5Y25reEtHWjFibU4wYVc5dUtGOWlLU0I3SUhKbGRIVnliaUJtYmloaExDQmZZaWs3SUgwcFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnT2lCbWJpaGhMQ0JpS1R0Y2JpQWdJQ0I5WEc0Z0lIMDdYRzU5TzF4dVhHNWNibHh1THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2WEc0dkx5QlhSVUpRUVVOTElFWlBUMVJGVWx4dUx5OGdMaTkrTDNKaGJXUmhMM055WXk5cGJuUmxjbTVoYkM5ZlkzVnljbmt5TG1welhHNHZMeUJ0YjJSMWJHVWdhV1FnUFNBeFhHNHZMeUJ0YjJSMWJHVWdZMmgxYm10eklEMGdNQ0pkTENKdFlYQndhVzVuY3lJNklrRkJRVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3SWl3aWMyOTFjbU5sVW05dmRDSTZJaUo5XCIpO1xuXG4vKioqLyB9KSxcbi8qIDIgKi9cbi8qIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKiBhbGwgZXhwb3J0cyB1c2VkICovXG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL34vcmFtZGEvc3JjL2ludGVybmFsL19jdXJyeTEuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5ldmFsKFwidmFyIF9pc1BsYWNlaG9sZGVyID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9faXNQbGFjZWhvbGRlciAqLyAyNSk7XFxuXFxuXFxuLyoqXFxuICogT3B0aW1pemVkIGludGVybmFsIG9uZS1hcml0eSBjdXJyeSBmdW5jdGlvbi5cXG4gKlxcbiAqIEBwcml2YXRlXFxuICogQGNhdGVnb3J5IEZ1bmN0aW9uXFxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGZ1bmN0aW9uIHRvIGN1cnJ5LlxcbiAqIEByZXR1cm4ge0Z1bmN0aW9ufSBUaGUgY3VycmllZCBmdW5jdGlvbi5cXG4gKi9cXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIF9jdXJyeTEoZm4pIHtcXG4gIHJldHVybiBmdW5jdGlvbiBmMShhKSB7XFxuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwIHx8IF9pc1BsYWNlaG9sZGVyKGEpKSB7XFxuICAgICAgcmV0dXJuIGYxO1xcbiAgICB9IGVsc2Uge1xcbiAgICAgIHJldHVybiBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xcbiAgICB9XFxuICB9O1xcbn07XFxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lNaTVxY3lJc0luTnZkWEpqWlhNaU9sc2lkMlZpY0dGamF6b3ZMeTh1TDM0dmNtRnRaR0V2YzNKakwybHVkR1Z5Ym1Gc0wxOWpkWEp5ZVRFdWFuTS9NakEwTkNKZExDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SjJZWElnWDJselVHeGhZMlZvYjJ4a1pYSWdQU0J5WlhGMWFYSmxLQ2N1TDE5cGMxQnNZV05sYUc5c1pHVnlKeWs3WEc1Y2JseHVMeW9xWEc0Z0tpQlBjSFJwYldsNlpXUWdhVzUwWlhKdVlXd2diMjVsTFdGeWFYUjVJR04xY25KNUlHWjFibU4wYVc5dUxseHVJQ3BjYmlBcUlFQndjbWwyWVhSbFhHNGdLaUJBWTJGMFpXZHZjbmtnUm5WdVkzUnBiMjVjYmlBcUlFQndZWEpoYlNCN1JuVnVZM1JwYjI1OUlHWnVJRlJvWlNCbWRXNWpkR2x2YmlCMGJ5QmpkWEp5ZVM1Y2JpQXFJRUJ5WlhSMWNtNGdlMFoxYm1OMGFXOXVmU0JVYUdVZ1kzVnljbWxsWkNCbWRXNWpkR2x2Ymk1Y2JpQXFMMXh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0JtZFc1amRHbHZiaUJmWTNWeWNua3hLR1p1S1NCN1hHNGdJSEpsZEhWeWJpQm1kVzVqZEdsdmJpQm1NU2hoS1NCN1hHNGdJQ0FnYVdZZ0tHRnlaM1Z0Wlc1MGN5NXNaVzVuZEdnZ1BUMDlJREFnZkh3Z1gybHpVR3hoWTJWb2IyeGtaWElvWVNrcElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCbU1UdGNiaUFnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnY21WMGRYSnVJR1p1TG1Gd2NHeDVLSFJvYVhNc0lHRnlaM1Z0Wlc1MGN5azdYRzRnSUNBZ2ZWeHVJQ0I5TzF4dWZUdGNibHh1WEc1Y2JpOHZMeTh2THk4dkx5OHZMeTh2THk4dkwxeHVMeThnVjBWQ1VFRkRTeUJHVDA5VVJWSmNiaTh2SUM0dmZpOXlZVzFrWVM5emNtTXZhVzUwWlhKdVlXd3ZYMk4xY25KNU1TNXFjMXh1THk4Z2JXOWtkV3hsSUdsa0lEMGdNbHh1THk4Z2JXOWtkV3hsSUdOb2RXNXJjeUE5SURBaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3SWl3aWMyOTFjbU5sVW05dmRDSTZJaUo5XCIpO1xuXG4vKioqLyB9KSxcbi8qIDMgKi9cbi8qIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKiBhbGwgZXhwb3J0cyB1c2VkICovXG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAod2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5ldmFsKFwidmFyIGc7XFxyXFxuXFxyXFxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcXHJcXG5nID0gKGZ1bmN0aW9uKCkge1xcclxcblxcdHJldHVybiB0aGlzO1xcclxcbn0pKCk7XFxyXFxuXFxyXFxudHJ5IHtcXHJcXG5cXHQvLyBUaGlzIHdvcmtzIGlmIGV2YWwgaXMgYWxsb3dlZCAoc2VlIENTUClcXHJcXG5cXHRnID0gZyB8fCBGdW5jdGlvbihcXFwicmV0dXJuIHRoaXNcXFwiKSgpIHx8ICgxLGV2YWwpKFxcXCJ0aGlzXFxcIik7XFxyXFxufSBjYXRjaChlKSB7XFxyXFxuXFx0Ly8gVGhpcyB3b3JrcyBpZiB0aGUgd2luZG93IHJlZmVyZW5jZSBpcyBhdmFpbGFibGVcXHJcXG5cXHRpZih0eXBlb2Ygd2luZG93ID09PSBcXFwib2JqZWN0XFxcIilcXHJcXG5cXHRcXHRnID0gd2luZG93O1xcclxcbn1cXHJcXG5cXHJcXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXFxyXFxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3NcXHJcXG4vLyBlYXNpZXIgdG8gaGFuZGxlIHRoaXMgY2FzZS4gaWYoIWdsb2JhbCkgeyAuLi59XFxyXFxuXFxyXFxubW9kdWxlLmV4cG9ydHMgPSBnO1xcclxcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pTXk1cWN5SXNJbk52ZFhKalpYTWlPbHNpZDJWaWNHRmphem92THk4b2QyVmljR0ZqYXlrdlluVnBiR1JwYmk5bmJHOWlZV3d1YW5NL016WTVPQ0pkTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lKMllYSWdaenRjY2x4dVhISmNiaTh2SUZSb2FYTWdkMjl5YTNNZ2FXNGdibTl1TFhOMGNtbGpkQ0J0YjJSbFhISmNibWNnUFNBb1puVnVZM1JwYjI0b0tTQjdYSEpjYmx4MGNtVjBkWEp1SUhSb2FYTTdYSEpjYm4wcEtDazdYSEpjYmx4eVhHNTBjbmtnZTF4eVhHNWNkQzh2SUZSb2FYTWdkMjl5YTNNZ2FXWWdaWFpoYkNCcGN5QmhiR3h2ZDJWa0lDaHpaV1VnUTFOUUtWeHlYRzVjZEdjZ1BTQm5JSHg4SUVaMWJtTjBhVzl1S0Z3aWNtVjBkWEp1SUhSb2FYTmNJaWtvS1NCOGZDQW9NU3hsZG1Gc0tTaGNJblJvYVhOY0lpazdYSEpjYm4wZ1kyRjBZMmdvWlNrZ2UxeHlYRzVjZEM4dklGUm9hWE1nZDI5eWEzTWdhV1lnZEdobElIZHBibVJ2ZHlCeVpXWmxjbVZ1WTJVZ2FYTWdZWFpoYVd4aFlteGxYSEpjYmx4MGFXWW9kSGx3Wlc5bUlIZHBibVJ2ZHlBOVBUMGdYQ0p2WW1wbFkzUmNJaWxjY2x4dVhIUmNkR2NnUFNCM2FXNWtiM2M3WEhKY2JuMWNjbHh1WEhKY2JpOHZJR2NnWTJGdUlITjBhV3hzSUdKbElIVnVaR1ZtYVc1bFpDd2dZblYwSUc1dmRHaHBibWNnZEc4Z1pHOGdZV0p2ZFhRZ2FYUXVMaTVjY2x4dUx5OGdWMlVnY21WMGRYSnVJSFZ1WkdWbWFXNWxaQ3dnYVc1emRHVmhaQ0J2WmlCdWIzUm9hVzVuSUdobGNtVXNJSE52SUdsMEozTmNjbHh1THk4Z1pXRnphV1Z5SUhSdklHaGhibVJzWlNCMGFHbHpJR05oYzJVdUlHbG1LQ0ZuYkc5aVlXd3BJSHNnTGk0dWZWeHlYRzVjY2x4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCbk8xeHlYRzVjYmx4dVhHNHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OWNiaTh2SUZkRlFsQkJRMHNnUms5UFZFVlNYRzR2THlBb2QyVmljR0ZqYXlrdlluVnBiR1JwYmk5bmJHOWlZV3d1YW5OY2JpOHZJRzF2WkhWc1pTQnBaQ0E5SUROY2JpOHZJRzF2WkhWc1pTQmphSFZ1YTNNZ1BTQXdJbDBzSW0xaGNIQnBibWR6SWpvaVFVRkJRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3SWl3aWMyOTFjbU5sVW05dmRDSTZJaUo5XCIpO1xuXG4vKioqLyB9KSxcbi8qIDQgKi9cbi8qIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKiBhbGwgZXhwb3J0cyB1c2VkICovXG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9+L3VuZGVyc2NvcmUvdW5kZXJzY29yZS5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5ldmFsKFwidmFyIF9fV0VCUEFDS19BTURfREVGSU5FX0FSUkFZX18sIF9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fOy8vICAgICBVbmRlcnNjb3JlLmpzIDEuOC4zXFxuLy8gICAgIGh0dHA6Ly91bmRlcnNjb3JlanMub3JnXFxuLy8gICAgIChjKSAyMDA5LTIwMTUgSmVyZW15IEFzaGtlbmFzLCBEb2N1bWVudENsb3VkIGFuZCBJbnZlc3RpZ2F0aXZlIFJlcG9ydGVycyAmIEVkaXRvcnNcXG4vLyAgICAgVW5kZXJzY29yZSBtYXkgYmUgZnJlZWx5IGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cXG5cXG4oZnVuY3Rpb24oKSB7XFxuXFxuICAvLyBCYXNlbGluZSBzZXR1cFxcbiAgLy8gLS0tLS0tLS0tLS0tLS1cXG5cXG4gIC8vIEVzdGFibGlzaCB0aGUgcm9vdCBvYmplY3QsIGB3aW5kb3dgIGluIHRoZSBicm93c2VyLCBvciBgZXhwb3J0c2Agb24gdGhlIHNlcnZlci5cXG4gIHZhciByb290ID0gdGhpcztcXG5cXG4gIC8vIFNhdmUgdGhlIHByZXZpb3VzIHZhbHVlIG9mIHRoZSBgX2AgdmFyaWFibGUuXFxuICB2YXIgcHJldmlvdXNVbmRlcnNjb3JlID0gcm9vdC5fO1xcblxcbiAgLy8gU2F2ZSBieXRlcyBpbiB0aGUgbWluaWZpZWQgKGJ1dCBub3QgZ3ppcHBlZCkgdmVyc2lvbjpcXG4gIHZhciBBcnJheVByb3RvID0gQXJyYXkucHJvdG90eXBlLCBPYmpQcm90byA9IE9iamVjdC5wcm90b3R5cGUsIEZ1bmNQcm90byA9IEZ1bmN0aW9uLnByb3RvdHlwZTtcXG5cXG4gIC8vIENyZWF0ZSBxdWljayByZWZlcmVuY2UgdmFyaWFibGVzIGZvciBzcGVlZCBhY2Nlc3MgdG8gY29yZSBwcm90b3R5cGVzLlxcbiAgdmFyXFxuICAgIHB1c2ggICAgICAgICAgICAgPSBBcnJheVByb3RvLnB1c2gsXFxuICAgIHNsaWNlICAgICAgICAgICAgPSBBcnJheVByb3RvLnNsaWNlLFxcbiAgICB0b1N0cmluZyAgICAgICAgID0gT2JqUHJvdG8udG9TdHJpbmcsXFxuICAgIGhhc093blByb3BlcnR5ICAgPSBPYmpQcm90by5oYXNPd25Qcm9wZXJ0eTtcXG5cXG4gIC8vIEFsbCAqKkVDTUFTY3JpcHQgNSoqIG5hdGl2ZSBmdW5jdGlvbiBpbXBsZW1lbnRhdGlvbnMgdGhhdCB3ZSBob3BlIHRvIHVzZVxcbiAgLy8gYXJlIGRlY2xhcmVkIGhlcmUuXFxuICB2YXJcXG4gICAgbmF0aXZlSXNBcnJheSAgICAgID0gQXJyYXkuaXNBcnJheSxcXG4gICAgbmF0aXZlS2V5cyAgICAgICAgID0gT2JqZWN0LmtleXMsXFxuICAgIG5hdGl2ZUJpbmQgICAgICAgICA9IEZ1bmNQcm90by5iaW5kLFxcbiAgICBuYXRpdmVDcmVhdGUgICAgICAgPSBPYmplY3QuY3JlYXRlO1xcblxcbiAgLy8gTmFrZWQgZnVuY3Rpb24gcmVmZXJlbmNlIGZvciBzdXJyb2dhdGUtcHJvdG90eXBlLXN3YXBwaW5nLlxcbiAgdmFyIEN0b3IgPSBmdW5jdGlvbigpe307XFxuXFxuICAvLyBDcmVhdGUgYSBzYWZlIHJlZmVyZW5jZSB0byB0aGUgVW5kZXJzY29yZSBvYmplY3QgZm9yIHVzZSBiZWxvdy5cXG4gIHZhciBfID0gZnVuY3Rpb24ob2JqKSB7XFxuICAgIGlmIChvYmogaW5zdGFuY2VvZiBfKSByZXR1cm4gb2JqO1xcbiAgICBpZiAoISh0aGlzIGluc3RhbmNlb2YgXykpIHJldHVybiBuZXcgXyhvYmopO1xcbiAgICB0aGlzLl93cmFwcGVkID0gb2JqO1xcbiAgfTtcXG5cXG4gIC8vIEV4cG9ydCB0aGUgVW5kZXJzY29yZSBvYmplY3QgZm9yICoqTm9kZS5qcyoqLCB3aXRoXFxuICAvLyBiYWNrd2FyZHMtY29tcGF0aWJpbGl0eSBmb3IgdGhlIG9sZCBgcmVxdWlyZSgpYCBBUEkuIElmIHdlJ3JlIGluXFxuICAvLyB0aGUgYnJvd3NlciwgYWRkIGBfYCBhcyBhIGdsb2JhbCBvYmplY3QuXFxuICBpZiAodHJ1ZSkge1xcbiAgICBpZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgbW9kdWxlLmV4cG9ydHMpIHtcXG4gICAgICBleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBfO1xcbiAgICB9XFxuICAgIGV4cG9ydHMuXyA9IF87XFxuICB9IGVsc2Uge1xcbiAgICByb290Ll8gPSBfO1xcbiAgfVxcblxcbiAgLy8gQ3VycmVudCB2ZXJzaW9uLlxcbiAgXy5WRVJTSU9OID0gJzEuOC4zJztcXG5cXG4gIC8vIEludGVybmFsIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhbiBlZmZpY2llbnQgKGZvciBjdXJyZW50IGVuZ2luZXMpIHZlcnNpb25cXG4gIC8vIG9mIHRoZSBwYXNzZWQtaW4gY2FsbGJhY2ssIHRvIGJlIHJlcGVhdGVkbHkgYXBwbGllZCBpbiBvdGhlciBVbmRlcnNjb3JlXFxuICAvLyBmdW5jdGlvbnMuXFxuICB2YXIgb3B0aW1pemVDYiA9IGZ1bmN0aW9uKGZ1bmMsIGNvbnRleHQsIGFyZ0NvdW50KSB7XFxuICAgIGlmIChjb250ZXh0ID09PSB2b2lkIDApIHJldHVybiBmdW5jO1xcbiAgICBzd2l0Y2ggKGFyZ0NvdW50ID09IG51bGwgPyAzIDogYXJnQ291bnQpIHtcXG4gICAgICBjYXNlIDE6IHJldHVybiBmdW5jdGlvbih2YWx1ZSkge1xcbiAgICAgICAgcmV0dXJuIGZ1bmMuY2FsbChjb250ZXh0LCB2YWx1ZSk7XFxuICAgICAgfTtcXG4gICAgICBjYXNlIDI6IHJldHVybiBmdW5jdGlvbih2YWx1ZSwgb3RoZXIpIHtcXG4gICAgICAgIHJldHVybiBmdW5jLmNhbGwoY29udGV4dCwgdmFsdWUsIG90aGVyKTtcXG4gICAgICB9O1xcbiAgICAgIGNhc2UgMzogcmV0dXJuIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbikge1xcbiAgICAgICAgcmV0dXJuIGZ1bmMuY2FsbChjb250ZXh0LCB2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pO1xcbiAgICAgIH07XFxuICAgICAgY2FzZSA0OiByZXR1cm4gZnVuY3Rpb24oYWNjdW11bGF0b3IsIHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbikge1xcbiAgICAgICAgcmV0dXJuIGZ1bmMuY2FsbChjb250ZXh0LCBhY2N1bXVsYXRvciwgdmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKTtcXG4gICAgICB9O1xcbiAgICB9XFxuICAgIHJldHVybiBmdW5jdGlvbigpIHtcXG4gICAgICByZXR1cm4gZnVuYy5hcHBseShjb250ZXh0LCBhcmd1bWVudHMpO1xcbiAgICB9O1xcbiAgfTtcXG5cXG4gIC8vIEEgbW9zdGx5LWludGVybmFsIGZ1bmN0aW9uIHRvIGdlbmVyYXRlIGNhbGxiYWNrcyB0aGF0IGNhbiBiZSBhcHBsaWVkXFxuICAvLyB0byBlYWNoIGVsZW1lbnQgaW4gYSBjb2xsZWN0aW9uLCByZXR1cm5pbmcgdGhlIGRlc2lyZWQgcmVzdWx0IOKAlCBlaXRoZXJcXG4gIC8vIGlkZW50aXR5LCBhbiBhcmJpdHJhcnkgY2FsbGJhY2ssIGEgcHJvcGVydHkgbWF0Y2hlciwgb3IgYSBwcm9wZXJ0eSBhY2Nlc3Nvci5cXG4gIHZhciBjYiA9IGZ1bmN0aW9uKHZhbHVlLCBjb250ZXh0LCBhcmdDb3VudCkge1xcbiAgICBpZiAodmFsdWUgPT0gbnVsbCkgcmV0dXJuIF8uaWRlbnRpdHk7XFxuICAgIGlmIChfLmlzRnVuY3Rpb24odmFsdWUpKSByZXR1cm4gb3B0aW1pemVDYih2YWx1ZSwgY29udGV4dCwgYXJnQ291bnQpO1xcbiAgICBpZiAoXy5pc09iamVjdCh2YWx1ZSkpIHJldHVybiBfLm1hdGNoZXIodmFsdWUpO1xcbiAgICByZXR1cm4gXy5wcm9wZXJ0eSh2YWx1ZSk7XFxuICB9O1xcbiAgXy5pdGVyYXRlZSA9IGZ1bmN0aW9uKHZhbHVlLCBjb250ZXh0KSB7XFxuICAgIHJldHVybiBjYih2YWx1ZSwgY29udGV4dCwgSW5maW5pdHkpO1xcbiAgfTtcXG5cXG4gIC8vIEFuIGludGVybmFsIGZ1bmN0aW9uIGZvciBjcmVhdGluZyBhc3NpZ25lciBmdW5jdGlvbnMuXFxuICB2YXIgY3JlYXRlQXNzaWduZXIgPSBmdW5jdGlvbihrZXlzRnVuYywgdW5kZWZpbmVkT25seSkge1xcbiAgICByZXR1cm4gZnVuY3Rpb24ob2JqKSB7XFxuICAgICAgdmFyIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XFxuICAgICAgaWYgKGxlbmd0aCA8IDIgfHwgb2JqID09IG51bGwpIHJldHVybiBvYmo7XFxuICAgICAgZm9yICh2YXIgaW5kZXggPSAxOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKykge1xcbiAgICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpbmRleF0sXFxuICAgICAgICAgICAga2V5cyA9IGtleXNGdW5jKHNvdXJjZSksXFxuICAgICAgICAgICAgbCA9IGtleXMubGVuZ3RoO1xcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsOyBpKyspIHtcXG4gICAgICAgICAgdmFyIGtleSA9IGtleXNbaV07XFxuICAgICAgICAgIGlmICghdW5kZWZpbmVkT25seSB8fCBvYmpba2V5XSA9PT0gdm9pZCAwKSBvYmpba2V5XSA9IHNvdXJjZVtrZXldO1xcbiAgICAgICAgfVxcbiAgICAgIH1cXG4gICAgICByZXR1cm4gb2JqO1xcbiAgICB9O1xcbiAgfTtcXG5cXG4gIC8vIEFuIGludGVybmFsIGZ1bmN0aW9uIGZvciBjcmVhdGluZyBhIG5ldyBvYmplY3QgdGhhdCBpbmhlcml0cyBmcm9tIGFub3RoZXIuXFxuICB2YXIgYmFzZUNyZWF0ZSA9IGZ1bmN0aW9uKHByb3RvdHlwZSkge1xcbiAgICBpZiAoIV8uaXNPYmplY3QocHJvdG90eXBlKSkgcmV0dXJuIHt9O1xcbiAgICBpZiAobmF0aXZlQ3JlYXRlKSByZXR1cm4gbmF0aXZlQ3JlYXRlKHByb3RvdHlwZSk7XFxuICAgIEN0b3IucHJvdG90eXBlID0gcHJvdG90eXBlO1xcbiAgICB2YXIgcmVzdWx0ID0gbmV3IEN0b3I7XFxuICAgIEN0b3IucHJvdG90eXBlID0gbnVsbDtcXG4gICAgcmV0dXJuIHJlc3VsdDtcXG4gIH07XFxuXFxuICB2YXIgcHJvcGVydHkgPSBmdW5jdGlvbihrZXkpIHtcXG4gICAgcmV0dXJuIGZ1bmN0aW9uKG9iaikge1xcbiAgICAgIHJldHVybiBvYmogPT0gbnVsbCA/IHZvaWQgMCA6IG9ialtrZXldO1xcbiAgICB9O1xcbiAgfTtcXG5cXG4gIC8vIEhlbHBlciBmb3IgY29sbGVjdGlvbiBtZXRob2RzIHRvIGRldGVybWluZSB3aGV0aGVyIGEgY29sbGVjdGlvblxcbiAgLy8gc2hvdWxkIGJlIGl0ZXJhdGVkIGFzIGFuIGFycmF5IG9yIGFzIGFuIG9iamVjdFxcbiAgLy8gUmVsYXRlZDogaHR0cDovL3Blb3BsZS5tb3ppbGxhLm9yZy9+am9yZW5kb3JmZi9lczYtZHJhZnQuaHRtbCNzZWMtdG9sZW5ndGhcXG4gIC8vIEF2b2lkcyBhIHZlcnkgbmFzdHkgaU9TIDggSklUIGJ1ZyBvbiBBUk0tNjQuICMyMDk0XFxuICB2YXIgTUFYX0FSUkFZX0lOREVYID0gTWF0aC5wb3coMiwgNTMpIC0gMTtcXG4gIHZhciBnZXRMZW5ndGggPSBwcm9wZXJ0eSgnbGVuZ3RoJyk7XFxuICB2YXIgaXNBcnJheUxpa2UgPSBmdW5jdGlvbihjb2xsZWN0aW9uKSB7XFxuICAgIHZhciBsZW5ndGggPSBnZXRMZW5ndGgoY29sbGVjdGlvbik7XFxuICAgIHJldHVybiB0eXBlb2YgbGVuZ3RoID09ICdudW1iZXInICYmIGxlbmd0aCA+PSAwICYmIGxlbmd0aCA8PSBNQVhfQVJSQVlfSU5ERVg7XFxuICB9O1xcblxcbiAgLy8gQ29sbGVjdGlvbiBGdW5jdGlvbnNcXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tXFxuXFxuICAvLyBUaGUgY29ybmVyc3RvbmUsIGFuIGBlYWNoYCBpbXBsZW1lbnRhdGlvbiwgYWthIGBmb3JFYWNoYC5cXG4gIC8vIEhhbmRsZXMgcmF3IG9iamVjdHMgaW4gYWRkaXRpb24gdG8gYXJyYXktbGlrZXMuIFRyZWF0cyBhbGxcXG4gIC8vIHNwYXJzZSBhcnJheS1saWtlcyBhcyBpZiB0aGV5IHdlcmUgZGVuc2UuXFxuICBfLmVhY2ggPSBfLmZvckVhY2ggPSBmdW5jdGlvbihvYmosIGl0ZXJhdGVlLCBjb250ZXh0KSB7XFxuICAgIGl0ZXJhdGVlID0gb3B0aW1pemVDYihpdGVyYXRlZSwgY29udGV4dCk7XFxuICAgIHZhciBpLCBsZW5ndGg7XFxuICAgIGlmIChpc0FycmF5TGlrZShvYmopKSB7XFxuICAgICAgZm9yIChpID0gMCwgbGVuZ3RoID0gb2JqLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XFxuICAgICAgICBpdGVyYXRlZShvYmpbaV0sIGksIG9iaik7XFxuICAgICAgfVxcbiAgICB9IGVsc2Uge1xcbiAgICAgIHZhciBrZXlzID0gXy5rZXlzKG9iaik7XFxuICAgICAgZm9yIChpID0gMCwgbGVuZ3RoID0ga2V5cy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xcbiAgICAgICAgaXRlcmF0ZWUob2JqW2tleXNbaV1dLCBrZXlzW2ldLCBvYmopO1xcbiAgICAgIH1cXG4gICAgfVxcbiAgICByZXR1cm4gb2JqO1xcbiAgfTtcXG5cXG4gIC8vIFJldHVybiB0aGUgcmVzdWx0cyBvZiBhcHBseWluZyB0aGUgaXRlcmF0ZWUgdG8gZWFjaCBlbGVtZW50LlxcbiAgXy5tYXAgPSBfLmNvbGxlY3QgPSBmdW5jdGlvbihvYmosIGl0ZXJhdGVlLCBjb250ZXh0KSB7XFxuICAgIGl0ZXJhdGVlID0gY2IoaXRlcmF0ZWUsIGNvbnRleHQpO1xcbiAgICB2YXIga2V5cyA9ICFpc0FycmF5TGlrZShvYmopICYmIF8ua2V5cyhvYmopLFxcbiAgICAgICAgbGVuZ3RoID0gKGtleXMgfHwgb2JqKS5sZW5ndGgsXFxuICAgICAgICByZXN1bHRzID0gQXJyYXkobGVuZ3RoKTtcXG4gICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKykge1xcbiAgICAgIHZhciBjdXJyZW50S2V5ID0ga2V5cyA/IGtleXNbaW5kZXhdIDogaW5kZXg7XFxuICAgICAgcmVzdWx0c1tpbmRleF0gPSBpdGVyYXRlZShvYmpbY3VycmVudEtleV0sIGN1cnJlbnRLZXksIG9iaik7XFxuICAgIH1cXG4gICAgcmV0dXJuIHJlc3VsdHM7XFxuICB9O1xcblxcbiAgLy8gQ3JlYXRlIGEgcmVkdWNpbmcgZnVuY3Rpb24gaXRlcmF0aW5nIGxlZnQgb3IgcmlnaHQuXFxuICBmdW5jdGlvbiBjcmVhdGVSZWR1Y2UoZGlyKSB7XFxuICAgIC8vIE9wdGltaXplZCBpdGVyYXRvciBmdW5jdGlvbiBhcyB1c2luZyBhcmd1bWVudHMubGVuZ3RoXFxuICAgIC8vIGluIHRoZSBtYWluIGZ1bmN0aW9uIHdpbGwgZGVvcHRpbWl6ZSB0aGUsIHNlZSAjMTk5MS5cXG4gICAgZnVuY3Rpb24gaXRlcmF0b3Iob2JqLCBpdGVyYXRlZSwgbWVtbywga2V5cywgaW5kZXgsIGxlbmd0aCkge1xcbiAgICAgIGZvciAoOyBpbmRleCA+PSAwICYmIGluZGV4IDwgbGVuZ3RoOyBpbmRleCArPSBkaXIpIHtcXG4gICAgICAgIHZhciBjdXJyZW50S2V5ID0ga2V5cyA/IGtleXNbaW5kZXhdIDogaW5kZXg7XFxuICAgICAgICBtZW1vID0gaXRlcmF0ZWUobWVtbywgb2JqW2N1cnJlbnRLZXldLCBjdXJyZW50S2V5LCBvYmopO1xcbiAgICAgIH1cXG4gICAgICByZXR1cm4gbWVtbztcXG4gICAgfVxcblxcbiAgICByZXR1cm4gZnVuY3Rpb24ob2JqLCBpdGVyYXRlZSwgbWVtbywgY29udGV4dCkge1xcbiAgICAgIGl0ZXJhdGVlID0gb3B0aW1pemVDYihpdGVyYXRlZSwgY29udGV4dCwgNCk7XFxuICAgICAgdmFyIGtleXMgPSAhaXNBcnJheUxpa2Uob2JqKSAmJiBfLmtleXMob2JqKSxcXG4gICAgICAgICAgbGVuZ3RoID0gKGtleXMgfHwgb2JqKS5sZW5ndGgsXFxuICAgICAgICAgIGluZGV4ID0gZGlyID4gMCA/IDAgOiBsZW5ndGggLSAxO1xcbiAgICAgIC8vIERldGVybWluZSB0aGUgaW5pdGlhbCB2YWx1ZSBpZiBub25lIGlzIHByb3ZpZGVkLlxcbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMykge1xcbiAgICAgICAgbWVtbyA9IG9ialtrZXlzID8ga2V5c1tpbmRleF0gOiBpbmRleF07XFxuICAgICAgICBpbmRleCArPSBkaXI7XFxuICAgICAgfVxcbiAgICAgIHJldHVybiBpdGVyYXRvcihvYmosIGl0ZXJhdGVlLCBtZW1vLCBrZXlzLCBpbmRleCwgbGVuZ3RoKTtcXG4gICAgfTtcXG4gIH1cXG5cXG4gIC8vICoqUmVkdWNlKiogYnVpbGRzIHVwIGEgc2luZ2xlIHJlc3VsdCBmcm9tIGEgbGlzdCBvZiB2YWx1ZXMsIGFrYSBgaW5qZWN0YCxcXG4gIC8vIG9yIGBmb2xkbGAuXFxuICBfLnJlZHVjZSA9IF8uZm9sZGwgPSBfLmluamVjdCA9IGNyZWF0ZVJlZHVjZSgxKTtcXG5cXG4gIC8vIFRoZSByaWdodC1hc3NvY2lhdGl2ZSB2ZXJzaW9uIG9mIHJlZHVjZSwgYWxzbyBrbm93biBhcyBgZm9sZHJgLlxcbiAgXy5yZWR1Y2VSaWdodCA9IF8uZm9sZHIgPSBjcmVhdGVSZWR1Y2UoLTEpO1xcblxcbiAgLy8gUmV0dXJuIHRoZSBmaXJzdCB2YWx1ZSB3aGljaCBwYXNzZXMgYSB0cnV0aCB0ZXN0LiBBbGlhc2VkIGFzIGBkZXRlY3RgLlxcbiAgXy5maW5kID0gXy5kZXRlY3QgPSBmdW5jdGlvbihvYmosIHByZWRpY2F0ZSwgY29udGV4dCkge1xcbiAgICB2YXIga2V5O1xcbiAgICBpZiAoaXNBcnJheUxpa2Uob2JqKSkge1xcbiAgICAgIGtleSA9IF8uZmluZEluZGV4KG9iaiwgcHJlZGljYXRlLCBjb250ZXh0KTtcXG4gICAgfSBlbHNlIHtcXG4gICAgICBrZXkgPSBfLmZpbmRLZXkob2JqLCBwcmVkaWNhdGUsIGNvbnRleHQpO1xcbiAgICB9XFxuICAgIGlmIChrZXkgIT09IHZvaWQgMCAmJiBrZXkgIT09IC0xKSByZXR1cm4gb2JqW2tleV07XFxuICB9O1xcblxcbiAgLy8gUmV0dXJuIGFsbCB0aGUgZWxlbWVudHMgdGhhdCBwYXNzIGEgdHJ1dGggdGVzdC5cXG4gIC8vIEFsaWFzZWQgYXMgYHNlbGVjdGAuXFxuICBfLmZpbHRlciA9IF8uc2VsZWN0ID0gZnVuY3Rpb24ob2JqLCBwcmVkaWNhdGUsIGNvbnRleHQpIHtcXG4gICAgdmFyIHJlc3VsdHMgPSBbXTtcXG4gICAgcHJlZGljYXRlID0gY2IocHJlZGljYXRlLCBjb250ZXh0KTtcXG4gICAgXy5lYWNoKG9iaiwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBsaXN0KSB7XFxuICAgICAgaWYgKHByZWRpY2F0ZSh2YWx1ZSwgaW5kZXgsIGxpc3QpKSByZXN1bHRzLnB1c2godmFsdWUpO1xcbiAgICB9KTtcXG4gICAgcmV0dXJuIHJlc3VsdHM7XFxuICB9O1xcblxcbiAgLy8gUmV0dXJuIGFsbCB0aGUgZWxlbWVudHMgZm9yIHdoaWNoIGEgdHJ1dGggdGVzdCBmYWlscy5cXG4gIF8ucmVqZWN0ID0gZnVuY3Rpb24ob2JqLCBwcmVkaWNhdGUsIGNvbnRleHQpIHtcXG4gICAgcmV0dXJuIF8uZmlsdGVyKG9iaiwgXy5uZWdhdGUoY2IocHJlZGljYXRlKSksIGNvbnRleHQpO1xcbiAgfTtcXG5cXG4gIC8vIERldGVybWluZSB3aGV0aGVyIGFsbCBvZiB0aGUgZWxlbWVudHMgbWF0Y2ggYSB0cnV0aCB0ZXN0LlxcbiAgLy8gQWxpYXNlZCBhcyBgYWxsYC5cXG4gIF8uZXZlcnkgPSBfLmFsbCA9IGZ1bmN0aW9uKG9iaiwgcHJlZGljYXRlLCBjb250ZXh0KSB7XFxuICAgIHByZWRpY2F0ZSA9IGNiKHByZWRpY2F0ZSwgY29udGV4dCk7XFxuICAgIHZhciBrZXlzID0gIWlzQXJyYXlMaWtlKG9iaikgJiYgXy5rZXlzKG9iaiksXFxuICAgICAgICBsZW5ndGggPSAoa2V5cyB8fCBvYmopLmxlbmd0aDtcXG4gICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKykge1xcbiAgICAgIHZhciBjdXJyZW50S2V5ID0ga2V5cyA/IGtleXNbaW5kZXhdIDogaW5kZXg7XFxuICAgICAgaWYgKCFwcmVkaWNhdGUob2JqW2N1cnJlbnRLZXldLCBjdXJyZW50S2V5LCBvYmopKSByZXR1cm4gZmFsc2U7XFxuICAgIH1cXG4gICAgcmV0dXJuIHRydWU7XFxuICB9O1xcblxcbiAgLy8gRGV0ZXJtaW5lIGlmIGF0IGxlYXN0IG9uZSBlbGVtZW50IGluIHRoZSBvYmplY3QgbWF0Y2hlcyBhIHRydXRoIHRlc3QuXFxuICAvLyBBbGlhc2VkIGFzIGBhbnlgLlxcbiAgXy5zb21lID0gXy5hbnkgPSBmdW5jdGlvbihvYmosIHByZWRpY2F0ZSwgY29udGV4dCkge1xcbiAgICBwcmVkaWNhdGUgPSBjYihwcmVkaWNhdGUsIGNvbnRleHQpO1xcbiAgICB2YXIga2V5cyA9ICFpc0FycmF5TGlrZShvYmopICYmIF8ua2V5cyhvYmopLFxcbiAgICAgICAgbGVuZ3RoID0gKGtleXMgfHwgb2JqKS5sZW5ndGg7XFxuICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KyspIHtcXG4gICAgICB2YXIgY3VycmVudEtleSA9IGtleXMgPyBrZXlzW2luZGV4XSA6IGluZGV4O1xcbiAgICAgIGlmIChwcmVkaWNhdGUob2JqW2N1cnJlbnRLZXldLCBjdXJyZW50S2V5LCBvYmopKSByZXR1cm4gdHJ1ZTtcXG4gICAgfVxcbiAgICByZXR1cm4gZmFsc2U7XFxuICB9O1xcblxcbiAgLy8gRGV0ZXJtaW5lIGlmIHRoZSBhcnJheSBvciBvYmplY3QgY29udGFpbnMgYSBnaXZlbiBpdGVtICh1c2luZyBgPT09YCkuXFxuICAvLyBBbGlhc2VkIGFzIGBpbmNsdWRlc2AgYW5kIGBpbmNsdWRlYC5cXG4gIF8uY29udGFpbnMgPSBfLmluY2x1ZGVzID0gXy5pbmNsdWRlID0gZnVuY3Rpb24ob2JqLCBpdGVtLCBmcm9tSW5kZXgsIGd1YXJkKSB7XFxuICAgIGlmICghaXNBcnJheUxpa2Uob2JqKSkgb2JqID0gXy52YWx1ZXMob2JqKTtcXG4gICAgaWYgKHR5cGVvZiBmcm9tSW5kZXggIT0gJ251bWJlcicgfHwgZ3VhcmQpIGZyb21JbmRleCA9IDA7XFxuICAgIHJldHVybiBfLmluZGV4T2Yob2JqLCBpdGVtLCBmcm9tSW5kZXgpID49IDA7XFxuICB9O1xcblxcbiAgLy8gSW52b2tlIGEgbWV0aG9kICh3aXRoIGFyZ3VtZW50cykgb24gZXZlcnkgaXRlbSBpbiBhIGNvbGxlY3Rpb24uXFxuICBfLmludm9rZSA9IGZ1bmN0aW9uKG9iaiwgbWV0aG9kKSB7XFxuICAgIHZhciBhcmdzID0gc2xpY2UuY2FsbChhcmd1bWVudHMsIDIpO1xcbiAgICB2YXIgaXNGdW5jID0gXy5pc0Z1bmN0aW9uKG1ldGhvZCk7XFxuICAgIHJldHVybiBfLm1hcChvYmosIGZ1bmN0aW9uKHZhbHVlKSB7XFxuICAgICAgdmFyIGZ1bmMgPSBpc0Z1bmMgPyBtZXRob2QgOiB2YWx1ZVttZXRob2RdO1xcbiAgICAgIHJldHVybiBmdW5jID09IG51bGwgPyBmdW5jIDogZnVuYy5hcHBseSh2YWx1ZSwgYXJncyk7XFxuICAgIH0pO1xcbiAgfTtcXG5cXG4gIC8vIENvbnZlbmllbmNlIHZlcnNpb24gb2YgYSBjb21tb24gdXNlIGNhc2Ugb2YgYG1hcGA6IGZldGNoaW5nIGEgcHJvcGVydHkuXFxuICBfLnBsdWNrID0gZnVuY3Rpb24ob2JqLCBrZXkpIHtcXG4gICAgcmV0dXJuIF8ubWFwKG9iaiwgXy5wcm9wZXJ0eShrZXkpKTtcXG4gIH07XFxuXFxuICAvLyBDb252ZW5pZW5jZSB2ZXJzaW9uIG9mIGEgY29tbW9uIHVzZSBjYXNlIG9mIGBmaWx0ZXJgOiBzZWxlY3Rpbmcgb25seSBvYmplY3RzXFxuICAvLyBjb250YWluaW5nIHNwZWNpZmljIGBrZXk6dmFsdWVgIHBhaXJzLlxcbiAgXy53aGVyZSA9IGZ1bmN0aW9uKG9iaiwgYXR0cnMpIHtcXG4gICAgcmV0dXJuIF8uZmlsdGVyKG9iaiwgXy5tYXRjaGVyKGF0dHJzKSk7XFxuICB9O1xcblxcbiAgLy8gQ29udmVuaWVuY2UgdmVyc2lvbiBvZiBhIGNvbW1vbiB1c2UgY2FzZSBvZiBgZmluZGA6IGdldHRpbmcgdGhlIGZpcnN0IG9iamVjdFxcbiAgLy8gY29udGFpbmluZyBzcGVjaWZpYyBga2V5OnZhbHVlYCBwYWlycy5cXG4gIF8uZmluZFdoZXJlID0gZnVuY3Rpb24ob2JqLCBhdHRycykge1xcbiAgICByZXR1cm4gXy5maW5kKG9iaiwgXy5tYXRjaGVyKGF0dHJzKSk7XFxuICB9O1xcblxcbiAgLy8gUmV0dXJuIHRoZSBtYXhpbXVtIGVsZW1lbnQgKG9yIGVsZW1lbnQtYmFzZWQgY29tcHV0YXRpb24pLlxcbiAgXy5tYXggPSBmdW5jdGlvbihvYmosIGl0ZXJhdGVlLCBjb250ZXh0KSB7XFxuICAgIHZhciByZXN1bHQgPSAtSW5maW5pdHksIGxhc3RDb21wdXRlZCA9IC1JbmZpbml0eSxcXG4gICAgICAgIHZhbHVlLCBjb21wdXRlZDtcXG4gICAgaWYgKGl0ZXJhdGVlID09IG51bGwgJiYgb2JqICE9IG51bGwpIHtcXG4gICAgICBvYmogPSBpc0FycmF5TGlrZShvYmopID8gb2JqIDogXy52YWx1ZXMob2JqKTtcXG4gICAgICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0gb2JqLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XFxuICAgICAgICB2YWx1ZSA9IG9ialtpXTtcXG4gICAgICAgIGlmICh2YWx1ZSA+IHJlc3VsdCkge1xcbiAgICAgICAgICByZXN1bHQgPSB2YWx1ZTtcXG4gICAgICAgIH1cXG4gICAgICB9XFxuICAgIH0gZWxzZSB7XFxuICAgICAgaXRlcmF0ZWUgPSBjYihpdGVyYXRlZSwgY29udGV4dCk7XFxuICAgICAgXy5lYWNoKG9iaiwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBsaXN0KSB7XFxuICAgICAgICBjb21wdXRlZCA9IGl0ZXJhdGVlKHZhbHVlLCBpbmRleCwgbGlzdCk7XFxuICAgICAgICBpZiAoY29tcHV0ZWQgPiBsYXN0Q29tcHV0ZWQgfHwgY29tcHV0ZWQgPT09IC1JbmZpbml0eSAmJiByZXN1bHQgPT09IC1JbmZpbml0eSkge1xcbiAgICAgICAgICByZXN1bHQgPSB2YWx1ZTtcXG4gICAgICAgICAgbGFzdENvbXB1dGVkID0gY29tcHV0ZWQ7XFxuICAgICAgICB9XFxuICAgICAgfSk7XFxuICAgIH1cXG4gICAgcmV0dXJuIHJlc3VsdDtcXG4gIH07XFxuXFxuICAvLyBSZXR1cm4gdGhlIG1pbmltdW0gZWxlbWVudCAob3IgZWxlbWVudC1iYXNlZCBjb21wdXRhdGlvbikuXFxuICBfLm1pbiA9IGZ1bmN0aW9uKG9iaiwgaXRlcmF0ZWUsIGNvbnRleHQpIHtcXG4gICAgdmFyIHJlc3VsdCA9IEluZmluaXR5LCBsYXN0Q29tcHV0ZWQgPSBJbmZpbml0eSxcXG4gICAgICAgIHZhbHVlLCBjb21wdXRlZDtcXG4gICAgaWYgKGl0ZXJhdGVlID09IG51bGwgJiYgb2JqICE9IG51bGwpIHtcXG4gICAgICBvYmogPSBpc0FycmF5TGlrZShvYmopID8gb2JqIDogXy52YWx1ZXMob2JqKTtcXG4gICAgICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0gb2JqLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XFxuICAgICAgICB2YWx1ZSA9IG9ialtpXTtcXG4gICAgICAgIGlmICh2YWx1ZSA8IHJlc3VsdCkge1xcbiAgICAgICAgICByZXN1bHQgPSB2YWx1ZTtcXG4gICAgICAgIH1cXG4gICAgICB9XFxuICAgIH0gZWxzZSB7XFxuICAgICAgaXRlcmF0ZWUgPSBjYihpdGVyYXRlZSwgY29udGV4dCk7XFxuICAgICAgXy5lYWNoKG9iaiwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBsaXN0KSB7XFxuICAgICAgICBjb21wdXRlZCA9IGl0ZXJhdGVlKHZhbHVlLCBpbmRleCwgbGlzdCk7XFxuICAgICAgICBpZiAoY29tcHV0ZWQgPCBsYXN0Q29tcHV0ZWQgfHwgY29tcHV0ZWQgPT09IEluZmluaXR5ICYmIHJlc3VsdCA9PT0gSW5maW5pdHkpIHtcXG4gICAgICAgICAgcmVzdWx0ID0gdmFsdWU7XFxuICAgICAgICAgIGxhc3RDb21wdXRlZCA9IGNvbXB1dGVkO1xcbiAgICAgICAgfVxcbiAgICAgIH0pO1xcbiAgICB9XFxuICAgIHJldHVybiByZXN1bHQ7XFxuICB9O1xcblxcbiAgLy8gU2h1ZmZsZSBhIGNvbGxlY3Rpb24sIHVzaW5nIHRoZSBtb2Rlcm4gdmVyc2lvbiBvZiB0aGVcXG4gIC8vIFtGaXNoZXItWWF0ZXMgc2h1ZmZsZV0oaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9GaXNoZXLigJNZYXRlc19zaHVmZmxlKS5cXG4gIF8uc2h1ZmZsZSA9IGZ1bmN0aW9uKG9iaikge1xcbiAgICB2YXIgc2V0ID0gaXNBcnJheUxpa2Uob2JqKSA/IG9iaiA6IF8udmFsdWVzKG9iaik7XFxuICAgIHZhciBsZW5ndGggPSBzZXQubGVuZ3RoO1xcbiAgICB2YXIgc2h1ZmZsZWQgPSBBcnJheShsZW5ndGgpO1xcbiAgICBmb3IgKHZhciBpbmRleCA9IDAsIHJhbmQ7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrKSB7XFxuICAgICAgcmFuZCA9IF8ucmFuZG9tKDAsIGluZGV4KTtcXG4gICAgICBpZiAocmFuZCAhPT0gaW5kZXgpIHNodWZmbGVkW2luZGV4XSA9IHNodWZmbGVkW3JhbmRdO1xcbiAgICAgIHNodWZmbGVkW3JhbmRdID0gc2V0W2luZGV4XTtcXG4gICAgfVxcbiAgICByZXR1cm4gc2h1ZmZsZWQ7XFxuICB9O1xcblxcbiAgLy8gU2FtcGxlICoqbioqIHJhbmRvbSB2YWx1ZXMgZnJvbSBhIGNvbGxlY3Rpb24uXFxuICAvLyBJZiAqKm4qKiBpcyBub3Qgc3BlY2lmaWVkLCByZXR1cm5zIGEgc2luZ2xlIHJhbmRvbSBlbGVtZW50LlxcbiAgLy8gVGhlIGludGVybmFsIGBndWFyZGAgYXJndW1lbnQgYWxsb3dzIGl0IHRvIHdvcmsgd2l0aCBgbWFwYC5cXG4gIF8uc2FtcGxlID0gZnVuY3Rpb24ob2JqLCBuLCBndWFyZCkge1xcbiAgICBpZiAobiA9PSBudWxsIHx8IGd1YXJkKSB7XFxuICAgICAgaWYgKCFpc0FycmF5TGlrZShvYmopKSBvYmogPSBfLnZhbHVlcyhvYmopO1xcbiAgICAgIHJldHVybiBvYmpbXy5yYW5kb20ob2JqLmxlbmd0aCAtIDEpXTtcXG4gICAgfVxcbiAgICByZXR1cm4gXy5zaHVmZmxlKG9iaikuc2xpY2UoMCwgTWF0aC5tYXgoMCwgbikpO1xcbiAgfTtcXG5cXG4gIC8vIFNvcnQgdGhlIG9iamVjdCdzIHZhbHVlcyBieSBhIGNyaXRlcmlvbiBwcm9kdWNlZCBieSBhbiBpdGVyYXRlZS5cXG4gIF8uc29ydEJ5ID0gZnVuY3Rpb24ob2JqLCBpdGVyYXRlZSwgY29udGV4dCkge1xcbiAgICBpdGVyYXRlZSA9IGNiKGl0ZXJhdGVlLCBjb250ZXh0KTtcXG4gICAgcmV0dXJuIF8ucGx1Y2soXy5tYXAob2JqLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGxpc3QpIHtcXG4gICAgICByZXR1cm4ge1xcbiAgICAgICAgdmFsdWU6IHZhbHVlLFxcbiAgICAgICAgaW5kZXg6IGluZGV4LFxcbiAgICAgICAgY3JpdGVyaWE6IGl0ZXJhdGVlKHZhbHVlLCBpbmRleCwgbGlzdClcXG4gICAgICB9O1xcbiAgICB9KS5zb3J0KGZ1bmN0aW9uKGxlZnQsIHJpZ2h0KSB7XFxuICAgICAgdmFyIGEgPSBsZWZ0LmNyaXRlcmlhO1xcbiAgICAgIHZhciBiID0gcmlnaHQuY3JpdGVyaWE7XFxuICAgICAgaWYgKGEgIT09IGIpIHtcXG4gICAgICAgIGlmIChhID4gYiB8fCBhID09PSB2b2lkIDApIHJldHVybiAxO1xcbiAgICAgICAgaWYgKGEgPCBiIHx8IGIgPT09IHZvaWQgMCkgcmV0dXJuIC0xO1xcbiAgICAgIH1cXG4gICAgICByZXR1cm4gbGVmdC5pbmRleCAtIHJpZ2h0LmluZGV4O1xcbiAgICB9KSwgJ3ZhbHVlJyk7XFxuICB9O1xcblxcbiAgLy8gQW4gaW50ZXJuYWwgZnVuY3Rpb24gdXNlZCBmb3IgYWdncmVnYXRlIFxcXCJncm91cCBieVxcXCIgb3BlcmF0aW9ucy5cXG4gIHZhciBncm91cCA9IGZ1bmN0aW9uKGJlaGF2aW9yKSB7XFxuICAgIHJldHVybiBmdW5jdGlvbihvYmosIGl0ZXJhdGVlLCBjb250ZXh0KSB7XFxuICAgICAgdmFyIHJlc3VsdCA9IHt9O1xcbiAgICAgIGl0ZXJhdGVlID0gY2IoaXRlcmF0ZWUsIGNvbnRleHQpO1xcbiAgICAgIF8uZWFjaChvYmosIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCkge1xcbiAgICAgICAgdmFyIGtleSA9IGl0ZXJhdGVlKHZhbHVlLCBpbmRleCwgb2JqKTtcXG4gICAgICAgIGJlaGF2aW9yKHJlc3VsdCwgdmFsdWUsIGtleSk7XFxuICAgICAgfSk7XFxuICAgICAgcmV0dXJuIHJlc3VsdDtcXG4gICAgfTtcXG4gIH07XFxuXFxuICAvLyBHcm91cHMgdGhlIG9iamVjdCdzIHZhbHVlcyBieSBhIGNyaXRlcmlvbi4gUGFzcyBlaXRoZXIgYSBzdHJpbmcgYXR0cmlidXRlXFxuICAvLyB0byBncm91cCBieSwgb3IgYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgdGhlIGNyaXRlcmlvbi5cXG4gIF8uZ3JvdXBCeSA9IGdyb3VwKGZ1bmN0aW9uKHJlc3VsdCwgdmFsdWUsIGtleSkge1xcbiAgICBpZiAoXy5oYXMocmVzdWx0LCBrZXkpKSByZXN1bHRba2V5XS5wdXNoKHZhbHVlKTsgZWxzZSByZXN1bHRba2V5XSA9IFt2YWx1ZV07XFxuICB9KTtcXG5cXG4gIC8vIEluZGV4ZXMgdGhlIG9iamVjdCdzIHZhbHVlcyBieSBhIGNyaXRlcmlvbiwgc2ltaWxhciB0byBgZ3JvdXBCeWAsIGJ1dCBmb3JcXG4gIC8vIHdoZW4geW91IGtub3cgdGhhdCB5b3VyIGluZGV4IHZhbHVlcyB3aWxsIGJlIHVuaXF1ZS5cXG4gIF8uaW5kZXhCeSA9IGdyb3VwKGZ1bmN0aW9uKHJlc3VsdCwgdmFsdWUsIGtleSkge1xcbiAgICByZXN1bHRba2V5XSA9IHZhbHVlO1xcbiAgfSk7XFxuXFxuICAvLyBDb3VudHMgaW5zdGFuY2VzIG9mIGFuIG9iamVjdCB0aGF0IGdyb3VwIGJ5IGEgY2VydGFpbiBjcml0ZXJpb24uIFBhc3NcXG4gIC8vIGVpdGhlciBhIHN0cmluZyBhdHRyaWJ1dGUgdG8gY291bnQgYnksIG9yIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZVxcbiAgLy8gY3JpdGVyaW9uLlxcbiAgXy5jb3VudEJ5ID0gZ3JvdXAoZnVuY3Rpb24ocmVzdWx0LCB2YWx1ZSwga2V5KSB7XFxuICAgIGlmIChfLmhhcyhyZXN1bHQsIGtleSkpIHJlc3VsdFtrZXldKys7IGVsc2UgcmVzdWx0W2tleV0gPSAxO1xcbiAgfSk7XFxuXFxuICAvLyBTYWZlbHkgY3JlYXRlIGEgcmVhbCwgbGl2ZSBhcnJheSBmcm9tIGFueXRoaW5nIGl0ZXJhYmxlLlxcbiAgXy50b0FycmF5ID0gZnVuY3Rpb24ob2JqKSB7XFxuICAgIGlmICghb2JqKSByZXR1cm4gW107XFxuICAgIGlmIChfLmlzQXJyYXkob2JqKSkgcmV0dXJuIHNsaWNlLmNhbGwob2JqKTtcXG4gICAgaWYgKGlzQXJyYXlMaWtlKG9iaikpIHJldHVybiBfLm1hcChvYmosIF8uaWRlbnRpdHkpO1xcbiAgICByZXR1cm4gXy52YWx1ZXMob2JqKTtcXG4gIH07XFxuXFxuICAvLyBSZXR1cm4gdGhlIG51bWJlciBvZiBlbGVtZW50cyBpbiBhbiBvYmplY3QuXFxuICBfLnNpemUgPSBmdW5jdGlvbihvYmopIHtcXG4gICAgaWYgKG9iaiA9PSBudWxsKSByZXR1cm4gMDtcXG4gICAgcmV0dXJuIGlzQXJyYXlMaWtlKG9iaikgPyBvYmoubGVuZ3RoIDogXy5rZXlzKG9iaikubGVuZ3RoO1xcbiAgfTtcXG5cXG4gIC8vIFNwbGl0IGEgY29sbGVjdGlvbiBpbnRvIHR3byBhcnJheXM6IG9uZSB3aG9zZSBlbGVtZW50cyBhbGwgc2F0aXNmeSB0aGUgZ2l2ZW5cXG4gIC8vIHByZWRpY2F0ZSwgYW5kIG9uZSB3aG9zZSBlbGVtZW50cyBhbGwgZG8gbm90IHNhdGlzZnkgdGhlIHByZWRpY2F0ZS5cXG4gIF8ucGFydGl0aW9uID0gZnVuY3Rpb24ob2JqLCBwcmVkaWNhdGUsIGNvbnRleHQpIHtcXG4gICAgcHJlZGljYXRlID0gY2IocHJlZGljYXRlLCBjb250ZXh0KTtcXG4gICAgdmFyIHBhc3MgPSBbXSwgZmFpbCA9IFtdO1xcbiAgICBfLmVhY2gob2JqLCBmdW5jdGlvbih2YWx1ZSwga2V5LCBvYmopIHtcXG4gICAgICAocHJlZGljYXRlKHZhbHVlLCBrZXksIG9iaikgPyBwYXNzIDogZmFpbCkucHVzaCh2YWx1ZSk7XFxuICAgIH0pO1xcbiAgICByZXR1cm4gW3Bhc3MsIGZhaWxdO1xcbiAgfTtcXG5cXG4gIC8vIEFycmF5IEZ1bmN0aW9uc1xcbiAgLy8gLS0tLS0tLS0tLS0tLS0tXFxuXFxuICAvLyBHZXQgdGhlIGZpcnN0IGVsZW1lbnQgb2YgYW4gYXJyYXkuIFBhc3NpbmcgKipuKiogd2lsbCByZXR1cm4gdGhlIGZpcnN0IE5cXG4gIC8vIHZhbHVlcyBpbiB0aGUgYXJyYXkuIEFsaWFzZWQgYXMgYGhlYWRgIGFuZCBgdGFrZWAuIFRoZSAqKmd1YXJkKiogY2hlY2tcXG4gIC8vIGFsbG93cyBpdCB0byB3b3JrIHdpdGggYF8ubWFwYC5cXG4gIF8uZmlyc3QgPSBfLmhlYWQgPSBfLnRha2UgPSBmdW5jdGlvbihhcnJheSwgbiwgZ3VhcmQpIHtcXG4gICAgaWYgKGFycmF5ID09IG51bGwpIHJldHVybiB2b2lkIDA7XFxuICAgIGlmIChuID09IG51bGwgfHwgZ3VhcmQpIHJldHVybiBhcnJheVswXTtcXG4gICAgcmV0dXJuIF8uaW5pdGlhbChhcnJheSwgYXJyYXkubGVuZ3RoIC0gbik7XFxuICB9O1xcblxcbiAgLy8gUmV0dXJucyBldmVyeXRoaW5nIGJ1dCB0aGUgbGFzdCBlbnRyeSBvZiB0aGUgYXJyYXkuIEVzcGVjaWFsbHkgdXNlZnVsIG9uXFxuICAvLyB0aGUgYXJndW1lbnRzIG9iamVjdC4gUGFzc2luZyAqKm4qKiB3aWxsIHJldHVybiBhbGwgdGhlIHZhbHVlcyBpblxcbiAgLy8gdGhlIGFycmF5LCBleGNsdWRpbmcgdGhlIGxhc3QgTi5cXG4gIF8uaW5pdGlhbCA9IGZ1bmN0aW9uKGFycmF5LCBuLCBndWFyZCkge1xcbiAgICByZXR1cm4gc2xpY2UuY2FsbChhcnJheSwgMCwgTWF0aC5tYXgoMCwgYXJyYXkubGVuZ3RoIC0gKG4gPT0gbnVsbCB8fCBndWFyZCA/IDEgOiBuKSkpO1xcbiAgfTtcXG5cXG4gIC8vIEdldCB0aGUgbGFzdCBlbGVtZW50IG9mIGFuIGFycmF5LiBQYXNzaW5nICoqbioqIHdpbGwgcmV0dXJuIHRoZSBsYXN0IE5cXG4gIC8vIHZhbHVlcyBpbiB0aGUgYXJyYXkuXFxuICBfLmxhc3QgPSBmdW5jdGlvbihhcnJheSwgbiwgZ3VhcmQpIHtcXG4gICAgaWYgKGFycmF5ID09IG51bGwpIHJldHVybiB2b2lkIDA7XFxuICAgIGlmIChuID09IG51bGwgfHwgZ3VhcmQpIHJldHVybiBhcnJheVthcnJheS5sZW5ndGggLSAxXTtcXG4gICAgcmV0dXJuIF8ucmVzdChhcnJheSwgTWF0aC5tYXgoMCwgYXJyYXkubGVuZ3RoIC0gbikpO1xcbiAgfTtcXG5cXG4gIC8vIFJldHVybnMgZXZlcnl0aGluZyBidXQgdGhlIGZpcnN0IGVudHJ5IG9mIHRoZSBhcnJheS4gQWxpYXNlZCBhcyBgdGFpbGAgYW5kIGBkcm9wYC5cXG4gIC8vIEVzcGVjaWFsbHkgdXNlZnVsIG9uIHRoZSBhcmd1bWVudHMgb2JqZWN0LiBQYXNzaW5nIGFuICoqbioqIHdpbGwgcmV0dXJuXFxuICAvLyB0aGUgcmVzdCBOIHZhbHVlcyBpbiB0aGUgYXJyYXkuXFxuICBfLnJlc3QgPSBfLnRhaWwgPSBfLmRyb3AgPSBmdW5jdGlvbihhcnJheSwgbiwgZ3VhcmQpIHtcXG4gICAgcmV0dXJuIHNsaWNlLmNhbGwoYXJyYXksIG4gPT0gbnVsbCB8fCBndWFyZCA/IDEgOiBuKTtcXG4gIH07XFxuXFxuICAvLyBUcmltIG91dCBhbGwgZmFsc3kgdmFsdWVzIGZyb20gYW4gYXJyYXkuXFxuICBfLmNvbXBhY3QgPSBmdW5jdGlvbihhcnJheSkge1xcbiAgICByZXR1cm4gXy5maWx0ZXIoYXJyYXksIF8uaWRlbnRpdHkpO1xcbiAgfTtcXG5cXG4gIC8vIEludGVybmFsIGltcGxlbWVudGF0aW9uIG9mIGEgcmVjdXJzaXZlIGBmbGF0dGVuYCBmdW5jdGlvbi5cXG4gIHZhciBmbGF0dGVuID0gZnVuY3Rpb24oaW5wdXQsIHNoYWxsb3csIHN0cmljdCwgc3RhcnRJbmRleCkge1xcbiAgICB2YXIgb3V0cHV0ID0gW10sIGlkeCA9IDA7XFxuICAgIGZvciAodmFyIGkgPSBzdGFydEluZGV4IHx8IDAsIGxlbmd0aCA9IGdldExlbmd0aChpbnB1dCk7IGkgPCBsZW5ndGg7IGkrKykge1xcbiAgICAgIHZhciB2YWx1ZSA9IGlucHV0W2ldO1xcbiAgICAgIGlmIChpc0FycmF5TGlrZSh2YWx1ZSkgJiYgKF8uaXNBcnJheSh2YWx1ZSkgfHwgXy5pc0FyZ3VtZW50cyh2YWx1ZSkpKSB7XFxuICAgICAgICAvL2ZsYXR0ZW4gY3VycmVudCBsZXZlbCBvZiBhcnJheSBvciBhcmd1bWVudHMgb2JqZWN0XFxuICAgICAgICBpZiAoIXNoYWxsb3cpIHZhbHVlID0gZmxhdHRlbih2YWx1ZSwgc2hhbGxvdywgc3RyaWN0KTtcXG4gICAgICAgIHZhciBqID0gMCwgbGVuID0gdmFsdWUubGVuZ3RoO1xcbiAgICAgICAgb3V0cHV0Lmxlbmd0aCArPSBsZW47XFxuICAgICAgICB3aGlsZSAoaiA8IGxlbikge1xcbiAgICAgICAgICBvdXRwdXRbaWR4KytdID0gdmFsdWVbaisrXTtcXG4gICAgICAgIH1cXG4gICAgICB9IGVsc2UgaWYgKCFzdHJpY3QpIHtcXG4gICAgICAgIG91dHB1dFtpZHgrK10gPSB2YWx1ZTtcXG4gICAgICB9XFxuICAgIH1cXG4gICAgcmV0dXJuIG91dHB1dDtcXG4gIH07XFxuXFxuICAvLyBGbGF0dGVuIG91dCBhbiBhcnJheSwgZWl0aGVyIHJlY3Vyc2l2ZWx5IChieSBkZWZhdWx0KSwgb3IganVzdCBvbmUgbGV2ZWwuXFxuICBfLmZsYXR0ZW4gPSBmdW5jdGlvbihhcnJheSwgc2hhbGxvdykge1xcbiAgICByZXR1cm4gZmxhdHRlbihhcnJheSwgc2hhbGxvdywgZmFsc2UpO1xcbiAgfTtcXG5cXG4gIC8vIFJldHVybiBhIHZlcnNpb24gb2YgdGhlIGFycmF5IHRoYXQgZG9lcyBub3QgY29udGFpbiB0aGUgc3BlY2lmaWVkIHZhbHVlKHMpLlxcbiAgXy53aXRob3V0ID0gZnVuY3Rpb24oYXJyYXkpIHtcXG4gICAgcmV0dXJuIF8uZGlmZmVyZW5jZShhcnJheSwgc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpKTtcXG4gIH07XFxuXFxuICAvLyBQcm9kdWNlIGEgZHVwbGljYXRlLWZyZWUgdmVyc2lvbiBvZiB0aGUgYXJyYXkuIElmIHRoZSBhcnJheSBoYXMgYWxyZWFkeVxcbiAgLy8gYmVlbiBzb3J0ZWQsIHlvdSBoYXZlIHRoZSBvcHRpb24gb2YgdXNpbmcgYSBmYXN0ZXIgYWxnb3JpdGhtLlxcbiAgLy8gQWxpYXNlZCBhcyBgdW5pcXVlYC5cXG4gIF8udW5pcSA9IF8udW5pcXVlID0gZnVuY3Rpb24oYXJyYXksIGlzU29ydGVkLCBpdGVyYXRlZSwgY29udGV4dCkge1xcbiAgICBpZiAoIV8uaXNCb29sZWFuKGlzU29ydGVkKSkge1xcbiAgICAgIGNvbnRleHQgPSBpdGVyYXRlZTtcXG4gICAgICBpdGVyYXRlZSA9IGlzU29ydGVkO1xcbiAgICAgIGlzU29ydGVkID0gZmFsc2U7XFxuICAgIH1cXG4gICAgaWYgKGl0ZXJhdGVlICE9IG51bGwpIGl0ZXJhdGVlID0gY2IoaXRlcmF0ZWUsIGNvbnRleHQpO1xcbiAgICB2YXIgcmVzdWx0ID0gW107XFxuICAgIHZhciBzZWVuID0gW107XFxuICAgIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSBnZXRMZW5ndGgoYXJyYXkpOyBpIDwgbGVuZ3RoOyBpKyspIHtcXG4gICAgICB2YXIgdmFsdWUgPSBhcnJheVtpXSxcXG4gICAgICAgICAgY29tcHV0ZWQgPSBpdGVyYXRlZSA/IGl0ZXJhdGVlKHZhbHVlLCBpLCBhcnJheSkgOiB2YWx1ZTtcXG4gICAgICBpZiAoaXNTb3J0ZWQpIHtcXG4gICAgICAgIGlmICghaSB8fCBzZWVuICE9PSBjb21wdXRlZCkgcmVzdWx0LnB1c2godmFsdWUpO1xcbiAgICAgICAgc2VlbiA9IGNvbXB1dGVkO1xcbiAgICAgIH0gZWxzZSBpZiAoaXRlcmF0ZWUpIHtcXG4gICAgICAgIGlmICghXy5jb250YWlucyhzZWVuLCBjb21wdXRlZCkpIHtcXG4gICAgICAgICAgc2Vlbi5wdXNoKGNvbXB1dGVkKTtcXG4gICAgICAgICAgcmVzdWx0LnB1c2godmFsdWUpO1xcbiAgICAgICAgfVxcbiAgICAgIH0gZWxzZSBpZiAoIV8uY29udGFpbnMocmVzdWx0LCB2YWx1ZSkpIHtcXG4gICAgICAgIHJlc3VsdC5wdXNoKHZhbHVlKTtcXG4gICAgICB9XFxuICAgIH1cXG4gICAgcmV0dXJuIHJlc3VsdDtcXG4gIH07XFxuXFxuICAvLyBQcm9kdWNlIGFuIGFycmF5IHRoYXQgY29udGFpbnMgdGhlIHVuaW9uOiBlYWNoIGRpc3RpbmN0IGVsZW1lbnQgZnJvbSBhbGwgb2ZcXG4gIC8vIHRoZSBwYXNzZWQtaW4gYXJyYXlzLlxcbiAgXy51bmlvbiA9IGZ1bmN0aW9uKCkge1xcbiAgICByZXR1cm4gXy51bmlxKGZsYXR0ZW4oYXJndW1lbnRzLCB0cnVlLCB0cnVlKSk7XFxuICB9O1xcblxcbiAgLy8gUHJvZHVjZSBhbiBhcnJheSB0aGF0IGNvbnRhaW5zIGV2ZXJ5IGl0ZW0gc2hhcmVkIGJldHdlZW4gYWxsIHRoZVxcbiAgLy8gcGFzc2VkLWluIGFycmF5cy5cXG4gIF8uaW50ZXJzZWN0aW9uID0gZnVuY3Rpb24oYXJyYXkpIHtcXG4gICAgdmFyIHJlc3VsdCA9IFtdO1xcbiAgICB2YXIgYXJnc0xlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XFxuICAgIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSBnZXRMZW5ndGgoYXJyYXkpOyBpIDwgbGVuZ3RoOyBpKyspIHtcXG4gICAgICB2YXIgaXRlbSA9IGFycmF5W2ldO1xcbiAgICAgIGlmIChfLmNvbnRhaW5zKHJlc3VsdCwgaXRlbSkpIGNvbnRpbnVlO1xcbiAgICAgIGZvciAodmFyIGogPSAxOyBqIDwgYXJnc0xlbmd0aDsgaisrKSB7XFxuICAgICAgICBpZiAoIV8uY29udGFpbnMoYXJndW1lbnRzW2pdLCBpdGVtKSkgYnJlYWs7XFxuICAgICAgfVxcbiAgICAgIGlmIChqID09PSBhcmdzTGVuZ3RoKSByZXN1bHQucHVzaChpdGVtKTtcXG4gICAgfVxcbiAgICByZXR1cm4gcmVzdWx0O1xcbiAgfTtcXG5cXG4gIC8vIFRha2UgdGhlIGRpZmZlcmVuY2UgYmV0d2VlbiBvbmUgYXJyYXkgYW5kIGEgbnVtYmVyIG9mIG90aGVyIGFycmF5cy5cXG4gIC8vIE9ubHkgdGhlIGVsZW1lbnRzIHByZXNlbnQgaW4ganVzdCB0aGUgZmlyc3QgYXJyYXkgd2lsbCByZW1haW4uXFxuICBfLmRpZmZlcmVuY2UgPSBmdW5jdGlvbihhcnJheSkge1xcbiAgICB2YXIgcmVzdCA9IGZsYXR0ZW4oYXJndW1lbnRzLCB0cnVlLCB0cnVlLCAxKTtcXG4gICAgcmV0dXJuIF8uZmlsdGVyKGFycmF5LCBmdW5jdGlvbih2YWx1ZSl7XFxuICAgICAgcmV0dXJuICFfLmNvbnRhaW5zKHJlc3QsIHZhbHVlKTtcXG4gICAgfSk7XFxuICB9O1xcblxcbiAgLy8gWmlwIHRvZ2V0aGVyIG11bHRpcGxlIGxpc3RzIGludG8gYSBzaW5nbGUgYXJyYXkgLS0gZWxlbWVudHMgdGhhdCBzaGFyZVxcbiAgLy8gYW4gaW5kZXggZ28gdG9nZXRoZXIuXFxuICBfLnppcCA9IGZ1bmN0aW9uKCkge1xcbiAgICByZXR1cm4gXy51bnppcChhcmd1bWVudHMpO1xcbiAgfTtcXG5cXG4gIC8vIENvbXBsZW1lbnQgb2YgXy56aXAuIFVuemlwIGFjY2VwdHMgYW4gYXJyYXkgb2YgYXJyYXlzIGFuZCBncm91cHNcXG4gIC8vIGVhY2ggYXJyYXkncyBlbGVtZW50cyBvbiBzaGFyZWQgaW5kaWNlc1xcbiAgXy51bnppcCA9IGZ1bmN0aW9uKGFycmF5KSB7XFxuICAgIHZhciBsZW5ndGggPSBhcnJheSAmJiBfLm1heChhcnJheSwgZ2V0TGVuZ3RoKS5sZW5ndGggfHwgMDtcXG4gICAgdmFyIHJlc3VsdCA9IEFycmF5KGxlbmd0aCk7XFxuXFxuICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KyspIHtcXG4gICAgICByZXN1bHRbaW5kZXhdID0gXy5wbHVjayhhcnJheSwgaW5kZXgpO1xcbiAgICB9XFxuICAgIHJldHVybiByZXN1bHQ7XFxuICB9O1xcblxcbiAgLy8gQ29udmVydHMgbGlzdHMgaW50byBvYmplY3RzLiBQYXNzIGVpdGhlciBhIHNpbmdsZSBhcnJheSBvZiBgW2tleSwgdmFsdWVdYFxcbiAgLy8gcGFpcnMsIG9yIHR3byBwYXJhbGxlbCBhcnJheXMgb2YgdGhlIHNhbWUgbGVuZ3RoIC0tIG9uZSBvZiBrZXlzLCBhbmQgb25lIG9mXFxuICAvLyB0aGUgY29ycmVzcG9uZGluZyB2YWx1ZXMuXFxuICBfLm9iamVjdCA9IGZ1bmN0aW9uKGxpc3QsIHZhbHVlcykge1xcbiAgICB2YXIgcmVzdWx0ID0ge307XFxuICAgIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSBnZXRMZW5ndGgobGlzdCk7IGkgPCBsZW5ndGg7IGkrKykge1xcbiAgICAgIGlmICh2YWx1ZXMpIHtcXG4gICAgICAgIHJlc3VsdFtsaXN0W2ldXSA9IHZhbHVlc1tpXTtcXG4gICAgICB9IGVsc2Uge1xcbiAgICAgICAgcmVzdWx0W2xpc3RbaV1bMF1dID0gbGlzdFtpXVsxXTtcXG4gICAgICB9XFxuICAgIH1cXG4gICAgcmV0dXJuIHJlc3VsdDtcXG4gIH07XFxuXFxuICAvLyBHZW5lcmF0b3IgZnVuY3Rpb24gdG8gY3JlYXRlIHRoZSBmaW5kSW5kZXggYW5kIGZpbmRMYXN0SW5kZXggZnVuY3Rpb25zXFxuICBmdW5jdGlvbiBjcmVhdGVQcmVkaWNhdGVJbmRleEZpbmRlcihkaXIpIHtcXG4gICAgcmV0dXJuIGZ1bmN0aW9uKGFycmF5LCBwcmVkaWNhdGUsIGNvbnRleHQpIHtcXG4gICAgICBwcmVkaWNhdGUgPSBjYihwcmVkaWNhdGUsIGNvbnRleHQpO1xcbiAgICAgIHZhciBsZW5ndGggPSBnZXRMZW5ndGgoYXJyYXkpO1xcbiAgICAgIHZhciBpbmRleCA9IGRpciA+IDAgPyAwIDogbGVuZ3RoIC0gMTtcXG4gICAgICBmb3IgKDsgaW5kZXggPj0gMCAmJiBpbmRleCA8IGxlbmd0aDsgaW5kZXggKz0gZGlyKSB7XFxuICAgICAgICBpZiAocHJlZGljYXRlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KSkgcmV0dXJuIGluZGV4O1xcbiAgICAgIH1cXG4gICAgICByZXR1cm4gLTE7XFxuICAgIH07XFxuICB9XFxuXFxuICAvLyBSZXR1cm5zIHRoZSBmaXJzdCBpbmRleCBvbiBhbiBhcnJheS1saWtlIHRoYXQgcGFzc2VzIGEgcHJlZGljYXRlIHRlc3RcXG4gIF8uZmluZEluZGV4ID0gY3JlYXRlUHJlZGljYXRlSW5kZXhGaW5kZXIoMSk7XFxuICBfLmZpbmRMYXN0SW5kZXggPSBjcmVhdGVQcmVkaWNhdGVJbmRleEZpbmRlcigtMSk7XFxuXFxuICAvLyBVc2UgYSBjb21wYXJhdG9yIGZ1bmN0aW9uIHRvIGZpZ3VyZSBvdXQgdGhlIHNtYWxsZXN0IGluZGV4IGF0IHdoaWNoXFxuICAvLyBhbiBvYmplY3Qgc2hvdWxkIGJlIGluc2VydGVkIHNvIGFzIHRvIG1haW50YWluIG9yZGVyLiBVc2VzIGJpbmFyeSBzZWFyY2guXFxuICBfLnNvcnRlZEluZGV4ID0gZnVuY3Rpb24oYXJyYXksIG9iaiwgaXRlcmF0ZWUsIGNvbnRleHQpIHtcXG4gICAgaXRlcmF0ZWUgPSBjYihpdGVyYXRlZSwgY29udGV4dCwgMSk7XFxuICAgIHZhciB2YWx1ZSA9IGl0ZXJhdGVlKG9iaik7XFxuICAgIHZhciBsb3cgPSAwLCBoaWdoID0gZ2V0TGVuZ3RoKGFycmF5KTtcXG4gICAgd2hpbGUgKGxvdyA8IGhpZ2gpIHtcXG4gICAgICB2YXIgbWlkID0gTWF0aC5mbG9vcigobG93ICsgaGlnaCkgLyAyKTtcXG4gICAgICBpZiAoaXRlcmF0ZWUoYXJyYXlbbWlkXSkgPCB2YWx1ZSkgbG93ID0gbWlkICsgMTsgZWxzZSBoaWdoID0gbWlkO1xcbiAgICB9XFxuICAgIHJldHVybiBsb3c7XFxuICB9O1xcblxcbiAgLy8gR2VuZXJhdG9yIGZ1bmN0aW9uIHRvIGNyZWF0ZSB0aGUgaW5kZXhPZiBhbmQgbGFzdEluZGV4T2YgZnVuY3Rpb25zXFxuICBmdW5jdGlvbiBjcmVhdGVJbmRleEZpbmRlcihkaXIsIHByZWRpY2F0ZUZpbmQsIHNvcnRlZEluZGV4KSB7XFxuICAgIHJldHVybiBmdW5jdGlvbihhcnJheSwgaXRlbSwgaWR4KSB7XFxuICAgICAgdmFyIGkgPSAwLCBsZW5ndGggPSBnZXRMZW5ndGgoYXJyYXkpO1xcbiAgICAgIGlmICh0eXBlb2YgaWR4ID09ICdudW1iZXInKSB7XFxuICAgICAgICBpZiAoZGlyID4gMCkge1xcbiAgICAgICAgICAgIGkgPSBpZHggPj0gMCA/IGlkeCA6IE1hdGgubWF4KGlkeCArIGxlbmd0aCwgaSk7XFxuICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICAgIGxlbmd0aCA9IGlkeCA+PSAwID8gTWF0aC5taW4oaWR4ICsgMSwgbGVuZ3RoKSA6IGlkeCArIGxlbmd0aCArIDE7XFxuICAgICAgICB9XFxuICAgICAgfSBlbHNlIGlmIChzb3J0ZWRJbmRleCAmJiBpZHggJiYgbGVuZ3RoKSB7XFxuICAgICAgICBpZHggPSBzb3J0ZWRJbmRleChhcnJheSwgaXRlbSk7XFxuICAgICAgICByZXR1cm4gYXJyYXlbaWR4XSA9PT0gaXRlbSA/IGlkeCA6IC0xO1xcbiAgICAgIH1cXG4gICAgICBpZiAoaXRlbSAhPT0gaXRlbSkge1xcbiAgICAgICAgaWR4ID0gcHJlZGljYXRlRmluZChzbGljZS5jYWxsKGFycmF5LCBpLCBsZW5ndGgpLCBfLmlzTmFOKTtcXG4gICAgICAgIHJldHVybiBpZHggPj0gMCA/IGlkeCArIGkgOiAtMTtcXG4gICAgICB9XFxuICAgICAgZm9yIChpZHggPSBkaXIgPiAwID8gaSA6IGxlbmd0aCAtIDE7IGlkeCA+PSAwICYmIGlkeCA8IGxlbmd0aDsgaWR4ICs9IGRpcikge1xcbiAgICAgICAgaWYgKGFycmF5W2lkeF0gPT09IGl0ZW0pIHJldHVybiBpZHg7XFxuICAgICAgfVxcbiAgICAgIHJldHVybiAtMTtcXG4gICAgfTtcXG4gIH1cXG5cXG4gIC8vIFJldHVybiB0aGUgcG9zaXRpb24gb2YgdGhlIGZpcnN0IG9jY3VycmVuY2Ugb2YgYW4gaXRlbSBpbiBhbiBhcnJheSxcXG4gIC8vIG9yIC0xIGlmIHRoZSBpdGVtIGlzIG5vdCBpbmNsdWRlZCBpbiB0aGUgYXJyYXkuXFxuICAvLyBJZiB0aGUgYXJyYXkgaXMgbGFyZ2UgYW5kIGFscmVhZHkgaW4gc29ydCBvcmRlciwgcGFzcyBgdHJ1ZWBcXG4gIC8vIGZvciAqKmlzU29ydGVkKiogdG8gdXNlIGJpbmFyeSBzZWFyY2guXFxuICBfLmluZGV4T2YgPSBjcmVhdGVJbmRleEZpbmRlcigxLCBfLmZpbmRJbmRleCwgXy5zb3J0ZWRJbmRleCk7XFxuICBfLmxhc3RJbmRleE9mID0gY3JlYXRlSW5kZXhGaW5kZXIoLTEsIF8uZmluZExhc3RJbmRleCk7XFxuXFxuICAvLyBHZW5lcmF0ZSBhbiBpbnRlZ2VyIEFycmF5IGNvbnRhaW5pbmcgYW4gYXJpdGhtZXRpYyBwcm9ncmVzc2lvbi4gQSBwb3J0IG9mXFxuICAvLyB0aGUgbmF0aXZlIFB5dGhvbiBgcmFuZ2UoKWAgZnVuY3Rpb24uIFNlZVxcbiAgLy8gW3RoZSBQeXRob24gZG9jdW1lbnRhdGlvbl0oaHR0cDovL2RvY3MucHl0aG9uLm9yZy9saWJyYXJ5L2Z1bmN0aW9ucy5odG1sI3JhbmdlKS5cXG4gIF8ucmFuZ2UgPSBmdW5jdGlvbihzdGFydCwgc3RvcCwgc3RlcCkge1xcbiAgICBpZiAoc3RvcCA9PSBudWxsKSB7XFxuICAgICAgc3RvcCA9IHN0YXJ0IHx8IDA7XFxuICAgICAgc3RhcnQgPSAwO1xcbiAgICB9XFxuICAgIHN0ZXAgPSBzdGVwIHx8IDE7XFxuXFxuICAgIHZhciBsZW5ndGggPSBNYXRoLm1heChNYXRoLmNlaWwoKHN0b3AgLSBzdGFydCkgLyBzdGVwKSwgMCk7XFxuICAgIHZhciByYW5nZSA9IEFycmF5KGxlbmd0aCk7XFxuXFxuICAgIGZvciAodmFyIGlkeCA9IDA7IGlkeCA8IGxlbmd0aDsgaWR4KyssIHN0YXJ0ICs9IHN0ZXApIHtcXG4gICAgICByYW5nZVtpZHhdID0gc3RhcnQ7XFxuICAgIH1cXG5cXG4gICAgcmV0dXJuIHJhbmdlO1xcbiAgfTtcXG5cXG4gIC8vIEZ1bmN0aW9uIChhaGVtKSBGdW5jdGlvbnNcXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLVxcblxcbiAgLy8gRGV0ZXJtaW5lcyB3aGV0aGVyIHRvIGV4ZWN1dGUgYSBmdW5jdGlvbiBhcyBhIGNvbnN0cnVjdG9yXFxuICAvLyBvciBhIG5vcm1hbCBmdW5jdGlvbiB3aXRoIHRoZSBwcm92aWRlZCBhcmd1bWVudHNcXG4gIHZhciBleGVjdXRlQm91bmQgPSBmdW5jdGlvbihzb3VyY2VGdW5jLCBib3VuZEZ1bmMsIGNvbnRleHQsIGNhbGxpbmdDb250ZXh0LCBhcmdzKSB7XFxuICAgIGlmICghKGNhbGxpbmdDb250ZXh0IGluc3RhbmNlb2YgYm91bmRGdW5jKSkgcmV0dXJuIHNvdXJjZUZ1bmMuYXBwbHkoY29udGV4dCwgYXJncyk7XFxuICAgIHZhciBzZWxmID0gYmFzZUNyZWF0ZShzb3VyY2VGdW5jLnByb3RvdHlwZSk7XFxuICAgIHZhciByZXN1bHQgPSBzb3VyY2VGdW5jLmFwcGx5KHNlbGYsIGFyZ3MpO1xcbiAgICBpZiAoXy5pc09iamVjdChyZXN1bHQpKSByZXR1cm4gcmVzdWx0O1xcbiAgICByZXR1cm4gc2VsZjtcXG4gIH07XFxuXFxuICAvLyBDcmVhdGUgYSBmdW5jdGlvbiBib3VuZCB0byBhIGdpdmVuIG9iamVjdCAoYXNzaWduaW5nIGB0aGlzYCwgYW5kIGFyZ3VtZW50cyxcXG4gIC8vIG9wdGlvbmFsbHkpLiBEZWxlZ2F0ZXMgdG8gKipFQ01BU2NyaXB0IDUqKidzIG5hdGl2ZSBgRnVuY3Rpb24uYmluZGAgaWZcXG4gIC8vIGF2YWlsYWJsZS5cXG4gIF8uYmluZCA9IGZ1bmN0aW9uKGZ1bmMsIGNvbnRleHQpIHtcXG4gICAgaWYgKG5hdGl2ZUJpbmQgJiYgZnVuYy5iaW5kID09PSBuYXRpdmVCaW5kKSByZXR1cm4gbmF0aXZlQmluZC5hcHBseShmdW5jLCBzbGljZS5jYWxsKGFyZ3VtZW50cywgMSkpO1xcbiAgICBpZiAoIV8uaXNGdW5jdGlvbihmdW5jKSkgdGhyb3cgbmV3IFR5cGVFcnJvcignQmluZCBtdXN0IGJlIGNhbGxlZCBvbiBhIGZ1bmN0aW9uJyk7XFxuICAgIHZhciBhcmdzID0gc2xpY2UuY2FsbChhcmd1bWVudHMsIDIpO1xcbiAgICB2YXIgYm91bmQgPSBmdW5jdGlvbigpIHtcXG4gICAgICByZXR1cm4gZXhlY3V0ZUJvdW5kKGZ1bmMsIGJvdW5kLCBjb250ZXh0LCB0aGlzLCBhcmdzLmNvbmNhdChzbGljZS5jYWxsKGFyZ3VtZW50cykpKTtcXG4gICAgfTtcXG4gICAgcmV0dXJuIGJvdW5kO1xcbiAgfTtcXG5cXG4gIC8vIFBhcnRpYWxseSBhcHBseSBhIGZ1bmN0aW9uIGJ5IGNyZWF0aW5nIGEgdmVyc2lvbiB0aGF0IGhhcyBoYWQgc29tZSBvZiBpdHNcXG4gIC8vIGFyZ3VtZW50cyBwcmUtZmlsbGVkLCB3aXRob3V0IGNoYW5naW5nIGl0cyBkeW5hbWljIGB0aGlzYCBjb250ZXh0LiBfIGFjdHNcXG4gIC8vIGFzIGEgcGxhY2Vob2xkZXIsIGFsbG93aW5nIGFueSBjb21iaW5hdGlvbiBvZiBhcmd1bWVudHMgdG8gYmUgcHJlLWZpbGxlZC5cXG4gIF8ucGFydGlhbCA9IGZ1bmN0aW9uKGZ1bmMpIHtcXG4gICAgdmFyIGJvdW5kQXJncyA9IHNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcXG4gICAgdmFyIGJvdW5kID0gZnVuY3Rpb24oKSB7XFxuICAgICAgdmFyIHBvc2l0aW9uID0gMCwgbGVuZ3RoID0gYm91bmRBcmdzLmxlbmd0aDtcXG4gICAgICB2YXIgYXJncyA9IEFycmF5KGxlbmd0aCk7XFxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xcbiAgICAgICAgYXJnc1tpXSA9IGJvdW5kQXJnc1tpXSA9PT0gXyA/IGFyZ3VtZW50c1twb3NpdGlvbisrXSA6IGJvdW5kQXJnc1tpXTtcXG4gICAgICB9XFxuICAgICAgd2hpbGUgKHBvc2l0aW9uIDwgYXJndW1lbnRzLmxlbmd0aCkgYXJncy5wdXNoKGFyZ3VtZW50c1twb3NpdGlvbisrXSk7XFxuICAgICAgcmV0dXJuIGV4ZWN1dGVCb3VuZChmdW5jLCBib3VuZCwgdGhpcywgdGhpcywgYXJncyk7XFxuICAgIH07XFxuICAgIHJldHVybiBib3VuZDtcXG4gIH07XFxuXFxuICAvLyBCaW5kIGEgbnVtYmVyIG9mIGFuIG9iamVjdCdzIG1ldGhvZHMgdG8gdGhhdCBvYmplY3QuIFJlbWFpbmluZyBhcmd1bWVudHNcXG4gIC8vIGFyZSB0aGUgbWV0aG9kIG5hbWVzIHRvIGJlIGJvdW5kLiBVc2VmdWwgZm9yIGVuc3VyaW5nIHRoYXQgYWxsIGNhbGxiYWNrc1xcbiAgLy8gZGVmaW5lZCBvbiBhbiBvYmplY3QgYmVsb25nIHRvIGl0LlxcbiAgXy5iaW5kQWxsID0gZnVuY3Rpb24ob2JqKSB7XFxuICAgIHZhciBpLCBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoLCBrZXk7XFxuICAgIGlmIChsZW5ndGggPD0gMSkgdGhyb3cgbmV3IEVycm9yKCdiaW5kQWxsIG11c3QgYmUgcGFzc2VkIGZ1bmN0aW9uIG5hbWVzJyk7XFxuICAgIGZvciAoaSA9IDE7IGkgPCBsZW5ndGg7IGkrKykge1xcbiAgICAgIGtleSA9IGFyZ3VtZW50c1tpXTtcXG4gICAgICBvYmpba2V5XSA9IF8uYmluZChvYmpba2V5XSwgb2JqKTtcXG4gICAgfVxcbiAgICByZXR1cm4gb2JqO1xcbiAgfTtcXG5cXG4gIC8vIE1lbW9pemUgYW4gZXhwZW5zaXZlIGZ1bmN0aW9uIGJ5IHN0b3JpbmcgaXRzIHJlc3VsdHMuXFxuICBfLm1lbW9pemUgPSBmdW5jdGlvbihmdW5jLCBoYXNoZXIpIHtcXG4gICAgdmFyIG1lbW9pemUgPSBmdW5jdGlvbihrZXkpIHtcXG4gICAgICB2YXIgY2FjaGUgPSBtZW1vaXplLmNhY2hlO1xcbiAgICAgIHZhciBhZGRyZXNzID0gJycgKyAoaGFzaGVyID8gaGFzaGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgOiBrZXkpO1xcbiAgICAgIGlmICghXy5oYXMoY2FjaGUsIGFkZHJlc3MpKSBjYWNoZVthZGRyZXNzXSA9IGZ1bmMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcXG4gICAgICByZXR1cm4gY2FjaGVbYWRkcmVzc107XFxuICAgIH07XFxuICAgIG1lbW9pemUuY2FjaGUgPSB7fTtcXG4gICAgcmV0dXJuIG1lbW9pemU7XFxuICB9O1xcblxcbiAgLy8gRGVsYXlzIGEgZnVuY3Rpb24gZm9yIHRoZSBnaXZlbiBudW1iZXIgb2YgbWlsbGlzZWNvbmRzLCBhbmQgdGhlbiBjYWxsc1xcbiAgLy8gaXQgd2l0aCB0aGUgYXJndW1lbnRzIHN1cHBsaWVkLlxcbiAgXy5kZWxheSA9IGZ1bmN0aW9uKGZ1bmMsIHdhaXQpIHtcXG4gICAgdmFyIGFyZ3MgPSBzbGljZS5jYWxsKGFyZ3VtZW50cywgMik7XFxuICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XFxuICAgICAgcmV0dXJuIGZ1bmMuYXBwbHkobnVsbCwgYXJncyk7XFxuICAgIH0sIHdhaXQpO1xcbiAgfTtcXG5cXG4gIC8vIERlZmVycyBhIGZ1bmN0aW9uLCBzY2hlZHVsaW5nIGl0IHRvIHJ1biBhZnRlciB0aGUgY3VycmVudCBjYWxsIHN0YWNrIGhhc1xcbiAgLy8gY2xlYXJlZC5cXG4gIF8uZGVmZXIgPSBfLnBhcnRpYWwoXy5kZWxheSwgXywgMSk7XFxuXFxuICAvLyBSZXR1cm5zIGEgZnVuY3Rpb24sIHRoYXQsIHdoZW4gaW52b2tlZCwgd2lsbCBvbmx5IGJlIHRyaWdnZXJlZCBhdCBtb3N0IG9uY2VcXG4gIC8vIGR1cmluZyBhIGdpdmVuIHdpbmRvdyBvZiB0aW1lLiBOb3JtYWxseSwgdGhlIHRocm90dGxlZCBmdW5jdGlvbiB3aWxsIHJ1blxcbiAgLy8gYXMgbXVjaCBhcyBpdCBjYW4sIHdpdGhvdXQgZXZlciBnb2luZyBtb3JlIHRoYW4gb25jZSBwZXIgYHdhaXRgIGR1cmF0aW9uO1xcbiAgLy8gYnV0IGlmIHlvdSdkIGxpa2UgdG8gZGlzYWJsZSB0aGUgZXhlY3V0aW9uIG9uIHRoZSBsZWFkaW5nIGVkZ2UsIHBhc3NcXG4gIC8vIGB7bGVhZGluZzogZmFsc2V9YC4gVG8gZGlzYWJsZSBleGVjdXRpb24gb24gdGhlIHRyYWlsaW5nIGVkZ2UsIGRpdHRvLlxcbiAgXy50aHJvdHRsZSA9IGZ1bmN0aW9uKGZ1bmMsIHdhaXQsIG9wdGlvbnMpIHtcXG4gICAgdmFyIGNvbnRleHQsIGFyZ3MsIHJlc3VsdDtcXG4gICAgdmFyIHRpbWVvdXQgPSBudWxsO1xcbiAgICB2YXIgcHJldmlvdXMgPSAwO1xcbiAgICBpZiAoIW9wdGlvbnMpIG9wdGlvbnMgPSB7fTtcXG4gICAgdmFyIGxhdGVyID0gZnVuY3Rpb24oKSB7XFxuICAgICAgcHJldmlvdXMgPSBvcHRpb25zLmxlYWRpbmcgPT09IGZhbHNlID8gMCA6IF8ubm93KCk7XFxuICAgICAgdGltZW91dCA9IG51bGw7XFxuICAgICAgcmVzdWx0ID0gZnVuYy5hcHBseShjb250ZXh0LCBhcmdzKTtcXG4gICAgICBpZiAoIXRpbWVvdXQpIGNvbnRleHQgPSBhcmdzID0gbnVsbDtcXG4gICAgfTtcXG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xcbiAgICAgIHZhciBub3cgPSBfLm5vdygpO1xcbiAgICAgIGlmICghcHJldmlvdXMgJiYgb3B0aW9ucy5sZWFkaW5nID09PSBmYWxzZSkgcHJldmlvdXMgPSBub3c7XFxuICAgICAgdmFyIHJlbWFpbmluZyA9IHdhaXQgLSAobm93IC0gcHJldmlvdXMpO1xcbiAgICAgIGNvbnRleHQgPSB0aGlzO1xcbiAgICAgIGFyZ3MgPSBhcmd1bWVudHM7XFxuICAgICAgaWYgKHJlbWFpbmluZyA8PSAwIHx8IHJlbWFpbmluZyA+IHdhaXQpIHtcXG4gICAgICAgIGlmICh0aW1lb3V0KSB7XFxuICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcXG4gICAgICAgICAgdGltZW91dCA9IG51bGw7XFxuICAgICAgICB9XFxuICAgICAgICBwcmV2aW91cyA9IG5vdztcXG4gICAgICAgIHJlc3VsdCA9IGZ1bmMuYXBwbHkoY29udGV4dCwgYXJncyk7XFxuICAgICAgICBpZiAoIXRpbWVvdXQpIGNvbnRleHQgPSBhcmdzID0gbnVsbDtcXG4gICAgICB9IGVsc2UgaWYgKCF0aW1lb3V0ICYmIG9wdGlvbnMudHJhaWxpbmcgIT09IGZhbHNlKSB7XFxuICAgICAgICB0aW1lb3V0ID0gc2V0VGltZW91dChsYXRlciwgcmVtYWluaW5nKTtcXG4gICAgICB9XFxuICAgICAgcmV0dXJuIHJlc3VsdDtcXG4gICAgfTtcXG4gIH07XFxuXFxuICAvLyBSZXR1cm5zIGEgZnVuY3Rpb24sIHRoYXQsIGFzIGxvbmcgYXMgaXQgY29udGludWVzIHRvIGJlIGludm9rZWQsIHdpbGwgbm90XFxuICAvLyBiZSB0cmlnZ2VyZWQuIFRoZSBmdW5jdGlvbiB3aWxsIGJlIGNhbGxlZCBhZnRlciBpdCBzdG9wcyBiZWluZyBjYWxsZWQgZm9yXFxuICAvLyBOIG1pbGxpc2Vjb25kcy4gSWYgYGltbWVkaWF0ZWAgaXMgcGFzc2VkLCB0cmlnZ2VyIHRoZSBmdW5jdGlvbiBvbiB0aGVcXG4gIC8vIGxlYWRpbmcgZWRnZSwgaW5zdGVhZCBvZiB0aGUgdHJhaWxpbmcuXFxuICBfLmRlYm91bmNlID0gZnVuY3Rpb24oZnVuYywgd2FpdCwgaW1tZWRpYXRlKSB7XFxuICAgIHZhciB0aW1lb3V0LCBhcmdzLCBjb250ZXh0LCB0aW1lc3RhbXAsIHJlc3VsdDtcXG5cXG4gICAgdmFyIGxhdGVyID0gZnVuY3Rpb24oKSB7XFxuICAgICAgdmFyIGxhc3QgPSBfLm5vdygpIC0gdGltZXN0YW1wO1xcblxcbiAgICAgIGlmIChsYXN0IDwgd2FpdCAmJiBsYXN0ID49IDApIHtcXG4gICAgICAgIHRpbWVvdXQgPSBzZXRUaW1lb3V0KGxhdGVyLCB3YWl0IC0gbGFzdCk7XFxuICAgICAgfSBlbHNlIHtcXG4gICAgICAgIHRpbWVvdXQgPSBudWxsO1xcbiAgICAgICAgaWYgKCFpbW1lZGlhdGUpIHtcXG4gICAgICAgICAgcmVzdWx0ID0gZnVuYy5hcHBseShjb250ZXh0LCBhcmdzKTtcXG4gICAgICAgICAgaWYgKCF0aW1lb3V0KSBjb250ZXh0ID0gYXJncyA9IG51bGw7XFxuICAgICAgICB9XFxuICAgICAgfVxcbiAgICB9O1xcblxcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XFxuICAgICAgY29udGV4dCA9IHRoaXM7XFxuICAgICAgYXJncyA9IGFyZ3VtZW50cztcXG4gICAgICB0aW1lc3RhbXAgPSBfLm5vdygpO1xcbiAgICAgIHZhciBjYWxsTm93ID0gaW1tZWRpYXRlICYmICF0aW1lb3V0O1xcbiAgICAgIGlmICghdGltZW91dCkgdGltZW91dCA9IHNldFRpbWVvdXQobGF0ZXIsIHdhaXQpO1xcbiAgICAgIGlmIChjYWxsTm93KSB7XFxuICAgICAgICByZXN1bHQgPSBmdW5jLmFwcGx5KGNvbnRleHQsIGFyZ3MpO1xcbiAgICAgICAgY29udGV4dCA9IGFyZ3MgPSBudWxsO1xcbiAgICAgIH1cXG5cXG4gICAgICByZXR1cm4gcmVzdWx0O1xcbiAgICB9O1xcbiAgfTtcXG5cXG4gIC8vIFJldHVybnMgdGhlIGZpcnN0IGZ1bmN0aW9uIHBhc3NlZCBhcyBhbiBhcmd1bWVudCB0byB0aGUgc2Vjb25kLFxcbiAgLy8gYWxsb3dpbmcgeW91IHRvIGFkanVzdCBhcmd1bWVudHMsIHJ1biBjb2RlIGJlZm9yZSBhbmQgYWZ0ZXIsIGFuZFxcbiAgLy8gY29uZGl0aW9uYWxseSBleGVjdXRlIHRoZSBvcmlnaW5hbCBmdW5jdGlvbi5cXG4gIF8ud3JhcCA9IGZ1bmN0aW9uKGZ1bmMsIHdyYXBwZXIpIHtcXG4gICAgcmV0dXJuIF8ucGFydGlhbCh3cmFwcGVyLCBmdW5jKTtcXG4gIH07XFxuXFxuICAvLyBSZXR1cm5zIGEgbmVnYXRlZCB2ZXJzaW9uIG9mIHRoZSBwYXNzZWQtaW4gcHJlZGljYXRlLlxcbiAgXy5uZWdhdGUgPSBmdW5jdGlvbihwcmVkaWNhdGUpIHtcXG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xcbiAgICAgIHJldHVybiAhcHJlZGljYXRlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XFxuICAgIH07XFxuICB9O1xcblxcbiAgLy8gUmV0dXJucyBhIGZ1bmN0aW9uIHRoYXQgaXMgdGhlIGNvbXBvc2l0aW9uIG9mIGEgbGlzdCBvZiBmdW5jdGlvbnMsIGVhY2hcXG4gIC8vIGNvbnN1bWluZyB0aGUgcmV0dXJuIHZhbHVlIG9mIHRoZSBmdW5jdGlvbiB0aGF0IGZvbGxvd3MuXFxuICBfLmNvbXBvc2UgPSBmdW5jdGlvbigpIHtcXG4gICAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XFxuICAgIHZhciBzdGFydCA9IGFyZ3MubGVuZ3RoIC0gMTtcXG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xcbiAgICAgIHZhciBpID0gc3RhcnQ7XFxuICAgICAgdmFyIHJlc3VsdCA9IGFyZ3Nbc3RhcnRdLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XFxuICAgICAgd2hpbGUgKGktLSkgcmVzdWx0ID0gYXJnc1tpXS5jYWxsKHRoaXMsIHJlc3VsdCk7XFxuICAgICAgcmV0dXJuIHJlc3VsdDtcXG4gICAgfTtcXG4gIH07XFxuXFxuICAvLyBSZXR1cm5zIGEgZnVuY3Rpb24gdGhhdCB3aWxsIG9ubHkgYmUgZXhlY3V0ZWQgb24gYW5kIGFmdGVyIHRoZSBOdGggY2FsbC5cXG4gIF8uYWZ0ZXIgPSBmdW5jdGlvbih0aW1lcywgZnVuYykge1xcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XFxuICAgICAgaWYgKC0tdGltZXMgPCAxKSB7XFxuICAgICAgICByZXR1cm4gZnVuYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xcbiAgICAgIH1cXG4gICAgfTtcXG4gIH07XFxuXFxuICAvLyBSZXR1cm5zIGEgZnVuY3Rpb24gdGhhdCB3aWxsIG9ubHkgYmUgZXhlY3V0ZWQgdXAgdG8gKGJ1dCBub3QgaW5jbHVkaW5nKSB0aGUgTnRoIGNhbGwuXFxuICBfLmJlZm9yZSA9IGZ1bmN0aW9uKHRpbWVzLCBmdW5jKSB7XFxuICAgIHZhciBtZW1vO1xcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XFxuICAgICAgaWYgKC0tdGltZXMgPiAwKSB7XFxuICAgICAgICBtZW1vID0gZnVuYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xcbiAgICAgIH1cXG4gICAgICBpZiAodGltZXMgPD0gMSkgZnVuYyA9IG51bGw7XFxuICAgICAgcmV0dXJuIG1lbW87XFxuICAgIH07XFxuICB9O1xcblxcbiAgLy8gUmV0dXJucyBhIGZ1bmN0aW9uIHRoYXQgd2lsbCBiZSBleGVjdXRlZCBhdCBtb3N0IG9uZSB0aW1lLCBubyBtYXR0ZXIgaG93XFxuICAvLyBvZnRlbiB5b3UgY2FsbCBpdC4gVXNlZnVsIGZvciBsYXp5IGluaXRpYWxpemF0aW9uLlxcbiAgXy5vbmNlID0gXy5wYXJ0aWFsKF8uYmVmb3JlLCAyKTtcXG5cXG4gIC8vIE9iamVjdCBGdW5jdGlvbnNcXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS1cXG5cXG4gIC8vIEtleXMgaW4gSUUgPCA5IHRoYXQgd29uJ3QgYmUgaXRlcmF0ZWQgYnkgYGZvciBrZXkgaW4gLi4uYCBhbmQgdGh1cyBtaXNzZWQuXFxuICB2YXIgaGFzRW51bUJ1ZyA9ICF7dG9TdHJpbmc6IG51bGx9LnByb3BlcnR5SXNFbnVtZXJhYmxlKCd0b1N0cmluZycpO1xcbiAgdmFyIG5vbkVudW1lcmFibGVQcm9wcyA9IFsndmFsdWVPZicsICdpc1Byb3RvdHlwZU9mJywgJ3RvU3RyaW5nJyxcXG4gICAgICAgICAgICAgICAgICAgICAgJ3Byb3BlcnR5SXNFbnVtZXJhYmxlJywgJ2hhc093blByb3BlcnR5JywgJ3RvTG9jYWxlU3RyaW5nJ107XFxuXFxuICBmdW5jdGlvbiBjb2xsZWN0Tm9uRW51bVByb3BzKG9iaiwga2V5cykge1xcbiAgICB2YXIgbm9uRW51bUlkeCA9IG5vbkVudW1lcmFibGVQcm9wcy5sZW5ndGg7XFxuICAgIHZhciBjb25zdHJ1Y3RvciA9IG9iai5jb25zdHJ1Y3RvcjtcXG4gICAgdmFyIHByb3RvID0gKF8uaXNGdW5jdGlvbihjb25zdHJ1Y3RvcikgJiYgY29uc3RydWN0b3IucHJvdG90eXBlKSB8fCBPYmpQcm90bztcXG5cXG4gICAgLy8gQ29uc3RydWN0b3IgaXMgYSBzcGVjaWFsIGNhc2UuXFxuICAgIHZhciBwcm9wID0gJ2NvbnN0cnVjdG9yJztcXG4gICAgaWYgKF8uaGFzKG9iaiwgcHJvcCkgJiYgIV8uY29udGFpbnMoa2V5cywgcHJvcCkpIGtleXMucHVzaChwcm9wKTtcXG5cXG4gICAgd2hpbGUgKG5vbkVudW1JZHgtLSkge1xcbiAgICAgIHByb3AgPSBub25FbnVtZXJhYmxlUHJvcHNbbm9uRW51bUlkeF07XFxuICAgICAgaWYgKHByb3AgaW4gb2JqICYmIG9ialtwcm9wXSAhPT0gcHJvdG9bcHJvcF0gJiYgIV8uY29udGFpbnMoa2V5cywgcHJvcCkpIHtcXG4gICAgICAgIGtleXMucHVzaChwcm9wKTtcXG4gICAgICB9XFxuICAgIH1cXG4gIH1cXG5cXG4gIC8vIFJldHJpZXZlIHRoZSBuYW1lcyBvZiBhbiBvYmplY3QncyBvd24gcHJvcGVydGllcy5cXG4gIC8vIERlbGVnYXRlcyB0byAqKkVDTUFTY3JpcHQgNSoqJ3MgbmF0aXZlIGBPYmplY3Qua2V5c2BcXG4gIF8ua2V5cyA9IGZ1bmN0aW9uKG9iaikge1xcbiAgICBpZiAoIV8uaXNPYmplY3Qob2JqKSkgcmV0dXJuIFtdO1xcbiAgICBpZiAobmF0aXZlS2V5cykgcmV0dXJuIG5hdGl2ZUtleXMob2JqKTtcXG4gICAgdmFyIGtleXMgPSBbXTtcXG4gICAgZm9yICh2YXIga2V5IGluIG9iaikgaWYgKF8uaGFzKG9iaiwga2V5KSkga2V5cy5wdXNoKGtleSk7XFxuICAgIC8vIEFoZW0sIElFIDwgOS5cXG4gICAgaWYgKGhhc0VudW1CdWcpIGNvbGxlY3ROb25FbnVtUHJvcHMob2JqLCBrZXlzKTtcXG4gICAgcmV0dXJuIGtleXM7XFxuICB9O1xcblxcbiAgLy8gUmV0cmlldmUgYWxsIHRoZSBwcm9wZXJ0eSBuYW1lcyBvZiBhbiBvYmplY3QuXFxuICBfLmFsbEtleXMgPSBmdW5jdGlvbihvYmopIHtcXG4gICAgaWYgKCFfLmlzT2JqZWN0KG9iaikpIHJldHVybiBbXTtcXG4gICAgdmFyIGtleXMgPSBbXTtcXG4gICAgZm9yICh2YXIga2V5IGluIG9iaikga2V5cy5wdXNoKGtleSk7XFxuICAgIC8vIEFoZW0sIElFIDwgOS5cXG4gICAgaWYgKGhhc0VudW1CdWcpIGNvbGxlY3ROb25FbnVtUHJvcHMob2JqLCBrZXlzKTtcXG4gICAgcmV0dXJuIGtleXM7XFxuICB9O1xcblxcbiAgLy8gUmV0cmlldmUgdGhlIHZhbHVlcyBvZiBhbiBvYmplY3QncyBwcm9wZXJ0aWVzLlxcbiAgXy52YWx1ZXMgPSBmdW5jdGlvbihvYmopIHtcXG4gICAgdmFyIGtleXMgPSBfLmtleXMob2JqKTtcXG4gICAgdmFyIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xcbiAgICB2YXIgdmFsdWVzID0gQXJyYXkobGVuZ3RoKTtcXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xcbiAgICAgIHZhbHVlc1tpXSA9IG9ialtrZXlzW2ldXTtcXG4gICAgfVxcbiAgICByZXR1cm4gdmFsdWVzO1xcbiAgfTtcXG5cXG4gIC8vIFJldHVybnMgdGhlIHJlc3VsdHMgb2YgYXBwbHlpbmcgdGhlIGl0ZXJhdGVlIHRvIGVhY2ggZWxlbWVudCBvZiB0aGUgb2JqZWN0XFxuICAvLyBJbiBjb250cmFzdCB0byBfLm1hcCBpdCByZXR1cm5zIGFuIG9iamVjdFxcbiAgXy5tYXBPYmplY3QgPSBmdW5jdGlvbihvYmosIGl0ZXJhdGVlLCBjb250ZXh0KSB7XFxuICAgIGl0ZXJhdGVlID0gY2IoaXRlcmF0ZWUsIGNvbnRleHQpO1xcbiAgICB2YXIga2V5cyA9ICBfLmtleXMob2JqKSxcXG4gICAgICAgICAgbGVuZ3RoID0ga2V5cy5sZW5ndGgsXFxuICAgICAgICAgIHJlc3VsdHMgPSB7fSxcXG4gICAgICAgICAgY3VycmVudEtleTtcXG4gICAgICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrKSB7XFxuICAgICAgICBjdXJyZW50S2V5ID0ga2V5c1tpbmRleF07XFxuICAgICAgICByZXN1bHRzW2N1cnJlbnRLZXldID0gaXRlcmF0ZWUob2JqW2N1cnJlbnRLZXldLCBjdXJyZW50S2V5LCBvYmopO1xcbiAgICAgIH1cXG4gICAgICByZXR1cm4gcmVzdWx0cztcXG4gIH07XFxuXFxuICAvLyBDb252ZXJ0IGFuIG9iamVjdCBpbnRvIGEgbGlzdCBvZiBgW2tleSwgdmFsdWVdYCBwYWlycy5cXG4gIF8ucGFpcnMgPSBmdW5jdGlvbihvYmopIHtcXG4gICAgdmFyIGtleXMgPSBfLmtleXMob2JqKTtcXG4gICAgdmFyIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xcbiAgICB2YXIgcGFpcnMgPSBBcnJheShsZW5ndGgpO1xcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XFxuICAgICAgcGFpcnNbaV0gPSBba2V5c1tpXSwgb2JqW2tleXNbaV1dXTtcXG4gICAgfVxcbiAgICByZXR1cm4gcGFpcnM7XFxuICB9O1xcblxcbiAgLy8gSW52ZXJ0IHRoZSBrZXlzIGFuZCB2YWx1ZXMgb2YgYW4gb2JqZWN0LiBUaGUgdmFsdWVzIG11c3QgYmUgc2VyaWFsaXphYmxlLlxcbiAgXy5pbnZlcnQgPSBmdW5jdGlvbihvYmopIHtcXG4gICAgdmFyIHJlc3VsdCA9IHt9O1xcbiAgICB2YXIga2V5cyA9IF8ua2V5cyhvYmopO1xcbiAgICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0ga2V5cy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xcbiAgICAgIHJlc3VsdFtvYmpba2V5c1tpXV1dID0ga2V5c1tpXTtcXG4gICAgfVxcbiAgICByZXR1cm4gcmVzdWx0O1xcbiAgfTtcXG5cXG4gIC8vIFJldHVybiBhIHNvcnRlZCBsaXN0IG9mIHRoZSBmdW5jdGlvbiBuYW1lcyBhdmFpbGFibGUgb24gdGhlIG9iamVjdC5cXG4gIC8vIEFsaWFzZWQgYXMgYG1ldGhvZHNgXFxuICBfLmZ1bmN0aW9ucyA9IF8ubWV0aG9kcyA9IGZ1bmN0aW9uKG9iaikge1xcbiAgICB2YXIgbmFtZXMgPSBbXTtcXG4gICAgZm9yICh2YXIga2V5IGluIG9iaikge1xcbiAgICAgIGlmIChfLmlzRnVuY3Rpb24ob2JqW2tleV0pKSBuYW1lcy5wdXNoKGtleSk7XFxuICAgIH1cXG4gICAgcmV0dXJuIG5hbWVzLnNvcnQoKTtcXG4gIH07XFxuXFxuICAvLyBFeHRlbmQgYSBnaXZlbiBvYmplY3Qgd2l0aCBhbGwgdGhlIHByb3BlcnRpZXMgaW4gcGFzc2VkLWluIG9iamVjdChzKS5cXG4gIF8uZXh0ZW5kID0gY3JlYXRlQXNzaWduZXIoXy5hbGxLZXlzKTtcXG5cXG4gIC8vIEFzc2lnbnMgYSBnaXZlbiBvYmplY3Qgd2l0aCBhbGwgdGhlIG93biBwcm9wZXJ0aWVzIGluIHRoZSBwYXNzZWQtaW4gb2JqZWN0KHMpXFxuICAvLyAoaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvT2JqZWN0L2Fzc2lnbilcXG4gIF8uZXh0ZW5kT3duID0gXy5hc3NpZ24gPSBjcmVhdGVBc3NpZ25lcihfLmtleXMpO1xcblxcbiAgLy8gUmV0dXJucyB0aGUgZmlyc3Qga2V5IG9uIGFuIG9iamVjdCB0aGF0IHBhc3NlcyBhIHByZWRpY2F0ZSB0ZXN0XFxuICBfLmZpbmRLZXkgPSBmdW5jdGlvbihvYmosIHByZWRpY2F0ZSwgY29udGV4dCkge1xcbiAgICBwcmVkaWNhdGUgPSBjYihwcmVkaWNhdGUsIGNvbnRleHQpO1xcbiAgICB2YXIga2V5cyA9IF8ua2V5cyhvYmopLCBrZXk7XFxuICAgIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSBrZXlzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XFxuICAgICAga2V5ID0ga2V5c1tpXTtcXG4gICAgICBpZiAocHJlZGljYXRlKG9ialtrZXldLCBrZXksIG9iaikpIHJldHVybiBrZXk7XFxuICAgIH1cXG4gIH07XFxuXFxuICAvLyBSZXR1cm4gYSBjb3B5IG9mIHRoZSBvYmplY3Qgb25seSBjb250YWluaW5nIHRoZSB3aGl0ZWxpc3RlZCBwcm9wZXJ0aWVzLlxcbiAgXy5waWNrID0gZnVuY3Rpb24ob2JqZWN0LCBvaXRlcmF0ZWUsIGNvbnRleHQpIHtcXG4gICAgdmFyIHJlc3VsdCA9IHt9LCBvYmogPSBvYmplY3QsIGl0ZXJhdGVlLCBrZXlzO1xcbiAgICBpZiAob2JqID09IG51bGwpIHJldHVybiByZXN1bHQ7XFxuICAgIGlmIChfLmlzRnVuY3Rpb24ob2l0ZXJhdGVlKSkge1xcbiAgICAgIGtleXMgPSBfLmFsbEtleXMob2JqKTtcXG4gICAgICBpdGVyYXRlZSA9IG9wdGltaXplQ2Iob2l0ZXJhdGVlLCBjb250ZXh0KTtcXG4gICAgfSBlbHNlIHtcXG4gICAgICBrZXlzID0gZmxhdHRlbihhcmd1bWVudHMsIGZhbHNlLCBmYWxzZSwgMSk7XFxuICAgICAgaXRlcmF0ZWUgPSBmdW5jdGlvbih2YWx1ZSwga2V5LCBvYmopIHsgcmV0dXJuIGtleSBpbiBvYmo7IH07XFxuICAgICAgb2JqID0gT2JqZWN0KG9iaik7XFxuICAgIH1cXG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbmd0aCA9IGtleXMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcXG4gICAgICB2YXIga2V5ID0ga2V5c1tpXTtcXG4gICAgICB2YXIgdmFsdWUgPSBvYmpba2V5XTtcXG4gICAgICBpZiAoaXRlcmF0ZWUodmFsdWUsIGtleSwgb2JqKSkgcmVzdWx0W2tleV0gPSB2YWx1ZTtcXG4gICAgfVxcbiAgICByZXR1cm4gcmVzdWx0O1xcbiAgfTtcXG5cXG4gICAvLyBSZXR1cm4gYSBjb3B5IG9mIHRoZSBvYmplY3Qgd2l0aG91dCB0aGUgYmxhY2tsaXN0ZWQgcHJvcGVydGllcy5cXG4gIF8ub21pdCA9IGZ1bmN0aW9uKG9iaiwgaXRlcmF0ZWUsIGNvbnRleHQpIHtcXG4gICAgaWYgKF8uaXNGdW5jdGlvbihpdGVyYXRlZSkpIHtcXG4gICAgICBpdGVyYXRlZSA9IF8ubmVnYXRlKGl0ZXJhdGVlKTtcXG4gICAgfSBlbHNlIHtcXG4gICAgICB2YXIga2V5cyA9IF8ubWFwKGZsYXR0ZW4oYXJndW1lbnRzLCBmYWxzZSwgZmFsc2UsIDEpLCBTdHJpbmcpO1xcbiAgICAgIGl0ZXJhdGVlID0gZnVuY3Rpb24odmFsdWUsIGtleSkge1xcbiAgICAgICAgcmV0dXJuICFfLmNvbnRhaW5zKGtleXMsIGtleSk7XFxuICAgICAgfTtcXG4gICAgfVxcbiAgICByZXR1cm4gXy5waWNrKG9iaiwgaXRlcmF0ZWUsIGNvbnRleHQpO1xcbiAgfTtcXG5cXG4gIC8vIEZpbGwgaW4gYSBnaXZlbiBvYmplY3Qgd2l0aCBkZWZhdWx0IHByb3BlcnRpZXMuXFxuICBfLmRlZmF1bHRzID0gY3JlYXRlQXNzaWduZXIoXy5hbGxLZXlzLCB0cnVlKTtcXG5cXG4gIC8vIENyZWF0ZXMgYW4gb2JqZWN0IHRoYXQgaW5oZXJpdHMgZnJvbSB0aGUgZ2l2ZW4gcHJvdG90eXBlIG9iamVjdC5cXG4gIC8vIElmIGFkZGl0aW9uYWwgcHJvcGVydGllcyBhcmUgcHJvdmlkZWQgdGhlbiB0aGV5IHdpbGwgYmUgYWRkZWQgdG8gdGhlXFxuICAvLyBjcmVhdGVkIG9iamVjdC5cXG4gIF8uY3JlYXRlID0gZnVuY3Rpb24ocHJvdG90eXBlLCBwcm9wcykge1xcbiAgICB2YXIgcmVzdWx0ID0gYmFzZUNyZWF0ZShwcm90b3R5cGUpO1xcbiAgICBpZiAocHJvcHMpIF8uZXh0ZW5kT3duKHJlc3VsdCwgcHJvcHMpO1xcbiAgICByZXR1cm4gcmVzdWx0O1xcbiAgfTtcXG5cXG4gIC8vIENyZWF0ZSBhIChzaGFsbG93LWNsb25lZCkgZHVwbGljYXRlIG9mIGFuIG9iamVjdC5cXG4gIF8uY2xvbmUgPSBmdW5jdGlvbihvYmopIHtcXG4gICAgaWYgKCFfLmlzT2JqZWN0KG9iaikpIHJldHVybiBvYmo7XFxuICAgIHJldHVybiBfLmlzQXJyYXkob2JqKSA/IG9iai5zbGljZSgpIDogXy5leHRlbmQoe30sIG9iaik7XFxuICB9O1xcblxcbiAgLy8gSW52b2tlcyBpbnRlcmNlcHRvciB3aXRoIHRoZSBvYmosIGFuZCB0aGVuIHJldHVybnMgb2JqLlxcbiAgLy8gVGhlIHByaW1hcnkgcHVycG9zZSBvZiB0aGlzIG1ldGhvZCBpcyB0byBcXFwidGFwIGludG9cXFwiIGEgbWV0aG9kIGNoYWluLCBpblxcbiAgLy8gb3JkZXIgdG8gcGVyZm9ybSBvcGVyYXRpb25zIG9uIGludGVybWVkaWF0ZSByZXN1bHRzIHdpdGhpbiB0aGUgY2hhaW4uXFxuICBfLnRhcCA9IGZ1bmN0aW9uKG9iaiwgaW50ZXJjZXB0b3IpIHtcXG4gICAgaW50ZXJjZXB0b3Iob2JqKTtcXG4gICAgcmV0dXJuIG9iajtcXG4gIH07XFxuXFxuICAvLyBSZXR1cm5zIHdoZXRoZXIgYW4gb2JqZWN0IGhhcyBhIGdpdmVuIHNldCBvZiBga2V5OnZhbHVlYCBwYWlycy5cXG4gIF8uaXNNYXRjaCA9IGZ1bmN0aW9uKG9iamVjdCwgYXR0cnMpIHtcXG4gICAgdmFyIGtleXMgPSBfLmtleXMoYXR0cnMpLCBsZW5ndGggPSBrZXlzLmxlbmd0aDtcXG4gICAgaWYgKG9iamVjdCA9PSBudWxsKSByZXR1cm4gIWxlbmd0aDtcXG4gICAgdmFyIG9iaiA9IE9iamVjdChvYmplY3QpO1xcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XFxuICAgICAgdmFyIGtleSA9IGtleXNbaV07XFxuICAgICAgaWYgKGF0dHJzW2tleV0gIT09IG9ialtrZXldIHx8ICEoa2V5IGluIG9iaikpIHJldHVybiBmYWxzZTtcXG4gICAgfVxcbiAgICByZXR1cm4gdHJ1ZTtcXG4gIH07XFxuXFxuXFxuICAvLyBJbnRlcm5hbCByZWN1cnNpdmUgY29tcGFyaXNvbiBmdW5jdGlvbiBmb3IgYGlzRXF1YWxgLlxcbiAgdmFyIGVxID0gZnVuY3Rpb24oYSwgYiwgYVN0YWNrLCBiU3RhY2spIHtcXG4gICAgLy8gSWRlbnRpY2FsIG9iamVjdHMgYXJlIGVxdWFsLiBgMCA9PT0gLTBgLCBidXQgdGhleSBhcmVuJ3QgaWRlbnRpY2FsLlxcbiAgICAvLyBTZWUgdGhlIFtIYXJtb255IGBlZ2FsYCBwcm9wb3NhbF0oaHR0cDovL3dpa2kuZWNtYXNjcmlwdC5vcmcvZG9rdS5waHA/aWQ9aGFybW9ueTplZ2FsKS5cXG4gICAgaWYgKGEgPT09IGIpIHJldHVybiBhICE9PSAwIHx8IDEgLyBhID09PSAxIC8gYjtcXG4gICAgLy8gQSBzdHJpY3QgY29tcGFyaXNvbiBpcyBuZWNlc3NhcnkgYmVjYXVzZSBgbnVsbCA9PSB1bmRlZmluZWRgLlxcbiAgICBpZiAoYSA9PSBudWxsIHx8IGIgPT0gbnVsbCkgcmV0dXJuIGEgPT09IGI7XFxuICAgIC8vIFVud3JhcCBhbnkgd3JhcHBlZCBvYmplY3RzLlxcbiAgICBpZiAoYSBpbnN0YW5jZW9mIF8pIGEgPSBhLl93cmFwcGVkO1xcbiAgICBpZiAoYiBpbnN0YW5jZW9mIF8pIGIgPSBiLl93cmFwcGVkO1xcbiAgICAvLyBDb21wYXJlIGBbW0NsYXNzXV1gIG5hbWVzLlxcbiAgICB2YXIgY2xhc3NOYW1lID0gdG9TdHJpbmcuY2FsbChhKTtcXG4gICAgaWYgKGNsYXNzTmFtZSAhPT0gdG9TdHJpbmcuY2FsbChiKSkgcmV0dXJuIGZhbHNlO1xcbiAgICBzd2l0Y2ggKGNsYXNzTmFtZSkge1xcbiAgICAgIC8vIFN0cmluZ3MsIG51bWJlcnMsIHJlZ3VsYXIgZXhwcmVzc2lvbnMsIGRhdGVzLCBhbmQgYm9vbGVhbnMgYXJlIGNvbXBhcmVkIGJ5IHZhbHVlLlxcbiAgICAgIGNhc2UgJ1tvYmplY3QgUmVnRXhwXSc6XFxuICAgICAgLy8gUmVnRXhwcyBhcmUgY29lcmNlZCB0byBzdHJpbmdzIGZvciBjb21wYXJpc29uIChOb3RlOiAnJyArIC9hL2kgPT09ICcvYS9pJylcXG4gICAgICBjYXNlICdbb2JqZWN0IFN0cmluZ10nOlxcbiAgICAgICAgLy8gUHJpbWl0aXZlcyBhbmQgdGhlaXIgY29ycmVzcG9uZGluZyBvYmplY3Qgd3JhcHBlcnMgYXJlIGVxdWl2YWxlbnQ7IHRodXMsIGBcXFwiNVxcXCJgIGlzXFxuICAgICAgICAvLyBlcXVpdmFsZW50IHRvIGBuZXcgU3RyaW5nKFxcXCI1XFxcIilgLlxcbiAgICAgICAgcmV0dXJuICcnICsgYSA9PT0gJycgKyBiO1xcbiAgICAgIGNhc2UgJ1tvYmplY3QgTnVtYmVyXSc6XFxuICAgICAgICAvLyBgTmFOYHMgYXJlIGVxdWl2YWxlbnQsIGJ1dCBub24tcmVmbGV4aXZlLlxcbiAgICAgICAgLy8gT2JqZWN0KE5hTikgaXMgZXF1aXZhbGVudCB0byBOYU5cXG4gICAgICAgIGlmICgrYSAhPT0gK2EpIHJldHVybiArYiAhPT0gK2I7XFxuICAgICAgICAvLyBBbiBgZWdhbGAgY29tcGFyaXNvbiBpcyBwZXJmb3JtZWQgZm9yIG90aGVyIG51bWVyaWMgdmFsdWVzLlxcbiAgICAgICAgcmV0dXJuICthID09PSAwID8gMSAvICthID09PSAxIC8gYiA6ICthID09PSArYjtcXG4gICAgICBjYXNlICdbb2JqZWN0IERhdGVdJzpcXG4gICAgICBjYXNlICdbb2JqZWN0IEJvb2xlYW5dJzpcXG4gICAgICAgIC8vIENvZXJjZSBkYXRlcyBhbmQgYm9vbGVhbnMgdG8gbnVtZXJpYyBwcmltaXRpdmUgdmFsdWVzLiBEYXRlcyBhcmUgY29tcGFyZWQgYnkgdGhlaXJcXG4gICAgICAgIC8vIG1pbGxpc2Vjb25kIHJlcHJlc2VudGF0aW9ucy4gTm90ZSB0aGF0IGludmFsaWQgZGF0ZXMgd2l0aCBtaWxsaXNlY29uZCByZXByZXNlbnRhdGlvbnNcXG4gICAgICAgIC8vIG9mIGBOYU5gIGFyZSBub3QgZXF1aXZhbGVudC5cXG4gICAgICAgIHJldHVybiArYSA9PT0gK2I7XFxuICAgIH1cXG5cXG4gICAgdmFyIGFyZUFycmF5cyA9IGNsYXNzTmFtZSA9PT0gJ1tvYmplY3QgQXJyYXldJztcXG4gICAgaWYgKCFhcmVBcnJheXMpIHtcXG4gICAgICBpZiAodHlwZW9mIGEgIT0gJ29iamVjdCcgfHwgdHlwZW9mIGIgIT0gJ29iamVjdCcpIHJldHVybiBmYWxzZTtcXG5cXG4gICAgICAvLyBPYmplY3RzIHdpdGggZGlmZmVyZW50IGNvbnN0cnVjdG9ycyBhcmUgbm90IGVxdWl2YWxlbnQsIGJ1dCBgT2JqZWN0YHMgb3IgYEFycmF5YHNcXG4gICAgICAvLyBmcm9tIGRpZmZlcmVudCBmcmFtZXMgYXJlLlxcbiAgICAgIHZhciBhQ3RvciA9IGEuY29uc3RydWN0b3IsIGJDdG9yID0gYi5jb25zdHJ1Y3RvcjtcXG4gICAgICBpZiAoYUN0b3IgIT09IGJDdG9yICYmICEoXy5pc0Z1bmN0aW9uKGFDdG9yKSAmJiBhQ3RvciBpbnN0YW5jZW9mIGFDdG9yICYmXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8uaXNGdW5jdGlvbihiQ3RvcikgJiYgYkN0b3IgaW5zdGFuY2VvZiBiQ3RvcilcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICYmICgnY29uc3RydWN0b3InIGluIGEgJiYgJ2NvbnN0cnVjdG9yJyBpbiBiKSkge1xcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xcbiAgICAgIH1cXG4gICAgfVxcbiAgICAvLyBBc3N1bWUgZXF1YWxpdHkgZm9yIGN5Y2xpYyBzdHJ1Y3R1cmVzLiBUaGUgYWxnb3JpdGhtIGZvciBkZXRlY3RpbmcgY3ljbGljXFxuICAgIC8vIHN0cnVjdHVyZXMgaXMgYWRhcHRlZCBmcm9tIEVTIDUuMSBzZWN0aW9uIDE1LjEyLjMsIGFic3RyYWN0IG9wZXJhdGlvbiBgSk9gLlxcblxcbiAgICAvLyBJbml0aWFsaXppbmcgc3RhY2sgb2YgdHJhdmVyc2VkIG9iamVjdHMuXFxuICAgIC8vIEl0J3MgZG9uZSBoZXJlIHNpbmNlIHdlIG9ubHkgbmVlZCB0aGVtIGZvciBvYmplY3RzIGFuZCBhcnJheXMgY29tcGFyaXNvbi5cXG4gICAgYVN0YWNrID0gYVN0YWNrIHx8IFtdO1xcbiAgICBiU3RhY2sgPSBiU3RhY2sgfHwgW107XFxuICAgIHZhciBsZW5ndGggPSBhU3RhY2subGVuZ3RoO1xcbiAgICB3aGlsZSAobGVuZ3RoLS0pIHtcXG4gICAgICAvLyBMaW5lYXIgc2VhcmNoLiBQZXJmb3JtYW5jZSBpcyBpbnZlcnNlbHkgcHJvcG9ydGlvbmFsIHRvIHRoZSBudW1iZXIgb2ZcXG4gICAgICAvLyB1bmlxdWUgbmVzdGVkIHN0cnVjdHVyZXMuXFxuICAgICAgaWYgKGFTdGFja1tsZW5ndGhdID09PSBhKSByZXR1cm4gYlN0YWNrW2xlbmd0aF0gPT09IGI7XFxuICAgIH1cXG5cXG4gICAgLy8gQWRkIHRoZSBmaXJzdCBvYmplY3QgdG8gdGhlIHN0YWNrIG9mIHRyYXZlcnNlZCBvYmplY3RzLlxcbiAgICBhU3RhY2sucHVzaChhKTtcXG4gICAgYlN0YWNrLnB1c2goYik7XFxuXFxuICAgIC8vIFJlY3Vyc2l2ZWx5IGNvbXBhcmUgb2JqZWN0cyBhbmQgYXJyYXlzLlxcbiAgICBpZiAoYXJlQXJyYXlzKSB7XFxuICAgICAgLy8gQ29tcGFyZSBhcnJheSBsZW5ndGhzIHRvIGRldGVybWluZSBpZiBhIGRlZXAgY29tcGFyaXNvbiBpcyBuZWNlc3NhcnkuXFxuICAgICAgbGVuZ3RoID0gYS5sZW5ndGg7XFxuICAgICAgaWYgKGxlbmd0aCAhPT0gYi5sZW5ndGgpIHJldHVybiBmYWxzZTtcXG4gICAgICAvLyBEZWVwIGNvbXBhcmUgdGhlIGNvbnRlbnRzLCBpZ25vcmluZyBub24tbnVtZXJpYyBwcm9wZXJ0aWVzLlxcbiAgICAgIHdoaWxlIChsZW5ndGgtLSkge1xcbiAgICAgICAgaWYgKCFlcShhW2xlbmd0aF0sIGJbbGVuZ3RoXSwgYVN0YWNrLCBiU3RhY2spKSByZXR1cm4gZmFsc2U7XFxuICAgICAgfVxcbiAgICB9IGVsc2Uge1xcbiAgICAgIC8vIERlZXAgY29tcGFyZSBvYmplY3RzLlxcbiAgICAgIHZhciBrZXlzID0gXy5rZXlzKGEpLCBrZXk7XFxuICAgICAgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XFxuICAgICAgLy8gRW5zdXJlIHRoYXQgYm90aCBvYmplY3RzIGNvbnRhaW4gdGhlIHNhbWUgbnVtYmVyIG9mIHByb3BlcnRpZXMgYmVmb3JlIGNvbXBhcmluZyBkZWVwIGVxdWFsaXR5LlxcbiAgICAgIGlmIChfLmtleXMoYikubGVuZ3RoICE9PSBsZW5ndGgpIHJldHVybiBmYWxzZTtcXG4gICAgICB3aGlsZSAobGVuZ3RoLS0pIHtcXG4gICAgICAgIC8vIERlZXAgY29tcGFyZSBlYWNoIG1lbWJlclxcbiAgICAgICAga2V5ID0ga2V5c1tsZW5ndGhdO1xcbiAgICAgICAgaWYgKCEoXy5oYXMoYiwga2V5KSAmJiBlcShhW2tleV0sIGJba2V5XSwgYVN0YWNrLCBiU3RhY2spKSkgcmV0dXJuIGZhbHNlO1xcbiAgICAgIH1cXG4gICAgfVxcbiAgICAvLyBSZW1vdmUgdGhlIGZpcnN0IG9iamVjdCBmcm9tIHRoZSBzdGFjayBvZiB0cmF2ZXJzZWQgb2JqZWN0cy5cXG4gICAgYVN0YWNrLnBvcCgpO1xcbiAgICBiU3RhY2sucG9wKCk7XFxuICAgIHJldHVybiB0cnVlO1xcbiAgfTtcXG5cXG4gIC8vIFBlcmZvcm0gYSBkZWVwIGNvbXBhcmlzb24gdG8gY2hlY2sgaWYgdHdvIG9iamVjdHMgYXJlIGVxdWFsLlxcbiAgXy5pc0VxdWFsID0gZnVuY3Rpb24oYSwgYikge1xcbiAgICByZXR1cm4gZXEoYSwgYik7XFxuICB9O1xcblxcbiAgLy8gSXMgYSBnaXZlbiBhcnJheSwgc3RyaW5nLCBvciBvYmplY3QgZW1wdHk/XFxuICAvLyBBbiBcXFwiZW1wdHlcXFwiIG9iamVjdCBoYXMgbm8gZW51bWVyYWJsZSBvd24tcHJvcGVydGllcy5cXG4gIF8uaXNFbXB0eSA9IGZ1bmN0aW9uKG9iaikge1xcbiAgICBpZiAob2JqID09IG51bGwpIHJldHVybiB0cnVlO1xcbiAgICBpZiAoaXNBcnJheUxpa2Uob2JqKSAmJiAoXy5pc0FycmF5KG9iaikgfHwgXy5pc1N0cmluZyhvYmopIHx8IF8uaXNBcmd1bWVudHMob2JqKSkpIHJldHVybiBvYmoubGVuZ3RoID09PSAwO1xcbiAgICByZXR1cm4gXy5rZXlzKG9iaikubGVuZ3RoID09PSAwO1xcbiAgfTtcXG5cXG4gIC8vIElzIGEgZ2l2ZW4gdmFsdWUgYSBET00gZWxlbWVudD9cXG4gIF8uaXNFbGVtZW50ID0gZnVuY3Rpb24ob2JqKSB7XFxuICAgIHJldHVybiAhIShvYmogJiYgb2JqLm5vZGVUeXBlID09PSAxKTtcXG4gIH07XFxuXFxuICAvLyBJcyBhIGdpdmVuIHZhbHVlIGFuIGFycmF5P1xcbiAgLy8gRGVsZWdhdGVzIHRvIEVDTUE1J3MgbmF0aXZlIEFycmF5LmlzQXJyYXlcXG4gIF8uaXNBcnJheSA9IG5hdGl2ZUlzQXJyYXkgfHwgZnVuY3Rpb24ob2JqKSB7XFxuICAgIHJldHVybiB0b1N0cmluZy5jYWxsKG9iaikgPT09ICdbb2JqZWN0IEFycmF5XSc7XFxuICB9O1xcblxcbiAgLy8gSXMgYSBnaXZlbiB2YXJpYWJsZSBhbiBvYmplY3Q/XFxuICBfLmlzT2JqZWN0ID0gZnVuY3Rpb24ob2JqKSB7XFxuICAgIHZhciB0eXBlID0gdHlwZW9mIG9iajtcXG4gICAgcmV0dXJuIHR5cGUgPT09ICdmdW5jdGlvbicgfHwgdHlwZSA9PT0gJ29iamVjdCcgJiYgISFvYmo7XFxuICB9O1xcblxcbiAgLy8gQWRkIHNvbWUgaXNUeXBlIG1ldGhvZHM6IGlzQXJndW1lbnRzLCBpc0Z1bmN0aW9uLCBpc1N0cmluZywgaXNOdW1iZXIsIGlzRGF0ZSwgaXNSZWdFeHAsIGlzRXJyb3IuXFxuICBfLmVhY2goWydBcmd1bWVudHMnLCAnRnVuY3Rpb24nLCAnU3RyaW5nJywgJ051bWJlcicsICdEYXRlJywgJ1JlZ0V4cCcsICdFcnJvciddLCBmdW5jdGlvbihuYW1lKSB7XFxuICAgIF9bJ2lzJyArIG5hbWVdID0gZnVuY3Rpb24ob2JqKSB7XFxuICAgICAgcmV0dXJuIHRvU3RyaW5nLmNhbGwob2JqKSA9PT0gJ1tvYmplY3QgJyArIG5hbWUgKyAnXSc7XFxuICAgIH07XFxuICB9KTtcXG5cXG4gIC8vIERlZmluZSBhIGZhbGxiYWNrIHZlcnNpb24gb2YgdGhlIG1ldGhvZCBpbiBicm93c2VycyAoYWhlbSwgSUUgPCA5KSwgd2hlcmVcXG4gIC8vIHRoZXJlIGlzbid0IGFueSBpbnNwZWN0YWJsZSBcXFwiQXJndW1lbnRzXFxcIiB0eXBlLlxcbiAgaWYgKCFfLmlzQXJndW1lbnRzKGFyZ3VtZW50cykpIHtcXG4gICAgXy5pc0FyZ3VtZW50cyA9IGZ1bmN0aW9uKG9iaikge1xcbiAgICAgIHJldHVybiBfLmhhcyhvYmosICdjYWxsZWUnKTtcXG4gICAgfTtcXG4gIH1cXG5cXG4gIC8vIE9wdGltaXplIGBpc0Z1bmN0aW9uYCBpZiBhcHByb3ByaWF0ZS4gV29yayBhcm91bmQgc29tZSB0eXBlb2YgYnVncyBpbiBvbGQgdjgsXFxuICAvLyBJRSAxMSAoIzE2MjEpLCBhbmQgaW4gU2FmYXJpIDggKCMxOTI5KS5cXG4gIGlmICh0eXBlb2YgLy4vICE9ICdmdW5jdGlvbicgJiYgdHlwZW9mIEludDhBcnJheSAhPSAnb2JqZWN0Jykge1xcbiAgICBfLmlzRnVuY3Rpb24gPSBmdW5jdGlvbihvYmopIHtcXG4gICAgICByZXR1cm4gdHlwZW9mIG9iaiA9PSAnZnVuY3Rpb24nIHx8IGZhbHNlO1xcbiAgICB9O1xcbiAgfVxcblxcbiAgLy8gSXMgYSBnaXZlbiBvYmplY3QgYSBmaW5pdGUgbnVtYmVyP1xcbiAgXy5pc0Zpbml0ZSA9IGZ1bmN0aW9uKG9iaikge1xcbiAgICByZXR1cm4gaXNGaW5pdGUob2JqKSAmJiAhaXNOYU4ocGFyc2VGbG9hdChvYmopKTtcXG4gIH07XFxuXFxuICAvLyBJcyB0aGUgZ2l2ZW4gdmFsdWUgYE5hTmA/IChOYU4gaXMgdGhlIG9ubHkgbnVtYmVyIHdoaWNoIGRvZXMgbm90IGVxdWFsIGl0c2VsZikuXFxuICBfLmlzTmFOID0gZnVuY3Rpb24ob2JqKSB7XFxuICAgIHJldHVybiBfLmlzTnVtYmVyKG9iaikgJiYgb2JqICE9PSArb2JqO1xcbiAgfTtcXG5cXG4gIC8vIElzIGEgZ2l2ZW4gdmFsdWUgYSBib29sZWFuP1xcbiAgXy5pc0Jvb2xlYW4gPSBmdW5jdGlvbihvYmopIHtcXG4gICAgcmV0dXJuIG9iaiA9PT0gdHJ1ZSB8fCBvYmogPT09IGZhbHNlIHx8IHRvU3RyaW5nLmNhbGwob2JqKSA9PT0gJ1tvYmplY3QgQm9vbGVhbl0nO1xcbiAgfTtcXG5cXG4gIC8vIElzIGEgZ2l2ZW4gdmFsdWUgZXF1YWwgdG8gbnVsbD9cXG4gIF8uaXNOdWxsID0gZnVuY3Rpb24ob2JqKSB7XFxuICAgIHJldHVybiBvYmogPT09IG51bGw7XFxuICB9O1xcblxcbiAgLy8gSXMgYSBnaXZlbiB2YXJpYWJsZSB1bmRlZmluZWQ/XFxuICBfLmlzVW5kZWZpbmVkID0gZnVuY3Rpb24ob2JqKSB7XFxuICAgIHJldHVybiBvYmogPT09IHZvaWQgMDtcXG4gIH07XFxuXFxuICAvLyBTaG9ydGN1dCBmdW5jdGlvbiBmb3IgY2hlY2tpbmcgaWYgYW4gb2JqZWN0IGhhcyBhIGdpdmVuIHByb3BlcnR5IGRpcmVjdGx5XFxuICAvLyBvbiBpdHNlbGYgKGluIG90aGVyIHdvcmRzLCBub3Qgb24gYSBwcm90b3R5cGUpLlxcbiAgXy5oYXMgPSBmdW5jdGlvbihvYmosIGtleSkge1xcbiAgICByZXR1cm4gb2JqICE9IG51bGwgJiYgaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSk7XFxuICB9O1xcblxcbiAgLy8gVXRpbGl0eSBGdW5jdGlvbnNcXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tXFxuXFxuICAvLyBSdW4gVW5kZXJzY29yZS5qcyBpbiAqbm9Db25mbGljdCogbW9kZSwgcmV0dXJuaW5nIHRoZSBgX2AgdmFyaWFibGUgdG8gaXRzXFxuICAvLyBwcmV2aW91cyBvd25lci4gUmV0dXJucyBhIHJlZmVyZW5jZSB0byB0aGUgVW5kZXJzY29yZSBvYmplY3QuXFxuICBfLm5vQ29uZmxpY3QgPSBmdW5jdGlvbigpIHtcXG4gICAgcm9vdC5fID0gcHJldmlvdXNVbmRlcnNjb3JlO1xcbiAgICByZXR1cm4gdGhpcztcXG4gIH07XFxuXFxuICAvLyBLZWVwIHRoZSBpZGVudGl0eSBmdW5jdGlvbiBhcm91bmQgZm9yIGRlZmF1bHQgaXRlcmF0ZWVzLlxcbiAgXy5pZGVudGl0eSA9IGZ1bmN0aW9uKHZhbHVlKSB7XFxuICAgIHJldHVybiB2YWx1ZTtcXG4gIH07XFxuXFxuICAvLyBQcmVkaWNhdGUtZ2VuZXJhdGluZyBmdW5jdGlvbnMuIE9mdGVuIHVzZWZ1bCBvdXRzaWRlIG9mIFVuZGVyc2NvcmUuXFxuICBfLmNvbnN0YW50ID0gZnVuY3Rpb24odmFsdWUpIHtcXG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xcbiAgICAgIHJldHVybiB2YWx1ZTtcXG4gICAgfTtcXG4gIH07XFxuXFxuICBfLm5vb3AgPSBmdW5jdGlvbigpe307XFxuXFxuICBfLnByb3BlcnR5ID0gcHJvcGVydHk7XFxuXFxuICAvLyBHZW5lcmF0ZXMgYSBmdW5jdGlvbiBmb3IgYSBnaXZlbiBvYmplY3QgdGhhdCByZXR1cm5zIGEgZ2l2ZW4gcHJvcGVydHkuXFxuICBfLnByb3BlcnR5T2YgPSBmdW5jdGlvbihvYmopIHtcXG4gICAgcmV0dXJuIG9iaiA9PSBudWxsID8gZnVuY3Rpb24oKXt9IDogZnVuY3Rpb24oa2V5KSB7XFxuICAgICAgcmV0dXJuIG9ialtrZXldO1xcbiAgICB9O1xcbiAgfTtcXG5cXG4gIC8vIFJldHVybnMgYSBwcmVkaWNhdGUgZm9yIGNoZWNraW5nIHdoZXRoZXIgYW4gb2JqZWN0IGhhcyBhIGdpdmVuIHNldCBvZlxcbiAgLy8gYGtleTp2YWx1ZWAgcGFpcnMuXFxuICBfLm1hdGNoZXIgPSBfLm1hdGNoZXMgPSBmdW5jdGlvbihhdHRycykge1xcbiAgICBhdHRycyA9IF8uZXh0ZW5kT3duKHt9LCBhdHRycyk7XFxuICAgIHJldHVybiBmdW5jdGlvbihvYmopIHtcXG4gICAgICByZXR1cm4gXy5pc01hdGNoKG9iaiwgYXR0cnMpO1xcbiAgICB9O1xcbiAgfTtcXG5cXG4gIC8vIFJ1biBhIGZ1bmN0aW9uICoqbioqIHRpbWVzLlxcbiAgXy50aW1lcyA9IGZ1bmN0aW9uKG4sIGl0ZXJhdGVlLCBjb250ZXh0KSB7XFxuICAgIHZhciBhY2N1bSA9IEFycmF5KE1hdGgubWF4KDAsIG4pKTtcXG4gICAgaXRlcmF0ZWUgPSBvcHRpbWl6ZUNiKGl0ZXJhdGVlLCBjb250ZXh0LCAxKTtcXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBuOyBpKyspIGFjY3VtW2ldID0gaXRlcmF0ZWUoaSk7XFxuICAgIHJldHVybiBhY2N1bTtcXG4gIH07XFxuXFxuICAvLyBSZXR1cm4gYSByYW5kb20gaW50ZWdlciBiZXR3ZWVuIG1pbiBhbmQgbWF4IChpbmNsdXNpdmUpLlxcbiAgXy5yYW5kb20gPSBmdW5jdGlvbihtaW4sIG1heCkge1xcbiAgICBpZiAobWF4ID09IG51bGwpIHtcXG4gICAgICBtYXggPSBtaW47XFxuICAgICAgbWluID0gMDtcXG4gICAgfVxcbiAgICByZXR1cm4gbWluICsgTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKG1heCAtIG1pbiArIDEpKTtcXG4gIH07XFxuXFxuICAvLyBBIChwb3NzaWJseSBmYXN0ZXIpIHdheSB0byBnZXQgdGhlIGN1cnJlbnQgdGltZXN0YW1wIGFzIGFuIGludGVnZXIuXFxuICBfLm5vdyA9IERhdGUubm93IHx8IGZ1bmN0aW9uKCkge1xcbiAgICByZXR1cm4gbmV3IERhdGUoKS5nZXRUaW1lKCk7XFxuICB9O1xcblxcbiAgIC8vIExpc3Qgb2YgSFRNTCBlbnRpdGllcyBmb3IgZXNjYXBpbmcuXFxuICB2YXIgZXNjYXBlTWFwID0ge1xcbiAgICAnJic6ICcmYW1wOycsXFxuICAgICc8JzogJyZsdDsnLFxcbiAgICAnPic6ICcmZ3Q7JyxcXG4gICAgJ1xcXCInOiAnJnF1b3Q7JyxcXG4gICAgXFxcIidcXFwiOiAnJiN4Mjc7JyxcXG4gICAgJ2AnOiAnJiN4NjA7J1xcbiAgfTtcXG4gIHZhciB1bmVzY2FwZU1hcCA9IF8uaW52ZXJ0KGVzY2FwZU1hcCk7XFxuXFxuICAvLyBGdW5jdGlvbnMgZm9yIGVzY2FwaW5nIGFuZCB1bmVzY2FwaW5nIHN0cmluZ3MgdG8vZnJvbSBIVE1MIGludGVycG9sYXRpb24uXFxuICB2YXIgY3JlYXRlRXNjYXBlciA9IGZ1bmN0aW9uKG1hcCkge1xcbiAgICB2YXIgZXNjYXBlciA9IGZ1bmN0aW9uKG1hdGNoKSB7XFxuICAgICAgcmV0dXJuIG1hcFttYXRjaF07XFxuICAgIH07XFxuICAgIC8vIFJlZ2V4ZXMgZm9yIGlkZW50aWZ5aW5nIGEga2V5IHRoYXQgbmVlZHMgdG8gYmUgZXNjYXBlZFxcbiAgICB2YXIgc291cmNlID0gJyg/OicgKyBfLmtleXMobWFwKS5qb2luKCd8JykgKyAnKSc7XFxuICAgIHZhciB0ZXN0UmVnZXhwID0gUmVnRXhwKHNvdXJjZSk7XFxuICAgIHZhciByZXBsYWNlUmVnZXhwID0gUmVnRXhwKHNvdXJjZSwgJ2cnKTtcXG4gICAgcmV0dXJuIGZ1bmN0aW9uKHN0cmluZykge1xcbiAgICAgIHN0cmluZyA9IHN0cmluZyA9PSBudWxsID8gJycgOiAnJyArIHN0cmluZztcXG4gICAgICByZXR1cm4gdGVzdFJlZ2V4cC50ZXN0KHN0cmluZykgPyBzdHJpbmcucmVwbGFjZShyZXBsYWNlUmVnZXhwLCBlc2NhcGVyKSA6IHN0cmluZztcXG4gICAgfTtcXG4gIH07XFxuICBfLmVzY2FwZSA9IGNyZWF0ZUVzY2FwZXIoZXNjYXBlTWFwKTtcXG4gIF8udW5lc2NhcGUgPSBjcmVhdGVFc2NhcGVyKHVuZXNjYXBlTWFwKTtcXG5cXG4gIC8vIElmIHRoZSB2YWx1ZSBvZiB0aGUgbmFtZWQgYHByb3BlcnR5YCBpcyBhIGZ1bmN0aW9uIHRoZW4gaW52b2tlIGl0IHdpdGggdGhlXFxuICAvLyBgb2JqZWN0YCBhcyBjb250ZXh0OyBvdGhlcndpc2UsIHJldHVybiBpdC5cXG4gIF8ucmVzdWx0ID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSwgZmFsbGJhY2spIHtcXG4gICAgdmFyIHZhbHVlID0gb2JqZWN0ID09IG51bGwgPyB2b2lkIDAgOiBvYmplY3RbcHJvcGVydHldO1xcbiAgICBpZiAodmFsdWUgPT09IHZvaWQgMCkge1xcbiAgICAgIHZhbHVlID0gZmFsbGJhY2s7XFxuICAgIH1cXG4gICAgcmV0dXJuIF8uaXNGdW5jdGlvbih2YWx1ZSkgPyB2YWx1ZS5jYWxsKG9iamVjdCkgOiB2YWx1ZTtcXG4gIH07XFxuXFxuICAvLyBHZW5lcmF0ZSBhIHVuaXF1ZSBpbnRlZ2VyIGlkICh1bmlxdWUgd2l0aGluIHRoZSBlbnRpcmUgY2xpZW50IHNlc3Npb24pLlxcbiAgLy8gVXNlZnVsIGZvciB0ZW1wb3JhcnkgRE9NIGlkcy5cXG4gIHZhciBpZENvdW50ZXIgPSAwO1xcbiAgXy51bmlxdWVJZCA9IGZ1bmN0aW9uKHByZWZpeCkge1xcbiAgICB2YXIgaWQgPSArK2lkQ291bnRlciArICcnO1xcbiAgICByZXR1cm4gcHJlZml4ID8gcHJlZml4ICsgaWQgOiBpZDtcXG4gIH07XFxuXFxuICAvLyBCeSBkZWZhdWx0LCBVbmRlcnNjb3JlIHVzZXMgRVJCLXN0eWxlIHRlbXBsYXRlIGRlbGltaXRlcnMsIGNoYW5nZSB0aGVcXG4gIC8vIGZvbGxvd2luZyB0ZW1wbGF0ZSBzZXR0aW5ncyB0byB1c2UgYWx0ZXJuYXRpdmUgZGVsaW1pdGVycy5cXG4gIF8udGVtcGxhdGVTZXR0aW5ncyA9IHtcXG4gICAgZXZhbHVhdGUgICAgOiAvPCUoW1xcXFxzXFxcXFNdKz8pJT4vZyxcXG4gICAgaW50ZXJwb2xhdGUgOiAvPCU9KFtcXFxcc1xcXFxTXSs/KSU+L2csXFxuICAgIGVzY2FwZSAgICAgIDogLzwlLShbXFxcXHNcXFxcU10rPyklPi9nXFxuICB9O1xcblxcbiAgLy8gV2hlbiBjdXN0b21pemluZyBgdGVtcGxhdGVTZXR0aW5nc2AsIGlmIHlvdSBkb24ndCB3YW50IHRvIGRlZmluZSBhblxcbiAgLy8gaW50ZXJwb2xhdGlvbiwgZXZhbHVhdGlvbiBvciBlc2NhcGluZyByZWdleCwgd2UgbmVlZCBvbmUgdGhhdCBpc1xcbiAgLy8gZ3VhcmFudGVlZCBub3QgdG8gbWF0Y2guXFxuICB2YXIgbm9NYXRjaCA9IC8oLileLztcXG5cXG4gIC8vIENlcnRhaW4gY2hhcmFjdGVycyBuZWVkIHRvIGJlIGVzY2FwZWQgc28gdGhhdCB0aGV5IGNhbiBiZSBwdXQgaW50byBhXFxuICAvLyBzdHJpbmcgbGl0ZXJhbC5cXG4gIHZhciBlc2NhcGVzID0ge1xcbiAgICBcXFwiJ1xcXCI6ICAgICAgXFxcIidcXFwiLFxcbiAgICAnXFxcXFxcXFwnOiAgICAgJ1xcXFxcXFxcJyxcXG4gICAgJ1xcXFxyJzogICAgICdyJyxcXG4gICAgJ1xcXFxuJzogICAgICduJyxcXG4gICAgJ1xcXFx1MjAyOCc6ICd1MjAyOCcsXFxuICAgICdcXFxcdTIwMjknOiAndTIwMjknXFxuICB9O1xcblxcbiAgdmFyIGVzY2FwZXIgPSAvXFxcXFxcXFx8J3xcXFxccnxcXFxcbnxcXFxcdTIwMjh8XFxcXHUyMDI5L2c7XFxuXFxuICB2YXIgZXNjYXBlQ2hhciA9IGZ1bmN0aW9uKG1hdGNoKSB7XFxuICAgIHJldHVybiAnXFxcXFxcXFwnICsgZXNjYXBlc1ttYXRjaF07XFxuICB9O1xcblxcbiAgLy8gSmF2YVNjcmlwdCBtaWNyby10ZW1wbGF0aW5nLCBzaW1pbGFyIHRvIEpvaG4gUmVzaWcncyBpbXBsZW1lbnRhdGlvbi5cXG4gIC8vIFVuZGVyc2NvcmUgdGVtcGxhdGluZyBoYW5kbGVzIGFyYml0cmFyeSBkZWxpbWl0ZXJzLCBwcmVzZXJ2ZXMgd2hpdGVzcGFjZSxcXG4gIC8vIGFuZCBjb3JyZWN0bHkgZXNjYXBlcyBxdW90ZXMgd2l0aGluIGludGVycG9sYXRlZCBjb2RlLlxcbiAgLy8gTkI6IGBvbGRTZXR0aW5nc2Agb25seSBleGlzdHMgZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5LlxcbiAgXy50ZW1wbGF0ZSA9IGZ1bmN0aW9uKHRleHQsIHNldHRpbmdzLCBvbGRTZXR0aW5ncykge1xcbiAgICBpZiAoIXNldHRpbmdzICYmIG9sZFNldHRpbmdzKSBzZXR0aW5ncyA9IG9sZFNldHRpbmdzO1xcbiAgICBzZXR0aW5ncyA9IF8uZGVmYXVsdHMoe30sIHNldHRpbmdzLCBfLnRlbXBsYXRlU2V0dGluZ3MpO1xcblxcbiAgICAvLyBDb21iaW5lIGRlbGltaXRlcnMgaW50byBvbmUgcmVndWxhciBleHByZXNzaW9uIHZpYSBhbHRlcm5hdGlvbi5cXG4gICAgdmFyIG1hdGNoZXIgPSBSZWdFeHAoW1xcbiAgICAgIChzZXR0aW5ncy5lc2NhcGUgfHwgbm9NYXRjaCkuc291cmNlLFxcbiAgICAgIChzZXR0aW5ncy5pbnRlcnBvbGF0ZSB8fCBub01hdGNoKS5zb3VyY2UsXFxuICAgICAgKHNldHRpbmdzLmV2YWx1YXRlIHx8IG5vTWF0Y2gpLnNvdXJjZVxcbiAgICBdLmpvaW4oJ3wnKSArICd8JCcsICdnJyk7XFxuXFxuICAgIC8vIENvbXBpbGUgdGhlIHRlbXBsYXRlIHNvdXJjZSwgZXNjYXBpbmcgc3RyaW5nIGxpdGVyYWxzIGFwcHJvcHJpYXRlbHkuXFxuICAgIHZhciBpbmRleCA9IDA7XFxuICAgIHZhciBzb3VyY2UgPSBcXFwiX19wKz0nXFxcIjtcXG4gICAgdGV4dC5yZXBsYWNlKG1hdGNoZXIsIGZ1bmN0aW9uKG1hdGNoLCBlc2NhcGUsIGludGVycG9sYXRlLCBldmFsdWF0ZSwgb2Zmc2V0KSB7XFxuICAgICAgc291cmNlICs9IHRleHQuc2xpY2UoaW5kZXgsIG9mZnNldCkucmVwbGFjZShlc2NhcGVyLCBlc2NhcGVDaGFyKTtcXG4gICAgICBpbmRleCA9IG9mZnNldCArIG1hdGNoLmxlbmd0aDtcXG5cXG4gICAgICBpZiAoZXNjYXBlKSB7XFxuICAgICAgICBzb3VyY2UgKz0gXFxcIicrXFxcXG4oKF9fdD0oXFxcIiArIGVzY2FwZSArIFxcXCIpKT09bnVsbD8nJzpfLmVzY2FwZShfX3QpKStcXFxcbidcXFwiO1xcbiAgICAgIH0gZWxzZSBpZiAoaW50ZXJwb2xhdGUpIHtcXG4gICAgICAgIHNvdXJjZSArPSBcXFwiJytcXFxcbigoX190PShcXFwiICsgaW50ZXJwb2xhdGUgKyBcXFwiKSk9PW51bGw/Jyc6X190KStcXFxcbidcXFwiO1xcbiAgICAgIH0gZWxzZSBpZiAoZXZhbHVhdGUpIHtcXG4gICAgICAgIHNvdXJjZSArPSBcXFwiJztcXFxcblxcXCIgKyBldmFsdWF0ZSArIFxcXCJcXFxcbl9fcCs9J1xcXCI7XFxuICAgICAgfVxcblxcbiAgICAgIC8vIEFkb2JlIFZNcyBuZWVkIHRoZSBtYXRjaCByZXR1cm5lZCB0byBwcm9kdWNlIHRoZSBjb3JyZWN0IG9mZmVzdC5cXG4gICAgICByZXR1cm4gbWF0Y2g7XFxuICAgIH0pO1xcbiAgICBzb3VyY2UgKz0gXFxcIic7XFxcXG5cXFwiO1xcblxcbiAgICAvLyBJZiBhIHZhcmlhYmxlIGlzIG5vdCBzcGVjaWZpZWQsIHBsYWNlIGRhdGEgdmFsdWVzIGluIGxvY2FsIHNjb3BlLlxcbiAgICBpZiAoIXNldHRpbmdzLnZhcmlhYmxlKSBzb3VyY2UgPSAnd2l0aChvYmp8fHt9KXtcXFxcbicgKyBzb3VyY2UgKyAnfVxcXFxuJztcXG5cXG4gICAgc291cmNlID0gXFxcInZhciBfX3QsX19wPScnLF9faj1BcnJheS5wcm90b3R5cGUuam9pbixcXFwiICtcXG4gICAgICBcXFwicHJpbnQ9ZnVuY3Rpb24oKXtfX3ArPV9fai5jYWxsKGFyZ3VtZW50cywnJyk7fTtcXFxcblxcXCIgK1xcbiAgICAgIHNvdXJjZSArICdyZXR1cm4gX19wO1xcXFxuJztcXG5cXG4gICAgdHJ5IHtcXG4gICAgICB2YXIgcmVuZGVyID0gbmV3IEZ1bmN0aW9uKHNldHRpbmdzLnZhcmlhYmxlIHx8ICdvYmonLCAnXycsIHNvdXJjZSk7XFxuICAgIH0gY2F0Y2ggKGUpIHtcXG4gICAgICBlLnNvdXJjZSA9IHNvdXJjZTtcXG4gICAgICB0aHJvdyBlO1xcbiAgICB9XFxuXFxuICAgIHZhciB0ZW1wbGF0ZSA9IGZ1bmN0aW9uKGRhdGEpIHtcXG4gICAgICByZXR1cm4gcmVuZGVyLmNhbGwodGhpcywgZGF0YSwgXyk7XFxuICAgIH07XFxuXFxuICAgIC8vIFByb3ZpZGUgdGhlIGNvbXBpbGVkIHNvdXJjZSBhcyBhIGNvbnZlbmllbmNlIGZvciBwcmVjb21waWxhdGlvbi5cXG4gICAgdmFyIGFyZ3VtZW50ID0gc2V0dGluZ3MudmFyaWFibGUgfHwgJ29iaic7XFxuICAgIHRlbXBsYXRlLnNvdXJjZSA9ICdmdW5jdGlvbignICsgYXJndW1lbnQgKyAnKXtcXFxcbicgKyBzb3VyY2UgKyAnfSc7XFxuXFxuICAgIHJldHVybiB0ZW1wbGF0ZTtcXG4gIH07XFxuXFxuICAvLyBBZGQgYSBcXFwiY2hhaW5cXFwiIGZ1bmN0aW9uLiBTdGFydCBjaGFpbmluZyBhIHdyYXBwZWQgVW5kZXJzY29yZSBvYmplY3QuXFxuICBfLmNoYWluID0gZnVuY3Rpb24ob2JqKSB7XFxuICAgIHZhciBpbnN0YW5jZSA9IF8ob2JqKTtcXG4gICAgaW5zdGFuY2UuX2NoYWluID0gdHJ1ZTtcXG4gICAgcmV0dXJuIGluc3RhbmNlO1xcbiAgfTtcXG5cXG4gIC8vIE9PUFxcbiAgLy8gLS0tLS0tLS0tLS0tLS0tXFxuICAvLyBJZiBVbmRlcnNjb3JlIGlzIGNhbGxlZCBhcyBhIGZ1bmN0aW9uLCBpdCByZXR1cm5zIGEgd3JhcHBlZCBvYmplY3QgdGhhdFxcbiAgLy8gY2FuIGJlIHVzZWQgT08tc3R5bGUuIFRoaXMgd3JhcHBlciBob2xkcyBhbHRlcmVkIHZlcnNpb25zIG9mIGFsbCB0aGVcXG4gIC8vIHVuZGVyc2NvcmUgZnVuY3Rpb25zLiBXcmFwcGVkIG9iamVjdHMgbWF5IGJlIGNoYWluZWQuXFxuXFxuICAvLyBIZWxwZXIgZnVuY3Rpb24gdG8gY29udGludWUgY2hhaW5pbmcgaW50ZXJtZWRpYXRlIHJlc3VsdHMuXFxuICB2YXIgcmVzdWx0ID0gZnVuY3Rpb24oaW5zdGFuY2UsIG9iaikge1xcbiAgICByZXR1cm4gaW5zdGFuY2UuX2NoYWluID8gXyhvYmopLmNoYWluKCkgOiBvYmo7XFxuICB9O1xcblxcbiAgLy8gQWRkIHlvdXIgb3duIGN1c3RvbSBmdW5jdGlvbnMgdG8gdGhlIFVuZGVyc2NvcmUgb2JqZWN0LlxcbiAgXy5taXhpbiA9IGZ1bmN0aW9uKG9iaikge1xcbiAgICBfLmVhY2goXy5mdW5jdGlvbnMob2JqKSwgZnVuY3Rpb24obmFtZSkge1xcbiAgICAgIHZhciBmdW5jID0gX1tuYW1lXSA9IG9ialtuYW1lXTtcXG4gICAgICBfLnByb3RvdHlwZVtuYW1lXSA9IGZ1bmN0aW9uKCkge1xcbiAgICAgICAgdmFyIGFyZ3MgPSBbdGhpcy5fd3JhcHBlZF07XFxuICAgICAgICBwdXNoLmFwcGx5KGFyZ3MsIGFyZ3VtZW50cyk7XFxuICAgICAgICByZXR1cm4gcmVzdWx0KHRoaXMsIGZ1bmMuYXBwbHkoXywgYXJncykpO1xcbiAgICAgIH07XFxuICAgIH0pO1xcbiAgfTtcXG5cXG4gIC8vIEFkZCBhbGwgb2YgdGhlIFVuZGVyc2NvcmUgZnVuY3Rpb25zIHRvIHRoZSB3cmFwcGVyIG9iamVjdC5cXG4gIF8ubWl4aW4oXyk7XFxuXFxuICAvLyBBZGQgYWxsIG11dGF0b3IgQXJyYXkgZnVuY3Rpb25zIHRvIHRoZSB3cmFwcGVyLlxcbiAgXy5lYWNoKFsncG9wJywgJ3B1c2gnLCAncmV2ZXJzZScsICdzaGlmdCcsICdzb3J0JywgJ3NwbGljZScsICd1bnNoaWZ0J10sIGZ1bmN0aW9uKG5hbWUpIHtcXG4gICAgdmFyIG1ldGhvZCA9IEFycmF5UHJvdG9bbmFtZV07XFxuICAgIF8ucHJvdG90eXBlW25hbWVdID0gZnVuY3Rpb24oKSB7XFxuICAgICAgdmFyIG9iaiA9IHRoaXMuX3dyYXBwZWQ7XFxuICAgICAgbWV0aG9kLmFwcGx5KG9iaiwgYXJndW1lbnRzKTtcXG4gICAgICBpZiAoKG5hbWUgPT09ICdzaGlmdCcgfHwgbmFtZSA9PT0gJ3NwbGljZScpICYmIG9iai5sZW5ndGggPT09IDApIGRlbGV0ZSBvYmpbMF07XFxuICAgICAgcmV0dXJuIHJlc3VsdCh0aGlzLCBvYmopO1xcbiAgICB9O1xcbiAgfSk7XFxuXFxuICAvLyBBZGQgYWxsIGFjY2Vzc29yIEFycmF5IGZ1bmN0aW9ucyB0byB0aGUgd3JhcHBlci5cXG4gIF8uZWFjaChbJ2NvbmNhdCcsICdqb2luJywgJ3NsaWNlJ10sIGZ1bmN0aW9uKG5hbWUpIHtcXG4gICAgdmFyIG1ldGhvZCA9IEFycmF5UHJvdG9bbmFtZV07XFxuICAgIF8ucHJvdG90eXBlW25hbWVdID0gZnVuY3Rpb24oKSB7XFxuICAgICAgcmV0dXJuIHJlc3VsdCh0aGlzLCBtZXRob2QuYXBwbHkodGhpcy5fd3JhcHBlZCwgYXJndW1lbnRzKSk7XFxuICAgIH07XFxuICB9KTtcXG5cXG4gIC8vIEV4dHJhY3RzIHRoZSByZXN1bHQgZnJvbSBhIHdyYXBwZWQgYW5kIGNoYWluZWQgb2JqZWN0LlxcbiAgXy5wcm90b3R5cGUudmFsdWUgPSBmdW5jdGlvbigpIHtcXG4gICAgcmV0dXJuIHRoaXMuX3dyYXBwZWQ7XFxuICB9O1xcblxcbiAgLy8gUHJvdmlkZSB1bndyYXBwaW5nIHByb3h5IGZvciBzb21lIG1ldGhvZHMgdXNlZCBpbiBlbmdpbmUgb3BlcmF0aW9uc1xcbiAgLy8gc3VjaCBhcyBhcml0aG1ldGljIGFuZCBKU09OIHN0cmluZ2lmaWNhdGlvbi5cXG4gIF8ucHJvdG90eXBlLnZhbHVlT2YgPSBfLnByb3RvdHlwZS50b0pTT04gPSBfLnByb3RvdHlwZS52YWx1ZTtcXG5cXG4gIF8ucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XFxuICAgIHJldHVybiAnJyArIHRoaXMuX3dyYXBwZWQ7XFxuICB9O1xcblxcbiAgLy8gQU1EIHJlZ2lzdHJhdGlvbiBoYXBwZW5zIGF0IHRoZSBlbmQgZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBBTUQgbG9hZGVyc1xcbiAgLy8gdGhhdCBtYXkgbm90IGVuZm9yY2UgbmV4dC10dXJuIHNlbWFudGljcyBvbiBtb2R1bGVzLiBFdmVuIHRob3VnaCBnZW5lcmFsXFxuICAvLyBwcmFjdGljZSBmb3IgQU1EIHJlZ2lzdHJhdGlvbiBpcyB0byBiZSBhbm9ueW1vdXMsIHVuZGVyc2NvcmUgcmVnaXN0ZXJzXFxuICAvLyBhcyBhIG5hbWVkIG1vZHVsZSBiZWNhdXNlLCBsaWtlIGpRdWVyeSwgaXQgaXMgYSBiYXNlIGxpYnJhcnkgdGhhdCBpc1xcbiAgLy8gcG9wdWxhciBlbm91Z2ggdG8gYmUgYnVuZGxlZCBpbiBhIHRoaXJkIHBhcnR5IGxpYiwgYnV0IG5vdCBiZSBwYXJ0IG9mXFxuICAvLyBhbiBBTUQgbG9hZCByZXF1ZXN0LiBUaG9zZSBjYXNlcyBjb3VsZCBnZW5lcmF0ZSBhbiBlcnJvciB3aGVuIGFuXFxuICAvLyBhbm9ueW1vdXMgZGVmaW5lKCkgaXMgY2FsbGVkIG91dHNpZGUgb2YgYSBsb2FkZXIgcmVxdWVzdC5cXG4gIGlmICh0cnVlKSB7XFxuICAgICEoX19XRUJQQUNLX0FNRF9ERUZJTkVfQVJSQVlfXyA9IFtdLCBfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXyA9IGZ1bmN0aW9uKCkge1xcbiAgICAgIHJldHVybiBfO1xcbiAgICB9LmFwcGx5KGV4cG9ydHMsIF9fV0VCUEFDS19BTURfREVGSU5FX0FSUkFZX18pLFxcblxcdFxcdFxcdFxcdF9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fICE9PSB1bmRlZmluZWQgJiYgKG1vZHVsZS5leHBvcnRzID0gX19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX18pKTtcXG4gIH1cXG59LmNhbGwodGhpcykpO1xcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pTkM1cWN5SXNJbk52ZFhKalpYTWlPbHNpZDJWaWNHRmphem92THk4dUwzNHZkVzVrWlhKelkyOXlaUzkxYm1SbGNuTmpiM0psTG1welB6TXhZVFVpWFN3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaUx5OGdJQ0FnSUZWdVpHVnljMk52Y21VdWFuTWdNUzQ0TGpOY2JpOHZJQ0FnSUNCb2RIUndPaTh2ZFc1a1pYSnpZMjl5WldwekxtOXlaMXh1THk4Z0lDQWdJQ2hqS1NBeU1EQTVMVEl3TVRVZ1NtVnlaVzE1SUVGemFHdGxibUZ6TENCRWIyTjFiV1Z1ZEVOc2IzVmtJR0Z1WkNCSmJuWmxjM1JwWjJGMGFYWmxJRkpsY0c5eWRHVnljeUFtSUVWa2FYUnZjbk5jYmk4dklDQWdJQ0JWYm1SbGNuTmpiM0psSUcxaGVTQmlaU0JtY21WbGJIa2daR2x6ZEhKcFluVjBaV1FnZFc1a1pYSWdkR2hsSUUxSlZDQnNhV05sYm5ObExseHVYRzRvWm5WdVkzUnBiMjRvS1NCN1hHNWNiaUFnTHk4Z1FtRnpaV3hwYm1VZ2MyVjBkWEJjYmlBZ0x5OGdMUzB0TFMwdExTMHRMUzB0TFMxY2JseHVJQ0F2THlCRmMzUmhZbXhwYzJnZ2RHaGxJSEp2YjNRZ2IySnFaV04wTENCZ2QybHVaRzkzWUNCcGJpQjBhR1VnWW5KdmQzTmxjaXdnYjNJZ1lHVjRjRzl5ZEhOZ0lHOXVJSFJvWlNCelpYSjJaWEl1WEc0Z0lIWmhjaUJ5YjI5MElEMGdkR2hwY3p0Y2JseHVJQ0F2THlCVFlYWmxJSFJvWlNCd2NtVjJhVzkxY3lCMllXeDFaU0J2WmlCMGFHVWdZRjlnSUhaaGNtbGhZbXhsTGx4dUlDQjJZWElnY0hKbGRtbHZkWE5WYm1SbGNuTmpiM0psSUQwZ2NtOXZkQzVmTzF4dVhHNGdJQzh2SUZOaGRtVWdZbmwwWlhNZ2FXNGdkR2hsSUcxcGJtbG1hV1ZrSUNoaWRYUWdibTkwSUdkNmFYQndaV1FwSUhabGNuTnBiMjQ2WEc0Z0lIWmhjaUJCY25KaGVWQnliM1J2SUQwZ1FYSnlZWGt1Y0hKdmRHOTBlWEJsTENCUFltcFFjbTkwYnlBOUlFOWlhbVZqZEM1d2NtOTBiM1I1Y0dVc0lFWjFibU5RY205MGJ5QTlJRVoxYm1OMGFXOXVMbkJ5YjNSdmRIbHdaVHRjYmx4dUlDQXZMeUJEY21WaGRHVWdjWFZwWTJzZ2NtVm1aWEpsYm1ObElIWmhjbWxoWW14bGN5Qm1iM0lnYzNCbFpXUWdZV05qWlhOeklIUnZJR052Y21VZ2NISnZkRzkwZVhCbGN5NWNiaUFnZG1GeVhHNGdJQ0FnY0hWemFDQWdJQ0FnSUNBZ0lDQWdJQ0E5SUVGeWNtRjVVSEp2ZEc4dWNIVnphQ3hjYmlBZ0lDQnpiR2xqWlNBZ0lDQWdJQ0FnSUNBZ0lEMGdRWEp5WVhsUWNtOTBieTV6YkdsalpTeGNiaUFnSUNCMGIxTjBjbWx1WnlBZ0lDQWdJQ0FnSUQwZ1QySnFVSEp2ZEc4dWRHOVRkSEpwYm1jc1hHNGdJQ0FnYUdGelQzZHVVSEp2Y0dWeWRIa2dJQ0E5SUU5aWFsQnliM1J2TG1oaGMwOTNibEJ5YjNCbGNuUjVPMXh1WEc0Z0lDOHZJRUZzYkNBcUtrVkRUVUZUWTNKcGNIUWdOU29xSUc1aGRHbDJaU0JtZFc1amRHbHZiaUJwYlhCc1pXMWxiblJoZEdsdmJuTWdkR2hoZENCM1pTQm9iM0JsSUhSdklIVnpaVnh1SUNBdkx5QmhjbVVnWkdWamJHRnlaV1FnYUdWeVpTNWNiaUFnZG1GeVhHNGdJQ0FnYm1GMGFYWmxTWE5CY25KaGVTQWdJQ0FnSUQwZ1FYSnlZWGt1YVhOQmNuSmhlU3hjYmlBZ0lDQnVZWFJwZG1WTFpYbHpJQ0FnSUNBZ0lDQWdQU0JQWW1wbFkzUXVhMlY1Y3l4Y2JpQWdJQ0J1WVhScGRtVkNhVzVrSUNBZ0lDQWdJQ0FnUFNCR2RXNWpVSEp2ZEc4dVltbHVaQ3hjYmlBZ0lDQnVZWFJwZG1WRGNtVmhkR1VnSUNBZ0lDQWdQU0JQWW1wbFkzUXVZM0psWVhSbE8xeHVYRzRnSUM4dklFNWhhMlZrSUdaMWJtTjBhVzl1SUhKbFptVnlaVzVqWlNCbWIzSWdjM1Z5Y205bllYUmxMWEJ5YjNSdmRIbHdaUzF6ZDJGd2NHbHVaeTVjYmlBZ2RtRnlJRU4wYjNJZ1BTQm1kVzVqZEdsdmJpZ3BlMzA3WEc1Y2JpQWdMeThnUTNKbFlYUmxJR0VnYzJGbVpTQnlaV1psY21WdVkyVWdkRzhnZEdobElGVnVaR1Z5YzJOdmNtVWdiMkpxWldOMElHWnZjaUIxYzJVZ1ltVnNiM2N1WEc0Z0lIWmhjaUJmSUQwZ1puVnVZM1JwYjI0b2IySnFLU0I3WEc0Z0lDQWdhV1lnS0c5aWFpQnBibk4wWVc1alpXOW1JRjhwSUhKbGRIVnliaUJ2WW1vN1hHNGdJQ0FnYVdZZ0tDRW9kR2hwY3lCcGJuTjBZVzVqWlc5bUlGOHBLU0J5WlhSMWNtNGdibVYzSUY4b2IySnFLVHRjYmlBZ0lDQjBhR2x6TGw5M2NtRndjR1ZrSUQwZ2IySnFPMXh1SUNCOU8xeHVYRzRnSUM4dklFVjRjRzl5ZENCMGFHVWdWVzVrWlhKelkyOXlaU0J2WW1wbFkzUWdabTl5SUNvcVRtOWtaUzVxY3lvcUxDQjNhWFJvWEc0Z0lDOHZJR0poWTJ0M1lYSmtjeTFqYjIxd1lYUnBZbWxzYVhSNUlHWnZjaUIwYUdVZ2IyeGtJR0J5WlhGMWFYSmxLQ2xnSUVGUVNTNGdTV1lnZDJVbmNtVWdhVzVjYmlBZ0x5OGdkR2hsSUdKeWIzZHpaWElzSUdGa1pDQmdYMkFnWVhNZ1lTQm5iRzlpWVd3Z2IySnFaV04wTGx4dUlDQnBaaUFvZEhsd1pXOW1JR1Y0Y0c5eWRITWdJVDA5SUNkMWJtUmxabWx1WldRbktTQjdYRzRnSUNBZ2FXWWdLSFI1Y0dWdlppQnRiMlIxYkdVZ0lUMDlJQ2QxYm1SbFptbHVaV1FuSUNZbUlHMXZaSFZzWlM1bGVIQnZjblJ6S1NCN1hHNGdJQ0FnSUNCbGVIQnZjblJ6SUQwZ2JXOWtkV3hsTG1WNGNHOXlkSE1nUFNCZk8xeHVJQ0FnSUgxY2JpQWdJQ0JsZUhCdmNuUnpMbDhnUFNCZk8xeHVJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lISnZiM1F1WHlBOUlGODdYRzRnSUgxY2JseHVJQ0F2THlCRGRYSnlaVzUwSUhabGNuTnBiMjR1WEc0Z0lGOHVWa1ZTVTBsUFRpQTlJQ2N4TGpndU15YzdYRzVjYmlBZ0x5OGdTVzUwWlhKdVlXd2dablZ1WTNScGIyNGdkR2hoZENCeVpYUjFjbTV6SUdGdUlHVm1abWxqYVdWdWRDQW9abTl5SUdOMWNuSmxiblFnWlc1bmFXNWxjeWtnZG1WeWMybHZibHh1SUNBdkx5QnZaaUIwYUdVZ2NHRnpjMlZrTFdsdUlHTmhiR3hpWVdOckxDQjBieUJpWlNCeVpYQmxZWFJsWkd4NUlHRndjR3hwWldRZ2FXNGdiM1JvWlhJZ1ZXNWtaWEp6WTI5eVpWeHVJQ0F2THlCbWRXNWpkR2x2Ym5NdVhHNGdJSFpoY2lCdmNIUnBiV2w2WlVOaUlEMGdablZ1WTNScGIyNG9ablZ1WXl3Z1kyOXVkR1Y0ZEN3Z1lYSm5RMjkxYm5RcElIdGNiaUFnSUNCcFppQW9ZMjl1ZEdWNGRDQTlQVDBnZG05cFpDQXdLU0J5WlhSMWNtNGdablZ1WXp0Y2JpQWdJQ0J6ZDJsMFkyZ2dLR0Z5WjBOdmRXNTBJRDA5SUc1MWJHd2dQeUF6SURvZ1lYSm5RMjkxYm5RcElIdGNiaUFnSUNBZ0lHTmhjMlVnTVRvZ2NtVjBkWEp1SUdaMWJtTjBhVzl1S0haaGJIVmxLU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJtZFc1akxtTmhiR3dvWTI5dWRHVjRkQ3dnZG1Gc2RXVXBPMXh1SUNBZ0lDQWdmVHRjYmlBZ0lDQWdJR05oYzJVZ01qb2djbVYwZFhKdUlHWjFibU4wYVc5dUtIWmhiSFZsTENCdmRHaGxjaWtnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnWm5WdVl5NWpZV3hzS0dOdmJuUmxlSFFzSUhaaGJIVmxMQ0J2ZEdobGNpazdYRzRnSUNBZ0lDQjlPMXh1SUNBZ0lDQWdZMkZ6WlNBek9pQnlaWFIxY200Z1puVnVZM1JwYjI0b2RtRnNkV1VzSUdsdVpHVjRMQ0JqYjJ4c1pXTjBhVzl1S1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCbWRXNWpMbU5oYkd3b1kyOXVkR1Y0ZEN3Z2RtRnNkV1VzSUdsdVpHVjRMQ0JqYjJ4c1pXTjBhVzl1S1R0Y2JpQWdJQ0FnSUgwN1hHNGdJQ0FnSUNCallYTmxJRFE2SUhKbGRIVnliaUJtZFc1amRHbHZiaWhoWTJOMWJYVnNZWFJ2Y2l3Z2RtRnNkV1VzSUdsdVpHVjRMQ0JqYjJ4c1pXTjBhVzl1S1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCbWRXNWpMbU5oYkd3b1kyOXVkR1Y0ZEN3Z1lXTmpkVzExYkdGMGIzSXNJSFpoYkhWbExDQnBibVJsZUN3Z1kyOXNiR1ZqZEdsdmJpazdYRzRnSUNBZ0lDQjlPMXh1SUNBZ0lIMWNiaUFnSUNCeVpYUjFjbTRnWm5WdVkzUnBiMjRvS1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnWm5WdVl5NWhjSEJzZVNoamIyNTBaWGgwTENCaGNtZDFiV1Z1ZEhNcE8xeHVJQ0FnSUgwN1hHNGdJSDA3WEc1Y2JpQWdMeThnUVNCdGIzTjBiSGt0YVc1MFpYSnVZV3dnWm5WdVkzUnBiMjRnZEc4Z1oyVnVaWEpoZEdVZ1kyRnNiR0poWTJ0eklIUm9ZWFFnWTJGdUlHSmxJR0Z3Y0d4cFpXUmNiaUFnTHk4Z2RHOGdaV0ZqYUNCbGJHVnRaVzUwSUdsdUlHRWdZMjlzYkdWamRHbHZiaXdnY21WMGRYSnVhVzVuSUhSb1pTQmtaWE5wY21Wa0lISmxjM1ZzZENEaWdKUWdaV2wwYUdWeVhHNGdJQzh2SUdsa1pXNTBhWFI1TENCaGJpQmhjbUpwZEhKaGNua2dZMkZzYkdKaFkyc3NJR0VnY0hKdmNHVnlkSGtnYldGMFkyaGxjaXdnYjNJZ1lTQndjbTl3WlhKMGVTQmhZMk5sYzNOdmNpNWNiaUFnZG1GeUlHTmlJRDBnWm5WdVkzUnBiMjRvZG1Gc2RXVXNJR052Ym5SbGVIUXNJR0Z5WjBOdmRXNTBLU0I3WEc0Z0lDQWdhV1lnS0haaGJIVmxJRDA5SUc1MWJHd3BJSEpsZEhWeWJpQmZMbWxrWlc1MGFYUjVPMXh1SUNBZ0lHbG1JQ2hmTG1selJuVnVZM1JwYjI0b2RtRnNkV1VwS1NCeVpYUjFjbTRnYjNCMGFXMXBlbVZEWWloMllXeDFaU3dnWTI5dWRHVjRkQ3dnWVhKblEyOTFiblFwTzF4dUlDQWdJR2xtSUNoZkxtbHpUMkpxWldOMEtIWmhiSFZsS1NrZ2NtVjBkWEp1SUY4dWJXRjBZMmhsY2loMllXeDFaU2s3WEc0Z0lDQWdjbVYwZFhKdUlGOHVjSEp2Y0dWeWRIa29kbUZzZFdVcE8xeHVJQ0I5TzF4dUlDQmZMbWwwWlhKaGRHVmxJRDBnWm5WdVkzUnBiMjRvZG1Gc2RXVXNJR052Ym5SbGVIUXBJSHRjYmlBZ0lDQnlaWFIxY200Z1kySW9kbUZzZFdVc0lHTnZiblJsZUhRc0lFbHVabWx1YVhSNUtUdGNiaUFnZlR0Y2JseHVJQ0F2THlCQmJpQnBiblJsY201aGJDQm1kVzVqZEdsdmJpQm1iM0lnWTNKbFlYUnBibWNnWVhOemFXZHVaWElnWm5WdVkzUnBiMjV6TGx4dUlDQjJZWElnWTNKbFlYUmxRWE56YVdkdVpYSWdQU0JtZFc1amRHbHZiaWhyWlhselJuVnVZeXdnZFc1a1pXWnBibVZrVDI1c2VTa2dlMXh1SUNBZ0lISmxkSFZ5YmlCbWRXNWpkR2x2Ymlodlltb3BJSHRjYmlBZ0lDQWdJSFpoY2lCc1pXNW5kR2dnUFNCaGNtZDFiV1Z1ZEhNdWJHVnVaM1JvTzF4dUlDQWdJQ0FnYVdZZ0tHeGxibWQwYUNBOElESWdmSHdnYjJKcUlEMDlJRzUxYkd3cElISmxkSFZ5YmlCdlltbzdYRzRnSUNBZ0lDQm1iM0lnS0haaGNpQnBibVJsZUNBOUlERTdJR2x1WkdWNElEd2diR1Z1WjNSb095QnBibVJsZUNzcktTQjdYRzRnSUNBZ0lDQWdJSFpoY2lCemIzVnlZMlVnUFNCaGNtZDFiV1Z1ZEhOYmFXNWtaWGhkTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdhMlY1Y3lBOUlHdGxlWE5HZFc1aktITnZkWEpqWlNrc1hHNGdJQ0FnSUNBZ0lDQWdJQ0JzSUQwZ2EyVjVjeTVzWlc1bmRHZzdYRzRnSUNBZ0lDQWdJR1p2Y2lBb2RtRnlJR2tnUFNBd095QnBJRHdnYkRzZ2FTc3JLU0I3WEc0Z0lDQWdJQ0FnSUNBZ2RtRnlJR3RsZVNBOUlHdGxlWE5iYVYwN1hHNGdJQ0FnSUNBZ0lDQWdhV1lnS0NGMWJtUmxabWx1WldSUGJteDVJSHg4SUc5aWFsdHJaWGxkSUQwOVBTQjJiMmxrSURBcElHOWlhbHRyWlhsZElEMGdjMjkxY21ObFcydGxlVjA3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUgxY2JpQWdJQ0FnSUhKbGRIVnliaUJ2WW1vN1hHNGdJQ0FnZlR0Y2JpQWdmVHRjYmx4dUlDQXZMeUJCYmlCcGJuUmxjbTVoYkNCbWRXNWpkR2x2YmlCbWIzSWdZM0psWVhScGJtY2dZU0J1WlhjZ2IySnFaV04wSUhSb1lYUWdhVzVvWlhKcGRITWdabkp2YlNCaGJtOTBhR1Z5TGx4dUlDQjJZWElnWW1GelpVTnlaV0YwWlNBOUlHWjFibU4wYVc5dUtIQnliM1J2ZEhsd1pTa2dlMXh1SUNBZ0lHbG1JQ2doWHk1cGMwOWlhbVZqZENod2NtOTBiM1I1Y0dVcEtTQnlaWFIxY200Z2UzMDdYRzRnSUNBZ2FXWWdLRzVoZEdsMlpVTnlaV0YwWlNrZ2NtVjBkWEp1SUc1aGRHbDJaVU55WldGMFpTaHdjbTkwYjNSNWNHVXBPMXh1SUNBZ0lFTjBiM0l1Y0hKdmRHOTBlWEJsSUQwZ2NISnZkRzkwZVhCbE8xeHVJQ0FnSUhaaGNpQnlaWE4xYkhRZ1BTQnVaWGNnUTNSdmNqdGNiaUFnSUNCRGRHOXlMbkJ5YjNSdmRIbHdaU0E5SUc1MWJHdzdYRzRnSUNBZ2NtVjBkWEp1SUhKbGMzVnNkRHRjYmlBZ2ZUdGNibHh1SUNCMllYSWdjSEp2Y0dWeWRIa2dQU0JtZFc1amRHbHZiaWhyWlhrcElIdGNiaUFnSUNCeVpYUjFjbTRnWm5WdVkzUnBiMjRvYjJKcUtTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z2IySnFJRDA5SUc1MWJHd2dQeUIyYjJsa0lEQWdPaUJ2WW1wYmEyVjVYVHRjYmlBZ0lDQjlPMXh1SUNCOU8xeHVYRzRnSUM4dklFaGxiSEJsY2lCbWIzSWdZMjlzYkdWamRHbHZiaUJ0WlhSb2IyUnpJSFJ2SUdSbGRHVnliV2x1WlNCM2FHVjBhR1Z5SUdFZ1kyOXNiR1ZqZEdsdmJseHVJQ0F2THlCemFHOTFiR1FnWW1VZ2FYUmxjbUYwWldRZ1lYTWdZVzRnWVhKeVlYa2diM0lnWVhNZ1lXNGdiMkpxWldOMFhHNGdJQzh2SUZKbGJHRjBaV1E2SUdoMGRIQTZMeTl3Wlc5d2JHVXViVzk2YVd4c1lTNXZjbWN2Zm1wdmNtVnVaRzl5Wm1ZdlpYTTJMV1J5WVdaMExtaDBiV3dqYzJWakxYUnZiR1Z1WjNSb1hHNGdJQzh2SUVGMmIybGtjeUJoSUhabGNua2dibUZ6ZEhrZ2FVOVRJRGdnU2tsVUlHSjFaeUJ2YmlCQlVrMHROalF1SUNNeU1EazBYRzRnSUhaaGNpQk5RVmhmUVZKU1FWbGZTVTVFUlZnZ1BTQk5ZWFJvTG5CdmR5Z3lMQ0ExTXlrZ0xTQXhPMXh1SUNCMllYSWdaMlYwVEdWdVozUm9JRDBnY0hKdmNHVnlkSGtvSjJ4bGJtZDBhQ2NwTzF4dUlDQjJZWElnYVhOQmNuSmhlVXhwYTJVZ1BTQm1kVzVqZEdsdmJpaGpiMnhzWldOMGFXOXVLU0I3WEc0Z0lDQWdkbUZ5SUd4bGJtZDBhQ0E5SUdkbGRFeGxibWQwYUNoamIyeHNaV04wYVc5dUtUdGNiaUFnSUNCeVpYUjFjbTRnZEhsd1pXOW1JR3hsYm1kMGFDQTlQU0FuYm5WdFltVnlKeUFtSmlCc1pXNW5kR2dnUGowZ01DQW1KaUJzWlc1bmRHZ2dQRDBnVFVGWVgwRlNVa0ZaWDBsT1JFVllPMXh1SUNCOU8xeHVYRzRnSUM4dklFTnZiR3hsWTNScGIyNGdSblZ1WTNScGIyNXpYRzRnSUM4dklDMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRYRzVjYmlBZ0x5OGdWR2hsSUdOdmNtNWxjbk4wYjI1bExDQmhiaUJnWldGamFHQWdhVzF3YkdWdFpXNTBZWFJwYjI0c0lHRnJZU0JnWm05eVJXRmphR0F1WEc0Z0lDOHZJRWhoYm1Sc1pYTWdjbUYzSUc5aWFtVmpkSE1nYVc0Z1lXUmthWFJwYjI0Z2RHOGdZWEp5WVhrdGJHbHJaWE11SUZSeVpXRjBjeUJoYkd4Y2JpQWdMeThnYzNCaGNuTmxJR0Z5Y21GNUxXeHBhMlZ6SUdGeklHbG1JSFJvWlhrZ2QyVnlaU0JrWlc1elpTNWNiaUFnWHk1bFlXTm9JRDBnWHk1bWIzSkZZV05vSUQwZ1puVnVZM1JwYjI0b2IySnFMQ0JwZEdWeVlYUmxaU3dnWTI5dWRHVjRkQ2tnZTF4dUlDQWdJR2wwWlhKaGRHVmxJRDBnYjNCMGFXMXBlbVZEWWlocGRHVnlZWFJsWlN3Z1kyOXVkR1Y0ZENrN1hHNGdJQ0FnZG1GeUlHa3NJR3hsYm1kMGFEdGNiaUFnSUNCcFppQW9hWE5CY25KaGVVeHBhMlVvYjJKcUtTa2dlMXh1SUNBZ0lDQWdabTl5SUNocElEMGdNQ3dnYkdWdVozUm9JRDBnYjJKcUxteGxibWQwYURzZ2FTQThJR3hsYm1kMGFEc2dhU3NyS1NCN1hHNGdJQ0FnSUNBZ0lHbDBaWEpoZEdWbEtHOWlhbHRwWFN3Z2FTd2diMkpxS1R0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdkbUZ5SUd0bGVYTWdQU0JmTG10bGVYTW9iMkpxS1R0Y2JpQWdJQ0FnSUdadmNpQW9hU0E5SURBc0lHeGxibWQwYUNBOUlHdGxlWE11YkdWdVozUm9PeUJwSUR3Z2JHVnVaM1JvT3lCcEt5c3BJSHRjYmlBZ0lDQWdJQ0FnYVhSbGNtRjBaV1VvYjJKcVcydGxlWE5iYVYxZExDQnJaWGx6VzJsZExDQnZZbW9wTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJSDFjYmlBZ0lDQnlaWFIxY200Z2IySnFPMXh1SUNCOU8xeHVYRzRnSUM4dklGSmxkSFZ5YmlCMGFHVWdjbVZ6ZFd4MGN5QnZaaUJoY0hCc2VXbHVaeUIwYUdVZ2FYUmxjbUYwWldVZ2RHOGdaV0ZqYUNCbGJHVnRaVzUwTGx4dUlDQmZMbTFoY0NBOUlGOHVZMjlzYkdWamRDQTlJR1oxYm1OMGFXOXVLRzlpYWl3Z2FYUmxjbUYwWldVc0lHTnZiblJsZUhRcElIdGNiaUFnSUNCcGRHVnlZWFJsWlNBOUlHTmlLR2wwWlhKaGRHVmxMQ0JqYjI1MFpYaDBLVHRjYmlBZ0lDQjJZWElnYTJWNWN5QTlJQ0ZwYzBGeWNtRjVUR2xyWlNodlltb3BJQ1ltSUY4dWEyVjVjeWh2WW1vcExGeHVJQ0FnSUNBZ0lDQnNaVzVuZEdnZ1BTQW9hMlY1Y3lCOGZDQnZZbW9wTG14bGJtZDBhQ3hjYmlBZ0lDQWdJQ0FnY21WemRXeDBjeUE5SUVGeWNtRjVLR3hsYm1kMGFDazdYRzRnSUNBZ1ptOXlJQ2gyWVhJZ2FXNWtaWGdnUFNBd095QnBibVJsZUNBOElHeGxibWQwYURzZ2FXNWtaWGdyS3lrZ2UxeHVJQ0FnSUNBZ2RtRnlJR04xY25KbGJuUkxaWGtnUFNCclpYbHpJRDhnYTJWNWMxdHBibVJsZUYwZ09pQnBibVJsZUR0Y2JpQWdJQ0FnSUhKbGMzVnNkSE5iYVc1a1pYaGRJRDBnYVhSbGNtRjBaV1VvYjJKcVcyTjFjbkpsYm5STFpYbGRMQ0JqZFhKeVpXNTBTMlY1TENCdlltb3BPMXh1SUNBZ0lIMWNiaUFnSUNCeVpYUjFjbTRnY21WemRXeDBjenRjYmlBZ2ZUdGNibHh1SUNBdkx5QkRjbVZoZEdVZ1lTQnlaV1IxWTJsdVp5Qm1kVzVqZEdsdmJpQnBkR1Z5WVhScGJtY2diR1ZtZENCdmNpQnlhV2RvZEM1Y2JpQWdablZ1WTNScGIyNGdZM0psWVhSbFVtVmtkV05sS0dScGNpa2dlMXh1SUNBZ0lDOHZJRTl3ZEdsdGFYcGxaQ0JwZEdWeVlYUnZjaUJtZFc1amRHbHZiaUJoY3lCMWMybHVaeUJoY21kMWJXVnVkSE11YkdWdVozUm9YRzRnSUNBZ0x5OGdhVzRnZEdobElHMWhhVzRnWm5WdVkzUnBiMjRnZDJsc2JDQmtaVzl3ZEdsdGFYcGxJSFJvWlN3Z2MyVmxJQ014T1RreExseHVJQ0FnSUdaMWJtTjBhVzl1SUdsMFpYSmhkRzl5S0c5aWFpd2dhWFJsY21GMFpXVXNJRzFsYlc4c0lHdGxlWE1zSUdsdVpHVjRMQ0JzWlc1bmRHZ3BJSHRjYmlBZ0lDQWdJR1p2Y2lBb095QnBibVJsZUNBK1BTQXdJQ1ltSUdsdVpHVjRJRHdnYkdWdVozUm9PeUJwYm1SbGVDQXJQU0JrYVhJcElIdGNiaUFnSUNBZ0lDQWdkbUZ5SUdOMWNuSmxiblJMWlhrZ1BTQnJaWGx6SUQ4Z2EyVjVjMXRwYm1SbGVGMGdPaUJwYm1SbGVEdGNiaUFnSUNBZ0lDQWdiV1Z0YnlBOUlHbDBaWEpoZEdWbEtHMWxiVzhzSUc5aWFsdGpkWEp5Wlc1MFMyVjVYU3dnWTNWeWNtVnVkRXRsZVN3Z2IySnFLVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQWdJSEpsZEhWeWJpQnRaVzF2TzF4dUlDQWdJSDFjYmx4dUlDQWdJSEpsZEhWeWJpQm1kVzVqZEdsdmJpaHZZbW9zSUdsMFpYSmhkR1ZsTENCdFpXMXZMQ0JqYjI1MFpYaDBLU0I3WEc0Z0lDQWdJQ0JwZEdWeVlYUmxaU0E5SUc5d2RHbHRhWHBsUTJJb2FYUmxjbUYwWldVc0lHTnZiblJsZUhRc0lEUXBPMXh1SUNBZ0lDQWdkbUZ5SUd0bGVYTWdQU0FoYVhOQmNuSmhlVXhwYTJVb2IySnFLU0FtSmlCZkxtdGxlWE1vYjJKcUtTeGNiaUFnSUNBZ0lDQWdJQ0JzWlc1bmRHZ2dQU0FvYTJWNWN5QjhmQ0J2WW1vcExteGxibWQwYUN4Y2JpQWdJQ0FnSUNBZ0lDQnBibVJsZUNBOUlHUnBjaUErSURBZ1B5QXdJRG9nYkdWdVozUm9JQzBnTVR0Y2JpQWdJQ0FnSUM4dklFUmxkR1Z5YldsdVpTQjBhR1VnYVc1cGRHbGhiQ0IyWVd4MVpTQnBaaUJ1YjI1bElHbHpJSEJ5YjNacFpHVmtMbHh1SUNBZ0lDQWdhV1lnS0dGeVozVnRaVzUwY3k1c1pXNW5kR2dnUENBektTQjdYRzRnSUNBZ0lDQWdJRzFsYlc4Z1BTQnZZbXBiYTJWNWN5QS9JR3RsZVhOYmFXNWtaWGhkSURvZ2FXNWtaWGhkTzF4dUlDQWdJQ0FnSUNCcGJtUmxlQ0FyUFNCa2FYSTdYRzRnSUNBZ0lDQjlYRzRnSUNBZ0lDQnlaWFIxY200Z2FYUmxjbUYwYjNJb2IySnFMQ0JwZEdWeVlYUmxaU3dnYldWdGJ5d2dhMlY1Y3l3Z2FXNWtaWGdzSUd4bGJtZDBhQ2s3WEc0Z0lDQWdmVHRjYmlBZ2ZWeHVYRzRnSUM4dklDb3FVbVZrZFdObEtpb2dZblZwYkdSeklIVndJR0VnYzJsdVoyeGxJSEpsYzNWc2RDQm1jbTl0SUdFZ2JHbHpkQ0J2WmlCMllXeDFaWE1zSUdGcllTQmdhVzVxWldOMFlDeGNiaUFnTHk4Z2IzSWdZR1p2YkdSc1lDNWNiaUFnWHk1eVpXUjFZMlVnUFNCZkxtWnZiR1JzSUQwZ1h5NXBibXBsWTNRZ1BTQmpjbVZoZEdWU1pXUjFZMlVvTVNrN1hHNWNiaUFnTHk4Z1ZHaGxJSEpwWjJoMExXRnpjMjlqYVdGMGFYWmxJSFpsY25OcGIyNGdiMllnY21Wa2RXTmxMQ0JoYkhOdklHdHViM2R1SUdGeklHQm1iMnhrY21BdVhHNGdJRjh1Y21Wa2RXTmxVbWxuYUhRZ1BTQmZMbVp2YkdSeUlEMGdZM0psWVhSbFVtVmtkV05sS0MweEtUdGNibHh1SUNBdkx5QlNaWFIxY200Z2RHaGxJR1pwY25OMElIWmhiSFZsSUhkb2FXTm9JSEJoYzNObGN5QmhJSFJ5ZFhSb0lIUmxjM1F1SUVGc2FXRnpaV1FnWVhNZ1lHUmxkR1ZqZEdBdVhHNGdJRjh1Wm1sdVpDQTlJRjh1WkdWMFpXTjBJRDBnWm5WdVkzUnBiMjRvYjJKcUxDQndjbVZrYVdOaGRHVXNJR052Ym5SbGVIUXBJSHRjYmlBZ0lDQjJZWElnYTJWNU8xeHVJQ0FnSUdsbUlDaHBjMEZ5Y21GNVRHbHJaU2h2WW1vcEtTQjdYRzRnSUNBZ0lDQnJaWGtnUFNCZkxtWnBibVJKYm1SbGVDaHZZbW9zSUhCeVpXUnBZMkYwWlN3Z1kyOXVkR1Y0ZENrN1hHNGdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJR3RsZVNBOUlGOHVabWx1WkV0bGVTaHZZbW9zSUhCeVpXUnBZMkYwWlN3Z1kyOXVkR1Y0ZENrN1hHNGdJQ0FnZlZ4dUlDQWdJR2xtSUNoclpYa2dJVDA5SUhadmFXUWdNQ0FtSmlCclpYa2dJVDA5SUMweEtTQnlaWFIxY200Z2IySnFXMnRsZVYwN1hHNGdJSDA3WEc1Y2JpQWdMeThnVW1WMGRYSnVJR0ZzYkNCMGFHVWdaV3hsYldWdWRITWdkR2hoZENCd1lYTnpJR0VnZEhKMWRHZ2dkR1Z6ZEM1Y2JpQWdMeThnUVd4cFlYTmxaQ0JoY3lCZ2MyVnNaV04wWUM1Y2JpQWdYeTVtYVd4MFpYSWdQU0JmTG5ObGJHVmpkQ0E5SUdaMWJtTjBhVzl1S0c5aWFpd2djSEpsWkdsallYUmxMQ0JqYjI1MFpYaDBLU0I3WEc0Z0lDQWdkbUZ5SUhKbGMzVnNkSE1nUFNCYlhUdGNiaUFnSUNCd2NtVmthV05oZEdVZ1BTQmpZaWh3Y21Wa2FXTmhkR1VzSUdOdmJuUmxlSFFwTzF4dUlDQWdJRjh1WldGamFDaHZZbW9zSUdaMWJtTjBhVzl1S0haaGJIVmxMQ0JwYm1SbGVDd2diR2x6ZENrZ2UxeHVJQ0FnSUNBZ2FXWWdLSEJ5WldScFkyRjBaU2gyWVd4MVpTd2dhVzVrWlhnc0lHeHBjM1FwS1NCeVpYTjFiSFJ6TG5CMWMyZ29kbUZzZFdVcE8xeHVJQ0FnSUgwcE8xeHVJQ0FnSUhKbGRIVnliaUJ5WlhOMWJIUnpPMXh1SUNCOU8xeHVYRzRnSUM4dklGSmxkSFZ5YmlCaGJHd2dkR2hsSUdWc1pXMWxiblJ6SUdadmNpQjNhR2xqYUNCaElIUnlkWFJvSUhSbGMzUWdabUZwYkhNdVhHNGdJRjh1Y21WcVpXTjBJRDBnWm5WdVkzUnBiMjRvYjJKcUxDQndjbVZrYVdOaGRHVXNJR052Ym5SbGVIUXBJSHRjYmlBZ0lDQnlaWFIxY200Z1h5NW1hV3gwWlhJb2IySnFMQ0JmTG01bFoyRjBaU2hqWWlod2NtVmthV05oZEdVcEtTd2dZMjl1ZEdWNGRDazdYRzRnSUgwN1hHNWNiaUFnTHk4Z1JHVjBaWEp0YVc1bElIZG9aWFJvWlhJZ1lXeHNJRzltSUhSb1pTQmxiR1Z0Wlc1MGN5QnRZWFJqYUNCaElIUnlkWFJvSUhSbGMzUXVYRzRnSUM4dklFRnNhV0Z6WldRZ1lYTWdZR0ZzYkdBdVhHNGdJRjh1WlhabGNua2dQU0JmTG1Gc2JDQTlJR1oxYm1OMGFXOXVLRzlpYWl3Z2NISmxaR2xqWVhSbExDQmpiMjUwWlhoMEtTQjdYRzRnSUNBZ2NISmxaR2xqWVhSbElEMGdZMklvY0hKbFpHbGpZWFJsTENCamIyNTBaWGgwS1R0Y2JpQWdJQ0IyWVhJZ2EyVjVjeUE5SUNGcGMwRnljbUY1VEdsclpTaHZZbW9wSUNZbUlGOHVhMlY1Y3lodlltb3BMRnh1SUNBZ0lDQWdJQ0JzWlc1bmRHZ2dQU0FvYTJWNWN5QjhmQ0J2WW1vcExteGxibWQwYUR0Y2JpQWdJQ0JtYjNJZ0tIWmhjaUJwYm1SbGVDQTlJREE3SUdsdVpHVjRJRHdnYkdWdVozUm9PeUJwYm1SbGVDc3JLU0I3WEc0Z0lDQWdJQ0IyWVhJZ1kzVnljbVZ1ZEV0bGVTQTlJR3RsZVhNZ1B5QnJaWGx6VzJsdVpHVjRYU0E2SUdsdVpHVjRPMXh1SUNBZ0lDQWdhV1lnS0NGd2NtVmthV05oZEdVb2IySnFXMk4xY25KbGJuUkxaWGxkTENCamRYSnlaVzUwUzJWNUxDQnZZbW9wS1NCeVpYUjFjbTRnWm1Gc2MyVTdYRzRnSUNBZ2ZWeHVJQ0FnSUhKbGRIVnliaUIwY25WbE8xeHVJQ0I5TzF4dVhHNGdJQzh2SUVSbGRHVnliV2x1WlNCcFppQmhkQ0JzWldGemRDQnZibVVnWld4bGJXVnVkQ0JwYmlCMGFHVWdiMkpxWldOMElHMWhkR05vWlhNZ1lTQjBjblYwYUNCMFpYTjBMbHh1SUNBdkx5QkJiR2xoYzJWa0lHRnpJR0JoYm5sZ0xseHVJQ0JmTG5OdmJXVWdQU0JmTG1GdWVTQTlJR1oxYm1OMGFXOXVLRzlpYWl3Z2NISmxaR2xqWVhSbExDQmpiMjUwWlhoMEtTQjdYRzRnSUNBZ2NISmxaR2xqWVhSbElEMGdZMklvY0hKbFpHbGpZWFJsTENCamIyNTBaWGgwS1R0Y2JpQWdJQ0IyWVhJZ2EyVjVjeUE5SUNGcGMwRnljbUY1VEdsclpTaHZZbW9wSUNZbUlGOHVhMlY1Y3lodlltb3BMRnh1SUNBZ0lDQWdJQ0JzWlc1bmRHZ2dQU0FvYTJWNWN5QjhmQ0J2WW1vcExteGxibWQwYUR0Y2JpQWdJQ0JtYjNJZ0tIWmhjaUJwYm1SbGVDQTlJREE3SUdsdVpHVjRJRHdnYkdWdVozUm9PeUJwYm1SbGVDc3JLU0I3WEc0Z0lDQWdJQ0IyWVhJZ1kzVnljbVZ1ZEV0bGVTQTlJR3RsZVhNZ1B5QnJaWGx6VzJsdVpHVjRYU0E2SUdsdVpHVjRPMXh1SUNBZ0lDQWdhV1lnS0hCeVpXUnBZMkYwWlNodlltcGJZM1Z5Y21WdWRFdGxlVjBzSUdOMWNuSmxiblJMWlhrc0lHOWlhaWtwSUhKbGRIVnliaUIwY25WbE8xeHVJQ0FnSUgxY2JpQWdJQ0J5WlhSMWNtNGdabUZzYzJVN1hHNGdJSDA3WEc1Y2JpQWdMeThnUkdWMFpYSnRhVzVsSUdsbUlIUm9aU0JoY25KaGVTQnZjaUJ2WW1wbFkzUWdZMjl1ZEdGcGJuTWdZU0JuYVhabGJpQnBkR1Z0SUNoMWMybHVaeUJnUFQwOVlDa3VYRzRnSUM4dklFRnNhV0Z6WldRZ1lYTWdZR2x1WTJ4MVpHVnpZQ0JoYm1RZ1lHbHVZMngxWkdWZ0xseHVJQ0JmTG1OdmJuUmhhVzV6SUQwZ1h5NXBibU5zZFdSbGN5QTlJRjh1YVc1amJIVmtaU0E5SUdaMWJtTjBhVzl1S0c5aWFpd2dhWFJsYlN3Z1puSnZiVWx1WkdWNExDQm5kV0Z5WkNrZ2UxeHVJQ0FnSUdsbUlDZ2hhWE5CY25KaGVVeHBhMlVvYjJKcUtTa2diMkpxSUQwZ1h5NTJZV3gxWlhNb2IySnFLVHRjYmlBZ0lDQnBaaUFvZEhsd1pXOW1JR1p5YjIxSmJtUmxlQ0FoUFNBbmJuVnRZbVZ5SnlCOGZDQm5kV0Z5WkNrZ1puSnZiVWx1WkdWNElEMGdNRHRjYmlBZ0lDQnlaWFIxY200Z1h5NXBibVJsZUU5bUtHOWlhaXdnYVhSbGJTd2dabkp2YlVsdVpHVjRLU0ErUFNBd08xeHVJQ0I5TzF4dVhHNGdJQzh2SUVsdWRtOXJaU0JoSUcxbGRHaHZaQ0FvZDJsMGFDQmhjbWQxYldWdWRITXBJRzl1SUdWMlpYSjVJR2wwWlcwZ2FXNGdZU0JqYjJ4c1pXTjBhVzl1TGx4dUlDQmZMbWx1ZG05clpTQTlJR1oxYm1OMGFXOXVLRzlpYWl3Z2JXVjBhRzlrS1NCN1hHNGdJQ0FnZG1GeUlHRnlaM01nUFNCemJHbGpaUzVqWVd4c0tHRnlaM1Z0Wlc1MGN5d2dNaWs3WEc0Z0lDQWdkbUZ5SUdselJuVnVZeUE5SUY4dWFYTkdkVzVqZEdsdmJpaHRaWFJvYjJRcE8xeHVJQ0FnSUhKbGRIVnliaUJmTG0xaGNDaHZZbW9zSUdaMWJtTjBhVzl1S0haaGJIVmxLU0I3WEc0Z0lDQWdJQ0IyWVhJZ1puVnVZeUE5SUdselJuVnVZeUEvSUcxbGRHaHZaQ0E2SUhaaGJIVmxXMjFsZEdodlpGMDdYRzRnSUNBZ0lDQnlaWFIxY200Z1puVnVZeUE5UFNCdWRXeHNJRDhnWm5WdVl5QTZJR1oxYm1NdVlYQndiSGtvZG1Gc2RXVXNJR0Z5WjNNcE8xeHVJQ0FnSUgwcE8xeHVJQ0I5TzF4dVhHNGdJQzh2SUVOdmJuWmxibWxsYm1ObElIWmxjbk5wYjI0Z2IyWWdZU0JqYjIxdGIyNGdkWE5sSUdOaGMyVWdiMllnWUcxaGNHQTZJR1psZEdOb2FXNW5JR0VnY0hKdmNHVnlkSGt1WEc0Z0lGOHVjR3gxWTJzZ1BTQm1kVzVqZEdsdmJpaHZZbW9zSUd0bGVTa2dlMXh1SUNBZ0lISmxkSFZ5YmlCZkxtMWhjQ2h2WW1vc0lGOHVjSEp2Y0dWeWRIa29hMlY1S1NrN1hHNGdJSDA3WEc1Y2JpQWdMeThnUTI5dWRtVnVhV1Z1WTJVZ2RtVnljMmx2YmlCdlppQmhJR052YlcxdmJpQjFjMlVnWTJGelpTQnZaaUJnWm1sc2RHVnlZRG9nYzJWc1pXTjBhVzVuSUc5dWJIa2diMkpxWldOMGMxeHVJQ0F2THlCamIyNTBZV2x1YVc1bklITndaV05wWm1saklHQnJaWGs2ZG1Gc2RXVmdJSEJoYVhKekxseHVJQ0JmTG5kb1pYSmxJRDBnWm5WdVkzUnBiMjRvYjJKcUxDQmhkSFJ5Y3lrZ2UxeHVJQ0FnSUhKbGRIVnliaUJmTG1acGJIUmxjaWh2WW1vc0lGOHViV0YwWTJobGNpaGhkSFJ5Y3lrcE8xeHVJQ0I5TzF4dVhHNGdJQzh2SUVOdmJuWmxibWxsYm1ObElIWmxjbk5wYjI0Z2IyWWdZU0JqYjIxdGIyNGdkWE5sSUdOaGMyVWdiMllnWUdacGJtUmdPaUJuWlhSMGFXNW5JSFJvWlNCbWFYSnpkQ0J2WW1wbFkzUmNiaUFnTHk4Z1kyOXVkR0ZwYm1sdVp5QnpjR1ZqYVdacFl5QmdhMlY1T25aaGJIVmxZQ0J3WVdseWN5NWNiaUFnWHk1bWFXNWtWMmhsY21VZ1BTQm1kVzVqZEdsdmJpaHZZbW9zSUdGMGRISnpLU0I3WEc0Z0lDQWdjbVYwZFhKdUlGOHVabWx1WkNodlltb3NJRjh1YldGMFkyaGxjaWhoZEhSeWN5a3BPMXh1SUNCOU8xeHVYRzRnSUM4dklGSmxkSFZ5YmlCMGFHVWdiV0Y0YVcxMWJTQmxiR1Z0Wlc1MElDaHZjaUJsYkdWdFpXNTBMV0poYzJWa0lHTnZiWEIxZEdGMGFXOXVLUzVjYmlBZ1h5NXRZWGdnUFNCbWRXNWpkR2x2Ymlodlltb3NJR2wwWlhKaGRHVmxMQ0JqYjI1MFpYaDBLU0I3WEc0Z0lDQWdkbUZ5SUhKbGMzVnNkQ0E5SUMxSmJtWnBibWwwZVN3Z2JHRnpkRU52YlhCMWRHVmtJRDBnTFVsdVptbHVhWFI1TEZ4dUlDQWdJQ0FnSUNCMllXeDFaU3dnWTI5dGNIVjBaV1E3WEc0Z0lDQWdhV1lnS0dsMFpYSmhkR1ZsSUQwOUlHNTFiR3dnSmlZZ2IySnFJQ0U5SUc1MWJHd3BJSHRjYmlBZ0lDQWdJRzlpYWlBOUlHbHpRWEp5WVhsTWFXdGxLRzlpYWlrZ1B5QnZZbW9nT2lCZkxuWmhiSFZsY3lodlltb3BPMXh1SUNBZ0lDQWdabTl5SUNoMllYSWdhU0E5SURBc0lHeGxibWQwYUNBOUlHOWlhaTVzWlc1bmRHZzdJR2tnUENCc1pXNW5kR2c3SUdrckt5a2dlMXh1SUNBZ0lDQWdJQ0IyWVd4MVpTQTlJRzlpYWx0cFhUdGNiaUFnSUNBZ0lDQWdhV1lnS0haaGJIVmxJRDRnY21WemRXeDBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ2NtVnpkV3gwSUQwZ2RtRnNkV1U3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUgxY2JpQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdhWFJsY21GMFpXVWdQU0JqWWlocGRHVnlZWFJsWlN3Z1kyOXVkR1Y0ZENrN1hHNGdJQ0FnSUNCZkxtVmhZMmdvYjJKcUxDQm1kVzVqZEdsdmJpaDJZV3gxWlN3Z2FXNWtaWGdzSUd4cGMzUXBJSHRjYmlBZ0lDQWdJQ0FnWTI5dGNIVjBaV1FnUFNCcGRHVnlZWFJsWlNoMllXeDFaU3dnYVc1a1pYZ3NJR3hwYzNRcE8xeHVJQ0FnSUNBZ0lDQnBaaUFvWTI5dGNIVjBaV1FnUGlCc1lYTjBRMjl0Y0hWMFpXUWdmSHdnWTI5dGNIVjBaV1FnUFQwOUlDMUpibVpwYm1sMGVTQW1KaUJ5WlhOMWJIUWdQVDA5SUMxSmJtWnBibWwwZVNrZ2UxeHVJQ0FnSUNBZ0lDQWdJSEpsYzNWc2RDQTlJSFpoYkhWbE8xeHVJQ0FnSUNBZ0lDQWdJR3hoYzNSRGIyMXdkWFJsWkNBOUlHTnZiWEIxZEdWa08xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQjlLVHRjYmlBZ0lDQjlYRzRnSUNBZ2NtVjBkWEp1SUhKbGMzVnNkRHRjYmlBZ2ZUdGNibHh1SUNBdkx5QlNaWFIxY200Z2RHaGxJRzFwYm1sdGRXMGdaV3hsYldWdWRDQW9iM0lnWld4bGJXVnVkQzFpWVhObFpDQmpiMjF3ZFhSaGRHbHZiaWt1WEc0Z0lGOHViV2x1SUQwZ1puVnVZM1JwYjI0b2IySnFMQ0JwZEdWeVlYUmxaU3dnWTI5dWRHVjRkQ2tnZTF4dUlDQWdJSFpoY2lCeVpYTjFiSFFnUFNCSmJtWnBibWwwZVN3Z2JHRnpkRU52YlhCMWRHVmtJRDBnU1c1bWFXNXBkSGtzWEc0Z0lDQWdJQ0FnSUhaaGJIVmxMQ0JqYjIxd2RYUmxaRHRjYmlBZ0lDQnBaaUFvYVhSbGNtRjBaV1VnUFQwZ2JuVnNiQ0FtSmlCdlltb2dJVDBnYm5Wc2JDa2dlMXh1SUNBZ0lDQWdiMkpxSUQwZ2FYTkJjbkpoZVV4cGEyVW9iMkpxS1NBL0lHOWlhaUE2SUY4dWRtRnNkV1Z6S0c5aWFpazdYRzRnSUNBZ0lDQm1iM0lnS0haaGNpQnBJRDBnTUN3Z2JHVnVaM1JvSUQwZ2IySnFMbXhsYm1kMGFEc2dhU0E4SUd4bGJtZDBhRHNnYVNzcktTQjdYRzRnSUNBZ0lDQWdJSFpoYkhWbElEMGdiMkpxVzJsZE8xeHVJQ0FnSUNBZ0lDQnBaaUFvZG1Gc2RXVWdQQ0J5WlhOMWJIUXBJSHRjYmlBZ0lDQWdJQ0FnSUNCeVpYTjFiSFFnUFNCMllXeDFaVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnZlZ4dUlDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQnBkR1Z5WVhSbFpTQTlJR05pS0dsMFpYSmhkR1ZsTENCamIyNTBaWGgwS1R0Y2JpQWdJQ0FnSUY4dVpXRmphQ2h2WW1vc0lHWjFibU4wYVc5dUtIWmhiSFZsTENCcGJtUmxlQ3dnYkdsemRDa2dlMXh1SUNBZ0lDQWdJQ0JqYjIxd2RYUmxaQ0E5SUdsMFpYSmhkR1ZsS0haaGJIVmxMQ0JwYm1SbGVDd2diR2x6ZENrN1hHNGdJQ0FnSUNBZ0lHbG1JQ2hqYjIxd2RYUmxaQ0E4SUd4aGMzUkRiMjF3ZFhSbFpDQjhmQ0JqYjIxd2RYUmxaQ0E5UFQwZ1NXNW1hVzVwZEhrZ0ppWWdjbVZ6ZFd4MElEMDlQU0JKYm1acGJtbDBlU2tnZTF4dUlDQWdJQ0FnSUNBZ0lISmxjM1ZzZENBOUlIWmhiSFZsTzF4dUlDQWdJQ0FnSUNBZ0lHeGhjM1JEYjIxd2RYUmxaQ0E5SUdOdmJYQjFkR1ZrTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNCOUtUdGNiaUFnSUNCOVhHNGdJQ0FnY21WMGRYSnVJSEpsYzNWc2REdGNiaUFnZlR0Y2JseHVJQ0F2THlCVGFIVm1abXhsSUdFZ1kyOXNiR1ZqZEdsdmJpd2dkWE5wYm1jZ2RHaGxJRzF2WkdWeWJpQjJaWEp6YVc5dUlHOW1JSFJvWlZ4dUlDQXZMeUJiUm1semFHVnlMVmxoZEdWeklITm9kV1ptYkdWZEtHaDBkSEE2THk5bGJpNTNhV3RwY0dWa2FXRXViM0puTDNkcGEya3ZSbWx6YUdWeTRvQ1RXV0YwWlhOZmMyaDFabVpzWlNrdVhHNGdJRjh1YzJoMVptWnNaU0E5SUdaMWJtTjBhVzl1S0c5aWFpa2dlMXh1SUNBZ0lIWmhjaUJ6WlhRZ1BTQnBjMEZ5Y21GNVRHbHJaU2h2WW1vcElEOGdiMkpxSURvZ1h5NTJZV3gxWlhNb2IySnFLVHRjYmlBZ0lDQjJZWElnYkdWdVozUm9JRDBnYzJWMExteGxibWQwYUR0Y2JpQWdJQ0IyWVhJZ2MyaDFabVpzWldRZ1BTQkJjbkpoZVNoc1pXNW5kR2dwTzF4dUlDQWdJR1p2Y2lBb2RtRnlJR2x1WkdWNElEMGdNQ3dnY21GdVpEc2dhVzVrWlhnZ1BDQnNaVzVuZEdnN0lHbHVaR1Y0S3lzcElIdGNiaUFnSUNBZ0lISmhibVFnUFNCZkxuSmhibVJ2YlNnd0xDQnBibVJsZUNrN1hHNGdJQ0FnSUNCcFppQW9jbUZ1WkNBaFBUMGdhVzVrWlhncElITm9kV1ptYkdWa1cybHVaR1Y0WFNBOUlITm9kV1ptYkdWa1czSmhibVJkTzF4dUlDQWdJQ0FnYzJoMVptWnNaV1JiY21GdVpGMGdQU0J6WlhSYmFXNWtaWGhkTzF4dUlDQWdJSDFjYmlBZ0lDQnlaWFIxY200Z2MyaDFabVpzWldRN1hHNGdJSDA3WEc1Y2JpQWdMeThnVTJGdGNHeGxJQ29xYmlvcUlISmhibVJ2YlNCMllXeDFaWE1nWm5KdmJTQmhJR052Ykd4bFkzUnBiMjR1WEc0Z0lDOHZJRWxtSUNvcWJpb3FJR2x6SUc1dmRDQnpjR1ZqYVdacFpXUXNJSEpsZEhWeWJuTWdZU0J6YVc1bmJHVWdjbUZ1Wkc5dElHVnNaVzFsYm5RdVhHNGdJQzh2SUZSb1pTQnBiblJsY201aGJDQmdaM1ZoY21SZ0lHRnlaM1Z0Wlc1MElHRnNiRzkzY3lCcGRDQjBieUIzYjNKcklIZHBkR2dnWUcxaGNHQXVYRzRnSUY4dWMyRnRjR3hsSUQwZ1puVnVZM1JwYjI0b2IySnFMQ0J1TENCbmRXRnlaQ2tnZTF4dUlDQWdJR2xtSUNodUlEMDlJRzUxYkd3Z2ZId2daM1ZoY21RcElIdGNiaUFnSUNBZ0lHbG1JQ2doYVhOQmNuSmhlVXhwYTJVb2IySnFLU2tnYjJKcUlEMGdYeTUyWVd4MVpYTW9iMkpxS1R0Y2JpQWdJQ0FnSUhKbGRIVnliaUJ2WW1wYlh5NXlZVzVrYjIwb2IySnFMbXhsYm1kMGFDQXRJREVwWFR0Y2JpQWdJQ0I5WEc0Z0lDQWdjbVYwZFhKdUlGOHVjMmgxWm1ac1pTaHZZbW9wTG5Oc2FXTmxLREFzSUUxaGRHZ3ViV0Y0S0RBc0lHNHBLVHRjYmlBZ2ZUdGNibHh1SUNBdkx5QlRiM0owSUhSb1pTQnZZbXBsWTNRbmN5QjJZV3gxWlhNZ1lua2dZU0JqY21sMFpYSnBiMjRnY0hKdlpIVmpaV1FnWW5rZ1lXNGdhWFJsY21GMFpXVXVYRzRnSUY4dWMyOXlkRUo1SUQwZ1puVnVZM1JwYjI0b2IySnFMQ0JwZEdWeVlYUmxaU3dnWTI5dWRHVjRkQ2tnZTF4dUlDQWdJR2wwWlhKaGRHVmxJRDBnWTJJb2FYUmxjbUYwWldVc0lHTnZiblJsZUhRcE8xeHVJQ0FnSUhKbGRIVnliaUJmTG5Cc2RXTnJLRjh1YldGd0tHOWlhaXdnWm5WdVkzUnBiMjRvZG1Gc2RXVXNJR2x1WkdWNExDQnNhWE4wS1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnZTF4dUlDQWdJQ0FnSUNCMllXeDFaVG9nZG1Gc2RXVXNYRzRnSUNBZ0lDQWdJR2x1WkdWNE9pQnBibVJsZUN4Y2JpQWdJQ0FnSUNBZ1kzSnBkR1Z5YVdFNklHbDBaWEpoZEdWbEtIWmhiSFZsTENCcGJtUmxlQ3dnYkdsemRDbGNiaUFnSUNBZ0lIMDdYRzRnSUNBZ2ZTa3VjMjl5ZENobWRXNWpkR2x2Ymloc1pXWjBMQ0J5YVdkb2RDa2dlMXh1SUNBZ0lDQWdkbUZ5SUdFZ1BTQnNaV1owTG1OeWFYUmxjbWxoTzF4dUlDQWdJQ0FnZG1GeUlHSWdQU0J5YVdkb2RDNWpjbWwwWlhKcFlUdGNiaUFnSUNBZ0lHbG1JQ2hoSUNFOVBTQmlLU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDaGhJRDRnWWlCOGZDQmhJRDA5UFNCMmIybGtJREFwSUhKbGRIVnliaUF4TzF4dUlDQWdJQ0FnSUNCcFppQW9ZU0E4SUdJZ2ZId2dZaUE5UFQwZ2RtOXBaQ0F3S1NCeVpYUjFjbTRnTFRFN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnSUNCeVpYUjFjbTRnYkdWbWRDNXBibVJsZUNBdElISnBaMmgwTG1sdVpHVjRPMXh1SUNBZ0lIMHBMQ0FuZG1Gc2RXVW5LVHRjYmlBZ2ZUdGNibHh1SUNBdkx5QkJiaUJwYm5SbGNtNWhiQ0JtZFc1amRHbHZiaUIxYzJWa0lHWnZjaUJoWjJkeVpXZGhkR1VnWENKbmNtOTFjQ0JpZVZ3aUlHOXdaWEpoZEdsdmJuTXVYRzRnSUhaaGNpQm5jbTkxY0NBOUlHWjFibU4wYVc5dUtHSmxhR0YyYVc5eUtTQjdYRzRnSUNBZ2NtVjBkWEp1SUdaMWJtTjBhVzl1S0c5aWFpd2dhWFJsY21GMFpXVXNJR052Ym5SbGVIUXBJSHRjYmlBZ0lDQWdJSFpoY2lCeVpYTjFiSFFnUFNCN2ZUdGNiaUFnSUNBZ0lHbDBaWEpoZEdWbElEMGdZMklvYVhSbGNtRjBaV1VzSUdOdmJuUmxlSFFwTzF4dUlDQWdJQ0FnWHk1bFlXTm9LRzlpYWl3Z1puVnVZM1JwYjI0b2RtRnNkV1VzSUdsdVpHVjRLU0I3WEc0Z0lDQWdJQ0FnSUhaaGNpQnJaWGtnUFNCcGRHVnlZWFJsWlNoMllXeDFaU3dnYVc1a1pYZ3NJRzlpYWlrN1hHNGdJQ0FnSUNBZ0lHSmxhR0YyYVc5eUtISmxjM1ZzZEN3Z2RtRnNkV1VzSUd0bGVTazdYRzRnSUNBZ0lDQjlLVHRjYmlBZ0lDQWdJSEpsZEhWeWJpQnlaWE4xYkhRN1hHNGdJQ0FnZlR0Y2JpQWdmVHRjYmx4dUlDQXZMeUJIY205MWNITWdkR2hsSUc5aWFtVmpkQ2R6SUhaaGJIVmxjeUJpZVNCaElHTnlhWFJsY21sdmJpNGdVR0Z6Y3lCbGFYUm9aWElnWVNCemRISnBibWNnWVhSMGNtbGlkWFJsWEc0Z0lDOHZJSFJ2SUdkeWIzVndJR0o1TENCdmNpQmhJR1oxYm1OMGFXOXVJSFJvWVhRZ2NtVjBkWEp1Y3lCMGFHVWdZM0pwZEdWeWFXOXVMbHh1SUNCZkxtZHliM1Z3UW5rZ1BTQm5jbTkxY0NobWRXNWpkR2x2YmloeVpYTjFiSFFzSUhaaGJIVmxMQ0JyWlhrcElIdGNiaUFnSUNCcFppQW9YeTVvWVhNb2NtVnpkV3gwTENCclpYa3BLU0J5WlhOMWJIUmJhMlY1WFM1d2RYTm9LSFpoYkhWbEtUc2daV3h6WlNCeVpYTjFiSFJiYTJWNVhTQTlJRnQyWVd4MVpWMDdYRzRnSUgwcE8xeHVYRzRnSUM4dklFbHVaR1Y0WlhNZ2RHaGxJRzlpYW1WamRDZHpJSFpoYkhWbGN5QmllU0JoSUdOeWFYUmxjbWx2Yml3Z2MybHRhV3hoY2lCMGJ5QmdaM0p2ZFhCQ2VXQXNJR0oxZENCbWIzSmNiaUFnTHk4Z2QyaGxiaUI1YjNVZ2EyNXZkeUIwYUdGMElIbHZkWElnYVc1a1pYZ2dkbUZzZFdWeklIZHBiR3dnWW1VZ2RXNXBjWFZsTGx4dUlDQmZMbWx1WkdWNFFua2dQU0JuY205MWNDaG1kVzVqZEdsdmJpaHlaWE4xYkhRc0lIWmhiSFZsTENCclpYa3BJSHRjYmlBZ0lDQnlaWE4xYkhSYmEyVjVYU0E5SUhaaGJIVmxPMXh1SUNCOUtUdGNibHh1SUNBdkx5QkRiM1Z1ZEhNZ2FXNXpkR0Z1WTJWeklHOW1JR0Z1SUc5aWFtVmpkQ0IwYUdGMElHZHliM1Z3SUdKNUlHRWdZMlZ5ZEdGcGJpQmpjbWwwWlhKcGIyNHVJRkJoYzNOY2JpQWdMeThnWldsMGFHVnlJR0VnYzNSeWFXNW5JR0YwZEhKcFluVjBaU0IwYnlCamIzVnVkQ0JpZVN3Z2IzSWdZU0JtZFc1amRHbHZiaUIwYUdGMElISmxkSFZ5Ym5NZ2RHaGxYRzRnSUM4dklHTnlhWFJsY21sdmJpNWNiaUFnWHk1amIzVnVkRUo1SUQwZ1ozSnZkWEFvWm5WdVkzUnBiMjRvY21WemRXeDBMQ0IyWVd4MVpTd2dhMlY1S1NCN1hHNGdJQ0FnYVdZZ0tGOHVhR0Z6S0hKbGMzVnNkQ3dnYTJWNUtTa2djbVZ6ZFd4MFcydGxlVjByS3pzZ1pXeHpaU0J5WlhOMWJIUmJhMlY1WFNBOUlERTdYRzRnSUgwcE8xeHVYRzRnSUM4dklGTmhabVZzZVNCamNtVmhkR1VnWVNCeVpXRnNMQ0JzYVhabElHRnljbUY1SUdaeWIyMGdZVzU1ZEdocGJtY2dhWFJsY21GaWJHVXVYRzRnSUY4dWRHOUJjbkpoZVNBOUlHWjFibU4wYVc5dUtHOWlhaWtnZTF4dUlDQWdJR2xtSUNnaGIySnFLU0J5WlhSMWNtNGdXMTA3WEc0Z0lDQWdhV1lnS0Y4dWFYTkJjbkpoZVNodlltb3BLU0J5WlhSMWNtNGdjMnhwWTJVdVkyRnNiQ2h2WW1vcE8xeHVJQ0FnSUdsbUlDaHBjMEZ5Y21GNVRHbHJaU2h2WW1vcEtTQnlaWFIxY200Z1h5NXRZWEFvYjJKcUxDQmZMbWxrWlc1MGFYUjVLVHRjYmlBZ0lDQnlaWFIxY200Z1h5NTJZV3gxWlhNb2IySnFLVHRjYmlBZ2ZUdGNibHh1SUNBdkx5QlNaWFIxY200Z2RHaGxJRzUxYldKbGNpQnZaaUJsYkdWdFpXNTBjeUJwYmlCaGJpQnZZbXBsWTNRdVhHNGdJRjh1YzJsNlpTQTlJR1oxYm1OMGFXOXVLRzlpYWlrZ2UxeHVJQ0FnSUdsbUlDaHZZbW9nUFQwZ2JuVnNiQ2tnY21WMGRYSnVJREE3WEc0Z0lDQWdjbVYwZFhKdUlHbHpRWEp5WVhsTWFXdGxLRzlpYWlrZ1B5QnZZbW91YkdWdVozUm9JRG9nWHk1clpYbHpLRzlpYWlrdWJHVnVaM1JvTzF4dUlDQjlPMXh1WEc0Z0lDOHZJRk53YkdsMElHRWdZMjlzYkdWamRHbHZiaUJwYm5SdklIUjNieUJoY25KaGVYTTZJRzl1WlNCM2FHOXpaU0JsYkdWdFpXNTBjeUJoYkd3Z2MyRjBhWE5tZVNCMGFHVWdaMmwyWlc1Y2JpQWdMeThnY0hKbFpHbGpZWFJsTENCaGJtUWdiMjVsSUhkb2IzTmxJR1ZzWlcxbGJuUnpJR0ZzYkNCa2J5QnViM1FnYzJGMGFYTm1lU0IwYUdVZ2NISmxaR2xqWVhSbExseHVJQ0JmTG5CaGNuUnBkR2x2YmlBOUlHWjFibU4wYVc5dUtHOWlhaXdnY0hKbFpHbGpZWFJsTENCamIyNTBaWGgwS1NCN1hHNGdJQ0FnY0hKbFpHbGpZWFJsSUQwZ1kySW9jSEpsWkdsallYUmxMQ0JqYjI1MFpYaDBLVHRjYmlBZ0lDQjJZWElnY0dGemN5QTlJRnRkTENCbVlXbHNJRDBnVzEwN1hHNGdJQ0FnWHk1bFlXTm9LRzlpYWl3Z1puVnVZM1JwYjI0b2RtRnNkV1VzSUd0bGVTd2diMkpxS1NCN1hHNGdJQ0FnSUNBb2NISmxaR2xqWVhSbEtIWmhiSFZsTENCclpYa3NJRzlpYWlrZ1B5QndZWE56SURvZ1ptRnBiQ2t1Y0hWemFDaDJZV3gxWlNrN1hHNGdJQ0FnZlNrN1hHNGdJQ0FnY21WMGRYSnVJRnR3WVhOekxDQm1ZV2xzWFR0Y2JpQWdmVHRjYmx4dUlDQXZMeUJCY25KaGVTQkdkVzVqZEdsdmJuTmNiaUFnTHk4Z0xTMHRMUzB0TFMwdExTMHRMUzB0WEc1Y2JpQWdMeThnUjJWMElIUm9aU0JtYVhKemRDQmxiR1Z0Wlc1MElHOW1JR0Z1SUdGeWNtRjVMaUJRWVhOemFXNW5JQ29xYmlvcUlIZHBiR3dnY21WMGRYSnVJSFJvWlNCbWFYSnpkQ0JPWEc0Z0lDOHZJSFpoYkhWbGN5QnBiaUIwYUdVZ1lYSnlZWGt1SUVGc2FXRnpaV1FnWVhNZ1lHaGxZV1JnSUdGdVpDQmdkR0ZyWldBdUlGUm9aU0FxS21kMVlYSmtLaW9nWTJobFkydGNiaUFnTHk4Z1lXeHNiM2R6SUdsMElIUnZJSGR2Y21zZ2QybDBhQ0JnWHk1dFlYQmdMbHh1SUNCZkxtWnBjbk4wSUQwZ1h5NW9aV0ZrSUQwZ1h5NTBZV3RsSUQwZ1puVnVZM1JwYjI0b1lYSnlZWGtzSUc0c0lHZDFZWEprS1NCN1hHNGdJQ0FnYVdZZ0tHRnljbUY1SUQwOUlHNTFiR3dwSUhKbGRIVnliaUIyYjJsa0lEQTdYRzRnSUNBZ2FXWWdLRzRnUFQwZ2JuVnNiQ0I4ZkNCbmRXRnlaQ2tnY21WMGRYSnVJR0Z5Y21GNVd6QmRPMXh1SUNBZ0lISmxkSFZ5YmlCZkxtbHVhWFJwWVd3b1lYSnlZWGtzSUdGeWNtRjVMbXhsYm1kMGFDQXRJRzRwTzF4dUlDQjlPMXh1WEc0Z0lDOHZJRkpsZEhWeWJuTWdaWFpsY25sMGFHbHVaeUJpZFhRZ2RHaGxJR3hoYzNRZ1pXNTBjbmtnYjJZZ2RHaGxJR0Z5Y21GNUxpQkZjM0JsWTJsaGJHeDVJSFZ6WldaMWJDQnZibHh1SUNBdkx5QjBhR1VnWVhKbmRXMWxiblJ6SUc5aWFtVmpkQzRnVUdGemMybHVaeUFxS200cUtpQjNhV3hzSUhKbGRIVnliaUJoYkd3Z2RHaGxJSFpoYkhWbGN5QnBibHh1SUNBdkx5QjBhR1VnWVhKeVlYa3NJR1Y0WTJ4MVpHbHVaeUIwYUdVZ2JHRnpkQ0JPTGx4dUlDQmZMbWx1YVhScFlXd2dQU0JtZFc1amRHbHZiaWhoY25KaGVTd2diaXdnWjNWaGNtUXBJSHRjYmlBZ0lDQnlaWFIxY200Z2MyeHBZMlV1WTJGc2JDaGhjbkpoZVN3Z01Dd2dUV0YwYUM1dFlYZ29NQ3dnWVhKeVlYa3ViR1Z1WjNSb0lDMGdLRzRnUFQwZ2JuVnNiQ0I4ZkNCbmRXRnlaQ0EvSURFZ09pQnVLU2twTzF4dUlDQjlPMXh1WEc0Z0lDOHZJRWRsZENCMGFHVWdiR0Z6ZENCbGJHVnRaVzUwSUc5bUlHRnVJR0Z5Y21GNUxpQlFZWE56YVc1bklDb3FiaW9xSUhkcGJHd2djbVYwZFhKdUlIUm9aU0JzWVhOMElFNWNiaUFnTHk4Z2RtRnNkV1Z6SUdsdUlIUm9aU0JoY25KaGVTNWNiaUFnWHk1c1lYTjBJRDBnWm5WdVkzUnBiMjRvWVhKeVlYa3NJRzRzSUdkMVlYSmtLU0I3WEc0Z0lDQWdhV1lnS0dGeWNtRjVJRDA5SUc1MWJHd3BJSEpsZEhWeWJpQjJiMmxrSURBN1hHNGdJQ0FnYVdZZ0tHNGdQVDBnYm5Wc2JDQjhmQ0JuZFdGeVpDa2djbVYwZFhKdUlHRnljbUY1VzJGeWNtRjVMbXhsYm1kMGFDQXRJREZkTzF4dUlDQWdJSEpsZEhWeWJpQmZMbkpsYzNRb1lYSnlZWGtzSUUxaGRHZ3ViV0Y0S0RBc0lHRnljbUY1TG14bGJtZDBhQ0F0SUc0cEtUdGNiaUFnZlR0Y2JseHVJQ0F2THlCU1pYUjFjbTV6SUdWMlpYSjVkR2hwYm1jZ1luVjBJSFJvWlNCbWFYSnpkQ0JsYm5SeWVTQnZaaUIwYUdVZ1lYSnlZWGt1SUVGc2FXRnpaV1FnWVhNZ1lIUmhhV3hnSUdGdVpDQmdaSEp2Y0dBdVhHNGdJQzh2SUVWemNHVmphV0ZzYkhrZ2RYTmxablZzSUc5dUlIUm9aU0JoY21kMWJXVnVkSE1nYjJKcVpXTjBMaUJRWVhOemFXNW5JR0Z1SUNvcWJpb3FJSGRwYkd3Z2NtVjBkWEp1WEc0Z0lDOHZJSFJvWlNCeVpYTjBJRTRnZG1Gc2RXVnpJR2x1SUhSb1pTQmhjbkpoZVM1Y2JpQWdYeTV5WlhOMElEMGdYeTUwWVdsc0lEMGdYeTVrY205d0lEMGdablZ1WTNScGIyNG9ZWEp5WVhrc0lHNHNJR2QxWVhKa0tTQjdYRzRnSUNBZ2NtVjBkWEp1SUhOc2FXTmxMbU5oYkd3b1lYSnlZWGtzSUc0Z1BUMGdiblZzYkNCOGZDQm5kV0Z5WkNBL0lERWdPaUJ1S1R0Y2JpQWdmVHRjYmx4dUlDQXZMeUJVY21sdElHOTFkQ0JoYkd3Z1ptRnNjM2tnZG1Gc2RXVnpJR1p5YjIwZ1lXNGdZWEp5WVhrdVhHNGdJRjh1WTI5dGNHRmpkQ0E5SUdaMWJtTjBhVzl1S0dGeWNtRjVLU0I3WEc0Z0lDQWdjbVYwZFhKdUlGOHVabWxzZEdWeUtHRnljbUY1TENCZkxtbGtaVzUwYVhSNUtUdGNiaUFnZlR0Y2JseHVJQ0F2THlCSmJuUmxjbTVoYkNCcGJYQnNaVzFsYm5SaGRHbHZiaUJ2WmlCaElISmxZM1Z5YzJsMlpTQmdabXhoZEhSbGJtQWdablZ1WTNScGIyNHVYRzRnSUhaaGNpQm1iR0YwZEdWdUlEMGdablZ1WTNScGIyNG9hVzV3ZFhRc0lITm9ZV3hzYjNjc0lITjBjbWxqZEN3Z2MzUmhjblJKYm1SbGVDa2dlMXh1SUNBZ0lIWmhjaUJ2ZFhSd2RYUWdQU0JiWFN3Z2FXUjRJRDBnTUR0Y2JpQWdJQ0JtYjNJZ0tIWmhjaUJwSUQwZ2MzUmhjblJKYm1SbGVDQjhmQ0F3TENCc1pXNW5kR2dnUFNCblpYUk1aVzVuZEdnb2FXNXdkWFFwT3lCcElEd2diR1Z1WjNSb095QnBLeXNwSUh0Y2JpQWdJQ0FnSUhaaGNpQjJZV3gxWlNBOUlHbHVjSFYwVzJsZE8xeHVJQ0FnSUNBZ2FXWWdLR2x6UVhKeVlYbE1hV3RsS0haaGJIVmxLU0FtSmlBb1h5NXBjMEZ5Y21GNUtIWmhiSFZsS1NCOGZDQmZMbWx6UVhKbmRXMWxiblJ6S0haaGJIVmxLU2twSUh0Y2JpQWdJQ0FnSUNBZ0x5OW1iR0YwZEdWdUlHTjFjbkpsYm5RZ2JHVjJaV3dnYjJZZ1lYSnlZWGtnYjNJZ1lYSm5kVzFsYm5SeklHOWlhbVZqZEZ4dUlDQWdJQ0FnSUNCcFppQW9JWE5vWVd4c2IzY3BJSFpoYkhWbElEMGdabXhoZEhSbGJpaDJZV3gxWlN3Z2MyaGhiR3h2ZHl3Z2MzUnlhV04wS1R0Y2JpQWdJQ0FnSUNBZ2RtRnlJR29nUFNBd0xDQnNaVzRnUFNCMllXeDFaUzVzWlc1bmRHZzdYRzRnSUNBZ0lDQWdJRzkxZEhCMWRDNXNaVzVuZEdnZ0t6MGdiR1Z1TzF4dUlDQWdJQ0FnSUNCM2FHbHNaU0FvYWlBOElHeGxiaWtnZTF4dUlDQWdJQ0FnSUNBZ0lHOTFkSEIxZEZ0cFpIZ3JLMTBnUFNCMllXeDFaVnRxS3l0ZE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQjlJR1ZzYzJVZ2FXWWdLQ0Z6ZEhKcFkzUXBJSHRjYmlBZ0lDQWdJQ0FnYjNWMGNIVjBXMmxrZUNzclhTQTlJSFpoYkhWbE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JpQWdJQ0J5WlhSMWNtNGdiM1YwY0hWME8xeHVJQ0I5TzF4dVhHNGdJQzh2SUVac1lYUjBaVzRnYjNWMElHRnVJR0Z5Y21GNUxDQmxhWFJvWlhJZ2NtVmpkWEp6YVhabGJIa2dLR0o1SUdSbFptRjFiSFFwTENCdmNpQnFkWE4wSUc5dVpTQnNaWFpsYkM1Y2JpQWdYeTVtYkdGMGRHVnVJRDBnWm5WdVkzUnBiMjRvWVhKeVlYa3NJSE5vWVd4c2IzY3BJSHRjYmlBZ0lDQnlaWFIxY200Z1pteGhkSFJsYmloaGNuSmhlU3dnYzJoaGJHeHZkeXdnWm1Gc2MyVXBPMXh1SUNCOU8xeHVYRzRnSUM4dklGSmxkSFZ5YmlCaElIWmxjbk5wYjI0Z2IyWWdkR2hsSUdGeWNtRjVJSFJvWVhRZ1pHOWxjeUJ1YjNRZ1kyOXVkR0ZwYmlCMGFHVWdjM0JsWTJsbWFXVmtJSFpoYkhWbEtITXBMbHh1SUNCZkxuZHBkR2h2ZFhRZ1BTQm1kVzVqZEdsdmJpaGhjbkpoZVNrZ2UxeHVJQ0FnSUhKbGRIVnliaUJmTG1ScFptWmxjbVZ1WTJVb1lYSnlZWGtzSUhOc2FXTmxMbU5oYkd3b1lYSm5kVzFsYm5SekxDQXhLU2s3WEc0Z0lIMDdYRzVjYmlBZ0x5OGdVSEp2WkhWalpTQmhJR1IxY0d4cFkyRjBaUzFtY21WbElIWmxjbk5wYjI0Z2IyWWdkR2hsSUdGeWNtRjVMaUJKWmlCMGFHVWdZWEp5WVhrZ2FHRnpJR0ZzY21WaFpIbGNiaUFnTHk4Z1ltVmxiaUJ6YjNKMFpXUXNJSGx2ZFNCb1lYWmxJSFJvWlNCdmNIUnBiMjRnYjJZZ2RYTnBibWNnWVNCbVlYTjBaWElnWVd4bmIzSnBkR2h0TGx4dUlDQXZMeUJCYkdsaGMyVmtJR0Z6SUdCMWJtbHhkV1ZnTGx4dUlDQmZMblZ1YVhFZ1BTQmZMblZ1YVhGMVpTQTlJR1oxYm1OMGFXOXVLR0Z5Y21GNUxDQnBjMU52Y25SbFpDd2dhWFJsY21GMFpXVXNJR052Ym5SbGVIUXBJSHRjYmlBZ0lDQnBaaUFvSVY4dWFYTkNiMjlzWldGdUtHbHpVMjl5ZEdWa0tTa2dlMXh1SUNBZ0lDQWdZMjl1ZEdWNGRDQTlJR2wwWlhKaGRHVmxPMXh1SUNBZ0lDQWdhWFJsY21GMFpXVWdQU0JwYzFOdmNuUmxaRHRjYmlBZ0lDQWdJR2x6VTI5eWRHVmtJRDBnWm1Gc2MyVTdYRzRnSUNBZ2ZWeHVJQ0FnSUdsbUlDaHBkR1Z5WVhSbFpTQWhQU0J1ZFd4c0tTQnBkR1Z5WVhSbFpTQTlJR05pS0dsMFpYSmhkR1ZsTENCamIyNTBaWGgwS1R0Y2JpQWdJQ0IyWVhJZ2NtVnpkV3gwSUQwZ1cxMDdYRzRnSUNBZ2RtRnlJSE5sWlc0Z1BTQmJYVHRjYmlBZ0lDQm1iM0lnS0haaGNpQnBJRDBnTUN3Z2JHVnVaM1JvSUQwZ1oyVjBUR1Z1WjNSb0tHRnljbUY1S1RzZ2FTQThJR3hsYm1kMGFEc2dhU3NyS1NCN1hHNGdJQ0FnSUNCMllYSWdkbUZzZFdVZ1BTQmhjbkpoZVZ0cFhTeGNiaUFnSUNBZ0lDQWdJQ0JqYjIxd2RYUmxaQ0E5SUdsMFpYSmhkR1ZsSUQ4Z2FYUmxjbUYwWldVb2RtRnNkV1VzSUdrc0lHRnljbUY1S1NBNklIWmhiSFZsTzF4dUlDQWdJQ0FnYVdZZ0tHbHpVMjl5ZEdWa0tTQjdYRzRnSUNBZ0lDQWdJR2xtSUNnaGFTQjhmQ0J6WldWdUlDRTlQU0JqYjIxd2RYUmxaQ2tnY21WemRXeDBMbkIxYzJnb2RtRnNkV1VwTzF4dUlDQWdJQ0FnSUNCelpXVnVJRDBnWTI5dGNIVjBaV1E3WEc0Z0lDQWdJQ0I5SUdWc2MyVWdhV1lnS0dsMFpYSmhkR1ZsS1NCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2doWHk1amIyNTBZV2x1Y3loelpXVnVMQ0JqYjIxd2RYUmxaQ2twSUh0Y2JpQWdJQ0FnSUNBZ0lDQnpaV1Z1TG5CMWMyZ29ZMjl0Y0hWMFpXUXBPMXh1SUNBZ0lDQWdJQ0FnSUhKbGMzVnNkQzV3ZFhOb0tIWmhiSFZsS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2ZTQmxiSE5sSUdsbUlDZ2hYeTVqYjI1MFlXbHVjeWh5WlhOMWJIUXNJSFpoYkhWbEtTa2dlMXh1SUNBZ0lDQWdJQ0J5WlhOMWJIUXVjSFZ6YUNoMllXeDFaU2s3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmVnh1SUNBZ0lISmxkSFZ5YmlCeVpYTjFiSFE3WEc0Z0lIMDdYRzVjYmlBZ0x5OGdVSEp2WkhWalpTQmhiaUJoY25KaGVTQjBhR0YwSUdOdmJuUmhhVzV6SUhSb1pTQjFibWx2YmpvZ1pXRmphQ0JrYVhOMGFXNWpkQ0JsYkdWdFpXNTBJR1p5YjIwZ1lXeHNJRzltWEc0Z0lDOHZJSFJvWlNCd1lYTnpaV1F0YVc0Z1lYSnlZWGx6TGx4dUlDQmZMblZ1YVc5dUlEMGdablZ1WTNScGIyNG9LU0I3WEc0Z0lDQWdjbVYwZFhKdUlGOHVkVzVwY1NobWJHRjBkR1Z1S0dGeVozVnRaVzUwY3l3Z2RISjFaU3dnZEhKMVpTa3BPMXh1SUNCOU8xeHVYRzRnSUM4dklGQnliMlIxWTJVZ1lXNGdZWEp5WVhrZ2RHaGhkQ0JqYjI1MFlXbHVjeUJsZG1WeWVTQnBkR1Z0SUhOb1lYSmxaQ0JpWlhSM1pXVnVJR0ZzYkNCMGFHVmNiaUFnTHk4Z2NHRnpjMlZrTFdsdUlHRnljbUY1Y3k1Y2JpQWdYeTVwYm5SbGNuTmxZM1JwYjI0Z1BTQm1kVzVqZEdsdmJpaGhjbkpoZVNrZ2UxeHVJQ0FnSUhaaGNpQnlaWE4xYkhRZ1BTQmJYVHRjYmlBZ0lDQjJZWElnWVhKbmMweGxibWQwYUNBOUlHRnlaM1Z0Wlc1MGN5NXNaVzVuZEdnN1hHNGdJQ0FnWm05eUlDaDJZWElnYVNBOUlEQXNJR3hsYm1kMGFDQTlJR2RsZEV4bGJtZDBhQ2hoY25KaGVTazdJR2tnUENCc1pXNW5kR2c3SUdrckt5a2dlMXh1SUNBZ0lDQWdkbUZ5SUdsMFpXMGdQU0JoY25KaGVWdHBYVHRjYmlBZ0lDQWdJR2xtSUNoZkxtTnZiblJoYVc1ektISmxjM1ZzZEN3Z2FYUmxiU2twSUdOdmJuUnBiblZsTzF4dUlDQWdJQ0FnWm05eUlDaDJZWElnYWlBOUlERTdJR29nUENCaGNtZHpUR1Z1WjNSb095QnFLeXNwSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLQ0ZmTG1OdmJuUmhhVzV6S0dGeVozVnRaVzUwYzF0cVhTd2dhWFJsYlNrcElHSnlaV0ZyTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJQ0FnYVdZZ0tHb2dQVDA5SUdGeVozTk1aVzVuZEdncElISmxjM1ZzZEM1d2RYTm9LR2wwWlcwcE8xeHVJQ0FnSUgxY2JpQWdJQ0J5WlhSMWNtNGdjbVZ6ZFd4ME8xeHVJQ0I5TzF4dVhHNGdJQzh2SUZSaGEyVWdkR2hsSUdScFptWmxjbVZ1WTJVZ1ltVjBkMlZsYmlCdmJtVWdZWEp5WVhrZ1lXNWtJR0VnYm5WdFltVnlJRzltSUc5MGFHVnlJR0Z5Y21GNWN5NWNiaUFnTHk4Z1QyNXNlU0IwYUdVZ1pXeGxiV1Z1ZEhNZ2NISmxjMlZ1ZENCcGJpQnFkWE4wSUhSb1pTQm1hWEp6ZENCaGNuSmhlU0IzYVd4c0lISmxiV0ZwYmk1Y2JpQWdYeTVrYVdabVpYSmxibU5sSUQwZ1puVnVZM1JwYjI0b1lYSnlZWGtwSUh0Y2JpQWdJQ0IyWVhJZ2NtVnpkQ0E5SUdac1lYUjBaVzRvWVhKbmRXMWxiblJ6TENCMGNuVmxMQ0IwY25WbExDQXhLVHRjYmlBZ0lDQnlaWFIxY200Z1h5NW1hV3gwWlhJb1lYSnlZWGtzSUdaMWJtTjBhVzl1S0haaGJIVmxLWHRjYmlBZ0lDQWdJSEpsZEhWeWJpQWhYeTVqYjI1MFlXbHVjeWh5WlhOMExDQjJZV3gxWlNrN1hHNGdJQ0FnZlNrN1hHNGdJSDA3WEc1Y2JpQWdMeThnV21sd0lIUnZaMlYwYUdWeUlHMTFiSFJwY0d4bElHeHBjM1J6SUdsdWRHOGdZU0J6YVc1bmJHVWdZWEp5WVhrZ0xTMGdaV3hsYldWdWRITWdkR2hoZENCemFHRnlaVnh1SUNBdkx5QmhiaUJwYm1SbGVDQm5ieUIwYjJkbGRHaGxjaTVjYmlBZ1h5NTZhWEFnUFNCbWRXNWpkR2x2YmlncElIdGNiaUFnSUNCeVpYUjFjbTRnWHk1MWJucHBjQ2hoY21kMWJXVnVkSE1wTzF4dUlDQjlPMXh1WEc0Z0lDOHZJRU52YlhCc1pXMWxiblFnYjJZZ1h5NTZhWEF1SUZWdWVtbHdJR0ZqWTJWd2RITWdZVzRnWVhKeVlYa2diMllnWVhKeVlYbHpJR0Z1WkNCbmNtOTFjSE5jYmlBZ0x5OGdaV0ZqYUNCaGNuSmhlU2R6SUdWc1pXMWxiblJ6SUc5dUlITm9ZWEpsWkNCcGJtUnBZMlZ6WEc0Z0lGOHVkVzU2YVhBZ1BTQm1kVzVqZEdsdmJpaGhjbkpoZVNrZ2UxeHVJQ0FnSUhaaGNpQnNaVzVuZEdnZ1BTQmhjbkpoZVNBbUppQmZMbTFoZUNoaGNuSmhlU3dnWjJWMFRHVnVaM1JvS1M1c1pXNW5kR2dnZkh3Z01EdGNiaUFnSUNCMllYSWdjbVZ6ZFd4MElEMGdRWEp5WVhrb2JHVnVaM1JvS1R0Y2JseHVJQ0FnSUdadmNpQW9kbUZ5SUdsdVpHVjRJRDBnTURzZ2FXNWtaWGdnUENCc1pXNW5kR2c3SUdsdVpHVjRLeXNwSUh0Y2JpQWdJQ0FnSUhKbGMzVnNkRnRwYm1SbGVGMGdQU0JmTG5Cc2RXTnJLR0Z5Y21GNUxDQnBibVJsZUNrN1hHNGdJQ0FnZlZ4dUlDQWdJSEpsZEhWeWJpQnlaWE4xYkhRN1hHNGdJSDA3WEc1Y2JpQWdMeThnUTI5dWRtVnlkSE1nYkdsemRITWdhVzUwYnlCdlltcGxZM1J6TGlCUVlYTnpJR1ZwZEdobGNpQmhJSE5wYm1kc1pTQmhjbkpoZVNCdlppQmdXMnRsZVN3Z2RtRnNkV1ZkWUZ4dUlDQXZMeUJ3WVdseWN5d2diM0lnZEhkdklIQmhjbUZzYkdWc0lHRnljbUY1Y3lCdlppQjBhR1VnYzJGdFpTQnNaVzVuZEdnZ0xTMGdiMjVsSUc5bUlHdGxlWE1zSUdGdVpDQnZibVVnYjJaY2JpQWdMeThnZEdobElHTnZjbkpsYzNCdmJtUnBibWNnZG1Gc2RXVnpMbHh1SUNCZkxtOWlhbVZqZENBOUlHWjFibU4wYVc5dUtHeHBjM1FzSUhaaGJIVmxjeWtnZTF4dUlDQWdJSFpoY2lCeVpYTjFiSFFnUFNCN2ZUdGNiaUFnSUNCbWIzSWdLSFpoY2lCcElEMGdNQ3dnYkdWdVozUm9JRDBnWjJWMFRHVnVaM1JvS0d4cGMzUXBPeUJwSUR3Z2JHVnVaM1JvT3lCcEt5c3BJSHRjYmlBZ0lDQWdJR2xtSUNoMllXeDFaWE1wSUh0Y2JpQWdJQ0FnSUNBZ2NtVnpkV3gwVzJ4cGMzUmJhVjFkSUQwZ2RtRnNkV1Z6VzJsZE8xeHVJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ2NtVnpkV3gwVzJ4cGMzUmJhVjFiTUYxZElEMGdiR2x6ZEZ0cFhWc3hYVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlYRzRnSUNBZ2NtVjBkWEp1SUhKbGMzVnNkRHRjYmlBZ2ZUdGNibHh1SUNBdkx5QkhaVzVsY21GMGIzSWdablZ1WTNScGIyNGdkRzhnWTNKbFlYUmxJSFJvWlNCbWFXNWtTVzVrWlhnZ1lXNWtJR1pwYm1STVlYTjBTVzVrWlhnZ1puVnVZM1JwYjI1elhHNGdJR1oxYm1OMGFXOXVJR055WldGMFpWQnlaV1JwWTJGMFpVbHVaR1Y0Um1sdVpHVnlLR1JwY2lrZ2UxeHVJQ0FnSUhKbGRIVnliaUJtZFc1amRHbHZiaWhoY25KaGVTd2djSEpsWkdsallYUmxMQ0JqYjI1MFpYaDBLU0I3WEc0Z0lDQWdJQ0J3Y21Wa2FXTmhkR1VnUFNCallpaHdjbVZrYVdOaGRHVXNJR052Ym5SbGVIUXBPMXh1SUNBZ0lDQWdkbUZ5SUd4bGJtZDBhQ0E5SUdkbGRFeGxibWQwYUNoaGNuSmhlU2s3WEc0Z0lDQWdJQ0IyWVhJZ2FXNWtaWGdnUFNCa2FYSWdQaUF3SUQ4Z01DQTZJR3hsYm1kMGFDQXRJREU3WEc0Z0lDQWdJQ0JtYjNJZ0tEc2dhVzVrWlhnZ1BqMGdNQ0FtSmlCcGJtUmxlQ0E4SUd4bGJtZDBhRHNnYVc1a1pYZ2dLejBnWkdseUtTQjdYRzRnSUNBZ0lDQWdJR2xtSUNod2NtVmthV05oZEdVb1lYSnlZWGxiYVc1a1pYaGRMQ0JwYm1SbGVDd2dZWEp5WVhrcEtTQnlaWFIxY200Z2FXNWtaWGc3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdJQ0J5WlhSMWNtNGdMVEU3WEc0Z0lDQWdmVHRjYmlBZ2ZWeHVYRzRnSUM4dklGSmxkSFZ5Ym5NZ2RHaGxJR1pwY25OMElHbHVaR1Y0SUc5dUlHRnVJR0Z5Y21GNUxXeHBhMlVnZEdoaGRDQndZWE56WlhNZ1lTQndjbVZrYVdOaGRHVWdkR1Z6ZEZ4dUlDQmZMbVpwYm1SSmJtUmxlQ0E5SUdOeVpXRjBaVkJ5WldScFkyRjBaVWx1WkdWNFJtbHVaR1Z5S0RFcE8xeHVJQ0JmTG1acGJtUk1ZWE4wU1c1a1pYZ2dQU0JqY21WaGRHVlFjbVZrYVdOaGRHVkpibVJsZUVacGJtUmxjaWd0TVNrN1hHNWNiaUFnTHk4Z1ZYTmxJR0VnWTI5dGNHRnlZWFJ2Y2lCbWRXNWpkR2x2YmlCMGJ5Qm1hV2QxY21VZ2IzVjBJSFJvWlNCemJXRnNiR1Z6ZENCcGJtUmxlQ0JoZENCM2FHbGphRnh1SUNBdkx5QmhiaUJ2WW1wbFkzUWdjMmh2ZFd4a0lHSmxJR2x1YzJWeWRHVmtJSE52SUdGeklIUnZJRzFoYVc1MFlXbHVJRzl5WkdWeUxpQlZjMlZ6SUdKcGJtRnllU0J6WldGeVkyZ3VYRzRnSUY4dWMyOXlkR1ZrU1c1a1pYZ2dQU0JtZFc1amRHbHZiaWhoY25KaGVTd2diMkpxTENCcGRHVnlZWFJsWlN3Z1kyOXVkR1Y0ZENrZ2UxeHVJQ0FnSUdsMFpYSmhkR1ZsSUQwZ1kySW9hWFJsY21GMFpXVXNJR052Ym5SbGVIUXNJREVwTzF4dUlDQWdJSFpoY2lCMllXeDFaU0E5SUdsMFpYSmhkR1ZsS0c5aWFpazdYRzRnSUNBZ2RtRnlJR3h2ZHlBOUlEQXNJR2hwWjJnZ1BTQm5aWFJNWlc1bmRHZ29ZWEp5WVhrcE8xeHVJQ0FnSUhkb2FXeGxJQ2hzYjNjZ1BDQm9hV2RvS1NCN1hHNGdJQ0FnSUNCMllYSWdiV2xrSUQwZ1RXRjBhQzVtYkc5dmNpZ29iRzkzSUNzZ2FHbG5hQ2tnTHlBeUtUdGNiaUFnSUNBZ0lHbG1JQ2hwZEdWeVlYUmxaU2hoY25KaGVWdHRhV1JkS1NBOElIWmhiSFZsS1NCc2IzY2dQU0J0YVdRZ0t5QXhPeUJsYkhObElHaHBaMmdnUFNCdGFXUTdYRzRnSUNBZ2ZWeHVJQ0FnSUhKbGRIVnliaUJzYjNjN1hHNGdJSDA3WEc1Y2JpQWdMeThnUjJWdVpYSmhkRzl5SUdaMWJtTjBhVzl1SUhSdklHTnlaV0YwWlNCMGFHVWdhVzVrWlhoUFppQmhibVFnYkdGemRFbHVaR1Y0VDJZZ1puVnVZM1JwYjI1elhHNGdJR1oxYm1OMGFXOXVJR055WldGMFpVbHVaR1Y0Um1sdVpHVnlLR1JwY2l3Z2NISmxaR2xqWVhSbFJtbHVaQ3dnYzI5eWRHVmtTVzVrWlhncElIdGNiaUFnSUNCeVpYUjFjbTRnWm5WdVkzUnBiMjRvWVhKeVlYa3NJR2wwWlcwc0lHbGtlQ2tnZTF4dUlDQWdJQ0FnZG1GeUlHa2dQU0F3TENCc1pXNW5kR2dnUFNCblpYUk1aVzVuZEdnb1lYSnlZWGtwTzF4dUlDQWdJQ0FnYVdZZ0tIUjVjR1Z2WmlCcFpIZ2dQVDBnSjI1MWJXSmxjaWNwSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLR1JwY2lBK0lEQXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHa2dQU0JwWkhnZ1BqMGdNQ0EvSUdsa2VDQTZJRTFoZEdndWJXRjRLR2xrZUNBcklHeGxibWQwYUN3Z2FTazdYRzRnSUNBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCc1pXNW5kR2dnUFNCcFpIZ2dQajBnTUNBL0lFMWhkR2d1YldsdUtHbGtlQ0FySURFc0lHeGxibWQwYUNrZ09pQnBaSGdnS3lCc1pXNW5kR2dnS3lBeE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQjlJR1ZzYzJVZ2FXWWdLSE52Y25SbFpFbHVaR1Y0SUNZbUlHbGtlQ0FtSmlCc1pXNW5kR2dwSUh0Y2JpQWdJQ0FnSUNBZ2FXUjRJRDBnYzI5eWRHVmtTVzVrWlhnb1lYSnlZWGtzSUdsMFpXMHBPMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdZWEp5WVhsYmFXUjRYU0E5UFQwZ2FYUmxiU0EvSUdsa2VDQTZJQzB4TzF4dUlDQWdJQ0FnZlZ4dUlDQWdJQ0FnYVdZZ0tHbDBaVzBnSVQwOUlHbDBaVzBwSUh0Y2JpQWdJQ0FnSUNBZ2FXUjRJRDBnY0hKbFpHbGpZWFJsUm1sdVpDaHpiR2xqWlM1allXeHNLR0Z5Y21GNUxDQnBMQ0JzWlc1bmRHZ3BMQ0JmTG1selRtRk9LVHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJR2xrZUNBK1BTQXdJRDhnYVdSNElDc2dhU0E2SUMweE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ1ptOXlJQ2hwWkhnZ1BTQmthWElnUGlBd0lEOGdhU0E2SUd4bGJtZDBhQ0F0SURFN0lHbGtlQ0ErUFNBd0lDWW1JR2xrZUNBOElHeGxibWQwYURzZ2FXUjRJQ3M5SUdScGNpa2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb1lYSnlZWGxiYVdSNFhTQTlQVDBnYVhSbGJTa2djbVYwZFhKdUlHbGtlRHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQWdJSEpsZEhWeWJpQXRNVHRjYmlBZ0lDQjlPMXh1SUNCOVhHNWNiaUFnTHk4Z1VtVjBkWEp1SUhSb1pTQndiM05wZEdsdmJpQnZaaUIwYUdVZ1ptbHljM1FnYjJOamRYSnlaVzVqWlNCdlppQmhiaUJwZEdWdElHbHVJR0Z1SUdGeWNtRjVMRnh1SUNBdkx5QnZjaUF0TVNCcFppQjBhR1VnYVhSbGJTQnBjeUJ1YjNRZ2FXNWpiSFZrWldRZ2FXNGdkR2hsSUdGeWNtRjVMbHh1SUNBdkx5QkpaaUIwYUdVZ1lYSnlZWGtnYVhNZ2JHRnlaMlVnWVc1a0lHRnNjbVZoWkhrZ2FXNGdjMjl5ZENCdmNtUmxjaXdnY0dGemN5QmdkSEoxWldCY2JpQWdMeThnWm05eUlDb3FhWE5UYjNKMFpXUXFLaUIwYnlCMWMyVWdZbWx1WVhKNUlITmxZWEpqYUM1Y2JpQWdYeTVwYm1SbGVFOW1JRDBnWTNKbFlYUmxTVzVrWlhoR2FXNWtaWElvTVN3Z1h5NW1hVzVrU1c1a1pYZ3NJRjh1YzI5eWRHVmtTVzVrWlhncE8xeHVJQ0JmTG14aGMzUkpibVJsZUU5bUlEMGdZM0psWVhSbFNXNWtaWGhHYVc1a1pYSW9MVEVzSUY4dVptbHVaRXhoYzNSSmJtUmxlQ2s3WEc1Y2JpQWdMeThnUjJWdVpYSmhkR1VnWVc0Z2FXNTBaV2RsY2lCQmNuSmhlU0JqYjI1MFlXbHVhVzVuSUdGdUlHRnlhWFJvYldWMGFXTWdjSEp2WjNKbGMzTnBiMjR1SUVFZ2NHOXlkQ0J2Wmx4dUlDQXZMeUIwYUdVZ2JtRjBhWFpsSUZCNWRHaHZiaUJnY21GdVoyVW9LV0FnWm5WdVkzUnBiMjR1SUZObFpWeHVJQ0F2THlCYmRHaGxJRkI1ZEdodmJpQmtiMk4xYldWdWRHRjBhVzl1WFNob2RIUndPaTh2Wkc5amN5NXdlWFJvYjI0dWIzSm5MMnhwWW5KaGNua3ZablZ1WTNScGIyNXpMbWgwYld3amNtRnVaMlVwTGx4dUlDQmZMbkpoYm1kbElEMGdablZ1WTNScGIyNG9jM1JoY25Rc0lITjBiM0FzSUhOMFpYQXBJSHRjYmlBZ0lDQnBaaUFvYzNSdmNDQTlQU0J1ZFd4c0tTQjdYRzRnSUNBZ0lDQnpkRzl3SUQwZ2MzUmhjblFnZkh3Z01EdGNiaUFnSUNBZ0lITjBZWEowSUQwZ01EdGNiaUFnSUNCOVhHNGdJQ0FnYzNSbGNDQTlJSE4wWlhBZ2ZId2dNVHRjYmx4dUlDQWdJSFpoY2lCc1pXNW5kR2dnUFNCTllYUm9MbTFoZUNoTllYUm9MbU5sYVd3b0tITjBiM0FnTFNCemRHRnlkQ2tnTHlCemRHVndLU3dnTUNrN1hHNGdJQ0FnZG1GeUlISmhibWRsSUQwZ1FYSnlZWGtvYkdWdVozUm9LVHRjYmx4dUlDQWdJR1p2Y2lBb2RtRnlJR2xrZUNBOUlEQTdJR2xrZUNBOElHeGxibWQwYURzZ2FXUjRLeXNzSUhOMFlYSjBJQ3M5SUhOMFpYQXBJSHRjYmlBZ0lDQWdJSEpoYm1kbFcybGtlRjBnUFNCemRHRnlkRHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnlaWFIxY200Z2NtRnVaMlU3WEc0Z0lIMDdYRzVjYmlBZ0x5OGdSblZ1WTNScGIyNGdLR0ZvWlcwcElFWjFibU4wYVc5dWMxeHVJQ0F2THlBdExTMHRMUzB0TFMwdExTMHRMUzB0TFMxY2JseHVJQ0F2THlCRVpYUmxjbTFwYm1WeklIZG9aWFJvWlhJZ2RHOGdaWGhsWTNWMFpTQmhJR1oxYm1OMGFXOXVJR0Z6SUdFZ1kyOXVjM1J5ZFdOMGIzSmNiaUFnTHk4Z2IzSWdZU0J1YjNKdFlXd2dablZ1WTNScGIyNGdkMmwwYUNCMGFHVWdjSEp2ZG1sa1pXUWdZWEpuZFcxbGJuUnpYRzRnSUhaaGNpQmxlR1ZqZFhSbFFtOTFibVFnUFNCbWRXNWpkR2x2YmloemIzVnlZMlZHZFc1akxDQmliM1Z1WkVaMWJtTXNJR052Ym5SbGVIUXNJR05oYkd4cGJtZERiMjUwWlhoMExDQmhjbWR6S1NCN1hHNGdJQ0FnYVdZZ0tDRW9ZMkZzYkdsdVowTnZiblJsZUhRZ2FXNXpkR0Z1WTJWdlppQmliM1Z1WkVaMWJtTXBLU0J5WlhSMWNtNGdjMjkxY21ObFJuVnVZeTVoY0hCc2VTaGpiMjUwWlhoMExDQmhjbWR6S1R0Y2JpQWdJQ0IyWVhJZ2MyVnNaaUE5SUdKaGMyVkRjbVZoZEdVb2MyOTFjbU5sUm5WdVl5NXdjbTkwYjNSNWNHVXBPMXh1SUNBZ0lIWmhjaUJ5WlhOMWJIUWdQU0J6YjNWeVkyVkdkVzVqTG1Gd2NHeDVLSE5sYkdZc0lHRnlaM01wTzF4dUlDQWdJR2xtSUNoZkxtbHpUMkpxWldOMEtISmxjM1ZzZENrcElISmxkSFZ5YmlCeVpYTjFiSFE3WEc0Z0lDQWdjbVYwZFhKdUlITmxiR1k3WEc0Z0lIMDdYRzVjYmlBZ0x5OGdRM0psWVhSbElHRWdablZ1WTNScGIyNGdZbTkxYm1RZ2RHOGdZU0JuYVhabGJpQnZZbXBsWTNRZ0tHRnpjMmxuYm1sdVp5QmdkR2hwYzJBc0lHRnVaQ0JoY21kMWJXVnVkSE1zWEc0Z0lDOHZJRzl3ZEdsdmJtRnNiSGtwTGlCRVpXeGxaMkYwWlhNZ2RHOGdLaXBGUTAxQlUyTnlhWEIwSURVcUtpZHpJRzVoZEdsMlpTQmdSblZ1WTNScGIyNHVZbWx1WkdBZ2FXWmNiaUFnTHk4Z1lYWmhhV3hoWW14bExseHVJQ0JmTG1KcGJtUWdQU0JtZFc1amRHbHZiaWhtZFc1akxDQmpiMjUwWlhoMEtTQjdYRzRnSUNBZ2FXWWdLRzVoZEdsMlpVSnBibVFnSmlZZ1puVnVZeTVpYVc1a0lEMDlQU0J1WVhScGRtVkNhVzVrS1NCeVpYUjFjbTRnYm1GMGFYWmxRbWx1WkM1aGNIQnNlU2htZFc1akxDQnpiR2xqWlM1allXeHNLR0Z5WjNWdFpXNTBjeXdnTVNrcE8xeHVJQ0FnSUdsbUlDZ2hYeTVwYzBaMWJtTjBhVzl1S0daMWJtTXBLU0IwYUhKdmR5QnVaWGNnVkhsd1pVVnljbTl5S0NkQ2FXNWtJRzExYzNRZ1ltVWdZMkZzYkdWa0lHOXVJR0VnWm5WdVkzUnBiMjRuS1R0Y2JpQWdJQ0IyWVhJZ1lYSm5jeUE5SUhOc2FXTmxMbU5oYkd3b1lYSm5kVzFsYm5SekxDQXlLVHRjYmlBZ0lDQjJZWElnWW05MWJtUWdQU0JtZFc1amRHbHZiaWdwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUJsZUdWamRYUmxRbTkxYm1Rb1puVnVZeXdnWW05MWJtUXNJR052Ym5SbGVIUXNJSFJvYVhNc0lHRnlaM011WTI5dVkyRjBLSE5zYVdObExtTmhiR3dvWVhKbmRXMWxiblJ6S1NrcE8xeHVJQ0FnSUgwN1hHNGdJQ0FnY21WMGRYSnVJR0p2ZFc1a08xeHVJQ0I5TzF4dVhHNGdJQzh2SUZCaGNuUnBZV3hzZVNCaGNIQnNlU0JoSUdaMWJtTjBhVzl1SUdKNUlHTnlaV0YwYVc1bklHRWdkbVZ5YzJsdmJpQjBhR0YwSUdoaGN5Qm9ZV1FnYzI5dFpTQnZaaUJwZEhOY2JpQWdMeThnWVhKbmRXMWxiblJ6SUhCeVpTMW1hV3hzWldRc0lIZHBkR2h2ZFhRZ1kyaGhibWRwYm1jZ2FYUnpJR1I1Ym1GdGFXTWdZSFJvYVhOZ0lHTnZiblJsZUhRdUlGOGdZV04wYzF4dUlDQXZMeUJoY3lCaElIQnNZV05sYUc5c1pHVnlMQ0JoYkd4dmQybHVaeUJoYm5rZ1kyOXRZbWx1WVhScGIyNGdiMllnWVhKbmRXMWxiblJ6SUhSdklHSmxJSEJ5WlMxbWFXeHNaV1F1WEc0Z0lGOHVjR0Z5ZEdsaGJDQTlJR1oxYm1OMGFXOXVLR1oxYm1NcElIdGNiaUFnSUNCMllYSWdZbTkxYm1SQmNtZHpJRDBnYzJ4cFkyVXVZMkZzYkNoaGNtZDFiV1Z1ZEhNc0lERXBPMXh1SUNBZ0lIWmhjaUJpYjNWdVpDQTlJR1oxYm1OMGFXOXVLQ2tnZTF4dUlDQWdJQ0FnZG1GeUlIQnZjMmwwYVc5dUlEMGdNQ3dnYkdWdVozUm9JRDBnWW05MWJtUkJjbWR6TG14bGJtZDBhRHRjYmlBZ0lDQWdJSFpoY2lCaGNtZHpJRDBnUVhKeVlYa29iR1Z1WjNSb0tUdGNiaUFnSUNBZ0lHWnZjaUFvZG1GeUlHa2dQU0F3T3lCcElEd2diR1Z1WjNSb095QnBLeXNwSUh0Y2JpQWdJQ0FnSUNBZ1lYSm5jMXRwWFNBOUlHSnZkVzVrUVhKbmMxdHBYU0E5UFQwZ1h5QS9JR0Z5WjNWdFpXNTBjMXR3YjNOcGRHbHZiaXNyWFNBNklHSnZkVzVrUVhKbmMxdHBYVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQWdJSGRvYVd4bElDaHdiM05wZEdsdmJpQThJR0Z5WjNWdFpXNTBjeTVzWlc1bmRHZ3BJR0Z5WjNNdWNIVnphQ2hoY21kMWJXVnVkSE5iY0c5emFYUnBiMjRySzEwcE8xeHVJQ0FnSUNBZ2NtVjBkWEp1SUdWNFpXTjFkR1ZDYjNWdVpDaG1kVzVqTENCaWIzVnVaQ3dnZEdocGN5d2dkR2hwY3l3Z1lYSm5jeWs3WEc0Z0lDQWdmVHRjYmlBZ0lDQnlaWFIxY200Z1ltOTFibVE3WEc0Z0lIMDdYRzVjYmlBZ0x5OGdRbWx1WkNCaElHNTFiV0psY2lCdlppQmhiaUJ2WW1wbFkzUW5jeUJ0WlhSb2IyUnpJSFJ2SUhSb1lYUWdiMkpxWldOMExpQlNaVzFoYVc1cGJtY2dZWEpuZFcxbGJuUnpYRzRnSUM4dklHRnlaU0IwYUdVZ2JXVjBhRzlrSUc1aGJXVnpJSFJ2SUdKbElHSnZkVzVrTGlCVmMyVm1kV3dnWm05eUlHVnVjM1Z5YVc1bklIUm9ZWFFnWVd4c0lHTmhiR3hpWVdOcmMxeHVJQ0F2THlCa1pXWnBibVZrSUc5dUlHRnVJRzlpYW1WamRDQmlaV3h2Ym1jZ2RHOGdhWFF1WEc0Z0lGOHVZbWx1WkVGc2JDQTlJR1oxYm1OMGFXOXVLRzlpYWlrZ2UxeHVJQ0FnSUhaaGNpQnBMQ0JzWlc1bmRHZ2dQU0JoY21kMWJXVnVkSE11YkdWdVozUm9MQ0JyWlhrN1hHNGdJQ0FnYVdZZ0tHeGxibWQwYUNBOFBTQXhLU0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9KMkpwYm1SQmJHd2diWFZ6ZENCaVpTQndZWE56WldRZ1puVnVZM1JwYjI0Z2JtRnRaWE1uS1R0Y2JpQWdJQ0JtYjNJZ0tHa2dQU0F4T3lCcElEd2diR1Z1WjNSb095QnBLeXNwSUh0Y2JpQWdJQ0FnSUd0bGVTQTlJR0Z5WjNWdFpXNTBjMXRwWFR0Y2JpQWdJQ0FnSUc5aWFsdHJaWGxkSUQwZ1h5NWlhVzVrS0c5aWFsdHJaWGxkTENCdlltb3BPMXh1SUNBZ0lIMWNiaUFnSUNCeVpYUjFjbTRnYjJKcU8xeHVJQ0I5TzF4dVhHNGdJQzh2SUUxbGJXOXBlbVVnWVc0Z1pYaHdaVzV6YVhabElHWjFibU4wYVc5dUlHSjVJSE4wYjNKcGJtY2dhWFJ6SUhKbGMzVnNkSE11WEc0Z0lGOHViV1Z0YjJsNlpTQTlJR1oxYm1OMGFXOXVLR1oxYm1Nc0lHaGhjMmhsY2lrZ2UxeHVJQ0FnSUhaaGNpQnRaVzF2YVhwbElEMGdablZ1WTNScGIyNG9hMlY1S1NCN1hHNGdJQ0FnSUNCMllYSWdZMkZqYUdVZ1BTQnRaVzF2YVhwbExtTmhZMmhsTzF4dUlDQWdJQ0FnZG1GeUlHRmtaSEpsYzNNZ1BTQW5KeUFySUNob1lYTm9aWElnUHlCb1lYTm9aWEl1WVhCd2JIa29kR2hwY3l3Z1lYSm5kVzFsYm5SektTQTZJR3RsZVNrN1hHNGdJQ0FnSUNCcFppQW9JVjh1YUdGektHTmhZMmhsTENCaFpHUnlaWE56S1NrZ1kyRmphR1ZiWVdSa2NtVnpjMTBnUFNCbWRXNWpMbUZ3Y0d4NUtIUm9hWE1zSUdGeVozVnRaVzUwY3lrN1hHNGdJQ0FnSUNCeVpYUjFjbTRnWTJGamFHVmJZV1JrY21WemMxMDdYRzRnSUNBZ2ZUdGNiaUFnSUNCdFpXMXZhWHBsTG1OaFkyaGxJRDBnZTMwN1hHNGdJQ0FnY21WMGRYSnVJRzFsYlc5cGVtVTdYRzRnSUgwN1hHNWNiaUFnTHk4Z1JHVnNZWGx6SUdFZ1puVnVZM1JwYjI0Z1ptOXlJSFJvWlNCbmFYWmxiaUJ1ZFcxaVpYSWdiMllnYldsc2JHbHpaV052Ym1SekxDQmhibVFnZEdobGJpQmpZV3hzYzF4dUlDQXZMeUJwZENCM2FYUm9JSFJvWlNCaGNtZDFiV1Z1ZEhNZ2MzVndjR3hwWldRdVhHNGdJRjh1WkdWc1lYa2dQU0JtZFc1amRHbHZiaWhtZFc1akxDQjNZV2wwS1NCN1hHNGdJQ0FnZG1GeUlHRnlaM01nUFNCemJHbGpaUzVqWVd4c0tHRnlaM1Z0Wlc1MGN5d2dNaWs3WEc0Z0lDQWdjbVYwZFhKdUlITmxkRlJwYldWdmRYUW9ablZ1WTNScGIyNG9LWHRjYmlBZ0lDQWdJSEpsZEhWeWJpQm1kVzVqTG1Gd2NHeDVLRzUxYkd3c0lHRnlaM01wTzF4dUlDQWdJSDBzSUhkaGFYUXBPMXh1SUNCOU8xeHVYRzRnSUM4dklFUmxabVZ5Y3lCaElHWjFibU4wYVc5dUxDQnpZMmhsWkhWc2FXNW5JR2wwSUhSdklISjFiaUJoWm5SbGNpQjBhR1VnWTNWeWNtVnVkQ0JqWVd4c0lITjBZV05ySUdoaGMxeHVJQ0F2THlCamJHVmhjbVZrTGx4dUlDQmZMbVJsWm1WeUlEMGdYeTV3WVhKMGFXRnNLRjh1WkdWc1lYa3NJRjhzSURFcE8xeHVYRzRnSUM4dklGSmxkSFZ5Ym5NZ1lTQm1kVzVqZEdsdmJpd2dkR2hoZEN3Z2QyaGxiaUJwYm5admEyVmtMQ0IzYVd4c0lHOXViSGtnWW1VZ2RISnBaMmRsY21Wa0lHRjBJRzF2YzNRZ2IyNWpaVnh1SUNBdkx5QmtkWEpwYm1jZ1lTQm5hWFpsYmlCM2FXNWtiM2NnYjJZZ2RHbHRaUzRnVG05eWJXRnNiSGtzSUhSb1pTQjBhSEp2ZEhSc1pXUWdablZ1WTNScGIyNGdkMmxzYkNCeWRXNWNiaUFnTHk4Z1lYTWdiWFZqYUNCaGN5QnBkQ0JqWVc0c0lIZHBkR2h2ZFhRZ1pYWmxjaUJuYjJsdVp5QnRiM0psSUhSb1lXNGdiMjVqWlNCd1pYSWdZSGRoYVhSZ0lHUjFjbUYwYVc5dU8xeHVJQ0F2THlCaWRYUWdhV1lnZVc5MUoyUWdiR2xyWlNCMGJ5QmthWE5oWW14bElIUm9aU0JsZUdWamRYUnBiMjRnYjI0Z2RHaGxJR3hsWVdScGJtY2daV1JuWlN3Z2NHRnpjMXh1SUNBdkx5QmdlMnhsWVdScGJtYzZJR1poYkhObGZXQXVJRlJ2SUdScGMyRmliR1VnWlhobFkzVjBhVzl1SUc5dUlIUm9aU0IwY21GcGJHbHVaeUJsWkdkbExDQmthWFIwYnk1Y2JpQWdYeTUwYUhKdmRIUnNaU0E5SUdaMWJtTjBhVzl1S0daMWJtTXNJSGRoYVhRc0lHOXdkR2x2Ym5NcElIdGNiaUFnSUNCMllYSWdZMjl1ZEdWNGRDd2dZWEpuY3l3Z2NtVnpkV3gwTzF4dUlDQWdJSFpoY2lCMGFXMWxiM1YwSUQwZ2JuVnNiRHRjYmlBZ0lDQjJZWElnY0hKbGRtbHZkWE1nUFNBd08xeHVJQ0FnSUdsbUlDZ2hiM0IwYVc5dWN5a2diM0IwYVc5dWN5QTlJSHQ5TzF4dUlDQWdJSFpoY2lCc1lYUmxjaUE5SUdaMWJtTjBhVzl1S0NrZ2UxeHVJQ0FnSUNBZ2NISmxkbWx2ZFhNZ1BTQnZjSFJwYjI1ekxteGxZV1JwYm1jZ1BUMDlJR1poYkhObElEOGdNQ0E2SUY4dWJtOTNLQ2s3WEc0Z0lDQWdJQ0IwYVcxbGIzVjBJRDBnYm5Wc2JEdGNiaUFnSUNBZ0lISmxjM1ZzZENBOUlHWjFibU11WVhCd2JIa29ZMjl1ZEdWNGRDd2dZWEpuY3lrN1hHNGdJQ0FnSUNCcFppQW9JWFJwYldWdmRYUXBJR052Ym5SbGVIUWdQU0JoY21keklEMGdiblZzYkR0Y2JpQWdJQ0I5TzF4dUlDQWdJSEpsZEhWeWJpQm1kVzVqZEdsdmJpZ3BJSHRjYmlBZ0lDQWdJSFpoY2lCdWIzY2dQU0JmTG01dmR5Z3BPMXh1SUNBZ0lDQWdhV1lnS0NGd2NtVjJhVzkxY3lBbUppQnZjSFJwYjI1ekxteGxZV1JwYm1jZ1BUMDlJR1poYkhObEtTQndjbVYyYVc5MWN5QTlJRzV2ZHp0Y2JpQWdJQ0FnSUhaaGNpQnlaVzFoYVc1cGJtY2dQU0IzWVdsMElDMGdLRzV2ZHlBdElIQnlaWFpwYjNWektUdGNiaUFnSUNBZ0lHTnZiblJsZUhRZ1BTQjBhR2x6TzF4dUlDQWdJQ0FnWVhKbmN5QTlJR0Z5WjNWdFpXNTBjenRjYmlBZ0lDQWdJR2xtSUNoeVpXMWhhVzVwYm1jZ1BEMGdNQ0I4ZkNCeVpXMWhhVzVwYm1jZ1BpQjNZV2wwS1NCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2gwYVcxbGIzVjBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ1kyeGxZWEpVYVcxbGIzVjBLSFJwYldWdmRYUXBPMXh1SUNBZ0lDQWdJQ0FnSUhScGJXVnZkWFFnUFNCdWRXeHNPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUhCeVpYWnBiM1Z6SUQwZ2JtOTNPMXh1SUNBZ0lDQWdJQ0J5WlhOMWJIUWdQU0JtZFc1akxtRndjR3g1S0dOdmJuUmxlSFFzSUdGeVozTXBPMXh1SUNBZ0lDQWdJQ0JwWmlBb0lYUnBiV1Z2ZFhRcElHTnZiblJsZUhRZ1BTQmhjbWR6SUQwZ2JuVnNiRHRjYmlBZ0lDQWdJSDBnWld4elpTQnBaaUFvSVhScGJXVnZkWFFnSmlZZ2IzQjBhVzl1Y3k1MGNtRnBiR2x1WnlBaFBUMGdabUZzYzJVcElIdGNiaUFnSUNBZ0lDQWdkR2x0Wlc5MWRDQTlJSE5sZEZScGJXVnZkWFFvYkdGMFpYSXNJSEpsYldGcGJtbHVaeWs3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdJQ0J5WlhSMWNtNGdjbVZ6ZFd4ME8xeHVJQ0FnSUgwN1hHNGdJSDA3WEc1Y2JpQWdMeThnVW1WMGRYSnVjeUJoSUdaMWJtTjBhVzl1TENCMGFHRjBMQ0JoY3lCc2IyNW5JR0Z6SUdsMElHTnZiblJwYm5WbGN5QjBieUJpWlNCcGJuWnZhMlZrTENCM2FXeHNJRzV2ZEZ4dUlDQXZMeUJpWlNCMGNtbG5aMlZ5WldRdUlGUm9aU0JtZFc1amRHbHZiaUIzYVd4c0lHSmxJR05oYkd4bFpDQmhablJsY2lCcGRDQnpkRzl3Y3lCaVpXbHVaeUJqWVd4c1pXUWdabTl5WEc0Z0lDOHZJRTRnYldsc2JHbHpaV052Ym1SekxpQkpaaUJnYVcxdFpXUnBZWFJsWUNCcGN5QndZWE56WldRc0lIUnlhV2RuWlhJZ2RHaGxJR1oxYm1OMGFXOXVJRzl1SUhSb1pWeHVJQ0F2THlCc1pXRmthVzVuSUdWa1oyVXNJR2x1YzNSbFlXUWdiMllnZEdobElIUnlZV2xzYVc1bkxseHVJQ0JmTG1SbFltOTFibU5sSUQwZ1puVnVZM1JwYjI0b1puVnVZeXdnZDJGcGRDd2dhVzF0WldScFlYUmxLU0I3WEc0Z0lDQWdkbUZ5SUhScGJXVnZkWFFzSUdGeVozTXNJR052Ym5SbGVIUXNJSFJwYldWemRHRnRjQ3dnY21WemRXeDBPMXh1WEc0Z0lDQWdkbUZ5SUd4aGRHVnlJRDBnWm5WdVkzUnBiMjRvS1NCN1hHNGdJQ0FnSUNCMllYSWdiR0Z6ZENBOUlGOHVibTkzS0NrZ0xTQjBhVzFsYzNSaGJYQTdYRzVjYmlBZ0lDQWdJR2xtSUNoc1lYTjBJRHdnZDJGcGRDQW1KaUJzWVhOMElENDlJREFwSUh0Y2JpQWdJQ0FnSUNBZ2RHbHRaVzkxZENBOUlITmxkRlJwYldWdmRYUW9iR0YwWlhJc0lIZGhhWFFnTFNCc1lYTjBLVHRjYmlBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJSFJwYldWdmRYUWdQU0J1ZFd4c08xeHVJQ0FnSUNBZ0lDQnBaaUFvSVdsdGJXVmthV0YwWlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJSEpsYzNWc2RDQTlJR1oxYm1NdVlYQndiSGtvWTI5dWRHVjRkQ3dnWVhKbmN5azdYRzRnSUNBZ0lDQWdJQ0FnYVdZZ0tDRjBhVzFsYjNWMEtTQmpiMjUwWlhoMElEMGdZWEpuY3lBOUlHNTFiR3c3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUgxY2JpQWdJQ0I5TzF4dVhHNGdJQ0FnY21WMGRYSnVJR1oxYm1OMGFXOXVLQ2tnZTF4dUlDQWdJQ0FnWTI5dWRHVjRkQ0E5SUhSb2FYTTdYRzRnSUNBZ0lDQmhjbWR6SUQwZ1lYSm5kVzFsYm5Sek8xeHVJQ0FnSUNBZ2RHbHRaWE4wWVcxd0lEMGdYeTV1YjNjb0tUdGNiaUFnSUNBZ0lIWmhjaUJqWVd4c1RtOTNJRDBnYVcxdFpXUnBZWFJsSUNZbUlDRjBhVzFsYjNWME8xeHVJQ0FnSUNBZ2FXWWdLQ0YwYVcxbGIzVjBLU0IwYVcxbGIzVjBJRDBnYzJWMFZHbHRaVzkxZENoc1lYUmxjaXdnZDJGcGRDazdYRzRnSUNBZ0lDQnBaaUFvWTJGc2JFNXZkeWtnZTF4dUlDQWdJQ0FnSUNCeVpYTjFiSFFnUFNCbWRXNWpMbUZ3Y0d4NUtHTnZiblJsZUhRc0lHRnlaM01wTzF4dUlDQWdJQ0FnSUNCamIyNTBaWGgwSUQwZ1lYSm5jeUE5SUc1MWJHdzdYRzRnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJSEpsZEhWeWJpQnlaWE4xYkhRN1hHNGdJQ0FnZlR0Y2JpQWdmVHRjYmx4dUlDQXZMeUJTWlhSMWNtNXpJSFJvWlNCbWFYSnpkQ0JtZFc1amRHbHZiaUJ3WVhOelpXUWdZWE1nWVc0Z1lYSm5kVzFsYm5RZ2RHOGdkR2hsSUhObFkyOXVaQ3hjYmlBZ0x5OGdZV3hzYjNkcGJtY2dlVzkxSUhSdklHRmthblZ6ZENCaGNtZDFiV1Z1ZEhNc0lISjFiaUJqYjJSbElHSmxabTl5WlNCaGJtUWdZV1owWlhJc0lHRnVaRnh1SUNBdkx5QmpiMjVrYVhScGIyNWhiR3g1SUdWNFpXTjFkR1VnZEdobElHOXlhV2RwYm1Gc0lHWjFibU4wYVc5dUxseHVJQ0JmTG5keVlYQWdQU0JtZFc1amRHbHZiaWhtZFc1akxDQjNjbUZ3Y0dWeUtTQjdYRzRnSUNBZ2NtVjBkWEp1SUY4dWNHRnlkR2xoYkNoM2NtRndjR1Z5TENCbWRXNWpLVHRjYmlBZ2ZUdGNibHh1SUNBdkx5QlNaWFIxY201eklHRWdibVZuWVhSbFpDQjJaWEp6YVc5dUlHOW1JSFJvWlNCd1lYTnpaV1F0YVc0Z2NISmxaR2xqWVhSbExseHVJQ0JmTG01bFoyRjBaU0E5SUdaMWJtTjBhVzl1S0hCeVpXUnBZMkYwWlNrZ2UxeHVJQ0FnSUhKbGRIVnliaUJtZFc1amRHbHZiaWdwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUFoY0hKbFpHbGpZWFJsTG1Gd2NHeDVLSFJvYVhNc0lHRnlaM1Z0Wlc1MGN5azdYRzRnSUNBZ2ZUdGNiaUFnZlR0Y2JseHVJQ0F2THlCU1pYUjFjbTV6SUdFZ1puVnVZM1JwYjI0Z2RHaGhkQ0JwY3lCMGFHVWdZMjl0Y0c5emFYUnBiMjRnYjJZZ1lTQnNhWE4wSUc5bUlHWjFibU4wYVc5dWN5d2daV0ZqYUZ4dUlDQXZMeUJqYjI1emRXMXBibWNnZEdobElISmxkSFZ5YmlCMllXeDFaU0J2WmlCMGFHVWdablZ1WTNScGIyNGdkR2hoZENCbWIyeHNiM2R6TGx4dUlDQmZMbU52YlhCdmMyVWdQU0JtZFc1amRHbHZiaWdwSUh0Y2JpQWdJQ0IyWVhJZ1lYSm5jeUE5SUdGeVozVnRaVzUwY3p0Y2JpQWdJQ0IyWVhJZ2MzUmhjblFnUFNCaGNtZHpMbXhsYm1kMGFDQXRJREU3WEc0Z0lDQWdjbVYwZFhKdUlHWjFibU4wYVc5dUtDa2dlMXh1SUNBZ0lDQWdkbUZ5SUdrZ1BTQnpkR0Z5ZER0Y2JpQWdJQ0FnSUhaaGNpQnlaWE4xYkhRZ1BTQmhjbWR6VzNOMFlYSjBYUzVoY0hCc2VTaDBhR2x6TENCaGNtZDFiV1Z1ZEhNcE8xeHVJQ0FnSUNBZ2QyaHBiR1VnS0drdExTa2djbVZ6ZFd4MElEMGdZWEpuYzF0cFhTNWpZV3hzS0hSb2FYTXNJSEpsYzNWc2RDazdYRzRnSUNBZ0lDQnlaWFIxY200Z2NtVnpkV3gwTzF4dUlDQWdJSDA3WEc0Z0lIMDdYRzVjYmlBZ0x5OGdVbVYwZFhKdWN5QmhJR1oxYm1OMGFXOXVJSFJvWVhRZ2QybHNiQ0J2Ym14NUlHSmxJR1Y0WldOMWRHVmtJRzl1SUdGdVpDQmhablJsY2lCMGFHVWdUblJvSUdOaGJHd3VYRzRnSUY4dVlXWjBaWElnUFNCbWRXNWpkR2x2YmloMGFXMWxjeXdnWm5WdVl5a2dlMXh1SUNBZ0lISmxkSFZ5YmlCbWRXNWpkR2x2YmlncElIdGNiaUFnSUNBZ0lHbG1JQ2d0TFhScGJXVnpJRHdnTVNrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1puVnVZeTVoY0hCc2VTaDBhR2x6TENCaGNtZDFiV1Z1ZEhNcE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgwN1hHNGdJSDA3WEc1Y2JpQWdMeThnVW1WMGRYSnVjeUJoSUdaMWJtTjBhVzl1SUhSb1lYUWdkMmxzYkNCdmJteDVJR0psSUdWNFpXTjFkR1ZrSUhWd0lIUnZJQ2hpZFhRZ2JtOTBJR2x1WTJ4MVpHbHVaeWtnZEdobElFNTBhQ0JqWVd4c0xseHVJQ0JmTG1KbFptOXlaU0E5SUdaMWJtTjBhVzl1S0hScGJXVnpMQ0JtZFc1aktTQjdYRzRnSUNBZ2RtRnlJRzFsYlc4N1hHNGdJQ0FnY21WMGRYSnVJR1oxYm1OMGFXOXVLQ2tnZTF4dUlDQWdJQ0FnYVdZZ0tDMHRkR2x0WlhNZ1BpQXdLU0I3WEc0Z0lDQWdJQ0FnSUcxbGJXOGdQU0JtZFc1akxtRndjR3g1S0hSb2FYTXNJR0Z5WjNWdFpXNTBjeWs3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdJQ0JwWmlBb2RHbHRaWE1nUEQwZ01Ta2dablZ1WXlBOUlHNTFiR3c3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdiV1Z0Ynp0Y2JpQWdJQ0I5TzF4dUlDQjlPMXh1WEc0Z0lDOHZJRkpsZEhWeWJuTWdZU0JtZFc1amRHbHZiaUIwYUdGMElIZHBiR3dnWW1VZ1pYaGxZM1YwWldRZ1lYUWdiVzl6ZENCdmJtVWdkR2x0WlN3Z2JtOGdiV0YwZEdWeUlHaHZkMXh1SUNBdkx5QnZablJsYmlCNWIzVWdZMkZzYkNCcGRDNGdWWE5sWm5Wc0lHWnZjaUJzWVhwNUlHbHVhWFJwWVd4cGVtRjBhVzl1TGx4dUlDQmZMbTl1WTJVZ1BTQmZMbkJoY25ScFlXd29YeTVpWldadmNtVXNJRElwTzF4dVhHNGdJQzh2SUU5aWFtVmpkQ0JHZFc1amRHbHZibk5jYmlBZ0x5OGdMUzB0TFMwdExTMHRMUzB0TFMwdExWeHVYRzRnSUM4dklFdGxlWE1nYVc0Z1NVVWdQQ0E1SUhSb1lYUWdkMjl1SjNRZ1ltVWdhWFJsY21GMFpXUWdZbmtnWUdadmNpQnJaWGtnYVc0Z0xpNHVZQ0JoYm1RZ2RHaDFjeUJ0YVhOelpXUXVYRzRnSUhaaGNpQm9ZWE5GYm5WdFFuVm5JRDBnSVh0MGIxTjBjbWx1WnpvZ2JuVnNiSDB1Y0hKdmNHVnlkSGxKYzBWdWRXMWxjbUZpYkdVb0ozUnZVM1J5YVc1bkp5azdYRzRnSUhaaGNpQnViMjVGYm5WdFpYSmhZbXhsVUhKdmNITWdQU0JiSjNaaGJIVmxUMlluTENBbmFYTlFjbTkwYjNSNWNHVlBaaWNzSUNkMGIxTjBjbWx1Wnljc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSjNCeWIzQmxjblI1U1hORmJuVnRaWEpoWW14bEp5d2dKMmhoYzA5M2JsQnliM0JsY25SNUp5d2dKM1J2VEc5allXeGxVM1J5YVc1bkoxMDdYRzVjYmlBZ1puVnVZM1JwYjI0Z1kyOXNiR1ZqZEU1dmJrVnVkVzFRY205d2N5aHZZbW9zSUd0bGVYTXBJSHRjYmlBZ0lDQjJZWElnYm05dVJXNTFiVWxrZUNBOUlHNXZia1Z1ZFcxbGNtRmliR1ZRY205d2N5NXNaVzVuZEdnN1hHNGdJQ0FnZG1GeUlHTnZibk4wY25WamRHOXlJRDBnYjJKcUxtTnZibk4wY25WamRHOXlPMXh1SUNBZ0lIWmhjaUJ3Y205MGJ5QTlJQ2hmTG1selJuVnVZM1JwYjI0b1kyOXVjM1J5ZFdOMGIzSXBJQ1ltSUdOdmJuTjBjblZqZEc5eUxuQnliM1J2ZEhsd1pTa2dmSHdnVDJKcVVISnZkRzg3WEc1Y2JpQWdJQ0F2THlCRGIyNXpkSEoxWTNSdmNpQnBjeUJoSUhOd1pXTnBZV3dnWTJGelpTNWNiaUFnSUNCMllYSWdjSEp2Y0NBOUlDZGpiMjV6ZEhKMVkzUnZjaWM3WEc0Z0lDQWdhV1lnS0Y4dWFHRnpLRzlpYWl3Z2NISnZjQ2tnSmlZZ0lWOHVZMjl1ZEdGcGJuTW9hMlY1Y3l3Z2NISnZjQ2twSUd0bGVYTXVjSFZ6YUNod2NtOXdLVHRjYmx4dUlDQWdJSGRvYVd4bElDaHViMjVGYm5WdFNXUjRMUzBwSUh0Y2JpQWdJQ0FnSUhCeWIzQWdQU0J1YjI1RmJuVnRaWEpoWW14bFVISnZjSE5iYm05dVJXNTFiVWxrZUYwN1hHNGdJQ0FnSUNCcFppQW9jSEp2Y0NCcGJpQnZZbW9nSmlZZ2IySnFXM0J5YjNCZElDRTlQU0J3Y205MGIxdHdjbTl3WFNBbUppQWhYeTVqYjI1MFlXbHVjeWhyWlhsekxDQndjbTl3S1NrZ2UxeHVJQ0FnSUNBZ0lDQnJaWGx6TG5CMWMyZ29jSEp2Y0NrN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dUlDQjlYRzVjYmlBZ0x5OGdVbVYwY21sbGRtVWdkR2hsSUc1aGJXVnpJRzltSUdGdUlHOWlhbVZqZENkeklHOTNiaUJ3Y205d1pYSjBhV1Z6TGx4dUlDQXZMeUJFWld4bFoyRjBaWE1nZEc4Z0tpcEZRMDFCVTJOeWFYQjBJRFVxS2lkeklHNWhkR2wyWlNCZ1QySnFaV04wTG10bGVYTmdYRzRnSUY4dWEyVjVjeUE5SUdaMWJtTjBhVzl1S0c5aWFpa2dlMXh1SUNBZ0lHbG1JQ2doWHk1cGMwOWlhbVZqZENodlltb3BLU0J5WlhSMWNtNGdXMTA3WEc0Z0lDQWdhV1lnS0c1aGRHbDJaVXRsZVhNcElISmxkSFZ5YmlCdVlYUnBkbVZMWlhsektHOWlhaWs3WEc0Z0lDQWdkbUZ5SUd0bGVYTWdQU0JiWFR0Y2JpQWdJQ0JtYjNJZ0tIWmhjaUJyWlhrZ2FXNGdiMkpxS1NCcFppQW9YeTVvWVhNb2IySnFMQ0JyWlhrcEtTQnJaWGx6TG5CMWMyZ29hMlY1S1R0Y2JpQWdJQ0F2THlCQmFHVnRMQ0JKUlNBOElEa3VYRzRnSUNBZ2FXWWdLR2hoYzBWdWRXMUNkV2NwSUdOdmJHeGxZM1JPYjI1RmJuVnRVSEp2Y0hNb2IySnFMQ0JyWlhsektUdGNiaUFnSUNCeVpYUjFjbTRnYTJWNWN6dGNiaUFnZlR0Y2JseHVJQ0F2THlCU1pYUnlhV1YyWlNCaGJHd2dkR2hsSUhCeWIzQmxjblI1SUc1aGJXVnpJRzltSUdGdUlHOWlhbVZqZEM1Y2JpQWdYeTVoYkd4TFpYbHpJRDBnWm5WdVkzUnBiMjRvYjJKcUtTQjdYRzRnSUNBZ2FXWWdLQ0ZmTG1selQySnFaV04wS0c5aWFpa3BJSEpsZEhWeWJpQmJYVHRjYmlBZ0lDQjJZWElnYTJWNWN5QTlJRnRkTzF4dUlDQWdJR1p2Y2lBb2RtRnlJR3RsZVNCcGJpQnZZbW9wSUd0bGVYTXVjSFZ6YUNoclpYa3BPMXh1SUNBZ0lDOHZJRUZvWlcwc0lFbEZJRHdnT1M1Y2JpQWdJQ0JwWmlBb2FHRnpSVzUxYlVKMVp5a2dZMjlzYkdWamRFNXZia1Z1ZFcxUWNtOXdjeWh2WW1vc0lHdGxlWE1wTzF4dUlDQWdJSEpsZEhWeWJpQnJaWGx6TzF4dUlDQjlPMXh1WEc0Z0lDOHZJRkpsZEhKcFpYWmxJSFJvWlNCMllXeDFaWE1nYjJZZ1lXNGdiMkpxWldOMEozTWdjSEp2Y0dWeWRHbGxjeTVjYmlBZ1h5NTJZV3gxWlhNZ1BTQm1kVzVqZEdsdmJpaHZZbW9wSUh0Y2JpQWdJQ0IyWVhJZ2EyVjVjeUE5SUY4dWEyVjVjeWh2WW1vcE8xeHVJQ0FnSUhaaGNpQnNaVzVuZEdnZ1BTQnJaWGx6TG14bGJtZDBhRHRjYmlBZ0lDQjJZWElnZG1Gc2RXVnpJRDBnUVhKeVlYa29iR1Z1WjNSb0tUdGNiaUFnSUNCbWIzSWdLSFpoY2lCcElEMGdNRHNnYVNBOElHeGxibWQwYURzZ2FTc3JLU0I3WEc0Z0lDQWdJQ0IyWVd4MVpYTmJhVjBnUFNCdlltcGJhMlY1YzF0cFhWMDdYRzRnSUNBZ2ZWeHVJQ0FnSUhKbGRIVnliaUIyWVd4MVpYTTdYRzRnSUgwN1hHNWNiaUFnTHk4Z1VtVjBkWEp1Y3lCMGFHVWdjbVZ6ZFd4MGN5QnZaaUJoY0hCc2VXbHVaeUIwYUdVZ2FYUmxjbUYwWldVZ2RHOGdaV0ZqYUNCbGJHVnRaVzUwSUc5bUlIUm9aU0J2WW1wbFkzUmNiaUFnTHk4Z1NXNGdZMjl1ZEhKaGMzUWdkRzhnWHk1dFlYQWdhWFFnY21WMGRYSnVjeUJoYmlCdlltcGxZM1JjYmlBZ1h5NXRZWEJQWW1wbFkzUWdQU0JtZFc1amRHbHZiaWh2WW1vc0lHbDBaWEpoZEdWbExDQmpiMjUwWlhoMEtTQjdYRzRnSUNBZ2FYUmxjbUYwWldVZ1BTQmpZaWhwZEdWeVlYUmxaU3dnWTI5dWRHVjRkQ2s3WEc0Z0lDQWdkbUZ5SUd0bGVYTWdQU0FnWHk1clpYbHpLRzlpYWlrc1hHNGdJQ0FnSUNBZ0lDQWdiR1Z1WjNSb0lEMGdhMlY1Y3k1c1pXNW5kR2dzWEc0Z0lDQWdJQ0FnSUNBZ2NtVnpkV3gwY3lBOUlIdDlMRnh1SUNBZ0lDQWdJQ0FnSUdOMWNuSmxiblJMWlhrN1hHNGdJQ0FnSUNCbWIzSWdLSFpoY2lCcGJtUmxlQ0E5SURBN0lHbHVaR1Y0SUR3Z2JHVnVaM1JvT3lCcGJtUmxlQ3NyS1NCN1hHNGdJQ0FnSUNBZ0lHTjFjbkpsYm5STFpYa2dQU0JyWlhselcybHVaR1Y0WFR0Y2JpQWdJQ0FnSUNBZ2NtVnpkV3gwYzF0amRYSnlaVzUwUzJWNVhTQTlJR2wwWlhKaGRHVmxLRzlpYWx0amRYSnlaVzUwUzJWNVhTd2dZM1Z5Y21WdWRFdGxlU3dnYjJKcUtUdGNiaUFnSUNBZ0lIMWNiaUFnSUNBZ0lISmxkSFZ5YmlCeVpYTjFiSFJ6TzF4dUlDQjlPMXh1WEc0Z0lDOHZJRU52Ym5abGNuUWdZVzRnYjJKcVpXTjBJR2x1ZEc4Z1lTQnNhWE4wSUc5bUlHQmJhMlY1TENCMllXeDFaVjFnSUhCaGFYSnpMbHh1SUNCZkxuQmhhWEp6SUQwZ1puVnVZM1JwYjI0b2IySnFLU0I3WEc0Z0lDQWdkbUZ5SUd0bGVYTWdQU0JmTG10bGVYTW9iMkpxS1R0Y2JpQWdJQ0IyWVhJZ2JHVnVaM1JvSUQwZ2EyVjVjeTVzWlc1bmRHZzdYRzRnSUNBZ2RtRnlJSEJoYVhKeklEMGdRWEp5WVhrb2JHVnVaM1JvS1R0Y2JpQWdJQ0JtYjNJZ0tIWmhjaUJwSUQwZ01Ec2dhU0E4SUd4bGJtZDBhRHNnYVNzcktTQjdYRzRnSUNBZ0lDQndZV2x5YzF0cFhTQTlJRnRyWlhselcybGRMQ0J2WW1wYmEyVjVjMXRwWFYxZE8xeHVJQ0FnSUgxY2JpQWdJQ0J5WlhSMWNtNGdjR0ZwY25NN1hHNGdJSDA3WEc1Y2JpQWdMeThnU1c1MlpYSjBJSFJvWlNCclpYbHpJR0Z1WkNCMllXeDFaWE1nYjJZZ1lXNGdiMkpxWldOMExpQlVhR1VnZG1Gc2RXVnpJRzExYzNRZ1ltVWdjMlZ5YVdGc2FYcGhZbXhsTGx4dUlDQmZMbWx1ZG1WeWRDQTlJR1oxYm1OMGFXOXVLRzlpYWlrZ2UxeHVJQ0FnSUhaaGNpQnlaWE4xYkhRZ1BTQjdmVHRjYmlBZ0lDQjJZWElnYTJWNWN5QTlJRjh1YTJWNWN5aHZZbW9wTzF4dUlDQWdJR1p2Y2lBb2RtRnlJR2tnUFNBd0xDQnNaVzVuZEdnZ1BTQnJaWGx6TG14bGJtZDBhRHNnYVNBOElHeGxibWQwYURzZ2FTc3JLU0I3WEc0Z0lDQWdJQ0J5WlhOMWJIUmJiMkpxVzJ0bGVYTmJhVjFkWFNBOUlHdGxlWE5iYVYwN1hHNGdJQ0FnZlZ4dUlDQWdJSEpsZEhWeWJpQnlaWE4xYkhRN1hHNGdJSDA3WEc1Y2JpQWdMeThnVW1WMGRYSnVJR0VnYzI5eWRHVmtJR3hwYzNRZ2IyWWdkR2hsSUdaMWJtTjBhVzl1SUc1aGJXVnpJR0YyWVdsc1lXSnNaU0J2YmlCMGFHVWdiMkpxWldOMExseHVJQ0F2THlCQmJHbGhjMlZrSUdGeklHQnRaWFJvYjJSellGeHVJQ0JmTG1aMWJtTjBhVzl1Y3lBOUlGOHViV1YwYUc5a2N5QTlJR1oxYm1OMGFXOXVLRzlpYWlrZ2UxeHVJQ0FnSUhaaGNpQnVZVzFsY3lBOUlGdGRPMXh1SUNBZ0lHWnZjaUFvZG1GeUlHdGxlU0JwYmlCdlltb3BJSHRjYmlBZ0lDQWdJR2xtSUNoZkxtbHpSblZ1WTNScGIyNG9iMkpxVzJ0bGVWMHBLU0J1WVcxbGN5NXdkWE5vS0d0bGVTazdYRzRnSUNBZ2ZWeHVJQ0FnSUhKbGRIVnliaUJ1WVcxbGN5NXpiM0owS0NrN1hHNGdJSDA3WEc1Y2JpQWdMeThnUlhoMFpXNWtJR0VnWjJsMlpXNGdiMkpxWldOMElIZHBkR2dnWVd4c0lIUm9aU0J3Y205d1pYSjBhV1Z6SUdsdUlIQmhjM05sWkMxcGJpQnZZbXBsWTNRb2N5a3VYRzRnSUY4dVpYaDBaVzVrSUQwZ1kzSmxZWFJsUVhOemFXZHVaWElvWHk1aGJHeExaWGx6S1R0Y2JseHVJQ0F2THlCQmMzTnBaMjV6SUdFZ1oybDJaVzRnYjJKcVpXTjBJSGRwZEdnZ1lXeHNJSFJvWlNCdmQyNGdjSEp2Y0dWeWRHbGxjeUJwYmlCMGFHVWdjR0Z6YzJWa0xXbHVJRzlpYW1WamRDaHpLVnh1SUNBdkx5QW9hSFIwY0hNNkx5OWtaWFpsYkc5d1pYSXViVzk2YVd4c1lTNXZjbWN2Wkc5amN5OVhaV0l2U21GMllWTmpjbWx3ZEM5U1pXWmxjbVZ1WTJVdlIyeHZZbUZzWDA5aWFtVmpkSE12VDJKcVpXTjBMMkZ6YzJsbmJpbGNiaUFnWHk1bGVIUmxibVJQZDI0Z1BTQmZMbUZ6YzJsbmJpQTlJR055WldGMFpVRnpjMmxuYm1WeUtGOHVhMlY1Y3lrN1hHNWNiaUFnTHk4Z1VtVjBkWEp1Y3lCMGFHVWdabWx5YzNRZ2EyVjVJRzl1SUdGdUlHOWlhbVZqZENCMGFHRjBJSEJoYzNObGN5QmhJSEJ5WldScFkyRjBaU0IwWlhOMFhHNGdJRjh1Wm1sdVpFdGxlU0E5SUdaMWJtTjBhVzl1S0c5aWFpd2djSEpsWkdsallYUmxMQ0JqYjI1MFpYaDBLU0I3WEc0Z0lDQWdjSEpsWkdsallYUmxJRDBnWTJJb2NISmxaR2xqWVhSbExDQmpiMjUwWlhoMEtUdGNiaUFnSUNCMllYSWdhMlY1Y3lBOUlGOHVhMlY1Y3lodlltb3BMQ0JyWlhrN1hHNGdJQ0FnWm05eUlDaDJZWElnYVNBOUlEQXNJR3hsYm1kMGFDQTlJR3RsZVhNdWJHVnVaM1JvT3lCcElEd2diR1Z1WjNSb095QnBLeXNwSUh0Y2JpQWdJQ0FnSUd0bGVTQTlJR3RsZVhOYmFWMDdYRzRnSUNBZ0lDQnBaaUFvY0hKbFpHbGpZWFJsS0c5aWFsdHJaWGxkTENCclpYa3NJRzlpYWlrcElISmxkSFZ5YmlCclpYazdYRzRnSUNBZ2ZWeHVJQ0I5TzF4dVhHNGdJQzh2SUZKbGRIVnliaUJoSUdOdmNIa2diMllnZEdobElHOWlhbVZqZENCdmJteDVJR052Ym5SaGFXNXBibWNnZEdobElIZG9hWFJsYkdsemRHVmtJSEJ5YjNCbGNuUnBaWE11WEc0Z0lGOHVjR2xqYXlBOUlHWjFibU4wYVc5dUtHOWlhbVZqZEN3Z2IybDBaWEpoZEdWbExDQmpiMjUwWlhoMEtTQjdYRzRnSUNBZ2RtRnlJSEpsYzNWc2RDQTlJSHQ5TENCdlltb2dQU0J2WW1wbFkzUXNJR2wwWlhKaGRHVmxMQ0JyWlhsek8xeHVJQ0FnSUdsbUlDaHZZbW9nUFQwZ2JuVnNiQ2tnY21WMGRYSnVJSEpsYzNWc2REdGNiaUFnSUNCcFppQW9YeTVwYzBaMWJtTjBhVzl1S0c5cGRHVnlZWFJsWlNrcElIdGNiaUFnSUNBZ0lHdGxlWE1nUFNCZkxtRnNiRXRsZVhNb2IySnFLVHRjYmlBZ0lDQWdJR2wwWlhKaGRHVmxJRDBnYjNCMGFXMXBlbVZEWWlodmFYUmxjbUYwWldVc0lHTnZiblJsZUhRcE8xeHVJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0JyWlhseklEMGdabXhoZEhSbGJpaGhjbWQxYldWdWRITXNJR1poYkhObExDQm1ZV3h6WlN3Z01TazdYRzRnSUNBZ0lDQnBkR1Z5WVhSbFpTQTlJR1oxYm1OMGFXOXVLSFpoYkhWbExDQnJaWGtzSUc5aWFpa2dleUJ5WlhSMWNtNGdhMlY1SUdsdUlHOWlhanNnZlR0Y2JpQWdJQ0FnSUc5aWFpQTlJRTlpYW1WamRDaHZZbW9wTzF4dUlDQWdJSDFjYmlBZ0lDQm1iM0lnS0haaGNpQnBJRDBnTUN3Z2JHVnVaM1JvSUQwZ2EyVjVjeTVzWlc1bmRHZzdJR2tnUENCc1pXNW5kR2c3SUdrckt5a2dlMXh1SUNBZ0lDQWdkbUZ5SUd0bGVTQTlJR3RsZVhOYmFWMDdYRzRnSUNBZ0lDQjJZWElnZG1Gc2RXVWdQU0J2WW1wYmEyVjVYVHRjYmlBZ0lDQWdJR2xtSUNocGRHVnlZWFJsWlNoMllXeDFaU3dnYTJWNUxDQnZZbW9wS1NCeVpYTjFiSFJiYTJWNVhTQTlJSFpoYkhWbE8xeHVJQ0FnSUgxY2JpQWdJQ0J5WlhSMWNtNGdjbVZ6ZFd4ME8xeHVJQ0I5TzF4dVhHNGdJQ0F2THlCU1pYUjFjbTRnWVNCamIzQjVJRzltSUhSb1pTQnZZbXBsWTNRZ2QybDBhRzkxZENCMGFHVWdZbXhoWTJ0c2FYTjBaV1FnY0hKdmNHVnlkR2xsY3k1Y2JpQWdYeTV2YldsMElEMGdablZ1WTNScGIyNG9iMkpxTENCcGRHVnlZWFJsWlN3Z1kyOXVkR1Y0ZENrZ2UxeHVJQ0FnSUdsbUlDaGZMbWx6Um5WdVkzUnBiMjRvYVhSbGNtRjBaV1VwS1NCN1hHNGdJQ0FnSUNCcGRHVnlZWFJsWlNBOUlGOHVibVZuWVhSbEtHbDBaWEpoZEdWbEtUdGNiaUFnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnZG1GeUlHdGxlWE1nUFNCZkxtMWhjQ2htYkdGMGRHVnVLR0Z5WjNWdFpXNTBjeXdnWm1Gc2MyVXNJR1poYkhObExDQXhLU3dnVTNSeWFXNW5LVHRjYmlBZ0lDQWdJR2wwWlhKaGRHVmxJRDBnWm5WdVkzUnBiMjRvZG1Gc2RXVXNJR3RsZVNrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z0lWOHVZMjl1ZEdGcGJuTW9hMlY1Y3l3Z2EyVjVLVHRjYmlBZ0lDQWdJSDA3WEc0Z0lDQWdmVnh1SUNBZ0lISmxkSFZ5YmlCZkxuQnBZMnNvYjJKcUxDQnBkR1Z5WVhSbFpTd2dZMjl1ZEdWNGRDazdYRzRnSUgwN1hHNWNiaUFnTHk4Z1JtbHNiQ0JwYmlCaElHZHBkbVZ1SUc5aWFtVmpkQ0IzYVhSb0lHUmxabUYxYkhRZ2NISnZjR1Z5ZEdsbGN5NWNiaUFnWHk1a1pXWmhkV3gwY3lBOUlHTnlaV0YwWlVGemMybG5ibVZ5S0Y4dVlXeHNTMlY1Y3l3Z2RISjFaU2s3WEc1Y2JpQWdMeThnUTNKbFlYUmxjeUJoYmlCdlltcGxZM1FnZEdoaGRDQnBibWhsY21sMGN5Qm1jbTl0SUhSb1pTQm5hWFpsYmlCd2NtOTBiM1I1Y0dVZ2IySnFaV04wTGx4dUlDQXZMeUJKWmlCaFpHUnBkR2x2Ym1Gc0lIQnliM0JsY25ScFpYTWdZWEpsSUhCeWIzWnBaR1ZrSUhSb1pXNGdkR2hsZVNCM2FXeHNJR0psSUdGa1pHVmtJSFJ2SUhSb1pWeHVJQ0F2THlCamNtVmhkR1ZrSUc5aWFtVmpkQzVjYmlBZ1h5NWpjbVZoZEdVZ1BTQm1kVzVqZEdsdmJpaHdjbTkwYjNSNWNHVXNJSEJ5YjNCektTQjdYRzRnSUNBZ2RtRnlJSEpsYzNWc2RDQTlJR0poYzJWRGNtVmhkR1VvY0hKdmRHOTBlWEJsS1R0Y2JpQWdJQ0JwWmlBb2NISnZjSE1wSUY4dVpYaDBaVzVrVDNkdUtISmxjM1ZzZEN3Z2NISnZjSE1wTzF4dUlDQWdJSEpsZEhWeWJpQnlaWE4xYkhRN1hHNGdJSDA3WEc1Y2JpQWdMeThnUTNKbFlYUmxJR0VnS0hOb1lXeHNiM2N0WTJ4dmJtVmtLU0JrZFhCc2FXTmhkR1VnYjJZZ1lXNGdiMkpxWldOMExseHVJQ0JmTG1Oc2IyNWxJRDBnWm5WdVkzUnBiMjRvYjJKcUtTQjdYRzRnSUNBZ2FXWWdLQ0ZmTG1selQySnFaV04wS0c5aWFpa3BJSEpsZEhWeWJpQnZZbW83WEc0Z0lDQWdjbVYwZFhKdUlGOHVhWE5CY25KaGVTaHZZbW9wSUQ4Z2IySnFMbk5zYVdObEtDa2dPaUJmTG1WNGRHVnVaQ2g3ZlN3Z2IySnFLVHRjYmlBZ2ZUdGNibHh1SUNBdkx5Qkpiblp2YTJWeklHbHVkR1Z5WTJWd2RHOXlJSGRwZEdnZ2RHaGxJRzlpYWl3Z1lXNWtJSFJvWlc0Z2NtVjBkWEp1Y3lCdlltb3VYRzRnSUM4dklGUm9aU0J3Y21sdFlYSjVJSEIxY25CdmMyVWdiMllnZEdocGN5QnRaWFJvYjJRZ2FYTWdkRzhnWENKMFlYQWdhVzUwYjF3aUlHRWdiV1YwYUc5a0lHTm9ZV2x1TENCcGJseHVJQ0F2THlCdmNtUmxjaUIwYnlCd1pYSm1iM0p0SUc5d1pYSmhkR2x2Ym5NZ2IyNGdhVzUwWlhKdFpXUnBZWFJsSUhKbGMzVnNkSE1nZDJsMGFHbHVJSFJvWlNCamFHRnBiaTVjYmlBZ1h5NTBZWEFnUFNCbWRXNWpkR2x2Ymlodlltb3NJR2x1ZEdWeVkyVndkRzl5S1NCN1hHNGdJQ0FnYVc1MFpYSmpaWEIwYjNJb2IySnFLVHRjYmlBZ0lDQnlaWFIxY200Z2IySnFPMXh1SUNCOU8xeHVYRzRnSUM4dklGSmxkSFZ5Ym5NZ2QyaGxkR2hsY2lCaGJpQnZZbXBsWTNRZ2FHRnpJR0VnWjJsMlpXNGdjMlYwSUc5bUlHQnJaWGs2ZG1Gc2RXVmdJSEJoYVhKekxseHVJQ0JmTG1selRXRjBZMmdnUFNCbWRXNWpkR2x2YmlodlltcGxZM1FzSUdGMGRISnpLU0I3WEc0Z0lDQWdkbUZ5SUd0bGVYTWdQU0JmTG10bGVYTW9ZWFIwY25NcExDQnNaVzVuZEdnZ1BTQnJaWGx6TG14bGJtZDBhRHRjYmlBZ0lDQnBaaUFvYjJKcVpXTjBJRDA5SUc1MWJHd3BJSEpsZEhWeWJpQWhiR1Z1WjNSb08xeHVJQ0FnSUhaaGNpQnZZbW9nUFNCUFltcGxZM1FvYjJKcVpXTjBLVHRjYmlBZ0lDQm1iM0lnS0haaGNpQnBJRDBnTURzZ2FTQThJR3hsYm1kMGFEc2dhU3NyS1NCN1hHNGdJQ0FnSUNCMllYSWdhMlY1SUQwZ2EyVjVjMXRwWFR0Y2JpQWdJQ0FnSUdsbUlDaGhkSFJ5YzF0clpYbGRJQ0U5UFNCdlltcGJhMlY1WFNCOGZDQWhLR3RsZVNCcGJpQnZZbW9wS1NCeVpYUjFjbTRnWm1Gc2MyVTdYRzRnSUNBZ2ZWeHVJQ0FnSUhKbGRIVnliaUIwY25WbE8xeHVJQ0I5TzF4dVhHNWNiaUFnTHk4Z1NXNTBaWEp1WVd3Z2NtVmpkWEp6YVhabElHTnZiWEJoY21semIyNGdablZ1WTNScGIyNGdabTl5SUdCcGMwVnhkV0ZzWUM1Y2JpQWdkbUZ5SUdWeElEMGdablZ1WTNScGIyNG9ZU3dnWWl3Z1lWTjBZV05yTENCaVUzUmhZMnNwSUh0Y2JpQWdJQ0F2THlCSlpHVnVkR2xqWVd3Z2IySnFaV04wY3lCaGNtVWdaWEYxWVd3dUlHQXdJRDA5UFNBdE1HQXNJR0oxZENCMGFHVjVJR0Z5Wlc0bmRDQnBaR1Z1ZEdsallXd3VYRzRnSUNBZ0x5OGdVMlZsSUhSb1pTQmJTR0Z5Ylc5dWVTQmdaV2RoYkdBZ2NISnZjRzl6WVd4ZEtHaDBkSEE2THk5M2FXdHBMbVZqYldGelkzSnBjSFF1YjNKbkwyUnZhM1V1Y0dod1AybGtQV2hoY20xdmJuazZaV2RoYkNrdVhHNGdJQ0FnYVdZZ0tHRWdQVDA5SUdJcElISmxkSFZ5YmlCaElDRTlQU0F3SUh4OElERWdMeUJoSUQwOVBTQXhJQzhnWWp0Y2JpQWdJQ0F2THlCQklITjBjbWxqZENCamIyMXdZWEpwYzI5dUlHbHpJRzVsWTJWemMyRnllU0JpWldOaGRYTmxJR0J1ZFd4c0lEMDlJSFZ1WkdWbWFXNWxaR0F1WEc0Z0lDQWdhV1lnS0dFZ1BUMGdiblZzYkNCOGZDQmlJRDA5SUc1MWJHd3BJSEpsZEhWeWJpQmhJRDA5UFNCaU8xeHVJQ0FnSUM4dklGVnVkM0poY0NCaGJua2dkM0poY0hCbFpDQnZZbXBsWTNSekxseHVJQ0FnSUdsbUlDaGhJR2x1YzNSaGJtTmxiMllnWHlrZ1lTQTlJR0V1WDNkeVlYQndaV1E3WEc0Z0lDQWdhV1lnS0dJZ2FXNXpkR0Z1WTJWdlppQmZLU0JpSUQwZ1lpNWZkM0poY0hCbFpEdGNiaUFnSUNBdkx5QkRiMjF3WVhKbElHQmJXME5zWVhOelhWMWdJRzVoYldWekxseHVJQ0FnSUhaaGNpQmpiR0Z6YzA1aGJXVWdQU0IwYjFOMGNtbHVaeTVqWVd4c0tHRXBPMXh1SUNBZ0lHbG1JQ2hqYkdGemMwNWhiV1VnSVQwOUlIUnZVM1J5YVc1bkxtTmhiR3dvWWlrcElISmxkSFZ5YmlCbVlXeHpaVHRjYmlBZ0lDQnpkMmwwWTJnZ0tHTnNZWE56VG1GdFpTa2dlMXh1SUNBZ0lDQWdMeThnVTNSeWFXNW5jeXdnYm5WdFltVnljeXdnY21WbmRXeGhjaUJsZUhCeVpYTnphVzl1Y3l3Z1pHRjBaWE1zSUdGdVpDQmliMjlzWldGdWN5QmhjbVVnWTI5dGNHRnlaV1FnWW5rZ2RtRnNkV1V1WEc0Z0lDQWdJQ0JqWVhObElDZGJiMkpxWldOMElGSmxaMFY0Y0Ywbk9seHVJQ0FnSUNBZ0x5OGdVbVZuUlhod2N5QmhjbVVnWTI5bGNtTmxaQ0IwYnlCemRISnBibWR6SUdadmNpQmpiMjF3WVhKcGMyOXVJQ2hPYjNSbE9pQW5KeUFySUM5aEwya2dQVDA5SUNjdllTOXBKeWxjYmlBZ0lDQWdJR05oYzJVZ0oxdHZZbXBsWTNRZ1UzUnlhVzVuWFNjNlhHNGdJQ0FnSUNBZ0lDOHZJRkJ5YVcxcGRHbDJaWE1nWVc1a0lIUm9aV2x5SUdOdmNuSmxjM0J2Ym1ScGJtY2diMkpxWldOMElIZHlZWEJ3WlhKeklHRnlaU0JsY1hWcGRtRnNaVzUwT3lCMGFIVnpMQ0JnWENJMVhDSmdJR2x6WEc0Z0lDQWdJQ0FnSUM4dklHVnhkV2wyWVd4bGJuUWdkRzhnWUc1bGR5QlRkSEpwYm1jb1hDSTFYQ0lwWUM1Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUNjbklDc2dZU0E5UFQwZ0p5Y2dLeUJpTzF4dUlDQWdJQ0FnWTJGelpTQW5XMjlpYW1WamRDQk9kVzFpWlhKZEp6cGNiaUFnSUNBZ0lDQWdMeThnWUU1aFRtQnpJR0Z5WlNCbGNYVnBkbUZzWlc1MExDQmlkWFFnYm05dUxYSmxabXhsZUdsMlpTNWNiaUFnSUNBZ0lDQWdMeThnVDJKcVpXTjBLRTVoVGlrZ2FYTWdaWEYxYVhaaGJHVnVkQ0IwYnlCT1lVNWNiaUFnSUNBZ0lDQWdhV1lnS0N0aElDRTlQU0FyWVNrZ2NtVjBkWEp1SUN0aUlDRTlQU0FyWWp0Y2JpQWdJQ0FnSUNBZ0x5OGdRVzRnWUdWbllXeGdJR052YlhCaGNtbHpiMjRnYVhNZ2NHVnlabTl5YldWa0lHWnZjaUJ2ZEdobGNpQnVkVzFsY21saklIWmhiSFZsY3k1Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUN0aElEMDlQU0F3SUQ4Z01TQXZJQ3RoSUQwOVBTQXhJQzhnWWlBNklDdGhJRDA5UFNBcllqdGNiaUFnSUNBZ0lHTmhjMlVnSjF0dlltcGxZM1FnUkdGMFpWMG5PbHh1SUNBZ0lDQWdZMkZ6WlNBblcyOWlhbVZqZENCQ2IyOXNaV0Z1WFNjNlhHNGdJQ0FnSUNBZ0lDOHZJRU52WlhKalpTQmtZWFJsY3lCaGJtUWdZbTl2YkdWaGJuTWdkRzhnYm5WdFpYSnBZeUJ3Y21sdGFYUnBkbVVnZG1Gc2RXVnpMaUJFWVhSbGN5QmhjbVVnWTI5dGNHRnlaV1FnWW5rZ2RHaGxhWEpjYmlBZ0lDQWdJQ0FnTHk4Z2JXbHNiR2x6WldOdmJtUWdjbVZ3Y21WelpXNTBZWFJwYjI1ekxpQk9iM1JsSUhSb1lYUWdhVzUyWVd4cFpDQmtZWFJsY3lCM2FYUm9JRzFwYkd4cGMyVmpiMjVrSUhKbGNISmxjMlZ1ZEdGMGFXOXVjMXh1SUNBZ0lDQWdJQ0F2THlCdlppQmdUbUZPWUNCaGNtVWdibTkwSUdWeGRXbDJZV3hsYm5RdVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlBcllTQTlQVDBnSzJJN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnZG1GeUlHRnlaVUZ5Y21GNWN5QTlJR05zWVhOelRtRnRaU0E5UFQwZ0oxdHZZbXBsWTNRZ1FYSnlZWGxkSnp0Y2JpQWdJQ0JwWmlBb0lXRnlaVUZ5Y21GNWN5a2dlMXh1SUNBZ0lDQWdhV1lnS0hSNWNHVnZaaUJoSUNFOUlDZHZZbXBsWTNRbklIeDhJSFI1Y0dWdlppQmlJQ0U5SUNkdlltcGxZM1FuS1NCeVpYUjFjbTRnWm1Gc2MyVTdYRzVjYmlBZ0lDQWdJQzh2SUU5aWFtVmpkSE1nZDJsMGFDQmthV1ptWlhKbGJuUWdZMjl1YzNSeWRXTjBiM0p6SUdGeVpTQnViM1FnWlhGMWFYWmhiR1Z1ZEN3Z1luVjBJR0JQWW1wbFkzUmdjeUJ2Y2lCZ1FYSnlZWGxnYzF4dUlDQWdJQ0FnTHk4Z1puSnZiU0JrYVdabVpYSmxiblFnWm5KaGJXVnpJR0Z5WlM1Y2JpQWdJQ0FnSUhaaGNpQmhRM1J2Y2lBOUlHRXVZMjl1YzNSeWRXTjBiM0lzSUdKRGRHOXlJRDBnWWk1amIyNXpkSEoxWTNSdmNqdGNiaUFnSUNBZ0lHbG1JQ2hoUTNSdmNpQWhQVDBnWWtOMGIzSWdKaVlnSVNoZkxtbHpSblZ1WTNScGIyNG9ZVU4wYjNJcElDWW1JR0ZEZEc5eUlHbHVjM1JoYm1ObGIyWWdZVU4wYjNJZ0ppWmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCZkxtbHpSblZ1WTNScGIyNG9Za04wYjNJcElDWW1JR0pEZEc5eUlHbHVjM1JoYm1ObGIyWWdZa04wYjNJcFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDWW1JQ2duWTI5dWMzUnlkV04wYjNJbklHbHVJR0VnSmlZZ0oyTnZibk4wY25WamRHOXlKeUJwYmlCaUtTa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdabUZzYzJVN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dUlDQWdJQzh2SUVGemMzVnRaU0JsY1hWaGJHbDBlU0JtYjNJZ1kzbGpiR2xqSUhOMGNuVmpkSFZ5WlhNdUlGUm9aU0JoYkdkdmNtbDBhRzBnWm05eUlHUmxkR1ZqZEdsdVp5QmplV05zYVdOY2JpQWdJQ0F2THlCemRISjFZM1IxY21WeklHbHpJR0ZrWVhCMFpXUWdabkp2YlNCRlV5QTFMakVnYzJWamRHbHZiaUF4TlM0eE1pNHpMQ0JoWW5OMGNtRmpkQ0J2Y0dWeVlYUnBiMjRnWUVwUFlDNWNibHh1SUNBZ0lDOHZJRWx1YVhScFlXeHBlbWx1WnlCemRHRmpheUJ2WmlCMGNtRjJaWEp6WldRZ2IySnFaV04wY3k1Y2JpQWdJQ0F2THlCSmRDZHpJR1J2Ym1VZ2FHVnlaU0J6YVc1alpTQjNaU0J2Ym14NUlHNWxaV1FnZEdobGJTQm1iM0lnYjJKcVpXTjBjeUJoYm1RZ1lYSnlZWGx6SUdOdmJYQmhjbWx6YjI0dVhHNGdJQ0FnWVZOMFlXTnJJRDBnWVZOMFlXTnJJSHg4SUZ0ZE8xeHVJQ0FnSUdKVGRHRmpheUE5SUdKVGRHRmpheUI4ZkNCYlhUdGNiaUFnSUNCMllYSWdiR1Z1WjNSb0lEMGdZVk4wWVdOckxteGxibWQwYUR0Y2JpQWdJQ0IzYUdsc1pTQW9iR1Z1WjNSb0xTMHBJSHRjYmlBZ0lDQWdJQzh2SUV4cGJtVmhjaUJ6WldGeVkyZ3VJRkJsY21admNtMWhibU5sSUdseklHbHVkbVZ5YzJWc2VTQndjbTl3YjNKMGFXOXVZV3dnZEc4Z2RHaGxJRzUxYldKbGNpQnZabHh1SUNBZ0lDQWdMeThnZFc1cGNYVmxJRzVsYzNSbFpDQnpkSEoxWTNSMWNtVnpMbHh1SUNBZ0lDQWdhV1lnS0dGVGRHRmphMXRzWlc1bmRHaGRJRDA5UFNCaEtTQnlaWFIxY200Z1lsTjBZV05yVzJ4bGJtZDBhRjBnUFQwOUlHSTdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5OGdRV1JrSUhSb1pTQm1hWEp6ZENCdlltcGxZM1FnZEc4Z2RHaGxJSE4wWVdOcklHOW1JSFJ5WVhabGNuTmxaQ0J2WW1wbFkzUnpMbHh1SUNBZ0lHRlRkR0ZqYXk1d2RYTm9LR0VwTzF4dUlDQWdJR0pUZEdGamF5NXdkWE5vS0dJcE8xeHVYRzRnSUNBZ0x5OGdVbVZqZFhKemFYWmxiSGtnWTI5dGNHRnlaU0J2WW1wbFkzUnpJR0Z1WkNCaGNuSmhlWE11WEc0Z0lDQWdhV1lnS0dGeVpVRnljbUY1Y3lrZ2UxeHVJQ0FnSUNBZ0x5OGdRMjl0Y0dGeVpTQmhjbkpoZVNCc1pXNW5kR2h6SUhSdklHUmxkR1Z5YldsdVpTQnBaaUJoSUdSbFpYQWdZMjl0Y0dGeWFYTnZiaUJwY3lCdVpXTmxjM05oY25rdVhHNGdJQ0FnSUNCc1pXNW5kR2dnUFNCaExteGxibWQwYUR0Y2JpQWdJQ0FnSUdsbUlDaHNaVzVuZEdnZ0lUMDlJR0l1YkdWdVozUm9LU0J5WlhSMWNtNGdabUZzYzJVN1hHNGdJQ0FnSUNBdkx5QkVaV1Z3SUdOdmJYQmhjbVVnZEdobElHTnZiblJsYm5SekxDQnBaMjV2Y21sdVp5QnViMjR0Ym5WdFpYSnBZeUJ3Y205d1pYSjBhV1Z6TGx4dUlDQWdJQ0FnZDJocGJHVWdLR3hsYm1kMGFDMHRLU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDZ2haWEVvWVZ0c1pXNW5kR2hkTENCaVcyeGxibWQwYUYwc0lHRlRkR0ZqYXl3Z1lsTjBZV05yS1NrZ2NtVjBkWEp1SUdaaGJITmxPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBdkx5QkVaV1Z3SUdOdmJYQmhjbVVnYjJKcVpXTjBjeTVjYmlBZ0lDQWdJSFpoY2lCclpYbHpJRDBnWHk1clpYbHpLR0VwTENCclpYazdYRzRnSUNBZ0lDQnNaVzVuZEdnZ1BTQnJaWGx6TG14bGJtZDBhRHRjYmlBZ0lDQWdJQzh2SUVWdWMzVnlaU0IwYUdGMElHSnZkR2dnYjJKcVpXTjBjeUJqYjI1MFlXbHVJSFJvWlNCellXMWxJRzUxYldKbGNpQnZaaUJ3Y205d1pYSjBhV1Z6SUdKbFptOXlaU0JqYjIxd1lYSnBibWNnWkdWbGNDQmxjWFZoYkdsMGVTNWNiaUFnSUNBZ0lHbG1JQ2hmTG10bGVYTW9ZaWt1YkdWdVozUm9JQ0U5UFNCc1pXNW5kR2dwSUhKbGRIVnliaUJtWVd4elpUdGNiaUFnSUNBZ0lIZG9hV3hsSUNoc1pXNW5kR2d0TFNrZ2UxeHVJQ0FnSUNBZ0lDQXZMeUJFWldWd0lHTnZiWEJoY21VZ1pXRmphQ0J0WlcxaVpYSmNiaUFnSUNBZ0lDQWdhMlY1SUQwZ2EyVjVjMXRzWlc1bmRHaGRPMXh1SUNBZ0lDQWdJQ0JwWmlBb0lTaGZMbWhoY3loaUxDQnJaWGtwSUNZbUlHVnhLR0ZiYTJWNVhTd2dZbHRyWlhsZExDQmhVM1JoWTJzc0lHSlRkR0ZqYXlrcEtTQnlaWFIxY200Z1ptRnNjMlU3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmVnh1SUNBZ0lDOHZJRkpsYlc5MlpTQjBhR1VnWm1seWMzUWdiMkpxWldOMElHWnliMjBnZEdobElITjBZV05ySUc5bUlIUnlZWFpsY25ObFpDQnZZbXBsWTNSekxseHVJQ0FnSUdGVGRHRmpheTV3YjNBb0tUdGNiaUFnSUNCaVUzUmhZMnN1Y0c5d0tDazdYRzRnSUNBZ2NtVjBkWEp1SUhSeWRXVTdYRzRnSUgwN1hHNWNiaUFnTHk4Z1VHVnlabTl5YlNCaElHUmxaWEFnWTI5dGNHRnlhWE52YmlCMGJ5QmphR1ZqYXlCcFppQjBkMjhnYjJKcVpXTjBjeUJoY21VZ1pYRjFZV3d1WEc0Z0lGOHVhWE5GY1hWaGJDQTlJR1oxYm1OMGFXOXVLR0VzSUdJcElIdGNiaUFnSUNCeVpYUjFjbTRnWlhFb1lTd2dZaWs3WEc0Z0lIMDdYRzVjYmlBZ0x5OGdTWE1nWVNCbmFYWmxiaUJoY25KaGVTd2djM1J5YVc1bkxDQnZjaUJ2WW1wbFkzUWdaVzF3ZEhrL1hHNGdJQzh2SUVGdUlGd2laVzF3ZEhsY0lpQnZZbXBsWTNRZ2FHRnpJRzV2SUdWdWRXMWxjbUZpYkdVZ2IzZHVMWEJ5YjNCbGNuUnBaWE11WEc0Z0lGOHVhWE5GYlhCMGVTQTlJR1oxYm1OMGFXOXVLRzlpYWlrZ2UxeHVJQ0FnSUdsbUlDaHZZbW9nUFQwZ2JuVnNiQ2tnY21WMGRYSnVJSFJ5ZFdVN1hHNGdJQ0FnYVdZZ0tHbHpRWEp5WVhsTWFXdGxLRzlpYWlrZ0ppWWdLRjh1YVhOQmNuSmhlU2h2WW1vcElIeDhJRjh1YVhOVGRISnBibWNvYjJKcUtTQjhmQ0JmTG1selFYSm5kVzFsYm5SektHOWlhaWtwS1NCeVpYUjFjbTRnYjJKcUxteGxibWQwYUNBOVBUMGdNRHRjYmlBZ0lDQnlaWFIxY200Z1h5NXJaWGx6S0c5aWFpa3ViR1Z1WjNSb0lEMDlQU0F3TzF4dUlDQjlPMXh1WEc0Z0lDOHZJRWx6SUdFZ1oybDJaVzRnZG1Gc2RXVWdZU0JFVDAwZ1pXeGxiV1Z1ZEQ5Y2JpQWdYeTVwYzBWc1pXMWxiblFnUFNCbWRXNWpkR2x2Ymlodlltb3BJSHRjYmlBZ0lDQnlaWFIxY200Z0lTRW9iMkpxSUNZbUlHOWlhaTV1YjJSbFZIbHdaU0E5UFQwZ01TazdYRzRnSUgwN1hHNWNiaUFnTHk4Z1NYTWdZU0JuYVhabGJpQjJZV3gxWlNCaGJpQmhjbkpoZVQ5Y2JpQWdMeThnUkdWc1pXZGhkR1Z6SUhSdklFVkRUVUUxSjNNZ2JtRjBhWFpsSUVGeWNtRjVMbWx6UVhKeVlYbGNiaUFnWHk1cGMwRnljbUY1SUQwZ2JtRjBhWFpsU1hOQmNuSmhlU0I4ZkNCbWRXNWpkR2x2Ymlodlltb3BJSHRjYmlBZ0lDQnlaWFIxY200Z2RHOVRkSEpwYm1jdVkyRnNiQ2h2WW1vcElEMDlQU0FuVzI5aWFtVmpkQ0JCY25KaGVWMG5PMXh1SUNCOU8xeHVYRzRnSUM4dklFbHpJR0VnWjJsMlpXNGdkbUZ5YVdGaWJHVWdZVzRnYjJKcVpXTjBQMXh1SUNCZkxtbHpUMkpxWldOMElEMGdablZ1WTNScGIyNG9iMkpxS1NCN1hHNGdJQ0FnZG1GeUlIUjVjR1VnUFNCMGVYQmxiMllnYjJKcU8xeHVJQ0FnSUhKbGRIVnliaUIwZVhCbElEMDlQU0FuWm5WdVkzUnBiMjRuSUh4OElIUjVjR1VnUFQwOUlDZHZZbXBsWTNRbklDWW1JQ0VoYjJKcU8xeHVJQ0I5TzF4dVhHNGdJQzh2SUVGa1pDQnpiMjFsSUdselZIbHdaU0J0WlhSb2IyUnpPaUJwYzBGeVozVnRaVzUwY3l3Z2FYTkdkVzVqZEdsdmJpd2dhWE5UZEhKcGJtY3NJR2x6VG5WdFltVnlMQ0JwYzBSaGRHVXNJR2x6VW1WblJYaHdMQ0JwYzBWeWNtOXlMbHh1SUNCZkxtVmhZMmdvV3lkQmNtZDFiV1Z1ZEhNbkxDQW5SblZ1WTNScGIyNG5MQ0FuVTNSeWFXNW5KeXdnSjA1MWJXSmxjaWNzSUNkRVlYUmxKeXdnSjFKbFowVjRjQ2NzSUNkRmNuSnZjaWRkTENCbWRXNWpkR2x2YmlodVlXMWxLU0I3WEc0Z0lDQWdYMXNuYVhNbklDc2dibUZ0WlYwZ1BTQm1kVzVqZEdsdmJpaHZZbW9wSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUIwYjFOMGNtbHVaeTVqWVd4c0tHOWlhaWtnUFQwOUlDZGJiMkpxWldOMElDY2dLeUJ1WVcxbElDc2dKMTBuTzF4dUlDQWdJSDA3WEc0Z0lIMHBPMXh1WEc0Z0lDOHZJRVJsWm1sdVpTQmhJR1poYkd4aVlXTnJJSFpsY25OcGIyNGdiMllnZEdobElHMWxkR2h2WkNCcGJpQmljbTkzYzJWeWN5QW9ZV2hsYlN3Z1NVVWdQQ0E1S1N3Z2QyaGxjbVZjYmlBZ0x5OGdkR2hsY21VZ2FYTnVKM1FnWVc1NUlHbHVjM0JsWTNSaFlteGxJRndpUVhKbmRXMWxiblJ6WENJZ2RIbHdaUzVjYmlBZ2FXWWdLQ0ZmTG1selFYSm5kVzFsYm5SektHRnlaM1Z0Wlc1MGN5a3BJSHRjYmlBZ0lDQmZMbWx6UVhKbmRXMWxiblJ6SUQwZ1puVnVZM1JwYjI0b2IySnFLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdYeTVvWVhNb2IySnFMQ0FuWTJGc2JHVmxKeWs3WEc0Z0lDQWdmVHRjYmlBZ2ZWeHVYRzRnSUM4dklFOXdkR2x0YVhwbElHQnBjMFoxYm1OMGFXOXVZQ0JwWmlCaGNIQnliM0J5YVdGMFpTNGdWMjl5YXlCaGNtOTFibVFnYzI5dFpTQjBlWEJsYjJZZ1luVm5jeUJwYmlCdmJHUWdkamdzWEc0Z0lDOHZJRWxGSURFeElDZ2pNVFl5TVNrc0lHRnVaQ0JwYmlCVFlXWmhjbWtnT0NBb0l6RTVNamtwTGx4dUlDQnBaaUFvZEhsd1pXOW1JQzh1THlBaFBTQW5ablZ1WTNScGIyNG5JQ1ltSUhSNWNHVnZaaUJKYm5RNFFYSnlZWGtnSVQwZ0oyOWlhbVZqZENjcElIdGNiaUFnSUNCZkxtbHpSblZ1WTNScGIyNGdQU0JtZFc1amRHbHZiaWh2WW1vcElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCMGVYQmxiMllnYjJKcUlEMDlJQ2RtZFc1amRHbHZiaWNnZkh3Z1ptRnNjMlU3WEc0Z0lDQWdmVHRjYmlBZ2ZWeHVYRzRnSUM4dklFbHpJR0VnWjJsMlpXNGdiMkpxWldOMElHRWdabWx1YVhSbElHNTFiV0psY2o5Y2JpQWdYeTVwYzBacGJtbDBaU0E5SUdaMWJtTjBhVzl1S0c5aWFpa2dlMXh1SUNBZ0lISmxkSFZ5YmlCcGMwWnBibWwwWlNodlltb3BJQ1ltSUNGcGMwNWhUaWh3WVhKelpVWnNiMkYwS0c5aWFpa3BPMXh1SUNCOU8xeHVYRzRnSUM4dklFbHpJSFJvWlNCbmFYWmxiaUIyWVd4MVpTQmdUbUZPWUQ4Z0tFNWhUaUJwY3lCMGFHVWdiMjVzZVNCdWRXMWlaWElnZDJocFkyZ2daRzlsY3lCdWIzUWdaWEYxWVd3Z2FYUnpaV3htS1M1Y2JpQWdYeTVwYzA1aFRpQTlJR1oxYm1OMGFXOXVLRzlpYWlrZ2UxeHVJQ0FnSUhKbGRIVnliaUJmTG1selRuVnRZbVZ5S0c5aWFpa2dKaVlnYjJKcUlDRTlQU0FyYjJKcU8xeHVJQ0I5TzF4dVhHNGdJQzh2SUVseklHRWdaMmwyWlc0Z2RtRnNkV1VnWVNCaWIyOXNaV0Z1UDF4dUlDQmZMbWx6UW05dmJHVmhiaUE5SUdaMWJtTjBhVzl1S0c5aWFpa2dlMXh1SUNBZ0lISmxkSFZ5YmlCdlltb2dQVDA5SUhSeWRXVWdmSHdnYjJKcUlEMDlQU0JtWVd4elpTQjhmQ0IwYjFOMGNtbHVaeTVqWVd4c0tHOWlhaWtnUFQwOUlDZGJiMkpxWldOMElFSnZiMnhsWVc1ZEp6dGNiaUFnZlR0Y2JseHVJQ0F2THlCSmN5QmhJR2RwZG1WdUlIWmhiSFZsSUdWeGRXRnNJSFJ2SUc1MWJHdy9YRzRnSUY4dWFYTk9kV3hzSUQwZ1puVnVZM1JwYjI0b2IySnFLU0I3WEc0Z0lDQWdjbVYwZFhKdUlHOWlhaUE5UFQwZ2JuVnNiRHRjYmlBZ2ZUdGNibHh1SUNBdkx5QkpjeUJoSUdkcGRtVnVJSFpoY21saFlteGxJSFZ1WkdWbWFXNWxaRDljYmlBZ1h5NXBjMVZ1WkdWbWFXNWxaQ0E5SUdaMWJtTjBhVzl1S0c5aWFpa2dlMXh1SUNBZ0lISmxkSFZ5YmlCdlltb2dQVDA5SUhadmFXUWdNRHRjYmlBZ2ZUdGNibHh1SUNBdkx5QlRhRzl5ZEdOMWRDQm1kVzVqZEdsdmJpQm1iM0lnWTJobFkydHBibWNnYVdZZ1lXNGdiMkpxWldOMElHaGhjeUJoSUdkcGRtVnVJSEJ5YjNCbGNuUjVJR1JwY21WamRHeDVYRzRnSUM4dklHOXVJR2wwYzJWc1ppQW9hVzRnYjNSb1pYSWdkMjl5WkhNc0lHNXZkQ0J2YmlCaElIQnliM1J2ZEhsd1pTa3VYRzRnSUY4dWFHRnpJRDBnWm5WdVkzUnBiMjRvYjJKcUxDQnJaWGtwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdiMkpxSUNFOUlHNTFiR3dnSmlZZ2FHRnpUM2R1VUhKdmNHVnlkSGt1WTJGc2JDaHZZbW9zSUd0bGVTazdYRzRnSUgwN1hHNWNiaUFnTHk4Z1ZYUnBiR2wwZVNCR2RXNWpkR2x2Ym5OY2JpQWdMeThnTFMwdExTMHRMUzB0TFMwdExTMHRMUzFjYmx4dUlDQXZMeUJTZFc0Z1ZXNWtaWEp6WTI5eVpTNXFjeUJwYmlBcWJtOURiMjVtYkdsamRDb2diVzlrWlN3Z2NtVjBkWEp1YVc1bklIUm9aU0JnWDJBZ2RtRnlhV0ZpYkdVZ2RHOGdhWFJ6WEc0Z0lDOHZJSEJ5WlhacGIzVnpJRzkzYm1WeUxpQlNaWFIxY201eklHRWdjbVZtWlhKbGJtTmxJSFJ2SUhSb1pTQlZibVJsY25OamIzSmxJRzlpYW1WamRDNWNiaUFnWHk1dWIwTnZibVpzYVdOMElEMGdablZ1WTNScGIyNG9LU0I3WEc0Z0lDQWdjbTl2ZEM1ZklEMGdjSEpsZG1sdmRYTlZibVJsY25OamIzSmxPMXh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpPMXh1SUNCOU8xeHVYRzRnSUM4dklFdGxaWEFnZEdobElHbGtaVzUwYVhSNUlHWjFibU4wYVc5dUlHRnliM1Z1WkNCbWIzSWdaR1ZtWVhWc2RDQnBkR1Z5WVhSbFpYTXVYRzRnSUY4dWFXUmxiblJwZEhrZ1BTQm1kVzVqZEdsdmJpaDJZV3gxWlNrZ2UxeHVJQ0FnSUhKbGRIVnliaUIyWVd4MVpUdGNiaUFnZlR0Y2JseHVJQ0F2THlCUWNtVmthV05oZEdVdFoyVnVaWEpoZEdsdVp5Qm1kVzVqZEdsdmJuTXVJRTltZEdWdUlIVnpaV1oxYkNCdmRYUnphV1JsSUc5bUlGVnVaR1Z5YzJOdmNtVXVYRzRnSUY4dVkyOXVjM1JoYm5RZ1BTQm1kVzVqZEdsdmJpaDJZV3gxWlNrZ2UxeHVJQ0FnSUhKbGRIVnliaUJtZFc1amRHbHZiaWdwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUIyWVd4MVpUdGNiaUFnSUNCOU8xeHVJQ0I5TzF4dVhHNGdJRjh1Ym05dmNDQTlJR1oxYm1OMGFXOXVLQ2w3ZlR0Y2JseHVJQ0JmTG5CeWIzQmxjblI1SUQwZ2NISnZjR1Z5ZEhrN1hHNWNiaUFnTHk4Z1IyVnVaWEpoZEdWeklHRWdablZ1WTNScGIyNGdabTl5SUdFZ1oybDJaVzRnYjJKcVpXTjBJSFJvWVhRZ2NtVjBkWEp1Y3lCaElHZHBkbVZ1SUhCeWIzQmxjblI1TGx4dUlDQmZMbkJ5YjNCbGNuUjVUMllnUFNCbWRXNWpkR2x2Ymlodlltb3BJSHRjYmlBZ0lDQnlaWFIxY200Z2IySnFJRDA5SUc1MWJHd2dQeUJtZFc1amRHbHZiaWdwZTMwZ09pQm1kVzVqZEdsdmJpaHJaWGtwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUJ2WW1wYmEyVjVYVHRjYmlBZ0lDQjlPMXh1SUNCOU8xeHVYRzRnSUM4dklGSmxkSFZ5Ym5NZ1lTQndjbVZrYVdOaGRHVWdabTl5SUdOb1pXTnJhVzVuSUhkb1pYUm9aWElnWVc0Z2IySnFaV04wSUdoaGN5QmhJR2RwZG1WdUlITmxkQ0J2Wmx4dUlDQXZMeUJnYTJWNU9uWmhiSFZsWUNCd1lXbHljeTVjYmlBZ1h5NXRZWFJqYUdWeUlEMGdYeTV0WVhSamFHVnpJRDBnWm5WdVkzUnBiMjRvWVhSMGNuTXBJSHRjYmlBZ0lDQmhkSFJ5Y3lBOUlGOHVaWGgwWlc1a1QzZHVLSHQ5TENCaGRIUnljeWs3WEc0Z0lDQWdjbVYwZFhKdUlHWjFibU4wYVc5dUtHOWlhaWtnZTF4dUlDQWdJQ0FnY21WMGRYSnVJRjh1YVhOTllYUmphQ2h2WW1vc0lHRjBkSEp6S1R0Y2JpQWdJQ0I5TzF4dUlDQjlPMXh1WEc0Z0lDOHZJRkoxYmlCaElHWjFibU4wYVc5dUlDb3FiaW9xSUhScGJXVnpMbHh1SUNCZkxuUnBiV1Z6SUQwZ1puVnVZM1JwYjI0b2Jpd2dhWFJsY21GMFpXVXNJR052Ym5SbGVIUXBJSHRjYmlBZ0lDQjJZWElnWVdOamRXMGdQU0JCY25KaGVTaE5ZWFJvTG0xaGVDZ3dMQ0J1S1NrN1hHNGdJQ0FnYVhSbGNtRjBaV1VnUFNCdmNIUnBiV2w2WlVOaUtHbDBaWEpoZEdWbExDQmpiMjUwWlhoMExDQXhLVHRjYmlBZ0lDQm1iM0lnS0haaGNpQnBJRDBnTURzZ2FTQThJRzQ3SUdrckt5a2dZV05qZFcxYmFWMGdQU0JwZEdWeVlYUmxaU2hwS1R0Y2JpQWdJQ0J5WlhSMWNtNGdZV05qZFcwN1hHNGdJSDA3WEc1Y2JpQWdMeThnVW1WMGRYSnVJR0VnY21GdVpHOXRJR2x1ZEdWblpYSWdZbVYwZDJWbGJpQnRhVzRnWVc1a0lHMWhlQ0FvYVc1amJIVnphWFpsS1M1Y2JpQWdYeTV5WVc1a2IyMGdQU0JtZFc1amRHbHZiaWh0YVc0c0lHMWhlQ2tnZTF4dUlDQWdJR2xtSUNodFlYZ2dQVDBnYm5Wc2JDa2dlMXh1SUNBZ0lDQWdiV0Y0SUQwZ2JXbHVPMXh1SUNBZ0lDQWdiV2x1SUQwZ01EdGNiaUFnSUNCOVhHNGdJQ0FnY21WMGRYSnVJRzFwYmlBcklFMWhkR2d1Wm14dmIzSW9UV0YwYUM1eVlXNWtiMjBvS1NBcUlDaHRZWGdnTFNCdGFXNGdLeUF4S1NrN1hHNGdJSDA3WEc1Y2JpQWdMeThnUVNBb2NHOXpjMmxpYkhrZ1ptRnpkR1Z5S1NCM1lYa2dkRzhnWjJWMElIUm9aU0JqZFhKeVpXNTBJSFJwYldWemRHRnRjQ0JoY3lCaGJpQnBiblJsWjJWeUxseHVJQ0JmTG01dmR5QTlJRVJoZEdVdWJtOTNJSHg4SUdaMWJtTjBhVzl1S0NrZ2UxeHVJQ0FnSUhKbGRIVnliaUJ1WlhjZ1JHRjBaU2dwTG1kbGRGUnBiV1VvS1R0Y2JpQWdmVHRjYmx4dUlDQWdMeThnVEdsemRDQnZaaUJJVkUxTUlHVnVkR2wwYVdWeklHWnZjaUJsYzJOaGNHbHVaeTVjYmlBZ2RtRnlJR1Z6WTJGd1pVMWhjQ0E5SUh0Y2JpQWdJQ0FuSmljNklDY21ZVzF3T3ljc1hHNGdJQ0FnSnp3bk9pQW5KbXgwT3ljc1hHNGdJQ0FnSno0bk9pQW5KbWQwT3ljc1hHNGdJQ0FnSjF3aUp6b2dKeVp4ZFc5ME95Y3NYRzRnSUNBZ1hDSW5YQ0k2SUNjbUkzZ3lOenNuTEZ4dUlDQWdJQ2RnSnpvZ0p5WWplRFl3T3lkY2JpQWdmVHRjYmlBZ2RtRnlJSFZ1WlhOallYQmxUV0Z3SUQwZ1h5NXBiblpsY25Rb1pYTmpZWEJsVFdGd0tUdGNibHh1SUNBdkx5QkdkVzVqZEdsdmJuTWdabTl5SUdWelkyRndhVzVuSUdGdVpDQjFibVZ6WTJGd2FXNW5JSE4wY21sdVozTWdkRzh2Wm5KdmJTQklWRTFNSUdsdWRHVnljRzlzWVhScGIyNHVYRzRnSUhaaGNpQmpjbVZoZEdWRmMyTmhjR1Z5SUQwZ1puVnVZM1JwYjI0b2JXRndLU0I3WEc0Z0lDQWdkbUZ5SUdWelkyRndaWElnUFNCbWRXNWpkR2x2YmlodFlYUmphQ2tnZTF4dUlDQWdJQ0FnY21WMGRYSnVJRzFoY0Z0dFlYUmphRjA3WEc0Z0lDQWdmVHRjYmlBZ0lDQXZMeUJTWldkbGVHVnpJR1p2Y2lCcFpHVnVkR2xtZVdsdVp5QmhJR3RsZVNCMGFHRjBJRzVsWldSeklIUnZJR0psSUdWelkyRndaV1JjYmlBZ0lDQjJZWElnYzI5MWNtTmxJRDBnSnlnL09pY2dLeUJmTG10bGVYTW9iV0Z3S1M1cWIybHVLQ2Q4SnlrZ0t5QW5LU2M3WEc0Z0lDQWdkbUZ5SUhSbGMzUlNaV2RsZUhBZ1BTQlNaV2RGZUhBb2MyOTFjbU5sS1R0Y2JpQWdJQ0IyWVhJZ2NtVndiR0ZqWlZKbFoyVjRjQ0E5SUZKbFowVjRjQ2h6YjNWeVkyVXNJQ2RuSnlrN1hHNGdJQ0FnY21WMGRYSnVJR1oxYm1OMGFXOXVLSE4wY21sdVp5a2dlMXh1SUNBZ0lDQWdjM1J5YVc1bklEMGdjM1J5YVc1bklEMDlJRzUxYkd3Z1B5QW5KeUE2SUNjbklDc2djM1J5YVc1bk8xeHVJQ0FnSUNBZ2NtVjBkWEp1SUhSbGMzUlNaV2RsZUhBdWRHVnpkQ2h6ZEhKcGJtY3BJRDhnYzNSeWFXNW5MbkpsY0d4aFkyVW9jbVZ3YkdGalpWSmxaMlY0Y0N3Z1pYTmpZWEJsY2lrZ09pQnpkSEpwYm1jN1hHNGdJQ0FnZlR0Y2JpQWdmVHRjYmlBZ1h5NWxjMk5oY0dVZ1BTQmpjbVZoZEdWRmMyTmhjR1Z5S0dWelkyRndaVTFoY0NrN1hHNGdJRjh1ZFc1bGMyTmhjR1VnUFNCamNtVmhkR1ZGYzJOaGNHVnlLSFZ1WlhOallYQmxUV0Z3S1R0Y2JseHVJQ0F2THlCSlppQjBhR1VnZG1Gc2RXVWdiMllnZEdobElHNWhiV1ZrSUdCd2NtOXdaWEowZVdBZ2FYTWdZU0JtZFc1amRHbHZiaUIwYUdWdUlHbHVkbTlyWlNCcGRDQjNhWFJvSUhSb1pWeHVJQ0F2THlCZ2IySnFaV04wWUNCaGN5QmpiMjUwWlhoME95QnZkR2hsY25kcGMyVXNJSEpsZEhWeWJpQnBkQzVjYmlBZ1h5NXlaWE4xYkhRZ1BTQm1kVzVqZEdsdmJpaHZZbXBsWTNRc0lIQnliM0JsY25SNUxDQm1ZV3hzWW1GamF5a2dlMXh1SUNBZ0lIWmhjaUIyWVd4MVpTQTlJRzlpYW1WamRDQTlQU0J1ZFd4c0lEOGdkbTlwWkNBd0lEb2diMkpxWldOMFczQnliM0JsY25SNVhUdGNiaUFnSUNCcFppQW9kbUZzZFdVZ1BUMDlJSFp2YVdRZ01Da2dlMXh1SUNBZ0lDQWdkbUZzZFdVZ1BTQm1ZV3hzWW1GamF6dGNiaUFnSUNCOVhHNGdJQ0FnY21WMGRYSnVJRjh1YVhOR2RXNWpkR2x2YmloMllXeDFaU2tnUHlCMllXeDFaUzVqWVd4c0tHOWlhbVZqZENrZ09pQjJZV3gxWlR0Y2JpQWdmVHRjYmx4dUlDQXZMeUJIWlc1bGNtRjBaU0JoSUhWdWFYRjFaU0JwYm5SbFoyVnlJR2xrSUNoMWJtbHhkV1VnZDJsMGFHbHVJSFJvWlNCbGJuUnBjbVVnWTJ4cFpXNTBJSE5sYzNOcGIyNHBMbHh1SUNBdkx5QlZjMlZtZFd3Z1ptOXlJSFJsYlhCdmNtRnllU0JFVDAwZ2FXUnpMbHh1SUNCMllYSWdhV1JEYjNWdWRHVnlJRDBnTUR0Y2JpQWdYeTUxYm1seGRXVkpaQ0E5SUdaMWJtTjBhVzl1S0hCeVpXWnBlQ2tnZTF4dUlDQWdJSFpoY2lCcFpDQTlJQ3NyYVdSRGIzVnVkR1Z5SUNzZ0p5YzdYRzRnSUNBZ2NtVjBkWEp1SUhCeVpXWnBlQ0EvSUhCeVpXWnBlQ0FySUdsa0lEb2dhV1E3WEc0Z0lIMDdYRzVjYmlBZ0x5OGdRbmtnWkdWbVlYVnNkQ3dnVlc1a1pYSnpZMjl5WlNCMWMyVnpJRVZTUWkxemRIbHNaU0IwWlcxd2JHRjBaU0JrWld4cGJXbDBaWEp6TENCamFHRnVaMlVnZEdobFhHNGdJQzh2SUdadmJHeHZkMmx1WnlCMFpXMXdiR0YwWlNCelpYUjBhVzVuY3lCMGJ5QjFjMlVnWVd4MFpYSnVZWFJwZG1VZ1pHVnNhVzFwZEdWeWN5NWNiaUFnWHk1MFpXMXdiR0YwWlZObGRIUnBibWR6SUQwZ2UxeHVJQ0FnSUdWMllXeDFZWFJsSUNBZ0lEb2dMendsS0Z0Y1hITmNYRk5kS3o4cEpUNHZaeXhjYmlBZ0lDQnBiblJsY25CdmJHRjBaU0E2SUM4OEpUMG9XMXhjYzF4Y1UxMHJQeWtsUGk5bkxGeHVJQ0FnSUdWelkyRndaU0FnSUNBZ0lEb2dMendsTFNoYlhGeHpYRnhUWFNzL0tTVStMMmRjYmlBZ2ZUdGNibHh1SUNBdkx5QlhhR1Z1SUdOMWMzUnZiV2w2YVc1bklHQjBaVzF3YkdGMFpWTmxkSFJwYm1kellDd2dhV1lnZVc5MUlHUnZiaWQwSUhkaGJuUWdkRzhnWkdWbWFXNWxJR0Z1WEc0Z0lDOHZJR2x1ZEdWeWNHOXNZWFJwYjI0c0lHVjJZV3gxWVhScGIyNGdiM0lnWlhOallYQnBibWNnY21WblpYZ3NJSGRsSUc1bFpXUWdiMjVsSUhSb1lYUWdhWE5jYmlBZ0x5OGdaM1ZoY21GdWRHVmxaQ0J1YjNRZ2RHOGdiV0YwWTJndVhHNGdJSFpoY2lCdWIwMWhkR05vSUQwZ0x5Z3VLVjR2TzF4dVhHNGdJQzh2SUVObGNuUmhhVzRnWTJoaGNtRmpkR1Z5Y3lCdVpXVmtJSFJ2SUdKbElHVnpZMkZ3WldRZ2MyOGdkR2hoZENCMGFHVjVJR05oYmlCaVpTQndkWFFnYVc1MGJ5QmhYRzRnSUM4dklITjBjbWx1WnlCc2FYUmxjbUZzTGx4dUlDQjJZWElnWlhOallYQmxjeUE5SUh0Y2JpQWdJQ0JjSWlkY0lqb2dJQ0FnSUNCY0lpZGNJaXhjYmlBZ0lDQW5YRnhjWENjNklDQWdJQ0FuWEZ4Y1hDY3NYRzRnSUNBZ0oxeGNjaWM2SUNBZ0lDQW5jaWNzWEc0Z0lDQWdKMXhjYmljNklDQWdJQ0FuYmljc1hHNGdJQ0FnSjF4Y2RUSXdNamduT2lBbmRUSXdNamduTEZ4dUlDQWdJQ2RjWEhVeU1ESTVKem9nSjNVeU1ESTVKMXh1SUNCOU8xeHVYRzRnSUhaaGNpQmxjMk5oY0dWeUlEMGdMMXhjWEZ4OEozeGNYSEo4WEZ4dWZGeGNkVEl3TWpoOFhGeDFNakF5T1M5bk8xeHVYRzRnSUhaaGNpQmxjMk5oY0dWRGFHRnlJRDBnWm5WdVkzUnBiMjRvYldGMFkyZ3BJSHRjYmlBZ0lDQnlaWFIxY200Z0oxeGNYRnduSUNzZ1pYTmpZWEJsYzF0dFlYUmphRjA3WEc0Z0lIMDdYRzVjYmlBZ0x5OGdTbUYyWVZOamNtbHdkQ0J0YVdOeWJ5MTBaVzF3YkdGMGFXNW5MQ0J6YVcxcGJHRnlJSFJ2SUVwdmFHNGdVbVZ6YVdjbmN5QnBiWEJzWlcxbGJuUmhkR2x2Ymk1Y2JpQWdMeThnVlc1a1pYSnpZMjl5WlNCMFpXMXdiR0YwYVc1bklHaGhibVJzWlhNZ1lYSmlhWFJ5WVhKNUlHUmxiR2x0YVhSbGNuTXNJSEJ5WlhObGNuWmxjeUIzYUdsMFpYTndZV05sTEZ4dUlDQXZMeUJoYm1RZ1kyOXljbVZqZEd4NUlHVnpZMkZ3WlhNZ2NYVnZkR1Z6SUhkcGRHaHBiaUJwYm5SbGNuQnZiR0YwWldRZ1kyOWtaUzVjYmlBZ0x5OGdUa0k2SUdCdmJHUlRaWFIwYVc1bmMyQWdiMjVzZVNCbGVHbHpkSE1nWm05eUlHSmhZMnQzWVhKa2N5QmpiMjF3WVhScFltbHNhWFI1TGx4dUlDQmZMblJsYlhCc1lYUmxJRDBnWm5WdVkzUnBiMjRvZEdWNGRDd2djMlYwZEdsdVozTXNJRzlzWkZObGRIUnBibWR6S1NCN1hHNGdJQ0FnYVdZZ0tDRnpaWFIwYVc1bmN5QW1KaUJ2YkdSVFpYUjBhVzVuY3lrZ2MyVjBkR2x1WjNNZ1BTQnZiR1JUWlhSMGFXNW5jenRjYmlBZ0lDQnpaWFIwYVc1bmN5QTlJRjh1WkdWbVlYVnNkSE1vZTMwc0lITmxkSFJwYm1kekxDQmZMblJsYlhCc1lYUmxVMlYwZEdsdVozTXBPMXh1WEc0Z0lDQWdMeThnUTI5dFltbHVaU0JrWld4cGJXbDBaWEp6SUdsdWRHOGdiMjVsSUhKbFozVnNZWElnWlhod2NtVnpjMmx2YmlCMmFXRWdZV3gwWlhKdVlYUnBiMjR1WEc0Z0lDQWdkbUZ5SUcxaGRHTm9aWElnUFNCU1pXZEZlSEFvVzF4dUlDQWdJQ0FnS0hObGRIUnBibWR6TG1WelkyRndaU0I4ZkNCdWIwMWhkR05vS1M1emIzVnlZMlVzWEc0Z0lDQWdJQ0FvYzJWMGRHbHVaM011YVc1MFpYSndiMnhoZEdVZ2ZId2dibTlOWVhSamFDa3VjMjkxY21ObExGeHVJQ0FnSUNBZ0tITmxkSFJwYm1kekxtVjJZV3gxWVhSbElIeDhJRzV2VFdGMFkyZ3BMbk52ZFhKalpWeHVJQ0FnSUYwdWFtOXBiaWduZkNjcElDc2dKM3drSnl3Z0oyY25LVHRjYmx4dUlDQWdJQzh2SUVOdmJYQnBiR1VnZEdobElIUmxiWEJzWVhSbElITnZkWEpqWlN3Z1pYTmpZWEJwYm1jZ2MzUnlhVzVuSUd4cGRHVnlZV3h6SUdGd2NISnZjSEpwWVhSbGJIa3VYRzRnSUNBZ2RtRnlJR2x1WkdWNElEMGdNRHRjYmlBZ0lDQjJZWElnYzI5MWNtTmxJRDBnWENKZlgzQXJQU2RjSWp0Y2JpQWdJQ0IwWlhoMExuSmxjR3hoWTJVb2JXRjBZMmhsY2l3Z1puVnVZM1JwYjI0b2JXRjBZMmdzSUdWelkyRndaU3dnYVc1MFpYSndiMnhoZEdVc0lHVjJZV3gxWVhSbExDQnZabVp6WlhRcElIdGNiaUFnSUNBZ0lITnZkWEpqWlNBclBTQjBaWGgwTG5Oc2FXTmxLR2x1WkdWNExDQnZabVp6WlhRcExuSmxjR3hoWTJVb1pYTmpZWEJsY2l3Z1pYTmpZWEJsUTJoaGNpazdYRzRnSUNBZ0lDQnBibVJsZUNBOUlHOW1abk5sZENBcklHMWhkR05vTG14bGJtZDBhRHRjYmx4dUlDQWdJQ0FnYVdZZ0tHVnpZMkZ3WlNrZ2UxeHVJQ0FnSUNBZ0lDQnpiM1Z5WTJVZ0t6MGdYQ0luSzF4Y2JpZ29YMTkwUFNoY0lpQXJJR1Z6WTJGd1pTQXJJRndpS1NrOVBXNTFiR3cvSnljNlh5NWxjMk5oY0dVb1gxOTBLU2tyWEZ4dUoxd2lPMXh1SUNBZ0lDQWdmU0JsYkhObElHbG1JQ2hwYm5SbGNuQnZiR0YwWlNrZ2UxeHVJQ0FnSUNBZ0lDQnpiM1Z5WTJVZ0t6MGdYQ0luSzF4Y2JpZ29YMTkwUFNoY0lpQXJJR2x1ZEdWeWNHOXNZWFJsSUNzZ1hDSXBLVDA5Ym5Wc2JEOG5KenBmWDNRcEsxeGNiaWRjSWp0Y2JpQWdJQ0FnSUgwZ1pXeHpaU0JwWmlBb1pYWmhiSFZoZEdVcElIdGNiaUFnSUNBZ0lDQWdjMjkxY21ObElDczlJRndpSnp0Y1hHNWNJaUFySUdWMllXeDFZWFJsSUNzZ1hDSmNYRzVmWDNBclBTZGNJanRjYmlBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnTHk4Z1FXUnZZbVVnVmsxeklHNWxaV1FnZEdobElHMWhkR05vSUhKbGRIVnlibVZrSUhSdklIQnliMlIxWTJVZ2RHaGxJR052Y25KbFkzUWdiMlptWlhOMExseHVJQ0FnSUNBZ2NtVjBkWEp1SUcxaGRHTm9PMXh1SUNBZ0lIMHBPMXh1SUNBZ0lITnZkWEpqWlNBclBTQmNJaWM3WEZ4dVhDSTdYRzVjYmlBZ0lDQXZMeUJKWmlCaElIWmhjbWxoWW14bElHbHpJRzV2ZENCemNHVmphV1pwWldRc0lIQnNZV05sSUdSaGRHRWdkbUZzZFdWeklHbHVJR3h2WTJGc0lITmpiM0JsTGx4dUlDQWdJR2xtSUNnaGMyVjBkR2x1WjNNdWRtRnlhV0ZpYkdVcElITnZkWEpqWlNBOUlDZDNhWFJvS0c5aWFueDhlMzBwZTF4Y2JpY2dLeUJ6YjNWeVkyVWdLeUFuZlZ4Y2JpYzdYRzVjYmlBZ0lDQnpiM1Z5WTJVZ1BTQmNJblpoY2lCZlgzUXNYMTl3UFNjbkxGOWZhajFCY25KaGVTNXdjbTkwYjNSNWNHVXVhbTlwYml4Y0lpQXJYRzRnSUNBZ0lDQmNJbkJ5YVc1MFBXWjFibU4wYVc5dUtDbDdYMTl3S3oxZlgyb3VZMkZzYkNoaGNtZDFiV1Z1ZEhNc0p5Y3BPMzA3WEZ4dVhDSWdLMXh1SUNBZ0lDQWdjMjkxY21ObElDc2dKM0psZEhWeWJpQmZYM0E3WEZ4dUp6dGNibHh1SUNBZ0lIUnllU0I3WEc0Z0lDQWdJQ0IyWVhJZ2NtVnVaR1Z5SUQwZ2JtVjNJRVoxYm1OMGFXOXVLSE5sZEhScGJtZHpMblpoY21saFlteGxJSHg4SUNkdlltb25MQ0FuWHljc0lITnZkWEpqWlNrN1hHNGdJQ0FnZlNCallYUmphQ0FvWlNrZ2UxeHVJQ0FnSUNBZ1pTNXpiM1Z5WTJVZ1BTQnpiM1Z5WTJVN1hHNGdJQ0FnSUNCMGFISnZkeUJsTzF4dUlDQWdJSDFjYmx4dUlDQWdJSFpoY2lCMFpXMXdiR0YwWlNBOUlHWjFibU4wYVc5dUtHUmhkR0VwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUJ5Wlc1a1pYSXVZMkZzYkNoMGFHbHpMQ0JrWVhSaExDQmZLVHRjYmlBZ0lDQjlPMXh1WEc0Z0lDQWdMeThnVUhKdmRtbGtaU0IwYUdVZ1kyOXRjR2xzWldRZ2MyOTFjbU5sSUdGeklHRWdZMjl1ZG1WdWFXVnVZMlVnWm05eUlIQnlaV052YlhCcGJHRjBhVzl1TGx4dUlDQWdJSFpoY2lCaGNtZDFiV1Z1ZENBOUlITmxkSFJwYm1kekxuWmhjbWxoWW14bElIeDhJQ2R2WW1vbk8xeHVJQ0FnSUhSbGJYQnNZWFJsTG5OdmRYSmpaU0E5SUNkbWRXNWpkR2x2YmlnbklDc2dZWEpuZFcxbGJuUWdLeUFuS1h0Y1hHNG5JQ3NnYzI5MWNtTmxJQ3NnSjMwbk8xeHVYRzRnSUNBZ2NtVjBkWEp1SUhSbGJYQnNZWFJsTzF4dUlDQjlPMXh1WEc0Z0lDOHZJRUZrWkNCaElGd2lZMmhoYVc1Y0lpQm1kVzVqZEdsdmJpNGdVM1JoY25RZ1kyaGhhVzVwYm1jZ1lTQjNjbUZ3Y0dWa0lGVnVaR1Z5YzJOdmNtVWdiMkpxWldOMExseHVJQ0JmTG1Ob1lXbHVJRDBnWm5WdVkzUnBiMjRvYjJKcUtTQjdYRzRnSUNBZ2RtRnlJR2x1YzNSaGJtTmxJRDBnWHlodlltb3BPMXh1SUNBZ0lHbHVjM1JoYm1ObExsOWphR0ZwYmlBOUlIUnlkV1U3WEc0Z0lDQWdjbVYwZFhKdUlHbHVjM1JoYm1ObE8xeHVJQ0I5TzF4dVhHNGdJQzh2SUU5UFVGeHVJQ0F2THlBdExTMHRMUzB0TFMwdExTMHRMUzFjYmlBZ0x5OGdTV1lnVlc1a1pYSnpZMjl5WlNCcGN5QmpZV3hzWldRZ1lYTWdZU0JtZFc1amRHbHZiaXdnYVhRZ2NtVjBkWEp1Y3lCaElIZHlZWEJ3WldRZ2IySnFaV04wSUhSb1lYUmNiaUFnTHk4Z1kyRnVJR0psSUhWelpXUWdUMDh0YzNSNWJHVXVJRlJvYVhNZ2QzSmhjSEJsY2lCb2IyeGtjeUJoYkhSbGNtVmtJSFpsY25OcGIyNXpJRzltSUdGc2JDQjBhR1ZjYmlBZ0x5OGdkVzVrWlhKelkyOXlaU0JtZFc1amRHbHZibk11SUZkeVlYQndaV1FnYjJKcVpXTjBjeUJ0WVhrZ1ltVWdZMmhoYVc1bFpDNWNibHh1SUNBdkx5QklaV3h3WlhJZ1puVnVZM1JwYjI0Z2RHOGdZMjl1ZEdsdWRXVWdZMmhoYVc1cGJtY2dhVzUwWlhKdFpXUnBZWFJsSUhKbGMzVnNkSE11WEc0Z0lIWmhjaUJ5WlhOMWJIUWdQU0JtZFc1amRHbHZiaWhwYm5OMFlXNWpaU3dnYjJKcUtTQjdYRzRnSUNBZ2NtVjBkWEp1SUdsdWMzUmhibU5sTGw5amFHRnBiaUEvSUY4b2IySnFLUzVqYUdGcGJpZ3BJRG9nYjJKcU8xeHVJQ0I5TzF4dVhHNGdJQzh2SUVGa1pDQjViM1Z5SUc5M2JpQmpkWE4wYjIwZ1puVnVZM1JwYjI1eklIUnZJSFJvWlNCVmJtUmxjbk5qYjNKbElHOWlhbVZqZEM1Y2JpQWdYeTV0YVhocGJpQTlJR1oxYm1OMGFXOXVLRzlpYWlrZ2UxeHVJQ0FnSUY4dVpXRmphQ2hmTG1aMWJtTjBhVzl1Y3lodlltb3BMQ0JtZFc1amRHbHZiaWh1WVcxbEtTQjdYRzRnSUNBZ0lDQjJZWElnWm5WdVl5QTlJRjliYm1GdFpWMGdQU0J2WW1wYmJtRnRaVjA3WEc0Z0lDQWdJQ0JmTG5CeWIzUnZkSGx3WlZ0dVlXMWxYU0E5SUdaMWJtTjBhVzl1S0NrZ2UxeHVJQ0FnSUNBZ0lDQjJZWElnWVhKbmN5QTlJRnQwYUdsekxsOTNjbUZ3Y0dWa1hUdGNiaUFnSUNBZ0lDQWdjSFZ6YUM1aGNIQnNlU2hoY21kekxDQmhjbWQxYldWdWRITXBPMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdjbVZ6ZFd4MEtIUm9hWE1zSUdaMWJtTXVZWEJ3Ykhrb1h5d2dZWEpuY3lrcE8xeHVJQ0FnSUNBZ2ZUdGNiaUFnSUNCOUtUdGNiaUFnZlR0Y2JseHVJQ0F2THlCQlpHUWdZV3hzSUc5bUlIUm9aU0JWYm1SbGNuTmpiM0psSUdaMWJtTjBhVzl1Y3lCMGJ5QjBhR1VnZDNKaGNIQmxjaUJ2WW1wbFkzUXVYRzRnSUY4dWJXbDRhVzRvWHlrN1hHNWNiaUFnTHk4Z1FXUmtJR0ZzYkNCdGRYUmhkRzl5SUVGeWNtRjVJR1oxYm1OMGFXOXVjeUIwYnlCMGFHVWdkM0poY0hCbGNpNWNiaUFnWHk1bFlXTm9LRnNuY0c5d0p5d2dKM0IxYzJnbkxDQW5jbVYyWlhKelpTY3NJQ2R6YUdsbWRDY3NJQ2R6YjNKMEp5d2dKM053YkdsalpTY3NJQ2QxYm5Ob2FXWjBKMTBzSUdaMWJtTjBhVzl1S0c1aGJXVXBJSHRjYmlBZ0lDQjJZWElnYldWMGFHOWtJRDBnUVhKeVlYbFFjbTkwYjF0dVlXMWxYVHRjYmlBZ0lDQmZMbkJ5YjNSdmRIbHdaVnR1WVcxbFhTQTlJR1oxYm1OMGFXOXVLQ2tnZTF4dUlDQWdJQ0FnZG1GeUlHOWlhaUE5SUhSb2FYTXVYM2R5WVhCd1pXUTdYRzRnSUNBZ0lDQnRaWFJvYjJRdVlYQndiSGtvYjJKcUxDQmhjbWQxYldWdWRITXBPMXh1SUNBZ0lDQWdhV1lnS0NodVlXMWxJRDA5UFNBbmMyaHBablFuSUh4OElHNWhiV1VnUFQwOUlDZHpjR3hwWTJVbktTQW1KaUJ2WW1vdWJHVnVaM1JvSUQwOVBTQXdLU0JrWld4bGRHVWdiMkpxV3pCZE8xeHVJQ0FnSUNBZ2NtVjBkWEp1SUhKbGMzVnNkQ2gwYUdsekxDQnZZbW9wTzF4dUlDQWdJSDA3WEc0Z0lIMHBPMXh1WEc0Z0lDOHZJRUZrWkNCaGJHd2dZV05qWlhOemIzSWdRWEp5WVhrZ1puVnVZM1JwYjI1eklIUnZJSFJvWlNCM2NtRndjR1Z5TGx4dUlDQmZMbVZoWTJnb1d5ZGpiMjVqWVhRbkxDQW5hbTlwYmljc0lDZHpiR2xqWlNkZExDQm1kVzVqZEdsdmJpaHVZVzFsS1NCN1hHNGdJQ0FnZG1GeUlHMWxkR2h2WkNBOUlFRnljbUY1VUhKdmRHOWJibUZ0WlYwN1hHNGdJQ0FnWHk1d2NtOTBiM1I1Y0dWYmJtRnRaVjBnUFNCbWRXNWpkR2x2YmlncElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCeVpYTjFiSFFvZEdocGN5d2diV1YwYUc5a0xtRndjR3g1S0hSb2FYTXVYM2R5WVhCd1pXUXNJR0Z5WjNWdFpXNTBjeWtwTzF4dUlDQWdJSDA3WEc0Z0lIMHBPMXh1WEc0Z0lDOHZJRVY0ZEhKaFkzUnpJSFJvWlNCeVpYTjFiSFFnWm5KdmJTQmhJSGR5WVhCd1pXUWdZVzVrSUdOb1lXbHVaV1FnYjJKcVpXTjBMbHh1SUNCZkxuQnliM1J2ZEhsd1pTNTJZV3gxWlNBOUlHWjFibU4wYVc5dUtDa2dlMXh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDkzY21Gd2NHVmtPMXh1SUNCOU8xeHVYRzRnSUM4dklGQnliM1pwWkdVZ2RXNTNjbUZ3Y0dsdVp5QndjbTk0ZVNCbWIzSWdjMjl0WlNCdFpYUm9iMlJ6SUhWelpXUWdhVzRnWlc1bmFXNWxJRzl3WlhKaGRHbHZibk5jYmlBZ0x5OGdjM1ZqYUNCaGN5QmhjbWwwYUcxbGRHbGpJR0Z1WkNCS1UwOU9JSE4wY21sdVoybG1hV05oZEdsdmJpNWNiaUFnWHk1d2NtOTBiM1I1Y0dVdWRtRnNkV1ZQWmlBOUlGOHVjSEp2ZEc5MGVYQmxMblJ2U2xOUFRpQTlJRjh1Y0hKdmRHOTBlWEJsTG5aaGJIVmxPMXh1WEc0Z0lGOHVjSEp2ZEc5MGVYQmxMblJ2VTNSeWFXNW5JRDBnWm5WdVkzUnBiMjRvS1NCN1hHNGdJQ0FnY21WMGRYSnVJQ2NuSUNzZ2RHaHBjeTVmZDNKaGNIQmxaRHRjYmlBZ2ZUdGNibHh1SUNBdkx5QkJUVVFnY21WbmFYTjBjbUYwYVc5dUlHaGhjSEJsYm5NZ1lYUWdkR2hsSUdWdVpDQm1iM0lnWTI5dGNHRjBhV0pwYkdsMGVTQjNhWFJvSUVGTlJDQnNiMkZrWlhKelhHNGdJQzh2SUhSb1lYUWdiV0Y1SUc1dmRDQmxibVp2Y21ObElHNWxlSFF0ZEhWeWJpQnpaVzFoYm5ScFkzTWdiMjRnYlc5a2RXeGxjeTRnUlhabGJpQjBhRzkxWjJnZ1oyVnVaWEpoYkZ4dUlDQXZMeUJ3Y21GamRHbGpaU0JtYjNJZ1FVMUVJSEpsWjJsemRISmhkR2x2YmlCcGN5QjBieUJpWlNCaGJtOXVlVzF2ZFhNc0lIVnVaR1Z5YzJOdmNtVWdjbVZuYVhOMFpYSnpYRzRnSUM4dklHRnpJR0VnYm1GdFpXUWdiVzlrZFd4bElHSmxZMkYxYzJVc0lHeHBhMlVnYWxGMVpYSjVMQ0JwZENCcGN5QmhJR0poYzJVZ2JHbGljbUZ5ZVNCMGFHRjBJR2x6WEc0Z0lDOHZJSEJ2Y0hWc1lYSWdaVzV2ZFdkb0lIUnZJR0psSUdKMWJtUnNaV1FnYVc0Z1lTQjBhR2x5WkNCd1lYSjBlU0JzYVdJc0lHSjFkQ0J1YjNRZ1ltVWdjR0Z5ZENCdlpseHVJQ0F2THlCaGJpQkJUVVFnYkc5aFpDQnlaWEYxWlhOMExpQlVhRzl6WlNCallYTmxjeUJqYjNWc1pDQm5aVzVsY21GMFpTQmhiaUJsY25KdmNpQjNhR1Z1SUdGdVhHNGdJQzh2SUdGdWIyNTViVzkxY3lCa1pXWnBibVVvS1NCcGN5QmpZV3hzWldRZ2IzVjBjMmxrWlNCdlppQmhJR3h2WVdSbGNpQnlaWEYxWlhOMExseHVJQ0JwWmlBb2RIbHdaVzltSUdSbFptbHVaU0E5UFQwZ0oyWjFibU4wYVc5dUp5QW1KaUJrWldacGJtVXVZVzFrS1NCN1hHNGdJQ0FnWkdWbWFXNWxLQ2QxYm1SbGNuTmpiM0psSnl3Z1cxMHNJR1oxYm1OMGFXOXVLQ2tnZTF4dUlDQWdJQ0FnY21WMGRYSnVJRjg3WEc0Z0lDQWdmU2s3WEc0Z0lIMWNibjB1WTJGc2JDaDBhR2x6S1NrN1hHNWNibHh1WEc0dkx5OHZMeTh2THk4dkx5OHZMeTh2THk5Y2JpOHZJRmRGUWxCQlEwc2dSazlQVkVWU1hHNHZMeUF1TDM0dmRXNWtaWEp6WTI5eVpTOTFibVJsY25OamIzSmxMbXB6WEc0dkx5QnRiMlIxYkdVZ2FXUWdQU0EwWEc0dkx5QnRiMlIxYkdVZ1kyaDFibXR6SUQwZ01DSmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGQlFUdEJRVU5CTzBGQlEwRTdJaXdpYzI5MWNtTmxVbTl2ZENJNklpSjlcIik7XG5cbi8qKiovIH0pLFxuLyogNSAqL1xuLyogbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9cbi8qIGFsbCBleHBvcnRzIHVzZWQgKi9cbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL193a3MuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbmV2YWwoXCJ2YXIgc3RvcmUgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vX3NoYXJlZCAqLyA0OCkoJ3drcycpXFxuICAsIHVpZCAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL191aWQgKi8gNTIpXFxuICAsIFN5bWJvbCAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL19nbG9iYWwgKi8gMTApLlN5bWJvbFxcbiAgLCBVU0VfU1lNQk9MID0gdHlwZW9mIFN5bWJvbCA9PSAnZnVuY3Rpb24nO1xcblxcbnZhciAkZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24obmFtZSl7XFxuICByZXR1cm4gc3RvcmVbbmFtZV0gfHwgKHN0b3JlW25hbWVdID1cXG4gICAgVVNFX1NZTUJPTCAmJiBTeW1ib2xbbmFtZV0gfHwgKFVTRV9TWU1CT0wgPyBTeW1ib2wgOiB1aWQpKCdTeW1ib2wuJyArIG5hbWUpKTtcXG59O1xcblxcbiRleHBvcnRzLnN0b3JlID0gc3RvcmU7Ly8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lOUzVxY3lJc0luTnZkWEpqWlhNaU9sc2lkMlZpY0dGamF6b3ZMeTh1TDM0dlkyOXlaUzFxY3k5c2FXSnlZWEo1TDIxdlpIVnNaWE12WDNkcmN5NXFjejh6TURJM0lsMHNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJblpoY2lCemRHOXlaU0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmYzJoaGNtVmtKeWtvSjNkcmN5Y3BYRzRnSUN3Z2RXbGtJQ0FnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDNWcFpDY3BYRzRnSUN3Z1UzbHRZbTlzSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDJkc2IySmhiQ2NwTGxONWJXSnZiRnh1SUNBc0lGVlRSVjlUV1UxQ1Qwd2dQU0IwZVhCbGIyWWdVM2x0WW05c0lEMDlJQ2RtZFc1amRHbHZiaWM3WEc1Y2JuWmhjaUFrWlhod2IzSjBjeUE5SUcxdlpIVnNaUzVsZUhCdmNuUnpJRDBnWm5WdVkzUnBiMjRvYm1GdFpTbDdYRzRnSUhKbGRIVnliaUJ6ZEc5eVpWdHVZVzFsWFNCOGZDQW9jM1J2Y21WYmJtRnRaVjBnUFZ4dUlDQWdJRlZUUlY5VFdVMUNUMHdnSmlZZ1UzbHRZbTlzVzI1aGJXVmRJSHg4SUNoVlUwVmZVMWxOUWs5TUlEOGdVM2x0WW05c0lEb2dkV2xrS1NnblUzbHRZbTlzTGljZ0t5QnVZVzFsS1NrN1hHNTlPMXh1WEc0a1pYaHdiM0owY3k1emRHOXlaU0E5SUhOMGIzSmxPMXh1WEc1Y2JpOHZMeTh2THk4dkx5OHZMeTh2THk4dkwxeHVMeThnVjBWQ1VFRkRTeUJHVDA5VVJWSmNiaTh2SUM0dmZpOWpiM0psTFdwekwyeHBZbkpoY25rdmJXOWtkV3hsY3k5ZmQydHpMbXB6WEc0dkx5QnRiMlIxYkdVZ2FXUWdQU0ExWEc0dkx5QnRiMlIxYkdVZ1kyaDFibXR6SUQwZ01DSmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVNJc0luTnZkWEpqWlZKdmIzUWlPaUlpZlE9PVwiKTtcblxuLyoqKi8gfSksXG4vKiA2ICovXG4vKiBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyogYWxsIGV4cG9ydHMgdXNlZCAqL1xuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL34vcmFtZGEvc3JjL2N1cnJ5Ti5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuZXZhbChcInZhciBfYXJpdHkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL2ludGVybmFsL19hcml0eSAqLyAxNCk7XFxudmFyIF9jdXJyeTEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL2ludGVybmFsL19jdXJyeTEgKi8gMik7XFxudmFyIF9jdXJyeTIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL2ludGVybmFsL19jdXJyeTIgKi8gMSk7XFxudmFyIF9jdXJyeU4gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL2ludGVybmFsL19jdXJyeU4gKi8gMTU2KTtcXG5cXG5cXG4vKipcXG4gKiBSZXR1cm5zIGEgY3VycmllZCBlcXVpdmFsZW50IG9mIHRoZSBwcm92aWRlZCBmdW5jdGlvbiwgd2l0aCB0aGUgc3BlY2lmaWVkXFxuICogYXJpdHkuIFRoZSBjdXJyaWVkIGZ1bmN0aW9uIGhhcyB0d28gdW51c3VhbCBjYXBhYmlsaXRpZXMuIEZpcnN0LCBpdHNcXG4gKiBhcmd1bWVudHMgbmVlZG4ndCBiZSBwcm92aWRlZCBvbmUgYXQgYSB0aW1lLiBJZiBgZ2AgaXMgYFIuY3VycnlOKDMsIGYpYCwgdGhlXFxuICogZm9sbG93aW5nIGFyZSBlcXVpdmFsZW50OlxcbiAqXFxuICogICAtIGBnKDEpKDIpKDMpYFxcbiAqICAgLSBgZygxKSgyLCAzKWBcXG4gKiAgIC0gYGcoMSwgMikoMylgXFxuICogICAtIGBnKDEsIDIsIDMpYFxcbiAqXFxuICogU2Vjb25kbHksIHRoZSBzcGVjaWFsIHBsYWNlaG9sZGVyIHZhbHVlIGBSLl9fYCBtYXkgYmUgdXNlZCB0byBzcGVjaWZ5XFxuICogXFxcImdhcHNcXFwiLCBhbGxvd2luZyBwYXJ0aWFsIGFwcGxpY2F0aW9uIG9mIGFueSBjb21iaW5hdGlvbiBvZiBhcmd1bWVudHMsXFxuICogcmVnYXJkbGVzcyBvZiB0aGVpciBwb3NpdGlvbnMuIElmIGBnYCBpcyBhcyBhYm92ZSBhbmQgYF9gIGlzIGBSLl9fYCwgdGhlXFxuICogZm9sbG93aW5nIGFyZSBlcXVpdmFsZW50OlxcbiAqXFxuICogICAtIGBnKDEsIDIsIDMpYFxcbiAqICAgLSBgZyhfLCAyLCAzKSgxKWBcXG4gKiAgIC0gYGcoXywgXywgMykoMSkoMilgXFxuICogICAtIGBnKF8sIF8sIDMpKDEsIDIpYFxcbiAqICAgLSBgZyhfLCAyKSgxKSgzKWBcXG4gKiAgIC0gYGcoXywgMikoMSwgMylgXFxuICogICAtIGBnKF8sIDIpKF8sIDMpKDEpYFxcbiAqXFxuICogQGZ1bmNcXG4gKiBAbWVtYmVyT2YgUlxcbiAqIEBzaW5jZSB2MC41LjBcXG4gKiBAY2F0ZWdvcnkgRnVuY3Rpb25cXG4gKiBAc2lnIE51bWJlciAtPiAoKiAtPiBhKSAtPiAoKiAtPiBhKVxcbiAqIEBwYXJhbSB7TnVtYmVyfSBsZW5ndGggVGhlIGFyaXR5IGZvciB0aGUgcmV0dXJuZWQgZnVuY3Rpb24uXFxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGZ1bmN0aW9uIHRvIGN1cnJ5LlxcbiAqIEByZXR1cm4ge0Z1bmN0aW9ufSBBIG5ldywgY3VycmllZCBmdW5jdGlvbi5cXG4gKiBAc2VlIFIuY3VycnlcXG4gKiBAZXhhbXBsZVxcbiAqXFxuICogICAgICB2YXIgc3VtQXJncyA9ICguLi5hcmdzKSA9PiBSLnN1bShhcmdzKTtcXG4gKlxcbiAqICAgICAgdmFyIGN1cnJpZWRBZGRGb3VyTnVtYmVycyA9IFIuY3VycnlOKDQsIHN1bUFyZ3MpO1xcbiAqICAgICAgdmFyIGYgPSBjdXJyaWVkQWRkRm91ck51bWJlcnMoMSwgMik7XFxuICogICAgICB2YXIgZyA9IGYoMyk7XFxuICogICAgICBnKDQpOyAvLz0+IDEwXFxuICovXFxubW9kdWxlLmV4cG9ydHMgPSBfY3VycnkyKGZ1bmN0aW9uIGN1cnJ5TihsZW5ndGgsIGZuKSB7XFxuICBpZiAobGVuZ3RoID09PSAxKSB7XFxuICAgIHJldHVybiBfY3VycnkxKGZuKTtcXG4gIH1cXG4gIHJldHVybiBfYXJpdHkobGVuZ3RoLCBfY3VycnlOKGxlbmd0aCwgW10sIGZuKSk7XFxufSk7XFxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lOaTVxY3lJc0luTnZkWEpqWlhNaU9sc2lkMlZpY0dGamF6b3ZMeTh1TDM0dmNtRnRaR0V2YzNKakwyTjFjbko1VGk1cWN6OWlNelk1SWwwc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYkluWmhjaUJmWVhKcGRIa2dQU0J5WlhGMWFYSmxLQ2N1TDJsdWRHVnlibUZzTDE5aGNtbDBlU2NwTzF4dWRtRnlJRjlqZFhKeWVURWdQU0J5WlhGMWFYSmxLQ2N1TDJsdWRHVnlibUZzTDE5amRYSnllVEVuS1R0Y2JuWmhjaUJmWTNWeWNua3lJRDBnY21WeGRXbHlaU2duTGk5cGJuUmxjbTVoYkM5ZlkzVnljbmt5SnlrN1hHNTJZWElnWDJOMWNuSjVUaUE5SUhKbGNYVnBjbVVvSnk0dmFXNTBaWEp1WVd3dlgyTjFjbko1VGljcE8xeHVYRzVjYmk4cUtseHVJQ29nVW1WMGRYSnVjeUJoSUdOMWNuSnBaV1FnWlhGMWFYWmhiR1Z1ZENCdlppQjBhR1VnY0hKdmRtbGtaV1FnWm5WdVkzUnBiMjRzSUhkcGRHZ2dkR2hsSUhOd1pXTnBabWxsWkZ4dUlDb2dZWEpwZEhrdUlGUm9aU0JqZFhKeWFXVmtJR1oxYm1OMGFXOXVJR2hoY3lCMGQyOGdkVzUxYzNWaGJDQmpZWEJoWW1sc2FYUnBaWE11SUVacGNuTjBMQ0JwZEhOY2JpQXFJR0Z5WjNWdFpXNTBjeUJ1WldWa2JpZDBJR0psSUhCeWIzWnBaR1ZrSUc5dVpTQmhkQ0JoSUhScGJXVXVJRWxtSUdCbllDQnBjeUJnVWk1amRYSnllVTRvTXl3Z1ppbGdMQ0IwYUdWY2JpQXFJR1p2Ykd4dmQybHVaeUJoY21VZ1pYRjFhWFpoYkdWdWREcGNiaUFxWEc0Z0tpQWdJQzBnWUdjb01Ta29NaWtvTXlsZ1hHNGdLaUFnSUMwZ1lHY29NU2tvTWl3Z015bGdYRzRnS2lBZ0lDMGdZR2NvTVN3Z01pa29NeWxnWEc0Z0tpQWdJQzBnWUdjb01Td2dNaXdnTXlsZ1hHNGdLbHh1SUNvZ1UyVmpiMjVrYkhrc0lIUm9aU0J6Y0dWamFXRnNJSEJzWVdObGFHOXNaR1Z5SUhaaGJIVmxJR0JTTGw5ZllDQnRZWGtnWW1VZ2RYTmxaQ0IwYnlCemNHVmphV1o1WEc0Z0tpQmNJbWRoY0hOY0lpd2dZV3hzYjNkcGJtY2djR0Z5ZEdsaGJDQmhjSEJzYVdOaGRHbHZiaUJ2WmlCaGJua2dZMjl0WW1sdVlYUnBiMjRnYjJZZ1lYSm5kVzFsYm5SekxGeHVJQ29nY21WbllYSmtiR1Z6Y3lCdlppQjBhR1ZwY2lCd2IzTnBkR2x2Ym5NdUlFbG1JR0JuWUNCcGN5QmhjeUJoWW05MlpTQmhibVFnWUY5Z0lHbHpJR0JTTGw5ZllDd2dkR2hsWEc0Z0tpQm1iMnhzYjNkcGJtY2dZWEpsSUdWeGRXbDJZV3hsYm5RNlhHNGdLbHh1SUNvZ0lDQXRJR0JuS0RFc0lESXNJRE1wWUZ4dUlDb2dJQ0F0SUdCbktGOHNJRElzSURNcEtERXBZRnh1SUNvZ0lDQXRJR0JuS0Y4c0lGOHNJRE1wS0RFcEtESXBZRnh1SUNvZ0lDQXRJR0JuS0Y4c0lGOHNJRE1wS0RFc0lESXBZRnh1SUNvZ0lDQXRJR0JuS0Y4c0lESXBLREVwS0RNcFlGeHVJQ29nSUNBdElHQm5LRjhzSURJcEtERXNJRE1wWUZ4dUlDb2dJQ0F0SUdCbktGOHNJRElwS0Y4c0lETXBLREVwWUZ4dUlDcGNiaUFxSUVCbWRXNWpYRzRnS2lCQWJXVnRZbVZ5VDJZZ1VseHVJQ29nUUhOcGJtTmxJSFl3TGpVdU1GeHVJQ29nUUdOaGRHVm5iM0o1SUVaMWJtTjBhVzl1WEc0Z0tpQkFjMmxuSUU1MWJXSmxjaUF0UGlBb0tpQXRQaUJoS1NBdFBpQW9LaUF0UGlCaEtWeHVJQ29nUUhCaGNtRnRJSHRPZFcxaVpYSjlJR3hsYm1kMGFDQlVhR1VnWVhKcGRIa2dabTl5SUhSb1pTQnlaWFIxY201bFpDQm1kVzVqZEdsdmJpNWNiaUFxSUVCd1lYSmhiU0I3Um5WdVkzUnBiMjU5SUdadUlGUm9aU0JtZFc1amRHbHZiaUIwYnlCamRYSnllUzVjYmlBcUlFQnlaWFIxY200Z2UwWjFibU4wYVc5dWZTQkJJRzVsZHl3Z1kzVnljbWxsWkNCbWRXNWpkR2x2Ymk1Y2JpQXFJRUJ6WldVZ1VpNWpkWEp5ZVZ4dUlDb2dRR1Y0WVcxd2JHVmNiaUFxWEc0Z0tpQWdJQ0FnSUhaaGNpQnpkVzFCY21keklEMGdLQzR1TG1GeVozTXBJRDArSUZJdWMzVnRLR0Z5WjNNcE8xeHVJQ3BjYmlBcUlDQWdJQ0FnZG1GeUlHTjFjbkpwWldSQlpHUkdiM1Z5VG5WdFltVnljeUE5SUZJdVkzVnljbmxPS0RRc0lITjFiVUZ5WjNNcE8xeHVJQ29nSUNBZ0lDQjJZWElnWmlBOUlHTjFjbkpwWldSQlpHUkdiM1Z5VG5WdFltVnljeWd4TENBeUtUdGNiaUFxSUNBZ0lDQWdkbUZ5SUdjZ1BTQm1LRE1wTzF4dUlDb2dJQ0FnSUNCbktEUXBPeUF2THowK0lERXdYRzRnS2k5Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1gyTjFjbko1TWlobWRXNWpkR2x2YmlCamRYSnllVTRvYkdWdVozUm9MQ0JtYmlrZ2UxeHVJQ0JwWmlBb2JHVnVaM1JvSUQwOVBTQXhLU0I3WEc0Z0lDQWdjbVYwZFhKdUlGOWpkWEp5ZVRFb1ptNHBPMXh1SUNCOVhHNGdJSEpsZEhWeWJpQmZZWEpwZEhrb2JHVnVaM1JvTENCZlkzVnljbmxPS0d4bGJtZDBhQ3dnVzEwc0lHWnVLU2s3WEc1OUtUdGNibHh1WEc1Y2JpOHZMeTh2THk4dkx5OHZMeTh2THk4dkwxeHVMeThnVjBWQ1VFRkRTeUJHVDA5VVJWSmNiaTh2SUM0dmZpOXlZVzFrWVM5emNtTXZZM1Z5Y25sT0xtcHpYRzR2THlCdGIyUjFiR1VnYVdRZ1BTQTJYRzR2THlCdGIyUjFiR1VnWTJoMWJtdHpJRDBnTUNKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPeUlzSW5OdmRYSmpaVkp2YjNRaU9pSWlmUT09XCIpO1xuXG4vKioqLyB9KSxcbi8qIDcgKi9cbi8qIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKiBhbGwgZXhwb3J0cyB1c2VkICovXG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL34vcmFtZGEvc3JjL2ludGVybmFsL19jdXJyeTMuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5ldmFsKFwidmFyIF9jdXJyeTEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL19jdXJyeTEgKi8gMik7XFxudmFyIF9jdXJyeTIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL19jdXJyeTIgKi8gMSk7XFxudmFyIF9pc1BsYWNlaG9sZGVyID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9faXNQbGFjZWhvbGRlciAqLyAyNSk7XFxuXFxuXFxuLyoqXFxuICogT3B0aW1pemVkIGludGVybmFsIHRocmVlLWFyaXR5IGN1cnJ5IGZ1bmN0aW9uLlxcbiAqXFxuICogQHByaXZhdGVcXG4gKiBAY2F0ZWdvcnkgRnVuY3Rpb25cXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgZnVuY3Rpb24gdG8gY3VycnkuXFxuICogQHJldHVybiB7RnVuY3Rpb259IFRoZSBjdXJyaWVkIGZ1bmN0aW9uLlxcbiAqL1xcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gX2N1cnJ5Myhmbikge1xcbiAgcmV0dXJuIGZ1bmN0aW9uIGYzKGEsIGIsIGMpIHtcXG4gICAgc3dpdGNoIChhcmd1bWVudHMubGVuZ3RoKSB7XFxuICAgICAgY2FzZSAwOlxcbiAgICAgICAgcmV0dXJuIGYzO1xcbiAgICAgIGNhc2UgMTpcXG4gICAgICAgIHJldHVybiBfaXNQbGFjZWhvbGRlcihhKSA/IGYzXFxuICAgICAgICAgICAgIDogX2N1cnJ5MihmdW5jdGlvbihfYiwgX2MpIHsgcmV0dXJuIGZuKGEsIF9iLCBfYyk7IH0pO1xcbiAgICAgIGNhc2UgMjpcXG4gICAgICAgIHJldHVybiBfaXNQbGFjZWhvbGRlcihhKSAmJiBfaXNQbGFjZWhvbGRlcihiKSA/IGYzXFxuICAgICAgICAgICAgIDogX2lzUGxhY2Vob2xkZXIoYSkgPyBfY3VycnkyKGZ1bmN0aW9uKF9hLCBfYykgeyByZXR1cm4gZm4oX2EsIGIsIF9jKTsgfSlcXG4gICAgICAgICAgICAgOiBfaXNQbGFjZWhvbGRlcihiKSA/IF9jdXJyeTIoZnVuY3Rpb24oX2IsIF9jKSB7IHJldHVybiBmbihhLCBfYiwgX2MpOyB9KVxcbiAgICAgICAgICAgICA6IF9jdXJyeTEoZnVuY3Rpb24oX2MpIHsgcmV0dXJuIGZuKGEsIGIsIF9jKTsgfSk7XFxuICAgICAgZGVmYXVsdDpcXG4gICAgICAgIHJldHVybiBfaXNQbGFjZWhvbGRlcihhKSAmJiBfaXNQbGFjZWhvbGRlcihiKSAmJiBfaXNQbGFjZWhvbGRlcihjKSA/IGYzXFxuICAgICAgICAgICAgIDogX2lzUGxhY2Vob2xkZXIoYSkgJiYgX2lzUGxhY2Vob2xkZXIoYikgPyBfY3VycnkyKGZ1bmN0aW9uKF9hLCBfYikgeyByZXR1cm4gZm4oX2EsIF9iLCBjKTsgfSlcXG4gICAgICAgICAgICAgOiBfaXNQbGFjZWhvbGRlcihhKSAmJiBfaXNQbGFjZWhvbGRlcihjKSA/IF9jdXJyeTIoZnVuY3Rpb24oX2EsIF9jKSB7IHJldHVybiBmbihfYSwgYiwgX2MpOyB9KVxcbiAgICAgICAgICAgICA6IF9pc1BsYWNlaG9sZGVyKGIpICYmIF9pc1BsYWNlaG9sZGVyKGMpID8gX2N1cnJ5MihmdW5jdGlvbihfYiwgX2MpIHsgcmV0dXJuIGZuKGEsIF9iLCBfYyk7IH0pXFxuICAgICAgICAgICAgIDogX2lzUGxhY2Vob2xkZXIoYSkgPyBfY3VycnkxKGZ1bmN0aW9uKF9hKSB7IHJldHVybiBmbihfYSwgYiwgYyk7IH0pXFxuICAgICAgICAgICAgIDogX2lzUGxhY2Vob2xkZXIoYikgPyBfY3VycnkxKGZ1bmN0aW9uKF9iKSB7IHJldHVybiBmbihhLCBfYiwgYyk7IH0pXFxuICAgICAgICAgICAgIDogX2lzUGxhY2Vob2xkZXIoYykgPyBfY3VycnkxKGZ1bmN0aW9uKF9jKSB7IHJldHVybiBmbihhLCBiLCBfYyk7IH0pXFxuICAgICAgICAgICAgIDogZm4oYSwgYiwgYyk7XFxuICAgIH1cXG4gIH07XFxufTtcXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaU55NXFjeUlzSW5OdmRYSmpaWE1pT2xzaWQyVmljR0ZqYXpvdkx5OHVMMzR2Y21GdFpHRXZjM0pqTDJsdWRHVnlibUZzTDE5amRYSnllVE11YW5NL09ETmxZaUpkTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lKMllYSWdYMk4xY25KNU1TQTlJSEpsY1hWcGNtVW9KeTR2WDJOMWNuSjVNU2NwTzF4dWRtRnlJRjlqZFhKeWVUSWdQU0J5WlhGMWFYSmxLQ2N1TDE5amRYSnllVEluS1R0Y2JuWmhjaUJmYVhOUWJHRmpaV2h2YkdSbGNpQTlJSEpsY1hWcGNtVW9KeTR2WDJselVHeGhZMlZvYjJ4a1pYSW5LVHRjYmx4dVhHNHZLaXBjYmlBcUlFOXdkR2x0YVhwbFpDQnBiblJsY201aGJDQjBhSEpsWlMxaGNtbDBlU0JqZFhKeWVTQm1kVzVqZEdsdmJpNWNiaUFxWEc0Z0tpQkFjSEpwZG1GMFpWeHVJQ29nUUdOaGRHVm5iM0o1SUVaMWJtTjBhVzl1WEc0Z0tpQkFjR0Z5WVcwZ2UwWjFibU4wYVc5dWZTQm1iaUJVYUdVZ1puVnVZM1JwYjI0Z2RHOGdZM1Z5Y25rdVhHNGdLaUJBY21WMGRYSnVJSHRHZFc1amRHbHZibjBnVkdobElHTjFjbkpwWldRZ1puVnVZM1JwYjI0dVhHNGdLaTljYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnWm5WdVkzUnBiMjRnWDJOMWNuSjVNeWhtYmlrZ2UxeHVJQ0J5WlhSMWNtNGdablZ1WTNScGIyNGdaak1vWVN3Z1lpd2dZeWtnZTF4dUlDQWdJSE4zYVhSamFDQW9ZWEpuZFcxbGJuUnpMbXhsYm1kMGFDa2dlMXh1SUNBZ0lDQWdZMkZ6WlNBd09seHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1pqTTdYRzRnSUNBZ0lDQmpZWE5sSURFNlhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCZmFYTlFiR0ZqWldodmJHUmxjaWhoS1NBL0lHWXpYRzRnSUNBZ0lDQWdJQ0FnSUNBZ09pQmZZM1Z5Y25reUtHWjFibU4wYVc5dUtGOWlMQ0JmWXlrZ2V5QnlaWFIxY200Z1ptNG9ZU3dnWDJJc0lGOWpLVHNnZlNrN1hHNGdJQ0FnSUNCallYTmxJREk2WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJmYVhOUWJHRmpaV2h2YkdSbGNpaGhLU0FtSmlCZmFYTlFiR0ZqWldodmJHUmxjaWhpS1NBL0lHWXpYRzRnSUNBZ0lDQWdJQ0FnSUNBZ09pQmZhWE5RYkdGalpXaHZiR1JsY2loaEtTQS9JRjlqZFhKeWVUSW9ablZ1WTNScGIyNG9YMkVzSUY5aktTQjdJSEpsZEhWeWJpQm1iaWhmWVN3Z1lpd2dYMk1wT3lCOUtWeHVJQ0FnSUNBZ0lDQWdJQ0FnSURvZ1gybHpVR3hoWTJWb2IyeGtaWElvWWlrZ1B5QmZZM1Z5Y25reUtHWjFibU4wYVc5dUtGOWlMQ0JmWXlrZ2V5QnlaWFIxY200Z1ptNG9ZU3dnWDJJc0lGOWpLVHNnZlNsY2JpQWdJQ0FnSUNBZ0lDQWdJQ0E2SUY5amRYSnllVEVvWm5WdVkzUnBiMjRvWDJNcElIc2djbVYwZFhKdUlHWnVLR0VzSUdJc0lGOWpLVHNnZlNrN1hHNGdJQ0FnSUNCa1pXWmhkV3gwT2x4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnWDJselVHeGhZMlZvYjJ4a1pYSW9ZU2tnSmlZZ1gybHpVR3hoWTJWb2IyeGtaWElvWWlrZ0ppWWdYMmx6VUd4aFkyVm9iMnhrWlhJb1l5a2dQeUJtTTF4dUlDQWdJQ0FnSUNBZ0lDQWdJRG9nWDJselVHeGhZMlZvYjJ4a1pYSW9ZU2tnSmlZZ1gybHpVR3hoWTJWb2IyeGtaWElvWWlrZ1B5QmZZM1Z5Y25reUtHWjFibU4wYVc5dUtGOWhMQ0JmWWlrZ2V5QnlaWFIxY200Z1ptNG9YMkVzSUY5aUxDQmpLVHNnZlNsY2JpQWdJQ0FnSUNBZ0lDQWdJQ0E2SUY5cGMxQnNZV05sYUc5c1pHVnlLR0VwSUNZbUlGOXBjMUJzWVdObGFHOXNaR1Z5S0dNcElEOGdYMk4xY25KNU1paG1kVzVqZEdsdmJpaGZZU3dnWDJNcElIc2djbVYwZFhKdUlHWnVLRjloTENCaUxDQmZZeWs3SUgwcFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnT2lCZmFYTlFiR0ZqWldodmJHUmxjaWhpS1NBbUppQmZhWE5RYkdGalpXaHZiR1JsY2loaktTQS9JRjlqZFhKeWVUSW9ablZ1WTNScGIyNG9YMklzSUY5aktTQjdJSEpsZEhWeWJpQm1iaWhoTENCZllpd2dYMk1wT3lCOUtWeHVJQ0FnSUNBZ0lDQWdJQ0FnSURvZ1gybHpVR3hoWTJWb2IyeGtaWElvWVNrZ1B5QmZZM1Z5Y25reEtHWjFibU4wYVc5dUtGOWhLU0I3SUhKbGRIVnliaUJtYmloZllTd2dZaXdnWXlrN0lIMHBYRzRnSUNBZ0lDQWdJQ0FnSUNBZ09pQmZhWE5RYkdGalpXaHZiR1JsY2loaUtTQS9JRjlqZFhKeWVURW9ablZ1WTNScGIyNG9YMklwSUhzZ2NtVjBkWEp1SUdadUtHRXNJRjlpTENCaktUc2dmU2xjYmlBZ0lDQWdJQ0FnSUNBZ0lDQTZJRjlwYzFCc1lXTmxhRzlzWkdWeUtHTXBJRDhnWDJOMWNuSjVNU2htZFc1amRHbHZiaWhmWXlrZ2V5QnlaWFIxY200Z1ptNG9ZU3dnWWl3Z1gyTXBPeUI5S1Z4dUlDQWdJQ0FnSUNBZ0lDQWdJRG9nWm00b1lTd2dZaXdnWXlrN1hHNGdJQ0FnZlZ4dUlDQjlPMXh1ZlR0Y2JseHVYRzVjYmk4dkx5OHZMeTh2THk4dkx5OHZMeTh2TDF4dUx5OGdWMFZDVUVGRFN5QkdUMDlVUlZKY2JpOHZJQzR2Zmk5eVlXMWtZUzl6Y21NdmFXNTBaWEp1WVd3dlgyTjFjbko1TXk1cWMxeHVMeThnYlc5a2RXeGxJR2xrSUQwZ04xeHVMeThnYlc5a2RXeGxJR05vZFc1cmN5QTlJREFpWFN3aWJXRndjR2x1WjNNaU9pSkJRVUZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdJaXdpYzI5MWNtTmxVbTl2ZENJNklpSjlcIik7XG5cbi8qKiovIH0pLFxuLyogOCAqL1xuLyogbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9cbi8qIGFsbCBleHBvcnRzIHVzZWQgKi9cbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9+L3JhbWRhL3NyYy9tYXAuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbmV2YWwoXCJ2YXIgX2N1cnJ5MiA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vaW50ZXJuYWwvX2N1cnJ5MiAqLyAxKTtcXG52YXIgX2Rpc3BhdGNoYWJsZSA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vaW50ZXJuYWwvX2Rpc3BhdGNoYWJsZSAqLyA1OCk7XFxudmFyIF9tYXAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL2ludGVybmFsL19tYXAgKi8gNjEpO1xcbnZhciBfcmVkdWNlID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9pbnRlcm5hbC9fcmVkdWNlICovIDE2KTtcXG52YXIgX3htYXAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL2ludGVybmFsL194bWFwICovIDE3MSk7XFxudmFyIGN1cnJ5TiA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vY3VycnlOICovIDYpO1xcbnZhciBrZXlzID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9rZXlzICovIDE3KTtcXG5cXG5cXG4vKipcXG4gKiBUYWtlcyBhIGZ1bmN0aW9uIGFuZFxcbiAqIGEgW2Z1bmN0b3JdKGh0dHBzOi8vZ2l0aHViLmNvbS9mYW50YXN5bGFuZC9mYW50YXN5LWxhbmQjZnVuY3RvciksXFxuICogYXBwbGllcyB0aGUgZnVuY3Rpb24gdG8gZWFjaCBvZiB0aGUgZnVuY3RvcidzIHZhbHVlcywgYW5kIHJldHVybnNcXG4gKiBhIGZ1bmN0b3Igb2YgdGhlIHNhbWUgc2hhcGUuXFxuICpcXG4gKiBSYW1kYSBwcm92aWRlcyBzdWl0YWJsZSBgbWFwYCBpbXBsZW1lbnRhdGlvbnMgZm9yIGBBcnJheWAgYW5kIGBPYmplY3RgLFxcbiAqIHNvIHRoaXMgZnVuY3Rpb24gbWF5IGJlIGFwcGxpZWQgdG8gYFsxLCAyLCAzXWAgb3IgYHt4OiAxLCB5OiAyLCB6OiAzfWAuXFxuICpcXG4gKiBEaXNwYXRjaGVzIHRvIHRoZSBgbWFwYCBtZXRob2Qgb2YgdGhlIHNlY29uZCBhcmd1bWVudCwgaWYgcHJlc2VudC5cXG4gKlxcbiAqIEFjdHMgYXMgYSB0cmFuc2R1Y2VyIGlmIGEgdHJhbnNmb3JtZXIgaXMgZ2l2ZW4gaW4gbGlzdCBwb3NpdGlvbi5cXG4gKlxcbiAqIEFsc28gdHJlYXRzIGZ1bmN0aW9ucyBhcyBmdW5jdG9ycyBhbmQgd2lsbCBjb21wb3NlIHRoZW0gdG9nZXRoZXIuXFxuICpcXG4gKiBAZnVuY1xcbiAqIEBtZW1iZXJPZiBSXFxuICogQHNpbmNlIHYwLjEuMFxcbiAqIEBjYXRlZ29yeSBMaXN0XFxuICogQHNpZyBGdW5jdG9yIGYgPT4gKGEgLT4gYikgLT4gZiBhIC0+IGYgYlxcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBmdW5jdGlvbiB0byBiZSBjYWxsZWQgb24gZXZlcnkgZWxlbWVudCBvZiB0aGUgaW5wdXQgYGxpc3RgLlxcbiAqIEBwYXJhbSB7QXJyYXl9IGxpc3QgVGhlIGxpc3QgdG8gYmUgaXRlcmF0ZWQgb3Zlci5cXG4gKiBAcmV0dXJuIHtBcnJheX0gVGhlIG5ldyBsaXN0LlxcbiAqIEBzZWUgUi50cmFuc2R1Y2UsIFIuYWRkSW5kZXhcXG4gKiBAZXhhbXBsZVxcbiAqXFxuICogICAgICB2YXIgZG91YmxlID0geCA9PiB4ICogMjtcXG4gKlxcbiAqICAgICAgUi5tYXAoZG91YmxlLCBbMSwgMiwgM10pOyAvLz0+IFsyLCA0LCA2XVxcbiAqXFxuICogICAgICBSLm1hcChkb3VibGUsIHt4OiAxLCB5OiAyLCB6OiAzfSk7IC8vPT4ge3g6IDIsIHk6IDQsIHo6IDZ9XFxuICogQHN5bWIgUi5tYXAoZiwgW2EsIGJdKSA9IFtmKGEpLCBmKGIpXVxcbiAqIEBzeW1iIFIubWFwKGYsIHsgeDogYSwgeTogYiB9KSA9IHsgeDogZihhKSwgeTogZihiKSB9XFxuICogQHN5bWIgUi5tYXAoZiwgZnVuY3Rvcl9vKSA9IGZ1bmN0b3Jfby5tYXAoZilcXG4gKi9cXG5tb2R1bGUuZXhwb3J0cyA9IF9jdXJyeTIoX2Rpc3BhdGNoYWJsZShbJ21hcCddLCBfeG1hcCwgZnVuY3Rpb24gbWFwKGZuLCBmdW5jdG9yKSB7XFxuICBzd2l0Y2ggKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChmdW5jdG9yKSkge1xcbiAgICBjYXNlICdbb2JqZWN0IEZ1bmN0aW9uXSc6XFxuICAgICAgcmV0dXJuIGN1cnJ5TihmdW5jdG9yLmxlbmd0aCwgZnVuY3Rpb24oKSB7XFxuICAgICAgICByZXR1cm4gZm4uY2FsbCh0aGlzLCBmdW5jdG9yLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xcbiAgICAgIH0pO1xcbiAgICBjYXNlICdbb2JqZWN0IE9iamVjdF0nOlxcbiAgICAgIHJldHVybiBfcmVkdWNlKGZ1bmN0aW9uKGFjYywga2V5KSB7XFxuICAgICAgICBhY2Nba2V5XSA9IGZuKGZ1bmN0b3Jba2V5XSk7XFxuICAgICAgICByZXR1cm4gYWNjO1xcbiAgICAgIH0sIHt9LCBrZXlzKGZ1bmN0b3IpKTtcXG4gICAgZGVmYXVsdDpcXG4gICAgICByZXR1cm4gX21hcChmbiwgZnVuY3Rvcik7XFxuICB9XFxufSkpO1xcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pT0M1cWN5SXNJbk52ZFhKalpYTWlPbHNpZDJWaWNHRmphem92THk4dUwzNHZjbUZ0WkdFdmMzSmpMMjFoY0M1cWN6ODFNR1JpSWwwc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYkluWmhjaUJmWTNWeWNua3lJRDBnY21WeGRXbHlaU2duTGk5cGJuUmxjbTVoYkM5ZlkzVnljbmt5SnlrN1hHNTJZWElnWDJScGMzQmhkR05vWVdKc1pTQTlJSEpsY1hWcGNtVW9KeTR2YVc1MFpYSnVZV3d2WDJScGMzQmhkR05vWVdKc1pTY3BPMXh1ZG1GeUlGOXRZWEFnUFNCeVpYRjFhWEpsS0NjdUwybHVkR1Z5Ym1Gc0wxOXRZWEFuS1R0Y2JuWmhjaUJmY21Wa2RXTmxJRDBnY21WeGRXbHlaU2duTGk5cGJuUmxjbTVoYkM5ZmNtVmtkV05sSnlrN1hHNTJZWElnWDNodFlYQWdQU0J5WlhGMWFYSmxLQ2N1TDJsdWRHVnlibUZzTDE5NGJXRndKeWs3WEc1MllYSWdZM1Z5Y25sT0lEMGdjbVZ4ZFdseVpTZ25MaTlqZFhKeWVVNG5LVHRjYm5aaGNpQnJaWGx6SUQwZ2NtVnhkV2x5WlNnbkxpOXJaWGx6SnlrN1hHNWNibHh1THlvcVhHNGdLaUJVWVd0bGN5QmhJR1oxYm1OMGFXOXVJR0Z1WkZ4dUlDb2dZU0JiWm5WdVkzUnZjbDBvYUhSMGNITTZMeTluYVhSb2RXSXVZMjl0TDJaaGJuUmhjM2xzWVc1a0wyWmhiblJoYzNrdGJHRnVaQ05tZFc1amRHOXlLU3hjYmlBcUlHRndjR3hwWlhNZ2RHaGxJR1oxYm1OMGFXOXVJSFJ2SUdWaFkyZ2diMllnZEdobElHWjFibU4wYjNJbmN5QjJZV3gxWlhNc0lHRnVaQ0J5WlhSMWNtNXpYRzRnS2lCaElHWjFibU4wYjNJZ2IyWWdkR2hsSUhOaGJXVWdjMmhoY0dVdVhHNGdLbHh1SUNvZ1VtRnRaR0VnY0hKdmRtbGtaWE1nYzNWcGRHRmliR1VnWUcxaGNHQWdhVzF3YkdWdFpXNTBZWFJwYjI1eklHWnZjaUJnUVhKeVlYbGdJR0Z1WkNCZ1QySnFaV04wWUN4Y2JpQXFJSE52SUhSb2FYTWdablZ1WTNScGIyNGdiV0Y1SUdKbElHRndjR3hwWldRZ2RHOGdZRnN4TENBeUxDQXpYV0FnYjNJZ1lIdDRPaUF4TENCNU9pQXlMQ0I2T2lBemZXQXVYRzRnS2x4dUlDb2dSR2x6Y0dGMFkyaGxjeUIwYnlCMGFHVWdZRzFoY0dBZ2JXVjBhRzlrSUc5bUlIUm9aU0J6WldOdmJtUWdZWEpuZFcxbGJuUXNJR2xtSUhCeVpYTmxiblF1WEc0Z0tseHVJQ29nUVdOMGN5QmhjeUJoSUhSeVlXNXpaSFZqWlhJZ2FXWWdZU0IwY21GdWMyWnZjbTFsY2lCcGN5Qm5hWFpsYmlCcGJpQnNhWE4wSUhCdmMybDBhVzl1TGx4dUlDcGNiaUFxSUVGc2MyOGdkSEpsWVhSeklHWjFibU4wYVc5dWN5QmhjeUJtZFc1amRHOXljeUJoYm1RZ2QybHNiQ0JqYjIxd2IzTmxJSFJvWlcwZ2RHOW5aWFJvWlhJdVhHNGdLbHh1SUNvZ1FHWjFibU5jYmlBcUlFQnRaVzFpWlhKUFppQlNYRzRnS2lCQWMybHVZMlVnZGpBdU1TNHdYRzRnS2lCQVkyRjBaV2R2Y25rZ1RHbHpkRnh1SUNvZ1FITnBaeUJHZFc1amRHOXlJR1lnUFQ0Z0tHRWdMVDRnWWlrZ0xUNGdaaUJoSUMwK0lHWWdZbHh1SUNvZ1FIQmhjbUZ0SUh0R2RXNWpkR2x2Ym4wZ1ptNGdWR2hsSUdaMWJtTjBhVzl1SUhSdklHSmxJR05oYkd4bFpDQnZiaUJsZG1WeWVTQmxiR1Z0Wlc1MElHOW1JSFJvWlNCcGJuQjFkQ0JnYkdsemRHQXVYRzRnS2lCQWNHRnlZVzBnZTBGeWNtRjVmU0JzYVhOMElGUm9aU0JzYVhOMElIUnZJR0psSUdsMFpYSmhkR1ZrSUc5MlpYSXVYRzRnS2lCQWNtVjBkWEp1SUh0QmNuSmhlWDBnVkdobElHNWxkeUJzYVhOMExseHVJQ29nUUhObFpTQlNMblJ5WVc1elpIVmpaU3dnVWk1aFpHUkpibVJsZUZ4dUlDb2dRR1Y0WVcxd2JHVmNiaUFxWEc0Z0tpQWdJQ0FnSUhaaGNpQmtiM1ZpYkdVZ1BTQjRJRDArSUhnZ0tpQXlPMXh1SUNwY2JpQXFJQ0FnSUNBZ1VpNXRZWEFvWkc5MVlteGxMQ0JiTVN3Z01pd2dNMTBwT3lBdkx6MCtJRnN5TENBMExDQTJYVnh1SUNwY2JpQXFJQ0FnSUNBZ1VpNXRZWEFvWkc5MVlteGxMQ0I3ZURvZ01Td2dlVG9nTWl3Z2Vqb2dNMzBwT3lBdkx6MCtJSHQ0T2lBeUxDQjVPaUEwTENCNk9pQTJmVnh1SUNvZ1FITjViV0lnVWk1dFlYQW9aaXdnVzJFc0lHSmRLU0E5SUZ0bUtHRXBMQ0JtS0dJcFhWeHVJQ29nUUhONWJXSWdVaTV0WVhBb1ppd2dleUI0T2lCaExDQjVPaUJpSUgwcElEMGdleUI0T2lCbUtHRXBMQ0I1T2lCbUtHSXBJSDFjYmlBcUlFQnplVzFpSUZJdWJXRndLR1lzSUdaMWJtTjBiM0pmYnlrZ1BTQm1kVzVqZEc5eVgyOHViV0Z3S0dZcFhHNGdLaTljYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnWDJOMWNuSjVNaWhmWkdsemNHRjBZMmhoWW14bEtGc25iV0Z3SjEwc0lGOTRiV0Z3TENCbWRXNWpkR2x2YmlCdFlYQW9abTRzSUdaMWJtTjBiM0lwSUh0Y2JpQWdjM2RwZEdOb0lDaFBZbXBsWTNRdWNISnZkRzkwZVhCbExuUnZVM1J5YVc1bkxtTmhiR3dvWm5WdVkzUnZjaWtwSUh0Y2JpQWdJQ0JqWVhObElDZGJiMkpxWldOMElFWjFibU4wYVc5dVhTYzZYRzRnSUNBZ0lDQnlaWFIxY200Z1kzVnljbmxPS0daMWJtTjBiM0l1YkdWdVozUm9MQ0JtZFc1amRHbHZiaWdwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdadUxtTmhiR3dvZEdocGN5d2dablZ1WTNSdmNpNWhjSEJzZVNoMGFHbHpMQ0JoY21kMWJXVnVkSE1wS1R0Y2JpQWdJQ0FnSUgwcE8xeHVJQ0FnSUdOaGMyVWdKMXR2WW1wbFkzUWdUMkpxWldOMFhTYzZYRzRnSUNBZ0lDQnlaWFIxY200Z1gzSmxaSFZqWlNobWRXNWpkR2x2YmloaFkyTXNJR3RsZVNrZ2UxeHVJQ0FnSUNBZ0lDQmhZMk5iYTJWNVhTQTlJR1p1S0daMWJtTjBiM0piYTJWNVhTazdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQmhZMk03WEc0Z0lDQWdJQ0I5TENCN2ZTd2dhMlY1Y3lobWRXNWpkRzl5S1NrN1hHNGdJQ0FnWkdWbVlYVnNkRHBjYmlBZ0lDQWdJSEpsZEhWeWJpQmZiV0Z3S0dadUxDQm1kVzVqZEc5eUtUdGNiaUFnZlZ4dWZTa3BPMXh1WEc1Y2JseHVMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZYRzR2THlCWFJVSlFRVU5MSUVaUFQxUkZVbHh1THk4Z0xpOStMM0poYldSaEwzTnlZeTl0WVhBdWFuTmNiaTh2SUcxdlpIVnNaU0JwWkNBOUlEaGNiaTh2SUcxdlpIVnNaU0JqYUhWdWEzTWdQU0F3SWwwc0ltMWhjSEJwYm1keklqb2lRVUZCUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk95SXNJbk52ZFhKalpWSnZiM1FpT2lJaWZRPT1cIik7XG5cbi8qKiovIH0pLFxuLyogOSAqL1xuLyogbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9cbi8qIGFsbCBleHBvcnRzIHVzZWQgKi9cbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL3V0aWxzL3JlZmVyZW5jZS5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuZXZhbChcIlxcblxcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcXFwiX19lc01vZHVsZVxcXCIsIHtcXG5cXHR2YWx1ZTogdHJ1ZVxcbn0pO1xcblxcbnZhciBfY3VycnkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISByYW1kYS9zcmMvY3VycnkgKi8gMjQpO1xcblxcbnZhciBfY3VycnkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3VycnkpO1xcblxcbnZhciBfdGFuZ3JhbVJlZmVyZW5jZSA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIHRhbmdyYW0tcmVmZXJlbmNlICovIDY3KTtcXG5cXG52YXIgX3RhbmdyYW1SZWZlcmVuY2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdGFuZ3JhbVJlZmVyZW5jZSk7XFxuXFxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cXG5cXG52YXIgUmVmID0gX3RhbmdyYW1SZWZlcmVuY2UyLmRlZmF1bHQubG9hZCgnMS4wLjAnKTtcXG5cXG52YXIgVGFuZ3JhbVJlZmVyZW5jZSA9IHt9O1xcblxcbmV4cG9ydHMuZGVmYXVsdCA9IFRhbmdyYW1SZWZlcmVuY2U7XFxuXFxuXFxudmFyIGdldFByb3BlcnR5ID0gKDAsIF9jdXJyeTIuZGVmYXVsdCkoZnVuY3Rpb24gKHR5cGUsIHByb3ApIHtcXG5cXHR2YXIgb2JqID0gUmVmLnN5bWJvbGl6ZXJzW3R5cGVdO1xcblxcdHJldHVybiBwcm9wID8gb2JqW3Byb3BdIDogb2JqO1xcbn0pO1xcblxcblRhbmdyYW1SZWZlcmVuY2UuZ2V0UG9pbnQgPSBnZXRQcm9wZXJ0eSgnbWFya2VycycpO1xcblxcblRhbmdyYW1SZWZlcmVuY2UuZ2V0TGluZSA9IGdldFByb3BlcnR5KCdsaW5lJyk7XFxuXFxuVGFuZ3JhbVJlZmVyZW5jZS5nZXRQb2x5Z29uID0gZ2V0UHJvcGVydHkoJ3BvbHlnb24nKTtcXG5cXG5UYW5ncmFtUmVmZXJlbmNlLmdldFRleHQgPSBnZXRQcm9wZXJ0eSgndGV4dCcpO1xcblxcblRhbmdyYW1SZWZlcmVuY2UuZ2V0UG9seWdvblBhdHRlcm4gPSBnZXRQcm9wZXJ0eSgncG9seWdvbi1wYXR0ZXJuJyk7XFxuXFxuVGFuZ3JhbVJlZmVyZW5jZS5jaGVja1N5bWJvbGl6ZXIgPSAoMCwgX2N1cnJ5Mi5kZWZhdWx0KShmdW5jdGlvbiAoc3ltLCBjM3NzKSB7XFxuXFx0cmV0dXJuIGMzc3Muc3ltYm9saXplcnMuaW5kZXhPZihzeW0pICE9PSAtMSA/IGMzc3MgOiBudWxsO1xcbn0pO1xcblxcblRhbmdyYW1SZWZlcmVuY2UuY2hlY2tUeXBlID0gKDAsIF9jdXJyeTIuZGVmYXVsdCkoZnVuY3Rpb24gKHJlZiwgdmFsKSB7XFxuXFx0cmV0dXJuIHJlZi50eXBlLmluZGV4T2YodmFsKSAhPT0gLTEgPyB2YWwgOiBudWxsO1xcbn0pOy8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pT1M1cWN5SXNJbk52ZFhKalpYTWlPbHNpZDJWaWNHRmphem92THk5emNtTXZkWFJwYkhNdmNtVm1aWEpsYm1ObExtcHpQelUzWVRBaVhTd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lhVzF3YjNKMElIc2dZM1Z5Y25rZ2ZTQm1jbTl0SUNkeVlXMWtZU2M3WEc1cGJYQnZjblFnY21WbVpYSmxibU5sSUdaeWIyMGdKM1JoYm1keVlXMHRjbVZtWlhKbGJtTmxKenRjYmx4dVkyOXVjM1FnVW1WbUlEMGdjbVZtWlhKbGJtTmxMbXh2WVdRb0p6RXVNQzR3SnlrN1hHNWNiblpoY2lCVVlXNW5jbUZ0VW1WbVpYSmxibU5sSUQwZ2UzMDdYRzVjYm1WNGNHOXlkQ0JrWldaaGRXeDBJRlJoYm1keVlXMVNaV1psY21WdVkyVTdYRzVjYm1OdmJuTjBJR2RsZEZCeWIzQmxjblI1SUQwZ1kzVnljbmtvWm5WdVkzUnBiMjRnS0hSNWNHVXNJSEJ5YjNBcElIdGNibHgwWTI5dWMzUWdiMkpxSUQwZ1VtVm1Mbk41YldKdmJHbDZaWEp6VzNSNWNHVmRPMXh1WEhSeVpYUjFjbTRnY0hKdmNDQS9JRzlpYWx0d2NtOXdYU0E2SUc5aWFqdGNibjBwTzF4dVhHNVVZVzVuY21GdFVtVm1aWEpsYm1ObExtZGxkRkJ2YVc1MElEMGdaMlYwVUhKdmNHVnlkSGtvSjIxaGNtdGxjbk1uS1R0Y2JseHVWR0Z1WjNKaGJWSmxabVZ5Wlc1alpTNW5aWFJNYVc1bElEMGdaMlYwVUhKdmNHVnlkSGtvSjJ4cGJtVW5LVHRjYmx4dVZHRnVaM0poYlZKbFptVnlaVzVqWlM1blpYUlFiMng1WjI5dUlEMGdaMlYwVUhKdmNHVnlkSGtvSjNCdmJIbG5iMjRuS1R0Y2JseHVWR0Z1WjNKaGJWSmxabVZ5Wlc1alpTNW5aWFJVWlhoMElEMGdaMlYwVUhKdmNHVnlkSGtvSjNSbGVIUW5LVHRjYmx4dVZHRnVaM0poYlZKbFptVnlaVzVqWlM1blpYUlFiMng1WjI5dVVHRjBkR1Z5YmlBOUlHZGxkRkJ5YjNCbGNuUjVLQ2R3YjJ4NVoyOXVMWEJoZEhSbGNtNG5LVHRjYmx4dVZHRnVaM0poYlZKbFptVnlaVzVqWlM1amFHVmphMU41YldKdmJHbDZaWElnUFNCamRYSnllU2htZFc1amRHbHZiaWh6ZVcwc0lHTXpjM01wSUh0Y2JseDBjbVYwZFhKdUlHTXpjM011YzNsdFltOXNhWHBsY25NdWFXNWtaWGhQWmloemVXMHBJQ0U5UFNBdE1TQS9JR016YzNNZ09pQnVkV3hzTzF4dWZTazdYRzVjYmxSaGJtZHlZVzFTWldabGNtVnVZMlV1WTJobFkydFVlWEJsSUQwZ1kzVnljbmtvWm5WdVkzUnBiMjRvY21WbUxDQjJZV3dwSUh0Y2JseDBjbVYwZFhKdUlISmxaaTUwZVhCbExtbHVaR1Y0VDJZb2RtRnNLU0FoUFQwZ0xURWdQeUIyWVd3Z09pQnVkV3hzTzF4dWZTazdYRzVjYmx4dVhHNHZMeUJYUlVKUVFVTkxJRVpQVDFSRlVpQXZMMXh1THk4Z2MzSmpMM1YwYVd4ekwzSmxabVZ5Wlc1alpTNXFjeUpkTENKdFlYQndhVzVuY3lJNklqczdPenM3T3pzN096dEJRVU5CTzBGQlEwRTdPenM3TzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGQlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVNJc0luTnZkWEpqWlZKdmIzUWlPaUlpZlE9PVwiKTtcblxuLyoqKi8gfSksXG4vKiAxMCAqL1xuLyogbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9cbi8qIGFsbCBleHBvcnRzIHVzZWQgKi9cbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19nbG9iYWwuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbmV2YWwoXCIvLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvODYjaXNzdWVjb21tZW50LTExNTc1OTAyOFxcbnZhciBnbG9iYWwgPSBtb2R1bGUuZXhwb3J0cyA9IHR5cGVvZiB3aW5kb3cgIT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93Lk1hdGggPT0gTWF0aFxcbiAgPyB3aW5kb3cgOiB0eXBlb2Ygc2VsZiAhPSAndW5kZWZpbmVkJyAmJiBzZWxmLk1hdGggPT0gTWF0aCA/IHNlbGYgOiBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xcbmlmKHR5cGVvZiBfX2cgPT0gJ251bWJlcicpX19nID0gZ2xvYmFsOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lNVEF1YW5NaUxDSnpiM1Z5WTJWeklqcGJJbmRsWW5CaFkyczZMeTh2TGk5K0wyTnZjbVV0YW5NdmJHbGljbUZ5ZVM5dGIyUjFiR1Z6TDE5bmJHOWlZV3d1YW5NL056ZGhZU0pkTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lJdkx5Qm9kSFJ3Y3pvdkwyZHBkR2gxWWk1amIyMHZlbXh2YVhKdlkyc3ZZMjl5WlMxcWN5OXBjM04xWlhNdk9EWWphWE56ZFdWamIyMXRaVzUwTFRFeE5UYzFPVEF5T0Z4dWRtRnlJR2RzYjJKaGJDQTlJRzF2WkhWc1pTNWxlSEJ2Y25SeklEMGdkSGx3Wlc5bUlIZHBibVJ2ZHlBaFBTQW5kVzVrWldacGJtVmtKeUFtSmlCM2FXNWtiM2N1VFdGMGFDQTlQU0JOWVhSb1hHNGdJRDhnZDJsdVpHOTNJRG9nZEhsd1pXOW1JSE5sYkdZZ0lUMGdKM1Z1WkdWbWFXNWxaQ2NnSmlZZ2MyVnNaaTVOWVhSb0lEMDlJRTFoZEdnZ1B5QnpaV3htSURvZ1JuVnVZM1JwYjI0b0ozSmxkSFZ5YmlCMGFHbHpKeWtvS1R0Y2JtbG1LSFI1Y0dWdlppQmZYMmNnUFQwZ0oyNTFiV0psY2ljcFgxOW5JRDBnWjJ4dlltRnNPeUF2THlCbGMyeHBiblF0WkdsellXSnNaUzFzYVc1bElHNXZMWFZ1WkdWbVhHNWNibHh1THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2WEc0dkx5QlhSVUpRUVVOTElFWlBUMVJGVWx4dUx5OGdMaTkrTDJOdmNtVXRhbk12YkdsaWNtRnllUzl0YjJSMWJHVnpMMTluYkc5aVlXd3Vhbk5jYmk4dklHMXZaSFZzWlNCcFpDQTlJREV3WEc0dkx5QnRiMlIxYkdVZ1kyaDFibXR6SUQwZ01DSmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRTdRVUZEUVR0QlFVTkJPMEZCUTBFaUxDSnpiM1Z5WTJWU2IyOTBJam9pSW4wPVwiKTtcblxuLyoqKi8gfSksXG4vKiAxMSAqL1xuLyogbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9cbi8qIGFsbCBleHBvcnRzIHVzZWQgKi9cbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9+L25vZGUtbGlicy1icm93c2VyL21vY2svZW1wdHkuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbmV2YWwoXCIvLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaU1URXVhbk1pTENKemIzVnlZMlZ6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUlpTENKemIzVnlZMlZTYjI5MElqb2lJbjA9XCIpO1xuXG4vKioqLyB9KSxcbi8qIDEyICovXG4vKiBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyogYWxsIGV4cG9ydHMgdXNlZCAqL1xuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vfi9wYXRoLWJyb3dzZXJpZnkvaW5kZXguanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuZXZhbChcIi8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqLyhmdW5jdGlvbihwcm9jZXNzKSB7Ly8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXFxuLy9cXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcXG4vLyBcXFwiU29mdHdhcmVcXFwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXFxuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcXG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcXG4vL1xcbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXFxuLy9cXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXFxcIkFTIElTXFxcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xcbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0ZcXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXFxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXFxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXFxuXFxuLy8gcmVzb2x2ZXMgLiBhbmQgLi4gZWxlbWVudHMgaW4gYSBwYXRoIGFycmF5IHdpdGggZGlyZWN0b3J5IG5hbWVzIHRoZXJlXFxuLy8gbXVzdCBiZSBubyBzbGFzaGVzLCBlbXB0eSBlbGVtZW50cywgb3IgZGV2aWNlIG5hbWVzIChjOlxcXFwpIGluIHRoZSBhcnJheVxcbi8vIChzbyBhbHNvIG5vIGxlYWRpbmcgYW5kIHRyYWlsaW5nIHNsYXNoZXMgLSBpdCBkb2VzIG5vdCBkaXN0aW5ndWlzaFxcbi8vIHJlbGF0aXZlIGFuZCBhYnNvbHV0ZSBwYXRocylcXG5mdW5jdGlvbiBub3JtYWxpemVBcnJheShwYXJ0cywgYWxsb3dBYm92ZVJvb3QpIHtcXG4gIC8vIGlmIHRoZSBwYXRoIHRyaWVzIHRvIGdvIGFib3ZlIHRoZSByb290LCBgdXBgIGVuZHMgdXAgPiAwXFxuICB2YXIgdXAgPSAwO1xcbiAgZm9yICh2YXIgaSA9IHBhcnRzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XFxuICAgIHZhciBsYXN0ID0gcGFydHNbaV07XFxuICAgIGlmIChsYXN0ID09PSAnLicpIHtcXG4gICAgICBwYXJ0cy5zcGxpY2UoaSwgMSk7XFxuICAgIH0gZWxzZSBpZiAobGFzdCA9PT0gJy4uJykge1xcbiAgICAgIHBhcnRzLnNwbGljZShpLCAxKTtcXG4gICAgICB1cCsrO1xcbiAgICB9IGVsc2UgaWYgKHVwKSB7XFxuICAgICAgcGFydHMuc3BsaWNlKGksIDEpO1xcbiAgICAgIHVwLS07XFxuICAgIH1cXG4gIH1cXG5cXG4gIC8vIGlmIHRoZSBwYXRoIGlzIGFsbG93ZWQgdG8gZ28gYWJvdmUgdGhlIHJvb3QsIHJlc3RvcmUgbGVhZGluZyAuLnNcXG4gIGlmIChhbGxvd0Fib3ZlUm9vdCkge1xcbiAgICBmb3IgKDsgdXAtLTsgdXApIHtcXG4gICAgICBwYXJ0cy51bnNoaWZ0KCcuLicpO1xcbiAgICB9XFxuICB9XFxuXFxuICByZXR1cm4gcGFydHM7XFxufVxcblxcbi8vIFNwbGl0IGEgZmlsZW5hbWUgaW50byBbcm9vdCwgZGlyLCBiYXNlbmFtZSwgZXh0XSwgdW5peCB2ZXJzaW9uXFxuLy8gJ3Jvb3QnIGlzIGp1c3QgYSBzbGFzaCwgb3Igbm90aGluZy5cXG52YXIgc3BsaXRQYXRoUmUgPVxcbiAgICAvXihcXFxcLz98KShbXFxcXHNcXFxcU10qPykoKD86XFxcXC57MSwyfXxbXlxcXFwvXSs/fCkoXFxcXC5bXi5cXFxcL10qfCkpKD86W1xcXFwvXSopJC87XFxudmFyIHNwbGl0UGF0aCA9IGZ1bmN0aW9uKGZpbGVuYW1lKSB7XFxuICByZXR1cm4gc3BsaXRQYXRoUmUuZXhlYyhmaWxlbmFtZSkuc2xpY2UoMSk7XFxufTtcXG5cXG4vLyBwYXRoLnJlc29sdmUoW2Zyb20gLi4uXSwgdG8pXFxuLy8gcG9zaXggdmVyc2lvblxcbmV4cG9ydHMucmVzb2x2ZSA9IGZ1bmN0aW9uKCkge1xcbiAgdmFyIHJlc29sdmVkUGF0aCA9ICcnLFxcbiAgICAgIHJlc29sdmVkQWJzb2x1dGUgPSBmYWxzZTtcXG5cXG4gIGZvciAodmFyIGkgPSBhcmd1bWVudHMubGVuZ3RoIC0gMTsgaSA+PSAtMSAmJiAhcmVzb2x2ZWRBYnNvbHV0ZTsgaS0tKSB7XFxuICAgIHZhciBwYXRoID0gKGkgPj0gMCkgPyBhcmd1bWVudHNbaV0gOiBwcm9jZXNzLmN3ZCgpO1xcblxcbiAgICAvLyBTa2lwIGVtcHR5IGFuZCBpbnZhbGlkIGVudHJpZXNcXG4gICAgaWYgKHR5cGVvZiBwYXRoICE9PSAnc3RyaW5nJykge1xcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50cyB0byBwYXRoLnJlc29sdmUgbXVzdCBiZSBzdHJpbmdzJyk7XFxuICAgIH0gZWxzZSBpZiAoIXBhdGgpIHtcXG4gICAgICBjb250aW51ZTtcXG4gICAgfVxcblxcbiAgICByZXNvbHZlZFBhdGggPSBwYXRoICsgJy8nICsgcmVzb2x2ZWRQYXRoO1xcbiAgICByZXNvbHZlZEFic29sdXRlID0gcGF0aC5jaGFyQXQoMCkgPT09ICcvJztcXG4gIH1cXG5cXG4gIC8vIEF0IHRoaXMgcG9pbnQgdGhlIHBhdGggc2hvdWxkIGJlIHJlc29sdmVkIHRvIGEgZnVsbCBhYnNvbHV0ZSBwYXRoLCBidXRcXG4gIC8vIGhhbmRsZSByZWxhdGl2ZSBwYXRocyB0byBiZSBzYWZlIChtaWdodCBoYXBwZW4gd2hlbiBwcm9jZXNzLmN3ZCgpIGZhaWxzKVxcblxcbiAgLy8gTm9ybWFsaXplIHRoZSBwYXRoXFxuICByZXNvbHZlZFBhdGggPSBub3JtYWxpemVBcnJheShmaWx0ZXIocmVzb2x2ZWRQYXRoLnNwbGl0KCcvJyksIGZ1bmN0aW9uKHApIHtcXG4gICAgcmV0dXJuICEhcDtcXG4gIH0pLCAhcmVzb2x2ZWRBYnNvbHV0ZSkuam9pbignLycpO1xcblxcbiAgcmV0dXJuICgocmVzb2x2ZWRBYnNvbHV0ZSA/ICcvJyA6ICcnKSArIHJlc29sdmVkUGF0aCkgfHwgJy4nO1xcbn07XFxuXFxuLy8gcGF0aC5ub3JtYWxpemUocGF0aClcXG4vLyBwb3NpeCB2ZXJzaW9uXFxuZXhwb3J0cy5ub3JtYWxpemUgPSBmdW5jdGlvbihwYXRoKSB7XFxuICB2YXIgaXNBYnNvbHV0ZSA9IGV4cG9ydHMuaXNBYnNvbHV0ZShwYXRoKSxcXG4gICAgICB0cmFpbGluZ1NsYXNoID0gc3Vic3RyKHBhdGgsIC0xKSA9PT0gJy8nO1xcblxcbiAgLy8gTm9ybWFsaXplIHRoZSBwYXRoXFxuICBwYXRoID0gbm9ybWFsaXplQXJyYXkoZmlsdGVyKHBhdGguc3BsaXQoJy8nKSwgZnVuY3Rpb24ocCkge1xcbiAgICByZXR1cm4gISFwO1xcbiAgfSksICFpc0Fic29sdXRlKS5qb2luKCcvJyk7XFxuXFxuICBpZiAoIXBhdGggJiYgIWlzQWJzb2x1dGUpIHtcXG4gICAgcGF0aCA9ICcuJztcXG4gIH1cXG4gIGlmIChwYXRoICYmIHRyYWlsaW5nU2xhc2gpIHtcXG4gICAgcGF0aCArPSAnLyc7XFxuICB9XFxuXFxuICByZXR1cm4gKGlzQWJzb2x1dGUgPyAnLycgOiAnJykgKyBwYXRoO1xcbn07XFxuXFxuLy8gcG9zaXggdmVyc2lvblxcbmV4cG9ydHMuaXNBYnNvbHV0ZSA9IGZ1bmN0aW9uKHBhdGgpIHtcXG4gIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gJy8nO1xcbn07XFxuXFxuLy8gcG9zaXggdmVyc2lvblxcbmV4cG9ydHMuam9pbiA9IGZ1bmN0aW9uKCkge1xcbiAgdmFyIHBhdGhzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAwKTtcXG4gIHJldHVybiBleHBvcnRzLm5vcm1hbGl6ZShmaWx0ZXIocGF0aHMsIGZ1bmN0aW9uKHAsIGluZGV4KSB7XFxuICAgIGlmICh0eXBlb2YgcCAhPT0gJ3N0cmluZycpIHtcXG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudHMgdG8gcGF0aC5qb2luIG11c3QgYmUgc3RyaW5ncycpO1xcbiAgICB9XFxuICAgIHJldHVybiBwO1xcbiAgfSkuam9pbignLycpKTtcXG59O1xcblxcblxcbi8vIHBhdGgucmVsYXRpdmUoZnJvbSwgdG8pXFxuLy8gcG9zaXggdmVyc2lvblxcbmV4cG9ydHMucmVsYXRpdmUgPSBmdW5jdGlvbihmcm9tLCB0bykge1xcbiAgZnJvbSA9IGV4cG9ydHMucmVzb2x2ZShmcm9tKS5zdWJzdHIoMSk7XFxuICB0byA9IGV4cG9ydHMucmVzb2x2ZSh0bykuc3Vic3RyKDEpO1xcblxcbiAgZnVuY3Rpb24gdHJpbShhcnIpIHtcXG4gICAgdmFyIHN0YXJ0ID0gMDtcXG4gICAgZm9yICg7IHN0YXJ0IDwgYXJyLmxlbmd0aDsgc3RhcnQrKykge1xcbiAgICAgIGlmIChhcnJbc3RhcnRdICE9PSAnJykgYnJlYWs7XFxuICAgIH1cXG5cXG4gICAgdmFyIGVuZCA9IGFyci5sZW5ndGggLSAxO1xcbiAgICBmb3IgKDsgZW5kID49IDA7IGVuZC0tKSB7XFxuICAgICAgaWYgKGFycltlbmRdICE9PSAnJykgYnJlYWs7XFxuICAgIH1cXG5cXG4gICAgaWYgKHN0YXJ0ID4gZW5kKSByZXR1cm4gW107XFxuICAgIHJldHVybiBhcnIuc2xpY2Uoc3RhcnQsIGVuZCAtIHN0YXJ0ICsgMSk7XFxuICB9XFxuXFxuICB2YXIgZnJvbVBhcnRzID0gdHJpbShmcm9tLnNwbGl0KCcvJykpO1xcbiAgdmFyIHRvUGFydHMgPSB0cmltKHRvLnNwbGl0KCcvJykpO1xcblxcbiAgdmFyIGxlbmd0aCA9IE1hdGgubWluKGZyb21QYXJ0cy5sZW5ndGgsIHRvUGFydHMubGVuZ3RoKTtcXG4gIHZhciBzYW1lUGFydHNMZW5ndGggPSBsZW5ndGg7XFxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XFxuICAgIGlmIChmcm9tUGFydHNbaV0gIT09IHRvUGFydHNbaV0pIHtcXG4gICAgICBzYW1lUGFydHNMZW5ndGggPSBpO1xcbiAgICAgIGJyZWFrO1xcbiAgICB9XFxuICB9XFxuXFxuICB2YXIgb3V0cHV0UGFydHMgPSBbXTtcXG4gIGZvciAodmFyIGkgPSBzYW1lUGFydHNMZW5ndGg7IGkgPCBmcm9tUGFydHMubGVuZ3RoOyBpKyspIHtcXG4gICAgb3V0cHV0UGFydHMucHVzaCgnLi4nKTtcXG4gIH1cXG5cXG4gIG91dHB1dFBhcnRzID0gb3V0cHV0UGFydHMuY29uY2F0KHRvUGFydHMuc2xpY2Uoc2FtZVBhcnRzTGVuZ3RoKSk7XFxuXFxuICByZXR1cm4gb3V0cHV0UGFydHMuam9pbignLycpO1xcbn07XFxuXFxuZXhwb3J0cy5zZXAgPSAnLyc7XFxuZXhwb3J0cy5kZWxpbWl0ZXIgPSAnOic7XFxuXFxuZXhwb3J0cy5kaXJuYW1lID0gZnVuY3Rpb24ocGF0aCkge1xcbiAgdmFyIHJlc3VsdCA9IHNwbGl0UGF0aChwYXRoKSxcXG4gICAgICByb290ID0gcmVzdWx0WzBdLFxcbiAgICAgIGRpciA9IHJlc3VsdFsxXTtcXG5cXG4gIGlmICghcm9vdCAmJiAhZGlyKSB7XFxuICAgIC8vIE5vIGRpcm5hbWUgd2hhdHNvZXZlclxcbiAgICByZXR1cm4gJy4nO1xcbiAgfVxcblxcbiAgaWYgKGRpcikge1xcbiAgICAvLyBJdCBoYXMgYSBkaXJuYW1lLCBzdHJpcCB0cmFpbGluZyBzbGFzaFxcbiAgICBkaXIgPSBkaXIuc3Vic3RyKDAsIGRpci5sZW5ndGggLSAxKTtcXG4gIH1cXG5cXG4gIHJldHVybiByb290ICsgZGlyO1xcbn07XFxuXFxuXFxuZXhwb3J0cy5iYXNlbmFtZSA9IGZ1bmN0aW9uKHBhdGgsIGV4dCkge1xcbiAgdmFyIGYgPSBzcGxpdFBhdGgocGF0aClbMl07XFxuICAvLyBUT0RPOiBtYWtlIHRoaXMgY29tcGFyaXNvbiBjYXNlLWluc2Vuc2l0aXZlIG9uIHdpbmRvd3M/XFxuICBpZiAoZXh0ICYmIGYuc3Vic3RyKC0xICogZXh0Lmxlbmd0aCkgPT09IGV4dCkge1xcbiAgICBmID0gZi5zdWJzdHIoMCwgZi5sZW5ndGggLSBleHQubGVuZ3RoKTtcXG4gIH1cXG4gIHJldHVybiBmO1xcbn07XFxuXFxuXFxuZXhwb3J0cy5leHRuYW1lID0gZnVuY3Rpb24ocGF0aCkge1xcbiAgcmV0dXJuIHNwbGl0UGF0aChwYXRoKVszXTtcXG59O1xcblxcbmZ1bmN0aW9uIGZpbHRlciAoeHMsIGYpIHtcXG4gICAgaWYgKHhzLmZpbHRlcikgcmV0dXJuIHhzLmZpbHRlcihmKTtcXG4gICAgdmFyIHJlcyA9IFtdO1xcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHhzLmxlbmd0aDsgaSsrKSB7XFxuICAgICAgICBpZiAoZih4c1tpXSwgaSwgeHMpKSByZXMucHVzaCh4c1tpXSk7XFxuICAgIH1cXG4gICAgcmV0dXJuIHJlcztcXG59XFxuXFxuLy8gU3RyaW5nLnByb3RvdHlwZS5zdWJzdHIgLSBuZWdhdGl2ZSBpbmRleCBkb24ndCB3b3JrIGluIElFOFxcbnZhciBzdWJzdHIgPSAnYWInLnN1YnN0cigtMSkgPT09ICdiJ1xcbiAgICA/IGZ1bmN0aW9uIChzdHIsIHN0YXJ0LCBsZW4pIHsgcmV0dXJuIHN0ci5zdWJzdHIoc3RhcnQsIGxlbikgfVxcbiAgICA6IGZ1bmN0aW9uIChzdHIsIHN0YXJ0LCBsZW4pIHtcXG4gICAgICAgIGlmIChzdGFydCA8IDApIHN0YXJ0ID0gc3RyLmxlbmd0aCArIHN0YXJ0O1xcbiAgICAgICAgcmV0dXJuIHN0ci5zdWJzdHIoc3RhcnQsIGxlbik7XFxuICAgIH1cXG47XFxuXFxuLyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovfS5jYWxsKGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vLi4vcHJvY2Vzcy9icm93c2VyLmpzICovIDM2KSkpLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lNVEl1YW5NaUxDSnpiM1Z5WTJWeklqcGJJbmRsWW5CaFkyczZMeTh2TGk5K0wzQmhkR2d0WW5KdmQzTmxjbWxtZVM5cGJtUmxlQzVxY3o4NE1ETmhJbDBzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSWk4dklFTnZjSGx5YVdkb2RDQktiM2xsYm5Rc0lFbHVZeTRnWVc1a0lHOTBhR1Z5SUU1dlpHVWdZMjl1ZEhKcFluVjBiM0p6TGx4dUx5OWNiaTh2SUZCbGNtMXBjM05wYjI0Z2FYTWdhR1Z5WldKNUlHZHlZVzUwWldRc0lHWnlaV1VnYjJZZ1kyaGhjbWRsTENCMGJ5QmhibmtnY0dWeWMyOXVJRzlpZEdGcGJtbHVaeUJoWEc0dkx5QmpiM0I1SUc5bUlIUm9hWE1nYzI5bWRIZGhjbVVnWVc1a0lHRnpjMjlqYVdGMFpXUWdaRzlqZFcxbGJuUmhkR2x2YmlCbWFXeGxjeUFvZEdobFhHNHZMeUJjSWxOdlpuUjNZWEpsWENJcExDQjBieUJrWldGc0lHbHVJSFJvWlNCVGIyWjBkMkZ5WlNCM2FYUm9iM1YwSUhKbGMzUnlhV04wYVc5dUxDQnBibU5zZFdScGJtZGNiaTh2SUhkcGRHaHZkWFFnYkdsdGFYUmhkR2x2YmlCMGFHVWdjbWxuYUhSeklIUnZJSFZ6WlN3Z1kyOXdlU3dnYlc5a2FXWjVMQ0J0WlhKblpTd2djSFZpYkdsemFDeGNiaTh2SUdScGMzUnlhV0oxZEdVc0lITjFZbXhwWTJWdWMyVXNJR0Z1WkM5dmNpQnpaV3hzSUdOdmNHbGxjeUJ2WmlCMGFHVWdVMjltZEhkaGNtVXNJR0Z1WkNCMGJ5QndaWEp0YVhSY2JpOHZJSEJsY25OdmJuTWdkRzhnZDJodmJTQjBhR1VnVTI5bWRIZGhjbVVnYVhNZ1puVnlibWx6YUdWa0lIUnZJR1J2SUhOdkxDQnpkV0pxWldOMElIUnZJSFJvWlZ4dUx5OGdabTlzYkc5M2FXNW5JR052Ym1ScGRHbHZibk02WEc0dkwxeHVMeThnVkdobElHRmliM1psSUdOdmNIbHlhV2RvZENCdWIzUnBZMlVnWVc1a0lIUm9hWE1nY0dWeWJXbHpjMmx2YmlCdWIzUnBZMlVnYzJoaGJHd2dZbVVnYVc1amJIVmtaV1JjYmk4dklHbHVJR0ZzYkNCamIzQnBaWE1nYjNJZ2MzVmljM1JoYm5ScFlXd2djRzl5ZEdsdmJuTWdiMllnZEdobElGTnZablIzWVhKbExseHVMeTljYmk4dklGUklSU0JUVDBaVVYwRlNSU0JKVXlCUVVrOVdTVVJGUkNCY0lrRlRJRWxUWENJc0lGZEpWRWhQVlZRZ1YwRlNVa0ZPVkZrZ1QwWWdRVTVaSUV0SlRrUXNJRVZZVUZKRlUxTmNiaTh2SUU5U0lFbE5VRXhKUlVRc0lFbE9RMHhWUkVsT1J5QkNWVlFnVGs5VUlFeEpUVWxVUlVRZ1ZFOGdWRWhGSUZkQlVsSkJUbFJKUlZNZ1QwWmNiaTh2SUUxRlVrTklRVTVVUVVKSlRFbFVXU3dnUmtsVVRrVlRVeUJHVDFJZ1FTQlFRVkpVU1VOVlRFRlNJRkJWVWxCUFUwVWdRVTVFSUU1UFRrbE9SbEpKVGtkRlRVVk9WQzRnU1U1Y2JpOHZJRTVQSUVWV1JVNVVJRk5JUVV4TUlGUklSU0JCVlZSSVQxSlRJRTlTSUVOUFVGbFNTVWRJVkNCSVQweEVSVkpUSUVKRklFeEpRVUpNUlNCR1QxSWdRVTVaSUVOTVFVbE5MRnh1THk4Z1JFRk5RVWRGVXlCUFVpQlBWRWhGVWlCTVNVRkNTVXhKVkZrc0lGZElSVlJJUlZJZ1NVNGdRVTRnUVVOVVNVOU9JRTlHSUVOUFRsUlNRVU5VTENCVVQxSlVJRTlTWEc0dkx5QlBWRWhGVWxkSlUwVXNJRUZTU1ZOSlRrY2dSbEpQVFN3Z1QxVlVJRTlHSUU5U0lFbE9JRU5QVGs1RlExUkpUMDRnVjBsVVNDQlVTRVVnVTA5R1ZGZEJVa1VnVDFJZ1ZFaEZYRzR2THlCVlUwVWdUMUlnVDFSSVJWSWdSRVZCVEVsT1IxTWdTVTRnVkVoRklGTlBSbFJYUVZKRkxseHVYRzR2THlCeVpYTnZiSFpsY3lBdUlHRnVaQ0F1TGlCbGJHVnRaVzUwY3lCcGJpQmhJSEJoZEdnZ1lYSnlZWGtnZDJsMGFDQmthWEpsWTNSdmNua2dibUZ0WlhNZ2RHaGxjbVZjYmk4dklHMTFjM1FnWW1VZ2JtOGdjMnhoYzJobGN5d2daVzF3ZEhrZ1pXeGxiV1Z1ZEhNc0lHOXlJR1JsZG1salpTQnVZVzFsY3lBb1l6cGNYQ2tnYVc0Z2RHaGxJR0Z5Y21GNVhHNHZMeUFvYzI4Z1lXeHpieUJ1YnlCc1pXRmthVzVuSUdGdVpDQjBjbUZwYkdsdVp5QnpiR0Z6YUdWeklDMGdhWFFnWkc5bGN5QnViM1FnWkdsemRHbHVaM1ZwYzJoY2JpOHZJSEpsYkdGMGFYWmxJR0Z1WkNCaFluTnZiSFYwWlNCd1lYUm9jeWxjYm1aMWJtTjBhVzl1SUc1dmNtMWhiR2w2WlVGeWNtRjVLSEJoY25SekxDQmhiR3h2ZDBGaWIzWmxVbTl2ZENrZ2UxeHVJQ0F2THlCcFppQjBhR1VnY0dGMGFDQjBjbWxsY3lCMGJ5Qm5ieUJoWW05MlpTQjBhR1VnY205dmRDd2dZSFZ3WUNCbGJtUnpJSFZ3SUQ0Z01GeHVJQ0IyWVhJZ2RYQWdQU0F3TzF4dUlDQm1iM0lnS0haaGNpQnBJRDBnY0dGeWRITXViR1Z1WjNSb0lDMGdNVHNnYVNBK1BTQXdPeUJwTFMwcElIdGNiaUFnSUNCMllYSWdiR0Z6ZENBOUlIQmhjblJ6VzJsZE8xeHVJQ0FnSUdsbUlDaHNZWE4wSUQwOVBTQW5MaWNwSUh0Y2JpQWdJQ0FnSUhCaGNuUnpMbk53YkdsalpTaHBMQ0F4S1R0Y2JpQWdJQ0I5SUdWc2MyVWdhV1lnS0d4aGMzUWdQVDA5SUNjdUxpY3BJSHRjYmlBZ0lDQWdJSEJoY25SekxuTndiR2xqWlNocExDQXhLVHRjYmlBZ0lDQWdJSFZ3S3lzN1hHNGdJQ0FnZlNCbGJITmxJR2xtSUNoMWNDa2dlMXh1SUNBZ0lDQWdjR0Z5ZEhNdWMzQnNhV05sS0drc0lERXBPMXh1SUNBZ0lDQWdkWEF0TFR0Y2JpQWdJQ0I5WEc0Z0lIMWNibHh1SUNBdkx5QnBaaUIwYUdVZ2NHRjBhQ0JwY3lCaGJHeHZkMlZrSUhSdklHZHZJR0ZpYjNabElIUm9aU0J5YjI5MExDQnlaWE4wYjNKbElHeGxZV1JwYm1jZ0xpNXpYRzRnSUdsbUlDaGhiR3h2ZDBGaWIzWmxVbTl2ZENrZ2UxeHVJQ0FnSUdadmNpQW9PeUIxY0MwdE95QjFjQ2tnZTF4dUlDQWdJQ0FnY0dGeWRITXVkVzV6YUdsbWRDZ25MaTRuS1R0Y2JpQWdJQ0I5WEc0Z0lIMWNibHh1SUNCeVpYUjFjbTRnY0dGeWRITTdYRzU5WEc1Y2JpOHZJRk53YkdsMElHRWdabWxzWlc1aGJXVWdhVzUwYnlCYmNtOXZkQ3dnWkdseUxDQmlZWE5sYm1GdFpTd2daWGgwWFN3Z2RXNXBlQ0IyWlhKemFXOXVYRzR2THlBbmNtOXZkQ2NnYVhNZ2FuVnpkQ0JoSUhOc1lYTm9MQ0J2Y2lCdWIzUm9hVzVuTGx4dWRtRnlJSE53YkdsMFVHRjBhRkpsSUQxY2JpQWdJQ0F2WGloY1hDOC9mQ2tvVzF4Y2MxeGNVMTBxUHlrb0tEODZYRnd1ZXpFc01uMThXMTVjWEM5ZEt6OThLU2hjWEM1YlhpNWNYQzlkS253cEtTZy9PbHRjWEM5ZEtpa2tMenRjYm5aaGNpQnpjR3hwZEZCaGRHZ2dQU0JtZFc1amRHbHZiaWhtYVd4bGJtRnRaU2tnZTF4dUlDQnlaWFIxY200Z2MzQnNhWFJRWVhSb1VtVXVaWGhsWXlobWFXeGxibUZ0WlNrdWMyeHBZMlVvTVNrN1hHNTlPMXh1WEc0dkx5QndZWFJvTG5KbGMyOXNkbVVvVzJaeWIyMGdMaTR1WFN3Z2RHOHBYRzR2THlCd2IzTnBlQ0IyWlhKemFXOXVYRzVsZUhCdmNuUnpMbkpsYzI5c2RtVWdQU0JtZFc1amRHbHZiaWdwSUh0Y2JpQWdkbUZ5SUhKbGMyOXNkbVZrVUdGMGFDQTlJQ2NuTEZ4dUlDQWdJQ0FnY21WemIyeDJaV1JCWW5OdmJIVjBaU0E5SUdaaGJITmxPMXh1WEc0Z0lHWnZjaUFvZG1GeUlHa2dQU0JoY21kMWJXVnVkSE11YkdWdVozUm9JQzBnTVRzZ2FTQStQU0F0TVNBbUppQWhjbVZ6YjJ4MlpXUkJZbk52YkhWMFpUc2dhUzB0S1NCN1hHNGdJQ0FnZG1GeUlIQmhkR2dnUFNBb2FTQStQU0F3S1NBL0lHRnlaM1Z0Wlc1MGMxdHBYU0E2SUhCeWIyTmxjM011WTNka0tDazdYRzVjYmlBZ0lDQXZMeUJUYTJsd0lHVnRjSFI1SUdGdVpDQnBiblpoYkdsa0lHVnVkSEpwWlhOY2JpQWdJQ0JwWmlBb2RIbHdaVzltSUhCaGRHZ2dJVDA5SUNkemRISnBibWNuS1NCN1hHNGdJQ0FnSUNCMGFISnZkeUJ1WlhjZ1ZIbHdaVVZ5Y205eUtDZEJjbWQxYldWdWRITWdkRzhnY0dGMGFDNXlaWE52YkhabElHMTFjM1FnWW1VZ2MzUnlhVzVuY3ljcE8xeHVJQ0FnSUgwZ1pXeHpaU0JwWmlBb0lYQmhkR2dwSUh0Y2JpQWdJQ0FnSUdOdmJuUnBiblZsTzF4dUlDQWdJSDFjYmx4dUlDQWdJSEpsYzI5c2RtVmtVR0YwYUNBOUlIQmhkR2dnS3lBbkx5Y2dLeUJ5WlhOdmJIWmxaRkJoZEdnN1hHNGdJQ0FnY21WemIyeDJaV1JCWW5OdmJIVjBaU0E5SUhCaGRHZ3VZMmhoY2tGMEtEQXBJRDA5UFNBbkx5YzdYRzRnSUgxY2JseHVJQ0F2THlCQmRDQjBhR2x6SUhCdmFXNTBJSFJvWlNCd1lYUm9JSE5vYjNWc1pDQmlaU0J5WlhOdmJIWmxaQ0IwYnlCaElHWjFiR3dnWVdKemIyeDFkR1VnY0dGMGFDd2dZblYwWEc0Z0lDOHZJR2hoYm1Sc1pTQnlaV3hoZEdsMlpTQndZWFJvY3lCMGJ5QmlaU0J6WVdabElDaHRhV2RvZENCb1lYQndaVzRnZDJobGJpQndjbTlqWlhOekxtTjNaQ2dwSUdaaGFXeHpLVnh1WEc0Z0lDOHZJRTV2Y20xaGJHbDZaU0IwYUdVZ2NHRjBhRnh1SUNCeVpYTnZiSFpsWkZCaGRHZ2dQU0J1YjNKdFlXeHBlbVZCY25KaGVTaG1hV3gwWlhJb2NtVnpiMngyWldSUVlYUm9Mbk53YkdsMEtDY3ZKeWtzSUdaMWJtTjBhVzl1S0hBcElIdGNiaUFnSUNCeVpYUjFjbTRnSVNGd08xeHVJQ0I5S1N3Z0lYSmxjMjlzZG1Wa1FXSnpiMngxZEdVcExtcHZhVzRvSnk4bktUdGNibHh1SUNCeVpYUjFjbTRnS0NoeVpYTnZiSFpsWkVGaWMyOXNkWFJsSUQ4Z0p5OG5JRG9nSnljcElDc2djbVZ6YjJ4MlpXUlFZWFJvS1NCOGZDQW5MaWM3WEc1OU8xeHVYRzR2THlCd1lYUm9MbTV2Y20xaGJHbDZaU2h3WVhSb0tWeHVMeThnY0c5emFYZ2dkbVZ5YzJsdmJseHVaWGh3YjNKMGN5NXViM0p0WVd4cGVtVWdQU0JtZFc1amRHbHZiaWh3WVhSb0tTQjdYRzRnSUhaaGNpQnBjMEZpYzI5c2RYUmxJRDBnWlhod2IzSjBjeTVwYzBGaWMyOXNkWFJsS0hCaGRHZ3BMRnh1SUNBZ0lDQWdkSEpoYVd4cGJtZFRiR0Z6YUNBOUlITjFZbk4wY2lod1lYUm9MQ0F0TVNrZ1BUMDlJQ2N2Snp0Y2JseHVJQ0F2THlCT2IzSnRZV3hwZW1VZ2RHaGxJSEJoZEdoY2JpQWdjR0YwYUNBOUlHNXZjbTFoYkdsNlpVRnljbUY1S0dacGJIUmxjaWh3WVhSb0xuTndiR2wwS0Njdkp5a3NJR1oxYm1OMGFXOXVLSEFwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdJU0Z3TzF4dUlDQjlLU3dnSVdselFXSnpiMngxZEdVcExtcHZhVzRvSnk4bktUdGNibHh1SUNCcFppQW9JWEJoZEdnZ0ppWWdJV2x6UVdKemIyeDFkR1VwSUh0Y2JpQWdJQ0J3WVhSb0lEMGdKeTRuTzF4dUlDQjlYRzRnSUdsbUlDaHdZWFJvSUNZbUlIUnlZV2xzYVc1blUyeGhjMmdwSUh0Y2JpQWdJQ0J3WVhSb0lDczlJQ2N2Snp0Y2JpQWdmVnh1WEc0Z0lISmxkSFZ5YmlBb2FYTkJZbk52YkhWMFpTQS9JQ2N2SnlBNklDY25LU0FySUhCaGRHZzdYRzU5TzF4dVhHNHZMeUJ3YjNOcGVDQjJaWEp6YVc5dVhHNWxlSEJ2Y25SekxtbHpRV0p6YjJ4MWRHVWdQU0JtZFc1amRHbHZiaWh3WVhSb0tTQjdYRzRnSUhKbGRIVnliaUJ3WVhSb0xtTm9ZWEpCZENnd0tTQTlQVDBnSnk4bk8xeHVmVHRjYmx4dUx5OGdjRzl6YVhnZ2RtVnljMmx2Ymx4dVpYaHdiM0owY3k1cWIybHVJRDBnWm5WdVkzUnBiMjRvS1NCN1hHNGdJSFpoY2lCd1lYUm9jeUE5SUVGeWNtRjVMbkJ5YjNSdmRIbHdaUzV6YkdsalpTNWpZV3hzS0dGeVozVnRaVzUwY3l3Z01DazdYRzRnSUhKbGRIVnliaUJsZUhCdmNuUnpMbTV2Y20xaGJHbDZaU2htYVd4MFpYSW9jR0YwYUhNc0lHWjFibU4wYVc5dUtIQXNJR2x1WkdWNEtTQjdYRzRnSUNBZ2FXWWdLSFI1Y0dWdlppQndJQ0U5UFNBbmMzUnlhVzVuSnlrZ2UxeHVJQ0FnSUNBZ2RHaHliM2NnYm1WM0lGUjVjR1ZGY25KdmNpZ25RWEpuZFcxbGJuUnpJSFJ2SUhCaGRHZ3VhbTlwYmlCdGRYTjBJR0psSUhOMGNtbHVaM01uS1R0Y2JpQWdJQ0I5WEc0Z0lDQWdjbVYwZFhKdUlIQTdYRzRnSUgwcExtcHZhVzRvSnk4bktTazdYRzU5TzF4dVhHNWNiaTh2SUhCaGRHZ3VjbVZzWVhScGRtVW9abkp2YlN3Z2RHOHBYRzR2THlCd2IzTnBlQ0IyWlhKemFXOXVYRzVsZUhCdmNuUnpMbkpsYkdGMGFYWmxJRDBnWm5WdVkzUnBiMjRvWm5KdmJTd2dkRzhwSUh0Y2JpQWdabkp2YlNBOUlHVjRjRzl5ZEhNdWNtVnpiMngyWlNobWNtOXRLUzV6ZFdKemRISW9NU2s3WEc0Z0lIUnZJRDBnWlhod2IzSjBjeTV5WlhOdmJIWmxLSFJ2S1M1emRXSnpkSElvTVNrN1hHNWNiaUFnWm5WdVkzUnBiMjRnZEhKcGJTaGhjbklwSUh0Y2JpQWdJQ0IyWVhJZ2MzUmhjblFnUFNBd08xeHVJQ0FnSUdadmNpQW9PeUJ6ZEdGeWRDQThJR0Z5Y2k1c1pXNW5kR2c3SUhOMFlYSjBLeXNwSUh0Y2JpQWdJQ0FnSUdsbUlDaGhjbkpiYzNSaGNuUmRJQ0U5UFNBbkp5a2dZbkpsWVdzN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnZG1GeUlHVnVaQ0E5SUdGeWNpNXNaVzVuZEdnZ0xTQXhPMXh1SUNBZ0lHWnZjaUFvT3lCbGJtUWdQajBnTURzZ1pXNWtMUzBwSUh0Y2JpQWdJQ0FnSUdsbUlDaGhjbkpiWlc1a1hTQWhQVDBnSnljcElHSnlaV0ZyTzF4dUlDQWdJSDFjYmx4dUlDQWdJR2xtSUNoemRHRnlkQ0ErSUdWdVpDa2djbVYwZFhKdUlGdGRPMXh1SUNBZ0lISmxkSFZ5YmlCaGNuSXVjMnhwWTJVb2MzUmhjblFzSUdWdVpDQXRJSE4wWVhKMElDc2dNU2s3WEc0Z0lIMWNibHh1SUNCMllYSWdabkp2YlZCaGNuUnpJRDBnZEhKcGJTaG1jbTl0TG5Od2JHbDBLQ2N2SnlrcE8xeHVJQ0IyWVhJZ2RHOVFZWEowY3lBOUlIUnlhVzBvZEc4dWMzQnNhWFFvSnk4bktTazdYRzVjYmlBZ2RtRnlJR3hsYm1kMGFDQTlJRTFoZEdndWJXbHVLR1p5YjIxUVlYSjBjeTVzWlc1bmRHZ3NJSFJ2VUdGeWRITXViR1Z1WjNSb0tUdGNiaUFnZG1GeUlITmhiV1ZRWVhKMGMweGxibWQwYUNBOUlHeGxibWQwYUR0Y2JpQWdabTl5SUNoMllYSWdhU0E5SURBN0lHa2dQQ0JzWlc1bmRHZzdJR2tyS3lrZ2UxeHVJQ0FnSUdsbUlDaG1jbTl0VUdGeWRITmJhVjBnSVQwOUlIUnZVR0Z5ZEhOYmFWMHBJSHRjYmlBZ0lDQWdJSE5oYldWUVlYSjBjMHhsYm1kMGFDQTlJR2s3WEc0Z0lDQWdJQ0JpY21WaGF6dGNiaUFnSUNCOVhHNGdJSDFjYmx4dUlDQjJZWElnYjNWMGNIVjBVR0Z5ZEhNZ1BTQmJYVHRjYmlBZ1ptOXlJQ2gyWVhJZ2FTQTlJSE5oYldWUVlYSjBjMHhsYm1kMGFEc2dhU0E4SUdaeWIyMVFZWEowY3k1c1pXNW5kR2c3SUdrckt5a2dlMXh1SUNBZ0lHOTFkSEIxZEZCaGNuUnpMbkIxYzJnb0p5NHVKeWs3WEc0Z0lIMWNibHh1SUNCdmRYUndkWFJRWVhKMGN5QTlJRzkxZEhCMWRGQmhjblJ6TG1OdmJtTmhkQ2gwYjFCaGNuUnpMbk5zYVdObEtITmhiV1ZRWVhKMGMweGxibWQwYUNrcE8xeHVYRzRnSUhKbGRIVnliaUJ2ZFhSd2RYUlFZWEowY3k1cWIybHVLQ2N2SnlrN1hHNTlPMXh1WEc1bGVIQnZjblJ6TG5ObGNDQTlJQ2N2Snp0Y2JtVjRjRzl5ZEhNdVpHVnNhVzFwZEdWeUlEMGdKem9uTzF4dVhHNWxlSEJ2Y25SekxtUnBjbTVoYldVZ1BTQm1kVzVqZEdsdmJpaHdZWFJvS1NCN1hHNGdJSFpoY2lCeVpYTjFiSFFnUFNCemNHeHBkRkJoZEdnb2NHRjBhQ2tzWEc0Z0lDQWdJQ0J5YjI5MElEMGdjbVZ6ZFd4MFd6QmRMRnh1SUNBZ0lDQWdaR2x5SUQwZ2NtVnpkV3gwV3pGZE8xeHVYRzRnSUdsbUlDZ2hjbTl2ZENBbUppQWhaR2x5S1NCN1hHNGdJQ0FnTHk4Z1RtOGdaR2x5Ym1GdFpTQjNhR0YwYzI5bGRtVnlYRzRnSUNBZ2NtVjBkWEp1SUNjdUp6dGNiaUFnZlZ4dVhHNGdJR2xtSUNoa2FYSXBJSHRjYmlBZ0lDQXZMeUJKZENCb1lYTWdZU0JrYVhKdVlXMWxMQ0J6ZEhKcGNDQjBjbUZwYkdsdVp5QnpiR0Z6YUZ4dUlDQWdJR1JwY2lBOUlHUnBjaTV6ZFdKemRISW9NQ3dnWkdseUxteGxibWQwYUNBdElERXBPMXh1SUNCOVhHNWNiaUFnY21WMGRYSnVJSEp2YjNRZ0t5QmthWEk3WEc1OU8xeHVYRzVjYm1WNGNHOXlkSE11WW1GelpXNWhiV1VnUFNCbWRXNWpkR2x2Ymlod1lYUm9MQ0JsZUhRcElIdGNiaUFnZG1GeUlHWWdQU0J6Y0d4cGRGQmhkR2dvY0dGMGFDbGJNbDA3WEc0Z0lDOHZJRlJQUkU4NklHMWhhMlVnZEdocGN5QmpiMjF3WVhKcGMyOXVJR05oYzJVdGFXNXpaVzV6YVhScGRtVWdiMjRnZDJsdVpHOTNjejljYmlBZ2FXWWdLR1Y0ZENBbUppQm1Mbk4xWW5OMGNpZ3RNU0FxSUdWNGRDNXNaVzVuZEdncElEMDlQU0JsZUhRcElIdGNiaUFnSUNCbUlEMGdaaTV6ZFdKemRISW9NQ3dnWmk1c1pXNW5kR2dnTFNCbGVIUXViR1Z1WjNSb0tUdGNiaUFnZlZ4dUlDQnlaWFIxY200Z1pqdGNibjA3WEc1Y2JseHVaWGh3YjNKMGN5NWxlSFJ1WVcxbElEMGdablZ1WTNScGIyNG9jR0YwYUNrZ2UxeHVJQ0J5WlhSMWNtNGdjM0JzYVhSUVlYUm9LSEJoZEdncFd6TmRPMXh1ZlR0Y2JseHVablZ1WTNScGIyNGdabWxzZEdWeUlDaDRjeXdnWmlrZ2UxeHVJQ0FnSUdsbUlDaDRjeTVtYVd4MFpYSXBJSEpsZEhWeWJpQjRjeTVtYVd4MFpYSW9aaWs3WEc0Z0lDQWdkbUZ5SUhKbGN5QTlJRnRkTzF4dUlDQWdJR1p2Y2lBb2RtRnlJR2tnUFNBd095QnBJRHdnZUhNdWJHVnVaM1JvT3lCcEt5c3BJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tHWW9lSE5iYVYwc0lHa3NJSGh6S1NrZ2NtVnpMbkIxYzJnb2VITmJhVjBwTzF4dUlDQWdJSDFjYmlBZ0lDQnlaWFIxY200Z2NtVnpPMXh1ZlZ4dVhHNHZMeUJUZEhKcGJtY3VjSEp2ZEc5MGVYQmxMbk4xWW5OMGNpQXRJRzVsWjJGMGFYWmxJR2x1WkdWNElHUnZiaWQwSUhkdmNtc2dhVzRnU1VVNFhHNTJZWElnYzNWaWMzUnlJRDBnSjJGaUp5NXpkV0p6ZEhJb0xURXBJRDA5UFNBbllpZGNiaUFnSUNBL0lHWjFibU4wYVc5dUlDaHpkSElzSUhOMFlYSjBMQ0JzWlc0cElIc2djbVYwZFhKdUlITjBjaTV6ZFdKemRISW9jM1JoY25Rc0lHeGxiaWtnZlZ4dUlDQWdJRG9nWm5WdVkzUnBiMjRnS0hOMGNpd2djM1JoY25Rc0lHeGxiaWtnZTF4dUlDQWdJQ0FnSUNCcFppQW9jM1JoY25RZ1BDQXdLU0J6ZEdGeWRDQTlJSE4wY2k1c1pXNW5kR2dnS3lCemRHRnlkRHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSE4wY2k1emRXSnpkSElvYzNSaGNuUXNJR3hsYmlrN1hHNGdJQ0FnZlZ4dU8xeHVYRzVjYmx4dUx5OHZMeTh2THk4dkx5OHZMeTh2THk4dlhHNHZMeUJYUlVKUVFVTkxJRVpQVDFSRlVseHVMeThnTGk5K0wzQmhkR2d0WW5KdmQzTmxjbWxtZVM5cGJtUmxlQzVxYzF4dUx5OGdiVzlrZFd4bElHbGtJRDBnTVRKY2JpOHZJRzF2WkhWc1pTQmphSFZ1YTNNZ1BTQXdJbDBzSW0xaGNIQnBibWR6SWpvaVFVRkJRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCSWl3aWMyOTFjbU5sVW05dmRDSTZJaUo5XCIpO1xuXG4vKioqLyB9KSxcbi8qIDEzICovXG4vKiBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyogYWxsIGV4cG9ydHMgdXNlZCAqL1xuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9+L3JhbWRhL3NyYy9jb21wb3NlLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuZXZhbChcInZhciBwaXBlID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9waXBlICovIDE4Myk7XFxudmFyIHJldmVyc2UgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL3JldmVyc2UgKi8gMTg3KTtcXG5cXG5cXG4vKipcXG4gKiBQZXJmb3JtcyByaWdodC10by1sZWZ0IGZ1bmN0aW9uIGNvbXBvc2l0aW9uLiBUaGUgcmlnaHRtb3N0IGZ1bmN0aW9uIG1heSBoYXZlXFxuICogYW55IGFyaXR5OyB0aGUgcmVtYWluaW5nIGZ1bmN0aW9ucyBtdXN0IGJlIHVuYXJ5LlxcbiAqXFxuICogKipOb3RlOioqIFRoZSByZXN1bHQgb2YgY29tcG9zZSBpcyBub3QgYXV0b21hdGljYWxseSBjdXJyaWVkLlxcbiAqXFxuICogQGZ1bmNcXG4gKiBAbWVtYmVyT2YgUlxcbiAqIEBzaW5jZSB2MC4xLjBcXG4gKiBAY2F0ZWdvcnkgRnVuY3Rpb25cXG4gKiBAc2lnICgoeSAtPiB6KSwgKHggLT4geSksIC4uLiwgKG8gLT4gcCksICgoYSwgYiwgLi4uLCBuKSAtPiBvKSkgLT4gKChhLCBiLCAuLi4sIG4pIC0+IHopXFxuICogQHBhcmFtIHsuLi5GdW5jdGlvbn0gLi4uZnVuY3Rpb25zIFRoZSBmdW5jdGlvbnMgdG8gY29tcG9zZVxcbiAqIEByZXR1cm4ge0Z1bmN0aW9ufVxcbiAqIEBzZWUgUi5waXBlXFxuICogQGV4YW1wbGVcXG4gKlxcbiAqICAgICAgdmFyIGNsYXNzeUdyZWV0aW5nID0gKGZpcnN0TmFtZSwgbGFzdE5hbWUpID0+IFxcXCJUaGUgbmFtZSdzIFxcXCIgKyBsYXN0TmFtZSArIFxcXCIsIFxcXCIgKyBmaXJzdE5hbWUgKyBcXFwiIFxcXCIgKyBsYXN0TmFtZVxcbiAqICAgICAgdmFyIHllbGxHcmVldGluZyA9IFIuY29tcG9zZShSLnRvVXBwZXIsIGNsYXNzeUdyZWV0aW5nKTtcXG4gKiAgICAgIHllbGxHcmVldGluZygnSmFtZXMnLCAnQm9uZCcpOyAvLz0+IFxcXCJUSEUgTkFNRSdTIEJPTkQsIEpBTUVTIEJPTkRcXFwiXFxuICpcXG4gKiAgICAgIFIuY29tcG9zZShNYXRoLmFicywgUi5hZGQoMSksIFIubXVsdGlwbHkoMikpKC00KSAvLz0+IDdcXG4gKlxcbiAqIEBzeW1iIFIuY29tcG9zZShmLCBnLCBoKShhLCBiKSA9IGYoZyhoKGEsIGIpKSlcXG4gKi9cXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNvbXBvc2UoKSB7XFxuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkge1xcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2NvbXBvc2UgcmVxdWlyZXMgYXQgbGVhc3Qgb25lIGFyZ3VtZW50Jyk7XFxuICB9XFxuICByZXR1cm4gcGlwZS5hcHBseSh0aGlzLCByZXZlcnNlKGFyZ3VtZW50cykpO1xcbn07XFxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lNVE11YW5NaUxDSnpiM1Z5WTJWeklqcGJJbmRsWW5CaFkyczZMeTh2TGk5K0wzSmhiV1JoTDNOeVl5OWpiMjF3YjNObExtcHpQelZtT0dVaVhTd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lkbUZ5SUhCcGNHVWdQU0J5WlhGMWFYSmxLQ2N1TDNCcGNHVW5LVHRjYm5aaGNpQnlaWFpsY25ObElEMGdjbVZ4ZFdseVpTZ25MaTl5WlhabGNuTmxKeWs3WEc1Y2JseHVMeW9xWEc0Z0tpQlFaWEptYjNKdGN5QnlhV2RvZEMxMGJ5MXNaV1owSUdaMWJtTjBhVzl1SUdOdmJYQnZjMmwwYVc5dUxpQlVhR1VnY21sbmFIUnRiM04wSUdaMWJtTjBhVzl1SUcxaGVTQm9ZWFpsWEc0Z0tpQmhibmtnWVhKcGRIazdJSFJvWlNCeVpXMWhhVzVwYm1jZ1puVnVZM1JwYjI1eklHMTFjM1FnWW1VZ2RXNWhjbmt1WEc0Z0tseHVJQ29nS2lwT2IzUmxPaW9xSUZSb1pTQnlaWE4xYkhRZ2IyWWdZMjl0Y0c5elpTQnBjeUJ1YjNRZ1lYVjBiMjFoZEdsallXeHNlU0JqZFhKeWFXVmtMbHh1SUNwY2JpQXFJRUJtZFc1alhHNGdLaUJBYldWdFltVnlUMllnVWx4dUlDb2dRSE5wYm1ObElIWXdMakV1TUZ4dUlDb2dRR05oZEdWbmIzSjVJRVoxYm1OMGFXOXVYRzRnS2lCQWMybG5JQ2dvZVNBdFBpQjZLU3dnS0hnZ0xUNGdlU2tzSUM0dUxpd2dLRzhnTFQ0Z2NDa3NJQ2dvWVN3Z1lpd2dMaTR1TENCdUtTQXRQaUJ2S1NrZ0xUNGdLQ2hoTENCaUxDQXVMaTRzSUc0cElDMCtJSG9wWEc0Z0tpQkFjR0Z5WVcwZ2V5NHVMa1oxYm1OMGFXOXVmU0F1TGk1bWRXNWpkR2x2Ym5NZ1ZHaGxJR1oxYm1OMGFXOXVjeUIwYnlCamIyMXdiM05sWEc0Z0tpQkFjbVYwZFhKdUlIdEdkVzVqZEdsdmJuMWNiaUFxSUVCelpXVWdVaTV3YVhCbFhHNGdLaUJBWlhoaGJYQnNaVnh1SUNwY2JpQXFJQ0FnSUNBZ2RtRnlJR05zWVhOemVVZHlaV1YwYVc1bklEMGdLR1pwY25OMFRtRnRaU3dnYkdGemRFNWhiV1VwSUQwK0lGd2lWR2hsSUc1aGJXVW5jeUJjSWlBcklHeGhjM1JPWVcxbElDc2dYQ0lzSUZ3aUlDc2dabWx5YzNST1lXMWxJQ3NnWENJZ1hDSWdLeUJzWVhOMFRtRnRaVnh1SUNvZ0lDQWdJQ0IyWVhJZ2VXVnNiRWR5WldWMGFXNW5JRDBnVWk1amIyMXdiM05sS0ZJdWRHOVZjSEJsY2l3Z1kyeGhjM041UjNKbFpYUnBibWNwTzF4dUlDb2dJQ0FnSUNCNVpXeHNSM0psWlhScGJtY29KMHBoYldWekp5d2dKMEp2Ym1RbktUc2dMeTg5UGlCY0lsUklSU0JPUVUxRkoxTWdRazlPUkN3Z1NrRk5SVk1nUWs5T1JGd2lYRzRnS2x4dUlDb2dJQ0FnSUNCU0xtTnZiWEJ2YzJVb1RXRjBhQzVoWW5Nc0lGSXVZV1JrS0RFcExDQlNMbTExYkhScGNHeDVLRElwS1NndE5Da2dMeTg5UGlBM1hHNGdLbHh1SUNvZ1FITjViV0lnVWk1amIyMXdiM05sS0dZc0lHY3NJR2dwS0dFc0lHSXBJRDBnWmlobktHZ29ZU3dnWWlrcEtWeHVJQ292WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUdaMWJtTjBhVzl1SUdOdmJYQnZjMlVvS1NCN1hHNGdJR2xtSUNoaGNtZDFiV1Z1ZEhNdWJHVnVaM1JvSUQwOVBTQXdLU0I3WEc0Z0lDQWdkR2h5YjNjZ2JtVjNJRVZ5Y205eUtDZGpiMjF3YjNObElISmxjWFZwY21WeklHRjBJR3hsWVhOMElHOXVaU0JoY21kMWJXVnVkQ2NwTzF4dUlDQjlYRzRnSUhKbGRIVnliaUJ3YVhCbExtRndjR3g1S0hSb2FYTXNJSEpsZG1WeWMyVW9ZWEpuZFcxbGJuUnpLU2s3WEc1OU8xeHVYRzVjYmx4dUx5OHZMeTh2THk4dkx5OHZMeTh2THk4dlhHNHZMeUJYUlVKUVFVTkxJRVpQVDFSRlVseHVMeThnTGk5K0wzSmhiV1JoTDNOeVl5OWpiMjF3YjNObExtcHpYRzR2THlCdGIyUjFiR1VnYVdRZ1BTQXhNMXh1THk4Z2JXOWtkV3hsSUdOb2RXNXJjeUE5SURBaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPeUlzSW5OdmRYSmpaVkp2YjNRaU9pSWlmUT09XCIpO1xuXG4vKioqLyB9KSxcbi8qIDE0ICovXG4vKiBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyogYWxsIGV4cG9ydHMgdXNlZCAqL1xuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL34vcmFtZGEvc3JjL2ludGVybmFsL19hcml0eS5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuZXZhbChcIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gX2FyaXR5KG4sIGZuKSB7XFxuICAvKiBlc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtdmFycyAqL1xcbiAgc3dpdGNoIChuKSB7XFxuICAgIGNhc2UgMDogcmV0dXJuIGZ1bmN0aW9uKCkgeyByZXR1cm4gZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfTtcXG4gICAgY2FzZSAxOiByZXR1cm4gZnVuY3Rpb24oYTApIHsgcmV0dXJuIGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH07XFxuICAgIGNhc2UgMjogcmV0dXJuIGZ1bmN0aW9uKGEwLCBhMSkgeyByZXR1cm4gZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfTtcXG4gICAgY2FzZSAzOiByZXR1cm4gZnVuY3Rpb24oYTAsIGExLCBhMikgeyByZXR1cm4gZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfTtcXG4gICAgY2FzZSA0OiByZXR1cm4gZnVuY3Rpb24oYTAsIGExLCBhMiwgYTMpIHsgcmV0dXJuIGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH07XFxuICAgIGNhc2UgNTogcmV0dXJuIGZ1bmN0aW9uKGEwLCBhMSwgYTIsIGEzLCBhNCkgeyByZXR1cm4gZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfTtcXG4gICAgY2FzZSA2OiByZXR1cm4gZnVuY3Rpb24oYTAsIGExLCBhMiwgYTMsIGE0LCBhNSkgeyByZXR1cm4gZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfTtcXG4gICAgY2FzZSA3OiByZXR1cm4gZnVuY3Rpb24oYTAsIGExLCBhMiwgYTMsIGE0LCBhNSwgYTYpIHsgcmV0dXJuIGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH07XFxuICAgIGNhc2UgODogcmV0dXJuIGZ1bmN0aW9uKGEwLCBhMSwgYTIsIGEzLCBhNCwgYTUsIGE2LCBhNykgeyByZXR1cm4gZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfTtcXG4gICAgY2FzZSA5OiByZXR1cm4gZnVuY3Rpb24oYTAsIGExLCBhMiwgYTMsIGE0LCBhNSwgYTYsIGE3LCBhOCkgeyByZXR1cm4gZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfTtcXG4gICAgY2FzZSAxMDogcmV0dXJuIGZ1bmN0aW9uKGEwLCBhMSwgYTIsIGEzLCBhNCwgYTUsIGE2LCBhNywgYTgsIGE5KSB7IHJldHVybiBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9O1xcbiAgICBkZWZhdWx0OiB0aHJvdyBuZXcgRXJyb3IoJ0ZpcnN0IGFyZ3VtZW50IHRvIF9hcml0eSBtdXN0IGJlIGEgbm9uLW5lZ2F0aXZlIGludGVnZXIgbm8gZ3JlYXRlciB0aGFuIHRlbicpO1xcbiAgfVxcbn07XFxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lNVFF1YW5NaUxDSnpiM1Z5WTJWeklqcGJJbmRsWW5CaFkyczZMeTh2TGk5K0wzSmhiV1JoTDNOeVl5OXBiblJsY201aGJDOWZZWEpwZEhrdWFuTS9Oakl3TUNKZExDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SnRiMlIxYkdVdVpYaHdiM0owY3lBOUlHWjFibU4wYVc5dUlGOWhjbWwwZVNodUxDQm1iaWtnZTF4dUlDQXZLaUJsYzJ4cGJuUXRaR2x6WVdKc1pTQnVieTExYm5WelpXUXRkbUZ5Y3lBcUwxeHVJQ0J6ZDJsMFkyZ2dLRzRwSUh0Y2JpQWdJQ0JqWVhObElEQTZJSEpsZEhWeWJpQm1kVzVqZEdsdmJpZ3BJSHNnY21WMGRYSnVJR1p1TG1Gd2NHeDVLSFJvYVhNc0lHRnlaM1Z0Wlc1MGN5azdJSDA3WEc0Z0lDQWdZMkZ6WlNBeE9pQnlaWFIxY200Z1puVnVZM1JwYjI0b1lUQXBJSHNnY21WMGRYSnVJR1p1TG1Gd2NHeDVLSFJvYVhNc0lHRnlaM1Z0Wlc1MGN5azdJSDA3WEc0Z0lDQWdZMkZ6WlNBeU9pQnlaWFIxY200Z1puVnVZM1JwYjI0b1lUQXNJR0V4S1NCN0lISmxkSFZ5YmlCbWJpNWhjSEJzZVNoMGFHbHpMQ0JoY21kMWJXVnVkSE1wT3lCOU8xeHVJQ0FnSUdOaGMyVWdNem9nY21WMGRYSnVJR1oxYm1OMGFXOXVLR0V3TENCaE1Td2dZVElwSUhzZ2NtVjBkWEp1SUdadUxtRndjR3g1S0hSb2FYTXNJR0Z5WjNWdFpXNTBjeWs3SUgwN1hHNGdJQ0FnWTJGelpTQTBPaUJ5WlhSMWNtNGdablZ1WTNScGIyNG9ZVEFzSUdFeExDQmhNaXdnWVRNcElIc2djbVYwZFhKdUlHWnVMbUZ3Y0d4NUtIUm9hWE1zSUdGeVozVnRaVzUwY3lrN0lIMDdYRzRnSUNBZ1kyRnpaU0ExT2lCeVpYUjFjbTRnWm5WdVkzUnBiMjRvWVRBc0lHRXhMQ0JoTWl3Z1lUTXNJR0UwS1NCN0lISmxkSFZ5YmlCbWJpNWhjSEJzZVNoMGFHbHpMQ0JoY21kMWJXVnVkSE1wT3lCOU8xeHVJQ0FnSUdOaGMyVWdOam9nY21WMGRYSnVJR1oxYm1OMGFXOXVLR0V3TENCaE1Td2dZVElzSUdFekxDQmhOQ3dnWVRVcElIc2djbVYwZFhKdUlHWnVMbUZ3Y0d4NUtIUm9hWE1zSUdGeVozVnRaVzUwY3lrN0lIMDdYRzRnSUNBZ1kyRnpaU0EzT2lCeVpYUjFjbTRnWm5WdVkzUnBiMjRvWVRBc0lHRXhMQ0JoTWl3Z1lUTXNJR0UwTENCaE5Td2dZVFlwSUhzZ2NtVjBkWEp1SUdadUxtRndjR3g1S0hSb2FYTXNJR0Z5WjNWdFpXNTBjeWs3SUgwN1hHNGdJQ0FnWTJGelpTQTRPaUJ5WlhSMWNtNGdablZ1WTNScGIyNG9ZVEFzSUdFeExDQmhNaXdnWVRNc0lHRTBMQ0JoTlN3Z1lUWXNJR0UzS1NCN0lISmxkSFZ5YmlCbWJpNWhjSEJzZVNoMGFHbHpMQ0JoY21kMWJXVnVkSE1wT3lCOU8xeHVJQ0FnSUdOaGMyVWdPVG9nY21WMGRYSnVJR1oxYm1OMGFXOXVLR0V3TENCaE1Td2dZVElzSUdFekxDQmhOQ3dnWVRVc0lHRTJMQ0JoTnl3Z1lUZ3BJSHNnY21WMGRYSnVJR1p1TG1Gd2NHeDVLSFJvYVhNc0lHRnlaM1Z0Wlc1MGN5azdJSDA3WEc0Z0lDQWdZMkZ6WlNBeE1Eb2djbVYwZFhKdUlHWjFibU4wYVc5dUtHRXdMQ0JoTVN3Z1lUSXNJR0V6TENCaE5Dd2dZVFVzSUdFMkxDQmhOeXdnWVRnc0lHRTVLU0I3SUhKbGRIVnliaUJtYmk1aGNIQnNlU2gwYUdsekxDQmhjbWQxYldWdWRITXBPeUI5TzF4dUlDQWdJR1JsWm1GMWJIUTZJSFJvY205M0lHNWxkeUJGY25KdmNpZ25SbWx5YzNRZ1lYSm5kVzFsYm5RZ2RHOGdYMkZ5YVhSNUlHMTFjM1FnWW1VZ1lTQnViMjR0Ym1WbllYUnBkbVVnYVc1MFpXZGxjaUJ1YnlCbmNtVmhkR1Z5SUhSb1lXNGdkR1Z1SnlrN1hHNGdJSDFjYm4wN1hHNWNibHh1WEc0dkx5OHZMeTh2THk4dkx5OHZMeTh2THk5Y2JpOHZJRmRGUWxCQlEwc2dSazlQVkVWU1hHNHZMeUF1TDM0dmNtRnRaR0V2YzNKakwybHVkR1Z5Ym1Gc0wxOWhjbWwwZVM1cWMxeHVMeThnYlc5a2RXeGxJR2xrSUQwZ01UUmNiaTh2SUcxdlpIVnNaU0JqYUhWdWEzTWdQU0F3SWwwc0ltMWhjSEJwYm1keklqb2lRVUZCUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3lJc0luTnZkWEpqWlZKdmIzUWlPaUlpZlE9PVwiKTtcblxuLyoqKi8gfSksXG4vKiAxNSAqL1xuLyogbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9cbi8qIGFsbCBleHBvcnRzIHVzZWQgKi9cbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vfi9yYW1kYS9zcmMvaW50ZXJuYWwvX2hhcy5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbmV2YWwoXCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIF9oYXMocHJvcCwgb2JqKSB7XFxuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCk7XFxufTtcXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaU1UVXVhbk1pTENKemIzVnlZMlZ6SWpwYkluZGxZbkJoWTJzNkx5OHZMaTkrTDNKaGJXUmhMM055WXk5cGJuUmxjbTVoYkM5ZmFHRnpMbXB6UHpVNVpUWWlYU3dpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpYlc5a2RXeGxMbVY0Y0c5eWRITWdQU0JtZFc1amRHbHZiaUJmYUdGektIQnliM0FzSUc5aWFpa2dlMXh1SUNCeVpYUjFjbTRnVDJKcVpXTjBMbkJ5YjNSdmRIbHdaUzVvWVhOUGQyNVFjbTl3WlhKMGVTNWpZV3hzS0c5aWFpd2djSEp2Y0NrN1hHNTlPMXh1WEc1Y2JseHVMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZYRzR2THlCWFJVSlFRVU5MSUVaUFQxUkZVbHh1THk4Z0xpOStMM0poYldSaEwzTnlZeTlwYm5SbGNtNWhiQzlmYUdGekxtcHpYRzR2THlCdGIyUjFiR1VnYVdRZ1BTQXhOVnh1THk4Z2JXOWtkV3hsSUdOb2RXNXJjeUE5SURBaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQk8wRkJRMEU3UVVGRFFUc2lMQ0p6YjNWeVkyVlNiMjkwSWpvaUluMD1cIik7XG5cbi8qKiovIH0pLFxuLyogMTYgKi9cbi8qIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKiBhbGwgZXhwb3J0cyB1c2VkICovXG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL34vcmFtZGEvc3JjL2ludGVybmFsL19yZWR1Y2UuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5ldmFsKFwidmFyIF94d3JhcCA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vX3h3cmFwICovIDE3Mik7XFxudmFyIGJpbmQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9iaW5kICovIDE0Myk7XFxudmFyIGlzQXJyYXlMaWtlID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaXNBcnJheUxpa2UgKi8gMTc0KTtcXG5cXG5cXG5tb2R1bGUuZXhwb3J0cyA9IChmdW5jdGlvbigpIHtcXG4gIGZ1bmN0aW9uIF9hcnJheVJlZHVjZSh4ZiwgYWNjLCBsaXN0KSB7XFxuICAgIHZhciBpZHggPSAwO1xcbiAgICB2YXIgbGVuID0gbGlzdC5sZW5ndGg7XFxuICAgIHdoaWxlIChpZHggPCBsZW4pIHtcXG4gICAgICBhY2MgPSB4ZlsnQEB0cmFuc2R1Y2VyL3N0ZXAnXShhY2MsIGxpc3RbaWR4XSk7XFxuICAgICAgaWYgKGFjYyAmJiBhY2NbJ0BAdHJhbnNkdWNlci9yZWR1Y2VkJ10pIHtcXG4gICAgICAgIGFjYyA9IGFjY1snQEB0cmFuc2R1Y2VyL3ZhbHVlJ107XFxuICAgICAgICBicmVhaztcXG4gICAgICB9XFxuICAgICAgaWR4ICs9IDE7XFxuICAgIH1cXG4gICAgcmV0dXJuIHhmWydAQHRyYW5zZHVjZXIvcmVzdWx0J10oYWNjKTtcXG4gIH1cXG5cXG4gIGZ1bmN0aW9uIF9pdGVyYWJsZVJlZHVjZSh4ZiwgYWNjLCBpdGVyKSB7XFxuICAgIHZhciBzdGVwID0gaXRlci5uZXh0KCk7XFxuICAgIHdoaWxlICghc3RlcC5kb25lKSB7XFxuICAgICAgYWNjID0geGZbJ0BAdHJhbnNkdWNlci9zdGVwJ10oYWNjLCBzdGVwLnZhbHVlKTtcXG4gICAgICBpZiAoYWNjICYmIGFjY1snQEB0cmFuc2R1Y2VyL3JlZHVjZWQnXSkge1xcbiAgICAgICAgYWNjID0gYWNjWydAQHRyYW5zZHVjZXIvdmFsdWUnXTtcXG4gICAgICAgIGJyZWFrO1xcbiAgICAgIH1cXG4gICAgICBzdGVwID0gaXRlci5uZXh0KCk7XFxuICAgIH1cXG4gICAgcmV0dXJuIHhmWydAQHRyYW5zZHVjZXIvcmVzdWx0J10oYWNjKTtcXG4gIH1cXG5cXG4gIGZ1bmN0aW9uIF9tZXRob2RSZWR1Y2UoeGYsIGFjYywgb2JqKSB7XFxuICAgIHJldHVybiB4ZlsnQEB0cmFuc2R1Y2VyL3Jlc3VsdCddKG9iai5yZWR1Y2UoYmluZCh4ZlsnQEB0cmFuc2R1Y2VyL3N0ZXAnXSwgeGYpLCBhY2MpKTtcXG4gIH1cXG5cXG4gIHZhciBzeW1JdGVyYXRvciA9ICh0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJykgPyBTeW1ib2wuaXRlcmF0b3IgOiAnQEBpdGVyYXRvcic7XFxuICByZXR1cm4gZnVuY3Rpb24gX3JlZHVjZShmbiwgYWNjLCBsaXN0KSB7XFxuICAgIGlmICh0eXBlb2YgZm4gPT09ICdmdW5jdGlvbicpIHtcXG4gICAgICBmbiA9IF94d3JhcChmbik7XFxuICAgIH1cXG4gICAgaWYgKGlzQXJyYXlMaWtlKGxpc3QpKSB7XFxuICAgICAgcmV0dXJuIF9hcnJheVJlZHVjZShmbiwgYWNjLCBsaXN0KTtcXG4gICAgfVxcbiAgICBpZiAodHlwZW9mIGxpc3QucmVkdWNlID09PSAnZnVuY3Rpb24nKSB7XFxuICAgICAgcmV0dXJuIF9tZXRob2RSZWR1Y2UoZm4sIGFjYywgbGlzdCk7XFxuICAgIH1cXG4gICAgaWYgKGxpc3Rbc3ltSXRlcmF0b3JdICE9IG51bGwpIHtcXG4gICAgICByZXR1cm4gX2l0ZXJhYmxlUmVkdWNlKGZuLCBhY2MsIGxpc3Rbc3ltSXRlcmF0b3JdKCkpO1xcbiAgICB9XFxuICAgIGlmICh0eXBlb2YgbGlzdC5uZXh0ID09PSAnZnVuY3Rpb24nKSB7XFxuICAgICAgcmV0dXJuIF9pdGVyYWJsZVJlZHVjZShmbiwgYWNjLCBsaXN0KTtcXG4gICAgfVxcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdyZWR1Y2U6IGxpc3QgbXVzdCBiZSBhcnJheSBvciBpdGVyYWJsZScpO1xcbiAgfTtcXG59KCkpO1xcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pTVRZdWFuTWlMQ0p6YjNWeVkyVnpJanBiSW5kbFluQmhZMnM2THk4dkxpOStMM0poYldSaEwzTnlZeTlwYm5SbGNtNWhiQzlmY21Wa2RXTmxMbXB6UDJNM05UTWlYU3dpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpZG1GeUlGOTRkM0poY0NBOUlISmxjWFZwY21Vb0p5NHZYM2gzY21Gd0p5azdYRzUyWVhJZ1ltbHVaQ0E5SUhKbGNYVnBjbVVvSnk0dUwySnBibVFuS1R0Y2JuWmhjaUJwYzBGeWNtRjVUR2xyWlNBOUlISmxjWFZwY21Vb0p5NHVMMmx6UVhKeVlYbE1hV3RsSnlrN1hHNWNibHh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0FvWm5WdVkzUnBiMjRvS1NCN1hHNGdJR1oxYm1OMGFXOXVJRjloY25KaGVWSmxaSFZqWlNoNFppd2dZV05qTENCc2FYTjBLU0I3WEc0Z0lDQWdkbUZ5SUdsa2VDQTlJREE3WEc0Z0lDQWdkbUZ5SUd4bGJpQTlJR3hwYzNRdWJHVnVaM1JvTzF4dUlDQWdJSGRvYVd4bElDaHBaSGdnUENCc1pXNHBJSHRjYmlBZ0lDQWdJR0ZqWXlBOUlIaG1XeWRBUUhSeVlXNXpaSFZqWlhJdmMzUmxjQ2RkS0dGall5d2diR2x6ZEZ0cFpIaGRLVHRjYmlBZ0lDQWdJR2xtSUNoaFkyTWdKaVlnWVdOald5ZEFRSFJ5WVc1elpIVmpaWEl2Y21Wa2RXTmxaQ2RkS1NCN1hHNGdJQ0FnSUNBZ0lHRmpZeUE5SUdGalkxc25RRUIwY21GdWMyUjFZMlZ5TDNaaGJIVmxKMTA3WEc0Z0lDQWdJQ0FnSUdKeVpXRnJPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lDQWdhV1I0SUNzOUlERTdYRzRnSUNBZ2ZWeHVJQ0FnSUhKbGRIVnliaUI0WmxzblFFQjBjbUZ1YzJSMVkyVnlMM0psYzNWc2RDZGRLR0ZqWXlrN1hHNGdJSDFjYmx4dUlDQm1kVzVqZEdsdmJpQmZhWFJsY21GaWJHVlNaV1IxWTJVb2VHWXNJR0ZqWXl3Z2FYUmxjaWtnZTF4dUlDQWdJSFpoY2lCemRHVndJRDBnYVhSbGNpNXVaWGgwS0NrN1hHNGdJQ0FnZDJocGJHVWdLQ0Z6ZEdWd0xtUnZibVVwSUh0Y2JpQWdJQ0FnSUdGall5QTlJSGhtV3lkQVFIUnlZVzV6WkhWalpYSXZjM1JsY0NkZEtHRmpZeXdnYzNSbGNDNTJZV3gxWlNrN1hHNGdJQ0FnSUNCcFppQW9ZV05qSUNZbUlHRmpZMXNuUUVCMGNtRnVjMlIxWTJWeUwzSmxaSFZqWldRblhTa2dlMXh1SUNBZ0lDQWdJQ0JoWTJNZ1BTQmhZMk5iSjBCQWRISmhibk5rZFdObGNpOTJZV3gxWlNkZE8xeHVJQ0FnSUNBZ0lDQmljbVZoYXp0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0FnSUhOMFpYQWdQU0JwZEdWeUxtNWxlSFFvS1R0Y2JpQWdJQ0I5WEc0Z0lDQWdjbVYwZFhKdUlIaG1XeWRBUUhSeVlXNXpaSFZqWlhJdmNtVnpkV3gwSjEwb1lXTmpLVHRjYmlBZ2ZWeHVYRzRnSUdaMWJtTjBhVzl1SUY5dFpYUm9iMlJTWldSMVkyVW9lR1lzSUdGall5d2diMkpxS1NCN1hHNGdJQ0FnY21WMGRYSnVJSGhtV3lkQVFIUnlZVzV6WkhWalpYSXZjbVZ6ZFd4MEoxMG9iMkpxTG5KbFpIVmpaU2hpYVc1a0tIaG1XeWRBUUhSeVlXNXpaSFZqWlhJdmMzUmxjQ2RkTENCNFppa3NJR0ZqWXlrcE8xeHVJQ0I5WEc1Y2JpQWdkbUZ5SUhONWJVbDBaWEpoZEc5eUlEMGdLSFI1Y0dWdlppQlRlVzFpYjJ3Z0lUMDlJQ2QxYm1SbFptbHVaV1FuS1NBL0lGTjViV0p2YkM1cGRHVnlZWFJ2Y2lBNklDZEFRR2wwWlhKaGRHOXlKenRjYmlBZ2NtVjBkWEp1SUdaMWJtTjBhVzl1SUY5eVpXUjFZMlVvWm00c0lHRmpZeXdnYkdsemRDa2dlMXh1SUNBZ0lHbG1JQ2gwZVhCbGIyWWdabTRnUFQwOUlDZG1kVzVqZEdsdmJpY3BJSHRjYmlBZ0lDQWdJR1p1SUQwZ1gzaDNjbUZ3S0dadUtUdGNiaUFnSUNCOVhHNGdJQ0FnYVdZZ0tHbHpRWEp5WVhsTWFXdGxLR3hwYzNRcEtTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z1gyRnljbUY1VW1Wa2RXTmxLR1p1TENCaFkyTXNJR3hwYzNRcE8xeHVJQ0FnSUgxY2JpQWdJQ0JwWmlBb2RIbHdaVzltSUd4cGMzUXVjbVZrZFdObElEMDlQU0FuWm5WdVkzUnBiMjRuS1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnWDIxbGRHaHZaRkpsWkhWalpTaG1iaXdnWVdOakxDQnNhWE4wS1R0Y2JpQWdJQ0I5WEc0Z0lDQWdhV1lnS0d4cGMzUmJjM2x0U1hSbGNtRjBiM0pkSUNFOUlHNTFiR3dwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUJmYVhSbGNtRmliR1ZTWldSMVkyVW9abTRzSUdGall5d2diR2x6ZEZ0emVXMUpkR1Z5WVhSdmNsMG9LU2s3WEc0Z0lDQWdmVnh1SUNBZ0lHbG1JQ2gwZVhCbGIyWWdiR2x6ZEM1dVpYaDBJRDA5UFNBblpuVnVZM1JwYjI0bktTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z1gybDBaWEpoWW14bFVtVmtkV05sS0dadUxDQmhZMk1zSUd4cGMzUXBPMXh1SUNBZ0lIMWNiaUFnSUNCMGFISnZkeUJ1WlhjZ1ZIbHdaVVZ5Y205eUtDZHlaV1IxWTJVNklHeHBjM1FnYlhWemRDQmlaU0JoY25KaGVTQnZjaUJwZEdWeVlXSnNaU2NwTzF4dUlDQjlPMXh1ZlNncEtUdGNibHh1WEc1Y2JpOHZMeTh2THk4dkx5OHZMeTh2THk4dkwxeHVMeThnVjBWQ1VFRkRTeUJHVDA5VVJWSmNiaTh2SUM0dmZpOXlZVzFrWVM5emNtTXZhVzUwWlhKdVlXd3ZYM0psWkhWalpTNXFjMXh1THk4Z2JXOWtkV3hsSUdsa0lEMGdNVFpjYmk4dklHMXZaSFZzWlNCamFIVnVhM01nUFNBd0lsMHNJbTFoY0hCcGJtZHpJam9pUVVGQlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdJaXdpYzI5MWNtTmxVbTl2ZENJNklpSjlcIik7XG5cbi8qKiovIH0pLFxuLyogMTcgKi9cbi8qIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKiBhbGwgZXhwb3J0cyB1c2VkICovXG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL34vcmFtZGEvc3JjL2tleXMuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5ldmFsKFwidmFyIF9jdXJyeTEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL2ludGVybmFsL19jdXJyeTEgKi8gMik7XFxudmFyIF9oYXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL2ludGVybmFsL19oYXMgKi8gMTUpO1xcbnZhciBfaXNBcmd1bWVudHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL2ludGVybmFsL19pc0FyZ3VtZW50cyAqLyAxNjIpO1xcblxcblxcbi8qKlxcbiAqIFJldHVybnMgYSBsaXN0IGNvbnRhaW5pbmcgdGhlIG5hbWVzIG9mIGFsbCB0aGUgZW51bWVyYWJsZSBvd24gcHJvcGVydGllcyBvZlxcbiAqIHRoZSBzdXBwbGllZCBvYmplY3QuXFxuICogTm90ZSB0aGF0IHRoZSBvcmRlciBvZiB0aGUgb3V0cHV0IGFycmF5IGlzIG5vdCBndWFyYW50ZWVkIHRvIGJlIGNvbnNpc3RlbnRcXG4gKiBhY3Jvc3MgZGlmZmVyZW50IEpTIHBsYXRmb3Jtcy5cXG4gKlxcbiAqIEBmdW5jXFxuICogQG1lbWJlck9mIFJcXG4gKiBAc2luY2UgdjAuMS4wXFxuICogQGNhdGVnb3J5IE9iamVjdFxcbiAqIEBzaWcge2s6IHZ9IC0+IFtrXVxcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmogVGhlIG9iamVjdCB0byBleHRyYWN0IHByb3BlcnRpZXMgZnJvbVxcbiAqIEByZXR1cm4ge0FycmF5fSBBbiBhcnJheSBvZiB0aGUgb2JqZWN0J3Mgb3duIHByb3BlcnRpZXMuXFxuICogQGV4YW1wbGVcXG4gKlxcbiAqICAgICAgUi5rZXlzKHthOiAxLCBiOiAyLCBjOiAzfSk7IC8vPT4gWydhJywgJ2InLCAnYyddXFxuICovXFxubW9kdWxlLmV4cG9ydHMgPSAoZnVuY3Rpb24oKSB7XFxuICAvLyBjb3ZlciBJRSA8IDkga2V5cyBpc3N1ZXNcXG4gIHZhciBoYXNFbnVtQnVnID0gISh7dG9TdHJpbmc6IG51bGx9KS5wcm9wZXJ0eUlzRW51bWVyYWJsZSgndG9TdHJpbmcnKTtcXG4gIHZhciBub25FbnVtZXJhYmxlUHJvcHMgPSBbJ2NvbnN0cnVjdG9yJywgJ3ZhbHVlT2YnLCAnaXNQcm90b3R5cGVPZicsICd0b1N0cmluZycsXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdwcm9wZXJ0eUlzRW51bWVyYWJsZScsICdoYXNPd25Qcm9wZXJ0eScsICd0b0xvY2FsZVN0cmluZyddO1xcbiAgLy8gU2FmYXJpIGJ1Z1xcbiAgdmFyIGhhc0FyZ3NFbnVtQnVnID0gKGZ1bmN0aW9uKCkge1xcbiAgICAndXNlIHN0cmljdCc7XFxuICAgIHJldHVybiBhcmd1bWVudHMucHJvcGVydHlJc0VudW1lcmFibGUoJ2xlbmd0aCcpO1xcbiAgfSgpKTtcXG5cXG4gIHZhciBjb250YWlucyA9IGZ1bmN0aW9uIGNvbnRhaW5zKGxpc3QsIGl0ZW0pIHtcXG4gICAgdmFyIGlkeCA9IDA7XFxuICAgIHdoaWxlIChpZHggPCBsaXN0Lmxlbmd0aCkge1xcbiAgICAgIGlmIChsaXN0W2lkeF0gPT09IGl0ZW0pIHtcXG4gICAgICAgIHJldHVybiB0cnVlO1xcbiAgICAgIH1cXG4gICAgICBpZHggKz0gMTtcXG4gICAgfVxcbiAgICByZXR1cm4gZmFsc2U7XFxuICB9O1xcblxcbiAgcmV0dXJuIHR5cGVvZiBPYmplY3Qua2V5cyA9PT0gJ2Z1bmN0aW9uJyAmJiAhaGFzQXJnc0VudW1CdWcgP1xcbiAgICBfY3VycnkxKGZ1bmN0aW9uIGtleXMob2JqKSB7XFxuICAgICAgcmV0dXJuIE9iamVjdChvYmopICE9PSBvYmogPyBbXSA6IE9iamVjdC5rZXlzKG9iaik7XFxuICAgIH0pIDpcXG4gICAgX2N1cnJ5MShmdW5jdGlvbiBrZXlzKG9iaikge1xcbiAgICAgIGlmIChPYmplY3Qob2JqKSAhPT0gb2JqKSB7XFxuICAgICAgICByZXR1cm4gW107XFxuICAgICAgfVxcbiAgICAgIHZhciBwcm9wLCBuSWR4O1xcbiAgICAgIHZhciBrcyA9IFtdO1xcbiAgICAgIHZhciBjaGVja0FyZ3NMZW5ndGggPSBoYXNBcmdzRW51bUJ1ZyAmJiBfaXNBcmd1bWVudHMob2JqKTtcXG4gICAgICBmb3IgKHByb3AgaW4gb2JqKSB7XFxuICAgICAgICBpZiAoX2hhcyhwcm9wLCBvYmopICYmICghY2hlY2tBcmdzTGVuZ3RoIHx8IHByb3AgIT09ICdsZW5ndGgnKSkge1xcbiAgICAgICAgICBrc1trcy5sZW5ndGhdID0gcHJvcDtcXG4gICAgICAgIH1cXG4gICAgICB9XFxuICAgICAgaWYgKGhhc0VudW1CdWcpIHtcXG4gICAgICAgIG5JZHggPSBub25FbnVtZXJhYmxlUHJvcHMubGVuZ3RoIC0gMTtcXG4gICAgICAgIHdoaWxlIChuSWR4ID49IDApIHtcXG4gICAgICAgICAgcHJvcCA9IG5vbkVudW1lcmFibGVQcm9wc1tuSWR4XTtcXG4gICAgICAgICAgaWYgKF9oYXMocHJvcCwgb2JqKSAmJiAhY29udGFpbnMoa3MsIHByb3ApKSB7XFxuICAgICAgICAgICAga3Nba3MubGVuZ3RoXSA9IHByb3A7XFxuICAgICAgICAgIH1cXG4gICAgICAgICAgbklkeCAtPSAxO1xcbiAgICAgICAgfVxcbiAgICAgIH1cXG4gICAgICByZXR1cm4ga3M7XFxuICAgIH0pO1xcbn0oKSk7XFxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lNVGN1YW5NaUxDSnpiM1Z5WTJWeklqcGJJbmRsWW5CaFkyczZMeTh2TGk5K0wzSmhiV1JoTDNOeVl5OXJaWGx6TG1welB6RTBPRGdpWFN3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaWRtRnlJRjlqZFhKeWVURWdQU0J5WlhGMWFYSmxLQ2N1TDJsdWRHVnlibUZzTDE5amRYSnllVEVuS1R0Y2JuWmhjaUJmYUdGeklEMGdjbVZ4ZFdseVpTZ25MaTlwYm5SbGNtNWhiQzlmYUdGekp5azdYRzUyWVhJZ1gybHpRWEpuZFcxbGJuUnpJRDBnY21WeGRXbHlaU2duTGk5cGJuUmxjbTVoYkM5ZmFYTkJjbWQxYldWdWRITW5LVHRjYmx4dVhHNHZLaXBjYmlBcUlGSmxkSFZ5Ym5NZ1lTQnNhWE4wSUdOdmJuUmhhVzVwYm1jZ2RHaGxJRzVoYldWeklHOW1JR0ZzYkNCMGFHVWdaVzUxYldWeVlXSnNaU0J2ZDI0Z2NISnZjR1Z5ZEdsbGN5QnZabHh1SUNvZ2RHaGxJSE4xY0hCc2FXVmtJRzlpYW1WamRDNWNiaUFxSUU1dmRHVWdkR2hoZENCMGFHVWdiM0prWlhJZ2IyWWdkR2hsSUc5MWRIQjFkQ0JoY25KaGVTQnBjeUJ1YjNRZ1ozVmhjbUZ1ZEdWbFpDQjBieUJpWlNCamIyNXphWE4wWlc1MFhHNGdLaUJoWTNKdmMzTWdaR2xtWm1WeVpXNTBJRXBUSUhCc1lYUm1iM0p0Y3k1Y2JpQXFYRzRnS2lCQVpuVnVZMXh1SUNvZ1FHMWxiV0psY2s5bUlGSmNiaUFxSUVCemFXNWpaU0IyTUM0eExqQmNiaUFxSUVCallYUmxaMjl5ZVNCUFltcGxZM1JjYmlBcUlFQnphV2NnZTJzNklIWjlJQzArSUZ0clhWeHVJQ29nUUhCaGNtRnRJSHRQWW1wbFkzUjlJRzlpYWlCVWFHVWdiMkpxWldOMElIUnZJR1Y0ZEhKaFkzUWdjSEp2Y0dWeWRHbGxjeUJtY205dFhHNGdLaUJBY21WMGRYSnVJSHRCY25KaGVYMGdRVzRnWVhKeVlYa2diMllnZEdobElHOWlhbVZqZENkeklHOTNiaUJ3Y205d1pYSjBhV1Z6TGx4dUlDb2dRR1Y0WVcxd2JHVmNiaUFxWEc0Z0tpQWdJQ0FnSUZJdWEyVjVjeWg3WVRvZ01Td2dZam9nTWl3Z1l6b2dNMzBwT3lBdkx6MCtJRnNuWVNjc0lDZGlKeXdnSjJNblhWeHVJQ292WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUNobWRXNWpkR2x2YmlncElIdGNiaUFnTHk4Z1kyOTJaWElnU1VVZ1BDQTVJR3RsZVhNZ2FYTnpkV1Z6WEc0Z0lIWmhjaUJvWVhORmJuVnRRblZuSUQwZ0lTaDdkRzlUZEhKcGJtYzZJRzUxYkd4OUtTNXdjbTl3WlhKMGVVbHpSVzUxYldWeVlXSnNaU2duZEc5VGRISnBibWNuS1R0Y2JpQWdkbUZ5SUc1dmJrVnVkVzFsY21GaWJHVlFjbTl3Y3lBOUlGc25ZMjl1YzNSeWRXTjBiM0luTENBbmRtRnNkV1ZQWmljc0lDZHBjMUJ5YjNSdmRIbHdaVTltSnl3Z0ozUnZVM1J5YVc1bkp5eGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FuY0hKdmNHVnlkSGxKYzBWdWRXMWxjbUZpYkdVbkxDQW5hR0Z6VDNkdVVISnZjR1Z5ZEhrbkxDQW5kRzlNYjJOaGJHVlRkSEpwYm1jblhUdGNiaUFnTHk4Z1UyRm1ZWEpwSUdKMVoxeHVJQ0IyWVhJZ2FHRnpRWEpuYzBWdWRXMUNkV2NnUFNBb1puVnVZM1JwYjI0b0tTQjdYRzRnSUNBZ0ozVnpaU0J6ZEhKcFkzUW5PMXh1SUNBZ0lISmxkSFZ5YmlCaGNtZDFiV1Z1ZEhNdWNISnZjR1Z5ZEhsSmMwVnVkVzFsY21GaWJHVW9KMnhsYm1kMGFDY3BPMXh1SUNCOUtDa3BPMXh1WEc0Z0lIWmhjaUJqYjI1MFlXbHVjeUE5SUdaMWJtTjBhVzl1SUdOdmJuUmhhVzV6S0d4cGMzUXNJR2wwWlcwcElIdGNiaUFnSUNCMllYSWdhV1I0SUQwZ01EdGNiaUFnSUNCM2FHbHNaU0FvYVdSNElEd2diR2x6ZEM1c1pXNW5kR2dwSUh0Y2JpQWdJQ0FnSUdsbUlDaHNhWE4wVzJsa2VGMGdQVDA5SUdsMFpXMHBJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJ5ZFdVN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnSUNCcFpIZ2dLejBnTVR0Y2JpQWdJQ0I5WEc0Z0lDQWdjbVYwZFhKdUlHWmhiSE5sTzF4dUlDQjlPMXh1WEc0Z0lISmxkSFZ5YmlCMGVYQmxiMllnVDJKcVpXTjBMbXRsZVhNZ1BUMDlJQ2RtZFc1amRHbHZiaWNnSmlZZ0lXaGhjMEZ5WjNORmJuVnRRblZuSUQ5Y2JpQWdJQ0JmWTNWeWNua3hLR1oxYm1OMGFXOXVJR3RsZVhNb2IySnFLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdUMkpxWldOMEtHOWlhaWtnSVQwOUlHOWlhaUEvSUZ0ZElEb2dUMkpxWldOMExtdGxlWE1vYjJKcUtUdGNiaUFnSUNCOUtTQTZYRzRnSUNBZ1gyTjFjbko1TVNobWRXNWpkR2x2YmlCclpYbHpLRzlpYWlrZ2UxeHVJQ0FnSUNBZ2FXWWdLRTlpYW1WamRDaHZZbW9wSUNFOVBTQnZZbW9wSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUZ0ZE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2RtRnlJSEJ5YjNBc0lHNUpaSGc3WEc0Z0lDQWdJQ0IyWVhJZ2EzTWdQU0JiWFR0Y2JpQWdJQ0FnSUhaaGNpQmphR1ZqYTBGeVozTk1aVzVuZEdnZ1BTQm9ZWE5CY21kelJXNTFiVUoxWnlBbUppQmZhWE5CY21kMWJXVnVkSE1vYjJKcUtUdGNiaUFnSUNBZ0lHWnZjaUFvY0hKdmNDQnBiaUJ2WW1vcElIdGNiaUFnSUNBZ0lDQWdhV1lnS0Y5b1lYTW9jSEp2Y0N3Z2IySnFLU0FtSmlBb0lXTm9aV05yUVhKbmMweGxibWQwYUNCOGZDQndjbTl3SUNFOVBTQW5iR1Z1WjNSb0p5a3BJSHRjYmlBZ0lDQWdJQ0FnSUNCcmMxdHJjeTVzWlc1bmRHaGRJRDBnY0hKdmNEdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdmVnh1SUNBZ0lDQWdhV1lnS0doaGMwVnVkVzFDZFdjcElIdGNiaUFnSUNBZ0lDQWdia2xrZUNBOUlHNXZia1Z1ZFcxbGNtRmliR1ZRY205d2N5NXNaVzVuZEdnZ0xTQXhPMXh1SUNBZ0lDQWdJQ0IzYUdsc1pTQW9ia2xrZUNBK1BTQXdLU0I3WEc0Z0lDQWdJQ0FnSUNBZ2NISnZjQ0E5SUc1dmJrVnVkVzFsY21GaWJHVlFjbTl3YzF0dVNXUjRYVHRjYmlBZ0lDQWdJQ0FnSUNCcFppQW9YMmhoY3lod2NtOXdMQ0J2WW1vcElDWW1JQ0ZqYjI1MFlXbHVjeWhyY3l3Z2NISnZjQ2twSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR3R6VzJ0ekxteGxibWQwYUYwZ1BTQndjbTl3TzF4dUlDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0J1U1dSNElDMDlJREU3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUgxY2JpQWdJQ0FnSUhKbGRIVnliaUJyY3p0Y2JpQWdJQ0I5S1R0Y2JuMG9LU2s3WEc1Y2JseHVYRzR2THk4dkx5OHZMeTh2THk4dkx5OHZMeTljYmk4dklGZEZRbEJCUTBzZ1JrOVBWRVZTWEc0dkx5QXVMMzR2Y21GdFpHRXZjM0pqTDJ0bGVYTXVhbk5jYmk4dklHMXZaSFZzWlNCcFpDQTlJREUzWEc0dkx5QnRiMlIxYkdVZ1kyaDFibXR6SUQwZ01DSmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdJaXdpYzI5MWNtTmxVbTl2ZENJNklpSjlcIik7XG5cbi8qKiovIH0pLFxuLyogMTggKi9cbi8qIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKiBhbGwgZXhwb3J0cyB1c2VkICovXG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL3V0aWxzL3JlZmVyZW5jZS1oZWxwZXJzLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbmV2YWwoXCJcXG5cXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXFxcIl9fZXNNb2R1bGVcXFwiLCB7XFxuICB2YWx1ZTogdHJ1ZVxcbn0pO1xcbmV4cG9ydHMuZ2V0Q29sb3JGbiA9IGV4cG9ydHMuZ2V0QmxlbmRGbiA9IGV4cG9ydHMuZ2V0RXhlY3V0ZWRGbiA9IGV4cG9ydHMuZ2V0RWl0aGVyUHJvcCA9IGV4cG9ydHMuZ2V0UHJvcGVydHlPckRlZkZuID0gZXhwb3J0cy5nZXRQcm9wZXJ0eUZuU2FmZSA9IGV4cG9ydHMuZ2V0UHJvcGVydHlGbiA9IGV4cG9ydHMuZ2V0UHJvcE9yRGVmID0gZXhwb3J0cy5nZXRQcm9wID0gZXhwb3J0cy5nZXREZWZQcm9wID0gZXhwb3J0cy5nZW5lcmF0ZURlZmF1bHRGcm9tUmVmID0gdW5kZWZpbmVkO1xcblxcbnZhciBfYXBwbHlTcGVjID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgcmFtZGEvc3JjL2FwcGx5U3BlYyAqLyA1NSk7XFxuXFxudmFyIF9hcHBseVNwZWMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfYXBwbHlTcGVjKTtcXG5cXG52YXIgX2FwcGx5ID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgcmFtZGEvc3JjL2FwcGx5ICovIDU0KTtcXG5cXG52YXIgX2FwcGx5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2FwcGx5KTtcXG5cXG52YXIgX3ZhbHVlcyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIHJhbWRhL3NyYy92YWx1ZXMgKi8gNjYpO1xcblxcbnZhciBfdmFsdWVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3ZhbHVlcyk7XFxuXFxudmFyIF9kZWZhdWx0VG8gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISByYW1kYS9zcmMvZGVmYXVsdFRvICovIDE0NSk7XFxuXFxudmFyIF9kZWZhdWx0VG8yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZGVmYXVsdFRvKTtcXG5cXG52YXIgX2lmRWxzZSA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIHJhbWRhL3NyYy9pZkVsc2UgKi8gMTUwKTtcXG5cXG52YXIgX2lmRWxzZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pZkVsc2UpO1xcblxcbnZhciBfcHJvcCA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIHJhbWRhL3NyYy9wcm9wICovIDY1KTtcXG5cXG52YXIgX3Byb3AyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcCk7XFxuXFxudmFyIF9jb21wb3NlID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgcmFtZGEvc3JjL2NvbXBvc2UgKi8gMTMpO1xcblxcbnZhciBfY29tcG9zZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jb21wb3NlKTtcXG5cXG52YXIgX2VpdGhlciA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIHJhbWRhL3NyYy9laXRoZXIgKi8gMTQ2KTtcXG5cXG52YXIgX2VpdGhlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9laXRoZXIpO1xcblxcbnZhciBfY3VycnkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISByYW1kYS9zcmMvY3VycnkgKi8gMjQpO1xcblxcbnZhciBfY3VycnkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3VycnkpO1xcblxcbnZhciBfdXRpbHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi91dGlscy91dGlscyAqLyAzOCk7XFxuXFxudmFyIF91dGlsczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF91dGlscyk7XFxuXFxudmFyIF9yZWZlcmVuY2UgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi91dGlscy9yZWZlcmVuY2UgKi8gOSk7XFxuXFxudmFyIF9yZWZlcmVuY2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVmZXJlbmNlKTtcXG5cXG52YXIgX2NvbG9ycyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL3N0eWxlL2NvbG9ycyAqLyA3Nyk7XFxuXFxudmFyIF9jb2xvcnMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY29sb3JzKTtcXG5cXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxcblxcbi8qXFxuICBJTlRFUk5BTCBSRUZFUkVOQ0UgRlVOQ1RJT05TXFxuICovXFxuXFxudmFyIGN1cnJ5Q29tcCA9IF91dGlsczIuZGVmYXVsdC5jdXJyeUNvbXBvc2UzO1xcblxcbi8qXFxuICBSRUZFUkVOQ0UgSEVMUEVSXFxuICovXFxuXFxudmFyIGdlbmVyYXRlRGVmYXVsdEZyb21SZWYgPSBmdW5jdGlvbiBnZW5lcmF0ZURlZmF1bHRGcm9tUmVmKFJlZiwgcHJvcCkge1xcbiAgcmV0dXJuIHsganM6IF91dGlsczIuZGVmYXVsdC5nZW5lcmF0ZURlZmF1bHQoJ1xcXCInICsgUmVmW3Byb3BdWydkZWZhdWx0LXZhbHVlJ10gKyAnXFxcIicpIH07XFxufTtcXG5cXG52YXIgZ2V0RGVmUHJvcCA9ICgwLCBfY3VycnkyLmRlZmF1bHQpKGZ1bmN0aW9uIChwcm9wLCByZWYpIHtcXG4gIHJldHVybiBnZW5lcmF0ZURlZmF1bHRGcm9tUmVmKHJlZiwgcHJvcCk7XFxufSk7XFxuXFxuLy8gcmVmID0gJ3N0cm9rZS1vcGFjaXR5JyAtPiBnZXQge3N0cm9rZS1vcGFjaXR5OiB7Y3NzOiAnbGluZS1vcGFjaXR5J319IC0+IGxpbmUtb3BhY2l0eTtcXG4vLyByZWZbJ2xpbmUtb3BhY2l0eSddO1xcbnZhciBnZXRQcm9wID0gKDAsIF9jdXJyeTIuZGVmYXVsdCkoZnVuY3Rpb24gKHByb3AsIHJlZiwgYzNzcykge1xcbiAgcmV0dXJuIF91dGlsczIuZGVmYXVsdC5waWNrKF91dGlsczIuZGVmYXVsdC5waWNrKHByb3AgKyAnLmNzcycsIHJlZiksIGMzc3MpO1xcbn0pO1xcblxcbnZhciBnZXRQcm9wT3JEZWYgPSAoMCwgX2VpdGhlcjIuZGVmYXVsdCkoZ2V0UHJvcCwgZ2V0RGVmUHJvcCk7XFxuXFxudmFyIGdldFByb3BlcnR5Rm4gPSBjdXJyeUNvbXAoKDAsIF9jb21wb3NlMi5kZWZhdWx0KShfdXRpbHMyLmRlZmF1bHQuYnVpbGRDQ1NTRm4sICgwLCBfcHJvcDIuZGVmYXVsdCkoJ2pzJyksIC8vIGdldCBwcm9wZXJ0eSBqcyBmcm9tIG9iamVjdFxcbmdldFByb3ApKTtcXG5cXG52YXIgZ2V0UHJvcGVydHlGblNhZmUgPSAoMCwgX2lmRWxzZTIuZGVmYXVsdCkoZ2V0UHJvcCwgZ2V0UHJvcGVydHlGbiwgZnVuY3Rpb24gKCkge1xcbiAgcmV0dXJuIHZvaWQgMDtcXG59KTtcXG5cXG52YXIgZ2V0UHJvcGVydHlPckRlZkZuID0gY3VycnlDb21wKCgwLCBfY29tcG9zZTIuZGVmYXVsdCkoX3V0aWxzMi5kZWZhdWx0LmJ1aWxkQ0NTU0ZuLCAoMCwgX3Byb3AyLmRlZmF1bHQpKCdqcycpLCBnZXRQcm9wT3JEZWYpKTtcXG5cXG52YXIgZ2V0RWl0aGVyUHJvcCA9IGZ1bmN0aW9uIGdldEVpdGhlclByb3AocHJvcEEsIHByb3BCLCByZWYpIHtcXG4gIHJldHVybiAoMCwgX2VpdGhlcjIuZGVmYXVsdCkoZ2V0UHJvcGVydHlGblNhZmUocHJvcEEsIHJlZiksIGdldFByb3BlcnR5T3JEZWZGbihwcm9wQiwgcmVmKSk7XFxufTtcXG5cXG52YXIgZ2V0RXhlY3V0ZWRGbiA9IGN1cnJ5Q29tcCgoMCwgX2NvbXBvc2UyLmRlZmF1bHQpKF91dGlsczIuZGVmYXVsdC5idWlsZEFuZEV4ZWN1dGVGbiwgKDAsIF9wcm9wMi5kZWZhdWx0KSgnanMnKSwgZ2V0UHJvcE9yRGVmKSk7XFxuXFxudmFyIGdldEJsZW5kRm4gPSAoMCwgX2N1cnJ5Mi5kZWZhdWx0KShmdW5jdGlvbiAocmVmLCBjM3NzKSB7XFxuICByZXR1cm4gKDAsIF9jb21wb3NlMi5kZWZhdWx0KSgoMCwgX2RlZmF1bHRUbzIuZGVmYXVsdCkoJ292ZXJsYXknKSwgX3JlZmVyZW5jZTIuZGVmYXVsdC5jaGVja1R5cGUocmVmWydjb21wLW9wJ10pLCBnZXRFeGVjdXRlZEZuKCdjb21wLW9wJykpKHJlZiwgYzNzcyk7XFxufSk7XFxuXFxudmFyIGdldENvbG9yRm4gPSBmdW5jdGlvbiBnZXRDb2xvckZuKGZpbGwsIGFscGhhKSB7XFxuICByZXR1cm4gKDAsIF9jb21wb3NlMi5kZWZhdWx0KSgoMCwgX2FwcGx5Mi5kZWZhdWx0KShfY29sb3JzMi5kZWZhdWx0LmdldEFscGhhQ29sb3IpLCBfdmFsdWVzMi5kZWZhdWx0LCAoMCwgX2FwcGx5U3BlYzIuZGVmYXVsdCkoe1xcbiAgICBmaWxsOiBmaWxsLFxcbiAgICBhbHBoYTogYWxwaGFcXG4gIH0pKTtcXG59O1xcblxcbmV4cG9ydHMuZ2VuZXJhdGVEZWZhdWx0RnJvbVJlZiA9IGdlbmVyYXRlRGVmYXVsdEZyb21SZWY7XFxuZXhwb3J0cy5nZXREZWZQcm9wID0gZ2V0RGVmUHJvcDtcXG5leHBvcnRzLmdldFByb3AgPSBnZXRQcm9wO1xcbmV4cG9ydHMuZ2V0UHJvcE9yRGVmID0gZ2V0UHJvcE9yRGVmO1xcbmV4cG9ydHMuZ2V0UHJvcGVydHlGbiA9IGdldFByb3BlcnR5Rm47XFxuZXhwb3J0cy5nZXRQcm9wZXJ0eUZuU2FmZSA9IGdldFByb3BlcnR5Rm5TYWZlO1xcbmV4cG9ydHMuZ2V0UHJvcGVydHlPckRlZkZuID0gZ2V0UHJvcGVydHlPckRlZkZuO1xcbmV4cG9ydHMuZ2V0RWl0aGVyUHJvcCA9IGdldEVpdGhlclByb3A7XFxuZXhwb3J0cy5nZXRFeGVjdXRlZEZuID0gZ2V0RXhlY3V0ZWRGbjtcXG5leHBvcnRzLmdldEJsZW5kRm4gPSBnZXRCbGVuZEZuO1xcbmV4cG9ydHMuZ2V0Q29sb3JGbiA9IGdldENvbG9yRm47Ly8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lNVGd1YW5NaUxDSnpiM1Z5WTJWeklqcGJJbmRsWW5CaFkyczZMeTh2YzNKakwzVjBhV3h6TDNKbFptVnlaVzVqWlMxb1pXeHdaWEp6TG1welAyTmhOamtpWFN3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaWFXMXdiM0owSUhzZ1kyOXRjRzl6WlN3Z1kzVnljbmtzSUdWcGRHaGxjaXdnY0hKdmNDd2daR1ZtWVhWc2RGUnZMQ0JoY0hCc2VTd2dkbUZzZFdWekxDQnBaa1ZzYzJVc0lHRndjR3g1VTNCbFl5QjlJR1p5YjIwZ0ozSmhiV1JoSnp0Y2JtbHRjRzl5ZENCVmRHbHNjeUJtY205dElDY3VMaTkxZEdsc2N5OTFkR2xzY3ljN1hHNXBiWEJ2Y25RZ1ZHRnVaM0poYlZKbFptVnlaVzVqWlNCbWNtOXRJQ2N1TGk5MWRHbHNjeTl5WldabGNtVnVZMlVuTzF4dWFXMXdiM0owSUVOdmJHOXljeUJtY205dElDY3VMaTl6ZEhsc1pTOWpiMnh2Y25Nbk8xeHVYRzVjYmk4cVhHNGdJRWxPVkVWU1RrRk1JRkpGUmtWU1JVNURSU0JHVlU1RFZFbFBUbE5jYmlBcUwxeHVYRzVqYjI1emRDQmpkWEp5ZVVOdmJYQWdQU0JWZEdsc2N5NWpkWEp5ZVVOdmJYQnZjMlV6TzF4dVhHNHZLbHh1SUNCU1JVWkZVa1ZPUTBVZ1NFVk1VRVZTWEc0Z0tpOWNibHh1WTI5dWMzUWdaMlZ1WlhKaGRHVkVaV1poZFd4MFJuSnZiVkpsWmlBOUlHWjFibU4wYVc5dUtGSmxaaXdnY0hKdmNDa2dlMXh1WEhSeVpYUjFjbTRnZXlCcWN6b2dWWFJwYkhNdVoyVnVaWEpoZEdWRVpXWmhkV3gwS0dCY0lpUjdVbVZtVzNCeWIzQmRXeWRrWldaaGRXeDBMWFpoYkhWbEoxMTlYQ0pnS1NCOU8xeHVmVHRjYmx4dVkyOXVjM1FnWjJWMFJHVm1VSEp2Y0NBOUlHTjFjbko1S0Nod2NtOXdMQ0J5WldZcElEMCtJSHRjYmlBZ2NtVjBkWEp1SUdkbGJtVnlZWFJsUkdWbVlYVnNkRVp5YjIxU1pXWW9jbVZtTENCd2NtOXdLVHRjYm4wcE8xeHVYRzR2THlCeVpXWWdQU0FuYzNSeWIydGxMVzl3WVdOcGRIa25JQzArSUdkbGRDQjdjM1J5YjJ0bExXOXdZV05wZEhrNklIdGpjM002SUNkc2FXNWxMVzl3WVdOcGRIa25mWDBnTFQ0Z2JHbHVaUzF2Y0dGamFYUjVPMXh1THk4Z2NtVm1XeWRzYVc1bExXOXdZV05wZEhrblhUdGNibU52Ym5OMElHZGxkRkJ5YjNBZ1BTQmpkWEp5ZVNnb2NISnZjQ3dnY21WbUxDQmpNM056S1NBOVBpQjdYRzRnSUhKbGRIVnliaUJWZEdsc2N5NXdhV05yS0ZWMGFXeHpMbkJwWTJzb2NISnZjQ0FySUNjdVkzTnpKeXdnY21WbUtTd2dZek56Y3lrN1hHNTlLVHRjYmx4dVkyOXVjM1FnWjJWMFVISnZjRTl5UkdWbUlEMGdaV2wwYUdWeUtHZGxkRkJ5YjNBc0lHZGxkRVJsWmxCeWIzQXBPMXh1WEc1Y2JtTnZibk4wSUdkbGRGQnliM0JsY25SNVJtNGdQU0JqZFhKeWVVTnZiWEFvWTI5dGNHOXpaU2hjYmlBZ1ZYUnBiSE11WW5WcGJHUkRRMU5UUm00c1hHNGdJSEJ5YjNBb0oycHpKeWtzSUM4dklHZGxkQ0J3Y205d1pYSjBlU0JxY3lCbWNtOXRJRzlpYW1WamRGeHVJQ0JuWlhSUWNtOXdYRzRwS1R0Y2JseHVZMjl1YzNRZ1oyVjBVSEp2Y0dWeWRIbEdibE5oWm1VZ1BTQnBaa1ZzYzJVb1hHNGdJR2RsZEZCeWIzQXNYRzRnSUdkbGRGQnliM0JsY25SNVJtNHNYRzRnSUNncElEMCtJSFp2YVdRZ01GeHVLVHRjYmx4dVkyOXVjM1FnWjJWMFVISnZjR1Z5ZEhsUGNrUmxaa1p1SUQwZ1kzVnljbmxEYjIxd0tHTnZiWEJ2YzJVb1hHNGdJRlYwYVd4ekxtSjFhV3hrUTBOVFUwWnVMRnh1SUNCd2NtOXdLQ2RxY3ljcExGeHVJQ0JuWlhSUWNtOXdUM0pFWldaY2Jpa3BPMXh1WEc1amIyNXpkQ0JuWlhSRmFYUm9aWEpRY205d0lEMGdLSEJ5YjNCQkxDQndjbTl3UWl3Z2NtVm1LU0E5UGlCbGFYUm9aWElvWEc0Z0lHZGxkRkJ5YjNCbGNuUjVSbTVUWVdabEtIQnliM0JCTENCeVpXWXBMRnh1SUNCblpYUlFjbTl3WlhKMGVVOXlSR1ZtUm00b2NISnZjRUlzSUhKbFppbGNiaWs3WEc1Y2JtTnZibk4wSUdkbGRFVjRaV04xZEdWa1JtNGdQU0JqZFhKeWVVTnZiWEFvWTI5dGNHOXpaU2hjYmlBZ1ZYUnBiSE11WW5WcGJHUkJibVJGZUdWamRYUmxSbTRzWEc0Z0lIQnliM0FvSjJwekp5a3NYRzRnSUdkbGRGQnliM0JQY2tSbFpseHVLU2s3WEc1Y2JtTnZibk4wSUdkbGRFSnNaVzVrUm00Z1BTQmpkWEp5ZVNnb2NtVm1MQ0JqTTNOektTQTlQaUJqYjIxd2IzTmxLRnh1SUNCa1pXWmhkV3gwVkc4b0oyOTJaWEpzWVhrbktTeGNiaUFnVkdGdVozSmhiVkpsWm1WeVpXNWpaUzVqYUdWamExUjVjR1VvY21WbVd5ZGpiMjF3TFc5d0oxMHBMRnh1SUNCblpYUkZlR1ZqZFhSbFpFWnVLQ2RqYjIxd0xXOXdKeWxjYmlrb2NtVm1MQ0JqTTNOektTazdYRzVjYm1OdmJuTjBJR2RsZEVOdmJHOXlSbTRnUFNBb1ptbHNiQ3dnWVd4d2FHRXBJRDArSUh0Y2JpQWdjbVYwZFhKdUlHTnZiWEJ2YzJVb1hHNGdJQ0FnWVhCd2JIa29RMjlzYjNKekxtZGxkRUZzY0doaFEyOXNiM0lwTEZ4dUlDQWdJSFpoYkhWbGN5eGNiaUFnSUNCaGNIQnNlVk53WldNb2UxeHVJQ0FnSUNBZ1ptbHNiRG9nWm1sc2JDeGNiaUFnSUNBZ0lHRnNjR2hoT2lCaGJIQm9ZVnh1SUNBZ0lIMHBYRzRnSUNrN1hHNTlPMXh1WEc1bGVIQnZjblFnZTF4dUlDQm5aVzVsY21GMFpVUmxabUYxYkhSR2NtOXRVbVZtTEZ4dUlDQm5aWFJFWldaUWNtOXdMRnh1SUNCblpYUlFjbTl3TEZ4dUlDQm5aWFJRY205d1QzSkVaV1lzWEc0Z0lHZGxkRkJ5YjNCbGNuUjVSbTRzWEc0Z0lHZGxkRkJ5YjNCbGNuUjVSbTVUWVdabExGeHVJQ0JuWlhSUWNtOXdaWEowZVU5eVJHVm1SbTRzWEc0Z0lHZGxkRVZwZEdobGNsQnliM0FzWEc0Z0lHZGxkRVY0WldOMWRHVmtSbTRzWEc0Z0lHZGxkRUpzWlc1a1JtNHNYRzRnSUdkbGRFTnZiRzl5Um01Y2JuMDdYRzVjYmx4dVhHNHZMeUJYUlVKUVFVTkxJRVpQVDFSRlVpQXZMMXh1THk4Z2MzSmpMM1YwYVd4ekwzSmxabVZ5Wlc1alpTMW9aV3h3WlhKekxtcHpJbDBzSW0xaGNIQnBibWR6SWpvaU96czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3TzBGQlEwRTdRVUZEUVRzN08wRkJRVUU3UVVGRFFUczdPMEZCUVVFN1FVRkRRVHM3T3pzN1FVRkZRVHM3T3p0QlFVbEJPMEZCUTBFN1FVRkRRVHM3T3p0QlFVbEJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlJVRTdRVUZIUVR0QlFVTkJPMEZCUlVFN1FVRkhRVHRCUVVGQk8wRkJRMEU3UVVGRlFUdEJRVU5CTzBGQlMwRTdRVUZCUVR0QlFVRkJPMEZCUTBFN1FVRkpRVHRCUVVOQk8wRkJTMEU3UVVGQlFUdEJRVUZCTzBGQlEwRTdRVUZMUVR0QlFVTkJPMEZCU1VFN1FVRkRRVHRCUVVaQk8wRkJTMEU3UVVGRFFUdEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUluMD1cIik7XG5cbi8qKiovIH0pLFxuLyogMTkgKi9cbi8qIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKiBhbGwgZXhwb3J0cyB1c2VkICovXG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fYW4tb2JqZWN0LmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5ldmFsKFwidmFyIGlzT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9faXMtb2JqZWN0ICovIDMwKTtcXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXtcXG4gIGlmKCFpc09iamVjdChpdCkpdGhyb3cgVHlwZUVycm9yKGl0ICsgJyBpcyBub3QgYW4gb2JqZWN0IScpO1xcbiAgcmV0dXJuIGl0O1xcbn07Ly8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lNVGt1YW5NaUxDSnpiM1Z5WTJWeklqcGJJbmRsWW5CaFkyczZMeTh2TGk5K0wyTnZjbVV0YW5NdmJHbGljbUZ5ZVM5dGIyUjFiR1Z6TDE5aGJpMXZZbXBsWTNRdWFuTS9NR1JoTXlKZExDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SjJZWElnYVhOUFltcGxZM1FnUFNCeVpYRjFhWEpsS0NjdUwxOXBjeTF2WW1wbFkzUW5LVHRjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnWm5WdVkzUnBiMjRvYVhRcGUxeHVJQ0JwWmlnaGFYTlBZbXBsWTNRb2FYUXBLWFJvY205M0lGUjVjR1ZGY25KdmNpaHBkQ0FySUNjZ2FYTWdibTkwSUdGdUlHOWlhbVZqZENFbktUdGNiaUFnY21WMGRYSnVJR2wwTzF4dWZUdGNibHh1WEc0dkx5OHZMeTh2THk4dkx5OHZMeTh2THk5Y2JpOHZJRmRGUWxCQlEwc2dSazlQVkVWU1hHNHZMeUF1TDM0dlkyOXlaUzFxY3k5c2FXSnlZWEo1TDIxdlpIVnNaWE12WDJGdUxXOWlhbVZqZEM1cWMxeHVMeThnYlc5a2RXeGxJR2xrSUQwZ01UbGNiaTh2SUcxdlpIVnNaU0JqYUhWdWEzTWdQU0F3SWwwc0ltMWhjSEJwYm1keklqb2lRVUZCUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQklpd2ljMjkxY21ObFVtOXZkQ0k2SWlKOVwiKTtcblxuLyoqKi8gfSksXG4vKiAyMCAqL1xuLyogbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9cbi8qIGFsbCBleHBvcnRzIHVzZWQgKi9cbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2Rlc2NyaXB0b3JzLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbmV2YWwoXCIvLyBUaGFuaydzIElFOCBmb3IgaGlzIGZ1bm55IGRlZmluZVByb3BlcnR5XFxubW9kdWxlLmV4cG9ydHMgPSAhX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9fZmFpbHMgKi8gNDYpKGZ1bmN0aW9uKCl7XFxuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LCAnYScsIHtnZXQ6IGZ1bmN0aW9uKCl7IHJldHVybiA3OyB9fSkuYSAhPSA3O1xcbn0pOy8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pTWpBdWFuTWlMQ0p6YjNWeVkyVnpJanBiSW5kbFluQmhZMnM2THk4dkxpOStMMk52Y21VdGFuTXZiR2xpY21GeWVTOXRiMlIxYkdWekwxOWtaWE5qY21sd2RHOXljeTVxY3o4M01EVXhJbDBzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSWk4dklGUm9ZVzVySjNNZ1NVVTRJR1p2Y2lCb2FYTWdablZ1Ym5rZ1pHVm1hVzVsVUhKdmNHVnlkSGxjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnSVhKbGNYVnBjbVVvSnk0dlgyWmhhV3h6Snlrb1puVnVZM1JwYjI0b0tYdGNiaUFnY21WMGRYSnVJRTlpYW1WamRDNWtaV1pwYm1WUWNtOXdaWEowZVNoN2ZTd2dKMkVuTENCN1oyVjBPaUJtZFc1amRHbHZiaWdwZXlCeVpYUjFjbTRnTnpzZ2ZYMHBMbUVnSVQwZ056dGNibjBwTzF4dVhHNWNiaTh2THk4dkx5OHZMeTh2THk4dkx5OHZMMXh1THk4Z1YwVkNVRUZEU3lCR1QwOVVSVkpjYmk4dklDNHZmaTlqYjNKbExXcHpMMnhwWW5KaGNua3ZiVzlrZFd4bGN5OWZaR1Z6WTNKcGNIUnZjbk11YW5OY2JpOHZJRzF2WkhWc1pTQnBaQ0E5SURJd1hHNHZMeUJ0YjJSMWJHVWdZMmgxYm10eklEMGdNQ0pkTENKdFlYQndhVzVuY3lJNklrRkJRVUU3UVVGRFFUdEJRVU5CTzBGQlEwRWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUluMD1cIik7XG5cbi8qKiovIH0pLFxuLyogMjEgKi9cbi8qIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKiBhbGwgZXhwb3J0cyB1c2VkICovXG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faGFzLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5ldmFsKFwidmFyIGhhc093blByb3BlcnR5ID0ge30uaGFzT3duUHJvcGVydHk7XFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCwga2V5KXtcXG4gIHJldHVybiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGl0LCBrZXkpO1xcbn07Ly8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lNakV1YW5NaUxDSnpiM1Z5WTJWeklqcGJJbmRsWW5CaFkyczZMeTh2TGk5K0wyTnZjbVV0YW5NdmJHbGljbUZ5ZVM5dGIyUjFiR1Z6TDE5b1lYTXVhbk0vWkRnMU1DSmRMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUoyWVhJZ2FHRnpUM2R1VUhKdmNHVnlkSGtnUFNCN2ZTNW9ZWE5QZDI1UWNtOXdaWEowZVR0Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1puVnVZM1JwYjI0b2FYUXNJR3RsZVNsN1hHNGdJSEpsZEhWeWJpQm9ZWE5QZDI1UWNtOXdaWEowZVM1allXeHNLR2wwTENCclpYa3BPMXh1ZlR0Y2JseHVYRzR2THk4dkx5OHZMeTh2THk4dkx5OHZMeTljYmk4dklGZEZRbEJCUTBzZ1JrOVBWRVZTWEc0dkx5QXVMMzR2WTI5eVpTMXFjeTlzYVdKeVlYSjVMMjF2WkhWc1pYTXZYMmhoY3k1cWMxeHVMeThnYlc5a2RXeGxJR2xrSUQwZ01qRmNiaTh2SUcxdlpIVnNaU0JqYUhWdWEzTWdQU0F3SWwwc0ltMWhjSEJwYm1keklqb2lRVUZCUVR0QlFVTkJPMEZCUTBFN1FVRkRRU0lzSW5OdmRYSmpaVkp2YjNRaU9pSWlmUT09XCIpO1xuXG4vKioqLyB9KSxcbi8qIDIyICovXG4vKiBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyogYWxsIGV4cG9ydHMgdXNlZCAqL1xuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19oaWRlLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuZXZhbChcInZhciBkUCAgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9fb2JqZWN0LWRwICovIDIzKVxcbiAgLCBjcmVhdGVEZXNjID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9fcHJvcGVydHktZGVzYyAqLyAzMik7XFxubW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL19kZXNjcmlwdG9ycyAqLyAyMCkgPyBmdW5jdGlvbihvYmplY3QsIGtleSwgdmFsdWUpe1xcbiAgcmV0dXJuIGRQLmYob2JqZWN0LCBrZXksIGNyZWF0ZURlc2MoMSwgdmFsdWUpKTtcXG59IDogZnVuY3Rpb24ob2JqZWN0LCBrZXksIHZhbHVlKXtcXG4gIG9iamVjdFtrZXldID0gdmFsdWU7XFxuICByZXR1cm4gb2JqZWN0O1xcbn07Ly8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lNakl1YW5NaUxDSnpiM1Z5WTJWeklqcGJJbmRsWW5CaFkyczZMeTh2TGk5K0wyTnZjbVV0YW5NdmJHbGljbUZ5ZVM5dGIyUjFiR1Z6TDE5b2FXUmxMbXB6UDJFMlpHRWlYU3dpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpZG1GeUlHUlFJQ0FnSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5dlltcGxZM1F0WkhBbktWeHVJQ0FzSUdOeVpXRjBaVVJsYzJNZ1BTQnlaWEYxYVhKbEtDY3VMMTl3Y205d1pYSjBlUzFrWlhOakp5azdYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJSEpsY1hWcGNtVW9KeTR2WDJSbGMyTnlhWEIwYjNKekp5a2dQeUJtZFc1amRHbHZiaWh2WW1wbFkzUXNJR3RsZVN3Z2RtRnNkV1VwZTF4dUlDQnlaWFIxY200Z1pGQXVaaWh2WW1wbFkzUXNJR3RsZVN3Z1kzSmxZWFJsUkdWell5Z3hMQ0IyWVd4MVpTa3BPMXh1ZlNBNklHWjFibU4wYVc5dUtHOWlhbVZqZEN3Z2EyVjVMQ0IyWVd4MVpTbDdYRzRnSUc5aWFtVmpkRnRyWlhsZElEMGdkbUZzZFdVN1hHNGdJSEpsZEhWeWJpQnZZbXBsWTNRN1hHNTlPMXh1WEc1Y2JpOHZMeTh2THk4dkx5OHZMeTh2THk4dkwxeHVMeThnVjBWQ1VFRkRTeUJHVDA5VVJWSmNiaTh2SUM0dmZpOWpiM0psTFdwekwyeHBZbkpoY25rdmJXOWtkV3hsY3k5ZmFHbGtaUzVxYzF4dUx5OGdiVzlrZFd4bElHbGtJRDBnTWpKY2JpOHZJRzF2WkhWc1pTQmphSFZ1YTNNZ1BTQXdJbDBzSW0xaGNIQnBibWR6SWpvaVFVRkJRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJJaXdpYzI5MWNtTmxVbTl2ZENJNklpSjlcIik7XG5cbi8qKiovIH0pLFxuLyogMjMgKi9cbi8qIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKiBhbGwgZXhwb3J0cyB1c2VkICovXG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWRwLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5ldmFsKFwidmFyIGFuT2JqZWN0ICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9fYW4tb2JqZWN0ICovIDE5KVxcbiAgLCBJRThfRE9NX0RFRklORSA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vX2llOC1kb20tZGVmaW5lICovIDExOSlcXG4gICwgdG9QcmltaXRpdmUgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL190by1wcmltaXRpdmUgKi8gMTM1KVxcbiAgLCBkUCAgICAgICAgICAgICA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcXG5cXG5leHBvcnRzLmYgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL19kZXNjcmlwdG9ycyAqLyAyMCkgPyBPYmplY3QuZGVmaW5lUHJvcGVydHkgOiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKXtcXG4gIGFuT2JqZWN0KE8pO1xcbiAgUCA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xcbiAgYW5PYmplY3QoQXR0cmlidXRlcyk7XFxuICBpZihJRThfRE9NX0RFRklORSl0cnkge1xcbiAgICByZXR1cm4gZFAoTywgUCwgQXR0cmlidXRlcyk7XFxuICB9IGNhdGNoKGUpeyAvKiBlbXB0eSAqLyB9XFxuICBpZignZ2V0JyBpbiBBdHRyaWJ1dGVzIHx8ICdzZXQnIGluIEF0dHJpYnV0ZXMpdGhyb3cgVHlwZUVycm9yKCdBY2Nlc3NvcnMgbm90IHN1cHBvcnRlZCEnKTtcXG4gIGlmKCd2YWx1ZScgaW4gQXR0cmlidXRlcylPW1BdID0gQXR0cmlidXRlcy52YWx1ZTtcXG4gIHJldHVybiBPO1xcbn07Ly8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lNak11YW5NaUxDSnpiM1Z5WTJWeklqcGJJbmRsWW5CaFkyczZMeTh2TGk5K0wyTnZjbVV0YW5NdmJHbGljbUZ5ZVM5dGIyUjFiR1Z6TDE5dlltcGxZM1F0WkhBdWFuTS9OREV4TmlKZExDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SjJZWElnWVc1UFltcGxZM1FnSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5aGJpMXZZbXBsWTNRbktWeHVJQ0FzSUVsRk9GOUVUMDFmUkVWR1NVNUZJRDBnY21WeGRXbHlaU2duTGk5ZmFXVTRMV1J2YlMxa1pXWnBibVVuS1Z4dUlDQXNJSFJ2VUhKcGJXbDBhWFpsSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmZEc4dGNISnBiV2wwYVhabEp5bGNiaUFnTENCa1VDQWdJQ0FnSUNBZ0lDQWdJQ0E5SUU5aWFtVmpkQzVrWldacGJtVlFjbTl3WlhKMGVUdGNibHh1Wlhod2IzSjBjeTVtSUQwZ2NtVnhkV2x5WlNnbkxpOWZaR1Z6WTNKcGNIUnZjbk1uS1NBL0lFOWlhbVZqZEM1a1pXWnBibVZRY205d1pYSjBlU0E2SUdaMWJtTjBhVzl1SUdSbFptbHVaVkJ5YjNCbGNuUjVLRThzSUZBc0lFRjBkSEpwWW5WMFpYTXBlMXh1SUNCaGJrOWlhbVZqZENoUEtUdGNiaUFnVUNBOUlIUnZVSEpwYldsMGFYWmxLRkFzSUhSeWRXVXBPMXh1SUNCaGJrOWlhbVZqZENoQmRIUnlhV0oxZEdWektUdGNiaUFnYVdZb1NVVTRYMFJQVFY5RVJVWkpUa1VwZEhKNUlIdGNiaUFnSUNCeVpYUjFjbTRnWkZBb1R5d2dVQ3dnUVhSMGNtbGlkWFJsY3lrN1hHNGdJSDBnWTJGMFkyZ29aU2w3SUM4cUlHVnRjSFI1SUNvdklIMWNiaUFnYVdZb0oyZGxkQ2NnYVc0Z1FYUjBjbWxpZFhSbGN5QjhmQ0FuYzJWMEp5QnBiaUJCZEhSeWFXSjFkR1Z6S1hSb2NtOTNJRlI1Y0dWRmNuSnZjaWduUVdOalpYTnpiM0p6SUc1dmRDQnpkWEJ3YjNKMFpXUWhKeWs3WEc0Z0lHbG1LQ2QyWVd4MVpTY2dhVzRnUVhSMGNtbGlkWFJsY3lsUFcxQmRJRDBnUVhSMGNtbGlkWFJsY3k1MllXeDFaVHRjYmlBZ2NtVjBkWEp1SUU4N1hHNTlPMXh1WEc1Y2JpOHZMeTh2THk4dkx5OHZMeTh2THk4dkwxeHVMeThnVjBWQ1VFRkRTeUJHVDA5VVJWSmNiaTh2SUM0dmZpOWpiM0psTFdwekwyeHBZbkpoY25rdmJXOWtkV3hsY3k5ZmIySnFaV04wTFdSd0xtcHpYRzR2THlCdGIyUjFiR1VnYVdRZ1BTQXlNMXh1THk4Z2JXOWtkV3hsSUdOb2RXNXJjeUE5SURBaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJJaXdpYzI5MWNtTmxVbTl2ZENJNklpSjlcIik7XG5cbi8qKiovIH0pLFxuLyogMjQgKi9cbi8qIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKiBhbGwgZXhwb3J0cyB1c2VkICovXG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9+L3JhbWRhL3NyYy9jdXJyeS5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5ldmFsKFwidmFyIF9jdXJyeTEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL2ludGVybmFsL19jdXJyeTEgKi8gMik7XFxudmFyIGN1cnJ5TiA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vY3VycnlOICovIDYpO1xcblxcblxcbi8qKlxcbiAqIFJldHVybnMgYSBjdXJyaWVkIGVxdWl2YWxlbnQgb2YgdGhlIHByb3ZpZGVkIGZ1bmN0aW9uLiBUaGUgY3VycmllZCBmdW5jdGlvblxcbiAqIGhhcyB0d28gdW51c3VhbCBjYXBhYmlsaXRpZXMuIEZpcnN0LCBpdHMgYXJndW1lbnRzIG5lZWRuJ3QgYmUgcHJvdmlkZWQgb25lXFxuICogYXQgYSB0aW1lLiBJZiBgZmAgaXMgYSB0ZXJuYXJ5IGZ1bmN0aW9uIGFuZCBgZ2AgaXMgYFIuY3VycnkoZilgLCB0aGVcXG4gKiBmb2xsb3dpbmcgYXJlIGVxdWl2YWxlbnQ6XFxuICpcXG4gKiAgIC0gYGcoMSkoMikoMylgXFxuICogICAtIGBnKDEpKDIsIDMpYFxcbiAqICAgLSBgZygxLCAyKSgzKWBcXG4gKiAgIC0gYGcoMSwgMiwgMylgXFxuICpcXG4gKiBTZWNvbmRseSwgdGhlIHNwZWNpYWwgcGxhY2Vob2xkZXIgdmFsdWUgYFIuX19gIG1heSBiZSB1c2VkIHRvIHNwZWNpZnlcXG4gKiBcXFwiZ2Fwc1xcXCIsIGFsbG93aW5nIHBhcnRpYWwgYXBwbGljYXRpb24gb2YgYW55IGNvbWJpbmF0aW9uIG9mIGFyZ3VtZW50cyxcXG4gKiByZWdhcmRsZXNzIG9mIHRoZWlyIHBvc2l0aW9ucy4gSWYgYGdgIGlzIGFzIGFib3ZlIGFuZCBgX2AgaXMgYFIuX19gLCB0aGVcXG4gKiBmb2xsb3dpbmcgYXJlIGVxdWl2YWxlbnQ6XFxuICpcXG4gKiAgIC0gYGcoMSwgMiwgMylgXFxuICogICAtIGBnKF8sIDIsIDMpKDEpYFxcbiAqICAgLSBgZyhfLCBfLCAzKSgxKSgyKWBcXG4gKiAgIC0gYGcoXywgXywgMykoMSwgMilgXFxuICogICAtIGBnKF8sIDIpKDEpKDMpYFxcbiAqICAgLSBgZyhfLCAyKSgxLCAzKWBcXG4gKiAgIC0gYGcoXywgMikoXywgMykoMSlgXFxuICpcXG4gKiBAZnVuY1xcbiAqIEBtZW1iZXJPZiBSXFxuICogQHNpbmNlIHYwLjEuMFxcbiAqIEBjYXRlZ29yeSBGdW5jdGlvblxcbiAqIEBzaWcgKCogLT4gYSkgLT4gKCogLT4gYSlcXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgZnVuY3Rpb24gdG8gY3VycnkuXFxuICogQHJldHVybiB7RnVuY3Rpb259IEEgbmV3LCBjdXJyaWVkIGZ1bmN0aW9uLlxcbiAqIEBzZWUgUi5jdXJyeU5cXG4gKiBAZXhhbXBsZVxcbiAqXFxuICogICAgICB2YXIgYWRkRm91ck51bWJlcnMgPSAoYSwgYiwgYywgZCkgPT4gYSArIGIgKyBjICsgZDtcXG4gKlxcbiAqICAgICAgdmFyIGN1cnJpZWRBZGRGb3VyTnVtYmVycyA9IFIuY3VycnkoYWRkRm91ck51bWJlcnMpO1xcbiAqICAgICAgdmFyIGYgPSBjdXJyaWVkQWRkRm91ck51bWJlcnMoMSwgMik7XFxuICogICAgICB2YXIgZyA9IGYoMyk7XFxuICogICAgICBnKDQpOyAvLz0+IDEwXFxuICovXFxubW9kdWxlLmV4cG9ydHMgPSBfY3VycnkxKGZ1bmN0aW9uIGN1cnJ5KGZuKSB7XFxuICByZXR1cm4gY3VycnlOKGZuLmxlbmd0aCwgZm4pO1xcbn0pO1xcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pTWpRdWFuTWlMQ0p6YjNWeVkyVnpJanBiSW5kbFluQmhZMnM2THk4dkxpOStMM0poYldSaEwzTnlZeTlqZFhKeWVTNXFjejgxTmpVMUlsMHNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJblpoY2lCZlkzVnljbmt4SUQwZ2NtVnhkV2x5WlNnbkxpOXBiblJsY201aGJDOWZZM1Z5Y25reEp5azdYRzUyWVhJZ1kzVnljbmxPSUQwZ2NtVnhkV2x5WlNnbkxpOWpkWEp5ZVU0bktUdGNibHh1WEc0dktpcGNiaUFxSUZKbGRIVnlibk1nWVNCamRYSnlhV1ZrSUdWeGRXbDJZV3hsYm5RZ2IyWWdkR2hsSUhCeWIzWnBaR1ZrSUdaMWJtTjBhVzl1TGlCVWFHVWdZM1Z5Y21sbFpDQm1kVzVqZEdsdmJseHVJQ29nYUdGeklIUjNieUIxYm5WemRXRnNJR05oY0dGaWFXeHBkR2xsY3k0Z1JtbHljM1FzSUdsMGN5QmhjbWQxYldWdWRITWdibVZsWkc0bmRDQmlaU0J3Y205MmFXUmxaQ0J2Ym1WY2JpQXFJR0YwSUdFZ2RHbHRaUzRnU1dZZ1lHWmdJR2x6SUdFZ2RHVnlibUZ5ZVNCbWRXNWpkR2x2YmlCaGJtUWdZR2RnSUdseklHQlNMbU4xY25KNUtHWXBZQ3dnZEdobFhHNGdLaUJtYjJ4c2IzZHBibWNnWVhKbElHVnhkV2wyWVd4bGJuUTZYRzRnS2x4dUlDb2dJQ0F0SUdCbktERXBLRElwS0RNcFlGeHVJQ29nSUNBdElHQm5LREVwS0RJc0lETXBZRnh1SUNvZ0lDQXRJR0JuS0RFc0lESXBLRE1wWUZ4dUlDb2dJQ0F0SUdCbktERXNJRElzSURNcFlGeHVJQ3BjYmlBcUlGTmxZMjl1Wkd4NUxDQjBhR1VnYzNCbFkybGhiQ0J3YkdGalpXaHZiR1JsY2lCMllXeDFaU0JnVWk1ZlgyQWdiV0Y1SUdKbElIVnpaV1FnZEc4Z2MzQmxZMmxtZVZ4dUlDb2dYQ0puWVhCelhDSXNJR0ZzYkc5M2FXNW5JSEJoY25ScFlXd2dZWEJ3YkdsallYUnBiMjRnYjJZZ1lXNTVJR052YldKcGJtRjBhVzl1SUc5bUlHRnlaM1Z0Wlc1MGN5eGNiaUFxSUhKbFoyRnlaR3hsYzNNZ2IyWWdkR2hsYVhJZ2NHOXphWFJwYjI1ekxpQkpaaUJnWjJBZ2FYTWdZWE1nWVdKdmRtVWdZVzVrSUdCZllDQnBjeUJnVWk1ZlgyQXNJSFJvWlZ4dUlDb2dabTlzYkc5M2FXNW5JR0Z5WlNCbGNYVnBkbUZzWlc1ME9seHVJQ3BjYmlBcUlDQWdMU0JnWnlneExDQXlMQ0F6S1dCY2JpQXFJQ0FnTFNCZ1p5aGZMQ0F5TENBektTZ3hLV0JjYmlBcUlDQWdMU0JnWnloZkxDQmZMQ0F6S1NneEtTZ3lLV0JjYmlBcUlDQWdMU0JnWnloZkxDQmZMQ0F6S1NneExDQXlLV0JjYmlBcUlDQWdMU0JnWnloZkxDQXlLU2d4S1NnektXQmNiaUFxSUNBZ0xTQmdaeWhmTENBeUtTZ3hMQ0F6S1dCY2JpQXFJQ0FnTFNCZ1p5aGZMQ0F5S1NoZkxDQXpLU2d4S1dCY2JpQXFYRzRnS2lCQVpuVnVZMXh1SUNvZ1FHMWxiV0psY2s5bUlGSmNiaUFxSUVCemFXNWpaU0IyTUM0eExqQmNiaUFxSUVCallYUmxaMjl5ZVNCR2RXNWpkR2x2Ymx4dUlDb2dRSE5wWnlBb0tpQXRQaUJoS1NBdFBpQW9LaUF0UGlCaEtWeHVJQ29nUUhCaGNtRnRJSHRHZFc1amRHbHZibjBnWm00Z1ZHaGxJR1oxYm1OMGFXOXVJSFJ2SUdOMWNuSjVMbHh1SUNvZ1FISmxkSFZ5YmlCN1JuVnVZM1JwYjI1OUlFRWdibVYzTENCamRYSnlhV1ZrSUdaMWJtTjBhVzl1TGx4dUlDb2dRSE5sWlNCU0xtTjFjbko1VGx4dUlDb2dRR1Y0WVcxd2JHVmNiaUFxWEc0Z0tpQWdJQ0FnSUhaaGNpQmhaR1JHYjNWeVRuVnRZbVZ5Y3lBOUlDaGhMQ0JpTENCakxDQmtLU0E5UGlCaElDc2dZaUFySUdNZ0t5QmtPMXh1SUNwY2JpQXFJQ0FnSUNBZ2RtRnlJR04xY25KcFpXUkJaR1JHYjNWeVRuVnRZbVZ5Y3lBOUlGSXVZM1Z5Y25rb1lXUmtSbTkxY2s1MWJXSmxjbk1wTzF4dUlDb2dJQ0FnSUNCMllYSWdaaUE5SUdOMWNuSnBaV1JCWkdSR2IzVnlUblZ0WW1WeWN5Z3hMQ0F5S1R0Y2JpQXFJQ0FnSUNBZ2RtRnlJR2NnUFNCbUtETXBPMXh1SUNvZ0lDQWdJQ0JuS0RRcE95QXZMejArSURFd1hHNGdLaTljYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnWDJOMWNuSjVNU2htZFc1amRHbHZiaUJqZFhKeWVTaG1iaWtnZTF4dUlDQnlaWFIxY200Z1kzVnljbmxPS0dadUxteGxibWQwYUN3Z1ptNHBPMXh1ZlNrN1hHNWNibHh1WEc0dkx5OHZMeTh2THk4dkx5OHZMeTh2THk5Y2JpOHZJRmRGUWxCQlEwc2dSazlQVkVWU1hHNHZMeUF1TDM0dmNtRnRaR0V2YzNKakwyTjFjbko1TG1welhHNHZMeUJ0YjJSMWJHVWdhV1FnUFNBeU5GeHVMeThnYlc5a2RXeGxJR05vZFc1cmN5QTlJREFpWFN3aWJXRndjR2x1WjNNaU9pSkJRVUZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzaUxDSnpiM1Z5WTJWU2IyOTBJam9pSW4wPVwiKTtcblxuLyoqKi8gfSksXG4vKiAyNSAqL1xuLyogbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9cbi8qIGFsbCBleHBvcnRzIHVzZWQgKi9cbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL34vcmFtZGEvc3JjL2ludGVybmFsL19pc1BsYWNlaG9sZGVyLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbmV2YWwoXCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIF9pc1BsYWNlaG9sZGVyKGEpIHtcXG4gIHJldHVybiBhICE9IG51bGwgJiZcXG4gICAgICAgICB0eXBlb2YgYSA9PT0gJ29iamVjdCcgJiZcXG4gICAgICAgICBhWydAQGZ1bmN0aW9uYWwvcGxhY2Vob2xkZXInXSA9PT0gdHJ1ZTtcXG59O1xcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pTWpVdWFuTWlMQ0p6YjNWeVkyVnpJanBiSW5kbFluQmhZMnM2THk4dkxpOStMM0poYldSaEwzTnlZeTlwYm5SbGNtNWhiQzlmYVhOUWJHRmpaV2h2YkdSbGNpNXFjejlsTnpReklsMHNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJbTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdablZ1WTNScGIyNGdYMmx6VUd4aFkyVm9iMnhrWlhJb1lTa2dlMXh1SUNCeVpYUjFjbTRnWVNBaFBTQnVkV3hzSUNZbVhHNGdJQ0FnSUNBZ0lDQjBlWEJsYjJZZ1lTQTlQVDBnSjI5aWFtVmpkQ2NnSmlaY2JpQWdJQ0FnSUNBZ0lHRmJKMEJBWm5WdVkzUnBiMjVoYkM5d2JHRmpaV2h2YkdSbGNpZGRJRDA5UFNCMGNuVmxPMXh1ZlR0Y2JseHVYRzVjYmk4dkx5OHZMeTh2THk4dkx5OHZMeTh2TDF4dUx5OGdWMFZDVUVGRFN5QkdUMDlVUlZKY2JpOHZJQzR2Zmk5eVlXMWtZUzl6Y21NdmFXNTBaWEp1WVd3dlgybHpVR3hoWTJWb2IyeGtaWEl1YW5OY2JpOHZJRzF2WkhWc1pTQnBaQ0E5SURJMVhHNHZMeUJ0YjJSMWJHVWdZMmgxYm10eklEMGdNQ0pkTENKdFlYQndhVzVuY3lJNklrRkJRVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzaUxDSnpiM1Z5WTJWU2IyOTBJam9pSW4wPVwiKTtcblxuLyoqKi8gfSksXG4vKiAyNiAqL1xuLyogbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9cbi8qIGFsbCBleHBvcnRzIHVzZWQgKi9cbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9+L3JhbWRhL3NyYy9yZWR1Y2UuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbmV2YWwoXCJ2YXIgX2N1cnJ5MyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vaW50ZXJuYWwvX2N1cnJ5MyAqLyA3KTtcXG52YXIgX3JlZHVjZSA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vaW50ZXJuYWwvX3JlZHVjZSAqLyAxNik7XFxuXFxuXFxuLyoqXFxuICogUmV0dXJucyBhIHNpbmdsZSBpdGVtIGJ5IGl0ZXJhdGluZyB0aHJvdWdoIHRoZSBsaXN0LCBzdWNjZXNzaXZlbHkgY2FsbGluZ1xcbiAqIHRoZSBpdGVyYXRvciBmdW5jdGlvbiBhbmQgcGFzc2luZyBpdCBhbiBhY2N1bXVsYXRvciB2YWx1ZSBhbmQgdGhlIGN1cnJlbnRcXG4gKiB2YWx1ZSBmcm9tIHRoZSBhcnJheSwgYW5kIHRoZW4gcGFzc2luZyB0aGUgcmVzdWx0IHRvIHRoZSBuZXh0IGNhbGwuXFxuICpcXG4gKiBUaGUgaXRlcmF0b3IgZnVuY3Rpb24gcmVjZWl2ZXMgdHdvIHZhbHVlczogKihhY2MsIHZhbHVlKSouIEl0IG1heSB1c2VcXG4gKiBgUi5yZWR1Y2VkYCB0byBzaG9ydGN1dCB0aGUgaXRlcmF0aW9uLlxcbiAqXFxuICogVGhlIGFyZ3VtZW50cycgb3JkZXIgb2YgYHJlZHVjZVJpZ2h0YCdzIGl0ZXJhdG9yIGZ1bmN0aW9uIGlzICoodmFsdWUsIGFjYykqLlxcbiAqXFxuICogTm90ZTogYFIucmVkdWNlYCBkb2VzIG5vdCBza2lwIGRlbGV0ZWQgb3IgdW5hc3NpZ25lZCBpbmRpY2VzIChzcGFyc2VcXG4gKiBhcnJheXMpLCB1bmxpa2UgdGhlIG5hdGl2ZSBgQXJyYXkucHJvdG90eXBlLnJlZHVjZWAgbWV0aG9kLiBGb3IgbW9yZSBkZXRhaWxzXFxuICogb24gdGhpcyBiZWhhdmlvciwgc2VlOlxcbiAqIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL0FycmF5L3JlZHVjZSNEZXNjcmlwdGlvblxcbiAqXFxuICogRGlzcGF0Y2hlcyB0byB0aGUgYHJlZHVjZWAgbWV0aG9kIG9mIHRoZSB0aGlyZCBhcmd1bWVudCwgaWYgcHJlc2VudC5cXG4gKlxcbiAqIEBmdW5jXFxuICogQG1lbWJlck9mIFJcXG4gKiBAc2luY2UgdjAuMS4wXFxuICogQGNhdGVnb3J5IExpc3RcXG4gKiBAc2lnICgoYSwgYikgLT4gYSkgLT4gYSAtPiBbYl0gLT4gYVxcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBpdGVyYXRvciBmdW5jdGlvbi4gUmVjZWl2ZXMgdHdvIHZhbHVlcywgdGhlIGFjY3VtdWxhdG9yIGFuZCB0aGVcXG4gKiAgICAgICAgY3VycmVudCBlbGVtZW50IGZyb20gdGhlIGFycmF5LlxcbiAqIEBwYXJhbSB7Kn0gYWNjIFRoZSBhY2N1bXVsYXRvciB2YWx1ZS5cXG4gKiBAcGFyYW0ge0FycmF5fSBsaXN0IFRoZSBsaXN0IHRvIGl0ZXJhdGUgb3Zlci5cXG4gKiBAcmV0dXJuIHsqfSBUaGUgZmluYWwsIGFjY3VtdWxhdGVkIHZhbHVlLlxcbiAqIEBzZWUgUi5yZWR1Y2VkLCBSLmFkZEluZGV4LCBSLnJlZHVjZVJpZ2h0XFxuICogQGV4YW1wbGVcXG4gKlxcbiAqICAgICAgUi5yZWR1Y2UoUi5zdWJ0cmFjdCwgMCwgWzEsIDIsIDMsIDRdKSAvLyA9PiAoKCgoMCAtIDEpIC0gMikgLSAzKSAtIDQpID0gLTEwXFxuICogICAgICAgICAgICAgICAgLSAgICAgICAgICAgICAgIC0xMFxcbiAqICAgICAgICAgICAgICAgLyBcXFxcICAgICAgICAgICAgICAvIFxcXFxcXG4gKiAgICAgICAgICAgICAgLSAgIDQgICAgICAgICAgIC02ICAgNFxcbiAqICAgICAgICAgICAgIC8gXFxcXCAgICAgICAgICAgICAgLyBcXFxcXFxuICogICAgICAgICAgICAtICAgMyAgID09PiAgICAgLTMgICAzXFxuICogICAgICAgICAgIC8gXFxcXCAgICAgICAgICAgICAgLyBcXFxcXFxuICogICAgICAgICAgLSAgIDIgICAgICAgICAgIC0xICAgMlxcbiAqICAgICAgICAgLyBcXFxcICAgICAgICAgICAgICAvIFxcXFxcXG4gKiAgICAgICAgMCAgIDEgICAgICAgICAgICAwICAgMVxcbiAqXFxuICogQHN5bWIgUi5yZWR1Y2UoZiwgYSwgW2IsIGMsIGRdKSA9IGYoZihmKGEsIGIpLCBjKSwgZClcXG4gKi9cXG5tb2R1bGUuZXhwb3J0cyA9IF9jdXJyeTMoX3JlZHVjZSk7XFxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lNall1YW5NaUxDSnpiM1Z5WTJWeklqcGJJbmRsWW5CaFkyczZMeTh2TGk5K0wzSmhiV1JoTDNOeVl5OXlaV1IxWTJVdWFuTS9ZVEEzWXlKZExDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SjJZWElnWDJOMWNuSjVNeUE5SUhKbGNYVnBjbVVvSnk0dmFXNTBaWEp1WVd3dlgyTjFjbko1TXljcE8xeHVkbUZ5SUY5eVpXUjFZMlVnUFNCeVpYRjFhWEpsS0NjdUwybHVkR1Z5Ym1Gc0wxOXlaV1IxWTJVbktUdGNibHh1WEc0dktpcGNiaUFxSUZKbGRIVnlibk1nWVNCemFXNW5iR1VnYVhSbGJTQmllU0JwZEdWeVlYUnBibWNnZEdoeWIzVm5hQ0IwYUdVZ2JHbHpkQ3dnYzNWalkyVnpjMmwyWld4NUlHTmhiR3hwYm1kY2JpQXFJSFJvWlNCcGRHVnlZWFJ2Y2lCbWRXNWpkR2x2YmlCaGJtUWdjR0Z6YzJsdVp5QnBkQ0JoYmlCaFkyTjFiWFZzWVhSdmNpQjJZV3gxWlNCaGJtUWdkR2hsSUdOMWNuSmxiblJjYmlBcUlIWmhiSFZsSUdaeWIyMGdkR2hsSUdGeWNtRjVMQ0JoYm1RZ2RHaGxiaUJ3WVhOemFXNW5JSFJvWlNCeVpYTjFiSFFnZEc4Z2RHaGxJRzVsZUhRZ1kyRnNiQzVjYmlBcVhHNGdLaUJVYUdVZ2FYUmxjbUYwYjNJZ1puVnVZM1JwYjI0Z2NtVmpaV2wyWlhNZ2RIZHZJSFpoYkhWbGN6b2dLaWhoWTJNc0lIWmhiSFZsS1NvdUlFbDBJRzFoZVNCMWMyVmNiaUFxSUdCU0xuSmxaSFZqWldSZ0lIUnZJSE5vYjNKMFkzVjBJSFJvWlNCcGRHVnlZWFJwYjI0dVhHNGdLbHh1SUNvZ1ZHaGxJR0Z5WjNWdFpXNTBjeWNnYjNKa1pYSWdiMllnWUhKbFpIVmpaVkpwWjJoMFlDZHpJR2wwWlhKaGRHOXlJR1oxYm1OMGFXOXVJR2x6SUNvb2RtRnNkV1VzSUdGall5a3FMbHh1SUNwY2JpQXFJRTV2ZEdVNklHQlNMbkpsWkhWalpXQWdaRzlsY3lCdWIzUWdjMnRwY0NCa1pXeGxkR1ZrSUc5eUlIVnVZWE56YVdkdVpXUWdhVzVrYVdObGN5QW9jM0JoY25ObFhHNGdLaUJoY25KaGVYTXBMQ0IxYm14cGEyVWdkR2hsSUc1aGRHbDJaU0JnUVhKeVlYa3VjSEp2ZEc5MGVYQmxMbkpsWkhWalpXQWdiV1YwYUc5a0xpQkdiM0lnYlc5eVpTQmtaWFJoYVd4elhHNGdLaUJ2YmlCMGFHbHpJR0psYUdGMmFXOXlMQ0J6WldVNlhHNGdLaUJvZEhSd2N6b3ZMMlJsZG1Wc2IzQmxjaTV0YjNwcGJHeGhMbTl5Wnk5bGJpMVZVeTlrYjJOekwxZGxZaTlLWVhaaFUyTnlhWEIwTDFKbFptVnlaVzVqWlM5SGJHOWlZV3hmVDJKcVpXTjBjeTlCY25KaGVTOXlaV1IxWTJValJHVnpZM0pwY0hScGIyNWNiaUFxWEc0Z0tpQkVhWE53WVhSamFHVnpJSFJ2SUhSb1pTQmdjbVZrZFdObFlDQnRaWFJvYjJRZ2IyWWdkR2hsSUhSb2FYSmtJR0Z5WjNWdFpXNTBMQ0JwWmlCd2NtVnpaVzUwTGx4dUlDcGNiaUFxSUVCbWRXNWpYRzRnS2lCQWJXVnRZbVZ5VDJZZ1VseHVJQ29nUUhOcGJtTmxJSFl3TGpFdU1GeHVJQ29nUUdOaGRHVm5iM0o1SUV4cGMzUmNiaUFxSUVCemFXY2dLQ2hoTENCaUtTQXRQaUJoS1NBdFBpQmhJQzArSUZ0aVhTQXRQaUJoWEc0Z0tpQkFjR0Z5WVcwZ2UwWjFibU4wYVc5dWZTQm1iaUJVYUdVZ2FYUmxjbUYwYjNJZ1puVnVZM1JwYjI0dUlGSmxZMlZwZG1WeklIUjNieUIyWVd4MVpYTXNJSFJvWlNCaFkyTjFiWFZzWVhSdmNpQmhibVFnZEdobFhHNGdLaUFnSUNBZ0lDQWdZM1Z5Y21WdWRDQmxiR1Z0Wlc1MElHWnliMjBnZEdobElHRnljbUY1TGx4dUlDb2dRSEJoY21GdElIc3FmU0JoWTJNZ1ZHaGxJR0ZqWTNWdGRXeGhkRzl5SUhaaGJIVmxMbHh1SUNvZ1FIQmhjbUZ0SUh0QmNuSmhlWDBnYkdsemRDQlVhR1VnYkdsemRDQjBieUJwZEdWeVlYUmxJRzkyWlhJdVhHNGdLaUJBY21WMGRYSnVJSHNxZlNCVWFHVWdabWx1WVd3c0lHRmpZM1Z0ZFd4aGRHVmtJSFpoYkhWbExseHVJQ29nUUhObFpTQlNMbkpsWkhWalpXUXNJRkl1WVdSa1NXNWtaWGdzSUZJdWNtVmtkV05sVW1sbmFIUmNiaUFxSUVCbGVHRnRjR3hsWEc0Z0tseHVJQ29nSUNBZ0lDQlNMbkpsWkhWalpTaFNMbk4xWW5SeVlXTjBMQ0F3TENCYk1Td2dNaXdnTXl3Z05GMHBJQzh2SUQwK0lDZ29LQ2d3SUMwZ01Ta2dMU0F5S1NBdElETXBJQzBnTkNrZ1BTQXRNVEJjYmlBcUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUMwZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F0TVRCY2JpQXFJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5QmNYQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5QmNYRnh1SUNvZ0lDQWdJQ0FnSUNBZ0lDQWdJQzBnSUNBMElDQWdJQ0FnSUNBZ0lDQXROaUFnSURSY2JpQXFJQ0FnSUNBZ0lDQWdJQ0FnSUM4Z1hGd2dJQ0FnSUNBZ0lDQWdJQ0FnSUM4Z1hGeGNiaUFxSUNBZ0lDQWdJQ0FnSUNBZ0xTQWdJRE1nSUNBOVBUNGdJQ0FnSUMweklDQWdNMXh1SUNvZ0lDQWdJQ0FnSUNBZ0lDOGdYRndnSUNBZ0lDQWdJQ0FnSUNBZ0lDOGdYRnhjYmlBcUlDQWdJQ0FnSUNBZ0lDMGdJQ0F5SUNBZ0lDQWdJQ0FnSUNBdE1TQWdJREpjYmlBcUlDQWdJQ0FnSUNBZ0x5QmNYQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5QmNYRnh1SUNvZ0lDQWdJQ0FnSURBZ0lDQXhJQ0FnSUNBZ0lDQWdJQ0FnTUNBZ0lERmNiaUFxWEc0Z0tpQkFjM2x0WWlCU0xuSmxaSFZqWlNobUxDQmhMQ0JiWWl3Z1l5d2daRjBwSUQwZ1ppaG1LR1lvWVN3Z1lpa3NJR01wTENCa0tWeHVJQ292WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUY5amRYSnllVE1vWDNKbFpIVmpaU2s3WEc1Y2JseHVYRzR2THk4dkx5OHZMeTh2THk4dkx5OHZMeTljYmk4dklGZEZRbEJCUTBzZ1JrOVBWRVZTWEc0dkx5QXVMMzR2Y21GdFpHRXZjM0pqTDNKbFpIVmpaUzVxYzF4dUx5OGdiVzlrZFd4bElHbGtJRDBnTWpaY2JpOHZJRzF2WkhWc1pTQmphSFZ1YTNNZ1BTQXdJbDBzSW0xaGNIQnBibWR6SWpvaVFVRkJRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3SWl3aWMyOTFjbU5sVW05dmRDSTZJaUo5XCIpO1xuXG4vKioqLyB9KSxcbi8qIDI3ICovXG4vKiBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyogYWxsIGV4cG9ydHMgdXNlZCAqL1xuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vfi9jYXJ0by9saWIvY2FydG8vaW5kZXguanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuZXZhbChcIi8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqLyhmdW5jdGlvbihwcm9jZXNzLCBfX2Rpcm5hbWUpIHt2YXIgdXRpbCA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIHV0aWwgKi8gNjgpLFxcbiAgICBmcyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIGZzICovIDExKSxcXG4gICAgcGF0aCA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIHBhdGggKi8gMTIpO1xcblxcblxcbmZ1bmN0aW9uIGdldFZlcnNpb24oKSB7XFxuICAgIGlmIChwcm9jZXNzLmJyb3dzZXIpIHtcXG4gICAgICAgIHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi8uLi9wYWNrYWdlLmpzb24gKi8gMzkpLnZlcnNpb24uc3BsaXQoJy4nKTtcXG4gICAgfSBlbHNlIGlmIChwYXJzZUludChwcm9jZXNzLnZlcnNpb24uc3BsaXQoJy4nKVsxXSwgMTApID4gNCkge1xcbiAgICAgICAgcmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uLy4uL3BhY2thZ2UuanNvbiAqLyAzOSkudmVyc2lvbi5zcGxpdCgnLicpO1xcbiAgICB9IGVsc2Uge1xcbiAgICAgICAgLy8gb2xkZXIgbm9kZVxcbiAgICAgICAgdmFyIHBhY2thZ2VfanNvbiA9IEpTT04ucGFyc2UoZnMucmVhZEZpbGVTeW5jKHBhdGguam9pbihfX2Rpcm5hbWUsJy4uLy4uL3BhY2thZ2UuanNvbicpKSk7XFxuICAgICAgICByZXR1cm4gcGFja2FnZV9qc29uLnZlcnNpb24uc3BsaXQoJy4nKTtcXG4gICAgfVxcbn1cXG5cXG52YXIgY2FydG8gPSB7XFxuICAgIHZlcnNpb246IGdldFZlcnNpb24oKSxcXG4gICAgUGFyc2VyOiBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL3BhcnNlciAqLyA4MikuUGFyc2VyLFxcbiAgICBSZW5kZXJlcjogX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9yZW5kZXJlciAqLyA4MykuUmVuZGVyZXIsXFxuICAgIHRyZWU6IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vdHJlZSAqLyAwKSxcXG4gICAgUmVuZGVyZXJKUzogX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9yZW5kZXJlcl9qcyAqLyA4NCksXFxuICAgIGRlZmF1bHRfcmVmZXJlbmNlOiBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL3RvcnF1ZS1yZWZlcmVuY2UgKi8gNjkpLFxcblxcbiAgICAvLyBAVE9ET1xcbiAgICB3cml0ZUVycm9yOiBmdW5jdGlvbihjdHgsIG9wdGlvbnMpIHtcXG4gICAgICAgIHZhciBtZXNzYWdlID0gJyc7XFxuICAgICAgICB2YXIgZXh0cmFjdCA9IGN0eC5leHRyYWN0O1xcbiAgICAgICAgdmFyIGVycm9yID0gW107XFxuXFxuICAgICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcXG5cXG4gICAgICAgIGlmIChvcHRpb25zLnNpbGVudCkgeyByZXR1cm47IH1cXG5cXG4gICAgICAgIG9wdGlvbnMuaW5kZW50ID0gb3B0aW9ucy5pbmRlbnQgfHwgJyc7XFxuXFxuICAgICAgICBpZiAoISgnaW5kZXgnIGluIGN0eCkgfHwgIWV4dHJhY3QpIHtcXG4gICAgICAgICAgICByZXR1cm4gdXRpbC5lcnJvcihvcHRpb25zLmluZGVudCArIChjdHguc3RhY2sgfHwgY3R4Lm1lc3NhZ2UpKTtcXG4gICAgICAgIH1cXG5cXG4gICAgICAgIGlmICh0eXBlb2YoZXh0cmFjdFswXSkgPT09ICdzdHJpbmcnKSB7XFxuICAgICAgICAgICAgZXJyb3IucHVzaChzdHlsaXplKChjdHgubGluZSAtIDEpICsgJyAnICsgZXh0cmFjdFswXSwgJ2dyZXknKSk7XFxuICAgICAgICB9XFxuXFxuICAgICAgICBpZiAoZXh0cmFjdFsxXSA9PT0gJycgJiYgdHlwZW9mIGV4dHJhY3RbMl0gPT09ICd1bmRlZmluZWQnKSB7XFxuICAgICAgICAgICAgZXh0cmFjdFsxXSA9ICfCtic7XFxuICAgICAgICB9XFxuICAgICAgICBlcnJvci5wdXNoKGN0eC5saW5lICsgJyAnICsgZXh0cmFjdFsxXS5zbGljZSgwLCBjdHguY29sdW1uKSArXFxuICAgICAgICAgICAgc3R5bGl6ZShzdHlsaXplKGV4dHJhY3RbMV1bY3R4LmNvbHVtbl0sICdib2xkJykgK1xcbiAgICAgICAgICAgIGV4dHJhY3RbMV0uc2xpY2UoY3R4LmNvbHVtbiArIDEpLCAneWVsbG93JykpO1xcblxcbiAgICAgICAgaWYgKHR5cGVvZihleHRyYWN0WzJdKSA9PT0gJ3N0cmluZycpIHtcXG4gICAgICAgICAgICBlcnJvci5wdXNoKHN0eWxpemUoKGN0eC5saW5lICsgMSkgKyAnICcgKyBleHRyYWN0WzJdLCAnZ3JleScpKTtcXG4gICAgICAgIH1cXG4gICAgICAgIGVycm9yID0gb3B0aW9ucy5pbmRlbnQgKyBlcnJvci5qb2luKCdcXFxcbicgKyBvcHRpb25zLmluZGVudCkgKyAnXFxcXDAzM1swbVxcXFxuJztcXG5cXG4gICAgICAgIG1lc3NhZ2UgPSBvcHRpb25zLmluZGVudCArIG1lc3NhZ2UgKyBzdHlsaXplKGN0eC5tZXNzYWdlLCAncmVkJyk7XFxuICAgICAgICBpZiAoY3R4LmZpbGVuYW1lKSAobWVzc2FnZSArPSBzdHlsaXplKCcgaW4gJywgJ3JlZCcpICsgY3R4LmZpbGVuYW1lKTtcXG5cXG4gICAgICAgIHV0aWwuZXJyb3IobWVzc2FnZSwgZXJyb3IpO1xcblxcbiAgICAgICAgaWYgKGN0eC5jYWxsTGluZSkge1xcbiAgICAgICAgICAgIHV0aWwuZXJyb3Ioc3R5bGl6ZSgnZnJvbSAnLCAncmVkJykgKyAoY3R4LmZpbGVuYW1lIHx8ICcnKSk7XFxuICAgICAgICAgICAgdXRpbC5lcnJvcihzdHlsaXplKGN0eC5jYWxsTGluZSwgJ2dyZXknKSArICcgJyArIGN0eC5jYWxsRXh0cmFjdCk7XFxuICAgICAgICB9XFxuICAgICAgICBpZiAoY3R4LnN0YWNrKSB7IHV0aWwuZXJyb3Ioc3R5bGl6ZShjdHguc3RhY2ssICdyZWQnKSk7IH1cXG4gICAgfVxcbn07XFxuXFxuX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi90cmVlL2NhbGwgKi8gODUpO1xcbl9fd2VicGFja19yZXF1aXJlX18oLyohIC4vdHJlZS9jb2xvciAqLyA4Nik7XFxuX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi90cmVlL2NvbW1lbnQgKi8gODcpO1xcbl9fd2VicGFja19yZXF1aXJlX18oLyohIC4vdHJlZS9kZWZpbml0aW9uICovIDg4KTtcXG5fX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL3RyZWUvZGltZW5zaW9uICovIDg5KTtcXG5fX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL3RyZWUvZWxlbWVudCAqLyA5MCk7XFxuX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi90cmVlL2V4cHJlc3Npb24gKi8gOTEpO1xcbl9fd2VicGFja19yZXF1aXJlX18oLyohIC4vdHJlZS9maWx0ZXJzZXQgKi8gOTQpO1xcbl9fd2VicGFja19yZXF1aXJlX18oLyohIC4vdHJlZS9maWx0ZXIgKi8gOTMpO1xcbl9fd2VicGFja19yZXF1aXJlX18oLyohIC4vdHJlZS9maWVsZCAqLyA5Mik7XFxuX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi90cmVlL2tleXdvcmQgKi8gOTkpO1xcbl9fd2VicGFja19yZXF1aXJlX18oLyohIC4vdHJlZS9sYXllciAqLyAxMDApO1xcbl9fd2VicGFja19yZXF1aXJlX18oLyohIC4vdHJlZS9saXRlcmFsICovIDEwMSk7XFxuX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi90cmVlL29wZXJhdGlvbiAqLyAxMDIpO1xcbl9fd2VicGFja19yZXF1aXJlX18oLyohIC4vdHJlZS9xdW90ZWQgKi8gMTAzKTtcXG5fX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL3RyZWUvaW1hZ2VmaWx0ZXIgKi8gOTcpO1xcbl9fd2VicGFja19yZXF1aXJlX18oLyohIC4vdHJlZS9yZWZlcmVuY2UgKi8gMTA0KTtcXG5fX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL3RyZWUvcnVsZSAqLyAxMDUpO1xcbl9fd2VicGFja19yZXF1aXJlX18oLyohIC4vdHJlZS9ydWxlc2V0ICovIDEwNik7XFxuX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi90cmVlL3NlbGVjdG9yICovIDEwNyk7XFxuX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi90cmVlL3N0eWxlICovIDEwOCk7XFxuX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi90cmVlL3VybCAqLyAxMDkpO1xcbl9fd2VicGFja19yZXF1aXJlX18oLyohIC4vdHJlZS92YWx1ZSAqLyAxMTApO1xcbl9fd2VicGFja19yZXF1aXJlX18oLyohIC4vdHJlZS92YXJpYWJsZSAqLyAxMTEpO1xcbl9fd2VicGFja19yZXF1aXJlX18oLyohIC4vdHJlZS96b29tICovIDExMik7XFxuX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi90cmVlL2ludmFsaWQgKi8gOTgpO1xcbl9fd2VicGFja19yZXF1aXJlX18oLyohIC4vdHJlZS9mb250c2V0ICovIDk1KTtcXG5fX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL3RyZWUvZnJhbWVfb2Zmc2V0ICovIDk2KTtcXG5fX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL2Z1bmN0aW9ucyAqLyA4MSk7XFxuXFxuZm9yICh2YXIgayBpbiBjYXJ0bykgeyBleHBvcnRzW2tdID0gY2FydG9ba107IH1cXG5cXG4vLyBTdHlsaXplIGEgc3RyaW5nXFxuZnVuY3Rpb24gc3R5bGl6ZShzdHIsIHN0eWxlKSB7XFxuICAgIHZhciBzdHlsZXMgPSB7XFxuICAgICAgICAnYm9sZCcgOiBbMSwgMjJdLFxcbiAgICAgICAgJ2ludmVyc2UnIDogWzcsIDI3XSxcXG4gICAgICAgICd1bmRlcmxpbmUnIDogWzQsIDI0XSxcXG4gICAgICAgICd5ZWxsb3cnIDogWzMzLCAzOV0sXFxuICAgICAgICAnZ3JlZW4nIDogWzMyLCAzOV0sXFxuICAgICAgICAncmVkJyA6IFszMSwgMzldLFxcbiAgICAgICAgJ2dyZXknIDogWzkwLCAzOV1cXG4gICAgfTtcXG4gICAgcmV0dXJuICdcXFxcMDMzWycgKyBzdHlsZXNbc3R5bGVdWzBdICsgJ20nICsgc3RyICtcXG4gICAgICAgICAgICdcXFxcMDMzWycgKyBzdHlsZXNbc3R5bGVdWzFdICsgJ20nO1xcbn1cXG5cXG4vKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi99LmNhbGwoZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi8uLi8uLi8uLi9wcm9jZXNzL2Jyb3dzZXIuanMgKi8gMzYpLCBcXFwiL1xcXCIpKS8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pTWpjdWFuTWlMQ0p6YjNWeVkyVnpJanBiSW5kbFluQmhZMnM2THk4dkxpOStMMk5oY25SdkwyeHBZaTlqWVhKMGJ5OXBibVJsZUM1cWN6ODJaVFExSWwwc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYkluWmhjaUIxZEdsc0lEMGdjbVZ4ZFdseVpTZ25kWFJwYkNjcExGeHVJQ0FnSUdaeklEMGdjbVZ4ZFdseVpTZ25abk1uS1N4Y2JpQWdJQ0J3WVhSb0lEMGdjbVZ4ZFdseVpTZ25jR0YwYUNjcE8xeHVYRzVjYm1aMWJtTjBhVzl1SUdkbGRGWmxjbk5wYjI0b0tTQjdYRzRnSUNBZ2FXWWdLSEJ5YjJObGMzTXVZbkp2ZDNObGNpa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdjbVZ4ZFdseVpTZ25MaTR2TGk0dmNHRmphMkZuWlM1cWMyOXVKeWt1ZG1WeWMybHZiaTV6Y0d4cGRDZ25MaWNwTzF4dUlDQWdJSDBnWld4elpTQnBaaUFvY0dGeWMyVkpiblFvY0hKdlkyVnpjeTUyWlhKemFXOXVMbk53YkdsMEtDY3VKeWxiTVYwc0lERXdLU0ErSURRcElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlISmxjWFZwY21Vb0p5NHVMeTR1TDNCaFkydGhaMlV1YW5OdmJpY3BMblpsY25OcGIyNHVjM0JzYVhRb0p5NG5LVHRjYmlBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQXZMeUJ2YkdSbGNpQnViMlJsWEc0Z0lDQWdJQ0FnSUhaaGNpQndZV05yWVdkbFgycHpiMjRnUFNCS1UwOU9MbkJoY25ObEtHWnpMbkpsWVdSR2FXeGxVM2x1WXlod1lYUm9MbXB2YVc0b1gxOWthWEp1WVcxbExDY3VMaTh1TGk5d1lXTnJZV2RsTG1wemIyNG5LU2twTzF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnY0dGamEyRm5aVjlxYzI5dUxuWmxjbk5wYjI0dWMzQnNhWFFvSnk0bktUdGNiaUFnSUNCOVhHNTlYRzVjYm5aaGNpQmpZWEowYnlBOUlIdGNiaUFnSUNCMlpYSnphVzl1T2lCblpYUldaWEp6YVc5dUtDa3NYRzRnSUNBZ1VHRnljMlZ5T2lCeVpYRjFhWEpsS0NjdUwzQmhjbk5sY2ljcExsQmhjbk5sY2l4Y2JpQWdJQ0JTWlc1a1pYSmxjam9nY21WeGRXbHlaU2duTGk5eVpXNWtaWEpsY2ljcExsSmxibVJsY21WeUxGeHVJQ0FnSUhSeVpXVTZJSEpsY1hWcGNtVW9KeTR2ZEhKbFpTY3BMRnh1SUNBZ0lGSmxibVJsY21WeVNsTTZJSEpsY1hWcGNtVW9KeTR2Y21WdVpHVnlaWEpmYW5NbktTeGNiaUFnSUNCa1pXWmhkV3gwWDNKbFptVnlaVzVqWlRvZ2NtVnhkV2x5WlNnbkxpOTBiM0p4ZFdVdGNtVm1aWEpsYm1ObEp5a3NYRzVjYmlBZ0lDQXZMeUJBVkU5RVQxeHVJQ0FnSUhkeWFYUmxSWEp5YjNJNklHWjFibU4wYVc5dUtHTjBlQ3dnYjNCMGFXOXVjeWtnZTF4dUlDQWdJQ0FnSUNCMllYSWdiV1Z6YzJGblpTQTlJQ2NuTzF4dUlDQWdJQ0FnSUNCMllYSWdaWGgwY21GamRDQTlJR04wZUM1bGVIUnlZV04wTzF4dUlDQWdJQ0FnSUNCMllYSWdaWEp5YjNJZ1BTQmJYVHRjYmx4dUlDQWdJQ0FnSUNCdmNIUnBiMjV6SUQwZ2IzQjBhVzl1Y3lCOGZDQjdmVHRjYmx4dUlDQWdJQ0FnSUNCcFppQW9iM0IwYVc5dWN5NXphV3hsYm5RcElIc2djbVYwZFhKdU95QjlYRzVjYmlBZ0lDQWdJQ0FnYjNCMGFXOXVjeTVwYm1SbGJuUWdQU0J2Y0hScGIyNXpMbWx1WkdWdWRDQjhmQ0FuSnp0Y2JseHVJQ0FnSUNBZ0lDQnBaaUFvSVNnbmFXNWtaWGduSUdsdUlHTjBlQ2tnZkh3Z0lXVjRkSEpoWTNRcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUIxZEdsc0xtVnljbTl5S0c5d2RHbHZibk11YVc1a1pXNTBJQ3NnS0dOMGVDNXpkR0ZqYXlCOGZDQmpkSGd1YldWemMyRm5aU2twTzF4dUlDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdhV1lnS0hSNWNHVnZaaWhsZUhSeVlXTjBXekJkS1NBOVBUMGdKM04wY21sdVp5Y3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHVnljbTl5TG5CMWMyZ29jM1I1YkdsNlpTZ29ZM1I0TG14cGJtVWdMU0F4S1NBcklDY2dKeUFySUdWNGRISmhZM1JiTUYwc0lDZG5jbVY1SnlrcE8xeHVJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnYVdZZ0tHVjRkSEpoWTNSYk1WMGdQVDA5SUNjbklDWW1JSFI1Y0dWdlppQmxlSFJ5WVdOMFd6SmRJRDA5UFNBbmRXNWtaV1pwYm1Wa0p5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1pYaDBjbUZqZEZzeFhTQTlJQ2ZDdGljN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdaWEp5YjNJdWNIVnphQ2hqZEhndWJHbHVaU0FySUNjZ0p5QXJJR1Y0ZEhKaFkzUmJNVjB1YzJ4cFkyVW9NQ3dnWTNSNExtTnZiSFZ0YmlrZ0sxeHVJQ0FnSUNBZ0lDQWdJQ0FnYzNSNWJHbDZaU2h6ZEhsc2FYcGxLR1Y0ZEhKaFkzUmJNVjFiWTNSNExtTnZiSFZ0Ymwwc0lDZGliMnhrSnlrZ0sxeHVJQ0FnSUNBZ0lDQWdJQ0FnWlhoMGNtRmpkRnN4WFM1emJHbGpaU2hqZEhndVkyOXNkVzF1SUNzZ01Ta3NJQ2Q1Wld4c2IzY25LU2s3WEc1Y2JpQWdJQ0FnSUNBZ2FXWWdLSFI1Y0dWdlppaGxlSFJ5WVdOMFd6SmRLU0E5UFQwZ0ozTjBjbWx1WnljcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdWeWNtOXlMbkIxYzJnb2MzUjViR2w2WlNnb1kzUjRMbXhwYm1VZ0t5QXhLU0FySUNjZ0p5QXJJR1Y0ZEhKaFkzUmJNbDBzSUNkbmNtVjVKeWtwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lHVnljbTl5SUQwZ2IzQjBhVzl1Y3k1cGJtUmxiblFnS3lCbGNuSnZjaTVxYjJsdUtDZGNYRzRuSUNzZ2IzQjBhVzl1Y3k1cGJtUmxiblFwSUNzZ0oxeGNNRE16V3pCdFhGeHVKenRjYmx4dUlDQWdJQ0FnSUNCdFpYTnpZV2RsSUQwZ2IzQjBhVzl1Y3k1cGJtUmxiblFnS3lCdFpYTnpZV2RsSUNzZ2MzUjViR2w2WlNoamRIZ3ViV1Z6YzJGblpTd2dKM0psWkNjcE8xeHVJQ0FnSUNBZ0lDQnBaaUFvWTNSNExtWnBiR1Z1WVcxbEtTQW9iV1Z6YzJGblpTQXJQU0J6ZEhsc2FYcGxLQ2NnYVc0Z0p5d2dKM0psWkNjcElDc2dZM1I0TG1acGJHVnVZVzFsS1R0Y2JseHVJQ0FnSUNBZ0lDQjFkR2xzTG1WeWNtOXlLRzFsYzNOaFoyVXNJR1Z5Y205eUtUdGNibHh1SUNBZ0lDQWdJQ0JwWmlBb1kzUjRMbU5oYkd4TWFXNWxLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjFkR2xzTG1WeWNtOXlLSE4wZVd4cGVtVW9KMlp5YjIwZ0p5d2dKM0psWkNjcElDc2dLR04wZUM1bWFXeGxibUZ0WlNCOGZDQW5KeWtwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdkWFJwYkM1bGNuSnZjaWh6ZEhsc2FYcGxLR04wZUM1allXeHNUR2x1WlN3Z0oyZHlaWGtuS1NBcklDY2dKeUFySUdOMGVDNWpZV3hzUlhoMGNtRmpkQ2s3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2FXWWdLR04wZUM1emRHRmpheWtnZXlCMWRHbHNMbVZ5Y205eUtITjBlV3hwZW1Vb1kzUjRMbk4wWVdOckxDQW5jbVZrSnlrcE95QjlYRzRnSUNBZ2ZWeHVmVHRjYmx4dWNtVnhkV2x5WlNnbkxpOTBjbVZsTDJOaGJHd25LVHRjYm5KbGNYVnBjbVVvSnk0dmRISmxaUzlqYjJ4dmNpY3BPMXh1Y21WeGRXbHlaU2duTGk5MGNtVmxMMk52YlcxbGJuUW5LVHRjYm5KbGNYVnBjbVVvSnk0dmRISmxaUzlrWldacGJtbDBhVzl1SnlrN1hHNXlaWEYxYVhKbEtDY3VMM1J5WldVdlpHbHRaVzV6YVc5dUp5azdYRzV5WlhGMWFYSmxLQ2N1TDNSeVpXVXZaV3hsYldWdWRDY3BPMXh1Y21WeGRXbHlaU2duTGk5MGNtVmxMMlY0Y0hKbGMzTnBiMjRuS1R0Y2JuSmxjWFZwY21Vb0p5NHZkSEpsWlM5bWFXeDBaWEp6WlhRbktUdGNibkpsY1hWcGNtVW9KeTR2ZEhKbFpTOW1hV3gwWlhJbktUdGNibkpsY1hWcGNtVW9KeTR2ZEhKbFpTOW1hV1ZzWkNjcE8xeHVjbVZ4ZFdseVpTZ25MaTkwY21WbEwydGxlWGR2Y21RbktUdGNibkpsY1hWcGNtVW9KeTR2ZEhKbFpTOXNZWGxsY2ljcE8xeHVjbVZ4ZFdseVpTZ25MaTkwY21WbEwyeHBkR1Z5WVd3bktUdGNibkpsY1hWcGNtVW9KeTR2ZEhKbFpTOXZjR1Z5WVhScGIyNG5LVHRjYm5KbGNYVnBjbVVvSnk0dmRISmxaUzl4ZFc5MFpXUW5LVHRjYm5KbGNYVnBjbVVvSnk0dmRISmxaUzlwYldGblpXWnBiSFJsY2ljcE8xeHVjbVZ4ZFdseVpTZ25MaTkwY21WbEwzSmxabVZ5Wlc1alpTY3BPMXh1Y21WeGRXbHlaU2duTGk5MGNtVmxMM0oxYkdVbktUdGNibkpsY1hWcGNtVW9KeTR2ZEhKbFpTOXlkV3hsYzJWMEp5azdYRzV5WlhGMWFYSmxLQ2N1TDNSeVpXVXZjMlZzWldOMGIzSW5LVHRjYm5KbGNYVnBjbVVvSnk0dmRISmxaUzl6ZEhsc1pTY3BPMXh1Y21WeGRXbHlaU2duTGk5MGNtVmxMM1Z5YkNjcE8xeHVjbVZ4ZFdseVpTZ25MaTkwY21WbEwzWmhiSFZsSnlrN1hHNXlaWEYxYVhKbEtDY3VMM1J5WldVdmRtRnlhV0ZpYkdVbktUdGNibkpsY1hWcGNtVW9KeTR2ZEhKbFpTOTZiMjl0SnlrN1hHNXlaWEYxYVhKbEtDY3VMM1J5WldVdmFXNTJZV3hwWkNjcE8xeHVjbVZ4ZFdseVpTZ25MaTkwY21WbEwyWnZiblJ6WlhRbktUdGNibkpsY1hWcGNtVW9KeTR2ZEhKbFpTOW1jbUZ0WlY5dlptWnpaWFFuS1R0Y2JuSmxjWFZwY21Vb0p5NHZablZ1WTNScGIyNXpKeWs3WEc1Y2JtWnZjaUFvZG1GeUlHc2dhVzRnWTJGeWRHOHBJSHNnWlhod2IzSjBjMXRyWFNBOUlHTmhjblJ2VzJ0ZE95QjlYRzVjYmk4dklGTjBlV3hwZW1VZ1lTQnpkSEpwYm1kY2JtWjFibU4wYVc5dUlITjBlV3hwZW1Vb2MzUnlMQ0J6ZEhsc1pTa2dlMXh1SUNBZ0lIWmhjaUJ6ZEhsc1pYTWdQU0I3WEc0Z0lDQWdJQ0FnSUNkaWIyeGtKeUE2SUZzeExDQXlNbDBzWEc0Z0lDQWdJQ0FnSUNkcGJuWmxjbk5sSnlBNklGczNMQ0F5TjEwc1hHNGdJQ0FnSUNBZ0lDZDFibVJsY214cGJtVW5JRG9nV3pRc0lESTBYU3hjYmlBZ0lDQWdJQ0FnSjNsbGJHeHZkeWNnT2lCYk16TXNJRE01WFN4Y2JpQWdJQ0FnSUNBZ0oyZHlaV1Z1SnlBNklGc3pNaXdnTXpsZExGeHVJQ0FnSUNBZ0lDQW5jbVZrSnlBNklGc3pNU3dnTXpsZExGeHVJQ0FnSUNBZ0lDQW5aM0psZVNjZ09pQmJPVEFzSURNNVhWeHVJQ0FnSUgwN1hHNGdJQ0FnY21WMGRYSnVJQ2RjWERBek0xc25JQ3NnYzNSNWJHVnpXM04wZVd4bFhWc3dYU0FySUNkdEp5QXJJSE4wY2lBclhHNGdJQ0FnSUNBZ0lDQWdJQ2RjWERBek0xc25JQ3NnYzNSNWJHVnpXM04wZVd4bFhWc3hYU0FySUNkdEp6dGNibjFjYmx4dVhHNWNiaTh2THk4dkx5OHZMeTh2THk4dkx5OHZMMXh1THk4Z1YwVkNVRUZEU3lCR1QwOVVSVkpjYmk4dklDNHZmaTlqWVhKMGJ5OXNhV0l2WTJGeWRHOHZhVzVrWlhndWFuTmNiaTh2SUcxdlpIVnNaU0JwWkNBOUlESTNYRzR2THlCdGIyUjFiR1VnWTJoMWJtdHpJRDBnTUNKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FTSXNJbk52ZFhKalpWSnZiM1FpT2lJaWZRPT1cIik7XG5cbi8qKiovIH0pLFxuLyogMjggKi9cbi8qIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKiBhbGwgZXhwb3J0cyB1c2VkICovXG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2NvcmUuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5ldmFsKFwidmFyIGNvcmUgPSBtb2R1bGUuZXhwb3J0cyA9IHt2ZXJzaW9uOiAnMi40LjAnfTtcXG5pZih0eXBlb2YgX19lID09ICdudW1iZXInKV9fZSA9IGNvcmU7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWYvLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaU1qZ3Vhbk1pTENKemIzVnlZMlZ6SWpwYkluZGxZbkJoWTJzNkx5OHZMaTkrTDJOdmNtVXRhbk12YkdsaWNtRnllUzl0YjJSMWJHVnpMMTlqYjNKbExtcHpQekZpTmpJaVhTd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lkbUZ5SUdOdmNtVWdQU0J0YjJSMWJHVXVaWGh3YjNKMGN5QTlJSHQyWlhKemFXOXVPaUFuTWk0MExqQW5mVHRjYm1sbUtIUjVjR1Z2WmlCZlgyVWdQVDBnSjI1MWJXSmxjaWNwWDE5bElEMGdZMjl5WlRzZ0x5OGdaWE5zYVc1MExXUnBjMkZpYkdVdGJHbHVaU0J1YnkxMWJtUmxabHh1WEc1Y2JpOHZMeTh2THk4dkx5OHZMeTh2THk4dkwxeHVMeThnVjBWQ1VFRkRTeUJHVDA5VVJWSmNiaTh2SUM0dmZpOWpiM0psTFdwekwyeHBZbkpoY25rdmJXOWtkV3hsY3k5ZlkyOXlaUzVxYzF4dUx5OGdiVzlrZFd4bElHbGtJRDBnTWpoY2JpOHZJRzF2WkhWc1pTQmphSFZ1YTNNZ1BTQXdJbDBzSW0xaGNIQnBibWR6SWpvaVFVRkJRVHRCUVVOQklpd2ljMjkxY21ObFVtOXZkQ0k2SWlKOVwiKTtcblxuLyoqKi8gfSksXG4vKiAyOSAqL1xuLyogbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9cbi8qIGFsbCBleHBvcnRzIHVzZWQgKi9cbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZGVmaW5lZC5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbmV2YWwoXCIvLyA3LjIuMSBSZXF1aXJlT2JqZWN0Q29lcmNpYmxlKGFyZ3VtZW50KVxcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpe1xcbiAgaWYoaXQgPT0gdW5kZWZpbmVkKXRocm93IFR5cGVFcnJvcihcXFwiQ2FuJ3QgY2FsbCBtZXRob2Qgb24gIFxcXCIgKyBpdCk7XFxuICByZXR1cm4gaXQ7XFxufTsvLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaU1qa3Vhbk1pTENKemIzVnlZMlZ6SWpwYkluZGxZbkJoWTJzNkx5OHZMaTkrTDJOdmNtVXRhbk12YkdsaWNtRnllUzl0YjJSMWJHVnpMMTlrWldacGJtVmtMbXB6UHpRMVpETWlYU3dpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpTHk4Z055NHlMakVnVW1WeGRXbHlaVTlpYW1WamRFTnZaWEpqYVdKc1pTaGhjbWQxYldWdWRDbGNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdablZ1WTNScGIyNG9hWFFwZTF4dUlDQnBaaWhwZENBOVBTQjFibVJsWm1sdVpXUXBkR2h5YjNjZ1ZIbHdaVVZ5Y205eUtGd2lRMkZ1SjNRZ1kyRnNiQ0J0WlhSb2IyUWdiMjRnSUZ3aUlDc2dhWFFwTzF4dUlDQnlaWFIxY200Z2FYUTdYRzU5TzF4dVhHNWNiaTh2THk4dkx5OHZMeTh2THk4dkx5OHZMMXh1THk4Z1YwVkNVRUZEU3lCR1QwOVVSVkpjYmk4dklDNHZmaTlqYjNKbExXcHpMMnhwWW5KaGNua3ZiVzlrZFd4bGN5OWZaR1ZtYVc1bFpDNXFjMXh1THk4Z2JXOWtkV3hsSUdsa0lEMGdNamxjYmk4dklHMXZaSFZzWlNCamFIVnVhM01nUFNBd0lsMHNJbTFoY0hCcGJtZHpJam9pUVVGQlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJJaXdpYzI5MWNtTmxVbTl2ZENJNklpSjlcIik7XG5cbi8qKiovIH0pLFxuLyogMzAgKi9cbi8qIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKiBhbGwgZXhwb3J0cyB1c2VkICovXG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faXMtb2JqZWN0LmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5ldmFsKFwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7XFxuICByZXR1cm4gdHlwZW9mIGl0ID09PSAnb2JqZWN0JyA/IGl0ICE9PSBudWxsIDogdHlwZW9mIGl0ID09PSAnZnVuY3Rpb24nO1xcbn07Ly8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lNekF1YW5NaUxDSnpiM1Z5WTJWeklqcGJJbmRsWW5CaFkyczZMeTh2TGk5K0wyTnZjbVV0YW5NdmJHbGljbUZ5ZVM5dGIyUjFiR1Z6TDE5cGN5MXZZbXBsWTNRdWFuTS9NalJqT0NKZExDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SnRiMlIxYkdVdVpYaHdiM0owY3lBOUlHWjFibU4wYVc5dUtHbDBLWHRjYmlBZ2NtVjBkWEp1SUhSNWNHVnZaaUJwZENBOVBUMGdKMjlpYW1WamRDY2dQeUJwZENBaFBUMGdiblZzYkNBNklIUjVjR1Z2WmlCcGRDQTlQVDBnSjJaMWJtTjBhVzl1Snp0Y2JuMDdYRzVjYmx4dUx5OHZMeTh2THk4dkx5OHZMeTh2THk4dlhHNHZMeUJYUlVKUVFVTkxJRVpQVDFSRlVseHVMeThnTGk5K0wyTnZjbVV0YW5NdmJHbGljbUZ5ZVM5dGIyUjFiR1Z6TDE5cGN5MXZZbXBsWTNRdWFuTmNiaTh2SUcxdlpIVnNaU0JwWkNBOUlETXdYRzR2THlCdGIyUjFiR1VnWTJoMWJtdHpJRDBnTUNKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVFN1FVRkRRVHRCUVVOQklpd2ljMjkxY21ObFVtOXZkQ0k2SWlKOVwiKTtcblxuLyoqKi8gfSksXG4vKiAzMSAqL1xuLyogbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9cbi8qIGFsbCBleHBvcnRzIHVzZWQgKi9cbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pdGVyYXRvcnMuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbmV2YWwoXCJtb2R1bGUuZXhwb3J0cyA9IHt9Oy8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pTXpFdWFuTWlMQ0p6YjNWeVkyVnpJanBiSW5kbFluQmhZMnM2THk4dkxpOStMMk52Y21VdGFuTXZiR2xpY21GeWVTOXRiMlIxYkdWekwxOXBkR1Z5WVhSdmNuTXVhbk0vWVdabU55SmRMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUp0YjJSMWJHVXVaWGh3YjNKMGN5QTlJSHQ5TzF4dVhHNWNiaTh2THk4dkx5OHZMeTh2THk4dkx5OHZMMXh1THk4Z1YwVkNVRUZEU3lCR1QwOVVSVkpjYmk4dklDNHZmaTlqYjNKbExXcHpMMnhwWW5KaGNua3ZiVzlrZFd4bGN5OWZhWFJsY21GMGIzSnpMbXB6WEc0dkx5QnRiMlIxYkdVZ2FXUWdQU0F6TVZ4dUx5OGdiVzlrZFd4bElHTm9kVzVyY3lBOUlEQWlYU3dpYldGd2NHbHVaM01pT2lKQlFVRkJJaXdpYzI5MWNtTmxVbTl2ZENJNklpSjlcIik7XG5cbi8qKiovIH0pLFxuLyogMzIgKi9cbi8qIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKiBhbGwgZXhwb3J0cyB1c2VkICovXG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3Byb3BlcnR5LWRlc2MuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5ldmFsKFwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihiaXRtYXAsIHZhbHVlKXtcXG4gIHJldHVybiB7XFxuICAgIGVudW1lcmFibGUgIDogIShiaXRtYXAgJiAxKSxcXG4gICAgY29uZmlndXJhYmxlOiAhKGJpdG1hcCAmIDIpLFxcbiAgICB3cml0YWJsZSAgICA6ICEoYml0bWFwICYgNCksXFxuICAgIHZhbHVlICAgICAgIDogdmFsdWVcXG4gIH07XFxufTsvLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaU16SXVhbk1pTENKemIzVnlZMlZ6SWpwYkluZGxZbkJoWTJzNkx5OHZMaTkrTDJOdmNtVXRhbk12YkdsaWNtRnllUzl0YjJSMWJHVnpMMTl3Y205d1pYSjBlUzFrWlhOakxtcHpQekZsT0RZaVhTd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2liVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQm1kVzVqZEdsdmJpaGlhWFJ0WVhBc0lIWmhiSFZsS1h0Y2JpQWdjbVYwZFhKdUlIdGNiaUFnSUNCbGJuVnRaWEpoWW14bElDQTZJQ0VvWW1sMGJXRndJQ1lnTVNrc1hHNGdJQ0FnWTI5dVptbG5kWEpoWW14bE9pQWhLR0pwZEcxaGNDQW1JRElwTEZ4dUlDQWdJSGR5YVhSaFlteGxJQ0FnSURvZ0lTaGlhWFJ0WVhBZ0ppQTBLU3hjYmlBZ0lDQjJZV3gxWlNBZ0lDQWdJQ0E2SUhaaGJIVmxYRzRnSUgwN1hHNTlPMXh1WEc1Y2JpOHZMeTh2THk4dkx5OHZMeTh2THk4dkwxeHVMeThnVjBWQ1VFRkRTeUJHVDA5VVJWSmNiaTh2SUM0dmZpOWpiM0psTFdwekwyeHBZbkpoY25rdmJXOWtkV3hsY3k5ZmNISnZjR1Z5ZEhrdFpHVnpZeTVxYzF4dUx5OGdiVzlrZFd4bElHbGtJRDBnTXpKY2JpOHZJRzF2WkhWc1pTQmphSFZ1YTNNZ1BTQXdJbDBzSW0xaGNIQnBibWR6SWpvaVFVRkJRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJJaXdpYzI5MWNtTmxVbTl2ZENJNklpSjlcIik7XG5cbi8qKiovIH0pLFxuLyogMzMgKi9cbi8qIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKiBhbGwgZXhwb3J0cyB1c2VkICovXG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3NoYXJlZC1rZXkuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5ldmFsKFwidmFyIHNoYXJlZCA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vX3NoYXJlZCAqLyA0OCkoJ2tleXMnKVxcbiAgLCB1aWQgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL191aWQgKi8gNTIpO1xcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oa2V5KXtcXG4gIHJldHVybiBzaGFyZWRba2V5XSB8fCAoc2hhcmVkW2tleV0gPSB1aWQoa2V5KSk7XFxufTsvLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaU16TXVhbk1pTENKemIzVnlZMlZ6SWpwYkluZGxZbkJoWTJzNkx5OHZMaTkrTDJOdmNtVXRhbk12YkdsaWNtRnllUzl0YjJSMWJHVnpMMTl6YUdGeVpXUXRhMlY1TG1welB6SmhObU1pWFN3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaWRtRnlJSE5vWVhKbFpDQTlJSEpsY1hWcGNtVW9KeTR2WDNOb1lYSmxaQ2NwS0NkclpYbHpKeWxjYmlBZ0xDQjFhV1FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTkxYVdRbktUdGNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdablZ1WTNScGIyNG9hMlY1S1h0Y2JpQWdjbVYwZFhKdUlITm9ZWEpsWkZ0clpYbGRJSHg4SUNoemFHRnlaV1JiYTJWNVhTQTlJSFZwWkNoclpYa3BLVHRjYm4wN1hHNWNibHh1THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2WEc0dkx5QlhSVUpRUVVOTElFWlBUMVJGVWx4dUx5OGdMaTkrTDJOdmNtVXRhbk12YkdsaWNtRnllUzl0YjJSMWJHVnpMMTl6YUdGeVpXUXRhMlY1TG1welhHNHZMeUJ0YjJSMWJHVWdhV1FnUFNBek0xeHVMeThnYlc5a2RXeGxJR05vZFc1cmN5QTlJREFpWFN3aWJXRndjR2x1WjNNaU9pSkJRVUZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFaUxDSnpiM1Z5WTJWU2IyOTBJam9pSW4wPVwiKTtcblxuLyoqKi8gfSksXG4vKiAzNCAqL1xuLyogbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9cbi8qIGFsbCBleHBvcnRzIHVzZWQgKi9cbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fdG8taW50ZWdlci5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbmV2YWwoXCIvLyA3LjEuNCBUb0ludGVnZXJcXG52YXIgY2VpbCAgPSBNYXRoLmNlaWxcXG4gICwgZmxvb3IgPSBNYXRoLmZsb29yO1xcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpe1xcbiAgcmV0dXJuIGlzTmFOKGl0ID0gK2l0KSA/IDAgOiAoaXQgPiAwID8gZmxvb3IgOiBjZWlsKShpdCk7XFxufTsvLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaU16UXVhbk1pTENKemIzVnlZMlZ6SWpwYkluZGxZbkJoWTJzNkx5OHZMaTkrTDJOdmNtVXRhbk12YkdsaWNtRnllUzl0YjJSMWJHVnpMMTkwYnkxcGJuUmxaMlZ5TG1welAyWTJOV1lpWFN3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaUx5OGdOeTR4TGpRZ1ZHOUpiblJsWjJWeVhHNTJZWElnWTJWcGJDQWdQU0JOWVhSb0xtTmxhV3hjYmlBZ0xDQm1iRzl2Y2lBOUlFMWhkR2d1Wm14dmIzSTdYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJR1oxYm1OMGFXOXVLR2wwS1h0Y2JpQWdjbVYwZFhKdUlHbHpUbUZPS0dsMElEMGdLMmwwS1NBL0lEQWdPaUFvYVhRZ1BpQXdJRDhnWm14dmIzSWdPaUJqWldsc0tTaHBkQ2s3WEc1OU8xeHVYRzVjYmk4dkx5OHZMeTh2THk4dkx5OHZMeTh2TDF4dUx5OGdWMFZDVUVGRFN5QkdUMDlVUlZKY2JpOHZJQzR2Zmk5amIzSmxMV3B6TDJ4cFluSmhjbmt2Ylc5a2RXeGxjeTlmZEc4dGFXNTBaV2RsY2k1cWMxeHVMeThnYlc5a2RXeGxJR2xrSUQwZ016UmNiaTh2SUcxdlpIVnNaU0JqYUhWdWEzTWdQU0F3SWwwc0ltMWhjSEJwYm1keklqb2lRVUZCUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVpTENKemIzVnlZMlZTYjI5MElqb2lJbjA9XCIpO1xuXG4vKioqLyB9KSxcbi8qIDM1ICovXG4vKiBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyogYWxsIGV4cG9ydHMgdXNlZCAqL1xuLyohKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL34vbWQ1L21kNS5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuZXZhbChcIihmdW5jdGlvbigpe1xcclxcbiAgdmFyIGNyeXB0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgY3J5cHQgKi8gMTM5KSxcXHJcXG4gICAgICB1dGY4ID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgY2hhcmVuYyAqLyA0MCkudXRmOCxcXHJcXG4gICAgICBpc0J1ZmZlciA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIGlzLWJ1ZmZlciAqLyAxNDApLFxcclxcbiAgICAgIGJpbiA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIGNoYXJlbmMgKi8gNDApLmJpbixcXHJcXG5cXHJcXG4gIC8vIFRoZSBjb3JlXFxyXFxuICBtZDUgPSBmdW5jdGlvbiAobWVzc2FnZSwgb3B0aW9ucykge1xcclxcbiAgICAvLyBDb252ZXJ0IHRvIGJ5dGUgYXJyYXlcXHJcXG4gICAgaWYgKG1lc3NhZ2UuY29uc3RydWN0b3IgPT0gU3RyaW5nKVxcclxcbiAgICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMuZW5jb2RpbmcgPT09ICdiaW5hcnknKVxcclxcbiAgICAgICAgbWVzc2FnZSA9IGJpbi5zdHJpbmdUb0J5dGVzKG1lc3NhZ2UpO1xcclxcbiAgICAgIGVsc2VcXHJcXG4gICAgICAgIG1lc3NhZ2UgPSB1dGY4LnN0cmluZ1RvQnl0ZXMobWVzc2FnZSk7XFxyXFxuICAgIGVsc2UgaWYgKGlzQnVmZmVyKG1lc3NhZ2UpKVxcclxcbiAgICAgIG1lc3NhZ2UgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChtZXNzYWdlLCAwKTtcXHJcXG4gICAgZWxzZSBpZiAoIUFycmF5LmlzQXJyYXkobWVzc2FnZSkpXFxyXFxuICAgICAgbWVzc2FnZSA9IG1lc3NhZ2UudG9TdHJpbmcoKTtcXHJcXG4gICAgLy8gZWxzZSwgYXNzdW1lIGJ5dGUgYXJyYXkgYWxyZWFkeVxcclxcblxcclxcbiAgICB2YXIgbSA9IGNyeXB0LmJ5dGVzVG9Xb3JkcyhtZXNzYWdlKSxcXHJcXG4gICAgICAgIGwgPSBtZXNzYWdlLmxlbmd0aCAqIDgsXFxyXFxuICAgICAgICBhID0gIDE3MzI1ODQxOTMsXFxyXFxuICAgICAgICBiID0gLTI3MTczMzg3OSxcXHJcXG4gICAgICAgIGMgPSAtMTczMjU4NDE5NCxcXHJcXG4gICAgICAgIGQgPSAgMjcxNzMzODc4O1xcclxcblxcclxcbiAgICAvLyBTd2FwIGVuZGlhblxcclxcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG0ubGVuZ3RoOyBpKyspIHtcXHJcXG4gICAgICBtW2ldID0gKChtW2ldIDw8ICA4KSB8IChtW2ldID4+PiAyNCkpICYgMHgwMEZGMDBGRiB8XFxyXFxuICAgICAgICAgICAgICgobVtpXSA8PCAyNCkgfCAobVtpXSA+Pj4gIDgpKSAmIDB4RkYwMEZGMDA7XFxyXFxuICAgIH1cXHJcXG5cXHJcXG4gICAgLy8gUGFkZGluZ1xcclxcbiAgICBtW2wgPj4+IDVdIHw9IDB4ODAgPDwgKGwgJSAzMik7XFxyXFxuICAgIG1bKCgobCArIDY0KSA+Pj4gOSkgPDwgNCkgKyAxNF0gPSBsO1xcclxcblxcclxcbiAgICAvLyBNZXRob2Qgc2hvcnRjdXRzXFxyXFxuICAgIHZhciBGRiA9IG1kNS5fZmYsXFxyXFxuICAgICAgICBHRyA9IG1kNS5fZ2csXFxyXFxuICAgICAgICBISCA9IG1kNS5faGgsXFxyXFxuICAgICAgICBJSSA9IG1kNS5faWk7XFxyXFxuXFxyXFxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbS5sZW5ndGg7IGkgKz0gMTYpIHtcXHJcXG5cXHJcXG4gICAgICB2YXIgYWEgPSBhLFxcclxcbiAgICAgICAgICBiYiA9IGIsXFxyXFxuICAgICAgICAgIGNjID0gYyxcXHJcXG4gICAgICAgICAgZGQgPSBkO1xcclxcblxcclxcbiAgICAgIGEgPSBGRihhLCBiLCBjLCBkLCBtW2krIDBdLCAgNywgLTY4MDg3NjkzNik7XFxyXFxuICAgICAgZCA9IEZGKGQsIGEsIGIsIGMsIG1baSsgMV0sIDEyLCAtMzg5NTY0NTg2KTtcXHJcXG4gICAgICBjID0gRkYoYywgZCwgYSwgYiwgbVtpKyAyXSwgMTcsICA2MDYxMDU4MTkpO1xcclxcbiAgICAgIGIgPSBGRihiLCBjLCBkLCBhLCBtW2krIDNdLCAyMiwgLTEwNDQ1MjUzMzApO1xcclxcbiAgICAgIGEgPSBGRihhLCBiLCBjLCBkLCBtW2krIDRdLCAgNywgLTE3NjQxODg5Nyk7XFxyXFxuICAgICAgZCA9IEZGKGQsIGEsIGIsIGMsIG1baSsgNV0sIDEyLCAgMTIwMDA4MDQyNik7XFxyXFxuICAgICAgYyA9IEZGKGMsIGQsIGEsIGIsIG1baSsgNl0sIDE3LCAtMTQ3MzIzMTM0MSk7XFxyXFxuICAgICAgYiA9IEZGKGIsIGMsIGQsIGEsIG1baSsgN10sIDIyLCAtNDU3MDU5ODMpO1xcclxcbiAgICAgIGEgPSBGRihhLCBiLCBjLCBkLCBtW2krIDhdLCAgNywgIDE3NzAwMzU0MTYpO1xcclxcbiAgICAgIGQgPSBGRihkLCBhLCBiLCBjLCBtW2krIDldLCAxMiwgLTE5NTg0MTQ0MTcpO1xcclxcbiAgICAgIGMgPSBGRihjLCBkLCBhLCBiLCBtW2krMTBdLCAxNywgLTQyMDYzKTtcXHJcXG4gICAgICBiID0gRkYoYiwgYywgZCwgYSwgbVtpKzExXSwgMjIsIC0xOTkwNDA0MTYyKTtcXHJcXG4gICAgICBhID0gRkYoYSwgYiwgYywgZCwgbVtpKzEyXSwgIDcsICAxODA0NjAzNjgyKTtcXHJcXG4gICAgICBkID0gRkYoZCwgYSwgYiwgYywgbVtpKzEzXSwgMTIsIC00MDM0MTEwMSk7XFxyXFxuICAgICAgYyA9IEZGKGMsIGQsIGEsIGIsIG1baSsxNF0sIDE3LCAtMTUwMjAwMjI5MCk7XFxyXFxuICAgICAgYiA9IEZGKGIsIGMsIGQsIGEsIG1baSsxNV0sIDIyLCAgMTIzNjUzNTMyOSk7XFxyXFxuXFxyXFxuICAgICAgYSA9IEdHKGEsIGIsIGMsIGQsIG1baSsgMV0sICA1LCAtMTY1Nzk2NTEwKTtcXHJcXG4gICAgICBkID0gR0coZCwgYSwgYiwgYywgbVtpKyA2XSwgIDksIC0xMDY5NTAxNjMyKTtcXHJcXG4gICAgICBjID0gR0coYywgZCwgYSwgYiwgbVtpKzExXSwgMTQsICA2NDM3MTc3MTMpO1xcclxcbiAgICAgIGIgPSBHRyhiLCBjLCBkLCBhLCBtW2krIDBdLCAyMCwgLTM3Mzg5NzMwMik7XFxyXFxuICAgICAgYSA9IEdHKGEsIGIsIGMsIGQsIG1baSsgNV0sICA1LCAtNzAxNTU4NjkxKTtcXHJcXG4gICAgICBkID0gR0coZCwgYSwgYiwgYywgbVtpKzEwXSwgIDksICAzODAxNjA4Myk7XFxyXFxuICAgICAgYyA9IEdHKGMsIGQsIGEsIGIsIG1baSsxNV0sIDE0LCAtNjYwNDc4MzM1KTtcXHJcXG4gICAgICBiID0gR0coYiwgYywgZCwgYSwgbVtpKyA0XSwgMjAsIC00MDU1Mzc4NDgpO1xcclxcbiAgICAgIGEgPSBHRyhhLCBiLCBjLCBkLCBtW2krIDldLCAgNSwgIDU2ODQ0NjQzOCk7XFxyXFxuICAgICAgZCA9IEdHKGQsIGEsIGIsIGMsIG1baSsxNF0sICA5LCAtMTAxOTgwMzY5MCk7XFxyXFxuICAgICAgYyA9IEdHKGMsIGQsIGEsIGIsIG1baSsgM10sIDE0LCAtMTg3MzYzOTYxKTtcXHJcXG4gICAgICBiID0gR0coYiwgYywgZCwgYSwgbVtpKyA4XSwgMjAsICAxMTYzNTMxNTAxKTtcXHJcXG4gICAgICBhID0gR0coYSwgYiwgYywgZCwgbVtpKzEzXSwgIDUsIC0xNDQ0NjgxNDY3KTtcXHJcXG4gICAgICBkID0gR0coZCwgYSwgYiwgYywgbVtpKyAyXSwgIDksIC01MTQwMzc4NCk7XFxyXFxuICAgICAgYyA9IEdHKGMsIGQsIGEsIGIsIG1baSsgN10sIDE0LCAgMTczNTMyODQ3Myk7XFxyXFxuICAgICAgYiA9IEdHKGIsIGMsIGQsIGEsIG1baSsxMl0sIDIwLCAtMTkyNjYwNzczNCk7XFxyXFxuXFxyXFxuICAgICAgYSA9IEhIKGEsIGIsIGMsIGQsIG1baSsgNV0sICA0LCAtMzc4NTU4KTtcXHJcXG4gICAgICBkID0gSEgoZCwgYSwgYiwgYywgbVtpKyA4XSwgMTEsIC0yMDIyNTc0NDYzKTtcXHJcXG4gICAgICBjID0gSEgoYywgZCwgYSwgYiwgbVtpKzExXSwgMTYsICAxODM5MDMwNTYyKTtcXHJcXG4gICAgICBiID0gSEgoYiwgYywgZCwgYSwgbVtpKzE0XSwgMjMsIC0zNTMwOTU1Nik7XFxyXFxuICAgICAgYSA9IEhIKGEsIGIsIGMsIGQsIG1baSsgMV0sICA0LCAtMTUzMDk5MjA2MCk7XFxyXFxuICAgICAgZCA9IEhIKGQsIGEsIGIsIGMsIG1baSsgNF0sIDExLCAgMTI3Mjg5MzM1Myk7XFxyXFxuICAgICAgYyA9IEhIKGMsIGQsIGEsIGIsIG1baSsgN10sIDE2LCAtMTU1NDk3NjMyKTtcXHJcXG4gICAgICBiID0gSEgoYiwgYywgZCwgYSwgbVtpKzEwXSwgMjMsIC0xMDk0NzMwNjQwKTtcXHJcXG4gICAgICBhID0gSEgoYSwgYiwgYywgZCwgbVtpKzEzXSwgIDQsICA2ODEyNzkxNzQpO1xcclxcbiAgICAgIGQgPSBISChkLCBhLCBiLCBjLCBtW2krIDBdLCAxMSwgLTM1ODUzNzIyMik7XFxyXFxuICAgICAgYyA9IEhIKGMsIGQsIGEsIGIsIG1baSsgM10sIDE2LCAtNzIyNTIxOTc5KTtcXHJcXG4gICAgICBiID0gSEgoYiwgYywgZCwgYSwgbVtpKyA2XSwgMjMsICA3NjAyOTE4OSk7XFxyXFxuICAgICAgYSA9IEhIKGEsIGIsIGMsIGQsIG1baSsgOV0sICA0LCAtNjQwMzY0NDg3KTtcXHJcXG4gICAgICBkID0gSEgoZCwgYSwgYiwgYywgbVtpKzEyXSwgMTEsIC00MjE4MTU4MzUpO1xcclxcbiAgICAgIGMgPSBISChjLCBkLCBhLCBiLCBtW2krMTVdLCAxNiwgIDUzMDc0MjUyMCk7XFxyXFxuICAgICAgYiA9IEhIKGIsIGMsIGQsIGEsIG1baSsgMl0sIDIzLCAtOTk1MzM4NjUxKTtcXHJcXG5cXHJcXG4gICAgICBhID0gSUkoYSwgYiwgYywgZCwgbVtpKyAwXSwgIDYsIC0xOTg2MzA4NDQpO1xcclxcbiAgICAgIGQgPSBJSShkLCBhLCBiLCBjLCBtW2krIDddLCAxMCwgIDExMjY4OTE0MTUpO1xcclxcbiAgICAgIGMgPSBJSShjLCBkLCBhLCBiLCBtW2krMTRdLCAxNSwgLTE0MTYzNTQ5MDUpO1xcclxcbiAgICAgIGIgPSBJSShiLCBjLCBkLCBhLCBtW2krIDVdLCAyMSwgLTU3NDM0MDU1KTtcXHJcXG4gICAgICBhID0gSUkoYSwgYiwgYywgZCwgbVtpKzEyXSwgIDYsICAxNzAwNDg1NTcxKTtcXHJcXG4gICAgICBkID0gSUkoZCwgYSwgYiwgYywgbVtpKyAzXSwgMTAsIC0xODk0OTg2NjA2KTtcXHJcXG4gICAgICBjID0gSUkoYywgZCwgYSwgYiwgbVtpKzEwXSwgMTUsIC0xMDUxNTIzKTtcXHJcXG4gICAgICBiID0gSUkoYiwgYywgZCwgYSwgbVtpKyAxXSwgMjEsIC0yMDU0OTIyNzk5KTtcXHJcXG4gICAgICBhID0gSUkoYSwgYiwgYywgZCwgbVtpKyA4XSwgIDYsICAxODczMzEzMzU5KTtcXHJcXG4gICAgICBkID0gSUkoZCwgYSwgYiwgYywgbVtpKzE1XSwgMTAsIC0zMDYxMTc0NCk7XFxyXFxuICAgICAgYyA9IElJKGMsIGQsIGEsIGIsIG1baSsgNl0sIDE1LCAtMTU2MDE5ODM4MCk7XFxyXFxuICAgICAgYiA9IElJKGIsIGMsIGQsIGEsIG1baSsxM10sIDIxLCAgMTMwOTE1MTY0OSk7XFxyXFxuICAgICAgYSA9IElJKGEsIGIsIGMsIGQsIG1baSsgNF0sICA2LCAtMTQ1NTIzMDcwKTtcXHJcXG4gICAgICBkID0gSUkoZCwgYSwgYiwgYywgbVtpKzExXSwgMTAsIC0xMTIwMjEwMzc5KTtcXHJcXG4gICAgICBjID0gSUkoYywgZCwgYSwgYiwgbVtpKyAyXSwgMTUsICA3MTg3ODcyNTkpO1xcclxcbiAgICAgIGIgPSBJSShiLCBjLCBkLCBhLCBtW2krIDldLCAyMSwgLTM0MzQ4NTU1MSk7XFxyXFxuXFxyXFxuICAgICAgYSA9IChhICsgYWEpID4+PiAwO1xcclxcbiAgICAgIGIgPSAoYiArIGJiKSA+Pj4gMDtcXHJcXG4gICAgICBjID0gKGMgKyBjYykgPj4+IDA7XFxyXFxuICAgICAgZCA9IChkICsgZGQpID4+PiAwO1xcclxcbiAgICB9XFxyXFxuXFxyXFxuICAgIHJldHVybiBjcnlwdC5lbmRpYW4oW2EsIGIsIGMsIGRdKTtcXHJcXG4gIH07XFxyXFxuXFxyXFxuICAvLyBBdXhpbGlhcnkgZnVuY3Rpb25zXFxyXFxuICBtZDUuX2ZmICA9IGZ1bmN0aW9uIChhLCBiLCBjLCBkLCB4LCBzLCB0KSB7XFxyXFxuICAgIHZhciBuID0gYSArIChiICYgYyB8IH5iICYgZCkgKyAoeCA+Pj4gMCkgKyB0O1xcclxcbiAgICByZXR1cm4gKChuIDw8IHMpIHwgKG4gPj4+ICgzMiAtIHMpKSkgKyBiO1xcclxcbiAgfTtcXHJcXG4gIG1kNS5fZ2cgID0gZnVuY3Rpb24gKGEsIGIsIGMsIGQsIHgsIHMsIHQpIHtcXHJcXG4gICAgdmFyIG4gPSBhICsgKGIgJiBkIHwgYyAmIH5kKSArICh4ID4+PiAwKSArIHQ7XFxyXFxuICAgIHJldHVybiAoKG4gPDwgcykgfCAobiA+Pj4gKDMyIC0gcykpKSArIGI7XFxyXFxuICB9O1xcclxcbiAgbWQ1Ll9oaCAgPSBmdW5jdGlvbiAoYSwgYiwgYywgZCwgeCwgcywgdCkge1xcclxcbiAgICB2YXIgbiA9IGEgKyAoYiBeIGMgXiBkKSArICh4ID4+PiAwKSArIHQ7XFxyXFxuICAgIHJldHVybiAoKG4gPDwgcykgfCAobiA+Pj4gKDMyIC0gcykpKSArIGI7XFxyXFxuICB9O1xcclxcbiAgbWQ1Ll9paSAgPSBmdW5jdGlvbiAoYSwgYiwgYywgZCwgeCwgcywgdCkge1xcclxcbiAgICB2YXIgbiA9IGEgKyAoYyBeIChiIHwgfmQpKSArICh4ID4+PiAwKSArIHQ7XFxyXFxuICAgIHJldHVybiAoKG4gPDwgcykgfCAobiA+Pj4gKDMyIC0gcykpKSArIGI7XFxyXFxuICB9O1xcclxcblxcclxcbiAgLy8gUGFja2FnZSBwcml2YXRlIGJsb2Nrc2l6ZVxcclxcbiAgbWQ1Ll9ibG9ja3NpemUgPSAxNjtcXHJcXG4gIG1kNS5fZGlnZXN0c2l6ZSA9IDE2O1xcclxcblxcclxcbiAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobWVzc2FnZSwgb3B0aW9ucykge1xcclxcbiAgICBpZiAobWVzc2FnZSA9PT0gdW5kZWZpbmVkIHx8IG1lc3NhZ2UgPT09IG51bGwpXFxyXFxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbGxlZ2FsIGFyZ3VtZW50ICcgKyBtZXNzYWdlKTtcXHJcXG5cXHJcXG4gICAgdmFyIGRpZ2VzdGJ5dGVzID0gY3J5cHQud29yZHNUb0J5dGVzKG1kNShtZXNzYWdlLCBvcHRpb25zKSk7XFxyXFxuICAgIHJldHVybiBvcHRpb25zICYmIG9wdGlvbnMuYXNCeXRlcyA/IGRpZ2VzdGJ5dGVzIDpcXHJcXG4gICAgICAgIG9wdGlvbnMgJiYgb3B0aW9ucy5hc1N0cmluZyA/IGJpbi5ieXRlc1RvU3RyaW5nKGRpZ2VzdGJ5dGVzKSA6XFxyXFxuICAgICAgICBjcnlwdC5ieXRlc1RvSGV4KGRpZ2VzdGJ5dGVzKTtcXHJcXG4gIH07XFxyXFxuXFxyXFxufSkoKTtcXHJcXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaU16VXVhbk1pTENKemIzVnlZMlZ6SWpwYkluZGxZbkJoWTJzNkx5OHZMaTkrTDIxa05TOXRaRFV1YW5NL1l6QXdPU0pkTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lJb1puVnVZM1JwYjI0b0tYdGNjbHh1SUNCMllYSWdZM0o1Y0hRZ1BTQnlaWEYxYVhKbEtDZGpjbmx3ZENjcExGeHlYRzRnSUNBZ0lDQjFkR1k0SUQwZ2NtVnhkV2x5WlNnblkyaGhjbVZ1WXljcExuVjBaamdzWEhKY2JpQWdJQ0FnSUdselFuVm1abVZ5SUQwZ2NtVnhkV2x5WlNnbmFYTXRZblZtWm1WeUp5a3NYSEpjYmlBZ0lDQWdJR0pwYmlBOUlISmxjWFZwY21Vb0oyTm9ZWEpsYm1NbktTNWlhVzRzWEhKY2JseHlYRzRnSUM4dklGUm9aU0JqYjNKbFhISmNiaUFnYldRMUlEMGdablZ1WTNScGIyNGdLRzFsYzNOaFoyVXNJRzl3ZEdsdmJuTXBJSHRjY2x4dUlDQWdJQzh2SUVOdmJuWmxjblFnZEc4Z1lubDBaU0JoY25KaGVWeHlYRzRnSUNBZ2FXWWdLRzFsYzNOaFoyVXVZMjl1YzNSeWRXTjBiM0lnUFQwZ1UzUnlhVzVuS1Z4eVhHNGdJQ0FnSUNCcFppQW9iM0IwYVc5dWN5QW1KaUJ2Y0hScGIyNXpMbVZ1WTI5a2FXNW5JRDA5UFNBblltbHVZWEo1SnlsY2NseHVJQ0FnSUNBZ0lDQnRaWE56WVdkbElEMGdZbWx1TG5OMGNtbHVaMVJ2UW5sMFpYTW9iV1Z6YzJGblpTazdYSEpjYmlBZ0lDQWdJR1ZzYzJWY2NseHVJQ0FnSUNBZ0lDQnRaWE56WVdkbElEMGdkWFJtT0M1emRISnBibWRVYjBKNWRHVnpLRzFsYzNOaFoyVXBPMXh5WEc0Z0lDQWdaV3h6WlNCcFppQW9hWE5DZFdabVpYSW9iV1Z6YzJGblpTa3BYSEpjYmlBZ0lDQWdJRzFsYzNOaFoyVWdQU0JCY25KaGVTNXdjbTkwYjNSNWNHVXVjMnhwWTJVdVkyRnNiQ2h0WlhOellXZGxMQ0F3S1R0Y2NseHVJQ0FnSUdWc2MyVWdhV1lnS0NGQmNuSmhlUzVwYzBGeWNtRjVLRzFsYzNOaFoyVXBLVnh5WEc0Z0lDQWdJQ0J0WlhOellXZGxJRDBnYldWemMyRm5aUzUwYjFOMGNtbHVaeWdwTzF4eVhHNGdJQ0FnTHk4Z1pXeHpaU3dnWVhOemRXMWxJR0o1ZEdVZ1lYSnlZWGtnWVd4eVpXRmtlVnh5WEc1Y2NseHVJQ0FnSUhaaGNpQnRJRDBnWTNKNWNIUXVZbmwwWlhOVWIxZHZjbVJ6S0cxbGMzTmhaMlVwTEZ4eVhHNGdJQ0FnSUNBZ0lHd2dQU0J0WlhOellXZGxMbXhsYm1kMGFDQXFJRGdzWEhKY2JpQWdJQ0FnSUNBZ1lTQTlJQ0F4TnpNeU5UZzBNVGt6TEZ4eVhHNGdJQ0FnSUNBZ0lHSWdQU0F0TWpjeE56TXpPRGM1TEZ4eVhHNGdJQ0FnSUNBZ0lHTWdQU0F0TVRjek1qVTROREU1TkN4Y2NseHVJQ0FnSUNBZ0lDQmtJRDBnSURJM01UY3pNemczT0R0Y2NseHVYSEpjYmlBZ0lDQXZMeUJUZDJGd0lHVnVaR2xoYmx4eVhHNGdJQ0FnWm05eUlDaDJZWElnYVNBOUlEQTdJR2tnUENCdExteGxibWQwYURzZ2FTc3JLU0I3WEhKY2JpQWdJQ0FnSUcxYmFWMGdQU0FvS0cxYmFWMGdQRHdnSURncElId2dLRzFiYVYwZ1BqNCtJREkwS1NrZ0ppQXdlREF3UmtZd01FWkdJSHhjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ2dvYlZ0cFhTQThQQ0F5TkNrZ2ZDQW9iVnRwWFNBK1BqNGdJRGdwS1NBbUlEQjRSa1l3TUVaR01EQTdYSEpjYmlBZ0lDQjlYSEpjYmx4eVhHNGdJQ0FnTHk4Z1VHRmtaR2x1WjF4eVhHNGdJQ0FnYlZ0c0lENCtQaUExWFNCOFBTQXdlRGd3SUR3OElDaHNJQ1VnTXpJcE8xeHlYRzRnSUNBZ2JWc29LQ2hzSUNzZ05qUXBJRDQrUGlBNUtTQThQQ0EwS1NBcklERTBYU0E5SUd3N1hISmNibHh5WEc0Z0lDQWdMeThnVFdWMGFHOWtJSE5vYjNKMFkzVjBjMXh5WEc0Z0lDQWdkbUZ5SUVaR0lEMGdiV1ExTGw5bVppeGNjbHh1SUNBZ0lDQWdJQ0JIUnlBOUlHMWtOUzVmWjJjc1hISmNiaUFnSUNBZ0lDQWdTRWdnUFNCdFpEVXVYMmhvTEZ4eVhHNGdJQ0FnSUNBZ0lFbEpJRDBnYldRMUxsOXBhVHRjY2x4dVhISmNiaUFnSUNCbWIzSWdLSFpoY2lCcElEMGdNRHNnYVNBOElHMHViR1Z1WjNSb095QnBJQ3M5SURFMktTQjdYSEpjYmx4eVhHNGdJQ0FnSUNCMllYSWdZV0VnUFNCaExGeHlYRzRnSUNBZ0lDQWdJQ0FnWW1JZ1BTQmlMRnh5WEc0Z0lDQWdJQ0FnSUNBZ1kyTWdQU0JqTEZ4eVhHNGdJQ0FnSUNBZ0lDQWdaR1FnUFNCa08xeHlYRzVjY2x4dUlDQWdJQ0FnWVNBOUlFWkdLR0VzSUdJc0lHTXNJR1FzSUcxYmFTc2dNRjBzSUNBM0xDQXROamd3T0RjMk9UTTJLVHRjY2x4dUlDQWdJQ0FnWkNBOUlFWkdLR1FzSUdFc0lHSXNJR01zSUcxYmFTc2dNVjBzSURFeUxDQXRNemc1TlRZME5UZzJLVHRjY2x4dUlDQWdJQ0FnWXlBOUlFWkdLR01zSUdRc0lHRXNJR0lzSUcxYmFTc2dNbDBzSURFM0xDQWdOakEyTVRBMU9ERTVLVHRjY2x4dUlDQWdJQ0FnWWlBOUlFWkdLR0lzSUdNc0lHUXNJR0VzSUcxYmFTc2dNMTBzSURJeUxDQXRNVEEwTkRVeU5UTXpNQ2s3WEhKY2JpQWdJQ0FnSUdFZ1BTQkdSaWhoTENCaUxDQmpMQ0JrTENCdFcya3JJRFJkTENBZ055d2dMVEUzTmpReE9EZzVOeWs3WEhKY2JpQWdJQ0FnSUdRZ1BTQkdSaWhrTENCaExDQmlMQ0JqTENCdFcya3JJRFZkTENBeE1pd2dJREV5TURBd09EQTBNallwTzF4eVhHNGdJQ0FnSUNCaklEMGdSa1lvWXl3Z1pDd2dZU3dnWWl3Z2JWdHBLeUEyWFN3Z01UY3NJQzB4TkRjek1qTXhNelF4S1R0Y2NseHVJQ0FnSUNBZ1lpQTlJRVpHS0dJc0lHTXNJR1FzSUdFc0lHMWJhU3NnTjEwc0lESXlMQ0F0TkRVM01EVTVPRE1wTzF4eVhHNGdJQ0FnSUNCaElEMGdSa1lvWVN3Z1lpd2dZeXdnWkN3Z2JWdHBLeUE0WFN3Z0lEY3NJQ0F4Tnpjd01ETTFOREUyS1R0Y2NseHVJQ0FnSUNBZ1pDQTlJRVpHS0dRc0lHRXNJR0lzSUdNc0lHMWJhU3NnT1Ywc0lERXlMQ0F0TVRrMU9EUXhORFF4TnlrN1hISmNiaUFnSUNBZ0lHTWdQU0JHUmloakxDQmtMQ0JoTENCaUxDQnRXMmtyTVRCZExDQXhOeXdnTFRReU1EWXpLVHRjY2x4dUlDQWdJQ0FnWWlBOUlFWkdLR0lzSUdNc0lHUXNJR0VzSUcxYmFTc3hNVjBzSURJeUxDQXRNVGs1TURRd05ERTJNaWs3WEhKY2JpQWdJQ0FnSUdFZ1BTQkdSaWhoTENCaUxDQmpMQ0JrTENCdFcya3JNVEpkTENBZ055d2dJREU0TURRMk1ETTJPRElwTzF4eVhHNGdJQ0FnSUNCa0lEMGdSa1lvWkN3Z1lTd2dZaXdnWXl3Z2JWdHBLekV6WFN3Z01USXNJQzAwTURNME1URXdNU2s3WEhKY2JpQWdJQ0FnSUdNZ1BTQkdSaWhqTENCa0xDQmhMQ0JpTENCdFcya3JNVFJkTENBeE55d2dMVEUxTURJd01ESXlPVEFwTzF4eVhHNGdJQ0FnSUNCaUlEMGdSa1lvWWl3Z1l5d2daQ3dnWVN3Z2JWdHBLekUxWFN3Z01qSXNJQ0F4TWpNMk5UTTFNekk1S1R0Y2NseHVYSEpjYmlBZ0lDQWdJR0VnUFNCSFJ5aGhMQ0JpTENCakxDQmtMQ0J0VzJrcklERmRMQ0FnTlN3Z0xURTJOVGM1TmpVeE1DazdYSEpjYmlBZ0lDQWdJR1FnUFNCSFJ5aGtMQ0JoTENCaUxDQmpMQ0J0VzJrcklEWmRMQ0FnT1N3Z0xURXdOamsxTURFMk16SXBPMXh5WEc0Z0lDQWdJQ0JqSUQwZ1IwY29ZeXdnWkN3Z1lTd2dZaXdnYlZ0cEt6RXhYU3dnTVRRc0lDQTJORE0zTVRjM01UTXBPMXh5WEc0Z0lDQWdJQ0JpSUQwZ1IwY29ZaXdnWXl3Z1pDd2dZU3dnYlZ0cEt5QXdYU3dnTWpBc0lDMHpOek00T1Rjek1ESXBPMXh5WEc0Z0lDQWdJQ0JoSUQwZ1IwY29ZU3dnWWl3Z1l5d2daQ3dnYlZ0cEt5QTFYU3dnSURVc0lDMDNNREUxTlRnMk9URXBPMXh5WEc0Z0lDQWdJQ0JrSUQwZ1IwY29aQ3dnWVN3Z1lpd2dZeXdnYlZ0cEt6RXdYU3dnSURrc0lDQXpPREF4TmpBNE15azdYSEpjYmlBZ0lDQWdJR01nUFNCSFJ5aGpMQ0JrTENCaExDQmlMQ0J0VzJrck1UVmRMQ0F4TkN3Z0xUWTJNRFEzT0RNek5TazdYSEpjYmlBZ0lDQWdJR0lnUFNCSFJ5aGlMQ0JqTENCa0xDQmhMQ0J0VzJrcklEUmRMQ0F5TUN3Z0xUUXdOVFV6TnpnME9DazdYSEpjYmlBZ0lDQWdJR0VnUFNCSFJ5aGhMQ0JpTENCakxDQmtMQ0J0VzJrcklEbGRMQ0FnTlN3Z0lEVTJPRFEwTmpRek9DazdYSEpjYmlBZ0lDQWdJR1FnUFNCSFJ5aGtMQ0JoTENCaUxDQmpMQ0J0VzJrck1UUmRMQ0FnT1N3Z0xURXdNVGs0TURNMk9UQXBPMXh5WEc0Z0lDQWdJQ0JqSUQwZ1IwY29ZeXdnWkN3Z1lTd2dZaXdnYlZ0cEt5QXpYU3dnTVRRc0lDMHhPRGN6TmpNNU5qRXBPMXh5WEc0Z0lDQWdJQ0JpSUQwZ1IwY29ZaXdnWXl3Z1pDd2dZU3dnYlZ0cEt5QTRYU3dnTWpBc0lDQXhNVFl6TlRNeE5UQXhLVHRjY2x4dUlDQWdJQ0FnWVNBOUlFZEhLR0VzSUdJc0lHTXNJR1FzSUcxYmFTc3hNMTBzSUNBMUxDQXRNVFEwTkRZNE1UUTJOeWs3WEhKY2JpQWdJQ0FnSUdRZ1BTQkhSeWhrTENCaExDQmlMQ0JqTENCdFcya3JJREpkTENBZ09Td2dMVFV4TkRBek56ZzBLVHRjY2x4dUlDQWdJQ0FnWXlBOUlFZEhLR01zSUdRc0lHRXNJR0lzSUcxYmFTc2dOMTBzSURFMExDQWdNVGN6TlRNeU9EUTNNeWs3WEhKY2JpQWdJQ0FnSUdJZ1BTQkhSeWhpTENCakxDQmtMQ0JoTENCdFcya3JNVEpkTENBeU1Dd2dMVEU1TWpZMk1EYzNNelFwTzF4eVhHNWNjbHh1SUNBZ0lDQWdZU0E5SUVoSUtHRXNJR0lzSUdNc0lHUXNJRzFiYVNzZ05WMHNJQ0EwTENBdE16YzROVFU0S1R0Y2NseHVJQ0FnSUNBZ1pDQTlJRWhJS0dRc0lHRXNJR0lzSUdNc0lHMWJhU3NnT0Ywc0lERXhMQ0F0TWpBeU1qVTNORFEyTXlrN1hISmNiaUFnSUNBZ0lHTWdQU0JJU0NoakxDQmtMQ0JoTENCaUxDQnRXMmtyTVRGZExDQXhOaXdnSURFNE16a3dNekExTmpJcE8xeHlYRzRnSUNBZ0lDQmlJRDBnU0Vnb1lpd2dZeXdnWkN3Z1lTd2diVnRwS3pFMFhTd2dNak1zSUMwek5UTXdPVFUxTmlrN1hISmNiaUFnSUNBZ0lHRWdQU0JJU0NoaExDQmlMQ0JqTENCa0xDQnRXMmtySURGZExDQWdOQ3dnTFRFMU16QTVPVEl3TmpBcE8xeHlYRzRnSUNBZ0lDQmtJRDBnU0Vnb1pDd2dZU3dnWWl3Z1l5d2diVnRwS3lBMFhTd2dNVEVzSUNBeE1qY3lPRGt6TXpVektUdGNjbHh1SUNBZ0lDQWdZeUE5SUVoSUtHTXNJR1FzSUdFc0lHSXNJRzFiYVNzZ04xMHNJREUyTENBdE1UVTFORGszTmpNeUtUdGNjbHh1SUNBZ0lDQWdZaUE5SUVoSUtHSXNJR01zSUdRc0lHRXNJRzFiYVNzeE1GMHNJREl6TENBdE1UQTVORGN6TURZME1DazdYSEpjYmlBZ0lDQWdJR0VnUFNCSVNDaGhMQ0JpTENCakxDQmtMQ0J0VzJrck1UTmRMQ0FnTkN3Z0lEWTRNVEkzT1RFM05DazdYSEpjYmlBZ0lDQWdJR1FnUFNCSVNDaGtMQ0JoTENCaUxDQmpMQ0J0VzJrcklEQmRMQ0F4TVN3Z0xUTTFPRFV6TnpJeU1pazdYSEpjYmlBZ0lDQWdJR01nUFNCSVNDaGpMQ0JrTENCaExDQmlMQ0J0VzJrcklETmRMQ0F4Tml3Z0xUY3lNalV5TVRrM09TazdYSEpjYmlBZ0lDQWdJR0lnUFNCSVNDaGlMQ0JqTENCa0xDQmhMQ0J0VzJrcklEWmRMQ0F5TXl3Z0lEYzJNREk1TVRnNUtUdGNjbHh1SUNBZ0lDQWdZU0E5SUVoSUtHRXNJR0lzSUdNc0lHUXNJRzFiYVNzZ09WMHNJQ0EwTENBdE5qUXdNelkwTkRnM0tUdGNjbHh1SUNBZ0lDQWdaQ0E5SUVoSUtHUXNJR0VzSUdJc0lHTXNJRzFiYVNzeE1sMHNJREV4TENBdE5ESXhPREUxT0RNMUtUdGNjbHh1SUNBZ0lDQWdZeUE5SUVoSUtHTXNJR1FzSUdFc0lHSXNJRzFiYVNzeE5WMHNJREUyTENBZ05UTXdOelF5TlRJd0tUdGNjbHh1SUNBZ0lDQWdZaUE5SUVoSUtHSXNJR01zSUdRc0lHRXNJRzFiYVNzZ01sMHNJREl6TENBdE9UazFNek00TmpVeEtUdGNjbHh1WEhKY2JpQWdJQ0FnSUdFZ1BTQkpTU2hoTENCaUxDQmpMQ0JrTENCdFcya3JJREJkTENBZ05pd2dMVEU1T0RZek1EZzBOQ2s3WEhKY2JpQWdJQ0FnSUdRZ1BTQkpTU2hrTENCaExDQmlMQ0JqTENCdFcya3JJRGRkTENBeE1Dd2dJREV4TWpZNE9URTBNVFVwTzF4eVhHNGdJQ0FnSUNCaklEMGdTVWtvWXl3Z1pDd2dZU3dnWWl3Z2JWdHBLekUwWFN3Z01UVXNJQzB4TkRFMk16VTBPVEExS1R0Y2NseHVJQ0FnSUNBZ1lpQTlJRWxKS0dJc0lHTXNJR1FzSUdFc0lHMWJhU3NnTlYwc0lESXhMQ0F0TlRjME16UXdOVFVwTzF4eVhHNGdJQ0FnSUNCaElEMGdTVWtvWVN3Z1lpd2dZeXdnWkN3Z2JWdHBLekV5WFN3Z0lEWXNJQ0F4TnpBd05EZzFOVGN4S1R0Y2NseHVJQ0FnSUNBZ1pDQTlJRWxKS0dRc0lHRXNJR0lzSUdNc0lHMWJhU3NnTTEwc0lERXdMQ0F0TVRnNU5EazROall3TmlrN1hISmNiaUFnSUNBZ0lHTWdQU0JKU1NoakxDQmtMQ0JoTENCaUxDQnRXMmtyTVRCZExDQXhOU3dnTFRFd05URTFNak1wTzF4eVhHNGdJQ0FnSUNCaUlEMGdTVWtvWWl3Z1l5d2daQ3dnWVN3Z2JWdHBLeUF4WFN3Z01qRXNJQzB5TURVME9USXlOems1S1R0Y2NseHVJQ0FnSUNBZ1lTQTlJRWxKS0dFc0lHSXNJR01zSUdRc0lHMWJhU3NnT0Ywc0lDQTJMQ0FnTVRnM016TXhNek0xT1NrN1hISmNiaUFnSUNBZ0lHUWdQU0JKU1Noa0xDQmhMQ0JpTENCakxDQnRXMmtyTVRWZExDQXhNQ3dnTFRNd05qRXhOelEwS1R0Y2NseHVJQ0FnSUNBZ1l5QTlJRWxKS0dNc0lHUXNJR0VzSUdJc0lHMWJhU3NnTmwwc0lERTFMQ0F0TVRVMk1ERTVPRE00TUNrN1hISmNiaUFnSUNBZ0lHSWdQU0JKU1NoaUxDQmpMQ0JrTENCaExDQnRXMmtyTVROZExDQXlNU3dnSURFek1Ea3hOVEUyTkRrcE8xeHlYRzRnSUNBZ0lDQmhJRDBnU1Vrb1lTd2dZaXdnWXl3Z1pDd2diVnRwS3lBMFhTd2dJRFlzSUMweE5EVTFNak13TnpBcE8xeHlYRzRnSUNBZ0lDQmtJRDBnU1Vrb1pDd2dZU3dnWWl3Z1l5d2diVnRwS3pFeFhTd2dNVEFzSUMweE1USXdNakV3TXpjNUtUdGNjbHh1SUNBZ0lDQWdZeUE5SUVsSktHTXNJR1FzSUdFc0lHSXNJRzFiYVNzZ01sMHNJREUxTENBZ056RTROemczTWpVNUtUdGNjbHh1SUNBZ0lDQWdZaUE5SUVsSktHSXNJR01zSUdRc0lHRXNJRzFiYVNzZ09WMHNJREl4TENBdE16UXpORGcxTlRVeEtUdGNjbHh1WEhKY2JpQWdJQ0FnSUdFZ1BTQW9ZU0FySUdGaEtTQStQajRnTUR0Y2NseHVJQ0FnSUNBZ1lpQTlJQ2hpSUNzZ1ltSXBJRDQrUGlBd08xeHlYRzRnSUNBZ0lDQmpJRDBnS0dNZ0t5QmpZeWtnUGo0K0lEQTdYSEpjYmlBZ0lDQWdJR1FnUFNBb1pDQXJJR1JrS1NBK1BqNGdNRHRjY2x4dUlDQWdJSDFjY2x4dVhISmNiaUFnSUNCeVpYUjFjbTRnWTNKNWNIUXVaVzVrYVdGdUtGdGhMQ0JpTENCakxDQmtYU2s3WEhKY2JpQWdmVHRjY2x4dVhISmNiaUFnTHk4Z1FYVjRhV3hwWVhKNUlHWjFibU4wYVc5dWMxeHlYRzRnSUcxa05TNWZabVlnSUQwZ1puVnVZM1JwYjI0Z0tHRXNJR0lzSUdNc0lHUXNJSGdzSUhNc0lIUXBJSHRjY2x4dUlDQWdJSFpoY2lCdUlEMGdZU0FySUNoaUlDWWdZeUI4SUg1aUlDWWdaQ2tnS3lBb2VDQStQajRnTUNrZ0t5QjBPMXh5WEc0Z0lDQWdjbVYwZFhKdUlDZ29iaUE4UENCektTQjhJQ2h1SUQ0K1BpQW9NeklnTFNCektTa3BJQ3NnWWp0Y2NseHVJQ0I5TzF4eVhHNGdJRzFrTlM1ZloyY2dJRDBnWm5WdVkzUnBiMjRnS0dFc0lHSXNJR01zSUdRc0lIZ3NJSE1zSUhRcElIdGNjbHh1SUNBZ0lIWmhjaUJ1SUQwZ1lTQXJJQ2hpSUNZZ1pDQjhJR01nSmlCK1pDa2dLeUFvZUNBK1BqNGdNQ2tnS3lCME8xeHlYRzRnSUNBZ2NtVjBkWEp1SUNnb2JpQThQQ0J6S1NCOElDaHVJRDQrUGlBb016SWdMU0J6S1NrcElDc2dZanRjY2x4dUlDQjlPMXh5WEc0Z0lHMWtOUzVmYUdnZ0lEMGdablZ1WTNScGIyNGdLR0VzSUdJc0lHTXNJR1FzSUhnc0lITXNJSFFwSUh0Y2NseHVJQ0FnSUhaaGNpQnVJRDBnWVNBcklDaGlJRjRnWXlCZUlHUXBJQ3NnS0hnZ1BqNCtJREFwSUNzZ2REdGNjbHh1SUNBZ0lISmxkSFZ5YmlBb0tHNGdQRHdnY3lrZ2ZDQW9iaUErUGo0Z0tETXlJQzBnY3lrcEtTQXJJR0k3WEhKY2JpQWdmVHRjY2x4dUlDQnRaRFV1WDJscElDQTlJR1oxYm1OMGFXOXVJQ2hoTENCaUxDQmpMQ0JrTENCNExDQnpMQ0IwS1NCN1hISmNiaUFnSUNCMllYSWdiaUE5SUdFZ0t5QW9ZeUJlSUNoaUlId2dmbVFwS1NBcklDaDRJRDQrUGlBd0tTQXJJSFE3WEhKY2JpQWdJQ0J5WlhSMWNtNGdLQ2h1SUR3OElITXBJSHdnS0c0Z1BqNCtJQ2d6TWlBdElITXBLU2tnS3lCaU8xeHlYRzRnSUgwN1hISmNibHh5WEc0Z0lDOHZJRkJoWTJ0aFoyVWdjSEpwZG1GMFpTQmliRzlqYTNOcGVtVmNjbHh1SUNCdFpEVXVYMkpzYjJOcmMybDZaU0E5SURFMk8xeHlYRzRnSUcxa05TNWZaR2xuWlhOMGMybDZaU0E5SURFMk8xeHlYRzVjY2x4dUlDQnRiMlIxYkdVdVpYaHdiM0owY3lBOUlHWjFibU4wYVc5dUlDaHRaWE56WVdkbExDQnZjSFJwYjI1ektTQjdYSEpjYmlBZ0lDQnBaaUFvYldWemMyRm5aU0E5UFQwZ2RXNWtaV1pwYm1Wa0lIeDhJRzFsYzNOaFoyVWdQVDA5SUc1MWJHd3BYSEpjYmlBZ0lDQWdJSFJvY205M0lHNWxkeUJGY25KdmNpZ25TV3hzWldkaGJDQmhjbWQxYldWdWRDQW5JQ3NnYldWemMyRm5aU2s3WEhKY2JseHlYRzRnSUNBZ2RtRnlJR1JwWjJWemRHSjVkR1Z6SUQwZ1kzSjVjSFF1ZDI5eVpITlViMEo1ZEdWektHMWtOU2h0WlhOellXZGxMQ0J2Y0hScGIyNXpLU2s3WEhKY2JpQWdJQ0J5WlhSMWNtNGdiM0IwYVc5dWN5QW1KaUJ2Y0hScGIyNXpMbUZ6UW5sMFpYTWdQeUJrYVdkbGMzUmllWFJsY3lBNlhISmNiaUFnSUNBZ0lDQWdiM0IwYVc5dWN5QW1KaUJ2Y0hScGIyNXpMbUZ6VTNSeWFXNW5JRDhnWW1sdUxtSjVkR1Z6Vkc5VGRISnBibWNvWkdsblpYTjBZbmwwWlhNcElEcGNjbHh1SUNBZ0lDQWdJQ0JqY25sd2RDNWllWFJsYzFSdlNHVjRLR1JwWjJWemRHSjVkR1Z6S1R0Y2NseHVJQ0I5TzF4eVhHNWNjbHh1ZlNrb0tUdGNjbHh1WEc1Y2JseHVMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZYRzR2THlCWFJVSlFRVU5MSUVaUFQxUkZVbHh1THk4Z0xpOStMMjFrTlM5dFpEVXVhbk5jYmk4dklHMXZaSFZzWlNCcFpDQTlJRE0xWEc0dkx5QnRiMlIxYkdVZ1kyaDFibXR6SUQwZ01DSmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3SWl3aWMyOTFjbU5sVW05dmRDSTZJaUo5XCIpO1xuXG4vKioqLyB9KSxcbi8qIDM2ICovXG4vKiBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyogYWxsIGV4cG9ydHMgdXNlZCAqL1xuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vfi9wcm9jZXNzL2Jyb3dzZXIuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuZXZhbChcIi8vIHNoaW0gZm9yIHVzaW5nIHByb2Nlc3MgaW4gYnJvd3NlclxcbnZhciBwcm9jZXNzID0gbW9kdWxlLmV4cG9ydHMgPSB7fTtcXG5cXG4vLyBjYWNoZWQgZnJvbSB3aGF0ZXZlciBnbG9iYWwgaXMgcHJlc2VudCBzbyB0aGF0IHRlc3QgcnVubmVycyB0aGF0IHN0dWIgaXRcXG4vLyBkb24ndCBicmVhayB0aGluZ3MuICBCdXQgd2UgbmVlZCB0byB3cmFwIGl0IGluIGEgdHJ5IGNhdGNoIGluIGNhc2UgaXQgaXNcXG4vLyB3cmFwcGVkIGluIHN0cmljdCBtb2RlIGNvZGUgd2hpY2ggZG9lc24ndCBkZWZpbmUgYW55IGdsb2JhbHMuICBJdCdzIGluc2lkZSBhXFxuLy8gZnVuY3Rpb24gYmVjYXVzZSB0cnkvY2F0Y2hlcyBkZW9wdGltaXplIGluIGNlcnRhaW4gZW5naW5lcy5cXG5cXG52YXIgY2FjaGVkU2V0VGltZW91dDtcXG52YXIgY2FjaGVkQ2xlYXJUaW1lb3V0O1xcblxcbmZ1bmN0aW9uIGRlZmF1bHRTZXRUaW1vdXQoKSB7XFxuICAgIHRocm93IG5ldyBFcnJvcignc2V0VGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xcbn1cXG5mdW5jdGlvbiBkZWZhdWx0Q2xlYXJUaW1lb3V0ICgpIHtcXG4gICAgdGhyb3cgbmV3IEVycm9yKCdjbGVhclRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcXG59XFxuKGZ1bmN0aW9uICgpIHtcXG4gICAgdHJ5IHtcXG4gICAgICAgIGlmICh0eXBlb2Ygc2V0VGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xcbiAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcXG4gICAgICAgIH1cXG4gICAgfSBjYXRjaCAoZSkge1xcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XFxuICAgIH1cXG4gICAgdHJ5IHtcXG4gICAgICAgIGlmICh0eXBlb2YgY2xlYXJUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XFxuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xcbiAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xcbiAgICAgICAgfVxcbiAgICB9IGNhdGNoIChlKSB7XFxuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xcbiAgICB9XFxufSAoKSlcXG5mdW5jdGlvbiBydW5UaW1lb3V0KGZ1bikge1xcbiAgICBpZiAoY2FjaGVkU2V0VGltZW91dCA9PT0gc2V0VGltZW91dCkge1xcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXFxuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xcbiAgICB9XFxuICAgIC8vIGlmIHNldFRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXFxuICAgIGlmICgoY2FjaGVkU2V0VGltZW91dCA9PT0gZGVmYXVsdFNldFRpbW91dCB8fCAhY2FjaGVkU2V0VGltZW91dCkgJiYgc2V0VGltZW91dCkge1xcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XFxuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xcbiAgICB9XFxuICAgIHRyeSB7XFxuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXFxuICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dChmdW4sIDApO1xcbiAgICB9IGNhdGNoKGUpe1xcbiAgICAgICAgdHJ5IHtcXG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcXG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKG51bGwsIGZ1biwgMCk7XFxuICAgICAgICB9IGNhdGNoKGUpe1xcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yXFxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbCh0aGlzLCBmdW4sIDApO1xcbiAgICAgICAgfVxcbiAgICB9XFxuXFxuXFxufVxcbmZ1bmN0aW9uIHJ1bkNsZWFyVGltZW91dChtYXJrZXIpIHtcXG4gICAgaWYgKGNhY2hlZENsZWFyVGltZW91dCA9PT0gY2xlYXJUaW1lb3V0KSB7XFxuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcXG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcXG4gICAgfVxcbiAgICAvLyBpZiBjbGVhclRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXFxuICAgIGlmICgoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBkZWZhdWx0Q2xlYXJUaW1lb3V0IHx8ICFjYWNoZWRDbGVhclRpbWVvdXQpICYmIGNsZWFyVGltZW91dCkge1xcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xcbiAgICB9XFxuICAgIHRyeSB7XFxuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXFxuICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0KG1hcmtlcik7XFxuICAgIH0gY2F0Y2ggKGUpe1xcbiAgICAgICAgdHJ5IHtcXG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgIHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XFxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKG51bGwsIG1hcmtlcik7XFxuICAgICAgICB9IGNhdGNoIChlKXtcXG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvci5cXG4gICAgICAgICAgICAvLyBTb21lIHZlcnNpb25zIG9mIEkuRS4gaGF2ZSBkaWZmZXJlbnQgcnVsZXMgZm9yIGNsZWFyVGltZW91dCB2cyBzZXRUaW1lb3V0XFxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKHRoaXMsIG1hcmtlcik7XFxuICAgICAgICB9XFxuICAgIH1cXG5cXG5cXG5cXG59XFxudmFyIHF1ZXVlID0gW107XFxudmFyIGRyYWluaW5nID0gZmFsc2U7XFxudmFyIGN1cnJlbnRRdWV1ZTtcXG52YXIgcXVldWVJbmRleCA9IC0xO1xcblxcbmZ1bmN0aW9uIGNsZWFuVXBOZXh0VGljaygpIHtcXG4gICAgaWYgKCFkcmFpbmluZyB8fCAhY3VycmVudFF1ZXVlKSB7XFxuICAgICAgICByZXR1cm47XFxuICAgIH1cXG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcXG4gICAgaWYgKGN1cnJlbnRRdWV1ZS5sZW5ndGgpIHtcXG4gICAgICAgIHF1ZXVlID0gY3VycmVudFF1ZXVlLmNvbmNhdChxdWV1ZSk7XFxuICAgIH0gZWxzZSB7XFxuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XFxuICAgIH1cXG4gICAgaWYgKHF1ZXVlLmxlbmd0aCkge1xcbiAgICAgICAgZHJhaW5RdWV1ZSgpO1xcbiAgICB9XFxufVxcblxcbmZ1bmN0aW9uIGRyYWluUXVldWUoKSB7XFxuICAgIGlmIChkcmFpbmluZykge1xcbiAgICAgICAgcmV0dXJuO1xcbiAgICB9XFxuICAgIHZhciB0aW1lb3V0ID0gcnVuVGltZW91dChjbGVhblVwTmV4dFRpY2spO1xcbiAgICBkcmFpbmluZyA9IHRydWU7XFxuXFxuICAgIHZhciBsZW4gPSBxdWV1ZS5sZW5ndGg7XFxuICAgIHdoaWxlKGxlbikge1xcbiAgICAgICAgY3VycmVudFF1ZXVlID0gcXVldWU7XFxuICAgICAgICBxdWV1ZSA9IFtdO1xcbiAgICAgICAgd2hpbGUgKCsrcXVldWVJbmRleCA8IGxlbikge1xcbiAgICAgICAgICAgIGlmIChjdXJyZW50UXVldWUpIHtcXG4gICAgICAgICAgICAgICAgY3VycmVudFF1ZXVlW3F1ZXVlSW5kZXhdLnJ1bigpO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgIH1cXG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcXG4gICAgICAgIGxlbiA9IHF1ZXVlLmxlbmd0aDtcXG4gICAgfVxcbiAgICBjdXJyZW50UXVldWUgPSBudWxsO1xcbiAgICBkcmFpbmluZyA9IGZhbHNlO1xcbiAgICBydW5DbGVhclRpbWVvdXQodGltZW91dCk7XFxufVxcblxcbnByb2Nlc3MubmV4dFRpY2sgPSBmdW5jdGlvbiAoZnVuKSB7XFxuICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGggLSAxKTtcXG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XFxuICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xcbiAgICAgICAgICAgIGFyZ3NbaSAtIDFdID0gYXJndW1lbnRzW2ldO1xcbiAgICAgICAgfVxcbiAgICB9XFxuICAgIHF1ZXVlLnB1c2gobmV3IEl0ZW0oZnVuLCBhcmdzKSk7XFxuICAgIGlmIChxdWV1ZS5sZW5ndGggPT09IDEgJiYgIWRyYWluaW5nKSB7XFxuICAgICAgICBydW5UaW1lb3V0KGRyYWluUXVldWUpO1xcbiAgICB9XFxufTtcXG5cXG4vLyB2OCBsaWtlcyBwcmVkaWN0aWJsZSBvYmplY3RzXFxuZnVuY3Rpb24gSXRlbShmdW4sIGFycmF5KSB7XFxuICAgIHRoaXMuZnVuID0gZnVuO1xcbiAgICB0aGlzLmFycmF5ID0gYXJyYXk7XFxufVxcbkl0ZW0ucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uICgpIHtcXG4gICAgdGhpcy5mdW4uYXBwbHkobnVsbCwgdGhpcy5hcnJheSk7XFxufTtcXG5wcm9jZXNzLnRpdGxlID0gJ2Jyb3dzZXInO1xcbnByb2Nlc3MuYnJvd3NlciA9IHRydWU7XFxucHJvY2Vzcy5lbnYgPSB7fTtcXG5wcm9jZXNzLmFyZ3YgPSBbXTtcXG5wcm9jZXNzLnZlcnNpb24gPSAnJzsgLy8gZW1wdHkgc3RyaW5nIHRvIGF2b2lkIHJlZ2V4cCBpc3N1ZXNcXG5wcm9jZXNzLnZlcnNpb25zID0ge307XFxuXFxuZnVuY3Rpb24gbm9vcCgpIHt9XFxuXFxucHJvY2Vzcy5vbiA9IG5vb3A7XFxucHJvY2Vzcy5hZGRMaXN0ZW5lciA9IG5vb3A7XFxucHJvY2Vzcy5vbmNlID0gbm9vcDtcXG5wcm9jZXNzLm9mZiA9IG5vb3A7XFxucHJvY2Vzcy5yZW1vdmVMaXN0ZW5lciA9IG5vb3A7XFxucHJvY2Vzcy5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBub29wO1xcbnByb2Nlc3MuZW1pdCA9IG5vb3A7XFxucHJvY2Vzcy5wcmVwZW5kTGlzdGVuZXIgPSBub29wO1xcbnByb2Nlc3MucHJlcGVuZE9uY2VMaXN0ZW5lciA9IG5vb3A7XFxuXFxucHJvY2Vzcy5saXN0ZW5lcnMgPSBmdW5jdGlvbiAobmFtZSkgeyByZXR1cm4gW10gfVxcblxcbnByb2Nlc3MuYmluZGluZyA9IGZ1bmN0aW9uIChuYW1lKSB7XFxuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5iaW5kaW5nIGlzIG5vdCBzdXBwb3J0ZWQnKTtcXG59O1xcblxcbnByb2Nlc3MuY3dkID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gJy8nIH07XFxucHJvY2Vzcy5jaGRpciA9IGZ1bmN0aW9uIChkaXIpIHtcXG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmNoZGlyIGlzIG5vdCBzdXBwb3J0ZWQnKTtcXG59O1xcbnByb2Nlc3MudW1hc2sgPSBmdW5jdGlvbigpIHsgcmV0dXJuIDA7IH07XFxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lNell1YW5NaUxDSnpiM1Z5WTJWeklqcGJJbmRsWW5CaFkyczZMeTh2TGk5K0wzQnliMk5sYzNNdlluSnZkM05sY2k1cWN6ODRNbVUwSWwwc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYklpOHZJSE5vYVcwZ1ptOXlJSFZ6YVc1bklIQnliMk5sYzNNZ2FXNGdZbkp2ZDNObGNseHVkbUZ5SUhCeWIyTmxjM01nUFNCdGIyUjFiR1V1Wlhod2IzSjBjeUE5SUh0OU8xeHVYRzR2THlCallXTm9aV1FnWm5KdmJTQjNhR0YwWlhabGNpQm5iRzlpWVd3Z2FYTWdjSEpsYzJWdWRDQnpieUIwYUdGMElIUmxjM1FnY25WdWJtVnljeUIwYUdGMElITjBkV0lnYVhSY2JpOHZJR1J2YmlkMElHSnlaV0ZySUhSb2FXNW5jeTRnSUVKMWRDQjNaU0J1WldWa0lIUnZJSGR5WVhBZ2FYUWdhVzRnWVNCMGNua2dZMkYwWTJnZ2FXNGdZMkZ6WlNCcGRDQnBjMXh1THk4Z2QzSmhjSEJsWkNCcGJpQnpkSEpwWTNRZ2JXOWtaU0JqYjJSbElIZG9hV05vSUdSdlpYTnVKM1FnWkdWbWFXNWxJR0Z1ZVNCbmJHOWlZV3h6TGlBZ1NYUW5jeUJwYm5OcFpHVWdZVnh1THk4Z1puVnVZM1JwYjI0Z1ltVmpZWFZ6WlNCMGNua3ZZMkYwWTJobGN5QmtaVzl3ZEdsdGFYcGxJR2x1SUdObGNuUmhhVzRnWlc1bmFXNWxjeTVjYmx4dWRtRnlJR05oWTJobFpGTmxkRlJwYldWdmRYUTdYRzUyWVhJZ1kyRmphR1ZrUTJ4bFlYSlVhVzFsYjNWME8xeHVYRzVtZFc1amRHbHZiaUJrWldaaGRXeDBVMlYwVkdsdGIzVjBLQ2tnZTF4dUlDQWdJSFJvY205M0lHNWxkeUJGY25KdmNpZ25jMlYwVkdsdFpXOTFkQ0JvWVhNZ2JtOTBJR0psWlc0Z1pHVm1hVzVsWkNjcE8xeHVmVnh1Wm5WdVkzUnBiMjRnWkdWbVlYVnNkRU5zWldGeVZHbHRaVzkxZENBb0tTQjdYRzRnSUNBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0NkamJHVmhjbFJwYldWdmRYUWdhR0Z6SUc1dmRDQmlaV1Z1SUdSbFptbHVaV1FuS1R0Y2JuMWNiaWhtZFc1amRHbHZiaUFvS1NCN1hHNGdJQ0FnZEhKNUlIdGNiaUFnSUNBZ0lDQWdhV1lnS0hSNWNHVnZaaUJ6WlhSVWFXMWxiM1YwSUQwOVBTQW5ablZ1WTNScGIyNG5LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpZV05vWldSVFpYUlVhVzFsYjNWMElEMGdjMlYwVkdsdFpXOTFkRHRjYmlBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHTmhZMmhsWkZObGRGUnBiV1Z2ZFhRZ1BTQmtaV1poZFd4MFUyVjBWR2x0YjNWME8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ2ZTQmpZWFJqYUNBb1pTa2dlMXh1SUNBZ0lDQWdJQ0JqWVdOb1pXUlRaWFJVYVcxbGIzVjBJRDBnWkdWbVlYVnNkRk5sZEZScGJXOTFkRHRjYmlBZ0lDQjlYRzRnSUNBZ2RISjVJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tIUjVjR1Z2WmlCamJHVmhjbFJwYldWdmRYUWdQVDA5SUNkbWRXNWpkR2x2YmljcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdOaFkyaGxaRU5zWldGeVZHbHRaVzkxZENBOUlHTnNaV0Z5VkdsdFpXOTFkRHRjYmlBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHTmhZMmhsWkVOc1pXRnlWR2x0Wlc5MWRDQTlJR1JsWm1GMWJIUkRiR1ZoY2xScGJXVnZkWFE3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5SUdOaGRHTm9JQ2hsS1NCN1hHNGdJQ0FnSUNBZ0lHTmhZMmhsWkVOc1pXRnlWR2x0Wlc5MWRDQTlJR1JsWm1GMWJIUkRiR1ZoY2xScGJXVnZkWFE3WEc0Z0lDQWdmVnh1ZlNBb0tTbGNibVoxYm1OMGFXOXVJSEoxYmxScGJXVnZkWFFvWm5WdUtTQjdYRzRnSUNBZ2FXWWdLR05oWTJobFpGTmxkRlJwYldWdmRYUWdQVDA5SUhObGRGUnBiV1Z2ZFhRcElIdGNiaUFnSUNBZ0lDQWdMeTl1YjNKdFlXd2daVzUyYVhKdmJXVnVkSE1nYVc0Z2MyRnVaU0J6YVhSMVlYUnBiMjV6WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJ6WlhSVWFXMWxiM1YwS0daMWJpd2dNQ2s3WEc0Z0lDQWdmVnh1SUNBZ0lDOHZJR2xtSUhObGRGUnBiV1Z2ZFhRZ2QyRnpiaWQwSUdGMllXbHNZV0pzWlNCaWRYUWdkMkZ6SUd4aGRIUmxjaUJrWldacGJtVmtYRzRnSUNBZ2FXWWdLQ2hqWVdOb1pXUlRaWFJVYVcxbGIzVjBJRDA5UFNCa1pXWmhkV3gwVTJWMFZHbHRiM1YwSUh4OElDRmpZV05vWldSVFpYUlVhVzFsYjNWMEtTQW1KaUJ6WlhSVWFXMWxiM1YwS1NCN1hHNGdJQ0FnSUNBZ0lHTmhZMmhsWkZObGRGUnBiV1Z2ZFhRZ1BTQnpaWFJVYVcxbGIzVjBPMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdjMlYwVkdsdFpXOTFkQ2htZFc0c0lEQXBPMXh1SUNBZ0lIMWNiaUFnSUNCMGNua2dlMXh1SUNBZ0lDQWdJQ0F2THlCM2FHVnVJSGRvWlc0Z2MyOXRaV0p2WkhrZ2FHRnpJSE5qY21WM1pXUWdkMmwwYUNCelpYUlVhVzFsYjNWMElHSjFkQ0J1YnlCSkxrVXVJRzFoWkdSdVpYTnpYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQmpZV05vWldSVFpYUlVhVzFsYjNWMEtHWjFiaXdnTUNrN1hHNGdJQ0FnZlNCallYUmphQ2hsS1h0Y2JpQWdJQ0FnSUNBZ2RISjVJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJRmRvWlc0Z2QyVWdZWEpsSUdsdUlFa3VSUzRnWW5WMElIUm9aU0J6WTNKcGNIUWdhR0Z6SUdKbFpXNGdaWFpoYkdWa0lITnZJRWt1UlM0Z1pHOWxjMjRuZENCMGNuVnpkQ0IwYUdVZ1oyeHZZbUZzSUc5aWFtVmpkQ0IzYUdWdUlHTmhiR3hsWkNCdWIzSnRZV3hzZVZ4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHTmhZMmhsWkZObGRGUnBiV1Z2ZFhRdVkyRnNiQ2h1ZFd4c0xDQm1kVzRzSURBcE8xeHVJQ0FnSUNBZ0lDQjlJR05oZEdOb0tHVXBlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OGdjMkZ0WlNCaGN5QmhZbTkyWlNCaWRYUWdkMmhsYmlCcGRDZHpJR0VnZG1WeWMybHZiaUJ2WmlCSkxrVXVJSFJvWVhRZ2JYVnpkQ0JvWVhabElIUm9aU0JuYkc5aVlXd2diMkpxWldOMElHWnZjaUFuZEdocGN5Y3NJR2h2Y0daMWJHeDVJRzkxY2lCamIyNTBaWGgwSUdOdmNuSmxZM1FnYjNSb1pYSjNhWE5sSUdsMElIZHBiR3dnZEdoeWIzY2dZU0JuYkc5aVlXd2daWEp5YjNKY2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQmpZV05vWldSVFpYUlVhVzFsYjNWMExtTmhiR3dvZEdocGN5d2dablZ1TENBd0tUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lIMWNibHh1WEc1OVhHNW1kVzVqZEdsdmJpQnlkVzVEYkdWaGNsUnBiV1Z2ZFhRb2JXRnlhMlZ5S1NCN1hHNGdJQ0FnYVdZZ0tHTmhZMmhsWkVOc1pXRnlWR2x0Wlc5MWRDQTlQVDBnWTJ4bFlYSlVhVzFsYjNWMEtTQjdYRzRnSUNBZ0lDQWdJQzh2Ym05eWJXRnNJR1Z1ZG1seWIyMWxiblJ6SUdsdUlITmhibVVnYzJsMGRXRjBhVzl1YzF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnWTJ4bFlYSlVhVzFsYjNWMEtHMWhjbXRsY2lrN1hHNGdJQ0FnZlZ4dUlDQWdJQzh2SUdsbUlHTnNaV0Z5VkdsdFpXOTFkQ0IzWVhOdUozUWdZWFpoYVd4aFlteGxJR0oxZENCM1lYTWdiR0YwZEdWeUlHUmxabWx1WldSY2JpQWdJQ0JwWmlBb0tHTmhZMmhsWkVOc1pXRnlWR2x0Wlc5MWRDQTlQVDBnWkdWbVlYVnNkRU5zWldGeVZHbHRaVzkxZENCOGZDQWhZMkZqYUdWa1EyeGxZWEpVYVcxbGIzVjBLU0FtSmlCamJHVmhjbFJwYldWdmRYUXBJSHRjYmlBZ0lDQWdJQ0FnWTJGamFHVmtRMnhsWVhKVWFXMWxiM1YwSUQwZ1kyeGxZWEpVYVcxbGIzVjBPMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdZMnhsWVhKVWFXMWxiM1YwS0cxaGNtdGxjaWs3WEc0Z0lDQWdmVnh1SUNBZ0lIUnllU0I3WEc0Z0lDQWdJQ0FnSUM4dklIZG9aVzRnZDJobGJpQnpiMjFsWW05a2VTQm9ZWE1nYzJOeVpYZGxaQ0IzYVhSb0lITmxkRlJwYldWdmRYUWdZblYwSUc1dklFa3VSUzRnYldGa1pHNWxjM05jYmlBZ0lDQWdJQ0FnY21WMGRYSnVJR05oWTJobFpFTnNaV0Z5VkdsdFpXOTFkQ2h0WVhKclpYSXBPMXh1SUNBZ0lIMGdZMkYwWTJnZ0tHVXBlMXh1SUNBZ0lDQWdJQ0IwY25rZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1YyaGxiaUIzWlNCaGNtVWdhVzRnU1M1RkxpQmlkWFFnZEdobElITmpjbWx3ZENCb1lYTWdZbVZsYmlCbGRtRnNaV1FnYzI4Z1NTNUZMaUJrYjJWemJpZDBJQ0IwY25WemRDQjBhR1VnWjJ4dlltRnNJRzlpYW1WamRDQjNhR1Z1SUdOaGJHeGxaQ0J1YjNKdFlXeHNlVnh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUdOaFkyaGxaRU5zWldGeVZHbHRaVzkxZEM1allXeHNLRzUxYkd3c0lHMWhjbXRsY2lrN1hHNGdJQ0FnSUNBZ0lIMGdZMkYwWTJnZ0tHVXBlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OGdjMkZ0WlNCaGN5QmhZbTkyWlNCaWRYUWdkMmhsYmlCcGRDZHpJR0VnZG1WeWMybHZiaUJ2WmlCSkxrVXVJSFJvWVhRZ2JYVnpkQ0JvWVhabElIUm9aU0JuYkc5aVlXd2diMkpxWldOMElHWnZjaUFuZEdocGN5Y3NJR2h2Y0daMWJHeDVJRzkxY2lCamIyNTBaWGgwSUdOdmNuSmxZM1FnYjNSb1pYSjNhWE5sSUdsMElIZHBiR3dnZEdoeWIzY2dZU0JuYkc5aVlXd2daWEp5YjNJdVhHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCVGIyMWxJSFpsY25OcGIyNXpJRzltSUVrdVJTNGdhR0YyWlNCa2FXWm1aWEpsYm5RZ2NuVnNaWE1nWm05eUlHTnNaV0Z5VkdsdFpXOTFkQ0IyY3lCelpYUlVhVzFsYjNWMFhHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdZMkZqYUdWa1EyeGxZWEpVYVcxbGIzVjBMbU5oYkd3b2RHaHBjeXdnYldGeWEyVnlLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDFjYmx4dVhHNWNibjFjYm5aaGNpQnhkV1YxWlNBOUlGdGRPMXh1ZG1GeUlHUnlZV2x1YVc1bklEMGdabUZzYzJVN1hHNTJZWElnWTNWeWNtVnVkRkYxWlhWbE8xeHVkbUZ5SUhGMVpYVmxTVzVrWlhnZ1BTQXRNVHRjYmx4dVpuVnVZM1JwYjI0Z1kyeGxZVzVWY0U1bGVIUlVhV05yS0NrZ2UxeHVJQ0FnSUdsbUlDZ2haSEpoYVc1cGJtY2dmSHdnSVdOMWNuSmxiblJSZFdWMVpTa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNDdYRzRnSUNBZ2ZWeHVJQ0FnSUdSeVlXbHVhVzVuSUQwZ1ptRnNjMlU3WEc0Z0lDQWdhV1lnS0dOMWNuSmxiblJSZFdWMVpTNXNaVzVuZEdncElIdGNiaUFnSUNBZ0lDQWdjWFZsZFdVZ1BTQmpkWEp5Wlc1MFVYVmxkV1V1WTI5dVkyRjBLSEYxWlhWbEtUdGNiaUFnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNCeGRXVjFaVWx1WkdWNElEMGdMVEU3WEc0Z0lDQWdmVnh1SUNBZ0lHbG1JQ2h4ZFdWMVpTNXNaVzVuZEdncElIdGNiaUFnSUNBZ0lDQWdaSEpoYVc1UmRXVjFaU2dwTzF4dUlDQWdJSDFjYm4xY2JseHVablZ1WTNScGIyNGdaSEpoYVc1UmRXVjFaU2dwSUh0Y2JpQWdJQ0JwWmlBb1pISmhhVzVwYm1jcElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdU8xeHVJQ0FnSUgxY2JpQWdJQ0IyWVhJZ2RHbHRaVzkxZENBOUlISjFibFJwYldWdmRYUW9ZMnhsWVc1VmNFNWxlSFJVYVdOcktUdGNiaUFnSUNCa2NtRnBibWx1WnlBOUlIUnlkV1U3WEc1Y2JpQWdJQ0IyWVhJZ2JHVnVJRDBnY1hWbGRXVXViR1Z1WjNSb08xeHVJQ0FnSUhkb2FXeGxLR3hsYmlrZ2UxeHVJQ0FnSUNBZ0lDQmpkWEp5Wlc1MFVYVmxkV1VnUFNCeGRXVjFaVHRjYmlBZ0lDQWdJQ0FnY1hWbGRXVWdQU0JiWFR0Y2JpQWdJQ0FnSUNBZ2QyaHBiR1VnS0NzcmNYVmxkV1ZKYm1SbGVDQThJR3hsYmlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHTjFjbkpsYm5SUmRXVjFaU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOMWNuSmxiblJSZFdWMVpWdHhkV1YxWlVsdVpHVjRYUzV5ZFc0b0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQnhkV1YxWlVsdVpHVjRJRDBnTFRFN1hHNGdJQ0FnSUNBZ0lHeGxiaUE5SUhGMVpYVmxMbXhsYm1kMGFEdGNiaUFnSUNCOVhHNGdJQ0FnWTNWeWNtVnVkRkYxWlhWbElEMGdiblZzYkR0Y2JpQWdJQ0JrY21GcGJtbHVaeUE5SUdaaGJITmxPMXh1SUNBZ0lISjFia05zWldGeVZHbHRaVzkxZENoMGFXMWxiM1YwS1R0Y2JuMWNibHh1Y0hKdlkyVnpjeTV1WlhoMFZHbGpheUE5SUdaMWJtTjBhVzl1SUNobWRXNHBJSHRjYmlBZ0lDQjJZWElnWVhKbmN5QTlJRzVsZHlCQmNuSmhlU2hoY21kMWJXVnVkSE11YkdWdVozUm9JQzBnTVNrN1hHNGdJQ0FnYVdZZ0tHRnlaM1Z0Wlc1MGN5NXNaVzVuZEdnZ1BpQXhLU0I3WEc0Z0lDQWdJQ0FnSUdadmNpQW9kbUZ5SUdrZ1BTQXhPeUJwSUR3Z1lYSm5kVzFsYm5SekxteGxibWQwYURzZ2FTc3JLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmhjbWR6VzJrZ0xTQXhYU0E5SUdGeVozVnRaVzUwYzF0cFhUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lIMWNiaUFnSUNCeGRXVjFaUzV3ZFhOb0tHNWxkeUJKZEdWdEtHWjFiaXdnWVhKbmN5a3BPMXh1SUNBZ0lHbG1JQ2h4ZFdWMVpTNXNaVzVuZEdnZ1BUMDlJREVnSmlZZ0lXUnlZV2x1YVc1bktTQjdYRzRnSUNBZ0lDQWdJSEoxYmxScGJXVnZkWFFvWkhKaGFXNVJkV1YxWlNrN1hHNGdJQ0FnZlZ4dWZUdGNibHh1THk4Z2RqZ2diR2xyWlhNZ2NISmxaR2xqZEdsaWJHVWdiMkpxWldOMGMxeHVablZ1WTNScGIyNGdTWFJsYlNobWRXNHNJR0Z5Y21GNUtTQjdYRzRnSUNBZ2RHaHBjeTVtZFc0Z1BTQm1kVzQ3WEc0Z0lDQWdkR2hwY3k1aGNuSmhlU0E5SUdGeWNtRjVPMXh1ZlZ4dVNYUmxiUzV3Y205MGIzUjVjR1V1Y25WdUlEMGdablZ1WTNScGIyNGdLQ2tnZTF4dUlDQWdJSFJvYVhNdVpuVnVMbUZ3Y0d4NUtHNTFiR3dzSUhSb2FYTXVZWEp5WVhrcE8xeHVmVHRjYm5CeWIyTmxjM011ZEdsMGJHVWdQU0FuWW5KdmQzTmxjaWM3WEc1d2NtOWpaWE56TG1KeWIzZHpaWElnUFNCMGNuVmxPMXh1Y0hKdlkyVnpjeTVsYm5ZZ1BTQjdmVHRjYm5CeWIyTmxjM011WVhKbmRpQTlJRnRkTzF4dWNISnZZMlZ6Y3k1MlpYSnphVzl1SUQwZ0p5YzdJQzh2SUdWdGNIUjVJSE4wY21sdVp5QjBieUJoZG05cFpDQnlaV2RsZUhBZ2FYTnpkV1Z6WEc1d2NtOWpaWE56TG5abGNuTnBiMjV6SUQwZ2UzMDdYRzVjYm1aMWJtTjBhVzl1SUc1dmIzQW9LU0I3ZlZ4dVhHNXdjbTlqWlhOekxtOXVJRDBnYm05dmNEdGNibkJ5YjJObGMzTXVZV1JrVEdsemRHVnVaWElnUFNCdWIyOXdPMXh1Y0hKdlkyVnpjeTV2Ym1ObElEMGdibTl2Y0R0Y2JuQnliMk5sYzNNdWIyWm1JRDBnYm05dmNEdGNibkJ5YjJObGMzTXVjbVZ0YjNabFRHbHpkR1Z1WlhJZ1BTQnViMjl3TzF4dWNISnZZMlZ6Y3k1eVpXMXZkbVZCYkd4TWFYTjBaVzVsY25NZ1BTQnViMjl3TzF4dWNISnZZMlZ6Y3k1bGJXbDBJRDBnYm05dmNEdGNibkJ5YjJObGMzTXVjSEpsY0dWdVpFeHBjM1JsYm1WeUlEMGdibTl2Y0R0Y2JuQnliMk5sYzNNdWNISmxjR1Z1WkU5dVkyVk1hWE4wWlc1bGNpQTlJRzV2YjNBN1hHNWNibkJ5YjJObGMzTXViR2x6ZEdWdVpYSnpJRDBnWm5WdVkzUnBiMjRnS0c1aGJXVXBJSHNnY21WMGRYSnVJRnRkSUgxY2JseHVjSEp2WTJWemN5NWlhVzVrYVc1bklEMGdablZ1WTNScGIyNGdLRzVoYldVcElIdGNiaUFnSUNCMGFISnZkeUJ1WlhjZ1JYSnliM0lvSjNCeWIyTmxjM011WW1sdVpHbHVaeUJwY3lCdWIzUWdjM1Z3Y0c5eWRHVmtKeWs3WEc1OU8xeHVYRzV3Y205alpYTnpMbU4zWkNBOUlHWjFibU4wYVc5dUlDZ3BJSHNnY21WMGRYSnVJQ2N2SnlCOU8xeHVjSEp2WTJWemN5NWphR1JwY2lBOUlHWjFibU4wYVc5dUlDaGthWElwSUh0Y2JpQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9KM0J5YjJObGMzTXVZMmhrYVhJZ2FYTWdibTkwSUhOMWNIQnZjblJsWkNjcE8xeHVmVHRjYm5CeWIyTmxjM011ZFcxaGMyc2dQU0JtZFc1amRHbHZiaWdwSUhzZ2NtVjBkWEp1SURBN0lIMDdYRzVjYmx4dVhHNHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OWNiaTh2SUZkRlFsQkJRMHNnUms5UFZFVlNYRzR2THlBdUwzNHZjSEp2WTJWemN5OWljbTkzYzJWeUxtcHpYRzR2THlCdGIyUjFiR1VnYVdRZ1BTQXpObHh1THk4Z2JXOWtkV3hsSUdOb2RXNXJjeUE5SURBaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3lJc0luTnZkWEpqWlZKdmIzUWlPaUlpZlE9PVwiKTtcblxuLyoqKi8gfSksXG4vKiAzNyAqL1xuLyogbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9cbi8qIGFsbCBleHBvcnRzIHVzZWQgKi9cbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL34vcmFtZGEvc3JjL2ludGVybmFsL19pc0FycmF5LmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbmV2YWwoXCIvKipcXG4gKiBUZXN0cyB3aGV0aGVyIG9yIG5vdCBhbiBvYmplY3QgaXMgYW4gYXJyYXkuXFxuICpcXG4gKiBAcHJpdmF0ZVxcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSBvYmplY3QgdG8gdGVzdC5cXG4gKiBAcmV0dXJuIHtCb29sZWFufSBgdHJ1ZWAgaWYgYHZhbGAgaXMgYW4gYXJyYXksIGBmYWxzZWAgb3RoZXJ3aXNlLlxcbiAqIEBleGFtcGxlXFxuICpcXG4gKiAgICAgIF9pc0FycmF5KFtdKTsgLy89PiB0cnVlXFxuICogICAgICBfaXNBcnJheShudWxsKTsgLy89PiBmYWxzZVxcbiAqICAgICAgX2lzQXJyYXkoe30pOyAvLz0+IGZhbHNlXFxuICovXFxubW9kdWxlLmV4cG9ydHMgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uIF9pc0FycmF5KHZhbCkge1xcbiAgcmV0dXJuICh2YWwgIT0gbnVsbCAmJlxcbiAgICAgICAgICB2YWwubGVuZ3RoID49IDAgJiZcXG4gICAgICAgICAgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEFycmF5XScpO1xcbn07XFxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lNemN1YW5NaUxDSnpiM1Z5WTJWeklqcGJJbmRsWW5CaFkyczZMeTh2TGk5K0wzSmhiV1JoTDNOeVl5OXBiblJsY201aGJDOWZhWE5CY25KaGVTNXFjejlpTm1NM0lsMHNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJaThxS2x4dUlDb2dWR1Z6ZEhNZ2QyaGxkR2hsY2lCdmNpQnViM1FnWVc0Z2IySnFaV04wSUdseklHRnVJR0Z5Y21GNUxseHVJQ3BjYmlBcUlFQndjbWwyWVhSbFhHNGdLaUJBY0dGeVlXMGdleXA5SUhaaGJDQlVhR1VnYjJKcVpXTjBJSFJ2SUhSbGMzUXVYRzRnS2lCQWNtVjBkWEp1SUh0Q2IyOXNaV0Z1ZlNCZ2RISjFaV0FnYVdZZ1lIWmhiR0FnYVhNZ1lXNGdZWEp5WVhrc0lHQm1ZV3h6WldBZ2IzUm9aWEozYVhObExseHVJQ29nUUdWNFlXMXdiR1ZjYmlBcVhHNGdLaUFnSUNBZ0lGOXBjMEZ5Y21GNUtGdGRLVHNnTHk4OVBpQjBjblZsWEc0Z0tpQWdJQ0FnSUY5cGMwRnljbUY1S0c1MWJHd3BPeUF2THowK0lHWmhiSE5sWEc0Z0tpQWdJQ0FnSUY5cGMwRnljbUY1S0h0OUtUc2dMeTg5UGlCbVlXeHpaVnh1SUNvdlhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlFRnljbUY1TG1selFYSnlZWGtnZkh3Z1puVnVZM1JwYjI0Z1gybHpRWEp5WVhrb2RtRnNLU0I3WEc0Z0lISmxkSFZ5YmlBb2RtRnNJQ0U5SUc1MWJHd2dKaVpjYmlBZ0lDQWdJQ0FnSUNCMllXd3ViR1Z1WjNSb0lENDlJREFnSmlaY2JpQWdJQ0FnSUNBZ0lDQlBZbXBsWTNRdWNISnZkRzkwZVhCbExuUnZVM1J5YVc1bkxtTmhiR3dvZG1Gc0tTQTlQVDBnSjF0dlltcGxZM1FnUVhKeVlYbGRKeWs3WEc1OU8xeHVYRzVjYmx4dUx5OHZMeTh2THk4dkx5OHZMeTh2THk4dlhHNHZMeUJYUlVKUVFVTkxJRVpQVDFSRlVseHVMeThnTGk5K0wzSmhiV1JoTDNOeVl5OXBiblJsY201aGJDOWZhWE5CY25KaGVTNXFjMXh1THk4Z2JXOWtkV3hsSUdsa0lEMGdNemRjYmk4dklHMXZaSFZzWlNCamFIVnVhM01nUFNBd0lsMHNJbTFoY0hCcGJtZHpJam9pUVVGQlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk95SXNJbk52ZFhKalpWSnZiM1FpT2lJaWZRPT1cIik7XG5cbi8qKiovIH0pLFxuLyogMzggKi9cbi8qIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKiBhbGwgZXhwb3J0cyB1c2VkICovXG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL3V0aWxzL3V0aWxzLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbmV2YWwoXCJcXG5cXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXFxcIl9fZXNNb2R1bGVcXFwiLCB7XFxuXFx0XFx0dmFsdWU6IHRydWVcXG59KTtcXG5cXG52YXIgX3NwbGl0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgcmFtZGEvc3JjL3NwbGl0ICovIDE4OSk7XFxuXFxudmFyIF9zcGxpdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zcGxpdCk7XFxuXFxudmFyIF9yZWR1Y2UgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISByYW1kYS9zcmMvcmVkdWNlICovIDI2KTtcXG5cXG52YXIgX3JlZHVjZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWR1Y2UpO1xcblxcbnZhciBfbWFwID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgcmFtZGEvc3JjL21hcCAqLyA4KTtcXG5cXG52YXIgX21hcDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9tYXApO1xcblxcbnZhciBfcmVwbGFjZSA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIHJhbWRhL3NyYy9yZXBsYWNlICovIDE4Nik7XFxuXFxudmFyIF9yZXBsYWNlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlcGxhY2UpO1xcblxcbnZhciBfY29tcG9zZSA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIHJhbWRhL3NyYy9jb21wb3NlICovIDEzKTtcXG5cXG52YXIgX2NvbXBvc2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY29tcG9zZSk7XFxuXFxudmFyIF90b0NvbnN1bWFibGVBcnJheTIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISBiYWJlbC1ydW50aW1lL2hlbHBlcnMvdG9Db25zdW1hYmxlQXJyYXkgKi8gODApO1xcblxcbnZhciBfdG9Db25zdW1hYmxlQXJyYXkzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdG9Db25zdW1hYmxlQXJyYXkyKTtcXG5cXG52YXIgX2N1cnJ5ID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgcmFtZGEvc3JjL2N1cnJ5ICovIDI0KTtcXG5cXG52YXIgX2N1cnJ5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2N1cnJ5KTtcXG5cXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxcblxcbnZhciBVdGlscyA9IHt9O1xcblxcbmV4cG9ydHMuZGVmYXVsdCA9IFV0aWxzO1xcblxcblxcbnZhciBnZW9tZXRyaWVzID0ge1xcblxcdFxcdCcxJzogJ1xcXCJwb2ludFxcXCInLFxcblxcdFxcdCcyJzogJ1xcXCJsaW5lXFxcIicsXFxuXFx0XFx0JzMnOiAnXFxcInBvbHlnb25cXFwiJ1xcbn07XFxuXFxuVXRpbHMuY3VycnlDb21wb3NlMyA9IGZ1bmN0aW9uIChjb21wb3NlKSB7XFxuXFx0XFx0cmV0dXJuICgwLCBfY3VycnkyLmRlZmF1bHQpKGZ1bmN0aW9uIChhLCBiLCBjKSB7XFxuXFx0XFx0XFx0XFx0cmV0dXJuIGNvbXBvc2UoYSwgYiwgYyk7XFxuXFx0XFx0fSk7XFxufTtcXG5cXG5VdGlscy53cmFwQ29kZUluRnVuY3Rpb24gPSBmdW5jdGlvbiAoaW5uZXJDb2RlKSB7XFxuXFx0XFx0dmFyIGF0dHIgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IFsnICddO1xcblxcblxcdFxcdGF0dHIgPSBhdHRyLmpvaW4oJywnKTtcXG5cXG5cXHRcXHRyZXR1cm4gKCdmdW5jdGlvbiAoJyArIGF0dHIgKyAnKSB7XFxcXG5cXFxcdFxcXFx0XFxcXHRcXFxcdHZhciBfdmFsdWUgPSBudWxsO1xcXFxuXFxcXHRcXFxcdFxcXFx0XFxcXHQnICsgaW5uZXJDb2RlICsgJ1xcXFxuXFxcXHRcXFxcdFxcXFx0XFxcXHRyZXR1cm4gX3ZhbHVlO1xcXFxuXFxcXHRcXFxcdFxcXFx0fScpLnJlcGxhY2UoLyhcXFxcdCkvZywgJycpO1xcbn07XFxuXFxuVXRpbHMuZnVuY3Rpb25TdHJpbmcgPSBmdW5jdGlvbiAoZm4pIHtcXG5cXHRcXHR2YXIgYXJncyA9IGZuLnN1YnN0cmluZyhmbi5pbmRleE9mKCcoJykgKyAxLCBmbi5pbmRleE9mKCcpJykpLnJlcGxhY2UoL1xcXFxzL2csICcnKTtcXG5cXG5cXHRcXHRhcmdzID0gYXJncyA/IGFyZ3Muc3BsaXQoJywnKSA6IFtdO1xcblxcblxcdFxcdHZhciBib2R5ID0gZm4uc3Vic3RyaW5nKGZuLmluZGV4T2YoJ3snKSArIDEsIGZuLmxhc3RJbmRleE9mKCd9JykpO1xcblxcdFxcdHZhciBmdW5jID0gbmV3IChGdW5jdGlvbi5wcm90b3R5cGUuYmluZC5hcHBseShGdW5jdGlvbiwgW251bGxdLmNvbmNhdCgoMCwgX3RvQ29uc3VtYWJsZUFycmF5My5kZWZhdWx0KShhcmdzKSwgW2JvZHldKSkpKCk7XFxuXFxuXFx0XFx0ZnVuYy50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcXG5cXHRcXHRcXHRcXHRyZXR1cm4gZm47XFxuXFx0XFx0fTtcXG5cXG5cXHRcXHRyZXR1cm4gZnVuYztcXG59O1xcblxcblV0aWxzLnRyYW5zcGlsZTJUYW5ncmFtID0gKDAsIF9jb21wb3NlMi5kZWZhdWx0KSgoMCwgX3JlcGxhY2UyLmRlZmF1bHQpKC9jdHguem9vbS9nLCAnJHpvb20nKSwgKDAsIF9yZXBsYWNlMi5kZWZhdWx0KSgvZGF0YVxcXFxbL2csICdmZWF0dXJlWycpLCAoMCwgX3JlcGxhY2UyLmRlZmF1bHQpKC9kYXRhXFxcXFsnbWFwbmlrOjpnZW9tZXRyeV90eXBlJ1xcXFxdID09PSAoXFxcXGQpL2csIGZ1bmN0aW9uICgkMCwgJDEpIHtcXG5cXHRcXHRyZXR1cm4gJyRnZW9tZXRyeSA9PT0gJyArIGdlb21ldHJpZXNbJDFdO1xcbn0pKTtcXG5cXG5VdGlscy5idWlsZENDU1NGbiA9IGZ1bmN0aW9uIChqcywgYXR0cikge1xcblxcdFxcdHZhciBmbiA9ICcnO1xcblxcblxcdFxcdGZvciAodmFyIGkgPSAwOyBpIDwganMubGVuZ3RoOyBpKyspIHtcXG5cXHRcXHRcXHRcXHRmbiArPSBVdGlscy50cmFuc3BpbGUyVGFuZ3JhbShqc1tpXSk7XFxuXFx0XFx0fVxcblxcblxcdFxcdHJldHVybiBVdGlscy5mdW5jdGlvblN0cmluZyhVdGlscy53cmFwQ29kZUluRnVuY3Rpb24oZm4sIGF0dHIpKTtcXG59O1xcblxcblV0aWxzLmNsZWFuRm9yRXhlY3V0aW5nID0gKDAsIF9yZXBsYWNlMi5kZWZhdWx0KSgvZGF0YVxcXFxbJy4qJ1xcXFxdICg9PT18Pnw8fD49fDw9KSAoJz8oLispKD89J3xcXFxcKXwgJiYpKS9nLCAndHJ1ZScpO1xcblxcblV0aWxzLmJ1aWxkQW5kRXhlY3V0ZUZuID0gZnVuY3Rpb24gKGpzKSB7XFxuXFx0XFx0cmV0dXJuIFV0aWxzLmJ1aWxkQ0NTU0ZuKCgwLCBfbWFwMi5kZWZhdWx0KShVdGlscy5jbGVhbkZvckV4ZWN1dGluZywganMpLCBbJyR6b29tJ10pKDEwKTtcXG59O1xcblxcblV0aWxzLmdlbmVyYXRlRGVmYXVsdCA9IGZ1bmN0aW9uICh2YWwpIHtcXG5cXHRcXHRyZXR1cm4gJ3JldHVybiAnICsgdmFsICsgJzsnO1xcbn07XFxuXFxuVXRpbHMucGljayA9ICgwLCBfY3VycnkyLmRlZmF1bHQpKGZ1bmN0aW9uIChwYXRoLCBvYmopIHtcXG5cXHRcXHRyZXR1cm4gKDAsIF9yZWR1Y2UyLmRlZmF1bHQpKGZ1bmN0aW9uIChhY2N1bXVsYXRvciwga2V5KSB7XFxuXFx0XFx0XFx0XFx0cmV0dXJuIGFjY3VtdWxhdG9yW2tleV07XFxuXFx0XFx0fSwgb2JqLCAoMCwgX3NwbGl0Mi5kZWZhdWx0KSgnLicsIHBhdGgpKTtcXG59KTsvLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaU16Z3Vhbk1pTENKemIzVnlZMlZ6SWpwYkluZGxZbkJoWTJzNkx5OHZjM0pqTDNWMGFXeHpMM1YwYVd4ekxtcHpQMkpsTnpNaVhTd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lhVzF3YjNKMElIc2dZM1Z5Y25rc0lHTnZiWEJ2YzJVc0lISmxjR3hoWTJVc0lISmxaSFZqWlN3Z2MzQnNhWFFzSUcxaGNDQjlJR1p5YjIwZ0ozSmhiV1JoSnp0Y2JseHVkbUZ5SUZWMGFXeHpJRDBnZTMwN1hHNWNibVY0Y0c5eWRDQmtaV1poZFd4MElGVjBhV3h6TzF4dVhHNWpiMjV6ZENCblpXOXRaWFJ5YVdWeklEMGdlMXh1SUNBbk1TYzZJQ2RjSW5CdmFXNTBYQ0luTEZ4dUlDQW5NaWM2SUNkY0lteHBibVZjSWljc1hHNGdJQ2N6SnpvZ0oxd2ljRzlzZVdkdmJsd2lKMXh1ZlR0Y2JseHVWWFJwYkhNdVkzVnljbmxEYjIxd2IzTmxNeUE5SUdaMWJtTjBhVzl1SUNoamIyMXdiM05sS1NCN1hHNGdJSEpsZEhWeWJpQmpkWEp5ZVNnb1lTeGlMR01wSUQwK0lHTnZiWEJ2YzJVb1lTeGlMR01wS1R0Y2JuMDdYRzVjYmxWMGFXeHpMbmR5WVhCRGIyUmxTVzVHZFc1amRHbHZiaUE5SUdaMWJtTjBhVzl1S0dsdWJtVnlRMjlrWlN3Z1lYUjBjaUE5SUZzbklDZGRLU0I3WEc1Y2RHRjBkSElnUFNCaGRIUnlMbXB2YVc0b0p5d25LVHRjYmx4dVhIUnlaWFIxY200Z1lHWjFibU4wYVc5dUlDZ2tlMkYwZEhKOUtTQjdYRzVjZEZ4MFhIUmNkSFpoY2lCZmRtRnNkV1VnUFNCdWRXeHNPMXh1WEhSY2RGeDBYSFFrZTJsdWJtVnlRMjlrWlgxY2JseDBYSFJjZEZ4MGNtVjBkWEp1SUY5MllXeDFaVHRjYmx4MFhIUmNkSDFnTG5KbGNHeGhZMlVvTHloY1hIUXBMMmNzSUNjbktUdGNibjA3WEc1Y2JsVjBhV3h6TG1aMWJtTjBhVzl1VTNSeWFXNW5JRDBnWm5WdVkzUnBiMjRvWm00cElIdGNibHgwYkdWMElHRnlaM01nUFNCbWJseHVYSFJjZEZ4MExuTjFZbk4wY21sdVp5Z2dabTR1YVc1a1pYaFBaaWduS0NjcElDc2dNU3dnWm00dWFXNWtaWGhQWmlnbktTY3BJQ2xjYmx4MFhIUmNkQzV5WlhCc1lXTmxLQzljWEhNdlp5d2dKeWNwTzF4dVhHNWNkR0Z5WjNNZ1BTQmhjbWR6SUQ4Z1lYSm5jeTV6Y0d4cGRDZ25MQ2NwSURvZ1cxMDdYRzVjYmx4MGJHVjBJR0p2WkhrZ1BTQm1iaTV6ZFdKemRISnBibWNvSUdadUxtbHVaR1Y0VDJZb0ozc25LU0FySURFc0lHWnVMbXhoYzNSSmJtUmxlRTltS0NkOUp5a3BPMXh1WEhSc1pYUWdablZ1WXlBOUlHNWxkeUJHZFc1amRHbHZiaWd1TGk1aGNtZHpMQ0JpYjJSNUtUdGNibHh1WEhSbWRXNWpMblJ2VTNSeWFXNW5JRDBnWm5WdVkzUnBiMjRvS1NCN1hHNWNkRngwY21WMGRYSnVJR1p1TzF4dVhIUjlPMXh1WEc1Y2RISmxkSFZ5YmlCbWRXNWpPMXh1ZlR0Y2JseHVWWFJwYkhNdWRISmhibk53YVd4bE1sUmhibWR5WVcwZ1BTQmpiMjF3YjNObEtGeHVJQ0J5WlhCc1lXTmxLQzlqZEhndWVtOXZiUzluTENBbkpIcHZiMjBuS1N4Y2JpQWdjbVZ3YkdGalpTZ3ZaR0YwWVZ4Y1d5OW5MQ0FuWm1WaGRIVnlaVnNuS1N4Y2JpQWdjbVZ3YkdGalpTZ3ZaR0YwWVZ4Y1d5ZHRZWEJ1YVdzNk9tZGxiMjFsZEhKNVgzUjVjR1VuWEZ4ZElEMDlQU0FvWEZ4a0tTOW5MQ0FvSkRBc0lDUXhLU0E5UGlCN1hHNGdJQ0FnY21WMGRYSnVJQ2NrWjJWdmJXVjBjbmtnUFQwOUlDY2dLeUJuWlc5dFpYUnlhV1Z6V3lReFhUdGNiaUFnZlNsY2JpazdYRzVjYmxWMGFXeHpMbUoxYVd4a1EwTlRVMFp1SUQwZ1puVnVZM1JwYjI0b2FuTXNJR0YwZEhJcElIdGNibHgwYkdWMElHWnVJRDBnSnljN1hHNWNibHgwWm05eUlDaDJZWElnYVNBOUlEQTdJR2tnUENCcWN5NXNaVzVuZEdnN0lHa3JLeWtnZTF4dVhIUmNkR1p1SUNzOUlGVjBhV3h6TG5SeVlXNXpjR2xzWlRKVVlXNW5jbUZ0S0dwelcybGRLVHRjYmx4MGZWeHVYRzVjZEhKbGRIVnliaUJWZEdsc2N5NW1kVzVqZEdsdmJsTjBjbWx1WnloVmRHbHNjeTUzY21Gd1EyOWtaVWx1Um5WdVkzUnBiMjRvWm00c0lHRjBkSElwS1R0Y2JuMDdYRzVjYmxWMGFXeHpMbU5zWldGdVJtOXlSWGhsWTNWMGFXNW5JRDBnY21Wd2JHRmpaU2d2WkdGMFlWeGNXeWN1S2lkY1hGMGdLRDA5UFh3K2ZEeDhQajE4UEQwcElDZ25QeWd1S3lrb1B6MG5mRnhjS1h3Z0ppWXBLUzluTENBbmRISjFaU2NwTzF4dVhHNVZkR2xzY3k1aWRXbHNaRUZ1WkVWNFpXTjFkR1ZHYmlBOUlDQm1kVzVqZEdsdmJpQW9hbk1wSUh0Y2JpQWdjbVYwZFhKdUlGVjBhV3h6TG1KMWFXeGtRME5UVTBadUtGeHVJQ0FnSUcxaGNDaGNiaUFnSUNBZ0lGVjBhV3h6TG1Oc1pXRnVSbTl5UlhobFkzVjBhVzVuTEZ4dUlDQWdJQ0FnYW5OY2JpQWdJQ0FnSUNrc1hHNGdJQ0FnSUNCYkp5UjZiMjl0SjExY2JpQWdJQ0FwS0RFd0tUdGNibjA3WEc1Y2JsVjBhV3h6TG1kbGJtVnlZWFJsUkdWbVlYVnNkQ0E5SUdaMWJtTjBhVzl1S0haaGJDa2dlMXh1WEhSeVpYUjFjbTRnWUhKbGRIVnliaUFrZTNaaGJIMDdZRHRjYm4wN1hHNWNibFYwYVd4ekxuQnBZMnNnUFNCamRYSnllU2dvY0dGMGFDd2diMkpxS1NBOVBpQjdYRzRnSUhKbGRIVnliaUJ5WldSMVkyVW9LR0ZqWTNWdGRXeGhkRzl5TENCclpYa3BJRDArSUh0Y2JpQWdJQ0J5WlhSMWNtNGdZV05qZFcxMWJHRjBiM0piYTJWNVhUdGNiaUFnZlN3Z2IySnFMQ0J6Y0d4cGRDZ25MaWNzSUhCaGRHZ3BLVHRjYm4wcE8xeHVYRzVjYmx4dUx5OGdWMFZDVUVGRFN5QkdUMDlVUlZJZ0x5OWNiaTh2SUhOeVl5OTFkR2xzY3k5MWRHbHNjeTVxY3lKZExDSnRZWEJ3YVc1bmN5STZJanM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVUZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCU0VFN1FVRkRRVHRCUVV0Qk8wRkJRMEU3UVVGQlFUdEJRVUZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUVVFN1FVRkRRVHRCUVVGQk8wRkJRMEU3UVVGRFFUdEJRVXRCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkhRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVWxCTzBGQlEwRTdRVUZEUVR0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGUFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CSWl3aWMyOTFjbU5sVW05dmRDSTZJaUo5XCIpO1xuXG4vKioqLyB9KSxcbi8qIDM5ICovXG4vKiBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyogYWxsIGV4cG9ydHMgdXNlZCAqL1xuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vfi9jYXJ0by9wYWNrYWdlLmpzb24gKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuZXZhbChcIm1vZHVsZS5leHBvcnRzID0ge1xcblxcdFxcXCJuYW1lXFxcIjogXFxcImNhcnRvXFxcIixcXG5cXHRcXFwidmVyc2lvblxcXCI6IFxcXCIwLjE1LjEtY2RiM1xcXCIsXFxuXFx0XFxcImRlc2NyaXB0aW9uXFxcIjogXFxcIkNhcnRvQ1NTIFN0eWxlc2hlZXQgQ29tcGlsZXJcXFwiLFxcblxcdFxcXCJ1cmxcXFwiOiBcXFwiaHR0cHM6Ly9naXRodWIuY29tL2NhcnRvZGIvY2FydG9cXFwiLFxcblxcdFxcXCJyZXBvc2l0b3J5XFxcIjoge1xcblxcdFxcdFxcXCJ0eXBlXFxcIjogXFxcImdpdFxcXCIsXFxuXFx0XFx0XFxcInVybFxcXCI6IFxcXCJodHRwOi8vZ2l0aHViLmNvbS9jYXJ0b2RiL2NhcnRvLmdpdFxcXCJcXG5cXHR9LFxcblxcdFxcXCJhdXRob3JcXFwiOiB7XFxuXFx0XFx0XFxcIm5hbWVcXFwiOiBcXFwiQ2FydG9EQlxcXCIsXFxuXFx0XFx0XFxcInVybFxcXCI6IFxcXCJodHRwOi8vY2FydG9kYi5jb20vXFxcIlxcblxcdH0sXFxuXFx0XFxcImtleXdvcmRzXFxcIjogW1xcblxcdFxcdFxcXCJtYXBzXFxcIixcXG5cXHRcXHRcXFwiY3NzXFxcIixcXG5cXHRcXHRcXFwic3R5bGVzaGVldHNcXFwiXFxuXFx0XSxcXG5cXHRcXFwiY29udHJpYnV0b3JzXFxcIjogW1xcblxcdFxcdFxcXCJUb20gTWFjV3JpZ2h0IDxtYWN3cmlnaHRAZ21haWwuY29tPlxcXCIsXFxuXFx0XFx0XFxcIktvbnN0YW50aW4gS8OkZmVyXFxcIixcXG5cXHRcXHRcXFwiQWxleGlzIFNlbGxpZXIgPHNlbGZAY2xvdWRoZWFkLm5ldD5cXFwiLFxcblxcdFxcdFxcXCJSYXVsIE9jaG9hIDxyb2Nob2FAY2FydG9kYi5jb20+XFxcIixcXG5cXHRcXHRcXFwiSmF2aSBTYW50YW5hIDxqc2FudGFuYUBjYXJ0b2RiLmNvbT5cXFwiXFxuXFx0XSxcXG5cXHRcXFwibGljZW5zZXNcXFwiOiBbXFxuXFx0XFx0e1xcblxcdFxcdFxcdFxcXCJ0eXBlXFxcIjogXFxcIkFwYWNoZVxcXCJcXG5cXHRcXHR9XFxuXFx0XSxcXG5cXHRcXFwiYmluXFxcIjoge1xcblxcdFxcdFxcXCJjYXJ0b1xcXCI6IFxcXCIuL2Jpbi9jYXJ0b1xcXCJcXG5cXHR9LFxcblxcdFxcXCJtYW5cXFwiOiBcXFwiLi9tYW4vY2FydG8uMVxcXCIsXFxuXFx0XFxcIm1haW5cXFwiOiBcXFwiLi9saWIvY2FydG8vaW5kZXhcXFwiLFxcblxcdFxcXCJlbmdpbmVzXFxcIjoge1xcblxcdFxcdFxcXCJub2RlXFxcIjogXFxcIj49MC40LnhcXFwiXFxuXFx0fSxcXG5cXHRcXFwiZGVwZW5kZW5jaWVzXFxcIjoge1xcblxcdFxcdFxcXCJ1bmRlcnNjb3JlXFxcIjogXFxcIjEuOC4zXFxcIixcXG5cXHRcXHRcXFwibWFwbmlrLXJlZmVyZW5jZVxcXCI6IFxcXCJ+Ni4wLjJcXFwiLFxcblxcdFxcdFxcXCJvcHRpbWlzdFxcXCI6IFxcXCJ+MC42LjBcXFwiXFxuXFx0fSxcXG5cXHRcXFwiZGV2RGVwZW5kZW5jaWVzXFxcIjoge1xcblxcdFxcdFxcXCJtb2NoYVxcXCI6IFxcXCIxLjEyLnhcXFwiLFxcblxcdFxcdFxcXCJqc2hpbnRcXFwiOiBcXFwiMC4yLnhcXFwiLFxcblxcdFxcdFxcXCJzYXhcXFwiOiBcXFwiMC4xLnhcXFwiLFxcblxcdFxcdFxcXCJpc3RhbmJ1bFxcXCI6IFxcXCJ+MC4yLjE0XFxcIixcXG5cXHRcXHRcXFwiY292ZXJhbGxzXFxcIjogXFxcIn4yLjEwLjFcXFwiLFxcblxcdFxcdFxcXCJicm93c2VyaWZ5XFxcIjogXFxcIn43LjAuMFxcXCIsXFxuXFx0XFx0XFxcInVnbGlmeS1qc1xcXCI6IFxcXCIxLjMuM1xcXCJcXG5cXHR9LFxcblxcdFxcXCJzY3JpcHRzXFxcIjoge1xcblxcdFxcdFxcXCJwcmV0ZXN0XFxcIjogXFxcIm5wbSBpbnN0YWxsXFxcIixcXG5cXHRcXHRcXFwidGVzdFxcXCI6IFxcXCJtb2NoYSAtUiBzcGVjXFxcIixcXG5cXHRcXHRcXFwiY292ZXJhZ2VcXFwiOiBcXFwiaXN0YW5idWwgY292ZXIgLi9ub2RlX21vZHVsZXMvLmJpbi9fbW9jaGEgJiYgY292ZXJhbGxzIDwgLi9jb3ZlcmFnZS9sY292LmluZm9cXFwiXFxuXFx0fVxcbn07Ly8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lNemt1YW5NaUxDSnpiM1Z5WTJWeklqcGJJbmRsWW5CaFkyczZMeTh2TGk5K0wyTmhjblJ2TDNCaFkydGhaMlV1YW5OdmJqODVZbUV5SWwwc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYkltMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ2UxeHVYSFJjSW01aGJXVmNJam9nWENKallYSjBiMXdpTEZ4dVhIUmNJblpsY25OcGIyNWNJam9nWENJd0xqRTFMakV0WTJSaU0xd2lMRnh1WEhSY0ltUmxjMk55YVhCMGFXOXVYQ0k2SUZ3aVEyRnlkRzlEVTFNZ1UzUjViR1Z6YUdWbGRDQkRiMjF3YVd4bGNsd2lMRnh1WEhSY0luVnliRndpT2lCY0ltaDBkSEJ6T2k4dloybDBhSFZpTG1OdmJTOWpZWEowYjJSaUwyTmhjblJ2WENJc1hHNWNkRndpY21Wd2IzTnBkRzl5ZVZ3aU9pQjdYRzVjZEZ4MFhDSjBlWEJsWENJNklGd2laMmwwWENJc1hHNWNkRngwWENKMWNteGNJam9nWENKb2RIUndPaTh2WjJsMGFIVmlMbU52YlM5allYSjBiMlJpTDJOaGNuUnZMbWRwZEZ3aVhHNWNkSDBzWEc1Y2RGd2lZWFYwYUc5eVhDSTZJSHRjYmx4MFhIUmNJbTVoYldWY0lqb2dYQ0pEWVhKMGIwUkNYQ0lzWEc1Y2RGeDBYQ0oxY214Y0lqb2dYQ0pvZEhSd09pOHZZMkZ5ZEc5a1lpNWpiMjB2WENKY2JseDBmU3hjYmx4MFhDSnJaWGwzYjNKa2Mxd2lPaUJiWEc1Y2RGeDBYQ0p0WVhCelhDSXNYRzVjZEZ4MFhDSmpjM05jSWl4Y2JseDBYSFJjSW5OMGVXeGxjMmhsWlhSelhDSmNibHgwWFN4Y2JseDBYQ0pqYjI1MGNtbGlkWFJ2Y25OY0lqb2dXMXh1WEhSY2RGd2lWRzl0SUUxaFkxZHlhV2RvZENBOGJXRmpkM0pwWjJoMFFHZHRZV2xzTG1OdmJUNWNJaXhjYmx4MFhIUmNJa3R2Ym5OMFlXNTBhVzRnUzhPa1ptVnlYQ0lzWEc1Y2RGeDBYQ0pCYkdWNGFYTWdVMlZzYkdsbGNpQThjMlZzWmtCamJHOTFaR2hsWVdRdWJtVjBQbHdpTEZ4dVhIUmNkRndpVW1GMWJDQlBZMmh2WVNBOGNtOWphRzloUUdOaGNuUnZaR0l1WTI5dFBsd2lMRnh1WEhSY2RGd2lTbUYyYVNCVFlXNTBZVzVoSUR4cWMyRnVkR0Z1WVVCallYSjBiMlJpTG1OdmJUNWNJbHh1WEhSZExGeHVYSFJjSW14cFkyVnVjMlZ6WENJNklGdGNibHgwWEhSN1hHNWNkRngwWEhSY0luUjVjR1ZjSWpvZ1hDSkJjR0ZqYUdWY0lseHVYSFJjZEgxY2JseDBYU3hjYmx4MFhDSmlhVzVjSWpvZ2UxeHVYSFJjZEZ3aVkyRnlkRzljSWpvZ1hDSXVMMkpwYmk5allYSjBiMXdpWEc1Y2RIMHNYRzVjZEZ3aWJXRnVYQ0k2SUZ3aUxpOXRZVzR2WTJGeWRHOHVNVndpTEZ4dVhIUmNJbTFoYVc1Y0lqb2dYQ0l1TDJ4cFlpOWpZWEowYnk5cGJtUmxlRndpTEZ4dVhIUmNJbVZ1WjJsdVpYTmNJam9nZTF4dVhIUmNkRndpYm05a1pWd2lPaUJjSWo0OU1DNDBMbmhjSWx4dVhIUjlMRnh1WEhSY0ltUmxjR1Z1WkdWdVkybGxjMXdpT2lCN1hHNWNkRngwWENKMWJtUmxjbk5qYjNKbFhDSTZJRndpTVM0NExqTmNJaXhjYmx4MFhIUmNJbTFoY0c1cGF5MXlaV1psY21WdVkyVmNJam9nWENKK05pNHdMakpjSWl4Y2JseDBYSFJjSW05d2RHbHRhWE4wWENJNklGd2lmakF1Tmk0d1hDSmNibHgwZlN4Y2JseDBYQ0prWlhaRVpYQmxibVJsYm1OcFpYTmNJam9nZTF4dVhIUmNkRndpYlc5amFHRmNJam9nWENJeExqRXlMbmhjSWl4Y2JseDBYSFJjSW1wemFHbHVkRndpT2lCY0lqQXVNaTU0WENJc1hHNWNkRngwWENKellYaGNJam9nWENJd0xqRXVlRndpTEZ4dVhIUmNkRndpYVhOMFlXNWlkV3hjSWpvZ1hDSitNQzR5TGpFMFhDSXNYRzVjZEZ4MFhDSmpiM1psY21Gc2JITmNJam9nWENKK01pNHhNQzR4WENJc1hHNWNkRngwWENKaWNtOTNjMlZ5YVdaNVhDSTZJRndpZmpjdU1DNHdYQ0lzWEc1Y2RGeDBYQ0oxWjJ4cFpua3Rhbk5jSWpvZ1hDSXhMak11TTF3aVhHNWNkSDBzWEc1Y2RGd2ljMk55YVhCMGMxd2lPaUI3WEc1Y2RGeDBYQ0p3Y21WMFpYTjBYQ0k2SUZ3aWJuQnRJR2x1YzNSaGJHeGNJaXhjYmx4MFhIUmNJblJsYzNSY0lqb2dYQ0p0YjJOb1lTQXRVaUJ6Y0dWalhDSXNYRzVjZEZ4MFhDSmpiM1psY21GblpWd2lPaUJjSW1semRHRnVZblZzSUdOdmRtVnlJQzR2Ym05a1pWOXRiMlIxYkdWekx5NWlhVzR2WDIxdlkyaGhJQ1ltSUdOdmRtVnlZV3hzY3lBOElDNHZZMjkyWlhKaFoyVXZiR052ZGk1cGJtWnZYQ0pjYmx4MGZWeHVmVHRjYmx4dVhHNHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OWNiaTh2SUZkRlFsQkJRMHNnUms5UFZFVlNYRzR2THlBdUwzNHZZMkZ5ZEc4dmNHRmphMkZuWlM1cWMyOXVYRzR2THlCdGIyUjFiR1VnYVdRZ1BTQXpPVnh1THk4Z2JXOWtkV3hsSUdOb2RXNXJjeUE5SURBaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CSWl3aWMyOTFjbU5sVW05dmRDSTZJaUo5XCIpO1xuXG4vKioqLyB9KSxcbi8qIDQwICovXG4vKiBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyogYWxsIGV4cG9ydHMgdXNlZCAqL1xuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vfi9jaGFyZW5jL2NoYXJlbmMuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuZXZhbChcInZhciBjaGFyZW5jID0ge1xcbiAgLy8gVVRGLTggZW5jb2RpbmdcXG4gIHV0Zjg6IHtcXG4gICAgLy8gQ29udmVydCBhIHN0cmluZyB0byBhIGJ5dGUgYXJyYXlcXG4gICAgc3RyaW5nVG9CeXRlczogZnVuY3Rpb24oc3RyKSB7XFxuICAgICAgcmV0dXJuIGNoYXJlbmMuYmluLnN0cmluZ1RvQnl0ZXModW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KHN0cikpKTtcXG4gICAgfSxcXG5cXG4gICAgLy8gQ29udmVydCBhIGJ5dGUgYXJyYXkgdG8gYSBzdHJpbmdcXG4gICAgYnl0ZXNUb1N0cmluZzogZnVuY3Rpb24oYnl0ZXMpIHtcXG4gICAgICByZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KGVzY2FwZShjaGFyZW5jLmJpbi5ieXRlc1RvU3RyaW5nKGJ5dGVzKSkpO1xcbiAgICB9XFxuICB9LFxcblxcbiAgLy8gQmluYXJ5IGVuY29kaW5nXFxuICBiaW46IHtcXG4gICAgLy8gQ29udmVydCBhIHN0cmluZyB0byBhIGJ5dGUgYXJyYXlcXG4gICAgc3RyaW5nVG9CeXRlczogZnVuY3Rpb24oc3RyKSB7XFxuICAgICAgZm9yICh2YXIgYnl0ZXMgPSBbXSwgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyBpKyspXFxuICAgICAgICBieXRlcy5wdXNoKHN0ci5jaGFyQ29kZUF0KGkpICYgMHhGRik7XFxuICAgICAgcmV0dXJuIGJ5dGVzO1xcbiAgICB9LFxcblxcbiAgICAvLyBDb252ZXJ0IGEgYnl0ZSBhcnJheSB0byBhIHN0cmluZ1xcbiAgICBieXRlc1RvU3RyaW5nOiBmdW5jdGlvbihieXRlcykge1xcbiAgICAgIGZvciAodmFyIHN0ciA9IFtdLCBpID0gMDsgaSA8IGJ5dGVzLmxlbmd0aDsgaSsrKVxcbiAgICAgICAgc3RyLnB1c2goU3RyaW5nLmZyb21DaGFyQ29kZShieXRlc1tpXSkpO1xcbiAgICAgIHJldHVybiBzdHIuam9pbignJyk7XFxuICAgIH1cXG4gIH1cXG59O1xcblxcbm1vZHVsZS5leHBvcnRzID0gY2hhcmVuYztcXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaU5EQXVhbk1pTENKemIzVnlZMlZ6SWpwYkluZGxZbkJoWTJzNkx5OHZMaTkrTDJOb1lYSmxibU12WTJoaGNtVnVZeTVxY3o5bFpqUmlJbDBzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSW5aaGNpQmphR0Z5Wlc1aklEMGdlMXh1SUNBdkx5QlZWRVl0T0NCbGJtTnZaR2x1WjF4dUlDQjFkR1k0T2lCN1hHNGdJQ0FnTHk4Z1EyOXVkbVZ5ZENCaElITjBjbWx1WnlCMGJ5QmhJR0o1ZEdVZ1lYSnlZWGxjYmlBZ0lDQnpkSEpwYm1kVWIwSjVkR1Z6T2lCbWRXNWpkR2x2YmloemRISXBJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQmphR0Z5Wlc1akxtSnBiaTV6ZEhKcGJtZFViMEo1ZEdWektIVnVaWE5qWVhCbEtHVnVZMjlrWlZWU1NVTnZiWEJ2Ym1WdWRDaHpkSElwS1NrN1hHNGdJQ0FnZlN4Y2JseHVJQ0FnSUM4dklFTnZiblpsY25RZ1lTQmllWFJsSUdGeWNtRjVJSFJ2SUdFZ2MzUnlhVzVuWEc0Z0lDQWdZbmwwWlhOVWIxTjBjbWx1WnpvZ1puVnVZM1JwYjI0b1lubDBaWE1wSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUJrWldOdlpHVlZVa2xEYjIxd2IyNWxiblFvWlhOallYQmxLR05vWVhKbGJtTXVZbWx1TG1KNWRHVnpWRzlUZEhKcGJtY29ZbmwwWlhNcEtTazdYRzRnSUNBZ2ZWeHVJQ0I5TEZ4dVhHNGdJQzh2SUVKcGJtRnllU0JsYm1OdlpHbHVaMXh1SUNCaWFXNDZJSHRjYmlBZ0lDQXZMeUJEYjI1MlpYSjBJR0VnYzNSeWFXNW5JSFJ2SUdFZ1lubDBaU0JoY25KaGVWeHVJQ0FnSUhOMGNtbHVaMVJ2UW5sMFpYTTZJR1oxYm1OMGFXOXVLSE4wY2lrZ2UxeHVJQ0FnSUNBZ1ptOXlJQ2gyWVhJZ1lubDBaWE1nUFNCYlhTd2dhU0E5SURBN0lHa2dQQ0J6ZEhJdWJHVnVaM1JvT3lCcEt5c3BYRzRnSUNBZ0lDQWdJR0o1ZEdWekxuQjFjMmdvYzNSeUxtTm9ZWEpEYjJSbFFYUW9hU2tnSmlBd2VFWkdLVHRjYmlBZ0lDQWdJSEpsZEhWeWJpQmllWFJsY3p0Y2JpQWdJQ0I5TEZ4dVhHNGdJQ0FnTHk4Z1EyOXVkbVZ5ZENCaElHSjVkR1VnWVhKeVlYa2dkRzhnWVNCemRISnBibWRjYmlBZ0lDQmllWFJsYzFSdlUzUnlhVzVuT2lCbWRXNWpkR2x2YmloaWVYUmxjeWtnZTF4dUlDQWdJQ0FnWm05eUlDaDJZWElnYzNSeUlEMGdXMTBzSUdrZ1BTQXdPeUJwSUR3Z1lubDBaWE11YkdWdVozUm9PeUJwS3lzcFhHNGdJQ0FnSUNBZ0lITjBjaTV3ZFhOb0tGTjBjbWx1Wnk1bWNtOXRRMmhoY2tOdlpHVW9ZbmwwWlhOYmFWMHBLVHRjYmlBZ0lDQWdJSEpsZEhWeWJpQnpkSEl1YW05cGJpZ25KeWs3WEc0Z0lDQWdmVnh1SUNCOVhHNTlPMXh1WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUdOb1lYSmxibU03WEc1Y2JseHVYRzR2THk4dkx5OHZMeTh2THk4dkx5OHZMeTljYmk4dklGZEZRbEJCUTBzZ1JrOVBWRVZTWEc0dkx5QXVMMzR2WTJoaGNtVnVZeTlqYUdGeVpXNWpMbXB6WEc0dkx5QnRiMlIxYkdVZ2FXUWdQU0EwTUZ4dUx5OGdiVzlrZFd4bElHTm9kVzVyY3lBOUlEQWlYU3dpYldGd2NHbHVaM01pT2lKQlFVRkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUc2lMQ0p6YjNWeVkyVlNiMjkwSWpvaUluMD1cIik7XG5cbi8qKiovIH0pLFxuLyogNDEgKi9cbi8qIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKiBhbGwgZXhwb3J0cyB1c2VkICovXG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fY29mLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5ldmFsKFwidmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XFxuXFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7XFxuICByZXR1cm4gdG9TdHJpbmcuY2FsbChpdCkuc2xpY2UoOCwgLTEpO1xcbn07Ly8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lOREV1YW5NaUxDSnpiM1Z5WTJWeklqcGJJbmRsWW5CaFkyczZMeTh2TGk5K0wyTnZjbVV0YW5NdmJHbGljbUZ5ZVM5dGIyUjFiR1Z6TDE5amIyWXVhbk0vTkRobFlTSmRMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUoyWVhJZ2RHOVRkSEpwYm1jZ1BTQjdmUzUwYjFOMGNtbHVaenRjYmx4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCbWRXNWpkR2x2YmlocGRDbDdYRzRnSUhKbGRIVnliaUIwYjFOMGNtbHVaeTVqWVd4c0tHbDBLUzV6YkdsalpTZzRMQ0F0TVNrN1hHNTlPMXh1WEc1Y2JpOHZMeTh2THk4dkx5OHZMeTh2THk4dkwxeHVMeThnVjBWQ1VFRkRTeUJHVDA5VVJWSmNiaTh2SUM0dmZpOWpiM0psTFdwekwyeHBZbkpoY25rdmJXOWtkV3hsY3k5ZlkyOW1MbXB6WEc0dkx5QnRiMlIxYkdVZ2FXUWdQU0EwTVZ4dUx5OGdiVzlrZFd4bElHTm9kVzVyY3lBOUlEQWlYU3dpYldGd2NHbHVaM01pT2lKQlFVRkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVpTENKemIzVnlZMlZTYjI5MElqb2lJbjA9XCIpO1xuXG4vKioqLyB9KSxcbi8qIDQyICovXG4vKiBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyogYWxsIGV4cG9ydHMgdXNlZCAqL1xuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2N0eC5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuZXZhbChcIi8vIG9wdGlvbmFsIC8gc2ltcGxlIGNvbnRleHQgYmluZGluZ1xcbnZhciBhRnVuY3Rpb24gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL19hLWZ1bmN0aW9uICovIDExNCk7XFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihmbiwgdGhhdCwgbGVuZ3RoKXtcXG4gIGFGdW5jdGlvbihmbik7XFxuICBpZih0aGF0ID09PSB1bmRlZmluZWQpcmV0dXJuIGZuO1xcbiAgc3dpdGNoKGxlbmd0aCl7XFxuICAgIGNhc2UgMTogcmV0dXJuIGZ1bmN0aW9uKGEpe1xcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEpO1xcbiAgICB9O1xcbiAgICBjYXNlIDI6IHJldHVybiBmdW5jdGlvbihhLCBiKXtcXG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhLCBiKTtcXG4gICAgfTtcXG4gICAgY2FzZSAzOiByZXR1cm4gZnVuY3Rpb24oYSwgYiwgYyl7XFxuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYiwgYyk7XFxuICAgIH07XFxuICB9XFxuICByZXR1cm4gZnVuY3Rpb24oLyogLi4uYXJncyAqLyl7XFxuICAgIHJldHVybiBmbi5hcHBseSh0aGF0LCBhcmd1bWVudHMpO1xcbiAgfTtcXG59Oy8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pTkRJdWFuTWlMQ0p6YjNWeVkyVnpJanBiSW5kbFluQmhZMnM2THk4dkxpOStMMk52Y21VdGFuTXZiR2xpY21GeWVTOXRiMlIxYkdWekwxOWpkSGd1YW5NL1kyVXdNQ0pkTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lJdkx5QnZjSFJwYjI1aGJDQXZJSE5wYlhCc1pTQmpiMjUwWlhoMElHSnBibVJwYm1kY2JuWmhjaUJoUm5WdVkzUnBiMjRnUFNCeVpYRjFhWEpsS0NjdUwxOWhMV1oxYm1OMGFXOXVKeWs3WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUdaMWJtTjBhVzl1S0dadUxDQjBhR0YwTENCc1pXNW5kR2dwZTF4dUlDQmhSblZ1WTNScGIyNG9abTRwTzF4dUlDQnBaaWgwYUdGMElEMDlQU0IxYm1SbFptbHVaV1FwY21WMGRYSnVJR1p1TzF4dUlDQnpkMmwwWTJnb2JHVnVaM1JvS1h0Y2JpQWdJQ0JqWVhObElERTZJSEpsZEhWeWJpQm1kVzVqZEdsdmJpaGhLWHRjYmlBZ0lDQWdJSEpsZEhWeWJpQm1iaTVqWVd4c0tIUm9ZWFFzSUdFcE8xeHVJQ0FnSUgwN1hHNGdJQ0FnWTJGelpTQXlPaUJ5WlhSMWNtNGdablZ1WTNScGIyNG9ZU3dnWWlsN1hHNGdJQ0FnSUNCeVpYUjFjbTRnWm00dVkyRnNiQ2gwYUdGMExDQmhMQ0JpS1R0Y2JpQWdJQ0I5TzF4dUlDQWdJR05oYzJVZ016b2djbVYwZFhKdUlHWjFibU4wYVc5dUtHRXNJR0lzSUdNcGUxeHVJQ0FnSUNBZ2NtVjBkWEp1SUdadUxtTmhiR3dvZEdoaGRDd2dZU3dnWWl3Z1l5azdYRzRnSUNBZ2ZUdGNiaUFnZlZ4dUlDQnlaWFIxY200Z1puVnVZM1JwYjI0b0x5b2dMaTR1WVhKbmN5QXFMeWw3WEc0Z0lDQWdjbVYwZFhKdUlHWnVMbUZ3Y0d4NUtIUm9ZWFFzSUdGeVozVnRaVzUwY3lrN1hHNGdJSDA3WEc1OU8xeHVYRzVjYmk4dkx5OHZMeTh2THk4dkx5OHZMeTh2TDF4dUx5OGdWMFZDVUVGRFN5QkdUMDlVUlZKY2JpOHZJQzR2Zmk5amIzSmxMV3B6TDJ4cFluSmhjbmt2Ylc5a2RXeGxjeTlmWTNSNExtcHpYRzR2THlCdGIyUjFiR1VnYVdRZ1BTQTBNbHh1THk4Z2JXOWtkV3hsSUdOb2RXNXJjeUE5SURBaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVpTENKemIzVnlZMlZTYjI5MElqb2lJbjA9XCIpO1xuXG4vKioqLyB9KSxcbi8qIDQzICovXG4vKiBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyogYWxsIGV4cG9ydHMgdXNlZCAqL1xuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19kb20tY3JlYXRlLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuZXZhbChcInZhciBpc09iamVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vX2lzLW9iamVjdCAqLyAzMClcXG4gICwgZG9jdW1lbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL19nbG9iYWwgKi8gMTApLmRvY3VtZW50XFxuICAvLyBpbiBvbGQgSUUgdHlwZW9mIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgaXMgJ29iamVjdCdcXG4gICwgaXMgPSBpc09iamVjdChkb2N1bWVudCkgJiYgaXNPYmplY3QoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7XFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7XFxuICByZXR1cm4gaXMgPyBkb2N1bWVudC5jcmVhdGVFbGVtZW50KGl0KSA6IHt9O1xcbn07Ly8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lORE11YW5NaUxDSnpiM1Z5WTJWeklqcGJJbmRsWW5CaFkyczZMeTh2TGk5K0wyTnZjbVV0YW5NdmJHbGljbUZ5ZVM5dGIyUjFiR1Z6TDE5a2IyMHRZM0psWVhSbExtcHpQMkZpTkRRaVhTd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lkbUZ5SUdselQySnFaV04wSUQwZ2NtVnhkV2x5WlNnbkxpOWZhWE10YjJKcVpXTjBKeWxjYmlBZ0xDQmtiMk4xYldWdWRDQTlJSEpsY1hWcGNtVW9KeTR2WDJkc2IySmhiQ2NwTG1SdlkzVnRaVzUwWEc0Z0lDOHZJR2x1SUc5c1pDQkpSU0IwZVhCbGIyWWdaRzlqZFcxbGJuUXVZM0psWVhSbFJXeGxiV1Z1ZENCcGN5QW5iMkpxWldOMEoxeHVJQ0FzSUdseklEMGdhWE5QWW1wbFkzUW9aRzlqZFcxbGJuUXBJQ1ltSUdselQySnFaV04wS0dSdlkzVnRaVzUwTG1OeVpXRjBaVVZzWlcxbGJuUXBPMXh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0JtZFc1amRHbHZiaWhwZENsN1hHNGdJSEpsZEhWeWJpQnBjeUEvSUdSdlkzVnRaVzUwTG1OeVpXRjBaVVZzWlcxbGJuUW9hWFFwSURvZ2UzMDdYRzU5TzF4dVhHNWNiaTh2THk4dkx5OHZMeTh2THk4dkx5OHZMMXh1THk4Z1YwVkNVRUZEU3lCR1QwOVVSVkpjYmk4dklDNHZmaTlqYjNKbExXcHpMMnhwWW5KaGNua3ZiVzlrZFd4bGN5OWZaRzl0TFdOeVpXRjBaUzVxYzF4dUx5OGdiVzlrZFd4bElHbGtJRDBnTkROY2JpOHZJRzF2WkhWc1pTQmphSFZ1YTNNZ1BTQXdJbDBzSW0xaGNIQnBibWR6SWpvaVFVRkJRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVNJc0luTnZkWEpqWlZKdmIzUWlPaUlpZlE9PVwiKTtcblxuLyoqKi8gfSksXG4vKiA0NCAqL1xuLyogbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9cbi8qIGFsbCBleHBvcnRzIHVzZWQgKi9cbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZW51bS1idWcta2V5cy5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbmV2YWwoXCIvLyBJRSA4LSBkb24ndCBlbnVtIGJ1ZyBrZXlzXFxubW9kdWxlLmV4cG9ydHMgPSAoXFxuICAnY29uc3RydWN0b3IsaGFzT3duUHJvcGVydHksaXNQcm90b3R5cGVPZixwcm9wZXJ0eUlzRW51bWVyYWJsZSx0b0xvY2FsZVN0cmluZyx0b1N0cmluZyx2YWx1ZU9mJ1xcbikuc3BsaXQoJywnKTsvLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaU5EUXVhbk1pTENKemIzVnlZMlZ6SWpwYkluZGxZbkJoWTJzNkx5OHZMaTkrTDJOdmNtVXRhbk12YkdsaWNtRnllUzl0YjJSMWJHVnpMMTlsYm5WdExXSjFaeTFyWlhsekxtcHpQemMxT1RnaVhTd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lMeThnU1VVZ09DMGdaRzl1SjNRZ1pXNTFiU0JpZFdjZ2EyVjVjMXh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0FvWEc0Z0lDZGpiMjV6ZEhKMVkzUnZjaXhvWVhOUGQyNVFjbTl3WlhKMGVTeHBjMUJ5YjNSdmRIbHdaVTltTEhCeWIzQmxjblI1U1hORmJuVnRaWEpoWW14bExIUnZURzlqWVd4bFUzUnlhVzVuTEhSdlUzUnlhVzVuTEhaaGJIVmxUMlluWEc0cExuTndiR2wwS0Njc0p5azdYRzVjYmx4dUx5OHZMeTh2THk4dkx5OHZMeTh2THk4dlhHNHZMeUJYUlVKUVFVTkxJRVpQVDFSRlVseHVMeThnTGk5K0wyTnZjbVV0YW5NdmJHbGljbUZ5ZVM5dGIyUjFiR1Z6TDE5bGJuVnRMV0oxWnkxclpYbHpMbXB6WEc0dkx5QnRiMlIxYkdVZ2FXUWdQU0EwTkZ4dUx5OGdiVzlrZFd4bElHTm9kVzVyY3lBOUlEQWlYU3dpYldGd2NHbHVaM01pT2lKQlFVRkJPMEZCUTBFN1FVRkRRVHRCUVVOQklpd2ljMjkxY21ObFVtOXZkQ0k2SWlKOVwiKTtcblxuLyoqKi8gfSksXG4vKiA0NSAqL1xuLyogbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9cbi8qIGFsbCBleHBvcnRzIHVzZWQgKi9cbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19leHBvcnQuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbmV2YWwoXCJ2YXIgZ2xvYmFsICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9fZ2xvYmFsICovIDEwKVxcbiAgLCBjb3JlICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL19jb3JlICovIDI4KVxcbiAgLCBjdHggICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL19jdHggKi8gNDIpXFxuICAsIGhpZGUgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vX2hpZGUgKi8gMjIpXFxuICAsIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xcblxcbnZhciAkZXhwb3J0ID0gZnVuY3Rpb24odHlwZSwgbmFtZSwgc291cmNlKXtcXG4gIHZhciBJU19GT1JDRUQgPSB0eXBlICYgJGV4cG9ydC5GXFxuICAgICwgSVNfR0xPQkFMID0gdHlwZSAmICRleHBvcnQuR1xcbiAgICAsIElTX1NUQVRJQyA9IHR5cGUgJiAkZXhwb3J0LlNcXG4gICAgLCBJU19QUk9UTyAgPSB0eXBlICYgJGV4cG9ydC5QXFxuICAgICwgSVNfQklORCAgID0gdHlwZSAmICRleHBvcnQuQlxcbiAgICAsIElTX1dSQVAgICA9IHR5cGUgJiAkZXhwb3J0LldcXG4gICAgLCBleHBvcnRzICAgPSBJU19HTE9CQUwgPyBjb3JlIDogY29yZVtuYW1lXSB8fCAoY29yZVtuYW1lXSA9IHt9KVxcbiAgICAsIGV4cFByb3RvICA9IGV4cG9ydHNbUFJPVE9UWVBFXVxcbiAgICAsIHRhcmdldCAgICA9IElTX0dMT0JBTCA/IGdsb2JhbCA6IElTX1NUQVRJQyA/IGdsb2JhbFtuYW1lXSA6IChnbG9iYWxbbmFtZV0gfHwge30pW1BST1RPVFlQRV1cXG4gICAgLCBrZXksIG93biwgb3V0O1xcbiAgaWYoSVNfR0xPQkFMKXNvdXJjZSA9IG5hbWU7XFxuICBmb3Ioa2V5IGluIHNvdXJjZSl7XFxuICAgIC8vIGNvbnRhaW5zIGluIG5hdGl2ZVxcbiAgICBvd24gPSAhSVNfRk9SQ0VEICYmIHRhcmdldCAmJiB0YXJnZXRba2V5XSAhPT0gdW5kZWZpbmVkO1xcbiAgICBpZihvd24gJiYga2V5IGluIGV4cG9ydHMpY29udGludWU7XFxuICAgIC8vIGV4cG9ydCBuYXRpdmUgb3IgcGFzc2VkXFxuICAgIG91dCA9IG93biA/IHRhcmdldFtrZXldIDogc291cmNlW2tleV07XFxuICAgIC8vIHByZXZlbnQgZ2xvYmFsIHBvbGx1dGlvbiBmb3IgbmFtZXNwYWNlc1xcbiAgICBleHBvcnRzW2tleV0gPSBJU19HTE9CQUwgJiYgdHlwZW9mIHRhcmdldFtrZXldICE9ICdmdW5jdGlvbicgPyBzb3VyY2Vba2V5XVxcbiAgICAvLyBiaW5kIHRpbWVycyB0byBnbG9iYWwgZm9yIGNhbGwgZnJvbSBleHBvcnQgY29udGV4dFxcbiAgICA6IElTX0JJTkQgJiYgb3duID8gY3R4KG91dCwgZ2xvYmFsKVxcbiAgICAvLyB3cmFwIGdsb2JhbCBjb25zdHJ1Y3RvcnMgZm9yIHByZXZlbnQgY2hhbmdlIHRoZW0gaW4gbGlicmFyeVxcbiAgICA6IElTX1dSQVAgJiYgdGFyZ2V0W2tleV0gPT0gb3V0ID8gKGZ1bmN0aW9uKEMpe1xcbiAgICAgIHZhciBGID0gZnVuY3Rpb24oYSwgYiwgYyl7XFxuICAgICAgICBpZih0aGlzIGluc3RhbmNlb2YgQyl7XFxuICAgICAgICAgIHN3aXRjaChhcmd1bWVudHMubGVuZ3RoKXtcXG4gICAgICAgICAgICBjYXNlIDA6IHJldHVybiBuZXcgQztcXG4gICAgICAgICAgICBjYXNlIDE6IHJldHVybiBuZXcgQyhhKTtcXG4gICAgICAgICAgICBjYXNlIDI6IHJldHVybiBuZXcgQyhhLCBiKTtcXG4gICAgICAgICAgfSByZXR1cm4gbmV3IEMoYSwgYiwgYyk7XFxuICAgICAgICB9IHJldHVybiBDLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XFxuICAgICAgfTtcXG4gICAgICBGW1BST1RPVFlQRV0gPSBDW1BST1RPVFlQRV07XFxuICAgICAgcmV0dXJuIEY7XFxuICAgIC8vIG1ha2Ugc3RhdGljIHZlcnNpb25zIGZvciBwcm90b3R5cGUgbWV0aG9kc1xcbiAgICB9KShvdXQpIDogSVNfUFJPVE8gJiYgdHlwZW9mIG91dCA9PSAnZnVuY3Rpb24nID8gY3R4KEZ1bmN0aW9uLmNhbGwsIG91dCkgOiBvdXQ7XFxuICAgIC8vIGV4cG9ydCBwcm90byBtZXRob2RzIHRvIGNvcmUuJUNPTlNUUlVDVE9SJS5tZXRob2RzLiVOQU1FJVxcbiAgICBpZihJU19QUk9UTyl7XFxuICAgICAgKGV4cG9ydHMudmlydHVhbCB8fCAoZXhwb3J0cy52aXJ0dWFsID0ge30pKVtrZXldID0gb3V0O1xcbiAgICAgIC8vIGV4cG9ydCBwcm90byBtZXRob2RzIHRvIGNvcmUuJUNPTlNUUlVDVE9SJS5wcm90b3R5cGUuJU5BTUUlXFxuICAgICAgaWYodHlwZSAmICRleHBvcnQuUiAmJiBleHBQcm90byAmJiAhZXhwUHJvdG9ba2V5XSloaWRlKGV4cFByb3RvLCBrZXksIG91dCk7XFxuICAgIH1cXG4gIH1cXG59O1xcbi8vIHR5cGUgYml0bWFwXFxuJGV4cG9ydC5GID0gMTsgICAvLyBmb3JjZWRcXG4kZXhwb3J0LkcgPSAyOyAgIC8vIGdsb2JhbFxcbiRleHBvcnQuUyA9IDQ7ICAgLy8gc3RhdGljXFxuJGV4cG9ydC5QID0gODsgICAvLyBwcm90b1xcbiRleHBvcnQuQiA9IDE2OyAgLy8gYmluZFxcbiRleHBvcnQuVyA9IDMyOyAgLy8gd3JhcFxcbiRleHBvcnQuVSA9IDY0OyAgLy8gc2FmZVxcbiRleHBvcnQuUiA9IDEyODsgLy8gcmVhbCBwcm90byBtZXRob2QgZm9yIGBsaWJyYXJ5YCBcXG5tb2R1bGUuZXhwb3J0cyA9ICRleHBvcnQ7Ly8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lORFV1YW5NaUxDSnpiM1Z5WTJWeklqcGJJbmRsWW5CaFkyczZMeTh2TGk5K0wyTnZjbVV0YW5NdmJHbGljbUZ5ZVM5dGIyUjFiR1Z6TDE5bGVIQnZjblF1YW5NL1pXTmxNaUpkTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lKMllYSWdaMnh2WW1Gc0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZloyeHZZbUZzSnlsY2JpQWdMQ0JqYjNKbElDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOWpiM0psSnlsY2JpQWdMQ0JqZEhnZ0lDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOWpkSGduS1Z4dUlDQXNJR2hwWkdVZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyaHBaR1VuS1Z4dUlDQXNJRkJTVDFSUFZGbFFSU0E5SUNkd2NtOTBiM1I1Y0dVbk8xeHVYRzUyWVhJZ0pHVjRjRzl5ZENBOUlHWjFibU4wYVc5dUtIUjVjR1VzSUc1aGJXVXNJSE52ZFhKalpTbDdYRzRnSUhaaGNpQkpVMTlHVDFKRFJVUWdQU0IwZVhCbElDWWdKR1Y0Y0c5eWRDNUdYRzRnSUNBZ0xDQkpVMTlIVEU5Q1FVd2dQU0IwZVhCbElDWWdKR1Y0Y0c5eWRDNUhYRzRnSUNBZ0xDQkpVMTlUVkVGVVNVTWdQU0IwZVhCbElDWWdKR1Y0Y0c5eWRDNVRYRzRnSUNBZ0xDQkpVMTlRVWs5VVR5QWdQU0IwZVhCbElDWWdKR1Y0Y0c5eWRDNVFYRzRnSUNBZ0xDQkpVMTlDU1U1RUlDQWdQU0IwZVhCbElDWWdKR1Y0Y0c5eWRDNUNYRzRnSUNBZ0xDQkpVMTlYVWtGUUlDQWdQU0IwZVhCbElDWWdKR1Y0Y0c5eWRDNVhYRzRnSUNBZ0xDQmxlSEJ2Y25SeklDQWdQU0JKVTE5SFRFOUNRVXdnUHlCamIzSmxJRG9nWTI5eVpWdHVZVzFsWFNCOGZDQW9ZMjl5WlZ0dVlXMWxYU0E5SUh0OUtWeHVJQ0FnSUN3Z1pYaHdVSEp2ZEc4Z0lEMGdaWGh3YjNKMGMxdFFVazlVVDFSWlVFVmRYRzRnSUNBZ0xDQjBZWEpuWlhRZ0lDQWdQU0JKVTE5SFRFOUNRVXdnUHlCbmJHOWlZV3dnT2lCSlUxOVRWRUZVU1VNZ1B5Qm5iRzlpWVd4YmJtRnRaVjBnT2lBb1oyeHZZbUZzVzI1aGJXVmRJSHg4SUh0OUtWdFFVazlVVDFSWlVFVmRYRzRnSUNBZ0xDQnJaWGtzSUc5M2Jpd2diM1YwTzF4dUlDQnBaaWhKVTE5SFRFOUNRVXdwYzI5MWNtTmxJRDBnYm1GdFpUdGNiaUFnWm05eUtHdGxlU0JwYmlCemIzVnlZMlVwZTF4dUlDQWdJQzh2SUdOdmJuUmhhVzV6SUdsdUlHNWhkR2wyWlZ4dUlDQWdJRzkzYmlBOUlDRkpVMTlHVDFKRFJVUWdKaVlnZEdGeVoyVjBJQ1ltSUhSaGNtZGxkRnRyWlhsZElDRTlQU0IxYm1SbFptbHVaV1E3WEc0Z0lDQWdhV1lvYjNkdUlDWW1JR3RsZVNCcGJpQmxlSEJ2Y25SektXTnZiblJwYm5WbE8xeHVJQ0FnSUM4dklHVjRjRzl5ZENCdVlYUnBkbVVnYjNJZ2NHRnpjMlZrWEc0Z0lDQWdiM1YwSUQwZ2IzZHVJRDhnZEdGeVoyVjBXMnRsZVYwZ09pQnpiM1Z5WTJWYmEyVjVYVHRjYmlBZ0lDQXZMeUJ3Y21WMlpXNTBJR2RzYjJKaGJDQndiMnhzZFhScGIyNGdabTl5SUc1aGJXVnpjR0ZqWlhOY2JpQWdJQ0JsZUhCdmNuUnpXMnRsZVYwZ1BTQkpVMTlIVEU5Q1FVd2dKaVlnZEhsd1pXOW1JSFJoY21kbGRGdHJaWGxkSUNFOUlDZG1kVzVqZEdsdmJpY2dQeUJ6YjNWeVkyVmJhMlY1WFZ4dUlDQWdJQzh2SUdKcGJtUWdkR2x0WlhKeklIUnZJR2RzYjJKaGJDQm1iM0lnWTJGc2JDQm1jbTl0SUdWNGNHOXlkQ0JqYjI1MFpYaDBYRzRnSUNBZ09pQkpVMTlDU1U1RUlDWW1JRzkzYmlBL0lHTjBlQ2h2ZFhRc0lHZHNiMkpoYkNsY2JpQWdJQ0F2THlCM2NtRndJR2RzYjJKaGJDQmpiMjV6ZEhKMVkzUnZjbk1nWm05eUlIQnlaWFpsYm5RZ1kyaGhibWRsSUhSb1pXMGdhVzRnYkdsaWNtRnllVnh1SUNBZ0lEb2dTVk5mVjFKQlVDQW1KaUIwWVhKblpYUmJhMlY1WFNBOVBTQnZkWFFnUHlBb1puVnVZM1JwYjI0b1F5bDdYRzRnSUNBZ0lDQjJZWElnUmlBOUlHWjFibU4wYVc5dUtHRXNJR0lzSUdNcGUxeHVJQ0FnSUNBZ0lDQnBaaWgwYUdseklHbHVjM1JoYm1ObGIyWWdReWw3WEc0Z0lDQWdJQ0FnSUNBZ2MzZHBkR05vS0dGeVozVnRaVzUwY3k1c1pXNW5kR2dwZTF4dUlDQWdJQ0FnSUNBZ0lDQWdZMkZ6WlNBd09pQnlaWFIxY200Z2JtVjNJRU03WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpZWE5sSURFNklISmxkSFZ5YmlCdVpYY2dReWhoS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ01qb2djbVYwZFhKdUlHNWxkeUJES0dFc0lHSXBPMXh1SUNBZ0lDQWdJQ0FnSUgwZ2NtVjBkWEp1SUc1bGR5QkRLR0VzSUdJc0lHTXBPMXh1SUNBZ0lDQWdJQ0I5SUhKbGRIVnliaUJETG1Gd2NHeDVLSFJvYVhNc0lHRnlaM1Z0Wlc1MGN5azdYRzRnSUNBZ0lDQjlPMXh1SUNBZ0lDQWdSbHRRVWs5VVQxUlpVRVZkSUQwZ1ExdFFVazlVVDFSWlVFVmRPMXh1SUNBZ0lDQWdjbVYwZFhKdUlFWTdYRzRnSUNBZ0x5OGdiV0ZyWlNCemRHRjBhV01nZG1WeWMybHZibk1nWm05eUlIQnliM1J2ZEhsd1pTQnRaWFJvYjJSelhHNGdJQ0FnZlNrb2IzVjBLU0E2SUVsVFgxQlNUMVJQSUNZbUlIUjVjR1Z2WmlCdmRYUWdQVDBnSjJaMWJtTjBhVzl1SnlBL0lHTjBlQ2hHZFc1amRHbHZiaTVqWVd4c0xDQnZkWFFwSURvZ2IzVjBPMXh1SUNBZ0lDOHZJR1Y0Y0c5eWRDQndjbTkwYnlCdFpYUm9iMlJ6SUhSdklHTnZjbVV1SlVOUFRsTlVVbFZEVkU5U0pTNXRaWFJvYjJSekxpVk9RVTFGSlZ4dUlDQWdJR2xtS0VsVFgxQlNUMVJQS1h0Y2JpQWdJQ0FnSUNobGVIQnZjblJ6TG5acGNuUjFZV3dnZkh3Z0tHVjRjRzl5ZEhNdWRtbHlkSFZoYkNBOUlIdDlLU2xiYTJWNVhTQTlJRzkxZER0Y2JpQWdJQ0FnSUM4dklHVjRjRzl5ZENCd2NtOTBieUJ0WlhSb2IyUnpJSFJ2SUdOdmNtVXVKVU5QVGxOVVVsVkRWRTlTSlM1d2NtOTBiM1I1Y0dVdUpVNUJUVVVsWEc0Z0lDQWdJQ0JwWmloMGVYQmxJQ1lnSkdWNGNHOXlkQzVTSUNZbUlHVjRjRkJ5YjNSdklDWW1JQ0ZsZUhCUWNtOTBiMXRyWlhsZEtXaHBaR1VvWlhod1VISnZkRzhzSUd0bGVTd2diM1YwS1R0Y2JpQWdJQ0I5WEc0Z0lIMWNibjA3WEc0dkx5QjBlWEJsSUdKcGRHMWhjRnh1SkdWNGNHOXlkQzVHSUQwZ01Uc2dJQ0F2THlCbWIzSmpaV1JjYmlSbGVIQnZjblF1UnlBOUlESTdJQ0FnTHk4Z1oyeHZZbUZzWEc0a1pYaHdiM0owTGxNZ1BTQTBPeUFnSUM4dklITjBZWFJwWTF4dUpHVjRjRzl5ZEM1UUlEMGdPRHNnSUNBdkx5QndjbTkwYjF4dUpHVjRjRzl5ZEM1Q0lEMGdNVFk3SUNBdkx5QmlhVzVrWEc0a1pYaHdiM0owTGxjZ1BTQXpNanNnSUM4dklIZHlZWEJjYmlSbGVIQnZjblF1VlNBOUlEWTBPeUFnTHk4Z2MyRm1aVnh1SkdWNGNHOXlkQzVTSUQwZ01USTRPeUF2THlCeVpXRnNJSEJ5YjNSdklHMWxkR2h2WkNCbWIzSWdZR3hwWW5KaGNubGdJRnh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0FrWlhod2IzSjBPMXh1WEc1Y2JpOHZMeTh2THk4dkx5OHZMeTh2THk4dkwxeHVMeThnVjBWQ1VFRkRTeUJHVDA5VVJWSmNiaTh2SUM0dmZpOWpiM0psTFdwekwyeHBZbkpoY25rdmJXOWtkV3hsY3k5ZlpYaHdiM0owTG1welhHNHZMeUJ0YjJSMWJHVWdhV1FnUFNBME5WeHVMeThnYlc5a2RXeGxJR05vZFc1cmN5QTlJREFpWFN3aWJXRndjR2x1WjNNaU9pSkJRVUZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQklpd2ljMjkxY21ObFVtOXZkQ0k2SWlKOVwiKTtcblxuLyoqKi8gfSksXG4vKiA0NiAqL1xuLyogbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9cbi8qIGFsbCBleHBvcnRzIHVzZWQgKi9cbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2ZhaWxzLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbmV2YWwoXCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGV4ZWMpe1xcbiAgdHJ5IHtcXG4gICAgcmV0dXJuICEhZXhlYygpO1xcbiAgfSBjYXRjaChlKXtcXG4gICAgcmV0dXJuIHRydWU7XFxuICB9XFxufTsvLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaU5EWXVhbk1pTENKemIzVnlZMlZ6SWpwYkluZGxZbkJoWTJzNkx5OHZMaTkrTDJOdmNtVXRhbk12YkdsaWNtRnllUzl0YjJSMWJHVnpMMTltWVdsc2N5NXFjejg1TXpWa0lsMHNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJbTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdablZ1WTNScGIyNG9aWGhsWXlsN1hHNGdJSFJ5ZVNCN1hHNGdJQ0FnY21WMGRYSnVJQ0VoWlhobFl5Z3BPMXh1SUNCOUlHTmhkR05vS0dVcGUxeHVJQ0FnSUhKbGRIVnliaUIwY25WbE8xeHVJQ0I5WEc1OU8xeHVYRzVjYmk4dkx5OHZMeTh2THk4dkx5OHZMeTh2TDF4dUx5OGdWMFZDVUVGRFN5QkdUMDlVUlZKY2JpOHZJQzR2Zmk5amIzSmxMV3B6TDJ4cFluSmhjbmt2Ylc5a2RXeGxjeTlmWm1GcGJITXVhbk5jYmk4dklHMXZaSFZzWlNCcFpDQTlJRFEyWEc0dkx5QnRiMlIxYkdVZ1kyaDFibXR6SUQwZ01DSmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVpTENKemIzVnlZMlZTYjI5MElqb2lJbjA9XCIpO1xuXG4vKioqLyB9KSxcbi8qIDQ3ICovXG4vKiBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyogYWxsIGV4cG9ydHMgdXNlZCAqL1xuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fc2V0LXRvLXN0cmluZy10YWcuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuZXZhbChcInZhciBkZWYgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL19vYmplY3QtZHAgKi8gMjMpLmZcXG4gICwgaGFzID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9faGFzICovIDIxKVxcbiAgLCBUQUcgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL193a3MgKi8gNSkoJ3RvU3RyaW5nVGFnJyk7XFxuXFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCwgdGFnLCBzdGF0KXtcXG4gIGlmKGl0ICYmICFoYXMoaXQgPSBzdGF0ID8gaXQgOiBpdC5wcm90b3R5cGUsIFRBRykpZGVmKGl0LCBUQUcsIHtjb25maWd1cmFibGU6IHRydWUsIHZhbHVlOiB0YWd9KTtcXG59Oy8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pTkRjdWFuTWlMQ0p6YjNWeVkyVnpJanBiSW5kbFluQmhZMnM2THk4dkxpOStMMk52Y21VdGFuTXZiR2xpY21GeWVTOXRiMlIxYkdWekwxOXpaWFF0ZEc4dGMzUnlhVzVuTFhSaFp5NXFjejlqT1RRMUlsMHNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJblpoY2lCa1pXWWdQU0J5WlhGMWFYSmxLQ2N1TDE5dlltcGxZM1F0WkhBbktTNW1YRzRnSUN3Z2FHRnpJRDBnY21WeGRXbHlaU2duTGk5ZmFHRnpKeWxjYmlBZ0xDQlVRVWNnUFNCeVpYRjFhWEpsS0NjdUwxOTNhM01uS1NnbmRHOVRkSEpwYm1kVVlXY25LVHRjYmx4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCbWRXNWpkR2x2YmlocGRDd2dkR0ZuTENCemRHRjBLWHRjYmlBZ2FXWW9hWFFnSmlZZ0lXaGhjeWhwZENBOUlITjBZWFFnUHlCcGRDQTZJR2wwTG5CeWIzUnZkSGx3WlN3Z1ZFRkhLU2xrWldZb2FYUXNJRlJCUnl3Z2UyTnZibVpwWjNWeVlXSnNaVG9nZEhKMVpTd2dkbUZzZFdVNklIUmhaMzBwTzF4dWZUdGNibHh1WEc0dkx5OHZMeTh2THk4dkx5OHZMeTh2THk5Y2JpOHZJRmRGUWxCQlEwc2dSazlQVkVWU1hHNHZMeUF1TDM0dlkyOXlaUzFxY3k5c2FXSnlZWEo1TDIxdlpIVnNaWE12WDNObGRDMTBieTF6ZEhKcGJtY3RkR0ZuTG1welhHNHZMeUJ0YjJSMWJHVWdhV1FnUFNBME4xeHVMeThnYlc5a2RXeGxJR05vZFc1cmN5QTlJREFpWFN3aWJXRndjR2x1WjNNaU9pSkJRVUZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQklpd2ljMjkxY21ObFVtOXZkQ0k2SWlKOVwiKTtcblxuLyoqKi8gfSksXG4vKiA0OCAqL1xuLyogbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9cbi8qIGFsbCBleHBvcnRzIHVzZWQgKi9cbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19zaGFyZWQuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbmV2YWwoXCJ2YXIgZ2xvYmFsID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9fZ2xvYmFsICovIDEwKVxcbiAgLCBTSEFSRUQgPSAnX19jb3JlLWpzX3NoYXJlZF9fJ1xcbiAgLCBzdG9yZSAgPSBnbG9iYWxbU0hBUkVEXSB8fCAoZ2xvYmFsW1NIQVJFRF0gPSB7fSk7XFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihrZXkpe1xcbiAgcmV0dXJuIHN0b3JlW2tleV0gfHwgKHN0b3JlW2tleV0gPSB7fSk7XFxufTsvLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaU5EZ3Vhbk1pTENKemIzVnlZMlZ6SWpwYkluZGxZbkJoWTJzNkx5OHZMaTkrTDJOdmNtVXRhbk12YkdsaWNtRnllUzl0YjJSMWJHVnpMMTl6YUdGeVpXUXVhbk0vTjJJMll5SmRMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUoyWVhJZ1oyeHZZbUZzSUQwZ2NtVnhkV2x5WlNnbkxpOWZaMnh2WW1Gc0p5bGNiaUFnTENCVFNFRlNSVVFnUFNBblgxOWpiM0psTFdwelgzTm9ZWEpsWkY5ZkoxeHVJQ0FzSUhOMGIzSmxJQ0E5SUdkc2IySmhiRnRUU0VGU1JVUmRJSHg4SUNobmJHOWlZV3hiVTBoQlVrVkVYU0E5SUh0OUtUdGNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdablZ1WTNScGIyNG9hMlY1S1h0Y2JpQWdjbVYwZFhKdUlITjBiM0psVzJ0bGVWMGdmSHdnS0hOMGIzSmxXMnRsZVYwZ1BTQjdmU2s3WEc1OU8xeHVYRzVjYmk4dkx5OHZMeTh2THk4dkx5OHZMeTh2TDF4dUx5OGdWMFZDVUVGRFN5QkdUMDlVUlZKY2JpOHZJQzR2Zmk5amIzSmxMV3B6TDJ4cFluSmhjbmt2Ylc5a2RXeGxjeTlmYzJoaGNtVmtMbXB6WEc0dkx5QnRiMlIxYkdVZ2FXUWdQU0EwT0Z4dUx5OGdiVzlrZFd4bElHTm9kVzVyY3lBOUlEQWlYU3dpYldGd2NHbHVaM01pT2lKQlFVRkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTSXNJbk52ZFhKalpWSnZiM1FpT2lJaWZRPT1cIik7XG5cbi8qKiovIH0pLFxuLyogNDkgKi9cbi8qIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKiBhbGwgZXhwb3J0cyB1c2VkICovXG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3RvLWlvYmplY3QuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5ldmFsKFwiLy8gdG8gaW5kZXhlZCBvYmplY3QsIHRvT2JqZWN0IHdpdGggZmFsbGJhY2sgZm9yIG5vbi1hcnJheS1saWtlIEVTMyBzdHJpbmdzXFxudmFyIElPYmplY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL19pb2JqZWN0ICovIDEyMClcXG4gICwgZGVmaW5lZCA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vX2RlZmluZWQgKi8gMjkpO1xcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpe1xcbiAgcmV0dXJuIElPYmplY3QoZGVmaW5lZChpdCkpO1xcbn07Ly8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lORGt1YW5NaUxDSnpiM1Z5WTJWeklqcGJJbmRsWW5CaFkyczZMeTh2TGk5K0wyTnZjbVV0YW5NdmJHbGljbUZ5ZVM5dGIyUjFiR1Z6TDE5MGJ5MXBiMkpxWldOMExtcHpQelk1TkRZaVhTd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lMeThnZEc4Z2FXNWtaWGhsWkNCdlltcGxZM1FzSUhSdlQySnFaV04wSUhkcGRHZ2dabUZzYkdKaFkyc2dabTl5SUc1dmJpMWhjbkpoZVMxc2FXdGxJRVZUTXlCemRISnBibWR6WEc1MllYSWdTVTlpYW1WamRDQTlJSEpsY1hWcGNtVW9KeTR2WDJsdlltcGxZM1FuS1Z4dUlDQXNJR1JsWm1sdVpXUWdQU0J5WlhGMWFYSmxLQ2N1TDE5a1pXWnBibVZrSnlrN1hHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlHWjFibU4wYVc5dUtHbDBLWHRjYmlBZ2NtVjBkWEp1SUVsUFltcGxZM1FvWkdWbWFXNWxaQ2hwZENrcE8xeHVmVHRjYmx4dVhHNHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OWNiaTh2SUZkRlFsQkJRMHNnUms5UFZFVlNYRzR2THlBdUwzNHZZMjl5WlMxcWN5OXNhV0p5WVhKNUwyMXZaSFZzWlhNdlgzUnZMV2x2WW1wbFkzUXVhbk5jYmk4dklHMXZaSFZzWlNCcFpDQTlJRFE1WEc0dkx5QnRiMlIxYkdVZ1kyaDFibXR6SUQwZ01DSmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQklpd2ljMjkxY21ObFVtOXZkQ0k2SWlKOVwiKTtcblxuLyoqKi8gfSksXG4vKiA1MCAqL1xuLyogbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9cbi8qIGFsbCBleHBvcnRzIHVzZWQgKi9cbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL190by1sZW5ndGguanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbmV2YWwoXCIvLyA3LjEuMTUgVG9MZW5ndGhcXG52YXIgdG9JbnRlZ2VyID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9fdG8taW50ZWdlciAqLyAzNClcXG4gICwgbWluICAgICAgID0gTWF0aC5taW47XFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7XFxuICByZXR1cm4gaXQgPiAwID8gbWluKHRvSW50ZWdlcihpdCksIDB4MWZmZmZmZmZmZmZmZmYpIDogMDsgLy8gcG93KDIsIDUzKSAtIDEgPT0gOTAwNzE5OTI1NDc0MDk5MVxcbn07Ly8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lOVEF1YW5NaUxDSnpiM1Z5WTJWeklqcGJJbmRsWW5CaFkyczZMeTh2TGk5K0wyTnZjbVV0YW5NdmJHbGljbUZ5ZVM5dGIyUjFiR1Z6TDE5MGJ5MXNaVzVuZEdndWFuTS9OakpoTnlKZExDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SXZMeUEzTGpFdU1UVWdWRzlNWlc1bmRHaGNiblpoY2lCMGIwbHVkR1ZuWlhJZ1BTQnlaWEYxYVhKbEtDY3VMMTkwYnkxcGJuUmxaMlZ5SnlsY2JpQWdMQ0J0YVc0Z0lDQWdJQ0FnUFNCTllYUm9MbTFwYmp0Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1puVnVZM1JwYjI0b2FYUXBlMXh1SUNCeVpYUjFjbTRnYVhRZ1BpQXdJRDhnYldsdUtIUnZTVzUwWldkbGNpaHBkQ2tzSURCNE1XWm1abVptWm1abVptWm1abVlwSURvZ01Ec2dMeThnY0c5M0tESXNJRFV6S1NBdElERWdQVDBnT1RBd056RTVPVEkxTkRjME1EazVNVnh1ZlR0Y2JseHVYRzR2THk4dkx5OHZMeTh2THk4dkx5OHZMeTljYmk4dklGZEZRbEJCUTBzZ1JrOVBWRVZTWEc0dkx5QXVMMzR2WTI5eVpTMXFjeTlzYVdKeVlYSjVMMjF2WkhWc1pYTXZYM1J2TFd4bGJtZDBhQzVxYzF4dUx5OGdiVzlrZFd4bElHbGtJRDBnTlRCY2JpOHZJRzF2WkhWc1pTQmphSFZ1YTNNZ1BTQXdJbDBzSW0xaGNIQnBibWR6SWpvaVFVRkJRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUluMD1cIik7XG5cbi8qKiovIH0pLFxuLyogNTEgKi9cbi8qIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKiBhbGwgZXhwb3J0cyB1c2VkICovXG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fdG8tb2JqZWN0LmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5ldmFsKFwiLy8gNy4xLjEzIFRvT2JqZWN0KGFyZ3VtZW50KVxcbnZhciBkZWZpbmVkID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9fZGVmaW5lZCAqLyAyOSk7XFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7XFxuICByZXR1cm4gT2JqZWN0KGRlZmluZWQoaXQpKTtcXG59Oy8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pTlRFdWFuTWlMQ0p6YjNWeVkyVnpJanBiSW5kbFluQmhZMnM2THk4dkxpOStMMk52Y21VdGFuTXZiR2xpY21GeWVTOXRiMlIxYkdWekwxOTBieTF2WW1wbFkzUXVhbk0vWWpWak1DSmRMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUl2THlBM0xqRXVNVE1nVkc5UFltcGxZM1FvWVhKbmRXMWxiblFwWEc1MllYSWdaR1ZtYVc1bFpDQTlJSEpsY1hWcGNtVW9KeTR2WDJSbFptbHVaV1FuS1R0Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1puVnVZM1JwYjI0b2FYUXBlMXh1SUNCeVpYUjFjbTRnVDJKcVpXTjBLR1JsWm1sdVpXUW9hWFFwS1R0Y2JuMDdYRzVjYmx4dUx5OHZMeTh2THk4dkx5OHZMeTh2THk4dlhHNHZMeUJYUlVKUVFVTkxJRVpQVDFSRlVseHVMeThnTGk5K0wyTnZjbVV0YW5NdmJHbGljbUZ5ZVM5dGIyUjFiR1Z6TDE5MGJ5MXZZbXBsWTNRdWFuTmNiaTh2SUcxdlpIVnNaU0JwWkNBOUlEVXhYRzR2THlCdGIyUjFiR1VnWTJoMWJtdHpJRDBnTUNKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTSXNJbk52ZFhKalpWSnZiM1FpT2lJaWZRPT1cIik7XG5cbi8qKiovIH0pLFxuLyogNTIgKi9cbi8qIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKiBhbGwgZXhwb3J0cyB1c2VkICovXG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fdWlkLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5ldmFsKFwidmFyIGlkID0gMFxcbiAgLCBweCA9IE1hdGgucmFuZG9tKCk7XFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihrZXkpe1xcbiAgcmV0dXJuICdTeW1ib2woJy5jb25jYXQoa2V5ID09PSB1bmRlZmluZWQgPyAnJyA6IGtleSwgJylfJywgKCsraWQgKyBweCkudG9TdHJpbmcoMzYpKTtcXG59Oy8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pTlRJdWFuTWlMQ0p6YjNWeVkyVnpJanBiSW5kbFluQmhZMnM2THk4dkxpOStMMk52Y21VdGFuTXZiR2xpY21GeWVTOXRiMlIxYkdWekwxOTFhV1F1YW5NL1pUaGpaQ0pkTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lKMllYSWdhV1FnUFNBd1hHNGdJQ3dnY0hnZ1BTQk5ZWFJvTG5KaGJtUnZiU2dwTzF4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCbWRXNWpkR2x2YmloclpYa3BlMXh1SUNCeVpYUjFjbTRnSjFONWJXSnZiQ2duTG1OdmJtTmhkQ2hyWlhrZ1BUMDlJSFZ1WkdWbWFXNWxaQ0EvSUNjbklEb2dhMlY1TENBbktWOG5MQ0FvS3l0cFpDQXJJSEI0S1M1MGIxTjBjbWx1Wnlnek5pa3BPMXh1ZlR0Y2JseHVYRzR2THk4dkx5OHZMeTh2THk4dkx5OHZMeTljYmk4dklGZEZRbEJCUTBzZ1JrOVBWRVZTWEc0dkx5QXVMMzR2WTI5eVpTMXFjeTlzYVdKeVlYSjVMMjF2WkhWc1pYTXZYM1ZwWkM1cWMxeHVMeThnYlc5a2RXeGxJR2xrSUQwZ05USmNiaTh2SUcxdlpIVnNaU0JqYUhWdWEzTWdQU0F3SWwwc0ltMWhjSEJwYm1keklqb2lRVUZCUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQklpd2ljMjkxY21ObFVtOXZkQ0k2SWlKOVwiKTtcblxuLyoqKi8gfSksXG4vKiA1MyAqL1xuLyogbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9cbi8qIGFsbCBleHBvcnRzIHVzZWQgKi9cbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9+L21hcG5pay1yZWZlcmVuY2UgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbmV2YWwoXCJmdW5jdGlvbiB3ZWJwYWNrRW1wdHlDb250ZXh0KHJlcSkge1xcblxcdHRocm93IG5ldyBFcnJvcihcXFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcXFwiICsgcmVxICsgXFxcIicuXFxcIik7XFxufVxcbndlYnBhY2tFbXB0eUNvbnRleHQua2V5cyA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gW107IH07XFxud2VicGFja0VtcHR5Q29udGV4dC5yZXNvbHZlID0gd2VicGFja0VtcHR5Q29udGV4dDtcXG5tb2R1bGUuZXhwb3J0cyA9IHdlYnBhY2tFbXB0eUNvbnRleHQ7XFxud2VicGFja0VtcHR5Q29udGV4dC5pZCA9IDUzOy8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pTlRNdWFuTWlMQ0p6YjNWeVkyVnpJanBiSW5kbFluQmhZMnM2THk4dkxpOStMMjFoY0c1cGF5MXlaV1psY21WdVkyVS9aRFkzT1NKZExDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5Sm1kVzVqZEdsdmJpQjNaV0p3WVdOclJXMXdkSGxEYjI1MFpYaDBLSEpsY1NrZ2UxeHVYSFIwYUhKdmR5QnVaWGNnUlhKeWIzSW9YQ0pEWVc1dWIzUWdabWx1WkNCdGIyUjFiR1VnSjF3aUlDc2djbVZ4SUNzZ1hDSW5MbHdpS1R0Y2JuMWNibmRsWW5CaFkydEZiWEIwZVVOdmJuUmxlSFF1YTJWNWN5QTlJR1oxYm1OMGFXOXVLQ2tnZXlCeVpYUjFjbTRnVzEwN0lIMDdYRzUzWldKd1lXTnJSVzF3ZEhsRGIyNTBaWGgwTG5KbGMyOXNkbVVnUFNCM1pXSndZV05yUlcxd2RIbERiMjUwWlhoME8xeHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQjNaV0p3WVdOclJXMXdkSGxEYjI1MFpYaDBPMXh1ZDJWaWNHRmphMFZ0Y0hSNVEyOXVkR1Y0ZEM1cFpDQTlJRFV6TzF4dVhHNWNiaTh2THk4dkx5OHZMeTh2THk4dkx5OHZMMXh1THk4Z1YwVkNVRUZEU3lCR1QwOVVSVkpjYmk4dklDNHZmaTl0WVhCdWFXc3RjbVZtWlhKbGJtTmxYRzR2THlCdGIyUjFiR1VnYVdRZ1BTQTFNMXh1THk4Z2JXOWtkV3hsSUdOb2RXNXJjeUE5SURBaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJJaXdpYzI5MWNtTmxVbTl2ZENJNklpSjlcIik7XG5cbi8qKiovIH0pLFxuLyogNTQgKi9cbi8qIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKiBhbGwgZXhwb3J0cyB1c2VkICovXG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9+L3JhbWRhL3NyYy9hcHBseS5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5ldmFsKFwidmFyIF9jdXJyeTIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL2ludGVybmFsL19jdXJyeTIgKi8gMSk7XFxuXFxuXFxuLyoqXFxuICogQXBwbGllcyBmdW5jdGlvbiBgZm5gIHRvIHRoZSBhcmd1bWVudCBsaXN0IGBhcmdzYC4gVGhpcyBpcyB1c2VmdWwgZm9yXFxuICogY3JlYXRpbmcgYSBmaXhlZC1hcml0eSBmdW5jdGlvbiBmcm9tIGEgdmFyaWFkaWMgZnVuY3Rpb24uIGBmbmAgc2hvdWxkIGJlIGFcXG4gKiBib3VuZCBmdW5jdGlvbiBpZiBjb250ZXh0IGlzIHNpZ25pZmljYW50LlxcbiAqXFxuICogQGZ1bmNcXG4gKiBAbWVtYmVyT2YgUlxcbiAqIEBzaW5jZSB2MC43LjBcXG4gKiBAY2F0ZWdvcnkgRnVuY3Rpb25cXG4gKiBAc2lnICgqLi4uIC0+IGEpIC0+IFsqXSAtPiBhXFxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGZ1bmN0aW9uIHdoaWNoIHdpbGwgYmUgY2FsbGVkIHdpdGggYGFyZ3NgXFxuICogQHBhcmFtIHtBcnJheX0gYXJncyBUaGUgYXJndW1lbnRzIHRvIGNhbGwgYGZuYCB3aXRoXFxuICogQHJldHVybiB7Kn0gcmVzdWx0IFRoZSByZXN1bHQsIGVxdWl2YWxlbnQgdG8gYGZuKC4uLmFyZ3MpYFxcbiAqIEBzZWUgUi5jYWxsLCBSLnVuYXBwbHlcXG4gKiBAZXhhbXBsZVxcbiAqXFxuICogICAgICB2YXIgbnVtcyA9IFsxLCAyLCAzLCAtOTksIDQyLCA2LCA3XTtcXG4gKiAgICAgIFIuYXBwbHkoTWF0aC5tYXgsIG51bXMpOyAvLz0+IDQyXFxuICogQHN5bWIgUi5hcHBseShmLCBbYSwgYiwgY10pID0gZihhLCBiLCBjKVxcbiAqL1xcbm1vZHVsZS5leHBvcnRzID0gX2N1cnJ5MihmdW5jdGlvbiBhcHBseShmbiwgYXJncykge1xcbiAgcmV0dXJuIGZuLmFwcGx5KHRoaXMsIGFyZ3MpO1xcbn0pO1xcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pTlRRdWFuTWlMQ0p6YjNWeVkyVnpJanBiSW5kbFluQmhZMnM2THk4dkxpOStMM0poYldSaEwzTnlZeTloY0hCc2VTNXFjejh5TlRJd0lsMHNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJblpoY2lCZlkzVnljbmt5SUQwZ2NtVnhkV2x5WlNnbkxpOXBiblJsY201aGJDOWZZM1Z5Y25reUp5azdYRzVjYmx4dUx5b3FYRzRnS2lCQmNIQnNhV1Z6SUdaMWJtTjBhVzl1SUdCbWJtQWdkRzhnZEdobElHRnlaM1Z0Wlc1MElHeHBjM1FnWUdGeVozTmdMaUJVYUdseklHbHpJSFZ6WldaMWJDQm1iM0pjYmlBcUlHTnlaV0YwYVc1bklHRWdabWw0WldRdFlYSnBkSGtnWm5WdVkzUnBiMjRnWm5KdmJTQmhJSFpoY21saFpHbGpJR1oxYm1OMGFXOXVMaUJnWm01Z0lITm9iM1ZzWkNCaVpTQmhYRzRnS2lCaWIzVnVaQ0JtZFc1amRHbHZiaUJwWmlCamIyNTBaWGgwSUdseklITnBaMjVwWm1sallXNTBMbHh1SUNwY2JpQXFJRUJtZFc1alhHNGdLaUJBYldWdFltVnlUMllnVWx4dUlDb2dRSE5wYm1ObElIWXdMamN1TUZ4dUlDb2dRR05oZEdWbmIzSjVJRVoxYm1OMGFXOXVYRzRnS2lCQWMybG5JQ2dxTGk0dUlDMCtJR0VwSUMwK0lGc3FYU0F0UGlCaFhHNGdLaUJBY0dGeVlXMGdlMFoxYm1OMGFXOXVmU0JtYmlCVWFHVWdablZ1WTNScGIyNGdkMmhwWTJnZ2QybHNiQ0JpWlNCallXeHNaV1FnZDJsMGFDQmdZWEpuYzJCY2JpQXFJRUJ3WVhKaGJTQjdRWEp5WVhsOUlHRnlaM01nVkdobElHRnlaM1Z0Wlc1MGN5QjBieUJqWVd4c0lHQm1ibUFnZDJsMGFGeHVJQ29nUUhKbGRIVnliaUI3S24wZ2NtVnpkV3gwSUZSb1pTQnlaWE4xYkhRc0lHVnhkV2wyWVd4bGJuUWdkRzhnWUdadUtDNHVMbUZ5WjNNcFlGeHVJQ29nUUhObFpTQlNMbU5oYkd3c0lGSXVkVzVoY0hCc2VWeHVJQ29nUUdWNFlXMXdiR1ZjYmlBcVhHNGdLaUFnSUNBZ0lIWmhjaUJ1ZFcxeklEMGdXekVzSURJc0lETXNJQzA1T1N3Z05ESXNJRFlzSURkZE8xeHVJQ29nSUNBZ0lDQlNMbUZ3Y0d4NUtFMWhkR2d1YldGNExDQnVkVzF6S1RzZ0x5ODlQaUEwTWx4dUlDb2dRSE41YldJZ1VpNWhjSEJzZVNobUxDQmJZU3dnWWl3Z1kxMHBJRDBnWmloaExDQmlMQ0JqS1Z4dUlDb3ZYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJRjlqZFhKeWVUSW9ablZ1WTNScGIyNGdZWEJ3Ykhrb1ptNHNJR0Z5WjNNcElIdGNiaUFnY21WMGRYSnVJR1p1TG1Gd2NHeDVLSFJvYVhNc0lHRnlaM01wTzF4dWZTazdYRzVjYmx4dVhHNHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OWNiaTh2SUZkRlFsQkJRMHNnUms5UFZFVlNYRzR2THlBdUwzNHZjbUZ0WkdFdmMzSmpMMkZ3Y0d4NUxtcHpYRzR2THlCdGIyUjFiR1VnYVdRZ1BTQTFORnh1THk4Z2JXOWtkV3hsSUdOb2RXNXJjeUE5SURBaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN0lpd2ljMjkxY21ObFVtOXZkQ0k2SWlKOVwiKTtcblxuLyoqKi8gfSksXG4vKiA1NSAqL1xuLyogbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9cbi8qIGFsbCBleHBvcnRzIHVzZWQgKi9cbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9+L3JhbWRhL3NyYy9hcHBseVNwZWMuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbmV2YWwoXCJ2YXIgX2N1cnJ5MSA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vaW50ZXJuYWwvX2N1cnJ5MSAqLyAyKTtcXG52YXIgYXBwbHkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL2FwcGx5ICovIDU0KTtcXG52YXIgY3VycnlOID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9jdXJyeU4gKi8gNik7XFxudmFyIG1hcCA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vbWFwICovIDgpO1xcbnZhciBtYXggPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL21heCAqLyA2Myk7XFxudmFyIHBsdWNrID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9wbHVjayAqLyAxODQpO1xcbnZhciByZWR1Y2UgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL3JlZHVjZSAqLyAyNik7XFxudmFyIHZhbHVlcyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vdmFsdWVzICovIDY2KTtcXG5cXG5cXG4vKipcXG4gKiBHaXZlbiBhIHNwZWMgb2JqZWN0IHJlY3Vyc2l2ZWx5IG1hcHBpbmcgcHJvcGVydGllcyB0byBmdW5jdGlvbnMsIGNyZWF0ZXMgYVxcbiAqIGZ1bmN0aW9uIHByb2R1Y2luZyBhbiBvYmplY3Qgb2YgdGhlIHNhbWUgc3RydWN0dXJlLCBieSBtYXBwaW5nIGVhY2ggcHJvcGVydHlcXG4gKiB0byB0aGUgcmVzdWx0IG9mIGNhbGxpbmcgaXRzIGFzc29jaWF0ZWQgZnVuY3Rpb24gd2l0aCB0aGUgc3VwcGxpZWQgYXJndW1lbnRzLlxcbiAqXFxuICogQGZ1bmNcXG4gKiBAbWVtYmVyT2YgUlxcbiAqIEBzaW5jZSB2MC4yMC4wXFxuICogQGNhdGVnb3J5IEZ1bmN0aW9uXFxuICogQHNpZyB7azogKChhLCBiLCAuLi4sIG0pIC0+IHYpfSAtPiAoKGEsIGIsIC4uLiwgbSkgLT4ge2s6IHZ9KVxcbiAqIEBwYXJhbSB7T2JqZWN0fSBzcGVjIGFuIG9iamVjdCByZWN1cnNpdmVseSBtYXBwaW5nIHByb3BlcnRpZXMgdG8gZnVuY3Rpb25zIGZvclxcbiAqICAgICAgICBwcm9kdWNpbmcgdGhlIHZhbHVlcyBmb3IgdGhlc2UgcHJvcGVydGllcy5cXG4gKiBAcmV0dXJuIHtGdW5jdGlvbn0gQSBmdW5jdGlvbiB0aGF0IHJldHVybnMgYW4gb2JqZWN0IG9mIHRoZSBzYW1lIHN0cnVjdHVyZVxcbiAqIGFzIGBzcGVjJywgd2l0aCBlYWNoIHByb3BlcnR5IHNldCB0byB0aGUgdmFsdWUgcmV0dXJuZWQgYnkgY2FsbGluZyBpdHNcXG4gKiBhc3NvY2lhdGVkIGZ1bmN0aW9uIHdpdGggdGhlIHN1cHBsaWVkIGFyZ3VtZW50cy5cXG4gKiBAc2VlIFIuY29udmVyZ2UsIFIuanV4dFxcbiAqIEBleGFtcGxlXFxuICpcXG4gKiAgICAgIHZhciBnZXRNZXRyaWNzID0gUi5hcHBseVNwZWMoe1xcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdW06IFIuYWRkLFxcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXN0ZWQ6IHsgbXVsOiBSLm11bHRpcGx5IH1cXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XFxuICogICAgICBnZXRNZXRyaWNzKDIsIDQpOyAvLyA9PiB7IHN1bTogNiwgbmVzdGVkOiB7IG11bDogOCB9IH1cXG4gKiBAc3ltYiBSLmFwcGx5U3BlYyh7IHg6IGYsIHk6IHsgejogZyB9IH0pKGEsIGIpID0geyB4OiBmKGEsIGIpLCB5OiB7IHo6IGcoYSwgYikgfSB9XFxuICovXFxubW9kdWxlLmV4cG9ydHMgPSBfY3VycnkxKGZ1bmN0aW9uIGFwcGx5U3BlYyhzcGVjKSB7XFxuICBzcGVjID0gbWFwKGZ1bmN0aW9uKHYpIHsgcmV0dXJuIHR5cGVvZiB2ID09ICdmdW5jdGlvbicgPyB2IDogYXBwbHlTcGVjKHYpOyB9LFxcbiAgICAgICAgICAgICBzcGVjKTtcXG4gIHJldHVybiBjdXJyeU4ocmVkdWNlKG1heCwgMCwgcGx1Y2soJ2xlbmd0aCcsIHZhbHVlcyhzcGVjKSkpLFxcbiAgICAgICAgICAgICAgICBmdW5jdGlvbigpIHtcXG4gICAgICAgICAgICAgICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cztcXG4gICAgICAgICAgICAgICAgICByZXR1cm4gbWFwKGZ1bmN0aW9uKGYpIHsgcmV0dXJuIGFwcGx5KGYsIGFyZ3MpOyB9LCBzcGVjKTtcXG4gICAgICAgICAgICAgICAgfSk7XFxufSk7XFxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lOVFV1YW5NaUxDSnpiM1Z5WTJWeklqcGJJbmRsWW5CaFkyczZMeTh2TGk5K0wzSmhiV1JoTDNOeVl5OWhjSEJzZVZOd1pXTXVhbk0vT1dNeFpTSmRMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUoyWVhJZ1gyTjFjbko1TVNBOUlISmxjWFZwY21Vb0p5NHZhVzUwWlhKdVlXd3ZYMk4xY25KNU1TY3BPMXh1ZG1GeUlHRndjR3g1SUQwZ2NtVnhkV2x5WlNnbkxpOWhjSEJzZVNjcE8xeHVkbUZ5SUdOMWNuSjVUaUE5SUhKbGNYVnBjbVVvSnk0dlkzVnljbmxPSnlrN1hHNTJZWElnYldGd0lEMGdjbVZ4ZFdseVpTZ25MaTl0WVhBbktUdGNiblpoY2lCdFlYZ2dQU0J5WlhGMWFYSmxLQ2N1TDIxaGVDY3BPMXh1ZG1GeUlIQnNkV05ySUQwZ2NtVnhkV2x5WlNnbkxpOXdiSFZqYXljcE8xeHVkbUZ5SUhKbFpIVmpaU0E5SUhKbGNYVnBjbVVvSnk0dmNtVmtkV05sSnlrN1hHNTJZWElnZG1Gc2RXVnpJRDBnY21WeGRXbHlaU2duTGk5MllXeDFaWE1uS1R0Y2JseHVYRzR2S2lwY2JpQXFJRWRwZG1WdUlHRWdjM0JsWXlCdlltcGxZM1FnY21WamRYSnphWFpsYkhrZ2JXRndjR2x1WnlCd2NtOXdaWEowYVdWeklIUnZJR1oxYm1OMGFXOXVjeXdnWTNKbFlYUmxjeUJoWEc0Z0tpQm1kVzVqZEdsdmJpQndjbTlrZFdOcGJtY2dZVzRnYjJKcVpXTjBJRzltSUhSb1pTQnpZVzFsSUhOMGNuVmpkSFZ5WlN3Z1lua2diV0Z3Y0dsdVp5QmxZV05vSUhCeWIzQmxjblI1WEc0Z0tpQjBieUIwYUdVZ2NtVnpkV3gwSUc5bUlHTmhiR3hwYm1jZ2FYUnpJR0Z6YzI5amFXRjBaV1FnWm5WdVkzUnBiMjRnZDJsMGFDQjBhR1VnYzNWd2NHeHBaV1FnWVhKbmRXMWxiblJ6TGx4dUlDcGNiaUFxSUVCbWRXNWpYRzRnS2lCQWJXVnRZbVZ5VDJZZ1VseHVJQ29nUUhOcGJtTmxJSFl3TGpJd0xqQmNiaUFxSUVCallYUmxaMjl5ZVNCR2RXNWpkR2x2Ymx4dUlDb2dRSE5wWnlCN2F6b2dLQ2hoTENCaUxDQXVMaTRzSUcwcElDMCtJSFlwZlNBdFBpQW9LR0VzSUdJc0lDNHVMaXdnYlNrZ0xUNGdlMnM2SUhaOUtWeHVJQ29nUUhCaGNtRnRJSHRQWW1wbFkzUjlJSE53WldNZ1lXNGdiMkpxWldOMElISmxZM1Z5YzJsMlpXeDVJRzFoY0hCcGJtY2djSEp2Y0dWeWRHbGxjeUIwYnlCbWRXNWpkR2x2Ym5NZ1ptOXlYRzRnS2lBZ0lDQWdJQ0FnY0hKdlpIVmphVzVuSUhSb1pTQjJZV3gxWlhNZ1ptOXlJSFJvWlhObElIQnliM0JsY25ScFpYTXVYRzRnS2lCQWNtVjBkWEp1SUh0R2RXNWpkR2x2Ym4wZ1FTQm1kVzVqZEdsdmJpQjBhR0YwSUhKbGRIVnlibk1nWVc0Z2IySnFaV04wSUc5bUlIUm9aU0J6WVcxbElITjBjblZqZEhWeVpWeHVJQ29nWVhNZ1lITndaV01uTENCM2FYUm9JR1ZoWTJnZ2NISnZjR1Z5ZEhrZ2MyVjBJSFJ2SUhSb1pTQjJZV3gxWlNCeVpYUjFjbTVsWkNCaWVTQmpZV3hzYVc1bklHbDBjMXh1SUNvZ1lYTnpiMk5wWVhSbFpDQm1kVzVqZEdsdmJpQjNhWFJvSUhSb1pTQnpkWEJ3YkdsbFpDQmhjbWQxYldWdWRITXVYRzRnS2lCQWMyVmxJRkl1WTI5dWRtVnlaMlVzSUZJdWFuVjRkRnh1SUNvZ1FHVjRZVzF3YkdWY2JpQXFYRzRnS2lBZ0lDQWdJSFpoY2lCblpYUk5aWFJ5YVdOeklEMGdVaTVoY0hCc2VWTndaV01vZTF4dUlDb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE4xYlRvZ1VpNWhaR1FzWEc0Z0tpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdibVZ6ZEdWa09pQjdJRzExYkRvZ1VpNXRkV3gwYVhCc2VTQjlYRzRnS2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlNrN1hHNGdLaUFnSUNBZ0lHZGxkRTFsZEhKcFkzTW9NaXdnTkNrN0lDOHZJRDArSUhzZ2MzVnRPaUEyTENCdVpYTjBaV1E2SUhzZ2JYVnNPaUE0SUgwZ2ZWeHVJQ29nUUhONWJXSWdVaTVoY0hCc2VWTndaV01vZXlCNE9pQm1MQ0I1T2lCN0lIbzZJR2NnZlNCOUtTaGhMQ0JpS1NBOUlIc2dlRG9nWmloaExDQmlLU3dnZVRvZ2V5QjZPaUJuS0dFc0lHSXBJSDBnZlZ4dUlDb3ZYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJRjlqZFhKeWVURW9ablZ1WTNScGIyNGdZWEJ3YkhsVGNHVmpLSE53WldNcElIdGNiaUFnYzNCbFl5QTlJRzFoY0NobWRXNWpkR2x2YmloMktTQjdJSEpsZEhWeWJpQjBlWEJsYjJZZ2RpQTlQU0FuWm5WdVkzUnBiMjRuSUQ4Z2RpQTZJR0Z3Y0d4NVUzQmxZeWgyS1RzZ2ZTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNCemNHVmpLVHRjYmlBZ2NtVjBkWEp1SUdOMWNuSjVUaWh5WldSMVkyVW9iV0Y0TENBd0xDQndiSFZqYXlnbmJHVnVaM1JvSnl3Z2RtRnNkV1Z6S0hOd1pXTXBLU2tzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWm5WdVkzUnBiMjRvS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZWElnWVhKbmN5QTlJR0Z5WjNWdFpXNTBjenRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJ0WVhBb1puVnVZM1JwYjI0b1ppa2dleUJ5WlhSMWNtNGdZWEJ3Ykhrb1ppd2dZWEpuY3lrN0lIMHNJSE53WldNcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMHBPMXh1ZlNrN1hHNWNibHh1WEc0dkx5OHZMeTh2THk4dkx5OHZMeTh2THk5Y2JpOHZJRmRGUWxCQlEwc2dSazlQVkVWU1hHNHZMeUF1TDM0dmNtRnRaR0V2YzNKakwyRndjR3g1VTNCbFl5NXFjMXh1THk4Z2JXOWtkV3hsSUdsa0lEMGdOVFZjYmk4dklHMXZaSFZzWlNCamFIVnVhM01nUFNBd0lsMHNJbTFoY0hCcGJtZHpJam9pUVVGQlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk95SXNJbk52ZFhKalpWSnZiM1FpT2lJaWZRPT1cIik7XG5cbi8qKiovIH0pLFxuLyogNTYgKi9cbi8qIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKiBhbGwgZXhwb3J0cyB1c2VkICovXG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vfi9yYW1kYS9zcmMvZXF1YWxzLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5ldmFsKFwidmFyIF9jdXJyeTIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL2ludGVybmFsL19jdXJyeTIgKi8gMSk7XFxudmFyIF9lcXVhbHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL2ludGVybmFsL19lcXVhbHMgKi8gMTU3KTtcXG5cXG5cXG4vKipcXG4gKiBSZXR1cm5zIGB0cnVlYCBpZiBpdHMgYXJndW1lbnRzIGFyZSBlcXVpdmFsZW50LCBgZmFsc2VgIG90aGVyd2lzZS4gSGFuZGxlc1xcbiAqIGN5Y2xpY2FsIGRhdGEgc3RydWN0dXJlcy5cXG4gKlxcbiAqIERpc3BhdGNoZXMgc3ltbWV0cmljYWxseSB0byB0aGUgYGVxdWFsc2AgbWV0aG9kcyBvZiBib3RoIGFyZ3VtZW50cywgaWZcXG4gKiBwcmVzZW50LlxcbiAqXFxuICogQGZ1bmNcXG4gKiBAbWVtYmVyT2YgUlxcbiAqIEBzaW5jZSB2MC4xNS4wXFxuICogQGNhdGVnb3J5IFJlbGF0aW9uXFxuICogQHNpZyBhIC0+IGIgLT4gQm9vbGVhblxcbiAqIEBwYXJhbSB7Kn0gYVxcbiAqIEBwYXJhbSB7Kn0gYlxcbiAqIEByZXR1cm4ge0Jvb2xlYW59XFxuICogQGV4YW1wbGVcXG4gKlxcbiAqICAgICAgUi5lcXVhbHMoMSwgMSk7IC8vPT4gdHJ1ZVxcbiAqICAgICAgUi5lcXVhbHMoMSwgJzEnKTsgLy89PiBmYWxzZVxcbiAqICAgICAgUi5lcXVhbHMoWzEsIDIsIDNdLCBbMSwgMiwgM10pOyAvLz0+IHRydWVcXG4gKlxcbiAqICAgICAgdmFyIGEgPSB7fTsgYS52ID0gYTtcXG4gKiAgICAgIHZhciBiID0ge307IGIudiA9IGI7XFxuICogICAgICBSLmVxdWFscyhhLCBiKTsgLy89PiB0cnVlXFxuICovXFxubW9kdWxlLmV4cG9ydHMgPSBfY3VycnkyKGZ1bmN0aW9uIGVxdWFscyhhLCBiKSB7XFxuICByZXR1cm4gX2VxdWFscyhhLCBiLCBbXSwgW10pO1xcbn0pO1xcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pTlRZdWFuTWlMQ0p6YjNWeVkyVnpJanBiSW5kbFluQmhZMnM2THk4dkxpOStMM0poYldSaEwzTnlZeTlsY1hWaGJITXVhbk0vWkdGaE55SmRMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUoyWVhJZ1gyTjFjbko1TWlBOUlISmxjWFZwY21Vb0p5NHZhVzUwWlhKdVlXd3ZYMk4xY25KNU1pY3BPMXh1ZG1GeUlGOWxjWFZoYkhNZ1BTQnlaWEYxYVhKbEtDY3VMMmx1ZEdWeWJtRnNMMTlsY1hWaGJITW5LVHRjYmx4dVhHNHZLaXBjYmlBcUlGSmxkSFZ5Ym5NZ1lIUnlkV1ZnSUdsbUlHbDBjeUJoY21kMWJXVnVkSE1nWVhKbElHVnhkV2wyWVd4bGJuUXNJR0JtWVd4elpXQWdiM1JvWlhKM2FYTmxMaUJJWVc1a2JHVnpYRzRnS2lCamVXTnNhV05oYkNCa1lYUmhJSE4wY25WamRIVnlaWE11WEc0Z0tseHVJQ29nUkdsemNHRjBZMmhsY3lCemVXMXRaWFJ5YVdOaGJHeDVJSFJ2SUhSb1pTQmdaWEYxWVd4ellDQnRaWFJvYjJSeklHOW1JR0p2ZEdnZ1lYSm5kVzFsYm5SekxDQnBabHh1SUNvZ2NISmxjMlZ1ZEM1Y2JpQXFYRzRnS2lCQVpuVnVZMXh1SUNvZ1FHMWxiV0psY2s5bUlGSmNiaUFxSUVCemFXNWpaU0IyTUM0eE5TNHdYRzRnS2lCQVkyRjBaV2R2Y25rZ1VtVnNZWFJwYjI1Y2JpQXFJRUJ6YVdjZ1lTQXRQaUJpSUMwK0lFSnZiMnhsWVc1Y2JpQXFJRUJ3WVhKaGJTQjdLbjBnWVZ4dUlDb2dRSEJoY21GdElIc3FmU0JpWEc0Z0tpQkFjbVYwZFhKdUlIdENiMjlzWldGdWZWeHVJQ29nUUdWNFlXMXdiR1ZjYmlBcVhHNGdLaUFnSUNBZ0lGSXVaWEYxWVd4ektERXNJREVwT3lBdkx6MCtJSFJ5ZFdWY2JpQXFJQ0FnSUNBZ1VpNWxjWFZoYkhNb01Td2dKekVuS1RzZ0x5ODlQaUJtWVd4elpWeHVJQ29nSUNBZ0lDQlNMbVZ4ZFdGc2N5aGJNU3dnTWl3Z00xMHNJRnN4TENBeUxDQXpYU2s3SUM4dlBUNGdkSEoxWlZ4dUlDcGNiaUFxSUNBZ0lDQWdkbUZ5SUdFZ1BTQjdmVHNnWVM1MklEMGdZVHRjYmlBcUlDQWdJQ0FnZG1GeUlHSWdQU0I3ZlRzZ1lpNTJJRDBnWWp0Y2JpQXFJQ0FnSUNBZ1VpNWxjWFZoYkhNb1lTd2dZaWs3SUM4dlBUNGdkSEoxWlZ4dUlDb3ZYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJRjlqZFhKeWVUSW9ablZ1WTNScGIyNGdaWEYxWVd4ektHRXNJR0lwSUh0Y2JpQWdjbVYwZFhKdUlGOWxjWFZoYkhNb1lTd2dZaXdnVzEwc0lGdGRLVHRjYm4wcE8xeHVYRzVjYmx4dUx5OHZMeTh2THk4dkx5OHZMeTh2THk4dlhHNHZMeUJYUlVKUVFVTkxJRVpQVDFSRlVseHVMeThnTGk5K0wzSmhiV1JoTDNOeVl5OWxjWFZoYkhNdWFuTmNiaTh2SUcxdlpIVnNaU0JwWkNBOUlEVTJYRzR2THlCdGIyUjFiR1VnWTJoMWJtdHpJRDBnTUNKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUc2lMQ0p6YjNWeVkyVlNiMjkwSWpvaUluMD1cIik7XG5cbi8qKiovIH0pLFxuLyogNTcgKi9cbi8qIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKiBhbGwgZXhwb3J0cyB1c2VkICovXG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vfi9yYW1kYS9zcmMvaW50ZXJuYWwvX2NoZWNrRm9yTWV0aG9kLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5ldmFsKFwidmFyIF9pc0FycmF5ID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9faXNBcnJheSAqLyAzNyk7XFxuXFxuXFxuLyoqXFxuICogVGhpcyBjaGVja3Mgd2hldGhlciBhIGZ1bmN0aW9uIGhhcyBhIFttZXRob2RuYW1lXSBmdW5jdGlvbi4gSWYgaXQgaXNuJ3QgYW5cXG4gKiBhcnJheSBpdCB3aWxsIGV4ZWN1dGUgdGhhdCBmdW5jdGlvbiBvdGhlcndpc2UgaXQgd2lsbCBkZWZhdWx0IHRvIHRoZSByYW1kYVxcbiAqIGltcGxlbWVudGF0aW9uLlxcbiAqXFxuICogQHByaXZhdGVcXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiByYW1kYSBpbXBsZW10YXRpb25cXG4gKiBAcGFyYW0ge1N0cmluZ30gbWV0aG9kbmFtZSBwcm9wZXJ0eSB0byBjaGVjayBmb3IgYSBjdXN0b20gaW1wbGVtZW50YXRpb25cXG4gKiBAcmV0dXJuIHtPYmplY3R9IFdoYXRldmVyIHRoZSByZXR1cm4gdmFsdWUgb2YgdGhlIG1ldGhvZCBpcy5cXG4gKi9cXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIF9jaGVja0Zvck1ldGhvZChtZXRob2RuYW1lLCBmbikge1xcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xcbiAgICB2YXIgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcXG4gICAgaWYgKGxlbmd0aCA9PT0gMCkge1xcbiAgICAgIHJldHVybiBmbigpO1xcbiAgICB9XFxuICAgIHZhciBvYmogPSBhcmd1bWVudHNbbGVuZ3RoIC0gMV07XFxuICAgIHJldHVybiAoX2lzQXJyYXkob2JqKSB8fCB0eXBlb2Ygb2JqW21ldGhvZG5hbWVdICE9PSAnZnVuY3Rpb24nKSA/XFxuICAgICAgZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKSA6XFxuICAgICAgb2JqW21ldGhvZG5hbWVdLmFwcGx5KG9iaiwgQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAwLCBsZW5ndGggLSAxKSk7XFxuICB9O1xcbn07XFxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lOVGN1YW5NaUxDSnpiM1Z5WTJWeklqcGJJbmRsWW5CaFkyczZMeTh2TGk5K0wzSmhiV1JoTDNOeVl5OXBiblJsY201aGJDOWZZMmhsWTJ0R2IzSk5aWFJvYjJRdWFuTS9ZakF3TmlKZExDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SjJZWElnWDJselFYSnlZWGtnUFNCeVpYRjFhWEpsS0NjdUwxOXBjMEZ5Y21GNUp5azdYRzVjYmx4dUx5b3FYRzRnS2lCVWFHbHpJR05vWldOcmN5QjNhR1YwYUdWeUlHRWdablZ1WTNScGIyNGdhR0Z6SUdFZ1cyMWxkR2h2Wkc1aGJXVmRJR1oxYm1OMGFXOXVMaUJKWmlCcGRDQnBjMjRuZENCaGJseHVJQ29nWVhKeVlYa2dhWFFnZDJsc2JDQmxlR1ZqZFhSbElIUm9ZWFFnWm5WdVkzUnBiMjRnYjNSb1pYSjNhWE5sSUdsMElIZHBiR3dnWkdWbVlYVnNkQ0IwYnlCMGFHVWdjbUZ0WkdGY2JpQXFJR2x0Y0d4bGJXVnVkR0YwYVc5dUxseHVJQ3BjYmlBcUlFQndjbWwyWVhSbFhHNGdLaUJBY0dGeVlXMGdlMFoxYm1OMGFXOXVmU0JtYmlCeVlXMWtZU0JwYlhCc1pXMTBZWFJwYjI1Y2JpQXFJRUJ3WVhKaGJTQjdVM1J5YVc1bmZTQnRaWFJvYjJSdVlXMWxJSEJ5YjNCbGNuUjVJSFJ2SUdOb1pXTnJJR1p2Y2lCaElHTjFjM1J2YlNCcGJYQnNaVzFsYm5SaGRHbHZibHh1SUNvZ1FISmxkSFZ5YmlCN1QySnFaV04wZlNCWGFHRjBaWFpsY2lCMGFHVWdjbVYwZFhKdUlIWmhiSFZsSUc5bUlIUm9aU0J0WlhSb2IyUWdhWE11WEc0Z0tpOWNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdablZ1WTNScGIyNGdYMk5vWldOclJtOXlUV1YwYUc5a0tHMWxkR2h2Wkc1aGJXVXNJR1p1S1NCN1hHNGdJSEpsZEhWeWJpQm1kVzVqZEdsdmJpZ3BJSHRjYmlBZ0lDQjJZWElnYkdWdVozUm9JRDBnWVhKbmRXMWxiblJ6TG14bGJtZDBhRHRjYmlBZ0lDQnBaaUFvYkdWdVozUm9JRDA5UFNBd0tTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z1ptNG9LVHRjYmlBZ0lDQjlYRzRnSUNBZ2RtRnlJRzlpYWlBOUlHRnlaM1Z0Wlc1MGMxdHNaVzVuZEdnZ0xTQXhYVHRjYmlBZ0lDQnlaWFIxY200Z0tGOXBjMEZ5Y21GNUtHOWlhaWtnZkh3Z2RIbHdaVzltSUc5aWFsdHRaWFJvYjJSdVlXMWxYU0FoUFQwZ0oyWjFibU4wYVc5dUp5a2dQMXh1SUNBZ0lDQWdabTR1WVhCd2JIa29kR2hwY3l3Z1lYSm5kVzFsYm5SektTQTZYRzRnSUNBZ0lDQnZZbXBiYldWMGFHOWtibUZ0WlYwdVlYQndiSGtvYjJKcUxDQkJjbkpoZVM1d2NtOTBiM1I1Y0dVdWMyeHBZMlV1WTJGc2JDaGhjbWQxYldWdWRITXNJREFzSUd4bGJtZDBhQ0F0SURFcEtUdGNiaUFnZlR0Y2JuMDdYRzVjYmx4dVhHNHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OWNiaTh2SUZkRlFsQkJRMHNnUms5UFZFVlNYRzR2THlBdUwzNHZjbUZ0WkdFdmMzSmpMMmx1ZEdWeWJtRnNMMTlqYUdWamEwWnZjazFsZEdodlpDNXFjMXh1THk4Z2JXOWtkV3hsSUdsa0lEMGdOVGRjYmk4dklHMXZaSFZzWlNCamFIVnVhM01nUFNBd0lsMHNJbTFoY0hCcGJtZHpJam9pUVVGQlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHNpTENKemIzVnlZMlZTYjI5MElqb2lJbjA9XCIpO1xuXG4vKioqLyB9KSxcbi8qIDU4ICovXG4vKiBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyogYWxsIGV4cG9ydHMgdXNlZCAqL1xuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9+L3JhbWRhL3NyYy9pbnRlcm5hbC9fZGlzcGF0Y2hhYmxlLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuZXZhbChcInZhciBfaXNBcnJheSA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vX2lzQXJyYXkgKi8gMzcpO1xcbnZhciBfaXNUcmFuc2Zvcm1lciA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vX2lzVHJhbnNmb3JtZXIgKi8gMTY0KTtcXG5cXG5cXG4vKipcXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdGhhdCBkaXNwYXRjaGVzIHdpdGggZGlmZmVyZW50IHN0cmF0ZWdpZXMgYmFzZWQgb24gdGhlXFxuICogb2JqZWN0IGluIGxpc3QgcG9zaXRpb24gKGxhc3QgYXJndW1lbnQpLiBJZiBpdCBpcyBhbiBhcnJheSwgZXhlY3V0ZXMgW2ZuXS5cXG4gKiBPdGhlcndpc2UsIGlmIGl0IGhhcyBhIGZ1bmN0aW9uIHdpdGggb25lIG9mIHRoZSBnaXZlbiBtZXRob2QgbmFtZXMsIGl0IHdpbGxcXG4gKiBleGVjdXRlIHRoYXQgZnVuY3Rpb24gKGZ1bmN0b3IgY2FzZSkuIE90aGVyd2lzZSwgaWYgaXQgaXMgYSB0cmFuc2Zvcm1lcixcXG4gKiB1c2VzIHRyYW5zZHVjZXIgW3hmXSB0byByZXR1cm4gYSBuZXcgdHJhbnNmb3JtZXIgKHRyYW5zZHVjZXIgY2FzZSkuXFxuICogT3RoZXJ3aXNlLCBpdCB3aWxsIGRlZmF1bHQgdG8gZXhlY3V0aW5nIFtmbl0uXFxuICpcXG4gKiBAcHJpdmF0ZVxcbiAqIEBwYXJhbSB7QXJyYXl9IG1ldGhvZE5hbWVzIHByb3BlcnRpZXMgdG8gY2hlY2sgZm9yIGEgY3VzdG9tIGltcGxlbWVudGF0aW9uXFxuICogQHBhcmFtIHtGdW5jdGlvbn0geGYgdHJhbnNkdWNlciB0byBpbml0aWFsaXplIGlmIG9iamVjdCBpcyB0cmFuc2Zvcm1lclxcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIGRlZmF1bHQgcmFtZGEgaW1wbGVtZW50YXRpb25cXG4gKiBAcmV0dXJuIHtGdW5jdGlvbn0gQSBmdW5jdGlvbiB0aGF0IGRpc3BhdGNoZXMgb24gb2JqZWN0IGluIGxpc3QgcG9zaXRpb25cXG4gKi9cXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIF9kaXNwYXRjaGFibGUobWV0aG9kTmFtZXMsIHhmLCBmbikge1xcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkge1xcbiAgICAgIHJldHVybiBmbigpO1xcbiAgICB9XFxuICAgIHZhciBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAwKTtcXG4gICAgdmFyIG9iaiA9IGFyZ3MucG9wKCk7XFxuICAgIGlmICghX2lzQXJyYXkob2JqKSkge1xcbiAgICAgIHZhciBpZHggPSAwO1xcbiAgICAgIHdoaWxlIChpZHggPCBtZXRob2ROYW1lcy5sZW5ndGgpIHtcXG4gICAgICAgIGlmICh0eXBlb2Ygb2JqW21ldGhvZE5hbWVzW2lkeF1dID09PSAnZnVuY3Rpb24nKSB7XFxuICAgICAgICAgIHJldHVybiBvYmpbbWV0aG9kTmFtZXNbaWR4XV0uYXBwbHkob2JqLCBhcmdzKTtcXG4gICAgICAgIH1cXG4gICAgICAgIGlkeCArPSAxO1xcbiAgICAgIH1cXG4gICAgICBpZiAoX2lzVHJhbnNmb3JtZXIob2JqKSkge1xcbiAgICAgICAgdmFyIHRyYW5zZHVjZXIgPSB4Zi5hcHBseShudWxsLCBhcmdzKTtcXG4gICAgICAgIHJldHVybiB0cmFuc2R1Y2VyKG9iaik7XFxuICAgICAgfVxcbiAgICB9XFxuICAgIHJldHVybiBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xcbiAgfTtcXG59O1xcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pTlRndWFuTWlMQ0p6YjNWeVkyVnpJanBiSW5kbFluQmhZMnM2THk4dkxpOStMM0poYldSaEwzTnlZeTlwYm5SbGNtNWhiQzlmWkdsemNHRjBZMmhoWW14bExtcHpQekl5Wm1ZaVhTd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lkbUZ5SUY5cGMwRnljbUY1SUQwZ2NtVnhkV2x5WlNnbkxpOWZhWE5CY25KaGVTY3BPMXh1ZG1GeUlGOXBjMVJ5WVc1elptOXliV1Z5SUQwZ2NtVnhkV2x5WlNnbkxpOWZhWE5VY21GdWMyWnZjbTFsY2ljcE8xeHVYRzVjYmk4cUtseHVJQ29nVW1WMGRYSnVjeUJoSUdaMWJtTjBhVzl1SUhSb1lYUWdaR2x6Y0dGMFkyaGxjeUIzYVhSb0lHUnBabVpsY21WdWRDQnpkSEpoZEdWbmFXVnpJR0poYzJWa0lHOXVJSFJvWlZ4dUlDb2diMkpxWldOMElHbHVJR3hwYzNRZ2NHOXphWFJwYjI0Z0tHeGhjM1FnWVhKbmRXMWxiblFwTGlCSlppQnBkQ0JwY3lCaGJpQmhjbkpoZVN3Z1pYaGxZM1YwWlhNZ1cyWnVYUzVjYmlBcUlFOTBhR1Z5ZDJselpTd2dhV1lnYVhRZ2FHRnpJR0VnWm5WdVkzUnBiMjRnZDJsMGFDQnZibVVnYjJZZ2RHaGxJR2RwZG1WdUlHMWxkR2h2WkNCdVlXMWxjeXdnYVhRZ2QybHNiRnh1SUNvZ1pYaGxZM1YwWlNCMGFHRjBJR1oxYm1OMGFXOXVJQ2htZFc1amRHOXlJR05oYzJVcExpQlBkR2hsY25kcGMyVXNJR2xtSUdsMElHbHpJR0VnZEhKaGJuTm1iM0p0WlhJc1hHNGdLaUIxYzJWeklIUnlZVzV6WkhWalpYSWdXM2htWFNCMGJ5QnlaWFIxY200Z1lTQnVaWGNnZEhKaGJuTm1iM0p0WlhJZ0tIUnlZVzV6WkhWalpYSWdZMkZ6WlNrdVhHNGdLaUJQZEdobGNuZHBjMlVzSUdsMElIZHBiR3dnWkdWbVlYVnNkQ0IwYnlCbGVHVmpkWFJwYm1jZ1cyWnVYUzVjYmlBcVhHNGdLaUJBY0hKcGRtRjBaVnh1SUNvZ1FIQmhjbUZ0SUh0QmNuSmhlWDBnYldWMGFHOWtUbUZ0WlhNZ2NISnZjR1Z5ZEdsbGN5QjBieUJqYUdWamF5Qm1iM0lnWVNCamRYTjBiMjBnYVcxd2JHVnRaVzUwWVhScGIyNWNiaUFxSUVCd1lYSmhiU0I3Um5WdVkzUnBiMjU5SUhobUlIUnlZVzV6WkhWalpYSWdkRzhnYVc1cGRHbGhiR2w2WlNCcFppQnZZbXBsWTNRZ2FYTWdkSEpoYm5ObWIzSnRaWEpjYmlBcUlFQndZWEpoYlNCN1JuVnVZM1JwYjI1OUlHWnVJR1JsWm1GMWJIUWdjbUZ0WkdFZ2FXMXdiR1Z0Wlc1MFlYUnBiMjVjYmlBcUlFQnlaWFIxY200Z2UwWjFibU4wYVc5dWZTQkJJR1oxYm1OMGFXOXVJSFJvWVhRZ1pHbHpjR0YwWTJobGN5QnZiaUJ2WW1wbFkzUWdhVzRnYkdsemRDQndiM05wZEdsdmJseHVJQ292WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUdaMWJtTjBhVzl1SUY5a2FYTndZWFJqYUdGaWJHVW9iV1YwYUc5a1RtRnRaWE1zSUhobUxDQm1iaWtnZTF4dUlDQnlaWFIxY200Z1puVnVZM1JwYjI0b0tTQjdYRzRnSUNBZ2FXWWdLR0Z5WjNWdFpXNTBjeTVzWlc1bmRHZ2dQVDA5SURBcElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCbWJpZ3BPMXh1SUNBZ0lIMWNiaUFnSUNCMllYSWdZWEpuY3lBOUlFRnljbUY1TG5CeWIzUnZkSGx3WlM1emJHbGpaUzVqWVd4c0tHRnlaM1Z0Wlc1MGN5d2dNQ2s3WEc0Z0lDQWdkbUZ5SUc5aWFpQTlJR0Z5WjNNdWNHOXdLQ2s3WEc0Z0lDQWdhV1lnS0NGZmFYTkJjbkpoZVNodlltb3BLU0I3WEc0Z0lDQWdJQ0IyWVhJZ2FXUjRJRDBnTUR0Y2JpQWdJQ0FnSUhkb2FXeGxJQ2hwWkhnZ1BDQnRaWFJvYjJST1lXMWxjeTVzWlc1bmRHZ3BJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tIUjVjR1Z2WmlCdlltcGJiV1YwYUc5a1RtRnRaWE5iYVdSNFhWMGdQVDA5SUNkbWRXNWpkR2x2YmljcElIdGNiaUFnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdiMkpxVzIxbGRHaHZaRTVoYldWelcybGtlRjFkTG1Gd2NHeDVLRzlpYWl3Z1lYSm5jeWs3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2FXUjRJQ3M5SURFN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnSUNCcFppQW9YMmx6VkhKaGJuTm1iM0p0WlhJb2IySnFLU2tnZTF4dUlDQWdJQ0FnSUNCMllYSWdkSEpoYm5Oa2RXTmxjaUE5SUhobUxtRndjR3g1S0c1MWJHd3NJR0Z5WjNNcE8xeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RISmhibk5rZFdObGNpaHZZbW9wTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJSDFjYmlBZ0lDQnlaWFIxY200Z1ptNHVZWEJ3Ykhrb2RHaHBjeXdnWVhKbmRXMWxiblJ6S1R0Y2JpQWdmVHRjYm4wN1hHNWNibHh1WEc0dkx5OHZMeTh2THk4dkx5OHZMeTh2THk5Y2JpOHZJRmRGUWxCQlEwc2dSazlQVkVWU1hHNHZMeUF1TDM0dmNtRnRaR0V2YzNKakwybHVkR1Z5Ym1Gc0wxOWthWE53WVhSamFHRmliR1V1YW5OY2JpOHZJRzF2WkhWc1pTQnBaQ0E5SURVNFhHNHZMeUJ0YjJSMWJHVWdZMmgxYm10eklEMGdNQ0pkTENKdFlYQndhVzVuY3lJNklrRkJRVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzaUxDSnpiM1Z5WTJWU2IyOTBJam9pSW4wPVwiKTtcblxuLyoqKi8gfSksXG4vKiA1OSAqL1xuLyogbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9cbi8qIGFsbCBleHBvcnRzIHVzZWQgKi9cbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL34vcmFtZGEvc3JjL2ludGVybmFsL19pc0Z1bmN0aW9uLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbmV2YWwoXCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIF9pc0Z1bmN0aW9uKHgpIHtcXG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoeCkgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXSc7XFxufTtcXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaU5Ua3Vhbk1pTENKemIzVnlZMlZ6SWpwYkluZGxZbkJoWTJzNkx5OHZMaTkrTDNKaGJXUmhMM055WXk5cGJuUmxjbTVoYkM5ZmFYTkdkVzVqZEdsdmJpNXFjejlrTjJJMElsMHNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJbTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdablZ1WTNScGIyNGdYMmx6Um5WdVkzUnBiMjRvZUNrZ2UxeHVJQ0J5WlhSMWNtNGdUMkpxWldOMExuQnliM1J2ZEhsd1pTNTBiMU4wY21sdVp5NWpZV3hzS0hncElEMDlQU0FuVzI5aWFtVmpkQ0JHZFc1amRHbHZibDBuTzF4dWZUdGNibHh1WEc1Y2JpOHZMeTh2THk4dkx5OHZMeTh2THk4dkwxeHVMeThnVjBWQ1VFRkRTeUJHVDA5VVJWSmNiaTh2SUM0dmZpOXlZVzFrWVM5emNtTXZhVzUwWlhKdVlXd3ZYMmx6Um5WdVkzUnBiMjR1YW5OY2JpOHZJRzF2WkhWc1pTQnBaQ0E5SURVNVhHNHZMeUJ0YjJSMWJHVWdZMmgxYm10eklEMGdNQ0pkTENKdFlYQndhVzVuY3lJNklrRkJRVUU3UVVGRFFUdEJRVU5CT3lJc0luTnZkWEpqWlZKdmIzUWlPaUlpZlE9PVwiKTtcblxuLyoqKi8gfSksXG4vKiA2MCAqL1xuLyogbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9cbi8qIGFsbCBleHBvcnRzIHVzZWQgKi9cbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9+L3JhbWRhL3NyYy9pbnRlcm5hbC9faXNTdHJpbmcuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbmV2YWwoXCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIF9pc1N0cmluZyh4KSB7XFxuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHgpID09PSAnW29iamVjdCBTdHJpbmddJztcXG59O1xcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pTmpBdWFuTWlMQ0p6YjNWeVkyVnpJanBiSW5kbFluQmhZMnM2THk4dkxpOStMM0poYldSaEwzTnlZeTlwYm5SbGNtNWhiQzlmYVhOVGRISnBibWN1YW5NL01EVmlZeUpkTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lKdGIyUjFiR1V1Wlhod2IzSjBjeUE5SUdaMWJtTjBhVzl1SUY5cGMxTjBjbWx1WnloNEtTQjdYRzRnSUhKbGRIVnliaUJQWW1wbFkzUXVjSEp2ZEc5MGVYQmxMblJ2VTNSeWFXNW5MbU5oYkd3b2VDa2dQVDA5SUNkYmIySnFaV04wSUZOMGNtbHVaMTBuTzF4dWZUdGNibHh1WEc1Y2JpOHZMeTh2THk4dkx5OHZMeTh2THk4dkwxeHVMeThnVjBWQ1VFRkRTeUJHVDA5VVJWSmNiaTh2SUM0dmZpOXlZVzFrWVM5emNtTXZhVzUwWlhKdVlXd3ZYMmx6VTNSeWFXNW5MbXB6WEc0dkx5QnRiMlIxYkdVZ2FXUWdQU0EyTUZ4dUx5OGdiVzlrZFd4bElHTm9kVzVyY3lBOUlEQWlYU3dpYldGd2NHbHVaM01pT2lKQlFVRkJPMEZCUTBFN1FVRkRRVHNpTENKemIzVnlZMlZTYjI5MElqb2lJbjA9XCIpO1xuXG4vKioqLyB9KSxcbi8qIDYxICovXG4vKiBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyogYWxsIGV4cG9ydHMgdXNlZCAqL1xuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9+L3JhbWRhL3NyYy9pbnRlcm5hbC9fbWFwLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuZXZhbChcIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gX21hcChmbiwgZnVuY3Rvcikge1xcbiAgdmFyIGlkeCA9IDA7XFxuICB2YXIgbGVuID0gZnVuY3Rvci5sZW5ndGg7XFxuICB2YXIgcmVzdWx0ID0gQXJyYXkobGVuKTtcXG4gIHdoaWxlIChpZHggPCBsZW4pIHtcXG4gICAgcmVzdWx0W2lkeF0gPSBmbihmdW5jdG9yW2lkeF0pO1xcbiAgICBpZHggKz0gMTtcXG4gIH1cXG4gIHJldHVybiByZXN1bHQ7XFxufTtcXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaU5qRXVhbk1pTENKemIzVnlZMlZ6SWpwYkluZGxZbkJoWTJzNkx5OHZMaTkrTDNKaGJXUmhMM055WXk5cGJuUmxjbTVoYkM5ZmJXRndMbXB6UDJaaU1ETWlYU3dpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpYlc5a2RXeGxMbVY0Y0c5eWRITWdQU0JtZFc1amRHbHZiaUJmYldGd0tHWnVMQ0JtZFc1amRHOXlLU0I3WEc0Z0lIWmhjaUJwWkhnZ1BTQXdPMXh1SUNCMllYSWdiR1Z1SUQwZ1puVnVZM1J2Y2k1c1pXNW5kR2c3WEc0Z0lIWmhjaUJ5WlhOMWJIUWdQU0JCY25KaGVTaHNaVzRwTzF4dUlDQjNhR2xzWlNBb2FXUjRJRHdnYkdWdUtTQjdYRzRnSUNBZ2NtVnpkV3gwVzJsa2VGMGdQU0JtYmlobWRXNWpkRzl5VzJsa2VGMHBPMXh1SUNBZ0lHbGtlQ0FyUFNBeE8xeHVJQ0I5WEc0Z0lISmxkSFZ5YmlCeVpYTjFiSFE3WEc1OU8xeHVYRzVjYmx4dUx5OHZMeTh2THk4dkx5OHZMeTh2THk4dlhHNHZMeUJYUlVKUVFVTkxJRVpQVDFSRlVseHVMeThnTGk5K0wzSmhiV1JoTDNOeVl5OXBiblJsY201aGJDOWZiV0Z3TG1welhHNHZMeUJ0YjJSMWJHVWdhV1FnUFNBMk1WeHVMeThnYlc5a2RXeGxJR05vZFc1cmN5QTlJREFpWFN3aWJXRndjR2x1WjNNaU9pSkJRVUZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3lJc0luTnZkWEpqWlZKdmIzUWlPaUlpZlE9PVwiKTtcblxuLyoqKi8gfSksXG4vKiA2MiAqL1xuLyogbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9cbi8qIGFsbCBleHBvcnRzIHVzZWQgKi9cbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vfi9yYW1kYS9zcmMvaW50ZXJuYWwvX3hmQmFzZS5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbmV2YWwoXCJtb2R1bGUuZXhwb3J0cyA9IHtcXG4gIGluaXQ6IGZ1bmN0aW9uKCkge1xcbiAgICByZXR1cm4gdGhpcy54ZlsnQEB0cmFuc2R1Y2VyL2luaXQnXSgpO1xcbiAgfSxcXG4gIHJlc3VsdDogZnVuY3Rpb24ocmVzdWx0KSB7XFxuICAgIHJldHVybiB0aGlzLnhmWydAQHRyYW5zZHVjZXIvcmVzdWx0J10ocmVzdWx0KTtcXG4gIH1cXG59O1xcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pTmpJdWFuTWlMQ0p6YjNWeVkyVnpJanBiSW5kbFluQmhZMnM2THk4dkxpOStMM0poYldSaEwzTnlZeTlwYm5SbGNtNWhiQzlmZUdaQ1lYTmxMbXB6UHpaak5URWlYU3dpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpYlc5a2RXeGxMbVY0Y0c5eWRITWdQU0I3WEc0Z0lHbHVhWFE2SUdaMWJtTjBhVzl1S0NrZ2UxeHVJQ0FnSUhKbGRIVnliaUIwYUdsekxuaG1XeWRBUUhSeVlXNXpaSFZqWlhJdmFXNXBkQ2RkS0NrN1hHNGdJSDBzWEc0Z0lISmxjM1ZzZERvZ1puVnVZM1JwYjI0b2NtVnpkV3gwS1NCN1hHNGdJQ0FnY21WMGRYSnVJSFJvYVhNdWVHWmJKMEJBZEhKaGJuTmtkV05sY2k5eVpYTjFiSFFuWFNoeVpYTjFiSFFwTzF4dUlDQjlYRzU5TzF4dVhHNWNibHh1THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2WEc0dkx5QlhSVUpRUVVOTElFWlBUMVJGVWx4dUx5OGdMaTkrTDNKaGJXUmhMM055WXk5cGJuUmxjbTVoYkM5ZmVHWkNZWE5sTG1welhHNHZMeUJ0YjJSMWJHVWdhV1FnUFNBMk1seHVMeThnYlc5a2RXeGxJR05vZFc1cmN5QTlJREFpWFN3aWJXRndjR2x1WjNNaU9pSkJRVUZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3SWl3aWMyOTFjbU5sVW05dmRDSTZJaUo5XCIpO1xuXG4vKioqLyB9KSxcbi8qIDYzICovXG4vKiBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyogYWxsIGV4cG9ydHMgdXNlZCAqL1xuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL34vcmFtZGEvc3JjL21heC5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuZXZhbChcInZhciBfY3VycnkyID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9pbnRlcm5hbC9fY3VycnkyICovIDEpO1xcblxcblxcbi8qKlxcbiAqIFJldHVybnMgdGhlIGxhcmdlciBvZiBpdHMgdHdvIGFyZ3VtZW50cy5cXG4gKlxcbiAqIEBmdW5jXFxuICogQG1lbWJlck9mIFJcXG4gKiBAc2luY2UgdjAuMS4wXFxuICogQGNhdGVnb3J5IFJlbGF0aW9uXFxuICogQHNpZyBPcmQgYSA9PiBhIC0+IGEgLT4gYVxcbiAqIEBwYXJhbSB7Kn0gYVxcbiAqIEBwYXJhbSB7Kn0gYlxcbiAqIEByZXR1cm4geyp9XFxuICogQHNlZSBSLm1heEJ5LCBSLm1pblxcbiAqIEBleGFtcGxlXFxuICpcXG4gKiAgICAgIFIubWF4KDc4OSwgMTIzKTsgLy89PiA3ODlcXG4gKiAgICAgIFIubWF4KCdhJywgJ2InKTsgLy89PiAnYidcXG4gKi9cXG5tb2R1bGUuZXhwb3J0cyA9IF9jdXJyeTIoZnVuY3Rpb24gbWF4KGEsIGIpIHsgcmV0dXJuIGIgPiBhID8gYiA6IGE7IH0pO1xcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pTmpNdWFuTWlMQ0p6YjNWeVkyVnpJanBiSW5kbFluQmhZMnM2THk4dkxpOStMM0poYldSaEwzTnlZeTl0WVhndWFuTS9OREl3T0NKZExDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SjJZWElnWDJOMWNuSjVNaUE5SUhKbGNYVnBjbVVvSnk0dmFXNTBaWEp1WVd3dlgyTjFjbko1TWljcE8xeHVYRzVjYmk4cUtseHVJQ29nVW1WMGRYSnVjeUIwYUdVZ2JHRnlaMlZ5SUc5bUlHbDBjeUIwZDI4Z1lYSm5kVzFsYm5SekxseHVJQ3BjYmlBcUlFQm1kVzVqWEc0Z0tpQkFiV1Z0WW1WeVQyWWdVbHh1SUNvZ1FITnBibU5sSUhZd0xqRXVNRnh1SUNvZ1FHTmhkR1ZuYjNKNUlGSmxiR0YwYVc5dVhHNGdLaUJBYzJsbklFOXlaQ0JoSUQwK0lHRWdMVDRnWVNBdFBpQmhYRzRnS2lCQWNHRnlZVzBnZXlwOUlHRmNiaUFxSUVCd1lYSmhiU0I3S24wZ1lseHVJQ29nUUhKbGRIVnliaUI3S24xY2JpQXFJRUJ6WldVZ1VpNXRZWGhDZVN3Z1VpNXRhVzVjYmlBcUlFQmxlR0Z0Y0d4bFhHNGdLbHh1SUNvZ0lDQWdJQ0JTTG0xaGVDZzNPRGtzSURFeU15azdJQzh2UFQ0Z056ZzVYRzRnS2lBZ0lDQWdJRkl1YldGNEtDZGhKeXdnSjJJbktUc2dMeTg5UGlBbllpZGNiaUFxTDF4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCZlkzVnljbmt5S0daMWJtTjBhVzl1SUcxaGVDaGhMQ0JpS1NCN0lISmxkSFZ5YmlCaUlENGdZU0EvSUdJZ09pQmhPeUI5S1R0Y2JseHVYRzVjYmk4dkx5OHZMeTh2THk4dkx5OHZMeTh2TDF4dUx5OGdWMFZDVUVGRFN5QkdUMDlVUlZKY2JpOHZJQzR2Zmk5eVlXMWtZUzl6Y21NdmJXRjRMbXB6WEc0dkx5QnRiMlIxYkdVZ2FXUWdQU0EyTTF4dUx5OGdiVzlrZFd4bElHTm9kVzVyY3lBOUlEQWlYU3dpYldGd2NHbHVaM01pT2lKQlFVRkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHNpTENKemIzVnlZMlZTYjI5MElqb2lJbjA9XCIpO1xuXG4vKioqLyB9KSxcbi8qIDY0ICovXG4vKiBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyogYWxsIGV4cG9ydHMgdXNlZCAqL1xuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL34vcmFtZGEvc3JjL25vdC5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuZXZhbChcInZhciBfY3VycnkxID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9pbnRlcm5hbC9fY3VycnkxICovIDIpO1xcblxcblxcbi8qKlxcbiAqIEEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZSBgIWAgb2YgaXRzIGFyZ3VtZW50LiBJdCB3aWxsIHJldHVybiBgdHJ1ZWAgd2hlblxcbiAqIHBhc3NlZCBmYWxzZS15IHZhbHVlLCBhbmQgYGZhbHNlYCB3aGVuIHBhc3NlZCBhIHRydXRoLXkgb25lLlxcbiAqXFxuICogQGZ1bmNcXG4gKiBAbWVtYmVyT2YgUlxcbiAqIEBzaW5jZSB2MC4xLjBcXG4gKiBAY2F0ZWdvcnkgTG9naWNcXG4gKiBAc2lnICogLT4gQm9vbGVhblxcbiAqIEBwYXJhbSB7Kn0gYSBhbnkgdmFsdWVcXG4gKiBAcmV0dXJuIHtCb29sZWFufSB0aGUgbG9naWNhbCBpbnZlcnNlIG9mIHBhc3NlZCBhcmd1bWVudC5cXG4gKiBAc2VlIFIuY29tcGxlbWVudFxcbiAqIEBleGFtcGxlXFxuICpcXG4gKiAgICAgIFIubm90KHRydWUpOyAvLz0+IGZhbHNlXFxuICogICAgICBSLm5vdChmYWxzZSk7IC8vPT4gdHJ1ZVxcbiAqICAgICAgUi5ub3QoMCk7IC8vPT4gdHJ1ZVxcbiAqICAgICAgUi5ub3QoMSk7IC8vPT4gZmFsc2VcXG4gKi9cXG5tb2R1bGUuZXhwb3J0cyA9IF9jdXJyeTEoZnVuY3Rpb24gbm90KGEpIHtcXG4gIHJldHVybiAhYTtcXG59KTtcXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaU5qUXVhbk1pTENKemIzVnlZMlZ6SWpwYkluZGxZbkJoWTJzNkx5OHZMaTkrTDNKaGJXUmhMM055WXk5dWIzUXVhbk0vTTJabU5pSmRMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUoyWVhJZ1gyTjFjbko1TVNBOUlISmxjWFZwY21Vb0p5NHZhVzUwWlhKdVlXd3ZYMk4xY25KNU1TY3BPMXh1WEc1Y2JpOHFLbHh1SUNvZ1FTQm1kVzVqZEdsdmJpQjBhR0YwSUhKbGRIVnlibk1nZEdobElHQWhZQ0J2WmlCcGRITWdZWEpuZFcxbGJuUXVJRWwwSUhkcGJHd2djbVYwZFhKdUlHQjBjblZsWUNCM2FHVnVYRzRnS2lCd1lYTnpaV1FnWm1Gc2MyVXRlU0IyWVd4MVpTd2dZVzVrSUdCbVlXeHpaV0FnZDJobGJpQndZWE56WldRZ1lTQjBjblYwYUMxNUlHOXVaUzVjYmlBcVhHNGdLaUJBWm5WdVkxeHVJQ29nUUcxbGJXSmxjazltSUZKY2JpQXFJRUJ6YVc1alpTQjJNQzR4TGpCY2JpQXFJRUJqWVhSbFoyOXllU0JNYjJkcFkxeHVJQ29nUUhOcFp5QXFJQzArSUVKdmIyeGxZVzVjYmlBcUlFQndZWEpoYlNCN0tuMGdZU0JoYm5rZ2RtRnNkV1ZjYmlBcUlFQnlaWFIxY200Z2UwSnZiMnhsWVc1OUlIUm9aU0JzYjJkcFkyRnNJR2x1ZG1WeWMyVWdiMllnY0dGemMyVmtJR0Z5WjNWdFpXNTBMbHh1SUNvZ1FITmxaU0JTTG1OdmJYQnNaVzFsYm5SY2JpQXFJRUJsZUdGdGNHeGxYRzRnS2x4dUlDb2dJQ0FnSUNCU0xtNXZkQ2gwY25WbEtUc2dMeTg5UGlCbVlXeHpaVnh1SUNvZ0lDQWdJQ0JTTG01dmRDaG1ZV3h6WlNrN0lDOHZQVDRnZEhKMVpWeHVJQ29nSUNBZ0lDQlNMbTV2ZENnd0tUc2dMeTg5UGlCMGNuVmxYRzRnS2lBZ0lDQWdJRkl1Ym05MEtERXBPeUF2THowK0lHWmhiSE5sWEc0Z0tpOWNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdYMk4xY25KNU1TaG1kVzVqZEdsdmJpQnViM1FvWVNrZ2UxeHVJQ0J5WlhSMWNtNGdJV0U3WEc1OUtUdGNibHh1WEc1Y2JpOHZMeTh2THk4dkx5OHZMeTh2THk4dkwxeHVMeThnVjBWQ1VFRkRTeUJHVDA5VVJWSmNiaTh2SUM0dmZpOXlZVzFrWVM5emNtTXZibTkwTG1welhHNHZMeUJ0YjJSMWJHVWdhV1FnUFNBMk5GeHVMeThnYlc5a2RXeGxJR05vZFc1cmN5QTlJREFpWFN3aWJXRndjR2x1WjNNaU9pSkJRVUZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk95SXNJbk52ZFhKalpWSnZiM1FpT2lJaWZRPT1cIik7XG5cbi8qKiovIH0pLFxuLyogNjUgKi9cbi8qIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKiBhbGwgZXhwb3J0cyB1c2VkICovXG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL34vcmFtZGEvc3JjL3Byb3AuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5ldmFsKFwidmFyIF9jdXJyeTIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL2ludGVybmFsL19jdXJyeTIgKi8gMSk7XFxuXFxuXFxuLyoqXFxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRoYXQgd2hlbiBzdXBwbGllZCBhbiBvYmplY3QgcmV0dXJucyB0aGUgaW5kaWNhdGVkXFxuICogcHJvcGVydHkgb2YgdGhhdCBvYmplY3QsIGlmIGl0IGV4aXN0cy5cXG4gKlxcbiAqIEBmdW5jXFxuICogQG1lbWJlck9mIFJcXG4gKiBAc2luY2UgdjAuMS4wXFxuICogQGNhdGVnb3J5IE9iamVjdFxcbiAqIEBzaWcgcyAtPiB7czogYX0gLT4gYSB8IFVuZGVmaW5lZFxcbiAqIEBwYXJhbSB7U3RyaW5nfSBwIFRoZSBwcm9wZXJ0eSBuYW1lXFxuICogQHBhcmFtIHtPYmplY3R9IG9iaiBUaGUgb2JqZWN0IHRvIHF1ZXJ5XFxuICogQHJldHVybiB7Kn0gVGhlIHZhbHVlIGF0IGBvYmoucGAuXFxuICogQHNlZSBSLnBhdGhcXG4gKiBAZXhhbXBsZVxcbiAqXFxuICogICAgICBSLnByb3AoJ3gnLCB7eDogMTAwfSk7IC8vPT4gMTAwXFxuICogICAgICBSLnByb3AoJ3gnLCB7fSk7IC8vPT4gdW5kZWZpbmVkXFxuICovXFxubW9kdWxlLmV4cG9ydHMgPSBfY3VycnkyKGZ1bmN0aW9uIHByb3AocCwgb2JqKSB7IHJldHVybiBvYmpbcF07IH0pO1xcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pTmpVdWFuTWlMQ0p6YjNWeVkyVnpJanBiSW5kbFluQmhZMnM2THk4dkxpOStMM0poYldSaEwzTnlZeTl3Y205d0xtcHpQMll5TXpFaVhTd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lkbUZ5SUY5amRYSnllVElnUFNCeVpYRjFhWEpsS0NjdUwybHVkR1Z5Ym1Gc0wxOWpkWEp5ZVRJbktUdGNibHh1WEc0dktpcGNiaUFxSUZKbGRIVnlibk1nWVNCbWRXNWpkR2x2YmlCMGFHRjBJSGRvWlc0Z2MzVndjR3hwWldRZ1lXNGdiMkpxWldOMElISmxkSFZ5Ym5NZ2RHaGxJR2x1WkdsallYUmxaRnh1SUNvZ2NISnZjR1Z5ZEhrZ2IyWWdkR2hoZENCdlltcGxZM1FzSUdsbUlHbDBJR1Y0YVhOMGN5NWNiaUFxWEc0Z0tpQkFablZ1WTF4dUlDb2dRRzFsYldKbGNrOW1JRkpjYmlBcUlFQnphVzVqWlNCMk1DNHhMakJjYmlBcUlFQmpZWFJsWjI5eWVTQlBZbXBsWTNSY2JpQXFJRUJ6YVdjZ2N5QXRQaUI3Y3pvZ1lYMGdMVDRnWVNCOElGVnVaR1ZtYVc1bFpGeHVJQ29nUUhCaGNtRnRJSHRUZEhKcGJtZDlJSEFnVkdobElIQnliM0JsY25SNUlHNWhiV1ZjYmlBcUlFQndZWEpoYlNCN1QySnFaV04wZlNCdlltb2dWR2hsSUc5aWFtVmpkQ0IwYnlCeGRXVnllVnh1SUNvZ1FISmxkSFZ5YmlCN0tuMGdWR2hsSUhaaGJIVmxJR0YwSUdCdlltb3VjR0F1WEc0Z0tpQkFjMlZsSUZJdWNHRjBhRnh1SUNvZ1FHVjRZVzF3YkdWY2JpQXFYRzRnS2lBZ0lDQWdJRkl1Y0hKdmNDZ25lQ2NzSUh0NE9pQXhNREI5S1RzZ0x5ODlQaUF4TURCY2JpQXFJQ0FnSUNBZ1VpNXdjbTl3S0NkNEp5d2dlMzBwT3lBdkx6MCtJSFZ1WkdWbWFXNWxaRnh1SUNvdlhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlGOWpkWEp5ZVRJb1puVnVZM1JwYjI0Z2NISnZjQ2h3TENCdlltb3BJSHNnY21WMGRYSnVJRzlpYWx0d1hUc2dmU2s3WEc1Y2JseHVYRzR2THk4dkx5OHZMeTh2THk4dkx5OHZMeTljYmk4dklGZEZRbEJCUTBzZ1JrOVBWRVZTWEc0dkx5QXVMMzR2Y21GdFpHRXZjM0pqTDNCeWIzQXVhbk5jYmk4dklHMXZaSFZzWlNCcFpDQTlJRFkxWEc0dkx5QnRiMlIxYkdVZ1kyaDFibXR6SUQwZ01DSmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN0lpd2ljMjkxY21ObFVtOXZkQ0k2SWlKOVwiKTtcblxuLyoqKi8gfSksXG4vKiA2NiAqL1xuLyogbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9cbi8qIGFsbCBleHBvcnRzIHVzZWQgKi9cbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9+L3JhbWRhL3NyYy92YWx1ZXMuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbmV2YWwoXCJ2YXIgX2N1cnJ5MSA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vaW50ZXJuYWwvX2N1cnJ5MSAqLyAyKTtcXG52YXIga2V5cyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4va2V5cyAqLyAxNyk7XFxuXFxuXFxuLyoqXFxuICogUmV0dXJucyBhIGxpc3Qgb2YgYWxsIHRoZSBlbnVtZXJhYmxlIG93biBwcm9wZXJ0aWVzIG9mIHRoZSBzdXBwbGllZCBvYmplY3QuXFxuICogTm90ZSB0aGF0IHRoZSBvcmRlciBvZiB0aGUgb3V0cHV0IGFycmF5IGlzIG5vdCBndWFyYW50ZWVkIGFjcm9zcyBkaWZmZXJlbnRcXG4gKiBKUyBwbGF0Zm9ybXMuXFxuICpcXG4gKiBAZnVuY1xcbiAqIEBtZW1iZXJPZiBSXFxuICogQHNpbmNlIHYwLjEuMFxcbiAqIEBjYXRlZ29yeSBPYmplY3RcXG4gKiBAc2lnIHtrOiB2fSAtPiBbdl1cXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqIFRoZSBvYmplY3QgdG8gZXh0cmFjdCB2YWx1ZXMgZnJvbVxcbiAqIEByZXR1cm4ge0FycmF5fSBBbiBhcnJheSBvZiB0aGUgdmFsdWVzIG9mIHRoZSBvYmplY3QncyBvd24gcHJvcGVydGllcy5cXG4gKiBAZXhhbXBsZVxcbiAqXFxuICogICAgICBSLnZhbHVlcyh7YTogMSwgYjogMiwgYzogM30pOyAvLz0+IFsxLCAyLCAzXVxcbiAqL1xcbm1vZHVsZS5leHBvcnRzID0gX2N1cnJ5MShmdW5jdGlvbiB2YWx1ZXMob2JqKSB7XFxuICB2YXIgcHJvcHMgPSBrZXlzKG9iaik7XFxuICB2YXIgbGVuID0gcHJvcHMubGVuZ3RoO1xcbiAgdmFyIHZhbHMgPSBbXTtcXG4gIHZhciBpZHggPSAwO1xcbiAgd2hpbGUgKGlkeCA8IGxlbikge1xcbiAgICB2YWxzW2lkeF0gPSBvYmpbcHJvcHNbaWR4XV07XFxuICAgIGlkeCArPSAxO1xcbiAgfVxcbiAgcmV0dXJuIHZhbHM7XFxufSk7XFxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lOall1YW5NaUxDSnpiM1Z5WTJWeklqcGJJbmRsWW5CaFkyczZMeTh2TGk5K0wzSmhiV1JoTDNOeVl5OTJZV3gxWlhNdWFuTS9PR1V6TnlKZExDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SjJZWElnWDJOMWNuSjVNU0E5SUhKbGNYVnBjbVVvSnk0dmFXNTBaWEp1WVd3dlgyTjFjbko1TVNjcE8xeHVkbUZ5SUd0bGVYTWdQU0J5WlhGMWFYSmxLQ2N1TDJ0bGVYTW5LVHRjYmx4dVhHNHZLaXBjYmlBcUlGSmxkSFZ5Ym5NZ1lTQnNhWE4wSUc5bUlHRnNiQ0IwYUdVZ1pXNTFiV1Z5WVdKc1pTQnZkMjRnY0hKdmNHVnlkR2xsY3lCdlppQjBhR1VnYzNWd2NHeHBaV1FnYjJKcVpXTjBMbHh1SUNvZ1RtOTBaU0IwYUdGMElIUm9aU0J2Y21SbGNpQnZaaUIwYUdVZ2IzVjBjSFYwSUdGeWNtRjVJR2x6SUc1dmRDQm5kV0Z5WVc1MFpXVmtJR0ZqY205emN5QmthV1ptWlhKbGJuUmNiaUFxSUVwVElIQnNZWFJtYjNKdGN5NWNiaUFxWEc0Z0tpQkFablZ1WTF4dUlDb2dRRzFsYldKbGNrOW1JRkpjYmlBcUlFQnphVzVqWlNCMk1DNHhMakJjYmlBcUlFQmpZWFJsWjI5eWVTQlBZbXBsWTNSY2JpQXFJRUJ6YVdjZ2UyczZJSFo5SUMwK0lGdDJYVnh1SUNvZ1FIQmhjbUZ0SUh0UFltcGxZM1I5SUc5aWFpQlVhR1VnYjJKcVpXTjBJSFJ2SUdWNGRISmhZM1FnZG1Gc2RXVnpJR1p5YjIxY2JpQXFJRUJ5WlhSMWNtNGdlMEZ5Y21GNWZTQkJiaUJoY25KaGVTQnZaaUIwYUdVZ2RtRnNkV1Z6SUc5bUlIUm9aU0J2WW1wbFkzUW5jeUJ2ZDI0Z2NISnZjR1Z5ZEdsbGN5NWNiaUFxSUVCbGVHRnRjR3hsWEc0Z0tseHVJQ29nSUNBZ0lDQlNMblpoYkhWbGN5aDdZVG9nTVN3Z1lqb2dNaXdnWXpvZ00zMHBPeUF2THowK0lGc3hMQ0F5TENBelhWeHVJQ292WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUY5amRYSnllVEVvWm5WdVkzUnBiMjRnZG1Gc2RXVnpLRzlpYWlrZ2UxeHVJQ0IyWVhJZ2NISnZjSE1nUFNCclpYbHpLRzlpYWlrN1hHNGdJSFpoY2lCc1pXNGdQU0J3Y205d2N5NXNaVzVuZEdnN1hHNGdJSFpoY2lCMllXeHpJRDBnVzEwN1hHNGdJSFpoY2lCcFpIZ2dQU0F3TzF4dUlDQjNhR2xzWlNBb2FXUjRJRHdnYkdWdUtTQjdYRzRnSUNBZ2RtRnNjMXRwWkhoZElEMGdiMkpxVzNCeWIzQnpXMmxrZUYxZE8xeHVJQ0FnSUdsa2VDQXJQU0F4TzF4dUlDQjlYRzRnSUhKbGRIVnliaUIyWVd4ek8xeHVmU2s3WEc1Y2JseHVYRzR2THk4dkx5OHZMeTh2THk4dkx5OHZMeTljYmk4dklGZEZRbEJCUTBzZ1JrOVBWRVZTWEc0dkx5QXVMMzR2Y21GdFpHRXZjM0pqTDNaaGJIVmxjeTVxYzF4dUx5OGdiVzlrZFd4bElHbGtJRDBnTmpaY2JpOHZJRzF2WkhWc1pTQmphSFZ1YTNNZ1BTQXdJbDBzSW0xaGNIQnBibWR6SWpvaVFVRkJRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUc2lMQ0p6YjNWeVkyVlNiMjkwSWpvaUluMD1cIik7XG5cbi8qKiovIH0pLFxuLyogNjcgKi9cbi8qIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKiBhbGwgZXhwb3J0cyB1c2VkICovXG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL34vdGFuZ3JhbS1yZWZlcmVuY2UvaW5kZXguanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5ldmFsKFwidmFyIGZzID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgZnMgKi8gMTEpLFxcbiAgICBwYXRoID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgcGF0aCAqLyAxMiksXFxuICAgIGV4aXN0c1N5bmMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISBmcyAqLyAxMSkuZXhpc3RzU3luYyB8fCBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISBwYXRoICovIDEyKS5leGlzdHNTeW5jO1xcblxcbnZhciB2ZXJzaW9ucyA9IFtcXG4gICAgJzEuMC4wJ1xcbl07XFxuXFxubW9kdWxlLmV4cG9ydHMudmVyc2lvbnMgPSB2ZXJzaW9ucztcXG5cXG5tb2R1bGUuZXhwb3J0cy5sb2FkID0gZnVuY3Rpb24odmVyc2lvbikge1xcbiAgICBpZiAodmVyc2lvbnMuaW5kZXhPZih2ZXJzaW9uKSA8PSAtMSkge1xcblxcdHRocm93IG5ldyBFcnJvcihcXFwiVW5rbm93biBtYXBuaWstcmVmZXJlbmNlIHZlcnNpb246ICdcXFwiICsgdmVyc2lvbiArIFxcXCInXFxcIik7XFxuICAgIH1cXG4gICAgdmFyIHJlZiA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vMS4wLjAvcmVmZXJlbmNlLmpzb24gKi8gMTkzKTtcXG4gLy8gICAgdmFyIGRzX3BhdGggPSBwYXRoLmpvaW4oX19kaXJuYW1lLCB2ZXJzaW9uLCAnZGF0YXNvdXJjZXMuanNvbicpO1xcbiAvLyAgICBpZiAoZXhpc3RzU3luYyhkc19wYXRoKSkge1xcblxcdC8vIHJlZi5kYXRhc291cmNlcyA9IHJlcXVpcmUoZHNfcGF0aCkuZGF0YXNvdXJjZXM7XFxuIC8vICAgIH1cXG4gICAgcmV0dXJuIHJlZjtcXG59XFxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lOamN1YW5NaUxDSnpiM1Z5WTJWeklqcGJJbmRsWW5CaFkyczZMeTh2TGk5K0wzUmhibWR5WVcwdGNtVm1aWEpsYm1ObEwybHVaR1Y0TG1welB6ZzFOR0lpWFN3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaWRtRnlJR1p6SUQwZ2NtVnhkV2x5WlNnblpuTW5LU3hjYmlBZ0lDQndZWFJvSUQwZ2NtVnhkV2x5WlNnbmNHRjBhQ2NwTEZ4dUlDQWdJR1Y0YVhOMGMxTjVibU1nUFNCeVpYRjFhWEpsS0NkbWN5Y3BMbVY0YVhOMGMxTjVibU1nZkh3Z2NtVnhkV2x5WlNnbmNHRjBhQ2NwTG1WNGFYTjBjMU41Ym1NN1hHNWNiblpoY2lCMlpYSnphVzl1Y3lBOUlGdGNiaUFnSUNBbk1TNHdMakFuWEc1ZE8xeHVYRzV0YjJSMWJHVXVaWGh3YjNKMGN5NTJaWEp6YVc5dWN5QTlJSFpsY25OcGIyNXpPMXh1WEc1dGIyUjFiR1V1Wlhod2IzSjBjeTVzYjJGa0lEMGdablZ1WTNScGIyNG9kbVZ5YzJsdmJpa2dlMXh1SUNBZ0lHbG1JQ2gyWlhKemFXOXVjeTVwYm1SbGVFOW1LSFpsY25OcGIyNHBJRHc5SUMweEtTQjdYRzVjZEhSb2NtOTNJRzVsZHlCRmNuSnZjaWhjSWxWdWEyNXZkMjRnYldGd2JtbHJMWEpsWm1WeVpXNWpaU0IyWlhKemFXOXVPaUFuWENJZ0t5QjJaWEp6YVc5dUlDc2dYQ0luWENJcE8xeHVJQ0FnSUgxY2JpQWdJQ0IyWVhJZ2NtVm1JRDBnY21WeGRXbHlaU2duTGk4eExqQXVNQzl5WldabGNtVnVZMlV1YW5OdmJpY3BPMXh1SUM4dklDQWdJSFpoY2lCa2MxOXdZWFJvSUQwZ2NHRjBhQzVxYjJsdUtGOWZaR2x5Ym1GdFpTd2dkbVZ5YzJsdmJpd2dKMlJoZEdGemIzVnlZMlZ6TG1wemIyNG5LVHRjYmlBdkx5QWdJQ0JwWmlBb1pYaHBjM1J6VTNsdVl5aGtjMTl3WVhSb0tTa2dlMXh1WEhRdkx5QnlaV1l1WkdGMFlYTnZkWEpqWlhNZ1BTQnlaWEYxYVhKbEtHUnpYM0JoZEdncExtUmhkR0Z6YjNWeVkyVnpPMXh1SUM4dklDQWdJSDFjYmlBZ0lDQnlaWFIxY200Z2NtVm1PMXh1ZlZ4dVhHNWNibHh1THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2WEc0dkx5QlhSVUpRUVVOTElFWlBUMVJGVWx4dUx5OGdMaTkrTDNSaGJtZHlZVzB0Y21WbVpYSmxibU5sTDJsdVpHVjRMbXB6WEc0dkx5QnRiMlIxYkdVZ2FXUWdQU0EyTjF4dUx5OGdiVzlrZFd4bElHTm9kVzVyY3lBOUlEQWlYU3dpYldGd2NHbHVaM01pT2lKQlFVRkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHNpTENKemIzVnlZMlZTYjI5MElqb2lJbjA9XCIpO1xuXG4vKioqLyB9KSxcbi8qIDY4ICovXG4vKiBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyogYWxsIGV4cG9ydHMgdXNlZCAqL1xuLyohKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vfi91dGlsL3V0aWwuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuZXZhbChcIi8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqLyhmdW5jdGlvbihnbG9iYWwsIHByb2Nlc3MpIHsvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cXG4vL1xcbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXFxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxcbi8vIFxcXCJTb2Z0d2FyZVxcXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxcbi8vXFxuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cXG4vL1xcbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcXFwiQVMgSVNcXFwiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXFxuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1JcXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXFxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cXG5cXG52YXIgZm9ybWF0UmVnRXhwID0gLyVbc2RqJV0vZztcXG5leHBvcnRzLmZvcm1hdCA9IGZ1bmN0aW9uKGYpIHtcXG4gIGlmICghaXNTdHJpbmcoZikpIHtcXG4gICAgdmFyIG9iamVjdHMgPSBbXTtcXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcXG4gICAgICBvYmplY3RzLnB1c2goaW5zcGVjdChhcmd1bWVudHNbaV0pKTtcXG4gICAgfVxcbiAgICByZXR1cm4gb2JqZWN0cy5qb2luKCcgJyk7XFxuICB9XFxuXFxuICB2YXIgaSA9IDE7XFxuICB2YXIgYXJncyA9IGFyZ3VtZW50cztcXG4gIHZhciBsZW4gPSBhcmdzLmxlbmd0aDtcXG4gIHZhciBzdHIgPSBTdHJpbmcoZikucmVwbGFjZShmb3JtYXRSZWdFeHAsIGZ1bmN0aW9uKHgpIHtcXG4gICAgaWYgKHggPT09ICclJScpIHJldHVybiAnJSc7XFxuICAgIGlmIChpID49IGxlbikgcmV0dXJuIHg7XFxuICAgIHN3aXRjaCAoeCkge1xcbiAgICAgIGNhc2UgJyVzJzogcmV0dXJuIFN0cmluZyhhcmdzW2krK10pO1xcbiAgICAgIGNhc2UgJyVkJzogcmV0dXJuIE51bWJlcihhcmdzW2krK10pO1xcbiAgICAgIGNhc2UgJyVqJzpcXG4gICAgICAgIHRyeSB7XFxuICAgICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShhcmdzW2krK10pO1xcbiAgICAgICAgfSBjYXRjaCAoXykge1xcbiAgICAgICAgICByZXR1cm4gJ1tDaXJjdWxhcl0nO1xcbiAgICAgICAgfVxcbiAgICAgIGRlZmF1bHQ6XFxuICAgICAgICByZXR1cm4geDtcXG4gICAgfVxcbiAgfSk7XFxuICBmb3IgKHZhciB4ID0gYXJnc1tpXTsgaSA8IGxlbjsgeCA9IGFyZ3NbKytpXSkge1xcbiAgICBpZiAoaXNOdWxsKHgpIHx8ICFpc09iamVjdCh4KSkge1xcbiAgICAgIHN0ciArPSAnICcgKyB4O1xcbiAgICB9IGVsc2Uge1xcbiAgICAgIHN0ciArPSAnICcgKyBpbnNwZWN0KHgpO1xcbiAgICB9XFxuICB9XFxuICByZXR1cm4gc3RyO1xcbn07XFxuXFxuXFxuLy8gTWFyayB0aGF0IGEgbWV0aG9kIHNob3VsZCBub3QgYmUgdXNlZC5cXG4vLyBSZXR1cm5zIGEgbW9kaWZpZWQgZnVuY3Rpb24gd2hpY2ggd2FybnMgb25jZSBieSBkZWZhdWx0Llxcbi8vIElmIC0tbm8tZGVwcmVjYXRpb24gaXMgc2V0LCB0aGVuIGl0IGlzIGEgbm8tb3AuXFxuZXhwb3J0cy5kZXByZWNhdGUgPSBmdW5jdGlvbihmbiwgbXNnKSB7XFxuICAvLyBBbGxvdyBmb3IgZGVwcmVjYXRpbmcgdGhpbmdzIGluIHRoZSBwcm9jZXNzIG9mIHN0YXJ0aW5nIHVwLlxcbiAgaWYgKGlzVW5kZWZpbmVkKGdsb2JhbC5wcm9jZXNzKSkge1xcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XFxuICAgICAgcmV0dXJuIGV4cG9ydHMuZGVwcmVjYXRlKGZuLCBtc2cpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XFxuICAgIH07XFxuICB9XFxuXFxuICBpZiAocHJvY2Vzcy5ub0RlcHJlY2F0aW9uID09PSB0cnVlKSB7XFxuICAgIHJldHVybiBmbjtcXG4gIH1cXG5cXG4gIHZhciB3YXJuZWQgPSBmYWxzZTtcXG4gIGZ1bmN0aW9uIGRlcHJlY2F0ZWQoKSB7XFxuICAgIGlmICghd2FybmVkKSB7XFxuICAgICAgaWYgKHByb2Nlc3MudGhyb3dEZXByZWNhdGlvbikge1xcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1zZyk7XFxuICAgICAgfSBlbHNlIGlmIChwcm9jZXNzLnRyYWNlRGVwcmVjYXRpb24pIHtcXG4gICAgICAgIGNvbnNvbGUudHJhY2UobXNnKTtcXG4gICAgICB9IGVsc2Uge1xcbiAgICAgICAgY29uc29sZS5lcnJvcihtc2cpO1xcbiAgICAgIH1cXG4gICAgICB3YXJuZWQgPSB0cnVlO1xcbiAgICB9XFxuICAgIHJldHVybiBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xcbiAgfVxcblxcbiAgcmV0dXJuIGRlcHJlY2F0ZWQ7XFxufTtcXG5cXG5cXG52YXIgZGVidWdzID0ge307XFxudmFyIGRlYnVnRW52aXJvbjtcXG5leHBvcnRzLmRlYnVnbG9nID0gZnVuY3Rpb24oc2V0KSB7XFxuICBpZiAoaXNVbmRlZmluZWQoZGVidWdFbnZpcm9uKSlcXG4gICAgZGVidWdFbnZpcm9uID0gcHJvY2Vzcy5lbnYuTk9ERV9ERUJVRyB8fCAnJztcXG4gIHNldCA9IHNldC50b1VwcGVyQ2FzZSgpO1xcbiAgaWYgKCFkZWJ1Z3Nbc2V0XSkge1xcbiAgICBpZiAobmV3IFJlZ0V4cCgnXFxcXFxcXFxiJyArIHNldCArICdcXFxcXFxcXGInLCAnaScpLnRlc3QoZGVidWdFbnZpcm9uKSkge1xcbiAgICAgIHZhciBwaWQgPSBwcm9jZXNzLnBpZDtcXG4gICAgICBkZWJ1Z3Nbc2V0XSA9IGZ1bmN0aW9uKCkge1xcbiAgICAgICAgdmFyIG1zZyA9IGV4cG9ydHMuZm9ybWF0LmFwcGx5KGV4cG9ydHMsIGFyZ3VtZW50cyk7XFxuICAgICAgICBjb25zb2xlLmVycm9yKCclcyAlZDogJXMnLCBzZXQsIHBpZCwgbXNnKTtcXG4gICAgICB9O1xcbiAgICB9IGVsc2Uge1xcbiAgICAgIGRlYnVnc1tzZXRdID0gZnVuY3Rpb24oKSB7fTtcXG4gICAgfVxcbiAgfVxcbiAgcmV0dXJuIGRlYnVnc1tzZXRdO1xcbn07XFxuXFxuXFxuLyoqXFxuICogRWNob3MgdGhlIHZhbHVlIG9mIGEgdmFsdWUuIFRyeXMgdG8gcHJpbnQgdGhlIHZhbHVlIG91dFxcbiAqIGluIHRoZSBiZXN0IHdheSBwb3NzaWJsZSBnaXZlbiB0aGUgZGlmZmVyZW50IHR5cGVzLlxcbiAqXFxuICogQHBhcmFtIHtPYmplY3R9IG9iaiBUaGUgb2JqZWN0IHRvIHByaW50IG91dC5cXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0cyBPcHRpb25hbCBvcHRpb25zIG9iamVjdCB0aGF0IGFsdGVycyB0aGUgb3V0cHV0LlxcbiAqL1xcbi8qIGxlZ2FjeTogb2JqLCBzaG93SGlkZGVuLCBkZXB0aCwgY29sb3JzKi9cXG5mdW5jdGlvbiBpbnNwZWN0KG9iaiwgb3B0cykge1xcbiAgLy8gZGVmYXVsdCBvcHRpb25zXFxuICB2YXIgY3R4ID0ge1xcbiAgICBzZWVuOiBbXSxcXG4gICAgc3R5bGl6ZTogc3R5bGl6ZU5vQ29sb3JcXG4gIH07XFxuICAvLyBsZWdhY3kuLi5cXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID49IDMpIGN0eC5kZXB0aCA9IGFyZ3VtZW50c1syXTtcXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID49IDQpIGN0eC5jb2xvcnMgPSBhcmd1bWVudHNbM107XFxuICBpZiAoaXNCb29sZWFuKG9wdHMpKSB7XFxuICAgIC8vIGxlZ2FjeS4uLlxcbiAgICBjdHguc2hvd0hpZGRlbiA9IG9wdHM7XFxuICB9IGVsc2UgaWYgKG9wdHMpIHtcXG4gICAgLy8gZ290IGFuIFxcXCJvcHRpb25zXFxcIiBvYmplY3RcXG4gICAgZXhwb3J0cy5fZXh0ZW5kKGN0eCwgb3B0cyk7XFxuICB9XFxuICAvLyBzZXQgZGVmYXVsdCBvcHRpb25zXFxuICBpZiAoaXNVbmRlZmluZWQoY3R4LnNob3dIaWRkZW4pKSBjdHguc2hvd0hpZGRlbiA9IGZhbHNlO1xcbiAgaWYgKGlzVW5kZWZpbmVkKGN0eC5kZXB0aCkpIGN0eC5kZXB0aCA9IDI7XFxuICBpZiAoaXNVbmRlZmluZWQoY3R4LmNvbG9ycykpIGN0eC5jb2xvcnMgPSBmYWxzZTtcXG4gIGlmIChpc1VuZGVmaW5lZChjdHguY3VzdG9tSW5zcGVjdCkpIGN0eC5jdXN0b21JbnNwZWN0ID0gdHJ1ZTtcXG4gIGlmIChjdHguY29sb3JzKSBjdHguc3R5bGl6ZSA9IHN0eWxpemVXaXRoQ29sb3I7XFxuICByZXR1cm4gZm9ybWF0VmFsdWUoY3R4LCBvYmosIGN0eC5kZXB0aCk7XFxufVxcbmV4cG9ydHMuaW5zcGVjdCA9IGluc3BlY3Q7XFxuXFxuXFxuLy8gaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9BTlNJX2VzY2FwZV9jb2RlI2dyYXBoaWNzXFxuaW5zcGVjdC5jb2xvcnMgPSB7XFxuICAnYm9sZCcgOiBbMSwgMjJdLFxcbiAgJ2l0YWxpYycgOiBbMywgMjNdLFxcbiAgJ3VuZGVybGluZScgOiBbNCwgMjRdLFxcbiAgJ2ludmVyc2UnIDogWzcsIDI3XSxcXG4gICd3aGl0ZScgOiBbMzcsIDM5XSxcXG4gICdncmV5JyA6IFs5MCwgMzldLFxcbiAgJ2JsYWNrJyA6IFszMCwgMzldLFxcbiAgJ2JsdWUnIDogWzM0LCAzOV0sXFxuICAnY3lhbicgOiBbMzYsIDM5XSxcXG4gICdncmVlbicgOiBbMzIsIDM5XSxcXG4gICdtYWdlbnRhJyA6IFszNSwgMzldLFxcbiAgJ3JlZCcgOiBbMzEsIDM5XSxcXG4gICd5ZWxsb3cnIDogWzMzLCAzOV1cXG59O1xcblxcbi8vIERvbid0IHVzZSAnYmx1ZScgbm90IHZpc2libGUgb24gY21kLmV4ZVxcbmluc3BlY3Quc3R5bGVzID0ge1xcbiAgJ3NwZWNpYWwnOiAnY3lhbicsXFxuICAnbnVtYmVyJzogJ3llbGxvdycsXFxuICAnYm9vbGVhbic6ICd5ZWxsb3cnLFxcbiAgJ3VuZGVmaW5lZCc6ICdncmV5JyxcXG4gICdudWxsJzogJ2JvbGQnLFxcbiAgJ3N0cmluZyc6ICdncmVlbicsXFxuICAnZGF0ZSc6ICdtYWdlbnRhJyxcXG4gIC8vIFxcXCJuYW1lXFxcIjogaW50ZW50aW9uYWxseSBub3Qgc3R5bGluZ1xcbiAgJ3JlZ2V4cCc6ICdyZWQnXFxufTtcXG5cXG5cXG5mdW5jdGlvbiBzdHlsaXplV2l0aENvbG9yKHN0ciwgc3R5bGVUeXBlKSB7XFxuICB2YXIgc3R5bGUgPSBpbnNwZWN0LnN0eWxlc1tzdHlsZVR5cGVdO1xcblxcbiAgaWYgKHN0eWxlKSB7XFxuICAgIHJldHVybiAnXFxcXHUwMDFiWycgKyBpbnNwZWN0LmNvbG9yc1tzdHlsZV1bMF0gKyAnbScgKyBzdHIgK1xcbiAgICAgICAgICAgJ1xcXFx1MDAxYlsnICsgaW5zcGVjdC5jb2xvcnNbc3R5bGVdWzFdICsgJ20nO1xcbiAgfSBlbHNlIHtcXG4gICAgcmV0dXJuIHN0cjtcXG4gIH1cXG59XFxuXFxuXFxuZnVuY3Rpb24gc3R5bGl6ZU5vQ29sb3Ioc3RyLCBzdHlsZVR5cGUpIHtcXG4gIHJldHVybiBzdHI7XFxufVxcblxcblxcbmZ1bmN0aW9uIGFycmF5VG9IYXNoKGFycmF5KSB7XFxuICB2YXIgaGFzaCA9IHt9O1xcblxcbiAgYXJyYXkuZm9yRWFjaChmdW5jdGlvbih2YWwsIGlkeCkge1xcbiAgICBoYXNoW3ZhbF0gPSB0cnVlO1xcbiAgfSk7XFxuXFxuICByZXR1cm4gaGFzaDtcXG59XFxuXFxuXFxuZnVuY3Rpb24gZm9ybWF0VmFsdWUoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzKSB7XFxuICAvLyBQcm92aWRlIGEgaG9vayBmb3IgdXNlci1zcGVjaWZpZWQgaW5zcGVjdCBmdW5jdGlvbnMuXFxuICAvLyBDaGVjayB0aGF0IHZhbHVlIGlzIGFuIG9iamVjdCB3aXRoIGFuIGluc3BlY3QgZnVuY3Rpb24gb24gaXRcXG4gIGlmIChjdHguY3VzdG9tSW5zcGVjdCAmJlxcbiAgICAgIHZhbHVlICYmXFxuICAgICAgaXNGdW5jdGlvbih2YWx1ZS5pbnNwZWN0KSAmJlxcbiAgICAgIC8vIEZpbHRlciBvdXQgdGhlIHV0aWwgbW9kdWxlLCBpdCdzIGluc3BlY3QgZnVuY3Rpb24gaXMgc3BlY2lhbFxcbiAgICAgIHZhbHVlLmluc3BlY3QgIT09IGV4cG9ydHMuaW5zcGVjdCAmJlxcbiAgICAgIC8vIEFsc28gZmlsdGVyIG91dCBhbnkgcHJvdG90eXBlIG9iamVjdHMgdXNpbmcgdGhlIGNpcmN1bGFyIGNoZWNrLlxcbiAgICAgICEodmFsdWUuY29uc3RydWN0b3IgJiYgdmFsdWUuY29uc3RydWN0b3IucHJvdG90eXBlID09PSB2YWx1ZSkpIHtcXG4gICAgdmFyIHJldCA9IHZhbHVlLmluc3BlY3QocmVjdXJzZVRpbWVzLCBjdHgpO1xcbiAgICBpZiAoIWlzU3RyaW5nKHJldCkpIHtcXG4gICAgICByZXQgPSBmb3JtYXRWYWx1ZShjdHgsIHJldCwgcmVjdXJzZVRpbWVzKTtcXG4gICAgfVxcbiAgICByZXR1cm4gcmV0O1xcbiAgfVxcblxcbiAgLy8gUHJpbWl0aXZlIHR5cGVzIGNhbm5vdCBoYXZlIHByb3BlcnRpZXNcXG4gIHZhciBwcmltaXRpdmUgPSBmb3JtYXRQcmltaXRpdmUoY3R4LCB2YWx1ZSk7XFxuICBpZiAocHJpbWl0aXZlKSB7XFxuICAgIHJldHVybiBwcmltaXRpdmU7XFxuICB9XFxuXFxuICAvLyBMb29rIHVwIHRoZSBrZXlzIG9mIHRoZSBvYmplY3QuXFxuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKHZhbHVlKTtcXG4gIHZhciB2aXNpYmxlS2V5cyA9IGFycmF5VG9IYXNoKGtleXMpO1xcblxcbiAgaWYgKGN0eC5zaG93SGlkZGVuKSB7XFxuICAgIGtleXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh2YWx1ZSk7XFxuICB9XFxuXFxuICAvLyBJRSBkb2Vzbid0IG1ha2UgZXJyb3IgZmllbGRzIG5vbi1lbnVtZXJhYmxlXFxuICAvLyBodHRwOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvaWUvZHd3NTJzYnQodj12cy45NCkuYXNweFxcbiAgaWYgKGlzRXJyb3IodmFsdWUpXFxuICAgICAgJiYgKGtleXMuaW5kZXhPZignbWVzc2FnZScpID49IDAgfHwga2V5cy5pbmRleE9mKCdkZXNjcmlwdGlvbicpID49IDApKSB7XFxuICAgIHJldHVybiBmb3JtYXRFcnJvcih2YWx1ZSk7XFxuICB9XFxuXFxuICAvLyBTb21lIHR5cGUgb2Ygb2JqZWN0IHdpdGhvdXQgcHJvcGVydGllcyBjYW4gYmUgc2hvcnRjdXR0ZWQuXFxuICBpZiAoa2V5cy5sZW5ndGggPT09IDApIHtcXG4gICAgaWYgKGlzRnVuY3Rpb24odmFsdWUpKSB7XFxuICAgICAgdmFyIG5hbWUgPSB2YWx1ZS5uYW1lID8gJzogJyArIHZhbHVlLm5hbWUgOiAnJztcXG4gICAgICByZXR1cm4gY3R4LnN0eWxpemUoJ1tGdW5jdGlvbicgKyBuYW1lICsgJ10nLCAnc3BlY2lhbCcpO1xcbiAgICB9XFxuICAgIGlmIChpc1JlZ0V4cCh2YWx1ZSkpIHtcXG4gICAgICByZXR1cm4gY3R4LnN0eWxpemUoUmVnRXhwLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSwgJ3JlZ2V4cCcpO1xcbiAgICB9XFxuICAgIGlmIChpc0RhdGUodmFsdWUpKSB7XFxuICAgICAgcmV0dXJuIGN0eC5zdHlsaXplKERhdGUucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpLCAnZGF0ZScpO1xcbiAgICB9XFxuICAgIGlmIChpc0Vycm9yKHZhbHVlKSkge1xcbiAgICAgIHJldHVybiBmb3JtYXRFcnJvcih2YWx1ZSk7XFxuICAgIH1cXG4gIH1cXG5cXG4gIHZhciBiYXNlID0gJycsIGFycmF5ID0gZmFsc2UsIGJyYWNlcyA9IFsneycsICd9J107XFxuXFxuICAvLyBNYWtlIEFycmF5IHNheSB0aGF0IHRoZXkgYXJlIEFycmF5XFxuICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcXG4gICAgYXJyYXkgPSB0cnVlO1xcbiAgICBicmFjZXMgPSBbJ1snLCAnXSddO1xcbiAgfVxcblxcbiAgLy8gTWFrZSBmdW5jdGlvbnMgc2F5IHRoYXQgdGhleSBhcmUgZnVuY3Rpb25zXFxuICBpZiAoaXNGdW5jdGlvbih2YWx1ZSkpIHtcXG4gICAgdmFyIG4gPSB2YWx1ZS5uYW1lID8gJzogJyArIHZhbHVlLm5hbWUgOiAnJztcXG4gICAgYmFzZSA9ICcgW0Z1bmN0aW9uJyArIG4gKyAnXSc7XFxuICB9XFxuXFxuICAvLyBNYWtlIFJlZ0V4cHMgc2F5IHRoYXQgdGhleSBhcmUgUmVnRXhwc1xcbiAgaWYgKGlzUmVnRXhwKHZhbHVlKSkge1xcbiAgICBiYXNlID0gJyAnICsgUmVnRXhwLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKTtcXG4gIH1cXG5cXG4gIC8vIE1ha2UgZGF0ZXMgd2l0aCBwcm9wZXJ0aWVzIGZpcnN0IHNheSB0aGUgZGF0ZVxcbiAgaWYgKGlzRGF0ZSh2YWx1ZSkpIHtcXG4gICAgYmFzZSA9ICcgJyArIERhdGUucHJvdG90eXBlLnRvVVRDU3RyaW5nLmNhbGwodmFsdWUpO1xcbiAgfVxcblxcbiAgLy8gTWFrZSBlcnJvciB3aXRoIG1lc3NhZ2UgZmlyc3Qgc2F5IHRoZSBlcnJvclxcbiAgaWYgKGlzRXJyb3IodmFsdWUpKSB7XFxuICAgIGJhc2UgPSAnICcgKyBmb3JtYXRFcnJvcih2YWx1ZSk7XFxuICB9XFxuXFxuICBpZiAoa2V5cy5sZW5ndGggPT09IDAgJiYgKCFhcnJheSB8fCB2YWx1ZS5sZW5ndGggPT0gMCkpIHtcXG4gICAgcmV0dXJuIGJyYWNlc1swXSArIGJhc2UgKyBicmFjZXNbMV07XFxuICB9XFxuXFxuICBpZiAocmVjdXJzZVRpbWVzIDwgMCkge1xcbiAgICBpZiAoaXNSZWdFeHAodmFsdWUpKSB7XFxuICAgICAgcmV0dXJuIGN0eC5zdHlsaXplKFJlZ0V4cC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSksICdyZWdleHAnKTtcXG4gICAgfSBlbHNlIHtcXG4gICAgICByZXR1cm4gY3R4LnN0eWxpemUoJ1tPYmplY3RdJywgJ3NwZWNpYWwnKTtcXG4gICAgfVxcbiAgfVxcblxcbiAgY3R4LnNlZW4ucHVzaCh2YWx1ZSk7XFxuXFxuICB2YXIgb3V0cHV0O1xcbiAgaWYgKGFycmF5KSB7XFxuICAgIG91dHB1dCA9IGZvcm1hdEFycmF5KGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcywgdmlzaWJsZUtleXMsIGtleXMpO1xcbiAgfSBlbHNlIHtcXG4gICAgb3V0cHV0ID0ga2V5cy5tYXAoZnVuY3Rpb24oa2V5KSB7XFxuICAgICAgcmV0dXJuIGZvcm1hdFByb3BlcnR5KGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcywgdmlzaWJsZUtleXMsIGtleSwgYXJyYXkpO1xcbiAgICB9KTtcXG4gIH1cXG5cXG4gIGN0eC5zZWVuLnBvcCgpO1xcblxcbiAgcmV0dXJuIHJlZHVjZVRvU2luZ2xlU3RyaW5nKG91dHB1dCwgYmFzZSwgYnJhY2VzKTtcXG59XFxuXFxuXFxuZnVuY3Rpb24gZm9ybWF0UHJpbWl0aXZlKGN0eCwgdmFsdWUpIHtcXG4gIGlmIChpc1VuZGVmaW5lZCh2YWx1ZSkpXFxuICAgIHJldHVybiBjdHguc3R5bGl6ZSgndW5kZWZpbmVkJywgJ3VuZGVmaW5lZCcpO1xcbiAgaWYgKGlzU3RyaW5nKHZhbHVlKSkge1xcbiAgICB2YXIgc2ltcGxlID0gJ1xcXFwnJyArIEpTT04uc3RyaW5naWZ5KHZhbHVlKS5yZXBsYWNlKC9eXFxcInxcXFwiJC9nLCAnJylcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvJy9nLCBcXFwiXFxcXFxcXFwnXFxcIilcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvXFxcXFxcXFxcXFwiL2csICdcXFwiJykgKyAnXFxcXCcnO1xcbiAgICByZXR1cm4gY3R4LnN0eWxpemUoc2ltcGxlLCAnc3RyaW5nJyk7XFxuICB9XFxuICBpZiAoaXNOdW1iZXIodmFsdWUpKVxcbiAgICByZXR1cm4gY3R4LnN0eWxpemUoJycgKyB2YWx1ZSwgJ251bWJlcicpO1xcbiAgaWYgKGlzQm9vbGVhbih2YWx1ZSkpXFxuICAgIHJldHVybiBjdHguc3R5bGl6ZSgnJyArIHZhbHVlLCAnYm9vbGVhbicpO1xcbiAgLy8gRm9yIHNvbWUgcmVhc29uIHR5cGVvZiBudWxsIGlzIFxcXCJvYmplY3RcXFwiLCBzbyBzcGVjaWFsIGNhc2UgaGVyZS5cXG4gIGlmIChpc051bGwodmFsdWUpKVxcbiAgICByZXR1cm4gY3R4LnN0eWxpemUoJ251bGwnLCAnbnVsbCcpO1xcbn1cXG5cXG5cXG5mdW5jdGlvbiBmb3JtYXRFcnJvcih2YWx1ZSkge1xcbiAgcmV0dXJuICdbJyArIEVycm9yLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSArICddJztcXG59XFxuXFxuXFxuZnVuY3Rpb24gZm9ybWF0QXJyYXkoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzLCB2aXNpYmxlS2V5cywga2V5cykge1xcbiAgdmFyIG91dHB1dCA9IFtdO1xcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSB2YWx1ZS5sZW5ndGg7IGkgPCBsOyArK2kpIHtcXG4gICAgaWYgKGhhc093blByb3BlcnR5KHZhbHVlLCBTdHJpbmcoaSkpKSB7XFxuICAgICAgb3V0cHV0LnB1c2goZm9ybWF0UHJvcGVydHkoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzLCB2aXNpYmxlS2V5cyxcXG4gICAgICAgICAgU3RyaW5nKGkpLCB0cnVlKSk7XFxuICAgIH0gZWxzZSB7XFxuICAgICAgb3V0cHV0LnB1c2goJycpO1xcbiAgICB9XFxuICB9XFxuICBrZXlzLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7XFxuICAgIGlmICgha2V5Lm1hdGNoKC9eXFxcXGQrJC8pKSB7XFxuICAgICAgb3V0cHV0LnB1c2goZm9ybWF0UHJvcGVydHkoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzLCB2aXNpYmxlS2V5cyxcXG4gICAgICAgICAga2V5LCB0cnVlKSk7XFxuICAgIH1cXG4gIH0pO1xcbiAgcmV0dXJuIG91dHB1dDtcXG59XFxuXFxuXFxuZnVuY3Rpb24gZm9ybWF0UHJvcGVydHkoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzLCB2aXNpYmxlS2V5cywga2V5LCBhcnJheSkge1xcbiAgdmFyIG5hbWUsIHN0ciwgZGVzYztcXG4gIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHZhbHVlLCBrZXkpIHx8IHsgdmFsdWU6IHZhbHVlW2tleV0gfTtcXG4gIGlmIChkZXNjLmdldCkge1xcbiAgICBpZiAoZGVzYy5zZXQpIHtcXG4gICAgICBzdHIgPSBjdHguc3R5bGl6ZSgnW0dldHRlci9TZXR0ZXJdJywgJ3NwZWNpYWwnKTtcXG4gICAgfSBlbHNlIHtcXG4gICAgICBzdHIgPSBjdHguc3R5bGl6ZSgnW0dldHRlcl0nLCAnc3BlY2lhbCcpO1xcbiAgICB9XFxuICB9IGVsc2Uge1xcbiAgICBpZiAoZGVzYy5zZXQpIHtcXG4gICAgICBzdHIgPSBjdHguc3R5bGl6ZSgnW1NldHRlcl0nLCAnc3BlY2lhbCcpO1xcbiAgICB9XFxuICB9XFxuICBpZiAoIWhhc093blByb3BlcnR5KHZpc2libGVLZXlzLCBrZXkpKSB7XFxuICAgIG5hbWUgPSAnWycgKyBrZXkgKyAnXSc7XFxuICB9XFxuICBpZiAoIXN0cikge1xcbiAgICBpZiAoY3R4LnNlZW4uaW5kZXhPZihkZXNjLnZhbHVlKSA8IDApIHtcXG4gICAgICBpZiAoaXNOdWxsKHJlY3Vyc2VUaW1lcykpIHtcXG4gICAgICAgIHN0ciA9IGZvcm1hdFZhbHVlKGN0eCwgZGVzYy52YWx1ZSwgbnVsbCk7XFxuICAgICAgfSBlbHNlIHtcXG4gICAgICAgIHN0ciA9IGZvcm1hdFZhbHVlKGN0eCwgZGVzYy52YWx1ZSwgcmVjdXJzZVRpbWVzIC0gMSk7XFxuICAgICAgfVxcbiAgICAgIGlmIChzdHIuaW5kZXhPZignXFxcXG4nKSA+IC0xKSB7XFxuICAgICAgICBpZiAoYXJyYXkpIHtcXG4gICAgICAgICAgc3RyID0gc3RyLnNwbGl0KCdcXFxcbicpLm1hcChmdW5jdGlvbihsaW5lKSB7XFxuICAgICAgICAgICAgcmV0dXJuICcgICcgKyBsaW5lO1xcbiAgICAgICAgICB9KS5qb2luKCdcXFxcbicpLnN1YnN0cigyKTtcXG4gICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgIHN0ciA9ICdcXFxcbicgKyBzdHIuc3BsaXQoJ1xcXFxuJykubWFwKGZ1bmN0aW9uKGxpbmUpIHtcXG4gICAgICAgICAgICByZXR1cm4gJyAgICcgKyBsaW5lO1xcbiAgICAgICAgICB9KS5qb2luKCdcXFxcbicpO1xcbiAgICAgICAgfVxcbiAgICAgIH1cXG4gICAgfSBlbHNlIHtcXG4gICAgICBzdHIgPSBjdHguc3R5bGl6ZSgnW0NpcmN1bGFyXScsICdzcGVjaWFsJyk7XFxuICAgIH1cXG4gIH1cXG4gIGlmIChpc1VuZGVmaW5lZChuYW1lKSkge1xcbiAgICBpZiAoYXJyYXkgJiYga2V5Lm1hdGNoKC9eXFxcXGQrJC8pKSB7XFxuICAgICAgcmV0dXJuIHN0cjtcXG4gICAgfVxcbiAgICBuYW1lID0gSlNPTi5zdHJpbmdpZnkoJycgKyBrZXkpO1xcbiAgICBpZiAobmFtZS5tYXRjaCgvXlxcXCIoW2EtekEtWl9dW2EtekEtWl8wLTldKilcXFwiJC8pKSB7XFxuICAgICAgbmFtZSA9IG5hbWUuc3Vic3RyKDEsIG5hbWUubGVuZ3RoIC0gMik7XFxuICAgICAgbmFtZSA9IGN0eC5zdHlsaXplKG5hbWUsICduYW1lJyk7XFxuICAgIH0gZWxzZSB7XFxuICAgICAgbmFtZSA9IG5hbWUucmVwbGFjZSgvJy9nLCBcXFwiXFxcXFxcXFwnXFxcIilcXG4gICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9cXFxcXFxcXFxcXCIvZywgJ1xcXCInKVxcbiAgICAgICAgICAgICAgICAgLnJlcGxhY2UoLyheXFxcInxcXFwiJCkvZywgXFxcIidcXFwiKTtcXG4gICAgICBuYW1lID0gY3R4LnN0eWxpemUobmFtZSwgJ3N0cmluZycpO1xcbiAgICB9XFxuICB9XFxuXFxuICByZXR1cm4gbmFtZSArICc6ICcgKyBzdHI7XFxufVxcblxcblxcbmZ1bmN0aW9uIHJlZHVjZVRvU2luZ2xlU3RyaW5nKG91dHB1dCwgYmFzZSwgYnJhY2VzKSB7XFxuICB2YXIgbnVtTGluZXNFc3QgPSAwO1xcbiAgdmFyIGxlbmd0aCA9IG91dHB1dC5yZWR1Y2UoZnVuY3Rpb24ocHJldiwgY3VyKSB7XFxuICAgIG51bUxpbmVzRXN0Kys7XFxuICAgIGlmIChjdXIuaW5kZXhPZignXFxcXG4nKSA+PSAwKSBudW1MaW5lc0VzdCsrO1xcbiAgICByZXR1cm4gcHJldiArIGN1ci5yZXBsYWNlKC9cXFxcdTAwMWJcXFxcW1xcXFxkXFxcXGQ/bS9nLCAnJykubGVuZ3RoICsgMTtcXG4gIH0sIDApO1xcblxcbiAgaWYgKGxlbmd0aCA+IDYwKSB7XFxuICAgIHJldHVybiBicmFjZXNbMF0gK1xcbiAgICAgICAgICAgKGJhc2UgPT09ICcnID8gJycgOiBiYXNlICsgJ1xcXFxuICcpICtcXG4gICAgICAgICAgICcgJyArXFxuICAgICAgICAgICBvdXRwdXQuam9pbignLFxcXFxuICAnKSArXFxuICAgICAgICAgICAnICcgK1xcbiAgICAgICAgICAgYnJhY2VzWzFdO1xcbiAgfVxcblxcbiAgcmV0dXJuIGJyYWNlc1swXSArIGJhc2UgKyAnICcgKyBvdXRwdXQuam9pbignLCAnKSArICcgJyArIGJyYWNlc1sxXTtcXG59XFxuXFxuXFxuLy8gTk9URTogVGhlc2UgdHlwZSBjaGVja2luZyBmdW5jdGlvbnMgaW50ZW50aW9uYWxseSBkb24ndCB1c2UgYGluc3RhbmNlb2ZgXFxuLy8gYmVjYXVzZSBpdCBpcyBmcmFnaWxlIGFuZCBjYW4gYmUgZWFzaWx5IGZha2VkIHdpdGggYE9iamVjdC5jcmVhdGUoKWAuXFxuZnVuY3Rpb24gaXNBcnJheShhcikge1xcbiAgcmV0dXJuIEFycmF5LmlzQXJyYXkoYXIpO1xcbn1cXG5leHBvcnRzLmlzQXJyYXkgPSBpc0FycmF5O1xcblxcbmZ1bmN0aW9uIGlzQm9vbGVhbihhcmcpIHtcXG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnYm9vbGVhbic7XFxufVxcbmV4cG9ydHMuaXNCb29sZWFuID0gaXNCb29sZWFuO1xcblxcbmZ1bmN0aW9uIGlzTnVsbChhcmcpIHtcXG4gIHJldHVybiBhcmcgPT09IG51bGw7XFxufVxcbmV4cG9ydHMuaXNOdWxsID0gaXNOdWxsO1xcblxcbmZ1bmN0aW9uIGlzTnVsbE9yVW5kZWZpbmVkKGFyZykge1xcbiAgcmV0dXJuIGFyZyA9PSBudWxsO1xcbn1cXG5leHBvcnRzLmlzTnVsbE9yVW5kZWZpbmVkID0gaXNOdWxsT3JVbmRlZmluZWQ7XFxuXFxuZnVuY3Rpb24gaXNOdW1iZXIoYXJnKSB7XFxuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ251bWJlcic7XFxufVxcbmV4cG9ydHMuaXNOdW1iZXIgPSBpc051bWJlcjtcXG5cXG5mdW5jdGlvbiBpc1N0cmluZyhhcmcpIHtcXG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnc3RyaW5nJztcXG59XFxuZXhwb3J0cy5pc1N0cmluZyA9IGlzU3RyaW5nO1xcblxcbmZ1bmN0aW9uIGlzU3ltYm9sKGFyZykge1xcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdzeW1ib2wnO1xcbn1cXG5leHBvcnRzLmlzU3ltYm9sID0gaXNTeW1ib2w7XFxuXFxuZnVuY3Rpb24gaXNVbmRlZmluZWQoYXJnKSB7XFxuICByZXR1cm4gYXJnID09PSB2b2lkIDA7XFxufVxcbmV4cG9ydHMuaXNVbmRlZmluZWQgPSBpc1VuZGVmaW5lZDtcXG5cXG5mdW5jdGlvbiBpc1JlZ0V4cChyZSkge1xcbiAgcmV0dXJuIGlzT2JqZWN0KHJlKSAmJiBvYmplY3RUb1N0cmluZyhyZSkgPT09ICdbb2JqZWN0IFJlZ0V4cF0nO1xcbn1cXG5leHBvcnRzLmlzUmVnRXhwID0gaXNSZWdFeHA7XFxuXFxuZnVuY3Rpb24gaXNPYmplY3QoYXJnKSB7XFxuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ29iamVjdCcgJiYgYXJnICE9PSBudWxsO1xcbn1cXG5leHBvcnRzLmlzT2JqZWN0ID0gaXNPYmplY3Q7XFxuXFxuZnVuY3Rpb24gaXNEYXRlKGQpIHtcXG4gIHJldHVybiBpc09iamVjdChkKSAmJiBvYmplY3RUb1N0cmluZyhkKSA9PT0gJ1tvYmplY3QgRGF0ZV0nO1xcbn1cXG5leHBvcnRzLmlzRGF0ZSA9IGlzRGF0ZTtcXG5cXG5mdW5jdGlvbiBpc0Vycm9yKGUpIHtcXG4gIHJldHVybiBpc09iamVjdChlKSAmJlxcbiAgICAgIChvYmplY3RUb1N0cmluZyhlKSA9PT0gJ1tvYmplY3QgRXJyb3JdJyB8fCBlIGluc3RhbmNlb2YgRXJyb3IpO1xcbn1cXG5leHBvcnRzLmlzRXJyb3IgPSBpc0Vycm9yO1xcblxcbmZ1bmN0aW9uIGlzRnVuY3Rpb24oYXJnKSB7XFxuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ2Z1bmN0aW9uJztcXG59XFxuZXhwb3J0cy5pc0Z1bmN0aW9uID0gaXNGdW5jdGlvbjtcXG5cXG5mdW5jdGlvbiBpc1ByaW1pdGl2ZShhcmcpIHtcXG4gIHJldHVybiBhcmcgPT09IG51bGwgfHxcXG4gICAgICAgICB0eXBlb2YgYXJnID09PSAnYm9vbGVhbicgfHxcXG4gICAgICAgICB0eXBlb2YgYXJnID09PSAnbnVtYmVyJyB8fFxcbiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICdzdHJpbmcnIHx8XFxuICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ3N5bWJvbCcgfHwgIC8vIEVTNiBzeW1ib2xcXG4gICAgICAgICB0eXBlb2YgYXJnID09PSAndW5kZWZpbmVkJztcXG59XFxuZXhwb3J0cy5pc1ByaW1pdGl2ZSA9IGlzUHJpbWl0aXZlO1xcblxcbmV4cG9ydHMuaXNCdWZmZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL3N1cHBvcnQvaXNCdWZmZXIgKi8gMTk1KTtcXG5cXG5mdW5jdGlvbiBvYmplY3RUb1N0cmluZyhvKSB7XFxuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pO1xcbn1cXG5cXG5cXG5mdW5jdGlvbiBwYWQobikge1xcbiAgcmV0dXJuIG4gPCAxMCA/ICcwJyArIG4udG9TdHJpbmcoMTApIDogbi50b1N0cmluZygxMCk7XFxufVxcblxcblxcbnZhciBtb250aHMgPSBbJ0phbicsICdGZWInLCAnTWFyJywgJ0FwcicsICdNYXknLCAnSnVuJywgJ0p1bCcsICdBdWcnLCAnU2VwJyxcXG4gICAgICAgICAgICAgICdPY3QnLCAnTm92JywgJ0RlYyddO1xcblxcbi8vIDI2IEZlYiAxNjoxOTozNFxcbmZ1bmN0aW9uIHRpbWVzdGFtcCgpIHtcXG4gIHZhciBkID0gbmV3IERhdGUoKTtcXG4gIHZhciB0aW1lID0gW3BhZChkLmdldEhvdXJzKCkpLFxcbiAgICAgICAgICAgICAgcGFkKGQuZ2V0TWludXRlcygpKSxcXG4gICAgICAgICAgICAgIHBhZChkLmdldFNlY29uZHMoKSldLmpvaW4oJzonKTtcXG4gIHJldHVybiBbZC5nZXREYXRlKCksIG1vbnRoc1tkLmdldE1vbnRoKCldLCB0aW1lXS5qb2luKCcgJyk7XFxufVxcblxcblxcbi8vIGxvZyBpcyBqdXN0IGEgdGhpbiB3cmFwcGVyIHRvIGNvbnNvbGUubG9nIHRoYXQgcHJlcGVuZHMgYSB0aW1lc3RhbXBcXG5leHBvcnRzLmxvZyA9IGZ1bmN0aW9uKCkge1xcbiAgY29uc29sZS5sb2coJyVzIC0gJXMnLCB0aW1lc3RhbXAoKSwgZXhwb3J0cy5mb3JtYXQuYXBwbHkoZXhwb3J0cywgYXJndW1lbnRzKSk7XFxufTtcXG5cXG5cXG4vKipcXG4gKiBJbmhlcml0IHRoZSBwcm90b3R5cGUgbWV0aG9kcyBmcm9tIG9uZSBjb25zdHJ1Y3RvciBpbnRvIGFub3RoZXIuXFxuICpcXG4gKiBUaGUgRnVuY3Rpb24ucHJvdG90eXBlLmluaGVyaXRzIGZyb20gbGFuZy5qcyByZXdyaXR0ZW4gYXMgYSBzdGFuZGFsb25lXFxuICogZnVuY3Rpb24gKG5vdCBvbiBGdW5jdGlvbi5wcm90b3R5cGUpLiBOT1RFOiBJZiB0aGlzIGZpbGUgaXMgdG8gYmUgbG9hZGVkXFxuICogZHVyaW5nIGJvb3RzdHJhcHBpbmcgdGhpcyBmdW5jdGlvbiBuZWVkcyB0byBiZSByZXdyaXR0ZW4gdXNpbmcgc29tZSBuYXRpdmVcXG4gKiBmdW5jdGlvbnMgYXMgcHJvdG90eXBlIHNldHVwIHVzaW5nIG5vcm1hbCBKYXZhU2NyaXB0IGRvZXMgbm90IHdvcmsgYXNcXG4gKiBleHBlY3RlZCBkdXJpbmcgYm9vdHN0cmFwcGluZyAoc2VlIG1pcnJvci5qcyBpbiByMTE0OTAzKS5cXG4gKlxcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGN0b3IgQ29uc3RydWN0b3IgZnVuY3Rpb24gd2hpY2ggbmVlZHMgdG8gaW5oZXJpdCB0aGVcXG4gKiAgICAgcHJvdG90eXBlLlxcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IHN1cGVyQ3RvciBDb25zdHJ1Y3RvciBmdW5jdGlvbiB0byBpbmhlcml0IHByb3RvdHlwZSBmcm9tLlxcbiAqL1xcbmV4cG9ydHMuaW5oZXJpdHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISBpbmhlcml0cyAqLyAxOTQpO1xcblxcbmV4cG9ydHMuX2V4dGVuZCA9IGZ1bmN0aW9uKG9yaWdpbiwgYWRkKSB7XFxuICAvLyBEb24ndCBkbyBhbnl0aGluZyBpZiBhZGQgaXNuJ3QgYW4gb2JqZWN0XFxuICBpZiAoIWFkZCB8fCAhaXNPYmplY3QoYWRkKSkgcmV0dXJuIG9yaWdpbjtcXG5cXG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMoYWRkKTtcXG4gIHZhciBpID0ga2V5cy5sZW5ndGg7XFxuICB3aGlsZSAoaS0tKSB7XFxuICAgIG9yaWdpbltrZXlzW2ldXSA9IGFkZFtrZXlzW2ldXTtcXG4gIH1cXG4gIHJldHVybiBvcmlnaW47XFxufTtcXG5cXG5mdW5jdGlvbiBoYXNPd25Qcm9wZXJ0eShvYmosIHByb3ApIHtcXG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKTtcXG59XFxuXFxuLyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovfS5jYWxsKGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vLi4vd2VicGFjay9idWlsZGluL2dsb2JhbC5qcyAqLyAzKSwgX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi8uLi9wcm9jZXNzL2Jyb3dzZXIuanMgKi8gMzYpKSkvLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaU5qZ3Vhbk1pTENKemIzVnlZMlZ6SWpwYkluZGxZbkJoWTJzNkx5OHZMaTkrTDNWMGFXd3ZkWFJwYkM1cWN6OHhaVE13SWwwc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYklpOHZJRU52Y0hseWFXZG9kQ0JLYjNsbGJuUXNJRWx1WXk0Z1lXNWtJRzkwYUdWeUlFNXZaR1VnWTI5dWRISnBZblYwYjNKekxseHVMeTljYmk4dklGQmxjbTFwYzNOcGIyNGdhWE1nYUdWeVpXSjVJR2R5WVc1MFpXUXNJR1p5WldVZ2IyWWdZMmhoY21kbExDQjBieUJoYm5rZ2NHVnljMjl1SUc5aWRHRnBibWx1WnlCaFhHNHZMeUJqYjNCNUlHOW1JSFJvYVhNZ2MyOW1kSGRoY21VZ1lXNWtJR0Z6YzI5amFXRjBaV1FnWkc5amRXMWxiblJoZEdsdmJpQm1hV3hsY3lBb2RHaGxYRzR2THlCY0lsTnZablIzWVhKbFhDSXBMQ0IwYnlCa1pXRnNJR2x1SUhSb1pTQlRiMlowZDJGeVpTQjNhWFJvYjNWMElISmxjM1J5YVdOMGFXOXVMQ0JwYm1Oc2RXUnBibWRjYmk4dklIZHBkR2h2ZFhRZ2JHbHRhWFJoZEdsdmJpQjBhR1VnY21sbmFIUnpJSFJ2SUhWelpTd2dZMjl3ZVN3Z2JXOWthV1o1TENCdFpYSm5aU3dnY0hWaWJHbHphQ3hjYmk4dklHUnBjM1J5YVdKMWRHVXNJSE4xWW14cFkyVnVjMlVzSUdGdVpDOXZjaUJ6Wld4c0lHTnZjR2xsY3lCdlppQjBhR1VnVTI5bWRIZGhjbVVzSUdGdVpDQjBieUJ3WlhKdGFYUmNiaTh2SUhCbGNuTnZibk1nZEc4Z2QyaHZiU0IwYUdVZ1UyOW1kSGRoY21VZ2FYTWdablZ5Ym1semFHVmtJSFJ2SUdSdklITnZMQ0J6ZFdKcVpXTjBJSFJ2SUhSb1pWeHVMeThnWm05c2JHOTNhVzVuSUdOdmJtUnBkR2x2Ym5NNlhHNHZMMXh1THk4Z1ZHaGxJR0ZpYjNabElHTnZjSGx5YVdkb2RDQnViM1JwWTJVZ1lXNWtJSFJvYVhNZ2NHVnliV2x6YzJsdmJpQnViM1JwWTJVZ2MyaGhiR3dnWW1VZ2FXNWpiSFZrWldSY2JpOHZJR2x1SUdGc2JDQmpiM0JwWlhNZ2IzSWdjM1ZpYzNSaGJuUnBZV3dnY0c5eWRHbHZibk1nYjJZZ2RHaGxJRk52Wm5SM1lYSmxMbHh1THk5Y2JpOHZJRlJJUlNCVFQwWlVWMEZTUlNCSlV5QlFVazlXU1VSRlJDQmNJa0ZUSUVsVFhDSXNJRmRKVkVoUFZWUWdWMEZTVWtGT1ZGa2dUMFlnUVU1WklFdEpUa1FzSUVWWVVGSkZVMU5jYmk4dklFOVNJRWxOVUV4SlJVUXNJRWxPUTB4VlJFbE9SeUJDVlZRZ1RrOVVJRXhKVFVsVVJVUWdWRThnVkVoRklGZEJVbEpCVGxSSlJWTWdUMFpjYmk4dklFMUZVa05JUVU1VVFVSkpURWxVV1N3Z1JrbFVUa1ZUVXlCR1QxSWdRU0JRUVZKVVNVTlZURUZTSUZCVlVsQlBVMFVnUVU1RUlFNVBUa2xPUmxKSlRrZEZUVVZPVkM0Z1NVNWNiaTh2SUU1UElFVldSVTVVSUZOSVFVeE1JRlJJUlNCQlZWUklUMUpUSUU5U0lFTlBVRmxTU1VkSVZDQklUMHhFUlZKVElFSkZJRXhKUVVKTVJTQkdUMUlnUVU1WklFTk1RVWxOTEZ4dUx5OGdSRUZOUVVkRlV5QlBVaUJQVkVoRlVpQk1TVUZDU1V4SlZGa3NJRmRJUlZSSVJWSWdTVTRnUVU0Z1FVTlVTVTlPSUU5R0lFTlBUbFJTUVVOVUxDQlVUMUpVSUU5U1hHNHZMeUJQVkVoRlVsZEpVMFVzSUVGU1NWTkpUa2NnUmxKUFRTd2dUMVZVSUU5R0lFOVNJRWxPSUVOUFRrNUZRMVJKVDA0Z1YwbFVTQ0JVU0VVZ1UwOUdWRmRCVWtVZ1QxSWdWRWhGWEc0dkx5QlZVMFVnVDFJZ1QxUklSVklnUkVWQlRFbE9SMU1nU1U0Z1ZFaEZJRk5QUmxSWFFWSkZMbHh1WEc1MllYSWdabTl5YldGMFVtVm5SWGh3SUQwZ0x5VmJjMlJxSlYwdlp6dGNibVY0Y0c5eWRITXVabTl5YldGMElEMGdablZ1WTNScGIyNG9aaWtnZTF4dUlDQnBaaUFvSVdselUzUnlhVzVuS0dZcEtTQjdYRzRnSUNBZ2RtRnlJRzlpYW1WamRITWdQU0JiWFR0Y2JpQWdJQ0JtYjNJZ0tIWmhjaUJwSUQwZ01Ec2dhU0E4SUdGeVozVnRaVzUwY3k1c1pXNW5kR2c3SUdrckt5a2dlMXh1SUNBZ0lDQWdiMkpxWldOMGN5NXdkWE5vS0dsdWMzQmxZM1FvWVhKbmRXMWxiblJ6VzJsZEtTazdYRzRnSUNBZ2ZWeHVJQ0FnSUhKbGRIVnliaUJ2WW1wbFkzUnpMbXB2YVc0b0p5QW5LVHRjYmlBZ2ZWeHVYRzRnSUhaaGNpQnBJRDBnTVR0Y2JpQWdkbUZ5SUdGeVozTWdQU0JoY21kMWJXVnVkSE03WEc0Z0lIWmhjaUJzWlc0Z1BTQmhjbWR6TG14bGJtZDBhRHRjYmlBZ2RtRnlJSE4wY2lBOUlGTjBjbWx1WnlobUtTNXlaWEJzWVdObEtHWnZjbTFoZEZKbFowVjRjQ3dnWm5WdVkzUnBiMjRvZUNrZ2UxeHVJQ0FnSUdsbUlDaDRJRDA5UFNBbkpTVW5LU0J5WlhSMWNtNGdKeVVuTzF4dUlDQWdJR2xtSUNocElENDlJR3hsYmlrZ2NtVjBkWEp1SUhnN1hHNGdJQ0FnYzNkcGRHTm9JQ2g0S1NCN1hHNGdJQ0FnSUNCallYTmxJQ2NsY3ljNklISmxkSFZ5YmlCVGRISnBibWNvWVhKbmMxdHBLeXRkS1R0Y2JpQWdJQ0FnSUdOaGMyVWdKeVZrSnpvZ2NtVjBkWEp1SUU1MWJXSmxjaWhoY21kelcya3JLMTBwTzF4dUlDQWdJQ0FnWTJGelpTQW5KV29uT2x4dUlDQWdJQ0FnSUNCMGNua2dlMXh1SUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJLVTA5T0xuTjBjbWx1WjJsbWVTaGhjbWR6VzJrcksxMHBPMXh1SUNBZ0lDQWdJQ0I5SUdOaGRHTm9JQ2hmS1NCN1hHNGdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlDZGJRMmx5WTNWc1lYSmRKenRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnWkdWbVlYVnNkRHBjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSGc3WEc0Z0lDQWdmVnh1SUNCOUtUdGNiaUFnWm05eUlDaDJZWElnZUNBOUlHRnlaM05iYVYwN0lHa2dQQ0JzWlc0N0lIZ2dQU0JoY21keld5c3JhVjBwSUh0Y2JpQWdJQ0JwWmlBb2FYTk9kV3hzS0hncElIeDhJQ0ZwYzA5aWFtVmpkQ2g0S1NrZ2UxeHVJQ0FnSUNBZ2MzUnlJQ3M5SUNjZ0p5QXJJSGc3WEc0Z0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lITjBjaUFyUFNBbklDY2dLeUJwYm5Od1pXTjBLSGdwTzF4dUlDQWdJSDFjYmlBZ2ZWeHVJQ0J5WlhSMWNtNGdjM1J5TzF4dWZUdGNibHh1WEc0dkx5Qk5ZWEpySUhSb1lYUWdZU0J0WlhSb2IyUWdjMmh2ZFd4a0lHNXZkQ0JpWlNCMWMyVmtMbHh1THk4Z1VtVjBkWEp1Y3lCaElHMXZaR2xtYVdWa0lHWjFibU4wYVc5dUlIZG9hV05vSUhkaGNtNXpJRzl1WTJVZ1lua2daR1ZtWVhWc2RDNWNiaTh2SUVsbUlDMHRibTh0WkdWd2NtVmpZWFJwYjI0Z2FYTWdjMlYwTENCMGFHVnVJR2wwSUdseklHRWdibTh0YjNBdVhHNWxlSEJ2Y25SekxtUmxjSEpsWTJGMFpTQTlJR1oxYm1OMGFXOXVLR1p1TENCdGMyY3BJSHRjYmlBZ0x5OGdRV3hzYjNjZ1ptOXlJR1JsY0hKbFkyRjBhVzVuSUhSb2FXNW5jeUJwYmlCMGFHVWdjSEp2WTJWemN5QnZaaUJ6ZEdGeWRHbHVaeUIxY0M1Y2JpQWdhV1lnS0dselZXNWtaV1pwYm1Wa0tHZHNiMkpoYkM1d2NtOWpaWE56S1NrZ2UxeHVJQ0FnSUhKbGRIVnliaUJtZFc1amRHbHZiaWdwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUJsZUhCdmNuUnpMbVJsY0hKbFkyRjBaU2htYml3Z2JYTm5LUzVoY0hCc2VTaDBhR2x6TENCaGNtZDFiV1Z1ZEhNcE8xeHVJQ0FnSUgwN1hHNGdJSDFjYmx4dUlDQnBaaUFvY0hKdlkyVnpjeTV1YjBSbGNISmxZMkYwYVc5dUlEMDlQU0IwY25WbEtTQjdYRzRnSUNBZ2NtVjBkWEp1SUdadU8xeHVJQ0I5WEc1Y2JpQWdkbUZ5SUhkaGNtNWxaQ0E5SUdaaGJITmxPMXh1SUNCbWRXNWpkR2x2YmlCa1pYQnlaV05oZEdWa0tDa2dlMXh1SUNBZ0lHbG1JQ2doZDJGeWJtVmtLU0I3WEc0Z0lDQWdJQ0JwWmlBb2NISnZZMlZ6Y3k1MGFISnZkMFJsY0hKbFkyRjBhVzl1S1NCN1hHNGdJQ0FnSUNBZ0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2lodGMyY3BPMXh1SUNBZ0lDQWdmU0JsYkhObElHbG1JQ2h3Y205alpYTnpMblJ5WVdObFJHVndjbVZqWVhScGIyNHBJSHRjYmlBZ0lDQWdJQ0FnWTI5dWMyOXNaUzUwY21GalpTaHRjMmNwTzF4dUlDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnWTI5dWMyOXNaUzVsY25KdmNpaHRjMmNwTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJQ0FnZDJGeWJtVmtJRDBnZEhKMVpUdGNiaUFnSUNCOVhHNGdJQ0FnY21WMGRYSnVJR1p1TG1Gd2NHeDVLSFJvYVhNc0lHRnlaM1Z0Wlc1MGN5azdYRzRnSUgxY2JseHVJQ0J5WlhSMWNtNGdaR1Z3Y21WallYUmxaRHRjYm4wN1hHNWNibHh1ZG1GeUlHUmxZblZuY3lBOUlIdDlPMXh1ZG1GeUlHUmxZblZuUlc1MmFYSnZianRjYm1WNGNHOXlkSE11WkdWaWRXZHNiMmNnUFNCbWRXNWpkR2x2YmloelpYUXBJSHRjYmlBZ2FXWWdLR2x6Vlc1a1pXWnBibVZrS0dSbFluVm5SVzUyYVhKdmJpa3BYRzRnSUNBZ1pHVmlkV2RGYm5acGNtOXVJRDBnY0hKdlkyVnpjeTVsYm5ZdVRrOUVSVjlFUlVKVlJ5QjhmQ0FuSnp0Y2JpQWdjMlYwSUQwZ2MyVjBMblJ2VlhCd1pYSkRZWE5sS0NrN1hHNGdJR2xtSUNnaFpHVmlkV2R6VzNObGRGMHBJSHRjYmlBZ0lDQnBaaUFvYm1WM0lGSmxaMFY0Y0NnblhGeGNYR0luSUNzZ2MyVjBJQ3NnSjF4Y1hGeGlKeXdnSjJrbktTNTBaWE4wS0dSbFluVm5SVzUyYVhKdmJpa3BJSHRjYmlBZ0lDQWdJSFpoY2lCd2FXUWdQU0J3Y205alpYTnpMbkJwWkR0Y2JpQWdJQ0FnSUdSbFluVm5jMXR6WlhSZElEMGdablZ1WTNScGIyNG9LU0I3WEc0Z0lDQWdJQ0FnSUhaaGNpQnRjMmNnUFNCbGVIQnZjblJ6TG1admNtMWhkQzVoY0hCc2VTaGxlSEJ2Y25SekxDQmhjbWQxYldWdWRITXBPMXh1SUNBZ0lDQWdJQ0JqYjI1emIyeGxMbVZ5Y205eUtDY2xjeUFsWkRvZ0pYTW5MQ0J6WlhRc0lIQnBaQ3dnYlhObktUdGNiaUFnSUNBZ0lIMDdYRzRnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUdSbFluVm5jMXR6WlhSZElEMGdablZ1WTNScGIyNG9LU0I3ZlR0Y2JpQWdJQ0I5WEc0Z0lIMWNiaUFnY21WMGRYSnVJR1JsWW5WbmMxdHpaWFJkTzF4dWZUdGNibHh1WEc0dktpcGNiaUFxSUVWamFHOXpJSFJvWlNCMllXeDFaU0J2WmlCaElIWmhiSFZsTGlCVWNubHpJSFJ2SUhCeWFXNTBJSFJvWlNCMllXeDFaU0J2ZFhSY2JpQXFJR2x1SUhSb1pTQmlaWE4wSUhkaGVTQndiM056YVdKc1pTQm5hWFpsYmlCMGFHVWdaR2xtWm1WeVpXNTBJSFI1Y0dWekxseHVJQ3BjYmlBcUlFQndZWEpoYlNCN1QySnFaV04wZlNCdlltb2dWR2hsSUc5aWFtVmpkQ0IwYnlCd2NtbHVkQ0J2ZFhRdVhHNGdLaUJBY0dGeVlXMGdlMDlpYW1WamRIMGdiM0IwY3lCUGNIUnBiMjVoYkNCdmNIUnBiMjV6SUc5aWFtVmpkQ0IwYUdGMElHRnNkR1Z5Y3lCMGFHVWdiM1YwY0hWMExseHVJQ292WEc0dktpQnNaV2RoWTNrNklHOWlhaXdnYzJodmQwaHBaR1JsYml3Z1pHVndkR2dzSUdOdmJHOXljeW92WEc1bWRXNWpkR2x2YmlCcGJuTndaV04wS0c5aWFpd2diM0IwY3lrZ2UxeHVJQ0F2THlCa1pXWmhkV3gwSUc5d2RHbHZibk5jYmlBZ2RtRnlJR04wZUNBOUlIdGNiaUFnSUNCelpXVnVPaUJiWFN4Y2JpQWdJQ0J6ZEhsc2FYcGxPaUJ6ZEhsc2FYcGxUbTlEYjJ4dmNseHVJQ0I5TzF4dUlDQXZMeUJzWldkaFkza3VMaTVjYmlBZ2FXWWdLR0Z5WjNWdFpXNTBjeTVzWlc1bmRHZ2dQajBnTXlrZ1kzUjRMbVJsY0hSb0lEMGdZWEpuZFcxbGJuUnpXekpkTzF4dUlDQnBaaUFvWVhKbmRXMWxiblJ6TG14bGJtZDBhQ0ErUFNBMEtTQmpkSGd1WTI5c2IzSnpJRDBnWVhKbmRXMWxiblJ6V3pOZE8xeHVJQ0JwWmlBb2FYTkNiMjlzWldGdUtHOXdkSE1wS1NCN1hHNGdJQ0FnTHk4Z2JHVm5ZV041TGk0dVhHNGdJQ0FnWTNSNExuTm9iM2RJYVdSa1pXNGdQU0J2Y0hSek8xeHVJQ0I5SUdWc2MyVWdhV1lnS0c5d2RITXBJSHRjYmlBZ0lDQXZMeUJuYjNRZ1lXNGdYQ0p2Y0hScGIyNXpYQ0lnYjJKcVpXTjBYRzRnSUNBZ1pYaHdiM0owY3k1ZlpYaDBaVzVrS0dOMGVDd2diM0IwY3lrN1hHNGdJSDFjYmlBZ0x5OGdjMlYwSUdSbFptRjFiSFFnYjNCMGFXOXVjMXh1SUNCcFppQW9hWE5WYm1SbFptbHVaV1FvWTNSNExuTm9iM2RJYVdSa1pXNHBLU0JqZEhndWMyaHZkMGhwWkdSbGJpQTlJR1poYkhObE8xeHVJQ0JwWmlBb2FYTlZibVJsWm1sdVpXUW9ZM1I0TG1SbGNIUm9LU2tnWTNSNExtUmxjSFJvSUQwZ01qdGNiaUFnYVdZZ0tHbHpWVzVrWldacGJtVmtLR04wZUM1amIyeHZjbk1wS1NCamRIZ3VZMjlzYjNKeklEMGdabUZzYzJVN1hHNGdJR2xtSUNocGMxVnVaR1ZtYVc1bFpDaGpkSGd1WTNWemRHOXRTVzV6Y0dWamRDa3BJR04wZUM1amRYTjBiMjFKYm5Od1pXTjBJRDBnZEhKMVpUdGNiaUFnYVdZZ0tHTjBlQzVqYjJ4dmNuTXBJR04wZUM1emRIbHNhWHBsSUQwZ2MzUjViR2w2WlZkcGRHaERiMnh2Y2p0Y2JpQWdjbVYwZFhKdUlHWnZjbTFoZEZaaGJIVmxLR04wZUN3Z2IySnFMQ0JqZEhndVpHVndkR2dwTzF4dWZWeHVaWGh3YjNKMGN5NXBibk53WldOMElEMGdhVzV6Y0dWamREdGNibHh1WEc0dkx5Qm9kSFJ3T2k4dlpXNHVkMmxyYVhCbFpHbGhMbTl5Wnk5M2FXdHBMMEZPVTBsZlpYTmpZWEJsWDJOdlpHVWpaM0poY0docFkzTmNibWx1YzNCbFkzUXVZMjlzYjNKeklEMGdlMXh1SUNBblltOXNaQ2NnT2lCYk1Td2dNakpkTEZ4dUlDQW5hWFJoYkdsakp5QTZJRnN6TENBeU0xMHNYRzRnSUNkMWJtUmxjbXhwYm1VbklEb2dXelFzSURJMFhTeGNiaUFnSjJsdWRtVnljMlVuSURvZ1d6Y3NJREkzWFN4Y2JpQWdKM2RvYVhSbEp5QTZJRnN6Tnl3Z016bGRMRnh1SUNBblozSmxlU2NnT2lCYk9UQXNJRE01WFN4Y2JpQWdKMkpzWVdOckp5QTZJRnN6TUN3Z016bGRMRnh1SUNBbllteDFaU2NnT2lCYk16UXNJRE01WFN4Y2JpQWdKMk41WVc0bklEb2dXek0yTENBek9WMHNYRzRnSUNkbmNtVmxiaWNnT2lCYk16SXNJRE01WFN4Y2JpQWdKMjFoWjJWdWRHRW5JRG9nV3pNMUxDQXpPVjBzWEc0Z0lDZHlaV1FuSURvZ1d6TXhMQ0F6T1Ywc1hHNGdJQ2Q1Wld4c2IzY25JRG9nV3pNekxDQXpPVjFjYm4wN1hHNWNiaTh2SUVSdmJpZDBJSFZ6WlNBbllteDFaU2NnYm05MElIWnBjMmxpYkdVZ2IyNGdZMjFrTG1WNFpWeHVhVzV6Y0dWamRDNXpkSGxzWlhNZ1BTQjdYRzRnSUNkemNHVmphV0ZzSnpvZ0oyTjVZVzRuTEZ4dUlDQW5iblZ0WW1WeUp6b2dKM2xsYkd4dmR5Y3NYRzRnSUNkaWIyOXNaV0Z1SnpvZ0ozbGxiR3h2ZHljc1hHNGdJQ2QxYm1SbFptbHVaV1FuT2lBblozSmxlU2NzWEc0Z0lDZHVkV3hzSnpvZ0oySnZiR1FuTEZ4dUlDQW5jM1J5YVc1bkp6b2dKMmR5WldWdUp5eGNiaUFnSjJSaGRHVW5PaUFuYldGblpXNTBZU2NzWEc0Z0lDOHZJRndpYm1GdFpWd2lPaUJwYm5SbGJuUnBiMjVoYkd4NUlHNXZkQ0J6ZEhsc2FXNW5YRzRnSUNkeVpXZGxlSEFuT2lBbmNtVmtKMXh1ZlR0Y2JseHVYRzVtZFc1amRHbHZiaUJ6ZEhsc2FYcGxWMmwwYUVOdmJHOXlLSE4wY2l3Z2MzUjViR1ZVZVhCbEtTQjdYRzRnSUhaaGNpQnpkSGxzWlNBOUlHbHVjM0JsWTNRdWMzUjViR1Z6VzNOMGVXeGxWSGx3WlYwN1hHNWNiaUFnYVdZZ0tITjBlV3hsS1NCN1hHNGdJQ0FnY21WMGRYSnVJQ2RjWEhVd01ERmlXeWNnS3lCcGJuTndaV04wTG1OdmJHOXljMXR6ZEhsc1pWMWJNRjBnS3lBbmJTY2dLeUJ6ZEhJZ0sxeHVJQ0FnSUNBZ0lDQWdJQ0FuWEZ4MU1EQXhZbHNuSUNzZ2FXNXpjR1ZqZEM1amIyeHZjbk5iYzNSNWJHVmRXekZkSUNzZ0oyMG5PMXh1SUNCOUlHVnNjMlVnZTF4dUlDQWdJSEpsZEhWeWJpQnpkSEk3WEc0Z0lIMWNibjFjYmx4dVhHNW1kVzVqZEdsdmJpQnpkSGxzYVhwbFRtOURiMnh2Y2loemRISXNJSE4wZVd4bFZIbHdaU2tnZTF4dUlDQnlaWFIxY200Z2MzUnlPMXh1ZlZ4dVhHNWNibVoxYm1OMGFXOXVJR0Z5Y21GNVZHOUlZWE5vS0dGeWNtRjVLU0I3WEc0Z0lIWmhjaUJvWVhOb0lEMGdlMzA3WEc1Y2JpQWdZWEp5WVhrdVptOXlSV0ZqYUNobWRXNWpkR2x2YmloMllXd3NJR2xrZUNrZ2UxeHVJQ0FnSUdoaGMyaGJkbUZzWFNBOUlIUnlkV1U3WEc0Z0lIMHBPMXh1WEc0Z0lISmxkSFZ5YmlCb1lYTm9PMXh1ZlZ4dVhHNWNibVoxYm1OMGFXOXVJR1p2Y20xaGRGWmhiSFZsS0dOMGVDd2dkbUZzZFdVc0lISmxZM1Z5YzJWVWFXMWxjeWtnZTF4dUlDQXZMeUJRY205MmFXUmxJR0VnYUc5dmF5Qm1iM0lnZFhObGNpMXpjR1ZqYVdacFpXUWdhVzV6Y0dWamRDQm1kVzVqZEdsdmJuTXVYRzRnSUM4dklFTm9aV05ySUhSb1lYUWdkbUZzZFdVZ2FYTWdZVzRnYjJKcVpXTjBJSGRwZEdnZ1lXNGdhVzV6Y0dWamRDQm1kVzVqZEdsdmJpQnZiaUJwZEZ4dUlDQnBaaUFvWTNSNExtTjFjM1J2YlVsdWMzQmxZM1FnSmlaY2JpQWdJQ0FnSUhaaGJIVmxJQ1ltWEc0Z0lDQWdJQ0JwYzBaMWJtTjBhVzl1S0haaGJIVmxMbWx1YzNCbFkzUXBJQ1ltWEc0Z0lDQWdJQ0F2THlCR2FXeDBaWElnYjNWMElIUm9aU0IxZEdsc0lHMXZaSFZzWlN3Z2FYUW5jeUJwYm5Od1pXTjBJR1oxYm1OMGFXOXVJR2x6SUhOd1pXTnBZV3hjYmlBZ0lDQWdJSFpoYkhWbExtbHVjM0JsWTNRZ0lUMDlJR1Y0Y0c5eWRITXVhVzV6Y0dWamRDQW1KbHh1SUNBZ0lDQWdMeThnUVd4emJ5Qm1hV3gwWlhJZ2IzVjBJR0Z1ZVNCd2NtOTBiM1I1Y0dVZ2IySnFaV04wY3lCMWMybHVaeUIwYUdVZ1kybHlZM1ZzWVhJZ1kyaGxZMnN1WEc0Z0lDQWdJQ0FoS0haaGJIVmxMbU52Ym5OMGNuVmpkRzl5SUNZbUlIWmhiSFZsTG1OdmJuTjBjblZqZEc5eUxuQnliM1J2ZEhsd1pTQTlQVDBnZG1Gc2RXVXBLU0I3WEc0Z0lDQWdkbUZ5SUhKbGRDQTlJSFpoYkhWbExtbHVjM0JsWTNRb2NtVmpkWEp6WlZScGJXVnpMQ0JqZEhncE8xeHVJQ0FnSUdsbUlDZ2hhWE5UZEhKcGJtY29jbVYwS1NrZ2UxeHVJQ0FnSUNBZ2NtVjBJRDBnWm05eWJXRjBWbUZzZFdVb1kzUjRMQ0J5WlhRc0lISmxZM1Z5YzJWVWFXMWxjeWs3WEc0Z0lDQWdmVnh1SUNBZ0lISmxkSFZ5YmlCeVpYUTdYRzRnSUgxY2JseHVJQ0F2THlCUWNtbHRhWFJwZG1VZ2RIbHdaWE1nWTJGdWJtOTBJR2hoZG1VZ2NISnZjR1Z5ZEdsbGMxeHVJQ0IyWVhJZ2NISnBiV2wwYVhabElEMGdabTl5YldGMFVISnBiV2wwYVhabEtHTjBlQ3dnZG1Gc2RXVXBPMXh1SUNCcFppQW9jSEpwYldsMGFYWmxLU0I3WEc0Z0lDQWdjbVYwZFhKdUlIQnlhVzFwZEdsMlpUdGNiaUFnZlZ4dVhHNGdJQzh2SUV4dmIyc2dkWEFnZEdobElHdGxlWE1nYjJZZ2RHaGxJRzlpYW1WamRDNWNiaUFnZG1GeUlHdGxlWE1nUFNCUFltcGxZM1F1YTJWNWN5aDJZV3gxWlNrN1hHNGdJSFpoY2lCMmFYTnBZbXhsUzJWNWN5QTlJR0Z5Y21GNVZHOUlZWE5vS0d0bGVYTXBPMXh1WEc0Z0lHbG1JQ2hqZEhndWMyaHZkMGhwWkdSbGJpa2dlMXh1SUNBZ0lHdGxlWE1nUFNCUFltcGxZM1F1WjJWMFQzZHVVSEp2Y0dWeWRIbE9ZVzFsY3loMllXeDFaU2s3WEc0Z0lIMWNibHh1SUNBdkx5QkpSU0JrYjJWemJpZDBJRzFoYTJVZ1pYSnliM0lnWm1sbGJHUnpJRzV2YmkxbGJuVnRaWEpoWW14bFhHNGdJQzh2SUdoMGRIQTZMeTl0YzJSdUxtMXBZM0p2YzI5bWRDNWpiMjB2Wlc0dGRYTXZiR2xpY21GeWVTOXBaUzlrZDNjMU1uTmlkQ2gyUFhaekxqazBLUzVoYzNCNFhHNGdJR2xtSUNocGMwVnljbTl5S0haaGJIVmxLVnh1SUNBZ0lDQWdKaVlnS0d0bGVYTXVhVzVrWlhoUFppZ25iV1Z6YzJGblpTY3BJRDQ5SURBZ2ZId2dhMlY1Y3k1cGJtUmxlRTltS0Nka1pYTmpjbWx3ZEdsdmJpY3BJRDQ5SURBcEtTQjdYRzRnSUNBZ2NtVjBkWEp1SUdadmNtMWhkRVZ5Y205eUtIWmhiSFZsS1R0Y2JpQWdmVnh1WEc0Z0lDOHZJRk52YldVZ2RIbHdaU0J2WmlCdlltcGxZM1FnZDJsMGFHOTFkQ0J3Y205d1pYSjBhV1Z6SUdOaGJpQmlaU0J6YUc5eWRHTjFkSFJsWkM1Y2JpQWdhV1lnS0d0bGVYTXViR1Z1WjNSb0lEMDlQU0F3S1NCN1hHNGdJQ0FnYVdZZ0tHbHpSblZ1WTNScGIyNG9kbUZzZFdVcEtTQjdYRzRnSUNBZ0lDQjJZWElnYm1GdFpTQTlJSFpoYkhWbExtNWhiV1VnUHlBbk9pQW5JQ3NnZG1Gc2RXVXVibUZ0WlNBNklDY25PMXh1SUNBZ0lDQWdjbVYwZFhKdUlHTjBlQzV6ZEhsc2FYcGxLQ2RiUm5WdVkzUnBiMjRuSUNzZ2JtRnRaU0FySUNkZEp5d2dKM053WldOcFlXd25LVHRjYmlBZ0lDQjlYRzRnSUNBZ2FXWWdLR2x6VW1WblJYaHdLSFpoYkhWbEtTa2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlHTjBlQzV6ZEhsc2FYcGxLRkpsWjBWNGNDNXdjbTkwYjNSNWNHVXVkRzlUZEhKcGJtY3VZMkZzYkNoMllXeDFaU2tzSUNkeVpXZGxlSEFuS1R0Y2JpQWdJQ0I5WEc0Z0lDQWdhV1lnS0dselJHRjBaU2gyWVd4MVpTa3BJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQmpkSGd1YzNSNWJHbDZaU2hFWVhSbExuQnliM1J2ZEhsd1pTNTBiMU4wY21sdVp5NWpZV3hzS0haaGJIVmxLU3dnSjJSaGRHVW5LVHRjYmlBZ0lDQjlYRzRnSUNBZ2FXWWdLR2x6UlhKeWIzSW9kbUZzZFdVcEtTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z1ptOXliV0YwUlhKeWIzSW9kbUZzZFdVcE8xeHVJQ0FnSUgxY2JpQWdmVnh1WEc0Z0lIWmhjaUJpWVhObElEMGdKeWNzSUdGeWNtRjVJRDBnWm1Gc2MyVXNJR0p5WVdObGN5QTlJRnNuZXljc0lDZDlKMTA3WEc1Y2JpQWdMeThnVFdGclpTQkJjbkpoZVNCellYa2dkR2hoZENCMGFHVjVJR0Z5WlNCQmNuSmhlVnh1SUNCcFppQW9hWE5CY25KaGVTaDJZV3gxWlNrcElIdGNiaUFnSUNCaGNuSmhlU0E5SUhSeWRXVTdYRzRnSUNBZ1luSmhZMlZ6SUQwZ1d5ZGJKeXdnSjEwblhUdGNiaUFnZlZ4dVhHNGdJQzh2SUUxaGEyVWdablZ1WTNScGIyNXpJSE5oZVNCMGFHRjBJSFJvWlhrZ1lYSmxJR1oxYm1OMGFXOXVjMXh1SUNCcFppQW9hWE5HZFc1amRHbHZiaWgyWVd4MVpTa3BJSHRjYmlBZ0lDQjJZWElnYmlBOUlIWmhiSFZsTG01aGJXVWdQeUFuT2lBbklDc2dkbUZzZFdVdWJtRnRaU0E2SUNjbk8xeHVJQ0FnSUdKaGMyVWdQU0FuSUZ0R2RXNWpkR2x2YmljZ0t5QnVJQ3NnSjEwbk8xeHVJQ0I5WEc1Y2JpQWdMeThnVFdGclpTQlNaV2RGZUhCeklITmhlU0IwYUdGMElIUm9aWGtnWVhKbElGSmxaMFY0Y0hOY2JpQWdhV1lnS0dselVtVm5SWGh3S0haaGJIVmxLU2tnZTF4dUlDQWdJR0poYzJVZ1BTQW5JQ2NnS3lCU1pXZEZlSEF1Y0hKdmRHOTBlWEJsTG5SdlUzUnlhVzVuTG1OaGJHd29kbUZzZFdVcE8xeHVJQ0I5WEc1Y2JpQWdMeThnVFdGclpTQmtZWFJsY3lCM2FYUm9JSEJ5YjNCbGNuUnBaWE1nWm1seWMzUWdjMkY1SUhSb1pTQmtZWFJsWEc0Z0lHbG1JQ2hwYzBSaGRHVW9kbUZzZFdVcEtTQjdYRzRnSUNBZ1ltRnpaU0E5SUNjZ0p5QXJJRVJoZEdVdWNISnZkRzkwZVhCbExuUnZWVlJEVTNSeWFXNW5MbU5oYkd3b2RtRnNkV1VwTzF4dUlDQjlYRzVjYmlBZ0x5OGdUV0ZyWlNCbGNuSnZjaUIzYVhSb0lHMWxjM05oWjJVZ1ptbHljM1FnYzJGNUlIUm9aU0JsY25KdmNseHVJQ0JwWmlBb2FYTkZjbkp2Y2loMllXeDFaU2twSUh0Y2JpQWdJQ0JpWVhObElEMGdKeUFuSUNzZ1ptOXliV0YwUlhKeWIzSW9kbUZzZFdVcE8xeHVJQ0I5WEc1Y2JpQWdhV1lnS0d0bGVYTXViR1Z1WjNSb0lEMDlQU0F3SUNZbUlDZ2hZWEp5WVhrZ2ZId2dkbUZzZFdVdWJHVnVaM1JvSUQwOUlEQXBLU0I3WEc0Z0lDQWdjbVYwZFhKdUlHSnlZV05sYzFzd1hTQXJJR0poYzJVZ0t5QmljbUZqWlhOYk1WMDdYRzRnSUgxY2JseHVJQ0JwWmlBb2NtVmpkWEp6WlZScGJXVnpJRHdnTUNrZ2UxeHVJQ0FnSUdsbUlDaHBjMUpsWjBWNGNDaDJZV3gxWlNrcElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCamRIZ3VjM1I1YkdsNlpTaFNaV2RGZUhBdWNISnZkRzkwZVhCbExuUnZVM1J5YVc1bkxtTmhiR3dvZG1Gc2RXVXBMQ0FuY21WblpYaHdKeWs3WEc0Z0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCamRIZ3VjM1I1YkdsNlpTZ25XMDlpYW1WamRGMG5MQ0FuYzNCbFkybGhiQ2NwTzF4dUlDQWdJSDFjYmlBZ2ZWeHVYRzRnSUdOMGVDNXpaV1Z1TG5CMWMyZ29kbUZzZFdVcE8xeHVYRzRnSUhaaGNpQnZkWFJ3ZFhRN1hHNGdJR2xtSUNoaGNuSmhlU2tnZTF4dUlDQWdJRzkxZEhCMWRDQTlJR1p2Y20xaGRFRnljbUY1S0dOMGVDd2dkbUZzZFdVc0lISmxZM1Z5YzJWVWFXMWxjeXdnZG1semFXSnNaVXRsZVhNc0lHdGxlWE1wTzF4dUlDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUc5MWRIQjFkQ0E5SUd0bGVYTXViV0Z3S0daMWJtTjBhVzl1S0d0bGVTa2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlHWnZjbTFoZEZCeWIzQmxjblI1S0dOMGVDd2dkbUZzZFdVc0lISmxZM1Z5YzJWVWFXMWxjeXdnZG1semFXSnNaVXRsZVhNc0lHdGxlU3dnWVhKeVlYa3BPMXh1SUNBZ0lIMHBPMXh1SUNCOVhHNWNiaUFnWTNSNExuTmxaVzR1Y0c5d0tDazdYRzVjYmlBZ2NtVjBkWEp1SUhKbFpIVmpaVlJ2VTJsdVoyeGxVM1J5YVc1bktHOTFkSEIxZEN3Z1ltRnpaU3dnWW5KaFkyVnpLVHRjYm4xY2JseHVYRzVtZFc1amRHbHZiaUJtYjNKdFlYUlFjbWx0YVhScGRtVW9ZM1I0TENCMllXeDFaU2tnZTF4dUlDQnBaaUFvYVhOVmJtUmxabWx1WldRb2RtRnNkV1VwS1Z4dUlDQWdJSEpsZEhWeWJpQmpkSGd1YzNSNWJHbDZaU2duZFc1a1pXWnBibVZrSnl3Z0ozVnVaR1ZtYVc1bFpDY3BPMXh1SUNCcFppQW9hWE5UZEhKcGJtY29kbUZzZFdVcEtTQjdYRzRnSUNBZ2RtRnlJSE5wYlhCc1pTQTlJQ2RjWENjbklDc2dTbE5QVGk1emRISnBibWRwWm5rb2RtRnNkV1VwTG5KbGNHeGhZMlVvTDE1Y0lueGNJaVF2Wnl3Z0p5Y3BYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F1Y21Wd2JHRmpaU2d2Snk5bkxDQmNJbHhjWEZ3blhDSXBYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F1Y21Wd2JHRmpaU2d2WEZ4Y1hGd2lMMmNzSUNkY0lpY3BJQ3NnSjF4Y0p5YzdYRzRnSUNBZ2NtVjBkWEp1SUdOMGVDNXpkSGxzYVhwbEtITnBiWEJzWlN3Z0ozTjBjbWx1WnljcE8xeHVJQ0I5WEc0Z0lHbG1JQ2hwYzA1MWJXSmxjaWgyWVd4MVpTa3BYRzRnSUNBZ2NtVjBkWEp1SUdOMGVDNXpkSGxzYVhwbEtDY25JQ3NnZG1Gc2RXVXNJQ2R1ZFcxaVpYSW5LVHRjYmlBZ2FXWWdLR2x6UW05dmJHVmhiaWgyWVd4MVpTa3BYRzRnSUNBZ2NtVjBkWEp1SUdOMGVDNXpkSGxzYVhwbEtDY25JQ3NnZG1Gc2RXVXNJQ2RpYjI5c1pXRnVKeWs3WEc0Z0lDOHZJRVp2Y2lCemIyMWxJSEpsWVhOdmJpQjBlWEJsYjJZZ2JuVnNiQ0JwY3lCY0ltOWlhbVZqZEZ3aUxDQnpieUJ6Y0dWamFXRnNJR05oYzJVZ2FHVnlaUzVjYmlBZ2FXWWdLR2x6VG5Wc2JDaDJZV3gxWlNrcFhHNGdJQ0FnY21WMGRYSnVJR04wZUM1emRIbHNhWHBsS0NkdWRXeHNKeXdnSjI1MWJHd25LVHRjYm4xY2JseHVYRzVtZFc1amRHbHZiaUJtYjNKdFlYUkZjbkp2Y2loMllXeDFaU2tnZTF4dUlDQnlaWFIxY200Z0oxc25JQ3NnUlhKeWIzSXVjSEp2ZEc5MGVYQmxMblJ2VTNSeWFXNW5MbU5oYkd3b2RtRnNkV1VwSUNzZ0oxMG5PMXh1ZlZ4dVhHNWNibVoxYm1OMGFXOXVJR1p2Y20xaGRFRnljbUY1S0dOMGVDd2dkbUZzZFdVc0lISmxZM1Z5YzJWVWFXMWxjeXdnZG1semFXSnNaVXRsZVhNc0lHdGxlWE1wSUh0Y2JpQWdkbUZ5SUc5MWRIQjFkQ0E5SUZ0ZE8xeHVJQ0JtYjNJZ0tIWmhjaUJwSUQwZ01Dd2diQ0E5SUhaaGJIVmxMbXhsYm1kMGFEc2dhU0E4SUd3N0lDc3JhU2tnZTF4dUlDQWdJR2xtSUNob1lYTlBkMjVRY205d1pYSjBlU2gyWVd4MVpTd2dVM1J5YVc1bktHa3BLU2tnZTF4dUlDQWdJQ0FnYjNWMGNIVjBMbkIxYzJnb1ptOXliV0YwVUhKdmNHVnlkSGtvWTNSNExDQjJZV3gxWlN3Z2NtVmpkWEp6WlZScGJXVnpMQ0IyYVhOcFlteGxTMlY1Y3l4Y2JpQWdJQ0FnSUNBZ0lDQlRkSEpwYm1jb2FTa3NJSFJ5ZFdVcEtUdGNiaUFnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnYjNWMGNIVjBMbkIxYzJnb0p5Y3BPMXh1SUNBZ0lIMWNiaUFnZlZ4dUlDQnJaWGx6TG1admNrVmhZMmdvWm5WdVkzUnBiMjRvYTJWNUtTQjdYRzRnSUNBZ2FXWWdLQ0ZyWlhrdWJXRjBZMmdvTDE1Y1hHUXJKQzhwS1NCN1hHNGdJQ0FnSUNCdmRYUndkWFF1Y0hWemFDaG1iM0p0WVhSUWNtOXdaWEowZVNoamRIZ3NJSFpoYkhWbExDQnlaV04xY25ObFZHbHRaWE1zSUhacGMybGliR1ZMWlhsekxGeHVJQ0FnSUNBZ0lDQWdJR3RsZVN3Z2RISjFaU2twTzF4dUlDQWdJSDFjYmlBZ2ZTazdYRzRnSUhKbGRIVnliaUJ2ZFhSd2RYUTdYRzU5WEc1Y2JseHVablZ1WTNScGIyNGdabTl5YldGMFVISnZjR1Z5ZEhrb1kzUjRMQ0IyWVd4MVpTd2djbVZqZFhKelpWUnBiV1Z6TENCMmFYTnBZbXhsUzJWNWN5d2dhMlY1TENCaGNuSmhlU2tnZTF4dUlDQjJZWElnYm1GdFpTd2djM1J5TENCa1pYTmpPMXh1SUNCa1pYTmpJRDBnVDJKcVpXTjBMbWRsZEU5M2JsQnliM0JsY25SNVJHVnpZM0pwY0hSdmNpaDJZV3gxWlN3Z2EyVjVLU0I4ZkNCN0lIWmhiSFZsT2lCMllXeDFaVnRyWlhsZElIMDdYRzRnSUdsbUlDaGtaWE5qTG1kbGRDa2dlMXh1SUNBZ0lHbG1JQ2hrWlhOakxuTmxkQ2tnZTF4dUlDQWdJQ0FnYzNSeUlEMGdZM1I0TG5OMGVXeHBlbVVvSjF0SFpYUjBaWEl2VTJWMGRHVnlYU2NzSUNkemNHVmphV0ZzSnlrN1hHNGdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJSE4wY2lBOUlHTjBlQzV6ZEhsc2FYcGxLQ2RiUjJWMGRHVnlYU2NzSUNkemNHVmphV0ZzSnlrN1hHNGdJQ0FnZlZ4dUlDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUdsbUlDaGtaWE5qTG5ObGRDa2dlMXh1SUNBZ0lDQWdjM1J5SUQwZ1kzUjRMbk4wZVd4cGVtVW9KMXRUWlhSMFpYSmRKeXdnSjNOd1pXTnBZV3duS1R0Y2JpQWdJQ0I5WEc0Z0lIMWNiaUFnYVdZZ0tDRm9ZWE5QZDI1UWNtOXdaWEowZVNoMmFYTnBZbXhsUzJWNWN5d2dhMlY1S1NrZ2UxeHVJQ0FnSUc1aGJXVWdQU0FuV3ljZ0t5QnJaWGtnS3lBblhTYzdYRzRnSUgxY2JpQWdhV1lnS0NGemRISXBJSHRjYmlBZ0lDQnBaaUFvWTNSNExuTmxaVzR1YVc1a1pYaFBaaWhrWlhOakxuWmhiSFZsS1NBOElEQXBJSHRjYmlBZ0lDQWdJR2xtSUNocGMwNTFiR3dvY21WamRYSnpaVlJwYldWektTa2dlMXh1SUNBZ0lDQWdJQ0J6ZEhJZ1BTQm1iM0p0WVhSV1lXeDFaU2hqZEhnc0lHUmxjMk11ZG1Gc2RXVXNJRzUxYkd3cE8xeHVJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ2MzUnlJRDBnWm05eWJXRjBWbUZzZFdVb1kzUjRMQ0JrWlhOakxuWmhiSFZsTENCeVpXTjFjbk5sVkdsdFpYTWdMU0F4S1R0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0FnSUdsbUlDaHpkSEl1YVc1a1pYaFBaaWduWEZ4dUp5a2dQaUF0TVNrZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvWVhKeVlYa3BJSHRjYmlBZ0lDQWdJQ0FnSUNCemRISWdQU0J6ZEhJdWMzQnNhWFFvSjF4Y2JpY3BMbTFoY0NobWRXNWpkR2x2Ymloc2FXNWxLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z0p5QWdKeUFySUd4cGJtVTdYRzRnSUNBZ0lDQWdJQ0FnZlNrdWFtOXBiaWduWEZ4dUp5a3VjM1ZpYzNSeUtESXBPMXh1SUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUhOMGNpQTlJQ2RjWEc0bklDc2djM1J5TG5Od2JHbDBLQ2RjWEc0bktTNXRZWEFvWm5WdVkzUnBiMjRvYkdsdVpTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUNjZ0lDQW5JQ3NnYkdsdVpUdGNiaUFnSUNBZ0lDQWdJQ0I5S1M1cWIybHVLQ2RjWEc0bktUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdmVnh1SUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNCemRISWdQU0JqZEhndWMzUjViR2w2WlNnblcwTnBjbU4xYkdGeVhTY3NJQ2R6Y0dWamFXRnNKeWs3WEc0Z0lDQWdmVnh1SUNCOVhHNGdJR2xtSUNocGMxVnVaR1ZtYVc1bFpDaHVZVzFsS1NrZ2UxeHVJQ0FnSUdsbUlDaGhjbkpoZVNBbUppQnJaWGt1YldGMFkyZ29MMTVjWEdRckpDOHBLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdjM1J5TzF4dUlDQWdJSDFjYmlBZ0lDQnVZVzFsSUQwZ1NsTlBUaTV6ZEhKcGJtZHBabmtvSnljZ0t5QnJaWGtwTzF4dUlDQWdJR2xtSUNodVlXMWxMbTFoZEdOb0tDOWVYQ0lvVzJFdGVrRXRXbDlkVzJFdGVrRXRXbDh3TFRsZEtpbGNJaVF2S1NrZ2UxeHVJQ0FnSUNBZ2JtRnRaU0E5SUc1aGJXVXVjM1ZpYzNSeUtERXNJRzVoYldVdWJHVnVaM1JvSUMwZ01pazdYRzRnSUNBZ0lDQnVZVzFsSUQwZ1kzUjRMbk4wZVd4cGVtVW9ibUZ0WlN3Z0oyNWhiV1VuS1R0Y2JpQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdibUZ0WlNBOUlHNWhiV1V1Y21Wd2JHRmpaU2d2Snk5bkxDQmNJbHhjWEZ3blhDSXBYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzV5WlhCc1lXTmxLQzljWEZ4Y1hDSXZaeXdnSjF3aUp5bGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMbkpsY0d4aFkyVW9MeWhlWENKOFhDSWtLUzluTENCY0lpZGNJaWs3WEc0Z0lDQWdJQ0J1WVcxbElEMGdZM1I0TG5OMGVXeHBlbVVvYm1GdFpTd2dKM04wY21sdVp5Y3BPMXh1SUNBZ0lIMWNiaUFnZlZ4dVhHNGdJSEpsZEhWeWJpQnVZVzFsSUNzZ0p6b2dKeUFySUhOMGNqdGNibjFjYmx4dVhHNW1kVzVqZEdsdmJpQnlaV1IxWTJWVWIxTnBibWRzWlZOMGNtbHVaeWh2ZFhSd2RYUXNJR0poYzJVc0lHSnlZV05sY3lrZ2UxeHVJQ0IyWVhJZ2JuVnRUR2x1WlhORmMzUWdQU0F3TzF4dUlDQjJZWElnYkdWdVozUm9JRDBnYjNWMGNIVjBMbkpsWkhWalpTaG1kVzVqZEdsdmJpaHdjbVYyTENCamRYSXBJSHRjYmlBZ0lDQnVkVzFNYVc1bGMwVnpkQ3NyTzF4dUlDQWdJR2xtSUNoamRYSXVhVzVrWlhoUFppZ25YRnh1SnlrZ1BqMGdNQ2tnYm5WdFRHbHVaWE5GYzNRckt6dGNiaUFnSUNCeVpYUjFjbTRnY0hKbGRpQXJJR04xY2k1eVpYQnNZV05sS0M5Y1hIVXdNREZpWEZ4YlhGeGtYRnhrUDIwdlp5d2dKeWNwTG14bGJtZDBhQ0FySURFN1hHNGdJSDBzSURBcE8xeHVYRzRnSUdsbUlDaHNaVzVuZEdnZ1BpQTJNQ2tnZTF4dUlDQWdJSEpsZEhWeWJpQmljbUZqWlhOYk1GMGdLMXh1SUNBZ0lDQWdJQ0FnSUNBb1ltRnpaU0E5UFQwZ0p5Y2dQeUFuSnlBNklHSmhjMlVnS3lBblhGeHVJQ2NwSUN0Y2JpQWdJQ0FnSUNBZ0lDQWdKeUFuSUN0Y2JpQWdJQ0FnSUNBZ0lDQWdiM1YwY0hWMExtcHZhVzRvSnl4Y1hHNGdJQ2NwSUN0Y2JpQWdJQ0FnSUNBZ0lDQWdKeUFuSUN0Y2JpQWdJQ0FnSUNBZ0lDQWdZbkpoWTJWeld6RmRPMXh1SUNCOVhHNWNiaUFnY21WMGRYSnVJR0p5WVdObGMxc3dYU0FySUdKaGMyVWdLeUFuSUNjZ0t5QnZkWFJ3ZFhRdWFtOXBiaWduTENBbktTQXJJQ2NnSnlBcklHSnlZV05sYzFzeFhUdGNibjFjYmx4dVhHNHZMeUJPVDFSRk9pQlVhR1Z6WlNCMGVYQmxJR05vWldOcmFXNW5JR1oxYm1OMGFXOXVjeUJwYm5SbGJuUnBiMjVoYkd4NUlHUnZiaWQwSUhWelpTQmdhVzV6ZEdGdVkyVnZabUJjYmk4dklHSmxZMkYxYzJVZ2FYUWdhWE1nWm5KaFoybHNaU0JoYm1RZ1kyRnVJR0psSUdWaGMybHNlU0JtWVd0bFpDQjNhWFJvSUdCUFltcGxZM1F1WTNKbFlYUmxLQ2xnTGx4dVpuVnVZM1JwYjI0Z2FYTkJjbkpoZVNoaGNpa2dlMXh1SUNCeVpYUjFjbTRnUVhKeVlYa3VhWE5CY25KaGVTaGhjaWs3WEc1OVhHNWxlSEJ2Y25SekxtbHpRWEp5WVhrZ1BTQnBjMEZ5Y21GNU8xeHVYRzVtZFc1amRHbHZiaUJwYzBKdmIyeGxZVzRvWVhKbktTQjdYRzRnSUhKbGRIVnliaUIwZVhCbGIyWWdZWEpuSUQwOVBTQW5ZbTl2YkdWaGJpYzdYRzU5WEc1bGVIQnZjblJ6TG1selFtOXZiR1ZoYmlBOUlHbHpRbTl2YkdWaGJqdGNibHh1Wm5WdVkzUnBiMjRnYVhOT2RXeHNLR0Z5WnlrZ2UxeHVJQ0J5WlhSMWNtNGdZWEpuSUQwOVBTQnVkV3hzTzF4dWZWeHVaWGh3YjNKMGN5NXBjMDUxYkd3Z1BTQnBjMDUxYkd3N1hHNWNibVoxYm1OMGFXOXVJR2x6VG5Wc2JFOXlWVzVrWldacGJtVmtLR0Z5WnlrZ2UxeHVJQ0J5WlhSMWNtNGdZWEpuSUQwOUlHNTFiR3c3WEc1OVhHNWxlSEJ2Y25SekxtbHpUblZzYkU5eVZXNWtaV1pwYm1Wa0lEMGdhWE5PZFd4c1QzSlZibVJsWm1sdVpXUTdYRzVjYm1aMWJtTjBhVzl1SUdselRuVnRZbVZ5S0dGeVp5a2dlMXh1SUNCeVpYUjFjbTRnZEhsd1pXOW1JR0Z5WnlBOVBUMGdKMjUxYldKbGNpYzdYRzU5WEc1bGVIQnZjblJ6TG1selRuVnRZbVZ5SUQwZ2FYTk9kVzFpWlhJN1hHNWNibVoxYm1OMGFXOXVJR2x6VTNSeWFXNW5LR0Z5WnlrZ2UxeHVJQ0J5WlhSMWNtNGdkSGx3Wlc5bUlHRnlaeUE5UFQwZ0ozTjBjbWx1WnljN1hHNTlYRzVsZUhCdmNuUnpMbWx6VTNSeWFXNW5JRDBnYVhOVGRISnBibWM3WEc1Y2JtWjFibU4wYVc5dUlHbHpVM2x0WW05c0tHRnlaeWtnZTF4dUlDQnlaWFIxY200Z2RIbHdaVzltSUdGeVp5QTlQVDBnSjNONWJXSnZiQ2M3WEc1OVhHNWxlSEJ2Y25SekxtbHpVM2x0WW05c0lEMGdhWE5UZVcxaWIydzdYRzVjYm1aMWJtTjBhVzl1SUdselZXNWtaV1pwYm1Wa0tHRnlaeWtnZTF4dUlDQnlaWFIxY200Z1lYSm5JRDA5UFNCMmIybGtJREE3WEc1OVhHNWxlSEJ2Y25SekxtbHpWVzVrWldacGJtVmtJRDBnYVhOVmJtUmxabWx1WldRN1hHNWNibVoxYm1OMGFXOXVJR2x6VW1WblJYaHdLSEpsS1NCN1hHNGdJSEpsZEhWeWJpQnBjMDlpYW1WamRDaHlaU2tnSmlZZ2IySnFaV04wVkc5VGRISnBibWNvY21VcElEMDlQU0FuVzI5aWFtVmpkQ0JTWldkRmVIQmRKenRjYm4xY2JtVjRjRzl5ZEhNdWFYTlNaV2RGZUhBZ1BTQnBjMUpsWjBWNGNEdGNibHh1Wm5WdVkzUnBiMjRnYVhOUFltcGxZM1FvWVhKbktTQjdYRzRnSUhKbGRIVnliaUIwZVhCbGIyWWdZWEpuSUQwOVBTQW5iMkpxWldOMEp5QW1KaUJoY21jZ0lUMDlJRzUxYkd3N1hHNTlYRzVsZUhCdmNuUnpMbWx6VDJKcVpXTjBJRDBnYVhOUFltcGxZM1E3WEc1Y2JtWjFibU4wYVc5dUlHbHpSR0YwWlNoa0tTQjdYRzRnSUhKbGRIVnliaUJwYzA5aWFtVmpkQ2hrS1NBbUppQnZZbXBsWTNSVWIxTjBjbWx1Wnloa0tTQTlQVDBnSjF0dlltcGxZM1FnUkdGMFpWMG5PMXh1ZlZ4dVpYaHdiM0owY3k1cGMwUmhkR1VnUFNCcGMwUmhkR1U3WEc1Y2JtWjFibU4wYVc5dUlHbHpSWEp5YjNJb1pTa2dlMXh1SUNCeVpYUjFjbTRnYVhOUFltcGxZM1FvWlNrZ0ppWmNiaUFnSUNBZ0lDaHZZbXBsWTNSVWIxTjBjbWx1WnlobEtTQTlQVDBnSjF0dlltcGxZM1FnUlhKeWIzSmRKeUI4ZkNCbElHbHVjM1JoYm1ObGIyWWdSWEp5YjNJcE8xeHVmVnh1Wlhod2IzSjBjeTVwYzBWeWNtOXlJRDBnYVhORmNuSnZjanRjYmx4dVpuVnVZM1JwYjI0Z2FYTkdkVzVqZEdsdmJpaGhjbWNwSUh0Y2JpQWdjbVYwZFhKdUlIUjVjR1Z2WmlCaGNtY2dQVDA5SUNkbWRXNWpkR2x2YmljN1hHNTlYRzVsZUhCdmNuUnpMbWx6Um5WdVkzUnBiMjRnUFNCcGMwWjFibU4wYVc5dU8xeHVYRzVtZFc1amRHbHZiaUJwYzFCeWFXMXBkR2wyWlNoaGNtY3BJSHRjYmlBZ2NtVjBkWEp1SUdGeVp5QTlQVDBnYm5Wc2JDQjhmRnh1SUNBZ0lDQWdJQ0FnZEhsd1pXOW1JR0Z5WnlBOVBUMGdKMkp2YjJ4bFlXNG5JSHg4WEc0Z0lDQWdJQ0FnSUNCMGVYQmxiMllnWVhKbklEMDlQU0FuYm5WdFltVnlKeUI4ZkZ4dUlDQWdJQ0FnSUNBZ2RIbHdaVzltSUdGeVp5QTlQVDBnSjNOMGNtbHVaeWNnZkh4Y2JpQWdJQ0FnSUNBZ0lIUjVjR1Z2WmlCaGNtY2dQVDA5SUNkemVXMWliMnduSUh4OElDQXZMeUJGVXpZZ2MzbHRZbTlzWEc0Z0lDQWdJQ0FnSUNCMGVYQmxiMllnWVhKbklEMDlQU0FuZFc1a1pXWnBibVZrSnp0Y2JuMWNibVY0Y0c5eWRITXVhWE5RY21sdGFYUnBkbVVnUFNCcGMxQnlhVzFwZEdsMlpUdGNibHh1Wlhod2IzSjBjeTVwYzBKMVptWmxjaUE5SUhKbGNYVnBjbVVvSnk0dmMzVndjRzl5ZEM5cGMwSjFabVpsY2ljcE8xeHVYRzVtZFc1amRHbHZiaUJ2WW1wbFkzUlViMU4wY21sdVp5aHZLU0I3WEc0Z0lISmxkSFZ5YmlCUFltcGxZM1F1Y0hKdmRHOTBlWEJsTG5SdlUzUnlhVzVuTG1OaGJHd29ieWs3WEc1OVhHNWNibHh1Wm5WdVkzUnBiMjRnY0dGa0tHNHBJSHRjYmlBZ2NtVjBkWEp1SUc0Z1BDQXhNQ0EvSUNjd0p5QXJJRzR1ZEc5VGRISnBibWNvTVRBcElEb2diaTUwYjFOMGNtbHVaeWd4TUNrN1hHNTlYRzVjYmx4dWRtRnlJRzF2Ym5Sb2N5QTlJRnNuU21GdUp5d2dKMFpsWWljc0lDZE5ZWEluTENBblFYQnlKeXdnSjAxaGVTY3NJQ2RLZFc0bkxDQW5TblZzSnl3Z0owRjFaeWNzSUNkVFpYQW5MRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQW5UMk4wSnl3Z0owNXZkaWNzSUNkRVpXTW5YVHRjYmx4dUx5OGdNallnUm1WaUlERTJPakU1T2pNMFhHNW1kVzVqZEdsdmJpQjBhVzFsYzNSaGJYQW9LU0I3WEc0Z0lIWmhjaUJrSUQwZ2JtVjNJRVJoZEdVb0tUdGNiaUFnZG1GeUlIUnBiV1VnUFNCYmNHRmtLR1F1WjJWMFNHOTFjbk1vS1Nrc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUhCaFpDaGtMbWRsZEUxcGJuVjBaWE1vS1Nrc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUhCaFpDaGtMbWRsZEZObFkyOXVaSE1vS1NsZExtcHZhVzRvSnpvbktUdGNiaUFnY21WMGRYSnVJRnRrTG1kbGRFUmhkR1VvS1N3Z2JXOXVkR2h6VzJRdVoyVjBUVzl1ZEdnb0tWMHNJSFJwYldWZExtcHZhVzRvSnlBbktUdGNibjFjYmx4dVhHNHZMeUJzYjJjZ2FYTWdhblZ6ZENCaElIUm9hVzRnZDNKaGNIQmxjaUIwYnlCamIyNXpiMnhsTG14dlp5QjBhR0YwSUhCeVpYQmxibVJ6SUdFZ2RHbHRaWE4wWVcxd1hHNWxlSEJ2Y25SekxteHZaeUE5SUdaMWJtTjBhVzl1S0NrZ2UxeHVJQ0JqYjI1emIyeGxMbXh2WnlnbkpYTWdMU0FsY3ljc0lIUnBiV1Z6ZEdGdGNDZ3BMQ0JsZUhCdmNuUnpMbVp2Y20xaGRDNWhjSEJzZVNobGVIQnZjblJ6TENCaGNtZDFiV1Z1ZEhNcEtUdGNibjA3WEc1Y2JseHVMeW9xWEc0Z0tpQkpibWhsY21sMElIUm9aU0J3Y205MGIzUjVjR1VnYldWMGFHOWtjeUJtY205dElHOXVaU0JqYjI1emRISjFZM1J2Y2lCcGJuUnZJR0Z1YjNSb1pYSXVYRzRnS2x4dUlDb2dWR2hsSUVaMWJtTjBhVzl1TG5CeWIzUnZkSGx3WlM1cGJtaGxjbWwwY3lCbWNtOXRJR3hoYm1jdWFuTWdjbVYzY21sMGRHVnVJR0Z6SUdFZ2MzUmhibVJoYkc5dVpWeHVJQ29nWm5WdVkzUnBiMjRnS0c1dmRDQnZiaUJHZFc1amRHbHZiaTV3Y205MGIzUjVjR1VwTGlCT1QxUkZPaUJKWmlCMGFHbHpJR1pwYkdVZ2FYTWdkRzhnWW1VZ2JHOWhaR1ZrWEc0Z0tpQmtkWEpwYm1jZ1ltOXZkSE4wY21Gd2NHbHVaeUIwYUdseklHWjFibU4wYVc5dUlHNWxaV1J6SUhSdklHSmxJSEpsZDNKcGRIUmxiaUIxYzJsdVp5QnpiMjFsSUc1aGRHbDJaVnh1SUNvZ1puVnVZM1JwYjI1eklHRnpJSEJ5YjNSdmRIbHdaU0J6WlhSMWNDQjFjMmx1WnlCdWIzSnRZV3dnU21GMllWTmpjbWx3ZENCa2IyVnpJRzV2ZENCM2IzSnJJR0Z6WEc0Z0tpQmxlSEJsWTNSbFpDQmtkWEpwYm1jZ1ltOXZkSE4wY21Gd2NHbHVaeUFvYzJWbElHMXBjbkp2Y2k1cWN5QnBiaUJ5TVRFME9UQXpLUzVjYmlBcVhHNGdLaUJBY0dGeVlXMGdlMloxYm1OMGFXOXVmU0JqZEc5eUlFTnZibk4wY25WamRHOXlJR1oxYm1OMGFXOXVJSGRvYVdOb0lHNWxaV1J6SUhSdklHbHVhR1Z5YVhRZ2RHaGxYRzRnS2lBZ0lDQWdjSEp2ZEc5MGVYQmxMbHh1SUNvZ1FIQmhjbUZ0SUh0bWRXNWpkR2x2Ym4wZ2MzVndaWEpEZEc5eUlFTnZibk4wY25WamRHOXlJR1oxYm1OMGFXOXVJSFJ2SUdsdWFHVnlhWFFnY0hKdmRHOTBlWEJsSUdaeWIyMHVYRzRnS2k5Y2JtVjRjRzl5ZEhNdWFXNW9aWEpwZEhNZ1BTQnlaWEYxYVhKbEtDZHBibWhsY21sMGN5Y3BPMXh1WEc1bGVIQnZjblJ6TGw5bGVIUmxibVFnUFNCbWRXNWpkR2x2YmlodmNtbG5hVzRzSUdGa1pDa2dlMXh1SUNBdkx5QkViMjRuZENCa2J5QmhibmwwYUdsdVp5QnBaaUJoWkdRZ2FYTnVKM1FnWVc0Z2IySnFaV04wWEc0Z0lHbG1JQ2doWVdSa0lIeDhJQ0ZwYzA5aWFtVmpkQ2hoWkdRcEtTQnlaWFIxY200Z2IzSnBaMmx1TzF4dVhHNGdJSFpoY2lCclpYbHpJRDBnVDJKcVpXTjBMbXRsZVhNb1lXUmtLVHRjYmlBZ2RtRnlJR2tnUFNCclpYbHpMbXhsYm1kMGFEdGNiaUFnZDJocGJHVWdLR2t0TFNrZ2UxeHVJQ0FnSUc5eWFXZHBibHRyWlhselcybGRYU0E5SUdGa1pGdHJaWGx6VzJsZFhUdGNiaUFnZlZ4dUlDQnlaWFIxY200Z2IzSnBaMmx1TzF4dWZUdGNibHh1Wm5WdVkzUnBiMjRnYUdGelQzZHVVSEp2Y0dWeWRIa29iMkpxTENCd2NtOXdLU0I3WEc0Z0lISmxkSFZ5YmlCUFltcGxZM1F1Y0hKdmRHOTBlWEJsTG1oaGMwOTNibEJ5YjNCbGNuUjVMbU5oYkd3b2IySnFMQ0J3Y205d0tUdGNibjFjYmx4dVhHNWNiaTh2THk4dkx5OHZMeTh2THk4dkx5OHZMMXh1THk4Z1YwVkNVRUZEU3lCR1QwOVVSVkpjYmk4dklDNHZmaTkxZEdsc0wzVjBhV3d1YW5OY2JpOHZJRzF2WkhWc1pTQnBaQ0E5SURZNFhHNHZMeUJ0YjJSMWJHVWdZMmgxYm10eklEMGdNQ0pkTENKdFlYQndhVzVuY3lJNklrRkJRVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBFaUxDSnpiM1Z5WTJWU2IyOTBJam9pSW4wPVwiKTtcblxuLyoqKi8gfSksXG4vKiA2OSAqL1xuLyogbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9cbi8qIGFsbCBleHBvcnRzIHVzZWQgKi9cbi8qISoqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogZXh0ZXJuYWwgXCJ3aW5kb3dcIiAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuZXZhbChcIihmdW5jdGlvbigpIHsgbW9kdWxlLmV4cG9ydHMgPSB0aGlzW1xcXCJ3aW5kb3dcXFwiXTsgfSgpKTsvLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaU5qa3Vhbk1pTENKemIzVnlZMlZ6SWpwYkluZGxZbkJoWTJzNkx5OHZaWGgwWlhKdVlXd2dYQ0ozYVc1a2IzZGNJajlrT1RkaklsMHNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJaWhtZFc1amRHbHZiaWdwSUhzZ2JXOWtkV3hsTG1WNGNHOXlkSE1nUFNCMGFHbHpXMXdpZDJsdVpHOTNYQ0pkT3lCOUtDa3BPMXh1WEc1Y2JpOHZMeTh2THk4dkx5OHZMeTh2THk4dkwxeHVMeThnVjBWQ1VFRkRTeUJHVDA5VVJWSmNiaTh2SUdWNGRHVnlibUZzSUZ3aWQybHVaRzkzWENKY2JpOHZJRzF2WkhWc1pTQnBaQ0E5SURZNVhHNHZMeUJ0YjJSMWJHVWdZMmgxYm10eklEMGdNQ0pkTENKdFlYQndhVzVuY3lJNklrRkJRVUVpTENKemIzVnlZMlZTYjI5MElqb2lJbjA9XCIpO1xuXG4vKioqLyB9KSxcbi8qIDcwICovXG4vKiBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyogYWxsIGV4cG9ydHMgdXNlZCAqL1xuLyohKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3NyYy9jYXJ0by5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5ldmFsKFwiXFxuXFxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFxcXCJfX2VzTW9kdWxlXFxcIiwge1xcbiAgdmFsdWU6IHRydWVcXG59KTtcXG5cXG52YXIgX2NhcnRvID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgY2FydG8gKi8gMjcpO1xcblxcbnZhciBfY2FydG8yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2FydG8pO1xcblxcbnZhciBfcG9pbnRzID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9iYXNpYy9wb2ludHMgKi8gNzMpO1xcblxcbnZhciBfcG9pbnRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3BvaW50cyk7XFxuXFxudmFyIF9wb2x5Z29ucyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vYmFzaWMvcG9seWdvbnMgKi8gNzQpO1xcblxcbnZhciBfcG9seWdvbnMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcG9seWdvbnMpO1xcblxcbnZhciBfbGluZXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL2Jhc2ljL2xpbmVzICovIDcyKTtcXG5cXG52YXIgX2xpbmVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2xpbmVzKTtcXG5cXG52YXIgX3RleHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL2Jhc2ljL3RleHQgKi8gNzUpO1xcblxcbnZhciBfdGV4dDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF90ZXh0KTtcXG5cXG52YXIgX3RhbmdyYW1SZWZlcmVuY2UgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISB0YW5ncmFtLXJlZmVyZW5jZSAqLyA2Nyk7XFxuXFxudmFyIF90YW5ncmFtUmVmZXJlbmNlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3RhbmdyYW1SZWZlcmVuY2UpO1xcblxcbnZhciBfbWQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISBtZDUgKi8gMzUpO1xcblxcbnZhciBfbWQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfbWQpO1xcblxcbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XFxuXFxudmFyIHJlZiA9IF90YW5ncmFtUmVmZXJlbmNlMi5kZWZhdWx0LmxvYWQoJzEuMC4wJyk7XFxudmFyIENhcnRvQ1NTUmVuZGVyZXIgPSBuZXcgX2NhcnRvMi5kZWZhdWx0LlJlbmRlcmVySlMoe1xcbiAgcmVmZXJlbmNlOiByZWYsXFxuICBzdHJpY3Q6IHRydWVcXG59KTtcXG5cXG52YXIgZXh0cmFjdEZlYXR1cmVzID0gZnVuY3Rpb24gZXh0cmFjdEZlYXR1cmVzKGNjc3MsIGluZGV4KSB7XFxuICB2YXIgbGF5ZXJzID0gQ2FydG9DU1NSZW5kZXJlci5yZW5kZXIoY2NzcykuZ2V0TGF5ZXJzKCksXFxuICAgICAgaWQgPSAoMCwgX21kMi5kZWZhdWx0KShjY3NzKSxcXG4gICAgICB0THkgPSBbXTtcXG5cXG4gIC8vIE5PVEU6IHRoaXMgaXMgd3JvbmcsIHdlIGhhdmUgdG8gc2VwYXJhdGUgdGhlIGxheWVycy5cXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGF5ZXJzLmxlbmd0aDsgaSsrKSB7XFxuICAgIHZhciBseSA9IGxheWVyc1tpXS5zaGFkZXIsXFxuICAgICAgICBkcmF3ID0ge30sXFxuICAgICAgICB0ZXh0dXJlcyA9IHt9LFxcbiAgICAgICAgc3R5bGVzID0ge307XFxuXFxuICAgIE9iamVjdC5hc3NpZ24oZHJhdywgX3BvaW50czIuZGVmYXVsdC5nZXREcmF3KGx5LCBpZCksIF9wb2x5Z29uczIuZGVmYXVsdC5nZXREcmF3KGx5LCBpZCksIF9saW5lczIuZGVmYXVsdC5nZXREcmF3KGx5LCBpZCksIF90ZXh0Mi5kZWZhdWx0LmdldERyYXcobHksIGlkKSk7XFxuXFxuICAgIE9iamVjdC5hc3NpZ24odGV4dHVyZXMsIF9wb2ludHMyLmRlZmF1bHQuZ2V0VGV4dHVyZXMobHkpLCBfcG9seWdvbnMyLmRlZmF1bHQuZ2V0VGV4dHVyZXMobHkpKTtcXG5cXG4gICAgT2JqZWN0LmFzc2lnbihzdHlsZXMsIF9wb2ludHMyLmRlZmF1bHQuZ2V0U3R5bGUobHksIGlkLCBpbmRleCksIF9wb2x5Z29uczIuZGVmYXVsdC5nZXRTdHlsZShseSwgaWQsIGluZGV4KSwgX2xpbmVzMi5kZWZhdWx0LmdldFN0eWxlKGx5LCBpZCwgaW5kZXgpLCBfdGV4dDIuZGVmYXVsdC5nZXRTdHlsZShseSwgaWQsIGluZGV4KSk7XFxuXFxuICAgIHRMeS5wdXNoKHsgdGV4dHVyZXM6IHRleHR1cmVzLCBkcmF3OiBkcmF3LCBzdHlsZXM6IHN0eWxlcywgbmFtZTogbHkuYXR0YWNobWVudCB9KTtcXG4gIH1cXG5cXG4gIHJldHVybiB0THk7XFxufTtcXG5cXG52YXIgQzJUO1xcblxcbmV4cG9ydHMuZGVmYXVsdCA9IEMyVCA9IHtcXG4gIGV4dHJhY3RGZWF0dXJlczogZXh0cmFjdEZlYXR1cmVzXFxufTsvLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaU56QXVhbk1pTENKemIzVnlZMlZ6SWpwYkluZGxZbkJoWTJzNkx5OHZjM0pqTDJOaGNuUnZMbXB6UHpneFlURWlYU3dpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpYVcxd2IzSjBJRU5oY25SdklHWnliMjBnSjJOaGNuUnZKenRjYm1sdGNHOXlkQ0JRYjJsdWRITWdabkp2YlNBbkxpOWlZWE5wWXk5d2IybHVkSE1uTzF4dWFXMXdiM0owSUZCdmJIbG5iMjV6SUdaeWIyMGdKeTR2WW1GemFXTXZjRzlzZVdkdmJuTW5PMXh1YVcxd2IzSjBJRXhwYm1WeklHWnliMjBnSnk0dlltRnphV012YkdsdVpYTW5PMXh1YVcxd2IzSjBJRlJsZUhSUWIybHVkSE1nWm5KdmJTQW5MaTlpWVhOcFl5OTBaWGgwSnp0Y2JtbHRjRzl5ZENCMFlXNW5jbUZ0VW1WbVpYSmxibU5sSUdaeWIyMGdKM1JoYm1keVlXMHRjbVZtWlhKbGJtTmxKenRjYm1sdGNHOXlkQ0JOUkRVZ1puSnZiU0FuYldRMUp6dGNibHh1WTI5dWMzUWdjbVZtSUQwZ2RHRnVaM0poYlZKbFptVnlaVzVqWlM1c2IyRmtLQ2N4TGpBdU1DY3BPMXh1WTI5dWMzUWdRMkZ5ZEc5RFUxTlNaVzVrWlhKbGNpQTlJRzVsZHlCRFlYSjBieTVTWlc1a1pYSmxja3BUS0h0Y2JpQWdjbVZtWlhKbGJtTmxPaUJ5WldZc1hHNGdJSE4wY21samREb2dkSEoxWlZ4dWZTazdYRzVjYm1OdmJuTjBJR1Y0ZEhKaFkzUkdaV0YwZFhKbGN5QTlJR1oxYm1OMGFXOXVJQ2hqWTNOekxDQnBibVJsZUNrZ2UxeHVJQ0JzWlhRZ2JHRjVaWEp6SUQwZ1EyRnlkRzlEVTFOU1pXNWtaWEpsY2k1eVpXNWtaWElvWTJOemN5a3VaMlYwVEdGNVpYSnpLQ2tzWEc0Z0lDQWdJQ0JwWkNBOUlFMUVOU2hqWTNOektTeGNiaUFnSUNBZ0lIUk1lU0E5SUZ0ZE8xeHVYRzRnSUM4dklFNVBWRVU2SUhSb2FYTWdhWE1nZDNKdmJtY3NJSGRsSUdoaGRtVWdkRzhnYzJWd1lYSmhkR1VnZEdobElHeGhlV1Z5Y3k1Y2JpQWdabTl5SUNoMllYSWdhU0E5SURBN0lHa2dQQ0JzWVhsbGNuTXViR1Z1WjNSb095QnBLeXNwSUh0Y2JseDBYSFJzWlhRZ2JIa2dQU0JzWVhsbGNuTmJhVjB1YzJoaFpHVnlMRnh1SUNBZ0lDQWdJQ0JrY21GM0lEMGdlMzBzWEc0Z0lDQWdJQ0FnSUhSbGVIUjFjbVZ6SUQwZ2UzMHNYRzRnSUNBZ0lDQWdJSE4wZVd4bGN5QTlJSHQ5TzF4dVhHNGdJQ0FnVDJKcVpXTjBMbUZ6YzJsbmJpaGNiaUFnSUNBZ0lDQWdaSEpoZHl4Y2JpQWdJQ0FnSUNBZ1VHOXBiblJ6TG1kbGRFUnlZWGNvYkhrc0lHbGtLU3hjYmlBZ0lDQWdJQ0FnVUc5c2VXZHZibk11WjJWMFJISmhkeWhzZVN3Z2FXUXBMRnh1SUNBZ0lDQWdJQ0JNYVc1bGN5NW5aWFJFY21GM0tHeDVMQ0JwWkNrc1hHNGdJQ0FnSUNBZ0lGUmxlSFJRYjJsdWRITXVaMlYwUkhKaGR5aHNlU3dnYVdRcFhHNGdJQ0FnSUNBcE8xeHVYRzRnSUNBZ1QySnFaV04wTG1GemMybG5iaWhjYmlBZ0lDQWdJQ0FnZEdWNGRIVnlaWE1zWEc0Z0lDQWdJQ0FnSUZCdmFXNTBjeTVuWlhSVVpYaDBkWEpsY3loc2VTa3NYRzRnSUNBZ0lDQWdJRkJ2YkhsbmIyNXpMbWRsZEZSbGVIUjFjbVZ6S0d4NUtWeHVJQ0FnSUNBZ0tUdGNibHh1SUNBZ0lFOWlhbVZqZEM1aGMzTnBaMjRvWEc0Z0lDQWdJQ0FnSUhOMGVXeGxjeXhjYmlBZ0lDQWdJQ0FnVUc5cGJuUnpMbWRsZEZOMGVXeGxLR3g1TENCcFpDd2dhVzVrWlhncExGeHVJQ0FnSUNBZ0lDQlFiMng1WjI5dWN5NW5aWFJUZEhsc1pTaHNlU3dnYVdRc0lHbHVaR1Y0S1N4Y2JpQWdJQ0FnSUNBZ1RHbHVaWE11WjJWMFUzUjViR1VvYkhrc0lHbGtMQ0JwYm1SbGVDa3NYRzRnSUNBZ0lDQWdJRlJsZUhSUWIybHVkSE11WjJWMFUzUjViR1VvYkhrc0lHbGtMQ0JwYm1SbGVDbGNiaUFnSUNBZ0lDazdYRzVjYmlBZ0lDQjBUSGt1Y0hWemFDaDdkR1Y0ZEhWeVpYTXNJR1J5WVhjc0lITjBlV3hsY3l3Z2JtRnRaVHBzZVM1aGRIUmhZMmh0Wlc1MGZTazdYRzRnSUgxY2JseHVJQ0J5WlhSMWNtNGdkRXg1TzF4dWZUdGNibHh1ZG1GeUlFTXlWRHRjYmx4dVpYaHdiM0owSUdSbFptRjFiSFFnUXpKVUlEMGdlMXh1SUNCbGVIUnlZV04wUm1WaGRIVnlaWE5jYm4wN1hHNWNibHh1WEc0dkx5QlhSVUpRUVVOTElFWlBUMVJGVWlBdkwxeHVMeThnYzNKakwyTmhjblJ2TG1weklsMHNJbTFoY0hCcGJtZHpJam9pT3pzN096czdRVUZCUVR0QlFVTkJPenM3UVVGQlFUdEJRVU5CT3pzN1FVRkJRVHRCUVVOQk96czdRVUZCUVR0QlFVTkJPenM3UVVGQlFUdEJRVU5CT3pzN1FVRkJRVHRCUVVOQk96czdRVUZCUVR0QlFVTkJPenM3T3p0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJSa0U3UVVGRFFUdEJRVWxCTzBGQlEwRTdRVUZCUVR0QlFVRkJPMEZCUTBFN1FVRkhRVHRCUVVOQk8wRkJRMEU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZEUVR0QlFVbEJPMEZCUTBFN1FVRlBRVHRCUVVOQk8wRkJTMEU3UVVGRFFUdEJRVTlCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlJFRWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUluMD1cIik7XG5cbi8qKiovIH0pLFxuLyogNzEgKi9cbi8qIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKiBhbGwgZXhwb3J0cyB1c2VkICovXG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vfi9hc3NlcnQvYXNzZXJ0LmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbmV2YWwoXCIvKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi8oZnVuY3Rpb24oZ2xvYmFsKSB7XFxuXFxuLy8gY29tcGFyZSBhbmQgaXNCdWZmZXIgdGFrZW4gZnJvbSBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlci9ibG9iLzY4MGU5ZTVlNDg4ZjIyYWFjMjc1OTlhNTdkYzg0NGE2MzE1OTI4ZGQvaW5kZXguanNcXG4vLyBvcmlnaW5hbCBub3RpY2U6XFxuXFxuLyohXFxuICogVGhlIGJ1ZmZlciBtb2R1bGUgZnJvbSBub2RlLmpzLCBmb3IgdGhlIGJyb3dzZXIuXFxuICpcXG4gKiBAYXV0aG9yICAgRmVyb3NzIEFib3VraGFkaWplaCA8ZmVyb3NzQGZlcm9zcy5vcmc+IDxodHRwOi8vZmVyb3NzLm9yZz5cXG4gKiBAbGljZW5zZSAgTUlUXFxuICovXFxuZnVuY3Rpb24gY29tcGFyZShhLCBiKSB7XFxuICBpZiAoYSA9PT0gYikge1xcbiAgICByZXR1cm4gMDtcXG4gIH1cXG5cXG4gIHZhciB4ID0gYS5sZW5ndGg7XFxuICB2YXIgeSA9IGIubGVuZ3RoO1xcblxcbiAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IE1hdGgubWluKHgsIHkpOyBpIDwgbGVuOyArK2kpIHtcXG4gICAgaWYgKGFbaV0gIT09IGJbaV0pIHtcXG4gICAgICB4ID0gYVtpXTtcXG4gICAgICB5ID0gYltpXTtcXG4gICAgICBicmVhaztcXG4gICAgfVxcbiAgfVxcblxcbiAgaWYgKHggPCB5KSB7XFxuICAgIHJldHVybiAtMTtcXG4gIH1cXG4gIGlmICh5IDwgeCkge1xcbiAgICByZXR1cm4gMTtcXG4gIH1cXG4gIHJldHVybiAwO1xcbn1cXG5mdW5jdGlvbiBpc0J1ZmZlcihiKSB7XFxuICBpZiAoZ2xvYmFsLkJ1ZmZlciAmJiB0eXBlb2YgZ2xvYmFsLkJ1ZmZlci5pc0J1ZmZlciA9PT0gJ2Z1bmN0aW9uJykge1xcbiAgICByZXR1cm4gZ2xvYmFsLkJ1ZmZlci5pc0J1ZmZlcihiKTtcXG4gIH1cXG4gIHJldHVybiAhIShiICE9IG51bGwgJiYgYi5faXNCdWZmZXIpO1xcbn1cXG5cXG4vLyBiYXNlZCBvbiBub2RlIGFzc2VydCwgb3JpZ2luYWwgbm90aWNlOlxcblxcbi8vIGh0dHA6Ly93aWtpLmNvbW1vbmpzLm9yZy93aWtpL1VuaXRfVGVzdGluZy8xLjBcXG4vL1xcbi8vIFRISVMgSVMgTk9UIFRFU1RFRCBOT1IgTElLRUxZIFRPIFdPUksgT1VUU0lERSBWOCFcXG4vL1xcbi8vIE9yaWdpbmFsbHkgZnJvbSBuYXJ3aGFsLmpzIChodHRwOi8vbmFyd2hhbGpzLm9yZylcXG4vLyBDb3B5cmlnaHQgKGMpIDIwMDkgVGhvbWFzIFJvYmluc29uIDwyODBub3J0aC5jb20+XFxuLy9cXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XFxuLy8gb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgJ1NvZnR3YXJlJyksIHRvXFxuLy8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGVcXG4vLyByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3JcXG4vLyBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xcbi8vIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XFxuLy9cXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxcbi8vIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxcbi8vXFxuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEICdBUyBJUycsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcXG4vLyBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcXG4vLyBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcXG4vLyBBVVRIT1JTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTlxcbi8vIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT05cXG4vLyBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cXG5cXG52YXIgdXRpbCA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIHV0aWwvICovIDY4KTtcXG52YXIgaGFzT3duID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcXG52YXIgcFNsaWNlID0gQXJyYXkucHJvdG90eXBlLnNsaWNlO1xcbnZhciBmdW5jdGlvbnNIYXZlTmFtZXMgPSAoZnVuY3Rpb24gKCkge1xcbiAgcmV0dXJuIGZ1bmN0aW9uIGZvbygpIHt9Lm5hbWUgPT09ICdmb28nO1xcbn0oKSk7XFxuZnVuY3Rpb24gcFRvU3RyaW5nIChvYmopIHtcXG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwob2JqKTtcXG59XFxuZnVuY3Rpb24gaXNWaWV3KGFycmJ1Zikge1xcbiAgaWYgKGlzQnVmZmVyKGFycmJ1ZikpIHtcXG4gICAgcmV0dXJuIGZhbHNlO1xcbiAgfVxcbiAgaWYgKHR5cGVvZiBnbG9iYWwuQXJyYXlCdWZmZXIgIT09ICdmdW5jdGlvbicpIHtcXG4gICAgcmV0dXJuIGZhbHNlO1xcbiAgfVxcbiAgaWYgKHR5cGVvZiBBcnJheUJ1ZmZlci5pc1ZpZXcgPT09ICdmdW5jdGlvbicpIHtcXG4gICAgcmV0dXJuIEFycmF5QnVmZmVyLmlzVmlldyhhcnJidWYpO1xcbiAgfVxcbiAgaWYgKCFhcnJidWYpIHtcXG4gICAgcmV0dXJuIGZhbHNlO1xcbiAgfVxcbiAgaWYgKGFycmJ1ZiBpbnN0YW5jZW9mIERhdGFWaWV3KSB7XFxuICAgIHJldHVybiB0cnVlO1xcbiAgfVxcbiAgaWYgKGFycmJ1Zi5idWZmZXIgJiYgYXJyYnVmLmJ1ZmZlciBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB7XFxuICAgIHJldHVybiB0cnVlO1xcbiAgfVxcbiAgcmV0dXJuIGZhbHNlO1xcbn1cXG4vLyAxLiBUaGUgYXNzZXJ0IG1vZHVsZSBwcm92aWRlcyBmdW5jdGlvbnMgdGhhdCB0aHJvd1xcbi8vIEFzc2VydGlvbkVycm9yJ3Mgd2hlbiBwYXJ0aWN1bGFyIGNvbmRpdGlvbnMgYXJlIG5vdCBtZXQuIFRoZVxcbi8vIGFzc2VydCBtb2R1bGUgbXVzdCBjb25mb3JtIHRvIHRoZSBmb2xsb3dpbmcgaW50ZXJmYWNlLlxcblxcbnZhciBhc3NlcnQgPSBtb2R1bGUuZXhwb3J0cyA9IG9rO1xcblxcbi8vIDIuIFRoZSBBc3NlcnRpb25FcnJvciBpcyBkZWZpbmVkIGluIGFzc2VydC5cXG4vLyBuZXcgYXNzZXJ0LkFzc2VydGlvbkVycm9yKHsgbWVzc2FnZTogbWVzc2FnZSxcXG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWN0dWFsOiBhY3R1YWwsXFxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cGVjdGVkOiBleHBlY3RlZCB9KVxcblxcbnZhciByZWdleCA9IC9cXFxccypmdW5jdGlvblxcXFxzKyhbXlxcXFwoXFxcXHNdKilcXFxccyovO1xcbi8vIGJhc2VkIG9uIGh0dHBzOi8vZ2l0aHViLmNvbS9samhhcmIvZnVuY3Rpb24ucHJvdG90eXBlLm5hbWUvYmxvYi9hZGVlZWVjOGJmY2M2MDY4YjE4N2Q3ZDlmYjNkNWJiMWQzYTMwODk5L2ltcGxlbWVudGF0aW9uLmpzXFxuZnVuY3Rpb24gZ2V0TmFtZShmdW5jKSB7XFxuICBpZiAoIXV0aWwuaXNGdW5jdGlvbihmdW5jKSkge1xcbiAgICByZXR1cm47XFxuICB9XFxuICBpZiAoZnVuY3Rpb25zSGF2ZU5hbWVzKSB7XFxuICAgIHJldHVybiBmdW5jLm5hbWU7XFxuICB9XFxuICB2YXIgc3RyID0gZnVuYy50b1N0cmluZygpO1xcbiAgdmFyIG1hdGNoID0gc3RyLm1hdGNoKHJlZ2V4KTtcXG4gIHJldHVybiBtYXRjaCAmJiBtYXRjaFsxXTtcXG59XFxuYXNzZXJ0LkFzc2VydGlvbkVycm9yID0gZnVuY3Rpb24gQXNzZXJ0aW9uRXJyb3Iob3B0aW9ucykge1xcbiAgdGhpcy5uYW1lID0gJ0Fzc2VydGlvbkVycm9yJztcXG4gIHRoaXMuYWN0dWFsID0gb3B0aW9ucy5hY3R1YWw7XFxuICB0aGlzLmV4cGVjdGVkID0gb3B0aW9ucy5leHBlY3RlZDtcXG4gIHRoaXMub3BlcmF0b3IgPSBvcHRpb25zLm9wZXJhdG9yO1xcbiAgaWYgKG9wdGlvbnMubWVzc2FnZSkge1xcbiAgICB0aGlzLm1lc3NhZ2UgPSBvcHRpb25zLm1lc3NhZ2U7XFxuICAgIHRoaXMuZ2VuZXJhdGVkTWVzc2FnZSA9IGZhbHNlO1xcbiAgfSBlbHNlIHtcXG4gICAgdGhpcy5tZXNzYWdlID0gZ2V0TWVzc2FnZSh0aGlzKTtcXG4gICAgdGhpcy5nZW5lcmF0ZWRNZXNzYWdlID0gdHJ1ZTtcXG4gIH1cXG4gIHZhciBzdGFja1N0YXJ0RnVuY3Rpb24gPSBvcHRpb25zLnN0YWNrU3RhcnRGdW5jdGlvbiB8fCBmYWlsO1xcbiAgaWYgKEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKSB7XFxuICAgIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKHRoaXMsIHN0YWNrU3RhcnRGdW5jdGlvbik7XFxuICB9IGVsc2Uge1xcbiAgICAvLyBub24gdjggYnJvd3NlcnMgc28gd2UgY2FuIGhhdmUgYSBzdGFja3RyYWNlXFxuICAgIHZhciBlcnIgPSBuZXcgRXJyb3IoKTtcXG4gICAgaWYgKGVyci5zdGFjaykge1xcbiAgICAgIHZhciBvdXQgPSBlcnIuc3RhY2s7XFxuXFxuICAgICAgLy8gdHJ5IHRvIHN0cmlwIHVzZWxlc3MgZnJhbWVzXFxuICAgICAgdmFyIGZuX25hbWUgPSBnZXROYW1lKHN0YWNrU3RhcnRGdW5jdGlvbik7XFxuICAgICAgdmFyIGlkeCA9IG91dC5pbmRleE9mKCdcXFxcbicgKyBmbl9uYW1lKTtcXG4gICAgICBpZiAoaWR4ID49IDApIHtcXG4gICAgICAgIC8vIG9uY2Ugd2UgaGF2ZSBsb2NhdGVkIHRoZSBmdW5jdGlvbiBmcmFtZVxcbiAgICAgICAgLy8gd2UgbmVlZCB0byBzdHJpcCBvdXQgZXZlcnl0aGluZyBiZWZvcmUgaXQgKGFuZCBpdHMgbGluZSlcXG4gICAgICAgIHZhciBuZXh0X2xpbmUgPSBvdXQuaW5kZXhPZignXFxcXG4nLCBpZHggKyAxKTtcXG4gICAgICAgIG91dCA9IG91dC5zdWJzdHJpbmcobmV4dF9saW5lICsgMSk7XFxuICAgICAgfVxcblxcbiAgICAgIHRoaXMuc3RhY2sgPSBvdXQ7XFxuICAgIH1cXG4gIH1cXG59O1xcblxcbi8vIGFzc2VydC5Bc3NlcnRpb25FcnJvciBpbnN0YW5jZW9mIEVycm9yXFxudXRpbC5pbmhlcml0cyhhc3NlcnQuQXNzZXJ0aW9uRXJyb3IsIEVycm9yKTtcXG5cXG5mdW5jdGlvbiB0cnVuY2F0ZShzLCBuKSB7XFxuICBpZiAodHlwZW9mIHMgPT09ICdzdHJpbmcnKSB7XFxuICAgIHJldHVybiBzLmxlbmd0aCA8IG4gPyBzIDogcy5zbGljZSgwLCBuKTtcXG4gIH0gZWxzZSB7XFxuICAgIHJldHVybiBzO1xcbiAgfVxcbn1cXG5mdW5jdGlvbiBpbnNwZWN0KHNvbWV0aGluZykge1xcbiAgaWYgKGZ1bmN0aW9uc0hhdmVOYW1lcyB8fCAhdXRpbC5pc0Z1bmN0aW9uKHNvbWV0aGluZykpIHtcXG4gICAgcmV0dXJuIHV0aWwuaW5zcGVjdChzb21ldGhpbmcpO1xcbiAgfVxcbiAgdmFyIHJhd25hbWUgPSBnZXROYW1lKHNvbWV0aGluZyk7XFxuICB2YXIgbmFtZSA9IHJhd25hbWUgPyAnOiAnICsgcmF3bmFtZSA6ICcnO1xcbiAgcmV0dXJuICdbRnVuY3Rpb24nICsgIG5hbWUgKyAnXSc7XFxufVxcbmZ1bmN0aW9uIGdldE1lc3NhZ2Uoc2VsZikge1xcbiAgcmV0dXJuIHRydW5jYXRlKGluc3BlY3Qoc2VsZi5hY3R1YWwpLCAxMjgpICsgJyAnICtcXG4gICAgICAgICBzZWxmLm9wZXJhdG9yICsgJyAnICtcXG4gICAgICAgICB0cnVuY2F0ZShpbnNwZWN0KHNlbGYuZXhwZWN0ZWQpLCAxMjgpO1xcbn1cXG5cXG4vLyBBdCBwcmVzZW50IG9ubHkgdGhlIHRocmVlIGtleXMgbWVudGlvbmVkIGFib3ZlIGFyZSB1c2VkIGFuZFxcbi8vIHVuZGVyc3Rvb2QgYnkgdGhlIHNwZWMuIEltcGxlbWVudGF0aW9ucyBvciBzdWIgbW9kdWxlcyBjYW4gcGFzc1xcbi8vIG90aGVyIGtleXMgdG8gdGhlIEFzc2VydGlvbkVycm9yJ3MgY29uc3RydWN0b3IgLSB0aGV5IHdpbGwgYmVcXG4vLyBpZ25vcmVkLlxcblxcbi8vIDMuIEFsbCBvZiB0aGUgZm9sbG93aW5nIGZ1bmN0aW9ucyBtdXN0IHRocm93IGFuIEFzc2VydGlvbkVycm9yXFxuLy8gd2hlbiBhIGNvcnJlc3BvbmRpbmcgY29uZGl0aW9uIGlzIG5vdCBtZXQsIHdpdGggYSBtZXNzYWdlIHRoYXRcXG4vLyBtYXkgYmUgdW5kZWZpbmVkIGlmIG5vdCBwcm92aWRlZC4gIEFsbCBhc3NlcnRpb24gbWV0aG9kcyBwcm92aWRlXFxuLy8gYm90aCB0aGUgYWN0dWFsIGFuZCBleHBlY3RlZCB2YWx1ZXMgdG8gdGhlIGFzc2VydGlvbiBlcnJvciBmb3JcXG4vLyBkaXNwbGF5IHB1cnBvc2VzLlxcblxcbmZ1bmN0aW9uIGZhaWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSwgb3BlcmF0b3IsIHN0YWNrU3RhcnRGdW5jdGlvbikge1xcbiAgdGhyb3cgbmV3IGFzc2VydC5Bc3NlcnRpb25FcnJvcih7XFxuICAgIG1lc3NhZ2U6IG1lc3NhZ2UsXFxuICAgIGFjdHVhbDogYWN0dWFsLFxcbiAgICBleHBlY3RlZDogZXhwZWN0ZWQsXFxuICAgIG9wZXJhdG9yOiBvcGVyYXRvcixcXG4gICAgc3RhY2tTdGFydEZ1bmN0aW9uOiBzdGFja1N0YXJ0RnVuY3Rpb25cXG4gIH0pO1xcbn1cXG5cXG4vLyBFWFRFTlNJT04hIGFsbG93cyBmb3Igd2VsbCBiZWhhdmVkIGVycm9ycyBkZWZpbmVkIGVsc2V3aGVyZS5cXG5hc3NlcnQuZmFpbCA9IGZhaWw7XFxuXFxuLy8gNC4gUHVyZSBhc3NlcnRpb24gdGVzdHMgd2hldGhlciBhIHZhbHVlIGlzIHRydXRoeSwgYXMgZGV0ZXJtaW5lZFxcbi8vIGJ5ICEhZ3VhcmQuXFxuLy8gYXNzZXJ0Lm9rKGd1YXJkLCBtZXNzYWdlX29wdCk7XFxuLy8gVGhpcyBzdGF0ZW1lbnQgaXMgZXF1aXZhbGVudCB0byBhc3NlcnQuZXF1YWwodHJ1ZSwgISFndWFyZCxcXG4vLyBtZXNzYWdlX29wdCk7LiBUbyB0ZXN0IHN0cmljdGx5IGZvciB0aGUgdmFsdWUgdHJ1ZSwgdXNlXFxuLy8gYXNzZXJ0LnN0cmljdEVxdWFsKHRydWUsIGd1YXJkLCBtZXNzYWdlX29wdCk7LlxcblxcbmZ1bmN0aW9uIG9rKHZhbHVlLCBtZXNzYWdlKSB7XFxuICBpZiAoIXZhbHVlKSBmYWlsKHZhbHVlLCB0cnVlLCBtZXNzYWdlLCAnPT0nLCBhc3NlcnQub2spO1xcbn1cXG5hc3NlcnQub2sgPSBvaztcXG5cXG4vLyA1LiBUaGUgZXF1YWxpdHkgYXNzZXJ0aW9uIHRlc3RzIHNoYWxsb3csIGNvZXJjaXZlIGVxdWFsaXR5IHdpdGhcXG4vLyA9PS5cXG4vLyBhc3NlcnQuZXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZV9vcHQpO1xcblxcbmFzc2VydC5lcXVhbCA9IGZ1bmN0aW9uIGVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UpIHtcXG4gIGlmIChhY3R1YWwgIT0gZXhwZWN0ZWQpIGZhaWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSwgJz09JywgYXNzZXJ0LmVxdWFsKTtcXG59O1xcblxcbi8vIDYuIFRoZSBub24tZXF1YWxpdHkgYXNzZXJ0aW9uIHRlc3RzIGZvciB3aGV0aGVyIHR3byBvYmplY3RzIGFyZSBub3QgZXF1YWxcXG4vLyB3aXRoICE9IGFzc2VydC5ub3RFcXVhbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlX29wdCk7XFxuXFxuYXNzZXJ0Lm5vdEVxdWFsID0gZnVuY3Rpb24gbm90RXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSkge1xcbiAgaWYgKGFjdHVhbCA9PSBleHBlY3RlZCkge1xcbiAgICBmYWlsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UsICchPScsIGFzc2VydC5ub3RFcXVhbCk7XFxuICB9XFxufTtcXG5cXG4vLyA3LiBUaGUgZXF1aXZhbGVuY2UgYXNzZXJ0aW9uIHRlc3RzIGEgZGVlcCBlcXVhbGl0eSByZWxhdGlvbi5cXG4vLyBhc3NlcnQuZGVlcEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2Vfb3B0KTtcXG5cXG5hc3NlcnQuZGVlcEVxdWFsID0gZnVuY3Rpb24gZGVlcEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UpIHtcXG4gIGlmICghX2RlZXBFcXVhbChhY3R1YWwsIGV4cGVjdGVkLCBmYWxzZSkpIHtcXG4gICAgZmFpbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlLCAnZGVlcEVxdWFsJywgYXNzZXJ0LmRlZXBFcXVhbCk7XFxuICB9XFxufTtcXG5cXG5hc3NlcnQuZGVlcFN0cmljdEVxdWFsID0gZnVuY3Rpb24gZGVlcFN0cmljdEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UpIHtcXG4gIGlmICghX2RlZXBFcXVhbChhY3R1YWwsIGV4cGVjdGVkLCB0cnVlKSkge1xcbiAgICBmYWlsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UsICdkZWVwU3RyaWN0RXF1YWwnLCBhc3NlcnQuZGVlcFN0cmljdEVxdWFsKTtcXG4gIH1cXG59O1xcblxcbmZ1bmN0aW9uIF9kZWVwRXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgc3RyaWN0LCBtZW1vcykge1xcbiAgLy8gNy4xLiBBbGwgaWRlbnRpY2FsIHZhbHVlcyBhcmUgZXF1aXZhbGVudCwgYXMgZGV0ZXJtaW5lZCBieSA9PT0uXFxuICBpZiAoYWN0dWFsID09PSBleHBlY3RlZCkge1xcbiAgICByZXR1cm4gdHJ1ZTtcXG4gIH0gZWxzZSBpZiAoaXNCdWZmZXIoYWN0dWFsKSAmJiBpc0J1ZmZlcihleHBlY3RlZCkpIHtcXG4gICAgcmV0dXJuIGNvbXBhcmUoYWN0dWFsLCBleHBlY3RlZCkgPT09IDA7XFxuXFxuICAvLyA3LjIuIElmIHRoZSBleHBlY3RlZCB2YWx1ZSBpcyBhIERhdGUgb2JqZWN0LCB0aGUgYWN0dWFsIHZhbHVlIGlzXFxuICAvLyBlcXVpdmFsZW50IGlmIGl0IGlzIGFsc28gYSBEYXRlIG9iamVjdCB0aGF0IHJlZmVycyB0byB0aGUgc2FtZSB0aW1lLlxcbiAgfSBlbHNlIGlmICh1dGlsLmlzRGF0ZShhY3R1YWwpICYmIHV0aWwuaXNEYXRlKGV4cGVjdGVkKSkge1xcbiAgICByZXR1cm4gYWN0dWFsLmdldFRpbWUoKSA9PT0gZXhwZWN0ZWQuZ2V0VGltZSgpO1xcblxcbiAgLy8gNy4zIElmIHRoZSBleHBlY3RlZCB2YWx1ZSBpcyBhIFJlZ0V4cCBvYmplY3QsIHRoZSBhY3R1YWwgdmFsdWUgaXNcXG4gIC8vIGVxdWl2YWxlbnQgaWYgaXQgaXMgYWxzbyBhIFJlZ0V4cCBvYmplY3Qgd2l0aCB0aGUgc2FtZSBzb3VyY2UgYW5kXFxuICAvLyBwcm9wZXJ0aWVzIChgZ2xvYmFsYCwgYG11bHRpbGluZWAsIGBsYXN0SW5kZXhgLCBgaWdub3JlQ2FzZWApLlxcbiAgfSBlbHNlIGlmICh1dGlsLmlzUmVnRXhwKGFjdHVhbCkgJiYgdXRpbC5pc1JlZ0V4cChleHBlY3RlZCkpIHtcXG4gICAgcmV0dXJuIGFjdHVhbC5zb3VyY2UgPT09IGV4cGVjdGVkLnNvdXJjZSAmJlxcbiAgICAgICAgICAgYWN0dWFsLmdsb2JhbCA9PT0gZXhwZWN0ZWQuZ2xvYmFsICYmXFxuICAgICAgICAgICBhY3R1YWwubXVsdGlsaW5lID09PSBleHBlY3RlZC5tdWx0aWxpbmUgJiZcXG4gICAgICAgICAgIGFjdHVhbC5sYXN0SW5kZXggPT09IGV4cGVjdGVkLmxhc3RJbmRleCAmJlxcbiAgICAgICAgICAgYWN0dWFsLmlnbm9yZUNhc2UgPT09IGV4cGVjdGVkLmlnbm9yZUNhc2U7XFxuXFxuICAvLyA3LjQuIE90aGVyIHBhaXJzIHRoYXQgZG8gbm90IGJvdGggcGFzcyB0eXBlb2YgdmFsdWUgPT0gJ29iamVjdCcsXFxuICAvLyBlcXVpdmFsZW5jZSBpcyBkZXRlcm1pbmVkIGJ5ID09LlxcbiAgfSBlbHNlIGlmICgoYWN0dWFsID09PSBudWxsIHx8IHR5cGVvZiBhY3R1YWwgIT09ICdvYmplY3QnKSAmJlxcbiAgICAgICAgICAgICAoZXhwZWN0ZWQgPT09IG51bGwgfHwgdHlwZW9mIGV4cGVjdGVkICE9PSAnb2JqZWN0JykpIHtcXG4gICAgcmV0dXJuIHN0cmljdCA/IGFjdHVhbCA9PT0gZXhwZWN0ZWQgOiBhY3R1YWwgPT0gZXhwZWN0ZWQ7XFxuXFxuICAvLyBJZiBib3RoIHZhbHVlcyBhcmUgaW5zdGFuY2VzIG9mIHR5cGVkIGFycmF5cywgd3JhcCB0aGVpciB1bmRlcmx5aW5nXFxuICAvLyBBcnJheUJ1ZmZlcnMgaW4gYSBCdWZmZXIgZWFjaCB0byBpbmNyZWFzZSBwZXJmb3JtYW5jZVxcbiAgLy8gVGhpcyBvcHRpbWl6YXRpb24gcmVxdWlyZXMgdGhlIGFycmF5cyB0byBoYXZlIHRoZSBzYW1lIHR5cGUgYXMgY2hlY2tlZCBieVxcbiAgLy8gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZyAoYWthIHBUb1N0cmluZykuIE5ldmVyIHBlcmZvcm0gYmluYXJ5XFxuICAvLyBjb21wYXJpc29ucyBmb3IgRmxvYXQqQXJyYXlzLCB0aG91Z2gsIHNpbmNlIGUuZy4gKzAgPT09IC0wIGJ1dCB0aGVpclxcbiAgLy8gYml0IHBhdHRlcm5zIGFyZSBub3QgaWRlbnRpY2FsLlxcbiAgfSBlbHNlIGlmIChpc1ZpZXcoYWN0dWFsKSAmJiBpc1ZpZXcoZXhwZWN0ZWQpICYmXFxuICAgICAgICAgICAgIHBUb1N0cmluZyhhY3R1YWwpID09PSBwVG9TdHJpbmcoZXhwZWN0ZWQpICYmXFxuICAgICAgICAgICAgICEoYWN0dWFsIGluc3RhbmNlb2YgRmxvYXQzMkFycmF5IHx8XFxuICAgICAgICAgICAgICAgYWN0dWFsIGluc3RhbmNlb2YgRmxvYXQ2NEFycmF5KSkge1xcbiAgICByZXR1cm4gY29tcGFyZShuZXcgVWludDhBcnJheShhY3R1YWwuYnVmZmVyKSxcXG4gICAgICAgICAgICAgICAgICAgbmV3IFVpbnQ4QXJyYXkoZXhwZWN0ZWQuYnVmZmVyKSkgPT09IDA7XFxuXFxuICAvLyA3LjUgRm9yIGFsbCBvdGhlciBPYmplY3QgcGFpcnMsIGluY2x1ZGluZyBBcnJheSBvYmplY3RzLCBlcXVpdmFsZW5jZSBpc1xcbiAgLy8gZGV0ZXJtaW5lZCBieSBoYXZpbmcgdGhlIHNhbWUgbnVtYmVyIG9mIG93bmVkIHByb3BlcnRpZXMgKGFzIHZlcmlmaWVkXFxuICAvLyB3aXRoIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCksIHRoZSBzYW1lIHNldCBvZiBrZXlzXFxuICAvLyAoYWx0aG91Z2ggbm90IG5lY2Vzc2FyaWx5IHRoZSBzYW1lIG9yZGVyKSwgZXF1aXZhbGVudCB2YWx1ZXMgZm9yIGV2ZXJ5XFxuICAvLyBjb3JyZXNwb25kaW5nIGtleSwgYW5kIGFuIGlkZW50aWNhbCAncHJvdG90eXBlJyBwcm9wZXJ0eS4gTm90ZTogdGhpc1xcbiAgLy8gYWNjb3VudHMgZm9yIGJvdGggbmFtZWQgYW5kIGluZGV4ZWQgcHJvcGVydGllcyBvbiBBcnJheXMuXFxuICB9IGVsc2UgaWYgKGlzQnVmZmVyKGFjdHVhbCkgIT09IGlzQnVmZmVyKGV4cGVjdGVkKSkge1xcbiAgICByZXR1cm4gZmFsc2U7XFxuICB9IGVsc2Uge1xcbiAgICBtZW1vcyA9IG1lbW9zIHx8IHthY3R1YWw6IFtdLCBleHBlY3RlZDogW119O1xcblxcbiAgICB2YXIgYWN0dWFsSW5kZXggPSBtZW1vcy5hY3R1YWwuaW5kZXhPZihhY3R1YWwpO1xcbiAgICBpZiAoYWN0dWFsSW5kZXggIT09IC0xKSB7XFxuICAgICAgaWYgKGFjdHVhbEluZGV4ID09PSBtZW1vcy5leHBlY3RlZC5pbmRleE9mKGV4cGVjdGVkKSkge1xcbiAgICAgICAgcmV0dXJuIHRydWU7XFxuICAgICAgfVxcbiAgICB9XFxuXFxuICAgIG1lbW9zLmFjdHVhbC5wdXNoKGFjdHVhbCk7XFxuICAgIG1lbW9zLmV4cGVjdGVkLnB1c2goZXhwZWN0ZWQpO1xcblxcbiAgICByZXR1cm4gb2JqRXF1aXYoYWN0dWFsLCBleHBlY3RlZCwgc3RyaWN0LCBtZW1vcyk7XFxuICB9XFxufVxcblxcbmZ1bmN0aW9uIGlzQXJndW1lbnRzKG9iamVjdCkge1xcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmplY3QpID09ICdbb2JqZWN0IEFyZ3VtZW50c10nO1xcbn1cXG5cXG5mdW5jdGlvbiBvYmpFcXVpdihhLCBiLCBzdHJpY3QsIGFjdHVhbFZpc2l0ZWRPYmplY3RzKSB7XFxuICBpZiAoYSA9PT0gbnVsbCB8fCBhID09PSB1bmRlZmluZWQgfHwgYiA9PT0gbnVsbCB8fCBiID09PSB1bmRlZmluZWQpXFxuICAgIHJldHVybiBmYWxzZTtcXG4gIC8vIGlmIG9uZSBpcyBhIHByaW1pdGl2ZSwgdGhlIG90aGVyIG11c3QgYmUgc2FtZVxcbiAgaWYgKHV0aWwuaXNQcmltaXRpdmUoYSkgfHwgdXRpbC5pc1ByaW1pdGl2ZShiKSlcXG4gICAgcmV0dXJuIGEgPT09IGI7XFxuICBpZiAoc3RyaWN0ICYmIE9iamVjdC5nZXRQcm90b3R5cGVPZihhKSAhPT0gT2JqZWN0LmdldFByb3RvdHlwZU9mKGIpKVxcbiAgICByZXR1cm4gZmFsc2U7XFxuICB2YXIgYUlzQXJncyA9IGlzQXJndW1lbnRzKGEpO1xcbiAgdmFyIGJJc0FyZ3MgPSBpc0FyZ3VtZW50cyhiKTtcXG4gIGlmICgoYUlzQXJncyAmJiAhYklzQXJncykgfHwgKCFhSXNBcmdzICYmIGJJc0FyZ3MpKVxcbiAgICByZXR1cm4gZmFsc2U7XFxuICBpZiAoYUlzQXJncykge1xcbiAgICBhID0gcFNsaWNlLmNhbGwoYSk7XFxuICAgIGIgPSBwU2xpY2UuY2FsbChiKTtcXG4gICAgcmV0dXJuIF9kZWVwRXF1YWwoYSwgYiwgc3RyaWN0KTtcXG4gIH1cXG4gIHZhciBrYSA9IG9iamVjdEtleXMoYSk7XFxuICB2YXIga2IgPSBvYmplY3RLZXlzKGIpO1xcbiAgdmFyIGtleSwgaTtcXG4gIC8vIGhhdmluZyB0aGUgc2FtZSBudW1iZXIgb2Ygb3duZWQgcHJvcGVydGllcyAoa2V5cyBpbmNvcnBvcmF0ZXNcXG4gIC8vIGhhc093blByb3BlcnR5KVxcbiAgaWYgKGthLmxlbmd0aCAhPT0ga2IubGVuZ3RoKVxcbiAgICByZXR1cm4gZmFsc2U7XFxuICAvL3RoZSBzYW1lIHNldCBvZiBrZXlzIChhbHRob3VnaCBub3QgbmVjZXNzYXJpbHkgdGhlIHNhbWUgb3JkZXIpLFxcbiAga2Euc29ydCgpO1xcbiAga2Iuc29ydCgpO1xcbiAgLy9+fn5jaGVhcCBrZXkgdGVzdFxcbiAgZm9yIChpID0ga2EubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcXG4gICAgaWYgKGthW2ldICE9PSBrYltpXSlcXG4gICAgICByZXR1cm4gZmFsc2U7XFxuICB9XFxuICAvL2VxdWl2YWxlbnQgdmFsdWVzIGZvciBldmVyeSBjb3JyZXNwb25kaW5nIGtleSwgYW5kXFxuICAvL35+fnBvc3NpYmx5IGV4cGVuc2l2ZSBkZWVwIHRlc3RcXG4gIGZvciAoaSA9IGthLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XFxuICAgIGtleSA9IGthW2ldO1xcbiAgICBpZiAoIV9kZWVwRXF1YWwoYVtrZXldLCBiW2tleV0sIHN0cmljdCwgYWN0dWFsVmlzaXRlZE9iamVjdHMpKVxcbiAgICAgIHJldHVybiBmYWxzZTtcXG4gIH1cXG4gIHJldHVybiB0cnVlO1xcbn1cXG5cXG4vLyA4LiBUaGUgbm9uLWVxdWl2YWxlbmNlIGFzc2VydGlvbiB0ZXN0cyBmb3IgYW55IGRlZXAgaW5lcXVhbGl0eS5cXG4vLyBhc3NlcnQubm90RGVlcEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2Vfb3B0KTtcXG5cXG5hc3NlcnQubm90RGVlcEVxdWFsID0gZnVuY3Rpb24gbm90RGVlcEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UpIHtcXG4gIGlmIChfZGVlcEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIGZhbHNlKSkge1xcbiAgICBmYWlsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UsICdub3REZWVwRXF1YWwnLCBhc3NlcnQubm90RGVlcEVxdWFsKTtcXG4gIH1cXG59O1xcblxcbmFzc2VydC5ub3REZWVwU3RyaWN0RXF1YWwgPSBub3REZWVwU3RyaWN0RXF1YWw7XFxuZnVuY3Rpb24gbm90RGVlcFN0cmljdEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UpIHtcXG4gIGlmIChfZGVlcEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIHRydWUpKSB7XFxuICAgIGZhaWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSwgJ25vdERlZXBTdHJpY3RFcXVhbCcsIG5vdERlZXBTdHJpY3RFcXVhbCk7XFxuICB9XFxufVxcblxcblxcbi8vIDkuIFRoZSBzdHJpY3QgZXF1YWxpdHkgYXNzZXJ0aW9uIHRlc3RzIHN0cmljdCBlcXVhbGl0eSwgYXMgZGV0ZXJtaW5lZCBieSA9PT0uXFxuLy8gYXNzZXJ0LnN0cmljdEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2Vfb3B0KTtcXG5cXG5hc3NlcnQuc3RyaWN0RXF1YWwgPSBmdW5jdGlvbiBzdHJpY3RFcXVhbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlKSB7XFxuICBpZiAoYWN0dWFsICE9PSBleHBlY3RlZCkge1xcbiAgICBmYWlsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UsICc9PT0nLCBhc3NlcnQuc3RyaWN0RXF1YWwpO1xcbiAgfVxcbn07XFxuXFxuLy8gMTAuIFRoZSBzdHJpY3Qgbm9uLWVxdWFsaXR5IGFzc2VydGlvbiB0ZXN0cyBmb3Igc3RyaWN0IGluZXF1YWxpdHksIGFzXFxuLy8gZGV0ZXJtaW5lZCBieSAhPT0uICBhc3NlcnQubm90U3RyaWN0RXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZV9vcHQpO1xcblxcbmFzc2VydC5ub3RTdHJpY3RFcXVhbCA9IGZ1bmN0aW9uIG5vdFN0cmljdEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UpIHtcXG4gIGlmIChhY3R1YWwgPT09IGV4cGVjdGVkKSB7XFxuICAgIGZhaWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSwgJyE9PScsIGFzc2VydC5ub3RTdHJpY3RFcXVhbCk7XFxuICB9XFxufTtcXG5cXG5mdW5jdGlvbiBleHBlY3RlZEV4Y2VwdGlvbihhY3R1YWwsIGV4cGVjdGVkKSB7XFxuICBpZiAoIWFjdHVhbCB8fCAhZXhwZWN0ZWQpIHtcXG4gICAgcmV0dXJuIGZhbHNlO1xcbiAgfVxcblxcbiAgaWYgKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChleHBlY3RlZCkgPT0gJ1tvYmplY3QgUmVnRXhwXScpIHtcXG4gICAgcmV0dXJuIGV4cGVjdGVkLnRlc3QoYWN0dWFsKTtcXG4gIH1cXG5cXG4gIHRyeSB7XFxuICAgIGlmIChhY3R1YWwgaW5zdGFuY2VvZiBleHBlY3RlZCkge1xcbiAgICAgIHJldHVybiB0cnVlO1xcbiAgICB9XFxuICB9IGNhdGNoIChlKSB7XFxuICAgIC8vIElnbm9yZS4gIFRoZSBpbnN0YW5jZW9mIGNoZWNrIGRvZXNuJ3Qgd29yayBmb3IgYXJyb3cgZnVuY3Rpb25zLlxcbiAgfVxcblxcbiAgaWYgKEVycm9yLmlzUHJvdG90eXBlT2YoZXhwZWN0ZWQpKSB7XFxuICAgIHJldHVybiBmYWxzZTtcXG4gIH1cXG5cXG4gIHJldHVybiBleHBlY3RlZC5jYWxsKHt9LCBhY3R1YWwpID09PSB0cnVlO1xcbn1cXG5cXG5mdW5jdGlvbiBfdHJ5QmxvY2soYmxvY2spIHtcXG4gIHZhciBlcnJvcjtcXG4gIHRyeSB7XFxuICAgIGJsb2NrKCk7XFxuICB9IGNhdGNoIChlKSB7XFxuICAgIGVycm9yID0gZTtcXG4gIH1cXG4gIHJldHVybiBlcnJvcjtcXG59XFxuXFxuZnVuY3Rpb24gX3Rocm93cyhzaG91bGRUaHJvdywgYmxvY2ssIGV4cGVjdGVkLCBtZXNzYWdlKSB7XFxuICB2YXIgYWN0dWFsO1xcblxcbiAgaWYgKHR5cGVvZiBibG9jayAhPT0gJ2Z1bmN0aW9uJykge1xcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcXFwiYmxvY2tcXFwiIGFyZ3VtZW50IG11c3QgYmUgYSBmdW5jdGlvbicpO1xcbiAgfVxcblxcbiAgaWYgKHR5cGVvZiBleHBlY3RlZCA9PT0gJ3N0cmluZycpIHtcXG4gICAgbWVzc2FnZSA9IGV4cGVjdGVkO1xcbiAgICBleHBlY3RlZCA9IG51bGw7XFxuICB9XFxuXFxuICBhY3R1YWwgPSBfdHJ5QmxvY2soYmxvY2spO1xcblxcbiAgbWVzc2FnZSA9IChleHBlY3RlZCAmJiBleHBlY3RlZC5uYW1lID8gJyAoJyArIGV4cGVjdGVkLm5hbWUgKyAnKS4nIDogJy4nKSArXFxuICAgICAgICAgICAgKG1lc3NhZ2UgPyAnICcgKyBtZXNzYWdlIDogJy4nKTtcXG5cXG4gIGlmIChzaG91bGRUaHJvdyAmJiAhYWN0dWFsKSB7XFxuICAgIGZhaWwoYWN0dWFsLCBleHBlY3RlZCwgJ01pc3NpbmcgZXhwZWN0ZWQgZXhjZXB0aW9uJyArIG1lc3NhZ2UpO1xcbiAgfVxcblxcbiAgdmFyIHVzZXJQcm92aWRlZE1lc3NhZ2UgPSB0eXBlb2YgbWVzc2FnZSA9PT0gJ3N0cmluZyc7XFxuICB2YXIgaXNVbndhbnRlZEV4Y2VwdGlvbiA9ICFzaG91bGRUaHJvdyAmJiB1dGlsLmlzRXJyb3IoYWN0dWFsKTtcXG4gIHZhciBpc1VuZXhwZWN0ZWRFeGNlcHRpb24gPSAhc2hvdWxkVGhyb3cgJiYgYWN0dWFsICYmICFleHBlY3RlZDtcXG5cXG4gIGlmICgoaXNVbndhbnRlZEV4Y2VwdGlvbiAmJlxcbiAgICAgIHVzZXJQcm92aWRlZE1lc3NhZ2UgJiZcXG4gICAgICBleHBlY3RlZEV4Y2VwdGlvbihhY3R1YWwsIGV4cGVjdGVkKSkgfHxcXG4gICAgICBpc1VuZXhwZWN0ZWRFeGNlcHRpb24pIHtcXG4gICAgZmFpbChhY3R1YWwsIGV4cGVjdGVkLCAnR290IHVud2FudGVkIGV4Y2VwdGlvbicgKyBtZXNzYWdlKTtcXG4gIH1cXG5cXG4gIGlmICgoc2hvdWxkVGhyb3cgJiYgYWN0dWFsICYmIGV4cGVjdGVkICYmXFxuICAgICAgIWV4cGVjdGVkRXhjZXB0aW9uKGFjdHVhbCwgZXhwZWN0ZWQpKSB8fCAoIXNob3VsZFRocm93ICYmIGFjdHVhbCkpIHtcXG4gICAgdGhyb3cgYWN0dWFsO1xcbiAgfVxcbn1cXG5cXG4vLyAxMS4gRXhwZWN0ZWQgdG8gdGhyb3cgYW4gZXJyb3I6XFxuLy8gYXNzZXJ0LnRocm93cyhibG9jaywgRXJyb3Jfb3B0LCBtZXNzYWdlX29wdCk7XFxuXFxuYXNzZXJ0LnRocm93cyA9IGZ1bmN0aW9uKGJsb2NrLCAvKm9wdGlvbmFsKi9lcnJvciwgLypvcHRpb25hbCovbWVzc2FnZSkge1xcbiAgX3Rocm93cyh0cnVlLCBibG9jaywgZXJyb3IsIG1lc3NhZ2UpO1xcbn07XFxuXFxuLy8gRVhURU5TSU9OISBUaGlzIGlzIGFubm95aW5nIHRvIHdyaXRlIG91dHNpZGUgdGhpcyBtb2R1bGUuXFxuYXNzZXJ0LmRvZXNOb3RUaHJvdyA9IGZ1bmN0aW9uKGJsb2NrLCAvKm9wdGlvbmFsKi9lcnJvciwgLypvcHRpb25hbCovbWVzc2FnZSkge1xcbiAgX3Rocm93cyhmYWxzZSwgYmxvY2ssIGVycm9yLCBtZXNzYWdlKTtcXG59O1xcblxcbmFzc2VydC5pZkVycm9yID0gZnVuY3Rpb24oZXJyKSB7IGlmIChlcnIpIHRocm93IGVycjsgfTtcXG5cXG52YXIgb2JqZWN0S2V5cyA9IE9iamVjdC5rZXlzIHx8IGZ1bmN0aW9uIChvYmopIHtcXG4gIHZhciBrZXlzID0gW107XFxuICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XFxuICAgIGlmIChoYXNPd24uY2FsbChvYmosIGtleSkpIGtleXMucHVzaChrZXkpO1xcbiAgfVxcbiAgcmV0dXJuIGtleXM7XFxufTtcXG5cXG4vKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi99LmNhbGwoZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi8uLi93ZWJwYWNrL2J1aWxkaW4vZ2xvYmFsLmpzICovIDMpKSkvLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaU56RXVhbk1pTENKemIzVnlZMlZ6SWpwYkluZGxZbkJoWTJzNkx5OHZMaTkrTDJGemMyVnlkQzloYzNObGNuUXVhbk0vT1RJNE1TSmRMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUluZFhObElITjBjbWxqZENjN1hHNWNiaTh2SUdOdmJYQmhjbVVnWVc1a0lHbHpRblZtWm1WeUlIUmhhMlZ1SUdaeWIyMGdhSFIwY0hNNkx5OW5hWFJvZFdJdVkyOXRMMlpsY205emN5OWlkV1ptWlhJdllteHZZaTgyT0RCbE9XVTFaVFE0T0dZeU1tRmhZekkzTlRrNVlUVTNaR000TkRSaE5qTXhOVGt5T0dSa0wybHVaR1Y0TG1welhHNHZMeUJ2Y21sbmFXNWhiQ0J1YjNScFkyVTZYRzVjYmk4cUlWeHVJQ29nVkdobElHSjFabVpsY2lCdGIyUjFiR1VnWm5KdmJTQnViMlJsTG1wekxDQm1iM0lnZEdobElHSnliM2R6WlhJdVhHNGdLbHh1SUNvZ1FHRjFkR2h2Y2lBZ0lFWmxjbTl6Y3lCQlltOTFhMmhoWkdscVpXZ2dQR1psY205emMwQm1aWEp2YzNNdWIzSm5QaUE4YUhSMGNEb3ZMMlpsY205emN5NXZjbWMrWEc0Z0tpQkFiR2xqWlc1elpTQWdUVWxVWEc0Z0tpOWNibVoxYm1OMGFXOXVJR052YlhCaGNtVW9ZU3dnWWlrZ2UxeHVJQ0JwWmlBb1lTQTlQVDBnWWlrZ2UxeHVJQ0FnSUhKbGRIVnliaUF3TzF4dUlDQjlYRzVjYmlBZ2RtRnlJSGdnUFNCaExteGxibWQwYUR0Y2JpQWdkbUZ5SUhrZ1BTQmlMbXhsYm1kMGFEdGNibHh1SUNCbWIzSWdLSFpoY2lCcElEMGdNQ3dnYkdWdUlEMGdUV0YwYUM1dGFXNG9lQ3dnZVNrN0lHa2dQQ0JzWlc0N0lDc3JhU2tnZTF4dUlDQWdJR2xtSUNoaFcybGRJQ0U5UFNCaVcybGRLU0I3WEc0Z0lDQWdJQ0I0SUQwZ1lWdHBYVHRjYmlBZ0lDQWdJSGtnUFNCaVcybGRPMXh1SUNBZ0lDQWdZbkpsWVdzN1hHNGdJQ0FnZlZ4dUlDQjlYRzVjYmlBZ2FXWWdLSGdnUENCNUtTQjdYRzRnSUNBZ2NtVjBkWEp1SUMweE8xeHVJQ0I5WEc0Z0lHbG1JQ2g1SUR3Z2VDa2dlMXh1SUNBZ0lISmxkSFZ5YmlBeE8xeHVJQ0I5WEc0Z0lISmxkSFZ5YmlBd08xeHVmVnh1Wm5WdVkzUnBiMjRnYVhOQ2RXWm1aWElvWWlrZ2UxeHVJQ0JwWmlBb1oyeHZZbUZzTGtKMVptWmxjaUFtSmlCMGVYQmxiMllnWjJ4dlltRnNMa0oxWm1abGNpNXBjMEoxWm1abGNpQTlQVDBnSjJaMWJtTjBhVzl1SnlrZ2UxeHVJQ0FnSUhKbGRIVnliaUJuYkc5aVlXd3VRblZtWm1WeUxtbHpRblZtWm1WeUtHSXBPMXh1SUNCOVhHNGdJSEpsZEhWeWJpQWhJU2hpSUNFOUlHNTFiR3dnSmlZZ1lpNWZhWE5DZFdabVpYSXBPMXh1ZlZ4dVhHNHZMeUJpWVhObFpDQnZiaUJ1YjJSbElHRnpjMlZ5ZEN3Z2IzSnBaMmx1WVd3Z2JtOTBhV05sT2x4dVhHNHZMeUJvZEhSd09pOHZkMmxyYVM1amIyMXRiMjVxY3k1dmNtY3ZkMmxyYVM5VmJtbDBYMVJsYzNScGJtY3ZNUzR3WEc0dkwxeHVMeThnVkVoSlV5QkpVeUJPVDFRZ1ZFVlRWRVZFSUU1UFVpQk1TVXRGVEZrZ1ZFOGdWMDlTU3lCUFZWUlRTVVJGSUZZNElWeHVMeTljYmk4dklFOXlhV2RwYm1Gc2JIa2dabkp2YlNCdVlYSjNhR0ZzTG1weklDaG9kSFJ3T2k4dmJtRnlkMmhoYkdwekxtOXlaeWxjYmk4dklFTnZjSGx5YVdkb2RDQW9ZeWtnTWpBd09TQlVhRzl0WVhNZ1VtOWlhVzV6YjI0Z1BESTRNRzV2Y25Sb0xtTnZiVDVjYmk4dlhHNHZMeUJRWlhKdGFYTnphVzl1SUdseklHaGxjbVZpZVNCbmNtRnVkR1ZrTENCbWNtVmxJRzltSUdOb1lYSm5aU3dnZEc4Z1lXNTVJSEJsY25OdmJpQnZZblJoYVc1cGJtY2dZU0JqYjNCNVhHNHZMeUJ2WmlCMGFHbHpJSE52Wm5SM1lYSmxJR0Z1WkNCaGMzTnZZMmxoZEdWa0lHUnZZM1Z0Wlc1MFlYUnBiMjRnWm1sc1pYTWdLSFJvWlNBblUyOW1kSGRoY21VbktTd2dkRzljYmk4dklHUmxZV3dnYVc0Z2RHaGxJRk52Wm5SM1lYSmxJSGRwZEdodmRYUWdjbVZ6ZEhKcFkzUnBiMjRzSUdsdVkyeDFaR2x1WnlCM2FYUm9iM1YwSUd4cGJXbDBZWFJwYjI0Z2RHaGxYRzR2THlCeWFXZG9kSE1nZEc4Z2RYTmxMQ0JqYjNCNUxDQnRiMlJwWm5rc0lHMWxjbWRsTENCd2RXSnNhWE5vTENCa2FYTjBjbWxpZFhSbExDQnpkV0pzYVdObGJuTmxMQ0JoYm1RdmIzSmNiaTh2SUhObGJHd2dZMjl3YVdWeklHOW1JSFJvWlNCVGIyWjBkMkZ5WlN3Z1lXNWtJSFJ2SUhCbGNtMXBkQ0J3WlhKemIyNXpJSFJ2SUhkb2IyMGdkR2hsSUZOdlpuUjNZWEpsSUdselhHNHZMeUJtZFhKdWFYTm9aV1FnZEc4Z1pHOGdjMjhzSUhOMVltcGxZM1FnZEc4Z2RHaGxJR1p2Ykd4dmQybHVaeUJqYjI1a2FYUnBiMjV6T2x4dUx5OWNiaTh2SUZSb1pTQmhZbTkyWlNCamIzQjVjbWxuYUhRZ2JtOTBhV05sSUdGdVpDQjBhR2x6SUhCbGNtMXBjM05wYjI0Z2JtOTBhV05sSUhOb1lXeHNJR0psSUdsdVkyeDFaR1ZrSUdsdVhHNHZMeUJoYkd3Z1kyOXdhV1Z6SUc5eUlITjFZbk4wWVc1MGFXRnNJSEJ2Y25ScGIyNXpJRzltSUhSb1pTQlRiMlowZDJGeVpTNWNiaTh2WEc0dkx5QlVTRVVnVTA5R1ZGZEJVa1VnU1ZNZ1VGSlBWa2xFUlVRZ0owRlRJRWxUSnl3Z1YwbFVTRTlWVkNCWFFWSlNRVTVVV1NCUFJpQkJUbGtnUzBsT1JDd2dSVmhRVWtWVFV5QlBVbHh1THk4Z1NVMVFURWxGUkN3Z1NVNURURlZFU1U1SElFSlZWQ0JPVDFRZ1RFbE5TVlJGUkNCVVR5QlVTRVVnVjBGU1VrRk9WRWxGVXlCUFJpQk5SVkpEU0VGT1ZFRkNTVXhKVkZrc1hHNHZMeUJHU1ZST1JWTlRJRVpQVWlCQklGQkJVbFJKUTFWTVFWSWdVRlZTVUU5VFJTQkJUa1FnVGs5T1NVNUdVa2xPUjBWTlJVNVVMaUJKVGlCT1R5QkZWa1ZPVkNCVFNFRk1UQ0JVU0VWY2JpOHZJRUZWVkVoUFVsTWdRa1VnVEVsQlFreEZJRVpQVWlCQlRsa2dRMHhCU1Uwc0lFUkJUVUZIUlZNZ1QxSWdUMVJJUlZJZ1RFbEJRa2xNU1ZSWkxDQlhTRVZVU0VWU0lFbE9JRUZPWEc0dkx5QkJRMVJKVDA0Z1QwWWdRMDlPVkZKQlExUXNJRlJQVWxRZ1QxSWdUMVJJUlZKWFNWTkZMQ0JCVWtsVFNVNUhJRVpTVDAwc0lFOVZWQ0JQUmlCUFVpQkpUaUJEVDA1T1JVTlVTVTlPWEc0dkx5QlhTVlJJSUZSSVJTQlRUMFpVVjBGU1JTQlBVaUJVU0VVZ1ZWTkZJRTlTSUU5VVNFVlNJRVJGUVV4SlRrZFRJRWxPSUZSSVJTQlRUMFpVVjBGU1JTNWNibHh1ZG1GeUlIVjBhV3dnUFNCeVpYRjFhWEpsS0NkMWRHbHNMeWNwTzF4dWRtRnlJR2hoYzA5M2JpQTlJRTlpYW1WamRDNXdjbTkwYjNSNWNHVXVhR0Z6VDNkdVVISnZjR1Z5ZEhrN1hHNTJZWElnY0ZOc2FXTmxJRDBnUVhKeVlYa3VjSEp2ZEc5MGVYQmxMbk5zYVdObE8xeHVkbUZ5SUdaMWJtTjBhVzl1YzBoaGRtVk9ZVzFsY3lBOUlDaG1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lISmxkSFZ5YmlCbWRXNWpkR2x2YmlCbWIyOG9LU0I3ZlM1dVlXMWxJRDA5UFNBblptOXZKenRjYm4wb0tTazdYRzVtZFc1amRHbHZiaUJ3Vkc5VGRISnBibWNnS0c5aWFpa2dlMXh1SUNCeVpYUjFjbTRnVDJKcVpXTjBMbkJ5YjNSdmRIbHdaUzUwYjFOMGNtbHVaeTVqWVd4c0tHOWlhaWs3WEc1OVhHNW1kVzVqZEdsdmJpQnBjMVpwWlhjb1lYSnlZblZtS1NCN1hHNGdJR2xtSUNocGMwSjFabVpsY2loaGNuSmlkV1lwS1NCN1hHNGdJQ0FnY21WMGRYSnVJR1poYkhObE8xeHVJQ0I5WEc0Z0lHbG1JQ2gwZVhCbGIyWWdaMnh2WW1Gc0xrRnljbUY1UW5WbVptVnlJQ0U5UFNBblpuVnVZM1JwYjI0bktTQjdYRzRnSUNBZ2NtVjBkWEp1SUdaaGJITmxPMXh1SUNCOVhHNGdJR2xtSUNoMGVYQmxiMllnUVhKeVlYbENkV1ptWlhJdWFYTldhV1YzSUQwOVBTQW5ablZ1WTNScGIyNG5LU0I3WEc0Z0lDQWdjbVYwZFhKdUlFRnljbUY1UW5WbVptVnlMbWx6Vm1sbGR5aGhjbkppZFdZcE8xeHVJQ0I5WEc0Z0lHbG1JQ2doWVhKeVluVm1LU0I3WEc0Z0lDQWdjbVYwZFhKdUlHWmhiSE5sTzF4dUlDQjlYRzRnSUdsbUlDaGhjbkppZFdZZ2FXNXpkR0Z1WTJWdlppQkVZWFJoVm1sbGR5a2dlMXh1SUNBZ0lISmxkSFZ5YmlCMGNuVmxPMXh1SUNCOVhHNGdJR2xtSUNoaGNuSmlkV1l1WW5WbVptVnlJQ1ltSUdGeWNtSjFaaTVpZFdabVpYSWdhVzV6ZEdGdVkyVnZaaUJCY25KaGVVSjFabVpsY2lrZ2UxeHVJQ0FnSUhKbGRIVnliaUIwY25WbE8xeHVJQ0I5WEc0Z0lISmxkSFZ5YmlCbVlXeHpaVHRjYm4xY2JpOHZJREV1SUZSb1pTQmhjM05sY25RZ2JXOWtkV3hsSUhCeWIzWnBaR1Z6SUdaMWJtTjBhVzl1Y3lCMGFHRjBJSFJvY205M1hHNHZMeUJCYzNObGNuUnBiMjVGY25KdmNpZHpJSGRvWlc0Z2NHRnlkR2xqZFd4aGNpQmpiMjVrYVhScGIyNXpJR0Z5WlNCdWIzUWdiV1YwTGlCVWFHVmNiaTh2SUdGemMyVnlkQ0J0YjJSMWJHVWdiWFZ6ZENCamIyNW1iM0p0SUhSdklIUm9aU0JtYjJ4c2IzZHBibWNnYVc1MFpYSm1ZV05sTGx4dVhHNTJZWElnWVhOelpYSjBJRDBnYlc5a2RXeGxMbVY0Y0c5eWRITWdQU0J2YXp0Y2JseHVMeThnTWk0Z1ZHaGxJRUZ6YzJWeWRHbHZia1Z5Y205eUlHbHpJR1JsWm1sdVpXUWdhVzRnWVhOelpYSjBMbHh1THk4Z2JtVjNJR0Z6YzJWeWRDNUJjM05sY25ScGIyNUZjbkp2Y2loN0lHMWxjM05oWjJVNklHMWxjM05oWjJVc1hHNHZMeUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWVdOMGRXRnNPaUJoWTNSMVlXd3NYRzR2THlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pYaHdaV04wWldRNklHVjRjR1ZqZEdWa0lIMHBYRzVjYm5aaGNpQnlaV2RsZUNBOUlDOWNYSE1xWm5WdVkzUnBiMjVjWEhNcktGdGVYRndvWEZ4elhTb3BYRnh6S2k4N1hHNHZMeUJpWVhObFpDQnZiaUJvZEhSd2N6b3ZMMmRwZEdoMVlpNWpiMjB2Ykdwb1lYSmlMMloxYm1OMGFXOXVMbkJ5YjNSdmRIbHdaUzV1WVcxbEwySnNiMkl2WVdSbFpXVmxZemhpWm1Oak5qQTJPR0l4T0Rka04yUTVabUl6WkRWaVlqRmtNMkV6TURnNU9TOXBiWEJzWlcxbGJuUmhkR2x2Ymk1cWMxeHVablZ1WTNScGIyNGdaMlYwVG1GdFpTaG1kVzVqS1NCN1hHNGdJR2xtSUNnaGRYUnBiQzVwYzBaMWJtTjBhVzl1S0daMWJtTXBLU0I3WEc0Z0lDQWdjbVYwZFhKdU8xeHVJQ0I5WEc0Z0lHbG1JQ2htZFc1amRHbHZibk5JWVhabFRtRnRaWE1wSUh0Y2JpQWdJQ0J5WlhSMWNtNGdablZ1WXk1dVlXMWxPMXh1SUNCOVhHNGdJSFpoY2lCemRISWdQU0JtZFc1akxuUnZVM1J5YVc1bktDazdYRzRnSUhaaGNpQnRZWFJqYUNBOUlITjBjaTV0WVhSamFDaHlaV2RsZUNrN1hHNGdJSEpsZEhWeWJpQnRZWFJqYUNBbUppQnRZWFJqYUZzeFhUdGNibjFjYm1GemMyVnlkQzVCYzNObGNuUnBiMjVGY25KdmNpQTlJR1oxYm1OMGFXOXVJRUZ6YzJWeWRHbHZia1Z5Y205eUtHOXdkR2x2Ym5NcElIdGNiaUFnZEdocGN5NXVZVzFsSUQwZ0owRnpjMlZ5ZEdsdmJrVnljbTl5Snp0Y2JpQWdkR2hwY3k1aFkzUjFZV3dnUFNCdmNIUnBiMjV6TG1GamRIVmhiRHRjYmlBZ2RHaHBjeTVsZUhCbFkzUmxaQ0E5SUc5d2RHbHZibk11Wlhod1pXTjBaV1E3WEc0Z0lIUm9hWE11YjNCbGNtRjBiM0lnUFNCdmNIUnBiMjV6TG05d1pYSmhkRzl5TzF4dUlDQnBaaUFvYjNCMGFXOXVjeTV0WlhOellXZGxLU0I3WEc0Z0lDQWdkR2hwY3k1dFpYTnpZV2RsSUQwZ2IzQjBhVzl1Y3k1dFpYTnpZV2RsTzF4dUlDQWdJSFJvYVhNdVoyVnVaWEpoZEdWa1RXVnpjMkZuWlNBOUlHWmhiSE5sTzF4dUlDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUhSb2FYTXViV1Z6YzJGblpTQTlJR2RsZEUxbGMzTmhaMlVvZEdocGN5azdYRzRnSUNBZ2RHaHBjeTVuWlc1bGNtRjBaV1JOWlhOellXZGxJRDBnZEhKMVpUdGNiaUFnZlZ4dUlDQjJZWElnYzNSaFkydFRkR0Z5ZEVaMWJtTjBhVzl1SUQwZ2IzQjBhVzl1Y3k1emRHRmphMU4wWVhKMFJuVnVZM1JwYjI0Z2ZId2dabUZwYkR0Y2JpQWdhV1lnS0VWeWNtOXlMbU5oY0hSMWNtVlRkR0ZqYTFSeVlXTmxLU0I3WEc0Z0lDQWdSWEp5YjNJdVkyRndkSFZ5WlZOMFlXTnJWSEpoWTJVb2RHaHBjeXdnYzNSaFkydFRkR0Z5ZEVaMWJtTjBhVzl1S1R0Y2JpQWdmU0JsYkhObElIdGNiaUFnSUNBdkx5QnViMjRnZGpnZ1luSnZkM05sY25NZ2MyOGdkMlVnWTJGdUlHaGhkbVVnWVNCemRHRmphM1J5WVdObFhHNGdJQ0FnZG1GeUlHVnljaUE5SUc1bGR5QkZjbkp2Y2lncE8xeHVJQ0FnSUdsbUlDaGxjbkl1YzNSaFkyc3BJSHRjYmlBZ0lDQWdJSFpoY2lCdmRYUWdQU0JsY25JdWMzUmhZMnM3WEc1Y2JpQWdJQ0FnSUM4dklIUnllU0IwYnlCemRISnBjQ0IxYzJWc1pYTnpJR1p5WVcxbGMxeHVJQ0FnSUNBZ2RtRnlJR1p1WDI1aGJXVWdQU0JuWlhST1lXMWxLSE4wWVdOclUzUmhjblJHZFc1amRHbHZiaWs3WEc0Z0lDQWdJQ0IyWVhJZ2FXUjRJRDBnYjNWMExtbHVaR1Y0VDJZb0oxeGNiaWNnS3lCbWJsOXVZVzFsS1R0Y2JpQWdJQ0FnSUdsbUlDaHBaSGdnUGowZ01Da2dlMXh1SUNBZ0lDQWdJQ0F2THlCdmJtTmxJSGRsSUdoaGRtVWdiRzlqWVhSbFpDQjBhR1VnWm5WdVkzUnBiMjRnWm5KaGJXVmNiaUFnSUNBZ0lDQWdMeThnZDJVZ2JtVmxaQ0IwYnlCemRISnBjQ0J2ZFhRZ1pYWmxjbmwwYUdsdVp5QmlaV1p2Y21VZ2FYUWdLR0Z1WkNCcGRITWdiR2x1WlNsY2JpQWdJQ0FnSUNBZ2RtRnlJRzVsZUhSZmJHbHVaU0E5SUc5MWRDNXBibVJsZUU5bUtDZGNYRzRuTENCcFpIZ2dLeUF4S1R0Y2JpQWdJQ0FnSUNBZ2IzVjBJRDBnYjNWMExuTjFZbk4wY21sdVp5aHVaWGgwWDJ4cGJtVWdLeUF4S1R0Y2JpQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ2RHaHBjeTV6ZEdGamF5QTlJRzkxZER0Y2JpQWdJQ0I5WEc0Z0lIMWNibjA3WEc1Y2JpOHZJR0Z6YzJWeWRDNUJjM05sY25ScGIyNUZjbkp2Y2lCcGJuTjBZVzVqWlc5bUlFVnljbTl5WEc1MWRHbHNMbWx1YUdWeWFYUnpLR0Z6YzJWeWRDNUJjM05sY25ScGIyNUZjbkp2Y2l3Z1JYSnliM0lwTzF4dVhHNW1kVzVqZEdsdmJpQjBjblZ1WTJGMFpTaHpMQ0J1S1NCN1hHNGdJR2xtSUNoMGVYQmxiMllnY3lBOVBUMGdKM04wY21sdVp5Y3BJSHRjYmlBZ0lDQnlaWFIxY200Z2N5NXNaVzVuZEdnZ1BDQnVJRDhnY3lBNklITXVjMnhwWTJVb01Dd2diaWs3WEc0Z0lIMGdaV3h6WlNCN1hHNGdJQ0FnY21WMGRYSnVJSE03WEc0Z0lIMWNibjFjYm1aMWJtTjBhVzl1SUdsdWMzQmxZM1FvYzI5dFpYUm9hVzVuS1NCN1hHNGdJR2xtSUNobWRXNWpkR2x2Ym5OSVlYWmxUbUZ0WlhNZ2ZId2dJWFYwYVd3dWFYTkdkVzVqZEdsdmJpaHpiMjFsZEdocGJtY3BLU0I3WEc0Z0lDQWdjbVYwZFhKdUlIVjBhV3d1YVc1emNHVmpkQ2h6YjIxbGRHaHBibWNwTzF4dUlDQjlYRzRnSUhaaGNpQnlZWGR1WVcxbElEMGdaMlYwVG1GdFpTaHpiMjFsZEdocGJtY3BPMXh1SUNCMllYSWdibUZ0WlNBOUlISmhkMjVoYldVZ1B5QW5PaUFuSUNzZ2NtRjNibUZ0WlNBNklDY25PMXh1SUNCeVpYUjFjbTRnSjF0R2RXNWpkR2x2YmljZ0t5QWdibUZ0WlNBcklDZGRKenRjYm4xY2JtWjFibU4wYVc5dUlHZGxkRTFsYzNOaFoyVW9jMlZzWmlrZ2UxeHVJQ0J5WlhSMWNtNGdkSEoxYm1OaGRHVW9hVzV6Y0dWamRDaHpaV3htTG1GamRIVmhiQ2tzSURFeU9Da2dLeUFuSUNjZ0sxeHVJQ0FnSUNBZ0lDQWdjMlZzWmk1dmNHVnlZWFJ2Y2lBcklDY2dKeUFyWEc0Z0lDQWdJQ0FnSUNCMGNuVnVZMkYwWlNocGJuTndaV04wS0hObGJHWXVaWGh3WldOMFpXUXBMQ0F4TWpncE8xeHVmVnh1WEc0dkx5QkJkQ0J3Y21WelpXNTBJRzl1YkhrZ2RHaGxJSFJvY21WbElHdGxlWE1nYldWdWRHbHZibVZrSUdGaWIzWmxJR0Z5WlNCMWMyVmtJR0Z1WkZ4dUx5OGdkVzVrWlhKemRHOXZaQ0JpZVNCMGFHVWdjM0JsWXk0Z1NXMXdiR1Z0Wlc1MFlYUnBiMjV6SUc5eUlITjFZaUJ0YjJSMWJHVnpJR05oYmlCd1lYTnpYRzR2THlCdmRHaGxjaUJyWlhseklIUnZJSFJvWlNCQmMzTmxjblJwYjI1RmNuSnZjaWR6SUdOdmJuTjBjblZqZEc5eUlDMGdkR2hsZVNCM2FXeHNJR0psWEc0dkx5QnBaMjV2Y21Wa0xseHVYRzR2THlBekxpQkJiR3dnYjJZZ2RHaGxJR1p2Ykd4dmQybHVaeUJtZFc1amRHbHZibk1nYlhWemRDQjBhSEp2ZHlCaGJpQkJjM05sY25ScGIyNUZjbkp2Y2x4dUx5OGdkMmhsYmlCaElHTnZjbkpsYzNCdmJtUnBibWNnWTI5dVpHbDBhVzl1SUdseklHNXZkQ0J0WlhRc0lIZHBkR2dnWVNCdFpYTnpZV2RsSUhSb1lYUmNiaTh2SUcxaGVTQmlaU0IxYm1SbFptbHVaV1FnYVdZZ2JtOTBJSEJ5YjNacFpHVmtMaUFnUVd4c0lHRnpjMlZ5ZEdsdmJpQnRaWFJvYjJSeklIQnliM1pwWkdWY2JpOHZJR0p2ZEdnZ2RHaGxJR0ZqZEhWaGJDQmhibVFnWlhod1pXTjBaV1FnZG1Gc2RXVnpJSFJ2SUhSb1pTQmhjM05sY25ScGIyNGdaWEp5YjNJZ1ptOXlYRzR2THlCa2FYTndiR0Y1SUhCMWNuQnZjMlZ6TGx4dVhHNW1kVzVqZEdsdmJpQm1ZV2xzS0dGamRIVmhiQ3dnWlhod1pXTjBaV1FzSUcxbGMzTmhaMlVzSUc5d1pYSmhkRzl5TENCemRHRmphMU4wWVhKMFJuVnVZM1JwYjI0cElIdGNiaUFnZEdoeWIzY2dibVYzSUdGemMyVnlkQzVCYzNObGNuUnBiMjVGY25KdmNpaDdYRzRnSUNBZ2JXVnpjMkZuWlRvZ2JXVnpjMkZuWlN4Y2JpQWdJQ0JoWTNSMVlXdzZJR0ZqZEhWaGJDeGNiaUFnSUNCbGVIQmxZM1JsWkRvZ1pYaHdaV04wWldRc1hHNGdJQ0FnYjNCbGNtRjBiM0k2SUc5d1pYSmhkRzl5TEZ4dUlDQWdJSE4wWVdOclUzUmhjblJHZFc1amRHbHZiam9nYzNSaFkydFRkR0Z5ZEVaMWJtTjBhVzl1WEc0Z0lIMHBPMXh1ZlZ4dVhHNHZMeUJGV0ZSRlRsTkpUMDRoSUdGc2JHOTNjeUJtYjNJZ2QyVnNiQ0JpWldoaGRtVmtJR1Z5Y205eWN5QmtaV1pwYm1Wa0lHVnNjMlYzYUdWeVpTNWNibUZ6YzJWeWRDNW1ZV2xzSUQwZ1ptRnBiRHRjYmx4dUx5OGdOQzRnVUhWeVpTQmhjM05sY25ScGIyNGdkR1Z6ZEhNZ2QyaGxkR2hsY2lCaElIWmhiSFZsSUdseklIUnlkWFJvZVN3Z1lYTWdaR1YwWlhKdGFXNWxaRnh1THk4Z1lua2dJU0ZuZFdGeVpDNWNiaTh2SUdGemMyVnlkQzV2YXlobmRXRnlaQ3dnYldWemMyRm5aVjl2Y0hRcE8xeHVMeThnVkdocGN5QnpkR0YwWlcxbGJuUWdhWE1nWlhGMWFYWmhiR1Z1ZENCMGJ5QmhjM05sY25RdVpYRjFZV3dvZEhKMVpTd2dJU0ZuZFdGeVpDeGNiaTh2SUcxbGMzTmhaMlZmYjNCMEtUc3VJRlJ2SUhSbGMzUWdjM1J5YVdOMGJIa2dabTl5SUhSb1pTQjJZV3gxWlNCMGNuVmxMQ0IxYzJWY2JpOHZJR0Z6YzJWeWRDNXpkSEpwWTNSRmNYVmhiQ2gwY25WbExDQm5kV0Z5WkN3Z2JXVnpjMkZuWlY5dmNIUXBPeTVjYmx4dVpuVnVZM1JwYjI0Z2Iyc29kbUZzZFdVc0lHMWxjM05oWjJVcElIdGNiaUFnYVdZZ0tDRjJZV3gxWlNrZ1ptRnBiQ2gyWVd4MVpTd2dkSEoxWlN3Z2JXVnpjMkZuWlN3Z0p6MDlKeXdnWVhOelpYSjBMbTlyS1R0Y2JuMWNibUZ6YzJWeWRDNXZheUE5SUc5ck8xeHVYRzR2THlBMUxpQlVhR1VnWlhGMVlXeHBkSGtnWVhOelpYSjBhVzl1SUhSbGMzUnpJSE5vWVd4c2IzY3NJR052WlhKamFYWmxJR1Z4ZFdGc2FYUjVJSGRwZEdoY2JpOHZJRDA5TGx4dUx5OGdZWE56WlhKMExtVnhkV0ZzS0dGamRIVmhiQ3dnWlhod1pXTjBaV1FzSUcxbGMzTmhaMlZmYjNCMEtUdGNibHh1WVhOelpYSjBMbVZ4ZFdGc0lEMGdablZ1WTNScGIyNGdaWEYxWVd3b1lXTjBkV0ZzTENCbGVIQmxZM1JsWkN3Z2JXVnpjMkZuWlNrZ2UxeHVJQ0JwWmlBb1lXTjBkV0ZzSUNFOUlHVjRjR1ZqZEdWa0tTQm1ZV2xzS0dGamRIVmhiQ3dnWlhod1pXTjBaV1FzSUcxbGMzTmhaMlVzSUNjOVBTY3NJR0Z6YzJWeWRDNWxjWFZoYkNrN1hHNTlPMXh1WEc0dkx5QTJMaUJVYUdVZ2JtOXVMV1Z4ZFdGc2FYUjVJR0Z6YzJWeWRHbHZiaUIwWlhOMGN5Qm1iM0lnZDJobGRHaGxjaUIwZDI4Z2IySnFaV04wY3lCaGNtVWdibTkwSUdWeGRXRnNYRzR2THlCM2FYUm9JQ0U5SUdGemMyVnlkQzV1YjNSRmNYVmhiQ2hoWTNSMVlXd3NJR1Y0Y0dWamRHVmtMQ0J0WlhOellXZGxYMjl3ZENrN1hHNWNibUZ6YzJWeWRDNXViM1JGY1hWaGJDQTlJR1oxYm1OMGFXOXVJRzV2ZEVWeGRXRnNLR0ZqZEhWaGJDd2daWGh3WldOMFpXUXNJRzFsYzNOaFoyVXBJSHRjYmlBZ2FXWWdLR0ZqZEhWaGJDQTlQU0JsZUhCbFkzUmxaQ2tnZTF4dUlDQWdJR1poYVd3b1lXTjBkV0ZzTENCbGVIQmxZM1JsWkN3Z2JXVnpjMkZuWlN3Z0p5RTlKeXdnWVhOelpYSjBMbTV2ZEVWeGRXRnNLVHRjYmlBZ2ZWeHVmVHRjYmx4dUx5OGdOeTRnVkdobElHVnhkV2wyWVd4bGJtTmxJR0Z6YzJWeWRHbHZiaUIwWlhOMGN5QmhJR1JsWlhBZ1pYRjFZV3hwZEhrZ2NtVnNZWFJwYjI0dVhHNHZMeUJoYzNObGNuUXVaR1ZsY0VWeGRXRnNLR0ZqZEhWaGJDd2daWGh3WldOMFpXUXNJRzFsYzNOaFoyVmZiM0IwS1R0Y2JseHVZWE56WlhKMExtUmxaWEJGY1hWaGJDQTlJR1oxYm1OMGFXOXVJR1JsWlhCRmNYVmhiQ2hoWTNSMVlXd3NJR1Y0Y0dWamRHVmtMQ0J0WlhOellXZGxLU0I3WEc0Z0lHbG1JQ2doWDJSbFpYQkZjWFZoYkNoaFkzUjFZV3dzSUdWNGNHVmpkR1ZrTENCbVlXeHpaU2twSUh0Y2JpQWdJQ0JtWVdsc0tHRmpkSFZoYkN3Z1pYaHdaV04wWldRc0lHMWxjM05oWjJVc0lDZGtaV1Z3UlhGMVlXd25MQ0JoYzNObGNuUXVaR1ZsY0VWeGRXRnNLVHRjYmlBZ2ZWeHVmVHRjYmx4dVlYTnpaWEowTG1SbFpYQlRkSEpwWTNSRmNYVmhiQ0E5SUdaMWJtTjBhVzl1SUdSbFpYQlRkSEpwWTNSRmNYVmhiQ2hoWTNSMVlXd3NJR1Y0Y0dWamRHVmtMQ0J0WlhOellXZGxLU0I3WEc0Z0lHbG1JQ2doWDJSbFpYQkZjWFZoYkNoaFkzUjFZV3dzSUdWNGNHVmpkR1ZrTENCMGNuVmxLU2tnZTF4dUlDQWdJR1poYVd3b1lXTjBkV0ZzTENCbGVIQmxZM1JsWkN3Z2JXVnpjMkZuWlN3Z0oyUmxaWEJUZEhKcFkzUkZjWFZoYkNjc0lHRnpjMlZ5ZEM1a1pXVndVM1J5YVdOMFJYRjFZV3dwTzF4dUlDQjlYRzU5TzF4dVhHNW1kVzVqZEdsdmJpQmZaR1ZsY0VWeGRXRnNLR0ZqZEhWaGJDd2daWGh3WldOMFpXUXNJSE4wY21samRDd2diV1Z0YjNNcElIdGNiaUFnTHk4Z055NHhMaUJCYkd3Z2FXUmxiblJwWTJGc0lIWmhiSFZsY3lCaGNtVWdaWEYxYVhaaGJHVnVkQ3dnWVhNZ1pHVjBaWEp0YVc1bFpDQmllU0E5UFQwdVhHNGdJR2xtSUNoaFkzUjFZV3dnUFQwOUlHVjRjR1ZqZEdWa0tTQjdYRzRnSUNBZ2NtVjBkWEp1SUhSeWRXVTdYRzRnSUgwZ1pXeHpaU0JwWmlBb2FYTkNkV1ptWlhJb1lXTjBkV0ZzS1NBbUppQnBjMEoxWm1abGNpaGxlSEJsWTNSbFpDa3BJSHRjYmlBZ0lDQnlaWFIxY200Z1kyOXRjR0Z5WlNoaFkzUjFZV3dzSUdWNGNHVmpkR1ZrS1NBOVBUMGdNRHRjYmx4dUlDQXZMeUEzTGpJdUlFbG1JSFJvWlNCbGVIQmxZM1JsWkNCMllXeDFaU0JwY3lCaElFUmhkR1VnYjJKcVpXTjBMQ0IwYUdVZ1lXTjBkV0ZzSUhaaGJIVmxJR2x6WEc0Z0lDOHZJR1Z4ZFdsMllXeGxiblFnYVdZZ2FYUWdhWE1nWVd4emJ5QmhJRVJoZEdVZ2IySnFaV04wSUhSb1lYUWdjbVZtWlhKeklIUnZJSFJvWlNCellXMWxJSFJwYldVdVhHNGdJSDBnWld4elpTQnBaaUFvZFhScGJDNXBjMFJoZEdVb1lXTjBkV0ZzS1NBbUppQjFkR2xzTG1selJHRjBaU2hsZUhCbFkzUmxaQ2twSUh0Y2JpQWdJQ0J5WlhSMWNtNGdZV04wZFdGc0xtZGxkRlJwYldVb0tTQTlQVDBnWlhod1pXTjBaV1F1WjJWMFZHbHRaU2dwTzF4dVhHNGdJQzh2SURjdU15QkpaaUIwYUdVZ1pYaHdaV04wWldRZ2RtRnNkV1VnYVhNZ1lTQlNaV2RGZUhBZ2IySnFaV04wTENCMGFHVWdZV04wZFdGc0lIWmhiSFZsSUdselhHNGdJQzh2SUdWeGRXbDJZV3hsYm5RZ2FXWWdhWFFnYVhNZ1lXeHpieUJoSUZKbFowVjRjQ0J2WW1wbFkzUWdkMmwwYUNCMGFHVWdjMkZ0WlNCemIzVnlZMlVnWVc1a1hHNGdJQzh2SUhCeWIzQmxjblJwWlhNZ0tHQm5iRzlpWVd4Z0xDQmdiWFZzZEdsc2FXNWxZQ3dnWUd4aGMzUkpibVJsZUdBc0lHQnBaMjV2Y21WRFlYTmxZQ2t1WEc0Z0lIMGdaV3h6WlNCcFppQW9kWFJwYkM1cGMxSmxaMFY0Y0NoaFkzUjFZV3dwSUNZbUlIVjBhV3d1YVhOU1pXZEZlSEFvWlhod1pXTjBaV1FwS1NCN1hHNGdJQ0FnY21WMGRYSnVJR0ZqZEhWaGJDNXpiM1Z5WTJVZ1BUMDlJR1Y0Y0dWamRHVmtMbk52ZFhKalpTQW1KbHh1SUNBZ0lDQWdJQ0FnSUNCaFkzUjFZV3d1WjJ4dlltRnNJRDA5UFNCbGVIQmxZM1JsWkM1bmJHOWlZV3dnSmlaY2JpQWdJQ0FnSUNBZ0lDQWdZV04wZFdGc0xtMTFiSFJwYkdsdVpTQTlQVDBnWlhod1pXTjBaV1F1YlhWc2RHbHNhVzVsSUNZbVhHNGdJQ0FnSUNBZ0lDQWdJR0ZqZEhWaGJDNXNZWE4wU1c1a1pYZ2dQVDA5SUdWNGNHVmpkR1ZrTG14aGMzUkpibVJsZUNBbUpseHVJQ0FnSUNBZ0lDQWdJQ0JoWTNSMVlXd3VhV2R1YjNKbFEyRnpaU0E5UFQwZ1pYaHdaV04wWldRdWFXZHViM0psUTJGelpUdGNibHh1SUNBdkx5QTNMalF1SUU5MGFHVnlJSEJoYVhKeklIUm9ZWFFnWkc4Z2JtOTBJR0p2ZEdnZ2NHRnpjeUIwZVhCbGIyWWdkbUZzZFdVZ1BUMGdKMjlpYW1WamRDY3NYRzRnSUM4dklHVnhkV2wyWVd4bGJtTmxJR2x6SUdSbGRHVnliV2x1WldRZ1lua2dQVDB1WEc0Z0lIMGdaV3h6WlNCcFppQW9LR0ZqZEhWaGJDQTlQVDBnYm5Wc2JDQjhmQ0IwZVhCbGIyWWdZV04wZFdGc0lDRTlQU0FuYjJKcVpXTjBKeWtnSmlaY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FvWlhod1pXTjBaV1FnUFQwOUlHNTFiR3dnZkh3Z2RIbHdaVzltSUdWNGNHVmpkR1ZrSUNFOVBTQW5iMkpxWldOMEp5a3BJSHRjYmlBZ0lDQnlaWFIxY200Z2MzUnlhV04wSUQ4Z1lXTjBkV0ZzSUQwOVBTQmxlSEJsWTNSbFpDQTZJR0ZqZEhWaGJDQTlQU0JsZUhCbFkzUmxaRHRjYmx4dUlDQXZMeUJKWmlCaWIzUm9JSFpoYkhWbGN5QmhjbVVnYVc1emRHRnVZMlZ6SUc5bUlIUjVjR1ZrSUdGeWNtRjVjeXdnZDNKaGNDQjBhR1ZwY2lCMWJtUmxjbXg1YVc1blhHNGdJQzh2SUVGeWNtRjVRblZtWm1WeWN5QnBiaUJoSUVKMVptWmxjaUJsWVdOb0lIUnZJR2x1WTNKbFlYTmxJSEJsY21admNtMWhibU5sWEc0Z0lDOHZJRlJvYVhNZ2IzQjBhVzFwZW1GMGFXOXVJSEpsY1hWcGNtVnpJSFJvWlNCaGNuSmhlWE1nZEc4Z2FHRjJaU0IwYUdVZ2MyRnRaU0IwZVhCbElHRnpJR05vWldOclpXUWdZbmxjYmlBZ0x5OGdUMkpxWldOMExuQnliM1J2ZEhsd1pTNTBiMU4wY21sdVp5QW9ZV3RoSUhCVWIxTjBjbWx1WnlrdUlFNWxkbVZ5SUhCbGNtWnZjbTBnWW1sdVlYSjVYRzRnSUM4dklHTnZiWEJoY21semIyNXpJR1p2Y2lCR2JHOWhkQ3BCY25KaGVYTXNJSFJvYjNWbmFDd2djMmx1WTJVZ1pTNW5MaUFyTUNBOVBUMGdMVEFnWW5WMElIUm9aV2x5WEc0Z0lDOHZJR0pwZENCd1lYUjBaWEp1Y3lCaGNtVWdibTkwSUdsa1pXNTBhV05oYkM1Y2JpQWdmU0JsYkhObElHbG1JQ2hwYzFacFpYY29ZV04wZFdGc0tTQW1KaUJwYzFacFpYY29aWGh3WldOMFpXUXBJQ1ltWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdjRlJ2VTNSeWFXNW5LR0ZqZEhWaGJDa2dQVDA5SUhCVWIxTjBjbWx1WnlobGVIQmxZM1JsWkNrZ0ppWmNiaUFnSUNBZ0lDQWdJQ0FnSUNBaEtHRmpkSFZoYkNCcGJuTjBZVzVqWlc5bUlFWnNiMkYwTXpKQmNuSmhlU0I4ZkZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnWVdOMGRXRnNJR2x1YzNSaGJtTmxiMllnUm14dllYUTJORUZ5Y21GNUtTa2dlMXh1SUNBZ0lISmxkSFZ5YmlCamIyMXdZWEpsS0c1bGR5QlZhVzUwT0VGeWNtRjVLR0ZqZEhWaGJDNWlkV1ptWlhJcExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzVsZHlCVmFXNTBPRUZ5Y21GNUtHVjRjR1ZqZEdWa0xtSjFabVpsY2lrcElEMDlQU0F3TzF4dVhHNGdJQzh2SURjdU5TQkdiM0lnWVd4c0lHOTBhR1Z5SUU5aWFtVmpkQ0J3WVdseWN5d2dhVzVqYkhWa2FXNW5JRUZ5Y21GNUlHOWlhbVZqZEhNc0lHVnhkV2wyWVd4bGJtTmxJR2x6WEc0Z0lDOHZJR1JsZEdWeWJXbHVaV1FnWW5rZ2FHRjJhVzVuSUhSb1pTQnpZVzFsSUc1MWJXSmxjaUJ2WmlCdmQyNWxaQ0J3Y205d1pYSjBhV1Z6SUNoaGN5QjJaWEpwWm1sbFpGeHVJQ0F2THlCM2FYUm9JRTlpYW1WamRDNXdjbTkwYjNSNWNHVXVhR0Z6VDNkdVVISnZjR1Z5ZEhrdVkyRnNiQ2tzSUhSb1pTQnpZVzFsSUhObGRDQnZaaUJyWlhselhHNGdJQzh2SUNoaGJIUm9iM1ZuYUNCdWIzUWdibVZqWlhOellYSnBiSGtnZEdobElITmhiV1VnYjNKa1pYSXBMQ0JsY1hWcGRtRnNaVzUwSUhaaGJIVmxjeUJtYjNJZ1pYWmxjbmxjYmlBZ0x5OGdZMjl5Y21WemNHOXVaR2x1WnlCclpYa3NJR0Z1WkNCaGJpQnBaR1Z1ZEdsallXd2dKM0J5YjNSdmRIbHdaU2NnY0hKdmNHVnlkSGt1SUU1dmRHVTZJSFJvYVhOY2JpQWdMeThnWVdOamIzVnVkSE1nWm05eUlHSnZkR2dnYm1GdFpXUWdZVzVrSUdsdVpHVjRaV1FnY0hKdmNHVnlkR2xsY3lCdmJpQkJjbkpoZVhNdVhHNGdJSDBnWld4elpTQnBaaUFvYVhOQ2RXWm1aWElvWVdOMGRXRnNLU0FoUFQwZ2FYTkNkV1ptWlhJb1pYaHdaV04wWldRcEtTQjdYRzRnSUNBZ2NtVjBkWEp1SUdaaGJITmxPMXh1SUNCOUlHVnNjMlVnZTF4dUlDQWdJRzFsYlc5eklEMGdiV1Z0YjNNZ2ZId2dlMkZqZEhWaGJEb2dXMTBzSUdWNGNHVmpkR1ZrT2lCYlhYMDdYRzVjYmlBZ0lDQjJZWElnWVdOMGRXRnNTVzVrWlhnZ1BTQnRaVzF2Y3k1aFkzUjFZV3d1YVc1a1pYaFBaaWhoWTNSMVlXd3BPMXh1SUNBZ0lHbG1JQ2hoWTNSMVlXeEpibVJsZUNBaFBUMGdMVEVwSUh0Y2JpQWdJQ0FnSUdsbUlDaGhZM1IxWVd4SmJtUmxlQ0E5UFQwZ2JXVnRiM011Wlhod1pXTjBaV1F1YVc1a1pYaFBaaWhsZUhCbFkzUmxaQ2twSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSeWRXVTdYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2JXVnRiM011WVdOMGRXRnNMbkIxYzJnb1lXTjBkV0ZzS1R0Y2JpQWdJQ0J0WlcxdmN5NWxlSEJsWTNSbFpDNXdkWE5vS0dWNGNHVmpkR1ZrS1R0Y2JseHVJQ0FnSUhKbGRIVnliaUJ2WW1wRmNYVnBkaWhoWTNSMVlXd3NJR1Y0Y0dWamRHVmtMQ0J6ZEhKcFkzUXNJRzFsYlc5ektUdGNiaUFnZlZ4dWZWeHVYRzVtZFc1amRHbHZiaUJwYzBGeVozVnRaVzUwY3lodlltcGxZM1FwSUh0Y2JpQWdjbVYwZFhKdUlFOWlhbVZqZEM1d2NtOTBiM1I1Y0dVdWRHOVRkSEpwYm1jdVkyRnNiQ2h2WW1wbFkzUXBJRDA5SUNkYmIySnFaV04wSUVGeVozVnRaVzUwYzEwbk8xeHVmVnh1WEc1bWRXNWpkR2x2YmlCdlltcEZjWFZwZGloaExDQmlMQ0J6ZEhKcFkzUXNJR0ZqZEhWaGJGWnBjMmwwWldSUFltcGxZM1J6S1NCN1hHNGdJR2xtSUNoaElEMDlQU0J1ZFd4c0lIeDhJR0VnUFQwOUlIVnVaR1ZtYVc1bFpDQjhmQ0JpSUQwOVBTQnVkV3hzSUh4OElHSWdQVDA5SUhWdVpHVm1hVzVsWkNsY2JpQWdJQ0J5WlhSMWNtNGdabUZzYzJVN1hHNGdJQzh2SUdsbUlHOXVaU0JwY3lCaElIQnlhVzFwZEdsMlpTd2dkR2hsSUc5MGFHVnlJRzExYzNRZ1ltVWdjMkZ0WlZ4dUlDQnBaaUFvZFhScGJDNXBjMUJ5YVcxcGRHbDJaU2hoS1NCOGZDQjFkR2xzTG1selVISnBiV2wwYVhabEtHSXBLVnh1SUNBZ0lISmxkSFZ5YmlCaElEMDlQU0JpTzF4dUlDQnBaaUFvYzNSeWFXTjBJQ1ltSUU5aWFtVmpkQzVuWlhSUWNtOTBiM1I1Y0dWUFppaGhLU0FoUFQwZ1QySnFaV04wTG1kbGRGQnliM1J2ZEhsd1pVOW1LR0lwS1Z4dUlDQWdJSEpsZEhWeWJpQm1ZV3h6WlR0Y2JpQWdkbUZ5SUdGSmMwRnlaM01nUFNCcGMwRnlaM1Z0Wlc1MGN5aGhLVHRjYmlBZ2RtRnlJR0pKYzBGeVozTWdQU0JwYzBGeVozVnRaVzUwY3loaUtUdGNiaUFnYVdZZ0tDaGhTWE5CY21keklDWW1JQ0ZpU1hOQmNtZHpLU0I4ZkNBb0lXRkpjMEZ5WjNNZ0ppWWdZa2x6UVhKbmN5a3BYRzRnSUNBZ2NtVjBkWEp1SUdaaGJITmxPMXh1SUNCcFppQW9ZVWx6UVhKbmN5a2dlMXh1SUNBZ0lHRWdQU0J3VTJ4cFkyVXVZMkZzYkNoaEtUdGNiaUFnSUNCaUlEMGdjRk5zYVdObExtTmhiR3dvWWlrN1hHNGdJQ0FnY21WMGRYSnVJRjlrWldWd1JYRjFZV3dvWVN3Z1lpd2djM1J5YVdOMEtUdGNiaUFnZlZ4dUlDQjJZWElnYTJFZ1BTQnZZbXBsWTNSTFpYbHpLR0VwTzF4dUlDQjJZWElnYTJJZ1BTQnZZbXBsWTNSTFpYbHpLR0lwTzF4dUlDQjJZWElnYTJWNUxDQnBPMXh1SUNBdkx5Qm9ZWFpwYm1jZ2RHaGxJSE5oYldVZ2JuVnRZbVZ5SUc5bUlHOTNibVZrSUhCeWIzQmxjblJwWlhNZ0tHdGxlWE1nYVc1amIzSndiM0poZEdWelhHNGdJQzh2SUdoaGMwOTNibEJ5YjNCbGNuUjVLVnh1SUNCcFppQW9hMkV1YkdWdVozUm9JQ0U5UFNCcllpNXNaVzVuZEdncFhHNGdJQ0FnY21WMGRYSnVJR1poYkhObE8xeHVJQ0F2TDNSb1pTQnpZVzFsSUhObGRDQnZaaUJyWlhseklDaGhiSFJvYjNWbmFDQnViM1FnYm1WalpYTnpZWEpwYkhrZ2RHaGxJSE5oYldVZ2IzSmtaWElwTEZ4dUlDQnJZUzV6YjNKMEtDazdYRzRnSUd0aUxuTnZjblFvS1R0Y2JpQWdMeTkrZm41amFHVmhjQ0JyWlhrZ2RHVnpkRnh1SUNCbWIzSWdLR2tnUFNCcllTNXNaVzVuZEdnZ0xTQXhPeUJwSUQ0OUlEQTdJR2t0TFNrZ2UxeHVJQ0FnSUdsbUlDaHJZVnRwWFNBaFBUMGdhMkpiYVYwcFhHNGdJQ0FnSUNCeVpYUjFjbTRnWm1Gc2MyVTdYRzRnSUgxY2JpQWdMeTlsY1hWcGRtRnNaVzUwSUhaaGJIVmxjeUJtYjNJZ1pYWmxjbmtnWTI5eWNtVnpjRzl1WkdsdVp5QnJaWGtzSUdGdVpGeHVJQ0F2TDM1K2ZuQnZjM05wWW14NUlHVjRjR1Z1YzJsMlpTQmtaV1Z3SUhSbGMzUmNiaUFnWm05eUlDaHBJRDBnYTJFdWJHVnVaM1JvSUMwZ01Uc2dhU0ErUFNBd095QnBMUzBwSUh0Y2JpQWdJQ0JyWlhrZ1BTQnJZVnRwWFR0Y2JpQWdJQ0JwWmlBb0lWOWtaV1Z3UlhGMVlXd29ZVnRyWlhsZExDQmlXMnRsZVYwc0lITjBjbWxqZEN3Z1lXTjBkV0ZzVm1semFYUmxaRTlpYW1WamRITXBLVnh1SUNBZ0lDQWdjbVYwZFhKdUlHWmhiSE5sTzF4dUlDQjlYRzRnSUhKbGRIVnliaUIwY25WbE8xeHVmVnh1WEc0dkx5QTRMaUJVYUdVZ2JtOXVMV1Z4ZFdsMllXeGxibU5sSUdGemMyVnlkR2x2YmlCMFpYTjBjeUJtYjNJZ1lXNTVJR1JsWlhBZ2FXNWxjWFZoYkdsMGVTNWNiaTh2SUdGemMyVnlkQzV1YjNSRVpXVndSWEYxWVd3b1lXTjBkV0ZzTENCbGVIQmxZM1JsWkN3Z2JXVnpjMkZuWlY5dmNIUXBPMXh1WEc1aGMzTmxjblF1Ym05MFJHVmxjRVZ4ZFdGc0lEMGdablZ1WTNScGIyNGdibTkwUkdWbGNFVnhkV0ZzS0dGamRIVmhiQ3dnWlhod1pXTjBaV1FzSUcxbGMzTmhaMlVwSUh0Y2JpQWdhV1lnS0Y5a1pXVndSWEYxWVd3b1lXTjBkV0ZzTENCbGVIQmxZM1JsWkN3Z1ptRnNjMlVwS1NCN1hHNGdJQ0FnWm1GcGJDaGhZM1IxWVd3c0lHVjRjR1ZqZEdWa0xDQnRaWE56WVdkbExDQW5ibTkwUkdWbGNFVnhkV0ZzSnl3Z1lYTnpaWEowTG01dmRFUmxaWEJGY1hWaGJDazdYRzRnSUgxY2JuMDdYRzVjYm1GemMyVnlkQzV1YjNSRVpXVndVM1J5YVdOMFJYRjFZV3dnUFNCdWIzUkVaV1Z3VTNSeWFXTjBSWEYxWVd3N1hHNW1kVzVqZEdsdmJpQnViM1JFWldWd1UzUnlhV04wUlhGMVlXd29ZV04wZFdGc0xDQmxlSEJsWTNSbFpDd2diV1Z6YzJGblpTa2dlMXh1SUNCcFppQW9YMlJsWlhCRmNYVmhiQ2hoWTNSMVlXd3NJR1Y0Y0dWamRHVmtMQ0IwY25WbEtTa2dlMXh1SUNBZ0lHWmhhV3dvWVdOMGRXRnNMQ0JsZUhCbFkzUmxaQ3dnYldWemMyRm5aU3dnSjI1dmRFUmxaWEJUZEhKcFkzUkZjWFZoYkNjc0lHNXZkRVJsWlhCVGRISnBZM1JGY1hWaGJDazdYRzRnSUgxY2JuMWNibHh1WEc0dkx5QTVMaUJVYUdVZ2MzUnlhV04wSUdWeGRXRnNhWFI1SUdGemMyVnlkR2x2YmlCMFpYTjBjeUJ6ZEhKcFkzUWdaWEYxWVd4cGRIa3NJR0Z6SUdSbGRHVnliV2x1WldRZ1lua2dQVDA5TGx4dUx5OGdZWE56WlhKMExuTjBjbWxqZEVWeGRXRnNLR0ZqZEhWaGJDd2daWGh3WldOMFpXUXNJRzFsYzNOaFoyVmZiM0IwS1R0Y2JseHVZWE56WlhKMExuTjBjbWxqZEVWeGRXRnNJRDBnWm5WdVkzUnBiMjRnYzNSeWFXTjBSWEYxWVd3b1lXTjBkV0ZzTENCbGVIQmxZM1JsWkN3Z2JXVnpjMkZuWlNrZ2UxeHVJQ0JwWmlBb1lXTjBkV0ZzSUNFOVBTQmxlSEJsWTNSbFpDa2dlMXh1SUNBZ0lHWmhhV3dvWVdOMGRXRnNMQ0JsZUhCbFkzUmxaQ3dnYldWemMyRm5aU3dnSnowOVBTY3NJR0Z6YzJWeWRDNXpkSEpwWTNSRmNYVmhiQ2s3WEc0Z0lIMWNibjA3WEc1Y2JpOHZJREV3TGlCVWFHVWdjM1J5YVdOMElHNXZiaTFsY1hWaGJHbDBlU0JoYzNObGNuUnBiMjRnZEdWemRITWdabTl5SUhOMGNtbGpkQ0JwYm1WeGRXRnNhWFI1TENCaGMxeHVMeThnWkdWMFpYSnRhVzVsWkNCaWVTQWhQVDB1SUNCaGMzTmxjblF1Ym05MFUzUnlhV04wUlhGMVlXd29ZV04wZFdGc0xDQmxlSEJsWTNSbFpDd2diV1Z6YzJGblpWOXZjSFFwTzF4dVhHNWhjM05sY25RdWJtOTBVM1J5YVdOMFJYRjFZV3dnUFNCbWRXNWpkR2x2YmlCdWIzUlRkSEpwWTNSRmNYVmhiQ2hoWTNSMVlXd3NJR1Y0Y0dWamRHVmtMQ0J0WlhOellXZGxLU0I3WEc0Z0lHbG1JQ2hoWTNSMVlXd2dQVDA5SUdWNGNHVmpkR1ZrS1NCN1hHNGdJQ0FnWm1GcGJDaGhZM1IxWVd3c0lHVjRjR1ZqZEdWa0xDQnRaWE56WVdkbExDQW5JVDA5Snl3Z1lYTnpaWEowTG01dmRGTjBjbWxqZEVWeGRXRnNLVHRjYmlBZ2ZWeHVmVHRjYmx4dVpuVnVZM1JwYjI0Z1pYaHdaV04wWldSRmVHTmxjSFJwYjI0b1lXTjBkV0ZzTENCbGVIQmxZM1JsWkNrZ2UxeHVJQ0JwWmlBb0lXRmpkSFZoYkNCOGZDQWhaWGh3WldOMFpXUXBJSHRjYmlBZ0lDQnlaWFIxY200Z1ptRnNjMlU3WEc0Z0lIMWNibHh1SUNCcFppQW9UMkpxWldOMExuQnliM1J2ZEhsd1pTNTBiMU4wY21sdVp5NWpZV3hzS0dWNGNHVmpkR1ZrS1NBOVBTQW5XMjlpYW1WamRDQlNaV2RGZUhCZEp5a2dlMXh1SUNBZ0lISmxkSFZ5YmlCbGVIQmxZM1JsWkM1MFpYTjBLR0ZqZEhWaGJDazdYRzRnSUgxY2JseHVJQ0IwY25rZ2UxeHVJQ0FnSUdsbUlDaGhZM1IxWVd3Z2FXNXpkR0Z1WTJWdlppQmxlSEJsWTNSbFpDa2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlIUnlkV1U3WEc0Z0lDQWdmVnh1SUNCOUlHTmhkR05vSUNobEtTQjdYRzRnSUNBZ0x5OGdTV2R1YjNKbExpQWdWR2hsSUdsdWMzUmhibU5sYjJZZ1kyaGxZMnNnWkc5bGMyNG5kQ0IzYjNKcklHWnZjaUJoY25KdmR5Qm1kVzVqZEdsdmJuTXVYRzRnSUgxY2JseHVJQ0JwWmlBb1JYSnliM0l1YVhOUWNtOTBiM1I1Y0dWUFppaGxlSEJsWTNSbFpDa3BJSHRjYmlBZ0lDQnlaWFIxY200Z1ptRnNjMlU3WEc0Z0lIMWNibHh1SUNCeVpYUjFjbTRnWlhod1pXTjBaV1F1WTJGc2JDaDdmU3dnWVdOMGRXRnNLU0E5UFQwZ2RISjFaVHRjYm4xY2JseHVablZ1WTNScGIyNGdYM1J5ZVVKc2IyTnJLR0pzYjJOcktTQjdYRzRnSUhaaGNpQmxjbkp2Y2p0Y2JpQWdkSEo1SUh0Y2JpQWdJQ0JpYkc5amF5Z3BPMXh1SUNCOUlHTmhkR05vSUNobEtTQjdYRzRnSUNBZ1pYSnliM0lnUFNCbE8xeHVJQ0I5WEc0Z0lISmxkSFZ5YmlCbGNuSnZjanRjYm4xY2JseHVablZ1WTNScGIyNGdYM1JvY205M2N5aHphRzkxYkdSVWFISnZkeXdnWW14dlkyc3NJR1Y0Y0dWamRHVmtMQ0J0WlhOellXZGxLU0I3WEc0Z0lIWmhjaUJoWTNSMVlXdzdYRzVjYmlBZ2FXWWdLSFI1Y0dWdlppQmliRzlqYXlBaFBUMGdKMloxYm1OMGFXOXVKeWtnZTF4dUlDQWdJSFJvY205M0lHNWxkeUJVZVhCbFJYSnliM0lvSjF3aVlteHZZMnRjSWlCaGNtZDFiV1Z1ZENCdGRYTjBJR0psSUdFZ1puVnVZM1JwYjI0bktUdGNiaUFnZlZ4dVhHNGdJR2xtSUNoMGVYQmxiMllnWlhod1pXTjBaV1FnUFQwOUlDZHpkSEpwYm1jbktTQjdYRzRnSUNBZ2JXVnpjMkZuWlNBOUlHVjRjR1ZqZEdWa08xeHVJQ0FnSUdWNGNHVmpkR1ZrSUQwZ2JuVnNiRHRjYmlBZ2ZWeHVYRzRnSUdGamRIVmhiQ0E5SUY5MGNubENiRzlqYXloaWJHOWpheWs3WEc1Y2JpQWdiV1Z6YzJGblpTQTlJQ2hsZUhCbFkzUmxaQ0FtSmlCbGVIQmxZM1JsWkM1dVlXMWxJRDhnSnlBb0p5QXJJR1Y0Y0dWamRHVmtMbTVoYldVZ0t5QW5LUzRuSURvZ0p5NG5LU0FyWEc0Z0lDQWdJQ0FnSUNBZ0lDQW9iV1Z6YzJGblpTQS9JQ2NnSnlBcklHMWxjM05oWjJVZ09pQW5MaWNwTzF4dVhHNGdJR2xtSUNoemFHOTFiR1JVYUhKdmR5QW1KaUFoWVdOMGRXRnNLU0I3WEc0Z0lDQWdabUZwYkNoaFkzUjFZV3dzSUdWNGNHVmpkR1ZrTENBblRXbHpjMmx1WnlCbGVIQmxZM1JsWkNCbGVHTmxjSFJwYjI0bklDc2diV1Z6YzJGblpTazdYRzRnSUgxY2JseHVJQ0IyWVhJZ2RYTmxjbEJ5YjNacFpHVmtUV1Z6YzJGblpTQTlJSFI1Y0dWdlppQnRaWE56WVdkbElEMDlQU0FuYzNSeWFXNW5KenRjYmlBZ2RtRnlJR2x6Vlc1M1lXNTBaV1JGZUdObGNIUnBiMjRnUFNBaGMyaHZkV3hrVkdoeWIzY2dKaVlnZFhScGJDNXBjMFZ5Y205eUtHRmpkSFZoYkNrN1hHNGdJSFpoY2lCcGMxVnVaWGh3WldOMFpXUkZlR05sY0hScGIyNGdQU0FoYzJodmRXeGtWR2h5YjNjZ0ppWWdZV04wZFdGc0lDWW1JQ0ZsZUhCbFkzUmxaRHRjYmx4dUlDQnBaaUFvS0dselZXNTNZVzUwWldSRmVHTmxjSFJwYjI0Z0ppWmNiaUFnSUNBZ0lIVnpaWEpRY205MmFXUmxaRTFsYzNOaFoyVWdKaVpjYmlBZ0lDQWdJR1Y0Y0dWamRHVmtSWGhqWlhCMGFXOXVLR0ZqZEhWaGJDd2daWGh3WldOMFpXUXBLU0I4ZkZ4dUlDQWdJQ0FnYVhOVmJtVjRjR1ZqZEdWa1JYaGpaWEIwYVc5dUtTQjdYRzRnSUNBZ1ptRnBiQ2hoWTNSMVlXd3NJR1Y0Y0dWamRHVmtMQ0FuUjI5MElIVnVkMkZ1ZEdWa0lHVjRZMlZ3ZEdsdmJpY2dLeUJ0WlhOellXZGxLVHRjYmlBZ2ZWeHVYRzRnSUdsbUlDZ29jMmh2ZFd4a1ZHaHliM2NnSmlZZ1lXTjBkV0ZzSUNZbUlHVjRjR1ZqZEdWa0lDWW1YRzRnSUNBZ0lDQWhaWGh3WldOMFpXUkZlR05sY0hScGIyNG9ZV04wZFdGc0xDQmxlSEJsWTNSbFpDa3BJSHg4SUNnaGMyaHZkV3hrVkdoeWIzY2dKaVlnWVdOMGRXRnNLU2tnZTF4dUlDQWdJSFJvY205M0lHRmpkSFZoYkR0Y2JpQWdmVnh1ZlZ4dVhHNHZMeUF4TVM0Z1JYaHdaV04wWldRZ2RHOGdkR2h5YjNjZ1lXNGdaWEp5YjNJNlhHNHZMeUJoYzNObGNuUXVkR2h5YjNkektHSnNiMk5yTENCRmNuSnZjbDl2Y0hRc0lHMWxjM05oWjJWZmIzQjBLVHRjYmx4dVlYTnpaWEowTG5Sb2NtOTNjeUE5SUdaMWJtTjBhVzl1S0dKc2IyTnJMQ0F2S205d2RHbHZibUZzS2k5bGNuSnZjaXdnTHlwdmNIUnBiMjVoYkNvdmJXVnpjMkZuWlNrZ2UxeHVJQ0JmZEdoeWIzZHpLSFJ5ZFdVc0lHSnNiMk5yTENCbGNuSnZjaXdnYldWemMyRm5aU2s3WEc1OU8xeHVYRzR2THlCRldGUkZUbE5KVDA0aElGUm9hWE1nYVhNZ1lXNXViM2xwYm1jZ2RHOGdkM0pwZEdVZ2IzVjBjMmxrWlNCMGFHbHpJRzF2WkhWc1pTNWNibUZ6YzJWeWRDNWtiMlZ6VG05MFZHaHliM2NnUFNCbWRXNWpkR2x2YmloaWJHOWpheXdnTHlwdmNIUnBiMjVoYkNvdlpYSnliM0lzSUM4cWIzQjBhVzl1WVd3cUwyMWxjM05oWjJVcElIdGNiaUFnWDNSb2NtOTNjeWhtWVd4elpTd2dZbXh2WTJzc0lHVnljbTl5TENCdFpYTnpZV2RsS1R0Y2JuMDdYRzVjYm1GemMyVnlkQzVwWmtWeWNtOXlJRDBnWm5WdVkzUnBiMjRvWlhKeUtTQjdJR2xtSUNobGNuSXBJSFJvY205M0lHVnljanNnZlR0Y2JseHVkbUZ5SUc5aWFtVmpkRXRsZVhNZ1BTQlBZbXBsWTNRdWEyVjVjeUI4ZkNCbWRXNWpkR2x2YmlBb2IySnFLU0I3WEc0Z0lIWmhjaUJyWlhseklEMGdXMTA3WEc0Z0lHWnZjaUFvZG1GeUlHdGxlU0JwYmlCdlltb3BJSHRjYmlBZ0lDQnBaaUFvYUdGelQzZHVMbU5oYkd3b2IySnFMQ0JyWlhrcEtTQnJaWGx6TG5CMWMyZ29hMlY1S1R0Y2JpQWdmVnh1SUNCeVpYUjFjbTRnYTJWNWN6dGNibjA3WEc1Y2JseHVYRzR2THk4dkx5OHZMeTh2THk4dkx5OHZMeTljYmk4dklGZEZRbEJCUTBzZ1JrOVBWRVZTWEc0dkx5QXVMMzR2WVhOelpYSjBMMkZ6YzJWeWRDNXFjMXh1THk4Z2JXOWtkV3hsSUdsa0lEMGdOekZjYmk4dklHMXZaSFZzWlNCamFIVnVhM01nUFNBd0lsMHNJbTFoY0hCcGJtZHpJam9pUVVGQlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FTSXNJbk52ZFhKalpWSnZiM1FpT2lJaWZRPT1cIik7XG5cbi8qKiovIH0pLFxuLyogNzIgKi9cbi8qIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKiBhbGwgZXhwb3J0cyB1c2VkICovXG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL2Jhc2ljL2xpbmVzLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbmV2YWwoXCJcXG5cXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXFxcIl9fZXNNb2R1bGVcXFwiLCB7XFxuICB2YWx1ZTogdHJ1ZVxcbn0pO1xcblxcbnZhciBfaWRlbnRpdHkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISByYW1kYS9zcmMvaWRlbnRpdHkgKi8gMTQ5KTtcXG5cXG52YXIgX2lkZW50aXR5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2lkZW50aXR5KTtcXG5cXG52YXIgX2NvbmQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISByYW1kYS9zcmMvY29uZCAqLyAxNDQpO1xcblxcbnZhciBfY29uZDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jb25kKTtcXG5cXG52YXIgX2VxdWFscyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIHJhbWRhL3NyYy9lcXVhbHMgKi8gNTYpO1xcblxcbnZhciBfZXF1YWxzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2VxdWFscyk7XFxuXFxudmFyIF9ub3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISByYW1kYS9zcmMvbm90ICovIDY0KTtcXG5cXG52YXIgX25vdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9ub3QpO1xcblxcbnZhciBfY29tcG9zZSA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIHJhbWRhL3NyYy9jb21wb3NlICovIDEzKTtcXG5cXG52YXIgX2NvbXBvc2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY29tcG9zZSk7XFxuXFxudmFyIF9jdXJyeSA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIHJhbWRhL3NyYy9jdXJyeSAqLyAyNCk7XFxuXFxudmFyIF9jdXJyeTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jdXJyeSk7XFxuXFxudmFyIF9yZWZlcmVuY2VIZWxwZXJzID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vdXRpbHMvcmVmZXJlbmNlLWhlbHBlcnMgKi8gMTgpO1xcblxcbnZhciBfcmVmZXJlbmNlID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vdXRpbHMvcmVmZXJlbmNlICovIDkpO1xcblxcbnZhciBfcmVmZXJlbmNlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlZmVyZW5jZSk7XFxuXFxudmFyIF9nZW9tID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vdXRpbHMvZ2VvbSAqLyA3OCk7XFxuXFxudmFyIF9nZW9tMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2dlb20pO1xcblxcbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XFxuXFxuLypcXG5cXHQgX19fICAgICAgIF9fXyAgX19fX19fX18gICBfX19fX19fICAgX19fX19fX19cXG5cXHR8XFxcXCAgXFxcXCAgICAgfFxcXFwgIFxcXFx8XFxcXCAgIF9fXyAgXFxcXHxcXFxcICBfX18gXFxcXCB8XFxcXCAgIF9fX19cXFxcXFxuXFx0XFxcXCBcXFxcICBcXFxcICAgIFxcXFwgXFxcXCAgXFxcXCBcXFxcICBcXFxcXFxcXCBcXFxcICBcXFxcIFxcXFwgICBfXy98XFxcXCBcXFxcICBcXFxcX19ffF9cXG5cXHQgXFxcXCBcXFxcICBcXFxcICAgIFxcXFwgXFxcXCAgXFxcXCBcXFxcICBcXFxcXFxcXCBcXFxcICBcXFxcIFxcXFwgIFxcXFxffC9fXFxcXCBcXFxcX19fX18gIFxcXFxcXG5cXHQgIFxcXFwgXFxcXCAgXFxcXF9fX19cXFxcIFxcXFwgIFxcXFwgXFxcXCAgXFxcXFxcXFwgXFxcXCAgXFxcXCBcXFxcICBcXFxcX3xcXFxcIFxcXFx8X19fX3xcXFxcICBcXFxcXFxuXFx0ICAgXFxcXCBcXFxcX19fX19fX1xcXFwgXFxcXF9fXFxcXCBcXFxcX19cXFxcXFxcXCBcXFxcX19cXFxcIFxcXFxfX19fX19fXFxcXF9fX19cXFxcX1xcXFwgIFxcXFxcXG5cXHQgICAgXFxcXHxfX19fX19ffFxcXFx8X198XFxcXHxfX3wgXFxcXHxfX3xcXFxcfF9fX19fX198XFxcXF9fX19fX19fX1xcXFxcXG5cXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcXFxcfF9fX19fX19fX3xcXG5cXG4gKi9cXG5cXG4vKlxcblxcdEVYVEVSTkFMIERFUEVOREVOQ0lFU1xcbiAqL1xcblxcbnZhciBub3RFcSA9ICgwLCBfY3VycnkyLmRlZmF1bHQpKCgwLCBfY29tcG9zZTIuZGVmYXVsdCkoX25vdDIuZGVmYXVsdCwgX2VxdWFsczIuZGVmYXVsdCkpO1xcblxcbi8qXFxuXFx0SU5URVJOQUwgREVQRU5ERU5DSUVTXFxuICovXFxuXFxudmFyIExSID0gX3JlZmVyZW5jZTIuZGVmYXVsdC5nZXRMaW5lKG51bGwpOyAvLyBMaW5lIHJlZmVyZW5jZVxcbi8qXFxuXFx0SU5URVJOQUwgTElORSBGVU5DVElPTlNcXG4gKi9cXG5cXG52YXIgY2hlY2tMaW5lU3ltID0gX3JlZmVyZW5jZTIuZGVmYXVsdC5jaGVja1N5bWJvbGl6ZXIoJ2xpbmUnKTtcXG5cXG4vKipcXG4gKiBGdW5jdGlvbiBmb3IgZ2V0dGluZyB0aGUgY29sb3IgaW4gcmdiYVxcbiAqXFxuICogQHBhcmFtICAge29iamVjdH0gYzNzcyBjb21waWxlZCBjYXJ0byBjc3NcXG4gKiBAcmV0dXJucyB7b2JqZWN0fSB3aXRoIGEgZnVuY3Rpb24gdGhhdCBjb250YWluIHRoZSBjb25kaXRpb25zIHRvIHJldHVybiBhIGNvbG9yIHdpdGggYWxwaGEgY2hhbm5lbFxcbiAqL1xcblxcbnZhciBnZXRDb2xvciA9ICgwLCBfcmVmZXJlbmNlSGVscGVycy5nZXRDb2xvckZuKSgoMCwgX3JlZmVyZW5jZUhlbHBlcnMuZ2V0UHJvcGVydHlPckRlZkZuKSgnc3Ryb2tlJywgTFIpLCAoMCwgX3JlZmVyZW5jZUhlbHBlcnMuZ2V0UHJvcGVydHlPckRlZkZuKSgnc3Ryb2tlLW9wYWNpdHknLCBMUikpO1xcblxcbi8qKlxcbiAqIEZ1bmN0aW9uIGZvciBnZXR0aW5nIGV4dHJ1ZGUgcHJvcGVydHlcXG4gKlxcbiAqIEBwYXJhbSAgIHtvYmplY3R9IGMzc3MgY29tcGlsZWQgY2FydG8gY3NzXFxuICogQHJldHVybnMge29iamVjdH0gd2l0aCBhIGZ1bmN0aW9uIHRoYXQgY29udGFpbiB0aGUgY29uZGl0aW9ucyB0byByZXR1cm4gdGhlIGV4dHJ1ZGVcXG4gKi9cXG5cXG52YXIgZ2V0RXh0cnVkZSA9ICgwLCBfcmVmZXJlbmNlSGVscGVycy5nZXRQcm9wZXJ0eU9yRGVmRm4pKCd0Zy1zdHJva2UtZXh0cnVkZScpO1xcblxcbi8qKlxcbiAqIEZ1bmN0aW9uIGZvciBnZXR0aW5nIHRoZSB3aWR0aCBpbiBtZXRlcnMgZHluYW1pY2FsbHkgYnkgem9vbVxcbiAqXFxuICogQHBhcmFtICAge29iamVjdH0gYzNzcyBjb21waWxlZCBjYXJ0byBjc3NcXG4gKiBAcmV0dXJucyB7b2JqZWN0fSB3aXRoYSBhIGZ1bmN0aW9uIHdpdGggdGhlIGNvbmRpdGlvbnMgdG8gcmV0dXJuIHdpZHRoIHZhbHVlXFxuICovXFxuXFxudmFyIGdldFdpZHRoID0gKDAsIF9jb21wb3NlMi5kZWZhdWx0KShfZ2VvbTIuZGVmYXVsdC5weDJNZXRlcnMsICgwLCBfcmVmZXJlbmNlSGVscGVycy5nZXRQcm9wZXJ0eU9yRGVmRm4pKCdzdHJva2Utd2lkdGgnLCBMUikpO1xcblxcbi8qKlxcbiAqIEZ1bmN0aW9uIGZvciBnZXR0aW5nIHRoZSBjYXAgc3RhdGljYWxseVxcbiAqXFxuICogQHBhcmFtICAge29iamVjdH0gYzNzcyBjb21waWxlZCBjYXJ0byBjc3NcXG4gKiBAcmV0dXJucyB7c3RyaW5nfSB3aXRoIGNhcCB2YWx1ZSBFeDogcm91bmRcXG4gKi9cXG52YXIgZ2V0Q2FwID0gKDAsIF9yZWZlcmVuY2VIZWxwZXJzLmdldEV4ZWN1dGVkRm4pKCdzdHJva2UtbGluZWNhcCcsIExSKTtcXG5cXG4vKipcXG4gKiBGdW5jdGlvbiBmb3IgZ2V0dGluZyB0aGUgam9pbiBzdGF0aWNhbGx5XFxuICpcXG4gKiBAcGFyYW0gICB7b2JqZWN0fSBjM3NzIGNvbXBpbGVkIGNhcnRvIGNzc1xcbiAqIEByZXR1cm5zIHtzdHJpbmd9IHdpdGggam9pbiB2YWx1ZSBFeDogcm91bmRcXG4gKi9cXG52YXIgZ2V0Sm9pbiA9ICgwLCBfcmVmZXJlbmNlSGVscGVycy5nZXRFeGVjdXRlZEZuKSgnc3Ryb2tlLWxpbmVqb2luJywgTFIpO1xcblxcbi8qKlxcbiAqIEZ1bmN0aW9uIGZvciBnZXR0aW5nIHRoZSBibGVuZCBzdGF0aWNhbGx5XFxuICpcXG4gKiBAcGFyYW0gICB7b2JqZWN0fSBjM3NzIGNvbXBpbGVkIGNhcnRvIGNzc1xcbiAqIEByZXR1cm5zIHtzdHJpbmd9IHdpdGggYmxlbmRpbmcgdmFsdWUgRXg6IFxcXCJtdWx0aXBseVxcXCJcXG4gKi9cXG52YXIgZ2V0QmxlbmRpbmcgPSAoMCwgX3JlZmVyZW5jZUhlbHBlcnMuZ2V0QmxlbmRGbikoTFIpO1xcblxcbi8qKlxcbiAqIEZ1bmN0aW9uIGZvciBnZXR0aW5nIGRhc2ggdmFsdWUgc3RhdGljYWxseVxcbiAqXFxuICogQHBhcmFtICAge29iamVjdH0gYzNzcyBjb21waWxlZCBjYXJ0byBjc3NcXG4gKiBAcmV0dXJucyB7c3RyaW5nfSB3aXRoIGRhc2ggdmFsdWUgRXg6IFsyLCAxXVxcbiAqL1xcblxcbnZhciBnZXREYXNoZWQgPSAoMCwgX2NvbXBvc2UyLmRlZmF1bHQpKCgwLCBfY29uZDIuZGVmYXVsdCkoW1tub3RFcSgnbm9uZScpLCBfaWRlbnRpdHkyLmRlZmF1bHRdXSksICgwLCBfcmVmZXJlbmNlSGVscGVycy5nZXRFeGVjdXRlZEZuKSgnc3Ryb2tlLWRhc2hhcnJheScsIExSKSk7XFxuXFxuLyoqXFxuICogQmFzaWMgTGluZVxcbiAqL1xcblxcbnZhciBMaW5lID0ge307XFxuXFxuZXhwb3J0cy5kZWZhdWx0ID0gTGluZTtcXG5cXG4vKipcXG4gKiBGdW5jdGlvbiB0byBnZXQgdGhlIGRyYXcgb2JqZWN0IG9mIGEgbGluZS5cXG4gKlxcbiAqIEBwYXJhbSAgIHtvYmplY3R9IGMzc3MgY29tcGlsZWQgY2FydG8gY3NzXFxuICogQHJldHVybnMge2Z1bmN0aW9ufSBmdW5jdGlvbiB3aXRoIHRoZSBjb25kaXRpb25zIHRvIHJldHVybiBhbHBoYSB2YWx1ZVxcbiAqL1xcblxcbkxpbmUuZ2V0RHJhdyA9IGZ1bmN0aW9uIChjM3NzLCBpZCkge1xcbiAgdmFyIGRyYXcgPSB7fTtcXG4gIGlmIChjaGVja0xpbmVTeW0oYzNzcykpIHtcXG4gICAgZHJhd1snbGluZXNfJyArIGlkXSA9IHtcXG4gICAgICBjb2xvcjogZ2V0Q29sb3IoYzNzcyksXFxuICAgICAgd2lkdGg6IGdldFdpZHRoKGMzc3MpLFxcbiAgICAgIGNhcDogZ2V0Q2FwKGMzc3MpLFxcbiAgICAgIGpvaW46IGdldEpvaW4oYzNzcylcXG4gICAgfTtcXG4gIH1cXG5cXG4gIHJldHVybiBkcmF3O1xcbn07XFxuXFxuLyoqXFxuICogRnVuY3Rpb24gdG8gZ2V0IHRoZSBzdHlsZSBjb25maWd1cmF0aW9uIG9mIGEgbGluZS5cXG4gKlxcbiAqIEByZXR1cm5zIGRlZmF1bHQgc3R5bGUgY29uZmlndXJhdGlvbiBmb3IgbGluZXNcXG4gKi9cXG5MaW5lLmdldFN0eWxlID0gZnVuY3Rpb24gKGMzc3MsIGlkLCBvcmQpIHtcXG4gIHZhciBzdHlsZSA9IHt9O1xcblxcbiAgc3R5bGVbJ2xpbmVzXycgKyBpZF0gPSB7XFxuICAgIGJhc2U6ICdsaW5lcycsXFxuICAgIGJsZW5kOiBnZXRCbGVuZGluZyhjM3NzKSxcXG4gICAgZGFzaDogZ2V0RGFzaGVkKGMzc3MpLFxcbiAgICBibGVuZF9vcmRlcjogdHlwZW9mIG9yZCA9PT0gJ251bWJlcicgPyBvcmQgKyAxIDogMVxcbiAgfTtcXG5cXG4gIHJldHVybiBzdHlsZTtcXG59Oy8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pTnpJdWFuTWlMQ0p6YjNWeVkyVnpJanBiSW5kbFluQmhZMnM2THk4dmMzSmpMMkpoYzJsakwyeHBibVZ6TG1welB6UmxZV01pWFN3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaUx5cGNibHgwSUY5Zlh5QWdJQ0FnSUNCZlgxOGdJRjlmWDE5ZlgxOWZJQ0FnWDE5ZlgxOWZYeUFnSUY5ZlgxOWZYMTlmWEc1Y2RIeGNYQ0FnWEZ3Z0lDQWdJSHhjWENBZ1hGeDhYRndnSUNCZlgxOGdJRnhjZkZ4Y0lDQmZYMThnWEZ3Z2ZGeGNJQ0FnWDE5ZlgxeGNYRzVjZEZ4Y0lGeGNJQ0JjWENBZ0lDQmNYQ0JjWENBZ1hGd2dYRndnSUZ4Y1hGd2dYRndnSUZ4Y0lGeGNJQ0FnWDE4dmZGeGNJRnhjSUNCY1hGOWZYM3hmWEc1Y2RDQmNYQ0JjWENBZ1hGd2dJQ0FnWEZ3Z1hGd2dJRnhjSUZ4Y0lDQmNYRnhjSUZ4Y0lDQmNYQ0JjWENBZ1hGeGZmQzlmWEZ3Z1hGeGZYMTlmWHlBZ1hGeGNibHgwSUNCY1hDQmNYQ0FnWEZ4ZlgxOWZYRndnWEZ3Z0lGeGNJRnhjSUNCY1hGeGNJRnhjSUNCY1hDQmNYQ0FnWEZ4ZmZGeGNJRnhjZkY5ZlgxOThYRndnSUZ4Y1hHNWNkQ0FnSUZ4Y0lGeGNYMTlmWDE5ZlgxeGNJRnhjWDE5Y1hDQmNYRjlmWEZ4Y1hDQmNYRjlmWEZ3Z1hGeGZYMTlmWDE5ZlhGeGZYMTlmWEZ4ZlhGd2dJRnhjWEc1Y2RDQWdJQ0JjWEh4ZlgxOWZYMTlmZkZ4Y2ZGOWZmRnhjZkY5ZmZDQmNYSHhmWDN4Y1hIeGZYMTlmWDE5ZmZGeGNYMTlmWDE5ZlgxOWZYRnhjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdYRng4WDE5ZlgxOWZYMTlmZkZ4dVhHNGdLaTljYmx4dUx5cGNibHgwUlZoVVJWSk9RVXdnUkVWUVJVNUVSVTVEU1VWVFhHNGdLaTljYmx4dWFXMXdiM0owSUh0amRYSnllU3dnWTI5dGNHOXpaU3dnYm05MExDQmxjWFZoYkhNc0lHbGtaVzUwYVhSNUxDQmpiMjVrZlNCbWNtOXRJQ2R5WVcxa1lTYzdYRzVjYmk4cVhHNWNkRWxPVkVWU1RrRk1JRVJGVUVWT1JFVk9RMGxGVTF4dUlDb3ZYRzVjYm1sdGNHOXlkQ0I3SUdkbGRFVjRaV04xZEdWa1JtNHNJR2RsZEZCeWIzQmxjblI1VDNKRVpXWkdiaXdnWjJWMFFteGxibVJHYml3Z1oyVjBRMjlzYjNKR2JpQjlJR1p5YjIwZ0p5NHVMM1YwYVd4ekwzSmxabVZ5Wlc1alpTMW9aV3h3WlhKekp6dGNibWx0Y0c5eWRDQlVZVzVuY21GdFVtVm1aWEpsYm1ObElHWnliMjBnSnk0dUwzVjBhV3h6TDNKbFptVnlaVzVqWlNjN1hHNXBiWEJ2Y25RZ1IyVnZiU0JtY205dElDY3VMaTkxZEdsc2N5OW5aVzl0Snp0Y2JseHVZMjl1YzNRZ2JtOTBSWEVnUFNCamRYSnllU2hqYjIxd2IzTmxLRzV2ZEN3Z1pYRjFZV3h6S1NrN1hHNWNibU52Ym5OMElFeFNJRDBnVkdGdVozSmhiVkpsWm1WeVpXNWpaUzVuWlhSTWFXNWxLRzUxYkd3cE95QXZMeUJNYVc1bElISmxabVZ5Wlc1alpWeHVMeXBjYmx4MFNVNVVSVkpPUVV3Z1RFbE9SU0JHVlU1RFZFbFBUbE5jYmlBcUwxeHVYRzVqYjI1emRDQmphR1ZqYTB4cGJtVlRlVzBnUFNCVVlXNW5jbUZ0VW1WbVpYSmxibU5sTG1Ob1pXTnJVM2x0WW05c2FYcGxjaWduYkdsdVpTY3BPMXh1WEc0dktpcGNiaUFxSUVaMWJtTjBhVzl1SUdadmNpQm5aWFIwYVc1bklIUm9aU0JqYjJ4dmNpQnBiaUJ5WjJKaFhHNGdLbHh1SUNvZ1FIQmhjbUZ0SUNBZ2UyOWlhbVZqZEgwZ1l6TnpjeUJqYjIxd2FXeGxaQ0JqWVhKMGJ5QmpjM05jYmlBcUlFQnlaWFIxY201eklIdHZZbXBsWTNSOUlIZHBkR2dnWVNCbWRXNWpkR2x2YmlCMGFHRjBJR052Ym5SaGFXNGdkR2hsSUdOdmJtUnBkR2x2Ym5NZ2RHOGdjbVYwZFhKdUlHRWdZMjlzYjNJZ2QybDBhQ0JoYkhCb1lTQmphR0Z1Ym1Wc1hHNGdLaTljYmx4dVkyOXVjM1FnWjJWMFEyOXNiM0lnUFNCblpYUkRiMnh2Y2tadUtGeHVJQ0JuWlhSUWNtOXdaWEowZVU5eVJHVm1SbTRvSjNOMGNtOXJaU2NzSUV4U0tTeGNiaUFnWjJWMFVISnZjR1Z5ZEhsUGNrUmxaa1p1S0NkemRISnZhMlV0YjNCaFkybDBlU2NzSUV4U0tWeHVLVHRjYmx4dUx5b3FYRzRnS2lCR2RXNWpkR2x2YmlCbWIzSWdaMlYwZEdsdVp5QmxlSFJ5ZFdSbElIQnliM0JsY25SNVhHNGdLbHh1SUNvZ1FIQmhjbUZ0SUNBZ2UyOWlhbVZqZEgwZ1l6TnpjeUJqYjIxd2FXeGxaQ0JqWVhKMGJ5QmpjM05jYmlBcUlFQnlaWFIxY201eklIdHZZbXBsWTNSOUlIZHBkR2dnWVNCbWRXNWpkR2x2YmlCMGFHRjBJR052Ym5SaGFXNGdkR2hsSUdOdmJtUnBkR2x2Ym5NZ2RHOGdjbVYwZFhKdUlIUm9aU0JsZUhSeWRXUmxYRzRnS2k5Y2JseHVZMjl1YzNRZ1oyVjBSWGgwY25Wa1pTQTlJR2RsZEZCeWIzQmxjblI1VDNKRVpXWkdiaWduZEdjdGMzUnliMnRsTFdWNGRISjFaR1VuS1R0Y2JseHVMeW9xWEc0Z0tpQkdkVzVqZEdsdmJpQm1iM0lnWjJWMGRHbHVaeUIwYUdVZ2QybGtkR2dnYVc0Z2JXVjBaWEp6SUdSNWJtRnRhV05oYkd4NUlHSjVJSHB2YjIxY2JpQXFYRzRnS2lCQWNHRnlZVzBnSUNCN2IySnFaV04wZlNCak0zTnpJR052YlhCcGJHVmtJR05oY25SdklHTnpjMXh1SUNvZ1FISmxkSFZ5Ym5NZ2UyOWlhbVZqZEgwZ2QybDBhR0VnWVNCbWRXNWpkR2x2YmlCM2FYUm9JSFJvWlNCamIyNWthWFJwYjI1eklIUnZJSEpsZEhWeWJpQjNhV1IwYUNCMllXeDFaVnh1SUNvdlhHNWNibU52Ym5OMElHZGxkRmRwWkhSb0lEMGdZMjl0Y0c5elpTaGNiaUFnUjJWdmJTNXdlREpOWlhSbGNuTXNYRzRnSUdkbGRGQnliM0JsY25SNVQzSkVaV1pHYmlnbmMzUnliMnRsTFhkcFpIUm9KeXdnVEZJcFhHNHBPMXh1WEc0dktpcGNiaUFxSUVaMWJtTjBhVzl1SUdadmNpQm5aWFIwYVc1bklIUm9aU0JqWVhBZ2MzUmhkR2xqWVd4c2VWeHVJQ3BjYmlBcUlFQndZWEpoYlNBZ0lIdHZZbXBsWTNSOUlHTXpjM01nWTI5dGNHbHNaV1FnWTJGeWRHOGdZM056WEc0Z0tpQkFjbVYwZFhKdWN5QjdjM1J5YVc1bmZTQjNhWFJvSUdOaGNDQjJZV3gxWlNCRmVEb2djbTkxYm1SY2JpQXFMMXh1WTI5dWMzUWdaMlYwUTJGd0lEMGdaMlYwUlhobFkzVjBaV1JHYmlnbmMzUnliMnRsTFd4cGJtVmpZWEFuTENCTVVpazdYRzVjYmk4cUtseHVJQ29nUm5WdVkzUnBiMjRnWm05eUlHZGxkSFJwYm1jZ2RHaGxJR3B2YVc0Z2MzUmhkR2xqWVd4c2VWeHVJQ3BjYmlBcUlFQndZWEpoYlNBZ0lIdHZZbXBsWTNSOUlHTXpjM01nWTI5dGNHbHNaV1FnWTJGeWRHOGdZM056WEc0Z0tpQkFjbVYwZFhKdWN5QjdjM1J5YVc1bmZTQjNhWFJvSUdwdmFXNGdkbUZzZFdVZ1JYZzZJSEp2ZFc1a1hHNGdLaTljYm1OdmJuTjBJR2RsZEVwdmFXNGdQU0JuWlhSRmVHVmpkWFJsWkVadUtDZHpkSEp2YTJVdGJHbHVaV3B2YVc0bkxDQk1VaWs3WEc1Y2JpOHFLbHh1SUNvZ1JuVnVZM1JwYjI0Z1ptOXlJR2RsZEhScGJtY2dkR2hsSUdKc1pXNWtJSE4wWVhScFkyRnNiSGxjYmlBcVhHNGdLaUJBY0dGeVlXMGdJQ0I3YjJKcVpXTjBmU0JqTTNOeklHTnZiWEJwYkdWa0lHTmhjblJ2SUdOemMxeHVJQ29nUUhKbGRIVnlibk1nZTNOMGNtbHVaMzBnZDJsMGFDQmliR1Z1WkdsdVp5QjJZV3gxWlNCRmVEb2dYQ0p0ZFd4MGFYQnNlVndpWEc0Z0tpOWNibU52Ym5OMElHZGxkRUpzWlc1a2FXNW5JRDBnWjJWMFFteGxibVJHYmloTVVpazdYRzVjYmk4cUtseHVJQ29nUm5WdVkzUnBiMjRnWm05eUlHZGxkSFJwYm1jZ1pHRnphQ0IyWVd4MVpTQnpkR0YwYVdOaGJHeDVYRzRnS2x4dUlDb2dRSEJoY21GdElDQWdlMjlpYW1WamRIMGdZek56Y3lCamIyMXdhV3hsWkNCallYSjBieUJqYzNOY2JpQXFJRUJ5WlhSMWNtNXpJSHR6ZEhKcGJtZDlJSGRwZEdnZ1pHRnphQ0IyWVd4MVpTQkZlRG9nV3pJc0lERmRYRzRnS2k5Y2JseHVZMjl1YzNRZ1oyVjBSR0Z6YUdWa0lEMGdZMjl0Y0c5elpTaGNiaUFnWTI5dVpDaGJYRzRnSUNBZ1cyNXZkRVZ4S0NkdWIyNWxKeWtzSUdsa1pXNTBhWFI1WFZ4dUlDQmRLU3hjYmlBZ1oyVjBSWGhsWTNWMFpXUkdiaWduYzNSeWIydGxMV1JoYzJoaGNuSmhlU2NzSUV4U0tWeHVLVHRjYmx4dUx5b3FYRzRnS2lCQ1lYTnBZeUJNYVc1bFhHNGdLaTljYmx4dWRtRnlJRXhwYm1VZ1BTQjdmVHRjYmx4dVpYaHdiM0owSUdSbFptRjFiSFFnVEdsdVpUdGNibHh1THlvcVhHNGdLaUJHZFc1amRHbHZiaUIwYnlCblpYUWdkR2hsSUdSeVlYY2diMkpxWldOMElHOW1JR0VnYkdsdVpTNWNiaUFxWEc0Z0tpQkFjR0Z5WVcwZ0lDQjdiMkpxWldOMGZTQmpNM056SUdOdmJYQnBiR1ZrSUdOaGNuUnZJR056YzF4dUlDb2dRSEpsZEhWeWJuTWdlMloxYm1OMGFXOXVmU0JtZFc1amRHbHZiaUIzYVhSb0lIUm9aU0JqYjI1a2FYUnBiMjV6SUhSdklISmxkSFZ5YmlCaGJIQm9ZU0IyWVd4MVpWeHVJQ292WEc1Y2JreHBibVV1WjJWMFJISmhkeUE5SUNoak0zTnpMQ0JwWkNrZ1BUNGdlMXh1SUNCc1pYUWdaSEpoZHlBOUlIdDlPMXh1SUNCcFppQW9ZMmhsWTJ0TWFXNWxVM2x0S0dNemMzTXBLU0I3WEc0Z0lDQWdaSEpoZDFzbmJHbHVaWE5mSnlBcklHbGtYU0E5SUh0Y2JpQWdJQ0FnSUdOdmJHOXlPaUJuWlhSRGIyeHZjaWhqTTNOektTeGNiaUFnSUNBZ0lIZHBaSFJvT2lCblpYUlhhV1IwYUNoak0zTnpLU3hjYmlBZ0lDQWdJR05oY0RvZ1oyVjBRMkZ3S0dNemMzTXBMRnh1SUNBZ0lDQWdhbTlwYmpvZ1oyVjBTbTlwYmloak0zTnpLVnh1SUNBZ0lIMDdYRzRnSUgxY2JseHVJQ0J5WlhSMWNtNGdaSEpoZHp0Y2JuMDdYRzVjYmk4cUtseHVJQ29nUm5WdVkzUnBiMjRnZEc4Z1oyVjBJSFJvWlNCemRIbHNaU0JqYjI1bWFXZDFjbUYwYVc5dUlHOW1JR0VnYkdsdVpTNWNiaUFxWEc0Z0tpQkFjbVYwZFhKdWN5QmtaV1poZFd4MElITjBlV3hsSUdOdmJtWnBaM1Z5WVhScGIyNGdabTl5SUd4cGJtVnpYRzRnS2k5Y2JreHBibVV1WjJWMFUzUjViR1VnUFNCbWRXNWpkR2x2Ymloak0zTnpMQ0JwWkN3Z2IzSmtLU0I3WEc0Z0lHeGxkQ0J6ZEhsc1pTQTlJSHQ5TzF4dVhHNGdJSE4wZVd4bFd5ZHNhVzVsYzE4bklDc2dhV1JkSUQwZ2UxeHVJQ0FnSUdKaGMyVTZJQ2RzYVc1bGN5Y3NYRzRnSUNBZ1lteGxibVE2SUdkbGRFSnNaVzVrYVc1bktHTXpjM01wTEZ4dUlDQWdJR1JoYzJnNklHZGxkRVJoYzJobFpDaGpNM056S1N4Y2JpQWdJQ0JpYkdWdVpGOXZjbVJsY2pvZ2RIbHdaVzltSUc5eVpDQTlQVDBnSjI1MWJXSmxjaWNnUHlCdmNtUWdLeUF4SURvZ01WeHVJQ0I5TzF4dVhHNGdJSEpsZEhWeWJpQnpkSGxzWlR0Y2JuMDdYRzVjYmx4dVhHNHZMeUJYUlVKUVFVTkxJRVpQVDFSRlVpQXZMMXh1THk4Z2MzSmpMMkpoYzJsakwyeHBibVZ6TG1weklsMHNJbTFoY0hCcGJtZHpJam9pT3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN1FVRnpRa0U3UVVGRFFUdEJRVUZCTzBGQlEwRTdPenRCUVVGQk8wRkJRMEU3T3pzN08wRkJla0pCT3pzN096czdPenM3T3pzN1FVRlpRVHM3T3p0QlFXTkJPMEZCUTBFN1FVRlVRVHM3T3p0QlFWVkJPMEZCUTBFN096czdRVUZKUVR0QlFVTkJPMEZCUTBFN096czdPenM3UVVGUFFUdEJRVU5CTzBGQlNVRTdPenM3T3pzN1FVRlBRVHRCUVVOQk8wRkJRMEU3T3pzN096czdRVUZQUVR0QlFVTkJPMEZCU1VFN096czdPenRCUVUxQk8wRkJRMEU3UVVGRFFUczdPenM3TzBGQlRVRTdRVUZEUVR0QlFVTkJPenM3T3pzN1FVRk5RVHRCUVVOQk8wRkJRMEU3T3pzN096czdRVUZQUVR0QlFVTkJPMEZCVFVFN096czdRVUZKUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96czdPenM3TzBGQlQwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVXBCTzBGQlRVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96czdPenRCUVV0Qk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRktRVHRCUVVOQk8wRkJUVUU3UVVGRFFTSXNJbk52ZFhKalpWSnZiM1FpT2lJaWZRPT1cIik7XG5cbi8qKiovIH0pLFxuLyogNzMgKi9cbi8qIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKiBhbGwgZXhwb3J0cyB1c2VkICovXG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3NyYy9iYXNpYy9wb2ludHMuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbmV2YWwoXCJcXG5cXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXFxcIl9fZXNNb2R1bGVcXFwiLCB7XFxuICB2YWx1ZTogdHJ1ZVxcbn0pO1xcblxcbnZhciBfbWVyZ2UgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISByYW1kYS9zcmMvbWVyZ2UgKi8gMTc4KTtcXG5cXG52YXIgX21lcmdlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX21lcmdlKTtcXG5cXG52YXIgX21lcmdlV2l0aCA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIHJhbWRhL3NyYy9tZXJnZVdpdGggKi8gMTc5KTtcXG5cXG52YXIgX21lcmdlV2l0aDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9tZXJnZVdpdGgpO1xcblxcbnZhciBfYXBwbHlTcGVjID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgcmFtZGEvc3JjL2FwcGx5U3BlYyAqLyA1NSk7XFxuXFxudmFyIF9hcHBseVNwZWMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfYXBwbHlTcGVjKTtcXG5cXG52YXIgX2lzTmlsID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgcmFtZGEvc3JjL2lzTmlsICovIDE3NSk7XFxuXFxudmFyIF9pc05pbDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pc05pbCk7XFxuXFxudmFyIF9ub3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISByYW1kYS9zcmMvbm90ICovIDY0KTtcXG5cXG52YXIgX25vdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9ub3QpO1xcblxcbnZhciBfcGlja0J5ID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgcmFtZGEvc3JjL3BpY2tCeSAqLyAxODIpO1xcblxcbnZhciBfcGlja0J5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3BpY2tCeSk7XFxuXFxudmFyIF9jb21wb3NlID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgcmFtZGEvc3JjL2NvbXBvc2UgKi8gMTMpO1xcblxcbnZhciBfY29tcG9zZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jb21wb3NlKTtcXG5cXG52YXIgX21kID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgbWQ1ICovIDM1KTtcXG5cXG52YXIgX21kMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX21kKTtcXG5cXG52YXIgX3JlZmVyZW5jZUhlbHBlcnMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi91dGlscy9yZWZlcmVuY2UtaGVscGVycyAqLyAxOCk7XFxuXFxudmFyIF9yZWZlcmVuY2UgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi91dGlscy9yZWZlcmVuY2UgKi8gOSk7XFxuXFxudmFyIF9yZWZlcmVuY2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVmZXJlbmNlKTtcXG5cXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxcblxcbi8qXFxuXFx0SU5URVJOQUwgREVQRU5ERU5DSUVTXFxuICovXFxuXFxudmFyIFBSID0gX3JlZmVyZW5jZTIuZGVmYXVsdC5nZXRQb2ludChudWxsKTsgLy8gUG9pbnQgcmVmZXJlbmNlXFxuXFxuLypcXG5cXHRJTlRFUk5BTCBNQVJLRVIgRlVOQ1RJT05TXFxuICovXFxuXFxuLypcXG5cXHQgX19fX19fX18gIF9fX19fX19fICBfX18gIF9fX19fX19fICAgX19fX19fX19fXFxuXFx0fFxcXFwgICBfXyAgXFxcXHxcXFxcICAgX18gIFxcXFx8XFxcXCAgXFxcXHxcXFxcICAgX19fICBcXFxcfFxcXFxfX18gICBfX19cXFxcXFxuXFx0XFxcXCBcXFxcICBcXFxcfFxcXFwgIFxcXFwgXFxcXCAgXFxcXHxcXFxcICBcXFxcIFxcXFwgIFxcXFwgXFxcXCAgXFxcXFxcXFwgXFxcXCAgXFxcXHxfX18gXFxcXCAgXFxcXF98XFxuXFx0IFxcXFwgXFxcXCAgIF9fX19cXFxcIFxcXFwgIFxcXFxcXFxcXFxcXCAgXFxcXCBcXFxcICBcXFxcIFxcXFwgIFxcXFxcXFxcIFxcXFwgIFxcXFwgICBcXFxcIFxcXFwgIFxcXFxcXG5cXHQgIFxcXFwgXFxcXCAgXFxcXF9fX3xcXFxcIFxcXFwgIFxcXFxcXFxcXFxcXCAgXFxcXCBcXFxcICBcXFxcIFxcXFwgIFxcXFxcXFxcIFxcXFwgIFxcXFwgICBcXFxcIFxcXFwgIFxcXFxcXG5cXHQgICBcXFxcIFxcXFxfX1xcXFwgICAgXFxcXCBcXFxcX19fX19fX1xcXFwgXFxcXF9fXFxcXCBcXFxcX19cXFxcXFxcXCBcXFxcX19cXFxcICAgXFxcXCBcXFxcX19cXFxcXFxuXFx0ICAgIFxcXFx8X198ICAgICBcXFxcfF9fX19fX198XFxcXHxfX3xcXFxcfF9ffCBcXFxcfF9ffCAgICBcXFxcfF9ffFxcblxcbiAqL1xcblxcbi8qXFxuXFx0RVhURVJOQUwgREVQRU5ERU5DSUVTXFxuICovXFxudmFyIGNoZWNrTWFya2VyU3ltID0gX3JlZmVyZW5jZTIuZGVmYXVsdC5jaGVja1N5bWJvbGl6ZXIoJ21hcmtlcnMnKTtcXG5cXG4vKipcXG4gKiBnZXQgY29sb3JzIGZyb20gY2FydG9jc3Mgd2l0aCB0aGUgYWxwaGEgY2hhbm5lbCBhcHBsaWVkXFxuICogQHBhcmFtICB7b2JqZWN0fSBjM3NzIGNvbXBpbGVkIGNhcnRvIGNzc1xcbiAqIEByZXR1cm4ge29iamVjdH0gICAgICBkcmF3IG9iamVjdCB3aXRoIGNvbG9yIGFuZCBib3JkZXJfY29sb3JcXG4gKi9cXG5cXG52YXIgZ2V0Q29sb3IgPSAoMCwgX3JlZmVyZW5jZUhlbHBlcnMuZ2V0Q29sb3JGbikoKDAsIF9yZWZlcmVuY2VIZWxwZXJzLmdldFByb3BlcnR5T3JEZWZGbikoJ2ZpbGwnLCBQUiksICgwLCBfcmVmZXJlbmNlSGVscGVycy5nZXRFaXRoZXJQcm9wKSgnZmlsbC1vcGFjaXR5JywgJ29wYWNpdHknLCBQUikpO1xcblxcbnZhciBnZXRPdXRsaW5lQ29sb3IgPSAoMCwgX3JlZmVyZW5jZUhlbHBlcnMuZ2V0Q29sb3JGbikoKDAsIF9yZWZlcmVuY2VIZWxwZXJzLmdldFByb3BlcnR5Rm5TYWZlKSgnc3Ryb2tlJywgUFIpLCAoMCwgX3JlZmVyZW5jZUhlbHBlcnMuZ2V0RWl0aGVyUHJvcCkoJ3N0cm9rZS1vcGFjaXR5JywgJ29wYWNpdHknLCBQUikpO1xcblxcbnZhciBnZXRDb2xvcnMgPSAoMCwgX2NvbXBvc2UyLmRlZmF1bHQpKCgwLCBfcGlja0J5Mi5kZWZhdWx0KSgoMCwgX2NvbXBvc2UyLmRlZmF1bHQpKF9ub3QyLmRlZmF1bHQsIF9pc05pbDIuZGVmYXVsdCkpLCAoMCwgX2FwcGx5U3BlYzIuZGVmYXVsdCkoe1xcbiAgY29sb3I6IGdldENvbG9yLFxcbiAgb3V0bGluZToge1xcbiAgICBjb2xvcjogZ2V0T3V0bGluZUNvbG9yXFxuICB9XFxufSkpO1xcblxcbi8qKlxcbiAqIGdldFdpZHRoIGZvciB0aGUgbWFya2VyIGFuZCBoaXMgYm9yZGVyXFxuICogQHBhcmFtICB7b2JqZWN0fSBjM3NzIGNvbXBpbGVkIGNhcnRvIGNzc1xcbiAqIEByZXR1cm4ge29iamVjdH0gICAgICBzaXplIGFuZCBib3JkZXJfd2lkdGhcXG4gKi9cXG5cXG52YXIgZ2V0TWFya2VyV2lkdGggPSAoMCwgX3JlZmVyZW5jZUhlbHBlcnMuZ2V0UHJvcGVydHlGblNhZmUpKCd3aWR0aCcsIFBSKTtcXG5cXG52YXIgZ2V0T3V0bGluZVdpZHRoID0gKDAsIF9yZWZlcmVuY2VIZWxwZXJzLmdldFByb3BlcnR5Rm5TYWZlKSgnc3Ryb2tlLXdpZHRoJywgUFIpO1xcblxcbnZhciBnZXRXaWR0aHMgPSAoMCwgX2NvbXBvc2UyLmRlZmF1bHQpKCgwLCBfcGlja0J5Mi5kZWZhdWx0KSgoMCwgX2NvbXBvc2UyLmRlZmF1bHQpKF9ub3QyLmRlZmF1bHQsIF9pc05pbDIuZGVmYXVsdCkpLCAoMCwgX2FwcGx5U3BlYzIuZGVmYXVsdCkoe1xcbiAgc2l6ZTogZ2V0TWFya2VyV2lkdGgsXFxuICBvdXRsaW5lOiB7XFxuICAgIHdpZHRoOiBnZXRPdXRsaW5lV2lkdGhcXG4gIH1cXG59KSk7XFxuXFxuLyoqXFxuICogR2V0IGNvbGxpZGUgZnJvbSBhbGxvdy1vdmVybGFwIGluIGNhcnRvY3NzIFtOT04tRFlOQU1JQ11cXG4gKiBAcGFyYW0gIHtvYmplY3R9IGMzc3MgY29tcGlsZWQgY2FydG8gY3NzXFxuICogQHJldHVybiB7b2JqZWN0fSAgICAgIHJldHVybiBkcmF3IG9iamVjdCB3aXRoIGEgbm9uLWR5bmFtaWMgY29sbGlkZSBvcHRpb25cXG4gKi9cXG5cXG52YXIgZ2V0Q29sbGlkZSA9ICgwLCBfcmVmZXJlbmNlSGVscGVycy5nZXRFeGVjdXRlZEZuKSgnYWxsb3ctb3ZlcmxhcCcsIFBSKTtcXG5cXG52YXIgZ2V0VGV4dHVyZUZpbGUgPSAoMCwgX3JlZmVyZW5jZUhlbHBlcnMuZ2V0RXhlY3V0ZWRGbikoJ2ZpbGUnLCBQUik7XFxuXFxuLyoqXFxuICogR2V0IHRleHR1cmUgZnJvbSBtYXJrZXItZmlsZSBpbiBjYXJ0b2NzcyBbTk9OLURZTkFNSUNdXFxuICogQHBhcmFtICB7b2JqZWN0fSBjM3NzIGNvbXBpbGVkIGNhcnRvIGNzc1xcbiAqIEByZXR1cm4ge29iamVjdH0gICAgICByZXR1cm4gZHJhdyBvYmplY3Qgd2l0aCBhIG5vbi1keW5hbWljIHRleHR1cmUuXFxuICovXFxudmFyIGdldFRleHR1cmUgPSAoMCwgX2NvbXBvc2UyLmRlZmF1bHQpKF9tZDIuZGVmYXVsdCwgZ2V0VGV4dHVyZUZpbGUpO1xcblxcbnZhciBnZXRCbGVuZGluZyA9ICgwLCBfcmVmZXJlbmNlSGVscGVycy5nZXRCbGVuZEZuKShQUik7XFxuXFxuLyoqXFxuICogQmFzaWMgcG9pbnRcXG4gKi9cXG5cXG52YXIgUG9pbnQgPSB7fTtcXG5cXG5leHBvcnRzLmRlZmF1bHQgPSBQb2ludDtcXG5cXG4vKipcXG4gKiBHZXQgdGhlIGRyYXcgKGZvciB0YW5ncmFtKSBvYmplY3Qgb2YgYSBwb2ludCBmcm9tIGNvbXBpbGVkIGNhcnRvIGNzc1xcbiAqIEBwYXJhbSAge29iamVjdH0gYzNzcyBjb21waWxlZCBjYXJ0byBAY2xhc3NcXG4gKiBAcmV0dXJuIHtvYmplY3R9ICAgICAgb2JqZWN0IHdpdGggdGhlIGRyYXcgdHlwZXMgYW5kIHRoZWlyIHByb3BlcnRpZXNcXG4gKi9cXG5cXG5Qb2ludC5nZXREcmF3ID0gZnVuY3Rpb24gKGMzc3MsIGlkKSB7XFxuICB2YXIgcG9pbnQgPSB7fSxcXG4gICAgICBkcmF3ID0ge307XFxuXFxuICBpZiAoY2hlY2tNYXJrZXJTeW0oYzNzcykpIHtcXG5cXG4gICAgcG9pbnQgPSAoMCwgX21lcmdlV2l0aDIuZGVmYXVsdCkoX21lcmdlMi5kZWZhdWx0LCBnZXRXaWR0aHMoYzNzcyksIGdldENvbG9ycyhjM3NzKSk7XFxuXFxuICAgIHBvaW50LmNvbGxpZGUgPSAhZ2V0Q29sbGlkZShjM3NzKTtcXG4gIH1cXG5cXG4gIGRyYXdbJ3BvaW50c18nICsgaWRdID0gcG9pbnQ7XFxuXFxuICByZXR1cm4gZHJhdztcXG59O1xcblxcbi8vIFRPRE9cXG4vKipcXG4gKiBbZ2V0U3R5bGUgZGVzY3JpcHRpb25dXFxuICogQHBhcmFtICB7W3R5cGVdfSBjM3NzICBbZGVzY3JpcHRpb25dXFxuICogQHJldHVybiB7W3R5cGVdfSAgICAgICBbZGVzY3JpcHRpb25dXFxuICovXFxuUG9pbnQuZ2V0U3R5bGUgPSBmdW5jdGlvbiAoYzNzcywgaWQsIG9yZCkge1xcbiAgdmFyIHN0eWxlID0ge307XFxuICBzdHlsZVsncG9pbnRzXycgKyBpZF0gPSB7XFxuICAgIGJhc2U6ICdwb2ludHMnLFxcbiAgICBibGVuZDogJ292ZXJsYXknLFxcbiAgICBibGVuZF9vcmRlcjogb3JkIHx8IDFcXG4gIH07XFxuXFxuICBpZiAoY2hlY2tNYXJrZXJTeW0oYzNzcykpIHtcXG4gICAgdmFyIHAgPSBzdHlsZVsncG9pbnRzXycgKyBpZF07XFxuICAgIHAudGV4dHVyZSA9IGdldFRleHR1cmVGaWxlKGMzc3MpICE9PSAnbm9uZScgPyBnZXRUZXh0dXJlKGMzc3MpIDogdm9pZCAwO1xcbiAgICBwLmJsZW5kID0gZ2V0QmxlbmRpbmcoYzNzcyk7XFxuICB9XFxuXFxuICByZXR1cm4gc3R5bGU7XFxufTtcXG5cXG5Qb2ludC5nZXRUZXh0dXJlcyA9IGZ1bmN0aW9uIChjM3NzKSB7XFxuICB2YXIgdGV4ID0ge307XFxuICBpZiAoY2hlY2tNYXJrZXJTeW0oYzNzcykpIHtcXG4gICAgdmFyIHRleHR1cmUgPSBnZXRUZXh0dXJlRmlsZShjM3NzKTtcXG5cXG4gICAgaWYgKHRleHR1cmUgIT09ICdub25lJykge1xcbiAgICAgIHRleFsoMCwgX21kMi5kZWZhdWx0KSh0ZXh0dXJlKV0gPSB7IHVybDogdGV4dHVyZSB9O1xcbiAgICB9XFxuXFxuICAgIHJldHVybiB0ZXg7XFxuICB9XFxufTsvLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaU56TXVhbk1pTENKemIzVnlZMlZ6SWpwYkluZGxZbkJoWTJzNkx5OHZjM0pqTDJKaGMybGpMM0J2YVc1MGN5NXFjejh5TldGaElsMHNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJaThxWEc1Y2RDQmZYMTlmWDE5Zlh5QWdYMTlmWDE5ZlgxOGdJRjlmWHlBZ1gxOWZYMTlmWDE4Z0lDQmZYMTlmWDE5ZlgxOWNibHgwZkZ4Y0lDQWdYMThnSUZ4Y2ZGeGNJQ0FnWDE4Z0lGeGNmRnhjSUNCY1hIeGNYQ0FnSUY5Zlh5QWdYRng4WEZ4ZlgxOGdJQ0JmWDE5Y1hGeHVYSFJjWENCY1hDQWdYRng4WEZ3Z0lGeGNJRnhjSUNCY1hIeGNYQ0FnWEZ3Z1hGd2dJRnhjSUZ4Y0lDQmNYRnhjSUZ4Y0lDQmNYSHhmWDE4Z1hGd2dJRnhjWDN4Y2JseDBJRnhjSUZ4Y0lDQWdYMTlmWDF4Y0lGeGNJQ0JjWEZ4Y1hGd2dJRnhjSUZ4Y0lDQmNYQ0JjWENBZ1hGeGNYQ0JjWENBZ1hGd2dJQ0JjWENCY1hDQWdYRnhjYmx4MElDQmNYQ0JjWENBZ1hGeGZYMTk4WEZ3Z1hGd2dJRnhjWEZ4Y1hDQWdYRndnWEZ3Z0lGeGNJRnhjSUNCY1hGeGNJRnhjSUNCY1hDQWdJRnhjSUZ4Y0lDQmNYRnh1WEhRZ0lDQmNYQ0JjWEY5ZlhGd2dJQ0FnWEZ3Z1hGeGZYMTlmWDE5ZlhGd2dYRnhmWDF4Y0lGeGNYMTljWEZ4Y0lGeGNYMTljWENBZ0lGeGNJRnhjWDE5Y1hGeHVYSFFnSUNBZ1hGeDhYMTk4SUNBZ0lDQmNYSHhmWDE5ZlgxOWZmRnhjZkY5ZmZGeGNmRjlmZkNCY1hIeGZYM3dnSUNBZ1hGeDhYMTk4WEc1Y2JpQXFMMXh1WEc0dktseHVYSFJGV0ZSRlVrNUJUQ0JFUlZCRlRrUkZUa05KUlZOY2JpQXFMMXh1YVcxd2IzSjBJRTFFTlNCbWNtOXRJQ2R0WkRVbk8xeHVhVzF3YjNKMElIdGpiMjF3YjNObExDQndhV05yUW5rc0lHNXZkQ3dnYVhOT2FXd3NJR0Z3Y0d4NVUzQmxZeXdnYldWeVoyVXNJRzFsY21kbFYybDBhSDBnWm5KdmJTQW5jbUZ0WkdFbk8xeHVYRzR2S2x4dVhIUkpUbFJGVWs1QlRDQkVSVkJGVGtSRlRrTkpSVk5jYmlBcUwxeHVYRzVwYlhCdmNuUWdleUJuWlhSRmVHVmpkWFJsWkVadUxDQm5aWFJRY205d1pYSjBlVTl5UkdWbVJtNHNJR2RsZEVKc1pXNWtSbTRzSUdkbGRGQnliM0JsY25SNVJtNVRZV1psTENCblpYUkZhWFJvWlhKUWNtOXdMQ0JuWlhSRGIyeHZja1p1SUgwZ1puSnZiU0FuTGk0dmRYUnBiSE12Y21WbVpYSmxibU5sTFdobGJIQmxjbk1uTzF4dWFXMXdiM0owSUZSaGJtZHlZVzFTWldabGNtVnVZMlVnWm5KdmJTQW5MaTR2ZFhScGJITXZjbVZtWlhKbGJtTmxKenRjYmx4dVkyOXVjM1FnVUZJZ1BTQlVZVzVuY21GdFVtVm1aWEpsYm1ObExtZGxkRkJ2YVc1MEtHNTFiR3dwT3lBdkx5QlFiMmx1ZENCeVpXWmxjbVZ1WTJWY2JseHVMeXBjYmx4MFNVNVVSVkpPUVV3Z1RVRlNTMFZTSUVaVlRrTlVTVTlPVTF4dUlDb3ZYRzVjYm1OdmJuTjBJR05vWldOclRXRnlhMlZ5VTNsdElEMGdWR0Z1WjNKaGJWSmxabVZ5Wlc1alpTNWphR1ZqYTFONWJXSnZiR2w2WlhJb0oyMWhjbXRsY25NbktUdGNibHh1THlvcVhHNGdLaUJuWlhRZ1kyOXNiM0p6SUdaeWIyMGdZMkZ5ZEc5amMzTWdkMmwwYUNCMGFHVWdZV3h3YUdFZ1kyaGhibTVsYkNCaGNIQnNhV1ZrWEc0Z0tpQkFjR0Z5WVcwZ0lIdHZZbXBsWTNSOUlHTXpjM01nWTI5dGNHbHNaV1FnWTJGeWRHOGdZM056WEc0Z0tpQkFjbVYwZFhKdUlIdHZZbXBsWTNSOUlDQWdJQ0FnWkhKaGR5QnZZbXBsWTNRZ2QybDBhQ0JqYjJ4dmNpQmhibVFnWW05eVpHVnlYMk52Ykc5eVhHNGdLaTljYmx4dVkyOXVjM1FnWjJWMFEyOXNiM0lnUFNCblpYUkRiMnh2Y2tadUtGeHVJQ0JuWlhSUWNtOXdaWEowZVU5eVJHVm1SbTRvSjJacGJHd25MQ0JRVWlrc1hHNGdJR2RsZEVWcGRHaGxjbEJ5YjNBb0oyWnBiR3d0YjNCaFkybDBlU2NzSUNkdmNHRmphWFI1Snl3Z1VGSXBYRzRwTzF4dVhHNWpiMjV6ZENCblpYUlBkWFJzYVc1bFEyOXNiM0lnUFNCblpYUkRiMnh2Y2tadUtGeHVJQ0JuWlhSUWNtOXdaWEowZVVadVUyRm1aU2duYzNSeWIydGxKeXdnVUZJcExGeHVJQ0JuWlhSRmFYUm9aWEpRY205d0tDZHpkSEp2YTJVdGIzQmhZMmwwZVNjc0lDZHZjR0ZqYVhSNUp5d2dVRklwWEc0cE8xeHVYRzVqYjI1emRDQm5aWFJEYjJ4dmNuTWdQU0JqYjIxd2IzTmxLRnh1SUNCd2FXTnJRbmtvWTI5dGNHOXpaU2h1YjNRc2FYTk9hV3dwS1N4Y2JpQWdZWEJ3YkhsVGNHVmpLSHRjYmlBZ0lDQmpiMnh2Y2pvZ1oyVjBRMjlzYjNJc1hHNGdJQ0FnYjNWMGJHbHVaVG9nZTF4dUlDQWdJQ0FnWTI5c2IzSTZJR2RsZEU5MWRHeHBibVZEYjJ4dmNseHVJQ0FnSUgxY2JpQWdmU2xjYmlrN1hHNWNiaThxS2x4dUlDb2daMlYwVjJsa2RHZ2dabTl5SUhSb1pTQnRZWEpyWlhJZ1lXNWtJR2hwY3lCaWIzSmtaWEpjYmlBcUlFQndZWEpoYlNBZ2UyOWlhbVZqZEgwZ1l6TnpjeUJqYjIxd2FXeGxaQ0JqWVhKMGJ5QmpjM05jYmlBcUlFQnlaWFIxY200Z2UyOWlhbVZqZEgwZ0lDQWdJQ0J6YVhwbElHRnVaQ0JpYjNKa1pYSmZkMmxrZEdoY2JpQXFMMXh1WEc1amIyNXpkQ0JuWlhSTllYSnJaWEpYYVdSMGFDQTlJR2RsZEZCeWIzQmxjblI1Um01VFlXWmxLQ2QzYVdSMGFDY3NJRkJTS1R0Y2JseHVZMjl1YzNRZ1oyVjBUM1YwYkdsdVpWZHBaSFJvSUQwZ1oyVjBVSEp2Y0dWeWRIbEdibE5oWm1Vb0ozTjBjbTlyWlMxM2FXUjBhQ2NzSUZCU0tUdGNibHh1WTI5dWMzUWdaMlYwVjJsa2RHaHpJRDBnWTI5dGNHOXpaU2hjYmlBZ2NHbGphMEo1S0dOdmJYQnZjMlVvYm05MExDQnBjMDVwYkNrcExGeHVJQ0JoY0hCc2VWTndaV01vZTF4dUlDQWdJSE5wZW1VNklHZGxkRTFoY210bGNsZHBaSFJvTEZ4dUlDQWdJRzkxZEd4cGJtVTZJSHRjYmlBZ0lDQWdJSGRwWkhSb09pQm5aWFJQZFhSc2FXNWxWMmxrZEdoY2JpQWdJQ0I5WEc0Z0lIMHBYRzRwTzF4dVhHNHZLaXBjYmlBcUlFZGxkQ0JqYjJ4c2FXUmxJR1p5YjIwZ1lXeHNiM2N0YjNabGNteGhjQ0JwYmlCallYSjBiMk56Y3lCYlRrOU9MVVJaVGtGTlNVTmRYRzRnS2lCQWNHRnlZVzBnSUh0dlltcGxZM1I5SUdNemMzTWdZMjl0Y0dsc1pXUWdZMkZ5ZEc4Z1kzTnpYRzRnS2lCQWNtVjBkWEp1SUh0dlltcGxZM1I5SUNBZ0lDQWdjbVYwZFhKdUlHUnlZWGNnYjJKcVpXTjBJSGRwZEdnZ1lTQnViMjR0WkhsdVlXMXBZeUJqYjJ4c2FXUmxJRzl3ZEdsdmJseHVJQ292WEc1Y2JtTnZibk4wSUdkbGRFTnZiR3hwWkdVZ1BTQm5aWFJGZUdWamRYUmxaRVp1S0NkaGJHeHZkeTF2ZG1WeWJHRndKeXdnVUZJcE8xeHVYRzVqYjI1emRDQm5aWFJVWlhoMGRYSmxSbWxzWlNBOUlHZGxkRVY0WldOMWRHVmtSbTRvSjJacGJHVW5MQ0JRVWlrN1hHNWNiaThxS2x4dUlDb2dSMlYwSUhSbGVIUjFjbVVnWm5KdmJTQnRZWEpyWlhJdFptbHNaU0JwYmlCallYSjBiMk56Y3lCYlRrOU9MVVJaVGtGTlNVTmRYRzRnS2lCQWNHRnlZVzBnSUh0dlltcGxZM1I5SUdNemMzTWdZMjl0Y0dsc1pXUWdZMkZ5ZEc4Z1kzTnpYRzRnS2lCQWNtVjBkWEp1SUh0dlltcGxZM1I5SUNBZ0lDQWdjbVYwZFhKdUlHUnlZWGNnYjJKcVpXTjBJSGRwZEdnZ1lTQnViMjR0WkhsdVlXMXBZeUIwWlhoMGRYSmxMbHh1SUNvdlhHNWpiMjV6ZENCblpYUlVaWGgwZFhKbElEMGdZMjl0Y0c5elpTaGNiaUFnVFVRMUxGeHVJQ0JuWlhSVVpYaDBkWEpsUm1sc1pWeHVLVHRjYmx4dVkyOXVjM1FnWjJWMFFteGxibVJwYm1jZ1BTQm5aWFJDYkdWdVpFWnVLRkJTS1R0Y2JseHVMeW9xWEc0Z0tpQkNZWE5wWXlCd2IybHVkRnh1SUNvdlhHNWNiblpoY2lCUWIybHVkQ0E5SUh0OU8xeHVYRzVsZUhCdmNuUWdaR1ZtWVhWc2RDQlFiMmx1ZER0Y2JseHVYRzR2S2lwY2JpQXFJRWRsZENCMGFHVWdaSEpoZHlBb1ptOXlJSFJoYm1keVlXMHBJRzlpYW1WamRDQnZaaUJoSUhCdmFXNTBJR1p5YjIwZ1kyOXRjR2xzWldRZ1kyRnlkRzhnWTNOelhHNGdLaUJBY0dGeVlXMGdJSHR2WW1wbFkzUjlJR016YzNNZ1kyOXRjR2xzWldRZ1kyRnlkRzhnUUdOc1lYTnpYRzRnS2lCQWNtVjBkWEp1SUh0dlltcGxZM1I5SUNBZ0lDQWdiMkpxWldOMElIZHBkR2dnZEdobElHUnlZWGNnZEhsd1pYTWdZVzVrSUhSb1pXbHlJSEJ5YjNCbGNuUnBaWE5jYmlBcUwxeHVVRzlwYm5RdVoyVjBSSEpoZHlBOUlHWjFibU4wYVc5dUtHTXpjM01zSUdsa0tTQjdYRzVjZEhaaGNpQndiMmx1ZENBOUlIdDlMRnh1SUNBZ0lDQWdaSEpoZHlBOUlIdDlPMXh1WEc1Y2RHbG1JQ2hqYUdWamEwMWhjbXRsY2xONWJTaGpNM056S1NrZ2UxeHVYRzVjZEZ4MGNHOXBiblFnUFNCdFpYSm5aVmRwZEdnb1hHNGdJQ0FnSUNBZ0lHMWxjbWRsTEZ4dVhIUmNkRngwWEhSblpYUlhhV1IwYUhNb1l6TnpjeWtzWEc1Y2RGeDBYSFJjZEdkbGRFTnZiRzl5Y3loak0zTnpLVnh1WEhSY2RGeDBLVHRjYmx4dUlDQWdJSEJ2YVc1MExtTnZiR3hwWkdVZ1BTQWhaMlYwUTI5c2JHbGtaU2hqTTNOektUdGNibHgwZlZ4dVhHNGdJR1J5WVhkYkozQnZhVzUwYzE4bklDc2dhV1JkSUQwZ2NHOXBiblE3WEc1Y2JpQWdjbVYwZFhKdUlHUnlZWGM3WEc1OU8xeHVYRzR2THlCVVQwUlBYRzR2S2lwY2JpQXFJRnRuWlhSVGRIbHNaU0JrWlhOamNtbHdkR2x2YmwxY2JpQXFJRUJ3WVhKaGJTQWdlMXQwZVhCbFhYMGdZek56Y3lBZ1cyUmxjMk55YVhCMGFXOXVYVnh1SUNvZ1FISmxkSFZ5YmlCN1czUjVjR1ZkZlNBZ0lDQWdJQ0JiWkdWelkzSnBjSFJwYjI1ZFhHNGdLaTljYmxCdmFXNTBMbWRsZEZOMGVXeGxJRDBnWm5WdVkzUnBiMjRvWXpOemN5d2dhV1FzSUc5eVpDa2dlMXh1SUNCc1pYUWdjM1I1YkdVZ1BTQjdmVHRjYmlBZ2MzUjViR1ZiSjNCdmFXNTBjMThuSUNzZ2FXUmRJRDBnZTF4dUlDQWdJR0poYzJVNklDZHdiMmx1ZEhNbkxGeHVJQ0FnSUdKc1pXNWtPaUFuYjNabGNteGhlU2NzWEc0Z0lDQWdZbXhsYm1SZmIzSmtaWEk2SUc5eVpDQjhmQ0F4WEc0Z0lIMDdYRzVjYmx4MGFXWWdLR05vWldOclRXRnlhMlZ5VTNsdEtHTXpjM01wS1NCN1hHNGdJQ0FnYkdWMElIQWdQU0J6ZEhsc1pWc25jRzlwYm5Selh5Y2dLeUJwWkYwN1hHNGdJQ0FnY0M1MFpYaDBkWEpsSUQwZ1oyVjBWR1Y0ZEhWeVpVWnBiR1VvWXpOemN5a2dJVDA5SUNkdWIyNWxKeUEvSUdkbGRGUmxlSFIxY21Vb1l6TnpjeWtnT2lCMmIybGtJREE3WEc0Z0lDQWdjQzVpYkdWdVpDQTlJR2RsZEVKc1pXNWthVzVuS0dNemMzTXBPMXh1WEhSOVhHNWNibHgwY21WMGRYSnVJSE4wZVd4bE8xeHVmVHRjYmx4dVVHOXBiblF1WjJWMFZHVjRkSFZ5WlhNZ1BTQm1kVzVqZEdsdmJpaGpNM056S1NCN1hHNGdJR3hsZENCMFpYZ2dQU0I3ZlR0Y2JseDBhV1lnS0dOb1pXTnJUV0Z5YTJWeVUzbHRLR016YzNNcEtTQjdYRzVjZEZ4MGJHVjBJSFJsZUhSMWNtVWdQU0JuWlhSVVpYaDBkWEpsUm1sc1pTaGpNM056S1R0Y2JseHVYSFJjZEdsbUlDaDBaWGgwZFhKbElDRTlQU0FuYm05dVpTY3BJSHRjYmx4MFhIUmNkSFJsZUZ0TlJEVW9kR1Y0ZEhWeVpTbGRJRDBnZTNWeWJEb2dkR1Y0ZEhWeVpYMDdYRzVjZEZ4MGZWeHVYRzVjZEZ4MGNtVjBkWEp1SUhSbGVEdGNibHgwZlZ4dWZUdGNibHh1WEc1Y2JpOHZJRmRGUWxCQlEwc2dSazlQVkVWU0lDOHZYRzR2THlCemNtTXZZbUZ6YVdNdmNHOXBiblJ6TG1weklsMHNJbTFoY0hCcGJtZHpJam9pT3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPMEZCWTBFN1FVRkRRVHM3TzBGQlRVRTdRVUZEUVR0QlFVRkJPMEZCUTBFN096czdPMEZCVGtFN096czdRVUZQUVR0QlFVTkJPMEZCUTBFN096czdRVUV4UWtFN096czdPenM3T3pzN08wRkJWMEU3T3p0QlFXMUNRVHRCUVVOQk8wRkJRMEU3T3pzN096dEJRVTFCTzBGQlEwRTdRVUZKUVR0QlFVTkJPMEZCU1VFN1FVRkhRVHRCUVVOQk8wRkJRMEU3UVVGRVFUdEJRVVpCTzBGQlEwRTdRVUZQUVRzN096czdPMEZCVFVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVWRCTzBGQlEwRTdRVUZEUVR0QlFVUkJPMEZCUmtFN1FVRkRRVHRCUVU5Qk96czdPenM3UVVGTlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenM3T3p0QlFVdEJPMEZCUTBFN1FVRkpRVHRCUVVOQk8wRkJRMEU3T3pzN1FVRkpRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVVZCT3pzN096czdRVUZMUVR0QlFVTkJPMEZCUVVFN1FVRkRRVHRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlMwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPenM3TzBGQlMwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJTRUU3UVVGRFFUdEJRVXRCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVNJc0luTnZkWEpqWlZKdmIzUWlPaUlpZlE9PVwiKTtcblxuLyoqKi8gfSksXG4vKiA3NCAqL1xuLyogbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9cbi8qIGFsbCBleHBvcnRzIHVzZWQgKi9cbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9zcmMvYmFzaWMvcG9seWdvbnMuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuZXZhbChcIlxcblxcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcXFwiX19lc01vZHVsZVxcXCIsIHtcXG4gIHZhbHVlOiB0cnVlXFxufSk7XFxuXFxudmFyIF9jb21wb3NlID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgcmFtZGEvc3JjL2NvbXBvc2UgKi8gMTMpO1xcblxcbnZhciBfY29tcG9zZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jb21wb3NlKTtcXG5cXG52YXIgX21kID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgbWQ1ICovIDM1KTtcXG5cXG52YXIgX21kMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX21kKTtcXG5cXG52YXIgX3JlZmVyZW5jZUhlbHBlcnMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi91dGlscy9yZWZlcmVuY2UtaGVscGVycyAqLyAxOCk7XFxuXFxudmFyIF9yZWZlcmVuY2UgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi91dGlscy9yZWZlcmVuY2UgKi8gOSk7XFxuXFxudmFyIF9yZWZlcmVuY2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVmZXJlbmNlKTtcXG5cXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxcblxcbi8qXFxuXFx0SU5URVJOQUwgREVQRU5ERU5DSUVTXFxuICovXFxuXFxudmFyIFBSID0gX3JlZmVyZW5jZTIuZGVmYXVsdC5nZXRQb2x5Z29uKG51bGwpOyAvLyBQb2x5Z29uIHJlZmVyZW5jZVxcbi8qXFxuIF9fX19fX19fICBfX19fX19fXyAgX19fICAgICAgICAgICBfX18gICAgX19fIF9fX19fX19fICBfX19fX19fXyAgX19fX19fX18gICBfX19fX19fX1xcbnxcXFxcICAgX18gIFxcXFx8XFxcXCAgIF9fICBcXFxcfFxcXFwgIFxcXFwgICAgICAgICB8XFxcXCAgXFxcXCAgLyAgL3xcXFxcICAgX19fX1xcXFx8XFxcXCAgIF9fICBcXFxcfFxcXFwgICBfX18gIFxcXFx8XFxcXCAgIF9fX19cXFxcXFxuXFxcXCBcXFxcICBcXFxcfFxcXFwgIFxcXFwgXFxcXCAgXFxcXHxcXFxcICBcXFxcIFxcXFwgIFxcXFwgICAgICAgIFxcXFwgXFxcXCAgXFxcXC8gIC8gfCBcXFxcICBcXFxcX19ffFxcXFwgXFxcXCAgXFxcXHxcXFxcICBcXFxcIFxcXFwgIFxcXFxcXFxcIFxcXFwgIFxcXFwgXFxcXCAgXFxcXF9fX3xfXFxuIFxcXFwgXFxcXCAgIF9fX19cXFxcIFxcXFwgIFxcXFxcXFxcXFxcXCAgXFxcXCBcXFxcICBcXFxcICAgICAgICBcXFxcIFxcXFwgICAgLyAvIFxcXFwgXFxcXCAgXFxcXCAgX19cXFxcIFxcXFwgIFxcXFxcXFxcXFxcXCAgXFxcXCBcXFxcICBcXFxcXFxcXCBcXFxcICBcXFxcIFxcXFxfX19fXyAgXFxcXFxcbiAgXFxcXCBcXFxcICBcXFxcX19ffFxcXFwgXFxcXCAgXFxcXFxcXFxcXFxcICBcXFxcIFxcXFwgIFxcXFxfX19fICAgIFxcXFwvICAvICAvICAgXFxcXCBcXFxcICBcXFxcfFxcXFwgIFxcXFwgXFxcXCAgXFxcXFxcXFxcXFxcICBcXFxcIFxcXFwgIFxcXFxcXFxcIFxcXFwgIFxcXFx8X19fX3xcXFxcICBcXFxcXFxuICAgXFxcXCBcXFxcX19cXFxcICAgIFxcXFwgXFxcXF9fX19fX19cXFxcIFxcXFxfX19fX19fXFxcXF9fLyAgLyAvICAgICAgXFxcXCBcXFxcX19fX19fX1xcXFwgXFxcXF9fX19fX19cXFxcIFxcXFxfX1xcXFxcXFxcIFxcXFxfX1xcXFxfX19fXFxcXF9cXFxcICBcXFxcXFxuICAgIFxcXFx8X198ICAgICBcXFxcfF9fX19fX198XFxcXHxfX19fX19ffFxcXFxfX18vIC8gICAgICAgIFxcXFx8X19fX19fX3xcXFxcfF9fX19fX198XFxcXHxfX3wgXFxcXHxfX3xcXFxcX19fX19fX19fXFxcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxcXFx8X19ffC8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcXFxcfF9fX19fX19fX3xcXG5cXG4gKi9cXG5cXG4vKlxcblxcdEVYVEVSTkFMIERFUEVOREVOQ0lFU1xcbiAqL1xcbnZhciBQUFIgPSBfcmVmZXJlbmNlMi5kZWZhdWx0LmdldFBvbHlnb25QYXR0ZXJuKG51bGwpO1xcblxcbi8qXFxuXFx0SU5URVJOQUwgUE9MWUdPTlMgRlVOQ1RJT05TXFxuICovXFxuXFxudmFyIGNoZWNrUG9seWdvblN5bSA9IF9yZWZlcmVuY2UyLmRlZmF1bHQuY2hlY2tTeW1ib2xpemVyKCdwb2x5Z29uJyk7XFxudmFyIGNoZWNrUG9sUGF0dGVyblN5bSA9IF9yZWZlcmVuY2UyLmRlZmF1bHQuY2hlY2tTeW1ib2xpemVyKCdwb2x5Z29uLXBhdHRlcm4nKTtcXG5cXG4vKipcXG4gKiBGdW5jdGlvbiBmb3IgZ2V0dGluZyB0aGUgY29sb3IgaW4gcmdiYVxcbiAqXFxuICogQHBhcmFtICAge29iamVjdH0gYzNzcyBjb21waWxlZCBjYXJ0byBjc3NcXG4gKiBAcmV0dXJucyB7b2JqZWN0fSB3aXRoIGEgZnVuY3Rpb24gdGhhdCBjb250YWluIHRoZSBjb25kaXRpb25zIHRvIHJldHVybiBhIGNvbG9yIHdpdGggYWxwaGEgY2hhbm5lbFxcbiAqL1xcbnZhciBnZXRDb2xvciA9ICgwLCBfcmVmZXJlbmNlSGVscGVycy5nZXRDb2xvckZuKSgoMCwgX3JlZmVyZW5jZUhlbHBlcnMuZ2V0UHJvcGVydHlPckRlZkZuKSgnZmlsbCcsIFBSKSwgKDAsIF9yZWZlcmVuY2VIZWxwZXJzLmdldFByb3BlcnR5T3JEZWZGbikoJ2ZpbGwtb3BhY2l0eScsIFBSKSk7XFxuXFxuLyoqXFxuICogRnVuY3Rpb24gZm9yIGdldHRpbmcgdGhlIGV4dHJ1ZGUgb2YgYSBwb2x5Z29uXFxuICpcXG4gKiBAcGFyYW0gICB7b2JqZWN0fSBjM3NzIGNvbXBpbGVkIGNhcnRvIGNzc1xcbiAqIEByZXR1cm5zIHtvYmplY3R9IHdpdGggYSBmdW5jdGlvbiB0aGF0IGNvbnRhaW4gdGhlIGNvbmRpdGlvbnMgdG8gcmV0dXJuIGFuIGV4dHJ1ZGUgdmFsdWVcXG4gKi9cXG5cXG52YXIgZ2V0RXh0cnVkZSA9ICgwLCBfcmVmZXJlbmNlSGVscGVycy5nZXRQcm9wZXJ0eU9yRGVmRm4pKCd0Zy1wb2x5Z29uLWV4dHJ1ZGUnKTtcXG5cXG4vKipcXG4gKiBGdW5jdGlvbiBmb3IgZ2V0dGluZyB0aGUgdGV4dHVyZSBhcyBzdHJpbmdcXG4gKlxcbiAqIEBwYXJhbSAgIHtvYmplY3R9IGMzc3MgY29tcGlsZWQgY2FydG8gY3NzXFxuICogQHJldHVybnMge3N0cmluZ30gd2l0aCB0aGUgcGF0aCBvZiB0ZXh0dXJlXFxuICovXFxuXFxudmFyIGdldFRleHR1cmVGaWxlID0gKDAsIF9yZWZlcmVuY2VIZWxwZXJzLmdldEV4ZWN1dGVkRm4pKCdmaWxlJywgUFBSKTtcXG5cXG52YXIgZ2V0VGV4dHVyZSA9ICgwLCBfY29tcG9zZTIuZGVmYXVsdCkoX21kMi5kZWZhdWx0LCBnZXRUZXh0dXJlRmlsZSk7XFxuXFxudmFyIGdldEJsZW5kaW5nID0gKDAsIF9yZWZlcmVuY2VIZWxwZXJzLmdldEJsZW5kRm4pKFBSKTtcXG5cXG4vKipcXG4gKiBCYXNpYyBQb2x5Z29uXFxuICovXFxuXFxudmFyIFBvbHlnb24gPSB7fTtcXG5cXG5leHBvcnRzLmRlZmF1bHQgPSBQb2x5Z29uO1xcblxcbi8qKlxcbiAqIEZ1bmN0aW9uIHRvIGdldCB0aGUgZHJhdyBvYmplY3Qgb2YgYSBwb2x5Z29uLlxcbiAqXFxuICogQHBhcmFtICAge29iamVjdH0gYzNzcyBjb21waWxlZCBjYXJ0byBjc3NcXG4gKiBAcmV0dXJucyB7ZnVuY3Rpb259IGZ1bmN0aW9uIHdpdGggdGhlIGNvbmRpdGlvbnMgdG8gcmV0dXJuIGFscGhhIHZhbHVlXFxuICovXFxuXFxuUG9seWdvbi5nZXREcmF3ID0gZnVuY3Rpb24gKGMzc3MsIGlkKSB7XFxuICB2YXIgZHJhdyA9IHt9O1xcblxcbiAgaWYgKGNoZWNrUG9seWdvblN5bShjM3NzKSkge1xcbiAgICBkcmF3Wydwb2x5Z29uc18nICsgaWRdID0ge1xcbiAgICAgIGNvbG9yOiBnZXRDb2xvcihjM3NzKVxcbiAgICB9O1xcbiAgfVxcblxcbiAgcmV0dXJuIGRyYXc7XFxufTtcXG5cXG4vKipcXG4gKiBGdW5jdGlvbiB0byBnZXQgdGhlIHN0eWxlIGNvbmZpZ3VyYXRpb24gb2YgYSBwb2x5Z29uLlxcbiAqXFxuICogQHJldHVybnMgZGVmYXVsdCBzdHlsZSBjb25maWd1cmF0aW9uIGZvciBwb2x5Z29uXFxuICovXFxuUG9seWdvbi5nZXRTdHlsZSA9IGZ1bmN0aW9uIChjM3NzLCBpZCwgb3JkKSB7XFxuICB2YXIgc3R5bGUgPSB7fTtcXG5cXG4gIHN0eWxlWydwb2x5Z29uc18nICsgaWRdID0ge1xcbiAgICBiYXNlOiAncG9seWdvbnMnLFxcbiAgICBibGVuZDogZ2V0QmxlbmRpbmcoYzNzcyksXFxuICAgIGJsZW5kX29yZGVyOiBvcmQgfHwgMVxcbiAgfTtcXG5cXG4gIGlmIChjaGVja1BvbFBhdHRlcm5TeW0oYzNzcykpIHtcXG4gICAgc3R5bGVbJ3BvbHlnb25zXycgKyBpZF0ubWF0ZXJpYWwgPSB7XFxuICAgICAgZGlmZnVzZToge1xcbiAgICAgICAgdGV4dHVyZTogZ2V0VGV4dHVyZShjM3NzKSxcXG4gICAgICAgIG1hcHBpbmc6ICd1didcXG4gICAgICB9XFxuICAgIH07XFxuICB9XFxuXFxuICByZXR1cm4gc3R5bGU7XFxufTtcXG5cXG5Qb2x5Z29uLmdldFRleHR1cmVzID0gZnVuY3Rpb24gKGMzc3MpIHtcXG4gIHZhciB0ZXggPSB7fTtcXG4gIGlmIChjaGVja1BvbFBhdHRlcm5TeW0oYzNzcykpIHtcXG4gICAgdmFyIHRleHR1cmUgPSBnZXRUZXh0dXJlRmlsZShjM3NzKTtcXG5cXG4gICAgaWYgKHRleHR1cmUpIHtcXG4gICAgICB0ZXhbKDAsIF9tZDIuZGVmYXVsdCkodGV4dHVyZSldID0geyB1cmw6IHRleHR1cmUgfTtcXG4gICAgfVxcbiAgfVxcbiAgcmV0dXJuIHRleDtcXG59Oy8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pTnpRdWFuTWlMQ0p6YjNWeVkyVnpJanBiSW5kbFluQmhZMnM2THk4dmMzSmpMMkpoYzJsakwzQnZiSGxuYjI1ekxtcHpQemN5WkdJaVhTd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lMeXBjYmlCZlgxOWZYMTlmWHlBZ1gxOWZYMTlmWDE4Z0lGOWZYeUFnSUNBZ0lDQWdJQ0FnWDE5ZklDQWdJRjlmWHlCZlgxOWZYMTlmWHlBZ1gxOWZYMTlmWDE4Z0lGOWZYMTlmWDE5ZklDQWdYMTlmWDE5ZlgxOWNibnhjWENBZ0lGOWZJQ0JjWEh4Y1hDQWdJRjlmSUNCY1hIeGNYQ0FnWEZ3Z0lDQWdJQ0FnSUNCOFhGd2dJRnhjSUNBdklDQXZmRnhjSUNBZ1gxOWZYMXhjZkZ4Y0lDQWdYMThnSUZ4Y2ZGeGNJQ0FnWDE5ZklDQmNYSHhjWENBZ0lGOWZYMTljWEZ4dVhGd2dYRndnSUZ4Y2ZGeGNJQ0JjWENCY1hDQWdYRng4WEZ3Z0lGeGNJRnhjSUNCY1hDQWdJQ0FnSUNBZ1hGd2dYRndnSUZ4Y0x5QWdMeUI4SUZ4Y0lDQmNYRjlmWDN4Y1hDQmNYQ0FnWEZ4OFhGd2dJRnhjSUZ4Y0lDQmNYRnhjSUZ4Y0lDQmNYQ0JjWENBZ1hGeGZYMTk4WDF4dUlGeGNJRnhjSUNBZ1gxOWZYMXhjSUZ4Y0lDQmNYRnhjWEZ3Z0lGeGNJRnhjSUNCY1hDQWdJQ0FnSUNBZ1hGd2dYRndnSUNBZ0x5QXZJRnhjSUZ4Y0lDQmNYQ0FnWDE5Y1hDQmNYQ0FnWEZ4Y1hGeGNJQ0JjWENCY1hDQWdYRnhjWENCY1hDQWdYRndnWEZ4ZlgxOWZYeUFnWEZ4Y2JpQWdYRndnWEZ3Z0lGeGNYMTlmZkZ4Y0lGeGNJQ0JjWEZ4Y1hGd2dJRnhjSUZ4Y0lDQmNYRjlmWDE4Z0lDQWdYRnd2SUNBdklDQXZJQ0FnWEZ3Z1hGd2dJRnhjZkZ4Y0lDQmNYQ0JjWENBZ1hGeGNYRnhjSUNCY1hDQmNYQ0FnWEZ4Y1hDQmNYQ0FnWEZ4OFgxOWZYM3hjWENBZ1hGeGNiaUFnSUZ4Y0lGeGNYMTljWENBZ0lDQmNYQ0JjWEY5ZlgxOWZYMTljWENCY1hGOWZYMTlmWDE5Y1hGOWZMeUFnTHlBdklDQWdJQ0FnWEZ3Z1hGeGZYMTlmWDE5ZlhGd2dYRnhmWDE5ZlgxOWZYRndnWEZ4ZlgxeGNYRndnWEZ4ZlgxeGNYMTlmWDF4Y1gxeGNJQ0JjWEZ4dUlDQWdJRnhjZkY5ZmZDQWdJQ0FnWEZ4OFgxOWZYMTlmWDN4Y1hIeGZYMTlmWDE5ZmZGeGNYMTlmTHlBdklDQWdJQ0FnSUNCY1hIeGZYMTlmWDE5ZmZGeGNmRjlmWDE5ZlgxOThYRng4WDE5OElGeGNmRjlmZkZ4Y1gxOWZYMTlmWDE5ZlhGeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lGeGNmRjlmWDN3dklDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdYRng4WDE5ZlgxOWZYMTlmZkZ4dVhHNGdLaTljYmx4dUx5cGNibHgwUlZoVVJWSk9RVXdnUkVWUVJVNUVSVTVEU1VWVFhHNGdLaTljYm1sdGNHOXlkQ0JOUkRVZ1puSnZiU0FuYldRMUp6dGNibWx0Y0c5eWRDQjdJR052YlhCdmMyVWdmU0JtY205dElDZHlZVzFrWVNjN1hHNWNiaThxWEc1Y2RFbE9WRVZTVGtGTUlFUkZVRVZPUkVWT1EwbEZVMXh1SUNvdlhHNWNibWx0Y0c5eWRDQjdJR2RsZEVWNFpXTjFkR1ZrUm00c0lHZGxkRkJ5YjNCbGNuUjVUM0pFWldaR2Jpd2daMlYwUW14bGJtUkdiaXdnWjJWMFEyOXNiM0pHYmlCOUlHWnliMjBnSnk0dUwzVjBhV3h6TDNKbFptVnlaVzVqWlMxb1pXeHdaWEp6Snp0Y2JtbHRjRzl5ZENCVVlXNW5jbUZ0VW1WbVpYSmxibU5sSUdaeWIyMGdKeTR1TDNWMGFXeHpMM0psWm1WeVpXNWpaU2M3WEc1Y2JtTnZibk4wSUZCU0lEMGdWR0Z1WjNKaGJWSmxabVZ5Wlc1alpTNW5aWFJRYjJ4NVoyOXVLRzUxYkd3cE95QXZMeUJRYjJ4NVoyOXVJSEpsWm1WeVpXNWpaVnh1WTI5dWMzUWdVRkJTSUQwZ1ZHRnVaM0poYlZKbFptVnlaVzVqWlM1blpYUlFiMng1WjI5dVVHRjBkR1Z5YmlodWRXeHNLVHRjYmx4dUx5cGNibHgwU1U1VVJWSk9RVXdnVUU5TVdVZFBUbE1nUmxWT1ExUkpUMDVUWEc0Z0tpOWNibHh1WTI5dWMzUWdZMmhsWTJ0UWIyeDVaMjl1VTNsdElEMGdWR0Z1WjNKaGJWSmxabVZ5Wlc1alpTNWphR1ZqYTFONWJXSnZiR2w2WlhJb0ozQnZiSGxuYjI0bktUdGNibU52Ym5OMElHTm9aV05yVUc5c1VHRjBkR1Z5YmxONWJTQTlJRlJoYm1keVlXMVNaV1psY21WdVkyVXVZMmhsWTJ0VGVXMWliMnhwZW1WeUtDZHdiMng1WjI5dUxYQmhkSFJsY200bktUdGNibHh1THlvcVhHNGdLaUJHZFc1amRHbHZiaUJtYjNJZ1oyVjBkR2x1WnlCMGFHVWdZMjlzYjNJZ2FXNGdjbWRpWVZ4dUlDcGNiaUFxSUVCd1lYSmhiU0FnSUh0dlltcGxZM1I5SUdNemMzTWdZMjl0Y0dsc1pXUWdZMkZ5ZEc4Z1kzTnpYRzRnS2lCQWNtVjBkWEp1Y3lCN2IySnFaV04wZlNCM2FYUm9JR0VnWm5WdVkzUnBiMjRnZEdoaGRDQmpiMjUwWVdsdUlIUm9aU0JqYjI1a2FYUnBiMjV6SUhSdklISmxkSFZ5YmlCaElHTnZiRzl5SUhkcGRHZ2dZV3h3YUdFZ1kyaGhibTVsYkZ4dUlDb3ZYRzVqYjI1emRDQm5aWFJEYjJ4dmNpQTlJR2RsZEVOdmJHOXlSbTRvWEc0Z0lHZGxkRkJ5YjNCbGNuUjVUM0pFWldaR2JpZ25abWxzYkNjc0lGQlNLU3hjYmlBZ1oyVjBVSEp2Y0dWeWRIbFBja1JsWmtadUtDZG1hV3hzTFc5d1lXTnBkSGtuTENCUVVpbGNiaWs3WEc1Y2JpOHFLbHh1SUNvZ1JuVnVZM1JwYjI0Z1ptOXlJR2RsZEhScGJtY2dkR2hsSUdWNGRISjFaR1VnYjJZZ1lTQndiMng1WjI5dVhHNGdLbHh1SUNvZ1FIQmhjbUZ0SUNBZ2UyOWlhbVZqZEgwZ1l6TnpjeUJqYjIxd2FXeGxaQ0JqWVhKMGJ5QmpjM05jYmlBcUlFQnlaWFIxY201eklIdHZZbXBsWTNSOUlIZHBkR2dnWVNCbWRXNWpkR2x2YmlCMGFHRjBJR052Ym5SaGFXNGdkR2hsSUdOdmJtUnBkR2x2Ym5NZ2RHOGdjbVYwZFhKdUlHRnVJR1Y0ZEhKMVpHVWdkbUZzZFdWY2JpQXFMMXh1WEc1amIyNXpkQ0JuWlhSRmVIUnlkV1JsSUQwZ1oyVjBVSEp2Y0dWeWRIbFBja1JsWmtadUtDZDBaeTF3YjJ4NVoyOXVMV1Y0ZEhKMVpHVW5LVHRjYmx4dUx5b3FYRzRnS2lCR2RXNWpkR2x2YmlCbWIzSWdaMlYwZEdsdVp5QjBhR1VnZEdWNGRIVnlaU0JoY3lCemRISnBibWRjYmlBcVhHNGdLaUJBY0dGeVlXMGdJQ0I3YjJKcVpXTjBmU0JqTTNOeklHTnZiWEJwYkdWa0lHTmhjblJ2SUdOemMxeHVJQ29nUUhKbGRIVnlibk1nZTNOMGNtbHVaMzBnZDJsMGFDQjBhR1VnY0dGMGFDQnZaaUIwWlhoMGRYSmxYRzRnS2k5Y2JseHVZMjl1YzNRZ1oyVjBWR1Y0ZEhWeVpVWnBiR1VnUFNCblpYUkZlR1ZqZFhSbFpFWnVLQ2RtYVd4bEp5d2dVRkJTS1R0Y2JseHVZMjl1YzNRZ1oyVjBWR1Y0ZEhWeVpTQTlJR052YlhCdmMyVW9YRzRnSUUxRU5TeGNiaUFnWjJWMFZHVjRkSFZ5WlVacGJHVmNiaWs3WEc1Y2JtTnZibk4wSUdkbGRFSnNaVzVrYVc1bklEMGdaMlYwUW14bGJtUkdiaWhRVWlrN1hHNWNiaThxS2x4dUlDb2dRbUZ6YVdNZ1VHOXNlV2R2Ymx4dUlDb3ZYRzVjYm5aaGNpQlFiMng1WjI5dUlEMGdlMzA3WEc1Y2JtVjRjRzl5ZENCa1pXWmhkV3gwSUZCdmJIbG5iMjQ3WEc1Y2JpOHFLbHh1SUNvZ1JuVnVZM1JwYjI0Z2RHOGdaMlYwSUhSb1pTQmtjbUYzSUc5aWFtVmpkQ0J2WmlCaElIQnZiSGxuYjI0dVhHNGdLbHh1SUNvZ1FIQmhjbUZ0SUNBZ2UyOWlhbVZqZEgwZ1l6TnpjeUJqYjIxd2FXeGxaQ0JqWVhKMGJ5QmpjM05jYmlBcUlFQnlaWFIxY201eklIdG1kVzVqZEdsdmJuMGdablZ1WTNScGIyNGdkMmwwYUNCMGFHVWdZMjl1WkdsMGFXOXVjeUIwYnlCeVpYUjFjbTRnWVd4d2FHRWdkbUZzZFdWY2JpQXFMMXh1VUc5c2VXZHZiaTVuWlhSRWNtRjNJRDBnS0dNemMzTXNJR2xrS1NBOVBpQjdYRzRnSUd4bGRDQmtjbUYzSUQwZ2UzMDdYRzVjYmlBZ2FXWWdLR05vWldOclVHOXNlV2R2YmxONWJTaGpNM056S1NrZ2UxeHVJQ0FnSUdSeVlYZGJKM0J2YkhsbmIyNXpYeWNnS3lCcFpGMGdQU0I3WEc0Z0lDQWdJQ0JqYjJ4dmNqb2daMlYwUTI5c2IzSW9Zek56Y3lsY2JpQWdJQ0I5TzF4dUlDQjlYRzVjYmlBZ2NtVjBkWEp1SUdSeVlYYzdYRzU5TzF4dVhHNHZLaXBjYmlBcUlFWjFibU4wYVc5dUlIUnZJR2RsZENCMGFHVWdjM1I1YkdVZ1kyOXVabWxuZFhKaGRHbHZiaUJ2WmlCaElIQnZiSGxuYjI0dVhHNGdLbHh1SUNvZ1FISmxkSFZ5Ym5NZ1pHVm1ZWFZzZENCemRIbHNaU0JqYjI1bWFXZDFjbUYwYVc5dUlHWnZjaUJ3YjJ4NVoyOXVYRzRnS2k5Y2JsQnZiSGxuYjI0dVoyVjBVM1I1YkdVZ1BTQm1kVzVqZEdsdmJpaGpNM056TENCcFpDd2diM0prS1NCN1hHNGdJR3hsZENCemRIbHNaU0E5SUh0OU8xeHVYRzRnSUhOMGVXeGxXeWR3YjJ4NVoyOXVjMThuSUNzZ2FXUmRJRDBnZTF4dUlDQWdJR0poYzJVNklDZHdiMng1WjI5dWN5Y3NYRzRnSUNBZ1lteGxibVE2SUdkbGRFSnNaVzVrYVc1bktHTXpjM01wTEZ4dUlDQWdJR0pzWlc1a1gyOXlaR1Z5T2lCdmNtUWdmSHdnTVZ4dUlDQjlPMXh1WEc0Z0lHbG1JQ2hqYUdWamExQnZiRkJoZEhSbGNtNVRlVzBvWXpOemN5a3BJSHRjYmlBZ0lDQnpkSGxzWlZzbmNHOXNlV2R2Ym5OZkp5QXJJR2xrWFM1dFlYUmxjbWxoYkNBOUlIdGNiaUFnSUNBZ0lHUnBabVoxYzJVNklIdGNiaUFnSUNBZ0lDQWdkR1Y0ZEhWeVpUb2daMlYwVkdWNGRIVnlaU2hqTTNOektTeGNiaUFnSUNBZ0lDQWdiV0Z3Y0dsdVp6b2dKM1YySjF4dUlDQWdJQ0FnZlZ4dUlDQWdJSDA3WEc0Z0lIMWNibHh1WEhSeVpYUjFjbTRnYzNSNWJHVTdYRzU5TzF4dVhHNVFiMng1WjI5dUxtZGxkRlJsZUhSMWNtVnpJRDBnWXpOemN5QTlQaUI3WEc0Z0lHeGxkQ0IwWlhnZ1BTQjdmVHRjYmlBZ2FXWWdLR05vWldOclVHOXNVR0YwZEdWeWJsTjViU2hqTTNOektTa2dlMXh1SUNBZ0lHeGxkQ0IwWlhoMGRYSmxJRDBnWjJWMFZHVjRkSFZ5WlVacGJHVW9Zek56Y3lrN1hHNWNiaUFnSUNCcFppQW9kR1Y0ZEhWeVpTa2dlMXh1SUNBZ0lDQWdkR1Y0VzAxRU5TaDBaWGgwZFhKbEtWMGdQU0I3ZFhKc09pQjBaWGgwZFhKbGZUdGNiaUFnSUNCOVhHNWNiaUFnZlZ4dUlDQnlaWFIxY200Z2RHVjRPMXh1ZlR0Y2JseHVYRzVjYmk4dklGZEZRbEJCUTBzZ1JrOVBWRVZTSUM4dlhHNHZMeUJ6Y21NdlltRnphV012Y0c5c2VXZHZibk11YW5NaVhTd2liV0Z3Y0dsdVozTWlPaUk3T3pzN096czdPenM3UVVGbFFUdEJRVU5CT3pzN1FVRk5RVHRCUVVOQk8wRkJRVUU3UVVGRFFUczdPenM3UVVGT1FUczdPenRCUVU5Qk8wRkJla0pCT3pzN096czdPenM3T3pzN1FVRlpRVHM3TzBGQlkwRTdRVUZEUVR0QlFVTkJPenM3TzBGQlNVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN096czdPenRCUVUxQk8wRkJRMEU3UVVGSlFUczdPenM3T3p0QlFVOUJPMEZCUTBFN1FVRkRRVHM3T3pzN096dEJRVTlCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCU1VFN1FVRkRRVHRCUVVOQk96czdPMEZCU1VFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdPenM3T3p0QlFVMUJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVVJCTzBGQlIwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96czdPenRCUVV0Qk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCU0VFN1FVRkRRVHRCUVV0Qk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZHUVR0QlFVUkJPMEZCVFVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRlFUdEJRVU5CTzBGQlEwRWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUluMD1cIik7XG5cbi8qKiovIH0pLFxuLyogNzUgKi9cbi8qIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKiBhbGwgZXhwb3J0cyB1c2VkICovXG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9zcmMvYmFzaWMvdGV4dC5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbmV2YWwoXCJcXG5cXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXFxcIl9fZXNNb2R1bGVcXFwiLCB7XFxuICB2YWx1ZTogdHJ1ZVxcbn0pO1xcblxcbnZhciBfcmVmZXJlbmNlSGVscGVycyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL3V0aWxzL3JlZmVyZW5jZS1oZWxwZXJzICovIDE4KTtcXG5cXG52YXIgX3JlZmVyZW5jZSA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL3V0aWxzL3JlZmVyZW5jZSAqLyA5KTtcXG5cXG52YXIgX3JlZmVyZW5jZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWZlcmVuY2UpO1xcblxcbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XFxuXFxuLyoqXFxuICAgX19fX19fX19fICBfX19fX19fICAgICAgX19fICAgIF9fXyBfX19fX19fX19cXG4gIHxcXFxcX19fICAgX19fXFxcXFxcXFwgIF9fXyBcXFxcICAgIHxcXFxcICBcXFxcICAvICAvfFxcXFxfX18gICBfX19cXFxcXFxuICBcXFxcfF9fXyBcXFxcICBcXFxcX1xcXFwgXFxcXCAgIF9fL3wgICBcXFxcIFxcXFwgIFxcXFwvICAvIHx8X19fIFxcXFwgIFxcXFxffFxcbiAgICAgIFxcXFwgXFxcXCAgXFxcXCBcXFxcIFxcXFwgIFxcXFxffC9fXyAgXFxcXCBcXFxcICAgIC8gLyAgICAgXFxcXCBcXFxcICBcXFxcXFxuICAgICAgICBcXFxcIFxcXFwgIFxcXFwgXFxcXCBcXFxcICBcXFxcX3xcXFxcIFxcXFwgIC8gICAgIFxcXFwvICAgICAgIFxcXFwgXFxcXCAgXFxcXFxcbiAgICAgICAgXFxcXCBcXFxcX19cXFxcIFxcXFwgXFxcXF9fX19fX19cXFxcLyAgL1xcXFwgICBcXFxcICAgICAgICAgXFxcXCBcXFxcX19cXFxcXFxuICAgICAgICAgIFxcXFx8X198ICBcXFxcfF9fX19fX18vX18vIC9cXFxcIF9fXFxcXCAgICAgICAgXFxcXHxfX3xcXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHxfX3wvIFxcXFx8X198XFxuXFxuICovXFxuXFxuLypcXG4gIEVYVEVSTkFMIERFUEVOREVOQ0lFU1xcbiovXFxuXFxuLypcXG4gIElOVEVSTkFMIERFUEVOREVOQ0lFU1xcbiovXFxuXFxudmFyIFRSID0gX3JlZmVyZW5jZTIuZGVmYXVsdC5nZXRUZXh0KG51bGwpO1xcblxcbi8qXFxuICBJTlRFUk5BTCBQT0xZR09OUyBGVU5DVElPTlNcXG4qL1xcblxcbnZhciBjaGVja1RleHRTeW0gPSBfcmVmZXJlbmNlMi5kZWZhdWx0LmNoZWNrU3ltYm9saXplcigndGV4dCcpO1xcblxcbnZhciBnZXRUZXh0TmFtZSA9ICgwLCBfcmVmZXJlbmNlSGVscGVycy5nZXRQcm9wZXJ0eUZuU2FmZSkoJ25hbWUnLCBUUik7XFxuXFxudmFyIGdldFNpemUgPSAoMCwgX3JlZmVyZW5jZUhlbHBlcnMuZ2V0UHJvcGVydHlGblNhZmUpKCdzaXplJywgVFIpO1xcblxcbnZhciBnZXRDb2xvciA9ICgwLCBfcmVmZXJlbmNlSGVscGVycy5nZXRDb2xvckZuKSgoMCwgX3JlZmVyZW5jZUhlbHBlcnMuZ2V0UHJvcGVydHlGblNhZmUpKCdmaWxsJywgVFIpLCAoMCwgX3JlZmVyZW5jZUhlbHBlcnMuZ2V0UHJvcGVydHlPckRlZkZuKSgnb3BhY2l0eScsIFRSKSk7XFxuXFxudmFyIFRleHRQb2ludCA9IHt9O1xcblxcbmV4cG9ydHMuZGVmYXVsdCA9IFRleHRQb2ludDtcXG5cXG5cXG5UZXh0UG9pbnQuZ2V0RHJhdyA9IGZ1bmN0aW9uIChjM3NzLCBpZCkge1xcbiAgdmFyIGRyYXcgPSB7fTtcXG5cXG4gIGlmIChjaGVja1RleHRTeW0oYzNzcykpIHtcXG4gICAgZHJhd1sndGV4dF8nICsgaWRdID0ge1xcbiAgICAgIGNvbGxpZGU6IGZhbHNlLFxcbiAgICAgIGNvbG9yOiAndHJhbnNwYXJlbnQnLFxcbiAgICAgIHRleHQ6IHtcXG4gICAgICAgIHRleHRfc291cmNlOiBnZXRUZXh0TmFtZShjM3NzKSxcXG4gICAgICAgIGZvbnQ6IHtcXG4gICAgICAgICAgc2l6ZTogZ2V0U2l6ZShjM3NzKSxcXG4gICAgICAgICAgZmlsbDogZ2V0Q29sb3IoYzNzcylcXG4gICAgICAgIH0sXFxuICAgICAgICBvcHRpb25hbDogZmFsc2VcXG4gICAgICB9XFxuICAgIH07XFxuICB9XFxuXFxuICByZXR1cm4gZHJhdztcXG59O1xcblxcblRleHRQb2ludC5nZXRTdHlsZSA9IGZ1bmN0aW9uIChjM3NzLCBpZCwgb3JkKSB7XFxuICB2YXIgc3R5bGUgPSB7fTtcXG5cXG4gIHN0eWxlWyd0ZXh0XycgKyBpZF0gPSB7XFxuICAgIGJhc2U6ICdwb2ludHMnLFxcbiAgICBibGVuZDogJ292ZXJsYXknLFxcbiAgICBibGVuZF9vcmRlcjogb3JkIHx8IDFcXG4gIH07XFxuXFxuICByZXR1cm4gc3R5bGU7XFxufTsvLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaU56VXVhbk1pTENKemIzVnlZMlZ6SWpwYkluZGxZbkJoWTJzNkx5OHZjM0pqTDJKaGMybGpMM1JsZUhRdWFuTS9ZVGt3TnlKZExDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SXZLaXBjYmlBZ0lGOWZYMTlmWDE5Zlh5QWdYMTlmWDE5Zlh5QWdJQ0FnSUY5Zlh5QWdJQ0JmWDE4Z1gxOWZYMTlmWDE5ZlhHNGdJSHhjWEY5Zlh5QWdJRjlmWDF4Y1hGd2dJRjlmWHlCY1hDQWdJQ0I4WEZ3Z0lGeGNJQ0F2SUNBdmZGeGNYMTlmSUNBZ1gxOWZYRnhjYmlBZ1hGeDhYMTlmSUZ4Y0lDQmNYRjljWENCY1hDQWdJRjlmTDN3Z0lDQmNYQ0JjWENBZ1hGd3ZJQ0F2SUh4OFgxOWZJRnhjSUNCY1hGOThYRzRnSUNBZ0lDQmNYQ0JjWENBZ1hGd2dYRndnWEZ3Z0lGeGNYM3d2WDE4Z0lGeGNJRnhjSUNBZ0lDOGdMeUFnSUNBZ1hGd2dYRndnSUZ4Y1hHNGdJQ0FnSUNBZ0lGeGNJRnhjSUNCY1hDQmNYQ0JjWENBZ1hGeGZmRnhjSUZ4Y0lDQXZJQ0FnSUNCY1hDOGdJQ0FnSUNBZ1hGd2dYRndnSUZ4Y1hHNGdJQ0FnSUNBZ0lGeGNJRnhjWDE5Y1hDQmNYQ0JjWEY5ZlgxOWZYMTljWEM4Z0lDOWNYQ0FnSUZ4Y0lDQWdJQ0FnSUNBZ1hGd2dYRnhmWDF4Y1hHNGdJQ0FnSUNBZ0lDQWdYRng4WDE5OElDQmNYSHhmWDE5ZlgxOWZMMTlmTHlBdlhGd2dYMTljWENBZ0lDQWdJQ0FnWEZ4OFgxOThYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSHhmWDN3dklGeGNmRjlmZkZ4dVhHNGdLaTljYmx4dUx5cGNiaUFnUlZoVVJWSk9RVXdnUkVWUVJVNUVSVTVEU1VWVFhHNHFMMXh1WEc0dktseHVJQ0JKVGxSRlVrNUJUQ0JFUlZCRlRrUkZUa05KUlZOY2Jpb3ZYRzVjYm1sdGNHOXlkQ0I3SUdkbGRGQnliM0JsY25SNVJtNVRZV1psTENCblpYUlFjbTl3WlhKMGVVOXlSR1ZtUm00c0lHZGxkRU52Ykc5eVJtNGdmU0JtY205dElDY3VMaTkxZEdsc2N5OXlaV1psY21WdVkyVXRhR1ZzY0dWeWN5YzdYRzVwYlhCdmNuUWdWR0Z1WjNKaGJWSmxabVZ5Wlc1alpTQm1jbTl0SUNjdUxpOTFkR2xzY3k5eVpXWmxjbVZ1WTJVbk8xeHVYRzVqYjI1emRDQlVVaUE5SUZSaGJtZHlZVzFTWldabGNtVnVZMlV1WjJWMFZHVjRkQ2h1ZFd4c0tUdGNibHh1THlwY2JpQWdTVTVVUlZKT1FVd2dVRTlNV1VkUFRsTWdSbFZPUTFSSlQwNVRYRzRxTDF4dVhHNWpiMjV6ZENCamFHVmphMVJsZUhSVGVXMGdQU0JVWVc1bmNtRnRVbVZtWlhKbGJtTmxMbU5vWldOclUzbHRZbTlzYVhwbGNpZ25kR1Y0ZENjcE8xeHVYRzVqYjI1emRDQm5aWFJVWlhoMFRtRnRaU0E5SUdkbGRGQnliM0JsY25SNVJtNVRZV1psS0NkdVlXMWxKeXdnVkZJcE8xeHVYRzVqYjI1emRDQm5aWFJUYVhwbElEMGdaMlYwVUhKdmNHVnlkSGxHYmxOaFptVW9KM05wZW1VbkxDQlVVaWs3WEc1Y2JtTnZibk4wSUdkbGRFTnZiRzl5SUQwZ1oyVjBRMjlzYjNKR2JpaGNiaUFnWjJWMFVISnZjR1Z5ZEhsR2JsTmhabVVvSjJacGJHd25MQ0JVVWlrc1hHNGdJR2RsZEZCeWIzQmxjblI1VDNKRVpXWkdiaWduYjNCaFkybDBlU2NzSUZSU0tWeHVLVHRjYmx4dWRtRnlJRlJsZUhSUWIybHVkQ0E5SUh0OU8xeHVYRzVsZUhCdmNuUWdaR1ZtWVhWc2RDQlVaWGgwVUc5cGJuUTdYRzVjYmxSbGVIUlFiMmx1ZEM1blpYUkVjbUYzSUQwZ0tHTXpjM01zSUdsa0tTQTlQaUI3WEc0Z0lHeGxkQ0JrY21GM0lEMGdlMzA3WEc1Y2JpQWdhV1lnS0dOb1pXTnJWR1Y0ZEZONWJTaGpNM056S1NrZ2UxeHVJQ0FnSUdSeVlYZGJKM1JsZUhSZkp5QXJJR2xrWFNBOUlIdGNiaUFnSUNBZ0lHTnZiR3hwWkdVNklHWmhiSE5sTEZ4dUlDQWdJQ0FnWTI5c2IzSTZJQ2QwY21GdWMzQmhjbVZ1ZENjc1hHNGdJQ0FnSUNCMFpYaDBPaUI3WEc0Z0lDQWdJQ0FnSUhSbGVIUmZjMjkxY21ObE9pQm5aWFJVWlhoMFRtRnRaU2hqTTNOektTeGNiaUFnSUNBZ0lDQWdabTl1ZERvZ2UxeHVJQ0FnSUNBZ0lDQWdJSE5wZW1VNklHZGxkRk5wZW1Vb1l6TnpjeWtzWEc0Z0lDQWdJQ0FnSUNBZ1ptbHNiRG9nWjJWMFEyOXNiM0lvWXpOemN5bGNiaUFnSUNBZ0lDQWdmU3hjYmlBZ0lDQWdJQ0FnYjNCMGFXOXVZV3c2SUdaaGJITmxYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZUdGNiaUFnZlZ4dVhHNGdJSEpsZEhWeWJpQmtjbUYzTzF4dWZUdGNibHh1WEc1VVpYaDBVRzlwYm5RdVoyVjBVM1I1YkdVZ1BTQW9Zek56Y3l3Z2FXUXNJRzl5WkNrZ1BUNGdlMXh1SUNCc1pYUWdjM1I1YkdVZ1BTQjdmVHRjYmx4dUlDQnpkSGxzWlZzbmRHVjRkRjhuSUNzZ2FXUmRJRDBnZTF4dUlDQWdJR0poYzJVNklDZHdiMmx1ZEhNbkxGeHVJQ0FnSUdKc1pXNWtPaUFuYjNabGNteGhlU2NzWEc0Z0lDQWdZbXhsYm1SZmIzSmtaWEk2SUc5eVpDQjhmQ0F4WEc0Z0lIMDdYRzVjYmlBZ2NtVjBkWEp1SUhOMGVXeGxPMXh1ZlR0Y2JseHVYRzVjYmk4dklGZEZRbEJCUTBzZ1JrOVBWRVZTSUM4dlhHNHZMeUJ6Y21NdlltRnphV012ZEdWNGRDNXFjeUpkTENKdFlYQndhVzVuY3lJNklqczdPenM3TzBGQmIwSkJPMEZCUTBFN1FVRkJRVHRCUVVOQk96czdPenRCUVhSQ1FUczdPenM3T3pzN096czdPMEZCV1VFN096czdRVUZKUVRzN096dEJRVTlCTzBGQlEwRTdRVUZEUVRzN096dEJRVWxCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGSlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUVVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJSa0U3UVVGSlFUdEJRVTVCTzBGQlNFRTdRVUZaUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRklRVHRCUVVOQk8wRkJTMEU3UVVGRFFTSXNJbk52ZFhKalpWSnZiM1FpT2lJaWZRPT1cIik7XG5cbi8qKiovIH0pLFxuLyogNzYgKi9cbi8qIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKiBhbGwgZXhwb3J0cyB1c2VkICovXG4vKiEqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3NyYy9tb2R1bGUuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbmV2YWwoXCJcXG5cXG52YXIgX2NhcnRvID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9jYXJ0byAqLyA3MCk7XFxuXFxudmFyIF9jYXJ0bzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jYXJ0byk7XFxuXFxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cXG5cXG5tb2R1bGUuZXhwb3J0cyA9IHtcXG4gIGNhcnRvMkRyYXc6IF9jYXJ0bzIuZGVmYXVsdC5leHRyYWN0RmVhdHVyZXNcXG59Oy8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pTnpZdWFuTWlMQ0p6YjNWeVkyVnpJanBiSW5kbFluQmhZMnM2THk4dmMzSmpMMjF2WkhWc1pTNXFjejgwTnpReUlsMHNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJbWx0Y0c5eWRDQkRRMU5USUdaeWIyMGdKeTR2WTJGeWRHOG5PMXh1WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUh0Y2JpQWdZMkZ5ZEc4eVJISmhkem9nUTBOVFV5NWxlSFJ5WVdOMFJtVmhkSFZ5WlhNc1hHNTlPMXh1WEc1Y2JseHVMeThnVjBWQ1VFRkRTeUJHVDA5VVJWSWdMeTljYmk4dklITnlZeTl0YjJSMWJHVXVhbk1pWFN3aWJXRndjR2x1WjNNaU9pSTdPMEZCUVVFN1FVRkRRVHM3T3pzN1FVRkRRVHRCUVVOQk8wRkJSRUVpTENKemIzVnlZMlZTYjI5MElqb2lJbjA9XCIpO1xuXG4vKioqLyB9KSxcbi8qIDc3ICovXG4vKiBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyogYWxsIGV4cG9ydHMgdXNlZCAqL1xuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9zcmMvc3R5bGUvY29sb3JzLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5ldmFsKFwiXFxuXFxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFxcXCJfX2VzTW9kdWxlXFxcIiwge1xcblxcdHZhbHVlOiB0cnVlXFxufSk7XFxuXFxudmFyIF91dGlscyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL3V0aWxzL3V0aWxzICovIDM4KTtcXG5cXG52YXIgX3V0aWxzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3V0aWxzKTtcXG5cXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxcblxcbnZhciBDb2xvcnMgPSB7fTtcXG5cXG5leHBvcnRzLmRlZmF1bHQgPSBDb2xvcnM7XFxuXFxuXFxudmFyIEMgPSBDb2xvcnM7XFxuXFxuQ29sb3JzLl9pc0hleCA9IF91dGlsczIuZGVmYXVsdC5mdW5jdGlvblN0cmluZygnZnVuY3Rpb24gaXNIZXggKGMpIHtcXFxcblxcXFx0XFxcXHRyZXR1cm4gYy5pbmRleE9mKFxcXFwnI1xcXFwnKSA+PSAwO1xcXFxuXFxcXHR9Jyk7XFxuXFxuQ29sb3JzLl9pc1JHQiA9IF91dGlsczIuZGVmYXVsdC5mdW5jdGlvblN0cmluZygnZnVuY3Rpb24gKGMpIHtcXFxcblxcXFx0XFxcXHRyZXR1cm4gYy5pbmRleE9mKFxcXFwncmdiXFxcXCcpID49IDA7XFxcXG5cXFxcdH0nKTtcXG5cXG5Db2xvcnMuX2lzUkdCQSA9IF91dGlsczIuZGVmYXVsdC5mdW5jdGlvblN0cmluZygnZnVuY3Rpb24gKGMpIHtcXFxcblxcXFx0XFxcXHRyZXR1cm4gYy5pbmRleE9mKFxcXFwncmdiYVxcXFwnKSA+PSAwO1xcXFxuXFxcXHR9Jyk7XFxuXFxuQ29sb3JzLnRvU2l4SGV4ID0gX3V0aWxzMi5kZWZhdWx0LmZ1bmN0aW9uU3RyaW5nKCdmdW5jdGlvbiAoYykge1xcXFxuXFxcXHRcXFxcdFxcXFx0aWYgKGMubGVuZ3RoID09PSA3KSB7XFxcXG5cXFxcdFxcXFx0XFxcXHRcXFxcdHJldHVybiBjO1xcXFxuXFxcXHRcXFxcdFxcXFx0fVxcXFxuXFxcXHRcXFxcdFxcXFx0ZWxzZSB7XFxcXG5cXFxcdFxcXFx0XFxcXHRcXFxcdHZhciByID0gY1sxXSxcXFxcblxcXFx0XFxcXHRcXFxcdFxcXFx0XFxcXHRnID0gY1syXSxcXFxcblxcXFx0XFxcXHRcXFxcdFxcXFx0XFxcXHRiID0gY1szXTtcXFxcblxcXFxuXFxcXHRcXFxcdFxcXFx0XFxcXHRyZXR1cm4gXFxcXCcjXFxcXCcgKyByICsgciArIGcgKyBnICsgYiArIGI7XFxcXG5cXFxcdFxcXFx0XFxcXHR9XFxcXG5cXFxcdFxcXFx0fScpO1xcblxcbkNvbG9ycy5oZXhUb0ludCA9IF91dGlsczIuZGVmYXVsdC5mdW5jdGlvblN0cmluZygnZnVuY3Rpb24gKGhleCkge1xcXFxuXFxcXHRcXFxcdHJldHVybiBwYXJzZUludChcXFxcJzB4XFxcXCcgKyBoZXgpO1xcXFxuXFxcXHR9Jyk7XFxuXFxuQ29sb3JzLnRvUkdCID0gX3V0aWxzMi5kZWZhdWx0LmZ1bmN0aW9uU3RyaW5nKCdmdW5jdGlvbiAoYykge1xcXFxuXFxcXHRcXFxcdHZhciByID0gJyArIEMuaGV4VG9JbnQgKyAnKGMuc3Vic3RyKDEsIDIpKSArIFxcXFwnLCBcXFxcJyxcXFxcblxcXFx0XFxcXHRcXFxcdGcgPSAnICsgQy5oZXhUb0ludCArICcoYy5zdWJzdHIoMywgMikpICsgXFxcXCcsIFxcXFwnLFxcXFxuXFxcXHRcXFxcdFxcXFx0YiA9ICcgKyBDLmhleFRvSW50ICsgJyhjLnN1YnN0cig1LCAyKSk7XFxcXG5cXFxcblxcXFx0XFxcXHRyZXR1cm4gXFxcXCdyZ2IoXFxcXCcgKyByICsgZyArIGIgKyBcXFxcJylcXFxcJztcXFxcblxcXFx0fScpO1xcblxcbkNvbG9ycy50b1JHQkEgPSBfdXRpbHMyLmRlZmF1bHQuZnVuY3Rpb25TdHJpbmcoJ2Z1bmN0aW9uIChyZ2IsIGFscGhhKSB7XFxcXG5cXFxcdFxcXFx0cmV0dXJuIHJnYi5yZXBsYWNlKFxcXFwncmdiXFxcXCcsIFxcXFwncmdiYVxcXFwnKS5yZXBsYWNlKFxcXFwnKVxcXFwnLCBcXFxcJywgXFxcXCcgKyBhbHBoYSArIFxcXFwnKVxcXFwnKTtcXFxcblxcXFx0fScpO1xcblxcbkNvbG9ycy5nZXRBbHBoYUNvbG9yRm4gPSBfdXRpbHMyLmRlZmF1bHQuZnVuY3Rpb25TdHJpbmcoJ2Z1bmN0aW9uIChjb2xvciwgb3BhY2l0eSkge1xcXFxuXFxcXHRcXFxcdC8vIFRPRE86IHJldmlldyB0aGlzIGZhbGxiYWNrIHRvIFxcXFwnYmxhY2tcXFxcJyBjb2xvci5cXFxcblxcXFx0XFxcXHRjb2xvciA9IGNvbG9yIHx8IFxcXFwnIzAwMFxcXFwnO1xcXFxuICAgIHZhciB0b1JHQkEgPSAnICsgQy50b1JHQkEgKyAnO1xcXFxuXFxcXHRcXFxcdGlmICggJyArIEMuX2lzUkdCQSArICcoY29sb3IpICkge1xcXFxuXFxcXHRcXFxcdFxcXFx0cmV0dXJuIGNvbG9yO1xcXFxuXFxcXHRcXFxcdH1cXFxcblxcXFx0XFxcXHRlbHNlIHtcXFxcblxcXFx0XFxcXHRcXFxcdGlmICggJyArIEMuX2lzSGV4ICsgJyhjb2xvcikgKSB7XFxcXG5cXFxcdFxcXFx0XFxcXHRcXFxcdHJldHVybiB0b1JHQkEoICcgKyBDLnRvUkdCICsgJyggJyArIEMudG9TaXhIZXggKyAnKGNvbG9yKSApLCBvcGFjaXR5ICk7XFxcXG5cXFxcdFxcXFx0XFxcXHR9XFxcXG5cXFxcdFxcXFx0XFxcXHRlbHNlIGlmICggJyArIEMuX2lzUkdCICsgJyhjb2xvcikgKSB7XFxcXG5cXFxcdFxcXFx0XFxcXHRcXFxcdHJldHVybiB0b1JHQkEoY29sb3IpO1xcXFxuXFxcXHRcXFxcdFxcXFx0fVxcXFxuXFxcXHRcXFxcdH1cXFxcblxcXFx0fScpO1xcblxcbkNvbG9ycy5nZXRBbHBoYUNvbG9yID0gZnVuY3Rpb24gKGNvbG9yLCBvcGFjaXR5KSB7XFxuXFx0aWYgKGNvbG9yICYmIHR5cGVvZiBvcGFjaXR5ICE9PSAnbnVtYmVyJykge1xcblxcdFxcdHJldHVybiBfdXRpbHMyLmRlZmF1bHQuZnVuY3Rpb25TdHJpbmcoJ2Z1bmN0aW9uICgpIHtcXFxcbiAgICAgICAgICB2YXIgb3AgPSAnICsgb3BhY2l0eSArICcoKTtcXFxcbiAgICAgICAgICByZXR1cm4gJyArIEMuZ2V0QWxwaGFDb2xvckZuICsgJygnICsgY29sb3IgKyAnKCksIHR5cGVvZiBvcCA9PT0gXFxcIm51bWJlclxcXCIgPyBvcCA6IDEpO1xcXFxuICAgICAgfScpO1xcblxcdH1cXG5cXG5cXHRyZXR1cm4gY29sb3I7XFxufTsvLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaU56Y3Vhbk1pTENKemIzVnlZMlZ6SWpwYkluZGxZbkJoWTJzNkx5OHZjM0pqTDNOMGVXeGxMMk52Ykc5eWN5NXFjejh3WVRnMklsMHNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJbWx0Y0c5eWRDQlZkR2xzY3lCbWNtOXRJQ2N1TGk5MWRHbHNjeTkxZEdsc2N5YzdYRzUyWVhJZ1EyOXNiM0p6SUQwZ2UzMDdYRzVjYm1WNGNHOXlkQ0JrWldaaGRXeDBJRU52Ykc5eWN6dGNibHh1YkdWMElFTWdQU0JEYjJ4dmNuTTdYRzVjYmtOdmJHOXljeTVmYVhOSVpYZ2dQU0JWZEdsc2N5NW1kVzVqZEdsdmJsTjBjbWx1WnloY2JpQWdZR1oxYm1OMGFXOXVJR2x6U0dWNElDaGpLU0I3WEc1Y2RGeDBjbVYwZFhKdUlHTXVhVzVrWlhoUFppZ25JeWNwSUQ0OUlEQTdYRzVjZEgxZ1hHNHBPMXh1WEc1RGIyeHZjbk11WDJselVrZENJRDBnVlhScGJITXVablZ1WTNScGIyNVRkSEpwYm1jb1hHNGdJR0JtZFc1amRHbHZiaUFvWXlrZ2UxeHVYSFJjZEhKbGRIVnliaUJqTG1sdVpHVjRUMllvSjNKbllpY3BJRDQ5SURBN1hHNWNkSDFnWEc0cE8xeHVYRzVEYjJ4dmNuTXVYMmx6VWtkQ1FTQTlJRlYwYVd4ekxtWjFibU4wYVc5dVUzUnlhVzVuS0Z4dUlDQmdablZ1WTNScGIyNGdLR01wSUh0Y2JseDBYSFJ5WlhSMWNtNGdZeTVwYm1SbGVFOW1LQ2R5WjJKaEp5a2dQajBnTUR0Y2JseDBmV0JjYmlrN1hHNWNia052Ykc5eWN5NTBiMU5wZUVobGVDQTlJRlYwYVd4ekxtWjFibU4wYVc5dVUzUnlhVzVuS0Z4dUlDQmdablZ1WTNScGIyNGdLR01wSUh0Y2JseDBYSFJjZEdsbUlDaGpMbXhsYm1kMGFDQTlQVDBnTnlrZ2UxeHVYSFJjZEZ4MFhIUnlaWFIxY200Z1l6dGNibHgwWEhSY2RIMWNibHgwWEhSY2RHVnNjMlVnZTF4dVhIUmNkRngwWEhSMllYSWdjaUE5SUdOYk1WMHNYRzVjZEZ4MFhIUmNkRngwWnlBOUlHTmJNbDBzWEc1Y2RGeDBYSFJjZEZ4MFlpQTlJR05iTTEwN1hHNWNibHgwWEhSY2RGeDBjbVYwZFhKdUlDY2pKeUFySUhJZ0t5QnlJQ3NnWnlBcklHY2dLeUJpSUNzZ1lqdGNibHgwWEhSY2RIMWNibHgwWEhSOVlGeHVLVHRjYmx4dVEyOXNiM0p6TG1obGVGUnZTVzUwSUQwZ1ZYUnBiSE11Wm5WdVkzUnBiMjVUZEhKcGJtY29YRzRnSUdCbWRXNWpkR2x2YmlBb2FHVjRLU0I3WEc1Y2RGeDBjbVYwZFhKdUlIQmhjbk5sU1c1MEtDY3dlQ2NnS3lCb1pYZ3BPMXh1WEhSOVlGeHVLVHRjYmx4dVEyOXNiM0p6TG5SdlVrZENJRDBnVlhScGJITXVablZ1WTNScGIyNVRkSEpwYm1jb1hHNGdJR0JtZFc1amRHbHZiaUFvWXlrZ2UxeHVYSFJjZEhaaGNpQnlJRDBnSkh0RExtaGxlRlJ2U1c1MGZTaGpMbk4xWW5OMGNpZ3hMQ0F5S1NrZ0t5QW5MQ0FuTEZ4dVhIUmNkRngwWnlBOUlDUjdReTVvWlhoVWIwbHVkSDBvWXk1emRXSnpkSElvTXl3Z01pa3BJQ3NnSnl3Z0p5eGNibHgwWEhSY2RHSWdQU0FrZTBNdWFHVjRWRzlKYm5SOUtHTXVjM1ZpYzNSeUtEVXNJRElwS1R0Y2JseHVYSFJjZEhKbGRIVnliaUFuY21kaUtDY2dLeUJ5SUNzZ1p5QXJJR0lnS3lBbktTYzdYRzVjZEgxZ1hHNHBPMXh1WEc1RGIyeHZjbk11ZEc5U1IwSkJJRDBnVlhScGJITXVablZ1WTNScGIyNVRkSEpwYm1jb1hHNGdJR0JtZFc1amRHbHZiaUFvY21kaUxDQmhiSEJvWVNrZ2UxeHVYSFJjZEhKbGRIVnliaUJ5WjJJdWNtVndiR0ZqWlNnbmNtZGlKeXdnSjNKblltRW5LUzV5WlhCc1lXTmxLQ2NwSnl3Z0p5d2dKeUFySUdGc2NHaGhJQ3NnSnlrbktUdGNibHgwZldCY2JpazdYRzVjYmtOdmJHOXljeTVuWlhSQmJIQm9ZVU52Ykc5eVJtNGdQU0JWZEdsc2N5NW1kVzVqZEdsdmJsTjBjbWx1WnloY2JpQWdZR1oxYm1OMGFXOXVJQ2hqYjJ4dmNpd2diM0JoWTJsMGVTa2dlMXh1WEhSY2RDOHZJRlJQUkU4NklISmxkbWxsZHlCMGFHbHpJR1poYkd4aVlXTnJJSFJ2SUNkaWJHRmpheWNnWTI5c2IzSXVYRzVjZEZ4MFkyOXNiM0lnUFNCamIyeHZjaUI4ZkNBbkl6QXdNQ2M3WEc0Z0lDQWdkbUZ5SUhSdlVrZENRU0E5SUNSN1F5NTBiMUpIUWtGOU8xeHVYSFJjZEdsbUlDZ2dKSHRETGw5cGMxSkhRa0Y5S0dOdmJHOXlLU0FwSUh0Y2JseDBYSFJjZEhKbGRIVnliaUJqYjJ4dmNqdGNibHgwWEhSOVhHNWNkRngwWld4elpTQjdYRzVjZEZ4MFhIUnBaaUFvSUNSN1F5NWZhWE5JWlhoOUtHTnZiRzl5S1NBcElIdGNibHgwWEhSY2RGeDBjbVYwZFhKdUlIUnZVa2RDUVNnZ0pIdERMblJ2VWtkQ2ZTZ2dKSHRETG5SdlUybDRTR1Y0ZlNoamIyeHZjaWtnS1N3Z2IzQmhZMmwwZVNBcE8xeHVYSFJjZEZ4MGZWeHVYSFJjZEZ4MFpXeHpaU0JwWmlBb0lDUjdReTVmYVhOU1IwSjlLR052Ykc5eUtTQXBJSHRjYmx4MFhIUmNkRngwY21WMGRYSnVJSFJ2VWtkQ1FTaGpiMnh2Y2lrN1hHNWNkRngwWEhSOVhHNWNkRngwZlZ4dVhIUjlZRnh1S1R0Y2JseHVRMjlzYjNKekxtZGxkRUZzY0doaFEyOXNiM0lnUFNCbWRXNWpkR2x2YmlBb1kyOXNiM0lzSUc5d1lXTnBkSGtwSUh0Y2JpQWdhV1lnS0dOdmJHOXlJQ1ltSUhSNWNHVnZaaUJ2Y0dGamFYUjVJQ0U5UFNBbmJuVnRZbVZ5SnlrZ2UxeHVJQ0FnSUhKbGRIVnliaUJWZEdsc2N5NW1kVzVqZEdsdmJsTjBjbWx1WnloY2JpQWdJQ0FnSUdCbWRXNWpkR2x2YmlBb0tTQjdYRzRnSUNBZ0lDQWdJQ0FnZG1GeUlHOXdJRDBnSkh0dmNHRmphWFI1ZlNncE8xeHVJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQWtlME11WjJWMFFXeHdhR0ZEYjJ4dmNrWnVmU2drZTJOdmJHOXlmU2dwTENCMGVYQmxiMllnYjNBZ1BUMDlJRndpYm5WdFltVnlYQ0lnUHlCdmNDQTZJREVwTzF4dUlDQWdJQ0FnZldCY2JpQWdJQ0FwTzF4dUlDQjlYRzVjYmlBZ2NtVjBkWEp1SUdOdmJHOXlPMXh1ZlR0Y2JseHVYRzVjYmk4dklGZEZRbEJCUTBzZ1JrOVBWRVZTSUM4dlhHNHZMeUJ6Y21NdmMzUjViR1V2WTI5c2IzSnpMbXB6SWwwc0ltMWhjSEJwYm1keklqb2lPenM3T3pzN1FVRkJRVHRCUVVOQk96czdPenRCUVVGQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZCUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVV0Qk8wRkJRMEU3UVVGTFFUdEJRVU5CTzBGQlMwRTdRVUZEUVR0QlFXTkJPMEZCUTBFN1FVRkxRVHRCUVVOQk8wRkJVMEU3UVVGRFFUdEJRVXRCTzBGQlEwRTdRVUZyUWtFN1FVRkRRVHRCUVVOQk8wRkJUVUU3UVVGRFFUdEJRVU5CTzBGQlEwRWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUluMD1cIik7XG5cbi8qKiovIH0pLFxuLyogNzggKi9cbi8qIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKiBhbGwgZXhwb3J0cyB1c2VkICovXG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9zcmMvdXRpbHMvZ2VvbS5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbmV2YWwoXCJcXG5cXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXFxcIl9fZXNNb2R1bGVcXFwiLCB7XFxuICB2YWx1ZTogdHJ1ZVxcbn0pO1xcbnZhciBHZW9tID0ge307XFxuXFxuZXhwb3J0cy5kZWZhdWx0ID0gR2VvbTtcXG5cXG5cXG5HZW9tLnB4Mk1ldGVycyA9IGZ1bmN0aW9uIChmbikge1xcbiAgcmV0dXJuICgnZnVuY3Rpb24gKCkge1xcXFxuICBcXFxcdFxcXFx0dmFyIHZhbCA9ICgnICsgZm4gKyAnKCkpO1xcXFxuICBcXFxcdFxcXFx0cmV0dXJuIHZhbCAqICRtZXRlcnNfcGVyX3BpeGVsO1xcXFxuICBcXFxcdH0nKS5yZXBsYWNlKC8oXFxcXHQpL2csICcnKTtcXG59Oy8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pTnpndWFuTWlMQ0p6YjNWeVkyVnpJanBiSW5kbFluQmhZMnM2THk4dmMzSmpMM1YwYVd4ekwyZGxiMjB1YW5NL1ltRmpNeUpkTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lKMllYSWdSMlZ2YlNBOUlIdDlPMXh1WEc1bGVIQnZjblFnWkdWbVlYVnNkQ0JIWlc5dE8xeHVYRzVIWlc5dExuQjRNazFsZEdWeWN5QTlJR1oxYm1OMGFXOXVJQ2htYmlrZ2UxeHVJQ0J5WlhSMWNtNGdZR1oxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdYSFJjZEhaaGNpQjJZV3dnUFNBb0pIdG1ibjBvS1NrN1hHNGdJRngwWEhSeVpYUjFjbTRnZG1Gc0lDb2dKRzFsZEdWeWMxOXdaWEpmY0dsNFpXdzdYRzRnSUZ4MGZXQXVjbVZ3YkdGalpTZ3ZLRnhjZENrdlp5d2dKeWNwTzF4dWZUdGNibHh1WEc1Y2JpOHZJRmRGUWxCQlEwc2dSazlQVkVWU0lDOHZYRzR2THlCemNtTXZkWFJwYkhNdloyVnZiUzVxY3lKZExDSnRZWEJ3YVc1bmN5STZJanM3T3pzN1FVRkJRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlFVRTdRVUZEUVR0QlFVbEJJaXdpYzI5MWNtTmxVbTl2ZENJNklpSjlcIik7XG5cbi8qKiovIH0pLFxuLyogNzkgKi9cbi8qIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKiBhbGwgZXhwb3J0cyB1c2VkICovXG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL34vYmFiZWwtcnVudGltZS9jb3JlLWpzL2FycmF5L2Zyb20uanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5ldmFsKFwibW9kdWxlLmV4cG9ydHMgPSB7IFxcXCJkZWZhdWx0XFxcIjogX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgY29yZS1qcy9saWJyYXJ5L2ZuL2FycmF5L2Zyb20gKi8gMTEzKSwgX19lc01vZHVsZTogdHJ1ZSB9Oy8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pTnprdWFuTWlMQ0p6YjNWeVkyVnpJanBiSW5kbFluQmhZMnM2THk4dkxpOStMMkpoWW1Wc0xYSjFiblJwYldVdlkyOXlaUzFxY3k5aGNuSmhlUzltY205dExtcHpQMlZtWXpJaVhTd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2liVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQjdJRndpWkdWbVlYVnNkRndpT2lCeVpYRjFhWEpsS0Z3aVkyOXlaUzFxY3k5c2FXSnlZWEo1TDJadUwyRnljbUY1TDJaeWIyMWNJaWtzSUY5ZlpYTk5iMlIxYkdVNklIUnlkV1VnZlR0Y2JseHVYRzR2THk4dkx5OHZMeTh2THk4dkx5OHZMeTljYmk4dklGZEZRbEJCUTBzZ1JrOVBWRVZTWEc0dkx5QXVMMzR2WW1GaVpXd3RjblZ1ZEdsdFpTOWpiM0psTFdwekwyRnljbUY1TDJaeWIyMHVhbk5jYmk4dklHMXZaSFZzWlNCcFpDQTlJRGM1WEc0dkx5QnRiMlIxYkdVZ1kyaDFibXR6SUQwZ01DSmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUluMD1cIik7XG5cbi8qKiovIH0pLFxuLyogODAgKi9cbi8qIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKiBhbGwgZXhwb3J0cyB1c2VkICovXG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9+L2JhYmVsLXJ1bnRpbWUvaGVscGVycy90b0NvbnN1bWFibGVBcnJheS5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbmV2YWwoXCJcXG5cXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xcblxcbnZhciBfZnJvbSA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2NvcmUtanMvYXJyYXkvZnJvbSAqLyA3OSk7XFxuXFxudmFyIF9mcm9tMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2Zyb20pO1xcblxcbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XFxuXFxuZXhwb3J0cy5kZWZhdWx0ID0gZnVuY3Rpb24gKGFycikge1xcbiAgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkge1xcbiAgICBmb3IgKHZhciBpID0gMCwgYXJyMiA9IEFycmF5KGFyci5sZW5ndGgpOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XFxuICAgICAgYXJyMltpXSA9IGFycltpXTtcXG4gICAgfVxcblxcbiAgICByZXR1cm4gYXJyMjtcXG4gIH0gZWxzZSB7XFxuICAgIHJldHVybiAoMCwgX2Zyb20yLmRlZmF1bHQpKGFycik7XFxuICB9XFxufTsvLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaU9EQXVhbk1pTENKemIzVnlZMlZ6SWpwYkluZGxZbkJoWTJzNkx5OHZMaTkrTDJKaFltVnNMWEoxYm5ScGJXVXZhR1ZzY0dWeWN5OTBiME52Ym5OMWJXRmliR1ZCY25KaGVTNXFjejh4T0RJMUlsMHNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJbHdpZFhObElITjBjbWxqZEZ3aU8xeHVYRzVsZUhCdmNuUnpMbDlmWlhOTmIyUjFiR1VnUFNCMGNuVmxPMXh1WEc1MllYSWdYMlp5YjIwZ1BTQnlaWEYxYVhKbEtGd2lMaTR2WTI5eVpTMXFjeTloY25KaGVTOW1jbTl0WENJcE8xeHVYRzUyWVhJZ1gyWnliMjB5SUQwZ1gybHVkR1Z5YjNCU1pYRjFhWEpsUkdWbVlYVnNkQ2hmWm5KdmJTazdYRzVjYm1aMWJtTjBhVzl1SUY5cGJuUmxjbTl3VW1WeGRXbHlaVVJsWm1GMWJIUW9iMkpxS1NCN0lISmxkSFZ5YmlCdlltb2dKaVlnYjJKcUxsOWZaWE5OYjJSMWJHVWdQeUJ2WW1vZ09pQjdJR1JsWm1GMWJIUTZJRzlpYWlCOU95QjlYRzVjYm1WNGNHOXlkSE11WkdWbVlYVnNkQ0E5SUdaMWJtTjBhVzl1SUNoaGNuSXBJSHRjYmlBZ2FXWWdLRUZ5Y21GNUxtbHpRWEp5WVhrb1lYSnlLU2tnZTF4dUlDQWdJR1p2Y2lBb2RtRnlJR2tnUFNBd0xDQmhjbkl5SUQwZ1FYSnlZWGtvWVhKeUxteGxibWQwYUNrN0lHa2dQQ0JoY25JdWJHVnVaM1JvT3lCcEt5c3BJSHRjYmlBZ0lDQWdJR0Z5Y2pKYmFWMGdQU0JoY25KYmFWMDdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2NtVjBkWEp1SUdGeWNqSTdYRzRnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdjbVYwZFhKdUlDZ3dMQ0JmWm5KdmJUSXVaR1ZtWVhWc2RDa29ZWEp5S1R0Y2JpQWdmVnh1ZlR0Y2JseHVYRzR2THk4dkx5OHZMeTh2THk4dkx5OHZMeTljYmk4dklGZEZRbEJCUTBzZ1JrOVBWRVZTWEc0dkx5QXVMMzR2WW1GaVpXd3RjblZ1ZEdsdFpTOW9aV3h3WlhKekwzUnZRMjl1YzNWdFlXSnNaVUZ5Y21GNUxtcHpYRzR2THlCdGIyUjFiR1VnYVdRZ1BTQTRNRnh1THk4Z2JXOWtkV3hsSUdOb2RXNXJjeUE5SURBaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTSXNJbk52ZFhKalpWSnZiM1FpT2lJaWZRPT1cIik7XG5cbi8qKiovIH0pLFxuLyogODEgKi9cbi8qIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKiBhbGwgZXhwb3J0cyB1c2VkICovXG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vfi9jYXJ0by9saWIvY2FydG8vZnVuY3Rpb25zLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5ldmFsKFwiKGZ1bmN0aW9uICh0cmVlKSB7XFxuXFxudHJlZS5mdW5jdGlvbnMgPSB7XFxuICAgIHJnYjogZnVuY3Rpb24gKHIsIGcsIGIpIHtcXG4gICAgICAgIHJldHVybiB0aGlzLnJnYmEociwgZywgYiwgMS4wKTtcXG4gICAgfSxcXG4gICAgcmdiYTogZnVuY3Rpb24gKHIsIGcsIGIsIGEpIHtcXG4gICAgICAgIHZhciByZ2IgPSBbciwgZywgYl0ubWFwKGZ1bmN0aW9uIChjKSB7IHJldHVybiBudW1iZXIoYyk7IH0pO1xcbiAgICAgICAgYSA9IG51bWJlcihhKTtcXG4gICAgICAgIGlmIChyZ2Iuc29tZShpc05hTikgfHwgaXNOYU4oYSkpIHJldHVybiBudWxsO1xcbiAgICAgICAgcmV0dXJuIG5ldyB0cmVlLkNvbG9yKHJnYiwgYSk7XFxuICAgIH0sXFxuICAgIC8vIE9ubHkgcmVxdWlyZSB2YWxcXG4gICAgc3RvcDogZnVuY3Rpb24gKHZhbCkge1xcbiAgICAgICAgdmFyIGNvbG9yLCBtb2RlO1xcbiAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSBjb2xvciA9IGFyZ3VtZW50c1sxXTtcXG4gICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMikgbW9kZSA9IGFyZ3VtZW50c1syXTtcXG5cXG4gICAgICAgIHJldHVybiB7XFxuICAgICAgICAgICAgaXM6ICd0YWcnLFxcbiAgICAgICAgICAgIHZhbDogdmFsLFxcbiAgICAgICAgICAgIGNvbG9yOiBjb2xvcixcXG4gICAgICAgICAgICBtb2RlOiBtb2RlLFxcbiAgICAgICAgICAgIHRvU3RyaW5nOiBmdW5jdGlvbihlbnYpIHtcXG4gICAgICAgICAgICAgICAgcmV0dXJuICdcXFxcblxcXFx0PHN0b3AgdmFsdWU9XFxcIicgKyB2YWwuZXYoZW52KSArICdcXFwiJyArXFxuICAgICAgICAgICAgICAgICAgICAoY29sb3IgPyAnIGNvbG9yPVxcXCInICsgY29sb3IuZXYoZW52KSArICdcXFwiICcgOiAnJykgK1xcbiAgICAgICAgICAgICAgICAgICAgKG1vZGUgPyAnIG1vZGU9XFxcIicgKyBtb2RlLmV2KGVudikgKyAnXFxcIiAnIDogJycpICtcXG4gICAgICAgICAgICAgICAgICAgICcvPic7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgfTtcXG4gICAgfSxcXG4gICAgaHNsOiBmdW5jdGlvbiAoaCwgcywgbCkge1xcbiAgICAgICAgcmV0dXJuIHRoaXMuaHNsYShoLCBzLCBsLCAxLjApO1xcbiAgICB9LFxcbiAgICBoc2xhOiBmdW5jdGlvbiAoaCwgcywgbCwgYSkge1xcbiAgICAgICAgaCA9IChudW1iZXIoaCkgJSAzNjApIC8gMzYwO1xcbiAgICAgICAgcyA9IG51bWJlcihzKTsgbCA9IG51bWJlcihsKTsgYSA9IG51bWJlcihhKTtcXG4gICAgICAgIGlmIChbaCwgcywgbCwgYV0uc29tZShpc05hTikpIHJldHVybiBudWxsO1xcblxcbiAgICAgICAgdmFyIG0yID0gbCA8PSAwLjUgPyBsICogKHMgKyAxKSA6IGwgKyBzIC0gbCAqIHMsXFxuICAgICAgICAgICAgbTEgPSBsICogMiAtIG0yO1xcblxcbiAgICAgICAgcmV0dXJuIHRoaXMucmdiYShodWUoaCArIDEvMykgKiAyNTUsXFxuICAgICAgICAgICAgICAgICAgICAgICAgIGh1ZShoKSAgICAgICAqIDI1NSxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgaHVlKGggLSAxLzMpICogMjU1LFxcbiAgICAgICAgICAgICAgICAgICAgICAgICBhKTtcXG5cXG4gICAgICAgIGZ1bmN0aW9uIGh1ZShoKSB7XFxuICAgICAgICAgICAgaCA9IGggPCAwID8gaCArIDEgOiAoaCA+IDEgPyBoIC0gMSA6IGgpO1xcbiAgICAgICAgICAgIGlmICAgICAgKGggKiA2IDwgMSkgcmV0dXJuIG0xICsgKG0yIC0gbTEpICogaCAqIDY7XFxuICAgICAgICAgICAgZWxzZSBpZiAoaCAqIDIgPCAxKSByZXR1cm4gbTI7XFxuICAgICAgICAgICAgZWxzZSBpZiAoaCAqIDMgPCAyKSByZXR1cm4gbTEgKyAobTIgLSBtMSkgKiAoMi8zIC0gaCkgKiA2O1xcbiAgICAgICAgICAgIGVsc2UgICAgICAgICAgICAgICAgcmV0dXJuIG0xO1xcbiAgICAgICAgfVxcbiAgICB9LFxcbiAgICBodWU6IGZ1bmN0aW9uIChjb2xvcikge1xcbiAgICAgICAgaWYgKCEoJ3RvSFNMJyBpbiBjb2xvcikpIHJldHVybiBudWxsO1xcbiAgICAgICAgcmV0dXJuIG5ldyB0cmVlLkRpbWVuc2lvbihNYXRoLnJvdW5kKGNvbG9yLnRvSFNMKCkuaCkpO1xcbiAgICB9LFxcbiAgICBzYXR1cmF0aW9uOiBmdW5jdGlvbiAoY29sb3IpIHtcXG4gICAgICAgIGlmICghKCd0b0hTTCcgaW4gY29sb3IpKSByZXR1cm4gbnVsbDtcXG4gICAgICAgIHJldHVybiBuZXcgdHJlZS5EaW1lbnNpb24oTWF0aC5yb3VuZChjb2xvci50b0hTTCgpLnMgKiAxMDApLCAnJScpO1xcbiAgICB9LFxcbiAgICBsaWdodG5lc3M6IGZ1bmN0aW9uIChjb2xvcikge1xcbiAgICAgICAgaWYgKCEoJ3RvSFNMJyBpbiBjb2xvcikpIHJldHVybiBudWxsO1xcbiAgICAgICAgcmV0dXJuIG5ldyB0cmVlLkRpbWVuc2lvbihNYXRoLnJvdW5kKGNvbG9yLnRvSFNMKCkubCAqIDEwMCksICclJyk7XFxuICAgIH0sXFxuICAgIGFscGhhOiBmdW5jdGlvbiAoY29sb3IpIHtcXG4gICAgICAgIGlmICghKCd0b0hTTCcgaW4gY29sb3IpKSByZXR1cm4gbnVsbDtcXG4gICAgICAgIHJldHVybiBuZXcgdHJlZS5EaW1lbnNpb24oY29sb3IudG9IU0woKS5hKTtcXG4gICAgfSxcXG4gICAgc2F0dXJhdGU6IGZ1bmN0aW9uIChjb2xvciwgYW1vdW50KSB7XFxuICAgICAgICBpZiAoISgndG9IU0wnIGluIGNvbG9yKSkgcmV0dXJuIG51bGw7XFxuICAgICAgICB2YXIgaHNsID0gY29sb3IudG9IU0woKTtcXG5cXG4gICAgICAgIGhzbC5zICs9IGFtb3VudC52YWx1ZSAvIDEwMDtcXG4gICAgICAgIGhzbC5zID0gY2xhbXAoaHNsLnMpO1xcbiAgICAgICAgcmV0dXJuIGhzbGEoaHNsKTtcXG4gICAgfSxcXG4gICAgZGVzYXR1cmF0ZTogZnVuY3Rpb24gKGNvbG9yLCBhbW91bnQpIHtcXG4gICAgICAgIGlmICghKCd0b0hTTCcgaW4gY29sb3IpKSByZXR1cm4gbnVsbDtcXG4gICAgICAgIHZhciBoc2wgPSBjb2xvci50b0hTTCgpO1xcblxcbiAgICAgICAgaHNsLnMgLT0gYW1vdW50LnZhbHVlIC8gMTAwO1xcbiAgICAgICAgaHNsLnMgPSBjbGFtcChoc2wucyk7XFxuICAgICAgICByZXR1cm4gaHNsYShoc2wpO1xcbiAgICB9LFxcbiAgICBsaWdodGVuOiBmdW5jdGlvbiAoY29sb3IsIGFtb3VudCkge1xcbiAgICAgICAgaWYgKCEoJ3RvSFNMJyBpbiBjb2xvcikpIHJldHVybiBudWxsO1xcbiAgICAgICAgdmFyIGhzbCA9IGNvbG9yLnRvSFNMKCk7XFxuXFxuICAgICAgICBoc2wubCArPSBhbW91bnQudmFsdWUgLyAxMDA7XFxuICAgICAgICBoc2wubCA9IGNsYW1wKGhzbC5sKTtcXG4gICAgICAgIHJldHVybiBoc2xhKGhzbCk7XFxuICAgIH0sXFxuICAgIGRhcmtlbjogZnVuY3Rpb24gKGNvbG9yLCBhbW91bnQpIHtcXG4gICAgICAgIGlmICghKCd0b0hTTCcgaW4gY29sb3IpKSByZXR1cm4gbnVsbDtcXG4gICAgICAgIHZhciBoc2wgPSBjb2xvci50b0hTTCgpO1xcblxcbiAgICAgICAgaHNsLmwgLT0gYW1vdW50LnZhbHVlIC8gMTAwO1xcbiAgICAgICAgaHNsLmwgPSBjbGFtcChoc2wubCk7XFxuICAgICAgICByZXR1cm4gaHNsYShoc2wpO1xcbiAgICB9LFxcbiAgICBmYWRlaW46IGZ1bmN0aW9uIChjb2xvciwgYW1vdW50KSB7XFxuICAgICAgICBpZiAoISgndG9IU0wnIGluIGNvbG9yKSkgcmV0dXJuIG51bGw7XFxuICAgICAgICB2YXIgaHNsID0gY29sb3IudG9IU0woKTtcXG5cXG4gICAgICAgIGhzbC5hICs9IGFtb3VudC52YWx1ZSAvIDEwMDtcXG4gICAgICAgIGhzbC5hID0gY2xhbXAoaHNsLmEpO1xcbiAgICAgICAgcmV0dXJuIGhzbGEoaHNsKTtcXG4gICAgfSxcXG4gICAgZmFkZW91dDogZnVuY3Rpb24gKGNvbG9yLCBhbW91bnQpIHtcXG4gICAgICAgIGlmICghKCd0b0hTTCcgaW4gY29sb3IpKSByZXR1cm4gbnVsbDtcXG4gICAgICAgIHZhciBoc2wgPSBjb2xvci50b0hTTCgpO1xcblxcbiAgICAgICAgaHNsLmEgLT0gYW1vdW50LnZhbHVlIC8gMTAwO1xcbiAgICAgICAgaHNsLmEgPSBjbGFtcChoc2wuYSk7XFxuICAgICAgICByZXR1cm4gaHNsYShoc2wpO1xcbiAgICB9LFxcbiAgICBzcGluOiBmdW5jdGlvbiAoY29sb3IsIGFtb3VudCkge1xcbiAgICAgICAgaWYgKCEoJ3RvSFNMJyBpbiBjb2xvcikpIHJldHVybiBudWxsO1xcbiAgICAgICAgdmFyIGhzbCA9IGNvbG9yLnRvSFNMKCk7XFxuICAgICAgICB2YXIgaHVlID0gKGhzbC5oICsgYW1vdW50LnZhbHVlKSAlIDM2MDtcXG5cXG4gICAgICAgIGhzbC5oID0gaHVlIDwgMCA/IDM2MCArIGh1ZSA6IGh1ZTtcXG5cXG4gICAgICAgIHJldHVybiBoc2xhKGhzbCk7XFxuICAgIH0sXFxuICAgIHJlcGxhY2U6IGZ1bmN0aW9uIChlbnRpdHksIGEsIGIpIHtcXG4gICAgICAgIGlmIChlbnRpdHkuaXMgPT09ICdmaWVsZCcpIHtcXG4gICAgICAgICAgICByZXR1cm4gZW50aXR5LnRvU3RyaW5nICsgJy5yZXBsYWNlKCcgKyBhLnRvU3RyaW5nKCkgKyAnLCAnICsgYi50b1N0cmluZygpICsgJyknO1xcbiAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICByZXR1cm4gZW50aXR5LnJlcGxhY2UoYSwgYik7XFxuICAgICAgICB9XFxuICAgIH0sXFxuICAgIC8vXFxuICAgIC8vIENvcHlyaWdodCAoYykgMjAwNi0yMDA5IEhhbXB0b24gQ2F0bGluLCBOYXRoYW4gV2VpemVuYmF1bSwgYW5kIENocmlzIEVwcHN0ZWluXFxuICAgIC8vIGh0dHA6Ly9zYXNzLWxhbmcuY29tXFxuICAgIC8vXFxuICAgIG1peDogZnVuY3Rpb24gKGNvbG9yMSwgY29sb3IyLCB3ZWlnaHQpIHtcXG4gICAgICAgIHZhciBwID0gd2VpZ2h0LnZhbHVlIC8gMTAwLjA7XFxuICAgICAgICB2YXIgdyA9IHAgKiAyIC0gMTtcXG4gICAgICAgIHZhciBhID0gY29sb3IxLnRvSFNMKCkuYSAtIGNvbG9yMi50b0hTTCgpLmE7XFxuXFxuICAgICAgICB2YXIgdzEgPSAoKCh3ICogYSA9PSAtMSkgPyB3IDogKHcgKyBhKSAvICgxICsgdyAqIGEpKSArIDEpIC8gMi4wO1xcbiAgICAgICAgdmFyIHcyID0gMSAtIHcxO1xcblxcbiAgICAgICAgdmFyIHJnYiA9IFtjb2xvcjEucmdiWzBdICogdzEgKyBjb2xvcjIucmdiWzBdICogdzIsXFxuICAgICAgICAgICAgICAgICAgIGNvbG9yMS5yZ2JbMV0gKiB3MSArIGNvbG9yMi5yZ2JbMV0gKiB3MixcXG4gICAgICAgICAgICAgICAgICAgY29sb3IxLnJnYlsyXSAqIHcxICsgY29sb3IyLnJnYlsyXSAqIHcyXTtcXG5cXG4gICAgICAgIHZhciBhbHBoYSA9IGNvbG9yMS5hbHBoYSAqIHAgKyBjb2xvcjIuYWxwaGEgKiAoMSAtIHApO1xcblxcbiAgICAgICAgcmV0dXJuIG5ldyB0cmVlLkNvbG9yKHJnYiwgYWxwaGEpO1xcbiAgICB9LFxcbiAgICBncmV5c2NhbGU6IGZ1bmN0aW9uIChjb2xvcikge1xcbiAgICAgICAgcmV0dXJuIHRoaXMuZGVzYXR1cmF0ZShjb2xvciwgbmV3IHRyZWUuRGltZW5zaW9uKDEwMCkpO1xcbiAgICB9LFxcbiAgICAnJSc6IGZ1bmN0aW9uIChxdW90ZWQgLyogYXJnLCBhcmcsIC4uLiovKSB7XFxuICAgICAgICB2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSksXFxuICAgICAgICAgICAgc3RyID0gcXVvdGVkLnZhbHVlO1xcblxcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSB7XFxuICAgICAgICAgICAgc3RyID0gc3RyLnJlcGxhY2UoLyVzLywgICAgYXJnc1tpXS52YWx1ZSlcXG4gICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvJVtkYV0vLCBhcmdzW2ldLnRvU3RyaW5nKCkpO1xcbiAgICAgICAgfVxcbiAgICAgICAgc3RyID0gc3RyLnJlcGxhY2UoLyUlL2csICclJyk7XFxuICAgICAgICByZXR1cm4gbmV3IHRyZWUuUXVvdGVkKHN0cik7XFxuICAgIH1cXG59O1xcblxcbnZhciBpbWFnZV9maWx0ZXJfZnVuY3RvcnMgPSBbXFxuICAgICdlbWJvc3MnLCAnYmx1cicsICdncmF5JywgJ3NvYmVsJywgJ2VkZ2UtZGV0ZWN0JyxcXG4gICAgJ3gtZ3JhZGllbnQnLCAneS1ncmFkaWVudCcsICdzaGFycGVuJ107XFxuXFxuZm9yICh2YXIgaSA9IDA7IGkgPCBpbWFnZV9maWx0ZXJfZnVuY3RvcnMubGVuZ3RoOyBpKyspIHtcXG4gICAgdmFyIGYgPSBpbWFnZV9maWx0ZXJfZnVuY3RvcnNbaV07XFxuICAgIHRyZWUuZnVuY3Rpb25zW2ZdID0gKGZ1bmN0aW9uKGYpIHtcXG4gICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcXG4gICAgICAgICAgICByZXR1cm4gbmV3IHRyZWUuSW1hZ2VGaWx0ZXIoZik7XFxuICAgICAgICB9O1xcbiAgICB9KShmKTtcXG59XFxuXFxudHJlZS5mdW5jdGlvbnNbJ2FnZy1zdGFjay1ibHVyJ10gPSBmdW5jdGlvbih4LCB5KSB7XFxuICAgIHJldHVybiBuZXcgdHJlZS5JbWFnZUZpbHRlcignYWdnLXN0YWNrLWJsdXInLCBbeCwgeV0pO1xcbn07XFxuXFxudHJlZS5mdW5jdGlvbnNbJ3NjYWxlLWhzbGEnXSA9IGZ1bmN0aW9uKGgwLGgxLHMwLHMxLGwwLGwxLGEwLGExKSB7XFxuICAgIHJldHVybiBuZXcgdHJlZS5JbWFnZUZpbHRlcignc2NhbGUtaHNsYScsIFtoMCxoMSxzMCxzMSxsMCxsMSxhMCxhMV0pO1xcbn07XFxuXFxuZnVuY3Rpb24gaHNsYShoKSB7XFxuICAgIHJldHVybiB0cmVlLmZ1bmN0aW9ucy5oc2xhKGguaCwgaC5zLCBoLmwsIGguYSk7XFxufVxcblxcbmZ1bmN0aW9uIG51bWJlcihuKSB7XFxuICAgIGlmIChuIGluc3RhbmNlb2YgdHJlZS5EaW1lbnNpb24pIHtcXG4gICAgICAgIHJldHVybiBwYXJzZUZsb2F0KG4udW5pdCA9PSAnJScgPyBuLnZhbHVlIC8gMTAwIDogbi52YWx1ZSk7XFxuICAgIH0gZWxzZSBpZiAodHlwZW9mKG4pID09PSAnbnVtYmVyJykge1xcbiAgICAgICAgcmV0dXJuIG47XFxuICAgIH0gZWxzZSB7XFxuICAgICAgICByZXR1cm4gTmFOO1xcbiAgICB9XFxufVxcblxcbmZ1bmN0aW9uIGNsYW1wKHZhbCkge1xcbiAgICByZXR1cm4gTWF0aC5taW4oMSwgTWF0aC5tYXgoMCwgdmFsKSk7XFxufVxcblxcbn0pKF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vdHJlZSAqLyAwKSk7XFxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lPREV1YW5NaUxDSnpiM1Z5WTJWeklqcGJJbmRsWW5CaFkyczZMeTh2TGk5K0wyTmhjblJ2TDJ4cFlpOWpZWEowYnk5bWRXNWpkR2x2Ym5NdWFuTS9OREUzTXlKZExDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SW9ablZ1WTNScGIyNGdLSFJ5WldVcElIdGNibHh1ZEhKbFpTNW1kVzVqZEdsdmJuTWdQU0I3WEc0Z0lDQWdjbWRpT2lCbWRXNWpkR2x2YmlBb2Npd2daeXdnWWlrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTV5WjJKaEtISXNJR2NzSUdJc0lERXVNQ2s3WEc0Z0lDQWdmU3hjYmlBZ0lDQnlaMkpoT2lCbWRXNWpkR2x2YmlBb2Npd2daeXdnWWl3Z1lTa2dlMXh1SUNBZ0lDQWdJQ0IyWVhJZ2NtZGlJRDBnVzNJc0lHY3NJR0pkTG0xaGNDaG1kVzVqZEdsdmJpQW9ZeWtnZXlCeVpYUjFjbTRnYm5WdFltVnlLR01wT3lCOUtUdGNiaUFnSUNBZ0lDQWdZU0E5SUc1MWJXSmxjaWhoS1R0Y2JpQWdJQ0FnSUNBZ2FXWWdLSEpuWWk1emIyMWxLR2x6VG1GT0tTQjhmQ0JwYzA1aFRpaGhLU2tnY21WMGRYSnVJRzUxYkd3N1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCdVpYY2dkSEpsWlM1RGIyeHZjaWh5WjJJc0lHRXBPMXh1SUNBZ0lIMHNYRzRnSUNBZ0x5OGdUMjVzZVNCeVpYRjFhWEpsSUhaaGJGeHVJQ0FnSUhOMGIzQTZJR1oxYm1OMGFXOXVJQ2gyWVd3cElIdGNiaUFnSUNBZ0lDQWdkbUZ5SUdOdmJHOXlMQ0J0YjJSbE8xeHVJQ0FnSUNBZ0lDQnBaaUFvWVhKbmRXMWxiblJ6TG14bGJtZDBhQ0ErSURFcElHTnZiRzl5SUQwZ1lYSm5kVzFsYm5Seld6RmRPMXh1SUNBZ0lDQWdJQ0JwWmlBb1lYSm5kVzFsYm5SekxteGxibWQwYUNBK0lESXBJRzF2WkdVZ1BTQmhjbWQxYldWdWRITmJNbDA3WEc1Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2x6T2lBbmRHRm5KeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lIWmhiRG9nZG1Gc0xGeHVJQ0FnSUNBZ0lDQWdJQ0FnWTI5c2IzSTZJR052Ykc5eUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnYlc5a1pUb2diVzlrWlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJ2VTNSeWFXNW5PaUJtZFc1amRHbHZiaWhsYm5ZcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z0oxeGNibHhjZER4emRHOXdJSFpoYkhWbFBWd2lKeUFySUhaaGJDNWxkaWhsYm5ZcElDc2dKMXdpSnlBclhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2hqYjJ4dmNpQS9JQ2NnWTI5c2IzSTlYQ0luSUNzZ1kyOXNiM0l1WlhZb1pXNTJLU0FySUNkY0lpQW5JRG9nSnljcElDdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnS0cxdlpHVWdQeUFuSUcxdlpHVTlYQ0luSUNzZ2JXOWtaUzVsZGlobGJuWXBJQ3NnSjF3aUlDY2dPaUFuSnlrZ0sxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FuTHo0bk8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCOU8xeHVJQ0FnSUgwc1hHNGdJQ0FnYUhOc09pQm1kVzVqZEdsdmJpQW9hQ3dnY3l3Z2JDa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1b2MyeGhLR2dzSUhNc0lHd3NJREV1TUNrN1hHNGdJQ0FnZlN4Y2JpQWdJQ0JvYzJ4aE9pQm1kVzVqZEdsdmJpQW9hQ3dnY3l3Z2JDd2dZU2tnZTF4dUlDQWdJQ0FnSUNCb0lEMGdLRzUxYldKbGNpaG9LU0FsSURNMk1Da2dMeUF6TmpBN1hHNGdJQ0FnSUNBZ0lITWdQU0J1ZFcxaVpYSW9jeWs3SUd3Z1BTQnVkVzFpWlhJb2JDazdJR0VnUFNCdWRXMWlaWElvWVNrN1hHNGdJQ0FnSUNBZ0lHbG1JQ2hiYUN3Z2N5d2diQ3dnWVYwdWMyOXRaU2hwYzA1aFRpa3BJSEpsZEhWeWJpQnVkV3hzTzF4dVhHNGdJQ0FnSUNBZ0lIWmhjaUJ0TWlBOUlHd2dQRDBnTUM0MUlEOGdiQ0FxSUNoeklDc2dNU2tnT2lCc0lDc2djeUF0SUd3Z0tpQnpMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2JURWdQU0JzSUNvZ01pQXRJRzB5TzF4dVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbkpuWW1Fb2FIVmxLR2dnS3lBeEx6TXBJQ29nTWpVMUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHaDFaU2hvS1NBZ0lDQWdJQ0FxSURJMU5TeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm9kV1VvYUNBdElERXZNeWtnS2lBeU5UVXNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZU2s3WEc1Y2JpQWdJQ0FnSUNBZ1puVnVZM1JwYjI0Z2FIVmxLR2dwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2dnUFNCb0lEd2dNQ0EvSUdnZ0t5QXhJRG9nS0dnZ1BpQXhJRDhnYUNBdElERWdPaUJvS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNBZ0lDQWdLR2dnS2lBMklEd2dNU2tnY21WMGRYSnVJRzB4SUNzZ0tHMHlJQzBnYlRFcElDb2dhQ0FxSURZN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JsYkhObElHbG1JQ2hvSUNvZ01pQThJREVwSUhKbGRIVnliaUJ0TWp0Y2JpQWdJQ0FnSUNBZ0lDQWdJR1ZzYzJVZ2FXWWdLR2dnS2lBeklEd2dNaWtnY21WMGRYSnVJRzB4SUNzZ0tHMHlJQzBnYlRFcElDb2dLREl2TXlBdElHZ3BJQ29nTmp0Y2JpQWdJQ0FnSUNBZ0lDQWdJR1ZzYzJVZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJRzB4TzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnZlN4Y2JpQWdJQ0JvZFdVNklHWjFibU4wYVc5dUlDaGpiMnh2Y2lrZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvSVNnbmRHOUlVMHduSUdsdUlHTnZiRzl5S1NrZ2NtVjBkWEp1SUc1MWJHdzdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQnVaWGNnZEhKbFpTNUVhVzFsYm5OcGIyNG9UV0YwYUM1eWIzVnVaQ2hqYjJ4dmNpNTBiMGhUVENncExtZ3BLVHRjYmlBZ0lDQjlMRnh1SUNBZ0lITmhkSFZ5WVhScGIyNDZJR1oxYm1OMGFXOXVJQ2hqYjJ4dmNpa2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb0lTZ25kRzlJVTB3bklHbHVJR052Ykc5eUtTa2djbVYwZFhKdUlHNTFiR3c3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJ1WlhjZ2RISmxaUzVFYVcxbGJuTnBiMjRvVFdGMGFDNXliM1Z1WkNoamIyeHZjaTUwYjBoVFRDZ3BMbk1nS2lBeE1EQXBMQ0FuSlNjcE8xeHVJQ0FnSUgwc1hHNGdJQ0FnYkdsbmFIUnVaWE56T2lCbWRXNWpkR2x2YmlBb1kyOXNiM0lwSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLQ0VvSjNSdlNGTk1KeUJwYmlCamIyeHZjaWtwSUhKbGRIVnliaUJ1ZFd4c08xeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2JtVjNJSFJ5WldVdVJHbHRaVzV6YVc5dUtFMWhkR2d1Y205MWJtUW9ZMjlzYjNJdWRHOUlVMHdvS1M1c0lDb2dNVEF3S1N3Z0p5VW5LVHRjYmlBZ0lDQjlMRnh1SUNBZ0lHRnNjR2hoT2lCbWRXNWpkR2x2YmlBb1kyOXNiM0lwSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLQ0VvSjNSdlNGTk1KeUJwYmlCamIyeHZjaWtwSUhKbGRIVnliaUJ1ZFd4c08xeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2JtVjNJSFJ5WldVdVJHbHRaVzV6YVc5dUtHTnZiRzl5TG5SdlNGTk1LQ2t1WVNrN1hHNGdJQ0FnZlN4Y2JpQWdJQ0J6WVhSMWNtRjBaVG9nWm5WdVkzUnBiMjRnS0dOdmJHOXlMQ0JoYlc5MWJuUXBJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tDRW9KM1J2U0ZOTUp5QnBiaUJqYjJ4dmNpa3BJSEpsZEhWeWJpQnVkV3hzTzF4dUlDQWdJQ0FnSUNCMllYSWdhSE5zSUQwZ1kyOXNiM0l1ZEc5SVUwd29LVHRjYmx4dUlDQWdJQ0FnSUNCb2Myd3VjeUFyUFNCaGJXOTFiblF1ZG1Gc2RXVWdMeUF4TURBN1hHNGdJQ0FnSUNBZ0lHaHpiQzV6SUQwZ1kyeGhiWEFvYUhOc0xuTXBPMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdhSE5zWVNob2Myd3BPMXh1SUNBZ0lIMHNYRzRnSUNBZ1pHVnpZWFIxY21GMFpUb2dablZ1WTNScGIyNGdLR052Ykc5eUxDQmhiVzkxYm5RcElIdGNiaUFnSUNBZ0lDQWdhV1lnS0NFb0ozUnZTRk5NSnlCcGJpQmpiMnh2Y2lrcElISmxkSFZ5YmlCdWRXeHNPMXh1SUNBZ0lDQWdJQ0IyWVhJZ2FITnNJRDBnWTI5c2IzSXVkRzlJVTB3b0tUdGNibHh1SUNBZ0lDQWdJQ0JvYzJ3dWN5QXRQU0JoYlc5MWJuUXVkbUZzZFdVZ0x5QXhNREE3WEc0Z0lDQWdJQ0FnSUdoemJDNXpJRDBnWTJ4aGJYQW9hSE5zTG5NcE8xeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2FITnNZU2hvYzJ3cE8xeHVJQ0FnSUgwc1hHNGdJQ0FnYkdsbmFIUmxiam9nWm5WdVkzUnBiMjRnS0dOdmJHOXlMQ0JoYlc5MWJuUXBJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tDRW9KM1J2U0ZOTUp5QnBiaUJqYjJ4dmNpa3BJSEpsZEhWeWJpQnVkV3hzTzF4dUlDQWdJQ0FnSUNCMllYSWdhSE5zSUQwZ1kyOXNiM0l1ZEc5SVUwd29LVHRjYmx4dUlDQWdJQ0FnSUNCb2Myd3ViQ0FyUFNCaGJXOTFiblF1ZG1Gc2RXVWdMeUF4TURBN1hHNGdJQ0FnSUNBZ0lHaHpiQzVzSUQwZ1kyeGhiWEFvYUhOc0xtd3BPMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdhSE5zWVNob2Myd3BPMXh1SUNBZ0lIMHNYRzRnSUNBZ1pHRnlhMlZ1T2lCbWRXNWpkR2x2YmlBb1kyOXNiM0lzSUdGdGIzVnVkQ2tnZTF4dUlDQWdJQ0FnSUNCcFppQW9JU2duZEc5SVUwd25JR2x1SUdOdmJHOXlLU2tnY21WMGRYSnVJRzUxYkd3N1hHNGdJQ0FnSUNBZ0lIWmhjaUJvYzJ3Z1BTQmpiMnh2Y2k1MGIwaFRUQ2dwTzF4dVhHNGdJQ0FnSUNBZ0lHaHpiQzVzSUMwOUlHRnRiM1Z1ZEM1MllXeDFaU0F2SURFd01EdGNiaUFnSUNBZ0lDQWdhSE5zTG13Z1BTQmpiR0Z0Y0Nob2Myd3ViQ2s3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJvYzJ4aEtHaHpiQ2s3WEc0Z0lDQWdmU3hjYmlBZ0lDQm1ZV1JsYVc0NklHWjFibU4wYVc5dUlDaGpiMnh2Y2l3Z1lXMXZkVzUwS1NCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2doS0NkMGIwaFRUQ2NnYVc0Z1kyOXNiM0lwS1NCeVpYUjFjbTRnYm5Wc2JEdGNiaUFnSUNBZ0lDQWdkbUZ5SUdoemJDQTlJR052Ykc5eUxuUnZTRk5NS0NrN1hHNWNiaUFnSUNBZ0lDQWdhSE5zTG1FZ0t6MGdZVzF2ZFc1MExuWmhiSFZsSUM4Z01UQXdPMXh1SUNBZ0lDQWdJQ0JvYzJ3dVlTQTlJR05zWVcxd0tHaHpiQzVoS1R0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdoemJHRW9hSE5zS1R0Y2JpQWdJQ0I5TEZ4dUlDQWdJR1poWkdWdmRYUTZJR1oxYm1OMGFXOXVJQ2hqYjJ4dmNpd2dZVzF2ZFc1MEtTQjdYRzRnSUNBZ0lDQWdJR2xtSUNnaEtDZDBiMGhUVENjZ2FXNGdZMjlzYjNJcEtTQnlaWFIxY200Z2JuVnNiRHRjYmlBZ0lDQWdJQ0FnZG1GeUlHaHpiQ0E5SUdOdmJHOXlMblJ2U0ZOTUtDazdYRzVjYmlBZ0lDQWdJQ0FnYUhOc0xtRWdMVDBnWVcxdmRXNTBMblpoYkhWbElDOGdNVEF3TzF4dUlDQWdJQ0FnSUNCb2Myd3VZU0E5SUdOc1lXMXdLR2h6YkM1aEtUdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHaHpiR0VvYUhOc0tUdGNiaUFnSUNCOUxGeHVJQ0FnSUhOd2FXNDZJR1oxYm1OMGFXOXVJQ2hqYjJ4dmNpd2dZVzF2ZFc1MEtTQjdYRzRnSUNBZ0lDQWdJR2xtSUNnaEtDZDBiMGhUVENjZ2FXNGdZMjlzYjNJcEtTQnlaWFIxY200Z2JuVnNiRHRjYmlBZ0lDQWdJQ0FnZG1GeUlHaHpiQ0E5SUdOdmJHOXlMblJ2U0ZOTUtDazdYRzRnSUNBZ0lDQWdJSFpoY2lCb2RXVWdQU0FvYUhOc0xtZ2dLeUJoYlc5MWJuUXVkbUZzZFdVcElDVWdNell3TzF4dVhHNGdJQ0FnSUNBZ0lHaHpiQzVvSUQwZ2FIVmxJRHdnTUNBL0lETTJNQ0FySUdoMVpTQTZJR2gxWlR0Y2JseHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2FITnNZU2hvYzJ3cE8xeHVJQ0FnSUgwc1hHNGdJQ0FnY21Wd2JHRmpaVG9nWm5WdVkzUnBiMjRnS0dWdWRHbDBlU3dnWVN3Z1lpa2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb1pXNTBhWFI1TG1seklEMDlQU0FuWm1sbGJHUW5LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1pXNTBhWFI1TG5SdlUzUnlhVzVuSUNzZ0p5NXlaWEJzWVdObEtDY2dLeUJoTG5SdlUzUnlhVzVuS0NrZ0t5QW5MQ0FuSUNzZ1lpNTBiMU4wY21sdVp5Z3BJQ3NnSnlrbk8xeHVJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJR1Z1ZEdsMGVTNXlaWEJzWVdObEtHRXNJR0lwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnZlN4Y2JpQWdJQ0F2TDF4dUlDQWdJQzh2SUVOdmNIbHlhV2RvZENBb1l5a2dNakF3TmkweU1EQTVJRWhoYlhCMGIyNGdRMkYwYkdsdUxDQk9ZWFJvWVc0Z1YyVnBlbVZ1WW1GMWJTd2dZVzVrSUVOb2NtbHpJRVZ3Y0hOMFpXbHVYRzRnSUNBZ0x5OGdhSFIwY0RvdkwzTmhjM010YkdGdVp5NWpiMjFjYmlBZ0lDQXZMMXh1SUNBZ0lHMXBlRG9nWm5WdVkzUnBiMjRnS0dOdmJHOXlNU3dnWTI5c2IzSXlMQ0IzWldsbmFIUXBJSHRjYmlBZ0lDQWdJQ0FnZG1GeUlIQWdQU0IzWldsbmFIUXVkbUZzZFdVZ0x5QXhNREF1TUR0Y2JpQWdJQ0FnSUNBZ2RtRnlJSGNnUFNCd0lDb2dNaUF0SURFN1hHNGdJQ0FnSUNBZ0lIWmhjaUJoSUQwZ1kyOXNiM0l4TG5SdlNGTk1LQ2t1WVNBdElHTnZiRzl5TWk1MGIwaFRUQ2dwTG1FN1hHNWNiaUFnSUNBZ0lDQWdkbUZ5SUhjeElEMGdLQ2dvZHlBcUlHRWdQVDBnTFRFcElEOGdkeUE2SUNoM0lDc2dZU2tnTHlBb01TQXJJSGNnS2lCaEtTa2dLeUF4S1NBdklESXVNRHRjYmlBZ0lDQWdJQ0FnZG1GeUlIY3lJRDBnTVNBdElIY3hPMXh1WEc0Z0lDQWdJQ0FnSUhaaGNpQnlaMklnUFNCYlkyOXNiM0l4TG5Kbllsc3dYU0FxSUhjeElDc2dZMjlzYjNJeUxuSm5ZbHN3WFNBcUlIY3lMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOdmJHOXlNUzV5WjJKYk1WMGdLaUIzTVNBcklHTnZiRzl5TWk1eVoySmJNVjBnS2lCM01peGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjJ4dmNqRXVjbWRpV3pKZElDb2dkekVnS3lCamIyeHZjakl1Y21kaVd6SmRJQ29nZHpKZE8xeHVYRzRnSUNBZ0lDQWdJSFpoY2lCaGJIQm9ZU0E5SUdOdmJHOXlNUzVoYkhCb1lTQXFJSEFnS3lCamIyeHZjakl1WVd4d2FHRWdLaUFvTVNBdElIQXBPMXh1WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJ1WlhjZ2RISmxaUzVEYjJ4dmNpaHlaMklzSUdGc2NHaGhLVHRjYmlBZ0lDQjlMRnh1SUNBZ0lHZHlaWGx6WTJGc1pUb2dablZ1WTNScGIyNGdLR052Ykc5eUtTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG1SbGMyRjBkWEpoZEdVb1kyOXNiM0lzSUc1bGR5QjBjbVZsTGtScGJXVnVjMmx2YmlneE1EQXBLVHRjYmlBZ0lDQjlMRnh1SUNBZ0lDY2xKem9nWm5WdVkzUnBiMjRnS0hGMWIzUmxaQ0F2S2lCaGNtY3NJR0Z5Wnl3Z0xpNHVLaThwSUh0Y2JpQWdJQ0FnSUNBZ2RtRnlJR0Z5WjNNZ1BTQkJjbkpoZVM1d2NtOTBiM1I1Y0dVdWMyeHBZMlV1WTJGc2JDaGhjbWQxYldWdWRITXNJREVwTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdjM1J5SUQwZ2NYVnZkR1ZrTG5aaGJIVmxPMXh1WEc0Z0lDQWdJQ0FnSUdadmNpQW9kbUZ5SUdrZ1BTQXdPeUJwSUR3Z1lYSm5jeTVzWlc1bmRHZzdJR2tyS3lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYzNSeUlEMGdjM1J5TG5KbGNHeGhZMlVvTHlWekx5d2dJQ0FnWVhKbmMxdHBYUzUyWVd4MVpTbGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM1eVpYQnNZV05sS0M4bFcyUmhYUzhzSUdGeVozTmJhVjB1ZEc5VGRISnBibWNvS1NrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdjM1J5SUQwZ2MzUnlMbkpsY0d4aFkyVW9MeVVsTDJjc0lDY2xKeWs3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJ1WlhjZ2RISmxaUzVSZFc5MFpXUW9jM1J5S1R0Y2JpQWdJQ0I5WEc1OU8xeHVYRzUyWVhJZ2FXMWhaMlZmWm1sc2RHVnlYMloxYm1OMGIzSnpJRDBnVzF4dUlDQWdJQ2RsYldKdmMzTW5MQ0FuWW14MWNpY3NJQ2RuY21GNUp5d2dKM052WW1Wc0p5d2dKMlZrWjJVdFpHVjBaV04wSnl4Y2JpQWdJQ0FuZUMxbmNtRmthV1Z1ZENjc0lDZDVMV2R5WVdScFpXNTBKeXdnSjNOb1lYSndaVzRuWFR0Y2JseHVabTl5SUNoMllYSWdhU0E5SURBN0lHa2dQQ0JwYldGblpWOW1hV3gwWlhKZlpuVnVZM1J2Y25NdWJHVnVaM1JvT3lCcEt5c3BJSHRjYmlBZ0lDQjJZWElnWmlBOUlHbHRZV2RsWDJacGJIUmxjbDltZFc1amRHOXljMXRwWFR0Y2JpQWdJQ0IwY21WbExtWjFibU4wYVc5dWMxdG1YU0E5SUNobWRXNWpkR2x2YmlobUtTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQm1kVzVqZEdsdmJpZ3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCdVpYY2dkSEpsWlM1SmJXRm5aVVpwYkhSbGNpaG1LVHRjYmlBZ0lDQWdJQ0FnZlR0Y2JpQWdJQ0I5S1NobUtUdGNibjFjYmx4dWRISmxaUzVtZFc1amRHbHZibk5iSjJGblp5MXpkR0ZqYXkxaWJIVnlKMTBnUFNCbWRXNWpkR2x2YmloNExDQjVLU0I3WEc0Z0lDQWdjbVYwZFhKdUlHNWxkeUIwY21WbExrbHRZV2RsUm1sc2RHVnlLQ2RoWjJjdGMzUmhZMnN0WW14MWNpY3NJRnQ0TENCNVhTazdYRzU5TzF4dVhHNTBjbVZsTG1aMWJtTjBhVzl1YzFzbmMyTmhiR1V0YUhOc1lTZGRJRDBnWm5WdVkzUnBiMjRvYURBc2FERXNjekFzY3pFc2JEQXNiREVzWVRBc1lURXBJSHRjYmlBZ0lDQnlaWFIxY200Z2JtVjNJSFJ5WldVdVNXMWhaMlZHYVd4MFpYSW9KM05qWVd4bExXaHpiR0VuTENCYmFEQXNhREVzY3pBc2N6RXNiREFzYkRFc1lUQXNZVEZkS1R0Y2JuMDdYRzVjYm1aMWJtTjBhVzl1SUdoemJHRW9hQ2tnZTF4dUlDQWdJSEpsZEhWeWJpQjBjbVZsTG1aMWJtTjBhVzl1Y3k1b2MyeGhLR2d1YUN3Z2FDNXpMQ0JvTG13c0lHZ3VZU2s3WEc1OVhHNWNibVoxYm1OMGFXOXVJRzUxYldKbGNpaHVLU0I3WEc0Z0lDQWdhV1lnS0c0Z2FXNXpkR0Z1WTJWdlppQjBjbVZsTGtScGJXVnVjMmx2YmlrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2NHRnljMlZHYkc5aGRDaHVMblZ1YVhRZ1BUMGdKeVVuSUQ4Z2JpNTJZV3gxWlNBdklERXdNQ0E2SUc0dWRtRnNkV1VwTzF4dUlDQWdJSDBnWld4elpTQnBaaUFvZEhsd1pXOW1LRzRwSUQwOVBTQW5iblZ0WW1WeUp5a2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdianRjYmlBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1RtRk9PMXh1SUNBZ0lIMWNibjFjYmx4dVpuVnVZM1JwYjI0Z1kyeGhiWEFvZG1Gc0tTQjdYRzRnSUNBZ2NtVjBkWEp1SUUxaGRHZ3ViV2x1S0RFc0lFMWhkR2d1YldGNEtEQXNJSFpoYkNrcE8xeHVmVnh1WEc1OUtTaHlaWEYxYVhKbEtDY3VMM1J5WldVbktTazdYRzVjYmx4dVhHNHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OWNiaTh2SUZkRlFsQkJRMHNnUms5UFZFVlNYRzR2THlBdUwzNHZZMkZ5ZEc4dmJHbGlMMk5oY25SdkwyWjFibU4wYVc5dWN5NXFjMXh1THk4Z2JXOWtkV3hsSUdsa0lEMGdPREZjYmk4dklHMXZaSFZzWlNCamFIVnVhM01nUFNBd0lsMHNJbTFoY0hCcGJtZHpJam9pUVVGQlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzaUxDSnpiM1Z5WTJWU2IyOTBJam9pSW4wPVwiKTtcblxuLyoqKi8gfSksXG4vKiA4MiAqL1xuLyogbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9cbi8qIGFsbCBleHBvcnRzIHVzZWQgKi9cbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9+L2NhcnRvL2xpYi9jYXJ0by9wYXJzZXIuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbmV2YWwoXCIvKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi8oZnVuY3Rpb24oZ2xvYmFsKSB7dmFyIGNhcnRvID0gZXhwb3J0cyxcXG4gICAgdHJlZSA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vdHJlZSAqLyAwKSxcXG4gICAgXyA9IGdsb2JhbC5fIHx8IF9fd2VicGFja19yZXF1aXJlX18oLyohIHVuZGVyc2NvcmUgKi8gNCk7XFxuXFxuLy8gICAgVG9rZW4gbWF0Y2hpbmcgaXMgZG9uZSB3aXRoIHRoZSBgJGAgZnVuY3Rpb24sIHdoaWNoIGVpdGhlciB0YWtlc1xcbi8vICAgIGEgdGVybWluYWwgc3RyaW5nIG9yIHJlZ2V4cCwgb3IgYSBub24tdGVybWluYWwgZnVuY3Rpb24gdG8gY2FsbC5cXG4vLyAgICBJdCBhbHNvIHRha2VzIGNhcmUgb2YgbW92aW5nIGFsbCB0aGUgaW5kaWNlcyBmb3J3YXJkcy5cXG5jYXJ0by5QYXJzZXIgPSBmdW5jdGlvbiBQYXJzZXIoZW52KSB7XFxuICAgIHZhciBpbnB1dCwgICAgICAgLy8gTGVTUyBpbnB1dCBzdHJpbmdcXG4gICAgICAgIGksICAgICAgICAgICAvLyBjdXJyZW50IGluZGV4IGluIGBpbnB1dGBcXG4gICAgICAgIGosICAgICAgICAgICAvLyBjdXJyZW50IGNodW5rXFxuICAgICAgICB0ZW1wLCAgICAgICAgLy8gdGVtcG9yYXJpbHkgaG9sZHMgYSBjaHVuaydzIHN0YXRlLCBmb3IgYmFja3RyYWNraW5nXFxuICAgICAgICBtZW1vLCAgICAgICAgLy8gdGVtcG9yYXJpbHkgaG9sZHMgYGlgLCB3aGVuIGJhY2t0cmFja2luZ1xcbiAgICAgICAgZnVydGhlc3QsICAgIC8vIGZ1cnRoZXN0IGluZGV4IHRoZSBwYXJzZXIgaGFzIGdvbmUgdG9cXG4gICAgICAgIGNodW5rcywgICAgICAvLyBjaHVua2lmaWVkIGlucHV0XFxuICAgICAgICBjdXJyZW50LCAgICAgLy8gaW5kZXggb2YgY3VycmVudCBjaHVuaywgaW4gYGlucHV0YFxcbiAgICAgICAgcGFyc2VyO1xcblxcbiAgICB2YXIgdGhhdCA9IHRoaXM7XFxuXFxuICAgIC8vIFRoaXMgZnVuY3Rpb24gaXMgY2FsbGVkIGFmdGVyIGFsbCBmaWxlc1xcbiAgICAvLyBoYXZlIGJlZW4gaW1wb3J0ZWQgdGhyb3VnaCBgQGltcG9ydGAuXFxuICAgIHZhciBmaW5pc2ggPSBmdW5jdGlvbigpIHt9O1xcblxcbiAgICBmdW5jdGlvbiBzYXZlKCkgICAge1xcbiAgICAgICAgdGVtcCA9IGNodW5rc1tqXTtcXG4gICAgICAgIG1lbW8gPSBpO1xcbiAgICAgICAgY3VycmVudCA9IGk7XFxuICAgIH1cXG4gICAgZnVuY3Rpb24gcmVzdG9yZSgpIHtcXG4gICAgICAgIGNodW5rc1tqXSA9IHRlbXA7XFxuICAgICAgICBpID0gbWVtbztcXG4gICAgICAgIGN1cnJlbnQgPSBpO1xcbiAgICB9XFxuXFxuICAgIGZ1bmN0aW9uIHN5bmMoKSB7XFxuICAgICAgICBpZiAoaSA+IGN1cnJlbnQpIHtcXG4gICAgICAgICAgICBjaHVua3Nbal0gPSBjaHVua3Nbal0uc2xpY2UoaSAtIGN1cnJlbnQpO1xcbiAgICAgICAgICAgIGN1cnJlbnQgPSBpO1xcbiAgICAgICAgfVxcbiAgICB9XFxuICAgIC8vXFxuICAgIC8vIFBhcnNlIGZyb20gYSB0b2tlbiwgcmVnZXhwIG9yIHN0cmluZywgYW5kIG1vdmUgZm9yd2FyZCBpZiBtYXRjaFxcbiAgICAvL1xcbiAgICBmdW5jdGlvbiAkKHRvaykge1xcbiAgICAgICAgdmFyIG1hdGNoLCBhcmdzLCBsZW5ndGgsIGMsIGluZGV4LCBlbmRJbmRleCwgaztcXG5cXG4gICAgICAgIC8vIE5vbi10ZXJtaW5hbFxcbiAgICAgICAgaWYgKHRvayBpbnN0YW5jZW9mIEZ1bmN0aW9uKSB7XFxuICAgICAgICAgICAgcmV0dXJuIHRvay5jYWxsKHBhcnNlci5wYXJzZXJzKTtcXG4gICAgICAgIC8vIFRlcm1pbmFsXFxuICAgICAgICAvLyBFaXRoZXIgbWF0Y2ggYSBzaW5nbGUgY2hhcmFjdGVyIGluIHRoZSBpbnB1dCxcXG4gICAgICAgIC8vIG9yIG1hdGNoIGEgcmVnZXhwIGluIHRoZSBjdXJyZW50IGNodW5rIChjaHVua1tqXSkuXFxuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZih0b2spID09PSAnc3RyaW5nJykge1xcbiAgICAgICAgICAgIG1hdGNoID0gaW5wdXQuY2hhckF0KGkpID09PSB0b2sgPyB0b2sgOiBudWxsO1xcbiAgICAgICAgICAgIGxlbmd0aCA9IDE7XFxuICAgICAgICAgICAgc3luYygpO1xcbiAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICBzeW5jKCk7XFxuXFxuICAgICAgICAgICAgbWF0Y2ggPSB0b2suZXhlYyhjaHVua3Nbal0pO1xcbiAgICAgICAgICAgIGlmIChtYXRjaCkge1xcbiAgICAgICAgICAgICAgICBsZW5ndGggPSBtYXRjaFswXS5sZW5ndGg7XFxuICAgICAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgfVxcblxcbiAgICAgICAgLy8gVGhlIG1hdGNoIGlzIGNvbmZpcm1lZCwgYWRkIHRoZSBtYXRjaCBsZW5ndGggdG8gYGlgLFxcbiAgICAgICAgLy8gYW5kIGNvbnN1bWUgYW55IGV4dHJhIHdoaXRlLXNwYWNlIGNoYXJhY3RlcnMgKCcgJyB8fCAnXFxcXG4nKVxcbiAgICAgICAgLy8gd2hpY2ggY29tZSBhZnRlciB0aGF0LiBUaGUgcmVhc29uIGZvciB0aGlzIGlzIHRoYXQgTGVTUydzXFxuICAgICAgICAvLyBncmFtbWFyIGlzIG1vc3RseSB3aGl0ZS1zcGFjZSBpbnNlbnNpdGl2ZS5cXG4gICAgICAgIGlmIChtYXRjaCkge1xcbiAgICAgICAgICAgIHZhciBtZW0gPSBpICs9IGxlbmd0aDtcXG4gICAgICAgICAgICBlbmRJbmRleCA9IGkgKyBjaHVua3Nbal0ubGVuZ3RoIC0gbGVuZ3RoO1xcblxcbiAgICAgICAgICAgIHdoaWxlIChpIDwgZW5kSW5kZXgpIHtcXG4gICAgICAgICAgICAgICAgYyA9IGlucHV0LmNoYXJDb2RlQXQoaSk7XFxuICAgICAgICAgICAgICAgIGlmICghIChjID09PSAzMiB8fCBjID09PSAxMCB8fCBjID09PSA5KSkgeyBicmVhazsgfVxcbiAgICAgICAgICAgICAgICBpKys7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIGNodW5rc1tqXSA9IGNodW5rc1tqXS5zbGljZShsZW5ndGggKyAoaSAtIG1lbSkpO1xcbiAgICAgICAgICAgIGN1cnJlbnQgPSBpO1xcblxcbiAgICAgICAgICAgIGlmIChjaHVua3Nbal0ubGVuZ3RoID09PSAwICYmIGogPCBjaHVua3MubGVuZ3RoIC0gMSkgeyBqKys7IH1cXG5cXG4gICAgICAgICAgICBpZiAodHlwZW9mKG1hdGNoKSA9PT0gJ3N0cmluZycpIHtcXG4gICAgICAgICAgICAgICAgcmV0dXJuIG1hdGNoO1xcbiAgICAgICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgICAgIHJldHVybiBtYXRjaC5sZW5ndGggPT09IDEgPyBtYXRjaFswXSA6IG1hdGNoO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgIH1cXG4gICAgfVxcblxcbiAgICAvLyBTYW1lIGFzICQoKSwgYnV0IGRvbid0IGNoYW5nZSB0aGUgc3RhdGUgb2YgdGhlIHBhcnNlcixcXG4gICAgLy8ganVzdCByZXR1cm4gdGhlIG1hdGNoLlxcbiAgICBmdW5jdGlvbiBwZWVrKHRvaykge1xcbiAgICAgICAgaWYgKHR5cGVvZih0b2spID09PSAnc3RyaW5nJykge1xcbiAgICAgICAgICAgIHJldHVybiBpbnB1dC5jaGFyQXQoaSkgPT09IHRvaztcXG4gICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgcmV0dXJuICEhdG9rLnRlc3QoY2h1bmtzW2pdKTtcXG4gICAgICAgIH1cXG4gICAgfVxcblxcbiAgICBmdW5jdGlvbiBleHRyYWN0RXJyb3JMaW5lKHN0eWxlLCBlcnJvckluZGV4KSB7XFxuICAgICAgICByZXR1cm4gKHN0eWxlLnNsaWNlKDAsIGVycm9ySW5kZXgpLm1hdGNoKC9cXFxcbi9nKSB8fCAnJykubGVuZ3RoICsgMTtcXG4gICAgfVxcblxcblxcbiAgICAvLyBNYWtlIGFuIGVycm9yIG9iamVjdCBmcm9tIGEgcGFzc2VkIHNldCBvZiBwcm9wZXJ0aWVzLlxcbiAgICAvLyBBY2NlcHRlZCBwcm9wZXJ0aWVzOlxcbiAgICAvLyAtIGBtZXNzYWdlYDogVGV4dCBvZiB0aGUgZXJyb3IgbWVzc2FnZS5cXG4gICAgLy8gLSBgZmlsZW5hbWVgOiBGaWxlbmFtZSB3aGVyZSB0aGUgZXJyb3Igb2NjdXJyZWQuXFxuICAgIC8vIC0gYGluZGV4YDogQ2hhci4gaW5kZXggd2hlcmUgdGhlIGVycm9yIG9jY3VycmVkLlxcbiAgICBmdW5jdGlvbiBtYWtlRXJyb3IoZXJyKSB7XFxuICAgICAgICB2YXIgZWlucHV0O1xcbiAgICAgICAgdmFyIGVycm9yVGVtcGxhdGU7XFxuXFxuICAgICAgICBfLmRlZmF1bHRzKGVyciwge1xcbiAgICAgICAgICAgIGluZGV4OiBmdXJ0aGVzdCxcXG4gICAgICAgICAgICBmaWxlbmFtZTogZW52LmZpbGVuYW1lLFxcbiAgICAgICAgICAgIG1lc3NhZ2U6ICdQYXJzZSBlcnJvci4nLFxcbiAgICAgICAgICAgIGxpbmU6IDAsXFxuICAgICAgICAgICAgY29sdW1uOiAtMVxcbiAgICAgICAgfSk7XFxuXFxuICAgICAgICBpZiAoZXJyLmZpbGVuYW1lICYmIHRoYXQuZW52LmlucHV0cyAmJiB0aGF0LmVudi5pbnB1dHNbZXJyLmZpbGVuYW1lXSkge1xcbiAgICAgICAgICAgIGVpbnB1dCA9IHRoYXQuZW52LmlucHV0c1tlcnIuZmlsZW5hbWVdO1xcbiAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICBlaW5wdXQgPSBpbnB1dDtcXG4gICAgICAgIH1cXG5cXG4gICAgICAgIGVyci5saW5lID0gZXh0cmFjdEVycm9yTGluZShlaW5wdXQsIGVyci5pbmRleCk7XFxuICAgICAgICBmb3IgKHZhciBuID0gZXJyLmluZGV4OyBuID49IDAgJiYgZWlucHV0LmNoYXJBdChuKSAhPT0gJ1xcXFxuJzsgbi0tKSB7XFxuICAgICAgICAgICAgZXJyLmNvbHVtbisrO1xcbiAgICAgICAgfVxcbiAgICAgICAgZXJyb3JUZW1wbGF0ZSA9IF8udGVtcGxhdGUoJzwlPWZpbGVuYW1lJT46PCU9bGluZSU+OjwlPWNvbHVtbiU+IDwlPW1lc3NhZ2UlPicpO1xcbiAgICAgICAgcmV0dXJuIG5ldyBFcnJvcihlcnJvclRlbXBsYXRlKGVycikpO1xcbiAgICB9XFxuXFxuICAgIHRoaXMuZW52ID0gZW52ID0gZW52IHx8IHt9O1xcbiAgICB0aGlzLmVudi5maWxlbmFtZSA9IHRoaXMuZW52LmZpbGVuYW1lIHx8IG51bGw7XFxuICAgIHRoaXMuZW52LmlucHV0cyA9IHRoaXMuZW52LmlucHV0cyB8fCB7fTtcXG5cXG4gICAgLy8gVGhlIFBhcnNlclxcbiAgICBwYXJzZXIgPSB7XFxuXFxuICAgICAgICBleHRyYWN0RXJyb3JMaW5lOiBleHRyYWN0RXJyb3JMaW5lLFxcbiAgICAgICAgLy9cXG4gICAgICAgIC8vIFBhcnNlIGFuIGlucHV0IHN0cmluZyBpbnRvIGFuIGFic3RyYWN0IHN5bnRheCB0cmVlLlxcbiAgICAgICAgLy8gVGhyb3dzIGFuIGVycm9yIG9uIHBhcnNlIGVycm9ycy5cXG4gICAgICAgIHBhcnNlOiBmdW5jdGlvbihzdHIpIHtcXG4gICAgICAgICAgICB2YXIgcm9vdCwgc3RhcnQsIGVuZCwgem9uZSwgbGluZSwgbGluZXMsIGJ1ZmYgPSBbXSwgYywgZXJyb3IgPSBudWxsO1xcblxcbiAgICAgICAgICAgIGkgPSBqID0gY3VycmVudCA9IGZ1cnRoZXN0ID0gMDtcXG4gICAgICAgICAgICBjaHVua3MgPSBbXTtcXG4gICAgICAgICAgICBpbnB1dCA9IHN0ci5yZXBsYWNlKC9cXFxcclxcXFxuL2csICdcXFxcbicpO1xcbiAgICAgICAgICAgIGlmIChlbnYuZmlsZW5hbWUpIHtcXG4gICAgICAgICAgICAgICAgdGhhdC5lbnYuaW5wdXRzW2Vudi5maWxlbmFtZV0gPSBpbnB1dDtcXG4gICAgICAgICAgICB9XFxuXFxuICAgICAgICAgICAgdmFyIGVhcmx5X2V4aXQgPSBmYWxzZTtcXG5cXG4gICAgICAgICAgICAvLyBTcGxpdCB0aGUgaW5wdXQgaW50byBjaHVua3MuXFxuICAgICAgICAgICAgY2h1bmtzID0gKGZ1bmN0aW9uIChjaHVua3MpIHtcXG4gICAgICAgICAgICAgICAgdmFyIGogPSAwLFxcbiAgICAgICAgICAgICAgICAgICAgc2tpcCA9IC8oPzpAXFxcXHtbXFxcXHctXStcXFxcfXxbXlxcXCInYFxcXFx7XFxcXH1cXFxcL1xcXFwoXFxcXClcXFxcXFxcXF0pKy9nLFxcbiAgICAgICAgICAgICAgICAgICAgY29tbWVudCA9IC9cXFxcL1xcXFwqKD86W14qXXxcXFxcKitbXlxcXFwvKl0pKlxcXFwqK1xcXFwvfFxcXFwvXFxcXC8uKi9nLFxcbiAgICAgICAgICAgICAgICAgICAgc3RyaW5nID0gL1xcXCIoKD86W15cXFwiXFxcXFxcXFxcXFxcclxcXFxuXXxcXFxcXFxcXC4pKilcXFwifCcoKD86W14nXFxcXFxcXFxcXFxcclxcXFxuXXxcXFxcXFxcXC4pKiknfGAoKD86W15gXXxcXFxcXFxcXC4pKilgL2csXFxuICAgICAgICAgICAgICAgICAgICBsZXZlbCA9IDAsXFxuICAgICAgICAgICAgICAgICAgICBtYXRjaCxcXG4gICAgICAgICAgICAgICAgICAgIGNodW5rID0gY2h1bmtzWzBdLFxcbiAgICAgICAgICAgICAgICAgICAgaW5QYXJhbTtcXG5cXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGMsIGNjOyBpIDwgaW5wdXQubGVuZ3RoOykge1xcbiAgICAgICAgICAgICAgICAgICAgc2tpcC5sYXN0SW5kZXggPSBpO1xcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1hdGNoID0gc2tpcC5leGVjKGlucHV0KSkge1xcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtYXRjaC5pbmRleCA9PT0gaSkge1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpICs9IG1hdGNoWzBdLmxlbmd0aDtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2h1bmsucHVzaChtYXRjaFswXSk7XFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICAgICAgYyA9IGlucHV0LmNoYXJBdChpKTtcXG4gICAgICAgICAgICAgICAgICAgIGNvbW1lbnQubGFzdEluZGV4ID0gc3RyaW5nLmxhc3RJbmRleCA9IGk7XFxuXFxuICAgICAgICAgICAgICAgICAgICBpZiAobWF0Y2ggPSBzdHJpbmcuZXhlYyhpbnB1dCkpIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobWF0Y2guaW5kZXggPT09IGkpIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaSArPSBtYXRjaFswXS5sZW5ndGg7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNodW5rLnB1c2gobWF0Y2hbMF0pO1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcXG4gICAgICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgICAgICB9XFxuXFxuICAgICAgICAgICAgICAgICAgICBpZiAoIWluUGFyYW0gJiYgYyA9PT0gJy8nKSB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgY2MgPSBpbnB1dC5jaGFyQXQoaSArIDEpO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjYyA9PT0gJy8nIHx8IGNjID09PSAnKicpIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1hdGNoID0gY29tbWVudC5leGVjKGlucHV0KSkge1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1hdGNoLmluZGV4ID09PSBpKSB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaSArPSBtYXRjaFswXS5sZW5ndGg7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2h1bmsucHVzaChtYXRjaFswXSk7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgICAgICB9XFxuXFxuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKGMpIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICd7JzogaWYgKCEgaW5QYXJhbSkgeyBsZXZlbCArKzsgICAgICAgIGNodW5rLnB1c2goYyk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7IH1cXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICd9JzogaWYgKCEgaW5QYXJhbSkgeyBsZXZlbCAtLTsgICAgICAgIGNodW5rLnB1c2goYyk7IGNodW5rc1srK2pdID0gY2h1bmsgPSBbXTsgYnJlYWs7IH1cXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICcoJzogaWYgKCEgaW5QYXJhbSkgeyBpblBhcmFtID0gdHJ1ZTsgIGNodW5rLnB1c2goYyk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7IH1cXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICcpJzogaWYgKCAgaW5QYXJhbSkgeyBpblBhcmFtID0gZmFsc2U7IGNodW5rLnB1c2goYyk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7IH1cXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNodW5rLnB1c2goYyk7XFxuICAgICAgICAgICAgICAgICAgICB9XFxuXFxuICAgICAgICAgICAgICAgICAgICBpKys7XFxuICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgaWYgKGxldmVsICE9PSAwKSB7XFxuICAgICAgICAgICAgICAgICAgICBlcnJvciA9IHtcXG4gICAgICAgICAgICAgICAgICAgICAgICBpbmRleDogaSAtIDEsXFxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ1BhcnNlJyxcXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAobGV2ZWwgPiAwKSA/IFxcXCJtaXNzaW5nIGNsb3NpbmcgYH1gXFxcIiA6IFxcXCJtaXNzaW5nIG9wZW5pbmcgYHtgXFxcIlxcbiAgICAgICAgICAgICAgICAgICAgfTtcXG4gICAgICAgICAgICAgICAgfVxcblxcbiAgICAgICAgICAgICAgICByZXR1cm4gY2h1bmtzLm1hcChmdW5jdGlvbiAoYykgeyByZXR1cm4gYy5qb2luKCcnKTsgfSk7XFxuICAgICAgICAgICAgfSkoW1tdXSk7XFxuXFxuICAgICAgICAgICAgaWYgKGVycm9yKSB7XFxuICAgICAgICAgICAgICAgIHRocm93IG1ha2VFcnJvcihlcnJvcik7XFxuICAgICAgICAgICAgfVxcblxcbiAgICAgICAgICAgIC8vIFN0YXJ0IHdpdGggdGhlIHByaW1hcnkgcnVsZS5cXG4gICAgICAgICAgICAvLyBUaGUgd2hvbGUgc3ludGF4IHRyZWUgaXMgaGVsZCB1bmRlciBhIFJ1bGVzZXQgbm9kZSxcXG4gICAgICAgICAgICAvLyB3aXRoIHRoZSBgcm9vdGAgcHJvcGVydHkgc2V0IHRvIHRydWUsIHNvIG5vIGB7fWAgYXJlXFxuICAgICAgICAgICAgLy8gb3V0cHV0LlxcbiAgICAgICAgICAgIHJvb3QgPSBuZXcgdHJlZS5SdWxlc2V0KFtdLCAkKHRoaXMucGFyc2Vycy5wcmltYXJ5KSk7XFxuICAgICAgICAgICAgcm9vdC5yb290ID0gdHJ1ZTtcXG5cXG4gICAgICAgICAgICAvLyBHZXQgYW4gYXJyYXkgb2YgUnVsZXNldCBvYmplY3RzLCBmbGF0dGVuZWRcXG4gICAgICAgICAgICAvLyBhbmQgc29ydGVkIGFjY29yZGluZyB0byBzcGVjaWZpY2l0eVNvcnRcXG4gICAgICAgICAgICByb290LnRvTGlzdCA9IChmdW5jdGlvbigpIHtcXG4gICAgICAgICAgICAgICAgdmFyIGxpbmUsIGxpbmVzLCBjb2x1bW47XFxuICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbihlbnYpIHtcXG4gICAgICAgICAgICAgICAgICAgIGVudi5lcnJvciA9IGZ1bmN0aW9uKGUpIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWVudi5lcnJvcnMpIGVudi5lcnJvcnMgPSBuZXcgRXJyb3IoJycpO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlbnYuZXJyb3JzLm1lc3NhZ2UpIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZW52LmVycm9ycy5tZXNzYWdlICs9ICdcXFxcbicgKyBtYWtlRXJyb3IoZSkubWVzc2FnZTtcXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbnYuZXJyb3JzLm1lc3NhZ2UgPSBtYWtlRXJyb3IoZSkubWVzc2FnZTtcXG4gICAgICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgICAgICB9O1xcbiAgICAgICAgICAgICAgICAgICAgZW52LmZyYW1lcyA9IGVudi5mcmFtZXMgfHwgW107XFxuXFxuXFxuICAgICAgICAgICAgICAgICAgICAvLyBjYWxsIHBvcHVsYXRlcyBJbnZhbGlkLWNhdXNlZCBlcnJvcnNcXG4gICAgICAgICAgICAgICAgICAgIHZhciBkZWZpbml0aW9ucyA9IHRoaXMuZmxhdHRlbihbXSwgW10sIGVudik7XFxuICAgICAgICAgICAgICAgICAgICBkZWZpbml0aW9ucy5zb3J0KHNwZWNpZmljaXR5U29ydCk7XFxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGVmaW5pdGlvbnM7XFxuICAgICAgICAgICAgICAgIH07XFxuICAgICAgICAgICAgfSkoKTtcXG5cXG4gICAgICAgICAgICAvLyBTb3J0IHJ1bGVzIGJ5IHNwZWNpZmljaXR5OiB0aGlzIGZ1bmN0aW9uIGV4cGVjdHMgc2VsZWN0b3JzIHRvIGJlXFxuICAgICAgICAgICAgLy8gc3BsaXQgYWxyZWFkeS5cXG4gICAgICAgICAgICAvL1xcbiAgICAgICAgICAgIC8vIFdyaXR0ZW4gdG8gYmUgdXNlZCBhcyBhIC5zb3J0KEZ1bmN0aW9uKTtcXG4gICAgICAgICAgICAvLyBhcmd1bWVudC5cXG4gICAgICAgICAgICAvL1xcbiAgICAgICAgICAgIC8vIFsxLCAwLCAwLCA0NjddID4gWzAsIDAsIDEsIDUyMF1cXG4gICAgICAgICAgICB2YXIgc3BlY2lmaWNpdHlTb3J0ID0gZnVuY3Rpb24oYSwgYikge1xcbiAgICAgICAgICAgICAgICB2YXIgYXMgPSBhLnNwZWNpZmljaXR5O1xcbiAgICAgICAgICAgICAgICB2YXIgYnMgPSBiLnNwZWNpZmljaXR5O1xcblxcbiAgICAgICAgICAgICAgICBpZiAoYXNbMF0gIT0gYnNbMF0pIHJldHVybiBic1swXSAtIGFzWzBdO1xcbiAgICAgICAgICAgICAgICBpZiAoYXNbMV0gIT0gYnNbMV0pIHJldHVybiBic1sxXSAtIGFzWzFdO1xcbiAgICAgICAgICAgICAgICBpZiAoYXNbMl0gIT0gYnNbMl0pIHJldHVybiBic1syXSAtIGFzWzJdO1xcbiAgICAgICAgICAgICAgICByZXR1cm4gYnNbM10gLSBhc1szXTtcXG4gICAgICAgICAgICB9O1xcblxcbiAgICAgICAgICAgIHJldHVybiByb290O1xcbiAgICAgICAgfSxcXG5cXG4gICAgICAgIC8vIEhlcmUgaW4sIHRoZSBwYXJzaW5nIHJ1bGVzL2Z1bmN0aW9uc1xcbiAgICAgICAgLy9cXG4gICAgICAgIC8vIFRoZSBiYXNpYyBzdHJ1Y3R1cmUgb2YgdGhlIHN5bnRheCB0cmVlIGdlbmVyYXRlZCBpcyBhcyBmb2xsb3dzOlxcbiAgICAgICAgLy9cXG4gICAgICAgIC8vICAgUnVsZXNldCAtPiAgUnVsZSAtPiBWYWx1ZSAtPiBFeHByZXNzaW9uIC0+IEVudGl0eVxcbiAgICAgICAgLy9cXG4gICAgICAgIC8vICBJbiBnZW5lcmFsLCBtb3N0IHJ1bGVzIHdpbGwgdHJ5IHRvIHBhcnNlIGEgdG9rZW4gd2l0aCB0aGUgYCQoKWAgZnVuY3Rpb24sIGFuZCBpZiB0aGUgcmV0dXJuXFxuICAgICAgICAvLyAgdmFsdWUgaXMgdHJ1bHksIHdpbGwgcmV0dXJuIGEgbmV3IG5vZGUsIG9mIHRoZSByZWxldmFudCB0eXBlLiBTb21ldGltZXMsIHdlIG5lZWQgdG8gY2hlY2tcXG4gICAgICAgIC8vICBmaXJzdCwgYmVmb3JlIHBhcnNpbmcsIHRoYXQncyB3aGVuIHdlIHVzZSBgcGVlaygpYC5cXG4gICAgICAgIHBhcnNlcnM6IHtcXG4gICAgICAgICAgICAvLyBUaGUgYHByaW1hcnlgIHJ1bGUgaXMgdGhlICplbnRyeSogYW5kICpleGl0KiBwb2ludCBvZiB0aGUgcGFyc2VyLlxcbiAgICAgICAgICAgIC8vIFRoZSBydWxlcyBoZXJlIGNhbiBhcHBlYXIgYXQgYW55IGxldmVsIG9mIHRoZSBwYXJzZSB0cmVlLlxcbiAgICAgICAgICAgIC8vXFxuICAgICAgICAgICAgLy8gVGhlIHJlY3Vyc2l2ZSBuYXR1cmUgb2YgdGhlIGdyYW1tYXIgaXMgYW4gaW50ZXJwbGF5IGJldHdlZW4gdGhlIGBibG9ja2BcXG4gICAgICAgICAgICAvLyBydWxlLCB3aGljaCByZXByZXNlbnRzIGB7IC4uLiB9YCwgdGhlIGBydWxlc2V0YCBydWxlLCBhbmQgdGhpcyBgcHJpbWFyeWAgcnVsZSxcXG4gICAgICAgICAgICAvLyBhcyByZXByZXNlbnRlZCBieSB0aGlzIHNpbXBsaWZpZWQgZ3JhbW1hcjpcXG4gICAgICAgICAgICAvL1xcbiAgICAgICAgICAgIC8vICAgICBwcmltYXJ5ICDihpIgIChydWxlc2V0IHwgcnVsZSkrXFxuICAgICAgICAgICAgLy8gICAgIHJ1bGVzZXQgIOKGkiAgc2VsZWN0b3IrIGJsb2NrXFxuICAgICAgICAgICAgLy8gICAgIGJsb2NrICAgIOKGkiAgJ3snIHByaW1hcnkgJ30nXFxuICAgICAgICAgICAgLy9cXG4gICAgICAgICAgICAvLyBPbmx5IGF0IG9uZSBwb2ludCBpcyB0aGUgcHJpbWFyeSBydWxlIG5vdCBjYWxsZWQgZnJvbSB0aGVcXG4gICAgICAgICAgICAvLyBibG9jayBydWxlOiBhdCB0aGUgcm9vdCBsZXZlbC5cXG4gICAgICAgICAgICBwcmltYXJ5OiBmdW5jdGlvbigpIHtcXG4gICAgICAgICAgICAgICAgdmFyIG5vZGUsIHJvb3QgPSBbXTtcXG5cXG4gICAgICAgICAgICAgICAgd2hpbGUgKChub2RlID0gJCh0aGlzLnJ1bGUpIHx8ICQodGhpcy5ydWxlc2V0KSB8fFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKHRoaXMuY29tbWVudCkpIHx8XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoL15bXFxcXHNcXFxcbl0rLykgfHwgKG5vZGUgPSAkKHRoaXMuaW52YWxpZCkpKSB7XFxuICAgICAgICAgICAgICAgICAgICBpZiAobm9kZSkgcm9vdC5wdXNoKG5vZGUpO1xcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgIHJldHVybiByb290O1xcbiAgICAgICAgICAgIH0sXFxuXFxuICAgICAgICAgICAgaW52YWxpZDogZnVuY3Rpb24gKCkge1xcbiAgICAgICAgICAgICAgICB2YXIgY2h1bmsgPSAkKC9eW147XFxcXG5dKls7XFxcXG5dLyk7XFxuXFxuICAgICAgICAgICAgICAgIC8vIFRvIGZhaWwgZ3JhY2VmdWxseSwgbWF0Y2ggZXZlcnl0aGluZyB1bnRpbCBhIHNlbWljb2xvbiBvciBsaW5lYnJlYWsuXFxuICAgICAgICAgICAgICAgIGlmIChjaHVuaykge1xcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyB0cmVlLkludmFsaWQoY2h1bmssIG1lbW8pO1xcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgfSxcXG5cXG4gICAgICAgICAgICAvLyBXZSBjcmVhdGUgYSBDb21tZW50IG5vZGUgZm9yIENTUyBjb21tZW50cyBgLyogKi9gLFxcbiAgICAgICAgICAgIC8vIGJ1dCBrZWVwIHRoZSBMZVNTIGNvbW1lbnRzIGAvL2Agc2lsZW50LCBieSBqdXN0IHNraXBwaW5nXFxuICAgICAgICAgICAgLy8gb3ZlciB0aGVtLlxcbiAgICAgICAgICAgIGNvbW1lbnQ6IGZ1bmN0aW9uKCkge1xcbiAgICAgICAgICAgICAgICB2YXIgY29tbWVudDtcXG5cXG4gICAgICAgICAgICAgICAgaWYgKGlucHV0LmNoYXJBdChpKSAhPT0gJy8nKSByZXR1cm47XFxuXFxuICAgICAgICAgICAgICAgIGlmIChpbnB1dC5jaGFyQXQoaSArIDEpID09PSAnLycpIHtcXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgdHJlZS5Db21tZW50KCQoL15cXFxcL1xcXFwvLiovKSwgdHJ1ZSk7XFxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY29tbWVudCA9ICQoL15cXFxcL1xcXFwqKD86W14qXXxcXFxcKitbXlxcXFwvKl0pKlxcXFwqK1xcXFwvXFxcXG4/LykpIHtcXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgdHJlZS5Db21tZW50KGNvbW1lbnQpO1xcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgfSxcXG5cXG4gICAgICAgICAgICAvLyBFbnRpdGllcyBhcmUgdG9rZW5zIHdoaWNoIGNhbiBiZSBmb3VuZCBpbnNpZGUgYW4gRXhwcmVzc2lvblxcbiAgICAgICAgICAgIGVudGl0aWVzOiB7XFxuXFxuICAgICAgICAgICAgICAgIC8vIEEgc3RyaW5nLCB3aGljaCBzdXBwb3J0cyBlc2NhcGluZyBcXFwiIGFuZCAnIFxcXCJtaWxreSB3YXlcXFwiICdoZVxcXFwncyB0aGUgb25lISdcXG4gICAgICAgICAgICAgICAgcXVvdGVkOiBmdW5jdGlvbigpIHtcXG4gICAgICAgICAgICAgICAgICAgIGlmIChpbnB1dC5jaGFyQXQoaSkgIT09ICdcXFwiJyAmJiBpbnB1dC5jaGFyQXQoaSkgIT09IFxcXCInXFxcIikgcmV0dXJuO1xcbiAgICAgICAgICAgICAgICAgICAgdmFyIHN0ciA9ICQoL15cXFwiKCg/OlteXFxcIlxcXFxcXFxcXFxcXHJcXFxcbl18XFxcXFxcXFwuKSopXFxcInwnKCg/OlteJ1xcXFxcXFxcXFxcXHJcXFxcbl18XFxcXFxcXFwuKSopJy8pO1xcbiAgICAgICAgICAgICAgICAgICAgaWYgKHN0cikge1xcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgdHJlZS5RdW90ZWQoc3RyWzFdIHx8IHN0clsyXSk7XFxuICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgIH0sXFxuXFxuICAgICAgICAgICAgICAgIC8vIEEgcmVmZXJlbmNlIHRvIGEgTWFwbmlrIGZpZWxkLCBsaWtlIFtOQU1FXVxcbiAgICAgICAgICAgICAgICAvLyBCZWhpbmQgdGhlIHNjZW5lcywgdGhpcyBoYXMgdGhlIHNhbWUgcmVwcmVzZW50YXRpb24sIGJ1dCBDYXJ0b1xcbiAgICAgICAgICAgICAgICAvLyBuZWVkcyB0byBiZSBjYXJlZnVsIHRvIHdhcm4gd2hlbiB1bnN1cHBvcnRlZCBvcGVyYXRpb25zIGFyZSB1c2VkLlxcbiAgICAgICAgICAgICAgICBmaWVsZDogZnVuY3Rpb24oKSB7XFxuICAgICAgICAgICAgICAgICAgICBpZiAoISAkKCdbJykpIHJldHVybjtcXG4gICAgICAgICAgICAgICAgICAgIHZhciBmaWVsZF9uYW1lID0gJCgvKF5bXlxcXFxdXSspLyk7XFxuICAgICAgICAgICAgICAgICAgICBpZiAoISAkKCddJykpIHJldHVybjtcXG4gICAgICAgICAgICAgICAgICAgIGlmIChmaWVsZF9uYW1lKSByZXR1cm4gbmV3IHRyZWUuRmllbGQoZmllbGRfbmFtZVsxXSk7XFxuICAgICAgICAgICAgICAgIH0sXFxuXFxuICAgICAgICAgICAgICAgIC8vIFRoaXMgaXMgYSBjb21wYXJpc29uIG9wZXJhdG9yXFxuICAgICAgICAgICAgICAgIGNvbXBhcmlzb246IGZ1bmN0aW9uKCkge1xcbiAgICAgICAgICAgICAgICAgICAgdmFyIHN0ciA9ICQoL149fnw9fCE9fDw9fD49fDx8Pi8pO1xcbiAgICAgICAgICAgICAgICAgICAgaWYgKHN0cikge1xcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzdHI7XFxuICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgIH0sXFxuXFxuICAgICAgICAgICAgICAgIC8vIEEgY2F0Y2gtYWxsIHdvcmQsIHN1Y2ggYXM6IGhhcmQtbGlnaHRcXG4gICAgICAgICAgICAgICAgLy8gVGhlc2UgY2FuIHN0YXJ0IHdpdGggZWl0aGVyIGEgbGV0dGVyIG9yIGEgZGFzaCAoLSksXFxuICAgICAgICAgICAgICAgIC8vIGFuZCB0aGVuIGNvbnRhaW4gbnVtYmVycywgdW5kZXJzY29yZXMsIGFuZCBsZXR0ZXJzLlxcbiAgICAgICAgICAgICAgICBrZXl3b3JkOiBmdW5jdGlvbigpIHtcXG4gICAgICAgICAgICAgICAgICAgIHZhciBrID0gJCgvXltBLVphLXotXStbQS1aYS16LTAtOV9dKi8pO1xcbiAgICAgICAgICAgICAgICAgICAgaWYgKGspIHsgcmV0dXJuIG5ldyB0cmVlLktleXdvcmQoayk7IH1cXG4gICAgICAgICAgICAgICAgfSxcXG5cXG4gICAgICAgICAgICAgICAgLy8gQSBmdW5jdGlvbiBjYWxsIGxpa2UgcmdiKDI1NSwgMCwgMjU1KVxcbiAgICAgICAgICAgICAgICAvLyBUaGUgYXJndW1lbnRzIGFyZSBwYXJzZWQgd2l0aCB0aGUgYGVudGl0aWVzLmFyZ3VtZW50c2AgcGFyc2VyLlxcbiAgICAgICAgICAgICAgICBjYWxsOiBmdW5jdGlvbigpIHtcXG4gICAgICAgICAgICAgICAgICAgIHZhciBuYW1lLCBhcmdzO1xcblxcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEobmFtZSA9IC9eKFtcXFxcd1xcXFwtXSt8JSlcXFxcKC8uZXhlYyhjaHVua3Nbal0pKSkgcmV0dXJuO1xcblxcbiAgICAgICAgICAgICAgICAgICAgbmFtZSA9IG5hbWVbMV07XFxuXFxuICAgICAgICAgICAgICAgICAgICBpZiAobmFtZSA9PT0gJ3VybCcpIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB1cmwoKSBpcyBoYW5kbGVkIGJ5IHRoZSB1cmwgcGFyc2VyIGluc3RlYWRcXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgaSArPSBuYW1lLmxlbmd0aDtcXG4gICAgICAgICAgICAgICAgICAgIH1cXG5cXG4gICAgICAgICAgICAgICAgICAgICQoJygnKTsgLy8gUGFyc2UgdGhlICcoJyBhbmQgY29uc3VtZSB3aGl0ZXNwYWNlLlxcblxcbiAgICAgICAgICAgICAgICAgICAgYXJncyA9ICQodGhpcy5lbnRpdGllc1snYXJndW1lbnRzJ10pO1xcblxcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEkKCcpJykpIHJldHVybjtcXG5cXG4gICAgICAgICAgICAgICAgICAgIGlmIChuYW1lKSB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyB0cmVlLkNhbGwobmFtZSwgYXJncywgaSk7XFxuICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgIH0sXFxuICAgICAgICAgICAgICAgIC8vIEFyZ3VtZW50cyBhcmUgY29tbWEtc2VwYXJhdGVkIGV4cHJlc3Npb25zXFxuICAgICAgICAgICAgICAgICdhcmd1bWVudHMnOiBmdW5jdGlvbigpIHtcXG4gICAgICAgICAgICAgICAgICAgIHZhciBhcmdzID0gW10sIGFyZztcXG5cXG4gICAgICAgICAgICAgICAgICAgIHdoaWxlIChhcmcgPSAkKHRoaXMuZXhwcmVzc2lvbikpIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICBhcmdzLnB1c2goYXJnKTtcXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoISAkKCcsJykpIHsgYnJlYWs7IH1cXG4gICAgICAgICAgICAgICAgICAgIH1cXG5cXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBhcmdzO1xcbiAgICAgICAgICAgICAgICB9LFxcbiAgICAgICAgICAgICAgICBsaXRlcmFsOiBmdW5jdGlvbigpIHtcXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAkKHRoaXMuZW50aXRpZXMuZGltZW5zaW9uKSB8fFxcbiAgICAgICAgICAgICAgICAgICAgICAgICQodGhpcy5lbnRpdGllcy5rZXl3b3JkY29sb3IpIHx8XFxuICAgICAgICAgICAgICAgICAgICAgICAgJCh0aGlzLmVudGl0aWVzLmhleGNvbG9yKSB8fFxcbiAgICAgICAgICAgICAgICAgICAgICAgICQodGhpcy5lbnRpdGllcy5xdW90ZWQpO1xcbiAgICAgICAgICAgICAgICB9LFxcblxcbiAgICAgICAgICAgICAgICAvLyBQYXJzZSB1cmwoKSB0b2tlbnNcXG4gICAgICAgICAgICAgICAgLy9cXG4gICAgICAgICAgICAgICAgLy8gV2UgdXNlIGEgc3BlY2lmaWMgcnVsZSBmb3IgdXJscywgYmVjYXVzZSB0aGV5IGRvbid0IHJlYWxseSBiZWhhdmUgbGlrZVxcbiAgICAgICAgICAgICAgICAvLyBzdGFuZGFyZCBmdW5jdGlvbiBjYWxscy4gVGhlIGRpZmZlcmVuY2UgaXMgdGhhdCB0aGUgYXJndW1lbnQgZG9lc24ndCBoYXZlXFxuICAgICAgICAgICAgICAgIC8vIHRvIGJlIGVuY2xvc2VkIHdpdGhpbiBhIHN0cmluZywgc28gaXQgY2FuJ3QgYmUgcGFyc2VkIGFzIGFuIEV4cHJlc3Npb24uXFxuICAgICAgICAgICAgICAgIHVybDogZnVuY3Rpb24oKSB7XFxuICAgICAgICAgICAgICAgICAgICB2YXIgdmFsdWU7XFxuXFxuICAgICAgICAgICAgICAgICAgICBpZiAoaW5wdXQuY2hhckF0KGkpICE9PSAndScgfHwgISQoL151cmxcXFxcKC8pKSByZXR1cm47XFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9ICQodGhpcy5lbnRpdGllcy5xdW90ZWQpIHx8ICQodGhpcy5lbnRpdGllcy52YXJpYWJsZSkgfHxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJCgvXltcXFxcLVxcXFx3JUAkXFxcXC8uJj06OyMrP35dKy8pIHx8ICcnO1xcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEgJCgnKScpKSB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyB0cmVlLkludmFsaWQodmFsdWUsIG1lbW8sICdNaXNzaW5nIGNsb3NpbmcgKSBpbiBVUkwuJyk7XFxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgdHJlZS5VUkwoKHR5cGVvZiB2YWx1ZS52YWx1ZSAhPT0gJ3VuZGVmaW5lZCcgfHxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgaW5zdGFuY2VvZiB0cmVlLlZhcmlhYmxlKSA/XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlIDogbmV3IHRyZWUuUXVvdGVkKHZhbHVlKSk7XFxuICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgIH0sXFxuXFxuICAgICAgICAgICAgICAgIC8vIEEgVmFyaWFibGUgZW50aXR5LCBzdWNoIGFzIGBAZmlua2AsIGluXFxuICAgICAgICAgICAgICAgIC8vXFxuICAgICAgICAgICAgICAgIC8vICAgICB3aWR0aDogQGZpbmsgKyAycHhcXG4gICAgICAgICAgICAgICAgLy9cXG4gICAgICAgICAgICAgICAgLy8gV2UgdXNlIGEgZGlmZmVyZW50IHBhcnNlciBmb3IgdmFyaWFibGUgZGVmaW5pdGlvbnMsXFxuICAgICAgICAgICAgICAgIC8vIHNlZSBgcGFyc2Vycy52YXJpYWJsZWAuXFxuICAgICAgICAgICAgICAgIHZhcmlhYmxlOiBmdW5jdGlvbigpIHtcXG4gICAgICAgICAgICAgICAgICAgIHZhciBuYW1lLCBpbmRleCA9IGk7XFxuXFxuICAgICAgICAgICAgICAgICAgICBpZiAoaW5wdXQuY2hhckF0KGkpID09PSAnQCcgJiYgKG5hbWUgPSAkKC9eQFtcXFxcdy1dKy8pKSkge1xcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgdHJlZS5WYXJpYWJsZShuYW1lLCBpbmRleCwgZW52LmZpbGVuYW1lKTtcXG4gICAgICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgfSxcXG5cXG4gICAgICAgICAgICAgICAgaGV4Y29sb3I6IGZ1bmN0aW9uKCkge1xcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJnYjtcXG4gICAgICAgICAgICAgICAgICAgIGlmIChpbnB1dC5jaGFyQXQoaSkgPT09ICcjJyAmJiAocmdiID0gJCgvXiMoW2EtZkEtRjAtOV17Nn18W2EtZkEtRjAtOV17M30pLykpKSB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyB0cmVlLkNvbG9yKHJnYlsxXSk7XFxuICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgIH0sXFxuXFxuICAgICAgICAgICAgICAgIGtleXdvcmRjb2xvcjogZnVuY3Rpb24oKSB7XFxuICAgICAgICAgICAgICAgICAgICB2YXIgcmdiID0gY2h1bmtzW2pdLm1hdGNoKC9eW2Etel0rLyk7XFxuICAgICAgICAgICAgICAgICAgICBpZiAocmdiICYmIHJnYlswXSBpbiB0cmVlLlJlZmVyZW5jZS5kYXRhLmNvbG9ycykge1xcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgdHJlZS5Db2xvcih0cmVlLlJlZmVyZW5jZS5kYXRhLmNvbG9yc1skKC9eW2Etel0rLyldKTtcXG4gICAgICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgfSxcXG5cXG4gICAgICAgICAgICAgICAgLy8gQSBEaW1lbnNpb24sIHRoYXQgaXMsIGEgbnVtYmVyIGFuZCBhIHVuaXQuIFRoZSBvbmx5XFxuICAgICAgICAgICAgICAgIC8vIHVuaXQgdGhhdCBoYXMgYW4gZWZmZWN0IGlzICVcXG4gICAgICAgICAgICAgICAgZGltZW5zaW9uOiBmdW5jdGlvbigpIHtcXG4gICAgICAgICAgICAgICAgICAgIHZhciBjID0gaW5wdXQuY2hhckNvZGVBdChpKTtcXG4gICAgICAgICAgICAgICAgICAgIGlmICgoYyA+IDU3IHx8IGMgPCA0NSkgfHwgYyA9PT0gNDcpIHJldHVybjtcXG4gICAgICAgICAgICAgICAgICAgIHZhciB2YWx1ZSA9ICQoL14oLT9cXFxcZCpcXFxcLj9cXFxcZCsoPzpbZUVdWy0rXT9cXFxcZCspPykoXFxcXCV8XFxcXHcrKT8vKTtcXG4gICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZSkge1xcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgdHJlZS5EaW1lbnNpb24odmFsdWVbMV0sIHZhbHVlWzJdLCBtZW1vKTtcXG4gICAgICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgfVxcblxcbiAgICAgICAgICAgIH0sXFxuXFxuICAgICAgICAgICAgLy8gVGhlIHZhcmlhYmxlIHBhcnQgb2YgYSB2YXJpYWJsZSBkZWZpbml0aW9uLlxcbiAgICAgICAgICAgIC8vIFVzZWQgaW4gdGhlIGBydWxlYCBwYXJzZXIuIExpa2UgQGZpbms6XFxuICAgICAgICAgICAgdmFyaWFibGU6IGZ1bmN0aW9uKCkge1xcbiAgICAgICAgICAgICAgICB2YXIgbmFtZTtcXG5cXG4gICAgICAgICAgICAgICAgaWYgKGlucHV0LmNoYXJBdChpKSA9PT0gJ0AnICYmIChuYW1lID0gJCgvXihAW1xcXFx3LV0rKVxcXFxzKjovKSkpIHtcXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuYW1lWzFdO1xcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgfSxcXG5cXG4gICAgICAgICAgICAvLyBFbnRpdGllcyBhcmUgdGhlIHNtYWxsZXN0IHJlY29nbml6ZWQgdG9rZW4sXFxuICAgICAgICAgICAgLy8gYW5kIGNhbiBiZSBmb3VuZCBpbnNpZGUgYSBydWxlJ3MgdmFsdWUuXFxuICAgICAgICAgICAgZW50aXR5OiBmdW5jdGlvbigpIHtcXG4gICAgICAgICAgICAgICAgcmV0dXJuICQodGhpcy5lbnRpdGllcy5jYWxsKSB8fFxcbiAgICAgICAgICAgICAgICAgICAgJCh0aGlzLmVudGl0aWVzLmxpdGVyYWwpIHx8XFxuICAgICAgICAgICAgICAgICAgICAkKHRoaXMuZW50aXRpZXMuZmllbGQpIHx8XFxuICAgICAgICAgICAgICAgICAgICAkKHRoaXMuZW50aXRpZXMudmFyaWFibGUpIHx8XFxuICAgICAgICAgICAgICAgICAgICAkKHRoaXMuZW50aXRpZXMudXJsKSB8fFxcbiAgICAgICAgICAgICAgICAgICAgJCh0aGlzLmVudGl0aWVzLmtleXdvcmQpO1xcbiAgICAgICAgICAgIH0sXFxuXFxuICAgICAgICAgICAgLy8gQSBSdWxlIHRlcm1pbmF0b3IuIE5vdGUgdGhhdCB3ZSB1c2UgYHBlZWsoKWAgdG8gY2hlY2sgZm9yICd9JyxcXG4gICAgICAgICAgICAvLyBiZWNhdXNlIHRoZSBgYmxvY2tgIHJ1bGUgd2lsbCBiZSBleHBlY3RpbmcgaXQsIGJ1dCB3ZSBzdGlsbCBuZWVkIHRvIG1ha2Ugc3VyZVxcbiAgICAgICAgICAgIC8vIGl0J3MgdGhlcmUsIGlmICc7JyB3YXMgb21taXR0ZWQuXFxuICAgICAgICAgICAgZW5kOiBmdW5jdGlvbigpIHtcXG4gICAgICAgICAgICAgICAgcmV0dXJuICQoJzsnKSB8fCBwZWVrKCd9Jyk7XFxuICAgICAgICAgICAgfSxcXG5cXG4gICAgICAgICAgICAvLyBFbGVtZW50cyBhcmUgdGhlIGJ1aWxkaW5nIGJsb2NrcyBmb3IgU2VsZWN0b3JzLiBUaGV5IGNvbnNpc3Qgb2ZcXG4gICAgICAgICAgICAvLyBhbiBlbGVtZW50IG5hbWUsIHN1Y2ggYXMgYSB0YWcgYSBjbGFzcywgb3IgYCpgLlxcbiAgICAgICAgICAgIGVsZW1lbnQ6IGZ1bmN0aW9uKCkge1xcbiAgICAgICAgICAgICAgICB2YXIgZSA9ICQoL14oPzpbLiNdW1xcXFx3XFxcXC1dK3xcXFxcKnxNYXApLyk7XFxuICAgICAgICAgICAgICAgIGlmIChlKSByZXR1cm4gbmV3IHRyZWUuRWxlbWVudChlKTtcXG4gICAgICAgICAgICB9LFxcblxcbiAgICAgICAgICAgIC8vIEF0dGFjaG1lbnRzIGFsbG93IGFkZGluZyBtdWx0aXBsZSBsaW5lcywgcG9seWdvbnMgZXRjLiB0byBhblxcbiAgICAgICAgICAgIC8vIG9iamVjdC4gVGhlcmUgY2FuIG9ubHkgYmUgb25lIGF0dGFjaG1lbnQgcGVyIHNlbGVjdG9yLlxcbiAgICAgICAgICAgIGF0dGFjaG1lbnQ6IGZ1bmN0aW9uKCkge1xcbiAgICAgICAgICAgICAgICB2YXIgcyA9ICQoL146OihbXFxcXHdcXFxcLV0rKD86XFxcXC9bXFxcXHdcXFxcLV0rKSopLyk7XFxuICAgICAgICAgICAgICAgIGlmIChzKSByZXR1cm4gc1sxXTtcXG4gICAgICAgICAgICB9LFxcblxcbiAgICAgICAgICAgIC8vIFNlbGVjdG9ycyBhcmUgbWFkZSBvdXQgb2Ygb25lIG9yIG1vcmUgRWxlbWVudHMsIHNlZSBhYm92ZS5cXG4gICAgICAgICAgICBzZWxlY3RvcjogZnVuY3Rpb24oKSB7XFxuICAgICAgICAgICAgICAgIHZhciBhLCBhdHRhY2htZW50LFxcbiAgICAgICAgICAgICAgICAgICAgZSwgZWxlbWVudHMgPSBbXSxcXG4gICAgICAgICAgICAgICAgICAgIGYsIGZpbHRlcnMgPSBuZXcgdHJlZS5GaWx0ZXJzZXQoKSxcXG4gICAgICAgICAgICAgICAgICAgIHosIHpvb21zID0gW10sXFxuICAgICAgICAgICAgICAgICAgICBmcmFtZV9vZmZzZXQgPSB0cmVlLkZyYW1lT2Zmc2V0Lm5vbmU7XFxuICAgICAgICAgICAgICAgICAgICBzZWdtZW50cyA9IDAsIGNvbmRpdGlvbnMgPSAwO1xcblxcbiAgICAgICAgICAgICAgICB3aGlsZSAoXFxuICAgICAgICAgICAgICAgICAgICAgICAgKGUgPSAkKHRoaXMuZWxlbWVudCkpIHx8XFxuICAgICAgICAgICAgICAgICAgICAgICAgKHogPSAkKHRoaXMuem9vbSkpIHx8XFxuICAgICAgICAgICAgICAgICAgICAgICAgKGZvID0gJCh0aGlzLmZyYW1lX29mZnNldCkpIHx8XFxuICAgICAgICAgICAgICAgICAgICAgICAgKGYgPSAkKHRoaXMuZmlsdGVyKSkgfHxcXG4gICAgICAgICAgICAgICAgICAgICAgICAoYSA9ICQodGhpcy5hdHRhY2htZW50KSlcXG4gICAgICAgICAgICAgICAgICAgICkge1xcbiAgICAgICAgICAgICAgICAgICAgc2VnbWVudHMrKztcXG4gICAgICAgICAgICAgICAgICAgIGlmIChlKSB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudHMucHVzaChlKTtcXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoeikge1xcbiAgICAgICAgICAgICAgICAgICAgICAgIHpvb21zLnB1c2goeik7XFxuICAgICAgICAgICAgICAgICAgICAgICAgY29uZGl0aW9ucysrO1xcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChmbykge1xcbiAgICAgICAgICAgICAgICAgICAgICAgIGZyYW1lX29mZnNldCA9IGZvO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbmRpdGlvbnMrKztcXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZikge1xcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlcnIgPSBmaWx0ZXJzLmFkZChmKTtcXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXJyKSB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG1ha2VFcnJvcih7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBlcnIsXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmRleDogaSAtIDFcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbmRpdGlvbnMrKztcXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoYXR0YWNobWVudCkge1xcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG1ha2VFcnJvcih7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdFbmNvdW50ZXJlZCBzZWNvbmQgYXR0YWNobWVudCBuYW1lLicsXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4OiBpIC0gMVxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICBhdHRhY2htZW50ID0gYTtcXG4gICAgICAgICAgICAgICAgICAgIH1cXG5cXG4gICAgICAgICAgICAgICAgICAgIHZhciBjID0gaW5wdXQuY2hhckF0KGkpO1xcbiAgICAgICAgICAgICAgICAgICAgaWYgKGMgPT09ICd7JyB8fCBjID09PSAnfScgfHwgYyA9PT0gJzsnIHx8IGMgPT09ICcsJykgeyBicmVhazsgfVxcbiAgICAgICAgICAgICAgICB9XFxuXFxuICAgICAgICAgICAgICAgIGlmIChzZWdtZW50cykge1xcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyB0cmVlLlNlbGVjdG9yKGZpbHRlcnMsIHpvb21zLCBmcmFtZV9vZmZzZXQsIGVsZW1lbnRzLCBhdHRhY2htZW50LCBjb25kaXRpb25zLCBtZW1vKTtcXG4gICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIH0sXFxuXFxuICAgICAgICAgICAgZmlsdGVyOiBmdW5jdGlvbigpIHtcXG4gICAgICAgICAgICAgICAgc2F2ZSgpO1xcbiAgICAgICAgICAgICAgICB2YXIga2V5LCBvcCwgdmFsO1xcbiAgICAgICAgICAgICAgICBpZiAoISAkKCdbJykpIHJldHVybjtcXG4gICAgICAgICAgICAgICAgaWYgKGtleSA9ICQoL15bYS16QS1aMC05XFxcXC1fXSsvKSB8fFxcbiAgICAgICAgICAgICAgICAgICAgJCh0aGlzLmVudGl0aWVzLnF1b3RlZCkgfHxcXG4gICAgICAgICAgICAgICAgICAgICQodGhpcy5lbnRpdGllcy52YXJpYWJsZSkgfHxcXG4gICAgICAgICAgICAgICAgICAgICQodGhpcy5lbnRpdGllcy5rZXl3b3JkKSB8fFxcbiAgICAgICAgICAgICAgICAgICAgJCh0aGlzLmVudGl0aWVzLmZpZWxkKSkge1xcbiAgICAgICAgICAgICAgICAgICAgLy8gVE9ETzogcmVtb3ZlIGF0IDEuMC4wXFxuICAgICAgICAgICAgICAgICAgICBpZiAoa2V5IGluc3RhbmNlb2YgdHJlZS5RdW90ZWQpIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICBrZXkgPSBuZXcgdHJlZS5GaWVsZChrZXkudG9TdHJpbmcoKSk7XFxuICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgICAgICBpZiAoKG9wID0gJCh0aGlzLmVudGl0aWVzLmNvbXBhcmlzb24pKSAmJlxcbiAgICAgICAgICAgICAgICAgICAgICAgICh2YWwgPSAkKHRoaXMuZW50aXRpZXMucXVvdGVkKSB8fFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJCh0aGlzLmVudGl0aWVzLnZhcmlhYmxlKSB8fFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJCh0aGlzLmVudGl0aWVzLmRpbWVuc2lvbikgfHxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICQodGhpcy5lbnRpdGllcy5rZXl3b3JkKSB8fFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJCh0aGlzLmVudGl0aWVzLmZpZWxkKSkpIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoISAkKCddJykpIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbWFrZUVycm9yKHtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdNaXNzaW5nIGNsb3NpbmcgXSBvZiBmaWx0ZXIuJyxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4OiBtZW1vIC0gMVxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcXG4gICAgICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFrZXkuaXMpIGtleSA9IG5ldyB0cmVlLkZpZWxkKGtleSk7XFxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyB0cmVlLkZpbHRlcihrZXksIG9wLCB2YWwsIG1lbW8sIGVudi5maWxlbmFtZSk7XFxuICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICB9LFxcblxcbiAgICAgICAgICAgIGZyYW1lX29mZnNldDogZnVuY3Rpb24oKSB7XFxuICAgICAgICAgICAgICAgIHNhdmUoKTtcXG4gICAgICAgICAgICAgICAgdmFyIG9wLCB2YWw7XFxuICAgICAgICAgICAgICAgIGlmICgkKC9eXFxcXFtcXFxccypmcmFtZS1vZmZzZXQvZykgJiZcXG4gICAgICAgICAgICAgICAgICAgIChvcCA9ICQodGhpcy5lbnRpdGllcy5jb21wYXJpc29uKSkgJiZcXG4gICAgICAgICAgICAgICAgICAgICh2YWwgPSAkKC9eXFxcXGQrLykpICYmXFxuICAgICAgICAgICAgICAgICAgICAkKCddJykpICB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRyZWUuRnJhbWVPZmZzZXQob3AsIHZhbCwgbWVtbyk7XFxuICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICB9LFxcblxcbiAgICAgICAgICAgIHpvb206IGZ1bmN0aW9uKCkge1xcbiAgICAgICAgICAgICAgICBzYXZlKCk7XFxuICAgICAgICAgICAgICAgIHZhciBvcCwgdmFsO1xcbiAgICAgICAgICAgICAgICBpZiAoJCgvXlxcXFxbXFxcXHMqem9vbS9nKSAmJlxcbiAgICAgICAgICAgICAgICAgICAgKG9wID0gJCh0aGlzLmVudGl0aWVzLmNvbXBhcmlzb24pKSAmJlxcbiAgICAgICAgICAgICAgICAgICAgKHZhbCA9ICQodGhpcy5lbnRpdGllcy52YXJpYWJsZSkgfHwgJCh0aGlzLmVudGl0aWVzLmRpbWVuc2lvbikpICYmICQoJ10nKSkge1xcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgdHJlZS5ab29tKG9wLCB2YWwsIG1lbW8pO1xcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICAgICAgICAgICAgLy8gYmFja3RyYWNrXFxuICAgICAgICAgICAgICAgICAgICByZXN0b3JlKCk7XFxuICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICB9LFxcblxcbiAgICAgICAgICAgIC8vIFRoZSBgYmxvY2tgIHJ1bGUgaXMgdXNlZCBieSBgcnVsZXNldGBcXG4gICAgICAgICAgICAvLyBJdCdzIGEgd3JhcHBlciBhcm91bmQgdGhlIGBwcmltYXJ5YCBydWxlLCB3aXRoIGFkZGVkIGB7fWAuXFxuICAgICAgICAgICAgYmxvY2s6IGZ1bmN0aW9uKCkge1xcbiAgICAgICAgICAgICAgICB2YXIgY29udGVudDtcXG5cXG4gICAgICAgICAgICAgICAgaWYgKCQoJ3snKSAmJiAoY29udGVudCA9ICQodGhpcy5wcmltYXJ5KSkgJiYgJCgnfScpKSB7XFxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY29udGVudDtcXG4gICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIH0sXFxuXFxuICAgICAgICAgICAgLy8gZGl2LCAuY2xhc3MsIGJvZHkgPiBwIHsuLi59XFxuICAgICAgICAgICAgcnVsZXNldDogZnVuY3Rpb24oKSB7XFxuICAgICAgICAgICAgICAgIHZhciBzZWxlY3RvcnMgPSBbXSwgcywgZiwgbCwgcnVsZXMsIGZpbHRlcnMgPSBbXTtcXG4gICAgICAgICAgICAgICAgc2F2ZSgpO1xcblxcbiAgICAgICAgICAgICAgICB3aGlsZSAocyA9ICQodGhpcy5zZWxlY3RvcikpIHtcXG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdG9ycy5wdXNoKHMpO1xcbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKCQodGhpcy5jb21tZW50KSkge31cXG4gICAgICAgICAgICAgICAgICAgIGlmICghICQoJywnKSkgeyBicmVhazsgfVxcbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKCQodGhpcy5jb21tZW50KSkge31cXG4gICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICBpZiAocykge1xcbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKCQodGhpcy5jb21tZW50KSkge31cXG4gICAgICAgICAgICAgICAgfVxcblxcbiAgICAgICAgICAgICAgICBpZiAoc2VsZWN0b3JzLmxlbmd0aCA+IDAgJiYgKHJ1bGVzID0gJCh0aGlzLmJsb2NrKSkpIHtcXG4gICAgICAgICAgICAgICAgICAgIGlmIChzZWxlY3RvcnMubGVuZ3RoID09PSAxICYmXFxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0b3JzWzBdLmVsZW1lbnRzLmxlbmd0aCAmJlxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdG9yc1swXS5lbGVtZW50c1swXS52YWx1ZSA9PT0gJ01hcCcpIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcnMgPSBuZXcgdHJlZS5SdWxlc2V0KHNlbGVjdG9ycywgcnVsZXMpO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIHJzLmlzTWFwID0gdHJ1ZTtcXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcnM7XFxuICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IHRyZWUuUnVsZXNldChzZWxlY3RvcnMsIHJ1bGVzKTtcXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICAgICAgICAgIC8vIEJhY2t0cmFja1xcbiAgICAgICAgICAgICAgICAgICAgcmVzdG9yZSgpO1xcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgfSxcXG5cXG4gICAgICAgICAgICBydWxlOiBmdW5jdGlvbigpIHtcXG4gICAgICAgICAgICAgICAgdmFyIG5hbWUsIHZhbHVlLCBjID0gaW5wdXQuY2hhckF0KGkpO1xcbiAgICAgICAgICAgICAgICBzYXZlKCk7XFxuXFxuICAgICAgICAgICAgICAgIGlmIChjID09PSAnLicgfHwgYyA9PT0gJyMnKSB7IHJldHVybjsgfVxcblxcbiAgICAgICAgICAgICAgICBpZiAobmFtZSA9ICQodGhpcy52YXJpYWJsZSkgfHwgJCh0aGlzLnByb3BlcnR5KSkge1xcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSAkKHRoaXMudmFsdWUpO1xcblxcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlICYmICQodGhpcy5lbmQpKSB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyB0cmVlLlJ1bGUobmFtZSwgdmFsdWUsIG1lbW8sIGVudi5maWxlbmFtZSk7XFxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICAgICAgICAgICAgICAgIGZ1cnRoZXN0ID0gaTtcXG4gICAgICAgICAgICAgICAgICAgICAgICByZXN0b3JlKCk7XFxuICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICB9LFxcblxcbiAgICAgICAgICAgIGZvbnQ6IGZ1bmN0aW9uKCkge1xcbiAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBbXSwgZXhwcmVzc2lvbiA9IFtdLCB3ZWlnaHQsIGZvbnQsIGU7XFxuXFxuICAgICAgICAgICAgICAgIHdoaWxlIChlID0gJCh0aGlzLmVudGl0eSkpIHtcXG4gICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb24ucHVzaChlKTtcXG4gICAgICAgICAgICAgICAgfVxcblxcbiAgICAgICAgICAgICAgICB2YWx1ZS5wdXNoKG5ldyB0cmVlLkV4cHJlc3Npb24oZXhwcmVzc2lvbikpO1xcblxcbiAgICAgICAgICAgICAgICBpZiAoJCgnLCcpKSB7XFxuICAgICAgICAgICAgICAgICAgICB3aGlsZSAoZSA9ICQodGhpcy5leHByZXNzaW9uKSkge1xcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlLnB1c2goZSk7XFxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEgJCgnLCcpKSB7IGJyZWFrOyB9XFxuICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyB0cmVlLlZhbHVlKHZhbHVlKTtcXG4gICAgICAgICAgICB9LFxcblxcbiAgICAgICAgICAgIC8vIEEgVmFsdWUgaXMgYSBjb21tYS1kZWxpbWl0ZWQgbGlzdCBvZiBFeHByZXNzaW9uc1xcbiAgICAgICAgICAgIC8vIEluIGEgUnVsZSwgYSBWYWx1ZSByZXByZXNlbnRzIGV2ZXJ5dGhpbmcgYWZ0ZXIgdGhlIGA6YCxcXG4gICAgICAgICAgICAvLyBhbmQgYmVmb3JlIHRoZSBgO2AuXFxuICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uKCkge1xcbiAgICAgICAgICAgICAgICB2YXIgZSwgZXhwcmVzc2lvbnMgPSBbXTtcXG5cXG4gICAgICAgICAgICAgICAgd2hpbGUgKGUgPSAkKHRoaXMuZXhwcmVzc2lvbikpIHtcXG4gICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb25zLnB1c2goZSk7XFxuICAgICAgICAgICAgICAgICAgICBpZiAoISAkKCcsJykpIHsgYnJlYWs7IH1cXG4gICAgICAgICAgICAgICAgfVxcblxcbiAgICAgICAgICAgICAgICBpZiAoZXhwcmVzc2lvbnMubGVuZ3RoID4gMSkge1xcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyB0cmVlLlZhbHVlKGV4cHJlc3Npb25zLm1hcChmdW5jdGlvbihlKSB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGUudmFsdWVbMF07XFxuICAgICAgICAgICAgICAgICAgICB9KSk7XFxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZXhwcmVzc2lvbnMubGVuZ3RoID09PSAxKSB7XFxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IHRyZWUuVmFsdWUoZXhwcmVzc2lvbnMpO1xcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgfSxcXG4gICAgICAgICAgICAvLyBBIHN1Yi1leHByZXNzaW9uLCBjb250YWluZWQgYnkgcGFyZW50aGVuc2lzXFxuICAgICAgICAgICAgc3ViOiBmdW5jdGlvbigpIHtcXG4gICAgICAgICAgICAgICAgdmFyIGUsIGV4cHJlc3Npb25zID0gW107XFxuXFxuICAgICAgICAgICAgICAgIGlmICgkKCcoJykpIHtcXG4gICAgICAgICAgICAgICAgICB3aGlsZSAoZSA9ICQodGhpcy5leHByZXNzaW9uKSkge1xcbiAgICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9ucy5wdXNoKGUpO1xcbiAgICAgICAgICAgICAgICAgICAgICBpZiAoISAkKCcsJykpIHsgYnJlYWs7IH1cXG4gICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgICAgJCgnKScpO1xcbiAgICAgICAgICAgICAgICB9XFxuXFxuICAgICAgICAgICAgICAgIGlmIChleHByZXNzaW9ucy5sZW5ndGggPiAxKSB7XFxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IHRyZWUuVmFsdWUoZXhwcmVzc2lvbnMubWFwKGZ1bmN0aW9uKGUpIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZS52YWx1ZVswXTtcXG4gICAgICAgICAgICAgICAgICAgIH0pKTtcXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChleHByZXNzaW9ucy5sZW5ndGggPT09IDEpIHtcXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgdHJlZS5WYWx1ZShleHByZXNzaW9ucyk7XFxuICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICB9LFxcbiAgICAgICAgICAgIC8vIFRoaXMgaXMgYSBtaXNub21lciBiZWNhdXNlIGl0IGFjdHVhbGx5IGhhbmRsZXMgbXVsdGlwbGljYXRpb25cXG4gICAgICAgICAgICAvLyBhbmQgZGl2aXNpb24uXFxuICAgICAgICAgICAgbXVsdGlwbGljYXRpb246IGZ1bmN0aW9uKCkge1xcbiAgICAgICAgICAgICAgICB2YXIgbSwgYSwgb3AsIG9wZXJhdGlvbjtcXG4gICAgICAgICAgICAgICAgaWYgKG0gPSAkKHRoaXMub3BlcmFuZCkpIHtcXG4gICAgICAgICAgICAgICAgICAgIHdoaWxlICgob3AgPSAoJCgnLycpIHx8ICQoJyonKSB8fCAkKCclJykpKSAmJiAoYSA9ICQodGhpcy5vcGVyYW5kKSkpIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICBvcGVyYXRpb24gPSBuZXcgdHJlZS5PcGVyYXRpb24ob3AsIFtvcGVyYXRpb24gfHwgbSwgYV0sIG1lbW8pO1xcbiAgICAgICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9wZXJhdGlvbiB8fCBtO1xcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgfSxcXG4gICAgICAgICAgICBhZGRpdGlvbjogZnVuY3Rpb24oKSB7XFxuICAgICAgICAgICAgICAgIHZhciBtLCBhLCBvcCwgb3BlcmF0aW9uO1xcbiAgICAgICAgICAgICAgICBpZiAobSA9ICQodGhpcy5tdWx0aXBsaWNhdGlvbikpIHtcXG4gICAgICAgICAgICAgICAgICAgIHdoaWxlICgob3AgPSAkKC9eWy0rXVxcXFxzKy8pIHx8IChpbnB1dC5jaGFyQXQoaSAtIDEpICE9ICcgJyAmJiAoJCgnKycpIHx8ICQoJy0nKSkpKSAmJlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIChhID0gJCh0aGlzLm11bHRpcGxpY2F0aW9uKSkpIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICBvcGVyYXRpb24gPSBuZXcgdHJlZS5PcGVyYXRpb24ob3AsIFtvcGVyYXRpb24gfHwgbSwgYV0sIG1lbW8pO1xcbiAgICAgICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9wZXJhdGlvbiB8fCBtO1xcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgfSxcXG5cXG4gICAgICAgICAgICAvLyBBbiBvcGVyYW5kIGlzIGFueXRoaW5nIHRoYXQgY2FuIGJlIHBhcnQgb2YgYW4gb3BlcmF0aW9uLFxcbiAgICAgICAgICAgIC8vIHN1Y2ggYXMgYSBDb2xvciwgb3IgYSBWYXJpYWJsZVxcbiAgICAgICAgICAgIG9wZXJhbmQ6IGZ1bmN0aW9uKCkge1xcbiAgICAgICAgICAgICAgICByZXR1cm4gJCh0aGlzLnN1YikgfHwgJCh0aGlzLmVudGl0eSk7XFxuICAgICAgICAgICAgfSxcXG5cXG4gICAgICAgICAgICAvLyBFeHByZXNzaW9ucyBlaXRoZXIgcmVwcmVzZW50IG1hdGhlbWF0aWNhbCBvcGVyYXRpb25zLFxcbiAgICAgICAgICAgIC8vIG9yIHdoaXRlLXNwYWNlIGRlbGltaXRlZCBFbnRpdGllcy4gIEB2YXIgKiAyXFxuICAgICAgICAgICAgZXhwcmVzc2lvbjogZnVuY3Rpb24oKSB7XFxuICAgICAgICAgICAgICAgIHZhciBlLCBkZWxpbSwgZW50aXRpZXMgPSBbXSwgZDtcXG5cXG4gICAgICAgICAgICAgICAgd2hpbGUgKGUgPSAkKHRoaXMuYWRkaXRpb24pIHx8ICQodGhpcy5lbnRpdHkpKSB7XFxuICAgICAgICAgICAgICAgICAgICBlbnRpdGllcy5wdXNoKGUpO1xcbiAgICAgICAgICAgICAgICB9XFxuXFxuICAgICAgICAgICAgICAgIGlmIChlbnRpdGllcy5sZW5ndGggPiAwKSB7XFxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IHRyZWUuRXhwcmVzc2lvbihlbnRpdGllcyk7XFxuICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICB9LFxcbiAgICAgICAgICAgIHByb3BlcnR5OiBmdW5jdGlvbigpIHtcXG4gICAgICAgICAgICAgICAgdmFyIG5hbWUgPSAkKC9eKChbYS16XVstYS16XzAtOV0qXFxcXC8pP1xcXFwqPy0/Wy1hLXpfMC05XSspXFxcXHMqOi8pO1xcbiAgICAgICAgICAgICAgICBpZiAobmFtZSkgcmV0dXJuIG5hbWVbMV07XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgfVxcbiAgICB9O1xcbiAgICByZXR1cm4gcGFyc2VyO1xcbn07XFxuXFxuLyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovfS5jYWxsKGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vLi4vLi4vLi4vd2VicGFjay9idWlsZGluL2dsb2JhbC5qcyAqLyAzKSkpLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lPREl1YW5NaUxDSnpiM1Z5WTJWeklqcGJJbmRsWW5CaFkyczZMeTh2TGk5K0wyTmhjblJ2TDJ4cFlpOWpZWEowYnk5d1lYSnpaWEl1YW5NL1lUVmhOQ0pkTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lKMllYSWdZMkZ5ZEc4Z1BTQmxlSEJ2Y25SekxGeHVJQ0FnSUhSeVpXVWdQU0J5WlhGMWFYSmxLQ2N1TDNSeVpXVW5LU3hjYmlBZ0lDQmZJRDBnWjJ4dlltRnNMbDhnZkh3Z2NtVnhkV2x5WlNnbmRXNWtaWEp6WTI5eVpTY3BPMXh1WEc0dkx5QWdJQ0JVYjJ0bGJpQnRZWFJqYUdsdVp5QnBjeUJrYjI1bElIZHBkR2dnZEdobElHQWtZQ0JtZFc1amRHbHZiaXdnZDJocFkyZ2daV2wwYUdWeUlIUmhhMlZ6WEc0dkx5QWdJQ0JoSUhSbGNtMXBibUZzSUhOMGNtbHVaeUJ2Y2lCeVpXZGxlSEFzSUc5eUlHRWdibTl1TFhSbGNtMXBibUZzSUdaMWJtTjBhVzl1SUhSdklHTmhiR3d1WEc0dkx5QWdJQ0JKZENCaGJITnZJSFJoYTJWeklHTmhjbVVnYjJZZ2JXOTJhVzVuSUdGc2JDQjBhR1VnYVc1a2FXTmxjeUJtYjNKM1lYSmtjeTVjYm1OaGNuUnZMbEJoY25ObGNpQTlJR1oxYm1OMGFXOXVJRkJoY25ObGNpaGxibllwSUh0Y2JpQWdJQ0IyWVhJZ2FXNXdkWFFzSUNBZ0lDQWdJQzh2SUV4bFUxTWdhVzV3ZFhRZ2MzUnlhVzVuWEc0Z0lDQWdJQ0FnSUdrc0lDQWdJQ0FnSUNBZ0lDQXZMeUJqZFhKeVpXNTBJR2x1WkdWNElHbHVJR0JwYm5CMWRHQmNiaUFnSUNBZ0lDQWdhaXdnSUNBZ0lDQWdJQ0FnSUM4dklHTjFjbkpsYm5RZ1kyaDFibXRjYmlBZ0lDQWdJQ0FnZEdWdGNDd2dJQ0FnSUNBZ0lDOHZJSFJsYlhCdmNtRnlhV3g1SUdodmJHUnpJR0VnWTJoMWJtc25jeUJ6ZEdGMFpTd2dabTl5SUdKaFkydDBjbUZqYTJsdVoxeHVJQ0FnSUNBZ0lDQnRaVzF2TENBZ0lDQWdJQ0FnTHk4Z2RHVnRjRzl5WVhKcGJIa2dhRzlzWkhNZ1lHbGdMQ0IzYUdWdUlHSmhZMnQwY21GamEybHVaMXh1SUNBZ0lDQWdJQ0JtZFhKMGFHVnpkQ3dnSUNBZ0x5OGdablZ5ZEdobGMzUWdhVzVrWlhnZ2RHaGxJSEJoY25ObGNpQm9ZWE1nWjI5dVpTQjBiMXh1SUNBZ0lDQWdJQ0JqYUhWdWEzTXNJQ0FnSUNBZ0x5OGdZMmgxYm10cFptbGxaQ0JwYm5CMWRGeHVJQ0FnSUNBZ0lDQmpkWEp5Wlc1MExDQWdJQ0FnTHk4Z2FXNWtaWGdnYjJZZ1kzVnljbVZ1ZENCamFIVnVheXdnYVc0Z1lHbHVjSFYwWUZ4dUlDQWdJQ0FnSUNCd1lYSnpaWEk3WEc1Y2JpQWdJQ0IyWVhJZ2RHaGhkQ0E5SUhSb2FYTTdYRzVjYmlBZ0lDQXZMeUJVYUdseklHWjFibU4wYVc5dUlHbHpJR05oYkd4bFpDQmhablJsY2lCaGJHd2dabWxzWlhOY2JpQWdJQ0F2THlCb1lYWmxJR0psWlc0Z2FXMXdiM0owWldRZ2RHaHliM1ZuYUNCZ1FHbHRjRzl5ZEdBdVhHNGdJQ0FnZG1GeUlHWnBibWx6YUNBOUlHWjFibU4wYVc5dUtDa2dlMzA3WEc1Y2JpQWdJQ0JtZFc1amRHbHZiaUJ6WVhabEtDa2dJQ0FnZTF4dUlDQWdJQ0FnSUNCMFpXMXdJRDBnWTJoMWJtdHpXMnBkTzF4dUlDQWdJQ0FnSUNCdFpXMXZJRDBnYVR0Y2JpQWdJQ0FnSUNBZ1kzVnljbVZ1ZENBOUlHazdYRzRnSUNBZ2ZWeHVJQ0FnSUdaMWJtTjBhVzl1SUhKbGMzUnZjbVVvS1NCN1hHNGdJQ0FnSUNBZ0lHTm9kVzVyYzF0cVhTQTlJSFJsYlhBN1hHNGdJQ0FnSUNBZ0lHa2dQU0J0Wlcxdk8xeHVJQ0FnSUNBZ0lDQmpkWEp5Wlc1MElEMGdhVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQm1kVzVqZEdsdmJpQnplVzVqS0NrZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvYVNBK0lHTjFjbkpsYm5RcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdOb2RXNXJjMXRxWFNBOUlHTm9kVzVyYzF0cVhTNXpiR2xqWlNocElDMGdZM1Z5Y21WdWRDazdYRzRnSUNBZ0lDQWdJQ0FnSUNCamRYSnlaVzUwSUQwZ2FUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lIMWNiaUFnSUNBdkwxeHVJQ0FnSUM4dklGQmhjbk5sSUdaeWIyMGdZU0IwYjJ0bGJpd2djbVZuWlhod0lHOXlJSE4wY21sdVp5d2dZVzVrSUcxdmRtVWdabTl5ZDJGeVpDQnBaaUJ0WVhSamFGeHVJQ0FnSUM4dlhHNGdJQ0FnWm5WdVkzUnBiMjRnSkNoMGIyc3BJSHRjYmlBZ0lDQWdJQ0FnZG1GeUlHMWhkR05vTENCaGNtZHpMQ0JzWlc1bmRHZ3NJR01zSUdsdVpHVjRMQ0JsYm1SSmJtUmxlQ3dnYXp0Y2JseHVJQ0FnSUNBZ0lDQXZMeUJPYjI0dGRHVnliV2x1WVd4Y2JpQWdJQ0FnSUNBZ2FXWWdLSFJ2YXlCcGJuTjBZVzVqWlc5bUlFWjFibU4wYVc5dUtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEc5ckxtTmhiR3dvY0dGeWMyVnlMbkJoY25ObGNuTXBPMXh1SUNBZ0lDQWdJQ0F2THlCVVpYSnRhVzVoYkZ4dUlDQWdJQ0FnSUNBdkx5QkZhWFJvWlhJZ2JXRjBZMmdnWVNCemFXNW5iR1VnWTJoaGNtRmpkR1Z5SUdsdUlIUm9aU0JwYm5CMWRDeGNiaUFnSUNBZ0lDQWdMeThnYjNJZ2JXRjBZMmdnWVNCeVpXZGxlSEFnYVc0Z2RHaGxJR04xY25KbGJuUWdZMmgxYm1zZ0tHTm9kVzVyVzJwZEtTNWNiaUFnSUNBZ0lDQWdmU0JsYkhObElHbG1JQ2gwZVhCbGIyWW9kRzlyS1NBOVBUMGdKM04wY21sdVp5Y3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHMWhkR05vSUQwZ2FXNXdkWFF1WTJoaGNrRjBLR2twSUQwOVBTQjBiMnNnUHlCMGIyc2dPaUJ1ZFd4c08xeHVJQ0FnSUNBZ0lDQWdJQ0FnYkdWdVozUm9JRDBnTVR0Y2JpQWdJQ0FnSUNBZ0lDQWdJSE41Ym1Nb0tUdGNiaUFnSUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhONWJtTW9LVHRjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdiV0YwWTJnZ1BTQjBiMnN1WlhobFl5aGphSFZ1YTNOYmFsMHBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLRzFoZEdOb0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR1Z1WjNSb0lEMGdiV0YwWTJoYk1GMHViR1Z1WjNSb08xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdiblZzYkR0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lDOHZJRlJvWlNCdFlYUmphQ0JwY3lCamIyNW1hWEp0WldRc0lHRmtaQ0IwYUdVZ2JXRjBZMmdnYkdWdVozUm9JSFJ2SUdCcFlDeGNiaUFnSUNBZ0lDQWdMeThnWVc1a0lHTnZibk4xYldVZ1lXNTVJR1Y0ZEhKaElIZG9hWFJsTFhOd1lXTmxJR05vWVhKaFkzUmxjbk1nS0NjZ0p5QjhmQ0FuWEZ4dUp5bGNiaUFnSUNBZ0lDQWdMeThnZDJocFkyZ2dZMjl0WlNCaFpuUmxjaUIwYUdGMExpQlVhR1VnY21WaGMyOXVJR1p2Y2lCMGFHbHpJR2x6SUhSb1lYUWdUR1ZUVXlkelhHNGdJQ0FnSUNBZ0lDOHZJR2R5WVcxdFlYSWdhWE1nYlc5emRHeDVJSGRvYVhSbExYTndZV05sSUdsdWMyVnVjMmwwYVhabExseHVJQ0FnSUNBZ0lDQnBaaUFvYldGMFkyZ3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJ0WlcwZ1BTQnBJQ3M5SUd4bGJtZDBhRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHVnVaRWx1WkdWNElEMGdhU0FySUdOb2RXNXJjMXRxWFM1c1pXNW5kR2dnTFNCc1pXNW5kR2c3WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJSGRvYVd4bElDaHBJRHdnWlc1a1NXNWtaWGdwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaklEMGdhVzV3ZFhRdVkyaGhja052WkdWQmRDaHBLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb0lTQW9ZeUE5UFQwZ016SWdmSHdnWXlBOVBUMGdNVEFnZkh3Z1l5QTlQVDBnT1NrcElIc2dZbkpsWVdzN0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBLeXM3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNCamFIVnVhM05iYWwwZ1BTQmphSFZ1YTNOYmFsMHVjMnhwWTJVb2JHVnVaM1JvSUNzZ0tHa2dMU0J0WlcwcEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdOMWNuSmxiblFnUFNCcE8xeHVYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9ZMmgxYm10elcycGRMbXhsYm1kMGFDQTlQVDBnTUNBbUppQnFJRHdnWTJoMWJtdHpMbXhsYm1kMGFDQXRJREVwSUhzZ2Fpc3JPeUI5WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoMGVYQmxiMllvYldGMFkyZ3BJRDA5UFNBbmMzUnlhVzVuSnlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCdFlYUmphRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUcxaGRHTm9MbXhsYm1kMGFDQTlQVDBnTVNBL0lHMWhkR05vV3pCZElEb2diV0YwWTJnN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2THlCVFlXMWxJR0Z6SUNRb0tTd2dZblYwSUdSdmJpZDBJR05vWVc1blpTQjBhR1VnYzNSaGRHVWdiMllnZEdobElIQmhjbk5sY2l4Y2JpQWdJQ0F2THlCcWRYTjBJSEpsZEhWeWJpQjBhR1VnYldGMFkyZ3VYRzRnSUNBZ1puVnVZM1JwYjI0Z2NHVmxheWgwYjJzcElIdGNiaUFnSUNBZ0lDQWdhV1lnS0hSNWNHVnZaaWgwYjJzcElEMDlQU0FuYzNSeWFXNW5KeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHbHVjSFYwTG1Ob1lYSkJkQ2hwS1NBOVBUMGdkRzlyTzF4dUlDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlDRWhkRzlyTG5SbGMzUW9ZMmgxYm10elcycGRLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDFjYmx4dUlDQWdJR1oxYm1OMGFXOXVJR1Y0ZEhKaFkzUkZjbkp2Y2t4cGJtVW9jM1I1YkdVc0lHVnljbTl5U1c1a1pYZ3BJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJQ2h6ZEhsc1pTNXpiR2xqWlNnd0xDQmxjbkp2Y2tsdVpHVjRLUzV0WVhSamFDZ3ZYRnh1TDJjcElIeDhJQ2NuS1M1c1pXNW5kR2dnS3lBeE8xeHVJQ0FnSUgxY2JseHVYRzRnSUNBZ0x5OGdUV0ZyWlNCaGJpQmxjbkp2Y2lCdlltcGxZM1FnWm5KdmJTQmhJSEJoYzNObFpDQnpaWFFnYjJZZ2NISnZjR1Z5ZEdsbGN5NWNiaUFnSUNBdkx5QkJZMk5sY0hSbFpDQndjbTl3WlhKMGFXVnpPbHh1SUNBZ0lDOHZJQzBnWUcxbGMzTmhaMlZnT2lCVVpYaDBJRzltSUhSb1pTQmxjbkp2Y2lCdFpYTnpZV2RsTGx4dUlDQWdJQzh2SUMwZ1lHWnBiR1Z1WVcxbFlEb2dSbWxzWlc1aGJXVWdkMmhsY21VZ2RHaGxJR1Z5Y205eUlHOWpZM1Z5Y21Wa0xseHVJQ0FnSUM4dklDMGdZR2x1WkdWNFlEb2dRMmhoY2k0Z2FXNWtaWGdnZDJobGNtVWdkR2hsSUdWeWNtOXlJRzlqWTNWeWNtVmtMbHh1SUNBZ0lHWjFibU4wYVc5dUlHMWhhMlZGY25KdmNpaGxjbklwSUh0Y2JpQWdJQ0FnSUNBZ2RtRnlJR1ZwYm5CMWREdGNiaUFnSUNBZ0lDQWdkbUZ5SUdWeWNtOXlWR1Z0Y0d4aGRHVTdYRzVjYmlBZ0lDQWdJQ0FnWHk1a1pXWmhkV3gwY3lobGNuSXNJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbHVaR1Y0T2lCbWRYSjBhR1Z6ZEN4Y2JpQWdJQ0FnSUNBZ0lDQWdJR1pwYkdWdVlXMWxPaUJsYm5ZdVptbHNaVzVoYldVc1hHNGdJQ0FnSUNBZ0lDQWdJQ0J0WlhOellXZGxPaUFuVUdGeWMyVWdaWEp5YjNJdUp5eGNiaUFnSUNBZ0lDQWdJQ0FnSUd4cGJtVTZJREFzWEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiMngxYlc0NklDMHhYRzRnSUNBZ0lDQWdJSDBwTzF4dVhHNGdJQ0FnSUNBZ0lHbG1JQ2hsY25JdVptbHNaVzVoYldVZ0ppWWdkR2hoZEM1bGJuWXVhVzV3ZFhSeklDWW1JSFJvWVhRdVpXNTJMbWx1Y0hWMGMxdGxjbkl1Wm1sc1pXNWhiV1ZkS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JsYVc1d2RYUWdQU0IwYUdGMExtVnVkaTVwYm5CMWRITmJaWEp5TG1acGJHVnVZVzFsWFR0Y2JpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR1ZwYm5CMWRDQTlJR2x1Y0hWME8xeHVJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnWlhKeUxteHBibVVnUFNCbGVIUnlZV04wUlhKeWIzSk1hVzVsS0dWcGJuQjFkQ3dnWlhKeUxtbHVaR1Y0S1R0Y2JpQWdJQ0FnSUNBZ1ptOXlJQ2gyWVhJZ2JpQTlJR1Z5Y2k1cGJtUmxlRHNnYmlBK1BTQXdJQ1ltSUdWcGJuQjFkQzVqYUdGeVFYUW9iaWtnSVQwOUlDZGNYRzRuT3lCdUxTMHBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHVnljaTVqYjJ4MWJXNHJLenRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCbGNuSnZjbFJsYlhCc1lYUmxJRDBnWHk1MFpXMXdiR0YwWlNnblBDVTlabWxzWlc1aGJXVWxQam84SlQxc2FXNWxKVDQ2UENVOVkyOXNkVzF1SlQ0Z1BDVTliV1Z6YzJGblpTVStKeWs3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJ1WlhjZ1JYSnliM0lvWlhKeWIzSlVaVzF3YkdGMFpTaGxjbklwS1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0IwYUdsekxtVnVkaUE5SUdWdWRpQTlJR1Z1ZGlCOGZDQjdmVHRjYmlBZ0lDQjBhR2x6TG1WdWRpNW1hV3hsYm1GdFpTQTlJSFJvYVhNdVpXNTJMbVpwYkdWdVlXMWxJSHg4SUc1MWJHdzdYRzRnSUNBZ2RHaHBjeTVsYm5ZdWFXNXdkWFJ6SUQwZ2RHaHBjeTVsYm5ZdWFXNXdkWFJ6SUh4OElIdDlPMXh1WEc0Z0lDQWdMeThnVkdobElGQmhjbk5sY2x4dUlDQWdJSEJoY25ObGNpQTlJSHRjYmx4dUlDQWdJQ0FnSUNCbGVIUnlZV04wUlhKeWIzSk1hVzVsT2lCbGVIUnlZV04wUlhKeWIzSk1hVzVsTEZ4dUlDQWdJQ0FnSUNBdkwxeHVJQ0FnSUNBZ0lDQXZMeUJRWVhKelpTQmhiaUJwYm5CMWRDQnpkSEpwYm1jZ2FXNTBieUJoYmlCaFluTjBjbUZqZENCemVXNTBZWGdnZEhKbFpTNWNiaUFnSUNBZ0lDQWdMeThnVkdoeWIzZHpJR0Z1SUdWeWNtOXlJRzl1SUhCaGNuTmxJR1Z5Y205eWN5NWNiaUFnSUNBZ0lDQWdjR0Z5YzJVNklHWjFibU4wYVc5dUtITjBjaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUhKdmIzUXNJSE4wWVhKMExDQmxibVFzSUhwdmJtVXNJR3hwYm1Vc0lHeHBibVZ6TENCaWRXWm1JRDBnVzEwc0lHTXNJR1Z5Y205eUlEMGdiblZzYkR0Y2JseHVJQ0FnSUNBZ0lDQWdJQ0FnYVNBOUlHb2dQU0JqZFhKeVpXNTBJRDBnWm5WeWRHaGxjM1FnUFNBd08xeHVJQ0FnSUNBZ0lDQWdJQ0FnWTJoMWJtdHpJRDBnVzEwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwYm5CMWRDQTlJSE4wY2k1eVpYQnNZV05sS0M5Y1hISmNYRzR2Wnl3Z0oxeGNiaWNwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0dWdWRpNW1hV3hsYm1GdFpTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvWVhRdVpXNTJMbWx1Y0hWMGMxdGxibll1Wm1sc1pXNWhiV1ZkSUQwZ2FXNXdkWFE3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJsWVhKc2VWOWxlR2wwSUQwZ1ptRnNjMlU3WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUZOd2JHbDBJSFJvWlNCcGJuQjFkQ0JwYm5SdklHTm9kVzVyY3k1Y2JpQWdJQ0FnSUNBZ0lDQWdJR05vZFc1cmN5QTlJQ2htZFc1amRHbHZiaUFvWTJoMWJtdHpLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlHb2dQU0F3TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnphMmx3SUQwZ0x5Zy9Pa0JjWEh0YlhGeDNMVjByWEZ4OWZGdGVYQ0luWUZ4Y2UxeGNmVnhjTDF4Y0tGeGNLVnhjWEZ4ZEtTc3ZaeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyOXRiV1Z1ZENBOUlDOWNYQzljWENvb1B6cGJYaXBkZkZ4Y0tpdGJYbHhjTHlwZEtTcGNYQ29yWEZ3dmZGeGNMMXhjTHk0cUwyY3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhOMGNtbHVaeUE5SUM5Y0lpZ29QenBiWGx3aVhGeGNYRnhjY2x4Y2JsMThYRnhjWEM0cEtpbGNJbnduS0NnL09sdGVKMXhjWEZ4Y1hISmNYRzVkZkZ4Y1hGd3VLU29wSjN4Z0tDZy9PbHRlWUYxOFhGeGNYQzRwS2lsZ0wyY3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRtVnNJRDBnTUN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiV0YwWTJnc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR05vZFc1cklEMGdZMmgxYm10eld6QmRMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcGJsQmhjbUZ0TzF4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1ptOXlJQ2gyWVhJZ2FTQTlJREFzSUdNc0lHTmpPeUJwSUR3Z2FXNXdkWFF1YkdWdVozUm9PeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnphMmx3TG14aGMzUkpibVJsZUNBOUlHazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaHRZWFJqYUNBOUlITnJhWEF1WlhobFl5aHBibkIxZENrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2h0WVhSamFDNXBibVJsZUNBOVBUMGdhU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHa2dLejBnYldGMFkyaGJNRjB1YkdWdVozUm9PMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOb2RXNXJMbkIxYzJnb2JXRjBZMmhiTUYwcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTWdQU0JwYm5CMWRDNWphR0Z5UVhRb2FTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOdmJXMWxiblF1YkdGemRFbHVaR1Y0SUQwZ2MzUnlhVzVuTG14aGMzUkpibVJsZUNBOUlHazdYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLRzFoZEdOb0lEMGdjM1J5YVc1bkxtVjRaV01vYVc1d2RYUXBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2JXRjBZMmd1YVc1a1pYZ2dQVDA5SUdrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwSUNzOUlHMWhkR05vV3pCZExteGxibWQwYUR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmphSFZ1YXk1d2RYTm9LRzFoZEdOb1d6QmRLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamIyNTBhVzUxWlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2doYVc1UVlYSmhiU0FtSmlCaklEMDlQU0FuTHljcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTmpJRDBnYVc1d2RYUXVZMmhoY2tGMEtHa2dLeUF4S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaGpZeUE5UFQwZ0p5OG5JSHg4SUdOaklEMDlQU0FuS2ljcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2JXRjBZMmdnUFNCamIyMXRaVzUwTG1WNFpXTW9hVzV3ZFhRcEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2h0WVhSamFDNXBibVJsZUNBOVBUMGdhU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FTQXJQU0J0WVhSamFGc3dYUzVzWlc1bmRHZzdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYUhWdWF5NXdkWE5vS0cxaGRHTm9XekJkS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZiblJwYm5WbE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYzNkcGRHTm9JQ2hqS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCallYTmxJQ2Q3SnpvZ2FXWWdLQ0VnYVc1UVlYSmhiU2tnZXlCc1pYWmxiQ0FyS3pzZ0lDQWdJQ0FnSUdOb2RXNXJMbkIxYzJnb1l5azdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZbkpsWVdzN0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTmhjMlVnSjMwbk9pQnBaaUFvSVNCcGJsQmhjbUZ0S1NCN0lHeGxkbVZzSUMwdE95QWdJQ0FnSUNBZ1kyaDFibXN1Y0hWemFDaGpLVHNnWTJoMWJtdHpXeXNyYWwwZ1BTQmphSFZ1YXlBOUlGdGRPeUJpY21WaGF6c2dmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMkZ6WlNBbktDYzZJR2xtSUNnaElHbHVVR0Z5WVcwcElIc2dhVzVRWVhKaGJTQTlJSFJ5ZFdVN0lDQmphSFZ1YXk1d2RYTm9LR01wT3lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdKeVpXRnJPeUI5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqWVhObElDY3BKem9nYVdZZ0tDQWdhVzVRWVhKaGJTa2dleUJwYmxCaGNtRnRJRDBnWm1Gc2MyVTdJR05vZFc1ckxuQjFjMmdvWXlrN0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1luSmxZV3M3SUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdSbFptRjFiSFE2SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTJoMWJtc3VjSFZ6YUNoaktUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2tyS3p0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR3hsZG1Wc0lDRTlQU0F3S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1Z5Y205eUlEMGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhVzVrWlhnNklHa2dMU0F4TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEhsd1pUb2dKMUJoY25ObEp5eGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHMWxjM05oWjJVNklDaHNaWFpsYkNBK0lEQXBJRDhnWENKdGFYTnphVzVuSUdOc2IzTnBibWNnWUgxZ1hDSWdPaUJjSW0xcGMzTnBibWNnYjNCbGJtbHVaeUJnZTJCY0lseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5TzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCamFIVnVhM011YldGd0tHWjFibU4wYVc5dUlDaGpLU0I3SUhKbGRIVnliaUJqTG1wdmFXNG9KeWNwT3lCOUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgwcEtGdGJYVjBwTzF4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1pYSnliM0lwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFISnZkeUJ0WVd0bFJYSnliM0lvWlhKeWIzSXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5QlRkR0Z5ZENCM2FYUm9JSFJvWlNCd2NtbHRZWEo1SUhKMWJHVXVYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5QlVhR1VnZDJodmJHVWdjM2x1ZEdGNElIUnlaV1VnYVhNZ2FHVnNaQ0IxYm1SbGNpQmhJRkoxYkdWelpYUWdibTlrWlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUhkcGRHZ2dkR2hsSUdCeWIyOTBZQ0J3Y205d1pYSjBlU0J6WlhRZ2RHOGdkSEoxWlN3Z2MyOGdibThnWUh0OVlDQmhjbVZjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJRzkxZEhCMWRDNWNiaUFnSUNBZ0lDQWdJQ0FnSUhKdmIzUWdQU0J1WlhjZ2RISmxaUzVTZFd4bGMyVjBLRnRkTENBa0tIUm9hWE11Y0dGeWMyVnljeTV3Y21sdFlYSjVLU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnliMjkwTG5KdmIzUWdQU0IwY25WbE8xeHVYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5QkhaWFFnWVc0Z1lYSnlZWGtnYjJZZ1VuVnNaWE5sZENCdlltcGxZM1J6TENCbWJHRjBkR1Z1WldSY2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUdGdVpDQnpiM0owWldRZ1lXTmpiM0prYVc1bklIUnZJSE53WldOcFptbGphWFI1VTI5eWRGeHVJQ0FnSUNBZ0lDQWdJQ0FnY205dmRDNTBiMHhwYzNRZ1BTQW9ablZ1WTNScGIyNG9LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlHeHBibVVzSUd4cGJtVnpMQ0JqYjJ4MWJXNDdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHWjFibU4wYVc5dUtHVnVkaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmxibll1WlhKeWIzSWdQU0JtZFc1amRHbHZiaWhsS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9JV1Z1ZGk1bGNuSnZjbk1wSUdWdWRpNWxjbkp2Y25NZ1BTQnVaWGNnUlhKeWIzSW9KeWNwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHVnVkaTVsY25KdmNuTXViV1Z6YzJGblpTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdWdWRpNWxjbkp2Y25NdWJXVnpjMkZuWlNBclBTQW5YRnh1SnlBcklHMWhhMlZGY25KdmNpaGxLUzV0WlhOellXZGxPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JsYm5ZdVpYSnliM0p6TG0xbGMzTmhaMlVnUFNCdFlXdGxSWEp5YjNJb1pTa3ViV1Z6YzJGblpUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaVzUyTG1aeVlXMWxjeUE5SUdWdWRpNW1jbUZ0WlhNZ2ZId2dXMTA3WEc1Y2JseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2THlCallXeHNJSEJ2Y0hWc1lYUmxjeUJKYm5aaGJHbGtMV05oZFhObFpDQmxjbkp2Y25OY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUdSbFptbHVhWFJwYjI1eklEMGdkR2hwY3k1bWJHRjBkR1Z1S0Z0ZExDQmJYU3dnWlc1MktUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWkdWbWFXNXBkR2x2Ym5NdWMyOXlkQ2h6Y0dWamFXWnBZMmwwZVZOdmNuUXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnWkdWbWFXNXBkR2x2Ym5NN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgwcEtDazdYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJRk52Y25RZ2NuVnNaWE1nWW5rZ2MzQmxZMmxtYVdOcGRIazZJSFJvYVhNZ1puVnVZM1JwYjI0Z1pYaHdaV04wY3lCelpXeGxZM1J2Y25NZ2RHOGdZbVZjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJSE53YkdsMElHRnNjbVZoWkhrdVhHNGdJQ0FnSUNBZ0lDQWdJQ0F2TDF4dUlDQWdJQ0FnSUNBZ0lDQWdMeThnVjNKcGRIUmxiaUIwYnlCaVpTQjFjMlZrSUdGeklHRWdMbk52Y25Rb1JuVnVZM1JwYjI0cE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1lYSm5kVzFsYm5RdVhHNGdJQ0FnSUNBZ0lDQWdJQ0F2TDF4dUlDQWdJQ0FnSUNBZ0lDQWdMeThnV3pFc0lEQXNJREFzSURRMk4xMGdQaUJiTUN3Z01Dd2dNU3dnTlRJd1hWeHVJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlITndaV05wWm1samFYUjVVMjl5ZENBOUlHWjFibU4wYVc5dUtHRXNJR0lwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllYSWdZWE1nUFNCaExuTndaV05wWm1samFYUjVPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCaWN5QTlJR0l1YzNCbFkybG1hV05wZEhrN1hHNWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvWVhOYk1GMGdJVDBnWW5OYk1GMHBJSEpsZEhWeWJpQmljMXN3WFNBdElHRnpXekJkTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaGhjMXN4WFNBaFBTQmljMXN4WFNrZ2NtVjBkWEp1SUdKeld6RmRJQzBnWVhOYk1WMDdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0dGeld6SmRJQ0U5SUdKeld6SmRLU0J5WlhSMWNtNGdZbk5iTWwwZ0xTQmhjMXN5WFR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnWW5OYk0xMGdMU0JoYzFzelhUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgwN1hHNWNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJ5YjI5ME8xeHVJQ0FnSUNBZ0lDQjlMRnh1WEc0Z0lDQWdJQ0FnSUM4dklFaGxjbVVnYVc0c0lIUm9aU0J3WVhKemFXNW5JSEoxYkdWekwyWjFibU4wYVc5dWMxeHVJQ0FnSUNBZ0lDQXZMMXh1SUNBZ0lDQWdJQ0F2THlCVWFHVWdZbUZ6YVdNZ2MzUnlkV04wZFhKbElHOW1JSFJvWlNCemVXNTBZWGdnZEhKbFpTQm5aVzVsY21GMFpXUWdhWE1nWVhNZ1ptOXNiRzkzY3pwY2JpQWdJQ0FnSUNBZ0x5OWNiaUFnSUNBZ0lDQWdMeThnSUNCU2RXeGxjMlYwSUMwK0lDQlNkV3hsSUMwK0lGWmhiSFZsSUMwK0lFVjRjSEpsYzNOcGIyNGdMVDRnUlc1MGFYUjVYRzRnSUNBZ0lDQWdJQzh2WEc0Z0lDQWdJQ0FnSUM4dklDQkpiaUJuWlc1bGNtRnNMQ0J0YjNOMElISjFiR1Z6SUhkcGJHd2dkSEo1SUhSdklIQmhjbk5sSUdFZ2RHOXJaVzRnZDJsMGFDQjBhR1VnWUNRb0tXQWdablZ1WTNScGIyNHNJR0Z1WkNCcFppQjBhR1VnY21WMGRYSnVYRzRnSUNBZ0lDQWdJQzh2SUNCMllXeDFaU0JwY3lCMGNuVnNlU3dnZDJsc2JDQnlaWFIxY200Z1lTQnVaWGNnYm05a1pTd2diMllnZEdobElISmxiR1YyWVc1MElIUjVjR1V1SUZOdmJXVjBhVzFsY3l3Z2QyVWdibVZsWkNCMGJ5QmphR1ZqYTF4dUlDQWdJQ0FnSUNBdkx5QWdabWx5YzNRc0lHSmxabTl5WlNCd1lYSnphVzVuTENCMGFHRjBKM01nZDJobGJpQjNaU0IxYzJVZ1lIQmxaV3NvS1dBdVhHNGdJQ0FnSUNBZ0lIQmhjbk5sY25NNklIdGNiaUFnSUNBZ0lDQWdJQ0FnSUM4dklGUm9aU0JnY0hKcGJXRnllV0FnY25Wc1pTQnBjeUIwYUdVZ0ttVnVkSEo1S2lCaGJtUWdLbVY0YVhRcUlIQnZhVzUwSUc5bUlIUm9aU0J3WVhKelpYSXVYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5QlVhR1VnY25Wc1pYTWdhR1Z5WlNCallXNGdZWEJ3WldGeUlHRjBJR0Z1ZVNCc1pYWmxiQ0J2WmlCMGFHVWdjR0Z5YzJVZ2RISmxaUzVjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5QlVhR1VnY21WamRYSnphWFpsSUc1aGRIVnlaU0J2WmlCMGFHVWdaM0poYlcxaGNpQnBjeUJoYmlCcGJuUmxjbkJzWVhrZ1ltVjBkMlZsYmlCMGFHVWdZR0pzYjJOcllGeHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z2NuVnNaU3dnZDJocFkyZ2djbVZ3Y21WelpXNTBjeUJnZXlBdUxpNGdmV0FzSUhSb1pTQmdjblZzWlhObGRHQWdjblZzWlN3Z1lXNWtJSFJvYVhNZ1lIQnlhVzFoY25sZ0lISjFiR1VzWEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUJoY3lCeVpYQnlaWE5sYm5SbFpDQmllU0IwYUdseklITnBiWEJzYVdacFpXUWdaM0poYlcxaGNqcGNiaUFnSUNBZ0lDQWdJQ0FnSUM4dlhHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlBZ0lDQWdjSEpwYldGeWVTQWc0b2FTSUNBb2NuVnNaWE5sZENCOElISjFiR1VwSzF4dUlDQWdJQ0FnSUNBZ0lDQWdMeThnSUNBZ0lISjFiR1Z6WlhRZ0lPS0draUFnYzJWc1pXTjBiM0lySUdKc2IyTnJYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5QWdJQ0FnWW14dlkyc2dJQ0FnNG9hU0lDQW5leWNnY0hKcGJXRnllU0FuZlNkY2JpQWdJQ0FnSUNBZ0lDQWdJQzh2WEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUJQYm14NUlHRjBJRzl1WlNCd2IybHVkQ0JwY3lCMGFHVWdjSEpwYldGeWVTQnlkV3hsSUc1dmRDQmpZV3hzWldRZ1puSnZiU0IwYUdWY2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUdKc2IyTnJJSEoxYkdVNklHRjBJSFJvWlNCeWIyOTBJR3hsZG1Wc0xseHVJQ0FnSUNBZ0lDQWdJQ0FnY0hKcGJXRnllVG9nWm5WdVkzUnBiMjRvS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJRzV2WkdVc0lISnZiM1FnUFNCYlhUdGNibHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSGRvYVd4bElDZ29ibTlrWlNBOUlDUW9kR2hwY3k1eWRXeGxLU0I4ZkNBa0tIUm9hWE11Y25Wc1pYTmxkQ2tnZkh4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FrS0hSb2FYTXVZMjl0YldWdWRDa3BJSHg4WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdKQ2d2WGx0Y1hITmNYRzVkS3k4cElIeDhJQ2h1YjJSbElEMGdKQ2gwYUdsekxtbHVkbUZzYVdRcEtTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9ibTlrWlNrZ2NtOXZkQzV3ZFhOb0tHNXZaR1VwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnY205dmREdGNiaUFnSUNBZ0lDQWdJQ0FnSUgwc1hHNWNiaUFnSUNBZ0lDQWdJQ0FnSUdsdWRtRnNhV1E2SUdaMWJtTjBhVzl1SUNncElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZWElnWTJoMWJtc2dQU0FrS0M5ZVcxNDdYRnh1WFNwYk8xeGNibDB2S1R0Y2JseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJRlJ2SUdaaGFXd2daM0poWTJWbWRXeHNlU3dnYldGMFkyZ2daWFpsY25sMGFHbHVaeUIxYm5ScGJDQmhJSE5sYldsamIyeHZiaUJ2Y2lCc2FXNWxZbkpsWVdzdVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR05vZFc1cktTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJ1WlhjZ2RISmxaUzVKYm5aaGJHbGtLR05vZFc1ckxDQnRaVzF2S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5TEZ4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCWFpTQmpjbVZoZEdVZ1lTQkRiMjF0Wlc1MElHNXZaR1VnWm05eUlFTlRVeUJqYjIxdFpXNTBjeUJnTHlvZ0tpOWdMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OGdZblYwSUd0bFpYQWdkR2hsSUV4bFUxTWdZMjl0YldWdWRITWdZQzh2WUNCemFXeGxiblFzSUdKNUlHcDFjM1FnYzJ0cGNIQnBibWRjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJRzkyWlhJZ2RHaGxiUzVjYmlBZ0lDQWdJQ0FnSUNBZ0lHTnZiVzFsYm5RNklHWjFibU4wYVc5dUtDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCamIyMXRaVzUwTzF4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR2x1Y0hWMExtTm9ZWEpCZENocEtTQWhQVDBnSnk4bktTQnlaWFIxY200N1hHNWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYVc1d2RYUXVZMmhoY2tGMEtHa2dLeUF4S1NBOVBUMGdKeThuS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQnVaWGNnZEhKbFpTNURiMjF0Wlc1MEtDUW9MMTVjWEM5Y1hDOHVLaThwTENCMGNuVmxLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdhV1lnS0dOdmJXMWxiblFnUFNBa0tDOWVYRnd2WEZ3cUtEODZXMTRxWFh4Y1hDb3JXMTVjWEM4cVhTa3FYRndxSzF4Y0wxeGNiajh2S1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdibVYzSUhSeVpXVXVRMjl0YldWdWRDaGpiMjF0Wlc1MEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNCOUxGeHVYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5QkZiblJwZEdsbGN5QmhjbVVnZEc5clpXNXpJSGRvYVdOb0lHTmhiaUJpWlNCbWIzVnVaQ0JwYm5OcFpHVWdZVzRnUlhod2NtVnpjMmx2Ymx4dUlDQWdJQ0FnSUNBZ0lDQWdaVzUwYVhScFpYTTZJSHRjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4dklFRWdjM1J5YVc1bkxDQjNhR2xqYUNCemRYQndiM0owY3lCbGMyTmhjR2x1WnlCY0lpQmhibVFnSnlCY0ltMXBiR3Q1SUhkaGVWd2lJQ2RvWlZ4Y0ozTWdkR2hsSUc5dVpTRW5YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjWFZ2ZEdWa09pQm1kVzVqZEdsdmJpZ3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR2x1Y0hWMExtTm9ZWEpCZENocEtTQWhQVDBnSjF3aUp5QW1KaUJwYm5CMWRDNWphR0Z5UVhRb2FTa2dJVDA5SUZ3aUoxd2lLU0J5WlhSMWNtNDdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGNpQnpkSElnUFNBa0tDOWVYQ0lvS0Q4NlcxNWNJbHhjWEZ4Y1hISmNYRzVkZkZ4Y1hGd3VLU29wWENKOEp5Z29QenBiWGlkY1hGeGNYRnh5WEZ4dVhYeGNYRnhjTGlrcUtTY3ZLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSE4wY2lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUc1bGR5QjBjbVZsTGxGMWIzUmxaQ2h6ZEhKYk1WMGdmSHdnYzNSeVd6SmRLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMHNYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2THlCQklISmxabVZ5Wlc1alpTQjBieUJoSUUxaGNHNXBheUJtYVdWc1pDd2diR2xyWlNCYlRrRk5SVjFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2THlCQ1pXaHBibVFnZEdobElITmpaVzVsY3l3Z2RHaHBjeUJvWVhNZ2RHaGxJSE5oYldVZ2NtVndjbVZ6Wlc1MFlYUnBiMjRzSUdKMWRDQkRZWEowYjF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4dklHNWxaV1J6SUhSdklHSmxJR05oY21WbWRXd2dkRzhnZDJGeWJpQjNhR1Z1SUhWdWMzVndjRzl5ZEdWa0lHOXdaWEpoZEdsdmJuTWdZWEpsSUhWelpXUXVYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdabWxsYkdRNklHWjFibU4wYVc5dUtDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9JU0FrS0NkYkp5a3BJSEpsZEhWeWJqdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlHWnBaV3hrWDI1aGJXVWdQU0FrS0M4b1hsdGVYRnhkWFNzcEx5azdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDZ2hJQ1FvSjEwbktTa2djbVYwZFhKdU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1ptbGxiR1JmYm1GdFpTa2djbVYwZFhKdUlHNWxkeUIwY21WbExrWnBaV3hrS0dacFpXeGtYMjVoYldWYk1WMHBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBzWEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdkx5QlVhR2x6SUdseklHRWdZMjl0Y0dGeWFYTnZiaUJ2Y0dWeVlYUnZjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR052YlhCaGNtbHpiMjQ2SUdaMWJtTjBhVzl1S0NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ2MzUnlJRDBnSkNndlhqMStmRDE4SVQxOFBEMThQajE4UEh3K0x5azdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaHpkSElwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJ6ZEhJN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5TEZ4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5OGdRU0JqWVhSamFDMWhiR3dnZDI5eVpDd2djM1ZqYUNCaGN6b2dhR0Z5WkMxc2FXZG9kRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzh2SUZSb1pYTmxJR05oYmlCemRHRnlkQ0IzYVhSb0lHVnBkR2hsY2lCaElHeGxkSFJsY2lCdmNpQmhJR1JoYzJnZ0tDMHBMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzh2SUdGdVpDQjBhR1Z1SUdOdmJuUmhhVzRnYm5WdFltVnljeXdnZFc1a1pYSnpZMjl5WlhNc0lHRnVaQ0JzWlhSMFpYSnpMbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3RsZVhkdmNtUTZJR1oxYm1OMGFXOXVLQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZWElnYXlBOUlDUW9MMTViUVMxYVlTMTZMVjByVzBFdFdtRXRlaTB3TFRsZlhTb3ZLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR3NwSUhzZ2NtVjBkWEp1SUc1bGR5QjBjbVZsTGt0bGVYZHZjbVFvYXlrN0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlMRnh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1FTQm1kVzVqZEdsdmJpQmpZV3hzSUd4cGEyVWdjbWRpS0RJMU5Td2dNQ3dnTWpVMUtWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJRlJvWlNCaGNtZDFiV1Z1ZEhNZ1lYSmxJSEJoY25ObFpDQjNhWFJvSUhSb1pTQmdaVzUwYVhScFpYTXVZWEpuZFcxbGJuUnpZQ0J3WVhKelpYSXVYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMkZzYkRvZ1puVnVZM1JwYjI0b0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGNpQnVZVzFsTENCaGNtZHpPMXh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2doS0c1aGJXVWdQU0F2WGloYlhGeDNYRnd0WFN0OEpTbGNYQ2d2TG1WNFpXTW9ZMmgxYm10elcycGRLU2twSUhKbGRIVnlianRjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnVZVzFsSUQwZ2JtRnRaVnN4WFR0Y2JseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2JtRnRaU0E5UFQwZ0ozVnliQ2NwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4dklIVnliQ2dwSUdseklHaGhibVJzWldRZ1lua2dkR2hsSUhWeWJDQndZWEp6WlhJZ2FXNXpkR1ZoWkZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJRzUxYkd3N1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBJQ3M5SUc1aGJXVXViR1Z1WjNSb08xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdKQ2duS0NjcE95QXZMeUJRWVhKelpTQjBhR1VnSnlnbklHRnVaQ0JqYjI1emRXMWxJSGRvYVhSbGMzQmhZMlV1WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZWEpuY3lBOUlDUW9kR2hwY3k1bGJuUnBkR2xsYzFzbllYSm5kVzFsYm5SekoxMHBPMXh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2doSkNnbktTY3BLU0J5WlhSMWNtNDdYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLRzVoYldVcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCdVpYY2dkSEpsWlM1RFlXeHNLRzVoYldVc0lHRnlaM01zSUdrcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdkx5QkJjbWQxYldWdWRITWdZWEpsSUdOdmJXMWhMWE5sY0dGeVlYUmxaQ0JsZUhCeVpYTnphVzl1YzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNkaGNtZDFiV1Z1ZEhNbk9pQm1kVzVqZEdsdmJpZ3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJR0Z5WjNNZ1BTQmJYU3dnWVhKbk8xeHVYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhkb2FXeGxJQ2hoY21jZ1BTQWtLSFJvYVhNdVpYaHdjbVZ6YzJsdmJpa3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0Z5WjNNdWNIVnphQ2hoY21jcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLQ0VnSkNnbkxDY3BLU0I3SUdKeVpXRnJPeUI5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnWVhKbmN6dGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3hwZEdWeVlXdzZJR1oxYm1OMGFXOXVLQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z0pDaDBhR2x6TG1WdWRHbDBhV1Z6TG1ScGJXVnVjMmx2YmlrZ2ZIeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDUW9kR2hwY3k1bGJuUnBkR2xsY3k1clpYbDNiM0prWTI5c2IzSXBJSHg4WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FrS0hSb2FYTXVaVzUwYVhScFpYTXVhR1Y0WTI5c2IzSXBJSHg4WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FrS0hSb2FYTXVaVzUwYVhScFpYTXVjWFZ2ZEdWa0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlMRnh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1VHRnljMlVnZFhKc0tDa2dkRzlyWlc1elhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5OWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMeUJYWlNCMWMyVWdZU0J6Y0dWamFXWnBZeUJ5ZFd4bElHWnZjaUIxY214ekxDQmlaV05oZFhObElIUm9aWGtnWkc5dUozUWdjbVZoYkd4NUlHSmxhR0YyWlNCc2FXdGxYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeThnYzNSaGJtUmhjbVFnWm5WdVkzUnBiMjRnWTJGc2JITXVJRlJvWlNCa2FXWm1aWEpsYm1ObElHbHpJSFJvWVhRZ2RHaGxJR0Z5WjNWdFpXNTBJR1J2WlhOdUozUWdhR0YyWlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4dklIUnZJR0psSUdWdVkyeHZjMlZrSUhkcGRHaHBiaUJoSUhOMGNtbHVaeXdnYzI4Z2FYUWdZMkZ1SjNRZ1ltVWdjR0Z5YzJWa0lHRnpJR0Z1SUVWNGNISmxjM05wYjI0dVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RYSnNPaUJtZFc1amRHbHZiaWdwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUhaaGJIVmxPMXh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hwYm5CMWRDNWphR0Z5UVhRb2FTa2dJVDA5SUNkMUp5QjhmQ0FoSkNndlhuVnliRnhjS0M4cEtTQnlaWFIxY200N1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoYkhWbElEMGdKQ2gwYUdsekxtVnVkR2wwYVdWekxuRjFiM1JsWkNrZ2ZId2dKQ2gwYUdsekxtVnVkR2wwYVdWekxuWmhjbWxoWW14bEtTQjhmRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNRb0wxNWJYRnd0WEZ4M0pVQWtYRnd2TGlZOU9qc2pLejkrWFNzdktTQjhmQ0FuSnp0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0NFZ0pDZ25LU2NwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnYm1WM0lIUnlaV1V1U1c1MllXeHBaQ2gyWVd4MVpTd2diV1Z0Ynl3Z0owMXBjM05wYm1jZ1kyeHZjMmx1WnlBcElHbHVJRlZTVEM0bktUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQnVaWGNnZEhKbFpTNVZVa3dvS0hSNWNHVnZaaUIyWVd4MVpTNTJZV3gxWlNBaFBUMGdKM1Z1WkdWbWFXNWxaQ2NnZkh4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZV3gxWlNCcGJuTjBZVzVqWlc5bUlIUnlaV1V1Vm1GeWFXRmliR1VwSUQ5Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZV3gxWlNBNklHNWxkeUIwY21WbExsRjFiM1JsWkNoMllXeDFaU2twTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU3hjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4dklFRWdWbUZ5YVdGaWJHVWdaVzUwYVhSNUxDQnpkV05vSUdGeklHQkFabWx1YTJBc0lHbHVYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeTljYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2THlBZ0lDQWdkMmxrZEdnNklFQm1hVzVySUNzZ01uQjRYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeTljYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2THlCWFpTQjFjMlVnWVNCa2FXWm1aWEpsYm5RZ2NHRnljMlZ5SUdadmNpQjJZWEpwWVdKc1pTQmtaV1pwYm1sMGFXOXVjeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2THlCelpXVWdZSEJoY25ObGNuTXVkbUZ5YVdGaWJHVmdMbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoY21saFlteGxPaUJtZFc1amRHbHZiaWdwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUc1aGJXVXNJR2x1WkdWNElEMGdhVHRjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYVc1d2RYUXVZMmhoY2tGMEtHa3BJRDA5UFNBblFDY2dKaVlnS0c1aGJXVWdQU0FrS0M5ZVFGdGNYSGN0WFNzdktTa3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQnVaWGNnZEhKbFpTNVdZWEpwWVdKc1pTaHVZVzFsTENCcGJtUmxlQ3dnWlc1MkxtWnBiR1Z1WVcxbEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwc1hHNWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm9aWGhqYjJ4dmNqb2dablZ1WTNScGIyNG9LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJ5WjJJN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNocGJuQjFkQzVqYUdGeVFYUW9hU2tnUFQwOUlDY2pKeUFtSmlBb2NtZGlJRDBnSkNndlhpTW9XMkV0WmtFdFJqQXRPVjE3Tm4xOFcyRXRaa0V0UmpBdE9WMTdNMzBwTHlrcEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2JtVjNJSFJ5WldVdVEyOXNiM0lvY21kaVd6RmRLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMHNYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JyWlhsM2IzSmtZMjlzYjNJNklHWjFibU4wYVc5dUtDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllYSWdjbWRpSUQwZ1kyaDFibXR6VzJwZExtMWhkR05vS0M5ZVcyRXRlbDByTHlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoeVoySWdKaVlnY21kaVd6QmRJR2x1SUhSeVpXVXVVbVZtWlhKbGJtTmxMbVJoZEdFdVkyOXNiM0p6S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnYm1WM0lIUnlaV1V1UTI5c2IzSW9kSEpsWlM1U1pXWmxjbVZ1WTJVdVpHRjBZUzVqYjJ4dmNuTmJKQ2d2WGx0aExYcGRLeThwWFNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5TEZ4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5OGdRU0JFYVcxbGJuTnBiMjRzSUhSb1lYUWdhWE1zSUdFZ2JuVnRZbVZ5SUdGdVpDQmhJSFZ1YVhRdUlGUm9aU0J2Ym14NVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5OGdkVzVwZENCMGFHRjBJR2hoY3lCaGJpQmxabVpsWTNRZ2FYTWdKVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1JwYldWdWMybHZiam9nWm5WdVkzUnBiMjRvS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCaklEMGdhVzV3ZFhRdVkyaGhja052WkdWQmRDaHBLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLQ2hqSUQ0Z05UY2dmSHdnWXlBOElEUTFLU0I4ZkNCaklEMDlQU0EwTnlrZ2NtVjBkWEp1TzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZWElnZG1Gc2RXVWdQU0FrS0M5ZUtDMC9YRnhrS2x4Y0xqOWNYR1FyS0Q4NlcyVkZYVnN0SzEwL1hGeGtLeWsvS1NoY1hDVjhYRngzS3lrL0x5azdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaDJZV3gxWlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUc1bGR5QjBjbVZsTGtScGJXVnVjMmx2YmloMllXeDFaVnN4WFN3Z2RtRnNkV1ZiTWwwc0lHMWxiVzhwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlMRnh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUJVYUdVZ2RtRnlhV0ZpYkdVZ2NHRnlkQ0J2WmlCaElIWmhjbWxoWW14bElHUmxabWx1YVhScGIyNHVYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5QlZjMlZrSUdsdUlIUm9aU0JnY25Wc1pXQWdjR0Z5YzJWeUxpQk1hV3RsSUVCbWFXNXJPbHh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnlhV0ZpYkdVNklHWjFibU4wYVc5dUtDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCdVlXMWxPMXh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHbHVjSFYwTG1Ob1lYSkJkQ2hwS1NBOVBUMGdKMEFuSUNZbUlDaHVZVzFsSUQwZ0pDZ3ZYaWhBVzF4Y2R5MWRLeWxjWEhNcU9pOHBLU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2JtRnRaVnN4WFR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5TEZ4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCRmJuUnBkR2xsY3lCaGNtVWdkR2hsSUhOdFlXeHNaWE4wSUhKbFkyOW5ibWw2WldRZ2RHOXJaVzRzWEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUJoYm1RZ1kyRnVJR0psSUdadmRXNWtJR2x1YzJsa1pTQmhJSEoxYkdVbmN5QjJZV3gxWlM1Y2JpQWdJQ0FnSUNBZ0lDQWdJR1Z1ZEdsMGVUb2dablZ1WTNScGIyNG9LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJQ1FvZEdocGN5NWxiblJwZEdsbGN5NWpZV3hzS1NCOGZGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FrS0hSb2FYTXVaVzUwYVhScFpYTXViR2wwWlhKaGJDa2dmSHhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0pDaDBhR2x6TG1WdWRHbDBhV1Z6TG1acFpXeGtLU0I4ZkZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWtLSFJvYVhNdVpXNTBhWFJwWlhNdWRtRnlhV0ZpYkdVcElIeDhYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNRb2RHaHBjeTVsYm5ScGRHbGxjeTUxY213cElIeDhYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNRb2RHaHBjeTVsYm5ScGRHbGxjeTVyWlhsM2IzSmtLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMHNYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJRUVnVW5Wc1pTQjBaWEp0YVc1aGRHOXlMaUJPYjNSbElIUm9ZWFFnZDJVZ2RYTmxJR0J3WldWcktDbGdJSFJ2SUdOb1pXTnJJR1p2Y2lBbmZTY3NYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5QmlaV05oZFhObElIUm9aU0JnWW14dlkydGdJSEoxYkdVZ2QybHNiQ0JpWlNCbGVIQmxZM1JwYm1jZ2FYUXNJR0oxZENCM1pTQnpkR2xzYkNCdVpXVmtJSFJ2SUcxaGEyVWdjM1Z5WlZ4dUlDQWdJQ0FnSUNBZ0lDQWdMeThnYVhRbmN5QjBhR1Z5WlN3Z2FXWWdKenNuSUhkaGN5QnZiVzFwZEhSbFpDNWNiaUFnSUNBZ0lDQWdJQ0FnSUdWdVpEb2dablZ1WTNScGIyNG9LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJQ1FvSnpzbktTQjhmQ0J3WldWcktDZDlKeWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlMRnh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUJGYkdWdFpXNTBjeUJoY21VZ2RHaGxJR0oxYVd4a2FXNW5JR0pzYjJOcmN5Qm1iM0lnVTJWc1pXTjBiM0p6TGlCVWFHVjVJR052Ym5OcGMzUWdiMlpjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJR0Z1SUdWc1pXMWxiblFnYm1GdFpTd2djM1ZqYUNCaGN5QmhJSFJoWnlCaElHTnNZWE56TENCdmNpQmdLbUF1WEc0Z0lDQWdJQ0FnSUNBZ0lDQmxiR1Z0Wlc1ME9pQm1kVzVqZEdsdmJpZ3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ1pTQTlJQ1FvTDE0b1B6cGJMaU5kVzF4Y2QxeGNMVjByZkZ4Y0tueE5ZWEFwTHlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR1VwSUhKbGRIVnliaUJ1WlhjZ2RISmxaUzVGYkdWdFpXNTBLR1VwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmU3hjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdMeThnUVhSMFlXTm9iV1Z1ZEhNZ1lXeHNiM2NnWVdSa2FXNW5JRzExYkhScGNHeGxJR3hwYm1WekxDQndiMng1WjI5dWN5QmxkR011SUhSdklHRnVYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5QnZZbXBsWTNRdUlGUm9aWEpsSUdOaGJpQnZibXg1SUdKbElHOXVaU0JoZEhSaFkyaHRaVzUwSUhCbGNpQnpaV3hsWTNSdmNpNWNiaUFnSUNBZ0lDQWdJQ0FnSUdGMGRHRmphRzFsYm5RNklHWjFibU4wYVc5dUtDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCeklEMGdKQ2d2WGpvNktGdGNYSGRjWEMxZEt5Zy9PbHhjTDF0Y1hIZGNYQzFkS3lrcUtTOHBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoektTQnlaWFIxY200Z2Mxc3hYVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMHNYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJRk5sYkdWamRHOXljeUJoY21VZ2JXRmtaU0J2ZFhRZ2IyWWdiMjVsSUc5eUlHMXZjbVVnUld4bGJXVnVkSE1zSUhObFpTQmhZbTkyWlM1Y2JpQWdJQ0FnSUNBZ0lDQWdJSE5sYkdWamRHOXlPaUJtZFc1amRHbHZiaWdwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllYSWdZU3dnWVhSMFlXTm9iV1Z1ZEN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaU3dnWld4bGJXVnVkSE1nUFNCYlhTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWml3Z1ptbHNkR1Z5Y3lBOUlHNWxkeUIwY21WbExrWnBiSFJsY25ObGRDZ3BMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCNkxDQjZiMjl0Y3lBOUlGdGRMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbWNtRnRaVjl2Wm1aelpYUWdQU0IwY21WbExrWnlZVzFsVDJabWMyVjBMbTV2Ym1VN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE5sWjIxbGJuUnpJRDBnTUN3Z1kyOXVaR2wwYVc5dWN5QTlJREE3WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCM2FHbHNaU0FvWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FvWlNBOUlDUW9kR2hwY3k1bGJHVnRaVzUwS1NrZ2ZIeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDaDZJRDBnSkNoMGFHbHpMbnB2YjIwcEtTQjhmRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdLR1p2SUQwZ0pDaDBhR2x6TG1aeVlXMWxYMjltWm5ObGRDa3BJSHg4WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FvWmlBOUlDUW9kR2hwY3k1bWFXeDBaWElwS1NCOGZGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0tHRWdQU0FrS0hSb2FYTXVZWFIwWVdOb2JXVnVkQ2twWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCelpXZHRaVzUwY3lzck8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1pTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaV3hsYldWdWRITXVjSFZ6YUNobEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlNCbGJITmxJR2xtSUNoNktTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjZiMjl0Y3k1d2RYTm9LSG9wTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTI5dVpHbDBhVzl1Y3lzck8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdhV1lnS0dadktTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm1jbUZ0WlY5dlptWnpaWFFnUFNCbWJ6dGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZibVJwZEdsdmJuTXJLenRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTQmxiSE5sSUdsbUlDaG1LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ1pYSnlJRDBnWm1sc2RHVnljeTVoWkdRb1ppazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvWlhKeUtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdoeWIzY2diV0ZyWlVWeWNtOXlLSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiV1Z6YzJGblpUb2daWEp5TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwYm1SbGVEb2dhU0F0SURGY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR052Ym1ScGRHbHZibk1yS3p0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU0JsYkhObElHbG1JQ2hoZEhSaFkyaHRaVzUwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFISnZkeUJ0WVd0bFJYSnliM0lvZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHMWxjM05oWjJVNklDZEZibU52ZFc1MFpYSmxaQ0J6WldOdmJtUWdZWFIwWVdOb2JXVnVkQ0J1WVcxbExpY3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVc1a1pYZzZJR2tnTFNBeFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0YwZEdGamFHMWxiblFnUFNCaE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUdNZ1BTQnBibkIxZEM1amFHRnlRWFFvYVNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoaklEMDlQU0FuZXljZ2ZId2dZeUE5UFQwZ0ozMG5JSHg4SUdNZ1BUMDlJQ2M3SnlCOGZDQmpJRDA5UFNBbkxDY3BJSHNnWW5KbFlXczdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9jMlZuYldWdWRITXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUc1bGR5QjBjbVZsTGxObGJHVmpkRzl5S0dacGJIUmxjbk1zSUhwdmIyMXpMQ0JtY21GdFpWOXZabVp6WlhRc0lHVnNaVzFsYm5SekxDQmhkSFJoWTJodFpXNTBMQ0JqYjI1a2FYUnBiMjV6TENCdFpXMXZLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlMRnh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQm1hV3gwWlhJNklHWjFibU4wYVc5dUtDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE5oZG1Vb0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZWElnYTJWNUxDQnZjQ3dnZG1Gc08xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2doSUNRb0oxc25LU2tnY21WMGRYSnVPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoclpYa2dQU0FrS0M5ZVcyRXRla0V0V2pBdE9WeGNMVjlkS3k4cElIeDhYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNRb2RHaHBjeTVsYm5ScGRHbGxjeTV4ZFc5MFpXUXBJSHg4WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDUW9kR2hwY3k1bGJuUnBkR2xsY3k1MllYSnBZV0pzWlNrZ2ZIeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSkNoMGFHbHpMbVZ1ZEdsMGFXVnpMbXRsZVhkdmNtUXBJSHg4WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDUW9kR2hwY3k1bGJuUnBkR2xsY3k1bWFXVnNaQ2twSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeThnVkU5RVR6b2djbVZ0YjNabElHRjBJREV1TUM0d1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoclpYa2dhVzV6ZEdGdVkyVnZaaUIwY21WbExsRjFiM1JsWkNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2EyVjVJRDBnYm1WM0lIUnlaV1V1Um1sbGJHUW9hMlY1TG5SdlUzUnlhVzVuS0NrcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2dvYjNBZ1BTQWtLSFJvYVhNdVpXNTBhWFJwWlhNdVkyOXRjR0Z5YVhOdmJpa3BJQ1ltWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FvZG1Gc0lEMGdKQ2gwYUdsekxtVnVkR2wwYVdWekxuRjFiM1JsWkNrZ2ZIeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSkNoMGFHbHpMbVZ1ZEdsMGFXVnpMblpoY21saFlteGxLU0I4ZkZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWtLSFJvYVhNdVpXNTBhWFJwWlhNdVpHbHRaVzV6YVc5dUtTQjhmRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBa0tIUm9hWE11Wlc1MGFYUnBaWE11YTJWNWQyOXlaQ2tnZkh4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdKQ2gwYUdsekxtVnVkR2wwYVdWekxtWnBaV3hrS1NrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2doSUNRb0oxMG5LU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9jbTkzSUcxaGEyVkZjbkp2Y2loN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUcxbGMzTmhaMlU2SUNkTmFYTnphVzVuSUdOc2IzTnBibWNnWFNCdlppQm1hV3gwWlhJdUp5eGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXNWtaWGc2SUcxbGJXOGdMU0F4WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvSVd0bGVTNXBjeWtnYTJWNUlEMGdibVYzSUhSeVpXVXVSbWxsYkdRb2EyVjVLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQnVaWGNnZEhKbFpTNUdhV3gwWlhJb2EyVjVMQ0J2Y0N3Z2RtRnNMQ0J0WlcxdkxDQmxibll1Wm1sc1pXNWhiV1VwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTeGNibHh1SUNBZ0lDQWdJQ0FnSUNBZ1puSmhiV1ZmYjJabWMyVjBPaUJtZFc1amRHbHZiaWdwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCellYWmxLQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlHOXdMQ0IyWVd3N1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLQ1FvTDE1Y1hGdGNYSE1xWm5KaGJXVXRiMlptYzJWMEwyY3BJQ1ltWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDaHZjQ0E5SUNRb2RHaHBjeTVsYm5ScGRHbGxjeTVqYjIxd1lYSnBjMjl1S1NrZ0ppWmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnS0haaGJDQTlJQ1FvTDE1Y1hHUXJMeWtwSUNZbVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ1FvSjEwbktTa2dJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQjBjbVZsTGtaeVlXMWxUMlptYzJWMEtHOXdMQ0IyWVd3c0lHMWxiVzhwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJSDBzWEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJSHB2YjIwNklHWjFibU4wYVc5dUtDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE5oZG1Vb0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZWElnYjNBc0lIWmhiRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb0pDZ3ZYbHhjVzF4Y2N5cDZiMjl0TDJjcElDWW1YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNodmNDQTlJQ1FvZEdocGN5NWxiblJwZEdsbGN5NWpiMjF3WVhKcGMyOXVLU2tnSmlaY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdLSFpoYkNBOUlDUW9kR2hwY3k1bGJuUnBkR2xsY3k1MllYSnBZV0pzWlNrZ2ZId2dKQ2gwYUdsekxtVnVkR2wwYVdWekxtUnBiV1Z1YzJsdmJpa3BJQ1ltSUNRb0oxMG5LU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJRzVsZHlCMGNtVmxMbHB2YjIwb2IzQXNJSFpoYkN3Z2JXVnRieWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5OGdZbUZqYTNSeVlXTnJYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGMzUnZjbVVvS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5TEZ4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCVWFHVWdZR0pzYjJOcllDQnlkV3hsSUdseklIVnpaV1FnWW5rZ1lISjFiR1Z6WlhSZ1hHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCSmRDZHpJR0VnZDNKaGNIQmxjaUJoY205MWJtUWdkR2hsSUdCd2NtbHRZWEo1WUNCeWRXeGxMQ0IzYVhSb0lHRmtaR1ZrSUdCN2ZXQXVYRzRnSUNBZ0lDQWdJQ0FnSUNCaWJHOWphem9nWm5WdVkzUnBiMjRvS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJR052Ym5SbGJuUTdYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb0pDZ25leWNwSUNZbUlDaGpiMjUwWlc1MElEMGdKQ2gwYUdsekxuQnlhVzFoY25rcEtTQW1KaUFrS0NkOUp5a3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUdOdmJuUmxiblE3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdmU3hjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdMeThnWkdsMkxDQXVZMnhoYzNNc0lHSnZaSGtnUGlCd0lIc3VMaTU5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlkV3hsYzJWME9pQm1kVzVqZEdsdmJpZ3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ2MyVnNaV04wYjNKeklEMGdXMTBzSUhNc0lHWXNJR3dzSUhKMWJHVnpMQ0JtYVd4MFpYSnpJRDBnVzEwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MyRjJaU2dwTzF4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2QyaHBiR1VnS0hNZ1BTQWtLSFJvYVhNdWMyVnNaV04wYjNJcEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhObGJHVmpkRzl5Y3k1d2RYTm9LSE1wTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjNhR2xzWlNBb0pDaDBhR2x6TG1OdmJXMWxiblFwS1NCN2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb0lTQWtLQ2NzSnlrcElIc2dZbkpsWVdzN0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZDJocGJHVWdLQ1FvZEdocGN5NWpiMjF0Wlc1MEtTa2dlMzFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tITXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2QyaHBiR1VnS0NRb2RHaHBjeTVqYjIxdFpXNTBLU2tnZTMxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYzJWc1pXTjBiM0p6TG14bGJtZDBhQ0ErSURBZ0ppWWdLSEoxYkdWeklEMGdKQ2gwYUdsekxtSnNiMk5yS1NrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tITmxiR1ZqZEc5eWN5NXNaVzVuZEdnZ1BUMDlJREVnSmlaY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhObGJHVmpkRzl5YzFzd1hTNWxiR1Z0Wlc1MGN5NXNaVzVuZEdnZ0ppWmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITmxiR1ZqZEc5eWMxc3dYUzVsYkdWdFpXNTBjMXN3WFM1MllXeDFaU0E5UFQwZ0owMWhjQ2NwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGNpQnljeUE5SUc1bGR5QjBjbVZsTGxKMWJHVnpaWFFvYzJWc1pXTjBiM0p6TENCeWRXeGxjeWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5Y3k1cGMwMWhjQ0E5SUhSeWRXVTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2NuTTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHNWxkeUIwY21WbExsSjFiR1Z6WlhRb2MyVnNaV04wYjNKekxDQnlkV3hsY3lrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeThnUW1GamEzUnlZV05yWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxjM1J2Y21Vb0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNCOUxGeHVYRzRnSUNBZ0lDQWdJQ0FnSUNCeWRXeGxPaUJtZFc1amRHbHZiaWdwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllYSWdibUZ0WlN3Z2RtRnNkV1VzSUdNZ1BTQnBibkIxZEM1amFHRnlRWFFvYVNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MyRjJaU2dwTzF4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR01nUFQwOUlDY3VKeUI4ZkNCaklEMDlQU0FuSXljcElIc2djbVYwZFhKdU95QjlYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2JtRnRaU0E5SUNRb2RHaHBjeTUyWVhKcFlXSnNaU2tnZkh3Z0pDaDBhR2x6TG5CeWIzQmxjblI1S1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IyWVd4MVpTQTlJQ1FvZEdocGN5NTJZV3gxWlNrN1hHNWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIWmhiSFZsSUNZbUlDUW9kR2hwY3k1bGJtUXBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdibVYzSUhSeVpXVXVVblZzWlNodVlXMWxMQ0IyWVd4MVpTd2diV1Z0Ynl3Z1pXNTJMbVpwYkdWdVlXMWxLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdaMWNuUm9aWE4wSUQwZ2FUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxjM1J2Y21Vb0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJSDBzWEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJR1p2Ym5RNklHWjFibU4wYVc5dUtDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCMllXeDFaU0E5SUZ0ZExDQmxlSEJ5WlhOemFXOXVJRDBnVzEwc0lIZGxhV2RvZEN3Z1ptOXVkQ3dnWlR0Y2JseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIZG9hV3hsSUNobElEMGdKQ2gwYUdsekxtVnVkR2wwZVNrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWlhod2NtVnpjMmx2Ymk1d2RYTm9LR1VwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhiSFZsTG5CMWMyZ29ibVYzSUhSeVpXVXVSWGh3Y21WemMybHZiaWhsZUhCeVpYTnphVzl1S1NrN1hHNWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvSkNnbkxDY3BLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIZG9hV3hsSUNobElEMGdKQ2gwYUdsekxtVjRjSEpsYzNOcGIyNHBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IyWVd4MVpTNXdkWE5vS0dVcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLQ0VnSkNnbkxDY3BLU0I3SUdKeVpXRnJPeUI5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHNWxkeUIwY21WbExsWmhiSFZsS0haaGJIVmxLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMHNYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJRUVnVm1Gc2RXVWdhWE1nWVNCamIyMXRZUzFrWld4cGJXbDBaV1FnYkdsemRDQnZaaUJGZUhCeVpYTnphVzl1YzF4dUlDQWdJQ0FnSUNBZ0lDQWdMeThnU1c0Z1lTQlNkV3hsTENCaElGWmhiSFZsSUhKbGNISmxjMlZ1ZEhNZ1pYWmxjbmwwYUdsdVp5QmhablJsY2lCMGFHVWdZRHBnTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdMeThnWVc1a0lHSmxabTl5WlNCMGFHVWdZRHRnTGx4dUlDQWdJQ0FnSUNBZ0lDQWdkbUZzZFdVNklHWjFibU4wYVc5dUtDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCbExDQmxlSEJ5WlhOemFXOXVjeUE5SUZ0ZE8xeHVYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkMmhwYkdVZ0tHVWdQU0FrS0hSb2FYTXVaWGh3Y21WemMybHZiaWtwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaWGh3Y21WemMybHZibk11Y0hWemFDaGxLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLQ0VnSkNnbkxDY3BLU0I3SUdKeVpXRnJPeUI5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR1Y0Y0hKbGMzTnBiMjV6TG14bGJtZDBhQ0ErSURFcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJRzVsZHlCMGNtVmxMbFpoYkhWbEtHVjRjSEpsYzNOcGIyNXpMbTFoY0NobWRXNWpkR2x2YmlobEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1pTNTJZV3gxWlZzd1hUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlNrcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMGdaV3h6WlNCcFppQW9aWGh3Y21WemMybHZibk11YkdWdVozUm9JRDA5UFNBeEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJ1WlhjZ2RISmxaUzVXWVd4MVpTaGxlSEJ5WlhOemFXOXVjeWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdmU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJRUVnYzNWaUxXVjRjSEpsYzNOcGIyNHNJR052Ym5SaGFXNWxaQ0JpZVNCd1lYSmxiblJvWlc1emFYTmNiaUFnSUNBZ0lDQWdJQ0FnSUhOMVlqb2dablZ1WTNScGIyNG9LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlHVXNJR1Y0Y0hKbGMzTnBiMjV6SUQwZ1cxMDdYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb0pDZ25LQ2NwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjNhR2xzWlNBb1pTQTlJQ1FvZEdocGN5NWxlSEJ5WlhOemFXOXVLU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1Y0Y0hKbGMzTnBiMjV6TG5CMWMyZ29aU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0NFZ0pDZ25MQ2NwS1NCN0lHSnlaV0ZyT3lCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FrS0NjcEp5azdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHVjRjSEpsYzNOcGIyNXpMbXhsYm1kMGFDQStJREVwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHNWxkeUIwY21WbExsWmhiSFZsS0dWNGNISmxjM05wYjI1ekxtMWhjQ2htZFc1amRHbHZiaWhsS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnWlM1MllXeDFaVnN3WFR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU2twTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0JwWmlBb1pYaHdjbVZ6YzJsdmJuTXViR1Z1WjNSb0lEMDlQU0F4S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQnVaWGNnZEhKbFpTNVdZV3gxWlNobGVIQnlaWE56YVc5dWN5azdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTeGNiaUFnSUNBZ0lDQWdJQ0FnSUM4dklGUm9hWE1nYVhNZ1lTQnRhWE51YjIxbGNpQmlaV05oZFhObElHbDBJR0ZqZEhWaGJHeDVJR2hoYm1Sc1pYTWdiWFZzZEdsd2JHbGpZWFJwYjI1Y2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUdGdVpDQmthWFpwYzJsdmJpNWNiaUFnSUNBZ0lDQWdJQ0FnSUcxMWJIUnBjR3hwWTJGMGFXOXVPaUJtZFc1amRHbHZiaWdwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllYSWdiU3dnWVN3Z2IzQXNJRzl3WlhKaGRHbHZianRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2JTQTlJQ1FvZEdocGN5NXZjR1Z5WVc1a0tTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCM2FHbHNaU0FvS0c5d0lEMGdLQ1FvSnk4bktTQjhmQ0FrS0NjcUp5a2dmSHdnSkNnbkpTY3BLU2tnSmlZZ0tHRWdQU0FrS0hSb2FYTXViM0JsY21GdVpDa3BLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J2Y0dWeVlYUnBiMjRnUFNCdVpYY2dkSEpsWlM1UGNHVnlZWFJwYjI0b2IzQXNJRnR2Y0dWeVlYUnBiMjRnZkh3Z2JTd2dZVjBzSUcxbGJXOHBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQnZjR1Z5WVhScGIyNGdmSHdnYlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdZV1JrYVhScGIyNDZJR1oxYm1OMGFXOXVLQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGNpQnRMQ0JoTENCdmNDd2diM0JsY21GMGFXOXVPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNodElEMGdKQ2gwYUdsekxtMTFiSFJwY0d4cFkyRjBhVzl1S1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IzYUdsc1pTQW9LRzl3SUQwZ0pDZ3ZYbHN0SzExY1hITXJMeWtnZkh3Z0tHbHVjSFYwTG1Ob1lYSkJkQ2hwSUMwZ01Ta2dJVDBnSnlBbklDWW1JQ2drS0Njckp5a2dmSHdnSkNnbkxTY3BLU2twSUNZbVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQW9ZU0E5SUNRb2RHaHBjeTV0ZFd4MGFYQnNhV05oZEdsdmJpa3BLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J2Y0dWeVlYUnBiMjRnUFNCdVpYY2dkSEpsWlM1UGNHVnlZWFJwYjI0b2IzQXNJRnR2Y0dWeVlYUnBiMjRnZkh3Z2JTd2dZVjBzSUcxbGJXOHBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQnZjR1Z5WVhScGIyNGdmSHdnYlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5TEZ4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCQmJpQnZjR1Z5WVc1a0lHbHpJR0Z1ZVhSb2FXNW5JSFJvWVhRZ1kyRnVJR0psSUhCaGNuUWdiMllnWVc0Z2IzQmxjbUYwYVc5dUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z2MzVmphQ0JoY3lCaElFTnZiRzl5TENCdmNpQmhJRlpoY21saFlteGxYRzRnSUNBZ0lDQWdJQ0FnSUNCdmNHVnlZVzVrT2lCbWRXNWpkR2x2YmlncElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z0pDaDBhR2x6TG5OMVlpa2dmSHdnSkNoMGFHbHpMbVZ1ZEdsMGVTazdYRzRnSUNBZ0lDQWdJQ0FnSUNCOUxGeHVYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5QkZlSEJ5WlhOemFXOXVjeUJsYVhSb1pYSWdjbVZ3Y21WelpXNTBJRzFoZEdobGJXRjBhV05oYkNCdmNHVnlZWFJwYjI1ekxGeHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z2IzSWdkMmhwZEdVdGMzQmhZMlVnWkdWc2FXMXBkR1ZrSUVWdWRHbDBhV1Z6TGlBZ1FIWmhjaUFxSURKY2JpQWdJQ0FnSUNBZ0lDQWdJR1Y0Y0hKbGMzTnBiMjQ2SUdaMWJtTjBhVzl1S0NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJsTENCa1pXeHBiU3dnWlc1MGFYUnBaWE1nUFNCYlhTd2daRHRjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhkb2FXeGxJQ2hsSUQwZ0pDaDBhR2x6TG1Ga1pHbDBhVzl1S1NCOGZDQWtLSFJvYVhNdVpXNTBhWFI1S1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JsYm5ScGRHbGxjeTV3ZFhOb0tHVXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaGxiblJwZEdsbGN5NXNaVzVuZEdnZ1BpQXdLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCdVpYY2dkSEpsWlM1RmVIQnlaWE56YVc5dUtHVnVkR2wwYVdWektUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNCOUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnY0hKdmNHVnlkSGs2SUdaMWJtTjBhVzl1S0NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJ1WVcxbElEMGdKQ2d2WGlnb1cyRXRlbDFiTFdFdGVsOHdMVGxkS2x4Y0x5ay9YRndxUHkwL1d5MWhMWHBmTUMwNVhTc3BYRnh6S2pvdktUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYm1GdFpTa2djbVYwZFhKdUlHNWhiV1ZiTVYwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5TzF4dUlDQWdJSEpsZEhWeWJpQndZWEp6WlhJN1hHNTlPMXh1WEc1Y2JseHVMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZYRzR2THlCWFJVSlFRVU5MSUVaUFQxUkZVbHh1THk4Z0xpOStMMk5oY25SdkwyeHBZaTlqWVhKMGJ5OXdZWEp6WlhJdWFuTmNiaTh2SUcxdlpIVnNaU0JwWkNBOUlEZ3lYRzR2THlCdGIyUjFiR1VnWTJoMWJtdHpJRDBnTUNKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJJaXdpYzI5MWNtTmxVbTl2ZENJNklpSjlcIik7XG5cbi8qKiovIH0pLFxuLyogODMgKi9cbi8qIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKiBhbGwgZXhwb3J0cyB1c2VkICovXG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9+L2NhcnRvL2xpYi9jYXJ0by9yZW5kZXJlci5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5ldmFsKFwiLyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovKGZ1bmN0aW9uKGdsb2JhbCkge3ZhciBfID0gZ2xvYmFsLl8gfHwgX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgdW5kZXJzY29yZSAqLyA0KTtcXG52YXIgY2FydG8gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL2luZGV4ICovIDI3KTtcXG5cXG5jYXJ0by5SZW5kZXJlciA9IGZ1bmN0aW9uIFJlbmRlcmVyKGVudiwgb3B0aW9ucykge1xcbiAgICB0aGlzLmVudiA9IGVudiB8fCB7fTtcXG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcXG4gICAgdGhpcy5vcHRpb25zLm1hcG5pa192ZXJzaW9uID0gdGhpcy5vcHRpb25zLm1hcG5pa192ZXJzaW9uIHx8ICczLjAuMCc7XFxufTtcXG5cXG4vKipcXG4gKiBQcmVwYXJlIGEgTVNTIGRvY3VtZW50IChnaXZlbiBhcyBhbiBzdHJpbmcpIGludG8gYVxcbiAqIFhNTCBTdHlsZSBmcmFnbWVudCAobW9zdGx5IHVzZWZ1bCBmb3IgZGVidWdnaW5nKVxcbiAqXFxuICogQHBhcmFtIHtTdHJpbmd9IGRhdGEgdGhlIG1zcyBjb250ZW50cyBhcyBhIHN0cmluZy5cXG4gKi9cXG5jYXJ0by5SZW5kZXJlci5wcm90b3R5cGUucmVuZGVyTVNTID0gZnVuY3Rpb24gcmVuZGVyKGRhdGEpIHtcXG4gICAgLy8gZWZmZWN0cyBpcyBhIGNvbnRhaW5lciBmb3Igc2lkZS1lZmZlY3RzLCB3aGljaCBjdXJyZW50bHlcXG4gICAgLy8gYXJlIGxpbWl0ZWQgdG8gRm9udFNldHMuXFxuICAgIHZhciBlbnYgPSBfLmRlZmF1bHRzKHRoaXMuZW52LCB7XFxuICAgICAgICBiZW5jaG1hcms6IGZhbHNlLFxcbiAgICAgICAgdmFsaWRhdGlvbl9kYXRhOiBmYWxzZSxcXG4gICAgICAgIGVmZmVjdHM6IFtdXFxuICAgIH0pO1xcblxcbiAgICBpZiAoIWNhcnRvLnRyZWUuUmVmZXJlbmNlLnNldFZlcnNpb24odGhpcy5vcHRpb25zLm1hcG5pa192ZXJzaW9uKSkge1xcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxcXCJDb3VsZCBub3Qgc2V0IG1hcG5payB2ZXJzaW9uIHRvIFxcXCIgKyB0aGlzLm9wdGlvbnMubWFwbmlrX3ZlcnNpb24pO1xcbiAgICB9XFxuXFxuICAgIHZhciBvdXRwdXQgPSBbXTtcXG4gICAgdmFyIHN0eWxlcyA9IFtdO1xcblxcbiAgICBpZiAoZW52LmJlbmNobWFyaykgY29uc29sZS50aW1lKCdQYXJzaW5nIE1TUycpO1xcbiAgICB2YXIgcGFyc2VyID0gKGNhcnRvLlBhcnNlcihlbnYpKS5wYXJzZShkYXRhKTtcXG4gICAgaWYgKGVudi5iZW5jaG1hcmspIGNvbnNvbGUudGltZUVuZCgnUGFyc2luZyBNU1MnKTtcXG5cXG4gICAgaWYgKGVudi5iZW5jaG1hcmspIGNvbnNvbGUudGltZSgnUnVsZSBnZW5lcmF0aW9uJyk7XFxuICAgIHZhciBydWxlX2xpc3QgPSBwYXJzZXIudG9MaXN0KGVudik7XFxuICAgIGlmIChlbnYuYmVuY2htYXJrKSBjb25zb2xlLnRpbWVFbmQoJ1J1bGUgZ2VuZXJhdGlvbicpO1xcblxcbiAgICBpZiAoZW52LmJlbmNobWFyaykgY29uc29sZS50aW1lKCdSdWxlIGluaGVyaXRhbmNlJyk7XFxuICAgIHZhciBydWxlcyA9IGluaGVyaXREZWZpbml0aW9ucyhydWxlX2xpc3QsIGVudik7XFxuICAgIGlmIChlbnYuYmVuY2htYXJrKSBjb25zb2xlLnRpbWVFbmQoJ1J1bGUgaW5oZXJpdGFuY2UnKTtcXG5cXG4gICAgaWYgKGVudi5iZW5jaG1hcmspIGNvbnNvbGUudGltZSgnU3R5bGUgc29ydCcpO1xcbiAgICB2YXIgc29ydGVkID0gc29ydFN0eWxlcyhydWxlcyxlbnYpO1xcbiAgICBpZiAoZW52LmJlbmNobWFyaykgY29uc29sZS50aW1lRW5kKCdTdHlsZSBzb3J0Jyk7XFxuXFxuICAgIGlmIChlbnYuYmVuY2htYXJrKSBjb25zb2xlLnRpbWUoJ1RvdGFsIFN0eWxlIGdlbmVyYXRpb24nKTtcXG4gICAgZm9yICh2YXIgayA9IDAsIHJ1bGUsIHN0eWxlX25hbWU7IGsgPCBzb3J0ZWQubGVuZ3RoOyBrKyspIHtcXG4gICAgICAgIHJ1bGUgPSBzb3J0ZWRba107XFxuICAgICAgICBzdHlsZV9uYW1lID0gJ3N0eWxlJyArIChydWxlLmF0dGFjaG1lbnQgIT09ICdfX2RlZmF1bHRfXycgPyAnLScgKyBydWxlLmF0dGFjaG1lbnQgOiAnJyk7XFxuICAgICAgICBzdHlsZXMucHVzaChzdHlsZV9uYW1lKTtcXG4gICAgICAgIHZhciBiZW5jaF9uYW1lID0gJ1xcXFx0U3R5bGUgXFxcIicrc3R5bGVfbmFtZSsnXFxcIiAoIycraysnKSB0b1hNTCc7XFxuICAgICAgICBpZiAoZW52LmJlbmNobWFyaykgY29uc29sZS50aW1lKGJlbmNoX25hbWUpO1xcbiAgICAgICAgLy8gZW52LmVmZmVjdHMgY2FuIGJlIG1vZGlmaWVkIGJ5IHRoaXMgY2FsbFxcbiAgICAgICAgb3V0cHV0LnB1c2goY2FydG8udHJlZS5TdHlsZVhNTChzdHlsZV9uYW1lLCBydWxlLmF0dGFjaG1lbnQsIHJ1bGUsIGVudikpO1xcbiAgICAgICAgaWYgKGVudi5iZW5jaG1hcmspIGNvbnNvbGUudGltZUVuZChiZW5jaF9uYW1lKTtcXG4gICAgfVxcbiAgICBpZiAoZW52LmJlbmNobWFyaykgY29uc29sZS50aW1lRW5kKCdUb3RhbCBTdHlsZSBnZW5lcmF0aW9uJyk7XFxuICAgIGlmIChlbnYuZXJyb3JzKSB0aHJvdyBlbnYuZXJyb3JzO1xcbiAgICByZXR1cm4gb3V0cHV0LmpvaW4oJ1xcXFxuJyk7XFxufTtcXG5cXG4vKipcXG4gKiBQcmVwYXJlIGEgTU1MIGRvY3VtZW50IChnaXZlbiBhcyBhbiBvYmplY3QpIGludG8gYVxcbiAqIGZ1bGx5LWxvY2FsaXplZCBYTUwgZmlsZSByZWFkeSBmb3IgTWFwbmlrMiBjb25zdW1wdGlvblxcbiAqXFxuICogQHBhcmFtIHtTdHJpbmd9IG0gLSB0aGUgSlNPTiBmaWxlIGFzIGEgc3RyaW5nLlxcbiAqL1xcbmNhcnRvLlJlbmRlcmVyLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIobSkge1xcbiAgICAvLyBlZmZlY3RzIGlzIGEgY29udGFpbmVyIGZvciBzaWRlLWVmZmVjdHMsIHdoaWNoIGN1cnJlbnRseVxcbiAgICAvLyBhcmUgbGltaXRlZCB0byBGb250U2V0cy5cXG4gICAgdmFyIGVudiA9IF8uZGVmYXVsdHModGhpcy5lbnYsIHtcXG4gICAgICAgIGJlbmNobWFyazogZmFsc2UsXFxuICAgICAgICB2YWxpZGF0aW9uX2RhdGE6IGZhbHNlLFxcbiAgICAgICAgZWZmZWN0czogW10sXFxuICAgICAgICBwcGk6IDkwLjcxNFxcbiAgICB9KTtcXG5cXG4gICAgaWYgKCFjYXJ0by50cmVlLlJlZmVyZW5jZS5zZXRWZXJzaW9uKHRoaXMub3B0aW9ucy5tYXBuaWtfdmVyc2lvbikpIHtcXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcXFwiQ291bGQgbm90IHNldCBtYXBuaWsgdmVyc2lvbiB0byBcXFwiICsgdGhpcy5vcHRpb25zLm1hcG5pa192ZXJzaW9uKTtcXG4gICAgfVxcblxcbiAgICB2YXIgb3V0cHV0ID0gW107XFxuXFxuICAgIC8vIFRyYW5zZm9ybSBzdHlsZXNoZWV0cyBpbnRvIGRlZmluaXRpb25zLlxcbiAgICB2YXIgZGVmaW5pdGlvbnMgPSBfLmNoYWluKG0uU3R5bGVzaGVldClcXG4gICAgICAgIC5tYXAoZnVuY3Rpb24ocykge1xcbiAgICAgICAgICAgIGlmICh0eXBlb2YgcyA9PSAnc3RyaW5nJykge1xcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXFxcIlN0eWxlc2hlZXQgb2JqZWN0IGlzIGV4cGVjdGVkIG5vdCBhIHN0cmluZzogJ1xcXCIgKyBzICsgXFxcIidcXFwiKTtcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgICAgLy8gUGFzc2luZyB0aGUgZW52aXJvbm1lbnQgZnJvbSBzdHlsZXNoZWV0IHRvIHN0eWxlc2hlZXQsXFxuICAgICAgICAgICAgLy8gYWxsb3dzIGZyYW1lcyBhbmQgZWZmZWN0cyB0byBiZSBtYWludGFpbmVkLlxcbiAgICAgICAgICAgIGVudiA9IF8uZXh0ZW5kKGVudiwge2ZpbGVuYW1lOnMuaWR9KTtcXG5cXG4gICAgICAgICAgICB2YXIgdGltZSA9ICtuZXcgRGF0ZSgpLFxcbiAgICAgICAgICAgICAgICByb290ID0gKGNhcnRvLlBhcnNlcihlbnYpKS5wYXJzZShzLmRhdGEpO1xcbiAgICAgICAgICAgIGlmIChlbnYuYmVuY2htYXJrKVxcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ1BhcnNpbmcgdGltZTogJyArIChuZXcgRGF0ZSgpIC0gdGltZSkgKyAnbXMnKTtcXG4gICAgICAgICAgICByZXR1cm4gcm9vdC50b0xpc3QoZW52KTtcXG4gICAgICAgIH0pXFxuICAgICAgICAuZmxhdHRlbigpXFxuICAgICAgICAudmFsdWUoKTtcXG5cXG4gICAgZnVuY3Rpb24gYXBwbGllc1RvKG5hbWUsIGNsYXNzSW5kZXgpIHtcXG4gICAgICAgIHJldHVybiBmdW5jdGlvbihkZWZpbml0aW9uKSB7XFxuICAgICAgICAgICAgcmV0dXJuIGRlZmluaXRpb24uYXBwbGllc1RvKGwubmFtZSwgY2xhc3NJbmRleCk7XFxuICAgICAgICB9O1xcbiAgICB9XFxuXFxuICAgIC8vIEl0ZXJhdGUgdGhyb3VnaCBsYXllcnMgYW5kIGNyZWF0ZSBzdHlsZXMgY3VzdG9tLWJ1aWx0XFxuICAgIC8vIGZvciBlYWNoIG9mIHRoZW0sIGFuZCBhcHBseSB0aG9zZSBzdHlsZXMgdG8gdGhlIGxheWVycy5cXG4gICAgdmFyIHN0eWxlcywgbCwgY2xhc3NJbmRleCwgcnVsZXMsIHNvcnRlZCwgbWF0Y2hpbmc7XFxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbS5MYXllci5sZW5ndGg7IGkrKykge1xcbiAgICAgICAgbCA9IG0uTGF5ZXJbaV07XFxuICAgICAgICBzdHlsZXMgPSBbXTtcXG4gICAgICAgIGNsYXNzSW5kZXggPSB7fTtcXG5cXG4gICAgICAgIGlmIChlbnYuYmVuY2htYXJrKSBjb25zb2xlLndhcm4oJ3Byb2Nlc3NpbmcgbGF5ZXI6ICcgKyBsLmlkKTtcXG4gICAgICAgIC8vIENsYXNzZXMgYXJlIGdpdmVuIGFzIHNwYWNlLXNlcGFyYXRlZCBhbHBoYW51bWVyaWMgc3RyaW5ncy5cXG4gICAgICAgIHZhciBjbGFzc2VzID0gKGxbJ2NsYXNzJ10gfHwgJycpLnNwbGl0KC9cXFxccysvZyk7XFxuICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGNsYXNzZXMubGVuZ3RoOyBqKyspIHtcXG4gICAgICAgICAgICBjbGFzc0luZGV4W2NsYXNzZXNbal1dID0gdHJ1ZTtcXG4gICAgICAgIH1cXG4gICAgICAgIG1hdGNoaW5nID0gZGVmaW5pdGlvbnMuZmlsdGVyKGFwcGxpZXNUbyhsLm5hbWUsIGNsYXNzSW5kZXgpKTtcXG4gICAgICAgIHJ1bGVzID0gaW5oZXJpdERlZmluaXRpb25zKG1hdGNoaW5nLCBlbnYpO1xcbiAgICAgICAgc29ydGVkID0gc29ydFN0eWxlcyhydWxlcywgZW52KTtcXG5cXG4gICAgICAgIGZvciAodmFyIGsgPSAwLCBydWxlLCBzdHlsZV9uYW1lOyBrIDwgc29ydGVkLmxlbmd0aDsgaysrKSB7XFxuICAgICAgICAgICAgcnVsZSA9IHNvcnRlZFtrXTtcXG4gICAgICAgICAgICBzdHlsZV9uYW1lID0gbC5uYW1lICsgKHJ1bGUuYXR0YWNobWVudCAhPT0gJ19fZGVmYXVsdF9fJyA/ICctJyArIHJ1bGUuYXR0YWNobWVudCA6ICcnKTtcXG5cXG4gICAgICAgICAgICAvLyBlbnYuZWZmZWN0cyBjYW4gYmUgbW9kaWZpZWQgYnkgdGhpcyBjYWxsXFxuICAgICAgICAgICAgdmFyIHN0eWxlWE1MID0gY2FydG8udHJlZS5TdHlsZVhNTChzdHlsZV9uYW1lLCBydWxlLmF0dGFjaG1lbnQsIHJ1bGUsIGVudik7XFxuXFxuICAgICAgICAgICAgaWYgKHN0eWxlWE1MKSB7XFxuICAgICAgICAgICAgICAgIG91dHB1dC5wdXNoKHN0eWxlWE1MKTtcXG4gICAgICAgICAgICAgICAgc3R5bGVzLnB1c2goc3R5bGVfbmFtZSk7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgfVxcblxcbiAgICAgICAgb3V0cHV0LnB1c2goY2FydG8udHJlZS5MYXllclhNTChsLCBzdHlsZXMpKTtcXG4gICAgfVxcblxcbiAgICBvdXRwdXQudW5zaGlmdChlbnYuZWZmZWN0cy5tYXAoZnVuY3Rpb24oZSkge1xcbiAgICAgICAgcmV0dXJuIGUudG9YTUwoZW52KTtcXG4gICAgfSkuam9pbignXFxcXG4nKSk7XFxuXFxuICAgIHZhciBtYXBfcHJvcGVydGllcyA9IGdldE1hcFByb3BlcnRpZXMobSwgZGVmaW5pdGlvbnMsIGVudik7XFxuXFxuICAgIC8vIEV4aXQgb24gZXJyb3JzLlxcbiAgICBpZiAoZW52LmVycm9ycykgdGhyb3cgZW52LmVycm9ycztcXG5cXG4gICAgLy8gUGFzcyBUaWxlSlNPTiBhbmQgb3RoZXIgY3VzdG9tIHBhcmFtZXRlcnMgdGhyb3VnaCB0byBNYXBuaWsgWE1MLlxcbiAgICB2YXIgcGFyYW1ldGVycyA9IF8ucmVkdWNlKG0sIGZ1bmN0aW9uKG1lbW8sIHYsIGspIHtcXG4gICAgICAgIGlmICghdiAmJiB2ICE9PSAwKSByZXR1cm4gbWVtbztcXG5cXG4gICAgICAgIHN3aXRjaCAoaykge1xcbiAgICAgICAgLy8gS25vd24gc2tpcHBhYmxlIHByb3BlcnRpZXMuXFxuICAgICAgICBjYXNlICdzcnMnOlxcbiAgICAgICAgY2FzZSAnTGF5ZXInOlxcbiAgICAgICAgY2FzZSAnU3R5bGVzaGVldCc6XFxuICAgICAgICAgICAgYnJlYWs7XFxuICAgICAgICAvLyBOb24gVVJMLWJvdW5kIFRpbGVKU09OIHByb3BlcnRpZXMuXFxuICAgICAgICBjYXNlICdib3VuZHMnOlxcbiAgICAgICAgY2FzZSAnY2VudGVyJzpcXG4gICAgICAgIGNhc2UgJ21pbnpvb20nOlxcbiAgICAgICAgY2FzZSAnbWF4em9vbSc6XFxuICAgICAgICBjYXNlICd2ZXJzaW9uJzpcXG4gICAgICAgICAgICBtZW1vLnB1c2goJyAgPFBhcmFtZXRlciBuYW1lPVxcXCInICsgayArICdcXFwiPicgKyB2ICsgJzwvUGFyYW1ldGVyPicpO1xcbiAgICAgICAgICAgIGJyZWFrO1xcbiAgICAgICAgLy8gUHJvcGVydGllcyB0aGF0IHJlcXVpcmUgQ0RBVEEuXFxuICAgICAgICBjYXNlICduYW1lJzpcXG4gICAgICAgIGNhc2UgJ2Rlc2NyaXB0aW9uJzpcXG4gICAgICAgIGNhc2UgJ2xlZ2VuZCc6XFxuICAgICAgICBjYXNlICdhdHRyaWJ1dGlvbic6XFxuICAgICAgICBjYXNlICd0ZW1wbGF0ZSc6XFxuICAgICAgICAgICAgbWVtby5wdXNoKCcgIDxQYXJhbWV0ZXIgbmFtZT1cXFwiJyArIGsgKyAnXFxcIj48IVtDREFUQVsnICsgdiArICddXT48L1BhcmFtZXRlcj4nKTtcXG4gICAgICAgICAgICBicmVhaztcXG4gICAgICAgIC8vIE1hcG5payBpbWFnZSBmb3JtYXQuXFxuICAgICAgICBjYXNlICdmb3JtYXQnOlxcbiAgICAgICAgICAgIG1lbW8ucHVzaCgnICA8UGFyYW1ldGVyIG5hbWU9XFxcIicgKyBrICsgJ1xcXCI+JyArIHYgKyAnPC9QYXJhbWV0ZXI+Jyk7XFxuICAgICAgICAgICAgYnJlYWs7XFxuICAgICAgICAvLyBNYXBuaWsgaW50ZXJhY3Rpdml0eSBzZXR0aW5ncy5cXG4gICAgICAgIGNhc2UgJ2ludGVyYWN0aXZpdHknOlxcbiAgICAgICAgICAgIG1lbW8ucHVzaCgnICA8UGFyYW1ldGVyIG5hbWU9XFxcImludGVyYWN0aXZpdHlfbGF5ZXJcXFwiPicgKyB2LmxheWVyICsgJzwvUGFyYW1ldGVyPicpO1xcbiAgICAgICAgICAgIG1lbW8ucHVzaCgnICA8UGFyYW1ldGVyIG5hbWU9XFxcImludGVyYWN0aXZpdHlfZmllbGRzXFxcIj4nICsgdi5maWVsZHMgKyAnPC9QYXJhbWV0ZXI+Jyk7XFxuICAgICAgICAgICAgYnJlYWs7XFxuICAgICAgICAvLyBTdXBwb3J0IGFueSBhZGRpdGlvbmFsIHNjYWxhciBwcm9wZXJ0aWVzLlxcbiAgICAgICAgZGVmYXVsdDpcXG4gICAgICAgICAgICBpZiAoJ3N0cmluZycgPT09IHR5cGVvZiB2KSB7XFxuICAgICAgICAgICAgICAgIG1lbW8ucHVzaCgnICA8UGFyYW1ldGVyIG5hbWU9XFxcIicgKyBrICsgJ1xcXCI+PCFbQ0RBVEFbJyArIHYgKyAnXV0+PC9QYXJhbWV0ZXI+Jyk7XFxuICAgICAgICAgICAgfSBlbHNlIGlmICgnbnVtYmVyJyA9PT0gdHlwZW9mIHYpIHtcXG4gICAgICAgICAgICAgICAgbWVtby5wdXNoKCcgIDxQYXJhbWV0ZXIgbmFtZT1cXFwiJyArIGsgKyAnXFxcIj4nICsgdiArICc8L1BhcmFtZXRlcj4nKTtcXG4gICAgICAgICAgICB9IGVsc2UgaWYgKCdib29sZWFuJyA9PT0gdHlwZW9mIHYpIHtcXG4gICAgICAgICAgICAgICAgbWVtby5wdXNoKCcgIDxQYXJhbWV0ZXIgbmFtZT1cXFwiJyArIGsgKyAnXFxcIj4nICsgdiArICc8L1BhcmFtZXRlcj4nKTtcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgICAgYnJlYWs7XFxuICAgICAgICB9XFxuICAgICAgICByZXR1cm4gbWVtbztcXG4gICAgfSwgW10pO1xcbiAgICBpZiAocGFyYW1ldGVycy5sZW5ndGgpIG91dHB1dC51bnNoaWZ0KFxcbiAgICAgICAgJzxQYXJhbWV0ZXJzPlxcXFxuJyArXFxuICAgICAgICBwYXJhbWV0ZXJzLmpvaW4oJ1xcXFxuJykgK1xcbiAgICAgICAgJ1xcXFxuPC9QYXJhbWV0ZXJzPlxcXFxuJ1xcbiAgICApO1xcblxcbiAgICB2YXIgcHJvcGVydGllcyA9IF8ubWFwKG1hcF9wcm9wZXJ0aWVzLCBmdW5jdGlvbih2KSB7IHJldHVybiAnICcgKyB2OyB9KS5qb2luKCcnKTtcXG5cXG4gICAgb3V0cHV0LnVuc2hpZnQoXFxuICAgICAgICAnPD94bWwgdmVyc2lvbj1cXFwiMS4wXFxcIiAnICtcXG4gICAgICAgICdlbmNvZGluZz1cXFwidXRmLThcXFwiPz5cXFxcbicgK1xcbiAgICAgICAgJzwhRE9DVFlQRSBNYXBbXT5cXFxcbicgK1xcbiAgICAgICAgJzxNYXAnICsgcHJvcGVydGllcyArJz5cXFxcbicpO1xcbiAgICBvdXRwdXQucHVzaCgnPC9NYXA+Jyk7XFxuICAgIHJldHVybiBvdXRwdXQuam9pbignXFxcXG4nKTtcXG59O1xcblxcbi8qKlxcbiAqIFRoaXMgZnVuY3Rpb24gY3VycmVudGx5IG1vZGlmaWVzICdjdXJyZW50J1xcbiAqIEBwYXJhbSB7QXJyYXl9ICBjdXJyZW50ICBjdXJyZW50IGxpc3Qgb2YgcnVsZXNcXG4gKiBAcGFyYW0ge09iamVjdH0gZGVmaW5pdGlvbiBhIERlZmluaXRpb24gb2JqZWN0IHRvIGFkZCB0byB0aGUgcnVsZXNcXG4gKiBAcGFyYW0ge09iamVjdH0gYnlGaWx0ZXIgYW4gb2JqZWN0L2RpY3Rpb25hcnkgb2YgZXhpc3RpbmcgZmlsdGVycy4gVGhpcyBpc1xcbiAqIGFjdHVhbGx5IGtleWVkIGBhdHRhY2htZW50LT5maWx0ZXJgXFxuICogQHBhcmFtIHtPYmplY3R9IGVudiB0aGUgY3VycmVudCBlbnZpcm9ubWVudFxcbiovXFxuZnVuY3Rpb24gYWRkUnVsZXMoY3VycmVudCwgZGVmaW5pdGlvbiwgYnlGaWx0ZXIsIGVudikge1xcbiAgICB2YXIgbmV3RmlsdGVycyA9IGRlZmluaXRpb24uZmlsdGVycyxcXG4gICAgICAgIG5ld1J1bGVzID0gZGVmaW5pdGlvbi5ydWxlcyxcXG4gICAgICAgIHVwZGF0ZWRGaWx0ZXJzLCBjbG9uZSwgcHJldmlvdXM7XFxuXFxuICAgIC8vIFRoZSBjdXJyZW50IGRlZmluaXRpb24gbWlnaHQgaGF2ZSBiZWVuIHNwbGl0IHVwIGludG9cXG4gICAgLy8gbXVsdGlwbGUgZGVmaW5pdGlvbnMgYWxyZWFkeS5cXG4gICAgZm9yICh2YXIgayA9IDA7IGsgPCBjdXJyZW50Lmxlbmd0aDsgaysrKSB7XFxuICAgICAgICB1cGRhdGVkRmlsdGVycyA9IGN1cnJlbnRba10uZmlsdGVycy5jbG9uZVdpdGgobmV3RmlsdGVycyk7XFxuICAgICAgICBpZiAodXBkYXRlZEZpbHRlcnMpIHtcXG4gICAgICAgICAgICBwcmV2aW91cyA9IGJ5RmlsdGVyW3VwZGF0ZWRGaWx0ZXJzXTtcXG4gICAgICAgICAgICBpZiAocHJldmlvdXMpIHtcXG4gICAgICAgICAgICAgICAgLy8gVGhlcmUncyBhbHJlYWR5IGEgZGVmaW5pdGlvbiB3aXRoIHRob3NlIGV4YWN0XFxuICAgICAgICAgICAgICAgIC8vIGZpbHRlcnMuIEFkZCB0aGUgY3VycmVudCBkZWZpbml0aW9ucycgcnVsZXNcXG4gICAgICAgICAgICAgICAgLy8gYW5kIHN0b3AgcHJvY2Vzc2luZyBpdCBhcyB0aGUgZXhpc3RpbmcgcnVsZVxcbiAgICAgICAgICAgICAgICAvLyBoYXMgYWxyZWFkeSBnb25lIGRvd24gdGhlIGluaGVyaXRhbmNlIGNoYWluLlxcbiAgICAgICAgICAgICAgICBwcmV2aW91cy5hZGRSdWxlcyhuZXdSdWxlcyk7XFxuICAgICAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICAgICAgY2xvbmUgPSBjdXJyZW50W2tdLmNsb25lKHVwZGF0ZWRGaWx0ZXJzKTtcXG4gICAgICAgICAgICAgICAgLy8gTWFrZSBzdXJlIHRoYXQgd2UncmUgb25seSBtYWludGFpbmluZyB0aGUgY2xvbmVcXG4gICAgICAgICAgICAgICAgLy8gd2hlbiB3ZSBkaWQgYWN0dWFsbHkgYWRkIHJ1bGVzLiBJZiBub3QsIHRoZXJlJ3NcXG4gICAgICAgICAgICAgICAgLy8gbm8gbmVlZCB0byBrZWVwIHRoZSBjbG9uZSBhcm91bmQuXFxuICAgICAgICAgICAgICAgIGlmIChjbG9uZS5hZGRSdWxlcyhuZXdSdWxlcykpIHtcXG4gICAgICAgICAgICAgICAgICAgIC8vIFdlIGluc2VydGVkIGFuIGVsZW1lbnQgYmVmb3JlIHRoaXMgb25lLCBzbyB3ZSBuZWVkXFxuICAgICAgICAgICAgICAgICAgICAvLyB0byBtYWtlIHN1cmUgdGhhdCBpbiB0aGUgbmV4dCBsb29wIGl0ZXJhdGlvbiwgd2UncmVcXG4gICAgICAgICAgICAgICAgICAgIC8vIG5vdCBwZXJmb3JtaW5nIHRoZSBzYW1lIHRhc2sgZm9yIHRoaXMgZWxlbWVudCBhZ2FpbixcXG4gICAgICAgICAgICAgICAgICAgIC8vIGhlbmNlIHRoZSBrKysuXFxuICAgICAgICAgICAgICAgICAgICBieUZpbHRlclt1cGRhdGVkRmlsdGVyc10gPSBjbG9uZTtcXG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnQuc3BsaWNlKGssIDAsIGNsb25lKTtcXG4gICAgICAgICAgICAgICAgICAgIGsrKztcXG4gICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIH1cXG4gICAgICAgIH0gZWxzZSBpZiAodXBkYXRlZEZpbHRlcnMgPT09IG51bGwpIHtcXG4gICAgICAgICAgICAvLyBpZiB1cGRhdGVkRmlsdGVycyBpcyBudWxsLCB0aGVuIGFkZGluZyB0aGUgZmlsdGVycyBkb2Vzbid0XFxuICAgICAgICAgICAgLy8gaW52YWxpZGF0ZSBvciBzcGxpdCB0aGUgc2VsZWN0b3IsIHNvIHdlIGFkZFJ1bGVzIHRvIHRoZVxcbiAgICAgICAgICAgIC8vIGNvbWJpbmVkIHNlbGVjdG9yXFxuXFxuICAgICAgICAgICAgLy8gRmlsdGVycyBjYW4gYmUgYWRkZWQsIGJ1dCB0aGV5IGRvbid0IGNoYW5nZSB0aGVcXG4gICAgICAgICAgICAvLyBmaWx0ZXJzLiBUaGlzIG1lYW5zIHdlIGRvbid0IGhhdmUgdG8gc3BsaXQgdGhlXFxuICAgICAgICAgICAgLy8gZGVmaW5pdGlvbi5cXG4gICAgICAgICAgICAvL1xcbiAgICAgICAgICAgIC8vIHRoaXMgaXMgY2xvbmVkIGhlcmUgYmVjYXVzZSBvZiBzaGFyZWQgY2xhc3Nlcywgc2VlXFxuICAgICAgICAgICAgLy8gc2hhcmVkY2xhc3MubXNzXFxuICAgICAgICAgICAgY3VycmVudFtrXSA9IGN1cnJlbnRba10uY2xvbmUoKTtcXG4gICAgICAgICAgICBjdXJyZW50W2tdLmFkZFJ1bGVzKG5ld1J1bGVzKTtcXG4gICAgICAgIH1cXG4gICAgICAgIC8vIGlmIHVwZGF0ZWRGZWF0dXJlcyBpcyBmYWxzZSwgdGhlbiB0aGUgZmlsdGVycyBzcGxpdCB0aGUgcnVsZSxcXG4gICAgICAgIC8vIHNvIHRoZXkgYXJlbid0IHRoZSBzYW1lIGluaGVyaXRhbmNlIGNoYWluXFxuICAgIH1cXG4gICAgcmV0dXJuIGN1cnJlbnQ7XFxufVxcblxcbi8qKlxcbiAqIEFwcGx5IGluaGVyaXRlZCBzdHlsZXMgZnJvbSB0aGVpciBhbmNlc3RvcnMgdG8gdGhlbS5cXG4gKlxcbiAqIGNhbGxlZCBlaXRoZXIgb25jZSBwZXIgcmVuZGVyIChpbiB0aGUgY2FzZSBvZiBtc3MpIG9yIHBlciBsYXllclxcbiAqIChmb3IgbW1sKVxcbiAqXFxuICogQHBhcmFtIHtPYmplY3R9IGRlZmluaXRpb25zIC0gYSBsaXN0IG9mIGRlZmluaXRpb25zIG9iamVjdHNcXG4gKiAgIHRoYXQgY29udGFpbiAucnVsZXNcXG4gKiBAcGFyYW0ge09iamVjdH0gZW52IC0gdGhlIGVudmlyb25tZW50XFxuICogQHJldHVybiB7QXJyYXk8QXJyYXk+fSBhbiBhcnJheSBvZiBhcnJheXMgaXMgcmV0dXJuZWQsXFxuICogICBpbiB3aGljaCBlYWNoIGFycmF5IHJlZmVycyB0byBhIHNwZWNpZmljIGF0dGFjaG1lbnRcXG4gKi9cXG5mdW5jdGlvbiBpbmhlcml0RGVmaW5pdGlvbnMoZGVmaW5pdGlvbnMsIGVudikge1xcbiAgICB2YXIgaW5oZXJpdFRpbWUgPSArbmV3IERhdGUoKTtcXG4gICAgLy8gZGVmaW5pdGlvbnMgYXJlIG9yZGVyZWQgYnkgc3BlY2lmaWNpdHksXFxuICAgIC8vIGhpZ2ggKGluZGV4IDApIHRvIGxvd1xcbiAgICB2YXIgYnlBdHRhY2htZW50ID0ge30sXFxuICAgICAgICBieUZpbHRlciA9IHt9O1xcbiAgICB2YXIgcmVzdWx0ID0gW107XFxuICAgIHZhciBjdXJyZW50LCBwcmV2aW91cywgYXR0YWNobWVudDtcXG5cXG4gICAgLy8gRXZhbHVhdGUgdGhlIGZpbHRlcnMgc3BlY2lmaWVkIGJ5IGVhY2ggZGVmaW5pdGlvbiB3aXRoIHRoZSBnaXZlblxcbiAgICAvLyBlbnZpcm9ubWVudCB0byBjb3JyZWN0bHkgcmVzb2x2ZSB2YXJpYWJsZSByZWZlcmVuY2VzXFxuICAgIGRlZmluaXRpb25zLmZvckVhY2goZnVuY3Rpb24oZCkge1xcbiAgICAgICAgZC5maWx0ZXJzLmV2KGVudik7XFxuICAgIH0pO1xcblxcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRlZmluaXRpb25zLmxlbmd0aDsgaSsrKSB7XFxuXFxuICAgICAgICBhdHRhY2htZW50ID0gZGVmaW5pdGlvbnNbaV0uYXR0YWNobWVudDtcXG4gICAgICAgIGN1cnJlbnQgPSBbZGVmaW5pdGlvbnNbaV1dO1xcblxcbiAgICAgICAgaWYgKCFieUF0dGFjaG1lbnRbYXR0YWNobWVudF0pIHtcXG4gICAgICAgICAgICBieUF0dGFjaG1lbnRbYXR0YWNobWVudF0gPSBbXTtcXG4gICAgICAgICAgICBieUF0dGFjaG1lbnRbYXR0YWNobWVudF0uYXR0YWNobWVudCA9IGF0dGFjaG1lbnQ7XFxuICAgICAgICAgICAgYnlGaWx0ZXJbYXR0YWNobWVudF0gPSB7fTtcXG4gICAgICAgICAgICByZXN1bHQucHVzaChieUF0dGFjaG1lbnRbYXR0YWNobWVudF0pO1xcbiAgICAgICAgfVxcblxcbiAgICAgICAgLy8gSXRlcmF0ZSBvdmVyIGFsbCBzdWJzZXF1ZW50IHJ1bGVzLlxcbiAgICAgICAgZm9yICh2YXIgaiA9IGkgKyAxOyBqIDwgZGVmaW5pdGlvbnMubGVuZ3RoOyBqKyspIHtcXG4gICAgICAgICAgICBpZiAoZGVmaW5pdGlvbnNbal0uYXR0YWNobWVudCA9PT0gYXR0YWNobWVudCkge1xcbiAgICAgICAgICAgICAgICAvLyBPbmx5IGluaGVyaXQgcnVsZXMgZnJvbSB0aGUgc2FtZSBhdHRhY2htZW50LlxcbiAgICAgICAgICAgICAgICBjdXJyZW50ID0gYWRkUnVsZXMoY3VycmVudCwgZGVmaW5pdGlvbnNbal0sIGJ5RmlsdGVyW2F0dGFjaG1lbnRdLCBlbnYpO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgIH1cXG5cXG4gICAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgY3VycmVudC5sZW5ndGg7IGsrKykge1xcbiAgICAgICAgICAgIGJ5RmlsdGVyW2F0dGFjaG1lbnRdW2N1cnJlbnRba10uZmlsdGVyc10gPSBjdXJyZW50W2tdO1xcbiAgICAgICAgICAgIGJ5QXR0YWNobWVudFthdHRhY2htZW50XS5wdXNoKGN1cnJlbnRba10pO1xcbiAgICAgICAgfVxcbiAgICB9XFxuXFxuICAgIGlmIChlbnYuYmVuY2htYXJrKSBjb25zb2xlLndhcm4oJ0luaGVyaXRhbmNlIHRpbWU6ICcgKyAoKG5ldyBEYXRlKCkgLSBpbmhlcml0VGltZSkpICsgJ21zJyk7XFxuXFxuICAgIHJldHVybiByZXN1bHQ7XFxuXFxufVxcblxcbi8vIFNvcnQgc3R5bGVzIGJ5IHRoZSBtaW5pbXVtIGluZGV4IG9mIHRoZWlyIHJ1bGVzLlxcbi8vIFRoaXMgc29ydHMgYSBzbGljZSBvZiB0aGUgc3R5bGVzLCBzbyBpdCByZXR1cm5zIGEgc29ydGVkXFxuLy8gYXJyYXkgYnV0IGRvZXMgbm90IGNoYW5nZSB0aGUgaW5wdXQuXFxuZnVuY3Rpb24gc29ydFN0eWxlc0luZGV4KGEsIGIpIHsgcmV0dXJuIGIuaW5kZXggLSBhLmluZGV4OyB9XFxuZnVuY3Rpb24gc29ydFN0eWxlcyhzdHlsZXMsIGVudikge1xcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlcy5sZW5ndGg7IGkrKykge1xcbiAgICAgICAgdmFyIHN0eWxlID0gc3R5bGVzW2ldO1xcbiAgICAgICAgc3R5bGUuaW5kZXggPSBJbmZpbml0eTtcXG4gICAgICAgIGZvciAodmFyIGIgPSAwOyBiIDwgc3R5bGUubGVuZ3RoOyBiKyspIHtcXG4gICAgICAgICAgICB2YXIgcnVsZXMgPSBzdHlsZVtiXS5ydWxlcztcXG4gICAgICAgICAgICBmb3IgKHZhciByID0gMDsgciA8IHJ1bGVzLmxlbmd0aDsgcisrKSB7XFxuICAgICAgICAgICAgICAgIHZhciBydWxlID0gcnVsZXNbcl07XFxuICAgICAgICAgICAgICAgIGlmIChydWxlLmluZGV4IDwgc3R5bGUuaW5kZXgpIHtcXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlLmluZGV4ID0gcnVsZS5pbmRleDtcXG4gICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIH1cXG4gICAgICAgIH1cXG4gICAgfVxcblxcbiAgICB2YXIgcmVzdWx0ID0gc3R5bGVzLnNsaWNlKCk7XFxuICAgIHJlc3VsdC5zb3J0KHNvcnRTdHlsZXNJbmRleCk7XFxuICAgIHJldHVybiByZXN1bHQ7XFxufVxcblxcbi8qKlxcbiAqIEZpbmQgYSBydWxlIGxpa2UgTWFwIHsgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjsgfSxcXG4gKiBpZiBhbnksIGFuZCByZXR1cm4gYSBsaXN0IG9mIHByb3BlcnRpZXMgdG8gYmUgaW5zZXJ0ZWRcXG4gKiBpbnRvIHRoZSA8TWFwIGVsZW1lbnQgb2YgdGhlIHJlc3VsdGluZyBYTUwuIFRyYW5zbGF0ZXNcXG4gKiBwcm9wZXJ0aWVzIG9mIHRoZSBtbWwgb2JqZWN0IGF0IGBtYCBkaXJlY3RseSBpbnRvIFhNTFxcbiAqIHByb3BlcnRpZXMuXFxuICpcXG4gKiBAcGFyYW0ge09iamVjdH0gbSB0aGUgbW1sIG9iamVjdC5cXG4gKiBAcGFyYW0ge0FycmF5fSBkZWZpbml0aW9ucyB0aGUgb3V0cHV0IG9mIHRvTGlzdC5cXG4gKiBAcGFyYW0ge09iamVjdH0gZW52XFxuICogQHJldHVybiB7U3RyaW5nfSByZW5kZXJlZCBwcm9wZXJ0aWVzLlxcbiAqL1xcbmZ1bmN0aW9uIGdldE1hcFByb3BlcnRpZXMobSwgZGVmaW5pdGlvbnMsIGVudikge1xcbiAgICB2YXIgcnVsZXMgPSB7fTtcXG4gICAgdmFyIHN5bWJvbGl6ZXJzID0gY2FydG8udHJlZS5SZWZlcmVuY2UuZGF0YS5zeW1ib2xpemVycy5tYXA7XFxuXFxuICAgIF8obSkuZWFjaChmdW5jdGlvbih2YWx1ZSwga2V5KSB7XFxuICAgICAgICBpZiAoa2V5IGluIHN5bWJvbGl6ZXJzKSBydWxlc1trZXldID0ga2V5ICsgJz1cXFwiJyArIHZhbHVlICsgJ1xcXCInO1xcbiAgICB9KTtcXG5cXG4gICAgZGVmaW5pdGlvbnMuZmlsdGVyKGZ1bmN0aW9uKHIpIHtcXG4gICAgICAgIHJldHVybiByLmVsZW1lbnRzLmpvaW4oJycpID09PSAnTWFwJztcXG4gICAgfSkuZm9yRWFjaChmdW5jdGlvbihyKSB7XFxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHIucnVsZXMubGVuZ3RoOyBpKyspIHtcXG4gICAgICAgICAgICB2YXIga2V5ID0gci5ydWxlc1tpXS5uYW1lO1xcbiAgICAgICAgICAgIGlmICghKGtleSBpbiBzeW1ib2xpemVycykpIHtcXG4gICAgICAgICAgICAgICAgZW52LmVycm9yKHtcXG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdSdWxlICcgKyBrZXkgKyAnIG5vdCBhbGxvd2VkIGZvciBNYXAuJyxcXG4gICAgICAgICAgICAgICAgICAgIGluZGV4OiByLnJ1bGVzW2ldLmluZGV4XFxuICAgICAgICAgICAgICAgIH0pO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgICBydWxlc1trZXldID0gci5ydWxlc1tpXS5ldihlbnYpLnRvWE1MKGVudik7XFxuICAgICAgICB9XFxuICAgIH0pO1xcbiAgICByZXR1cm4gcnVsZXM7XFxufVxcblxcbm1vZHVsZS5leHBvcnRzID0gY2FydG87XFxubW9kdWxlLmV4cG9ydHMuYWRkUnVsZXMgPSBhZGRSdWxlcztcXG5tb2R1bGUuZXhwb3J0cy5pbmhlcml0RGVmaW5pdGlvbnMgPSBpbmhlcml0RGVmaW5pdGlvbnM7XFxubW9kdWxlLmV4cG9ydHMuc29ydFN0eWxlcyA9IHNvcnRTdHlsZXM7XFxuXFxuLyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovfS5jYWxsKGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vLi4vLi4vLi4vd2VicGFjay9idWlsZGluL2dsb2JhbC5qcyAqLyAzKSkpLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lPRE11YW5NaUxDSnpiM1Z5WTJWeklqcGJJbmRsWW5CaFkyczZMeTh2TGk5K0wyTmhjblJ2TDJ4cFlpOWpZWEowYnk5eVpXNWtaWEpsY2k1cWN6OWpOV0pqSWwwc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYkluWmhjaUJmSUQwZ1oyeHZZbUZzTGw4Z2ZId2djbVZ4ZFdseVpTZ25kVzVrWlhKelkyOXlaU2NwTzF4dWRtRnlJR05oY25SdklEMGdjbVZ4ZFdseVpTZ25MaTlwYm1SbGVDY3BPMXh1WEc1allYSjBieTVTWlc1a1pYSmxjaUE5SUdaMWJtTjBhVzl1SUZKbGJtUmxjbVZ5S0dWdWRpd2diM0IwYVc5dWN5a2dlMXh1SUNBZ0lIUm9hWE11Wlc1MklEMGdaVzUySUh4OElIdDlPMXh1SUNBZ0lIUm9hWE11YjNCMGFXOXVjeUE5SUc5d2RHbHZibk1nZkh3Z2UzMDdYRzRnSUNBZ2RHaHBjeTV2Y0hScGIyNXpMbTFoY0c1cGExOTJaWEp6YVc5dUlEMGdkR2hwY3k1dmNIUnBiMjV6TG0xaGNHNXBhMTkyWlhKemFXOXVJSHg4SUNjekxqQXVNQ2M3WEc1OU8xeHVYRzR2S2lwY2JpQXFJRkJ5WlhCaGNtVWdZU0JOVTFNZ1pHOWpkVzFsYm5RZ0tHZHBkbVZ1SUdGeklHRnVJSE4wY21sdVp5a2dhVzUwYnlCaFhHNGdLaUJZVFV3Z1UzUjViR1VnWm5KaFoyMWxiblFnS0cxdmMzUnNlU0IxYzJWbWRXd2dabTl5SUdSbFluVm5aMmx1WnlsY2JpQXFYRzRnS2lCQWNHRnlZVzBnZTFOMGNtbHVaMzBnWkdGMFlTQjBhR1VnYlhOeklHTnZiblJsYm5SeklHRnpJR0VnYzNSeWFXNW5MbHh1SUNvdlhHNWpZWEowYnk1U1pXNWtaWEpsY2k1d2NtOTBiM1I1Y0dVdWNtVnVaR1Z5VFZOVElEMGdablZ1WTNScGIyNGdjbVZ1WkdWeUtHUmhkR0VwSUh0Y2JpQWdJQ0F2THlCbFptWmxZM1J6SUdseklHRWdZMjl1ZEdGcGJtVnlJR1p2Y2lCemFXUmxMV1ZtWm1WamRITXNJSGRvYVdOb0lHTjFjbkpsYm5Sc2VWeHVJQ0FnSUM4dklHRnlaU0JzYVcxcGRHVmtJSFJ2SUVadmJuUlRaWFJ6TGx4dUlDQWdJSFpoY2lCbGJuWWdQU0JmTG1SbFptRjFiSFJ6S0hSb2FYTXVaVzUyTENCN1hHNGdJQ0FnSUNBZ0lHSmxibU5vYldGeWF6b2dabUZzYzJVc1hHNGdJQ0FnSUNBZ0lIWmhiR2xrWVhScGIyNWZaR0YwWVRvZ1ptRnNjMlVzWEc0Z0lDQWdJQ0FnSUdWbVptVmpkSE02SUZ0ZFhHNGdJQ0FnZlNrN1hHNWNiaUFnSUNCcFppQW9JV05oY25SdkxuUnlaV1V1VW1WbVpYSmxibU5sTG5ObGRGWmxjbk5wYjI0b2RHaHBjeTV2Y0hScGIyNXpMbTFoY0c1cGExOTJaWEp6YVc5dUtTa2dlMXh1SUNBZ0lDQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9YQ0pEYjNWc1pDQnViM1FnYzJWMElHMWhjRzVwYXlCMlpYSnphVzl1SUhSdklGd2lJQ3NnZEdocGN5NXZjSFJwYjI1ekxtMWhjRzVwYTE5MlpYSnphVzl1S1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0IyWVhJZ2IzVjBjSFYwSUQwZ1cxMDdYRzRnSUNBZ2RtRnlJSE4wZVd4bGN5QTlJRnRkTzF4dVhHNGdJQ0FnYVdZZ0tHVnVkaTVpWlc1amFHMWhjbXNwSUdOdmJuTnZiR1V1ZEdsdFpTZ25VR0Z5YzJsdVp5Qk5VMU1uS1R0Y2JpQWdJQ0IyWVhJZ2NHRnljMlZ5SUQwZ0tHTmhjblJ2TGxCaGNuTmxjaWhsYm5ZcEtTNXdZWEp6WlNoa1lYUmhLVHRjYmlBZ0lDQnBaaUFvWlc1MkxtSmxibU5vYldGeWF5a2dZMjl1YzI5c1pTNTBhVzFsUlc1a0tDZFFZWEp6YVc1bklFMVRVeWNwTzF4dVhHNGdJQ0FnYVdZZ0tHVnVkaTVpWlc1amFHMWhjbXNwSUdOdmJuTnZiR1V1ZEdsdFpTZ25VblZzWlNCblpXNWxjbUYwYVc5dUp5azdYRzRnSUNBZ2RtRnlJSEoxYkdWZmJHbHpkQ0E5SUhCaGNuTmxjaTUwYjB4cGMzUW9aVzUyS1R0Y2JpQWdJQ0JwWmlBb1pXNTJMbUpsYm1Ob2JXRnlheWtnWTI5dWMyOXNaUzUwYVcxbFJXNWtLQ2RTZFd4bElHZGxibVZ5WVhScGIyNG5LVHRjYmx4dUlDQWdJR2xtSUNobGJuWXVZbVZ1WTJodFlYSnJLU0JqYjI1emIyeGxMblJwYldVb0oxSjFiR1VnYVc1b1pYSnBkR0Z1WTJVbktUdGNiaUFnSUNCMllYSWdjblZzWlhNZ1BTQnBibWhsY21sMFJHVm1hVzVwZEdsdmJuTW9jblZzWlY5c2FYTjBMQ0JsYm5ZcE8xeHVJQ0FnSUdsbUlDaGxibll1WW1WdVkyaHRZWEpyS1NCamIyNXpiMnhsTG5ScGJXVkZibVFvSjFKMWJHVWdhVzVvWlhKcGRHRnVZMlVuS1R0Y2JseHVJQ0FnSUdsbUlDaGxibll1WW1WdVkyaHRZWEpyS1NCamIyNXpiMnhsTG5ScGJXVW9KMU4wZVd4bElITnZjblFuS1R0Y2JpQWdJQ0IyWVhJZ2MyOXlkR1ZrSUQwZ2MyOXlkRk4wZVd4bGN5aHlkV3hsY3l4bGJuWXBPMXh1SUNBZ0lHbG1JQ2hsYm5ZdVltVnVZMmh0WVhKcktTQmpiMjV6YjJ4bExuUnBiV1ZGYm1Rb0oxTjBlV3hsSUhOdmNuUW5LVHRjYmx4dUlDQWdJR2xtSUNobGJuWXVZbVZ1WTJodFlYSnJLU0JqYjI1emIyeGxMblJwYldVb0oxUnZkR0ZzSUZOMGVXeGxJR2RsYm1WeVlYUnBiMjRuS1R0Y2JpQWdJQ0JtYjNJZ0tIWmhjaUJySUQwZ01Dd2djblZzWlN3Z2MzUjViR1ZmYm1GdFpUc2dheUE4SUhOdmNuUmxaQzVzWlc1bmRHZzdJR3NyS3lrZ2UxeHVJQ0FnSUNBZ0lDQnlkV3hsSUQwZ2MyOXlkR1ZrVzJ0ZE8xeHVJQ0FnSUNBZ0lDQnpkSGxzWlY5dVlXMWxJRDBnSjNOMGVXeGxKeUFySUNoeWRXeGxMbUYwZEdGamFHMWxiblFnSVQwOUlDZGZYMlJsWm1GMWJIUmZYeWNnUHlBbkxTY2dLeUJ5ZFd4bExtRjBkR0ZqYUcxbGJuUWdPaUFuSnlrN1hHNGdJQ0FnSUNBZ0lITjBlV3hsY3k1d2RYTm9LSE4wZVd4bFgyNWhiV1VwTzF4dUlDQWdJQ0FnSUNCMllYSWdZbVZ1WTJoZmJtRnRaU0E5SUNkY1hIUlRkSGxzWlNCY0lpY3JjM1I1YkdWZmJtRnRaU3NuWENJZ0tDTW5LMnNySnlrZ2RHOVlUVXduTzF4dUlDQWdJQ0FnSUNCcFppQW9aVzUyTG1KbGJtTm9iV0Z5YXlrZ1kyOXVjMjlzWlM1MGFXMWxLR0psYm1Ob1gyNWhiV1VwTzF4dUlDQWdJQ0FnSUNBdkx5Qmxibll1WldabVpXTjBjeUJqWVc0Z1ltVWdiVzlrYVdacFpXUWdZbmtnZEdocGN5QmpZV3hzWEc0Z0lDQWdJQ0FnSUc5MWRIQjFkQzV3ZFhOb0tHTmhjblJ2TG5SeVpXVXVVM1I1YkdWWVRVd29jM1I1YkdWZmJtRnRaU3dnY25Wc1pTNWhkSFJoWTJodFpXNTBMQ0J5ZFd4bExDQmxibllwS1R0Y2JpQWdJQ0FnSUNBZ2FXWWdLR1Z1ZGk1aVpXNWphRzFoY21zcElHTnZibk52YkdVdWRHbHRaVVZ1WkNoaVpXNWphRjl1WVcxbEtUdGNiaUFnSUNCOVhHNGdJQ0FnYVdZZ0tHVnVkaTVpWlc1amFHMWhjbXNwSUdOdmJuTnZiR1V1ZEdsdFpVVnVaQ2duVkc5MFlXd2dVM1I1YkdVZ1oyVnVaWEpoZEdsdmJpY3BPMXh1SUNBZ0lHbG1JQ2hsYm5ZdVpYSnliM0p6S1NCMGFISnZkeUJsYm5ZdVpYSnliM0p6TzF4dUlDQWdJSEpsZEhWeWJpQnZkWFJ3ZFhRdWFtOXBiaWduWEZ4dUp5azdYRzU5TzF4dVhHNHZLaXBjYmlBcUlGQnlaWEJoY21VZ1lTQk5UVXdnWkc5amRXMWxiblFnS0dkcGRtVnVJR0Z6SUdGdUlHOWlhbVZqZENrZ2FXNTBieUJoWEc0Z0tpQm1kV3hzZVMxc2IyTmhiR2w2WldRZ1dFMU1JR1pwYkdVZ2NtVmhaSGtnWm05eUlFMWhjRzVwYXpJZ1kyOXVjM1Z0Y0hScGIyNWNiaUFxWEc0Z0tpQkFjR0Z5WVcwZ2UxTjBjbWx1WjMwZ2JTQXRJSFJvWlNCS1UwOU9JR1pwYkdVZ1lYTWdZU0J6ZEhKcGJtY3VYRzRnS2k5Y2JtTmhjblJ2TGxKbGJtUmxjbVZ5TG5CeWIzUnZkSGx3WlM1eVpXNWtaWElnUFNCbWRXNWpkR2x2YmlCeVpXNWtaWElvYlNrZ2UxeHVJQ0FnSUM4dklHVm1abVZqZEhNZ2FYTWdZU0JqYjI1MFlXbHVaWElnWm05eUlITnBaR1V0WldabVpXTjBjeXdnZDJocFkyZ2dZM1Z5Y21WdWRHeDVYRzRnSUNBZ0x5OGdZWEpsSUd4cGJXbDBaV1FnZEc4Z1JtOXVkRk5sZEhNdVhHNGdJQ0FnZG1GeUlHVnVkaUE5SUY4dVpHVm1ZWFZzZEhNb2RHaHBjeTVsYm5Zc0lIdGNiaUFnSUNBZ0lDQWdZbVZ1WTJodFlYSnJPaUJtWVd4elpTeGNiaUFnSUNBZ0lDQWdkbUZzYVdSaGRHbHZibDlrWVhSaE9pQm1ZV3h6WlN4Y2JpQWdJQ0FnSUNBZ1pXWm1aV04wY3pvZ1cxMHNYRzRnSUNBZ0lDQWdJSEJ3YVRvZ09UQXVOekUwWEc0Z0lDQWdmU2s3WEc1Y2JpQWdJQ0JwWmlBb0lXTmhjblJ2TG5SeVpXVXVVbVZtWlhKbGJtTmxMbk5sZEZabGNuTnBiMjRvZEdocGN5NXZjSFJwYjI1ekxtMWhjRzVwYTE5MlpYSnphVzl1S1NrZ2UxeHVJQ0FnSUNBZ0lDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb1hDSkRiM1ZzWkNCdWIzUWdjMlYwSUcxaGNHNXBheUIyWlhKemFXOXVJSFJ2SUZ3aUlDc2dkR2hwY3k1dmNIUnBiMjV6TG0xaGNHNXBhMTkyWlhKemFXOXVLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQjJZWElnYjNWMGNIVjBJRDBnVzEwN1hHNWNiaUFnSUNBdkx5QlVjbUZ1YzJadmNtMGdjM1I1YkdWemFHVmxkSE1nYVc1MGJ5QmtaV1pwYm1sMGFXOXVjeTVjYmlBZ0lDQjJZWElnWkdWbWFXNXBkR2x2Ym5NZ1BTQmZMbU5vWVdsdUtHMHVVM1I1YkdWemFHVmxkQ2xjYmlBZ0lDQWdJQ0FnTG0xaGNDaG1kVzVqZEdsdmJpaHpLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvZEhsd1pXOW1JSE1nUFQwZ0ozTjBjbWx1WnljcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb1hDSlRkSGxzWlhOb1pXVjBJRzlpYW1WamRDQnBjeUJsZUhCbFkzUmxaQ0J1YjNRZ1lTQnpkSEpwYm1jNklDZGNJaUFySUhNZ0t5QmNJaWRjSWlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUJRWVhOemFXNW5JSFJvWlNCbGJuWnBjbTl1YldWdWRDQm1jbTl0SUhOMGVXeGxjMmhsWlhRZ2RHOGdjM1I1YkdWemFHVmxkQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJR0ZzYkc5M2N5Qm1jbUZ0WlhNZ1lXNWtJR1ZtWm1WamRITWdkRzhnWW1VZ2JXRnBiblJoYVc1bFpDNWNiaUFnSUNBZ0lDQWdJQ0FnSUdWdWRpQTlJRjh1WlhoMFpXNWtLR1Z1ZGl3Z2UyWnBiR1Z1WVcxbE9uTXVhV1I5S1R0Y2JseHVJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlIUnBiV1VnUFNBcmJtVjNJRVJoZEdVb0tTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnliMjkwSUQwZ0tHTmhjblJ2TGxCaGNuTmxjaWhsYm5ZcEtTNXdZWEp6WlNoekxtUmhkR0VwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0dWdWRpNWlaVzVqYUcxaGNtc3BYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjl1YzI5c1pTNTNZWEp1S0NkUVlYSnphVzVuSUhScGJXVTZJQ2NnS3lBb2JtVjNJRVJoZEdVb0tTQXRJSFJwYldVcElDc2dKMjF6SnlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdjbTl2ZEM1MGIweHBjM1FvWlc1MktUdGNiaUFnSUNBZ0lDQWdmU2xjYmlBZ0lDQWdJQ0FnTG1ac1lYUjBaVzRvS1Z4dUlDQWdJQ0FnSUNBdWRtRnNkV1VvS1R0Y2JseHVJQ0FnSUdaMWJtTjBhVzl1SUdGd2NHeHBaWE5VYnlodVlXMWxMQ0JqYkdGemMwbHVaR1Y0S1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCbWRXNWpkR2x2Ymloa1pXWnBibWwwYVc5dUtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnWkdWbWFXNXBkR2x2Ymk1aGNIQnNhV1Z6Vkc4b2JDNXVZVzFsTENCamJHRnpjMGx1WkdWNEtUdGNiaUFnSUNBZ0lDQWdmVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQXZMeUJKZEdWeVlYUmxJSFJvY205MVoyZ2diR0Y1WlhKeklHRnVaQ0JqY21WaGRHVWdjM1I1YkdWeklHTjFjM1J2YlMxaWRXbHNkRnh1SUNBZ0lDOHZJR1p2Y2lCbFlXTm9JRzltSUhSb1pXMHNJR0Z1WkNCaGNIQnNlU0IwYUc5elpTQnpkSGxzWlhNZ2RHOGdkR2hsSUd4aGVXVnljeTVjYmlBZ0lDQjJZWElnYzNSNWJHVnpMQ0JzTENCamJHRnpjMGx1WkdWNExDQnlkV3hsY3l3Z2MyOXlkR1ZrTENCdFlYUmphR2x1Wnp0Y2JpQWdJQ0JtYjNJZ0tIWmhjaUJwSUQwZ01Ec2dhU0E4SUcwdVRHRjVaWEl1YkdWdVozUm9PeUJwS3lzcElIdGNiaUFnSUNBZ0lDQWdiQ0E5SUcwdVRHRjVaWEpiYVYwN1hHNGdJQ0FnSUNBZ0lITjBlV3hsY3lBOUlGdGRPMXh1SUNBZ0lDQWdJQ0JqYkdGemMwbHVaR1Y0SUQwZ2UzMDdYRzVjYmlBZ0lDQWdJQ0FnYVdZZ0tHVnVkaTVpWlc1amFHMWhjbXNwSUdOdmJuTnZiR1V1ZDJGeWJpZ25jSEp2WTJWemMybHVaeUJzWVhsbGNqb2dKeUFySUd3dWFXUXBPMXh1SUNBZ0lDQWdJQ0F2THlCRGJHRnpjMlZ6SUdGeVpTQm5hWFpsYmlCaGN5QnpjR0ZqWlMxelpYQmhjbUYwWldRZ1lXeHdhR0Z1ZFcxbGNtbGpJSE4wY21sdVozTXVYRzRnSUNBZ0lDQWdJSFpoY2lCamJHRnpjMlZ6SUQwZ0tHeGJKMk5zWVhOekoxMGdmSHdnSnljcExuTndiR2wwS0M5Y1hITXJMMmNwTzF4dUlDQWdJQ0FnSUNCbWIzSWdLSFpoY2lCcUlEMGdNRHNnYWlBOElHTnNZWE56WlhNdWJHVnVaM1JvT3lCcUt5c3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHTnNZWE56U1c1a1pYaGJZMnhoYzNObGMxdHFYVjBnUFNCMGNuVmxPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUcxaGRHTm9hVzVuSUQwZ1pHVm1hVzVwZEdsdmJuTXVabWxzZEdWeUtHRndjR3hwWlhOVWJ5aHNMbTVoYldVc0lHTnNZWE56U1c1a1pYZ3BLVHRjYmlBZ0lDQWdJQ0FnY25Wc1pYTWdQU0JwYm1obGNtbDBSR1ZtYVc1cGRHbHZibk1vYldGMFkyaHBibWNzSUdWdWRpazdYRzRnSUNBZ0lDQWdJSE52Y25SbFpDQTlJSE52Y25SVGRIbHNaWE1vY25Wc1pYTXNJR1Z1ZGlrN1hHNWNiaUFnSUNBZ0lDQWdabTl5SUNoMllYSWdheUE5SURBc0lISjFiR1VzSUhOMGVXeGxYMjVoYldVN0lHc2dQQ0J6YjNKMFpXUXViR1Z1WjNSb095QnJLeXNwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEoxYkdVZ1BTQnpiM0owWldSYmExMDdYRzRnSUNBZ0lDQWdJQ0FnSUNCemRIbHNaVjl1WVcxbElEMGdiQzV1WVcxbElDc2dLSEoxYkdVdVlYUjBZV05vYldWdWRDQWhQVDBnSjE5ZlpHVm1ZWFZzZEY5Zkp5QS9JQ2N0SnlBcklISjFiR1V1WVhSMFlXTm9iV1Z1ZENBNklDY25LVHRjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdMeThnWlc1MkxtVm1abVZqZEhNZ1kyRnVJR0psSUcxdlpHbG1hV1ZrSUdKNUlIUm9hWE1nWTJGc2JGeHVJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlITjBlV3hsV0UxTUlEMGdZMkZ5ZEc4dWRISmxaUzVUZEhsc1pWaE5UQ2h6ZEhsc1pWOXVZVzFsTENCeWRXeGxMbUYwZEdGamFHMWxiblFzSUhKMWJHVXNJR1Z1ZGlrN1hHNWNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaHpkSGxzWlZoTlRDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzkxZEhCMWRDNXdkWE5vS0hOMGVXeGxXRTFNS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCemRIbHNaWE11Y0hWemFDaHpkSGxzWlY5dVlXMWxLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUc5MWRIQjFkQzV3ZFhOb0tHTmhjblJ2TG5SeVpXVXVUR0Y1WlhKWVRVd29iQ3dnYzNSNWJHVnpLU2s3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdiM1YwY0hWMExuVnVjMmhwWm5Rb1pXNTJMbVZtWm1WamRITXViV0Z3S0daMWJtTjBhVzl1S0dVcElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHVXVkRzlZVFV3b1pXNTJLVHRjYmlBZ0lDQjlLUzVxYjJsdUtDZGNYRzRuS1NrN1hHNWNiaUFnSUNCMllYSWdiV0Z3WDNCeWIzQmxjblJwWlhNZ1BTQm5aWFJOWVhCUWNtOXdaWEowYVdWektHMHNJR1JsWm1sdWFYUnBiMjV6TENCbGJuWXBPMXh1WEc0Z0lDQWdMeThnUlhocGRDQnZiaUJsY25KdmNuTXVYRzRnSUNBZ2FXWWdLR1Z1ZGk1bGNuSnZjbk1wSUhSb2NtOTNJR1Z1ZGk1bGNuSnZjbk03WEc1Y2JpQWdJQ0F2THlCUVlYTnpJRlJwYkdWS1UwOU9JR0Z1WkNCdmRHaGxjaUJqZFhOMGIyMGdjR0Z5WVcxbGRHVnljeUIwYUhKdmRXZG9JSFJ2SUUxaGNHNXBheUJZVFV3dVhHNGdJQ0FnZG1GeUlIQmhjbUZ0WlhSbGNuTWdQU0JmTG5KbFpIVmpaU2h0TENCbWRXNWpkR2x2YmlodFpXMXZMQ0IyTENCcktTQjdYRzRnSUNBZ0lDQWdJR2xtSUNnaGRpQW1KaUIySUNFOVBTQXdLU0J5WlhSMWNtNGdiV1Z0Ynp0Y2JseHVJQ0FnSUNBZ0lDQnpkMmwwWTJnZ0tHc3BJSHRjYmlBZ0lDQWdJQ0FnTHk4Z1MyNXZkMjRnYzJ0cGNIQmhZbXhsSUhCeWIzQmxjblJwWlhNdVhHNGdJQ0FnSUNBZ0lHTmhjMlVnSjNOeWN5YzZYRzRnSUNBZ0lDQWdJR05oYzJVZ0oweGhlV1Z5SnpwY2JpQWdJQ0FnSUNBZ1kyRnpaU0FuVTNSNWJHVnphR1ZsZENjNlhHNGdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGF6dGNiaUFnSUNBZ0lDQWdMeThnVG05dUlGVlNUQzFpYjNWdVpDQlVhV3hsU2xOUFRpQndjbTl3WlhKMGFXVnpMbHh1SUNBZ0lDQWdJQ0JqWVhObElDZGliM1Z1WkhNbk9seHVJQ0FnSUNBZ0lDQmpZWE5sSUNkalpXNTBaWEluT2x4dUlDQWdJQ0FnSUNCallYTmxJQ2R0YVc1NmIyOXRKenBjYmlBZ0lDQWdJQ0FnWTJGelpTQW5iV0Y0ZW05dmJTYzZYRzRnSUNBZ0lDQWdJR05oYzJVZ0ozWmxjbk5wYjI0bk9seHVJQ0FnSUNBZ0lDQWdJQ0FnYldWdGJ5NXdkWE5vS0NjZ0lEeFFZWEpoYldWMFpYSWdibUZ0WlQxY0lpY2dLeUJySUNzZ0oxd2lQaWNnS3lCMklDc2dKend2VUdGeVlXMWxkR1Z5UGljcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnWW5KbFlXczdYRzRnSUNBZ0lDQWdJQzh2SUZCeWIzQmxjblJwWlhNZ2RHaGhkQ0J5WlhGMWFYSmxJRU5FUVZSQkxseHVJQ0FnSUNBZ0lDQmpZWE5sSUNkdVlXMWxKenBjYmlBZ0lDQWdJQ0FnWTJGelpTQW5aR1Z6WTNKcGNIUnBiMjRuT2x4dUlDQWdJQ0FnSUNCallYTmxJQ2RzWldkbGJtUW5PbHh1SUNBZ0lDQWdJQ0JqWVhObElDZGhkSFJ5YVdKMWRHbHZiaWM2WEc0Z0lDQWdJQ0FnSUdOaGMyVWdKM1JsYlhCc1lYUmxKenBjYmlBZ0lDQWdJQ0FnSUNBZ0lHMWxiVzh1Y0hWemFDZ25JQ0E4VUdGeVlXMWxkR1Z5SUc1aGJXVTlYQ0luSUNzZ2F5QXJJQ2RjSWo0OElWdERSRUZVUVZzbklDc2dkaUFySUNkZFhUNDhMMUJoY21GdFpYUmxjajRuS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJR0p5WldGck8xeHVJQ0FnSUNBZ0lDQXZMeUJOWVhCdWFXc2dhVzFoWjJVZ1ptOXliV0YwTGx4dUlDQWdJQ0FnSUNCallYTmxJQ2RtYjNKdFlYUW5PbHh1SUNBZ0lDQWdJQ0FnSUNBZ2JXVnRieTV3ZFhOb0tDY2dJRHhRWVhKaGJXVjBaWElnYm1GdFpUMWNJaWNnS3lCcklDc2dKMXdpUGljZ0t5QjJJQ3NnSnp3dlVHRnlZVzFsZEdWeVBpY3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ1luSmxZV3M3WEc0Z0lDQWdJQ0FnSUM4dklFMWhjRzVwYXlCcGJuUmxjbUZqZEdsMmFYUjVJSE5sZEhScGJtZHpMbHh1SUNBZ0lDQWdJQ0JqWVhObElDZHBiblJsY21GamRHbDJhWFI1SnpwY2JpQWdJQ0FnSUNBZ0lDQWdJRzFsYlc4dWNIVnphQ2duSUNBOFVHRnlZVzFsZEdWeUlHNWhiV1U5WENKcGJuUmxjbUZqZEdsMmFYUjVYMnhoZVdWeVhDSStKeUFySUhZdWJHRjVaWElnS3lBblBDOVFZWEpoYldWMFpYSStKeWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnRaVzF2TG5CMWMyZ29KeUFnUEZCaGNtRnRaWFJsY2lCdVlXMWxQVndpYVc1MFpYSmhZM1JwZG1sMGVWOW1hV1ZzWkhOY0lqNG5JQ3NnZGk1bWFXVnNaSE1nS3lBblBDOVFZWEpoYldWMFpYSStKeWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmljbVZoYXp0Y2JpQWdJQ0FnSUNBZ0x5OGdVM1Z3Y0c5eWRDQmhibmtnWVdSa2FYUnBiMjVoYkNCelkyRnNZWElnY0hKdmNHVnlkR2xsY3k1Y2JpQWdJQ0FnSUNBZ1pHVm1ZWFZzZERwY2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNnbmMzUnlhVzVuSnlBOVBUMGdkSGx3Wlc5bUlIWXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J0WlcxdkxuQjFjMmdvSnlBZ1BGQmhjbUZ0WlhSbGNpQnVZVzFsUFZ3aUp5QXJJR3NnS3lBblhDSStQQ0ZiUTBSQlZFRmJKeUFySUhZZ0t5QW5YVjArUEM5UVlYSmhiV1YwWlhJK0p5azdYRzRnSUNBZ0lDQWdJQ0FnSUNCOUlHVnNjMlVnYVdZZ0tDZHVkVzFpWlhJbklEMDlQU0IwZVhCbGIyWWdkaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUcxbGJXOHVjSFZ6YUNnbklDQThVR0Z5WVcxbGRHVnlJRzVoYldVOVhDSW5JQ3NnYXlBcklDZGNJajRuSUNzZ2RpQXJJQ2M4TDFCaGNtRnRaWFJsY2o0bktUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0JwWmlBb0oySnZiMnhsWVc0bklEMDlQU0IwZVhCbGIyWWdkaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUcxbGJXOHVjSFZ6YUNnbklDQThVR0Z5WVcxbGRHVnlJRzVoYldVOVhDSW5JQ3NnYXlBcklDZGNJajRuSUNzZ2RpQXJJQ2M4TDFCaGNtRnRaWFJsY2o0bktUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJR0p5WldGck8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQnRaVzF2TzF4dUlDQWdJSDBzSUZ0ZEtUdGNiaUFnSUNCcFppQW9jR0Z5WVcxbGRHVnljeTVzWlc1bmRHZ3BJRzkxZEhCMWRDNTFibk5vYVdaMEtGeHVJQ0FnSUNBZ0lDQW5QRkJoY21GdFpYUmxjbk0rWEZ4dUp5QXJYRzRnSUNBZ0lDQWdJSEJoY21GdFpYUmxjbk11YW05cGJpZ25YRnh1SnlrZ0sxeHVJQ0FnSUNBZ0lDQW5YRnh1UEM5UVlYSmhiV1YwWlhKelBseGNiaWRjYmlBZ0lDQXBPMXh1WEc0Z0lDQWdkbUZ5SUhCeWIzQmxjblJwWlhNZ1BTQmZMbTFoY0NodFlYQmZjSEp2Y0dWeWRHbGxjeXdnWm5WdVkzUnBiMjRvZGlrZ2V5QnlaWFIxY200Z0p5QW5JQ3NnZGpzZ2ZTa3VhbTlwYmlnbkp5azdYRzVjYmlBZ0lDQnZkWFJ3ZFhRdWRXNXphR2xtZENoY2JpQWdJQ0FnSUNBZ0p6dy9lRzFzSUhabGNuTnBiMjQ5WENJeExqQmNJaUFuSUN0Y2JpQWdJQ0FnSUNBZ0oyVnVZMjlrYVc1blBWd2lkWFJtTFRoY0lqOCtYRnh1SnlBclhHNGdJQ0FnSUNBZ0lDYzhJVVJQUTFSWlVFVWdUV0Z3VzEwK1hGeHVKeUFyWEc0Z0lDQWdJQ0FnSUNjOFRXRndKeUFySUhCeWIzQmxjblJwWlhNZ0t5YytYRnh1SnlrN1hHNGdJQ0FnYjNWMGNIVjBMbkIxYzJnb0p6d3ZUV0Z3UGljcE8xeHVJQ0FnSUhKbGRIVnliaUJ2ZFhSd2RYUXVhbTlwYmlnblhGeHVKeWs3WEc1OU8xeHVYRzR2S2lwY2JpQXFJRlJvYVhNZ1puVnVZM1JwYjI0Z1kzVnljbVZ1ZEd4NUlHMXZaR2xtYVdWeklDZGpkWEp5Wlc1MEoxeHVJQ29nUUhCaGNtRnRJSHRCY25KaGVYMGdJR04xY25KbGJuUWdJR04xY25KbGJuUWdiR2x6ZENCdlppQnlkV3hsYzF4dUlDb2dRSEJoY21GdElIdFBZbXBsWTNSOUlHUmxabWx1YVhScGIyNGdZU0JFWldacGJtbDBhVzl1SUc5aWFtVmpkQ0IwYnlCaFpHUWdkRzhnZEdobElISjFiR1Z6WEc0Z0tpQkFjR0Z5WVcwZ2UwOWlhbVZqZEgwZ1lubEdhV3gwWlhJZ1lXNGdiMkpxWldOMEwyUnBZM1JwYjI1aGNua2diMllnWlhocGMzUnBibWNnWm1sc2RHVnljeTRnVkdocGN5QnBjMXh1SUNvZ1lXTjBkV0ZzYkhrZ2EyVjVaV1FnWUdGMGRHRmphRzFsYm5RdFBtWnBiSFJsY21CY2JpQXFJRUJ3WVhKaGJTQjdUMkpxWldOMGZTQmxibllnZEdobElHTjFjbkpsYm5RZ1pXNTJhWEp2Ym0xbGJuUmNiaW92WEc1bWRXNWpkR2x2YmlCaFpHUlNkV3hsY3loamRYSnlaVzUwTENCa1pXWnBibWwwYVc5dUxDQmllVVpwYkhSbGNpd2daVzUyS1NCN1hHNGdJQ0FnZG1GeUlHNWxkMFpwYkhSbGNuTWdQU0JrWldacGJtbDBhVzl1TG1acGJIUmxjbk1zWEc0Z0lDQWdJQ0FnSUc1bGQxSjFiR1Z6SUQwZ1pHVm1hVzVwZEdsdmJpNXlkV3hsY3l4Y2JpQWdJQ0FnSUNBZ2RYQmtZWFJsWkVacGJIUmxjbk1zSUdOc2IyNWxMQ0J3Y21WMmFXOTFjenRjYmx4dUlDQWdJQzh2SUZSb1pTQmpkWEp5Wlc1MElHUmxabWx1YVhScGIyNGdiV2xuYUhRZ2FHRjJaU0JpWldWdUlITndiR2wwSUhWd0lHbHVkRzljYmlBZ0lDQXZMeUJ0ZFd4MGFYQnNaU0JrWldacGJtbDBhVzl1Y3lCaGJISmxZV1I1TGx4dUlDQWdJR1p2Y2lBb2RtRnlJR3NnUFNBd095QnJJRHdnWTNWeWNtVnVkQzVzWlc1bmRHZzdJR3NyS3lrZ2UxeHVJQ0FnSUNBZ0lDQjFjR1JoZEdWa1JtbHNkR1Z5Y3lBOUlHTjFjbkpsYm5SYmExMHVabWxzZEdWeWN5NWpiRzl1WlZkcGRHZ29ibVYzUm1sc2RHVnljeWs3WEc0Z0lDQWdJQ0FnSUdsbUlDaDFjR1JoZEdWa1JtbHNkR1Z5Y3lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnY0hKbGRtbHZkWE1nUFNCaWVVWnBiSFJsY2x0MWNHUmhkR1ZrUm1sc2RHVnljMTA3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvY0hKbGRtbHZkWE1wSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdkx5QlVhR1Z5WlNkeklHRnNjbVZoWkhrZ1lTQmtaV1pwYm1sMGFXOXVJSGRwZEdnZ2RHaHZjMlVnWlhoaFkzUmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMeUJtYVd4MFpYSnpMaUJCWkdRZ2RHaGxJR04xY25KbGJuUWdaR1ZtYVc1cGRHbHZibk1uSUhKMWJHVnpYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeThnWVc1a0lITjBiM0FnY0hKdlkyVnpjMmx1WnlCcGRDQmhjeUIwYUdVZ1pYaHBjM1JwYm1jZ2NuVnNaVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzh2SUdoaGN5QmhiSEpsWVdSNUlHZHZibVVnWkc5M2JpQjBhR1VnYVc1b1pYSnBkR0Z1WTJVZ1kyaGhhVzR1WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY0hKbGRtbHZkWE11WVdSa1VuVnNaWE1vYm1WM1VuVnNaWE1wTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiRzl1WlNBOUlHTjFjbkpsYm5SYmExMHVZMnh2Ym1Vb2RYQmtZWFJsWkVacGJIUmxjbk1wTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4dklFMWhhMlVnYzNWeVpTQjBhR0YwSUhkbEozSmxJRzl1YkhrZ2JXRnBiblJoYVc1cGJtY2dkR2hsSUdOc2IyNWxYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeThnZDJobGJpQjNaU0JrYVdRZ1lXTjBkV0ZzYkhrZ1lXUmtJSEoxYkdWekxpQkpaaUJ1YjNRc0lIUm9aWEpsSjNOY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdkx5QnVieUJ1WldWa0lIUnZJR3RsWlhBZ2RHaGxJR05zYjI1bElHRnliM1Z1WkM1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9ZMnh2Ym1VdVlXUmtVblZzWlhNb2JtVjNVblZzWlhNcEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4dklGZGxJR2x1YzJWeWRHVmtJR0Z1SUdWc1pXMWxiblFnWW1WbWIzSmxJSFJvYVhNZ2IyNWxMQ0J6YnlCM1pTQnVaV1ZrWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJSFJ2SUcxaGEyVWdjM1Z5WlNCMGFHRjBJR2x1SUhSb1pTQnVaWGgwSUd4dmIzQWdhWFJsY21GMGFXOXVMQ0IzWlNkeVpWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2THlCdWIzUWdjR1Z5Wm05eWJXbHVaeUIwYUdVZ2MyRnRaU0IwWVhOcklHWnZjaUIwYUdseklHVnNaVzFsYm5RZ1lXZGhhVzRzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJR2hsYm1ObElIUm9aU0JyS3lzdVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0o1Um1sc2RHVnlXM1Z3WkdGMFpXUkdhV3gwWlhKelhTQTlJR05zYjI1bE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqZFhKeVpXNTBMbk53YkdsalpTaHJMQ0F3TENCamJHOXVaU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHc3JLenRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDBnWld4elpTQnBaaUFvZFhCa1lYUmxaRVpwYkhSbGNuTWdQVDA5SUc1MWJHd3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJR2xtSUhWd1pHRjBaV1JHYVd4MFpYSnpJR2x6SUc1MWJHd3NJSFJvWlc0Z1lXUmthVzVuSUhSb1pTQm1hV3gwWlhKeklHUnZaWE51SjNSY2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUdsdWRtRnNhV1JoZEdVZ2IzSWdjM0JzYVhRZ2RHaGxJSE5sYkdWamRHOXlMQ0J6YnlCM1pTQmhaR1JTZFd4bGN5QjBieUIwYUdWY2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUdOdmJXSnBibVZrSUhObGJHVmpkRzl5WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUVacGJIUmxjbk1nWTJGdUlHSmxJR0ZrWkdWa0xDQmlkWFFnZEdobGVTQmtiMjRuZENCamFHRnVaMlVnZEdobFhHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCbWFXeDBaWEp6TGlCVWFHbHpJRzFsWVc1eklIZGxJR1J2YmlkMElHaGhkbVVnZEc4Z2MzQnNhWFFnZEdobFhHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCa1pXWnBibWwwYVc5dUxseHVJQ0FnSUNBZ0lDQWdJQ0FnTHk5Y2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUhSb2FYTWdhWE1nWTJ4dmJtVmtJR2hsY21VZ1ltVmpZWFZ6WlNCdlppQnphR0Z5WldRZ1kyeGhjM05sY3l3Z2MyVmxYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5QnphR0Z5WldSamJHRnpjeTV0YzNOY2JpQWdJQ0FnSUNBZ0lDQWdJR04xY25KbGJuUmJhMTBnUFNCamRYSnlaVzUwVzJ0ZExtTnNiMjVsS0NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqZFhKeVpXNTBXMnRkTG1Ga1pGSjFiR1Z6S0c1bGQxSjFiR1Z6S1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQXZMeUJwWmlCMWNHUmhkR1ZrUm1WaGRIVnlaWE1nYVhNZ1ptRnNjMlVzSUhSb1pXNGdkR2hsSUdacGJIUmxjbk1nYzNCc2FYUWdkR2hsSUhKMWJHVXNYRzRnSUNBZ0lDQWdJQzh2SUhOdklIUm9aWGtnWVhKbGJpZDBJSFJvWlNCellXMWxJR2x1YUdWeWFYUmhibU5sSUdOb1lXbHVYRzRnSUNBZ2ZWeHVJQ0FnSUhKbGRIVnliaUJqZFhKeVpXNTBPMXh1ZlZ4dVhHNHZLaXBjYmlBcUlFRndjR3g1SUdsdWFHVnlhWFJsWkNCemRIbHNaWE1nWm5KdmJTQjBhR1ZwY2lCaGJtTmxjM1J2Y25NZ2RHOGdkR2hsYlM1Y2JpQXFYRzRnS2lCallXeHNaV1FnWldsMGFHVnlJRzl1WTJVZ2NHVnlJSEpsYm1SbGNpQW9hVzRnZEdobElHTmhjMlVnYjJZZ2JYTnpLU0J2Y2lCd1pYSWdiR0Y1WlhKY2JpQXFJQ2htYjNJZ2JXMXNLVnh1SUNwY2JpQXFJRUJ3WVhKaGJTQjdUMkpxWldOMGZTQmtaV1pwYm1sMGFXOXVjeUF0SUdFZ2JHbHpkQ0J2WmlCa1pXWnBibWwwYVc5dWN5QnZZbXBsWTNSelhHNGdLaUFnSUhSb1lYUWdZMjl1ZEdGcGJpQXVjblZzWlhOY2JpQXFJRUJ3WVhKaGJTQjdUMkpxWldOMGZTQmxibllnTFNCMGFHVWdaVzUyYVhKdmJtMWxiblJjYmlBcUlFQnlaWFIxY200Z2UwRnljbUY1UEVGeWNtRjVQbjBnWVc0Z1lYSnlZWGtnYjJZZ1lYSnlZWGx6SUdseklISmxkSFZ5Ym1Wa0xGeHVJQ29nSUNCcGJpQjNhR2xqYUNCbFlXTm9JR0Z5Y21GNUlISmxabVZ5Y3lCMGJ5QmhJSE53WldOcFptbGpJR0YwZEdGamFHMWxiblJjYmlBcUwxeHVablZ1WTNScGIyNGdhVzVvWlhKcGRFUmxabWx1YVhScGIyNXpLR1JsWm1sdWFYUnBiMjV6TENCbGJuWXBJSHRjYmlBZ0lDQjJZWElnYVc1b1pYSnBkRlJwYldVZ1BTQXJibVYzSUVSaGRHVW9LVHRjYmlBZ0lDQXZMeUJrWldacGJtbDBhVzl1Y3lCaGNtVWdiM0prWlhKbFpDQmllU0J6Y0dWamFXWnBZMmwwZVN4Y2JpQWdJQ0F2THlCb2FXZG9JQ2hwYm1SbGVDQXdLU0IwYnlCc2IzZGNiaUFnSUNCMllYSWdZbmxCZEhSaFkyaHRaVzUwSUQwZ2UzMHNYRzRnSUNBZ0lDQWdJR0o1Um1sc2RHVnlJRDBnZTMwN1hHNGdJQ0FnZG1GeUlISmxjM1ZzZENBOUlGdGRPMXh1SUNBZ0lIWmhjaUJqZFhKeVpXNTBMQ0J3Y21WMmFXOTFjeXdnWVhSMFlXTm9iV1Z1ZER0Y2JseHVJQ0FnSUM4dklFVjJZV3gxWVhSbElIUm9aU0JtYVd4MFpYSnpJSE53WldOcFptbGxaQ0JpZVNCbFlXTm9JR1JsWm1sdWFYUnBiMjRnZDJsMGFDQjBhR1VnWjJsMlpXNWNiaUFnSUNBdkx5QmxiblpwY205dWJXVnVkQ0IwYnlCamIzSnlaV04wYkhrZ2NtVnpiMngyWlNCMllYSnBZV0pzWlNCeVpXWmxjbVZ1WTJWelhHNGdJQ0FnWkdWbWFXNXBkR2x2Ym5NdVptOXlSV0ZqYUNobWRXNWpkR2x2Ymloa0tTQjdYRzRnSUNBZ0lDQWdJR1F1Wm1sc2RHVnljeTVsZGlobGJuWXBPMXh1SUNBZ0lIMHBPMXh1WEc0Z0lDQWdabTl5SUNoMllYSWdhU0E5SURBN0lHa2dQQ0JrWldacGJtbDBhVzl1Y3k1c1pXNW5kR2c3SUdrckt5a2dlMXh1WEc0Z0lDQWdJQ0FnSUdGMGRHRmphRzFsYm5RZ1BTQmtaV1pwYm1sMGFXOXVjMXRwWFM1aGRIUmhZMmh0Wlc1ME8xeHVJQ0FnSUNBZ0lDQmpkWEp5Wlc1MElEMGdXMlJsWm1sdWFYUnBiMjV6VzJsZFhUdGNibHh1SUNBZ0lDQWdJQ0JwWmlBb0lXSjVRWFIwWVdOb2JXVnVkRnRoZEhSaFkyaHRaVzUwWFNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWW5sQmRIUmhZMmh0Wlc1MFcyRjBkR0ZqYUcxbGJuUmRJRDBnVzEwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JpZVVGMGRHRmphRzFsYm5SYllYUjBZV05vYldWdWRGMHVZWFIwWVdOb2JXVnVkQ0E5SUdGMGRHRmphRzFsYm5RN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JpZVVacGJIUmxjbHRoZEhSaFkyaHRaVzUwWFNBOUlIdDlPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVnpkV3gwTG5CMWMyZ29ZbmxCZEhSaFkyaHRaVzUwVzJGMGRHRmphRzFsYm5SZEtUdGNiaUFnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUM4dklFbDBaWEpoZEdVZ2IzWmxjaUJoYkd3Z2MzVmljMlZ4ZFdWdWRDQnlkV3hsY3k1Y2JpQWdJQ0FnSUNBZ1ptOXlJQ2gyWVhJZ2FpQTlJR2tnS3lBeE95QnFJRHdnWkdWbWFXNXBkR2x2Ym5NdWJHVnVaM1JvT3lCcUt5c3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hrWldacGJtbDBhVzl1YzF0cVhTNWhkSFJoWTJodFpXNTBJRDA5UFNCaGRIUmhZMmh0Wlc1MEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeThnVDI1c2VTQnBibWhsY21sMElISjFiR1Z6SUdaeWIyMGdkR2hsSUhOaGJXVWdZWFIwWVdOb2JXVnVkQzVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqZFhKeVpXNTBJRDBnWVdSa1VuVnNaWE1vWTNWeWNtVnVkQ3dnWkdWbWFXNXBkR2x2Ym5OYmFsMHNJR0o1Um1sc2RHVnlXMkYwZEdGamFHMWxiblJkTENCbGJuWXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnWm05eUlDaDJZWElnYXlBOUlEQTdJR3NnUENCamRYSnlaVzUwTG14bGJtZDBhRHNnYXlzcktTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCaWVVWnBiSFJsY2x0aGRIUmhZMmh0Wlc1MFhWdGpkWEp5Wlc1MFcydGRMbVpwYkhSbGNuTmRJRDBnWTNWeWNtVnVkRnRyWFR0Y2JpQWdJQ0FnSUNBZ0lDQWdJR0o1UVhSMFlXTm9iV1Z1ZEZ0aGRIUmhZMmh0Wlc1MFhTNXdkWE5vS0dOMWNuSmxiblJiYTEwcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2FXWWdLR1Z1ZGk1aVpXNWphRzFoY21zcElHTnZibk52YkdVdWQyRnliaWduU1c1b1pYSnBkR0Z1WTJVZ2RHbHRaVG9nSnlBcklDZ29ibVYzSUVSaGRHVW9LU0F0SUdsdWFHVnlhWFJVYVcxbEtTa2dLeUFuYlhNbktUdGNibHh1SUNBZ0lISmxkSFZ5YmlCeVpYTjFiSFE3WEc1Y2JuMWNibHh1THk4Z1UyOXlkQ0J6ZEhsc1pYTWdZbmtnZEdobElHMXBibWx0ZFcwZ2FXNWtaWGdnYjJZZ2RHaGxhWElnY25Wc1pYTXVYRzR2THlCVWFHbHpJSE52Y25SeklHRWdjMnhwWTJVZ2IyWWdkR2hsSUhOMGVXeGxjeXdnYzI4Z2FYUWdjbVYwZFhKdWN5QmhJSE52Y25SbFpGeHVMeThnWVhKeVlYa2dZblYwSUdSdlpYTWdibTkwSUdOb1lXNW5aU0IwYUdVZ2FXNXdkWFF1WEc1bWRXNWpkR2x2YmlCemIzSjBVM1I1YkdWelNXNWtaWGdvWVN3Z1lpa2dleUJ5WlhSMWNtNGdZaTVwYm1SbGVDQXRJR0V1YVc1a1pYZzdJSDFjYm1aMWJtTjBhVzl1SUhOdmNuUlRkSGxzWlhNb2MzUjViR1Z6TENCbGJuWXBJSHRjYmlBZ0lDQm1iM0lnS0haaGNpQnBJRDBnTURzZ2FTQThJSE4wZVd4bGN5NXNaVzVuZEdnN0lHa3JLeWtnZTF4dUlDQWdJQ0FnSUNCMllYSWdjM1I1YkdVZ1BTQnpkSGxzWlhOYmFWMDdYRzRnSUNBZ0lDQWdJSE4wZVd4bExtbHVaR1Y0SUQwZ1NXNW1hVzVwZEhrN1hHNGdJQ0FnSUNBZ0lHWnZjaUFvZG1GeUlHSWdQU0F3T3lCaUlEd2djM1I1YkdVdWJHVnVaM1JvT3lCaUt5c3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJ5ZFd4bGN5QTlJSE4wZVd4bFcySmRMbkoxYkdWek8xeHVJQ0FnSUNBZ0lDQWdJQ0FnWm05eUlDaDJZWElnY2lBOUlEQTdJSElnUENCeWRXeGxjeTVzWlc1bmRHZzdJSElyS3lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJ5ZFd4bElEMGdjblZzWlhOYmNsMDdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hKMWJHVXVhVzVrWlhnZ1BDQnpkSGxzWlM1cGJtUmxlQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnpkSGxzWlM1cGJtUmxlQ0E5SUhKMWJHVXVhVzVrWlhnN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dVhHNGdJQ0FnZG1GeUlISmxjM1ZzZENBOUlITjBlV3hsY3k1emJHbGpaU2dwTzF4dUlDQWdJSEpsYzNWc2RDNXpiM0owS0hOdmNuUlRkSGxzWlhOSmJtUmxlQ2s3WEc0Z0lDQWdjbVYwZFhKdUlISmxjM1ZzZER0Y2JuMWNibHh1THlvcVhHNGdLaUJHYVc1a0lHRWdjblZzWlNCc2FXdGxJRTFoY0NCN0lHSmhZMnRuY205MWJtUXRZMjlzYjNJNklDTm1abVk3SUgwc1hHNGdLaUJwWmlCaGJua3NJR0Z1WkNCeVpYUjFjbTRnWVNCc2FYTjBJRzltSUhCeWIzQmxjblJwWlhNZ2RHOGdZbVVnYVc1elpYSjBaV1JjYmlBcUlHbHVkRzhnZEdobElEeE5ZWEFnWld4bGJXVnVkQ0J2WmlCMGFHVWdjbVZ6ZFd4MGFXNW5JRmhOVEM0Z1ZISmhibk5zWVhSbGMxeHVJQ29nY0hKdmNHVnlkR2xsY3lCdlppQjBhR1VnYlcxc0lHOWlhbVZqZENCaGRDQmdiV0FnWkdseVpXTjBiSGtnYVc1MGJ5QllUVXhjYmlBcUlIQnliM0JsY25ScFpYTXVYRzRnS2x4dUlDb2dRSEJoY21GdElIdFBZbXBsWTNSOUlHMGdkR2hsSUcxdGJDQnZZbXBsWTNRdVhHNGdLaUJBY0dGeVlXMGdlMEZ5Y21GNWZTQmtaV1pwYm1sMGFXOXVjeUIwYUdVZ2IzVjBjSFYwSUc5bUlIUnZUR2x6ZEM1Y2JpQXFJRUJ3WVhKaGJTQjdUMkpxWldOMGZTQmxiblpjYmlBcUlFQnlaWFIxY200Z2UxTjBjbWx1WjMwZ2NtVnVaR1Z5WldRZ2NISnZjR1Z5ZEdsbGN5NWNiaUFxTDF4dVpuVnVZM1JwYjI0Z1oyVjBUV0Z3VUhKdmNHVnlkR2xsY3lodExDQmtaV1pwYm1sMGFXOXVjeXdnWlc1MktTQjdYRzRnSUNBZ2RtRnlJSEoxYkdWeklEMGdlMzA3WEc0Z0lDQWdkbUZ5SUhONWJXSnZiR2w2WlhKeklEMGdZMkZ5ZEc4dWRISmxaUzVTWldabGNtVnVZMlV1WkdGMFlTNXplVzFpYjJ4cGVtVnljeTV0WVhBN1hHNWNiaUFnSUNCZktHMHBMbVZoWTJnb1puVnVZM1JwYjI0b2RtRnNkV1VzSUd0bGVTa2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb2EyVjVJR2x1SUhONWJXSnZiR2w2WlhKektTQnlkV3hsYzF0clpYbGRJRDBnYTJWNUlDc2dKejFjSWljZ0t5QjJZV3gxWlNBcklDZGNJaWM3WEc0Z0lDQWdmU2s3WEc1Y2JpQWdJQ0JrWldacGJtbDBhVzl1Y3k1bWFXeDBaWElvWm5WdVkzUnBiMjRvY2lrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2NpNWxiR1Z0Wlc1MGN5NXFiMmx1S0NjbktTQTlQVDBnSjAxaGNDYzdYRzRnSUNBZ2ZTa3VabTl5UldGamFDaG1kVzVqZEdsdmJpaHlLU0I3WEc0Z0lDQWdJQ0FnSUdadmNpQW9kbUZ5SUdrZ1BTQXdPeUJwSUR3Z2NpNXlkV3hsY3k1c1pXNW5kR2c3SUdrckt5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJR3RsZVNBOUlISXVjblZzWlhOYmFWMHVibUZ0WlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNnaEtHdGxlU0JwYmlCemVXMWliMnhwZW1WeWN5a3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JsYm5ZdVpYSnliM0lvZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnRaWE56WVdkbE9pQW5VblZzWlNBbklDc2dhMlY1SUNzZ0p5QnViM1FnWVd4c2IzZGxaQ0JtYjNJZ1RXRndMaWNzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbHVaR1Y0T2lCeUxuSjFiR1Z6VzJsZExtbHVaR1Y0WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlkV3hsYzF0clpYbGRJRDBnY2k1eWRXeGxjMXRwWFM1bGRpaGxibllwTG5SdldFMU1LR1Z1ZGlrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOUtUdGNiaUFnSUNCeVpYUjFjbTRnY25Wc1pYTTdYRzU5WEc1Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1kyRnlkRzg3WEc1dGIyUjFiR1V1Wlhod2IzSjBjeTVoWkdSU2RXeGxjeUE5SUdGa1pGSjFiR1Z6TzF4dWJXOWtkV3hsTG1WNGNHOXlkSE11YVc1b1pYSnBkRVJsWm1sdWFYUnBiMjV6SUQwZ2FXNW9aWEpwZEVSbFptbHVhWFJwYjI1ek8xeHViVzlrZFd4bExtVjRjRzl5ZEhNdWMyOXlkRk4wZVd4bGN5QTlJSE52Y25SVGRIbHNaWE03WEc1Y2JseHVYRzR2THk4dkx5OHZMeTh2THk4dkx5OHZMeTljYmk4dklGZEZRbEJCUTBzZ1JrOVBWRVZTWEc0dkx5QXVMMzR2WTJGeWRHOHZiR2xpTDJOaGNuUnZMM0psYm1SbGNtVnlMbXB6WEc0dkx5QnRiMlIxYkdVZ2FXUWdQU0E0TTF4dUx5OGdiVzlrZFd4bElHTm9kVzVyY3lBOUlEQWlYU3dpYldGd2NHbHVaM01pT2lKQlFVRkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRU0lzSW5OdmRYSmpaVkp2YjNRaU9pSWlmUT09XCIpO1xuXG4vKioqLyB9KSxcbi8qIDg0ICovXG4vKiBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyogYWxsIGV4cG9ydHMgdXNlZCAqL1xuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vfi9jYXJ0by9saWIvY2FydG8vcmVuZGVyZXJfanMuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuZXZhbChcIi8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqLyhmdW5jdGlvbihnbG9iYWwpIHsoZnVuY3Rpb24oY2FydG8pIHtcXG52YXIgdHJlZSA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vdHJlZSAqLyAwKTtcXG52YXIgXyA9IGdsb2JhbC5fIHx8IF9fd2VicGFja19yZXF1aXJlX18oLyohIHVuZGVyc2NvcmUgKi8gNCk7XFxuXFxuXFxuZnVuY3Rpb24gQ2FydG9DU1Moc3R5bGUsIG9wdGlvbnMpIHtcXG4gIHRoaXMub3B0aW9ucyA9IG9wdGlvbnMgfHwge307XFxuICB0aGlzLmltYWdlVVJMcyA9IFtdO1xcbiAgaWYoc3R5bGUpIHtcXG4gICAgdGhpcy5zZXRTdHlsZShzdHlsZSk7XFxuICB9XFxufVxcblxcbkNhcnRvQ1NTLkxheWVyID0gZnVuY3Rpb24oc2hhZGVyLCBvcHRpb25zKSB7XFxuICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xcbiAgdGhpcy5zaGFkZXIgPSBzaGFkZXI7XFxufTtcXG5cXG5cXG5DYXJ0b0NTUy5MYXllci5wcm90b3R5cGUgPSB7XFxuXFxuICBmdWxsTmFtZTogZnVuY3Rpb24oKSB7XFxuICAgIHJldHVybiB0aGlzLnNoYWRlci5hdHRhY2htZW50O1xcbiAgfSxcXG5cXG4gIG5hbWU6IGZ1bmN0aW9uKCkge1xcbiAgICByZXR1cm4gdGhpcy5mdWxsTmFtZSgpLnNwbGl0KCc6OicpWzBdO1xcbiAgfSxcXG5cXG4gIC8vIGZyYW1lcyB0aGlzIGxheWVyIG5lZWQgdG8gYmUgcmVuZGVyZWRcXG4gIGZyYW1lczogZnVuY3Rpb24oKSB7XFxuICAgIHJldHVybiB0aGlzLnNoYWRlci5mcmFtZXM7XFxuICB9LFxcblxcbiAgYXR0YWNobWVudDogZnVuY3Rpb24oKSB7XFxuICAgIHJldHVybiB0aGlzLmZ1bGxOYW1lKCkuc3BsaXQoJzo6JylbMV07XFxuICB9LFxcblxcbiAgZXZhbDogZnVuY3Rpb24ocHJvcCkge1xcbiAgICB2YXIgcCA9IHRoaXMuc2hhZGVyW3Byb3BdO1xcbiAgICBpZiAoIXAgfHwgIXAuc3R5bGUpIHJldHVybjtcXG4gICAgcmV0dXJuIHAuc3R5bGUoe30sIHsgem9vbTogMCwgJ2ZyYW1lLW9mZnNldCc6IDAgfSk7XFxuICB9LFxcblxcbiAgLypcXG4gICAqIGBwcm9wc2A6IGZlYXR1cmUgcHJvcGVydGllc1xcbiAgICogYGNvbnRleHRgOiByZW5kZXJpbmcgcHJvcGVydGllcywgaS5lIHpvb21cXG4gICAqL1xcbiAgZ2V0U3R5bGU6IGZ1bmN0aW9uKHByb3BzLCBjb250ZXh0KSB7XFxuICAgIHZhciBzdHlsZSA9IHt9O1xcbiAgICBmb3IodmFyIGkgaW4gdGhpcy5zaGFkZXIpIHtcXG4gICAgICBpZihpICE9PSAnYXR0YWNobWVudCcgJiYgaSAhPT0gJ3pvb20nICYmIGkgIT09ICdmcmFtZXMnICYmIGkgIT09ICdzeW1ib2xpemVycycpIHtcXG4gICAgICAgIHN0eWxlW2ldID0gdGhpcy5zaGFkZXJbaV0uc3R5bGUocHJvcHMsIGNvbnRleHQpO1xcbiAgICAgIH1cXG4gICAgfVxcbiAgICByZXR1cm4gc3R5bGU7XFxuICB9LFxcblxcbiAgLyoqXFxuICAgKiByZXR1cm4gdGhlIHN5bWJvbGl6ZXJzIHRoYXQgbmVlZCB0byBiZSByZW5kZXJlZCB3aXRoXFxuICAgKiB0aGlzIHN0eWxlLiBUaGUgb3JkZXIgaXMgdGhlIHJlbmRlcmluZyBvcmRlci5cXG4gICAqIEByZXR1cm5zIGEgbGlzdCB3aXRoIDMgcG9zc2libGUgdmFsdWVzICdsaW5lJywgJ21hcmtlcicsICdwb2x5Z29uJ1xcbiAgICovXFxuICBnZXRTeW1ib2xpemVyczogZnVuY3Rpb24oKSB7XFxuICAgIHJldHVybiB0aGlzLnNoYWRlci5zeW1ib2xpemVycztcXG4gIH0sXFxuXFxuICAvKipcXG4gICAqIHJldHVybnMgaWYgdGhlIHN0eWxlIHZhcmllcyB3aXRoIHNvbWUgZmVhdHVyZSBwcm9wZXJ0eS5cXG4gICAqIFVzZWZ1bCB0byBvcHRpbWl6ZSByZW5kZXJpbmdcXG4gICAqL1xcbiAgaXNWYXJpYWJsZTogZnVuY3Rpb24oKSB7XFxuICAgIGZvcih2YXIgaSBpbiB0aGlzLnNoYWRlcikge1xcbiAgICAgIGlmKGkgIT09ICdhdHRhY2htZW50JyAmJiBpICE9PSAnem9vbScgJiYgaSAhPT0gJ2ZyYW1lcycgJiYgaSAhPT0gJ3N5bWJvbGl6ZXJzJykge1xcbiAgICAgICAgaWYgKCF0aGlzLnNoYWRlcltpXS5jb25zdGFudCkge1xcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcXG4gICAgICAgIH1cXG4gICAgICB9XFxuICAgIH1cXG4gICAgcmV0dXJuIGZhbHNlO1xcbiAgfSxcXG5cXG4gIGdldFNoYWRlcjogZnVuY3Rpb24oKSB7XFxuICAgIHJldHVybiB0aGlzLnNoYWRlcjtcXG4gIH0sXFxuXFxuICAvKipcXG4gICAqIHJldHVybnMgdHJ1ZSBpZiBhIGZlYXR1cmUgbmVlZHMgdG8gYmUgcmVuZGVyZWRcXG4gICAqL1xcbiAgZmlsdGVyOiBmdW5jdGlvbihmZWF0dXJlVHlwZSwgcHJvcHMsIGNvbnRleHQpIHtcXG4gICAgZm9yKHZhciBpIGluIHRoaXMuc2hhZGVyKSB7XFxuICAgICB2YXIgcyA9IHRoaXMuc2hhZGVyW2ldKHByb3BzLCBjb250ZXh0KTtcXG4gICAgIGlmKHMpIHtcXG4gICAgICAgcmV0dXJuIHRydWU7XFxuICAgICB9XFxuICAgIH1cXG4gICAgcmV0dXJuIGZhbHNlO1xcbiAgfSxcXG5cXG4gIC8vXFxuICAvLyBnaXZlbiBhIGdlb2VtdHJ5IHR5cGUgcmV0dXJucyB0aGUgdHJhbnNmb3JtZWQgb25lIGFjb3JkaW5nIHRoZSBDYXJ0b0NTU1xcbiAgLy8gRm9yIHBvaW50cyB0aGVyZSBhcmUgdHdvIGtpbmQgb2YgdHlwZXM6IHBvaW50IGFuZCBzcHJpdGUsIHRoZSBmaXJzdCBvbmVcXG4gIC8vIGlzIGEgY2lyY2xlLCBzZWNvbmQgb25lIGlzIGFuIGltYWdlIHNwcml0ZVxcbiAgLy9cXG4gIC8vIHRoZSBvdGhlciBnZW9tZXRyeSB0eXBlcyBhcmUgdGhlIHNhbWUgdGhhbiBnZW9qc29uIChwb2x5Z29uLCBsaW5lc3RyaW5nLi4uKVxcbiAgLy9cXG4gIHRyYW5zZm9ybUdlb21ldHJ5OiBmdW5jdGlvbih0eXBlKSB7XFxuICAgIHJldHVybiB0eXBlO1xcbiAgfSxcXG5cXG4gIHRyYW5zZm9ybUdlb21ldHJpZXM6IGZ1bmN0aW9uKGdlb2pzb24pIHtcXG4gICAgcmV0dXJuIGdlb2pzb247XFxuICB9XFxuXFxufTtcXG5cXG5DYXJ0b0NTUy5wcm90b3R5cGUgPSB7XFxuXFxuICBzZXRTdHlsZTogZnVuY3Rpb24oc3R5bGUpIHtcXG4gICAgdmFyIGxheWVycyA9IHRoaXMucGFyc2Uoc3R5bGUpO1xcbiAgICBpZighbGF5ZXJzKSB7XFxuICAgICAgdGhyb3cgbmV3IEVycm9yKHRoaXMucGFyc2VfZW52LmVycm9ycyk7XFxuICAgIH1cXG4gICAgdGhpcy5sYXllcnMgPSBsYXllcnMubWFwKGZ1bmN0aW9uKHNoYWRlcikge1xcbiAgICAgICAgcmV0dXJuIG5ldyBDYXJ0b0NTUy5MYXllcihzaGFkZXIpO1xcbiAgICB9KTtcXG4gIH0sXFxuXFxuICBnZXRMYXllcnM6IGZ1bmN0aW9uKCkge1xcbiAgICByZXR1cm4gdGhpcy5sYXllcnM7XFxuICB9LFxcblxcbiAgZ2V0RGVmYXVsdDogZnVuY3Rpb24oKSB7XFxuICAgIHJldHVybiB0aGlzLmZpbmRMYXllcih7IGF0dGFjaG1lbnQ6ICdfX2RlZmF1bHRfXycgfSk7XFxuICB9LFxcblxcbiAgZmluZExheWVyOiBmdW5jdGlvbih3aGVyZSkge1xcbiAgICByZXR1cm4gXy5maW5kKHRoaXMubGF5ZXJzLCBmdW5jdGlvbih2YWx1ZSkge1xcbiAgICAgIGZvciAodmFyIGtleSBpbiB3aGVyZSkge1xcbiAgICAgICAgdmFyIHYgPSB2YWx1ZVtrZXldO1xcbiAgICAgICAgaWYgKHR5cGVvZih2KSA9PT0gJ2Z1bmN0aW9uJykge1xcbiAgICAgICAgICB2ID0gdi5jYWxsKHZhbHVlKTtcXG4gICAgICAgIH1cXG4gICAgICAgIGlmICh3aGVyZVtrZXldICE9PSB2KSByZXR1cm4gZmFsc2U7XFxuICAgICAgfVxcbiAgICAgIHJldHVybiB0cnVlO1xcbiAgICB9KTtcXG4gIH0sXFxuXFxuICBfY3JlYXRlRm46IGZ1bmN0aW9uKG9wcykge1xcbiAgICB2YXIgYm9keSA9IG9wcy5qb2luKCdcXFxcbicpO1xcbiAgICBpZih0aGlzLm9wdGlvbnMuZGVidWcpIGNvbnNvbGUubG9nKGJvZHkpO1xcbiAgICByZXR1cm4gRnVuY3Rpb24oXFxcImRhdGFcXFwiLFxcXCJjdHhcXFwiLCBcXFwidmFyIF92YWx1ZSA9IG51bGw7IFxcXCIgKyAgYm9keSArIFxcXCI7IHJldHVybiBfdmFsdWU7IFxcXCIpO1xcbiAgfSxcXG5cXG4gIF9jb21waWxlOiBmdW5jdGlvbihzaGFkZXIpIHtcXG4gICAgaWYodHlwZW9mIHNoYWRlciA9PT0gJ3N0cmluZycpIHtcXG4gICAgICAgIHNoYWRlciA9IGV2YWwoXFxcIihmdW5jdGlvbigpIHsgcmV0dXJuIFxcXCIgKyBzaGFkZXIgK1xcXCI7IH0pKClcXFwiKTtcXG4gICAgfVxcbiAgICB0aGlzLnNoYWRlcl9zcmMgPSBzaGFkZXI7XFxuICAgIGZvcih2YXIgYXR0ciBpbiBzaGFkZXIpIHtcXG4gICAgICAgIHZhciBjID0gbWFwcGVyW2F0dHJdO1xcbiAgICAgICAgaWYoYykge1xcbiAgICAgICAgICAgIHRoaXMuY29tcGlsZWRbY10gPSBldmFsKFxcXCIoZnVuY3Rpb24oKSB7IHJldHVybiBzaGFkZXJbYXR0cl07IH0pKCk7XFxcIik7XFxuICAgICAgICB9XFxuICAgIH1cXG4gIH0sXFxuICBnZXRJbWFnZVVSTHM6IGZ1bmN0aW9uKCl7XFxuICAgIHJldHVybiB0aGlzLmltYWdlVVJMcztcXG4gIH0sXFxuXFxuICBwYXJzZTogZnVuY3Rpb24oY2FydG9jc3MpIHtcXG4gICAgdmFyIHBhcnNlX2VudiA9IHtcXG4gICAgICBmcmFtZXM6IFtdLFxcbiAgICAgIGVycm9yczogW10sXFxuICAgICAgZXJyb3I6IGZ1bmN0aW9uKG9iaikge1xcbiAgICAgICAgdGhpcy5lcnJvcnMucHVzaChvYmopO1xcbiAgICAgIH1cXG4gICAgfTtcXG4gICAgdGhpcy5wYXJzZV9lbnYgPSBwYXJzZV9lbnY7XFxuXFxuICAgIHZhciBydWxlc2V0ID0gbnVsbDtcXG4gICAgdHJ5IHtcXG4gICAgICBydWxlc2V0ID0gKG5ldyBjYXJ0by5QYXJzZXIocGFyc2VfZW52KSkucGFyc2UoY2FydG9jc3MpO1xcbiAgICB9IGNhdGNoKGUpIHtcXG4gICAgICAvLyBhZGQgdGhlIHN0eWxlLm1zcyBzdHJpbmcgdG8gbWF0Y2ggdGhlIHJlc3BvbnNlIGZyb20gdGhlIHNlcnZlclxcbiAgICAgIHBhcnNlX2Vudi5lcnJvcnMucHVzaChlLm1lc3NhZ2UpO1xcbiAgICAgIHJldHVybjtcXG4gICAgfVxcbiAgICBpZihydWxlc2V0KSB7XFxuXFxuICAgICAgZnVuY3Rpb24gZGVmS2V5KGRlZikge1xcbiAgICAgICAgcmV0dXJuIGRlZi5lbGVtZW50c1swXSArIFxcXCI6OlxcXCIgKyBkZWYuYXR0YWNobWVudDtcXG4gICAgICB9XFxuICAgICAgdmFyIGRlZnMgPSBydWxlc2V0LnRvTGlzdChwYXJzZV9lbnYpO1xcbiAgICAgIGRlZnMucmV2ZXJzZSgpO1xcbiAgICAgIC8vIGdyb3VwIGJ5IGVsZW1lbnRzWzBdLnZhbHVlOjphdHRhY2htZW50XFxuICAgICAgdmFyIGxheWVycyA9IHt9O1xcbiAgICAgIGZvcih2YXIgaSA9IDA7IGkgPCBkZWZzLmxlbmd0aDsgKytpKSB7XFxuICAgICAgICB2YXIgZGVmID0gZGVmc1tpXTtcXG4gICAgICAgIHZhciBrZXkgPSBkZWZLZXkoZGVmKTtcXG4gICAgICAgIHZhciBsYXllciA9IGxheWVyc1trZXldID0gKGxheWVyc1trZXldIHx8IHtcXG4gICAgICAgICAgc3ltYm9saXplcnM6IFtdXFxuICAgICAgICB9KTtcXG5cXG4gICAgICAgIGZvcih2YXIgdSA9IDA7IHU8ZGVmLnJ1bGVzLmxlbmd0aDsgdSsrKXtcXG4gICAgICAgICAgdmFyIHJ1bGUgPSBkZWYucnVsZXNbdV07XFxuICAgICAgICAgICAgaWYocnVsZS5uYW1lID09PSBcXFwibWFya2VyLWZpbGVcXFwiIHx8IHJ1bGUubmFtZSA9PT0gXFxcInBvaW50LWZpbGVcXFwiKXtcXG4gICAgICAgICAgICAgIHZhciB2YWx1ZSA9IHJ1bGUudmFsdWUudmFsdWVbMF0udmFsdWVbMF0udmFsdWUudmFsdWU7XFxuICAgICAgICAgICAgICB0aGlzLmltYWdlVVJMcy5wdXNoKHZhbHVlKTtcXG4gICAgICAgICAgICB9XFxuICAgICAgICB9XFxuXFxuICAgICAgICBsYXllci5mcmFtZXMgPSBbXTtcXG4gICAgICAgIGxheWVyLnpvb20gPSB0cmVlLlpvb20uYWxsO1xcbiAgICAgICAgdmFyIHByb3BzID0gZGVmLnRvSlMocGFyc2VfZW52KTtcXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuZGVidWcpIGNvbnNvbGUubG9nKFxcXCJwcm9wc1xcXCIsIHByb3BzKTtcXG4gICAgICAgIGZvcih2YXIgdiBpbiBwcm9wcykge1xcbiAgICAgICAgICB2YXIgbHlyID0gbGF5ZXJbdl0gPSBsYXllclt2XSB8fCB7XFxuICAgICAgICAgICAgY29uc3RhbnQ6IGZhbHNlLFxcbiAgICAgICAgICAgIHN5bWJvbGl6ZXI6IG51bGwsXFxuICAgICAgICAgICAganM6IFtdLFxcbiAgICAgICAgICAgIGluZGV4OiAwXFxuICAgICAgICAgIH07XFxuICAgICAgICAgIC8vIGJ1aWxkIGphdmFzY3JpcHQgc3RhdGVtZW50c1xcbiAgICAgICAgICBseXIuanMucHVzaChwcm9wc1t2XS5tYXAoZnVuY3Rpb24oYSkgeyByZXR1cm4gYS5qczsgfSkuam9pbignXFxcXG4nKSk7XFxuICAgICAgICAgIC8vIGdldCBzeW1ib2xpemVyIGZvciBwcm9wXFxuICAgICAgICAgIGx5ci5zeW1ib2xpemVyID0gXy5maXJzdChwcm9wc1t2XS5tYXAoZnVuY3Rpb24oYSkgeyByZXR1cm4gYS5zeW1ib2xpemVyOyB9KSk7XFxuICAgICAgICAgIC8vIHNlcmFjaCB0aGUgbWF4IGluZGV4IHRvIGtub3cgcmVuZGVyaW5nIG9yZGVyXFxuICAgICAgICAgIGx5ci5pbmRleCA9IF8ubWF4KHByb3BzW3ZdLm1hcChmdW5jdGlvbihhKSB7IHJldHVybiBhLmluZGV4OyB9KS5jb25jYXQobHlyLmluZGV4KSk7XFxuICAgICAgICAgIGx5ci5jb25zdGFudCA9ICFfLmFueShwcm9wc1t2XS5tYXAoZnVuY3Rpb24oYSkgeyByZXR1cm4gIWEuY29uc3RhbnQ7IH0pKTtcXG4gICAgICAgIH1cXG4gICAgICB9XFxuXFxuICAgICAgdmFyIG9yZGVyZWRfbGF5ZXJzID0gW107XFxuICAgICAgaWYgKHRoaXMub3B0aW9ucy5kZWJ1ZykgY29uc29sZS5sb2cobGF5ZXJzKTtcXG5cXG4gICAgICB2YXIgZG9uZSA9IHt9O1xcbiAgICAgIGZvcih2YXIgaSA9IDA7IGkgPCBkZWZzLmxlbmd0aDsgKytpKSB7XFxuICAgICAgICB2YXIgZGVmID0gZGVmc1tpXTtcXG5cXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuc3RyaWN0KSB7XFxuICAgICAgICAgIGRlZi50b1hNTChwYXJzZV9lbnYsIHt9KTtcXG4gICAgICAgICAgaWYgKHBhcnNlX2Vudi5lcnJvcnMubWVzc2FnZSkge1xcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihwYXJzZV9lbnYuZXJyb3JzLm1lc3NhZ2UpO1xcbiAgICAgICAgICB9XFxuICAgICAgICB9XFxuXFxuICAgICAgICB2YXIgayA9IGRlZktleShkZWYpO1xcbiAgICAgICAgdmFyIGxheWVyID0gbGF5ZXJzW2tdO1xcbiAgICAgICAgaWYoIWRvbmVba10pIHtcXG4gICAgICAgICAgaWYodGhpcy5vcHRpb25zLmRlYnVnKSBjb25zb2xlLmxvZyhcXFwiKipcXFwiLCBrKTtcXG4gICAgICAgICAgZm9yKHZhciBwcm9wIGluIGxheWVyKSB7XFxuICAgICAgICAgICAgaWYgKHByb3AgIT09ICd6b29tJyAmJiBwcm9wICE9PSAnZnJhbWVzJyAmJiBwcm9wICE9PSAnc3ltYm9saXplcnMnKSB7XFxuICAgICAgICAgICAgICBpZih0aGlzLm9wdGlvbnMuZGVidWcpIGNvbnNvbGUubG9nKFxcXCIqXFxcIiwgcHJvcCk7XFxuICAgICAgICAgICAgICBsYXllcltwcm9wXS5zdHlsZSA9IHRoaXMuX2NyZWF0ZUZuKGxheWVyW3Byb3BdLmpzKTtcXG4gICAgICAgICAgICAgIGxheWVyLnN5bWJvbGl6ZXJzLnB1c2gobGF5ZXJbcHJvcF0uc3ltYm9saXplcik7XFxuICAgICAgICAgICAgICBsYXllci5zeW1ib2xpemVycyA9IF8udW5pcShsYXllci5zeW1ib2xpemVycyk7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICB9XFxuICAgICAgICAgIGxheWVyLmF0dGFjaG1lbnQgPSBrO1xcbiAgICAgICAgICBvcmRlcmVkX2xheWVycy5wdXNoKGxheWVyKTtcXG4gICAgICAgICAgZG9uZVtrXSA9IHRydWU7XFxuICAgICAgICB9XFxuICAgICAgICBsYXllci56b29tIHw9IGRlZi56b29tO1xcbiAgICAgICAgbGF5ZXIuZnJhbWVzLnB1c2goZGVmLmZyYW1lX29mZnNldCk7XFxuICAgICAgfVxcblxcbiAgICAgIC8vIHVuaXEgdGhlIGZyYW1lc1xcbiAgICAgIGZvcihpID0gMDsgaSA8IG9yZGVyZWRfbGF5ZXJzLmxlbmd0aDsgKytpKSB7XFxuICAgICAgICBvcmRlcmVkX2xheWVyc1tpXS5mcmFtZXMgPSBfLnVuaXEob3JkZXJlZF9sYXllcnNbaV0uZnJhbWVzKTtcXG4gICAgICB9XFxuXFxuICAgICAgcmV0dXJuIG9yZGVyZWRfbGF5ZXJzO1xcblxcbiAgICB9XFxuICAgIHJldHVybiBudWxsO1xcbiAgfVxcbn07XFxuXFxuXFxuY2FydG8uUmVuZGVyZXJKUyA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XFxuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnMgfHwge307XFxuICAgIHRoaXMub3B0aW9ucy5tYXBuaWtfdmVyc2lvbiA9IHRoaXMub3B0aW9ucy5tYXBuaWtfdmVyc2lvbiB8fCAnbGF0ZXN0JztcXG4gICAgdGhpcy5yZWZlcmVuY2UgPSB0aGlzLm9wdGlvbnMucmVmZXJlbmNlIHx8IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vdG9ycXVlLXJlZmVyZW5jZSAqLyA2OSkudmVyc2lvbi5sYXRlc3Q7XFxuICAgIHRoaXMub3B0aW9ucy5zdHJpY3QgPSB0aGlzLm9wdGlvbnMuaGFzT3duUHJvcGVydHkoJ3N0cmljdCcpID8gdGhpcy5vcHRpb25zLnN0cmljdCA6IGZhbHNlO1xcbn07XFxuXFxuLy8gUHJlcGFyZSBhIGphdmFzY3JpcHQgb2JqZWN0IHdoaWNoIGNvbnRhaW5zIHRoZSBsYXllcnNcXG5jYXJ0by5SZW5kZXJlckpTLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoY2FydG9jc3MsIGNhbGxiYWNrKSB7XFxuICAgIHRyZWUuUmVmZXJlbmNlLnNldERhdGEodGhpcy5yZWZlcmVuY2UpO1xcbiAgICByZXR1cm4gbmV3IENhcnRvQ1NTKGNhcnRvY3NzLCB0aGlzLm9wdGlvbnMpO1xcbn1cXG5cXG5pZih0cnVlKSB7XFxuICBtb2R1bGUuZXhwb3J0cyA9IGNhcnRvLlJlbmRlcmVySlM7XFxufVxcblxcblxcbn0pKF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2NhcnRvICovIDI3KSk7XFxuXFxuLyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovfS5jYWxsKGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vLi4vLi4vLi4vd2VicGFjay9idWlsZGluL2dsb2JhbC5qcyAqLyAzKSkpLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lPRFF1YW5NaUxDSnpiM1Z5WTJWeklqcGJJbmRsWW5CaFkyczZMeTh2TGk5K0wyTmhjblJ2TDJ4cFlpOWpZWEowYnk5eVpXNWtaWEpsY2w5cWN5NXFjejgxWXpNNUlsMHNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJaWhtZFc1amRHbHZiaWhqWVhKMGJ5a2dlMXh1ZG1GeUlIUnlaV1VnUFNCeVpYRjFhWEpsS0NjdUwzUnlaV1VuS1R0Y2JuWmhjaUJmSUQwZ1oyeHZZbUZzTGw4Z2ZId2djbVZ4ZFdseVpTZ25kVzVrWlhKelkyOXlaU2NwTzF4dVhHNWNibVoxYm1OMGFXOXVJRU5oY25SdlExTlRLSE4wZVd4bExDQnZjSFJwYjI1ektTQjdYRzRnSUhSb2FYTXViM0IwYVc5dWN5QTlJRzl3ZEdsdmJuTWdmSHdnZTMwN1hHNGdJSFJvYVhNdWFXMWhaMlZWVWt4eklEMGdXMTA3WEc0Z0lHbG1LSE4wZVd4bEtTQjdYRzRnSUNBZ2RHaHBjeTV6WlhSVGRIbHNaU2h6ZEhsc1pTazdYRzRnSUgxY2JuMWNibHh1UTJGeWRHOURVMU11VEdGNVpYSWdQU0JtZFc1amRHbHZiaWh6YUdGa1pYSXNJRzl3ZEdsdmJuTXBJSHRjYmlBZ2RHaHBjeTV2Y0hScGIyNXpJRDBnYjNCMGFXOXVjenRjYmlBZ2RHaHBjeTV6YUdGa1pYSWdQU0J6YUdGa1pYSTdYRzU5TzF4dVhHNWNia05oY25SdlExTlRMa3hoZVdWeUxuQnliM1J2ZEhsd1pTQTlJSHRjYmx4dUlDQm1kV3hzVG1GdFpUb2dablZ1WTNScGIyNG9LU0I3WEc0Z0lDQWdjbVYwZFhKdUlIUm9hWE11YzJoaFpHVnlMbUYwZEdGamFHMWxiblE3WEc0Z0lIMHNYRzVjYmlBZ2JtRnRaVG9nWm5WdVkzUnBiMjRvS1NCN1hHNGdJQ0FnY21WMGRYSnVJSFJvYVhNdVpuVnNiRTVoYldVb0tTNXpjR3hwZENnbk9qb25LVnN3WFR0Y2JpQWdmU3hjYmx4dUlDQXZMeUJtY21GdFpYTWdkR2hwY3lCc1lYbGxjaUJ1WldWa0lIUnZJR0psSUhKbGJtUmxjbVZrWEc0Z0lHWnlZVzFsY3pvZ1puVnVZM1JwYjI0b0tTQjdYRzRnSUNBZ2NtVjBkWEp1SUhSb2FYTXVjMmhoWkdWeUxtWnlZVzFsY3p0Y2JpQWdmU3hjYmx4dUlDQmhkSFJoWTJodFpXNTBPaUJtZFc1amRHbHZiaWdwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdkR2hwY3k1bWRXeHNUbUZ0WlNncExuTndiR2wwS0NjNk9pY3BXekZkTzF4dUlDQjlMRnh1WEc0Z0lHVjJZV3c2SUdaMWJtTjBhVzl1S0hCeWIzQXBJSHRjYmlBZ0lDQjJZWElnY0NBOUlIUm9hWE11YzJoaFpHVnlXM0J5YjNCZE8xeHVJQ0FnSUdsbUlDZ2hjQ0I4ZkNBaGNDNXpkSGxzWlNrZ2NtVjBkWEp1TzF4dUlDQWdJSEpsZEhWeWJpQndMbk4wZVd4bEtIdDlMQ0I3SUhwdmIyMDZJREFzSUNkbWNtRnRaUzF2Wm1aelpYUW5PaUF3SUgwcE8xeHVJQ0I5TEZ4dVhHNGdJQzhxWEc0Z0lDQXFJR0J3Y205d2MyQTZJR1psWVhSMWNtVWdjSEp2Y0dWeWRHbGxjMXh1SUNBZ0tpQmdZMjl1ZEdWNGRHQTZJSEpsYm1SbGNtbHVaeUJ3Y205d1pYSjBhV1Z6TENCcExtVWdlbTl2YlZ4dUlDQWdLaTljYmlBZ1oyVjBVM1I1YkdVNklHWjFibU4wYVc5dUtIQnliM0J6TENCamIyNTBaWGgwS1NCN1hHNGdJQ0FnZG1GeUlITjBlV3hsSUQwZ2UzMDdYRzRnSUNBZ1ptOXlLSFpoY2lCcElHbHVJSFJvYVhNdWMyaGhaR1Z5S1NCN1hHNGdJQ0FnSUNCcFppaHBJQ0U5UFNBbllYUjBZV05vYldWdWRDY2dKaVlnYVNBaFBUMGdKM3B2YjIwbklDWW1JR2tnSVQwOUlDZG1jbUZ0WlhNbklDWW1JR2tnSVQwOUlDZHplVzFpYjJ4cGVtVnljeWNwSUh0Y2JpQWdJQ0FnSUNBZ2MzUjViR1ZiYVYwZ1BTQjBhR2x6TG5Ob1lXUmxjbHRwWFM1emRIbHNaU2h3Y205d2N5d2dZMjl1ZEdWNGRDazdYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVJQ0FnSUhKbGRIVnliaUJ6ZEhsc1pUdGNiaUFnZlN4Y2JseHVJQ0F2S2lwY2JpQWdJQ29nY21WMGRYSnVJSFJvWlNCemVXMWliMnhwZW1WeWN5QjBhR0YwSUc1bFpXUWdkRzhnWW1VZ2NtVnVaR1Z5WldRZ2QybDBhRnh1SUNBZ0tpQjBhR2x6SUhOMGVXeGxMaUJVYUdVZ2IzSmtaWElnYVhNZ2RHaGxJSEpsYm1SbGNtbHVaeUJ2Y21SbGNpNWNiaUFnSUNvZ1FISmxkSFZ5Ym5NZ1lTQnNhWE4wSUhkcGRHZ2dNeUJ3YjNOemFXSnNaU0IyWVd4MVpYTWdKMnhwYm1VbkxDQW5iV0Z5YTJWeUp5d2dKM0J2YkhsbmIyNG5YRzRnSUNBcUwxeHVJQ0JuWlhSVGVXMWliMnhwZW1WeWN6b2dablZ1WTNScGIyNG9LU0I3WEc0Z0lDQWdjbVYwZFhKdUlIUm9hWE11YzJoaFpHVnlMbk41YldKdmJHbDZaWEp6TzF4dUlDQjlMRnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQnlaWFIxY201eklHbG1JSFJvWlNCemRIbHNaU0IyWVhKcFpYTWdkMmwwYUNCemIyMWxJR1psWVhSMWNtVWdjSEp2Y0dWeWRIa3VYRzRnSUNBcUlGVnpaV1oxYkNCMGJ5QnZjSFJwYldsNlpTQnlaVzVrWlhKcGJtZGNiaUFnSUNvdlhHNGdJR2x6Vm1GeWFXRmliR1U2SUdaMWJtTjBhVzl1S0NrZ2UxeHVJQ0FnSUdadmNpaDJZWElnYVNCcGJpQjBhR2x6TG5Ob1lXUmxjaWtnZTF4dUlDQWdJQ0FnYVdZb2FTQWhQVDBnSjJGMGRHRmphRzFsYm5RbklDWW1JR2tnSVQwOUlDZDZiMjl0SnlBbUppQnBJQ0U5UFNBblpuSmhiV1Z6SnlBbUppQnBJQ0U5UFNBbmMzbHRZbTlzYVhwbGNuTW5LU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDZ2hkR2hwY3k1emFHRmtaWEpiYVYwdVkyOXVjM1JoYm5RcElIdGNiaUFnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkSEoxWlR0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JpQWdJQ0J5WlhSMWNtNGdabUZzYzJVN1hHNGdJSDBzWEc1Y2JpQWdaMlYwVTJoaFpHVnlPaUJtZFc1amRHbHZiaWdwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdkR2hwY3k1emFHRmtaWEk3WEc0Z0lIMHNYRzVjYmlBZ0x5b3FYRzRnSUNBcUlISmxkSFZ5Ym5NZ2RISjFaU0JwWmlCaElHWmxZWFIxY21VZ2JtVmxaSE1nZEc4Z1ltVWdjbVZ1WkdWeVpXUmNiaUFnSUNvdlhHNGdJR1pwYkhSbGNqb2dablZ1WTNScGIyNG9abVZoZEhWeVpWUjVjR1VzSUhCeWIzQnpMQ0JqYjI1MFpYaDBLU0I3WEc0Z0lDQWdabTl5S0haaGNpQnBJR2x1SUhSb2FYTXVjMmhoWkdWeUtTQjdYRzRnSUNBZ0lIWmhjaUJ6SUQwZ2RHaHBjeTV6YUdGa1pYSmJhVjBvY0hKdmNITXNJR052Ym5SbGVIUXBPMXh1SUNBZ0lDQnBaaWh6S1NCN1hHNGdJQ0FnSUNBZ2NtVjBkWEp1SUhSeWRXVTdYRzRnSUNBZ0lIMWNiaUFnSUNCOVhHNGdJQ0FnY21WMGRYSnVJR1poYkhObE8xeHVJQ0I5TEZ4dVhHNGdJQzh2WEc0Z0lDOHZJR2RwZG1WdUlHRWdaMlZ2WlcxMGNua2dkSGx3WlNCeVpYUjFjbTV6SUhSb1pTQjBjbUZ1YzJadmNtMWxaQ0J2Ym1VZ1lXTnZjbVJwYm1jZ2RHaGxJRU5oY25SdlExTlRYRzRnSUM4dklFWnZjaUJ3YjJsdWRITWdkR2hsY21VZ1lYSmxJSFIzYnlCcmFXNWtJRzltSUhSNWNHVnpPaUJ3YjJsdWRDQmhibVFnYzNCeWFYUmxMQ0IwYUdVZ1ptbHljM1FnYjI1bFhHNGdJQzh2SUdseklHRWdZMmx5WTJ4bExDQnpaV052Ym1RZ2IyNWxJR2x6SUdGdUlHbHRZV2RsSUhOd2NtbDBaVnh1SUNBdkwxeHVJQ0F2THlCMGFHVWdiM1JvWlhJZ1oyVnZiV1YwY25rZ2RIbHdaWE1nWVhKbElIUm9aU0J6WVcxbElIUm9ZVzRnWjJWdmFuTnZiaUFvY0c5c2VXZHZiaXdnYkdsdVpYTjBjbWx1Wnk0dUxpbGNiaUFnTHk5Y2JpQWdkSEpoYm5ObWIzSnRSMlZ2YldWMGNuazZJR1oxYm1OMGFXOXVLSFI1Y0dVcElIdGNiaUFnSUNCeVpYUjFjbTRnZEhsd1pUdGNiaUFnZlN4Y2JseHVJQ0IwY21GdWMyWnZjbTFIWlc5dFpYUnlhV1Z6T2lCbWRXNWpkR2x2YmloblpXOXFjMjl1S1NCN1hHNGdJQ0FnY21WMGRYSnVJR2RsYjJwemIyNDdYRzRnSUgxY2JseHVmVHRjYmx4dVEyRnlkRzlEVTFNdWNISnZkRzkwZVhCbElEMGdlMXh1WEc0Z0lITmxkRk4wZVd4bE9pQm1kVzVqZEdsdmJpaHpkSGxzWlNrZ2UxeHVJQ0FnSUhaaGNpQnNZWGxsY25NZ1BTQjBhR2x6TG5CaGNuTmxLSE4wZVd4bEtUdGNiaUFnSUNCcFppZ2hiR0Y1WlhKektTQjdYRzRnSUNBZ0lDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb2RHaHBjeTV3WVhKelpWOWxibll1WlhKeWIzSnpLVHRjYmlBZ0lDQjlYRzRnSUNBZ2RHaHBjeTVzWVhsbGNuTWdQU0JzWVhsbGNuTXViV0Z3S0daMWJtTjBhVzl1S0hOb1lXUmxjaWtnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnYm1WM0lFTmhjblJ2UTFOVExreGhlV1Z5S0hOb1lXUmxjaWs3WEc0Z0lDQWdmU2s3WEc0Z0lIMHNYRzVjYmlBZ1oyVjBUR0Y1WlhKek9pQm1kVzVqZEdsdmJpZ3BJSHRjYmlBZ0lDQnlaWFIxY200Z2RHaHBjeTVzWVhsbGNuTTdYRzRnSUgwc1hHNWNiaUFnWjJWMFJHVm1ZWFZzZERvZ1puVnVZM1JwYjI0b0tTQjdYRzRnSUNBZ2NtVjBkWEp1SUhSb2FYTXVabWx1WkV4aGVXVnlLSHNnWVhSMFlXTm9iV1Z1ZERvZ0oxOWZaR1ZtWVhWc2RGOWZKeUI5S1R0Y2JpQWdmU3hjYmx4dUlDQm1hVzVrVEdGNVpYSTZJR1oxYm1OMGFXOXVLSGRvWlhKbEtTQjdYRzRnSUNBZ2NtVjBkWEp1SUY4dVptbHVaQ2gwYUdsekxteGhlV1Z5Y3l3Z1puVnVZM1JwYjI0b2RtRnNkV1VwSUh0Y2JpQWdJQ0FnSUdadmNpQW9kbUZ5SUd0bGVTQnBiaUIzYUdWeVpTa2dlMXh1SUNBZ0lDQWdJQ0IyWVhJZ2RpQTlJSFpoYkhWbFcydGxlVjA3WEc0Z0lDQWdJQ0FnSUdsbUlDaDBlWEJsYjJZb2Rpa2dQVDA5SUNkbWRXNWpkR2x2YmljcElIdGNiaUFnSUNBZ0lDQWdJQ0IySUQwZ2RpNWpZV3hzS0haaGJIVmxLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCcFppQW9kMmhsY21WYmEyVjVYU0FoUFQwZ2Rpa2djbVYwZFhKdUlHWmhiSE5sTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJQ0FnY21WMGRYSnVJSFJ5ZFdVN1hHNGdJQ0FnZlNrN1hHNGdJSDBzWEc1Y2JpQWdYMk55WldGMFpVWnVPaUJtZFc1amRHbHZiaWh2Y0hNcElIdGNiaUFnSUNCMllYSWdZbTlrZVNBOUlHOXdjeTVxYjJsdUtDZGNYRzRuS1R0Y2JpQWdJQ0JwWmloMGFHbHpMbTl3ZEdsdmJuTXVaR1ZpZFdjcElHTnZibk52YkdVdWJHOW5LR0p2WkhrcE8xeHVJQ0FnSUhKbGRIVnliaUJHZFc1amRHbHZiaWhjSW1SaGRHRmNJaXhjSW1OMGVGd2lMQ0JjSW5aaGNpQmZkbUZzZFdVZ1BTQnVkV3hzT3lCY0lpQXJJQ0JpYjJSNUlDc2dYQ0k3SUhKbGRIVnliaUJmZG1Gc2RXVTdJRndpS1R0Y2JpQWdmU3hjYmx4dUlDQmZZMjl0Y0dsc1pUb2dablZ1WTNScGIyNG9jMmhoWkdWeUtTQjdYRzRnSUNBZ2FXWW9kSGx3Wlc5bUlITm9ZV1JsY2lBOVBUMGdKM04wY21sdVp5Y3BJSHRjYmlBZ0lDQWdJQ0FnYzJoaFpHVnlJRDBnWlhaaGJDaGNJaWhtZFc1amRHbHZiaWdwSUhzZ2NtVjBkWEp1SUZ3aUlDc2djMmhoWkdWeUlDdGNJanNnZlNrb0tWd2lLVHRjYmlBZ0lDQjlYRzRnSUNBZ2RHaHBjeTV6YUdGa1pYSmZjM0pqSUQwZ2MyaGhaR1Z5TzF4dUlDQWdJR1p2Y2loMllYSWdZWFIwY2lCcGJpQnphR0ZrWlhJcElIdGNiaUFnSUNBZ0lDQWdkbUZ5SUdNZ1BTQnRZWEJ3WlhKYllYUjBjbDA3WEc0Z0lDQWdJQ0FnSUdsbUtHTXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WTI5dGNHbHNaV1JiWTEwZ1BTQmxkbUZzS0Z3aUtHWjFibU4wYVc5dUtDa2dleUJ5WlhSMWNtNGdjMmhoWkdWeVcyRjBkSEpkT3lCOUtTZ3BPMXdpS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JpQWdmU3hjYmlBZ1oyVjBTVzFoWjJWVlVreHpPaUJtZFc1amRHbHZiaWdwZTF4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TG1sdFlXZGxWVkpNY3p0Y2JpQWdmU3hjYmx4dUlDQndZWEp6WlRvZ1puVnVZM1JwYjI0b1kyRnlkRzlqYzNNcElIdGNiaUFnSUNCMllYSWdjR0Z5YzJWZlpXNTJJRDBnZTF4dUlDQWdJQ0FnWm5KaGJXVnpPaUJiWFN4Y2JpQWdJQ0FnSUdWeWNtOXljem9nVzEwc1hHNGdJQ0FnSUNCbGNuSnZjam9nWm5WdVkzUnBiMjRvYjJKcUtTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdVpYSnliM0p6TG5CMWMyZ29iMkpxS1R0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0I5TzF4dUlDQWdJSFJvYVhNdWNHRnljMlZmWlc1MklEMGdjR0Z5YzJWZlpXNTJPMXh1WEc0Z0lDQWdkbUZ5SUhKMWJHVnpaWFFnUFNCdWRXeHNPMXh1SUNBZ0lIUnllU0I3WEc0Z0lDQWdJQ0J5ZFd4bGMyVjBJRDBnS0c1bGR5QmpZWEowYnk1UVlYSnpaWElvY0dGeWMyVmZaVzUyS1NrdWNHRnljMlVvWTJGeWRHOWpjM01wTzF4dUlDQWdJSDBnWTJGMFkyZ29aU2tnZTF4dUlDQWdJQ0FnTHk4Z1lXUmtJSFJvWlNCemRIbHNaUzV0YzNNZ2MzUnlhVzVuSUhSdklHMWhkR05vSUhSb1pTQnlaWE53YjI1elpTQm1jbTl0SUhSb1pTQnpaWEoyWlhKY2JpQWdJQ0FnSUhCaGNuTmxYMlZ1ZGk1bGNuSnZjbk11Y0hWemFDaGxMbTFsYzNOaFoyVXBPMXh1SUNBZ0lDQWdjbVYwZFhKdU8xeHVJQ0FnSUgxY2JpQWdJQ0JwWmloeWRXeGxjMlYwS1NCN1hHNWNiaUFnSUNBZ0lHWjFibU4wYVc5dUlHUmxaa3RsZVNoa1pXWXBJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJR1JsWmk1bGJHVnRaVzUwYzFzd1hTQXJJRndpT2pwY0lpQXJJR1JsWmk1aGRIUmhZMmh0Wlc1ME8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2RtRnlJR1JsWm5NZ1BTQnlkV3hsYzJWMExuUnZUR2x6ZENod1lYSnpaVjlsYm5ZcE8xeHVJQ0FnSUNBZ1pHVm1jeTV5WlhabGNuTmxLQ2s3WEc0Z0lDQWdJQ0F2THlCbmNtOTFjQ0JpZVNCbGJHVnRaVzUwYzFzd1hTNTJZV3gxWlRvNllYUjBZV05vYldWdWRGeHVJQ0FnSUNBZ2RtRnlJR3hoZVdWeWN5QTlJSHQ5TzF4dUlDQWdJQ0FnWm05eUtIWmhjaUJwSUQwZ01Ec2dhU0E4SUdSbFpuTXViR1Z1WjNSb095QXJLMmtwSUh0Y2JpQWdJQ0FnSUNBZ2RtRnlJR1JsWmlBOUlHUmxabk5iYVYwN1hHNGdJQ0FnSUNBZ0lIWmhjaUJyWlhrZ1BTQmtaV1pMWlhrb1pHVm1LVHRjYmlBZ0lDQWdJQ0FnZG1GeUlHeGhlV1Z5SUQwZ2JHRjVaWEp6VzJ0bGVWMGdQU0FvYkdGNVpYSnpXMnRsZVYwZ2ZId2dlMXh1SUNBZ0lDQWdJQ0FnSUhONWJXSnZiR2w2WlhKek9pQmJYVnh1SUNBZ0lDQWdJQ0I5S1R0Y2JseHVJQ0FnSUNBZ0lDQm1iM0lvZG1GeUlIVWdQU0F3T3lCMVBHUmxaaTV5ZFd4bGN5NXNaVzVuZEdnN0lIVXJLeWw3WEc0Z0lDQWdJQ0FnSUNBZ2RtRnlJSEoxYkdVZ1BTQmtaV1l1Y25Wc1pYTmJkVjA3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaWh5ZFd4bExtNWhiV1VnUFQwOUlGd2liV0Z5YTJWeUxXWnBiR1ZjSWlCOGZDQnlkV3hsTG01aGJXVWdQVDA5SUZ3aWNHOXBiblF0Wm1sc1pWd2lLWHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUhaaGJIVmxJRDBnY25Wc1pTNTJZV3gxWlM1MllXeDFaVnN3WFM1MllXeDFaVnN3WFM1MllXeDFaUzUyWVd4MVpUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVwYldGblpWVlNUSE11Y0hWemFDaDJZV3gxWlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQnNZWGxsY2k1bWNtRnRaWE1nUFNCYlhUdGNiaUFnSUNBZ0lDQWdiR0Y1WlhJdWVtOXZiU0E5SUhSeVpXVXVXbTl2YlM1aGJHdzdYRzRnSUNBZ0lDQWdJSFpoY2lCd2NtOXdjeUE5SUdSbFppNTBiMHBUS0hCaGNuTmxYMlZ1ZGlrN1hHNGdJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxtOXdkR2x2Ym5NdVpHVmlkV2NwSUdOdmJuTnZiR1V1Ykc5bktGd2ljSEp2Y0hOY0lpd2djSEp2Y0hNcE8xeHVJQ0FnSUNBZ0lDQm1iM0lvZG1GeUlIWWdhVzRnY0hKdmNITXBJSHRjYmlBZ0lDQWdJQ0FnSUNCMllYSWdiSGx5SUQwZ2JHRjVaWEpiZGwwZ1BTQnNZWGxsY2x0MlhTQjhmQ0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZEdGdWREb2dabUZzYzJVc1hHNGdJQ0FnSUNBZ0lDQWdJQ0J6ZVcxaWIyeHBlbVZ5T2lCdWRXeHNMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2FuTTZJRnRkTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdhVzVrWlhnNklEQmNiaUFnSUNBZ0lDQWdJQ0I5TzF4dUlDQWdJQ0FnSUNBZ0lDOHZJR0oxYVd4a0lHcGhkbUZ6WTNKcGNIUWdjM1JoZEdWdFpXNTBjMXh1SUNBZ0lDQWdJQ0FnSUd4NWNpNXFjeTV3ZFhOb0tIQnliM0J6VzNaZExtMWhjQ2htZFc1amRHbHZiaWhoS1NCN0lISmxkSFZ5YmlCaExtcHpPeUI5S1M1cWIybHVLQ2RjWEc0bktTazdYRzRnSUNBZ0lDQWdJQ0FnTHk4Z1oyVjBJSE41YldKdmJHbDZaWElnWm05eUlIQnliM0JjYmlBZ0lDQWdJQ0FnSUNCc2VYSXVjM2x0WW05c2FYcGxjaUE5SUY4dVptbHljM1FvY0hKdmNITmJkbDB1YldGd0tHWjFibU4wYVc5dUtHRXBJSHNnY21WMGRYSnVJR0V1YzNsdFltOXNhWHBsY2pzZ2ZTa3BPMXh1SUNBZ0lDQWdJQ0FnSUM4dklITmxjbUZqYUNCMGFHVWdiV0Y0SUdsdVpHVjRJSFJ2SUd0dWIzY2djbVZ1WkdWeWFXNW5JRzl5WkdWeVhHNGdJQ0FnSUNBZ0lDQWdiSGx5TG1sdVpHVjRJRDBnWHk1dFlYZ29jSEp2Y0hOYmRsMHViV0Z3S0daMWJtTjBhVzl1S0dFcElIc2djbVYwZFhKdUlHRXVhVzVrWlhnN0lIMHBMbU52Ym1OaGRDaHNlWEl1YVc1a1pYZ3BLVHRjYmlBZ0lDQWdJQ0FnSUNCc2VYSXVZMjl1YzNSaGJuUWdQU0FoWHk1aGJua29jSEp2Y0hOYmRsMHViV0Z3S0daMWJtTjBhVzl1S0dFcElIc2djbVYwZFhKdUlDRmhMbU52Ym5OMFlXNTBPeUI5S1NrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lIMWNibHh1SUNBZ0lDQWdkbUZ5SUc5eVpHVnlaV1JmYkdGNVpYSnpJRDBnVzEwN1hHNGdJQ0FnSUNCcFppQW9kR2hwY3k1dmNIUnBiMjV6TG1SbFluVm5LU0JqYjI1emIyeGxMbXh2Wnloc1lYbGxjbk1wTzF4dVhHNGdJQ0FnSUNCMllYSWdaRzl1WlNBOUlIdDlPMXh1SUNBZ0lDQWdabTl5S0haaGNpQnBJRDBnTURzZ2FTQThJR1JsWm5NdWJHVnVaM1JvT3lBcksya3BJSHRjYmlBZ0lDQWdJQ0FnZG1GeUlHUmxaaUE5SUdSbFpuTmJhVjA3WEc1Y2JpQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdWIzQjBhVzl1Y3k1emRISnBZM1FwSUh0Y2JpQWdJQ0FnSUNBZ0lDQmtaV1l1ZEc5WVRVd29jR0Z5YzJWZlpXNTJMQ0I3ZlNrN1hHNGdJQ0FnSUNBZ0lDQWdhV1lnS0hCaGNuTmxYMlZ1ZGk1bGNuSnZjbk11YldWemMyRm5aU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2h5YjNjZ2JtVjNJRVZ5Y205eUtIQmhjbk5sWDJWdWRpNWxjbkp2Y25NdWJXVnpjMkZuWlNrN1hHNGdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ2RtRnlJR3NnUFNCa1pXWkxaWGtvWkdWbUtUdGNiaUFnSUNBZ0lDQWdkbUZ5SUd4aGVXVnlJRDBnYkdGNVpYSnpXMnRkTzF4dUlDQWdJQ0FnSUNCcFppZ2haRzl1WlZ0clhTa2dlMXh1SUNBZ0lDQWdJQ0FnSUdsbUtIUm9hWE11YjNCMGFXOXVjeTVrWldKMVp5a2dZMjl1YzI5c1pTNXNiMmNvWENJcUtsd2lMQ0JyS1R0Y2JpQWdJQ0FnSUNBZ0lDQm1iM0lvZG1GeUlIQnliM0FnYVc0Z2JHRjVaWElwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNod2NtOXdJQ0U5UFNBbmVtOXZiU2NnSmlZZ2NISnZjQ0FoUFQwZ0oyWnlZVzFsY3ljZ0ppWWdjSEp2Y0NBaFBUMGdKM041YldKdmJHbDZaWEp6SnlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppaDBhR2x6TG05d2RHbHZibk11WkdWaWRXY3BJR052Ym5OdmJHVXViRzluS0Z3aUtsd2lMQ0J3Y205d0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2JHRjVaWEpiY0hKdmNGMHVjM1I1YkdVZ1BTQjBhR2x6TGw5amNtVmhkR1ZHYmloc1lYbGxjbHR3Y205d1hTNXFjeWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJR3hoZVdWeUxuTjViV0p2YkdsNlpYSnpMbkIxYzJnb2JHRjVaWEpiY0hKdmNGMHVjM2x0WW05c2FYcGxjaWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJR3hoZVdWeUxuTjViV0p2YkdsNlpYSnpJRDBnWHk1MWJtbHhLR3hoZVdWeUxuTjViV0p2YkdsNlpYSnpLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ2JHRjVaWEl1WVhSMFlXTm9iV1Z1ZENBOUlHczdYRzRnSUNBZ0lDQWdJQ0FnYjNKa1pYSmxaRjlzWVhsbGNuTXVjSFZ6YUNoc1lYbGxjaWs3WEc0Z0lDQWdJQ0FnSUNBZ1pHOXVaVnRyWFNBOUlIUnlkV1U3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2JHRjVaWEl1ZW05dmJTQjhQU0JrWldZdWVtOXZiVHRjYmlBZ0lDQWdJQ0FnYkdGNVpYSXVabkpoYldWekxuQjFjMmdvWkdWbUxtWnlZVzFsWDI5bVpuTmxkQ2s3WEc0Z0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUM4dklIVnVhWEVnZEdobElHWnlZVzFsYzF4dUlDQWdJQ0FnWm05eUtHa2dQU0F3T3lCcElEd2diM0prWlhKbFpGOXNZWGxsY25NdWJHVnVaM1JvT3lBcksya3BJSHRjYmlBZ0lDQWdJQ0FnYjNKa1pYSmxaRjlzWVhsbGNuTmJhVjB1Wm5KaGJXVnpJRDBnWHk1MWJtbHhLRzl5WkdWeVpXUmZiR0Y1WlhKelcybGRMbVp5WVcxbGN5azdYRzRnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJSEpsZEhWeWJpQnZjbVJsY21Wa1gyeGhlV1Z5Y3p0Y2JseHVJQ0FnSUgxY2JpQWdJQ0J5WlhSMWNtNGdiblZzYkR0Y2JpQWdmVnh1ZlR0Y2JseHVYRzVqWVhKMGJ5NVNaVzVrWlhKbGNrcFRJRDBnWm5WdVkzUnBiMjRnS0c5d2RHbHZibk1wSUh0Y2JpQWdJQ0IwYUdsekxtOXdkR2x2Ym5NZ1BTQnZjSFJwYjI1eklIeDhJSHQ5TzF4dUlDQWdJSFJvYVhNdWIzQjBhVzl1Y3k1dFlYQnVhV3RmZG1WeWMybHZiaUE5SUhSb2FYTXViM0IwYVc5dWN5NXRZWEJ1YVd0ZmRtVnljMmx2YmlCOGZDQW5iR0YwWlhOMEp6dGNiaUFnSUNCMGFHbHpMbkpsWm1WeVpXNWpaU0E5SUhSb2FYTXViM0IwYVc5dWN5NXlaV1psY21WdVkyVWdmSHdnY21WeGRXbHlaU2duTGk5MGIzSnhkV1V0Y21WbVpYSmxibU5sSnlrdWRtVnljMmx2Ymk1c1lYUmxjM1E3WEc0Z0lDQWdkR2hwY3k1dmNIUnBiMjV6TG5OMGNtbGpkQ0E5SUhSb2FYTXViM0IwYVc5dWN5NW9ZWE5QZDI1UWNtOXdaWEowZVNnbmMzUnlhV04wSnlrZ1B5QjBhR2x6TG05d2RHbHZibk11YzNSeWFXTjBJRG9nWm1Gc2MyVTdYRzU5TzF4dVhHNHZMeUJRY21Wd1lYSmxJR0VnYW1GMllYTmpjbWx3ZENCdlltcGxZM1FnZDJocFkyZ2dZMjl1ZEdGcGJuTWdkR2hsSUd4aGVXVnljMXh1WTJGeWRHOHVVbVZ1WkdWeVpYSktVeTV3Y205MGIzUjVjR1V1Y21WdVpHVnlJRDBnWm5WdVkzUnBiMjRnY21WdVpHVnlLR05oY25SdlkzTnpMQ0JqWVd4c1ltRmpheWtnZTF4dUlDQWdJSFJ5WldVdVVtVm1aWEpsYm1ObExuTmxkRVJoZEdFb2RHaHBjeTV5WldabGNtVnVZMlVwTzF4dUlDQWdJSEpsZEhWeWJpQnVaWGNnUTJGeWRHOURVMU1vWTJGeWRHOWpjM01zSUhSb2FYTXViM0IwYVc5dWN5azdYRzU5WEc1Y2JtbG1LSFI1Y0dWdlppaHRiMlIxYkdVcElDRTlQU0FuZFc1a1pXWnBibVZrSnlrZ2UxeHVJQ0J0YjJSMWJHVXVaWGh3YjNKMGN5QTlJR05oY25SdkxsSmxibVJsY21WeVNsTTdYRzU5WEc1Y2JseHVmU2tvY21WeGRXbHlaU2duTGk0dlkyRnlkRzhuS1NrN1hHNWNibHh1WEc0dkx5OHZMeTh2THk4dkx5OHZMeTh2THk5Y2JpOHZJRmRGUWxCQlEwc2dSazlQVkVWU1hHNHZMeUF1TDM0dlkyRnlkRzh2YkdsaUwyTmhjblJ2TDNKbGJtUmxjbVZ5WDJwekxtcHpYRzR2THlCdGIyUjFiR1VnYVdRZ1BTQTRORnh1THk4Z2JXOWtkV3hsSUdOb2RXNXJjeUE5SURBaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRU0lzSW5OdmRYSmpaVkp2YjNRaU9pSWlmUT09XCIpO1xuXG4vKioqLyB9KSxcbi8qIDg1ICovXG4vKiBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyogYWxsIGV4cG9ydHMgdXNlZCAqL1xuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL34vY2FydG8vbGliL2NhcnRvL3RyZWUvY2FsbC5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuZXZhbChcIi8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqLyhmdW5jdGlvbihnbG9iYWwpIHsoZnVuY3Rpb24odHJlZSkge1xcbnZhciBfID0gZ2xvYmFsLl8gfHwgX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgdW5kZXJzY29yZSAqLyA0KTtcXG50cmVlLkNhbGwgPSBmdW5jdGlvbiBDYWxsKG5hbWUsIGFyZ3MsIGluZGV4KSB7XFxuICAgIHRoaXMubmFtZSA9IG5hbWU7XFxuICAgIHRoaXMuYXJncyA9IGFyZ3M7XFxuICAgIHRoaXMuaW5kZXggPSBpbmRleDtcXG59O1xcblxcbnRyZWUuQ2FsbC5wcm90b3R5cGUgPSB7XFxuICAgIGlzOiAnY2FsbCcsXFxuICAgIC8vIFdoZW4gZXZ1YXRpbmcgYSBmdW5jdGlvbiBjYWxsLFxcbiAgICAvLyB3ZSBlaXRoZXIgZmluZCB0aGUgZnVuY3Rpb24gaW4gYHRyZWUuZnVuY3Rpb25zYCBbMV0sXFxuICAgIC8vIGluIHdoaWNoIGNhc2Ugd2UgY2FsbCBpdCwgcGFzc2luZyB0aGUgIGV2YWx1YXRlZCBhcmd1bWVudHMsXFxuICAgIC8vIG9yIHdlIHNpbXBseSBwcmludCBpdCBvdXQgYXMgaXQgYXBwZWFyZWQgb3JpZ2luYWxseSBbMl0uXFxuICAgIC8vIFRoZSAqZnVuY3Rpb25zLmpzKiBmaWxlIGNvbnRhaW5zIHRoZSBidWlsdC1pbiBmdW5jdGlvbnMuXFxuICAgIC8vIFRoZSByZWFzb24gd2h5IHdlIGV2YWx1YXRlIHRoZSBhcmd1bWVudHMsIGlzIGluIHRoZSBjYXNlIHdoZXJlXFxuICAgIC8vIHdlIHRyeSB0byBwYXNzIGEgdmFyaWFibGUgdG8gYSBmdW5jdGlvbiwgbGlrZTogYHNhdHVyYXRlKEBjb2xvcilgLlxcbiAgICAvLyBUaGUgZnVuY3Rpb24gc2hvdWxkIHJlY2VpdmUgdGhlIHZhbHVlLCBub3QgdGhlIHZhcmlhYmxlLlxcbiAgICAnZXYnOiBmdW5jdGlvbihlbnYpIHtcXG4gICAgICAgIHZhciBhcmdzID0gdGhpcy5hcmdzLm1hcChmdW5jdGlvbihhKSB7IHJldHVybiBhLmV2KGVudik7IH0pO1xcblxcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSB7XFxuICAgICAgICAgICAgaWYgKGFyZ3NbaV0uaXMgPT09ICd1bmRlZmluZWQnKSB7XFxuICAgICAgICAgICAgICAgIHJldHVybiB7XFxuICAgICAgICAgICAgICAgICAgICBpczogJ3VuZGVmaW5lZCcsXFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogJ3VuZGVmaW5lZCdcXG4gICAgICAgICAgICAgICAgfTtcXG4gICAgICAgICAgICB9XFxuICAgICAgICB9XFxuXFxuICAgICAgICBpZiAodGhpcy5uYW1lIGluIHRyZWUuZnVuY3Rpb25zKSB7XFxuICAgICAgICAgICAgaWYgKHRyZWUuZnVuY3Rpb25zW3RoaXMubmFtZV0ubGVuZ3RoIDw9IGFyZ3MubGVuZ3RoKSB7XFxuICAgICAgICAgICAgICAgIHZhciB2YWwgPSB0cmVlLmZ1bmN0aW9uc1t0aGlzLm5hbWVdLmFwcGx5KHRyZWUuZnVuY3Rpb25zLCBhcmdzKTtcXG4gICAgICAgICAgICAgICAgaWYgKHZhbCA9PT0gbnVsbCkge1xcbiAgICAgICAgICAgICAgICAgICAgZW52LmVycm9yKHtcXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAnaW5jb3JyZWN0IGFyZ3VtZW50cyBnaXZlbiB0byAnICsgdGhpcy5uYW1lICsgJygpJyxcXG4gICAgICAgICAgICAgICAgICAgICAgICBpbmRleDogdGhpcy5pbmRleCxcXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAncnVudGltZScsXFxuICAgICAgICAgICAgICAgICAgICAgICAgZmlsZW5hbWU6IHRoaXMuZmlsZW5hbWVcXG4gICAgICAgICAgICAgICAgICAgIH0pO1xcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgaXM6ICd1bmRlZmluZWQnLCB2YWx1ZTogJ3VuZGVmaW5lZCcgfTtcXG4gICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsO1xcbiAgICAgICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgICAgIGVudi5lcnJvcih7XFxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAnaW5jb3JyZWN0IG51bWJlciBvZiBhcmd1bWVudHMgZm9yICcgKyB0aGlzLm5hbWUgK1xcbiAgICAgICAgICAgICAgICAgICAgICAgICcoKS4gJyArIHRyZWUuZnVuY3Rpb25zW3RoaXMubmFtZV0ubGVuZ3RoICsgJyBleHBlY3RlZC4nLFxcbiAgICAgICAgICAgICAgICAgICAgaW5kZXg6IHRoaXMuaW5kZXgsXFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiAncnVudGltZScsXFxuICAgICAgICAgICAgICAgICAgICBmaWxlbmFtZTogdGhpcy5maWxlbmFtZVxcbiAgICAgICAgICAgICAgICB9KTtcXG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcXG4gICAgICAgICAgICAgICAgICAgIGlzOiAndW5kZWZpbmVkJyxcXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiAndW5kZWZpbmVkJ1xcbiAgICAgICAgICAgICAgICB9O1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgdmFyIGZuID0gdHJlZS5SZWZlcmVuY2UubWFwbmlrRnVuY3Rpb25zW3RoaXMubmFtZV07XFxuICAgICAgICAgICAgaWYgKGZuID09PSB1bmRlZmluZWQpIHtcXG4gICAgICAgICAgICAgICAgdmFyIGZ1bmN0aW9ucyA9IF8ucGFpcnModHJlZS5SZWZlcmVuY2UubWFwbmlrRnVuY3Rpb25zKTtcXG4gICAgICAgICAgICAgICAgLy8gY2hlYXAgY2xvc2VzdCwgbmVlZHMgaW1wcm92ZW1lbnQuXFxuICAgICAgICAgICAgICAgIHZhciBuYW1lID0gdGhpcy5uYW1lO1xcbiAgICAgICAgICAgICAgICB2YXIgbWVhbiA9IGZ1bmN0aW9ucy5tYXAoZnVuY3Rpb24oZikge1xcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtmWzBdLCB0cmVlLlJlZmVyZW5jZS5lZGl0RGlzdGFuY2UobmFtZSwgZlswXSksIGZbMV1dO1xcbiAgICAgICAgICAgICAgICB9KS5zb3J0KGZ1bmN0aW9uKGEsIGIpIHtcXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBhWzFdIC0gYlsxXTtcXG4gICAgICAgICAgICAgICAgfSk7XFxuICAgICAgICAgICAgICAgIGVudi5lcnJvcih7XFxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAndW5rbm93biBmdW5jdGlvbiAnICsgdGhpcy5uYW1lICsgJygpLCBkaWQgeW91IG1lYW4gJyArXFxuICAgICAgICAgICAgICAgICAgICAgICAgbWVhblswXVswXSArICcoJyArIG1lYW5bMF1bMl0gKyAnKScsXFxuICAgICAgICAgICAgICAgICAgICBpbmRleDogdGhpcy5pbmRleCxcXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdydW50aW1lJyxcXG4gICAgICAgICAgICAgICAgICAgIGZpbGVuYW1lOiB0aGlzLmZpbGVuYW1lXFxuICAgICAgICAgICAgICAgIH0pO1xcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xcbiAgICAgICAgICAgICAgICAgICAgaXM6ICd1bmRlZmluZWQnLFxcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICd1bmRlZmluZWQnXFxuICAgICAgICAgICAgICAgIH07XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIGlmIChmbiAhPT0gYXJncy5sZW5ndGggJiZcXG4gICAgICAgICAgICAgICAgIShBcnJheS5pc0FycmF5KGZuKSAmJiBfLmluY2x1ZGUoZm4sIGFyZ3MubGVuZ3RoKSkgJiZcXG4gICAgICAgICAgICAgICAgLy8gc3VwcG9ydCB2YXJpYWJsZS1hcmcgZnVuY3Rpb25zIGxpa2UgYGNvbG9yaXplLWFscGhhYFxcbiAgICAgICAgICAgICAgICBmbiAhPT0gLTEpIHtcXG4gICAgICAgICAgICAgICAgZW52LmVycm9yKHtcXG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdmdW5jdGlvbiAnICsgdGhpcy5uYW1lICsgJygpIHRha2VzICcgK1xcbiAgICAgICAgICAgICAgICAgICAgICAgIGZuICsgJyBhcmd1bWVudHMgYW5kIHdhcyBnaXZlbiAnICsgYXJncy5sZW5ndGgsXFxuICAgICAgICAgICAgICAgICAgICBpbmRleDogdGhpcy5pbmRleCxcXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdydW50aW1lJyxcXG4gICAgICAgICAgICAgICAgICAgIGZpbGVuYW1lOiB0aGlzLmZpbGVuYW1lXFxuICAgICAgICAgICAgICAgIH0pO1xcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xcbiAgICAgICAgICAgICAgICAgICAgaXM6ICd1bmRlZmluZWQnLFxcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICd1bmRlZmluZWQnXFxuICAgICAgICAgICAgICAgIH07XFxuICAgICAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICAgICAgLy8gU2F2ZSB0aGUgZXZhbHVhdGVkIHZlcnNpb25zIG9mIGFyZ3VtZW50c1xcbiAgICAgICAgICAgICAgICB0aGlzLmFyZ3MgPSBhcmdzO1xcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcXG4gICAgICAgICAgICB9XFxuICAgICAgICB9XFxuICAgIH0sXFxuXFxuICAgIHRvU3RyaW5nOiBmdW5jdGlvbihlbnYsIGZvcm1hdCkge1xcbiAgICAgICAgaWYgKHRoaXMuYXJncy5sZW5ndGgpIHtcXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5uYW1lICsgJygnICsgdGhpcy5hcmdzLmpvaW4oJywnKSArICcpJztcXG4gICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgcmV0dXJuIHRoaXMubmFtZTtcXG4gICAgICAgIH1cXG4gICAgfVxcbn07XFxuXFxufSkoX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vdHJlZSAqLyAwKSk7XFxuXFxuLyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovfS5jYWxsKGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vLi4vLi4vLi4vLi4vd2VicGFjay9idWlsZGluL2dsb2JhbC5qcyAqLyAzKSkpLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lPRFV1YW5NaUxDSnpiM1Z5WTJWeklqcGJJbmRsWW5CaFkyczZMeTh2TGk5K0wyTmhjblJ2TDJ4cFlpOWpZWEowYnk5MGNtVmxMMk5oYkd3dWFuTS9PRGt3TUNKZExDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SW9ablZ1WTNScGIyNG9kSEpsWlNrZ2UxeHVkbUZ5SUY4Z1BTQm5iRzlpWVd3dVh5QjhmQ0J5WlhGMWFYSmxLQ2QxYm1SbGNuTmpiM0psSnlrN1hHNTBjbVZsTGtOaGJHd2dQU0JtZFc1amRHbHZiaUJEWVd4c0tHNWhiV1VzSUdGeVozTXNJR2x1WkdWNEtTQjdYRzRnSUNBZ2RHaHBjeTV1WVcxbElEMGdibUZ0WlR0Y2JpQWdJQ0IwYUdsekxtRnlaM01nUFNCaGNtZHpPMXh1SUNBZ0lIUm9hWE11YVc1a1pYZ2dQU0JwYm1SbGVEdGNibjA3WEc1Y2JuUnlaV1V1UTJGc2JDNXdjbTkwYjNSNWNHVWdQU0I3WEc0Z0lDQWdhWE02SUNkallXeHNKeXhjYmlBZ0lDQXZMeUJYYUdWdUlHVjJkV0YwYVc1bklHRWdablZ1WTNScGIyNGdZMkZzYkN4Y2JpQWdJQ0F2THlCM1pTQmxhWFJvWlhJZ1ptbHVaQ0IwYUdVZ1puVnVZM1JwYjI0Z2FXNGdZSFJ5WldVdVpuVnVZM1JwYjI1ellDQmJNVjBzWEc0Z0lDQWdMeThnYVc0Z2QyaHBZMmdnWTJGelpTQjNaU0JqWVd4c0lHbDBMQ0J3WVhOemFXNW5JSFJvWlNBZ1pYWmhiSFZoZEdWa0lHRnlaM1Z0Wlc1MGN5eGNiaUFnSUNBdkx5QnZjaUIzWlNCemFXMXdiSGtnY0hKcGJuUWdhWFFnYjNWMElHRnpJR2wwSUdGd2NHVmhjbVZrSUc5eWFXZHBibUZzYkhrZ1d6SmRMbHh1SUNBZ0lDOHZJRlJvWlNBcVpuVnVZM1JwYjI1ekxtcHpLaUJtYVd4bElHTnZiblJoYVc1eklIUm9aU0JpZFdsc2RDMXBiaUJtZFc1amRHbHZibk11WEc0Z0lDQWdMeThnVkdobElISmxZWE52YmlCM2FIa2dkMlVnWlhaaGJIVmhkR1VnZEdobElHRnlaM1Z0Wlc1MGN5d2dhWE1nYVc0Z2RHaGxJR05oYzJVZ2QyaGxjbVZjYmlBZ0lDQXZMeUIzWlNCMGNua2dkRzhnY0dGemN5QmhJSFpoY21saFlteGxJSFJ2SUdFZ1puVnVZM1JwYjI0c0lHeHBhMlU2SUdCellYUjFjbUYwWlNoQVkyOXNiM0lwWUM1Y2JpQWdJQ0F2THlCVWFHVWdablZ1WTNScGIyNGdjMmh2ZFd4a0lISmxZMlZwZG1VZ2RHaGxJSFpoYkhWbExDQnViM1FnZEdobElIWmhjbWxoWW14bExseHVJQ0FnSUNkbGRpYzZJR1oxYm1OMGFXOXVLR1Z1ZGlrZ2UxeHVJQ0FnSUNBZ0lDQjJZWElnWVhKbmN5QTlJSFJvYVhNdVlYSm5jeTV0WVhBb1puVnVZM1JwYjI0b1lTa2dleUJ5WlhSMWNtNGdZUzVsZGlobGJuWXBPeUI5S1R0Y2JseHVJQ0FnSUNBZ0lDQm1iM0lnS0haaGNpQnBJRDBnTURzZ2FTQThJR0Z5WjNNdWJHVnVaM1JvT3lCcEt5c3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hoY21kelcybGRMbWx6SUQwOVBTQW5kVzVrWldacGJtVmtKeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbHpPaUFuZFc1a1pXWnBibVZrSnl4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZzZFdVNklDZDFibVJsWm1sdVpXUW5YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUdsbUlDaDBhR2x6TG01aGJXVWdhVzRnZEhKbFpTNW1kVzVqZEdsdmJuTXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2gwY21WbExtWjFibU4wYVc5dWMxdDBhR2x6TG01aGJXVmRMbXhsYm1kMGFDQThQU0JoY21kekxteGxibWQwYUNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUIyWVd3Z1BTQjBjbVZsTG1aMWJtTjBhVzl1YzF0MGFHbHpMbTVoYldWZExtRndjR3g1S0hSeVpXVXVablZ1WTNScGIyNXpMQ0JoY21kektUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvZG1Gc0lEMDlQU0J1ZFd4c0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdWdWRpNWxjbkp2Y2loN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdFpYTnpZV2RsT2lBbmFXNWpiM0p5WldOMElHRnlaM1Z0Wlc1MGN5Qm5hWFpsYmlCMGJ5QW5JQ3NnZEdocGN5NXVZVzFsSUNzZ0p5Z3BKeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2x1WkdWNE9pQjBhR2x6TG1sdVpHVjRMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkSGx3WlRvZ0ozSjFiblJwYldVbkxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1ptbHNaVzVoYldVNklIUm9hWE11Wm1sc1pXNWhiV1ZjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUI3SUdsek9pQW5kVzVrWldacGJtVmtKeXdnZG1Gc2RXVTZJQ2QxYm1SbFptbHVaV1FuSUgwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCMllXdzdYRzRnSUNBZ0lDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdWdWRpNWxjbkp2Y2loN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzFsYzNOaFoyVTZJQ2RwYm1OdmNuSmxZM1FnYm5WdFltVnlJRzltSUdGeVozVnRaVzUwY3lCbWIzSWdKeUFySUhSb2FYTXVibUZ0WlNBclhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBbktDa3VJQ2NnS3lCMGNtVmxMbVoxYm1OMGFXOXVjMXQwYUdsekxtNWhiV1ZkTG14bGJtZDBhQ0FySUNjZ1pYaHdaV04wWldRdUp5eGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVc1a1pYZzZJSFJvYVhNdWFXNWtaWGdzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUjVjR1U2SUNkeWRXNTBhVzFsSnl4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdabWxzWlc1aGJXVTZJSFJvYVhNdVptbHNaVzVoYldWY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwY3pvZ0ozVnVaR1ZtYVc1bFpDY3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGJIVmxPaUFuZFc1a1pXWnBibVZrSjF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjJZWElnWm00Z1BTQjBjbVZsTGxKbFptVnlaVzVqWlM1dFlYQnVhV3RHZFc1amRHbHZibk5iZEdocGN5NXVZVzFsWFR0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNobWJpQTlQVDBnZFc1a1pXWnBibVZrS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJR1oxYm1OMGFXOXVjeUE5SUY4dWNHRnBjbk1vZEhKbFpTNVNaV1psY21WdVkyVXViV0Z3Ym1sclJuVnVZM1JwYjI1ektUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMeUJqYUdWaGNDQmpiRzl6WlhOMExDQnVaV1ZrY3lCcGJYQnliM1psYldWdWRDNWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZWElnYm1GdFpTQTlJSFJvYVhNdWJtRnRaVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ2JXVmhiaUE5SUdaMWJtTjBhVzl1Y3k1dFlYQW9ablZ1WTNScGIyNG9aaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1cyWmJNRjBzSUhSeVpXVXVVbVZtWlhKbGJtTmxMbVZrYVhSRWFYTjBZVzVqWlNodVlXMWxMQ0JtV3pCZEtTd2dabHN4WFYwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTa3VjMjl5ZENobWRXNWpkR2x2YmloaExDQmlLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCaFd6RmRJQzBnWWxzeFhUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JsYm5ZdVpYSnliM0lvZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnRaWE56WVdkbE9pQW5kVzVyYm05M2JpQm1kVzVqZEdsdmJpQW5JQ3NnZEdocGN5NXVZVzFsSUNzZ0p5Z3BMQ0JrYVdRZ2VXOTFJRzFsWVc0Z0p5QXJYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnRaV0Z1V3pCZFd6QmRJQ3NnSnlnbklDc2diV1ZoYmxzd1hWc3lYU0FySUNjcEp5eGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVc1a1pYZzZJSFJvYVhNdWFXNWtaWGdzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUjVjR1U2SUNkeWRXNTBhVzFsSnl4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdabWxzWlc1aGJXVTZJSFJvYVhNdVptbHNaVzVoYldWY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwY3pvZ0ozVnVaR1ZtYVc1bFpDY3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGJIVmxPaUFuZFc1a1pXWnBibVZrSjF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvWm00Z0lUMDlJR0Z5WjNNdWJHVnVaM1JvSUNZbVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lTaEJjbkpoZVM1cGMwRnljbUY1S0dadUtTQW1KaUJmTG1sdVkyeDFaR1VvWm00c0lHRnlaM011YkdWdVozUm9LU2tnSmlaY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdkx5QnpkWEJ3YjNKMElIWmhjbWxoWW14bExXRnlaeUJtZFc1amRHbHZibk1nYkdsclpTQmdZMjlzYjNKcGVtVXRZV3h3YUdGZ1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1ptNGdJVDA5SUMweEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaVzUyTG1WeWNtOXlLSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JXVnpjMkZuWlRvZ0oyWjFibU4wYVc5dUlDY2dLeUIwYUdsekxtNWhiV1VnS3lBbktDa2dkR0ZyWlhNZ0p5QXJYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm1iaUFySUNjZ1lYSm5kVzFsYm5SeklHRnVaQ0IzWVhNZ1oybDJaVzRnSnlBcklHRnlaM011YkdWdVozUm9MRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcGJtUmxlRG9nZEdocGN5NXBibVJsZUN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkSGx3WlRvZ0ozSjFiblJwYldVbkxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JtYVd4bGJtRnRaVG9nZEdocGN5NW1hV3hsYm1GdFpWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMHBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsek9pQW5kVzVrWldacGJtVmtKeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnNkV1U2SUNkMWJtUmxabWx1WldRblhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1UyRjJaU0IwYUdVZ1pYWmhiSFZoZEdWa0lIWmxjbk5wYjI1eklHOW1JR0Z5WjNWdFpXNTBjMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVlYSm5jeUE5SUdGeVozTTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE03WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlMRnh1WEc0Z0lDQWdkRzlUZEhKcGJtYzZJR1oxYm1OMGFXOXVLR1Z1ZGl3Z1ptOXliV0YwS1NCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxtRnlaM011YkdWdVozUm9LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTV1WVcxbElDc2dKeWduSUNzZ2RHaHBjeTVoY21kekxtcHZhVzRvSnl3bktTQXJJQ2NwSnp0Y2JpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG01aGJXVTdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlYRzU5TzF4dVhHNTlLU2h5WlhGMWFYSmxLQ2N1TGk5MGNtVmxKeWtwTzF4dVhHNWNibHh1THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2WEc0dkx5QlhSVUpRUVVOTElFWlBUMVJGVWx4dUx5OGdMaTkrTDJOaGNuUnZMMnhwWWk5allYSjBieTkwY21WbEwyTmhiR3d1YW5OY2JpOHZJRzF2WkhWc1pTQnBaQ0E5SURnMVhHNHZMeUJ0YjJSMWJHVWdZMmgxYm10eklEMGdNQ0pkTENKdFlYQndhVzVuY3lJNklrRkJRVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEVpTENKemIzVnlZMlZTYjI5MElqb2lJbjA9XCIpO1xuXG4vKioqLyB9KSxcbi8qIDg2ICovXG4vKiBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyogYWxsIGV4cG9ydHMgdXNlZCAqL1xuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9+L2NhcnRvL2xpYi9jYXJ0by90cmVlL2NvbG9yLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuZXZhbChcIihmdW5jdGlvbih0cmVlKSB7XFxuLy8gUkdCIENvbG9ycyAtICNmZjAwMTQsICNlZWVcXG4vLyBjYW4gYmUgaW5pdGlhbGl6ZWQgd2l0aCBhIDMgb3IgNiBjaGFyIHN0cmluZyBvciBhIDMgb3IgNCBlbGVtZW50XFxuLy8gbnVtZXJpY2FsIGFycmF5XFxudHJlZS5Db2xvciA9IGZ1bmN0aW9uIENvbG9yKHJnYiwgYSkge1xcbiAgICAvLyBUaGUgZW5kIGdvYWwgaGVyZSwgaXMgdG8gcGFyc2UgdGhlIGFyZ3VtZW50c1xcbiAgICAvLyBpbnRvIGFuIGludGVnZXIgdHJpcGxldCwgc3VjaCBhcyBgMTI4LCAyNTUsIDBgXFxuICAgIC8vXFxuICAgIC8vIFRoaXMgZmFjaWxpdGF0ZXMgb3BlcmF0aW9ucyBhbmQgY29udmVyc2lvbnMuXFxuICAgIGlmIChBcnJheS5pc0FycmF5KHJnYikpIHtcXG4gICAgICAgIHRoaXMucmdiID0gcmdiLnNsaWNlKDAsIDMpO1xcbiAgICB9IGVsc2UgaWYgKHJnYi5sZW5ndGggPT0gNikge1xcbiAgICAgICAgdGhpcy5yZ2IgPSByZ2IubWF0Y2goLy57Mn0vZykubWFwKGZ1bmN0aW9uKGMpIHtcXG4gICAgICAgICAgICByZXR1cm4gcGFyc2VJbnQoYywgMTYpO1xcbiAgICAgICAgfSk7XFxuICAgIH0gZWxzZSB7XFxuICAgICAgICB0aGlzLnJnYiA9IHJnYi5zcGxpdCgnJykubWFwKGZ1bmN0aW9uKGMpIHtcXG4gICAgICAgICAgICByZXR1cm4gcGFyc2VJbnQoYyArIGMsIDE2KTtcXG4gICAgICAgIH0pO1xcbiAgICB9XFxuXFxuICAgIGlmICh0eXBlb2YoYSkgPT09ICdudW1iZXInKSB7XFxuICAgICAgICB0aGlzLmFscGhhID0gYTtcXG4gICAgfSBlbHNlIGlmIChyZ2IubGVuZ3RoID09PSA0KSB7XFxuICAgICAgICB0aGlzLmFscGhhID0gcmdiWzNdO1xcbiAgICB9IGVsc2Uge1xcbiAgICAgICAgdGhpcy5hbHBoYSA9IDE7XFxuICAgIH1cXG59O1xcblxcbnRyZWUuQ29sb3IucHJvdG90eXBlID0ge1xcbiAgICBpczogJ2NvbG9yJyxcXG4gICAgJ2V2JzogZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9LFxcblxcbiAgICAvLyBJZiB3ZSBoYXZlIHNvbWUgdHJhbnNwYXJlbmN5LCB0aGUgb25seSB3YXkgdG8gcmVwcmVzZW50IGl0XFxuICAgIC8vIGlzIHZpYSBgcmdiYWAuIE90aGVyd2lzZSwgd2UgdXNlIHRoZSBoZXggcmVwcmVzZW50YXRpb24sXFxuICAgIC8vIHdoaWNoIGhhcyBiZXR0ZXIgY29tcGF0aWJpbGl0eSB3aXRoIG9sZGVyIGJyb3dzZXJzLlxcbiAgICAvLyBWYWx1ZXMgYXJlIGNhcHBlZCBiZXR3ZWVuIGAwYCBhbmQgYDI1NWAsIHJvdW5kZWQgYW5kIHplcm8tcGFkZGVkLlxcbiAgICB0b1N0cmluZzogZnVuY3Rpb24oKSB7XFxuICAgICAgICBpZiAodGhpcy5hbHBoYSA8IDEuMCkge1xcbiAgICAgICAgICAgIHJldHVybiAncmdiYSgnICsgdGhpcy5yZ2IubWFwKGZ1bmN0aW9uKGMpIHtcXG4gICAgICAgICAgICAgICAgcmV0dXJuIE1hdGgucm91bmQoYyk7XFxuICAgICAgICAgICAgfSkuY29uY2F0KHRoaXMuYWxwaGEpLmpvaW4oJywgJykgKyAnKSc7XFxuICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICAgIHJldHVybiAnIycgKyB0aGlzLnJnYi5tYXAoZnVuY3Rpb24oaSkge1xcbiAgICAgICAgICAgICAgICBpID0gTWF0aC5yb3VuZChpKTtcXG4gICAgICAgICAgICAgICAgaSA9IChpID4gMjU1ID8gMjU1IDogKGkgPCAwID8gMCA6IGkpKS50b1N0cmluZygxNik7XFxuICAgICAgICAgICAgICAgIHJldHVybiBpLmxlbmd0aCA9PT0gMSA/ICcwJyArIGkgOiBpO1xcbiAgICAgICAgICAgIH0pLmpvaW4oJycpO1xcbiAgICAgICAgfVxcbiAgICB9LFxcblxcbiAgICAvLyBPcGVyYXRpb25zIGhhdmUgdG8gYmUgZG9uZSBwZXItY2hhbm5lbCwgaWYgbm90LFxcbiAgICAvLyBjaGFubmVscyB3aWxsIHNwaWxsIG9udG8gZWFjaCBvdGhlci4gT25jZSB3ZSBoYXZlXFxuICAgIC8vIG91ciByZXN1bHQsIGluIHRoZSBmb3JtIG9mIGFuIGludGVnZXIgdHJpcGxldCxcXG4gICAgLy8gd2UgY3JlYXRlIGEgbmV3IENvbG9yIG5vZGUgdG8gaG9sZCB0aGUgcmVzdWx0LlxcbiAgICBvcGVyYXRlOiBmdW5jdGlvbihlbnYsIG9wLCBvdGhlcikge1xcbiAgICAgICAgdmFyIHJlc3VsdCA9IFtdO1xcblxcbiAgICAgICAgaWYgKCEgKG90aGVyIGluc3RhbmNlb2YgdHJlZS5Db2xvcikpIHtcXG4gICAgICAgICAgICBvdGhlciA9IG90aGVyLnRvQ29sb3IoKTtcXG4gICAgICAgIH1cXG5cXG4gICAgICAgIGZvciAodmFyIGMgPSAwOyBjIDwgMzsgYysrKSB7XFxuICAgICAgICAgICAgcmVzdWx0W2NdID0gdHJlZS5vcGVyYXRlKG9wLCB0aGlzLnJnYltjXSwgb3RoZXIucmdiW2NdKTtcXG4gICAgICAgIH1cXG4gICAgICAgIHJldHVybiBuZXcgdHJlZS5Db2xvcihyZXN1bHQpO1xcbiAgICB9LFxcblxcbiAgICB0b0hTTDogZnVuY3Rpb24oKSB7XFxuICAgICAgICB2YXIgciA9IHRoaXMucmdiWzBdIC8gMjU1LFxcbiAgICAgICAgICAgIGcgPSB0aGlzLnJnYlsxXSAvIDI1NSxcXG4gICAgICAgICAgICBiID0gdGhpcy5yZ2JbMl0gLyAyNTUsXFxuICAgICAgICAgICAgYSA9IHRoaXMuYWxwaGE7XFxuXFxuICAgICAgICB2YXIgbWF4ID0gTWF0aC5tYXgociwgZywgYiksIG1pbiA9IE1hdGgubWluKHIsIGcsIGIpO1xcbiAgICAgICAgdmFyIGgsIHMsIGwgPSAobWF4ICsgbWluKSAvIDIsIGQgPSBtYXggLSBtaW47XFxuXFxuICAgICAgICBpZiAobWF4ID09PSBtaW4pIHtcXG4gICAgICAgICAgICBoID0gcyA9IDA7XFxuICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICAgIHMgPSBsID4gMC41ID8gZCAvICgyIC0gbWF4IC0gbWluKSA6IGQgLyAobWF4ICsgbWluKTtcXG5cXG4gICAgICAgICAgICBzd2l0Y2ggKG1heCkge1xcbiAgICAgICAgICAgICAgICBjYXNlIHI6IGggPSAoZyAtIGIpIC8gZCArIChnIDwgYiA/IDYgOiAwKTsgYnJlYWs7XFxuICAgICAgICAgICAgICAgIGNhc2UgZzogaCA9IChiIC0gcikgLyBkICsgMjsgYnJlYWs7XFxuICAgICAgICAgICAgICAgIGNhc2UgYjogaCA9IChyIC0gZykgLyBkICsgNDsgYnJlYWs7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIGggLz0gNjtcXG4gICAgICAgIH1cXG4gICAgICAgIHJldHVybiB7IGg6IGggKiAzNjAsIHM6IHMsIGw6IGwsIGE6IGEgfTtcXG4gICAgfVxcbn07XFxuXFxufSkoX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vdHJlZSAqLyAwKSk7XFxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lPRFl1YW5NaUxDSnpiM1Z5WTJWeklqcGJJbmRsWW5CaFkyczZMeTh2TGk5K0wyTmhjblJ2TDJ4cFlpOWpZWEowYnk5MGNtVmxMMk52Ykc5eUxtcHpQMkpqWmpJaVhTd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lLR1oxYm1OMGFXOXVLSFJ5WldVcElIdGNiaTh2SUZKSFFpQkRiMnh2Y25NZ0xTQWpabVl3TURFMExDQWpaV1ZsWEc0dkx5QmpZVzRnWW1VZ2FXNXBkR2xoYkdsNlpXUWdkMmwwYUNCaElETWdiM0lnTmlCamFHRnlJSE4wY21sdVp5QnZjaUJoSURNZ2IzSWdOQ0JsYkdWdFpXNTBYRzR2THlCdWRXMWxjbWxqWVd3Z1lYSnlZWGxjYm5SeVpXVXVRMjlzYjNJZ1BTQm1kVzVqZEdsdmJpQkRiMnh2Y2loeVoySXNJR0VwSUh0Y2JpQWdJQ0F2THlCVWFHVWdaVzVrSUdkdllXd2dhR1Z5WlN3Z2FYTWdkRzhnY0dGeWMyVWdkR2hsSUdGeVozVnRaVzUwYzF4dUlDQWdJQzh2SUdsdWRHOGdZVzRnYVc1MFpXZGxjaUIwY21sd2JHVjBMQ0J6ZFdOb0lHRnpJR0F4TWpnc0lESTFOU3dnTUdCY2JpQWdJQ0F2TDF4dUlDQWdJQzh2SUZSb2FYTWdabUZqYVd4cGRHRjBaWE1nYjNCbGNtRjBhVzl1Y3lCaGJtUWdZMjl1ZG1WeWMybHZibk11WEc0Z0lDQWdhV1lnS0VGeWNtRjVMbWx6UVhKeVlYa29jbWRpS1NrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TG5KbllpQTlJSEpuWWk1emJHbGpaU2d3TENBektUdGNiaUFnSUNCOUlHVnNjMlVnYVdZZ0tISm5ZaTVzWlc1bmRHZ2dQVDBnTmlrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TG5KbllpQTlJSEpuWWk1dFlYUmphQ2d2TG5zeWZTOW5LUzV0WVhBb1puVnVZM1JwYjI0b1l5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUhCaGNuTmxTVzUwS0dNc0lERTJLVHRjYmlBZ0lDQWdJQ0FnZlNrN1hHNGdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NXlaMklnUFNCeVoySXVjM0JzYVhRb0p5Y3BMbTFoY0NobWRXNWpkR2x2YmloaktTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnY0dGeWMyVkpiblFvWXlBcklHTXNJREUyS1R0Y2JpQWdJQ0FnSUNBZ2ZTazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2FXWWdLSFI1Y0dWdlppaGhLU0E5UFQwZ0oyNTFiV0psY2ljcElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1aGJIQm9ZU0E5SUdFN1hHNGdJQ0FnZlNCbGJITmxJR2xtSUNoeVoySXViR1Z1WjNSb0lEMDlQU0EwS1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WVd4d2FHRWdQU0J5WjJKYk0xMDdYRzRnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVoYkhCb1lTQTlJREU3WEc0Z0lDQWdmVnh1ZlR0Y2JseHVkSEpsWlM1RGIyeHZjaTV3Y205MGIzUjVjR1VnUFNCN1hHNGdJQ0FnYVhNNklDZGpiMnh2Y2ljc1hHNGdJQ0FnSjJWMkp6b2dablZ1WTNScGIyNG9LU0I3SUhKbGRIVnliaUIwYUdsek95QjlMRnh1WEc0Z0lDQWdMeThnU1dZZ2QyVWdhR0YyWlNCemIyMWxJSFJ5WVc1emNHRnlaVzVqZVN3Z2RHaGxJRzl1YkhrZ2QyRjVJSFJ2SUhKbGNISmxjMlZ1ZENCcGRGeHVJQ0FnSUM4dklHbHpJSFpwWVNCZ2NtZGlZV0F1SUU5MGFHVnlkMmx6WlN3Z2QyVWdkWE5sSUhSb1pTQm9aWGdnY21Wd2NtVnpaVzUwWVhScGIyNHNYRzRnSUNBZ0x5OGdkMmhwWTJnZ2FHRnpJR0psZEhSbGNpQmpiMjF3WVhScFltbHNhWFI1SUhkcGRHZ2diMnhrWlhJZ1luSnZkM05sY25NdVhHNGdJQ0FnTHk4Z1ZtRnNkV1Z6SUdGeVpTQmpZWEJ3WldRZ1ltVjBkMlZsYmlCZ01HQWdZVzVrSUdBeU5UVmdMQ0J5YjNWdVpHVmtJR0Z1WkNCNlpYSnZMWEJoWkdSbFpDNWNiaUFnSUNCMGIxTjBjbWx1WnpvZ1puVnVZM1JwYjI0b0tTQjdYRzRnSUNBZ0lDQWdJR2xtSUNoMGFHbHpMbUZzY0doaElEd2dNUzR3S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdKM0puWW1Fb0p5QXJJSFJvYVhNdWNtZGlMbTFoY0NobWRXNWpkR2x2YmloaktTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlFMWhkR2d1Y205MWJtUW9ZeWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlLUzVqYjI1allYUW9kR2hwY3k1aGJIQm9ZU2t1YW05cGJpZ25MQ0FuS1NBcklDY3BKenRjYmlBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlBbkl5Y2dLeUIwYUdsekxuSm5ZaTV0WVhBb1puVnVZM1JwYjI0b2FTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2tnUFNCTllYUm9Mbkp2ZFc1a0tHa3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2tnUFNBb2FTQStJREkxTlNBL0lESTFOU0E2SUNocElEd2dNQ0EvSURBZ09pQnBLU2t1ZEc5VGRISnBibWNvTVRZcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCcExteGxibWQwYUNBOVBUMGdNU0EvSUNjd0p5QXJJR2tnT2lCcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlNrdWFtOXBiaWduSnlrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOUxGeHVYRzRnSUNBZ0x5OGdUM0JsY21GMGFXOXVjeUJvWVhabElIUnZJR0psSUdSdmJtVWdjR1Z5TFdOb1lXNXVaV3dzSUdsbUlHNXZkQ3hjYmlBZ0lDQXZMeUJqYUdGdWJtVnNjeUIzYVd4c0lITndhV3hzSUc5dWRHOGdaV0ZqYUNCdmRHaGxjaTRnVDI1alpTQjNaU0JvWVhabFhHNGdJQ0FnTHk4Z2IzVnlJSEpsYzNWc2RDd2dhVzRnZEdobElHWnZjbTBnYjJZZ1lXNGdhVzUwWldkbGNpQjBjbWx3YkdWMExGeHVJQ0FnSUM4dklIZGxJR055WldGMFpTQmhJRzVsZHlCRGIyeHZjaUJ1YjJSbElIUnZJR2h2YkdRZ2RHaGxJSEpsYzNWc2RDNWNiaUFnSUNCdmNHVnlZWFJsT2lCbWRXNWpkR2x2YmlobGJuWXNJRzl3TENCdmRHaGxjaWtnZTF4dUlDQWdJQ0FnSUNCMllYSWdjbVZ6ZFd4MElEMGdXMTA3WEc1Y2JpQWdJQ0FnSUNBZ2FXWWdLQ0VnS0c5MGFHVnlJR2x1YzNSaGJtTmxiMllnZEhKbFpTNURiMnh2Y2lrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUc5MGFHVnlJRDBnYjNSb1pYSXVkRzlEYjJ4dmNpZ3BPMXh1SUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ1ptOXlJQ2gyWVhJZ1l5QTlJREE3SUdNZ1BDQXpPeUJqS3lzcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGMzVnNkRnRqWFNBOUlIUnlaV1V1YjNCbGNtRjBaU2h2Y0N3Z2RHaHBjeTV5WjJKYlkxMHNJRzkwYUdWeUxuSm5ZbHRqWFNrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHNWxkeUIwY21WbExrTnZiRzl5S0hKbGMzVnNkQ2s3WEc0Z0lDQWdmU3hjYmx4dUlDQWdJSFJ2U0ZOTU9pQm1kVzVqZEdsdmJpZ3BJSHRjYmlBZ0lDQWdJQ0FnZG1GeUlISWdQU0IwYUdsekxuSm5ZbHN3WFNBdklESTFOU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lHY2dQU0IwYUdsekxuSm5ZbHN4WFNBdklESTFOU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lHSWdQU0IwYUdsekxuSm5ZbHN5WFNBdklESTFOU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lHRWdQU0IwYUdsekxtRnNjR2hoTzF4dVhHNGdJQ0FnSUNBZ0lIWmhjaUJ0WVhnZ1BTQk5ZWFJvTG0xaGVDaHlMQ0JuTENCaUtTd2diV2x1SUQwZ1RXRjBhQzV0YVc0b2Npd2daeXdnWWlrN1hHNGdJQ0FnSUNBZ0lIWmhjaUJvTENCekxDQnNJRDBnS0cxaGVDQXJJRzFwYmlrZ0x5QXlMQ0JrSUQwZ2JXRjRJQzBnYldsdU8xeHVYRzRnSUNBZ0lDQWdJR2xtSUNodFlYZ2dQVDA5SUcxcGJpa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FDQTlJSE1nUFNBd08xeHVJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnY3lBOUlHd2dQaUF3TGpVZ1B5QmtJQzhnS0RJZ0xTQnRZWGdnTFNCdGFXNHBJRG9nWkNBdklDaHRZWGdnS3lCdGFXNHBPMXh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQnpkMmwwWTJnZ0tHMWhlQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdjam9nYUNBOUlDaG5JQzBnWWlrZ0x5QmtJQ3NnS0djZ1BDQmlJRDhnTmlBNklEQXBPeUJpY21WaGF6dGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpZWE5sSUdjNklHZ2dQU0FvWWlBdElISXBJQzhnWkNBcklESTdJR0p5WldGck8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTmhjMlVnWWpvZ2FDQTlJQ2h5SUMwZ1p5a2dMeUJrSUNzZ05Ec2dZbkpsWVdzN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQm9JQzg5SURZN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIc2dhRG9nYUNBcUlETTJNQ3dnY3pvZ2N5d2diRG9nYkN3Z1lUb2dZU0I5TzF4dUlDQWdJSDFjYm4wN1hHNWNibjBwS0hKbGNYVnBjbVVvSnk0dUwzUnlaV1VuS1NrN1hHNWNibHh1WEc0dkx5OHZMeTh2THk4dkx5OHZMeTh2THk5Y2JpOHZJRmRGUWxCQlEwc2dSazlQVkVWU1hHNHZMeUF1TDM0dlkyRnlkRzh2YkdsaUwyTmhjblJ2TDNSeVpXVXZZMjlzYjNJdWFuTmNiaTh2SUcxdlpIVnNaU0JwWkNBOUlEZzJYRzR2THlCdGIyUjFiR1VnWTJoMWJtdHpJRDBnTUNKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUc2lMQ0p6YjNWeVkyVlNiMjkwSWpvaUluMD1cIik7XG5cbi8qKiovIH0pLFxuLyogODcgKi9cbi8qIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKiBhbGwgZXhwb3J0cyB1c2VkICovXG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vfi9jYXJ0by9saWIvY2FydG8vdHJlZS9jb21tZW50LmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5ldmFsKFwiKGZ1bmN0aW9uKHRyZWUpIHtcXG5cXG50cmVlLkNvbW1lbnQgPSBmdW5jdGlvbiBDb21tZW50KHZhbHVlLCBzaWxlbnQpIHtcXG4gICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xcbiAgICB0aGlzLnNpbGVudCA9ICEhc2lsZW50O1xcbn07XFxuXFxudHJlZS5Db21tZW50LnByb3RvdHlwZSA9IHtcXG4gICAgdG9TdHJpbmc6IGZ1bmN0aW9uKGVudikge1xcbiAgICAgICAgcmV0dXJuICc8IS0tJyArIHRoaXMudmFsdWUgKyAnLS0+JztcXG4gICAgfSxcXG4gICAgJ2V2JzogZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9XFxufTtcXG5cXG59KShfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi90cmVlICovIDApKTtcXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaU9EY3Vhbk1pTENKemIzVnlZMlZ6SWpwYkluZGxZbkJoWTJzNkx5OHZMaTkrTDJOaGNuUnZMMnhwWWk5allYSjBieTkwY21WbEwyTnZiVzFsYm5RdWFuTS9ZMlF6TkNKZExDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SW9ablZ1WTNScGIyNG9kSEpsWlNrZ2UxeHVYRzUwY21WbExrTnZiVzFsYm5RZ1BTQm1kVzVqZEdsdmJpQkRiMjF0Wlc1MEtIWmhiSFZsTENCemFXeGxiblFwSUh0Y2JpQWdJQ0IwYUdsekxuWmhiSFZsSUQwZ2RtRnNkV1U3WEc0Z0lDQWdkR2hwY3k1emFXeGxiblFnUFNBaElYTnBiR1Z1ZER0Y2JuMDdYRzVjYm5SeVpXVXVRMjl0YldWdWRDNXdjbTkwYjNSNWNHVWdQU0I3WEc0Z0lDQWdkRzlUZEhKcGJtYzZJR1oxYm1OMGFXOXVLR1Z1ZGlrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z0p6d2hMUzBuSUNzZ2RHaHBjeTUyWVd4MVpTQXJJQ2N0TFQ0bk8xeHVJQ0FnSUgwc1hHNGdJQ0FnSjJWMkp6b2dablZ1WTNScGIyNG9LU0I3SUhKbGRIVnliaUIwYUdsek95QjlYRzU5TzF4dVhHNTlLU2h5WlhGMWFYSmxLQ2N1TGk5MGNtVmxKeWtwTzF4dVhHNWNibHh1THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2WEc0dkx5QlhSVUpRUVVOTElFWlBUMVJGVWx4dUx5OGdMaTkrTDJOaGNuUnZMMnhwWWk5allYSjBieTkwY21WbEwyTnZiVzFsYm5RdWFuTmNiaTh2SUcxdlpIVnNaU0JwWkNBOUlEZzNYRzR2THlCdGIyUjFiR1VnWTJoMWJtdHpJRDBnTUNKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3lJc0luTnZkWEpqWlZKdmIzUWlPaUlpZlE9PVwiKTtcblxuLyoqKi8gfSksXG4vKiA4OCAqL1xuLyogbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9cbi8qIGFsbCBleHBvcnRzIHVzZWQgKi9cbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9+L2NhcnRvL2xpYi9jYXJ0by90cmVlL2RlZmluaXRpb24uanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbmV2YWwoXCIvKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi8oZnVuY3Rpb24oZ2xvYmFsKSB7KGZ1bmN0aW9uKHRyZWUpIHtcXG52YXIgYXNzZXJ0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgYXNzZXJ0ICovIDcxKSxcXG4gICAgXyA9IGdsb2JhbC5fIHx8IF9fd2VicGFja19yZXF1aXJlX18oLyohIHVuZGVyc2NvcmUgKi8gNCk7XFxuXFxuLy8gQSBkZWZpbml0aW9uIGlzIHRoZSBjb21iaW5hdGlvbiBvZiBhIHNlbGVjdG9yIGFuZCBydWxlcywgbGlrZVxcbi8vICNmb28ge1xcbi8vICAgICBwb2x5Z29uLW9wYWNpdHk6MS4wO1xcbi8vIH1cXG4vL1xcbi8vIFRoZSBzZWxlY3RvciBjYW4gaGF2ZSBmaWx0ZXJzXFxudHJlZS5EZWZpbml0aW9uID0gZnVuY3Rpb24gRGVmaW5pdGlvbihzZWxlY3RvciwgcnVsZXMpIHtcXG4gICAgdGhpcy5lbGVtZW50cyA9IHNlbGVjdG9yLmVsZW1lbnRzO1xcbiAgICBhc3NlcnQub2soc2VsZWN0b3IuZmlsdGVycyBpbnN0YW5jZW9mIHRyZWUuRmlsdGVyc2V0KTtcXG4gICAgdGhpcy5ydWxlcyA9IHJ1bGVzO1xcbiAgICB0aGlzLnJ1bGVJbmRleCA9IHt9O1xcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMucnVsZXMubGVuZ3RoOyBpKyspIHtcXG4gICAgICAgIGlmICgnem9vbScgaW4gdGhpcy5ydWxlc1tpXSkgdGhpcy5ydWxlc1tpXSA9IHRoaXMucnVsZXNbaV0uY2xvbmUoKTtcXG4gICAgICAgIHRoaXMucnVsZXNbaV0uem9vbSA9IHNlbGVjdG9yLnpvb207XFxuICAgICAgICB0aGlzLnJ1bGVJbmRleFt0aGlzLnJ1bGVzW2ldLnVwZGF0ZUlEKCldID0gdHJ1ZTtcXG4gICAgfVxcbiAgICB0aGlzLmZpbHRlcnMgPSBzZWxlY3Rvci5maWx0ZXJzO1xcbiAgICB0aGlzLnpvb20gPSBzZWxlY3Rvci56b29tO1xcbiAgICB0aGlzLmZyYW1lX29mZnNldCA9IHNlbGVjdG9yLmZyYW1lX29mZnNldDtcXG4gICAgdGhpcy5hdHRhY2htZW50ID0gc2VsZWN0b3IuYXR0YWNobWVudCB8fCAnX19kZWZhdWx0X18nO1xcbiAgICB0aGlzLnNwZWNpZmljaXR5ID0gc2VsZWN0b3Iuc3BlY2lmaWNpdHkoKTtcXG59O1xcblxcbnRyZWUuRGVmaW5pdGlvbi5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcXG4gICAgdmFyIHN0ciA9IHRoaXMuZmlsdGVycy50b1N0cmluZygpO1xcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMucnVsZXMubGVuZ3RoOyBpKyspIHtcXG4gICAgICAgIHN0ciArPSAnXFxcXG4gICAgJyArIHRoaXMucnVsZXNbaV07XFxuICAgIH1cXG4gICAgcmV0dXJuIHN0cjtcXG59O1xcblxcbnRyZWUuRGVmaW5pdGlvbi5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbihmaWx0ZXJzKSB7XFxuICAgIGlmIChmaWx0ZXJzKSBhc3NlcnQub2soZmlsdGVycyBpbnN0YW5jZW9mIHRyZWUuRmlsdGVyc2V0KTtcXG4gICAgdmFyIGNsb25lID0gT2JqZWN0LmNyZWF0ZSh0cmVlLkRlZmluaXRpb24ucHJvdG90eXBlKTtcXG4gICAgY2xvbmUucnVsZXMgPSB0aGlzLnJ1bGVzLnNsaWNlKCk7XFxuICAgIGNsb25lLnJ1bGVJbmRleCA9IF8uY2xvbmUodGhpcy5ydWxlSW5kZXgpO1xcbiAgICBjbG9uZS5maWx0ZXJzID0gZmlsdGVycyA/IGZpbHRlcnMgOiB0aGlzLmZpbHRlcnMuY2xvbmUoKTtcXG4gICAgY2xvbmUuYXR0YWNobWVudCA9IHRoaXMuYXR0YWNobWVudDtcXG4gICAgcmV0dXJuIGNsb25lO1xcbn07XFxuXFxudHJlZS5EZWZpbml0aW9uLnByb3RvdHlwZS5hZGRSdWxlcyA9IGZ1bmN0aW9uKHJ1bGVzKSB7XFxuICAgIHZhciBhZGRlZCA9IDA7XFxuXFxuICAgIC8vIEFkZCBvbmx5IHVuaXF1ZSBydWxlcy5cXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBydWxlcy5sZW5ndGg7IGkrKykge1xcbiAgICAgICAgaWYgKCF0aGlzLnJ1bGVJbmRleFtydWxlc1tpXS5pZF0pIHtcXG4gICAgICAgICAgICB0aGlzLnJ1bGVzLnB1c2gocnVsZXNbaV0pO1xcbiAgICAgICAgICAgIHRoaXMucnVsZUluZGV4W3J1bGVzW2ldLmlkXSA9IHRydWU7XFxuICAgICAgICAgICAgYWRkZWQrKztcXG4gICAgICAgIH1cXG4gICAgfVxcblxcbiAgICByZXR1cm4gYWRkZWQ7XFxufTtcXG5cXG4vLyBEZXRlcm1pbmUgd2hldGhlciB0aGlzIHNlbGVjdG9yIG1hdGNoZXMgYSBnaXZlbiBpZFxcbi8vIGFuZCBhcnJheSBvZiBjbGFzc2VzLCBieSBkZXRlcm1pbmluZyB3aGV0aGVyXFxuLy8gYWxsIGVsZW1lbnRzIGl0IGNvbnRhaW5zIG1hdGNoLlxcbnRyZWUuRGVmaW5pdGlvbi5wcm90b3R5cGUuYXBwbGllc1RvID0gZnVuY3Rpb24oaWQsIGNsYXNzZXMpIHtcXG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSB0aGlzLmVsZW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xcbiAgICAgICAgdmFyIGVsZW0gPSB0aGlzLmVsZW1lbnRzW2ldO1xcbiAgICAgICAgaWYgKCEoZWxlbS53aWxkY2FyZCB8fFxcbiAgICAgICAgICAgIChlbGVtLnR5cGUgPT09ICdjbGFzcycgJiYgY2xhc3Nlc1tlbGVtLmNsZWFuXSkgfHxcXG4gICAgICAgICAgICAoZWxlbS50eXBlID09PSAnaWQnICYmIGlkID09PSBlbGVtLmNsZWFuKSkpIHJldHVybiBmYWxzZTtcXG4gICAgfVxcbiAgICByZXR1cm4gdHJ1ZTtcXG59O1xcblxcbmZ1bmN0aW9uIHN5bWJvbGl6ZXJOYW1lKHN5bWJvbGl6ZXIpIHtcXG4gICAgZnVuY3Rpb24gY2FwaXRhbGl6ZShzdHIpIHsgcmV0dXJuIHN0clsxXS50b1VwcGVyQ2FzZSgpOyB9XFxuICAgIHJldHVybiBzeW1ib2xpemVyLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICtcXG4gICAgICAgICAgIHN5bWJvbGl6ZXIuc2xpY2UoMSkucmVwbGFjZSgvXFxcXC0uLywgY2FwaXRhbGl6ZSkgKyAnU3ltYm9saXplcic7XFxufVxcblxcbi8vIEdldCBhIHNpbXBsZSBsaXN0IG9mIHRoZSBzeW1ib2xpemVycywgaW4gb3JkZXJcXG5mdW5jdGlvbiBzeW1ib2xpemVyTGlzdChzeW1fb3JkZXIpIHtcXG4gICAgcmV0dXJuIHN5bV9vcmRlci5zb3J0KGZ1bmN0aW9uKGEsIGIpIHsgcmV0dXJuIGFbMV0gLSBiWzFdOyB9KVxcbiAgICAgICAgLm1hcChmdW5jdGlvbih2KSB7IHJldHVybiB2WzBdOyB9KTtcXG59XFxuXFxudHJlZS5EZWZpbml0aW9uLnByb3RvdHlwZS5zeW1ib2xpemVyc1RvWE1MID0gZnVuY3Rpb24oZW52LCBzeW1ib2xpemVycywgem9vbSkge1xcbiAgICB2YXIgeG1sID0gem9vbS50b1hNTChlbnYpLmpvaW4oJycpICsgdGhpcy5maWx0ZXJzLnRvWE1MKGVudik7XFxuXFxuICAgIC8vIFNvcnQgc3ltYm9saXplcnMgYnkgdGhlIGluZGV4IG9mIHRoZWlyIGZpcnN0IHByb3BlcnR5IGRlZmluaXRpb25cXG4gICAgdmFyIHN5bV9vcmRlciA9IFtdLCBpbmRleGVzID0gW107XFxuICAgIGZvciAodmFyIGtleSBpbiBzeW1ib2xpemVycykge1xcbiAgICAgICAgaW5kZXhlcyA9IFtdO1xcbiAgICAgICAgZm9yICh2YXIgcHJvcCBpbiBzeW1ib2xpemVyc1trZXldKSB7XFxuICAgICAgICAgICAgaW5kZXhlcy5wdXNoKHN5bWJvbGl6ZXJzW2tleV1bcHJvcF0uaW5kZXgpO1xcbiAgICAgICAgfVxcbiAgICAgICAgdmFyIG1pbl9pZHggPSBNYXRoLm1pbi5hcHBseShNYXRoLCBpbmRleGVzKTtcXG4gICAgICAgIHN5bV9vcmRlci5wdXNoKFtrZXksIG1pbl9pZHhdKTtcXG4gICAgfVxcblxcbiAgICBzeW1fb3JkZXIgPSBzeW1ib2xpemVyTGlzdChzeW1fb3JkZXIpO1xcbiAgICB2YXIgc3ltX2NvdW50ID0gMDtcXG5cXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzeW1fb3JkZXIubGVuZ3RoOyBpKyspIHtcXG4gICAgICAgIHZhciBhdHRyaWJ1dGVzID0gc3ltYm9saXplcnNbc3ltX29yZGVyW2ldXTtcXG4gICAgICAgIHZhciBzeW1ib2xpemVyID0gc3ltX29yZGVyW2ldLnNwbGl0KCcvJykucG9wKCk7XFxuXFxuICAgICAgICAvLyBTa2lwIHRoZSBtYWdpY2FsICogc3ltYm9saXplciB3aGljaCBpcyB1c2VkIGZvciB1bml2ZXJzYWwgcHJvcGVydGllc1xcbiAgICAgICAgLy8gd2hpY2ggYXJlIGJ1YmJsZWQgdXAgdG8gU3R5bGUgZWxlbWVudHMgaW50ZWFkIG9mIFN5bWJvbGl6ZXIgZWxlbWVudHMuXFxuICAgICAgICBpZiAoc3ltYm9saXplciA9PT0gJyonKSBjb250aW51ZTtcXG4gICAgICAgIHN5bV9jb3VudCsrO1xcblxcbiAgICAgICAgdmFyIGZhaWwgPSB0cmVlLlJlZmVyZW5jZS5yZXF1aXJlZFByb3BlcnRpZXMoc3ltYm9saXplciwgYXR0cmlidXRlcyk7XFxuICAgICAgICBpZiAoZmFpbCkge1xcbiAgICAgICAgICAgIHZhciBydWxlID0gYXR0cmlidXRlc1tPYmplY3Qua2V5cyhhdHRyaWJ1dGVzKS5zaGlmdCgpXTtcXG4gICAgICAgICAgICBlbnYuZXJyb3Ioe1xcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiBmYWlsLFxcbiAgICAgICAgICAgICAgICBpbmRleDogcnVsZS5pbmRleCxcXG4gICAgICAgICAgICAgICAgZmlsZW5hbWU6IHJ1bGUuZmlsZW5hbWVcXG4gICAgICAgICAgICB9KTtcXG4gICAgICAgIH1cXG5cXG4gICAgICAgIHZhciBuYW1lID0gc3ltYm9saXplck5hbWUoc3ltYm9saXplcik7XFxuXFxuICAgICAgICB2YXIgc2VsZmNsb3NpbmcgPSB0cnVlLCB0YWdjb250ZW50O1xcbiAgICAgICAgeG1sICs9ICcgICAgPCcgKyBuYW1lICsgJyAnO1xcbiAgICAgICAgZm9yICh2YXIgaiBpbiBhdHRyaWJ1dGVzKSB7XFxuICAgICAgICAgICAgaWYgKHN5bWJvbGl6ZXIgPT09ICdtYXAnKSBlbnYuZXJyb3Ioe1xcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiAnTWFwIHByb3BlcnRpZXMgYXJlIG5vdCBwZXJtaXR0ZWQgaW4gb3RoZXIgcnVsZXMnLFxcbiAgICAgICAgICAgICAgICBpbmRleDogYXR0cmlidXRlc1tqXS5pbmRleCxcXG4gICAgICAgICAgICAgICAgZmlsZW5hbWU6IGF0dHJpYnV0ZXNbal0uZmlsZW5hbWVcXG4gICAgICAgICAgICB9KTtcXG4gICAgICAgICAgICB2YXIgeCA9IHRyZWUuUmVmZXJlbmNlLnNlbGVjdG9yKGF0dHJpYnV0ZXNbal0ubmFtZSk7XFxuICAgICAgICAgICAgaWYgKHggJiYgeC5zZXJpYWxpemF0aW9uICYmIHguc2VyaWFsaXphdGlvbiA9PT0gJ2NvbnRlbnQnKSB7XFxuICAgICAgICAgICAgICAgIHNlbGZjbG9zaW5nID0gZmFsc2U7XFxuICAgICAgICAgICAgICAgIHRhZ2NvbnRlbnQgPSBhdHRyaWJ1dGVzW2pdLmV2KGVudikudG9YTUwoZW52LCB0cnVlKTtcXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHggJiYgeC5zZXJpYWxpemF0aW9uICYmIHguc2VyaWFsaXphdGlvbiA9PT0gJ3RhZycpIHtcXG4gICAgICAgICAgICAgICAgc2VsZmNsb3NpbmcgPSBmYWxzZTtcXG4gICAgICAgICAgICAgICAgdGFnY29udGVudCA9IGF0dHJpYnV0ZXNbal0uZXYoZW52KS50b1hNTChlbnYsIHRydWUpO1xcbiAgICAgICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgICAgIHhtbCArPSBhdHRyaWJ1dGVzW2pdLmV2KGVudikudG9YTUwoZW52KSArICcgJztcXG4gICAgICAgICAgICB9XFxuICAgICAgICB9XFxuICAgICAgICBpZiAoc2VsZmNsb3NpbmcpIHtcXG4gICAgICAgICAgICB4bWwgKz0gJy8+XFxcXG4nO1xcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgdGFnY29udGVudCAhPT0gXFxcInVuZGVmaW5lZFxcXCIpIHtcXG4gICAgICAgICAgICBpZiAodGFnY29udGVudC5pbmRleE9mKCc8JykgIT0gLTEpIHtcXG4gICAgICAgICAgICAgICAgeG1sICs9ICc+JyArIHRhZ2NvbnRlbnQgKyAnPC8nICsgbmFtZSArICc+XFxcXG4nO1xcbiAgICAgICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgICAgIHhtbCArPSAnPjwhW0NEQVRBWycgKyB0YWdjb250ZW50ICsgJ11dPjwvJyArIG5hbWUgKyAnPlxcXFxuJztcXG4gICAgICAgICAgICB9XFxuICAgICAgICB9XFxuICAgIH1cXG4gICAgaWYgKCFzeW1fY291bnQgfHwgIXhtbCkgcmV0dXJuICcnO1xcbiAgICByZXR1cm4gJyAgPFJ1bGU+XFxcXG4nICsgeG1sICsgJyAgPC9SdWxlPlxcXFxuJztcXG59O1xcblxcbi8vIFRha2UgYSB6b29tIHJhbmdlIG9mIHpvb21zIGFuZCAnaScsIHRoZSBpbmRleCBvZiBhIHJ1bGUgaW4gdGhpcy5ydWxlcyxcXG4vLyBhbmQgZmluZHMgYWxsIGFwcGxpY2FibGUgc3ltYm9saXplcnNcXG50cmVlLkRlZmluaXRpb24ucHJvdG90eXBlLmNvbGxlY3RTeW1ib2xpemVycyA9IGZ1bmN0aW9uKHpvb21zLCBpKSB7XFxuICAgIHZhciBzeW1ib2xpemVycyA9IHt9LCBjaGlsZDtcXG5cXG4gICAgZm9yICh2YXIgaiA9IGk7IGogPCB0aGlzLnJ1bGVzLmxlbmd0aDsgaisrKSB7XFxuICAgICAgICBjaGlsZCA9IHRoaXMucnVsZXNbal07XFxuICAgICAgICB2YXIga2V5ID0gY2hpbGQuaW5zdGFuY2UgKyAnLycgKyBjaGlsZC5zeW1ib2xpemVyO1xcbiAgICAgICAgaWYgKHpvb21zLmN1cnJlbnQgJiBjaGlsZC56b29tICYmXFxuICAgICAgICAgICAoIShrZXkgaW4gc3ltYm9saXplcnMpIHx8XFxuICAgICAgICAgICAoIShjaGlsZC5uYW1lIGluIHN5bWJvbGl6ZXJzW2tleV0pKSkpIHtcXG4gICAgICAgICAgICB6b29tcy5jdXJyZW50ICY9IGNoaWxkLnpvb207XFxuICAgICAgICAgICAgaWYgKCEoa2V5IGluIHN5bWJvbGl6ZXJzKSkge1xcbiAgICAgICAgICAgICAgICBzeW1ib2xpemVyc1trZXldID0ge307XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIHN5bWJvbGl6ZXJzW2tleV1bY2hpbGQubmFtZV0gPSBjaGlsZDtcXG4gICAgICAgIH1cXG4gICAgfVxcblxcbiAgICBpZiAoT2JqZWN0LmtleXMoc3ltYm9saXplcnMpLmxlbmd0aCkge1xcbiAgICAgICAgem9vbXMucnVsZSAmPSAoem9vbXMuYXZhaWxhYmxlICY9IH56b29tcy5jdXJyZW50KTtcXG4gICAgICAgIHJldHVybiBzeW1ib2xpemVycztcXG4gICAgfVxcbn07XFxuXFxuLy8gVGhlIHRyZWUuWm9vbS50b1N0cmluZyBmdW5jdGlvbiBpZ25vcmVzIHRoZSBob2xlcyBpbiB6b29tIHJhbmdlcyBhbmQgb3V0cHV0c1xcbi8vIHNjYWxlZGVub21pbmF0b3JzIHRoYXQgY292ZXIgdGhlIHdob2xlIHJhbmdlIGZyb20gdGhlIGZpcnN0IHRvIGxhc3QgYml0IHNldC5cXG4vLyBUaGlzIGFsZ29yaXRobSBjYW4gcHJvZHVjZXMgem9vbSByYW5nZXMgdGhhdCBtYXkgaGF2ZSBob2xlcy4gSG93ZXZlcixcXG4vLyB3aGVuIHVzaW5nIHRoZSBmaWx0ZXItbW9kZT1cXFwiZmlyc3RcXFwiLCBtb3JlIHNwZWNpZmljIHpvb20gZmlsdGVycyB3aWxsIGFsd2F5c1xcbi8vIGVuZCB1cCBiZWZvcmUgYnJvYWRlciByYW5nZXMuIFRoZSBmaWx0ZXItbW9kZSB3aWxsIHBpY2sgdGhvc2UgZmlyc3QgYmVmb3JlXFxuLy8gcmVzb3J0aW5nIHRvIHRoZSB6b29tIHJhbmdlIHdpdGggdGhlIGhvbGUgYW5kIHN0b3AgcHJvY2Vzc2luZyBmdXJ0aGVyIHJ1bGVzLlxcbnRyZWUuRGVmaW5pdGlvbi5wcm90b3R5cGUudG9YTUwgPSBmdW5jdGlvbihlbnYsIGV4aXN0aW5nKSB7XFxuICAgIHZhciBmaWx0ZXIgPSB0aGlzLmZpbHRlcnMudG9TdHJpbmcoKTtcXG4gICAgaWYgKCEoZmlsdGVyIGluIGV4aXN0aW5nKSkgZXhpc3RpbmdbZmlsdGVyXSA9IHRyZWUuWm9vbS5hbGw7XFxuXFxuICAgIHZhciBhdmFpbGFibGUgPSB0cmVlLlpvb20uYWxsLCB4bWwgPSAnJywgem9vbSwgc3ltYm9saXplcnMsXFxuICAgICAgICB6b29tcyA9IHsgYXZhaWxhYmxlOiB0cmVlLlpvb20uYWxsIH07XFxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5ydWxlcy5sZW5ndGggJiYgYXZhaWxhYmxlOyBpKyspIHtcXG4gICAgICAgIHpvb21zLnJ1bGUgPSB0aGlzLnJ1bGVzW2ldLnpvb207XFxuICAgICAgICBpZiAoIShleGlzdGluZ1tmaWx0ZXJdICYgem9vbXMucnVsZSkpIGNvbnRpbnVlO1xcblxcbiAgICAgICAgd2hpbGUgKHpvb21zLmN1cnJlbnQgPSB6b29tcy5ydWxlICYgYXZhaWxhYmxlKSB7XFxuICAgICAgICAgICAgaWYgKHN5bWJvbGl6ZXJzID0gdGhpcy5jb2xsZWN0U3ltYm9saXplcnMoem9vbXMsIGkpKSB7XFxuICAgICAgICAgICAgICAgIGlmICghKGV4aXN0aW5nW2ZpbHRlcl0gJiB6b29tcy5jdXJyZW50KSkgY29udGludWU7XFxuICAgICAgICAgICAgICAgIHhtbCArPSB0aGlzLnN5bWJvbGl6ZXJzVG9YTUwoZW52LCBzeW1ib2xpemVycyxcXG4gICAgICAgICAgICAgICAgICAgIChuZXcgdHJlZS5ab29tKCkpLnNldFpvb20oZXhpc3RpbmdbZmlsdGVyXSAmIHpvb21zLmN1cnJlbnQpKTtcXG4gICAgICAgICAgICAgICAgZXhpc3RpbmdbZmlsdGVyXSAmPSB+em9vbXMuY3VycmVudDtcXG4gICAgICAgICAgICB9XFxuICAgICAgICB9XFxuICAgIH1cXG5cXG4gICAgcmV0dXJuIHhtbDtcXG59O1xcblxcbnRyZWUuRGVmaW5pdGlvbi5wcm90b3R5cGUudG9KUyA9IGZ1bmN0aW9uKGVudikge1xcbiAgdmFyIHNoYWRlckF0dHJzID0ge307XFxuXFxuICAvLyBtZXJnZSBjb25kaXRpb25zIGZyb20gZmlsdGVycyB3aXRoIHpvb20gY29uZGl0aW9uIG9mIHRoZVxcbiAgLy8gZGVmaW5pdGlvblxcbiAgdmFyIHpvb20gPSBcXFwiKFxcXCIgKyB0aGlzLnpvb20gKyBcXFwiICYgKDEgPDwgY3R4Lnpvb20pKVxcXCI7XFxuICB2YXIgZnJhbWVfb2Zmc2V0ID0gdGhpcy5mcmFtZV9vZmZzZXQ7XFxuICB2YXIgX2lmID0gdGhpcy5maWx0ZXJzLnRvSlMoZW52KTtcXG4gIHZhciBmaWx0ZXJzID0gW3pvb21dO1xcbiAgaWYoX2lmKSBmaWx0ZXJzLnB1c2goX2lmKTtcXG4gIGlmKGZyYW1lX29mZnNldCkgZmlsdGVycy5wdXNoKCdjdHhbXFxcImZyYW1lLW9mZnNldFxcXCJdID09PSAnICsgZnJhbWVfb2Zmc2V0KTtcXG4gIF9pZiA9IGZpbHRlcnMuam9pbihcXFwiICYmIFxcXCIpO1xcbiAgXy5lYWNoKHRoaXMucnVsZXMsIGZ1bmN0aW9uKHJ1bGUpIHtcXG4gICAgICBpZihydWxlIGluc3RhbmNlb2YgdHJlZS5SdWxlKSB7XFxuICAgICAgICBzaGFkZXJBdHRyc1tydWxlLm5hbWVdID0gc2hhZGVyQXR0cnNbcnVsZS5uYW1lXSB8fCBbXTtcXG5cXG4gICAgICAgIHZhciByID0ge1xcbiAgICAgICAgICBpbmRleDogcnVsZS5pbmRleCxcXG4gICAgICAgICAgc3ltYm9saXplcjogcnVsZS5zeW1ib2xpemVyXFxuICAgICAgICB9O1xcblxcbiAgICAgICAgaWYgKF9pZikge1xcbiAgICAgICAgICByLmpzID0gXFxcImlmKFxcXCIgKyBfaWYgKyBcXFwiKXtcXFwiICsgcnVsZS52YWx1ZS50b0pTKGVudikgKyBcXFwifVxcXCJcXG4gICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgIHIuanMgPSBydWxlLnZhbHVlLnRvSlMoZW52KTtcXG4gICAgICAgIH1cXG5cXG4gICAgICAgIHIuY29uc3RhbnQgPSBydWxlLnZhbHVlLmV2KGVudikuaXMgIT09ICdmaWVsZCc7XFxuICAgICAgICByLmZpbHRlcmVkID0gISFfaWY7XFxuXFxuICAgICAgICBzaGFkZXJBdHRyc1tydWxlLm5hbWVdLnB1c2gocik7XFxuICAgICAgfSBlbHNlIHtcXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcXFwiUnVsZXNldCBub3Qgc3VwcG9ydGVkXFxcIik7XFxuICAgICAgICAvL2lmIChydWxlIGluc3RhbmNlb2YgdHJlZS5SdWxlc2V0KSB7XFxuICAgICAgICAgIC8vdmFyIHNoID0gcnVsZS50b0pTKGVudik7XFxuICAgICAgICAgIC8vZm9yKHZhciB2IGluIHNoKSB7XFxuICAgICAgICAgICAgLy9zaGFkZXJBdHRyc1t2XSA9IHNoYWRlckF0dHJzW3ZdIHx8IFtdO1xcbiAgICAgICAgICAgIC8vZm9yKHZhciBhdHRyIGluIHNoW3ZdKSB7XFxuICAgICAgICAgICAgICAvL3NoYWRlckF0dHJzW3ZdLnB1c2goc2hbdl1bYXR0cl0pO1xcbiAgICAgICAgICAgIC8vfVxcbiAgICAgICAgICAvL31cXG4gICAgICAgIC8vfVxcbiAgICAgIH1cXG4gIH0pO1xcbiAgcmV0dXJuIHNoYWRlckF0dHJzO1xcbn07XFxuXFxuXFxufSkoX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vdHJlZSAqLyAwKSk7XFxuXFxuLyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovfS5jYWxsKGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vLi4vLi4vLi4vLi4vd2VicGFjay9idWlsZGluL2dsb2JhbC5qcyAqLyAzKSkpLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lPRGd1YW5NaUxDSnpiM1Z5WTJWeklqcGJJbmRsWW5CaFkyczZMeTh2TGk5K0wyTmhjblJ2TDJ4cFlpOWpZWEowYnk5MGNtVmxMMlJsWm1sdWFYUnBiMjR1YW5NL09USXpOU0pkTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lJb1puVnVZM1JwYjI0b2RISmxaU2tnZTF4dWRtRnlJR0Z6YzJWeWRDQTlJSEpsY1hWcGNtVW9KMkZ6YzJWeWRDY3BMRnh1SUNBZ0lGOGdQU0JuYkc5aVlXd3VYeUI4ZkNCeVpYRjFhWEpsS0NkMWJtUmxjbk5qYjNKbEp5azdYRzVjYmk4dklFRWdaR1ZtYVc1cGRHbHZiaUJwY3lCMGFHVWdZMjl0WW1sdVlYUnBiMjRnYjJZZ1lTQnpaV3hsWTNSdmNpQmhibVFnY25Wc1pYTXNJR3hwYTJWY2JpOHZJQ05tYjI4Z2UxeHVMeThnSUNBZ0lIQnZiSGxuYjI0dGIzQmhZMmwwZVRveExqQTdYRzR2THlCOVhHNHZMMXh1THk4Z1ZHaGxJSE5sYkdWamRHOXlJR05oYmlCb1lYWmxJR1pwYkhSbGNuTmNiblJ5WldVdVJHVm1hVzVwZEdsdmJpQTlJR1oxYm1OMGFXOXVJRVJsWm1sdWFYUnBiMjRvYzJWc1pXTjBiM0lzSUhKMWJHVnpLU0I3WEc0Z0lDQWdkR2hwY3k1bGJHVnRaVzUwY3lBOUlITmxiR1ZqZEc5eUxtVnNaVzFsYm5Sek8xeHVJQ0FnSUdGemMyVnlkQzV2YXloelpXeGxZM1J2Y2k1bWFXeDBaWEp6SUdsdWMzUmhibU5sYjJZZ2RISmxaUzVHYVd4MFpYSnpaWFFwTzF4dUlDQWdJSFJvYVhNdWNuVnNaWE1nUFNCeWRXeGxjenRjYmlBZ0lDQjBhR2x6TG5KMWJHVkpibVJsZUNBOUlIdDlPMXh1SUNBZ0lHWnZjaUFvZG1GeUlHa2dQU0F3T3lCcElEd2dkR2hwY3k1eWRXeGxjeTVzWlc1bmRHZzdJR2tyS3lrZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvSjNwdmIyMG5JR2x1SUhSb2FYTXVjblZzWlhOYmFWMHBJSFJvYVhNdWNuVnNaWE5iYVYwZ1BTQjBhR2x6TG5KMWJHVnpXMmxkTG1Oc2IyNWxLQ2s3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjblZzWlhOYmFWMHVlbTl2YlNBOUlITmxiR1ZqZEc5eUxucHZiMjA3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjblZzWlVsdVpHVjRXM1JvYVhNdWNuVnNaWE5iYVYwdWRYQmtZWFJsU1VRb0tWMGdQU0IwY25WbE8xeHVJQ0FnSUgxY2JpQWdJQ0IwYUdsekxtWnBiSFJsY25NZ1BTQnpaV3hsWTNSdmNpNW1hV3gwWlhKek8xeHVJQ0FnSUhSb2FYTXVlbTl2YlNBOUlITmxiR1ZqZEc5eUxucHZiMjA3WEc0Z0lDQWdkR2hwY3k1bWNtRnRaVjl2Wm1aelpYUWdQU0J6Wld4bFkzUnZjaTVtY21GdFpWOXZabVp6WlhRN1hHNGdJQ0FnZEdocGN5NWhkSFJoWTJodFpXNTBJRDBnYzJWc1pXTjBiM0l1WVhSMFlXTm9iV1Z1ZENCOGZDQW5YMTlrWldaaGRXeDBYMThuTzF4dUlDQWdJSFJvYVhNdWMzQmxZMmxtYVdOcGRIa2dQU0J6Wld4bFkzUnZjaTV6Y0dWamFXWnBZMmwwZVNncE8xeHVmVHRjYmx4dWRISmxaUzVFWldacGJtbDBhVzl1TG5CeWIzUnZkSGx3WlM1MGIxTjBjbWx1WnlBOUlHWjFibU4wYVc5dUtDa2dlMXh1SUNBZ0lIWmhjaUJ6ZEhJZ1BTQjBhR2x6TG1acGJIUmxjbk11ZEc5VGRISnBibWNvS1R0Y2JpQWdJQ0JtYjNJZ0tIWmhjaUJwSUQwZ01Ec2dhU0E4SUhSb2FYTXVjblZzWlhNdWJHVnVaM1JvT3lCcEt5c3BJSHRjYmlBZ0lDQWdJQ0FnYzNSeUlDczlJQ2RjWEc0Z0lDQWdKeUFySUhSb2FYTXVjblZzWlhOYmFWMDdYRzRnSUNBZ2ZWeHVJQ0FnSUhKbGRIVnliaUJ6ZEhJN1hHNTlPMXh1WEc1MGNtVmxMa1JsWm1sdWFYUnBiMjR1Y0hKdmRHOTBlWEJsTG1Oc2IyNWxJRDBnWm5WdVkzUnBiMjRvWm1sc2RHVnljeWtnZTF4dUlDQWdJR2xtSUNobWFXeDBaWEp6S1NCaGMzTmxjblF1YjJzb1ptbHNkR1Z5Y3lCcGJuTjBZVzVqWlc5bUlIUnlaV1V1Um1sc2RHVnljMlYwS1R0Y2JpQWdJQ0IyWVhJZ1kyeHZibVVnUFNCUFltcGxZM1F1WTNKbFlYUmxLSFJ5WldVdVJHVm1hVzVwZEdsdmJpNXdjbTkwYjNSNWNHVXBPMXh1SUNBZ0lHTnNiMjVsTG5KMWJHVnpJRDBnZEdocGN5NXlkV3hsY3k1emJHbGpaU2dwTzF4dUlDQWdJR05zYjI1bExuSjFiR1ZKYm1SbGVDQTlJRjh1WTJ4dmJtVW9kR2hwY3k1eWRXeGxTVzVrWlhncE8xeHVJQ0FnSUdOc2IyNWxMbVpwYkhSbGNuTWdQU0JtYVd4MFpYSnpJRDhnWm1sc2RHVnljeUE2SUhSb2FYTXVabWxzZEdWeWN5NWpiRzl1WlNncE8xeHVJQ0FnSUdOc2IyNWxMbUYwZEdGamFHMWxiblFnUFNCMGFHbHpMbUYwZEdGamFHMWxiblE3WEc0Z0lDQWdjbVYwZFhKdUlHTnNiMjVsTzF4dWZUdGNibHh1ZEhKbFpTNUVaV1pwYm1sMGFXOXVMbkJ5YjNSdmRIbHdaUzVoWkdSU2RXeGxjeUE5SUdaMWJtTjBhVzl1S0hKMWJHVnpLU0I3WEc0Z0lDQWdkbUZ5SUdGa1pHVmtJRDBnTUR0Y2JseHVJQ0FnSUM4dklFRmtaQ0J2Ym14NUlIVnVhWEYxWlNCeWRXeGxjeTVjYmlBZ0lDQm1iM0lnS0haaGNpQnBJRDBnTURzZ2FTQThJSEoxYkdWekxteGxibWQwYURzZ2FTc3JLU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDZ2hkR2hwY3k1eWRXeGxTVzVrWlhoYmNuVnNaWE5iYVYwdWFXUmRLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5KMWJHVnpMbkIxYzJnb2NuVnNaWE5iYVYwcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXlkV3hsU1c1a1pYaGJjblZzWlhOYmFWMHVhV1JkSUQwZ2RISjFaVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHRmtaR1ZrS3lzN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOVhHNWNiaUFnSUNCeVpYUjFjbTRnWVdSa1pXUTdYRzU5TzF4dVhHNHZMeUJFWlhSbGNtMXBibVVnZDJobGRHaGxjaUIwYUdseklITmxiR1ZqZEc5eUlHMWhkR05vWlhNZ1lTQm5hWFpsYmlCcFpGeHVMeThnWVc1a0lHRnljbUY1SUc5bUlHTnNZWE56WlhNc0lHSjVJR1JsZEdWeWJXbHVhVzVuSUhkb1pYUm9aWEpjYmk4dklHRnNiQ0JsYkdWdFpXNTBjeUJwZENCamIyNTBZV2x1Y3lCdFlYUmphQzVjYm5SeVpXVXVSR1ZtYVc1cGRHbHZiaTV3Y205MGIzUjVjR1V1WVhCd2JHbGxjMVJ2SUQwZ1puVnVZM1JwYjI0b2FXUXNJR05zWVhOelpYTXBJSHRjYmlBZ0lDQm1iM0lnS0haaGNpQnBJRDBnTUN3Z2JDQTlJSFJvYVhNdVpXeGxiV1Z1ZEhNdWJHVnVaM1JvT3lCcElEd2diRHNnYVNzcktTQjdYRzRnSUNBZ0lDQWdJSFpoY2lCbGJHVnRJRDBnZEdocGN5NWxiR1Z0Wlc1MGMxdHBYVHRjYmlBZ0lDQWdJQ0FnYVdZZ0tDRW9aV3hsYlM1M2FXeGtZMkZ5WkNCOGZGeHVJQ0FnSUNBZ0lDQWdJQ0FnS0dWc1pXMHVkSGx3WlNBOVBUMGdKMk5zWVhOekp5QW1KaUJqYkdGemMyVnpXMlZzWlcwdVkyeGxZVzVkS1NCOGZGeHVJQ0FnSUNBZ0lDQWdJQ0FnS0dWc1pXMHVkSGx3WlNBOVBUMGdKMmxrSnlBbUppQnBaQ0E5UFQwZ1pXeGxiUzVqYkdWaGJpa3BLU0J5WlhSMWNtNGdabUZzYzJVN1hHNGdJQ0FnZlZ4dUlDQWdJSEpsZEhWeWJpQjBjblZsTzF4dWZUdGNibHh1Wm5WdVkzUnBiMjRnYzNsdFltOXNhWHBsY2s1aGJXVW9jM2x0WW05c2FYcGxjaWtnZTF4dUlDQWdJR1oxYm1OMGFXOXVJR05oY0dsMFlXeHBlbVVvYzNSeUtTQjdJSEpsZEhWeWJpQnpkSEpiTVYwdWRHOVZjSEJsY2tOaGMyVW9LVHNnZlZ4dUlDQWdJSEpsZEhWeWJpQnplVzFpYjJ4cGVtVnlMbU5vWVhKQmRDZ3dLUzUwYjFWd2NHVnlRMkZ6WlNncElDdGNiaUFnSUNBZ0lDQWdJQ0FnYzNsdFltOXNhWHBsY2k1emJHbGpaU2d4S1M1eVpYQnNZV05sS0M5Y1hDMHVMeXdnWTJGd2FYUmhiR2w2WlNrZ0t5QW5VM2x0WW05c2FYcGxjaWM3WEc1OVhHNWNiaTh2SUVkbGRDQmhJSE5wYlhCc1pTQnNhWE4wSUc5bUlIUm9aU0J6ZVcxaWIyeHBlbVZ5Y3l3Z2FXNGdiM0prWlhKY2JtWjFibU4wYVc5dUlITjViV0p2YkdsNlpYSk1hWE4wS0hONWJWOXZjbVJsY2lrZ2UxeHVJQ0FnSUhKbGRIVnliaUJ6ZVcxZmIzSmtaWEl1YzI5eWRDaG1kVzVqZEdsdmJpaGhMQ0JpS1NCN0lISmxkSFZ5YmlCaFd6RmRJQzBnWWxzeFhUc2dmU2xjYmlBZ0lDQWdJQ0FnTG0xaGNDaG1kVzVqZEdsdmJpaDJLU0I3SUhKbGRIVnliaUIyV3pCZE95QjlLVHRjYm4xY2JseHVkSEpsWlM1RVpXWnBibWwwYVc5dUxuQnliM1J2ZEhsd1pTNXplVzFpYjJ4cGVtVnljMVJ2V0UxTUlEMGdablZ1WTNScGIyNG9aVzUyTENCemVXMWliMnhwZW1WeWN5d2dlbTl2YlNrZ2UxeHVJQ0FnSUhaaGNpQjRiV3dnUFNCNmIyOXRMblJ2V0UxTUtHVnVkaWt1YW05cGJpZ25KeWtnS3lCMGFHbHpMbVpwYkhSbGNuTXVkRzlZVFV3b1pXNTJLVHRjYmx4dUlDQWdJQzh2SUZOdmNuUWdjM2x0WW05c2FYcGxjbk1nWW5rZ2RHaGxJR2x1WkdWNElHOW1JSFJvWldseUlHWnBjbk4wSUhCeWIzQmxjblI1SUdSbFptbHVhWFJwYjI1Y2JpQWdJQ0IyWVhJZ2MzbHRYMjl5WkdWeUlEMGdXMTBzSUdsdVpHVjRaWE1nUFNCYlhUdGNiaUFnSUNCbWIzSWdLSFpoY2lCclpYa2dhVzRnYzNsdFltOXNhWHBsY25NcElIdGNiaUFnSUNBZ0lDQWdhVzVrWlhobGN5QTlJRnRkTzF4dUlDQWdJQ0FnSUNCbWIzSWdLSFpoY2lCd2NtOXdJR2x1SUhONWJXSnZiR2w2WlhKelcydGxlVjBwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2x1WkdWNFpYTXVjSFZ6YUNoemVXMWliMnhwZW1WeWMxdHJaWGxkVzNCeWIzQmRMbWx1WkdWNEtUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0IyWVhJZ2JXbHVYMmxrZUNBOUlFMWhkR2d1YldsdUxtRndjR3g1S0UxaGRHZ3NJR2x1WkdWNFpYTXBPMXh1SUNBZ0lDQWdJQ0J6ZVcxZmIzSmtaWEl1Y0hWemFDaGJhMlY1TENCdGFXNWZhV1I0WFNrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnYzNsdFgyOXlaR1Z5SUQwZ2MzbHRZbTlzYVhwbGNreHBjM1FvYzNsdFgyOXlaR1Z5S1R0Y2JpQWdJQ0IyWVhJZ2MzbHRYMk52ZFc1MElEMGdNRHRjYmx4dUlDQWdJR1p2Y2lBb2RtRnlJR2tnUFNBd095QnBJRHdnYzNsdFgyOXlaR1Z5TG14bGJtZDBhRHNnYVNzcktTQjdYRzRnSUNBZ0lDQWdJSFpoY2lCaGRIUnlhV0oxZEdWeklEMGdjM2x0WW05c2FYcGxjbk5iYzNsdFgyOXlaR1Z5VzJsZFhUdGNiaUFnSUNBZ0lDQWdkbUZ5SUhONWJXSnZiR2w2WlhJZ1BTQnplVzFmYjNKa1pYSmJhVjB1YzNCc2FYUW9KeThuS1M1d2IzQW9LVHRjYmx4dUlDQWdJQ0FnSUNBdkx5QlRhMmx3SUhSb1pTQnRZV2RwWTJGc0lDb2djM2x0WW05c2FYcGxjaUIzYUdsamFDQnBjeUIxYzJWa0lHWnZjaUIxYm1sMlpYSnpZV3dnY0hKdmNHVnlkR2xsYzF4dUlDQWdJQ0FnSUNBdkx5QjNhR2xqYUNCaGNtVWdZblZpWW14bFpDQjFjQ0IwYnlCVGRIbHNaU0JsYkdWdFpXNTBjeUJwYm5SbFlXUWdiMllnVTNsdFltOXNhWHBsY2lCbGJHVnRaVzUwY3k1Y2JpQWdJQ0FnSUNBZ2FXWWdLSE41YldKdmJHbDZaWElnUFQwOUlDY3FKeWtnWTI5dWRHbHVkV1U3WEc0Z0lDQWdJQ0FnSUhONWJWOWpiM1Z1ZENzck8xeHVYRzRnSUNBZ0lDQWdJSFpoY2lCbVlXbHNJRDBnZEhKbFpTNVNaV1psY21WdVkyVXVjbVZ4ZFdseVpXUlFjbTl3WlhKMGFXVnpLSE41YldKdmJHbDZaWElzSUdGMGRISnBZblYwWlhNcE8xeHVJQ0FnSUNBZ0lDQnBaaUFvWm1GcGJDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJSEoxYkdVZ1BTQmhkSFJ5YVdKMWRHVnpXMDlpYW1WamRDNXJaWGx6S0dGMGRISnBZblYwWlhNcExuTm9hV1owS0NsZE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnWlc1MkxtVnljbTl5S0h0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdFpYTnpZV2RsT2lCbVlXbHNMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2x1WkdWNE9pQnlkV3hsTG1sdVpHVjRMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1pwYkdWdVlXMWxPaUJ5ZFd4bExtWnBiR1Z1WVcxbFhHNGdJQ0FnSUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJSFpoY2lCdVlXMWxJRDBnYzNsdFltOXNhWHBsY2s1aGJXVW9jM2x0WW05c2FYcGxjaWs3WEc1Y2JpQWdJQ0FnSUNBZ2RtRnlJSE5sYkdaamJHOXphVzVuSUQwZ2RISjFaU3dnZEdGblkyOXVkR1Z1ZER0Y2JpQWdJQ0FnSUNBZ2VHMXNJQ3M5SUNjZ0lDQWdQQ2NnS3lCdVlXMWxJQ3NnSnlBbk8xeHVJQ0FnSUNBZ0lDQm1iM0lnS0haaGNpQnFJR2x1SUdGMGRISnBZblYwWlhNcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaHplVzFpYjJ4cGVtVnlJRDA5UFNBbmJXRndKeWtnWlc1MkxtVnljbTl5S0h0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdFpYTnpZV2RsT2lBblRXRndJSEJ5YjNCbGNuUnBaWE1nWVhKbElHNXZkQ0J3WlhKdGFYUjBaV1FnYVc0Z2IzUm9aWElnY25Wc1pYTW5MRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2x1WkdWNE9pQmhkSFJ5YVdKMWRHVnpXMnBkTG1sdVpHVjRMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1pwYkdWdVlXMWxPaUJoZEhSeWFXSjFkR1Z6VzJwZExtWnBiR1Z1WVcxbFhHNGdJQ0FnSUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCNElEMGdkSEpsWlM1U1pXWmxjbVZ1WTJVdWMyVnNaV04wYjNJb1lYUjBjbWxpZFhSbGMxdHFYUzV1WVcxbEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaDRJQ1ltSUhndWMyVnlhV0ZzYVhwaGRHbHZiaUFtSmlCNExuTmxjbWxoYkdsNllYUnBiMjRnUFQwOUlDZGpiMjUwWlc1MEp5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE5sYkdaamJHOXphVzVuSUQwZ1ptRnNjMlU3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdGblkyOXVkR1Z1ZENBOUlHRjBkSEpwWW5WMFpYTmJhbDB1WlhZb1pXNTJLUzUwYjFoTlRDaGxibllzSUhSeWRXVXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTQmxiSE5sSUdsbUlDaDRJQ1ltSUhndWMyVnlhV0ZzYVhwaGRHbHZiaUFtSmlCNExuTmxjbWxoYkdsNllYUnBiMjRnUFQwOUlDZDBZV2NuS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MyVnNabU5zYjNOcGJtY2dQU0JtWVd4elpUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBZV2RqYjI1MFpXNTBJRDBnWVhSMGNtbGlkWFJsYzF0cVhTNWxkaWhsYm5ZcExuUnZXRTFNS0dWdWRpd2dkSEoxWlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSGh0YkNBclBTQmhkSFJ5YVdKMWRHVnpXMnBkTG1WMktHVnVkaWt1ZEc5WVRVd29aVzUyS1NBcklDY2dKenRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0JwWmlBb2MyVnNabU5zYjNOcGJtY3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIaHRiQ0FyUFNBbkx6NWNYRzRuTzF4dUlDQWdJQ0FnSUNCOUlHVnNjMlVnYVdZZ0tIUjVjR1Z2WmlCMFlXZGpiMjUwWlc1MElDRTlQU0JjSW5WdVpHVm1hVzVsWkZ3aUtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9kR0ZuWTI5dWRHVnVkQzVwYm1SbGVFOW1LQ2M4SnlrZ0lUMGdMVEVwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCNGJXd2dLejBnSno0bklDc2dkR0ZuWTI5dWRHVnVkQ0FySUNjOEx5Y2dLeUJ1WVcxbElDc2dKejVjWEc0bk8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I0Yld3Z0t6MGdKejQ4SVZ0RFJFRlVRVnNuSUNzZ2RHRm5ZMjl1ZEdWdWRDQXJJQ2RkWFQ0OEx5Y2dLeUJ1WVcxbElDc2dKejVjWEc0bk8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dUlDQWdJR2xtSUNnaGMzbHRYMk52ZFc1MElIeDhJQ0Y0Yld3cElISmxkSFZ5YmlBbkp6dGNiaUFnSUNCeVpYUjFjbTRnSnlBZ1BGSjFiR1UrWEZ4dUp5QXJJSGh0YkNBcklDY2dJRHd2VW5Wc1pUNWNYRzRuTzF4dWZUdGNibHh1THk4Z1ZHRnJaU0JoSUhwdmIyMGdjbUZ1WjJVZ2IyWWdlbTl2YlhNZ1lXNWtJQ2RwSnl3Z2RHaGxJR2x1WkdWNElHOW1JR0VnY25Wc1pTQnBiaUIwYUdsekxuSjFiR1Z6TEZ4dUx5OGdZVzVrSUdacGJtUnpJR0ZzYkNCaGNIQnNhV05oWW14bElITjViV0p2YkdsNlpYSnpYRzUwY21WbExrUmxabWx1YVhScGIyNHVjSEp2ZEc5MGVYQmxMbU52Ykd4bFkzUlRlVzFpYjJ4cGVtVnljeUE5SUdaMWJtTjBhVzl1S0hwdmIyMXpMQ0JwS1NCN1hHNGdJQ0FnZG1GeUlITjViV0p2YkdsNlpYSnpJRDBnZTMwc0lHTm9hV3hrTzF4dVhHNGdJQ0FnWm05eUlDaDJZWElnYWlBOUlHazdJR29nUENCMGFHbHpMbkoxYkdWekxteGxibWQwYURzZ2Fpc3JLU0I3WEc0Z0lDQWdJQ0FnSUdOb2FXeGtJRDBnZEdocGN5NXlkV3hsYzF0cVhUdGNiaUFnSUNBZ0lDQWdkbUZ5SUd0bGVTQTlJR05vYVd4a0xtbHVjM1JoYm1ObElDc2dKeThuSUNzZ1kyaHBiR1F1YzNsdFltOXNhWHBsY2p0Y2JpQWdJQ0FnSUNBZ2FXWWdLSHB2YjIxekxtTjFjbkpsYm5RZ0ppQmphR2xzWkM1NmIyOXRJQ1ltWEc0Z0lDQWdJQ0FnSUNBZ0lDZ2hLR3RsZVNCcGJpQnplVzFpYjJ4cGVtVnljeWtnZkh4Y2JpQWdJQ0FnSUNBZ0lDQWdLQ0VvWTJocGJHUXVibUZ0WlNCcGJpQnplVzFpYjJ4cGVtVnljMXRyWlhsZEtTa3BLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjZiMjl0Y3k1amRYSnlaVzUwSUNZOUlHTm9hV3hrTG5wdmIyMDdYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9JU2hyWlhrZ2FXNGdjM2x0WW05c2FYcGxjbk1wS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MzbHRZbTlzYVhwbGNuTmJhMlY1WFNBOUlIdDlPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnYzNsdFltOXNhWHBsY25OYmEyVjVYVnRqYUdsc1pDNXVZVzFsWFNBOUlHTm9hV3hrTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dVhHNGdJQ0FnYVdZZ0tFOWlhbVZqZEM1clpYbHpLSE41YldKdmJHbDZaWEp6S1M1c1pXNW5kR2dwSUh0Y2JpQWdJQ0FnSUNBZ2VtOXZiWE11Y25Wc1pTQW1QU0FvZW05dmJYTXVZWFpoYVd4aFlteGxJQ1k5SUg1NmIyOXRjeTVqZFhKeVpXNTBLVHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSE41YldKdmJHbDZaWEp6TzF4dUlDQWdJSDFjYm4wN1hHNWNiaTh2SUZSb1pTQjBjbVZsTGxwdmIyMHVkRzlUZEhKcGJtY2dablZ1WTNScGIyNGdhV2R1YjNKbGN5QjBhR1VnYUc5c1pYTWdhVzRnZW05dmJTQnlZVzVuWlhNZ1lXNWtJRzkxZEhCMWRITmNiaTh2SUhOallXeGxaR1Z1YjIxcGJtRjBiM0p6SUhSb1lYUWdZMjkyWlhJZ2RHaGxJSGRvYjJ4bElISmhibWRsSUdaeWIyMGdkR2hsSUdacGNuTjBJSFJ2SUd4aGMzUWdZbWwwSUhObGRDNWNiaTh2SUZSb2FYTWdZV3huYjNKcGRHaHRJR05oYmlCd2NtOWtkV05sY3lCNmIyOXRJSEpoYm1kbGN5QjBhR0YwSUcxaGVTQm9ZWFpsSUdodmJHVnpMaUJJYjNkbGRtVnlMRnh1THk4Z2QyaGxiaUIxYzJsdVp5QjBhR1VnWm1sc2RHVnlMVzF2WkdVOVhDSm1hWEp6ZEZ3aUxDQnRiM0psSUhOd1pXTnBabWxqSUhwdmIyMGdabWxzZEdWeWN5QjNhV3hzSUdGc2QyRjVjMXh1THk4Z1pXNWtJSFZ3SUdKbFptOXlaU0JpY205aFpHVnlJSEpoYm1kbGN5NGdWR2hsSUdacGJIUmxjaTF0YjJSbElIZHBiR3dnY0dsamF5QjBhRzl6WlNCbWFYSnpkQ0JpWldadmNtVmNiaTh2SUhKbGMyOXlkR2x1WnlCMGJ5QjBhR1VnZW05dmJTQnlZVzVuWlNCM2FYUm9JSFJvWlNCb2IyeGxJR0Z1WkNCemRHOXdJSEJ5YjJObGMzTnBibWNnWm5WeWRHaGxjaUJ5ZFd4bGN5NWNiblJ5WldVdVJHVm1hVzVwZEdsdmJpNXdjbTkwYjNSNWNHVXVkRzlZVFV3Z1BTQm1kVzVqZEdsdmJpaGxibllzSUdWNGFYTjBhVzVuS1NCN1hHNGdJQ0FnZG1GeUlHWnBiSFJsY2lBOUlIUm9hWE11Wm1sc2RHVnljeTUwYjFOMGNtbHVaeWdwTzF4dUlDQWdJR2xtSUNnaEtHWnBiSFJsY2lCcGJpQmxlR2x6ZEdsdVp5a3BJR1Y0YVhOMGFXNW5XMlpwYkhSbGNsMGdQU0IwY21WbExscHZiMjB1WVd4c08xeHVYRzRnSUNBZ2RtRnlJR0YyWVdsc1lXSnNaU0E5SUhSeVpXVXVXbTl2YlM1aGJHd3NJSGh0YkNBOUlDY25MQ0I2YjI5dExDQnplVzFpYjJ4cGVtVnljeXhjYmlBZ0lDQWdJQ0FnZW05dmJYTWdQU0I3SUdGMllXbHNZV0pzWlRvZ2RISmxaUzVhYjI5dExtRnNiQ0I5TzF4dUlDQWdJR1p2Y2lBb2RtRnlJR2tnUFNBd095QnBJRHdnZEdocGN5NXlkV3hsY3k1c1pXNW5kR2dnSmlZZ1lYWmhhV3hoWW14bE95QnBLeXNwSUh0Y2JpQWdJQ0FnSUNBZ2VtOXZiWE11Y25Wc1pTQTlJSFJvYVhNdWNuVnNaWE5iYVYwdWVtOXZiVHRjYmlBZ0lDQWdJQ0FnYVdZZ0tDRW9aWGhwYzNScGJtZGJabWxzZEdWeVhTQW1JSHB2YjIxekxuSjFiR1VwS1NCamIyNTBhVzUxWlR0Y2JseHVJQ0FnSUNBZ0lDQjNhR2xzWlNBb2VtOXZiWE11WTNWeWNtVnVkQ0E5SUhwdmIyMXpMbkoxYkdVZ0ppQmhkbUZwYkdGaWJHVXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2h6ZVcxaWIyeHBlbVZ5Y3lBOUlIUm9hWE11WTI5c2JHVmpkRk41YldKdmJHbDZaWEp6S0hwdmIyMXpMQ0JwS1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2doS0dWNGFYTjBhVzVuVzJacGJIUmxjbDBnSmlCNmIyOXRjeTVqZFhKeVpXNTBLU2tnWTI5dWRHbHVkV1U3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZUcxc0lDczlJSFJvYVhNdWMzbHRZbTlzYVhwbGNuTlViMWhOVENobGJuWXNJSE41YldKdmJHbDZaWEp6TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQW9ibVYzSUhSeVpXVXVXbTl2YlNncEtTNXpaWFJhYjI5dEtHVjRhWE4wYVc1blcyWnBiSFJsY2wwZ0ppQjZiMjl0Y3k1amRYSnlaVzUwS1NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pYaHBjM1JwYm1kYlptbHNkR1Z5WFNBbVBTQitlbTl2YlhNdVkzVnljbVZ1ZER0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDFjYmx4dUlDQWdJSEpsZEhWeWJpQjRiV3c3WEc1OU8xeHVYRzUwY21WbExrUmxabWx1YVhScGIyNHVjSEp2ZEc5MGVYQmxMblJ2U2xNZ1BTQm1kVzVqZEdsdmJpaGxibllwSUh0Y2JpQWdkbUZ5SUhOb1lXUmxja0YwZEhKeklEMGdlMzA3WEc1Y2JpQWdMeThnYldWeVoyVWdZMjl1WkdsMGFXOXVjeUJtY205dElHWnBiSFJsY25NZ2QybDBhQ0I2YjI5dElHTnZibVJwZEdsdmJpQnZaaUIwYUdWY2JpQWdMeThnWkdWbWFXNXBkR2x2Ymx4dUlDQjJZWElnZW05dmJTQTlJRndpS0Z3aUlDc2dkR2hwY3k1NmIyOXRJQ3NnWENJZ0ppQW9NU0E4UENCamRIZ3VlbTl2YlNrcFhDSTdYRzRnSUhaaGNpQm1jbUZ0WlY5dlptWnpaWFFnUFNCMGFHbHpMbVp5WVcxbFgyOW1abk5sZER0Y2JpQWdkbUZ5SUY5cFppQTlJSFJvYVhNdVptbHNkR1Z5Y3k1MGIwcFRLR1Z1ZGlrN1hHNGdJSFpoY2lCbWFXeDBaWEp6SUQwZ1czcHZiMjFkTzF4dUlDQnBaaWhmYVdZcElHWnBiSFJsY25NdWNIVnphQ2hmYVdZcE8xeHVJQ0JwWmlobWNtRnRaVjl2Wm1aelpYUXBJR1pwYkhSbGNuTXVjSFZ6YUNnblkzUjRXMXdpWm5KaGJXVXRiMlptYzJWMFhDSmRJRDA5UFNBbklDc2dabkpoYldWZmIyWm1jMlYwS1R0Y2JpQWdYMmxtSUQwZ1ptbHNkR1Z5Y3k1cWIybHVLRndpSUNZbUlGd2lLVHRjYmlBZ1h5NWxZV05vS0hSb2FYTXVjblZzWlhNc0lHWjFibU4wYVc5dUtISjFiR1VwSUh0Y2JpQWdJQ0FnSUdsbUtISjFiR1VnYVc1emRHRnVZMlZ2WmlCMGNtVmxMbEoxYkdVcElIdGNiaUFnSUNBZ0lDQWdjMmhoWkdWeVFYUjBjbk5iY25Wc1pTNXVZVzFsWFNBOUlITm9ZV1JsY2tGMGRISnpXM0oxYkdVdWJtRnRaVjBnZkh3Z1cxMDdYRzVjYmlBZ0lDQWdJQ0FnZG1GeUlISWdQU0I3WEc0Z0lDQWdJQ0FnSUNBZ2FXNWtaWGc2SUhKMWJHVXVhVzVrWlhnc1hHNGdJQ0FnSUNBZ0lDQWdjM2x0WW05c2FYcGxjam9nY25Wc1pTNXplVzFpYjJ4cGVtVnlYRzRnSUNBZ0lDQWdJSDA3WEc1Y2JpQWdJQ0FnSUNBZ2FXWWdLRjlwWmlrZ2UxeHVJQ0FnSUNBZ0lDQWdJSEl1YW5NZ1BTQmNJbWxtS0Z3aUlDc2dYMmxtSUNzZ1hDSXBlMXdpSUNzZ2NuVnNaUzUyWVd4MVpTNTBiMHBUS0dWdWRpa2dLeUJjSW4xY0lseHVJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJSEl1YW5NZ1BTQnlkV3hsTG5aaGJIVmxMblJ2U2xNb1pXNTJLVHRjYmlBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lISXVZMjl1YzNSaGJuUWdQU0J5ZFd4bExuWmhiSFZsTG1WMktHVnVkaWt1YVhNZ0lUMDlJQ2RtYVdWc1pDYzdYRzRnSUNBZ0lDQWdJSEl1Wm1sc2RHVnlaV1FnUFNBaElWOXBaanRjYmx4dUlDQWdJQ0FnSUNCemFHRmtaWEpCZEhSeWMxdHlkV3hsTG01aGJXVmRMbkIxYzJnb2NpazdYRzRnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb1hDSlNkV3hsYzJWMElHNXZkQ0J6ZFhCd2IzSjBaV1JjSWlrN1hHNGdJQ0FnSUNBZ0lDOHZhV1lnS0hKMWJHVWdhVzV6ZEdGdVkyVnZaaUIwY21WbExsSjFiR1Z6WlhRcElIdGNiaUFnSUNBZ0lDQWdJQ0F2TDNaaGNpQnphQ0E5SUhKMWJHVXVkRzlLVXlobGJuWXBPMXh1SUNBZ0lDQWdJQ0FnSUM4dlptOXlLSFpoY2lCMklHbHVJSE5vS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0F2TDNOb1lXUmxja0YwZEhKelczWmRJRDBnYzJoaFpHVnlRWFIwY25OYmRsMGdmSHdnVzEwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0F2TDJadmNpaDJZWElnWVhSMGNpQnBiaUJ6YUZ0MlhTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMM05vWVdSbGNrRjBkSEp6VzNaZExuQjFjMmdvYzJoYmRsMWJZWFIwY2wwcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnTHk5OVhHNGdJQ0FnSUNBZ0lDQWdMeTk5WEc0Z0lDQWdJQ0FnSUM4dmZWeHVJQ0FnSUNBZ2ZWeHVJQ0I5S1R0Y2JpQWdjbVYwZFhKdUlITm9ZV1JsY2tGMGRISnpPMXh1ZlR0Y2JseHVYRzU5S1NoeVpYRjFhWEpsS0NjdUxpOTBjbVZsSnlrcE8xeHVYRzVjYmx4dUx5OHZMeTh2THk4dkx5OHZMeTh2THk4dlhHNHZMeUJYUlVKUVFVTkxJRVpQVDFSRlVseHVMeThnTGk5K0wyTmhjblJ2TDJ4cFlpOWpZWEowYnk5MGNtVmxMMlJsWm1sdWFYUnBiMjR1YW5OY2JpOHZJRzF2WkhWc1pTQnBaQ0E5SURnNFhHNHZMeUJ0YjJSMWJHVWdZMmgxYm10eklEMGdNQ0pkTENKdFlYQndhVzVuY3lJNklrRkJRVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUluMD1cIik7XG5cbi8qKiovIH0pLFxuLyogODkgKi9cbi8qIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKiBhbGwgZXhwb3J0cyB1c2VkICovXG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9+L2NhcnRvL2xpYi9jYXJ0by90cmVlL2RpbWVuc2lvbi5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5ldmFsKFwiLyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovKGZ1bmN0aW9uKGdsb2JhbCkgeyhmdW5jdGlvbih0cmVlKSB7XFxudmFyIF8gPSBnbG9iYWwuXyB8fCBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISB1bmRlcnNjb3JlICovIDQpO1xcbi8vXFxuLy8gQSBudW1iZXIgd2l0aCBhIHVuaXRcXG4vL1xcbnRyZWUuRGltZW5zaW9uID0gZnVuY3Rpb24gRGltZW5zaW9uKHZhbHVlLCB1bml0LCBpbmRleCkge1xcbiAgICB0aGlzLnZhbHVlID0gcGFyc2VGbG9hdCh2YWx1ZSk7XFxuICAgIHRoaXMudW5pdCA9IHVuaXQgfHwgbnVsbDtcXG4gICAgdGhpcy5pbmRleCA9IGluZGV4O1xcbn07XFxuXFxudHJlZS5EaW1lbnNpb24ucHJvdG90eXBlID0ge1xcbiAgICBpczogJ2Zsb2F0JyxcXG4gICAgcGh5c2ljYWxfdW5pdHM6IFsnbScsICdjbScsICdpbicsICdtbScsICdwdCcsICdwYyddLFxcbiAgICBzY3JlZW5fdW5pdHM6IFsncHgnLCAnJSddLFxcbiAgICBhbGxfdW5pdHM6IFsnbScsICdjbScsICdpbicsICdtbScsICdwdCcsICdwYycsICdweCcsICclJ10sXFxuICAgIGRlbnNpdGllczoge1xcbiAgICAgICAgbTogMC4wMjU0LFxcbiAgICAgICAgbW06IDI1LjQsXFxuICAgICAgICBjbTogMi41NCxcXG4gICAgICAgIHB0OiA3MixcXG4gICAgICAgIHBjOiA2XFxuICAgIH0sXFxuICAgIGV2OiBmdW5jdGlvbiAoZW52KSB7XFxuICAgICAgICBpZiAodGhpcy51bml0ICYmICFfLmNvbnRhaW5zKHRoaXMuYWxsX3VuaXRzLCB0aGlzLnVuaXQpKSB7XFxuICAgICAgICAgICAgZW52LmVycm9yKHtcXG4gICAgICAgICAgICAgICAgbWVzc2FnZTogXFxcIkludmFsaWQgdW5pdDogJ1xcXCIgKyB0aGlzLnVuaXQgKyBcXFwiJ1xcXCIsXFxuICAgICAgICAgICAgICAgIGluZGV4OiB0aGlzLmluZGV4XFxuICAgICAgICAgICAgfSk7XFxuICAgICAgICAgICAgcmV0dXJuIHsgaXM6ICd1bmRlZmluZWQnLCB2YWx1ZTogJ3VuZGVmaW5lZCcgfTtcXG4gICAgICAgIH1cXG5cXG4gICAgICAgIC8vIG5vcm1hbGl6ZSB1bml0cyB3aGljaCBhcmUgbm90IHB4IG9yICVcXG4gICAgICAgIGlmICh0aGlzLnVuaXQgJiYgXy5jb250YWlucyh0aGlzLnBoeXNpY2FsX3VuaXRzLCB0aGlzLnVuaXQpKSB7XFxuICAgICAgICAgICAgaWYgKCFlbnYucHBpKSB7XFxuICAgICAgICAgICAgICAgIGVudi5lcnJvcih7XFxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBcXFwicHBpIGlzIG5vdCBzZXQsIHNvIG1ldHJpYyB1bml0cyBjYW4ndCBiZSB1c2VkXFxcIixcXG4gICAgICAgICAgICAgICAgICAgIGluZGV4OiB0aGlzLmluZGV4XFxuICAgICAgICAgICAgICAgIH0pO1xcbiAgICAgICAgICAgICAgICByZXR1cm4geyBpczogJ3VuZGVmaW5lZCcsIHZhbHVlOiAndW5kZWZpbmVkJyB9O1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAvLyBjb252ZXJ0IGFsbCB1bml0cyB0byBpbmNoXFxuICAgICAgICAgICAgLy8gY29udmVydCBpbmNoIHRvIHB4IHVzaW5nIHBwaVxcbiAgICAgICAgICAgIHRoaXMudmFsdWUgPSAodGhpcy52YWx1ZSAvIHRoaXMuZGVuc2l0aWVzW3RoaXMudW5pdF0pICogZW52LnBwaTtcXG4gICAgICAgICAgICB0aGlzLnVuaXQgPSAncHgnO1xcbiAgICAgICAgfVxcblxcbiAgICAgICAgcmV0dXJuIHRoaXM7XFxuICAgIH0sXFxuICAgIHJvdW5kOiBmdW5jdGlvbigpIHtcXG4gICAgICAgIHRoaXMudmFsdWUgPSBNYXRoLnJvdW5kKHRoaXMudmFsdWUpO1xcbiAgICAgICAgcmV0dXJuIHRoaXM7XFxuICAgIH0sXFxuICAgIHRvQ29sb3I6IGZ1bmN0aW9uKCkge1xcbiAgICAgICAgcmV0dXJuIG5ldyB0cmVlLkNvbG9yKFt0aGlzLnZhbHVlLCB0aGlzLnZhbHVlLCB0aGlzLnZhbHVlXSk7XFxuICAgIH0sXFxuICAgIHJvdW5kOiBmdW5jdGlvbigpIHtcXG4gICAgICAgIHRoaXMudmFsdWUgPSBNYXRoLnJvdW5kKHRoaXMudmFsdWUpO1xcbiAgICAgICAgcmV0dXJuIHRoaXM7XFxuICAgIH0sXFxuICAgIHRvU3RyaW5nOiBmdW5jdGlvbigpIHtcXG4gICAgICAgIHJldHVybiB0aGlzLnZhbHVlLnRvU3RyaW5nKCk7XFxuICAgIH0sXFxuICAgIG9wZXJhdGU6IGZ1bmN0aW9uKGVudiwgb3AsIG90aGVyKSB7XFxuICAgICAgICBpZiAodGhpcy51bml0ID09PSAnJScgJiYgb3RoZXIudW5pdCAhPT0gJyUnKSB7XFxuICAgICAgICAgICAgZW52LmVycm9yKHtcXG4gICAgICAgICAgICAgICAgbWVzc2FnZTogJ0lmIHR3byBvcGVyYW5kcyBkaWZmZXIsIHRoZSBmaXJzdCBtdXN0IG5vdCBiZSAlJyxcXG4gICAgICAgICAgICAgICAgaW5kZXg6IHRoaXMuaW5kZXhcXG4gICAgICAgICAgICB9KTtcXG4gICAgICAgICAgICByZXR1cm4ge1xcbiAgICAgICAgICAgICAgICBpczogJ3VuZGVmaW5lZCcsXFxuICAgICAgICAgICAgICAgIHZhbHVlOiAndW5kZWZpbmVkJ1xcbiAgICAgICAgICAgIH07XFxuICAgICAgICB9XFxuXFxuICAgICAgICBpZiAodGhpcy51bml0ICE9PSAnJScgJiYgb3RoZXIudW5pdCA9PT0gJyUnKSB7XFxuICAgICAgICAgICAgaWYgKG9wID09PSAnKicgfHwgb3AgPT09ICcvJyB8fCBvcCA9PT0gJyUnKSB7XFxuICAgICAgICAgICAgICAgIGVudi5lcnJvcih7XFxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAnUGVyY2VudCB2YWx1ZXMgY2FuIG9ubHkgYmUgYWRkZWQgb3Igc3VidHJhY3RlZCBmcm9tIG90aGVyIHZhbHVlcycsXFxuICAgICAgICAgICAgICAgICAgICBpbmRleDogdGhpcy5pbmRleFxcbiAgICAgICAgICAgICAgICB9KTtcXG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcXG4gICAgICAgICAgICAgICAgICAgIGlzOiAndW5kZWZpbmVkJyxcXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiAndW5kZWZpbmVkJ1xcbiAgICAgICAgICAgICAgICB9O1xcbiAgICAgICAgICAgIH1cXG5cXG4gICAgICAgICAgICByZXR1cm4gbmV3IHRyZWUuRGltZW5zaW9uKHRyZWUub3BlcmF0ZShvcCxcXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudmFsdWUsIHRoaXMudmFsdWUgKiBvdGhlci52YWx1ZSAqIDAuMDEpLFxcbiAgICAgICAgICAgICAgICB0aGlzLnVuaXQpO1xcbiAgICAgICAgfVxcblxcbiAgICAgICAgLy9oZXJlIHRoZSBvcGVyYW5kcyBhcmUgZWl0aGVyIHRoZSBzYW1lICglIG9yIHVuZGVmaW5lZCBvciBweCksIG9yIG9uZSBpcyB1bmRlZmluZWQgYW5kIHRoZSBvdGhlciBpcyBweFxcbiAgICAgICAgcmV0dXJuIG5ldyB0cmVlLkRpbWVuc2lvbih0cmVlLm9wZXJhdGUob3AsIHRoaXMudmFsdWUsIG90aGVyLnZhbHVlKSxcXG4gICAgICAgICAgICB0aGlzLnVuaXQgfHwgb3RoZXIudW5pdCk7XFxuICAgIH1cXG59O1xcblxcbn0pKF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL3RyZWUgKi8gMCkpO1xcblxcbi8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqL30uY2FsbChleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLy4uLy4uLy4uLy4uL3dlYnBhY2svYnVpbGRpbi9nbG9iYWwuanMgKi8gMykpKS8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pT0RrdWFuTWlMQ0p6YjNWeVkyVnpJanBiSW5kbFluQmhZMnM2THk4dkxpOStMMk5oY25SdkwyeHBZaTlqWVhKMGJ5OTBjbVZsTDJScGJXVnVjMmx2Ymk1cWN6OWpZbVU0SWwwc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYklpaG1kVzVqZEdsdmJpaDBjbVZsS1NCN1hHNTJZWElnWHlBOUlHZHNiMkpoYkM1ZklIeDhJSEpsY1hWcGNtVW9KM1Z1WkdWeWMyTnZjbVVuS1R0Y2JpOHZYRzR2THlCQklHNTFiV0psY2lCM2FYUm9JR0VnZFc1cGRGeHVMeTljYm5SeVpXVXVSR2x0Wlc1emFXOXVJRDBnWm5WdVkzUnBiMjRnUkdsdFpXNXphVzl1S0haaGJIVmxMQ0IxYm1sMExDQnBibVJsZUNrZ2UxeHVJQ0FnSUhSb2FYTXVkbUZzZFdVZ1BTQndZWEp6WlVac2IyRjBLSFpoYkhWbEtUdGNiaUFnSUNCMGFHbHpMblZ1YVhRZ1BTQjFibWwwSUh4OElHNTFiR3c3WEc0Z0lDQWdkR2hwY3k1cGJtUmxlQ0E5SUdsdVpHVjRPMXh1ZlR0Y2JseHVkSEpsWlM1RWFXMWxibk5wYjI0dWNISnZkRzkwZVhCbElEMGdlMXh1SUNBZ0lHbHpPaUFuWm14dllYUW5MRnh1SUNBZ0lIQm9lWE5wWTJGc1gzVnVhWFJ6T2lCYkoyMG5MQ0FuWTIwbkxDQW5hVzRuTENBbmJXMG5MQ0FuY0hRbkxDQW5jR01uWFN4Y2JpQWdJQ0J6WTNKbFpXNWZkVzVwZEhNNklGc25jSGduTENBbkpTZGRMRnh1SUNBZ0lHRnNiRjkxYm1sMGN6b2dXeWR0Snl3Z0oyTnRKeXdnSjJsdUp5d2dKMjF0Snl3Z0ozQjBKeXdnSjNCakp5d2dKM0I0Snl3Z0p5VW5YU3hjYmlBZ0lDQmtaVzV6YVhScFpYTTZJSHRjYmlBZ0lDQWdJQ0FnYlRvZ01DNHdNalUwTEZ4dUlDQWdJQ0FnSUNCdGJUb2dNalV1TkN4Y2JpQWdJQ0FnSUNBZ1kyMDZJREl1TlRRc1hHNGdJQ0FnSUNBZ0lIQjBPaUEzTWl4Y2JpQWdJQ0FnSUNBZ2NHTTZJRFpjYmlBZ0lDQjlMRnh1SUNBZ0lHVjJPaUJtZFc1amRHbHZiaUFvWlc1MktTQjdYRzRnSUNBZ0lDQWdJR2xtSUNoMGFHbHpMblZ1YVhRZ0ppWWdJVjh1WTI5dWRHRnBibk1vZEdocGN5NWhiR3hmZFc1cGRITXNJSFJvYVhNdWRXNXBkQ2twSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR1Z1ZGk1bGNuSnZjaWg3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYldWemMyRm5aVG9nWENKSmJuWmhiR2xrSUhWdWFYUTZJQ2RjSWlBcklIUm9hWE11ZFc1cGRDQXJJRndpSjF3aUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbHVaR1Y0T2lCMGFHbHpMbWx1WkdWNFhHNGdJQ0FnSUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQjdJR2x6T2lBbmRXNWtaV1pwYm1Wa0p5d2dkbUZzZFdVNklDZDFibVJsWm1sdVpXUW5JSDA3WEc0Z0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQXZMeUJ1YjNKdFlXeHBlbVVnZFc1cGRITWdkMmhwWTJnZ1lYSmxJRzV2ZENCd2VDQnZjaUFsWEc0Z0lDQWdJQ0FnSUdsbUlDaDBhR2x6TG5WdWFYUWdKaVlnWHk1amIyNTBZV2x1Y3loMGFHbHpMbkJvZVhOcFkyRnNYM1Z1YVhSekxDQjBhR2x6TG5WdWFYUXBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvSVdWdWRpNXdjR2twSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbGJuWXVaWEp5YjNJb2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J0WlhOellXZGxPaUJjSW5Cd2FTQnBjeUJ1YjNRZ2MyVjBMQ0J6YnlCdFpYUnlhV01nZFc1cGRITWdZMkZ1SjNRZ1ltVWdkWE5sWkZ3aUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwYm1SbGVEb2dkR2hwY3k1cGJtUmxlRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUI3SUdsek9pQW5kVzVrWldacGJtVmtKeXdnZG1Gc2RXVTZJQ2QxYm1SbFptbHVaV1FuSUgwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUJqYjI1MlpYSjBJR0ZzYkNCMWJtbDBjeUIwYnlCcGJtTm9YRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5QmpiMjUyWlhKMElHbHVZMmdnZEc4Z2NIZ2dkWE5wYm1jZ2NIQnBYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMblpoYkhWbElEMGdLSFJvYVhNdWRtRnNkV1VnTHlCMGFHbHpMbVJsYm5OcGRHbGxjMXQwYUdsekxuVnVhWFJkS1NBcUlHVnVkaTV3Y0drN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuVnVhWFFnUFNBbmNIZ25PMXh1SUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTTdYRzRnSUNBZ2ZTeGNiaUFnSUNCeWIzVnVaRG9nWm5WdVkzUnBiMjRvS1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11ZG1Gc2RXVWdQU0JOWVhSb0xuSnZkVzVrS0hSb2FYTXVkbUZzZFdVcE8xeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjenRjYmlBZ0lDQjlMRnh1SUNBZ0lIUnZRMjlzYjNJNklHWjFibU4wYVc5dUtDa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdibVYzSUhSeVpXVXVRMjlzYjNJb1czUm9hWE11ZG1Gc2RXVXNJSFJvYVhNdWRtRnNkV1VzSUhSb2FYTXVkbUZzZFdWZEtUdGNiaUFnSUNCOUxGeHVJQ0FnSUhKdmRXNWtPaUJtZFc1amRHbHZiaWdwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTUyWVd4MVpTQTlJRTFoZEdndWNtOTFibVFvZEdocGN5NTJZV3gxWlNrN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpPMXh1SUNBZ0lIMHNYRzRnSUNBZ2RHOVRkSEpwYm1jNklHWjFibU4wYVc5dUtDa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1MllXeDFaUzUwYjFOMGNtbHVaeWdwTzF4dUlDQWdJSDBzWEc0Z0lDQWdiM0JsY21GMFpUb2dablZ1WTNScGIyNG9aVzUyTENCdmNDd2diM1JvWlhJcElIdGNiaUFnSUNBZ0lDQWdhV1lnS0hSb2FYTXVkVzVwZENBOVBUMGdKeVVuSUNZbUlHOTBhR1Z5TG5WdWFYUWdJVDA5SUNjbEp5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1pXNTJMbVZ5Y205eUtIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnRaWE56WVdkbE9pQW5TV1lnZEhkdklHOXdaWEpoYm1SeklHUnBabVpsY2l3Z2RHaGxJR1pwY25OMElHMTFjM1FnYm05MElHSmxJQ1VuTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsdVpHVjRPaUIwYUdsekxtbHVaR1Y0WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FYTTZJQ2QxYm1SbFptbHVaV1FuTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGJIVmxPaUFuZFc1a1pXWnBibVZrSjF4dUlDQWdJQ0FnSUNBZ0lDQWdmVHRjYmlBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxuVnVhWFFnSVQwOUlDY2xKeUFtSmlCdmRHaGxjaTUxYm1sMElEMDlQU0FuSlNjcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaHZjQ0E5UFQwZ0p5b25JSHg4SUc5d0lEMDlQU0FuTHljZ2ZId2diM0FnUFQwOUlDY2xKeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdWdWRpNWxjbkp2Y2loN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzFsYzNOaFoyVTZJQ2RRWlhKalpXNTBJSFpoYkhWbGN5QmpZVzRnYjI1c2VTQmlaU0JoWkdSbFpDQnZjaUJ6ZFdKMGNtRmpkR1ZrSUdaeWIyMGdiM1JvWlhJZ2RtRnNkV1Z6Snl4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhVzVrWlhnNklIUm9hWE11YVc1a1pYaGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcGN6b2dKM1Z1WkdWbWFXNWxaQ2NzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhiSFZsT2lBbmRXNWtaV1pwYm1Wa0oxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMDdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJ1WlhjZ2RISmxaUzVFYVcxbGJuTnBiMjRvZEhKbFpTNXZjR1Z5WVhSbEtHOXdMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMblpoYkhWbExDQjBhR2x6TG5aaGJIVmxJQ29nYjNSb1pYSXVkbUZzZFdVZ0tpQXdMakF4S1N4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMblZ1YVhRcE8xeHVJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnTHk5b1pYSmxJSFJvWlNCdmNHVnlZVzVrY3lCaGNtVWdaV2wwYUdWeUlIUm9aU0J6WVcxbElDZ2xJRzl5SUhWdVpHVm1hVzVsWkNCdmNpQndlQ2tzSUc5eUlHOXVaU0JwY3lCMWJtUmxabWx1WldRZ1lXNWtJSFJvWlNCdmRHaGxjaUJwY3lCd2VGeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2JtVjNJSFJ5WldVdVJHbHRaVzV6YVc5dUtIUnlaV1V1YjNCbGNtRjBaU2h2Y0N3Z2RHaHBjeTUyWVd4MVpTd2diM1JvWlhJdWRtRnNkV1VwTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1MWJtbDBJSHg4SUc5MGFHVnlMblZ1YVhRcE8xeHVJQ0FnSUgxY2JuMDdYRzVjYm4wcEtISmxjWFZwY21Vb0p5NHVMM1J5WldVbktTazdYRzVjYmx4dVhHNHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OWNiaTh2SUZkRlFsQkJRMHNnUms5UFZFVlNYRzR2THlBdUwzNHZZMkZ5ZEc4dmJHbGlMMk5oY25SdkwzUnlaV1V2WkdsdFpXNXphVzl1TG1welhHNHZMeUJ0YjJSMWJHVWdhV1FnUFNBNE9WeHVMeThnYlc5a2RXeGxJR05vZFc1cmN5QTlJREFpWFN3aWJXRndjR2x1WjNNaU9pSkJRVUZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRU0lzSW5OdmRYSmpaVkp2YjNRaU9pSWlmUT09XCIpO1xuXG4vKioqLyB9KSxcbi8qIDkwICovXG4vKiBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyogYWxsIGV4cG9ydHMgdXNlZCAqL1xuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL34vY2FydG8vbGliL2NhcnRvL3RyZWUvZWxlbWVudC5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuZXZhbChcIihmdW5jdGlvbih0cmVlKSB7XFxuXFxuLy8gQW4gZWxlbWVudCBpcyBhbiBpZCBvciBjbGFzcyBzZWxlY3RvclxcbnRyZWUuRWxlbWVudCA9IGZ1bmN0aW9uIEVsZW1lbnQodmFsdWUpIHtcXG4gICAgdGhpcy52YWx1ZSA9IHZhbHVlLnRyaW0oKTtcXG4gICAgaWYgKHRoaXMudmFsdWVbMF0gPT09ICcjJykge1xcbiAgICAgICAgdGhpcy50eXBlID0gJ2lkJztcXG4gICAgICAgIHRoaXMuY2xlYW4gPSB0aGlzLnZhbHVlLnJlcGxhY2UoL14jLywgJycpO1xcbiAgICB9XFxuICAgIGlmICh0aGlzLnZhbHVlWzBdID09PSAnLicpIHtcXG4gICAgICAgIHRoaXMudHlwZSA9ICdjbGFzcyc7XFxuICAgICAgICB0aGlzLmNsZWFuID0gdGhpcy52YWx1ZS5yZXBsYWNlKC9eXFxcXC4vLCAnJyk7XFxuICAgIH1cXG4gICAgaWYgKHRoaXMudmFsdWUuaW5kZXhPZignKicpICE9PSAtMSkge1xcbiAgICAgICAgdGhpcy50eXBlID0gJ3dpbGRjYXJkJztcXG4gICAgfVxcbn07XFxuXFxuLy8gRGV0ZXJtaW5lIHRoZSAnc3BlY2lmaWNpdHkgbWF0cml4JyBvZiB0aGlzXFxuLy8gc3BlY2lmaWMgc2VsZWN0b3JcXG50cmVlLkVsZW1lbnQucHJvdG90eXBlLnNwZWNpZmljaXR5ID0gZnVuY3Rpb24oKSB7XFxuICAgIHJldHVybiBbXFxuICAgICAgICAodGhpcy50eXBlID09PSAnaWQnKSA/IDEgOiAwLCAvLyBhXFxuICAgICAgICAodGhpcy50eXBlID09PSAnY2xhc3MnKSA/IDEgOiAwICAvLyBiXFxuICAgIF07XFxufTtcXG5cXG50cmVlLkVsZW1lbnQucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzLnZhbHVlOyB9O1xcblxcbn0pKF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL3RyZWUgKi8gMCkpO1xcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pT1RBdWFuTWlMQ0p6YjNWeVkyVnpJanBiSW5kbFluQmhZMnM2THk4dkxpOStMMk5oY25SdkwyeHBZaTlqWVhKMGJ5OTBjbVZsTDJWc1pXMWxiblF1YW5NL01HUTFOeUpkTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lJb1puVnVZM1JwYjI0b2RISmxaU2tnZTF4dVhHNHZMeUJCYmlCbGJHVnRaVzUwSUdseklHRnVJR2xrSUc5eUlHTnNZWE56SUhObGJHVmpkRzl5WEc1MGNtVmxMa1ZzWlcxbGJuUWdQU0JtZFc1amRHbHZiaUJGYkdWdFpXNTBLSFpoYkhWbEtTQjdYRzRnSUNBZ2RHaHBjeTUyWVd4MVpTQTlJSFpoYkhWbExuUnlhVzBvS1R0Y2JpQWdJQ0JwWmlBb2RHaHBjeTUyWVd4MVpWc3dYU0E5UFQwZ0p5TW5LU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVkSGx3WlNBOUlDZHBaQ2M3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVZMnhsWVc0Z1BTQjBhR2x6TG5aaGJIVmxMbkpsY0d4aFkyVW9MMTRqTHl3Z0p5Y3BPMXh1SUNBZ0lIMWNiaUFnSUNCcFppQW9kR2hwY3k1MllXeDFaVnN3WFNBOVBUMGdKeTRuS1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11ZEhsd1pTQTlJQ2RqYkdGemN5YzdYRzRnSUNBZ0lDQWdJSFJvYVhNdVkyeGxZVzRnUFNCMGFHbHpMblpoYkhWbExuSmxjR3hoWTJVb0wxNWNYQzR2TENBbkp5azdYRzRnSUNBZ2ZWeHVJQ0FnSUdsbUlDaDBhR2x6TG5aaGJIVmxMbWx1WkdWNFQyWW9KeW9uS1NBaFBUMGdMVEVwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTUwZVhCbElEMGdKM2RwYkdSallYSmtKenRjYmlBZ0lDQjlYRzU5TzF4dVhHNHZMeUJFWlhSbGNtMXBibVVnZEdobElDZHpjR1ZqYVdacFkybDBlU0J0WVhSeWFYZ25JRzltSUhSb2FYTmNiaTh2SUhOd1pXTnBabWxqSUhObGJHVmpkRzl5WEc1MGNtVmxMa1ZzWlcxbGJuUXVjSEp2ZEc5MGVYQmxMbk53WldOcFptbGphWFI1SUQwZ1puVnVZM1JwYjI0b0tTQjdYRzRnSUNBZ2NtVjBkWEp1SUZ0Y2JpQWdJQ0FnSUNBZ0tIUm9hWE11ZEhsd1pTQTlQVDBnSjJsa0p5a2dQeUF4SURvZ01Dd2dMeThnWVZ4dUlDQWdJQ0FnSUNBb2RHaHBjeTUwZVhCbElEMDlQU0FuWTJ4aGMzTW5LU0EvSURFZ09pQXdJQ0F2THlCaVhHNGdJQ0FnWFR0Y2JuMDdYRzVjYm5SeVpXVXVSV3hsYldWdWRDNXdjbTkwYjNSNWNHVXVkRzlUZEhKcGJtY2dQU0JtZFc1amRHbHZiaWdwSUhzZ2NtVjBkWEp1SUhSb2FYTXVkbUZzZFdVN0lIMDdYRzVjYm4wcEtISmxjWFZwY21Vb0p5NHVMM1J5WldVbktTazdYRzVjYmx4dVhHNHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OWNiaTh2SUZkRlFsQkJRMHNnUms5UFZFVlNYRzR2THlBdUwzNHZZMkZ5ZEc4dmJHbGlMMk5oY25SdkwzUnlaV1V2Wld4bGJXVnVkQzVxYzF4dUx5OGdiVzlrZFd4bElHbGtJRDBnT1RCY2JpOHZJRzF2WkhWc1pTQmphSFZ1YTNNZ1BTQXdJbDBzSW0xaGNIQnBibWR6SWpvaVFVRkJRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3SWl3aWMyOTFjbU5sVW05dmRDSTZJaUo5XCIpO1xuXG4vKioqLyB9KSxcbi8qIDkxICovXG4vKiBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyogYWxsIGV4cG9ydHMgdXNlZCAqL1xuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL34vY2FydG8vbGliL2NhcnRvL3RyZWUvZXhwcmVzc2lvbi5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuZXZhbChcIihmdW5jdGlvbih0cmVlKSB7XFxuXFxudHJlZS5FeHByZXNzaW9uID0gZnVuY3Rpb24gRXhwcmVzc2lvbih2YWx1ZSkge1xcbiAgICB0aGlzLnZhbHVlID0gdmFsdWU7XFxufTtcXG5cXG50cmVlLkV4cHJlc3Npb24ucHJvdG90eXBlID0ge1xcbiAgICBpczogJ2V4cHJlc3Npb24nLFxcbiAgICBldjogZnVuY3Rpb24oZW52KSB7XFxuICAgICAgICBpZiAodGhpcy52YWx1ZS5sZW5ndGggPiAxKSB7XFxuICAgICAgICAgICAgcmV0dXJuIG5ldyB0cmVlLkV4cHJlc3Npb24odGhpcy52YWx1ZS5tYXAoZnVuY3Rpb24oZSkge1xcbiAgICAgICAgICAgICAgICByZXR1cm4gZS5ldihlbnYpO1xcbiAgICAgICAgICAgIH0pKTtcXG4gICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgcmV0dXJuIHRoaXMudmFsdWVbMF0uZXYoZW52KTtcXG4gICAgICAgIH1cXG4gICAgfSxcXG5cXG4gICAgdG9TdHJpbmc6IGZ1bmN0aW9uKGVudikge1xcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsdWUubWFwKGZ1bmN0aW9uKGUpIHtcXG4gICAgICAgICAgICByZXR1cm4gZS50b1N0cmluZyhlbnYpO1xcbiAgICAgICAgfSkuam9pbignICcpO1xcbiAgICB9XFxufTtcXG5cXG59KShfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi90cmVlICovIDApKTtcXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaU9URXVhbk1pTENKemIzVnlZMlZ6SWpwYkluZGxZbkJoWTJzNkx5OHZMaTkrTDJOaGNuUnZMMnhwWWk5allYSjBieTkwY21WbEwyVjRjSEpsYzNOcGIyNHVhbk0vWmpnM015SmRMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUlvWm5WdVkzUnBiMjRvZEhKbFpTa2dlMXh1WEc1MGNtVmxMa1Y0Y0hKbGMzTnBiMjRnUFNCbWRXNWpkR2x2YmlCRmVIQnlaWE56YVc5dUtIWmhiSFZsS1NCN1hHNGdJQ0FnZEdocGN5NTJZV3gxWlNBOUlIWmhiSFZsTzF4dWZUdGNibHh1ZEhKbFpTNUZlSEJ5WlhOemFXOXVMbkJ5YjNSdmRIbHdaU0E5SUh0Y2JpQWdJQ0JwY3pvZ0oyVjRjSEpsYzNOcGIyNG5MRnh1SUNBZ0lHVjJPaUJtZFc1amRHbHZiaWhsYm5ZcElIdGNiaUFnSUNBZ0lDQWdhV1lnS0hSb2FYTXVkbUZzZFdVdWJHVnVaM1JvSUQ0Z01Ta2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUc1bGR5QjBjbVZsTGtWNGNISmxjM05wYjI0b2RHaHBjeTUyWVd4MVpTNXRZWEFvWm5WdVkzUnBiMjRvWlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCbExtVjJLR1Z1ZGlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5S1NrN1hHNGdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1MllXeDFaVnN3WFM1bGRpaGxibllwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnZlN4Y2JseHVJQ0FnSUhSdlUzUnlhVzVuT2lCbWRXNWpkR2x2YmlobGJuWXBJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWRtRnNkV1V1YldGd0tHWjFibU4wYVc5dUtHVXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCbExuUnZVM1J5YVc1bktHVnVkaWs3WEc0Z0lDQWdJQ0FnSUgwcExtcHZhVzRvSnlBbktUdGNiaUFnSUNCOVhHNTlPMXh1WEc1OUtTaHlaWEYxYVhKbEtDY3VMaTkwY21WbEp5a3BPMXh1WEc1Y2JseHVMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZYRzR2THlCWFJVSlFRVU5MSUVaUFQxUkZVbHh1THk4Z0xpOStMMk5oY25SdkwyeHBZaTlqWVhKMGJ5OTBjbVZsTDJWNGNISmxjM05wYjI0dWFuTmNiaTh2SUcxdlpIVnNaU0JwWkNBOUlEa3hYRzR2THlCdGIyUjFiR1VnWTJoMWJtdHpJRDBnTUNKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzaUxDSnpiM1Z5WTJWU2IyOTBJam9pSW4wPVwiKTtcblxuLyoqKi8gfSksXG4vKiA5MiAqL1xuLyogbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9cbi8qIGFsbCBleHBvcnRzIHVzZWQgKi9cbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vfi9jYXJ0by9saWIvY2FydG8vdHJlZS9maWVsZC5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbmV2YWwoXCIoZnVuY3Rpb24odHJlZSkge1xcblxcbnRyZWUuRmllbGQgPSBmdW5jdGlvbiBGaWVsZChjb250ZW50KSB7XFxuICAgIHRoaXMudmFsdWUgPSBjb250ZW50IHx8ICcnO1xcbn07XFxuXFxudHJlZS5GaWVsZC5wcm90b3R5cGUgPSB7XFxuICAgIGlzOiAnZmllbGQnLFxcbiAgICB0b1N0cmluZzogZnVuY3Rpb24oKSB7XFxuICAgICAgICByZXR1cm4gJ1snICsgdGhpcy52YWx1ZSArICddJztcXG4gICAgfSxcXG4gICAgJ2V2JzogZnVuY3Rpb24oKSB7XFxuICAgICAgICByZXR1cm4gdGhpcztcXG4gICAgfVxcbn07XFxuXFxufSkoX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vdHJlZSAqLyAwKSk7XFxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lPVEl1YW5NaUxDSnpiM1Z5WTJWeklqcGJJbmRsWW5CaFkyczZMeTh2TGk5K0wyTmhjblJ2TDJ4cFlpOWpZWEowYnk5MGNtVmxMMlpwWld4a0xtcHpQemN6WmpVaVhTd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lLR1oxYm1OMGFXOXVLSFJ5WldVcElIdGNibHh1ZEhKbFpTNUdhV1ZzWkNBOUlHWjFibU4wYVc5dUlFWnBaV3hrS0dOdmJuUmxiblFwSUh0Y2JpQWdJQ0IwYUdsekxuWmhiSFZsSUQwZ1kyOXVkR1Z1ZENCOGZDQW5KenRjYm4wN1hHNWNiblJ5WldVdVJtbGxiR1F1Y0hKdmRHOTBlWEJsSUQwZ2UxeHVJQ0FnSUdsek9pQW5abWxsYkdRbkxGeHVJQ0FnSUhSdlUzUnlhVzVuT2lCbWRXNWpkR2x2YmlncElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlDZGJKeUFySUhSb2FYTXVkbUZzZFdVZ0t5QW5YU2M3WEc0Z0lDQWdmU3hjYmlBZ0lDQW5aWFluT2lCbWRXNWpkR2x2YmlncElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE03WEc0Z0lDQWdmVnh1ZlR0Y2JseHVmU2tvY21WeGRXbHlaU2duTGk0dmRISmxaU2NwS1R0Y2JseHVYRzVjYmk4dkx5OHZMeTh2THk4dkx5OHZMeTh2TDF4dUx5OGdWMFZDVUVGRFN5QkdUMDlVUlZKY2JpOHZJQzR2Zmk5allYSjBieTlzYVdJdlkyRnlkRzh2ZEhKbFpTOW1hV1ZzWkM1cWMxeHVMeThnYlc5a2RXeGxJR2xrSUQwZ09USmNiaTh2SUcxdlpIVnNaU0JqYUhWdWEzTWdQU0F3SWwwc0ltMWhjSEJwYm1keklqb2lRVUZCUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3lJc0luTnZkWEpqWlZKdmIzUWlPaUlpZlE9PVwiKTtcblxuLyoqKi8gfSksXG4vKiA5MyAqL1xuLyogbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9cbi8qIGFsbCBleHBvcnRzIHVzZWQgKi9cbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL34vY2FydG8vbGliL2NhcnRvL3RyZWUvZmlsdGVyLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbmV2YWwoXCIoZnVuY3Rpb24odHJlZSkge1xcblxcbnRyZWUuRmlsdGVyID0gZnVuY3Rpb24gRmlsdGVyKGtleSwgb3AsIHZhbCwgaW5kZXgsIGZpbGVuYW1lKSB7XFxuICAgIHRoaXMua2V5ID0ga2V5O1xcbiAgICB0aGlzLm9wID0gb3A7XFxuICAgIHRoaXMudmFsID0gdmFsO1xcbiAgICB0aGlzLmluZGV4ID0gaW5kZXg7XFxuICAgIHRoaXMuZmlsZW5hbWUgPSBmaWxlbmFtZTtcXG5cXG4gICAgdGhpcy5pZCA9IHRoaXMua2V5ICsgdGhpcy5vcCArIHRoaXMudmFsO1xcbn07XFxuXFxuLy8geG1sc2FmZSwgbnVtZXJpYywgc3VmZml4XFxudmFyIG9wcyA9IHtcXG4gICAgJzwnOiBbJyAmbHQ7ICcsICdudW1lcmljJ10sXFxuICAgICc+JzogWycgJmd0OyAnLCAnbnVtZXJpYyddLFxcbiAgICAnPSc6IFsnID0gJywgJ2JvdGgnXSxcXG4gICAgJyE9JzogWycgIT0gJywgJ2JvdGgnXSxcXG4gICAgJzw9JzogWycgJmx0Oz0gJywgJ251bWVyaWMnXSxcXG4gICAgJz49JzogWycgJmd0Oz0gJywgJ251bWVyaWMnXSxcXG4gICAgJz1+JzogWycubWF0Y2goJywgJ3N0cmluZycsICcpJ11cXG59O1xcblxcbnRyZWUuRmlsdGVyLnByb3RvdHlwZS5ldiA9IGZ1bmN0aW9uKGVudikge1xcbiAgICB0aGlzLmtleSA9IHRoaXMua2V5LmV2KGVudik7XFxuICAgIHRoaXMudmFsID0gdGhpcy52YWwuZXYoZW52KTtcXG4gICAgcmV0dXJuIHRoaXM7XFxufTtcXG5cXG50cmVlLkZpbHRlci5wcm90b3R5cGUudG9YTUwgPSBmdW5jdGlvbihlbnYpIHtcXG4gICAgaWYgKHRyZWUuUmVmZXJlbmNlLmRhdGEuZmlsdGVyKSB7XFxuICAgICAgICBpZiAodGhpcy5rZXkuaXMgPT09ICdrZXl3b3JkJyAmJiAtMSA9PT0gdHJlZS5SZWZlcmVuY2UuZGF0YS5maWx0ZXIudmFsdWUuaW5kZXhPZih0aGlzLmtleS50b1N0cmluZygpKSkge1xcbiAgICAgICAgICAgIGVudi5lcnJvcih7XFxuICAgICAgICAgICAgICAgIG1lc3NhZ2U6IHRoaXMua2V5LnRvU3RyaW5nKCkgKyAnIGlzIG5vdCBhIHZhbGlkIGtleXdvcmQgaW4gYSBmaWx0ZXIgZXhwcmVzc2lvbicsXFxuICAgICAgICAgICAgICAgIGluZGV4OiB0aGlzLmluZGV4LFxcbiAgICAgICAgICAgICAgICBmaWxlbmFtZTogdGhpcy5maWxlbmFtZVxcbiAgICAgICAgICAgIH0pO1xcbiAgICAgICAgfVxcbiAgICAgICAgaWYgKHRoaXMudmFsLmlzID09PSAna2V5d29yZCcgJiYgLTEgPT09IHRyZWUuUmVmZXJlbmNlLmRhdGEuZmlsdGVyLnZhbHVlLmluZGV4T2YodGhpcy52YWwudG9TdHJpbmcoKSkpIHtcXG4gICAgICAgICAgICBlbnYuZXJyb3Ioe1xcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiB0aGlzLnZhbC50b1N0cmluZygpICsgJyBpcyBub3QgYSB2YWxpZCBrZXl3b3JkIGluIGEgZmlsdGVyIGV4cHJlc3Npb24nLFxcbiAgICAgICAgICAgICAgICBpbmRleDogdGhpcy5pbmRleCxcXG4gICAgICAgICAgICAgICAgZmlsZW5hbWU6IHRoaXMuZmlsZW5hbWVcXG4gICAgICAgICAgICB9KTtcXG4gICAgICAgIH1cXG4gICAgfVxcbiAgICB2YXIga2V5ID0gdGhpcy5rZXkudG9TdHJpbmcoZmFsc2UpO1xcbiAgICB2YXIgdmFsID0gdGhpcy52YWwudG9TdHJpbmcodGhpcy52YWwuaXMgPT0gJ3N0cmluZycpO1xcblxcbiAgICBpZiAoXFxuICAgICAgICAob3BzW3RoaXMub3BdWzFdID09ICdudW1lcmljJyAmJiBpc05hTih2YWwpICYmIHRoaXMudmFsLmlzICE9PSAnZmllbGQnKSB8fFxcbiAgICAgICAgKG9wc1t0aGlzLm9wXVsxXSA9PSAnc3RyaW5nJyAmJiAodmFsKVswXSAhPSBcXFwiJ1xcXCIpXFxuICAgICkge1xcbiAgICAgICAgZW52LmVycm9yKHtcXG4gICAgICAgICAgICBtZXNzYWdlOiAnQ2Fubm90IHVzZSBvcGVyYXRvciBcXFwiJyArIHRoaXMub3AgKyAnXFxcIiB3aXRoIHZhbHVlICcgKyB0aGlzLnZhbCxcXG4gICAgICAgICAgICBpbmRleDogdGhpcy5pbmRleCxcXG4gICAgICAgICAgICBmaWxlbmFtZTogdGhpcy5maWxlbmFtZVxcbiAgICAgICAgfSk7XFxuICAgIH1cXG5cXG4gICAgcmV0dXJuIGtleSArIG9wc1t0aGlzLm9wXVswXSArIHZhbCArIChvcHNbdGhpcy5vcF1bMl0gfHwgJycpO1xcbn07XFxuXFxudHJlZS5GaWx0ZXIucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XFxuICAgIHJldHVybiAnWycgKyB0aGlzLmlkICsgJ10nO1xcbn07XFxuXFxufSkoX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vdHJlZSAqLyAwKSk7XFxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lPVE11YW5NaUxDSnpiM1Z5WTJWeklqcGJJbmRsWW5CaFkyczZMeTh2TGk5K0wyTmhjblJ2TDJ4cFlpOWpZWEowYnk5MGNtVmxMMlpwYkhSbGNpNXFjejgzTldSbElsMHNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJaWhtZFc1amRHbHZiaWgwY21WbEtTQjdYRzVjYm5SeVpXVXVSbWxzZEdWeUlEMGdablZ1WTNScGIyNGdSbWxzZEdWeUtHdGxlU3dnYjNBc0lIWmhiQ3dnYVc1a1pYZ3NJR1pwYkdWdVlXMWxLU0I3WEc0Z0lDQWdkR2hwY3k1clpYa2dQU0JyWlhrN1hHNGdJQ0FnZEdocGN5NXZjQ0E5SUc5d08xeHVJQ0FnSUhSb2FYTXVkbUZzSUQwZ2RtRnNPMXh1SUNBZ0lIUm9hWE11YVc1a1pYZ2dQU0JwYm1SbGVEdGNiaUFnSUNCMGFHbHpMbVpwYkdWdVlXMWxJRDBnWm1sc1pXNWhiV1U3WEc1Y2JpQWdJQ0IwYUdsekxtbGtJRDBnZEdocGN5NXJaWGtnS3lCMGFHbHpMbTl3SUNzZ2RHaHBjeTUyWVd3N1hHNTlPMXh1WEc0dkx5QjRiV3h6WVdabExDQnVkVzFsY21sakxDQnpkV1ptYVhoY2JuWmhjaUJ2Y0hNZ1BTQjdYRzRnSUNBZ0p6d25PaUJiSnlBbWJIUTdJQ2NzSUNkdWRXMWxjbWxqSjEwc1hHNGdJQ0FnSno0bk9pQmJKeUFtWjNRN0lDY3NJQ2R1ZFcxbGNtbGpKMTBzWEc0Z0lDQWdKejBuT2lCYkp5QTlJQ2NzSUNkaWIzUm9KMTBzWEc0Z0lDQWdKeUU5SnpvZ1d5Y2dJVDBnSnl3Z0oySnZkR2duWFN4Y2JpQWdJQ0FuUEQwbk9pQmJKeUFtYkhRN1BTQW5MQ0FuYm5WdFpYSnBZeWRkTEZ4dUlDQWdJQ2MrUFNjNklGc25JQ1puZERzOUlDY3NJQ2R1ZFcxbGNtbGpKMTBzWEc0Z0lDQWdKejErSnpvZ1d5Y3ViV0YwWTJnb0p5d2dKM04wY21sdVp5Y3NJQ2NwSjExY2JuMDdYRzVjYm5SeVpXVXVSbWxzZEdWeUxuQnliM1J2ZEhsd1pTNWxkaUE5SUdaMWJtTjBhVzl1S0dWdWRpa2dlMXh1SUNBZ0lIUm9hWE11YTJWNUlEMGdkR2hwY3k1clpYa3VaWFlvWlc1MktUdGNiaUFnSUNCMGFHbHpMblpoYkNBOUlIUm9hWE11ZG1Gc0xtVjJLR1Z1ZGlrN1hHNGdJQ0FnY21WMGRYSnVJSFJvYVhNN1hHNTlPMXh1WEc1MGNtVmxMa1pwYkhSbGNpNXdjbTkwYjNSNWNHVXVkRzlZVFV3Z1BTQm1kVzVqZEdsdmJpaGxibllwSUh0Y2JpQWdJQ0JwWmlBb2RISmxaUzVTWldabGNtVnVZMlV1WkdGMFlTNW1hV3gwWlhJcElIdGNiaUFnSUNBZ0lDQWdhV1lnS0hSb2FYTXVhMlY1TG1seklEMDlQU0FuYTJWNWQyOXlaQ2NnSmlZZ0xURWdQVDA5SUhSeVpXVXVVbVZtWlhKbGJtTmxMbVJoZEdFdVptbHNkR1Z5TG5aaGJIVmxMbWx1WkdWNFQyWW9kR2hwY3k1clpYa3VkRzlUZEhKcGJtY29LU2twSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR1Z1ZGk1bGNuSnZjaWg3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYldWemMyRm5aVG9nZEdocGN5NXJaWGt1ZEc5VGRISnBibWNvS1NBcklDY2dhWE1nYm05MElHRWdkbUZzYVdRZ2EyVjVkMjl5WkNCcGJpQmhJR1pwYkhSbGNpQmxlSEJ5WlhOemFXOXVKeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwYm1SbGVEb2dkR2hwY3k1cGJtUmxlQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JtYVd4bGJtRnRaVG9nZEdocGN5NW1hV3hsYm1GdFpWeHVJQ0FnSUNBZ0lDQWdJQ0FnZlNrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdhV1lnS0hSb2FYTXVkbUZzTG1seklEMDlQU0FuYTJWNWQyOXlaQ2NnSmlZZ0xURWdQVDA5SUhSeVpXVXVVbVZtWlhKbGJtTmxMbVJoZEdFdVptbHNkR1Z5TG5aaGJIVmxMbWx1WkdWNFQyWW9kR2hwY3k1MllXd3VkRzlUZEhKcGJtY29LU2twSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR1Z1ZGk1bGNuSnZjaWg3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYldWemMyRm5aVG9nZEdocGN5NTJZV3d1ZEc5VGRISnBibWNvS1NBcklDY2dhWE1nYm05MElHRWdkbUZzYVdRZ2EyVjVkMjl5WkNCcGJpQmhJR1pwYkhSbGNpQmxlSEJ5WlhOemFXOXVKeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwYm1SbGVEb2dkR2hwY3k1cGJtUmxlQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JtYVd4bGJtRnRaVG9nZEdocGN5NW1hV3hsYm1GdFpWeHVJQ0FnSUNBZ0lDQWdJQ0FnZlNrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOVhHNGdJQ0FnZG1GeUlHdGxlU0E5SUhSb2FYTXVhMlY1TG5SdlUzUnlhVzVuS0daaGJITmxLVHRjYmlBZ0lDQjJZWElnZG1Gc0lEMGdkR2hwY3k1MllXd3VkRzlUZEhKcGJtY29kR2hwY3k1MllXd3VhWE1nUFQwZ0ozTjBjbWx1WnljcE8xeHVYRzRnSUNBZ2FXWWdLRnh1SUNBZ0lDQWdJQ0FvYjNCelczUm9hWE11YjNCZFd6RmRJRDA5SUNkdWRXMWxjbWxqSnlBbUppQnBjMDVoVGloMllXd3BJQ1ltSUhSb2FYTXVkbUZzTG1seklDRTlQU0FuWm1sbGJHUW5LU0I4ZkZ4dUlDQWdJQ0FnSUNBb2IzQnpXM1JvYVhNdWIzQmRXekZkSUQwOUlDZHpkSEpwYm1jbklDWW1JQ2gyWVd3cFd6QmRJQ0U5SUZ3aUoxd2lLVnh1SUNBZ0lDa2dlMXh1SUNBZ0lDQWdJQ0JsYm5ZdVpYSnliM0lvZTF4dUlDQWdJQ0FnSUNBZ0lDQWdiV1Z6YzJGblpUb2dKME5oYm01dmRDQjFjMlVnYjNCbGNtRjBiM0lnWENJbklDc2dkR2hwY3k1dmNDQXJJQ2RjSWlCM2FYUm9JSFpoYkhWbElDY2dLeUIwYUdsekxuWmhiQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lHbHVaR1Y0T2lCMGFHbHpMbWx1WkdWNExGeHVJQ0FnSUNBZ0lDQWdJQ0FnWm1sc1pXNWhiV1U2SUhSb2FYTXVabWxzWlc1aGJXVmNiaUFnSUNBZ0lDQWdmU2s3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdjbVYwZFhKdUlHdGxlU0FySUc5d2MxdDBhR2x6TG05d1hWc3dYU0FySUhaaGJDQXJJQ2h2Y0hOYmRHaHBjeTV2Y0YxYk1sMGdmSHdnSnljcE8xeHVmVHRjYmx4dWRISmxaUzVHYVd4MFpYSXVjSEp2ZEc5MGVYQmxMblJ2VTNSeWFXNW5JRDBnWm5WdVkzUnBiMjRvS1NCN1hHNGdJQ0FnY21WMGRYSnVJQ2RiSnlBcklIUm9hWE11YVdRZ0t5QW5YU2M3WEc1OU8xeHVYRzU5S1NoeVpYRjFhWEpsS0NjdUxpOTBjbVZsSnlrcE8xeHVYRzVjYmx4dUx5OHZMeTh2THk4dkx5OHZMeTh2THk4dlhHNHZMeUJYUlVKUVFVTkxJRVpQVDFSRlVseHVMeThnTGk5K0wyTmhjblJ2TDJ4cFlpOWpZWEowYnk5MGNtVmxMMlpwYkhSbGNpNXFjMXh1THk4Z2JXOWtkV3hsSUdsa0lEMGdPVE5jYmk4dklHMXZaSFZzWlNCamFIVnVhM01nUFNBd0lsMHNJbTFoY0hCcGJtZHpJam9pUVVGQlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPeUlzSW5OdmRYSmpaVkp2YjNRaU9pSWlmUT09XCIpO1xuXG4vKioqLyB9KSxcbi8qIDk0ICovXG4vKiBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyogYWxsIGV4cG9ydHMgdXNlZCAqL1xuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vfi9jYXJ0by9saWIvY2FydG8vdHJlZS9maWx0ZXJzZXQuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuZXZhbChcIi8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqLyhmdW5jdGlvbihnbG9iYWwpIHt2YXIgdHJlZSA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL3RyZWUgKi8gMCk7XFxudmFyIF8gPSBnbG9iYWwuXyB8fCBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISB1bmRlcnNjb3JlICovIDQpO1xcblxcbnRyZWUuRmlsdGVyc2V0ID0gZnVuY3Rpb24gRmlsdGVyc2V0KCkge1xcbiAgICB0aGlzLmZpbHRlcnMgPSB7fTtcXG59O1xcblxcbnRyZWUuRmlsdGVyc2V0LnByb3RvdHlwZS50b1hNTCA9IGZ1bmN0aW9uKGVudikge1xcbiAgICB2YXIgZmlsdGVycyA9IFtdO1xcbiAgICBmb3IgKHZhciBpZCBpbiB0aGlzLmZpbHRlcnMpIHtcXG4gICAgICAgIGZpbHRlcnMucHVzaCgnKCcgKyB0aGlzLmZpbHRlcnNbaWRdLnRvWE1MKGVudikudHJpbSgpICsgJyknKTtcXG4gICAgfVxcbiAgICBpZiAoZmlsdGVycy5sZW5ndGgpIHtcXG4gICAgICAgIHJldHVybiAnICAgIDxGaWx0ZXI+JyArIGZpbHRlcnMuam9pbignIGFuZCAnKSArICc8L0ZpbHRlcj5cXFxcbic7XFxuICAgIH0gZWxzZSB7XFxuICAgICAgICByZXR1cm4gJyc7XFxuICAgIH1cXG59O1xcblxcbnRyZWUuRmlsdGVyc2V0LnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xcbiAgICB2YXIgYXJyID0gW107XFxuICAgIGZvciAodmFyIGlkIGluIHRoaXMuZmlsdGVycykgYXJyLnB1c2godGhpcy5maWx0ZXJzW2lkXS5pZCk7XFxuICAgIHJldHVybiBhcnIuc29ydCgpLmpvaW4oJ1xcXFx0Jyk7XFxufTtcXG5cXG50cmVlLkZpbHRlcnNldC5wcm90b3R5cGUuZXYgPSBmdW5jdGlvbihlbnYpIHtcXG4gICAgZm9yICh2YXIgaSBpbiB0aGlzLmZpbHRlcnMpIHtcXG4gICAgICAgIHRoaXMuZmlsdGVyc1tpXS5ldihlbnYpO1xcbiAgICB9XFxuICAgIHJldHVybiB0aGlzO1xcbn07XFxuXFxudHJlZS5GaWx0ZXJzZXQucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24oKSB7XFxuICAgIHZhciBjbG9uZSA9IG5ldyB0cmVlLkZpbHRlcnNldCgpO1xcbiAgICBmb3IgKHZhciBpZCBpbiB0aGlzLmZpbHRlcnMpIHtcXG4gICAgICAgIGNsb25lLmZpbHRlcnNbaWRdID0gdGhpcy5maWx0ZXJzW2lkXTtcXG4gICAgfVxcbiAgICByZXR1cm4gY2xvbmU7XFxufTtcXG5cXG4vLyBOb3RlOiBvdGhlciBoYXMgdG8gYmUgYSB0cmVlLkZpbHRlcnNldC5cXG50cmVlLkZpbHRlcnNldC5wcm90b3R5cGUuY2xvbmVXaXRoID0gZnVuY3Rpb24ob3RoZXIpIHtcXG4gICAgdmFyIGFkZGl0aW9ucyA9IFtdO1xcbiAgICBmb3IgKHZhciBpZCBpbiBvdGhlci5maWx0ZXJzKSB7XFxuICAgICAgICB2YXIgc3RhdHVzID0gdGhpcy5hZGRhYmxlKG90aGVyLmZpbHRlcnNbaWRdKTtcXG4gICAgICAgIC8vIHN0YXR1cyBpcyB0cnVlLCBmYWxzZSBvciBudWxsLiBpZiBpdCdzIG51bGwgd2UgZG9uJ3QgZmFpbCB0aGlzXFxuICAgICAgICAvLyBjbG9uZSBub3IgZG8gd2UgYWRkIHRoZSBmaWx0ZXIuXFxuICAgICAgICBpZiAoc3RhdHVzID09PSBmYWxzZSkge1xcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcXG4gICAgICAgIH1cXG4gICAgICAgIGlmIChzdGF0dXMgPT09IHRydWUpIHtcXG4gICAgICAgICAgICAvLyBBZGRpbmcgdGhlIGZpbHRlciB3aWxsIG92ZXJyaWRlIGFub3RoZXIgdmFsdWUuXFxuICAgICAgICAgICAgYWRkaXRpb25zLnB1c2gob3RoZXIuZmlsdGVyc1tpZF0pO1xcbiAgICAgICAgfVxcbiAgICB9XFxuXFxuICAgIC8vIEFkZGluZyB0aGUgb3RoZXIgZmlsdGVycyBkb2Vzbid0IG1ha2UgdGhpcyBmaWx0ZXJzZXQgaW52YWxpZCwgYnV0IGl0XFxuICAgIC8vIGRvZXNuJ3QgYWRkIGFueXRoaW5nIHRvIGl0IGVpdGhlci5cXG4gICAgaWYgKCFhZGRpdGlvbnMubGVuZ3RoKSB7XFxuICAgICAgICByZXR1cm4gbnVsbDtcXG4gICAgfVxcblxcbiAgICAvLyBXZSBjYW4gc3VjY2Vzc2Z1bGx5IGFkZCBhbGwgZmlsdGVycy4gTm93IGNsb25lIHRoZSBmaWx0ZXJzZXQgYW5kIGFkZCB0aGVcXG4gICAgLy8gbmV3IHJ1bGVzLlxcbiAgICB2YXIgY2xvbmUgPSBuZXcgdHJlZS5GaWx0ZXJzZXQoKTtcXG5cXG4gICAgLy8gV2UgY2FuIGFkZCB0aGUgcnVsZXMgdGhhdCBhcmUgYWxyZWFkeSBwcmVzZW50IHdpdGhvdXQgZ29pbmcgdGhyb3VnaCB0aGVcXG4gICAgLy8gYWRkIGZ1bmN0aW9uIGFzIGEgRmlsdGVyc2V0IGlzIGFsd2F5cyBpbiBpdCdzIHNpbXBsZXN0IGNhbm9uaWNhbCBmb3JtLlxcbiAgICBmb3IgKGlkIGluIHRoaXMuZmlsdGVycykge1xcbiAgICAgICAgY2xvbmUuZmlsdGVyc1tpZF0gPSB0aGlzLmZpbHRlcnNbaWRdO1xcbiAgICB9XFxuXFxuICAgIC8vIE9ubHkgYWRkIG5ldyBmaWx0ZXJzIHRoYXQgYWN0dWFsbHkgY2hhbmdlIHRoZSBmaWx0ZXIuXFxuICAgIHdoaWxlIChpZCA9IGFkZGl0aW9ucy5zaGlmdCgpKSB7XFxuICAgICAgICBjbG9uZS5hZGQoaWQpO1xcbiAgICB9XFxuXFxuICAgIHJldHVybiBjbG9uZTtcXG59O1xcblxcbnRyZWUuRmlsdGVyc2V0LnByb3RvdHlwZS50b0pTID0gZnVuY3Rpb24oZW52KSB7XFxuICB2YXIgb3BNYXAgPSB7XFxuICAgICc9JzogJz09PSdcXG4gIH07XFxuICByZXR1cm4gXy5tYXAodGhpcy5maWx0ZXJzLCBmdW5jdGlvbihmaWx0ZXIpIHtcXG4gICAgdmFyIG9wID0gZmlsdGVyLm9wO1xcbiAgICBpZihvcCBpbiBvcE1hcCkge1xcbiAgICAgIG9wID0gb3BNYXBbb3BdO1xcbiAgICB9XFxuICAgIHZhciB2YWwgPSBmaWx0ZXIudmFsO1xcbiAgICBpZihmaWx0ZXIuX3ZhbCAhPT0gdW5kZWZpbmVkKSB7XFxuICAgICAgdmFsID0gZmlsdGVyLl92YWwudG9TdHJpbmcodHJ1ZSk7XFxuICAgIH1cXG4gICAgdmFyIGF0dHJzID0gXFxcImRhdGFcXFwiO1xcbiAgICBpZiAob3AgPT09ICc9ficpIHtcXG4gICAgICByZXR1cm4gXFxcIihcXFwiICsgYXR0cnMgKyBcXFwiWydcXFwiICsgZmlsdGVyLmtleS52YWx1ZSAgKyBcXFwiJ10gKyAnJykubWF0Y2goXFxcIiArICh2YWwuaXMgPT09ICdzdHJpbmcnID8gXFxcIidcXFwiICsgdmFsLnRvU3RyaW5nKCkucmVwbGFjZSgvJy9nLCBcXFwiXFxcXFxcXFwnXFxcIikgKyBcXFwiJ1xcXCIgOiB2YWwpICsgXFxcIilcXFwiO1xcbiAgICB9XFxuICAgIHJldHVybiBhdHRycyArIFxcXCJbJ1xcXCIgKyBmaWx0ZXIua2V5LnZhbHVlICArIFxcXCInXSBcXFwiICsgb3AgKyBcXFwiIFxcXCIgKyAodmFsLmlzID09PSAnc3RyaW5nJyA/IFxcXCInXFxcIiArIHZhbC50b1N0cmluZygpLnJlcGxhY2UoLycvZywgXFxcIlxcXFxcXFxcJ1xcXCIpICsgXFxcIidcXFwiIDogdmFsKTtcXG4gIH0pLmpvaW4oJyAmJiAnKTtcXG59O1xcblxcbi8vIFJldHVybnMgdHJ1ZSB3aGVuIHRoZSBuZXcgZmlsdGVyIGNhbiBiZSBhZGRlZCwgZmFsc2Ugb3RoZXJ3aXNlLlxcbi8vIEl0IGNhbiBhbHNvIHJldHVybiBudWxsLCBhbmQgb24gdGhlIG90aGVyIHNpZGUgd2UgdGVzdCBmb3IgPT09IHRydWUgb3JcXG4vLyBmYWxzZVxcbnRyZWUuRmlsdGVyc2V0LnByb3RvdHlwZS5hZGRhYmxlID0gZnVuY3Rpb24oZmlsdGVyKSB7XFxuICAgIHZhciBrZXkgPSBmaWx0ZXIua2V5LnRvU3RyaW5nKCksXFxuICAgICAgICB2YWx1ZSA9IGZpbHRlci52YWwudG9TdHJpbmcoKTtcXG5cXG4gICAgaWYgKHZhbHVlLm1hdGNoKC9eWzAtOV0rKFxcXFwuWzAtOV0qKT8kLykpIHZhbHVlID0gcGFyc2VGbG9hdCh2YWx1ZSk7XFxuXFxuICAgIHN3aXRjaCAoZmlsdGVyLm9wKSB7XFxuICAgICAgICBjYXNlICc9JzpcXG4gICAgICAgICAgICAvLyBpZiB0aGVyZSBpcyBhbHJlYWR5IGZvbz0gYW5kIHdlJ3JlIGFkZGluZyBmb289XFxuICAgICAgICAgICAgaWYgKHRoaXMuZmlsdGVyc1trZXkgKyAnPSddICE9PSB1bmRlZmluZWQpIHtcXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZmlsdGVyc1trZXkgKyAnPSddLnZhbC50b1N0cmluZygpICE9IHZhbHVlKSB7XFxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XFxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcXG4gICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgICBpZiAodGhpcy5maWx0ZXJzW2tleSArICchPScgKyB2YWx1ZV0gIT09IHVuZGVmaW5lZCkgcmV0dXJuIGZhbHNlO1xcbiAgICAgICAgICAgIGlmICh0aGlzLmZpbHRlcnNba2V5ICsgJz4nXSAhPT0gdW5kZWZpbmVkICYmIHRoaXMuZmlsdGVyc1trZXkgKyAnPiddLnZhbCA+PSB2YWx1ZSkgcmV0dXJuIGZhbHNlO1xcbiAgICAgICAgICAgIGlmICh0aGlzLmZpbHRlcnNba2V5ICsgJzwnXSAhPT0gdW5kZWZpbmVkICYmIHRoaXMuZmlsdGVyc1trZXkgKyAnPCddLnZhbCA8PSB2YWx1ZSkgcmV0dXJuIGZhbHNlO1xcbiAgICAgICAgICAgIGlmICh0aGlzLmZpbHRlcnNba2V5ICsgJz49J10gIT09IHVuZGVmaW5lZCAgJiYgdGhpcy5maWx0ZXJzW2tleSArICc+PSddLnZhbCA+IHZhbHVlKSByZXR1cm4gZmFsc2U7XFxuICAgICAgICAgICAgaWYgKHRoaXMuZmlsdGVyc1trZXkgKyAnPD0nXSAhPT0gdW5kZWZpbmVkICAmJiB0aGlzLmZpbHRlcnNba2V5ICsgJzw9J10udmFsIDwgdmFsdWUpIHJldHVybiBmYWxzZTtcXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcXG5cXG4gICAgICAgIGNhc2UgJz1+JzpcXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcXG5cXG4gICAgICAgIGNhc2UgJyE9JzpcXG4gICAgICAgICAgICBpZiAodGhpcy5maWx0ZXJzW2tleSArICc9J10gIT09IHVuZGVmaW5lZCkgcmV0dXJuICh0aGlzLmZpbHRlcnNba2V5ICsgJz0nXS52YWwgPT0gdmFsdWUpID8gZmFsc2UgOiBudWxsO1xcbiAgICAgICAgICAgIGlmICh0aGlzLmZpbHRlcnNba2V5ICsgJyE9JyArIHZhbHVlXSAhPT0gdW5kZWZpbmVkKSByZXR1cm4gbnVsbDtcXG4gICAgICAgICAgICBpZiAodGhpcy5maWx0ZXJzW2tleSArICc+J10gIT09IHVuZGVmaW5lZCAmJiB0aGlzLmZpbHRlcnNba2V5ICsgJz4nXS52YWwgPj0gdmFsdWUpIHJldHVybiBudWxsO1xcbiAgICAgICAgICAgIGlmICh0aGlzLmZpbHRlcnNba2V5ICsgJzwnXSAhPT0gdW5kZWZpbmVkICYmIHRoaXMuZmlsdGVyc1trZXkgKyAnPCddLnZhbCA8PSB2YWx1ZSkgcmV0dXJuIG51bGw7XFxuICAgICAgICAgICAgaWYgKHRoaXMuZmlsdGVyc1trZXkgKyAnPj0nXSAhPT0gdW5kZWZpbmVkICYmIHRoaXMuZmlsdGVyc1trZXkgKyAnPj0nXS52YWwgPiB2YWx1ZSkgcmV0dXJuIG51bGw7XFxuICAgICAgICAgICAgaWYgKHRoaXMuZmlsdGVyc1trZXkgKyAnPD0nXSAhPT0gdW5kZWZpbmVkICYmIHRoaXMuZmlsdGVyc1trZXkgKyAnPD0nXS52YWwgPCB2YWx1ZSkgcmV0dXJuIG51bGw7XFxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XFxuXFxuICAgICAgICBjYXNlICc+JzpcXG4gICAgICAgICAgICBpZiAoa2V5ICsgJz0nIGluIHRoaXMuZmlsdGVycykge1xcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5maWx0ZXJzW2tleSArICc9J10udmFsIDw9IHZhbHVlKSB7XFxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XFxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcXG4gICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgICBpZiAodGhpcy5maWx0ZXJzW2tleSArICc8J10gIT09IHVuZGVmaW5lZCAmJiB0aGlzLmZpbHRlcnNba2V5ICsgJzwnXS52YWwgPD0gdmFsdWUpIHJldHVybiBmYWxzZTtcXG4gICAgICAgICAgICBpZiAodGhpcy5maWx0ZXJzW2tleSArICc8PSddICE9PSB1bmRlZmluZWQgICYmIHRoaXMuZmlsdGVyc1trZXkgKyAnPD0nXS52YWwgPD0gdmFsdWUpIHJldHVybiBmYWxzZTtcXG4gICAgICAgICAgICBpZiAodGhpcy5maWx0ZXJzW2tleSArICc+J10gIT09IHVuZGVmaW5lZCAmJiB0aGlzLmZpbHRlcnNba2V5ICsgJz4nXS52YWwgPj0gdmFsdWUpIHJldHVybiBudWxsO1xcbiAgICAgICAgICAgIGlmICh0aGlzLmZpbHRlcnNba2V5ICsgJz49J10gIT09IHVuZGVmaW5lZCAgJiYgdGhpcy5maWx0ZXJzW2tleSArICc+PSddLnZhbCA+IHZhbHVlKSByZXR1cm4gbnVsbDtcXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcXG5cXG4gICAgICAgIGNhc2UgJz49JzpcXG4gICAgICAgICAgICBpZiAodGhpcy5maWx0ZXJzW2tleSArICc9JyBdICE9PSB1bmRlZmluZWQpIHJldHVybiAodGhpcy5maWx0ZXJzW2tleSArICc9J10udmFsIDwgdmFsdWUpID8gZmFsc2UgOiBudWxsO1xcbiAgICAgICAgICAgIGlmICh0aGlzLmZpbHRlcnNba2V5ICsgJzwnIF0gIT09IHVuZGVmaW5lZCAmJiB0aGlzLmZpbHRlcnNba2V5ICsgJzwnXS52YWwgPD0gdmFsdWUpIHJldHVybiBmYWxzZTtcXG4gICAgICAgICAgICBpZiAodGhpcy5maWx0ZXJzW2tleSArICc8PSddICE9PSB1bmRlZmluZWQgJiYgdGhpcy5maWx0ZXJzW2tleSArICc8PSddLnZhbCA8IHZhbHVlKSByZXR1cm4gZmFsc2U7XFxuICAgICAgICAgICAgaWYgKHRoaXMuZmlsdGVyc1trZXkgKyAnPicgXSAhPT0gdW5kZWZpbmVkICYmIHRoaXMuZmlsdGVyc1trZXkgKyAnPiddLnZhbCA+PSB2YWx1ZSkgcmV0dXJuIG51bGw7XFxuICAgICAgICAgICAgaWYgKHRoaXMuZmlsdGVyc1trZXkgKyAnPj0nXSAhPT0gdW5kZWZpbmVkICYmIHRoaXMuZmlsdGVyc1trZXkgKyAnPj0nXS52YWwgPj0gdmFsdWUpIHJldHVybiBudWxsO1xcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xcblxcbiAgICAgICAgY2FzZSAnPCc6XFxuICAgICAgICAgICAgaWYgKHRoaXMuZmlsdGVyc1trZXkgKyAnPScgXSAhPT0gdW5kZWZpbmVkKSByZXR1cm4gKHRoaXMuZmlsdGVyc1trZXkgKyAnPSddLnZhbCA+PSB2YWx1ZSkgPyBmYWxzZSA6IG51bGw7XFxuICAgICAgICAgICAgaWYgKHRoaXMuZmlsdGVyc1trZXkgKyAnPicgXSAhPT0gdW5kZWZpbmVkICYmIHRoaXMuZmlsdGVyc1trZXkgKyAnPiddLnZhbCA+PSB2YWx1ZSkgcmV0dXJuIGZhbHNlO1xcbiAgICAgICAgICAgIGlmICh0aGlzLmZpbHRlcnNba2V5ICsgJz49J10gIT09IHVuZGVmaW5lZCAmJiB0aGlzLmZpbHRlcnNba2V5ICsgJz49J10udmFsID49IHZhbHVlKSByZXR1cm4gZmFsc2U7XFxuICAgICAgICAgICAgaWYgKHRoaXMuZmlsdGVyc1trZXkgKyAnPCcgXSAhPT0gdW5kZWZpbmVkICYmIHRoaXMuZmlsdGVyc1trZXkgKyAnPCddLnZhbCA8PSB2YWx1ZSkgcmV0dXJuIG51bGw7XFxuICAgICAgICAgICAgaWYgKHRoaXMuZmlsdGVyc1trZXkgKyAnPD0nXSAhPT0gdW5kZWZpbmVkICYmIHRoaXMuZmlsdGVyc1trZXkgKyAnPD0nXS52YWwgPCB2YWx1ZSkgcmV0dXJuIG51bGw7XFxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XFxuXFxuICAgICAgICBjYXNlICc8PSc6XFxuICAgICAgICAgICAgaWYgKHRoaXMuZmlsdGVyc1trZXkgKyAnPScgXSAhPT0gdW5kZWZpbmVkKSByZXR1cm4gKHRoaXMuZmlsdGVyc1trZXkgKyAnPSddLnZhbCA+IHZhbHVlKSA/IGZhbHNlIDogbnVsbDtcXG4gICAgICAgICAgICBpZiAodGhpcy5maWx0ZXJzW2tleSArICc+JyBdICE9PSB1bmRlZmluZWQgJiYgdGhpcy5maWx0ZXJzW2tleSArICc+J10udmFsID49IHZhbHVlKSByZXR1cm4gZmFsc2U7XFxuICAgICAgICAgICAgaWYgKHRoaXMuZmlsdGVyc1trZXkgKyAnPj0nXSAhPT0gdW5kZWZpbmVkICYmIHRoaXMuZmlsdGVyc1trZXkgKyAnPj0nXS52YWwgPiB2YWx1ZSkgcmV0dXJuIGZhbHNlO1xcbiAgICAgICAgICAgIGlmICh0aGlzLmZpbHRlcnNba2V5ICsgJzwnIF0gIT09IHVuZGVmaW5lZCAmJiB0aGlzLmZpbHRlcnNba2V5ICsgJzwnXS52YWwgPD0gdmFsdWUpIHJldHVybiBudWxsO1xcbiAgICAgICAgICAgIGlmICh0aGlzLmZpbHRlcnNba2V5ICsgJzw9J10gIT09IHVuZGVmaW5lZCAmJiB0aGlzLmZpbHRlcnNba2V5ICsgJzw9J10udmFsIDw9IHZhbHVlKSByZXR1cm4gbnVsbDtcXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcXG4gICAgfVxcbn07XFxuXFxuLy8gRG9lcyB0aGUgbmV3IGZpbHRlciBjb25zdGl0dXRlIGEgY29uZmxpY3Q/XFxudHJlZS5GaWx0ZXJzZXQucHJvdG90eXBlLmNvbmZsaWN0ID0gZnVuY3Rpb24oZmlsdGVyKSB7XFxuICAgIHZhciBrZXkgPSBmaWx0ZXIua2V5LnRvU3RyaW5nKCksXFxuICAgICAgICB2YWx1ZSA9IGZpbHRlci52YWwudG9TdHJpbmcoKTtcXG5cXG4gICAgaWYgKCFpc05hTihwYXJzZUZsb2F0KHZhbHVlKSkpIHZhbHVlID0gcGFyc2VGbG9hdCh2YWx1ZSk7XFxuXFxuICAgIC8vIGlmIChhPWIpICYmIChhPWMpXFxuICAgIC8vIGlmIChhPWIpICYmIChhIT1iKVxcbiAgICAvLyBvciAoYSE9YikgJiYgKGE9YilcXG4gICAgaWYgKChmaWx0ZXIub3AgPT09ICc9JyAmJiB0aGlzLmZpbHRlcnNba2V5ICsgJz0nXSAhPT0gdW5kZWZpbmVkICYmXFxuICAgICAgICB2YWx1ZSAhPSB0aGlzLmZpbHRlcnNba2V5ICsgJz0nXS52YWwudG9TdHJpbmcoKSkgfHxcXG4gICAgICAgIChmaWx0ZXIub3AgPT09ICchPScgJiYgdGhpcy5maWx0ZXJzW2tleSArICc9J10gIT09IHVuZGVmaW5lZCAmJlxcbiAgICAgICAgdmFsdWUgPT0gdGhpcy5maWx0ZXJzW2tleSArICc9J10udmFsLnRvU3RyaW5nKCkpIHx8XFxuICAgICAgICAoZmlsdGVyLm9wID09PSAnPScgJiYgdGhpcy5maWx0ZXJzW2tleSArICchPSddICE9PSB1bmRlZmluZWQgJiZcXG4gICAgICAgIHZhbHVlID09IHRoaXMuZmlsdGVyc1trZXkgKyAnIT0nXS52YWwudG9TdHJpbmcoKSkpIHtcXG4gICAgICAgIHJldHVybiBmaWx0ZXIudG9TdHJpbmcoKSArICcgYWRkZWQgdG8gJyArIHRoaXMudG9TdHJpbmcoKSArICcgcHJvZHVjZXMgYW4gaW52YWxpZCBmaWx0ZXInO1xcbiAgICB9XFxuXFxuICAgIHJldHVybiBmYWxzZTtcXG59O1xcblxcbi8vIE9ubHkgY2FsbCB0aGlzIGZ1bmN0aW9uIGZvciBmaWx0ZXJzIHRoYXQgaGF2ZSBiZWVuIGNsZWFyZWQgYnkgLmFkZGFibGUoKS5cXG50cmVlLkZpbHRlcnNldC5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24oZmlsdGVyLCBlbnYpIHtcXG4gICAgdmFyIGtleSA9IGZpbHRlci5rZXkudG9TdHJpbmcoKSxcXG4gICAgICAgIGlkLFxcbiAgICAgICAgb3AgPSBmaWx0ZXIub3AsXFxuICAgICAgICBjb25mbGljdCA9IHRoaXMuY29uZmxpY3QoZmlsdGVyKSxcXG4gICAgICAgIG51bXZhbDtcXG5cXG4gICAgaWYgKGNvbmZsaWN0KSByZXR1cm4gY29uZmxpY3Q7XFxuXFxuICAgIGlmIChvcCA9PT0gJz0nKSB7XFxuICAgICAgICBmb3IgKHZhciBpIGluIHRoaXMuZmlsdGVycykge1xcbiAgICAgICAgICAgIGlmICh0aGlzLmZpbHRlcnNbaV0ua2V5ID09IGtleSkgZGVsZXRlIHRoaXMuZmlsdGVyc1tpXTtcXG4gICAgICAgIH1cXG4gICAgICAgIHRoaXMuZmlsdGVyc1trZXkgKyAnPSddID0gZmlsdGVyO1xcbiAgICB9IGVsc2UgaWYgKG9wID09PSAnIT0nKSB7XFxuICAgICAgICB0aGlzLmZpbHRlcnNba2V5ICsgJyE9JyArIGZpbHRlci52YWxdID0gZmlsdGVyO1xcbiAgICB9IGVsc2UgaWYgKG9wID09PSAnPX4nKSB7XFxuICAgICAgICB0aGlzLmZpbHRlcnNba2V5ICsgJz1+JyArIGZpbHRlci52YWxdID0gZmlsdGVyO1xcbiAgICB9IGVsc2UgaWYgKG9wID09PSAnPicpIHtcXG4gICAgICAgIC8vIElmIHRoZXJlIGFyZSBvdGhlciBmaWx0ZXJzIHRoYXQgYXJlIGFsc28gPlxcbiAgICAgICAgLy8gYnV0IGFyZSBsZXNzIHRoYW4gdGhpcyBvbmUsIHRoZXkgZG9uJ3QgbWF0dGVyLCBzb1xcbiAgICAgICAgLy8gcmVtb3ZlIHRoZW0uXFxuICAgICAgICBmb3IgKHZhciBqIGluIHRoaXMuZmlsdGVycykge1xcbiAgICAgICAgICAgIGlmICh0aGlzLmZpbHRlcnNbal0ua2V5ID09IGtleSAmJiB0aGlzLmZpbHRlcnNbal0udmFsIDw9IGZpbHRlci52YWwpIHtcXG4gICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMuZmlsdGVyc1tqXTtcXG4gICAgICAgICAgICB9XFxuICAgICAgICB9XFxuICAgICAgICB0aGlzLmZpbHRlcnNba2V5ICsgJz4nXSA9IGZpbHRlcjtcXG4gICAgfSBlbHNlIGlmIChvcCA9PT0gJz49Jykge1xcbiAgICAgICAgZm9yICh2YXIgayBpbiB0aGlzLmZpbHRlcnMpIHtcXG4gICAgICAgICAgICBudW12YWwgPSAoK3RoaXMuZmlsdGVyc1trXS52YWwudG9TdHJpbmcoKSk7XFxuICAgICAgICAgICAgaWYgKHRoaXMuZmlsdGVyc1trXS5rZXkgPT0ga2V5ICYmIG51bXZhbCA8IGZpbHRlci52YWwpIHtcXG4gICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMuZmlsdGVyc1trXTtcXG4gICAgICAgICAgICB9XFxuICAgICAgICB9XFxuICAgICAgICBpZiAodGhpcy5maWx0ZXJzW2tleSArICchPScgKyBmaWx0ZXIudmFsXSAhPT0gdW5kZWZpbmVkKSB7XFxuICAgICAgICAgICAgZGVsZXRlIHRoaXMuZmlsdGVyc1trZXkgKyAnIT0nICsgZmlsdGVyLnZhbF07XFxuICAgICAgICAgICAgZmlsdGVyLm9wID0gJz4nO1xcbiAgICAgICAgICAgIHRoaXMuZmlsdGVyc1trZXkgKyAnPiddID0gZmlsdGVyO1xcbiAgICAgICAgfVxcbiAgICAgICAgZWxzZSB7XFxuICAgICAgICAgICAgdGhpcy5maWx0ZXJzW2tleSArICc+PSddID0gZmlsdGVyO1xcbiAgICAgICAgfVxcbiAgICB9IGVsc2UgaWYgKG9wID09PSAnPCcpIHtcXG4gICAgICAgIGZvciAodmFyIGwgaW4gdGhpcy5maWx0ZXJzKSB7XFxuICAgICAgICAgICAgbnVtdmFsID0gKCt0aGlzLmZpbHRlcnNbbF0udmFsLnRvU3RyaW5nKCkpO1xcbiAgICAgICAgICAgIGlmICh0aGlzLmZpbHRlcnNbbF0ua2V5ID09IGtleSAmJiBudW12YWwgPj0gZmlsdGVyLnZhbCkge1xcbiAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5maWx0ZXJzW2xdO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgIH1cXG4gICAgICAgIHRoaXMuZmlsdGVyc1trZXkgKyAnPCddID0gZmlsdGVyO1xcbiAgICB9IGVsc2UgaWYgKG9wID09PSAnPD0nKSB7XFxuICAgICAgICBmb3IgKHZhciBtIGluIHRoaXMuZmlsdGVycykge1xcbiAgICAgICAgICAgIG51bXZhbCA9ICgrdGhpcy5maWx0ZXJzW21dLnZhbC50b1N0cmluZygpKTtcXG4gICAgICAgICAgICBpZiAodGhpcy5maWx0ZXJzW21dLmtleSA9PSBrZXkgJiYgbnVtdmFsID4gZmlsdGVyLnZhbCkge1xcbiAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5maWx0ZXJzW21dO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgIH1cXG4gICAgICAgIGlmICh0aGlzLmZpbHRlcnNba2V5ICsgJyE9JyArIGZpbHRlci52YWxdICE9PSB1bmRlZmluZWQpIHtcXG4gICAgICAgICAgICBkZWxldGUgdGhpcy5maWx0ZXJzW2tleSArICchPScgKyBmaWx0ZXIudmFsXTtcXG4gICAgICAgICAgICBmaWx0ZXIub3AgPSAnPCc7XFxuICAgICAgICAgICAgdGhpcy5maWx0ZXJzW2tleSArICc8J10gPSBmaWx0ZXI7XFxuICAgICAgICB9XFxuICAgICAgICBlbHNlIHtcXG4gICAgICAgICAgICB0aGlzLmZpbHRlcnNba2V5ICsgJzw9J10gPSBmaWx0ZXI7XFxuICAgICAgICB9XFxuICAgIH1cXG59O1xcblxcbi8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqL30uY2FsbChleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLy4uLy4uLy4uLy4uL3dlYnBhY2svYnVpbGRpbi9nbG9iYWwuanMgKi8gMykpKS8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pT1RRdWFuTWlMQ0p6YjNWeVkyVnpJanBiSW5kbFluQmhZMnM2THk4dkxpOStMMk5oY25SdkwyeHBZaTlqWVhKMGJ5OTBjbVZsTDJacGJIUmxjbk5sZEM1cWN6OWtPR1E1SWwwc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYkluWmhjaUIwY21WbElEMGdjbVZ4ZFdseVpTZ25MaTR2ZEhKbFpTY3BPMXh1ZG1GeUlGOGdQU0JuYkc5aVlXd3VYeUI4ZkNCeVpYRjFhWEpsS0NkMWJtUmxjbk5qYjNKbEp5azdYRzVjYm5SeVpXVXVSbWxzZEdWeWMyVjBJRDBnWm5WdVkzUnBiMjRnUm1sc2RHVnljMlYwS0NrZ2UxeHVJQ0FnSUhSb2FYTXVabWxzZEdWeWN5QTlJSHQ5TzF4dWZUdGNibHh1ZEhKbFpTNUdhV3gwWlhKelpYUXVjSEp2ZEc5MGVYQmxMblJ2V0UxTUlEMGdablZ1WTNScGIyNG9aVzUyS1NCN1hHNGdJQ0FnZG1GeUlHWnBiSFJsY25NZ1BTQmJYVHRjYmlBZ0lDQm1iM0lnS0haaGNpQnBaQ0JwYmlCMGFHbHpMbVpwYkhSbGNuTXBJSHRjYmlBZ0lDQWdJQ0FnWm1sc2RHVnljeTV3ZFhOb0tDY29KeUFySUhSb2FYTXVabWxzZEdWeWMxdHBaRjB1ZEc5WVRVd29aVzUyS1M1MGNtbHRLQ2tnS3lBbktTY3BPMXh1SUNBZ0lIMWNiaUFnSUNCcFppQW9abWxzZEdWeWN5NXNaVzVuZEdncElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlDY2dJQ0FnUEVacGJIUmxjajRuSUNzZ1ptbHNkR1Z5Y3k1cWIybHVLQ2NnWVc1a0lDY3BJQ3NnSnp3dlJtbHNkR1Z5UGx4Y2JpYzdYRzRnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUNjbk8xeHVJQ0FnSUgxY2JuMDdYRzVjYm5SeVpXVXVSbWxzZEdWeWMyVjBMbkJ5YjNSdmRIbHdaUzUwYjFOMGNtbHVaeUE5SUdaMWJtTjBhVzl1S0NrZ2UxeHVJQ0FnSUhaaGNpQmhjbklnUFNCYlhUdGNiaUFnSUNCbWIzSWdLSFpoY2lCcFpDQnBiaUIwYUdsekxtWnBiSFJsY25NcElHRnljaTV3ZFhOb0tIUm9hWE11Wm1sc2RHVnljMXRwWkYwdWFXUXBPMXh1SUNBZ0lISmxkSFZ5YmlCaGNuSXVjMjl5ZENncExtcHZhVzRvSjF4Y2RDY3BPMXh1ZlR0Y2JseHVkSEpsWlM1R2FXeDBaWEp6WlhRdWNISnZkRzkwZVhCbExtVjJJRDBnWm5WdVkzUnBiMjRvWlc1MktTQjdYRzRnSUNBZ1ptOXlJQ2gyWVhJZ2FTQnBiaUIwYUdsekxtWnBiSFJsY25NcElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1bWFXeDBaWEp6VzJsZExtVjJLR1Z1ZGlrN1hHNGdJQ0FnZlZ4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TzF4dWZUdGNibHh1ZEhKbFpTNUdhV3gwWlhKelpYUXVjSEp2ZEc5MGVYQmxMbU5zYjI1bElEMGdablZ1WTNScGIyNG9LU0I3WEc0Z0lDQWdkbUZ5SUdOc2IyNWxJRDBnYm1WM0lIUnlaV1V1Um1sc2RHVnljMlYwS0NrN1hHNGdJQ0FnWm05eUlDaDJZWElnYVdRZ2FXNGdkR2hwY3k1bWFXeDBaWEp6S1NCN1hHNGdJQ0FnSUNBZ0lHTnNiMjVsTG1acGJIUmxjbk5iYVdSZElEMGdkR2hwY3k1bWFXeDBaWEp6VzJsa1hUdGNiaUFnSUNCOVhHNGdJQ0FnY21WMGRYSnVJR05zYjI1bE8xeHVmVHRjYmx4dUx5OGdUbTkwWlRvZ2IzUm9aWElnYUdGeklIUnZJR0psSUdFZ2RISmxaUzVHYVd4MFpYSnpaWFF1WEc1MGNtVmxMa1pwYkhSbGNuTmxkQzV3Y205MGIzUjVjR1V1WTJ4dmJtVlhhWFJvSUQwZ1puVnVZM1JwYjI0b2IzUm9aWElwSUh0Y2JpQWdJQ0IyWVhJZ1lXUmthWFJwYjI1eklEMGdXMTA3WEc0Z0lDQWdabTl5SUNoMllYSWdhV1FnYVc0Z2IzUm9aWEl1Wm1sc2RHVnljeWtnZTF4dUlDQWdJQ0FnSUNCMllYSWdjM1JoZEhWeklEMGdkR2hwY3k1aFpHUmhZbXhsS0c5MGFHVnlMbVpwYkhSbGNuTmJhV1JkS1R0Y2JpQWdJQ0FnSUNBZ0x5OGdjM1JoZEhWeklHbHpJSFJ5ZFdVc0lHWmhiSE5sSUc5eUlHNTFiR3d1SUdsbUlHbDBKM01nYm5Wc2JDQjNaU0JrYjI0bmRDQm1ZV2xzSUhSb2FYTmNiaUFnSUNBZ0lDQWdMeThnWTJ4dmJtVWdibTl5SUdSdklIZGxJR0ZrWkNCMGFHVWdabWxzZEdWeUxseHVJQ0FnSUNBZ0lDQnBaaUFvYzNSaGRIVnpJRDA5UFNCbVlXeHpaU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHWmhiSE5sTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lHbG1JQ2h6ZEdGMGRYTWdQVDA5SUhSeWRXVXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJRUZrWkdsdVp5QjBhR1VnWm1sc2RHVnlJSGRwYkd3Z2IzWmxjbkpwWkdVZ1lXNXZkR2hsY2lCMllXeDFaUzVjYmlBZ0lDQWdJQ0FnSUNBZ0lHRmtaR2wwYVc5dWN5NXdkWE5vS0c5MGFHVnlMbVpwYkhSbGNuTmJhV1JkS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JseHVJQ0FnSUM4dklFRmtaR2x1WnlCMGFHVWdiM1JvWlhJZ1ptbHNkR1Z5Y3lCa2IyVnpiaWQwSUcxaGEyVWdkR2hwY3lCbWFXeDBaWEp6WlhRZ2FXNTJZV3hwWkN3Z1luVjBJR2wwWEc0Z0lDQWdMeThnWkc5bGMyNG5kQ0JoWkdRZ1lXNTVkR2hwYm1jZ2RHOGdhWFFnWldsMGFHVnlMbHh1SUNBZ0lHbG1JQ2doWVdSa2FYUnBiMjV6TG14bGJtZDBhQ2tnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnYm5Wc2JEdGNiaUFnSUNCOVhHNWNiaUFnSUNBdkx5QlhaU0JqWVc0Z2MzVmpZMlZ6YzJaMWJHeDVJR0ZrWkNCaGJHd2dabWxzZEdWeWN5NGdUbTkzSUdOc2IyNWxJSFJvWlNCbWFXeDBaWEp6WlhRZ1lXNWtJR0ZrWkNCMGFHVmNiaUFnSUNBdkx5QnVaWGNnY25Wc1pYTXVYRzRnSUNBZ2RtRnlJR05zYjI1bElEMGdibVYzSUhSeVpXVXVSbWxzZEdWeWMyVjBLQ2s3WEc1Y2JpQWdJQ0F2THlCWFpTQmpZVzRnWVdSa0lIUm9aU0J5ZFd4bGN5QjBhR0YwSUdGeVpTQmhiSEpsWVdSNUlIQnlaWE5sYm5RZ2QybDBhRzkxZENCbmIybHVaeUIwYUhKdmRXZG9JSFJvWlZ4dUlDQWdJQzh2SUdGa1pDQm1kVzVqZEdsdmJpQmhjeUJoSUVacGJIUmxjbk5sZENCcGN5QmhiSGRoZVhNZ2FXNGdhWFFuY3lCemFXMXdiR1Z6ZENCallXNXZibWxqWVd3Z1ptOXliUzVjYmlBZ0lDQm1iM0lnS0dsa0lHbHVJSFJvYVhNdVptbHNkR1Z5Y3lrZ2UxeHVJQ0FnSUNBZ0lDQmpiRzl1WlM1bWFXeDBaWEp6VzJsa1hTQTlJSFJvYVhNdVptbHNkR1Z5YzF0cFpGMDdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5OGdUMjVzZVNCaFpHUWdibVYzSUdacGJIUmxjbk1nZEdoaGRDQmhZM1IxWVd4c2VTQmphR0Z1WjJVZ2RHaGxJR1pwYkhSbGNpNWNiaUFnSUNCM2FHbHNaU0FvYVdRZ1BTQmhaR1JwZEdsdmJuTXVjMmhwWm5Rb0tTa2dlMXh1SUNBZ0lDQWdJQ0JqYkc5dVpTNWhaR1FvYVdRcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUhKbGRIVnliaUJqYkc5dVpUdGNibjA3WEc1Y2JuUnlaV1V1Um1sc2RHVnljMlYwTG5CeWIzUnZkSGx3WlM1MGIwcFRJRDBnWm5WdVkzUnBiMjRvWlc1MktTQjdYRzRnSUhaaGNpQnZjRTFoY0NBOUlIdGNiaUFnSUNBblBTYzZJQ2M5UFQwblhHNGdJSDA3WEc0Z0lISmxkSFZ5YmlCZkxtMWhjQ2gwYUdsekxtWnBiSFJsY25Nc0lHWjFibU4wYVc5dUtHWnBiSFJsY2lrZ2UxeHVJQ0FnSUhaaGNpQnZjQ0E5SUdacGJIUmxjaTV2Y0R0Y2JpQWdJQ0JwWmlodmNDQnBiaUJ2Y0UxaGNDa2dlMXh1SUNBZ0lDQWdiM0FnUFNCdmNFMWhjRnR2Y0YwN1hHNGdJQ0FnZlZ4dUlDQWdJSFpoY2lCMllXd2dQU0JtYVd4MFpYSXVkbUZzTzF4dUlDQWdJR2xtS0dacGJIUmxjaTVmZG1Gc0lDRTlQU0IxYm1SbFptbHVaV1FwSUh0Y2JpQWdJQ0FnSUhaaGJDQTlJR1pwYkhSbGNpNWZkbUZzTG5SdlUzUnlhVzVuS0hSeWRXVXBPMXh1SUNBZ0lIMWNiaUFnSUNCMllYSWdZWFIwY25NZ1BTQmNJbVJoZEdGY0lqdGNiaUFnSUNCcFppQW9iM0FnUFQwOUlDYzlmaWNwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUJjSWloY0lpQXJJR0YwZEhKeklDc2dYQ0piSjF3aUlDc2dabWxzZEdWeUxtdGxlUzUyWVd4MVpTQWdLeUJjSWlkZElDc2dKeWNwTG0xaGRHTm9LRndpSUNzZ0tIWmhiQzVwY3lBOVBUMGdKM04wY21sdVp5Y2dQeUJjSWlkY0lpQXJJSFpoYkM1MGIxTjBjbWx1WnlncExuSmxjR3hoWTJVb0x5Y3ZaeXdnWENKY1hGeGNKMXdpS1NBcklGd2lKMXdpSURvZ2RtRnNLU0FySUZ3aUtWd2lPMXh1SUNBZ0lIMWNiaUFnSUNCeVpYUjFjbTRnWVhSMGNuTWdLeUJjSWxzblhDSWdLeUJtYVd4MFpYSXVhMlY1TG5aaGJIVmxJQ0FySUZ3aUoxMGdYQ0lnS3lCdmNDQXJJRndpSUZ3aUlDc2dLSFpoYkM1cGN5QTlQVDBnSjNOMGNtbHVaeWNnUHlCY0lpZGNJaUFySUhaaGJDNTBiMU4wY21sdVp5Z3BMbkpsY0d4aFkyVW9MeWN2Wnl3Z1hDSmNYRnhjSjF3aUtTQXJJRndpSjF3aUlEb2dkbUZzS1R0Y2JpQWdmU2t1YW05cGJpZ25JQ1ltSUNjcE8xeHVmVHRjYmx4dUx5OGdVbVYwZFhKdWN5QjBjblZsSUhkb1pXNGdkR2hsSUc1bGR5Qm1hV3gwWlhJZ1kyRnVJR0psSUdGa1pHVmtMQ0JtWVd4elpTQnZkR2hsY25kcGMyVXVYRzR2THlCSmRDQmpZVzRnWVd4emJ5QnlaWFIxY200Z2JuVnNiQ3dnWVc1a0lHOXVJSFJvWlNCdmRHaGxjaUJ6YVdSbElIZGxJSFJsYzNRZ1ptOXlJRDA5UFNCMGNuVmxJRzl5WEc0dkx5Qm1ZV3h6WlZ4dWRISmxaUzVHYVd4MFpYSnpaWFF1Y0hKdmRHOTBlWEJsTG1Ga1pHRmliR1VnUFNCbWRXNWpkR2x2YmlobWFXeDBaWElwSUh0Y2JpQWdJQ0IyWVhJZ2EyVjVJRDBnWm1sc2RHVnlMbXRsZVM1MGIxTjBjbWx1WnlncExGeHVJQ0FnSUNBZ0lDQjJZV3gxWlNBOUlHWnBiSFJsY2k1MllXd3VkRzlUZEhKcGJtY29LVHRjYmx4dUlDQWdJR2xtSUNoMllXeDFaUzV0WVhSamFDZ3ZYbHN3TFRsZEt5aGNYQzViTUMwNVhTb3BQeVF2S1NrZ2RtRnNkV1VnUFNCd1lYSnpaVVpzYjJGMEtIWmhiSFZsS1R0Y2JseHVJQ0FnSUhOM2FYUmphQ0FvWm1sc2RHVnlMbTl3S1NCN1hHNGdJQ0FnSUNBZ0lHTmhjMlVnSnowbk9seHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z2FXWWdkR2hsY21VZ2FYTWdZV3h5WldGa2VTQm1iMjg5SUdGdVpDQjNaU2R5WlNCaFpHUnBibWNnWm05dlBWeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11Wm1sc2RHVnljMXRyWlhrZ0t5QW5QU2RkSUNFOVBTQjFibVJsWm1sdVpXUXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTVtYVd4MFpYSnpXMnRsZVNBcklDYzlKMTB1ZG1Gc0xuUnZVM1J5YVc1bktDa2dJVDBnZG1Gc2RXVXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUdaaGJITmxPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJ1ZFd4c08xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoMGFHbHpMbVpwYkhSbGNuTmJhMlY1SUNzZ0p5RTlKeUFySUhaaGJIVmxYU0FoUFQwZ2RXNWtaV1pwYm1Wa0tTQnlaWFIxY200Z1ptRnNjMlU3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NW1hV3gwWlhKelcydGxlU0FySUNjK0oxMGdJVDA5SUhWdVpHVm1hVzVsWkNBbUppQjBhR2x6TG1acGJIUmxjbk5iYTJWNUlDc2dKejRuWFM1MllXd2dQajBnZG1Gc2RXVXBJSEpsZEhWeWJpQm1ZV3h6WlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoMGFHbHpMbVpwYkhSbGNuTmJhMlY1SUNzZ0p6d25YU0FoUFQwZ2RXNWtaV1pwYm1Wa0lDWW1JSFJvYVhNdVptbHNkR1Z5YzF0clpYa2dLeUFuUENkZExuWmhiQ0E4UFNCMllXeDFaU2tnY21WMGRYSnVJR1poYkhObE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11Wm1sc2RHVnljMXRyWlhrZ0t5QW5QajBuWFNBaFBUMGdkVzVrWldacGJtVmtJQ0FtSmlCMGFHbHpMbVpwYkhSbGNuTmJhMlY1SUNzZ0p6NDlKMTB1ZG1Gc0lENGdkbUZzZFdVcElISmxkSFZ5YmlCbVlXeHpaVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxtWnBiSFJsY25OYmEyVjVJQ3NnSnp3OUoxMGdJVDA5SUhWdVpHVm1hVzVsWkNBZ0ppWWdkR2hwY3k1bWFXeDBaWEp6VzJ0bGVTQXJJQ2M4UFNkZExuWmhiQ0E4SUhaaGJIVmxLU0J5WlhSMWNtNGdabUZzYzJVN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkSEoxWlR0Y2JseHVJQ0FnSUNBZ0lDQmpZWE5sSUNjOWZpYzZYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEhKMVpUdGNibHh1SUNBZ0lDQWdJQ0JqWVhObElDY2hQU2M2WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NW1hV3gwWlhKelcydGxlU0FySUNjOUoxMGdJVDA5SUhWdVpHVm1hVzVsWkNrZ2NtVjBkWEp1SUNoMGFHbHpMbVpwYkhSbGNuTmJhMlY1SUNzZ0p6MG5YUzUyWVd3Z1BUMGdkbUZzZFdVcElEOGdabUZzYzJVZ09pQnVkV3hzTzF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hSb2FYTXVabWxzZEdWeWMxdHJaWGtnS3lBbklUMG5JQ3NnZG1Gc2RXVmRJQ0U5UFNCMWJtUmxabWx1WldRcElISmxkSFZ5YmlCdWRXeHNPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdVptbHNkR1Z5YzF0clpYa2dLeUFuUGlkZElDRTlQU0IxYm1SbFptbHVaV1FnSmlZZ2RHaHBjeTVtYVd4MFpYSnpXMnRsZVNBcklDYytKMTB1ZG1Gc0lENDlJSFpoYkhWbEtTQnlaWFIxY200Z2JuVnNiRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxtWnBiSFJsY25OYmEyVjVJQ3NnSnp3blhTQWhQVDBnZFc1a1pXWnBibVZrSUNZbUlIUm9hWE11Wm1sc2RHVnljMXRyWlhrZ0t5QW5QQ2RkTG5aaGJDQThQU0IyWVd4MVpTa2djbVYwZFhKdUlHNTFiR3c3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NW1hV3gwWlhKelcydGxlU0FySUNjK1BTZGRJQ0U5UFNCMWJtUmxabWx1WldRZ0ppWWdkR2hwY3k1bWFXeDBaWEp6VzJ0bGVTQXJJQ2MrUFNkZExuWmhiQ0ErSUhaaGJIVmxLU0J5WlhSMWNtNGdiblZzYkR0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoMGFHbHpMbVpwYkhSbGNuTmJhMlY1SUNzZ0p6dzlKMTBnSVQwOUlIVnVaR1ZtYVc1bFpDQW1KaUIwYUdsekxtWnBiSFJsY25OYmEyVjVJQ3NnSnp3OUoxMHVkbUZzSUR3Z2RtRnNkV1VwSUhKbGRIVnliaUJ1ZFd4c08xeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSFJ5ZFdVN1hHNWNiaUFnSUNBZ0lDQWdZMkZ6WlNBblBpYzZYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9hMlY1SUNzZ0p6MG5JR2x1SUhSb2FYTXVabWxzZEdWeWN5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoMGFHbHpMbVpwYkhSbGNuTmJhMlY1SUNzZ0p6MG5YUzUyWVd3Z1BEMGdkbUZzZFdVcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJR1poYkhObE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQnVkV3hzTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxtWnBiSFJsY25OYmEyVjVJQ3NnSnp3blhTQWhQVDBnZFc1a1pXWnBibVZrSUNZbUlIUm9hWE11Wm1sc2RHVnljMXRyWlhrZ0t5QW5QQ2RkTG5aaGJDQThQU0IyWVd4MVpTa2djbVYwZFhKdUlHWmhiSE5sTzF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hSb2FYTXVabWxzZEdWeWMxdHJaWGtnS3lBblBEMG5YU0FoUFQwZ2RXNWtaV1pwYm1Wa0lDQW1KaUIwYUdsekxtWnBiSFJsY25OYmEyVjVJQ3NnSnp3OUoxMHVkbUZzSUR3OUlIWmhiSFZsS1NCeVpYUjFjbTRnWm1Gc2MyVTdYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9kR2hwY3k1bWFXeDBaWEp6VzJ0bGVTQXJJQ2MrSjEwZ0lUMDlJSFZ1WkdWbWFXNWxaQ0FtSmlCMGFHbHpMbVpwYkhSbGNuTmJhMlY1SUNzZ0p6NG5YUzUyWVd3Z1BqMGdkbUZzZFdVcElISmxkSFZ5YmlCdWRXeHNPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdVptbHNkR1Z5YzF0clpYa2dLeUFuUGowblhTQWhQVDBnZFc1a1pXWnBibVZrSUNBbUppQjBhR2x6TG1acGJIUmxjbk5iYTJWNUlDc2dKejQ5SjEwdWRtRnNJRDRnZG1Gc2RXVXBJSEpsZEhWeWJpQnVkV3hzTzF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIUnlkV1U3WEc1Y2JpQWdJQ0FnSUNBZ1kyRnpaU0FuUGowbk9seHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11Wm1sc2RHVnljMXRyWlhrZ0t5QW5QU2NnWFNBaFBUMGdkVzVrWldacGJtVmtLU0J5WlhSMWNtNGdLSFJvYVhNdVptbHNkR1Z5YzF0clpYa2dLeUFuUFNkZExuWmhiQ0E4SUhaaGJIVmxLU0EvSUdaaGJITmxJRG9nYm5Wc2JEdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaDBhR2x6TG1acGJIUmxjbk5iYTJWNUlDc2dKenduSUYwZ0lUMDlJSFZ1WkdWbWFXNWxaQ0FtSmlCMGFHbHpMbVpwYkhSbGNuTmJhMlY1SUNzZ0p6d25YUzUyWVd3Z1BEMGdkbUZzZFdVcElISmxkSFZ5YmlCbVlXeHpaVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxtWnBiSFJsY25OYmEyVjVJQ3NnSnp3OUoxMGdJVDA5SUhWdVpHVm1hVzVsWkNBbUppQjBhR2x6TG1acGJIUmxjbk5iYTJWNUlDc2dKenc5SjEwdWRtRnNJRHdnZG1Gc2RXVXBJSEpsZEhWeWJpQm1ZV3h6WlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoMGFHbHpMbVpwYkhSbGNuTmJhMlY1SUNzZ0p6NG5JRjBnSVQwOUlIVnVaR1ZtYVc1bFpDQW1KaUIwYUdsekxtWnBiSFJsY25OYmEyVjVJQ3NnSno0blhTNTJZV3dnUGowZ2RtRnNkV1VwSUhKbGRIVnliaUJ1ZFd4c08xeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11Wm1sc2RHVnljMXRyWlhrZ0t5QW5QajBuWFNBaFBUMGdkVzVrWldacGJtVmtJQ1ltSUhSb2FYTXVabWxzZEdWeWMxdHJaWGtnS3lBblBqMG5YUzUyWVd3Z1BqMGdkbUZzZFdVcElISmxkSFZ5YmlCdWRXeHNPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSeWRXVTdYRzVjYmlBZ0lDQWdJQ0FnWTJGelpTQW5QQ2M2WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NW1hV3gwWlhKelcydGxlU0FySUNjOUp5QmRJQ0U5UFNCMWJtUmxabWx1WldRcElISmxkSFZ5YmlBb2RHaHBjeTVtYVd4MFpYSnpXMnRsZVNBcklDYzlKMTB1ZG1Gc0lENDlJSFpoYkhWbEtTQS9JR1poYkhObElEb2diblZzYkR0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoMGFHbHpMbVpwYkhSbGNuTmJhMlY1SUNzZ0p6NG5JRjBnSVQwOUlIVnVaR1ZtYVc1bFpDQW1KaUIwYUdsekxtWnBiSFJsY25OYmEyVjVJQ3NnSno0blhTNTJZV3dnUGowZ2RtRnNkV1VwSUhKbGRIVnliaUJtWVd4elpUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaDBhR2x6TG1acGJIUmxjbk5iYTJWNUlDc2dKejQ5SjEwZ0lUMDlJSFZ1WkdWbWFXNWxaQ0FtSmlCMGFHbHpMbVpwYkhSbGNuTmJhMlY1SUNzZ0p6NDlKMTB1ZG1Gc0lENDlJSFpoYkhWbEtTQnlaWFIxY200Z1ptRnNjMlU3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NW1hV3gwWlhKelcydGxlU0FySUNjOEp5QmRJQ0U5UFNCMWJtUmxabWx1WldRZ0ppWWdkR2hwY3k1bWFXeDBaWEp6VzJ0bGVTQXJJQ2M4SjEwdWRtRnNJRHc5SUhaaGJIVmxLU0J5WlhSMWNtNGdiblZzYkR0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoMGFHbHpMbVpwYkhSbGNuTmJhMlY1SUNzZ0p6dzlKMTBnSVQwOUlIVnVaR1ZtYVc1bFpDQW1KaUIwYUdsekxtWnBiSFJsY25OYmEyVjVJQ3NnSnp3OUoxMHVkbUZzSUR3Z2RtRnNkV1VwSUhKbGRIVnliaUJ1ZFd4c08xeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSFJ5ZFdVN1hHNWNiaUFnSUNBZ0lDQWdZMkZ6WlNBblBEMG5PbHh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdVptbHNkR1Z5YzF0clpYa2dLeUFuUFNjZ1hTQWhQVDBnZFc1a1pXWnBibVZrS1NCeVpYUjFjbTRnS0hSb2FYTXVabWxzZEdWeWMxdHJaWGtnS3lBblBTZGRMblpoYkNBK0lIWmhiSFZsS1NBL0lHWmhiSE5sSURvZ2JuVnNiRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxtWnBiSFJsY25OYmEyVjVJQ3NnSno0bklGMGdJVDA5SUhWdVpHVm1hVzVsWkNBbUppQjBhR2x6TG1acGJIUmxjbk5iYTJWNUlDc2dKejRuWFM1MllXd2dQajBnZG1Gc2RXVXBJSEpsZEhWeWJpQm1ZV3h6WlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoMGFHbHpMbVpwYkhSbGNuTmJhMlY1SUNzZ0p6NDlKMTBnSVQwOUlIVnVaR1ZtYVc1bFpDQW1KaUIwYUdsekxtWnBiSFJsY25OYmEyVjVJQ3NnSno0OUoxMHVkbUZzSUQ0Z2RtRnNkV1VwSUhKbGRIVnliaUJtWVd4elpUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaDBhR2x6TG1acGJIUmxjbk5iYTJWNUlDc2dKenduSUYwZ0lUMDlJSFZ1WkdWbWFXNWxaQ0FtSmlCMGFHbHpMbVpwYkhSbGNuTmJhMlY1SUNzZ0p6d25YUzUyWVd3Z1BEMGdkbUZzZFdVcElISmxkSFZ5YmlCdWRXeHNPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdVptbHNkR1Z5YzF0clpYa2dLeUFuUEQwblhTQWhQVDBnZFc1a1pXWnBibVZrSUNZbUlIUm9hWE11Wm1sc2RHVnljMXRyWlhrZ0t5QW5QRDBuWFM1MllXd2dQRDBnZG1Gc2RXVXBJSEpsZEhWeWJpQnVkV3hzTzF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIUnlkV1U3WEc0Z0lDQWdmVnh1ZlR0Y2JseHVMeThnUkc5bGN5QjBhR1VnYm1WM0lHWnBiSFJsY2lCamIyNXpkR2wwZFhSbElHRWdZMjl1Wm14cFkzUS9YRzUwY21WbExrWnBiSFJsY25ObGRDNXdjbTkwYjNSNWNHVXVZMjl1Wm14cFkzUWdQU0JtZFc1amRHbHZiaWhtYVd4MFpYSXBJSHRjYmlBZ0lDQjJZWElnYTJWNUlEMGdabWxzZEdWeUxtdGxlUzUwYjFOMGNtbHVaeWdwTEZ4dUlDQWdJQ0FnSUNCMllXeDFaU0E5SUdacGJIUmxjaTUyWVd3dWRHOVRkSEpwYm1jb0tUdGNibHh1SUNBZ0lHbG1JQ2doYVhOT1lVNG9jR0Z5YzJWR2JHOWhkQ2gyWVd4MVpTa3BLU0IyWVd4MVpTQTlJSEJoY25ObFJteHZZWFFvZG1Gc2RXVXBPMXh1WEc0Z0lDQWdMeThnYVdZZ0tHRTlZaWtnSmlZZ0tHRTlZeWxjYmlBZ0lDQXZMeUJwWmlBb1lUMWlLU0FtSmlBb1lTRTlZaWxjYmlBZ0lDQXZMeUJ2Y2lBb1lTRTlZaWtnSmlZZ0tHRTlZaWxjYmlBZ0lDQnBaaUFvS0dacGJIUmxjaTV2Y0NBOVBUMGdKejBuSUNZbUlIUm9hWE11Wm1sc2RHVnljMXRyWlhrZ0t5QW5QU2RkSUNFOVBTQjFibVJsWm1sdVpXUWdKaVpjYmlBZ0lDQWdJQ0FnZG1Gc2RXVWdJVDBnZEdocGN5NW1hV3gwWlhKelcydGxlU0FySUNjOUoxMHVkbUZzTG5SdlUzUnlhVzVuS0NrcElIeDhYRzRnSUNBZ0lDQWdJQ2htYVd4MFpYSXViM0FnUFQwOUlDY2hQU2NnSmlZZ2RHaHBjeTVtYVd4MFpYSnpXMnRsZVNBcklDYzlKMTBnSVQwOUlIVnVaR1ZtYVc1bFpDQW1KbHh1SUNBZ0lDQWdJQ0IyWVd4MVpTQTlQU0IwYUdsekxtWnBiSFJsY25OYmEyVjVJQ3NnSnowblhTNTJZV3d1ZEc5VGRISnBibWNvS1NrZ2ZIeGNiaUFnSUNBZ0lDQWdLR1pwYkhSbGNpNXZjQ0E5UFQwZ0p6MG5JQ1ltSUhSb2FYTXVabWxzZEdWeWMxdHJaWGtnS3lBbklUMG5YU0FoUFQwZ2RXNWtaV1pwYm1Wa0lDWW1YRzRnSUNBZ0lDQWdJSFpoYkhWbElEMDlJSFJvYVhNdVptbHNkR1Z5YzF0clpYa2dLeUFuSVQwblhTNTJZV3d1ZEc5VGRISnBibWNvS1NrcElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHWnBiSFJsY2k1MGIxTjBjbWx1WnlncElDc2dKeUJoWkdSbFpDQjBieUFuSUNzZ2RHaHBjeTUwYjFOMGNtbHVaeWdwSUNzZ0p5QndjbTlrZFdObGN5QmhiaUJwYm5aaGJHbGtJR1pwYkhSbGNpYzdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2NtVjBkWEp1SUdaaGJITmxPMXh1ZlR0Y2JseHVMeThnVDI1c2VTQmpZV3hzSUhSb2FYTWdablZ1WTNScGIyNGdabTl5SUdacGJIUmxjbk1nZEdoaGRDQm9ZWFpsSUdKbFpXNGdZMnhsWVhKbFpDQmllU0F1WVdSa1lXSnNaU2dwTGx4dWRISmxaUzVHYVd4MFpYSnpaWFF1Y0hKdmRHOTBlWEJsTG1Ga1pDQTlJR1oxYm1OMGFXOXVLR1pwYkhSbGNpd2daVzUyS1NCN1hHNGdJQ0FnZG1GeUlHdGxlU0E5SUdacGJIUmxjaTVyWlhrdWRHOVRkSEpwYm1jb0tTeGNiaUFnSUNBZ0lDQWdhV1FzWEc0Z0lDQWdJQ0FnSUc5d0lEMGdabWxzZEdWeUxtOXdMRnh1SUNBZ0lDQWdJQ0JqYjI1bWJHbGpkQ0E5SUhSb2FYTXVZMjl1Wm14cFkzUW9abWxzZEdWeUtTeGNiaUFnSUNBZ0lDQWdiblZ0ZG1Gc08xeHVYRzRnSUNBZ2FXWWdLR052Ym1ac2FXTjBLU0J5WlhSMWNtNGdZMjl1Wm14cFkzUTdYRzVjYmlBZ0lDQnBaaUFvYjNBZ1BUMDlJQ2M5SnlrZ2UxeHVJQ0FnSUNBZ0lDQm1iM0lnS0haaGNpQnBJR2x1SUhSb2FYTXVabWxzZEdWeWN5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdVptbHNkR1Z5YzF0cFhTNXJaWGtnUFQwZ2EyVjVLU0JrWld4bGRHVWdkR2hwY3k1bWFXeDBaWEp6VzJsZE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSFJvYVhNdVptbHNkR1Z5YzF0clpYa2dLeUFuUFNkZElEMGdabWxzZEdWeU8xeHVJQ0FnSUgwZ1pXeHpaU0JwWmlBb2IzQWdQVDA5SUNjaFBTY3BJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NW1hV3gwWlhKelcydGxlU0FySUNjaFBTY2dLeUJtYVd4MFpYSXVkbUZzWFNBOUlHWnBiSFJsY2p0Y2JpQWdJQ0I5SUdWc2MyVWdhV1lnS0c5d0lEMDlQU0FuUFg0bktTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdVptbHNkR1Z5YzF0clpYa2dLeUFuUFg0bklDc2dabWxzZEdWeUxuWmhiRjBnUFNCbWFXeDBaWEk3WEc0Z0lDQWdmU0JsYkhObElHbG1JQ2h2Y0NBOVBUMGdKejRuS1NCN1hHNGdJQ0FnSUNBZ0lDOHZJRWxtSUhSb1pYSmxJR0Z5WlNCdmRHaGxjaUJtYVd4MFpYSnpJSFJvWVhRZ1lYSmxJR0ZzYzI4Z1BseHVJQ0FnSUNBZ0lDQXZMeUJpZFhRZ1lYSmxJR3hsYzNNZ2RHaGhiaUIwYUdseklHOXVaU3dnZEdobGVTQmtiMjRuZENCdFlYUjBaWElzSUhOdlhHNGdJQ0FnSUNBZ0lDOHZJSEpsYlc5MlpTQjBhR1Z0TGx4dUlDQWdJQ0FnSUNCbWIzSWdLSFpoY2lCcUlHbHVJSFJvYVhNdVptbHNkR1Z5Y3lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11Wm1sc2RHVnljMXRxWFM1clpYa2dQVDBnYTJWNUlDWW1JSFJvYVhNdVptbHNkR1Z5YzF0cVhTNTJZV3dnUEQwZ1ptbHNkR1Z5TG5aaGJDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1JsYkdWMFpTQjBhR2x6TG1acGJIUmxjbk5iYWwwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2RHaHBjeTVtYVd4MFpYSnpXMnRsZVNBcklDYytKMTBnUFNCbWFXeDBaWEk3WEc0Z0lDQWdmU0JsYkhObElHbG1JQ2h2Y0NBOVBUMGdKejQ5SnlrZ2UxeHVJQ0FnSUNBZ0lDQm1iM0lnS0haaGNpQnJJR2x1SUhSb2FYTXVabWxzZEdWeWN5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2JuVnRkbUZzSUQwZ0tDdDBhR2x6TG1acGJIUmxjbk5iYTEwdWRtRnNMblJ2VTNSeWFXNW5LQ2twTzF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hSb2FYTXVabWxzZEdWeWMxdHJYUzVyWlhrZ1BUMGdhMlY1SUNZbUlHNTFiWFpoYkNBOElHWnBiSFJsY2k1MllXd3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JrWld4bGRHVWdkR2hwY3k1bWFXeDBaWEp6VzJ0ZE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxtWnBiSFJsY25OYmEyVjVJQ3NnSnlFOUp5QXJJR1pwYkhSbGNpNTJZV3hkSUNFOVBTQjFibVJsWm1sdVpXUXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHUmxiR1YwWlNCMGFHbHpMbVpwYkhSbGNuTmJhMlY1SUNzZ0p5RTlKeUFySUdacGJIUmxjaTUyWVd4ZE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnWm1sc2RHVnlMbTl3SUQwZ0p6NG5PMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVtYVd4MFpYSnpXMnRsZVNBcklDYytKMTBnUFNCbWFXeDBaWEk3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1acGJIUmxjbk5iYTJWNUlDc2dKejQ5SjEwZ1BTQm1hV3gwWlhJN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOUlHVnNjMlVnYVdZZ0tHOXdJRDA5UFNBblBDY3BJSHRjYmlBZ0lDQWdJQ0FnWm05eUlDaDJZWElnYkNCcGJpQjBhR2x6TG1acGJIUmxjbk1wSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJRzUxYlhaaGJDQTlJQ2dyZEdocGN5NW1hV3gwWlhKelcyeGRMblpoYkM1MGIxTjBjbWx1WnlncEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaDBhR2x6TG1acGJIUmxjbk5iYkYwdWEyVjVJRDA5SUd0bGVTQW1KaUJ1ZFcxMllXd2dQajBnWm1sc2RHVnlMblpoYkNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHUmxiR1YwWlNCMGFHbHpMbVpwYkhSbGNuTmJiRjA3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZEdocGN5NW1hV3gwWlhKelcydGxlU0FySUNjOEoxMGdQU0JtYVd4MFpYSTdYRzRnSUNBZ2ZTQmxiSE5sSUdsbUlDaHZjQ0E5UFQwZ0p6dzlKeWtnZTF4dUlDQWdJQ0FnSUNCbWIzSWdLSFpoY2lCdElHbHVJSFJvYVhNdVptbHNkR1Z5Y3lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYm5WdGRtRnNJRDBnS0N0MGFHbHpMbVpwYkhSbGNuTmJiVjB1ZG1Gc0xuUnZVM1J5YVc1bktDa3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdVptbHNkR1Z5YzF0dFhTNXJaWGtnUFQwZ2EyVjVJQ1ltSUc1MWJYWmhiQ0ErSUdacGJIUmxjaTUyWVd3cElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmtaV3hsZEdVZ2RHaHBjeTVtYVd4MFpYSnpXMjFkTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUdsbUlDaDBhR2x6TG1acGJIUmxjbk5iYTJWNUlDc2dKeUU5SnlBcklHWnBiSFJsY2k1MllXeGRJQ0U5UFNCMWJtUmxabWx1WldRcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdSbGJHVjBaU0IwYUdsekxtWnBiSFJsY25OYmEyVjVJQ3NnSnlFOUp5QXJJR1pwYkhSbGNpNTJZV3hkTzF4dUlDQWdJQ0FnSUNBZ0lDQWdabWxzZEdWeUxtOXdJRDBnSnp3bk8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NW1hV3gwWlhKelcydGxlU0FySUNjOEoxMGdQU0JtYVd4MFpYSTdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbVpwYkhSbGNuTmJhMlY1SUNzZ0p6dzlKMTBnUFNCbWFXeDBaWEk3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5WEc1OU8xeHVYRzVjYmx4dUx5OHZMeTh2THk4dkx5OHZMeTh2THk4dlhHNHZMeUJYUlVKUVFVTkxJRVpQVDFSRlVseHVMeThnTGk5K0wyTmhjblJ2TDJ4cFlpOWpZWEowYnk5MGNtVmxMMlpwYkhSbGNuTmxkQzVxYzF4dUx5OGdiVzlrZFd4bElHbGtJRDBnT1RSY2JpOHZJRzF2WkhWc1pTQmphSFZ1YTNNZ1BTQXdJbDBzSW0xaGNIQnBibWR6SWpvaVFVRkJRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUluMD1cIik7XG5cbi8qKiovIH0pLFxuLyogOTUgKi9cbi8qIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKiBhbGwgZXhwb3J0cyB1c2VkICovXG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vfi9jYXJ0by9saWIvY2FydG8vdHJlZS9mb250c2V0LmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5ldmFsKFwiKGZ1bmN0aW9uKHRyZWUpIHtcXG5cXG50cmVlLl9nZXRGb250U2V0ID0gZnVuY3Rpb24oZW52LCBmb250cykge1xcbiAgICB2YXIgZm9udEtleSA9IGZvbnRzLmpvaW4oJycpO1xcbiAgICBpZiAoZW52Ll9mb250TWFwICYmIGVudi5fZm9udE1hcFtmb250S2V5XSkge1xcbiAgICAgICAgcmV0dXJuIGVudi5fZm9udE1hcFtmb250S2V5XTtcXG4gICAgfVxcblxcbiAgICB2YXIgbmV3X2ZvbnRzZXQgPSBuZXcgdHJlZS5Gb250U2V0KGVudiwgZm9udHMpO1xcbiAgICBlbnYuZWZmZWN0cy5wdXNoKG5ld19mb250c2V0KTtcXG4gICAgaWYgKCFlbnYuX2ZvbnRNYXApIGVudi5fZm9udE1hcCA9IHt9O1xcbiAgICBlbnYuX2ZvbnRNYXBbZm9udEtleV0gPSBuZXdfZm9udHNldDtcXG4gICAgcmV0dXJuIG5ld19mb250c2V0O1xcbn07XFxuXFxudHJlZS5Gb250U2V0ID0gZnVuY3Rpb24gRm9udFNldChlbnYsIGZvbnRzKSB7XFxuICAgIHRoaXMuZm9udHMgPSBmb250cztcXG4gICAgdGhpcy5uYW1lID0gJ2ZvbnRzZXQtJyArIGVudi5lZmZlY3RzLmxlbmd0aDtcXG59O1xcblxcbnRyZWUuRm9udFNldC5wcm90b3R5cGUudG9YTUwgPSBmdW5jdGlvbihlbnYpIHtcXG4gICAgcmV0dXJuICc8Rm9udFNldCBuYW1lPVxcXCInICtcXG4gICAgICAgIHRoaXMubmFtZSArXFxuICAgICAgICAnXFxcIj5cXFxcbicgK1xcbiAgICAgICAgdGhpcy5mb250cy5tYXAoZnVuY3Rpb24oZikge1xcbiAgICAgICAgICAgIHJldHVybiAnICA8Rm9udCBmYWNlLW5hbWU9XFxcIicgKyBmICsnXFxcIi8+JztcXG4gICAgICAgIH0pLmpvaW4oJ1xcXFxuJykgK1xcbiAgICAgICAgJ1xcXFxuPC9Gb250U2V0Pic7XFxufTtcXG5cXG59KShfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi90cmVlICovIDApKTtcXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaU9UVXVhbk1pTENKemIzVnlZMlZ6SWpwYkluZGxZbkJoWTJzNkx5OHZMaTkrTDJOaGNuUnZMMnhwWWk5allYSjBieTkwY21WbEwyWnZiblJ6WlhRdWFuTS9PVFpoT1NKZExDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SW9ablZ1WTNScGIyNG9kSEpsWlNrZ2UxeHVYRzUwY21WbExsOW5aWFJHYjI1MFUyVjBJRDBnWm5WdVkzUnBiMjRvWlc1MkxDQm1iMjUwY3lrZ2UxeHVJQ0FnSUhaaGNpQm1iMjUwUzJWNUlEMGdabTl1ZEhNdWFtOXBiaWduSnlrN1hHNGdJQ0FnYVdZZ0tHVnVkaTVmWm05dWRFMWhjQ0FtSmlCbGJuWXVYMlp2Ym5STllYQmJabTl1ZEV0bGVWMHBJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJR1Z1ZGk1ZlptOXVkRTFoY0Z0bWIyNTBTMlY1WFR0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0IyWVhJZ2JtVjNYMlp2Ym5SelpYUWdQU0J1WlhjZ2RISmxaUzVHYjI1MFUyVjBLR1Z1ZGl3Z1ptOXVkSE1wTzF4dUlDQWdJR1Z1ZGk1bFptWmxZM1J6TG5CMWMyZ29ibVYzWDJadmJuUnpaWFFwTzF4dUlDQWdJR2xtSUNnaFpXNTJMbDltYjI1MFRXRndLU0JsYm5ZdVgyWnZiblJOWVhBZ1BTQjdmVHRjYmlBZ0lDQmxibll1WDJadmJuUk5ZWEJiWm05dWRFdGxlVjBnUFNCdVpYZGZabTl1ZEhObGREdGNiaUFnSUNCeVpYUjFjbTRnYm1WM1gyWnZiblJ6WlhRN1hHNTlPMXh1WEc1MGNtVmxMa1p2Ym5SVFpYUWdQU0JtZFc1amRHbHZiaUJHYjI1MFUyVjBLR1Z1ZGl3Z1ptOXVkSE1wSUh0Y2JpQWdJQ0IwYUdsekxtWnZiblJ6SUQwZ1ptOXVkSE03WEc0Z0lDQWdkR2hwY3k1dVlXMWxJRDBnSjJadmJuUnpaWFF0SnlBcklHVnVkaTVsWm1abFkzUnpMbXhsYm1kMGFEdGNibjA3WEc1Y2JuUnlaV1V1Um05dWRGTmxkQzV3Y205MGIzUjVjR1V1ZEc5WVRVd2dQU0JtZFc1amRHbHZiaWhsYm5ZcElIdGNiaUFnSUNCeVpYUjFjbTRnSnp4R2IyNTBVMlYwSUc1aGJXVTlYQ0luSUN0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTV1WVcxbElDdGNiaUFnSUNBZ0lDQWdKMXdpUGx4Y2JpY2dLMXh1SUNBZ0lDQWdJQ0IwYUdsekxtWnZiblJ6TG0xaGNDaG1kVzVqZEdsdmJpaG1LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z0p5QWdQRVp2Ym5RZ1ptRmpaUzF1WVcxbFBWd2lKeUFySUdZZ0t5ZGNJaTgrSnp0Y2JpQWdJQ0FnSUNBZ2ZTa3VhbTlwYmlnblhGeHVKeWtnSzF4dUlDQWdJQ0FnSUNBblhGeHVQQzlHYjI1MFUyVjBQaWM3WEc1OU8xeHVYRzU5S1NoeVpYRjFhWEpsS0NjdUxpOTBjbVZsSnlrcE8xeHVYRzVjYmx4dUx5OHZMeTh2THk4dkx5OHZMeTh2THk4dlhHNHZMeUJYUlVKUVFVTkxJRVpQVDFSRlVseHVMeThnTGk5K0wyTmhjblJ2TDJ4cFlpOWpZWEowYnk5MGNtVmxMMlp2Ym5SelpYUXVhbk5jYmk4dklHMXZaSFZzWlNCcFpDQTlJRGsxWEc0dkx5QnRiMlIxYkdVZ1kyaDFibXR6SUQwZ01DSmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN0lpd2ljMjkxY21ObFVtOXZkQ0k2SWlKOVwiKTtcblxuLyoqKi8gfSksXG4vKiA5NiAqL1xuLyogbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9cbi8qIGFsbCBleHBvcnRzIHVzZWQgKi9cbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL34vY2FydG8vbGliL2NhcnRvL3RyZWUvZnJhbWVfb2Zmc2V0LmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbmV2YWwoXCJ2YXIgdHJlZSA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL3RyZWUgKi8gMCk7XFxuXFxuLy8gU3RvcmFnZSBmb3IgRnJhbWUgb2Zmc2V0IHZhbHVlXFxuLy8gYW5kIHN0b3JlcyB0aGVtIGFzIGJpdC1zZXF1ZW5jZXMgc28gdGhhdCB0aGV5IGNhbiBiZSBjb21iaW5lZCxcXG4vLyBpbnZlcnRlZCwgYW5kIGNvbXBhcmVkIHF1aWNrbHkuXFxudHJlZS5GcmFtZU9mZnNldCA9IGZ1bmN0aW9uKG9wLCB2YWx1ZSwgaW5kZXgpIHtcXG4gICAgdmFsdWUgPSBwYXJzZUludCh2YWx1ZSwgMTApO1xcbiAgICBpZiAodmFsdWUgPiB0cmVlLkZyYW1lT2Zmc2V0Lm1heCB8fCB2YWx1ZSA8PSAwKSB7XFxuICAgICAgICB0aHJvdyB7XFxuICAgICAgICAgICAgbWVzc2FnZTogJ09ubHkgZnJhbWUtb2Zmc2V0IGxldmVscyBiZXR3ZWVuIDEgYW5kICcgK1xcbiAgICAgICAgICAgICAgICB0cmVlLkZyYW1lT2Zmc2V0Lm1heCArICcgc3VwcG9ydGVkLicsXFxuICAgICAgICAgICAgaW5kZXg6IGluZGV4XFxuICAgICAgICB9O1xcbiAgICB9XFxuXFxuICAgIGlmIChvcCAhPT0gJz0nKSB7XFxuICAgICAgICB0aHJvdyB7XFxuICAgICAgICAgICAgbWVzc2FnZTogJ29ubHkgPSBvcGVyYXRvciBpcyBzdXBwb3J0ZWQgZm9yIGZyYW1lLW9mZnNldCcsXFxuICAgICAgICAgICAgaW5kZXg6IGluZGV4XFxuICAgICAgICB9O1xcbiAgICB9XFxuICAgIHJldHVybiB2YWx1ZTtcXG59O1xcblxcbnRyZWUuRnJhbWVPZmZzZXQubWF4ID0gMzI7XFxudHJlZS5GcmFtZU9mZnNldC5ub25lID0gMDtcXG5cXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaU9UWXVhbk1pTENKemIzVnlZMlZ6SWpwYkluZGxZbkJoWTJzNkx5OHZMaTkrTDJOaGNuUnZMMnhwWWk5allYSjBieTkwY21WbEwyWnlZVzFsWDI5bVpuTmxkQzVxY3o5bFpqQmhJbDBzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSW5aaGNpQjBjbVZsSUQwZ2NtVnhkV2x5WlNnbkxpNHZkSEpsWlNjcE8xeHVYRzR2THlCVGRHOXlZV2RsSUdadmNpQkdjbUZ0WlNCdlptWnpaWFFnZG1Gc2RXVmNiaTh2SUdGdVpDQnpkRzl5WlhNZ2RHaGxiU0JoY3lCaWFYUXRjMlZ4ZFdWdVkyVnpJSE52SUhSb1lYUWdkR2hsZVNCallXNGdZbVVnWTI5dFltbHVaV1FzWEc0dkx5QnBiblpsY25SbFpDd2dZVzVrSUdOdmJYQmhjbVZrSUhGMWFXTnJiSGt1WEc1MGNtVmxMa1p5WVcxbFQyWm1jMlYwSUQwZ1puVnVZM1JwYjI0b2IzQXNJSFpoYkhWbExDQnBibVJsZUNrZ2UxeHVJQ0FnSUhaaGJIVmxJRDBnY0dGeWMyVkpiblFvZG1Gc2RXVXNJREV3S1R0Y2JpQWdJQ0JwWmlBb2RtRnNkV1VnUGlCMGNtVmxMa1p5WVcxbFQyWm1jMlYwTG0xaGVDQjhmQ0IyWVd4MVpTQThQU0F3S1NCN1hHNGdJQ0FnSUNBZ0lIUm9jbTkzSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJRzFsYzNOaFoyVTZJQ2RQYm14NUlHWnlZVzFsTFc5bVpuTmxkQ0JzWlhabGJITWdZbVYwZDJWbGJpQXhJR0Z1WkNBbklDdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBjbVZsTGtaeVlXMWxUMlptYzJWMExtMWhlQ0FySUNjZ2MzVndjRzl5ZEdWa0xpY3NYRzRnSUNBZ0lDQWdJQ0FnSUNCcGJtUmxlRG9nYVc1a1pYaGNiaUFnSUNBZ0lDQWdmVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnBaaUFvYjNBZ0lUMDlJQ2M5SnlrZ2UxeHVJQ0FnSUNBZ0lDQjBhSEp2ZHlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J0WlhOellXZGxPaUFuYjI1c2VTQTlJRzl3WlhKaGRHOXlJR2x6SUhOMWNIQnZjblJsWkNCbWIzSWdabkpoYldVdGIyWm1jMlYwSnl4Y2JpQWdJQ0FnSUNBZ0lDQWdJR2x1WkdWNE9pQnBibVJsZUZ4dUlDQWdJQ0FnSUNCOU8xeHVJQ0FnSUgxY2JpQWdJQ0J5WlhSMWNtNGdkbUZzZFdVN1hHNTlPMXh1WEc1MGNtVmxMa1p5WVcxbFQyWm1jMlYwTG0xaGVDQTlJRE15TzF4dWRISmxaUzVHY21GdFpVOW1abk5sZEM1dWIyNWxJRDBnTUR0Y2JseHVYRzVjYmx4dUx5OHZMeTh2THk4dkx5OHZMeTh2THk4dlhHNHZMeUJYUlVKUVFVTkxJRVpQVDFSRlVseHVMeThnTGk5K0wyTmhjblJ2TDJ4cFlpOWpZWEowYnk5MGNtVmxMMlp5WVcxbFgyOW1abk5sZEM1cWMxeHVMeThnYlc5a2RXeGxJR2xrSUQwZ09UWmNiaTh2SUcxdlpIVnNaU0JqYUhWdWEzTWdQU0F3SWwwc0ltMWhjSEJwYm1keklqb2lRVUZCUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdJaXdpYzI5MWNtTmxVbTl2ZENJNklpSjlcIik7XG5cbi8qKiovIH0pLFxuLyogOTcgKi9cbi8qIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKiBhbGwgZXhwb3J0cyB1c2VkICovXG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL34vY2FydG8vbGliL2NhcnRvL3RyZWUvaW1hZ2VmaWx0ZXIuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5ldmFsKFwiKGZ1bmN0aW9uKHRyZWUpIHtcXG5cXG50cmVlLkltYWdlRmlsdGVyID0gZnVuY3Rpb24gSW1hZ2VGaWx0ZXIoZmlsdGVyLCBhcmdzKSB7XFxuICAgIHRoaXMuZmlsdGVyID0gZmlsdGVyO1xcbiAgICB0aGlzLmFyZ3MgPSBhcmdzIHx8IG51bGw7XFxufTtcXG5cXG50cmVlLkltYWdlRmlsdGVyLnByb3RvdHlwZSA9IHtcXG4gICAgaXM6ICdpbWFnZWZpbHRlcicsXFxuICAgIGV2OiBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXM7IH0sXFxuXFxuICAgIHRvU3RyaW5nOiBmdW5jdGlvbigpIHtcXG4gICAgICAgIGlmICh0aGlzLmFyZ3MpIHtcXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5maWx0ZXIgKyAnKCcgKyB0aGlzLmFyZ3Muam9pbignLCcpICsgJyknO1xcbiAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5maWx0ZXI7XFxuICAgICAgICB9XFxuICAgIH1cXG59O1xcblxcblxcbn0pKF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL3RyZWUgKi8gMCkpO1xcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pT1RjdWFuTWlMQ0p6YjNWeVkyVnpJanBiSW5kbFluQmhZMnM2THk4dkxpOStMMk5oY25SdkwyeHBZaTlqWVhKMGJ5OTBjbVZsTDJsdFlXZGxabWxzZEdWeUxtcHpQemc1WWpRaVhTd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lLR1oxYm1OMGFXOXVLSFJ5WldVcElIdGNibHh1ZEhKbFpTNUpiV0ZuWlVacGJIUmxjaUE5SUdaMWJtTjBhVzl1SUVsdFlXZGxSbWxzZEdWeUtHWnBiSFJsY2l3Z1lYSm5jeWtnZTF4dUlDQWdJSFJvYVhNdVptbHNkR1Z5SUQwZ1ptbHNkR1Z5TzF4dUlDQWdJSFJvYVhNdVlYSm5jeUE5SUdGeVozTWdmSHdnYm5Wc2JEdGNibjA3WEc1Y2JuUnlaV1V1U1cxaFoyVkdhV3gwWlhJdWNISnZkRzkwZVhCbElEMGdlMXh1SUNBZ0lHbHpPaUFuYVcxaFoyVm1hV3gwWlhJbkxGeHVJQ0FnSUdWMk9pQm1kVzVqZEdsdmJpZ3BJSHNnY21WMGRYSnVJSFJvYVhNN0lIMHNYRzVjYmlBZ0lDQjBiMU4wY21sdVp6b2dablZ1WTNScGIyNG9LU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDaDBhR2x6TG1GeVozTXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbVpwYkhSbGNpQXJJQ2NvSnlBcklIUm9hWE11WVhKbmN5NXFiMmx1S0Njc0p5a2dLeUFuS1NjN1hHNGdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1bWFXeDBaWEk3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5WEc1OU8xeHVYRzVjYm4wcEtISmxjWFZwY21Vb0p5NHVMM1J5WldVbktTazdYRzVjYmx4dVhHNHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OWNiaTh2SUZkRlFsQkJRMHNnUms5UFZFVlNYRzR2THlBdUwzNHZZMkZ5ZEc4dmJHbGlMMk5oY25SdkwzUnlaV1V2YVcxaFoyVm1hV3gwWlhJdWFuTmNiaTh2SUcxdlpIVnNaU0JwWkNBOUlEazNYRzR2THlCdGIyUjFiR1VnWTJoMWJtdHpJRDBnTUNKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3SWl3aWMyOTFjbU5sVW05dmRDSTZJaUo5XCIpO1xuXG4vKioqLyB9KSxcbi8qIDk4ICovXG4vKiBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyogYWxsIGV4cG9ydHMgdXNlZCAqL1xuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL34vY2FydG8vbGliL2NhcnRvL3RyZWUvaW52YWxpZC5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuZXZhbChcIihmdW5jdGlvbiAodHJlZSkge1xcbnRyZWUuSW52YWxpZCA9IGZ1bmN0aW9uIEludmFsaWQoY2h1bmssIGluZGV4LCBtZXNzYWdlKSB7XFxuICAgIHRoaXMuY2h1bmsgPSBjaHVuaztcXG4gICAgdGhpcy5pbmRleCA9IGluZGV4O1xcbiAgICB0aGlzLnR5cGUgPSAnc3ludGF4JztcXG4gICAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZSB8fCBcXFwiSW52YWxpZCBjb2RlOiBcXFwiICsgdGhpcy5jaHVuaztcXG59O1xcblxcbnRyZWUuSW52YWxpZC5wcm90b3R5cGUuaXMgPSAnaW52YWxpZCc7XFxuXFxudHJlZS5JbnZhbGlkLnByb3RvdHlwZS5ldiA9IGZ1bmN0aW9uKGVudikge1xcbiAgICBlbnYuZXJyb3Ioe1xcbiAgICAgICAgY2h1bms6IHRoaXMuY2h1bmssXFxuICAgICAgICBpbmRleDogdGhpcy5pbmRleCxcXG4gICAgICAgIHR5cGU6ICdzeW50YXgnLFxcbiAgICAgICAgbWVzc2FnZTogdGhpcy5tZXNzYWdlIHx8IFxcXCJJbnZhbGlkIGNvZGU6IFxcXCIgKyB0aGlzLmNodW5rXFxuICAgIH0pO1xcbiAgICByZXR1cm4ge1xcbiAgICAgICAgaXM6ICd1bmRlZmluZWQnXFxuICAgIH07XFxufTtcXG59KShfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi90cmVlICovIDApKTtcXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaU9UZ3Vhbk1pTENKemIzVnlZMlZ6SWpwYkluZGxZbkJoWTJzNkx5OHZMaTkrTDJOaGNuUnZMMnhwWWk5allYSjBieTkwY21WbEwybHVkbUZzYVdRdWFuTS9OalpqTmlKZExDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SW9ablZ1WTNScGIyNGdLSFJ5WldVcElIdGNiblJ5WldVdVNXNTJZV3hwWkNBOUlHWjFibU4wYVc5dUlFbHVkbUZzYVdRb1kyaDFibXNzSUdsdVpHVjRMQ0J0WlhOellXZGxLU0I3WEc0Z0lDQWdkR2hwY3k1amFIVnVheUE5SUdOb2RXNXJPMXh1SUNBZ0lIUm9hWE11YVc1a1pYZ2dQU0JwYm1SbGVEdGNiaUFnSUNCMGFHbHpMblI1Y0dVZ1BTQW5jM2x1ZEdGNEp6dGNiaUFnSUNCMGFHbHpMbTFsYzNOaFoyVWdQU0J0WlhOellXZGxJSHg4SUZ3aVNXNTJZV3hwWkNCamIyUmxPaUJjSWlBcklIUm9hWE11WTJoMWJtczdYRzU5TzF4dVhHNTBjbVZsTGtsdWRtRnNhV1F1Y0hKdmRHOTBlWEJsTG1seklEMGdKMmx1ZG1Gc2FXUW5PMXh1WEc1MGNtVmxMa2x1ZG1Gc2FXUXVjSEp2ZEc5MGVYQmxMbVYySUQwZ1puVnVZM1JwYjI0b1pXNTJLU0I3WEc0Z0lDQWdaVzUyTG1WeWNtOXlLSHRjYmlBZ0lDQWdJQ0FnWTJoMWJtczZJSFJvYVhNdVkyaDFibXNzWEc0Z0lDQWdJQ0FnSUdsdVpHVjRPaUIwYUdsekxtbHVaR1Y0TEZ4dUlDQWdJQ0FnSUNCMGVYQmxPaUFuYzNsdWRHRjRKeXhjYmlBZ0lDQWdJQ0FnYldWemMyRm5aVG9nZEdocGN5NXRaWE56WVdkbElIeDhJRndpU1c1MllXeHBaQ0JqYjJSbE9pQmNJaUFySUhSb2FYTXVZMmgxYm10Y2JpQWdJQ0I5S1R0Y2JpQWdJQ0J5WlhSMWNtNGdlMXh1SUNBZ0lDQWdJQ0JwY3pvZ0ozVnVaR1ZtYVc1bFpDZGNiaUFnSUNCOU8xeHVmVHRjYm4wcEtISmxjWFZwY21Vb0p5NHVMM1J5WldVbktTazdYRzVjYmx4dVhHNHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OWNiaTh2SUZkRlFsQkJRMHNnUms5UFZFVlNYRzR2THlBdUwzNHZZMkZ5ZEc4dmJHbGlMMk5oY25SdkwzUnlaV1V2YVc1MllXeHBaQzVxYzF4dUx5OGdiVzlrZFd4bElHbGtJRDBnT1RoY2JpOHZJRzF2WkhWc1pTQmphSFZ1YTNNZ1BTQXdJbDBzSW0xaGNIQnBibWR6SWpvaVFVRkJRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUc2lMQ0p6YjNWeVkyVlNiMjkwSWpvaUluMD1cIik7XG5cbi8qKiovIH0pLFxuLyogOTkgKi9cbi8qIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKiBhbGwgZXhwb3J0cyB1c2VkICovXG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vfi9jYXJ0by9saWIvY2FydG8vdHJlZS9rZXl3b3JkLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5ldmFsKFwiKGZ1bmN0aW9uKHRyZWUpIHtcXG5cXG50cmVlLktleXdvcmQgPSBmdW5jdGlvbiBLZXl3b3JkKHZhbHVlKSB7XFxuICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcXG4gICAgdmFyIHNwZWNpYWwgPSB7XFxuICAgICAgICAndHJhbnNwYXJlbnQnOiAnY29sb3InLFxcbiAgICAgICAgJ3RydWUnOiAnYm9vbGVhbicsXFxuICAgICAgICAnZmFsc2UnOiAnYm9vbGVhbidcXG4gICAgfTtcXG4gICAgdGhpcy5pcyA9IHNwZWNpYWxbdmFsdWVdID8gc3BlY2lhbFt2YWx1ZV0gOiAna2V5d29yZCc7XFxufTtcXG50cmVlLktleXdvcmQucHJvdG90eXBlID0ge1xcbiAgICBldjogZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9LFxcbiAgICB0b1N0cmluZzogZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzLnZhbHVlOyB9XFxufTtcXG5cXG59KShfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi90cmVlICovIDApKTtcXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaU9Ua3Vhbk1pTENKemIzVnlZMlZ6SWpwYkluZGxZbkJoWTJzNkx5OHZMaTkrTDJOaGNuUnZMMnhwWWk5allYSjBieTkwY21WbEwydGxlWGR2Y21RdWFuTS9Nemd4TXlKZExDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SW9ablZ1WTNScGIyNG9kSEpsWlNrZ2UxeHVYRzUwY21WbExrdGxlWGR2Y21RZ1BTQm1kVzVqZEdsdmJpQkxaWGwzYjNKa0tIWmhiSFZsS1NCN1hHNGdJQ0FnZEdocGN5NTJZV3gxWlNBOUlIWmhiSFZsTzF4dUlDQWdJSFpoY2lCemNHVmphV0ZzSUQwZ2UxeHVJQ0FnSUNBZ0lDQW5kSEpoYm5Od1lYSmxiblFuT2lBblkyOXNiM0luTEZ4dUlDQWdJQ0FnSUNBbmRISjFaU2M2SUNkaWIyOXNaV0Z1Snl4Y2JpQWdJQ0FnSUNBZ0oyWmhiSE5sSnpvZ0oySnZiMnhsWVc0blhHNGdJQ0FnZlR0Y2JpQWdJQ0IwYUdsekxtbHpJRDBnYzNCbFkybGhiRnQyWVd4MVpWMGdQeUJ6Y0dWamFXRnNXM1poYkhWbFhTQTZJQ2RyWlhsM2IzSmtKenRjYm4wN1hHNTBjbVZsTGt0bGVYZHZjbVF1Y0hKdmRHOTBlWEJsSUQwZ2UxeHVJQ0FnSUdWMk9pQm1kVzVqZEdsdmJpZ3BJSHNnY21WMGRYSnVJSFJvYVhNN0lIMHNYRzRnSUNBZ2RHOVRkSEpwYm1jNklHWjFibU4wYVc5dUtDa2dleUJ5WlhSMWNtNGdkR2hwY3k1MllXeDFaVHNnZlZ4dWZUdGNibHh1ZlNrb2NtVnhkV2x5WlNnbkxpNHZkSEpsWlNjcEtUdGNibHh1WEc1Y2JpOHZMeTh2THk4dkx5OHZMeTh2THk4dkwxeHVMeThnVjBWQ1VFRkRTeUJHVDA5VVJWSmNiaTh2SUM0dmZpOWpZWEowYnk5c2FXSXZZMkZ5ZEc4dmRISmxaUzlyWlhsM2IzSmtMbXB6WEc0dkx5QnRiMlIxYkdVZ2FXUWdQU0E1T1Z4dUx5OGdiVzlrZFd4bElHTm9kVzVyY3lBOUlEQWlYU3dpYldGd2NHbHVaM01pT2lKQlFVRkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdJaXdpYzI5MWNtTmxVbTl2ZENJNklpSjlcIik7XG5cbi8qKiovIH0pLFxuLyogMTAwICovXG4vKiBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyogYWxsIGV4cG9ydHMgdXNlZCAqL1xuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9+L2NhcnRvL2xpYi9jYXJ0by90cmVlL2xheWVyLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuZXZhbChcIihmdW5jdGlvbih0cmVlKSB7XFxuXFxudHJlZS5MYXllclhNTCA9IGZ1bmN0aW9uKG9iaiwgc3R5bGVzKSB7XFxuICAgIHZhciBkc29wdGlvbnMgPSBbXTtcXG4gICAgZm9yICh2YXIgaSBpbiBvYmouRGF0YXNvdXJjZSkge1xcbiAgICAgICAgZHNvcHRpb25zLnB1c2goJzxQYXJhbWV0ZXIgbmFtZT1cXFwiJyArIGkgKyAnXFxcIj48IVtDREFUQVsnICtcXG4gICAgICAgICAgICBvYmouRGF0YXNvdXJjZVtpXSArICddXT48L1BhcmFtZXRlcj4nKTtcXG4gICAgfVxcblxcbiAgICB2YXIgcHJvcF9zdHJpbmcgPSAnJztcXG4gICAgZm9yICh2YXIgcHJvcCBpbiBvYmoucHJvcGVydGllcykge1xcbiAgICAgICAgaWYgKHByb3AgPT09ICdtaW56b29tJykge1xcbiAgICAgICAgICAgIHByb3Bfc3RyaW5nICs9ICcgIG1heHpvb209XFxcIicgKyB0cmVlLlpvb20ucmFuZ2VzW29iai5wcm9wZXJ0aWVzW3Byb3BdXSArICdcXFwiXFxcXG4nO1xcbiAgICAgICAgfSBlbHNlIGlmIChwcm9wID09PSAnbWF4em9vbScpIHtcXG4gICAgICAgICAgICBwcm9wX3N0cmluZyArPSAnICBtaW56b29tPVxcXCInICsgdHJlZS5ab29tLnJhbmdlc1tvYmoucHJvcGVydGllc1twcm9wXSsxXSArICdcXFwiXFxcXG4nO1xcbiAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICBwcm9wX3N0cmluZyArPSAnICAnICsgcHJvcCArICc9XFxcIicgKyBvYmoucHJvcGVydGllc1twcm9wXSArICdcXFwiXFxcXG4nO1xcbiAgICAgICAgfVxcbiAgICB9XFxuXFxuICAgIHJldHVybiAnPExheWVyJyArXFxuICAgICAgICAnIG5hbWU9XFxcIicgKyBvYmoubmFtZSArICdcXFwiXFxcXG4nICtcXG4gICAgICAgIHByb3Bfc3RyaW5nICtcXG4gICAgICAgICgodHlwZW9mIG9iai5zdGF0dXMgPT09ICd1bmRlZmluZWQnKSA/ICcnIDogJyAgc3RhdHVzPVxcXCInICsgb2JqLnN0YXR1cyArICdcXFwiXFxcXG4nKSArXFxuICAgICAgICAoKHR5cGVvZiBvYmouc3JzID09PSAndW5kZWZpbmVkJykgPyAnJyA6ICcgIHNycz1cXFwiJyArIG9iai5zcnMgKyAnXFxcIicpICsgJz5cXFxcbiAgICAnICtcXG4gICAgICAgIHN0eWxlcy5yZXZlcnNlKCkubWFwKGZ1bmN0aW9uKHMpIHtcXG4gICAgICAgICAgICByZXR1cm4gJzxTdHlsZU5hbWU+JyArIHMgKyAnPC9TdHlsZU5hbWU+JztcXG4gICAgICAgIH0pLmpvaW4oJ1xcXFxuICAgICcpICtcXG4gICAgICAgIChkc29wdGlvbnMubGVuZ3RoID9cXG4gICAgICAgICdcXFxcbiAgICA8RGF0YXNvdXJjZT5cXFxcbiAgICAgICAnICtcXG4gICAgICAgIGRzb3B0aW9ucy5qb2luKCdcXFxcbiAgICAgICAnKSArXFxuICAgICAgICAnXFxcXG4gICAgPC9EYXRhc291cmNlPlxcXFxuJ1xcbiAgICAgICAgOiAnJykgK1xcbiAgICAgICAgJyAgPC9MYXllcj5cXFxcbic7XFxufTtcXG5cXG59KShfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi90cmVlICovIDApKTtcXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaU1UQXdMbXB6SWl3aWMyOTFjbU5sY3lJNld5SjNaV0p3WVdOck9pOHZMeTR2Zmk5allYSjBieTlzYVdJdlkyRnlkRzh2ZEhKbFpTOXNZWGxsY2k1cWN6OWhNV1V5SWwwc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYklpaG1kVzVqZEdsdmJpaDBjbVZsS1NCN1hHNWNiblJ5WldVdVRHRjVaWEpZVFV3Z1BTQm1kVzVqZEdsdmJpaHZZbW9zSUhOMGVXeGxjeWtnZTF4dUlDQWdJSFpoY2lCa2MyOXdkR2x2Ym5NZ1BTQmJYVHRjYmlBZ0lDQm1iM0lnS0haaGNpQnBJR2x1SUc5aWFpNUVZWFJoYzI5MWNtTmxLU0I3WEc0Z0lDQWdJQ0FnSUdSemIzQjBhVzl1Y3k1d2RYTm9LQ2M4VUdGeVlXMWxkR1Z5SUc1aGJXVTlYQ0luSUNzZ2FTQXJJQ2RjSWo0OElWdERSRUZVUVZzbklDdGNiaUFnSUNBZ0lDQWdJQ0FnSUc5aWFpNUVZWFJoYzI5MWNtTmxXMmxkSUNzZ0oxMWRQand2VUdGeVlXMWxkR1Z5UGljcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUhaaGNpQndjbTl3WDNOMGNtbHVaeUE5SUNjbk8xeHVJQ0FnSUdadmNpQW9kbUZ5SUhCeWIzQWdhVzRnYjJKcUxuQnliM0JsY25ScFpYTXBJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tIQnliM0FnUFQwOUlDZHRhVzU2YjI5dEp5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NISnZjRjl6ZEhKcGJtY2dLejBnSnlBZ2JXRjRlbTl2YlQxY0lpY2dLeUIwY21WbExscHZiMjB1Y21GdVoyVnpXMjlpYWk1d2NtOXdaWEowYVdWelczQnliM0JkWFNBcklDZGNJbHhjYmljN1hHNGdJQ0FnSUNBZ0lIMGdaV3h6WlNCcFppQW9jSEp2Y0NBOVBUMGdKMjFoZUhwdmIyMG5LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQndjbTl3WDNOMGNtbHVaeUFyUFNBbklDQnRhVzU2YjI5dFBWd2lKeUFySUhSeVpXVXVXbTl2YlM1eVlXNW5aWE5iYjJKcUxuQnliM0JsY25ScFpYTmJjSEp2Y0Ywck1WMGdLeUFuWENKY1hHNG5PMXh1SUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NISnZjRjl6ZEhKcGJtY2dLejBnSnlBZ0p5QXJJSEJ5YjNBZ0t5QW5QVndpSnlBcklHOWlhaTV3Y205d1pYSjBhV1Z6VzNCeWIzQmRJQ3NnSjF3aVhGeHVKenRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDFjYmx4dUlDQWdJSEpsZEhWeWJpQW5QRXhoZVdWeUp5QXJYRzRnSUNBZ0lDQWdJQ2NnYm1GdFpUMWNJaWNnS3lCdlltb3VibUZ0WlNBcklDZGNJbHhjYmljZ0sxeHVJQ0FnSUNBZ0lDQndjbTl3WDNOMGNtbHVaeUFyWEc0Z0lDQWdJQ0FnSUNnb2RIbHdaVzltSUc5aWFpNXpkR0YwZFhNZ1BUMDlJQ2QxYm1SbFptbHVaV1FuS1NBL0lDY25JRG9nSnlBZ2MzUmhkSFZ6UFZ3aUp5QXJJRzlpYWk1emRHRjBkWE1nS3lBblhDSmNYRzRuS1NBclhHNGdJQ0FnSUNBZ0lDZ29kSGx3Wlc5bUlHOWlhaTV6Y25NZ1BUMDlJQ2QxYm1SbFptbHVaV1FuS1NBL0lDY25JRG9nSnlBZ2MzSnpQVndpSnlBcklHOWlhaTV6Y25NZ0t5QW5YQ0luS1NBcklDYytYRnh1SUNBZ0lDY2dLMXh1SUNBZ0lDQWdJQ0J6ZEhsc1pYTXVjbVYyWlhKelpTZ3BMbTFoY0NobWRXNWpkR2x2YmloektTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnSnp4VGRIbHNaVTVoYldVK0p5QXJJSE1nS3lBblBDOVRkSGxzWlU1aGJXVStKenRjYmlBZ0lDQWdJQ0FnZlNrdWFtOXBiaWduWEZ4dUlDQWdJQ2NwSUN0Y2JpQWdJQ0FnSUNBZ0tHUnpiM0IwYVc5dWN5NXNaVzVuZEdnZ1AxeHVJQ0FnSUNBZ0lDQW5YRnh1SUNBZ0lEeEVZWFJoYzI5MWNtTmxQbHhjYmlBZ0lDQWdJQ0FuSUN0Y2JpQWdJQ0FnSUNBZ1pITnZjSFJwYjI1ekxtcHZhVzRvSjF4Y2JpQWdJQ0FnSUNBbktTQXJYRzRnSUNBZ0lDQWdJQ2RjWEc0Z0lDQWdQQzlFWVhSaGMyOTFjbU5sUGx4Y2JpZGNiaUFnSUNBZ0lDQWdPaUFuSnlrZ0sxeHVJQ0FnSUNBZ0lDQW5JQ0E4TDB4aGVXVnlQbHhjYmljN1hHNTlPMXh1WEc1OUtTaHlaWEYxYVhKbEtDY3VMaTkwY21WbEp5a3BPMXh1WEc1Y2JseHVMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZYRzR2THlCWFJVSlFRVU5MSUVaUFQxUkZVbHh1THk4Z0xpOStMMk5oY25SdkwyeHBZaTlqWVhKMGJ5OTBjbVZsTDJ4aGVXVnlMbXB6WEc0dkx5QnRiMlIxYkdVZ2FXUWdQU0F4TURCY2JpOHZJRzF2WkhWc1pTQmphSFZ1YTNNZ1BTQXdJbDBzSW0xaGNIQnBibWR6SWpvaVFVRkJRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHNpTENKemIzVnlZMlZTYjI5MElqb2lJbjA9XCIpO1xuXG4vKioqLyB9KSxcbi8qIDEwMSAqL1xuLyogbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9cbi8qIGFsbCBleHBvcnRzIHVzZWQgKi9cbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9+L2NhcnRvL2xpYi9jYXJ0by90cmVlL2xpdGVyYWwuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbmV2YWwoXCIvLyBBIGxpdGVyYWwgaXMgYSBsaXRlcmFsIHN0cmluZyBmb3IgTWFwbmlrIC0gdGhlXFxuLy8gcmVzdWx0IG9mIHRoZSBjb21iaW5hdGlvbiBvZiBhIGB0cmVlLkZpZWxkYCB3aXRoIGFueVxcbi8vIG90aGVyIHR5cGUuXFxuKGZ1bmN0aW9uKHRyZWUpIHtcXG5cXG50cmVlLkxpdGVyYWwgPSBmdW5jdGlvbiBGaWVsZChjb250ZW50KSB7XFxuICAgIHRoaXMudmFsdWUgPSBjb250ZW50IHx8ICcnO1xcbiAgICB0aGlzLmlzID0gJ2ZpZWxkJztcXG59O1xcblxcbnRyZWUuTGl0ZXJhbC5wcm90b3R5cGUgPSB7XFxuICAgIHRvU3RyaW5nOiBmdW5jdGlvbigpIHtcXG4gICAgICAgIHJldHVybiB0aGlzLnZhbHVlO1xcbiAgICB9LFxcbiAgICAnZXYnOiBmdW5jdGlvbigpIHtcXG4gICAgICAgIHJldHVybiB0aGlzO1xcbiAgICB9XFxufTtcXG5cXG59KShfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi90cmVlICovIDApKTtcXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaU1UQXhMbXB6SWl3aWMyOTFjbU5sY3lJNld5SjNaV0p3WVdOck9pOHZMeTR2Zmk5allYSjBieTlzYVdJdlkyRnlkRzh2ZEhKbFpTOXNhWFJsY21Gc0xtcHpQekE1WldRaVhTd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lMeThnUVNCc2FYUmxjbUZzSUdseklHRWdiR2wwWlhKaGJDQnpkSEpwYm1jZ1ptOXlJRTFoY0c1cGF5QXRJSFJvWlZ4dUx5OGdjbVZ6ZFd4MElHOW1JSFJvWlNCamIyMWlhVzVoZEdsdmJpQnZaaUJoSUdCMGNtVmxMa1pwWld4a1lDQjNhWFJvSUdGdWVWeHVMeThnYjNSb1pYSWdkSGx3WlM1Y2JpaG1kVzVqZEdsdmJpaDBjbVZsS1NCN1hHNWNiblJ5WldVdVRHbDBaWEpoYkNBOUlHWjFibU4wYVc5dUlFWnBaV3hrS0dOdmJuUmxiblFwSUh0Y2JpQWdJQ0IwYUdsekxuWmhiSFZsSUQwZ1kyOXVkR1Z1ZENCOGZDQW5KenRjYmlBZ0lDQjBhR2x6TG1seklEMGdKMlpwWld4a0p6dGNibjA3WEc1Y2JuUnlaV1V1VEdsMFpYSmhiQzV3Y205MGIzUjVjR1VnUFNCN1hHNGdJQ0FnZEc5VGRISnBibWM2SUdaMWJtTjBhVzl1S0NrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTUyWVd4MVpUdGNiaUFnSUNCOUxGeHVJQ0FnSUNkbGRpYzZJR1oxYm1OMGFXOXVLQ2tnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN6dGNiaUFnSUNCOVhHNTlPMXh1WEc1OUtTaHlaWEYxYVhKbEtDY3VMaTkwY21WbEp5a3BPMXh1WEc1Y2JseHVMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZYRzR2THlCWFJVSlFRVU5MSUVaUFQxUkZVbHh1THk4Z0xpOStMMk5oY25SdkwyeHBZaTlqWVhKMGJ5OTBjbVZsTDJ4cGRHVnlZV3d1YW5OY2JpOHZJRzF2WkhWc1pTQnBaQ0E5SURFd01WeHVMeThnYlc5a2RXeGxJR05vZFc1cmN5QTlJREFpWFN3aWJXRndjR2x1WjNNaU9pSkJRVUZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdJaXdpYzI5MWNtTmxVbTl2ZENJNklpSjlcIik7XG5cbi8qKiovIH0pLFxuLyogMTAyICovXG4vKiBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyogYWxsIGV4cG9ydHMgdXNlZCAqL1xuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vfi9jYXJ0by9saWIvY2FydG8vdHJlZS9vcGVyYXRpb24uanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuZXZhbChcIi8vIEFuIG9wZXJhdGlvbiBpcyBhbiBleHByZXNzaW9uIHdpdGggYW4gb3AgaW4gYmV0d2VlbiB0d28gb3BlcmFuZHMsXFxuLy8gbGlrZSAyICsgMS5cXG4oZnVuY3Rpb24odHJlZSkge1xcblxcbnRyZWUuT3BlcmF0aW9uID0gZnVuY3Rpb24gT3BlcmF0aW9uKG9wLCBvcGVyYW5kcywgaW5kZXgpIHtcXG4gICAgdGhpcy5vcCA9IG9wLnRyaW0oKTtcXG4gICAgdGhpcy5vcGVyYW5kcyA9IG9wZXJhbmRzO1xcbiAgICB0aGlzLmluZGV4ID0gaW5kZXg7XFxufTtcXG5cXG50cmVlLk9wZXJhdGlvbi5wcm90b3R5cGUuaXMgPSAnb3BlcmF0aW9uJztcXG5cXG50cmVlLk9wZXJhdGlvbi5wcm90b3R5cGUuZXYgPSBmdW5jdGlvbihlbnYpIHtcXG4gICAgdmFyIGEgPSB0aGlzLm9wZXJhbmRzWzBdLmV2KGVudiksXFxuICAgICAgICBiID0gdGhpcy5vcGVyYW5kc1sxXS5ldihlbnYpLFxcbiAgICAgICAgdGVtcDtcXG5cXG4gICAgaWYgKGEuaXMgPT09ICd1bmRlZmluZWQnIHx8IGIuaXMgPT09ICd1bmRlZmluZWQnKSB7XFxuICAgICAgICByZXR1cm4ge1xcbiAgICAgICAgICAgIGlzOiAndW5kZWZpbmVkJyxcXG4gICAgICAgICAgICB2YWx1ZTogJ3VuZGVmaW5lZCdcXG4gICAgICAgIH07XFxuICAgIH1cXG5cXG4gICAgaWYgKGEgaW5zdGFuY2VvZiB0cmVlLkRpbWVuc2lvbiAmJiBiIGluc3RhbmNlb2YgdHJlZS5Db2xvcikge1xcbiAgICAgICAgaWYgKHRoaXMub3AgPT09ICcqJyB8fCB0aGlzLm9wID09PSAnKycpIHtcXG4gICAgICAgICAgICB0ZW1wID0gYiwgYiA9IGEsIGEgPSB0ZW1wO1xcbiAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICBlbnYuZXJyb3Ioe1xcbiAgICAgICAgICAgICAgICBuYW1lOiBcXFwiT3BlcmF0aW9uRXJyb3JcXFwiLFxcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiBcXFwiQ2FuJ3Qgc3Vic3RyYWN0IG9yIGRpdmlkZSBhIGNvbG9yIGZyb20gYSBudW1iZXJcXFwiLFxcbiAgICAgICAgICAgICAgICBpbmRleDogdGhpcy5pbmRleFxcbiAgICAgICAgICAgIH0pO1xcbiAgICAgICAgfVxcbiAgICB9XFxuXFxuICAgIC8vIE9ubHkgY29uY2F0ZW5hdGUgcGxhaW4gc3RyaW5ncywgYmVjYXVzZSB0aGlzIGlzIGVhc2lseVxcbiAgICAvLyBwcmUtcHJvY2Vzc2VkXFxuICAgIGlmIChhIGluc3RhbmNlb2YgdHJlZS5RdW90ZWQgJiYgYiBpbnN0YW5jZW9mIHRyZWUuUXVvdGVkICYmIHRoaXMub3AgIT09ICcrJykge1xcbiAgICAgICAgZW52LmVycm9yKHtcXG4gICAgICAgICAgIG1lc3NhZ2U6IFxcXCJDYW4ndCBzdWJ0cmFjdCwgZGl2aWRlLCBvciBtdWx0aXBseSBzdHJpbmdzLlxcXCIsXFxuICAgICAgICAgICBpbmRleDogdGhpcy5pbmRleCxcXG4gICAgICAgICAgIHR5cGU6ICdydW50aW1lJyxcXG4gICAgICAgICAgIGZpbGVuYW1lOiB0aGlzLmZpbGVuYW1lXFxuICAgICAgICB9KTtcXG4gICAgICAgIHJldHVybiB7XFxuICAgICAgICAgICAgaXM6ICd1bmRlZmluZWQnLFxcbiAgICAgICAgICAgIHZhbHVlOiAndW5kZWZpbmVkJ1xcbiAgICAgICAgfTtcXG4gICAgfVxcblxcbiAgICAvLyBGaWVsZHMsIGxpdGVyYWxzLCBkaW1lbnNpb25zLCBhbmQgcXVvdGVkIHN0cmluZ3MgY2FuIGJlIGNvbWJpbmVkLlxcbiAgICBpZiAoYSBpbnN0YW5jZW9mIHRyZWUuRmllbGQgfHwgYiBpbnN0YW5jZW9mIHRyZWUuRmllbGQgfHxcXG4gICAgICAgIGEgaW5zdGFuY2VvZiB0cmVlLkxpdGVyYWwgfHwgYiBpbnN0YW5jZW9mIHRyZWUuTGl0ZXJhbCkge1xcbiAgICAgICAgaWYgKGEuaXMgPT09ICdjb2xvcicgfHwgYi5pcyA9PT0gJ2NvbG9yJykge1xcbiAgICAgICAgICAgIGVudi5lcnJvcih7XFxuICAgICAgICAgICAgICAgbWVzc2FnZTogXFxcIkNhbid0IHN1YnRyYWN0LCBkaXZpZGUsIG9yIG11bHRpcGx5IGNvbG9ycyBpbiBleHByZXNzaW9ucy5cXFwiLFxcbiAgICAgICAgICAgICAgIGluZGV4OiB0aGlzLmluZGV4LFxcbiAgICAgICAgICAgICAgIHR5cGU6ICdydW50aW1lJyxcXG4gICAgICAgICAgICAgICBmaWxlbmFtZTogdGhpcy5maWxlbmFtZVxcbiAgICAgICAgICAgIH0pO1xcbiAgICAgICAgICAgIHJldHVybiB7XFxuICAgICAgICAgICAgICAgIGlzOiAndW5kZWZpbmVkJyxcXG4gICAgICAgICAgICAgICAgdmFsdWU6ICd1bmRlZmluZWQnXFxuICAgICAgICAgICAgfTtcXG4gICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgcmV0dXJuIG5ldyB0cmVlLkxpdGVyYWwoYS5ldihlbnYpLnRvU3RyaW5nKHRydWUpICsgdGhpcy5vcCArIGIuZXYoZW52KS50b1N0cmluZyh0cnVlKSk7XFxuICAgICAgICB9XFxuICAgIH1cXG5cXG4gICAgaWYgKGEub3BlcmF0ZSA9PT0gdW5kZWZpbmVkKSB7XFxuICAgICAgICBlbnYuZXJyb3Ioe1xcbiAgICAgICAgICAgbWVzc2FnZTogJ0Nhbm5vdCBkbyBtYXRoIHdpdGggdHlwZSAnICsgYS5pcyArICcuJyxcXG4gICAgICAgICAgIGluZGV4OiB0aGlzLmluZGV4LFxcbiAgICAgICAgICAgdHlwZTogJ3J1bnRpbWUnLFxcbiAgICAgICAgICAgZmlsZW5hbWU6IHRoaXMuZmlsZW5hbWVcXG4gICAgICAgIH0pO1xcbiAgICAgICAgcmV0dXJuIHtcXG4gICAgICAgICAgICBpczogJ3VuZGVmaW5lZCcsXFxuICAgICAgICAgICAgdmFsdWU6ICd1bmRlZmluZWQnXFxuICAgICAgICB9O1xcbiAgICB9XFxuXFxuICAgIHJldHVybiBhLm9wZXJhdGUoZW52LCB0aGlzLm9wLCBiKTtcXG59O1xcblxcbnRyZWUub3BlcmF0ZSA9IGZ1bmN0aW9uKG9wLCBhLCBiKSB7XFxuICAgIHN3aXRjaCAob3ApIHtcXG4gICAgICAgIGNhc2UgJysnOiByZXR1cm4gYSArIGI7XFxuICAgICAgICBjYXNlICctJzogcmV0dXJuIGEgLSBiO1xcbiAgICAgICAgY2FzZSAnKic6IHJldHVybiBhICogYjtcXG4gICAgICAgIGNhc2UgJyUnOiByZXR1cm4gYSAlIGI7XFxuICAgICAgICBjYXNlICcvJzogcmV0dXJuIGEgLyBiO1xcbiAgICB9XFxufTtcXG5cXG59KShfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi90cmVlICovIDApKTtcXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaU1UQXlMbXB6SWl3aWMyOTFjbU5sY3lJNld5SjNaV0p3WVdOck9pOHZMeTR2Zmk5allYSjBieTlzYVdJdlkyRnlkRzh2ZEhKbFpTOXZjR1Z5WVhScGIyNHVhbk0vTnpjMk5DSmRMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUl2THlCQmJpQnZjR1Z5WVhScGIyNGdhWE1nWVc0Z1pYaHdjbVZ6YzJsdmJpQjNhWFJvSUdGdUlHOXdJR2x1SUdKbGRIZGxaVzRnZEhkdklHOXdaWEpoYm1SekxGeHVMeThnYkdsclpTQXlJQ3NnTVM1Y2JpaG1kVzVqZEdsdmJpaDBjbVZsS1NCN1hHNWNiblJ5WldVdVQzQmxjbUYwYVc5dUlEMGdablZ1WTNScGIyNGdUM0JsY21GMGFXOXVLRzl3TENCdmNHVnlZVzVrY3l3Z2FXNWtaWGdwSUh0Y2JpQWdJQ0IwYUdsekxtOXdJRDBnYjNBdWRISnBiU2dwTzF4dUlDQWdJSFJvYVhNdWIzQmxjbUZ1WkhNZ1BTQnZjR1Z5WVc1a2N6dGNiaUFnSUNCMGFHbHpMbWx1WkdWNElEMGdhVzVrWlhnN1hHNTlPMXh1WEc1MGNtVmxMazl3WlhKaGRHbHZiaTV3Y205MGIzUjVjR1V1YVhNZ1BTQW5iM0JsY21GMGFXOXVKenRjYmx4dWRISmxaUzVQY0dWeVlYUnBiMjR1Y0hKdmRHOTBlWEJsTG1WMklEMGdablZ1WTNScGIyNG9aVzUyS1NCN1hHNGdJQ0FnZG1GeUlHRWdQU0IwYUdsekxtOXdaWEpoYm1Seld6QmRMbVYyS0dWdWRpa3NYRzRnSUNBZ0lDQWdJR0lnUFNCMGFHbHpMbTl3WlhKaGJtUnpXekZkTG1WMktHVnVkaWtzWEc0Z0lDQWdJQ0FnSUhSbGJYQTdYRzVjYmlBZ0lDQnBaaUFvWVM1cGN5QTlQVDBnSjNWdVpHVm1hVzVsWkNjZ2ZId2dZaTVwY3lBOVBUMGdKM1Z1WkdWbWFXNWxaQ2NwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2x6T2lBbmRXNWtaV1pwYm1Wa0p5eGNiaUFnSUNBZ0lDQWdJQ0FnSUhaaGJIVmxPaUFuZFc1a1pXWnBibVZrSjF4dUlDQWdJQ0FnSUNCOU8xeHVJQ0FnSUgxY2JseHVJQ0FnSUdsbUlDaGhJR2x1YzNSaGJtTmxiMllnZEhKbFpTNUVhVzFsYm5OcGIyNGdKaVlnWWlCcGJuTjBZVzVqWlc5bUlIUnlaV1V1UTI5c2IzSXBJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11YjNBZ1BUMDlJQ2NxSnlCOGZDQjBhR2x6TG05d0lEMDlQU0FuS3ljcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSbGJYQWdQU0JpTENCaUlEMGdZU3dnWVNBOUlIUmxiWEE3WEc0Z0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmxibll1WlhKeWIzSW9lMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzVoYldVNklGd2lUM0JsY21GMGFXOXVSWEp5YjNKY0lpeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnRaWE56WVdkbE9pQmNJa05oYmlkMElITjFZbk4wY21GamRDQnZjaUJrYVhacFpHVWdZU0JqYjJ4dmNpQm1jbTl0SUdFZ2JuVnRZbVZ5WENJc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXNWtaWGc2SUhSb2FYTXVhVzVrWlhoY2JpQWdJQ0FnSUNBZ0lDQWdJSDBwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHk4Z1QyNXNlU0JqYjI1allYUmxibUYwWlNCd2JHRnBiaUJ6ZEhKcGJtZHpMQ0JpWldOaGRYTmxJSFJvYVhNZ2FYTWdaV0Z6YVd4NVhHNGdJQ0FnTHk4Z2NISmxMWEJ5YjJObGMzTmxaRnh1SUNBZ0lHbG1JQ2hoSUdsdWMzUmhibU5sYjJZZ2RISmxaUzVSZFc5MFpXUWdKaVlnWWlCcGJuTjBZVzVqWlc5bUlIUnlaV1V1VVhWdmRHVmtJQ1ltSUhSb2FYTXViM0FnSVQwOUlDY3JKeWtnZTF4dUlDQWdJQ0FnSUNCbGJuWXVaWEp5YjNJb2UxeHVJQ0FnSUNBZ0lDQWdJQ0J0WlhOellXZGxPaUJjSWtOaGJpZDBJSE4xWW5SeVlXTjBMQ0JrYVhacFpHVXNJRzl5SUcxMWJIUnBjR3g1SUhOMGNtbHVaM011WENJc1hHNGdJQ0FnSUNBZ0lDQWdJR2x1WkdWNE9pQjBhR2x6TG1sdVpHVjRMRnh1SUNBZ0lDQWdJQ0FnSUNCMGVYQmxPaUFuY25WdWRHbHRaU2NzWEc0Z0lDQWdJQ0FnSUNBZ0lHWnBiR1Z1WVcxbE9pQjBhR2x6TG1acGJHVnVZVzFsWEc0Z0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYVhNNklDZDFibVJsWm1sdVpXUW5MRnh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnNkV1U2SUNkMWJtUmxabWx1WldRblhHNGdJQ0FnSUNBZ0lIMDdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5OGdSbWxsYkdSekxDQnNhWFJsY21Gc2N5d2daR2x0Wlc1emFXOXVjeXdnWVc1a0lIRjFiM1JsWkNCemRISnBibWR6SUdOaGJpQmlaU0JqYjIxaWFXNWxaQzVjYmlBZ0lDQnBaaUFvWVNCcGJuTjBZVzVqWlc5bUlIUnlaV1V1Um1sbGJHUWdmSHdnWWlCcGJuTjBZVzVqWlc5bUlIUnlaV1V1Um1sbGJHUWdmSHhjYmlBZ0lDQWdJQ0FnWVNCcGJuTjBZVzVqWlc5bUlIUnlaV1V1VEdsMFpYSmhiQ0I4ZkNCaUlHbHVjM1JoYm1ObGIyWWdkSEpsWlM1TWFYUmxjbUZzS1NCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2hoTG1seklEMDlQU0FuWTI5c2IzSW5JSHg4SUdJdWFYTWdQVDA5SUNkamIyeHZjaWNwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR1Z1ZGk1bGNuSnZjaWg3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0J0WlhOellXZGxPaUJjSWtOaGJpZDBJSE4xWW5SeVlXTjBMQ0JrYVhacFpHVXNJRzl5SUcxMWJIUnBjR3g1SUdOdmJHOXljeUJwYmlCbGVIQnlaWE56YVc5dWN5NWNJaXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2x1WkdWNE9pQjBhR2x6TG1sdVpHVjRMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkSGx3WlRvZ0ozSjFiblJwYldVbkxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1ptbHNaVzVoYldVNklIUm9hWE11Wm1sc1pXNWhiV1ZjYmlBZ0lDQWdJQ0FnSUNBZ0lIMHBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcGN6b2dKM1Z1WkdWbWFXNWxaQ2NzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1Gc2RXVTZJQ2QxYm1SbFptbHVaV1FuWEc0Z0lDQWdJQ0FnSUNBZ0lDQjlPMXh1SUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUc1bGR5QjBjbVZsTGt4cGRHVnlZV3dvWVM1bGRpaGxibllwTG5SdlUzUnlhVzVuS0hSeWRXVXBJQ3NnZEdocGN5NXZjQ0FySUdJdVpYWW9aVzUyS1M1MGIxTjBjbWx1WnloMGNuVmxLU2s3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5WEc1Y2JpQWdJQ0JwWmlBb1lTNXZjR1Z5WVhSbElEMDlQU0IxYm1SbFptbHVaV1FwSUh0Y2JpQWdJQ0FnSUNBZ1pXNTJMbVZ5Y205eUtIdGNiaUFnSUNBZ0lDQWdJQ0FnYldWemMyRm5aVG9nSjBOaGJtNXZkQ0JrYnlCdFlYUm9JSGRwZEdnZ2RIbHdaU0FuSUNzZ1lTNXBjeUFySUNjdUp5eGNiaUFnSUNBZ0lDQWdJQ0FnYVc1a1pYZzZJSFJvYVhNdWFXNWtaWGdzWEc0Z0lDQWdJQ0FnSUNBZ0lIUjVjR1U2SUNkeWRXNTBhVzFsSnl4Y2JpQWdJQ0FnSUNBZ0lDQWdabWxzWlc1aGJXVTZJSFJvYVhNdVptbHNaVzVoYldWY2JpQWdJQ0FnSUNBZ2ZTazdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCcGN6b2dKM1Z1WkdWbWFXNWxaQ2NzWEc0Z0lDQWdJQ0FnSUNBZ0lDQjJZV3gxWlRvZ0ozVnVaR1ZtYVc1bFpDZGNiaUFnSUNBZ0lDQWdmVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnlaWFIxY200Z1lTNXZjR1Z5WVhSbEtHVnVkaXdnZEdocGN5NXZjQ3dnWWlrN1hHNTlPMXh1WEc1MGNtVmxMbTl3WlhKaGRHVWdQU0JtZFc1amRHbHZiaWh2Y0N3Z1lTd2dZaWtnZTF4dUlDQWdJSE4zYVhSamFDQW9iM0FwSUh0Y2JpQWdJQ0FnSUNBZ1kyRnpaU0FuS3ljNklISmxkSFZ5YmlCaElDc2dZanRjYmlBZ0lDQWdJQ0FnWTJGelpTQW5MU2M2SUhKbGRIVnliaUJoSUMwZ1lqdGNiaUFnSUNBZ0lDQWdZMkZ6WlNBbktpYzZJSEpsZEhWeWJpQmhJQ29nWWp0Y2JpQWdJQ0FnSUNBZ1kyRnpaU0FuSlNjNklISmxkSFZ5YmlCaElDVWdZanRjYmlBZ0lDQWdJQ0FnWTJGelpTQW5MeWM2SUhKbGRIVnliaUJoSUM4Z1lqdGNiaUFnSUNCOVhHNTlPMXh1WEc1OUtTaHlaWEYxYVhKbEtDY3VMaTkwY21WbEp5a3BPMXh1WEc1Y2JseHVMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZYRzR2THlCWFJVSlFRVU5MSUVaUFQxUkZVbHh1THk4Z0xpOStMMk5oY25SdkwyeHBZaTlqWVhKMGJ5OTBjbVZsTDI5d1pYSmhkR2x2Ymk1cWMxeHVMeThnYlc5a2RXeGxJR2xrSUQwZ01UQXlYRzR2THlCdGIyUjFiR1VnWTJoMWJtdHpJRDBnTUNKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdJaXdpYzI5MWNtTmxVbTl2ZENJNklpSjlcIik7XG5cbi8qKiovIH0pLFxuLyogMTAzICovXG4vKiBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyogYWxsIGV4cG9ydHMgdXNlZCAqL1xuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vfi9jYXJ0by9saWIvY2FydG8vdHJlZS9xdW90ZWQuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuZXZhbChcIihmdW5jdGlvbih0cmVlKSB7XFxuXFxudHJlZS5RdW90ZWQgPSBmdW5jdGlvbiBRdW90ZWQoY29udGVudCkge1xcbiAgICB0aGlzLnZhbHVlID0gY29udGVudCB8fCAnJztcXG59O1xcblxcbnRyZWUuUXVvdGVkLnByb3RvdHlwZSA9IHtcXG4gICAgaXM6ICdzdHJpbmcnLFxcblxcbiAgICB0b1N0cmluZzogZnVuY3Rpb24ocXVvdGVzKSB7XFxuICAgICAgICB2YXIgZXNjYXBlZFZhbHVlID0gdGhpcy52YWx1ZVxcbiAgICAgICAgICAgIC5yZXBsYWNlKC8mL2csICcmYW1wOycpXFxuICAgICAgICB2YXIgeG1sdmFsdWUgPSBlc2NhcGVkVmFsdWVcXG4gICAgICAgICAgICAucmVwbGFjZSgvXFxcXCcvZywgJ1xcXFxcXFxcXFxcXCcnKVxcbiAgICAgICAgICAgIC5yZXBsYWNlKC9cXFxcXFxcIi9nLCAnJnF1b3Q7JylcXG4gICAgICAgICAgICAucmVwbGFjZSgvPC9nLCAnJmx0OycpXFxuICAgICAgICAgICAgLnJlcGxhY2UoL1xcXFw+L2csICcmZ3Q7Jyk7XFxuICAgICAgICByZXR1cm4gKHF1b3RlcyA9PT0gdHJ1ZSkgPyBcXFwiJ1xcXCIgKyB4bWx2YWx1ZSArIFxcXCInXFxcIiA6IGVzY2FwZWRWYWx1ZTtcXG4gICAgfSxcXG5cXG4gICAgJ2V2JzogZnVuY3Rpb24oKSB7XFxuICAgICAgICByZXR1cm4gdGhpcztcXG4gICAgfSxcXG5cXG4gICAgb3BlcmF0ZTogZnVuY3Rpb24oZW52LCBvcCwgb3RoZXIpIHtcXG4gICAgICAgIHJldHVybiBuZXcgdHJlZS5RdW90ZWQodHJlZS5vcGVyYXRlKG9wLCB0aGlzLnRvU3RyaW5nKCksIG90aGVyLnRvU3RyaW5nKHRoaXMuY29udGFpbnNfZmllbGQpKSk7XFxuICAgIH1cXG59O1xcblxcbn0pKF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL3RyZWUgKi8gMCkpO1xcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pTVRBekxtcHpJaXdpYzI5MWNtTmxjeUk2V3lKM1pXSndZV05yT2k4dkx5NHZmaTlqWVhKMGJ5OXNhV0l2WTJGeWRHOHZkSEpsWlM5eGRXOTBaV1F1YW5NL05UVXhZU0pkTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lJb1puVnVZM1JwYjI0b2RISmxaU2tnZTF4dVhHNTBjbVZsTGxGMWIzUmxaQ0E5SUdaMWJtTjBhVzl1SUZGMWIzUmxaQ2hqYjI1MFpXNTBLU0I3WEc0Z0lDQWdkR2hwY3k1MllXeDFaU0E5SUdOdmJuUmxiblFnZkh3Z0p5YzdYRzU5TzF4dVhHNTBjbVZsTGxGMWIzUmxaQzV3Y205MGIzUjVjR1VnUFNCN1hHNGdJQ0FnYVhNNklDZHpkSEpwYm1jbkxGeHVYRzRnSUNBZ2RHOVRkSEpwYm1jNklHWjFibU4wYVc5dUtIRjFiM1JsY3lrZ2UxeHVJQ0FnSUNBZ0lDQjJZWElnWlhOallYQmxaRlpoYkhWbElEMGdkR2hwY3k1MllXeDFaVnh1SUNBZ0lDQWdJQ0FnSUNBZ0xuSmxjR3hoWTJVb0x5WXZaeXdnSnlaaGJYQTdKeWxjYmlBZ0lDQWdJQ0FnZG1GeUlIaHRiSFpoYkhWbElEMGdaWE5qWVhCbFpGWmhiSFZsWEc0Z0lDQWdJQ0FnSUNBZ0lDQXVjbVZ3YkdGalpTZ3ZYRnduTDJjc0lDZGNYRnhjWEZ3bkp5bGNiaUFnSUNBZ0lDQWdJQ0FnSUM1eVpYQnNZV05sS0M5Y1hGd2lMMmNzSUNjbWNYVnZkRHNuS1Z4dUlDQWdJQ0FnSUNBZ0lDQWdMbkpsY0d4aFkyVW9Mend2Wnl3Z0p5WnNkRHNuS1Z4dUlDQWdJQ0FnSUNBZ0lDQWdMbkpsY0d4aFkyVW9MMXhjUGk5bkxDQW5KbWQwT3ljcE8xeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z0tIRjFiM1JsY3lBOVBUMGdkSEoxWlNrZ1B5QmNJaWRjSWlBcklIaHRiSFpoYkhWbElDc2dYQ0luWENJZ09pQmxjMk5oY0dWa1ZtRnNkV1U3WEc0Z0lDQWdmU3hjYmx4dUlDQWdJQ2RsZGljNklHWjFibU4wYVc5dUtDa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3p0Y2JpQWdJQ0I5TEZ4dVhHNGdJQ0FnYjNCbGNtRjBaVG9nWm5WdVkzUnBiMjRvWlc1MkxDQnZjQ3dnYjNSb1pYSXBJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJRzVsZHlCMGNtVmxMbEYxYjNSbFpDaDBjbVZsTG05d1pYSmhkR1VvYjNBc0lIUm9hWE11ZEc5VGRISnBibWNvS1N3Z2IzUm9aWEl1ZEc5VGRISnBibWNvZEdocGN5NWpiMjUwWVdsdWMxOW1hV1ZzWkNrcEtUdGNiaUFnSUNCOVhHNTlPMXh1WEc1OUtTaHlaWEYxYVhKbEtDY3VMaTkwY21WbEp5a3BPMXh1WEc1Y2JseHVMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZYRzR2THlCWFJVSlFRVU5MSUVaUFQxUkZVbHh1THk4Z0xpOStMMk5oY25SdkwyeHBZaTlqWVhKMGJ5OTBjbVZsTDNGMWIzUmxaQzVxYzF4dUx5OGdiVzlrZFd4bElHbGtJRDBnTVRBelhHNHZMeUJ0YjJSMWJHVWdZMmgxYm10eklEMGdNQ0pkTENKdFlYQndhVzVuY3lJNklrRkJRVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3lJc0luTnZkWEpqWlZKdmIzUWlPaUlpZlE9PVwiKTtcblxuLyoqKi8gfSksXG4vKiAxMDQgKi9cbi8qIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKiBhbGwgZXhwb3J0cyB1c2VkICovXG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9+L2NhcnRvL2xpYi9jYXJ0by90cmVlL3JlZmVyZW5jZS5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5ldmFsKFwiLyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovKGZ1bmN0aW9uKGdsb2JhbCkgey8vIENhcnRvIHB1bGxzIGluIGEgcmVmZXJlbmNlIGZyb20gdGhlIGBtYXBuaWstcmVmZXJlbmNlYFxcbi8vIG1vZHVsZS4gVGhpcyBmaWxlIGJ1aWxkcyBpbmRleGVzIGZyb20gdGhhdCBmaWxlIGZvciBpdHMgdmFyaW91c1xcbi8vIG9wdGlvbnMsIGFuZCBwcm92aWRlcyB2YWxpZGF0aW9uIG1ldGhvZHMgZm9yIHByb3BlcnR5OiB2YWx1ZVxcbi8vIGNvbWJpbmF0aW9ucy5cXG4oZnVuY3Rpb24odHJlZSkge1xcblxcbnZhciBfID0gZ2xvYmFsLl8gfHwgX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgdW5kZXJzY29yZSAqLyA0KSxcXG4gICAgcmVmID0ge307XFxuXFxucmVmLnNldERhdGEgPSBmdW5jdGlvbihkYXRhKSB7XFxuICAgIHJlZi5kYXRhID0gZGF0YTtcXG4gICAgcmVmLnNlbGVjdG9yX2NhY2hlID0gZ2VuZXJhdGVTZWxlY3RvckNhY2hlKGRhdGEpO1xcbiAgICByZWYubWFwbmlrRnVuY3Rpb25zID0gZ2VuZXJhdGVNYXBuaWtGdW5jdGlvbnMoZGF0YSk7XFxuXFxuICAgIHJlZi5tYXBuaWtGdW5jdGlvbnMubWF0cml4ID0gWzZdO1xcbiAgICByZWYubWFwbmlrRnVuY3Rpb25zLnRyYW5zbGF0ZSA9IFsxLCAyXTtcXG4gICAgcmVmLm1hcG5pa0Z1bmN0aW9ucy5zY2FsZSA9IFsxLCAyXTtcXG4gICAgcmVmLm1hcG5pa0Z1bmN0aW9ucy5yb3RhdGUgPSBbMSwgM107XFxuICAgIHJlZi5tYXBuaWtGdW5jdGlvbnMuc2tld1ggPSBbMV07XFxuICAgIHJlZi5tYXBuaWtGdW5jdGlvbnMuc2tld1kgPSBbMV07XFxuXFxuICAgIHJlZi5yZXF1aXJlZF9jYWNoZSA9IGdlbmVyYXRlUmVxdWlyZWRQcm9wZXJ0aWVzKGRhdGEpO1xcbn07XFxuXFxucmVmLnNldFZlcnNpb24gPSBmdW5jdGlvbih2ZXJzaW9uKSB7XFxuICAgIHZhciBtYXBuaWtfcmVmZXJlbmNlID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgbWFwbmlrLXJlZmVyZW5jZSAqLyAxNDEpO1xcbiAgICBpZiAobWFwbmlrX3JlZmVyZW5jZS52ZXJzaW9uLmhhc093blByb3BlcnR5KHZlcnNpb24pKSB7XFxuICAgICAgICByZWYuc2V0RGF0YShtYXBuaWtfcmVmZXJlbmNlLnZlcnNpb25bdmVyc2lvbl0pO1xcbiAgICAgICAgcmV0dXJuIHRydWU7XFxuICAgIH0gZWxzZSB7XFxuICAgICAgICByZXR1cm4gZmFsc2U7XFxuICAgIH1cXG59O1xcblxcbnJlZi5zZWxlY3RvckRhdGEgPSBmdW5jdGlvbihzZWxlY3RvciwgaSkge1xcbiAgICBpZiAocmVmLnNlbGVjdG9yX2NhY2hlW3NlbGVjdG9yXSkgcmV0dXJuIHJlZi5zZWxlY3Rvcl9jYWNoZVtzZWxlY3Rvcl1baV07XFxufTtcXG5cXG5yZWYudmFsaWRTZWxlY3RvciA9IGZ1bmN0aW9uKHNlbGVjdG9yKSB7IHJldHVybiAhIXJlZi5zZWxlY3Rvcl9jYWNoZVtzZWxlY3Rvcl07IH07XFxucmVmLnNlbGVjdG9yTmFtZSA9IGZ1bmN0aW9uKHNlbGVjdG9yKSB7IHJldHVybiByZWYuc2VsZWN0b3JEYXRhKHNlbGVjdG9yLCAyKTsgfTtcXG5yZWYuc2VsZWN0b3IgPSBmdW5jdGlvbihzZWxlY3RvcikgeyByZXR1cm4gcmVmLnNlbGVjdG9yRGF0YShzZWxlY3RvciwgMCk7IH07XFxucmVmLnN5bWJvbGl6ZXIgPSBmdW5jdGlvbihzZWxlY3RvcikgeyByZXR1cm4gcmVmLnNlbGVjdG9yRGF0YShzZWxlY3RvciwgMSk7IH07XFxuXFxuZnVuY3Rpb24gZ2VuZXJhdGVTZWxlY3RvckNhY2hlKGRhdGEpIHtcXG4gICAgdmFyIGluZGV4ID0ge307XFxuICAgIGZvciAodmFyIGkgaW4gZGF0YS5zeW1ib2xpemVycykge1xcbiAgICAgICAgZm9yICh2YXIgaiBpbiBkYXRhLnN5bWJvbGl6ZXJzW2ldKSB7XFxuICAgICAgICAgICAgaWYgKGRhdGEuc3ltYm9saXplcnNbaV1bal0uaGFzT3duUHJvcGVydHkoJ2NzcycpKSB7XFxuICAgICAgICAgICAgICAgIGluZGV4W2RhdGEuc3ltYm9saXplcnNbaV1bal0uY3NzXSA9IFtkYXRhLnN5bWJvbGl6ZXJzW2ldW2pdLCBpLCBqXTtcXG4gICAgICAgICAgICB9XFxuICAgICAgICB9XFxuICAgIH1cXG4gICAgcmV0dXJuIGluZGV4O1xcbn1cXG5cXG5mdW5jdGlvbiBnZW5lcmF0ZU1hcG5pa0Z1bmN0aW9ucyhkYXRhKSB7XFxuICAgIHZhciBmdW5jdGlvbnMgPSB7fTtcXG4gICAgZm9yICh2YXIgaSBpbiBkYXRhLnN5bWJvbGl6ZXJzKSB7XFxuICAgICAgICBmb3IgKHZhciBqIGluIGRhdGEuc3ltYm9saXplcnNbaV0pIHtcXG4gICAgICAgICAgICBpZiAoZGF0YS5zeW1ib2xpemVyc1tpXVtqXS50eXBlID09PSAnZnVuY3Rpb25zJykge1xcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBrID0gMDsgayA8IGRhdGEuc3ltYm9saXplcnNbaV1bal0uZnVuY3Rpb25zLmxlbmd0aDsgaysrKSB7XFxuICAgICAgICAgICAgICAgICAgICB2YXIgZm4gPSBkYXRhLnN5bWJvbGl6ZXJzW2ldW2pdLmZ1bmN0aW9uc1trXTtcXG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uc1tmblswXV0gPSBmblsxXTtcXG4gICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIH1cXG4gICAgICAgIH1cXG4gICAgfVxcbiAgICByZXR1cm4gZnVuY3Rpb25zO1xcbn1cXG5cXG5mdW5jdGlvbiBnZW5lcmF0ZVJlcXVpcmVkUHJvcGVydGllcyhkYXRhKSB7XFxuICAgIHZhciBjYWNoZSA9IHt9O1xcbiAgICBmb3IgKHZhciBzeW1ib2xpemVyX25hbWUgaW4gZGF0YS5zeW1ib2xpemVycykge1xcbiAgICAgICAgY2FjaGVbc3ltYm9saXplcl9uYW1lXSA9IFtdO1xcbiAgICAgICAgZm9yICh2YXIgaiBpbiBkYXRhLnN5bWJvbGl6ZXJzW3N5bWJvbGl6ZXJfbmFtZV0pIHtcXG4gICAgICAgICAgICBpZiAoZGF0YS5zeW1ib2xpemVyc1tzeW1ib2xpemVyX25hbWVdW2pdLnJlcXVpcmVkKSB7XFxuICAgICAgICAgICAgICAgIGNhY2hlW3N5bWJvbGl6ZXJfbmFtZV0ucHVzaChkYXRhLnN5bWJvbGl6ZXJzW3N5bWJvbGl6ZXJfbmFtZV1bal0uY3NzKTtcXG4gICAgICAgICAgICB9XFxuICAgICAgICB9XFxuICAgIH1cXG4gICAgcmV0dXJuIGNhY2hlO1xcbn1cXG5cXG5yZWYucmVxdWlyZWRQcm9wZXJ0aWVzID0gZnVuY3Rpb24oc3ltYm9saXplcl9uYW1lLCBydWxlcykge1xcbiAgICB2YXIgcmVxID0gcmVmLnJlcXVpcmVkX2NhY2hlW3N5bWJvbGl6ZXJfbmFtZV07XFxuICAgIGZvciAodmFyIGkgaW4gcmVxKSB7XFxuICAgICAgICBpZiAoIShyZXFbaV0gaW4gcnVsZXMpKSB7XFxuICAgICAgICAgICAgcmV0dXJuICdQcm9wZXJ0eSAnICsgcmVxW2ldICsgJyByZXF1aXJlZCBmb3IgZGVmaW5pbmcgJyArXFxuICAgICAgICAgICAgICAgIHN5bWJvbGl6ZXJfbmFtZSArICcgc3R5bGVzLic7XFxuICAgICAgICB9XFxuICAgIH1cXG59O1xcblxcbi8vIFRPRE86IGZpbmlzaCBpbXBsZW1lbnRhdGlvbiAtIHRoaXMgaXMgZGVhZCBjb2RlXFxucmVmLl92YWxpZGF0ZVZhbHVlID0ge1xcbiAgICAnZm9udCc6IGZ1bmN0aW9uKGVudiwgdmFsdWUpIHtcXG4gICAgICAgIGlmIChlbnYudmFsaWRhdGlvbl9kYXRhICYmIGVudi52YWxpZGF0aW9uX2RhdGEuZm9udHMpIHtcXG4gICAgICAgICAgICByZXR1cm4gZW52LnZhbGlkYXRpb25fZGF0YS5mb250cy5pbmRleE9mKHZhbHVlKSAhPSAtMTtcXG4gICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XFxuICAgICAgICB9XFxuICAgIH1cXG59O1xcblxcbnJlZi5pc0ZvbnQgPSBmdW5jdGlvbihzZWxlY3Rvcikge1xcbiAgICByZXR1cm4gcmVmLnNlbGVjdG9yKHNlbGVjdG9yKS52YWxpZGF0ZSA9PSAnZm9udCc7XFxufTtcXG5cXG4vLyBodHRwczovL2dpc3QuZ2l0aHViLmNvbS85ODI5MjdcXG5yZWYuZWRpdERpc3RhbmNlID0gZnVuY3Rpb24oYSwgYil7XFxuICAgIGlmIChhLmxlbmd0aCA9PT0gMCkgcmV0dXJuIGIubGVuZ3RoO1xcbiAgICBpZiAoYi5sZW5ndGggPT09IDApIHJldHVybiBhLmxlbmd0aDtcXG4gICAgdmFyIG1hdHJpeCA9IFtdO1xcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8PSBiLmxlbmd0aDsgaSsrKSB7IG1hdHJpeFtpXSA9IFtpXTsgfVxcbiAgICBmb3IgKHZhciBqID0gMDsgaiA8PSBhLmxlbmd0aDsgaisrKSB7IG1hdHJpeFswXVtqXSA9IGo7IH1cXG4gICAgZm9yIChpID0gMTsgaSA8PSBiLmxlbmd0aDsgaSsrKSB7XFxuICAgICAgICBmb3IgKGogPSAxOyBqIDw9IGEubGVuZ3RoOyBqKyspIHtcXG4gICAgICAgICAgICBpZiAoYi5jaGFyQXQoaS0xKSA9PSBhLmNoYXJBdChqLTEpKSB7XFxuICAgICAgICAgICAgICAgIG1hdHJpeFtpXVtqXSA9IG1hdHJpeFtpLTFdW2otMV07XFxuICAgICAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICAgICAgbWF0cml4W2ldW2pdID0gTWF0aC5taW4obWF0cml4W2ktMV1bai0xXSArIDEsIC8vIHN1YnN0aXR1dGlvblxcbiAgICAgICAgICAgICAgICAgICAgTWF0aC5taW4obWF0cml4W2ldW2otMV0gKyAxLCAvLyBpbnNlcnRpb25cXG4gICAgICAgICAgICAgICAgICAgIG1hdHJpeFtpLTFdW2pdICsgMSkpOyAvLyBkZWxldGlvblxcbiAgICAgICAgICAgIH1cXG4gICAgICAgIH1cXG4gICAgfVxcbiAgICByZXR1cm4gbWF0cml4W2IubGVuZ3RoXVthLmxlbmd0aF07XFxufTtcXG5cXG5mdW5jdGlvbiB2YWxpZGF0ZUZ1bmN0aW9ucyh2YWx1ZSwgc2VsZWN0b3IpIHtcXG4gICAgaWYgKHZhbHVlLnZhbHVlWzBdLmlzID09PSAnc3RyaW5nJykgcmV0dXJuIHRydWU7XFxuICAgIGZvciAodmFyIGkgaW4gdmFsdWUudmFsdWUpIHtcXG4gICAgICAgIGZvciAodmFyIGogaW4gdmFsdWUudmFsdWVbaV0udmFsdWUpIHtcXG4gICAgICAgICAgICBpZiAodmFsdWUudmFsdWVbaV0udmFsdWVbal0uaXMgIT09ICdjYWxsJykgcmV0dXJuIGZhbHNlO1xcbiAgICAgICAgICAgIHZhciBmID0gXy5maW5kKHJlZlxcbiAgICAgICAgICAgICAgICAuc2VsZWN0b3Ioc2VsZWN0b3IpLmZ1bmN0aW9ucywgZnVuY3Rpb24oeCkge1xcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHhbMF0gPT0gdmFsdWUudmFsdWVbaV0udmFsdWVbal0ubmFtZTtcXG4gICAgICAgICAgICAgICAgfSk7XFxuICAgICAgICAgICAgaWYgKCEoZiAmJiBmWzFdID09IC0xKSkge1xcbiAgICAgICAgICAgICAgICAvLyBUaGlzIGZpbHRlciBpcyB1bmtub3duIG9yIGdpdmVuIGFuIGluY29ycmVjdCBudW1iZXIgb2YgYXJndW1lbnRzXFxuICAgICAgICAgICAgICAgIGlmICghZiB8fCBmWzFdICE9PSB2YWx1ZS52YWx1ZVtpXS52YWx1ZVtqXS5hcmdzLmxlbmd0aCkgcmV0dXJuIGZhbHNlO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgIH1cXG4gICAgfVxcbiAgICByZXR1cm4gdHJ1ZTtcXG59XFxuXFxuZnVuY3Rpb24gdmFsaWRhdGVLZXl3b3JkKHZhbHVlLCBzZWxlY3Rvcikge1xcbiAgICBpZiAodHlwZW9mIHJlZi5zZWxlY3RvcihzZWxlY3RvcikudHlwZSA9PT0gJ29iamVjdCcpIHtcXG4gICAgICAgIHJldHVybiByZWYuc2VsZWN0b3Ioc2VsZWN0b3IpLnR5cGVcXG4gICAgICAgICAgICAuaW5kZXhPZih2YWx1ZS52YWx1ZVswXS52YWx1ZSkgIT09IC0xO1xcbiAgICB9IGVsc2Uge1xcbiAgICAgICAgLy8gYWxsb3cgdW5xdW90ZWQga2V5d29yZHMgYXMgc3RyaW5nc1xcbiAgICAgICAgcmV0dXJuIHJlZi5zZWxlY3RvcihzZWxlY3RvcikudHlwZSA9PT0gJ3N0cmluZyc7XFxuICAgIH1cXG59XFxuXFxucmVmLnZhbGlkVmFsdWUgPSBmdW5jdGlvbihlbnYsIHNlbGVjdG9yLCB2YWx1ZSkge1xcbiAgICB2YXIgaSwgajtcXG4gICAgLy8gVE9ETzogaGFuZGxlIGluIHJldXNhYmxlIHdheVxcbiAgICBpZiAoIXJlZi5zZWxlY3RvcihzZWxlY3RvcikpIHtcXG4gICAgICAgIHJldHVybiBmYWxzZTtcXG4gICAgfSBlbHNlIGlmICh2YWx1ZS52YWx1ZVswXS5pcyA9PSAna2V5d29yZCcpIHtcXG4gICAgICAgIHJldHVybiB2YWxpZGF0ZUtleXdvcmQodmFsdWUsIHNlbGVjdG9yKTtcXG4gICAgfSBlbHNlIGlmICh2YWx1ZS52YWx1ZVswXS5pcyA9PSAndW5kZWZpbmVkJykge1xcbiAgICAgICAgLy8gY2F1Z2h0IGVhcmxpZXIgaW4gdGhlIGNoYWluIC0gaWdub3JlIGhlcmUgc28gdGhhdFxcbiAgICAgICAgLy8gZXJyb3IgaXMgbm90IG92ZXJyaWRkZW5cXG4gICAgICAgIHJldHVybiB0cnVlO1xcbiAgICB9IGVsc2UgaWYgKHJlZi5zZWxlY3RvcihzZWxlY3RvcikudHlwZSA9PSAnbnVtYmVycycpIHtcXG4gICAgICAgIGZvciAoaSBpbiB2YWx1ZS52YWx1ZSkge1xcbiAgICAgICAgICAgIGlmICh2YWx1ZS52YWx1ZVtpXS5pcyAhPT0gJ2Zsb2F0Jykge1xcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgfVxcbiAgICAgICAgcmV0dXJuIHRydWU7XFxuICAgIH0gZWxzZSBpZiAocmVmLnNlbGVjdG9yKHNlbGVjdG9yKS50eXBlID09ICd0YWdzJykge1xcbiAgICAgICAgaWYgKCF2YWx1ZS52YWx1ZSkgcmV0dXJuIGZhbHNlO1xcbiAgICAgICAgaWYgKCF2YWx1ZS52YWx1ZVswXS52YWx1ZSkge1xcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZS52YWx1ZVswXS5pcyA9PT0gJ3RhZyc7XFxuICAgICAgICB9XFxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgdmFsdWUudmFsdWVbMF0udmFsdWUubGVuZ3RoOyBpKyspIHtcXG4gICAgICAgICAgICBpZiAodmFsdWUudmFsdWVbMF0udmFsdWVbaV0uaXMgIT09ICd0YWcnKSByZXR1cm4gZmFsc2U7XFxuICAgICAgICB9XFxuICAgICAgICByZXR1cm4gdHJ1ZTtcXG4gICAgfSBlbHNlIGlmIChyZWYuc2VsZWN0b3Ioc2VsZWN0b3IpLnR5cGUgPT0gJ2Z1bmN0aW9ucycpIHtcXG4gICAgICAgIC8vIEZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eSwgeW91IGNhbiBzcGVjaWZ5IGEgc3RyaW5nIGZvciBgZnVuY3Rpb25zYC1jb21wYXRpYmxlXFxuICAgICAgICAvLyB2YWx1ZXMsIHRob3VnaCB0aGV5IHdpbGwgbm90IGJlIHZhbGlkYXRlZC5cXG4gICAgICAgIHJldHVybiB2YWxpZGF0ZUZ1bmN0aW9ucyh2YWx1ZSwgc2VsZWN0b3IpO1xcbiAgICB9IGVsc2UgaWYgKHJlZi5zZWxlY3RvcihzZWxlY3RvcikudHlwZSA9PT0gJ3Vuc2lnbmVkJykge1xcbiAgICAgICAgaWYgKHZhbHVlLnZhbHVlWzBdLmlzID09PSAnZmxvYXQnKSB7XFxuICAgICAgICAgICAgdmFsdWUudmFsdWVbMF0ucm91bmQoKTtcXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcXG4gICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xcbiAgICAgICAgfVxcbiAgICB9IGVsc2UgaWYgKChyZWYuc2VsZWN0b3Ioc2VsZWN0b3IpLmV4cHJlc3Npb24pKSB7XFxuICAgICAgICByZXR1cm4gdHJ1ZTtcXG4gICAgfSBlbHNlIHtcXG4gICAgICAgIGlmIChyZWYuc2VsZWN0b3Ioc2VsZWN0b3IpLnZhbGlkYXRlKSB7XFxuICAgICAgICAgICAgdmFyIHZhbGlkID0gZmFsc2U7XFxuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IHZhbHVlLnZhbHVlLmxlbmd0aDsgaSsrKSB7XFxuICAgICAgICAgICAgICAgIGlmIChyZWYuc2VsZWN0b3Ioc2VsZWN0b3IpLnR5cGUgPT0gdmFsdWUudmFsdWVbaV0uaXMgJiZcXG4gICAgICAgICAgICAgICAgICAgIHJlZlxcbiAgICAgICAgICAgICAgICAgICAgICAgIC5fdmFsaWRhdGVWYWx1ZVxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBbcmVmLnNlbGVjdG9yKHNlbGVjdG9yKS52YWxpZGF0ZV1cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKGVudiwgdmFsdWUudmFsdWVbaV0udmFsdWUpKSB7XFxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcXG4gICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgICByZXR1cm4gdmFsaWQ7XFxuICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICAgIHJldHVybiByZWYuc2VsZWN0b3Ioc2VsZWN0b3IpLnR5cGUgPT0gdmFsdWUudmFsdWVbMF0uaXM7XFxuICAgICAgICB9XFxuICAgIH1cXG59O1xcblxcbnRyZWUuUmVmZXJlbmNlID0gcmVmO1xcblxcbn0pKF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL3RyZWUgKi8gMCkpO1xcblxcbi8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqL30uY2FsbChleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLy4uLy4uLy4uLy4uL3dlYnBhY2svYnVpbGRpbi9nbG9iYWwuanMgKi8gMykpKS8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pTVRBMExtcHpJaXdpYzI5MWNtTmxjeUk2V3lKM1pXSndZV05yT2k4dkx5NHZmaTlqWVhKMGJ5OXNhV0l2WTJGeWRHOHZkSEpsWlM5eVpXWmxjbVZ1WTJVdWFuTS9OVEJsTVNKZExDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SXZMeUJEWVhKMGJ5QndkV3hzY3lCcGJpQmhJSEpsWm1WeVpXNWpaU0JtY205dElIUm9aU0JnYldGd2JtbHJMWEpsWm1WeVpXNWpaV0JjYmk4dklHMXZaSFZzWlM0Z1ZHaHBjeUJtYVd4bElHSjFhV3hrY3lCcGJtUmxlR1Z6SUdaeWIyMGdkR2hoZENCbWFXeGxJR1p2Y2lCcGRITWdkbUZ5YVc5MWMxeHVMeThnYjNCMGFXOXVjeXdnWVc1a0lIQnliM1pwWkdWeklIWmhiR2xrWVhScGIyNGdiV1YwYUc5a2N5Qm1iM0lnY0hKdmNHVnlkSGs2SUhaaGJIVmxYRzR2THlCamIyMWlhVzVoZEdsdmJuTXVYRzRvWm5WdVkzUnBiMjRvZEhKbFpTa2dlMXh1WEc1MllYSWdYeUE5SUdkc2IySmhiQzVmSUh4OElISmxjWFZwY21Vb0ozVnVaR1Z5YzJOdmNtVW5LU3hjYmlBZ0lDQnlaV1lnUFNCN2ZUdGNibHh1Y21WbUxuTmxkRVJoZEdFZ1BTQm1kVzVqZEdsdmJpaGtZWFJoS1NCN1hHNGdJQ0FnY21WbUxtUmhkR0VnUFNCa1lYUmhPMXh1SUNBZ0lISmxaaTV6Wld4bFkzUnZjbDlqWVdOb1pTQTlJR2RsYm1WeVlYUmxVMlZzWldOMGIzSkRZV05vWlNoa1lYUmhLVHRjYmlBZ0lDQnlaV1l1YldGd2JtbHJSblZ1WTNScGIyNXpJRDBnWjJWdVpYSmhkR1ZOWVhCdWFXdEdkVzVqZEdsdmJuTW9aR0YwWVNrN1hHNWNiaUFnSUNCeVpXWXViV0Z3Ym1sclJuVnVZM1JwYjI1ekxtMWhkSEpwZUNBOUlGczJYVHRjYmlBZ0lDQnlaV1l1YldGd2JtbHJSblZ1WTNScGIyNXpMblJ5WVc1emJHRjBaU0E5SUZzeExDQXlYVHRjYmlBZ0lDQnlaV1l1YldGd2JtbHJSblZ1WTNScGIyNXpMbk5qWVd4bElEMGdXekVzSURKZE8xeHVJQ0FnSUhKbFppNXRZWEJ1YVd0R2RXNWpkR2x2Ym5NdWNtOTBZWFJsSUQwZ1d6RXNJRE5kTzF4dUlDQWdJSEpsWmk1dFlYQnVhV3RHZFc1amRHbHZibk11YzJ0bGQxZ2dQU0JiTVYwN1hHNGdJQ0FnY21WbUxtMWhjRzVwYTBaMWJtTjBhVzl1Y3k1emEyVjNXU0E5SUZzeFhUdGNibHh1SUNBZ0lISmxaaTV5WlhGMWFYSmxaRjlqWVdOb1pTQTlJR2RsYm1WeVlYUmxVbVZ4ZFdseVpXUlFjbTl3WlhKMGFXVnpLR1JoZEdFcE8xeHVmVHRjYmx4dWNtVm1Mbk5sZEZabGNuTnBiMjRnUFNCbWRXNWpkR2x2YmloMlpYSnphVzl1S1NCN1hHNGdJQ0FnZG1GeUlHMWhjRzVwYTE5eVpXWmxjbVZ1WTJVZ1BTQnlaWEYxYVhKbEtDZHRZWEJ1YVdzdGNtVm1aWEpsYm1ObEp5azdYRzRnSUNBZ2FXWWdLRzFoY0c1cGExOXlaV1psY21WdVkyVXVkbVZ5YzJsdmJpNW9ZWE5QZDI1UWNtOXdaWEowZVNoMlpYSnphVzl1S1NrZ2UxeHVJQ0FnSUNBZ0lDQnlaV1l1YzJWMFJHRjBZU2h0WVhCdWFXdGZjbVZtWlhKbGJtTmxMblpsY25OcGIyNWJkbVZ5YzJsdmJsMHBPMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkSEoxWlR0Y2JpQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdabUZzYzJVN1hHNGdJQ0FnZlZ4dWZUdGNibHh1Y21WbUxuTmxiR1ZqZEc5eVJHRjBZU0E5SUdaMWJtTjBhVzl1S0hObGJHVmpkRzl5TENCcEtTQjdYRzRnSUNBZ2FXWWdLSEpsWmk1elpXeGxZM1J2Y2w5allXTm9aVnR6Wld4bFkzUnZjbDBwSUhKbGRIVnliaUJ5WldZdWMyVnNaV04wYjNKZlkyRmphR1ZiYzJWc1pXTjBiM0pkVzJsZE8xeHVmVHRjYmx4dWNtVm1MblpoYkdsa1UyVnNaV04wYjNJZ1BTQm1kVzVqZEdsdmJpaHpaV3hsWTNSdmNpa2dleUJ5WlhSMWNtNGdJU0Z5WldZdWMyVnNaV04wYjNKZlkyRmphR1ZiYzJWc1pXTjBiM0pkT3lCOU8xeHVjbVZtTG5ObGJHVmpkRzl5VG1GdFpTQTlJR1oxYm1OMGFXOXVLSE5sYkdWamRHOXlLU0I3SUhKbGRIVnliaUJ5WldZdWMyVnNaV04wYjNKRVlYUmhLSE5sYkdWamRHOXlMQ0F5S1RzZ2ZUdGNibkpsWmk1elpXeGxZM1J2Y2lBOUlHWjFibU4wYVc5dUtITmxiR1ZqZEc5eUtTQjdJSEpsZEhWeWJpQnlaV1l1YzJWc1pXTjBiM0pFWVhSaEtITmxiR1ZqZEc5eUxDQXdLVHNnZlR0Y2JuSmxaaTV6ZVcxaWIyeHBlbVZ5SUQwZ1puVnVZM1JwYjI0b2MyVnNaV04wYjNJcElIc2djbVYwZFhKdUlISmxaaTV6Wld4bFkzUnZja1JoZEdFb2MyVnNaV04wYjNJc0lERXBPeUI5TzF4dVhHNW1kVzVqZEdsdmJpQm5aVzVsY21GMFpWTmxiR1ZqZEc5eVEyRmphR1VvWkdGMFlTa2dlMXh1SUNBZ0lIWmhjaUJwYm1SbGVDQTlJSHQ5TzF4dUlDQWdJR1p2Y2lBb2RtRnlJR2tnYVc0Z1pHRjBZUzV6ZVcxaWIyeHBlbVZ5Y3lrZ2UxeHVJQ0FnSUNBZ0lDQm1iM0lnS0haaGNpQnFJR2x1SUdSaGRHRXVjM2x0WW05c2FYcGxjbk5iYVYwcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaGtZWFJoTG5ONWJXSnZiR2w2WlhKelcybGRXMnBkTG1oaGMwOTNibEJ5YjNCbGNuUjVLQ2RqYzNNbktTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2x1WkdWNFcyUmhkR0V1YzNsdFltOXNhWHBsY25OYmFWMWJhbDB1WTNOelhTQTlJRnRrWVhSaExuTjViV0p2YkdsNlpYSnpXMmxkVzJwZExDQnBMQ0JxWFR0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDFjYmlBZ0lDQnlaWFIxY200Z2FXNWtaWGc3WEc1OVhHNWNibVoxYm1OMGFXOXVJR2RsYm1WeVlYUmxUV0Z3Ym1sclJuVnVZM1JwYjI1ektHUmhkR0VwSUh0Y2JpQWdJQ0IyWVhJZ1puVnVZM1JwYjI1eklEMGdlMzA3WEc0Z0lDQWdabTl5SUNoMllYSWdhU0JwYmlCa1lYUmhMbk41YldKdmJHbDZaWEp6S1NCN1hHNGdJQ0FnSUNBZ0lHWnZjaUFvZG1GeUlHb2dhVzRnWkdGMFlTNXplVzFpYjJ4cGVtVnljMXRwWFNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHUmhkR0V1YzNsdFltOXNhWHBsY25OYmFWMWJhbDB1ZEhsd1pTQTlQVDBnSjJaMWJtTjBhVzl1Y3ljcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm1iM0lnS0haaGNpQnJJRDBnTURzZ2F5QThJR1JoZEdFdWMzbHRZbTlzYVhwbGNuTmJhVjFiYWwwdVpuVnVZM1JwYjI1ekxteGxibWQwYURzZ2F5c3JLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJtYmlBOUlHUmhkR0V1YzNsdFltOXNhWHBsY25OYmFWMWJhbDB1Wm5WdVkzUnBiMjV6VzJ0ZE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JtZFc1amRHbHZibk5iWm01Yk1GMWRJRDBnWm01Yk1WMDdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVJQ0FnSUhKbGRIVnliaUJtZFc1amRHbHZibk03WEc1OVhHNWNibVoxYm1OMGFXOXVJR2RsYm1WeVlYUmxVbVZ4ZFdseVpXUlFjbTl3WlhKMGFXVnpLR1JoZEdFcElIdGNiaUFnSUNCMllYSWdZMkZqYUdVZ1BTQjdmVHRjYmlBZ0lDQm1iM0lnS0haaGNpQnplVzFpYjJ4cGVtVnlYMjVoYldVZ2FXNGdaR0YwWVM1emVXMWliMnhwZW1WeWN5a2dlMXh1SUNBZ0lDQWdJQ0JqWVdOb1pWdHplVzFpYjJ4cGVtVnlYMjVoYldWZElEMGdXMTA3WEc0Z0lDQWdJQ0FnSUdadmNpQW9kbUZ5SUdvZ2FXNGdaR0YwWVM1emVXMWliMnhwZW1WeWMxdHplVzFpYjJ4cGVtVnlYMjVoYldWZEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9aR0YwWVM1emVXMWliMnhwZW1WeWMxdHplVzFpYjJ4cGVtVnlYMjVoYldWZFcycGRMbkpsY1hWcGNtVmtLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTJGamFHVmJjM2x0WW05c2FYcGxjbDl1WVcxbFhTNXdkWE5vS0dSaGRHRXVjM2x0WW05c2FYcGxjbk5iYzNsdFltOXNhWHBsY2w5dVlXMWxYVnRxWFM1amMzTXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVJQ0FnSUhKbGRIVnliaUJqWVdOb1pUdGNibjFjYmx4dWNtVm1MbkpsY1hWcGNtVmtVSEp2Y0dWeWRHbGxjeUE5SUdaMWJtTjBhVzl1S0hONWJXSnZiR2w2WlhKZmJtRnRaU3dnY25Wc1pYTXBJSHRjYmlBZ0lDQjJZWElnY21WeElEMGdjbVZtTG5KbGNYVnBjbVZrWDJOaFkyaGxXM041YldKdmJHbDZaWEpmYm1GdFpWMDdYRzRnSUNBZ1ptOXlJQ2gyWVhJZ2FTQnBiaUJ5WlhFcElIdGNiaUFnSUNBZ0lDQWdhV1lnS0NFb2NtVnhXMmxkSUdsdUlISjFiR1Z6S1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJQ2RRY205d1pYSjBlU0FuSUNzZ2NtVnhXMmxkSUNzZ0p5QnlaWEYxYVhKbFpDQm1iM0lnWkdWbWFXNXBibWNnSnlBclhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MzbHRZbTlzYVhwbGNsOXVZVzFsSUNzZ0p5QnpkSGxzWlhNdUp6dGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lIMWNibjA3WEc1Y2JpOHZJRlJQUkU4NklHWnBibWx6YUNCcGJYQnNaVzFsYm5SaGRHbHZiaUF0SUhSb2FYTWdhWE1nWkdWaFpDQmpiMlJsWEc1eVpXWXVYM1poYkdsa1lYUmxWbUZzZFdVZ1BTQjdYRzRnSUNBZ0oyWnZiblFuT2lCbWRXNWpkR2x2YmlobGJuWXNJSFpoYkhWbEtTQjdYRzRnSUNBZ0lDQWdJR2xtSUNobGJuWXVkbUZzYVdSaGRHbHZibDlrWVhSaElDWW1JR1Z1ZGk1MllXeHBaR0YwYVc5dVgyUmhkR0V1Wm05dWRITXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCbGJuWXVkbUZzYVdSaGRHbHZibDlrWVhSaExtWnZiblJ6TG1sdVpHVjRUMllvZG1Gc2RXVXBJQ0U5SUMweE8xeHVJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSFJ5ZFdVN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOVhHNTlPMXh1WEc1eVpXWXVhWE5HYjI1MElEMGdablZ1WTNScGIyNG9jMlZzWldOMGIzSXBJSHRjYmlBZ0lDQnlaWFIxY200Z2NtVm1Mbk5sYkdWamRHOXlLSE5sYkdWamRHOXlLUzUyWVd4cFpHRjBaU0E5UFNBblptOXVkQ2M3WEc1OU8xeHVYRzR2THlCb2RIUndjem92TDJkcGMzUXVaMmwwYUhWaUxtTnZiUzg1T0RJNU1qZGNibkpsWmk1bFpHbDBSR2x6ZEdGdVkyVWdQU0JtZFc1amRHbHZiaWhoTENCaUtYdGNiaUFnSUNCcFppQW9ZUzVzWlc1bmRHZ2dQVDA5SURBcElISmxkSFZ5YmlCaUxteGxibWQwYUR0Y2JpQWdJQ0JwWmlBb1lpNXNaVzVuZEdnZ1BUMDlJREFwSUhKbGRIVnliaUJoTG14bGJtZDBhRHRjYmlBZ0lDQjJZWElnYldGMGNtbDRJRDBnVzEwN1hHNGdJQ0FnWm05eUlDaDJZWElnYVNBOUlEQTdJR2tnUEQwZ1lpNXNaVzVuZEdnN0lHa3JLeWtnZXlCdFlYUnlhWGhiYVYwZ1BTQmJhVjA3SUgxY2JpQWdJQ0JtYjNJZ0tIWmhjaUJxSUQwZ01Ec2dhaUE4UFNCaExteGxibWQwYURzZ2Fpc3JLU0I3SUcxaGRISnBlRnN3WFZ0cVhTQTlJR283SUgxY2JpQWdJQ0JtYjNJZ0tHa2dQU0F4T3lCcElEdzlJR0l1YkdWdVozUm9PeUJwS3lzcElIdGNiaUFnSUNBZ0lDQWdabTl5SUNocUlEMGdNVHNnYWlBOFBTQmhMbXhsYm1kMGFEc2dhaXNyS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1lpNWphR0Z5UVhRb2FTMHhLU0E5UFNCaExtTm9ZWEpCZENocUxURXBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYldGMGNtbDRXMmxkVzJwZElEMGdiV0YwY21sNFcya3RNVjFiYWkweFhUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYldGMGNtbDRXMmxkVzJwZElEMGdUV0YwYUM1dGFXNG9iV0YwY21sNFcya3RNVjFiYWkweFhTQXJJREVzSUM4dklITjFZbk4wYVhSMWRHbHZibHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCTllYUm9MbTFwYmlodFlYUnlhWGhiYVYxYmFpMHhYU0FySURFc0lDOHZJR2x1YzJWeWRHbHZibHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdFlYUnlhWGhiYVMweFhWdHFYU0FySURFcEtUc2dMeThnWkdWc1pYUnBiMjVjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lIMWNiaUFnSUNCeVpYUjFjbTRnYldGMGNtbDRXMkl1YkdWdVozUm9YVnRoTG14bGJtZDBhRjA3WEc1OU8xeHVYRzVtZFc1amRHbHZiaUIyWVd4cFpHRjBaVVoxYm1OMGFXOXVjeWgyWVd4MVpTd2djMlZzWldOMGIzSXBJSHRjYmlBZ0lDQnBaaUFvZG1Gc2RXVXVkbUZzZFdWYk1GMHVhWE1nUFQwOUlDZHpkSEpwYm1jbktTQnlaWFIxY200Z2RISjFaVHRjYmlBZ0lDQm1iM0lnS0haaGNpQnBJR2x1SUhaaGJIVmxMblpoYkhWbEtTQjdYRzRnSUNBZ0lDQWdJR1p2Y2lBb2RtRnlJR29nYVc0Z2RtRnNkV1V1ZG1Gc2RXVmJhVjB1ZG1Gc2RXVXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2gyWVd4MVpTNTJZV3gxWlZ0cFhTNTJZV3gxWlZ0cVhTNXBjeUFoUFQwZ0oyTmhiR3duS1NCeVpYUjFjbTRnWm1Gc2MyVTdYRzRnSUNBZ0lDQWdJQ0FnSUNCMllYSWdaaUE5SUY4dVptbHVaQ2h5WldaY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdWMyVnNaV04wYjNJb2MyVnNaV04wYjNJcExtWjFibU4wYVc5dWN5d2dablZ1WTNScGIyNG9lQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2VGc3dYU0E5UFNCMllXeDFaUzUyWVd4MVpWdHBYUzUyWVd4MVpWdHFYUzV1WVcxbE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMHBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLQ0VvWmlBbUppQm1XekZkSUQwOUlDMHhLU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4dklGUm9hWE1nWm1sc2RHVnlJR2x6SUhWdWEyNXZkMjRnYjNJZ1oybDJaVzRnWVc0Z2FXNWpiM0p5WldOMElHNTFiV0psY2lCdlppQmhjbWQxYldWdWRITmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvSVdZZ2ZId2dabHN4WFNBaFBUMGdkbUZzZFdVdWRtRnNkV1ZiYVYwdWRtRnNkV1ZiYWwwdVlYSm5jeTVzWlc1bmRHZ3BJSEpsZEhWeWJpQm1ZV3h6WlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDFjYmlBZ0lDQnlaWFIxY200Z2RISjFaVHRjYm4xY2JseHVablZ1WTNScGIyNGdkbUZzYVdSaGRHVkxaWGwzYjNKa0tIWmhiSFZsTENCelpXeGxZM1J2Y2lrZ2UxeHVJQ0FnSUdsbUlDaDBlWEJsYjJZZ2NtVm1Mbk5sYkdWamRHOXlLSE5sYkdWamRHOXlLUzUwZVhCbElEMDlQU0FuYjJKcVpXTjBKeWtnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnY21WbUxuTmxiR1ZqZEc5eUtITmxiR1ZqZEc5eUtTNTBlWEJsWEc0Z0lDQWdJQ0FnSUNBZ0lDQXVhVzVrWlhoUFppaDJZV3gxWlM1MllXeDFaVnN3WFM1MllXeDFaU2tnSVQwOUlDMHhPMXh1SUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDOHZJR0ZzYkc5M0lIVnVjWFZ2ZEdWa0lHdGxlWGR2Y21SeklHRnpJSE4wY21sdVozTmNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlISmxaaTV6Wld4bFkzUnZjaWh6Wld4bFkzUnZjaWt1ZEhsd1pTQTlQVDBnSjNOMGNtbHVaeWM3WEc0Z0lDQWdmVnh1ZlZ4dVhHNXlaV1l1ZG1Gc2FXUldZV3gxWlNBOUlHWjFibU4wYVc5dUtHVnVkaXdnYzJWc1pXTjBiM0lzSUhaaGJIVmxLU0I3WEc0Z0lDQWdkbUZ5SUdrc0lHbzdYRzRnSUNBZ0x5OGdWRTlFVHpvZ2FHRnVaR3hsSUdsdUlISmxkWE5oWW14bElIZGhlVnh1SUNBZ0lHbG1JQ2doY21WbUxuTmxiR1ZqZEc5eUtITmxiR1ZqZEc5eUtTa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdabUZzYzJVN1hHNGdJQ0FnZlNCbGJITmxJR2xtSUNoMllXeDFaUzUyWVd4MVpWc3dYUzVwY3lBOVBTQW5hMlY1ZDI5eVpDY3BJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFpoYkdsa1lYUmxTMlY1ZDI5eVpDaDJZV3gxWlN3Z2MyVnNaV04wYjNJcE8xeHVJQ0FnSUgwZ1pXeHpaU0JwWmlBb2RtRnNkV1V1ZG1Gc2RXVmJNRjB1YVhNZ1BUMGdKM1Z1WkdWbWFXNWxaQ2NwSUh0Y2JpQWdJQ0FnSUNBZ0x5OGdZMkYxWjJoMElHVmhjbXhwWlhJZ2FXNGdkR2hsSUdOb1lXbHVJQzBnYVdkdWIzSmxJR2hsY21VZ2MyOGdkR2hoZEZ4dUlDQWdJQ0FnSUNBdkx5Qmxjbkp2Y2lCcGN5QnViM1FnYjNabGNuSnBaR1JsYmx4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEhKMVpUdGNiaUFnSUNCOUlHVnNjMlVnYVdZZ0tISmxaaTV6Wld4bFkzUnZjaWh6Wld4bFkzUnZjaWt1ZEhsd1pTQTlQU0FuYm5WdFltVnljeWNwSUh0Y2JpQWdJQ0FnSUNBZ1ptOXlJQ2hwSUdsdUlIWmhiSFZsTG5aaGJIVmxLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvZG1Gc2RXVXVkbUZzZFdWYmFWMHVhWE1nSVQwOUlDZG1iRzloZENjcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1ptRnNjMlU3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJ5ZFdVN1hHNGdJQ0FnZlNCbGJITmxJR2xtSUNoeVpXWXVjMlZzWldOMGIzSW9jMlZzWldOMGIzSXBMblI1Y0dVZ1BUMGdKM1JoWjNNbktTQjdYRzRnSUNBZ0lDQWdJR2xtSUNnaGRtRnNkV1V1ZG1Gc2RXVXBJSEpsZEhWeWJpQm1ZV3h6WlR0Y2JpQWdJQ0FnSUNBZ2FXWWdLQ0YyWVd4MVpTNTJZV3gxWlZzd1hTNTJZV3gxWlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSFpoYkhWbExuWmhiSFZsV3pCZExtbHpJRDA5UFNBbmRHRm5KenRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCbWIzSWdLR2tnUFNBd095QnBJRHdnZG1Gc2RXVXVkbUZzZFdWYk1GMHVkbUZzZFdVdWJHVnVaM1JvT3lCcEt5c3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2gyWVd4MVpTNTJZV3gxWlZzd1hTNTJZV3gxWlZ0cFhTNXBjeUFoUFQwZ0ozUmhaeWNwSUhKbGRIVnliaUJtWVd4elpUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkSEoxWlR0Y2JpQWdJQ0I5SUdWc2MyVWdhV1lnS0hKbFppNXpaV3hsWTNSdmNpaHpaV3hsWTNSdmNpa3VkSGx3WlNBOVBTQW5ablZ1WTNScGIyNXpKeWtnZTF4dUlDQWdJQ0FnSUNBdkx5QkdiM0lnWW1GamEzZGhjbVJ6SUdOdmJYQmhkR2xpYVd4cGRIa3NJSGx2ZFNCallXNGdjM0JsWTJsbWVTQmhJSE4wY21sdVp5Qm1iM0lnWUdaMWJtTjBhVzl1YzJBdFkyOXRjR0YwYVdKc1pWeHVJQ0FnSUNBZ0lDQXZMeUIyWVd4MVpYTXNJSFJvYjNWbmFDQjBhR1Y1SUhkcGJHd2dibTkwSUdKbElIWmhiR2xrWVhSbFpDNWNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIWmhiR2xrWVhSbFJuVnVZM1JwYjI1ektIWmhiSFZsTENCelpXeGxZM1J2Y2lrN1hHNGdJQ0FnZlNCbGJITmxJR2xtSUNoeVpXWXVjMlZzWldOMGIzSW9jMlZzWldOMGIzSXBMblI1Y0dVZ1BUMDlJQ2QxYm5OcFoyNWxaQ2NwSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLSFpoYkhWbExuWmhiSFZsV3pCZExtbHpJRDA5UFNBblpteHZZWFFuS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IyWVd4MVpTNTJZV3gxWlZzd1hTNXliM1Z1WkNncE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSFJ5ZFdVN1hHNGdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdabUZzYzJVN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOUlHVnNjMlVnYVdZZ0tDaHlaV1l1YzJWc1pXTjBiM0lvYzJWc1pXTjBiM0lwTG1WNGNISmxjM05wYjI0cEtTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBjblZsTzF4dUlDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJR2xtSUNoeVpXWXVjMlZzWldOMGIzSW9jMlZzWldOMGIzSXBMblpoYkdsa1lYUmxLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjJZWElnZG1Gc2FXUWdQU0JtWVd4elpUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdadmNpQW9hU0E5SURBN0lHa2dQQ0IyWVd4MVpTNTJZV3gxWlM1c1pXNW5kR2c3SUdrckt5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoeVpXWXVjMlZzWldOMGIzSW9jMlZzWldOMGIzSXBMblI1Y0dVZ1BUMGdkbUZzZFdVdWRtRnNkV1ZiYVYwdWFYTWdKaVpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVm1YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXVYM1poYkdsa1lYUmxWbUZzZFdWY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmJjbVZtTG5ObGJHVmpkRzl5S0hObGJHVmpkRzl5S1M1MllXeHBaR0YwWlYxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQW9aVzUyTENCMllXeDFaUzUyWVd4MVpWdHBYUzUyWVd4MVpTa3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSeWRXVTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSFpoYkdsa08xeHVJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSEpsWmk1elpXeGxZM1J2Y2loelpXeGxZM1J2Y2lrdWRIbHdaU0E5UFNCMllXeDFaUzUyWVd4MVpWc3dYUzVwY3p0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JuMDdYRzVjYm5SeVpXVXVVbVZtWlhKbGJtTmxJRDBnY21WbU8xeHVYRzU5S1NoeVpYRjFhWEpsS0NjdUxpOTBjbVZsSnlrcE8xeHVYRzVjYmx4dUx5OHZMeTh2THk4dkx5OHZMeTh2THk4dlhHNHZMeUJYUlVKUVFVTkxJRVpQVDFSRlVseHVMeThnTGk5K0wyTmhjblJ2TDJ4cFlpOWpZWEowYnk5MGNtVmxMM0psWm1WeVpXNWpaUzVxYzF4dUx5OGdiVzlrZFd4bElHbGtJRDBnTVRBMFhHNHZMeUJ0YjJSMWJHVWdZMmgxYm10eklEMGdNQ0pkTENKdFlYQndhVzVuY3lJNklrRkJRVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0Qklpd2ljMjkxY21ObFVtOXZkQ0k2SWlKOVwiKTtcblxuLyoqKi8gfSksXG4vKiAxMDUgKi9cbi8qIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKiBhbGwgZXhwb3J0cyB1c2VkICovXG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vfi9jYXJ0by9saWIvY2FydG8vdHJlZS9ydWxlLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5ldmFsKFwiKGZ1bmN0aW9uKHRyZWUpIHtcXG4vLyBhIHJ1bGUgaXMgYSBzaW5nbGUgcHJvcGVydHkgYW5kIHZhbHVlIGNvbWJpbmF0aW9uLCBvciB2YXJpYWJsZVxcbi8vIG5hbWUgYW5kIHZhbHVlIGNvbWJpbmF0aW9uLCBsaWtlXFxuLy8gcG9seWdvbi1vcGFjaXR5OiAxLjA7IG9yIEBvcGFjaXR5OiAxLjA7XFxudHJlZS5SdWxlID0gZnVuY3Rpb24gUnVsZShuYW1lLCB2YWx1ZSwgaW5kZXgsIGZpbGVuYW1lKSB7XFxuICAgIHZhciBwYXJ0cyA9IG5hbWUuc3BsaXQoJy8nKTtcXG4gICAgdGhpcy5uYW1lID0gcGFydHMucG9wKCk7XFxuICAgIHRoaXMuaW5zdGFuY2UgPSBwYXJ0cy5sZW5ndGggPyBwYXJ0c1swXSA6ICdfX2RlZmF1bHRfXyc7XFxuICAgIHRoaXMudmFsdWUgPSAodmFsdWUgaW5zdGFuY2VvZiB0cmVlLlZhbHVlKSA/XFxuICAgICAgICB2YWx1ZSA6IG5ldyB0cmVlLlZhbHVlKFt2YWx1ZV0pO1xcbiAgICB0aGlzLmluZGV4ID0gaW5kZXg7XFxuICAgIHRoaXMuc3ltYm9saXplciA9IHRyZWUuUmVmZXJlbmNlLnN5bWJvbGl6ZXIodGhpcy5uYW1lKTtcXG4gICAgdGhpcy5maWxlbmFtZSA9IGZpbGVuYW1lO1xcbiAgICB0aGlzLnZhcmlhYmxlID0gKG5hbWUuY2hhckF0KDApID09PSAnQCcpO1xcbn07XFxuXFxudHJlZS5SdWxlLnByb3RvdHlwZS5pcyA9ICdydWxlJztcXG5cXG50cmVlLlJ1bGUucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24oKSB7XFxuICAgIHZhciBjbG9uZSA9IE9iamVjdC5jcmVhdGUodHJlZS5SdWxlLnByb3RvdHlwZSk7XFxuICAgIGNsb25lLm5hbWUgPSB0aGlzLm5hbWU7XFxuICAgIGNsb25lLnZhbHVlID0gdGhpcy52YWx1ZTtcXG4gICAgY2xvbmUuaW5kZXggPSB0aGlzLmluZGV4O1xcbiAgICBjbG9uZS5pbnN0YW5jZSA9IHRoaXMuaW5zdGFuY2U7XFxuICAgIGNsb25lLnN5bWJvbGl6ZXIgPSB0aGlzLnN5bWJvbGl6ZXI7XFxuICAgIGNsb25lLmZpbGVuYW1lID0gdGhpcy5maWxlbmFtZTtcXG4gICAgY2xvbmUudmFyaWFibGUgPSB0aGlzLnZhcmlhYmxlO1xcbiAgICByZXR1cm4gY2xvbmU7XFxufTtcXG5cXG50cmVlLlJ1bGUucHJvdG90eXBlLnVwZGF0ZUlEID0gZnVuY3Rpb24oKSB7XFxuICAgIHJldHVybiB0aGlzLmlkID0gdGhpcy56b29tICsgJyMnICsgdGhpcy5pbnN0YW5jZSArICcjJyArIHRoaXMubmFtZTtcXG59O1xcblxcbnRyZWUuUnVsZS5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcXG4gICAgcmV0dXJuICdbJyArIHRyZWUuWm9vbS50b1N0cmluZyh0aGlzLnpvb20pICsgJ10gJyArIHRoaXMubmFtZSArICc6ICcgKyB0aGlzLnZhbHVlO1xcbn07XFxuXFxuZnVuY3Rpb24gZ2V0TWVhbihuYW1lKSB7XFxuICAgIHJldHVybiBPYmplY3Qua2V5cyh0cmVlLlJlZmVyZW5jZS5zZWxlY3Rvcl9jYWNoZSkubWFwKGZ1bmN0aW9uKGYpIHtcXG4gICAgICAgIHJldHVybiBbZiwgdHJlZS5SZWZlcmVuY2UuZWRpdERpc3RhbmNlKG5hbWUsIGYpXTtcXG4gICAgfSkuc29ydChmdW5jdGlvbihhLCBiKSB7IHJldHVybiBhWzFdIC0gYlsxXTsgfSk7XFxufVxcblxcbi8vIHNlY29uZCBhcmd1bWVudCwgaWYgdHJ1ZSwgb3V0cHV0cyB0aGUgdmFsdWUgb2YgdGhpc1xcbi8vIHJ1bGUgd2l0aG91dCB0aGUgdXN1YWwgYXR0cmlidXRlPVxcXCJjb250ZW50XFxcIiB3cmFwcGluZy4gUmlnaHRcXG4vLyBub3cgdGhpcyBpcyBqdXN0IGZvciB0aGUgVGV4dFN5bWJvbGl6ZXIsIGJ1dCBhcHBsaWVzIHRvIG90aGVyXFxuLy8gcHJvcGVydGllcyBpbiByZWZlcmVuY2UuanNvbiB3aGljaCBzcGVjaWZ5IHNlcmlhbGl6YXRpb249Y29udGVudFxcbnRyZWUuUnVsZS5wcm90b3R5cGUudG9YTUwgPSBmdW5jdGlvbihlbnYsIGNvbnRlbnQsIHNlcCwgZm9ybWF0KSB7XFxuICAgIGlmICghdHJlZS5SZWZlcmVuY2UudmFsaWRTZWxlY3Rvcih0aGlzLm5hbWUpKSB7XFxuICAgICAgICB2YXIgbWVhbiA9IGdldE1lYW4odGhpcy5uYW1lKTtcXG4gICAgICAgIHZhciBtZWFuX21lc3NhZ2UgPSAnJztcXG4gICAgICAgIGlmIChtZWFuWzBdWzFdIDwgMykge1xcbiAgICAgICAgICAgIG1lYW5fbWVzc2FnZSA9ICcuIERpZCB5b3UgbWVhbiAnICsgbWVhblswXVswXSArICc/JztcXG4gICAgICAgIH1cXG4gICAgICAgIHJldHVybiBlbnYuZXJyb3Ioe1xcbiAgICAgICAgICAgIG1lc3NhZ2U6IFxcXCJVbnJlY29nbml6ZWQgcnVsZTogXFxcIiArIHRoaXMubmFtZSArIG1lYW5fbWVzc2FnZSxcXG4gICAgICAgICAgICBpbmRleDogdGhpcy5pbmRleCxcXG4gICAgICAgICAgICB0eXBlOiAnc3ludGF4JyxcXG4gICAgICAgICAgICBmaWxlbmFtZTogdGhpcy5maWxlbmFtZVxcbiAgICAgICAgfSk7XFxuICAgIH1cXG5cXG4gICAgaWYgKCh0aGlzLnZhbHVlIGluc3RhbmNlb2YgdHJlZS5WYWx1ZSkgJiZcXG4gICAgICAgICF0cmVlLlJlZmVyZW5jZS52YWxpZFZhbHVlKGVudiwgdGhpcy5uYW1lLCB0aGlzLnZhbHVlKSkge1xcbiAgICAgICAgaWYgKCF0cmVlLlJlZmVyZW5jZS5zZWxlY3Rvcih0aGlzLm5hbWUpKSB7XFxuICAgICAgICAgICAgcmV0dXJuIGVudi5lcnJvcih7XFxuICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdVbnJlY29nbml6ZWQgcHJvcGVydHk6ICcgK1xcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5uYW1lLFxcbiAgICAgICAgICAgICAgICBpbmRleDogdGhpcy5pbmRleCxcXG4gICAgICAgICAgICAgICAgdHlwZTogJ3N5bnRheCcsXFxuICAgICAgICAgICAgICAgIGZpbGVuYW1lOiB0aGlzLmZpbGVuYW1lXFxuICAgICAgICAgICAgfSk7XFxuICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICAgIHZhciB0eXBlbmFtZTtcXG4gICAgICAgICAgICBpZiAodHJlZS5SZWZlcmVuY2Uuc2VsZWN0b3IodGhpcy5uYW1lKS52YWxpZGF0ZSkge1xcbiAgICAgICAgICAgICAgICB0eXBlbmFtZSA9IHRyZWUuUmVmZXJlbmNlLnNlbGVjdG9yKHRoaXMubmFtZSkudmFsaWRhdGU7XFxuICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgdHJlZS5SZWZlcmVuY2Uuc2VsZWN0b3IodGhpcy5uYW1lKS50eXBlID09PSAnb2JqZWN0Jykge1xcbiAgICAgICAgICAgICAgICB0eXBlbmFtZSA9ICdrZXl3b3JkIChvcHRpb25zOiAnICsgdHJlZS5SZWZlcmVuY2Uuc2VsZWN0b3IodGhpcy5uYW1lKS50eXBlLmpvaW4oJywgJykgKyAnKSc7XFxuICAgICAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICAgICAgdHlwZW5hbWUgPSB0cmVlLlJlZmVyZW5jZS5zZWxlY3Rvcih0aGlzLm5hbWUpLnR5cGU7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIHJldHVybiBlbnYuZXJyb3Ioe1xcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiAnSW52YWxpZCB2YWx1ZSBmb3IgJyArXFxuICAgICAgICAgICAgICAgICAgICB0aGlzLm5hbWUgK1xcbiAgICAgICAgICAgICAgICAgICAgJywgdGhlIHR5cGUgJyArIHR5cGVuYW1lICtcXG4gICAgICAgICAgICAgICAgICAgICcgaXMgZXhwZWN0ZWQuICcgKyB0aGlzLnZhbHVlICtcXG4gICAgICAgICAgICAgICAgICAgICcgKG9mIHR5cGUgJyArIHRoaXMudmFsdWUudmFsdWVbMF0uaXMgKyAnKSAnICtcXG4gICAgICAgICAgICAgICAgICAgICcgd2FzIGdpdmVuLicsXFxuICAgICAgICAgICAgICAgIGluZGV4OiB0aGlzLmluZGV4LFxcbiAgICAgICAgICAgICAgICB0eXBlOiAnc3ludGF4JyxcXG4gICAgICAgICAgICAgICAgZmlsZW5hbWU6IHRoaXMuZmlsZW5hbWVcXG4gICAgICAgICAgICB9KTtcXG4gICAgICAgIH1cXG4gICAgfVxcblxcbiAgICBpZiAodGhpcy52YXJpYWJsZSkge1xcbiAgICAgICAgcmV0dXJuICcnO1xcbiAgICB9IGVsc2UgaWYgKHRyZWUuUmVmZXJlbmNlLmlzRm9udCh0aGlzLm5hbWUpICYmIHRoaXMudmFsdWUudmFsdWUubGVuZ3RoID4gMSkge1xcbiAgICAgICAgdmFyIGYgPSB0cmVlLl9nZXRGb250U2V0KGVudiwgdGhpcy52YWx1ZS52YWx1ZSk7XFxuICAgICAgICByZXR1cm4gJ2ZvbnRzZXQtbmFtZT1cXFwiJyArIGYubmFtZSArICdcXFwiJztcXG4gICAgfSBlbHNlIGlmIChjb250ZW50KSB7XFxuICAgICAgICByZXR1cm4gdGhpcy52YWx1ZS50b1N0cmluZyhlbnYsIHRoaXMubmFtZSwgc2VwKTtcXG4gICAgfSBlbHNlIHtcXG4gICAgICAgIHJldHVybiB0cmVlLlJlZmVyZW5jZS5zZWxlY3Rvck5hbWUodGhpcy5uYW1lKSArXFxuICAgICAgICAgICAgJz1cXFwiJyArXFxuICAgICAgICAgICAgdGhpcy52YWx1ZS50b1N0cmluZyhlbnYsIHRoaXMubmFtZSkgK1xcbiAgICAgICAgICAgICdcXFwiJztcXG4gICAgfVxcbn07XFxuXFxuLy8gVE9ETzogUnVsZSBldiBjaGFpbiBzaG91bGQgYWRkIGZvbnRzZXRzIHRvIGVudi5mcmFtZXNcXG50cmVlLlJ1bGUucHJvdG90eXBlLmV2ID0gZnVuY3Rpb24oY29udGV4dCkge1xcbiAgICByZXR1cm4gbmV3IHRyZWUuUnVsZSh0aGlzLm5hbWUsXFxuICAgICAgICB0aGlzLnZhbHVlLmV2KGNvbnRleHQpLFxcbiAgICAgICAgdGhpcy5pbmRleCxcXG4gICAgICAgIHRoaXMuZmlsZW5hbWUpO1xcbn07XFxuXFxufSkoX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vdHJlZSAqLyAwKSk7XFxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lNVEExTG1weklpd2ljMjkxY21ObGN5STZXeUozWldKd1lXTnJPaTh2THk0dmZpOWpZWEowYnk5c2FXSXZZMkZ5ZEc4dmRISmxaUzl5ZFd4bExtcHpQelZqWW1VaVhTd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lLR1oxYm1OMGFXOXVLSFJ5WldVcElIdGNiaTh2SUdFZ2NuVnNaU0JwY3lCaElITnBibWRzWlNCd2NtOXdaWEowZVNCaGJtUWdkbUZzZFdVZ1kyOXRZbWx1WVhScGIyNHNJRzl5SUhaaGNtbGhZbXhsWEc0dkx5QnVZVzFsSUdGdVpDQjJZV3gxWlNCamIyMWlhVzVoZEdsdmJpd2diR2xyWlZ4dUx5OGdjRzlzZVdkdmJpMXZjR0ZqYVhSNU9pQXhMakE3SUc5eUlFQnZjR0ZqYVhSNU9pQXhMakE3WEc1MGNtVmxMbEoxYkdVZ1BTQm1kVzVqZEdsdmJpQlNkV3hsS0c1aGJXVXNJSFpoYkhWbExDQnBibVJsZUN3Z1ptbHNaVzVoYldVcElIdGNiaUFnSUNCMllYSWdjR0Z5ZEhNZ1BTQnVZVzFsTG5Od2JHbDBLQ2N2SnlrN1hHNGdJQ0FnZEdocGN5NXVZVzFsSUQwZ2NHRnlkSE11Y0c5d0tDazdYRzRnSUNBZ2RHaHBjeTVwYm5OMFlXNWpaU0E5SUhCaGNuUnpMbXhsYm1kMGFDQS9JSEJoY25Seld6QmRJRG9nSjE5ZlpHVm1ZWFZzZEY5Zkp6dGNiaUFnSUNCMGFHbHpMblpoYkhWbElEMGdLSFpoYkhWbElHbHVjM1JoYm1ObGIyWWdkSEpsWlM1V1lXeDFaU2tnUDF4dUlDQWdJQ0FnSUNCMllXeDFaU0E2SUc1bGR5QjBjbVZsTGxaaGJIVmxLRnQyWVd4MVpWMHBPMXh1SUNBZ0lIUm9hWE11YVc1a1pYZ2dQU0JwYm1SbGVEdGNiaUFnSUNCMGFHbHpMbk41YldKdmJHbDZaWElnUFNCMGNtVmxMbEpsWm1WeVpXNWpaUzV6ZVcxaWIyeHBlbVZ5S0hSb2FYTXVibUZ0WlNrN1hHNGdJQ0FnZEdocGN5NW1hV3hsYm1GdFpTQTlJR1pwYkdWdVlXMWxPMXh1SUNBZ0lIUm9hWE11ZG1GeWFXRmliR1VnUFNBb2JtRnRaUzVqYUdGeVFYUW9NQ2tnUFQwOUlDZEFKeWs3WEc1OU8xeHVYRzUwY21WbExsSjFiR1V1Y0hKdmRHOTBlWEJsTG1seklEMGdKM0oxYkdVbk8xeHVYRzUwY21WbExsSjFiR1V1Y0hKdmRHOTBlWEJsTG1Oc2IyNWxJRDBnWm5WdVkzUnBiMjRvS1NCN1hHNGdJQ0FnZG1GeUlHTnNiMjVsSUQwZ1QySnFaV04wTG1OeVpXRjBaU2gwY21WbExsSjFiR1V1Y0hKdmRHOTBlWEJsS1R0Y2JpQWdJQ0JqYkc5dVpTNXVZVzFsSUQwZ2RHaHBjeTV1WVcxbE8xeHVJQ0FnSUdOc2IyNWxMblpoYkhWbElEMGdkR2hwY3k1MllXeDFaVHRjYmlBZ0lDQmpiRzl1WlM1cGJtUmxlQ0E5SUhSb2FYTXVhVzVrWlhnN1hHNGdJQ0FnWTJ4dmJtVXVhVzV6ZEdGdVkyVWdQU0IwYUdsekxtbHVjM1JoYm1ObE8xeHVJQ0FnSUdOc2IyNWxMbk41YldKdmJHbDZaWElnUFNCMGFHbHpMbk41YldKdmJHbDZaWEk3WEc0Z0lDQWdZMnh2Ym1VdVptbHNaVzVoYldVZ1BTQjBhR2x6TG1acGJHVnVZVzFsTzF4dUlDQWdJR05zYjI1bExuWmhjbWxoWW14bElEMGdkR2hwY3k1MllYSnBZV0pzWlR0Y2JpQWdJQ0J5WlhSMWNtNGdZMnh2Ym1VN1hHNTlPMXh1WEc1MGNtVmxMbEoxYkdVdWNISnZkRzkwZVhCbExuVndaR0YwWlVsRUlEMGdablZ1WTNScGIyNG9LU0I3WEc0Z0lDQWdjbVYwZFhKdUlIUm9hWE11YVdRZ1BTQjBhR2x6TG5wdmIyMGdLeUFuSXljZ0t5QjBhR2x6TG1sdWMzUmhibU5sSUNzZ0p5TW5JQ3NnZEdocGN5NXVZVzFsTzF4dWZUdGNibHh1ZEhKbFpTNVNkV3hsTG5CeWIzUnZkSGx3WlM1MGIxTjBjbWx1WnlBOUlHWjFibU4wYVc5dUtDa2dlMXh1SUNBZ0lISmxkSFZ5YmlBbld5Y2dLeUIwY21WbExscHZiMjB1ZEc5VGRISnBibWNvZEdocGN5NTZiMjl0S1NBcklDZGRJQ2NnS3lCMGFHbHpMbTVoYldVZ0t5QW5PaUFuSUNzZ2RHaHBjeTUyWVd4MVpUdGNibjA3WEc1Y2JtWjFibU4wYVc5dUlHZGxkRTFsWVc0b2JtRnRaU2tnZTF4dUlDQWdJSEpsZEhWeWJpQlBZbXBsWTNRdWEyVjVjeWgwY21WbExsSmxabVZ5Wlc1alpTNXpaV3hsWTNSdmNsOWpZV05vWlNrdWJXRndLR1oxYm1OMGFXOXVLR1lwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUZ0bUxDQjBjbVZsTGxKbFptVnlaVzVqWlM1bFpHbDBSR2x6ZEdGdVkyVW9ibUZ0WlN3Z1ppbGRPMXh1SUNBZ0lIMHBMbk52Y25Rb1puVnVZM1JwYjI0b1lTd2dZaWtnZXlCeVpYUjFjbTRnWVZzeFhTQXRJR0piTVYwN0lIMHBPMXh1ZlZ4dVhHNHZMeUJ6WldOdmJtUWdZWEpuZFcxbGJuUXNJR2xtSUhSeWRXVXNJRzkxZEhCMWRITWdkR2hsSUhaaGJIVmxJRzltSUhSb2FYTmNiaTh2SUhKMWJHVWdkMmwwYUc5MWRDQjBhR1VnZFhOMVlXd2dZWFIwY21saWRYUmxQVndpWTI5dWRHVnVkRndpSUhkeVlYQndhVzVuTGlCU2FXZG9kRnh1THk4Z2JtOTNJSFJvYVhNZ2FYTWdhblZ6ZENCbWIzSWdkR2hsSUZSbGVIUlRlVzFpYjJ4cGVtVnlMQ0JpZFhRZ1lYQndiR2xsY3lCMGJ5QnZkR2hsY2x4dUx5OGdjSEp2Y0dWeWRHbGxjeUJwYmlCeVpXWmxjbVZ1WTJVdWFuTnZiaUIzYUdsamFDQnpjR1ZqYVdaNUlITmxjbWxoYkdsNllYUnBiMjQ5WTI5dWRHVnVkRnh1ZEhKbFpTNVNkV3hsTG5CeWIzUnZkSGx3WlM1MGIxaE5UQ0E5SUdaMWJtTjBhVzl1S0dWdWRpd2dZMjl1ZEdWdWRDd2djMlZ3TENCbWIzSnRZWFFwSUh0Y2JpQWdJQ0JwWmlBb0lYUnlaV1V1VW1WbVpYSmxibU5sTG5aaGJHbGtVMlZzWldOMGIzSW9kR2hwY3k1dVlXMWxLU2tnZTF4dUlDQWdJQ0FnSUNCMllYSWdiV1ZoYmlBOUlHZGxkRTFsWVc0b2RHaHBjeTV1WVcxbEtUdGNiaUFnSUNBZ0lDQWdkbUZ5SUcxbFlXNWZiV1Z6YzJGblpTQTlJQ2NuTzF4dUlDQWdJQ0FnSUNCcFppQW9iV1ZoYmxzd1hWc3hYU0E4SURNcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUcxbFlXNWZiV1Z6YzJGblpTQTlJQ2N1SUVScFpDQjViM1VnYldWaGJpQW5JQ3NnYldWaGJsc3dYVnN3WFNBcklDYy9KenRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnWlc1MkxtVnljbTl5S0h0Y2JpQWdJQ0FnSUNBZ0lDQWdJRzFsYzNOaFoyVTZJRndpVlc1eVpXTnZaMjVwZW1Wa0lISjFiR1U2SUZ3aUlDc2dkR2hwY3k1dVlXMWxJQ3NnYldWaGJsOXRaWE56WVdkbExGeHVJQ0FnSUNBZ0lDQWdJQ0FnYVc1a1pYZzZJSFJvYVhNdWFXNWtaWGdzWEc0Z0lDQWdJQ0FnSUNBZ0lDQjBlWEJsT2lBbmMzbHVkR0Y0Snl4Y2JpQWdJQ0FnSUNBZ0lDQWdJR1pwYkdWdVlXMWxPaUIwYUdsekxtWnBiR1Z1WVcxbFhHNGdJQ0FnSUNBZ0lIMHBPMXh1SUNBZ0lIMWNibHh1SUNBZ0lHbG1JQ2dvZEdocGN5NTJZV3gxWlNCcGJuTjBZVzVqWlc5bUlIUnlaV1V1Vm1Gc2RXVXBJQ1ltWEc0Z0lDQWdJQ0FnSUNGMGNtVmxMbEpsWm1WeVpXNWpaUzUyWVd4cFpGWmhiSFZsS0dWdWRpd2dkR2hwY3k1dVlXMWxMQ0IwYUdsekxuWmhiSFZsS1NrZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvSVhSeVpXVXVVbVZtWlhKbGJtTmxMbk5sYkdWamRHOXlLSFJvYVhNdWJtRnRaU2twSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQmxibll1WlhKeWIzSW9lMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzFsYzNOaFoyVTZJQ2RWYm5KbFkyOW5ibWw2WldRZ2NISnZjR1Z5ZEhrNklDY2dLMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbTVoYldVc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXNWtaWGc2SUhSb2FYTXVhVzVrWlhnc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RIbHdaVG9nSjNONWJuUmhlQ2NzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWm1sc1pXNWhiV1U2SUhSb2FYTXVabWxzWlc1aGJXVmNiaUFnSUNBZ0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlIUjVjR1Z1WVcxbE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIUnlaV1V1VW1WbVpYSmxibU5sTG5ObGJHVmpkRzl5S0hSb2FYTXVibUZ0WlNrdWRtRnNhV1JoZEdVcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBlWEJsYm1GdFpTQTlJSFJ5WldVdVVtVm1aWEpsYm1ObExuTmxiR1ZqZEc5eUtIUm9hWE11Ym1GdFpTa3VkbUZzYVdSaGRHVTdYRzRnSUNBZ0lDQWdJQ0FnSUNCOUlHVnNjMlVnYVdZZ0tIUjVjR1Z2WmlCMGNtVmxMbEpsWm1WeVpXNWpaUzV6Wld4bFkzUnZjaWgwYUdsekxtNWhiV1VwTG5SNWNHVWdQVDA5SUNkdlltcGxZM1FuS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RIbHdaVzVoYldVZ1BTQW5hMlY1ZDI5eVpDQW9iM0IwYVc5dWN6b2dKeUFySUhSeVpXVXVVbVZtWlhKbGJtTmxMbk5sYkdWamRHOXlLSFJvYVhNdWJtRnRaU2t1ZEhsd1pTNXFiMmx1S0Njc0lDY3BJQ3NnSnlrbk8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwZVhCbGJtRnRaU0E5SUhSeVpXVXVVbVZtWlhKbGJtTmxMbk5sYkdWamRHOXlLSFJvYVhNdWJtRnRaU2t1ZEhsd1pUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQmxibll1WlhKeWIzSW9lMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzFsYzNOaFoyVTZJQ2RKYm5aaGJHbGtJSFpoYkhWbElHWnZjaUFuSUN0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1dVlXMWxJQ3RjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0p5d2dkR2hsSUhSNWNHVWdKeUFySUhSNWNHVnVZVzFsSUN0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdKeUJwY3lCbGVIQmxZM1JsWkM0Z0p5QXJJSFJvYVhNdWRtRnNkV1VnSzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQW5JQ2h2WmlCMGVYQmxJQ2NnS3lCMGFHbHpMblpoYkhWbExuWmhiSFZsV3pCZExtbHpJQ3NnSnlrZ0p5QXJYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNjZ2QyRnpJR2RwZG1WdUxpY3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhVzVrWlhnNklIUm9hWE11YVc1a1pYZ3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkSGx3WlRvZ0ozTjViblJoZUNjc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1ptbHNaVzVoYldVNklIUm9hWE11Wm1sc1pXNWhiV1ZjYmlBZ0lDQWdJQ0FnSUNBZ0lIMHBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdmVnh1WEc0Z0lDQWdhV1lnS0hSb2FYTXVkbUZ5YVdGaWJHVXBJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJQ2NuTzF4dUlDQWdJSDBnWld4elpTQnBaaUFvZEhKbFpTNVNaV1psY21WdVkyVXVhWE5HYjI1MEtIUm9hWE11Ym1GdFpTa2dKaVlnZEdocGN5NTJZV3gxWlM1MllXeDFaUzVzWlc1bmRHZ2dQaUF4S1NCN1hHNGdJQ0FnSUNBZ0lIWmhjaUJtSUQwZ2RISmxaUzVmWjJWMFJtOXVkRk5sZENobGJuWXNJSFJvYVhNdWRtRnNkV1V1ZG1Gc2RXVXBPMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdKMlp2Ym5SelpYUXRibUZ0WlQxY0lpY2dLeUJtTG01aGJXVWdLeUFuWENJbk8xeHVJQ0FnSUgwZ1pXeHpaU0JwWmlBb1kyOXVkR1Z1ZENrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTUyWVd4MVpTNTBiMU4wY21sdVp5aGxibllzSUhSb2FYTXVibUZ0WlN3Z2MyVndLVHRjYmlBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RISmxaUzVTWldabGNtVnVZMlV1YzJWc1pXTjBiM0pPWVcxbEtIUm9hWE11Ym1GdFpTa2dLMXh1SUNBZ0lDQWdJQ0FnSUNBZ0p6MWNJaWNnSzF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1MllXeDFaUzUwYjFOMGNtbHVaeWhsYm5Zc0lIUm9hWE11Ym1GdFpTa2dLMXh1SUNBZ0lDQWdJQ0FnSUNBZ0oxd2lKenRjYmlBZ0lDQjlYRzU5TzF4dVhHNHZMeUJVVDBSUE9pQlNkV3hsSUdWMklHTm9ZV2x1SUhOb2IzVnNaQ0JoWkdRZ1ptOXVkSE5sZEhNZ2RHOGdaVzUyTG1aeVlXMWxjMXh1ZEhKbFpTNVNkV3hsTG5CeWIzUnZkSGx3WlM1bGRpQTlJR1oxYm1OMGFXOXVLR052Ym5SbGVIUXBJSHRjYmlBZ0lDQnlaWFIxY200Z2JtVjNJSFJ5WldVdVVuVnNaU2gwYUdsekxtNWhiV1VzWEc0Z0lDQWdJQ0FnSUhSb2FYTXVkbUZzZFdVdVpYWW9ZMjl1ZEdWNGRDa3NYRzRnSUNBZ0lDQWdJSFJvYVhNdWFXNWtaWGdzWEc0Z0lDQWdJQ0FnSUhSb2FYTXVabWxzWlc1aGJXVXBPMXh1ZlR0Y2JseHVmU2tvY21WeGRXbHlaU2duTGk0dmRISmxaU2NwS1R0Y2JseHVYRzVjYmk4dkx5OHZMeTh2THk4dkx5OHZMeTh2TDF4dUx5OGdWMFZDVUVGRFN5QkdUMDlVUlZKY2JpOHZJQzR2Zmk5allYSjBieTlzYVdJdlkyRnlkRzh2ZEhKbFpTOXlkV3hsTG1welhHNHZMeUJ0YjJSMWJHVWdhV1FnUFNBeE1EVmNiaTh2SUcxdlpIVnNaU0JqYUhWdWEzTWdQU0F3SWwwc0ltMWhjSEJwYm1keklqb2lRVUZCUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN0lpd2ljMjkxY21ObFVtOXZkQ0k2SWlKOVwiKTtcblxuLyoqKi8gfSksXG4vKiAxMDYgKi9cbi8qIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKiBhbGwgZXhwb3J0cyB1c2VkICovXG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vfi9jYXJ0by9saWIvY2FydG8vdHJlZS9ydWxlc2V0LmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5ldmFsKFwiKGZ1bmN0aW9uKHRyZWUpIHtcXG5cXG50cmVlLlJ1bGVzZXQgPSBmdW5jdGlvbiBSdWxlc2V0KHNlbGVjdG9ycywgcnVsZXMpIHtcXG4gICAgdGhpcy5zZWxlY3RvcnMgPSBzZWxlY3RvcnM7XFxuICAgIHRoaXMucnVsZXMgPSBydWxlcztcXG4gICAgLy8gc3RhdGljIGNhY2hlIG9mIGZpbmQoKSBmdW5jdGlvblxcbiAgICB0aGlzLl9sb29rdXBzID0ge307XFxufTtcXG50cmVlLlJ1bGVzZXQucHJvdG90eXBlID0ge1xcbiAgICBpczogJ3J1bGVzZXQnLFxcbiAgICAnZXYnOiBmdW5jdGlvbihlbnYpIHtcXG4gICAgICAgIHZhciBpLFxcbiAgICAgICAgICAgIHJ1bGVzZXQgPSBuZXcgdHJlZS5SdWxlc2V0KHRoaXMuc2VsZWN0b3JzLCB0aGlzLnJ1bGVzLnNsaWNlKDApKTtcXG4gICAgICAgIHJ1bGVzZXQucm9vdCA9IHRoaXMucm9vdDtcXG5cXG4gICAgICAgIC8vIHB1c2ggdGhlIGN1cnJlbnQgcnVsZXNldCB0byB0aGUgZnJhbWVzIHN0YWNrXFxuICAgICAgICBlbnYuZnJhbWVzLnVuc2hpZnQocnVsZXNldCk7XFxuXFxuICAgICAgICAvLyBFdmFsdWF0ZSBldmVyeXRoaW5nIGVsc2VcXG4gICAgICAgIGZvciAoaSA9IDAsIHJ1bGU7IGkgPCBydWxlc2V0LnJ1bGVzLmxlbmd0aDsgaSsrKSB7XFxuICAgICAgICAgICAgcnVsZSA9IHJ1bGVzZXQucnVsZXNbaV07XFxuICAgICAgICAgICAgcnVsZXNldC5ydWxlc1tpXSA9IHJ1bGUuZXYgPyBydWxlLmV2KGVudikgOiBydWxlO1xcbiAgICAgICAgfVxcblxcbiAgICAgICAgLy8gUG9wIHRoZSBzdGFja1xcbiAgICAgICAgZW52LmZyYW1lcy5zaGlmdCgpO1xcblxcbiAgICAgICAgcmV0dXJuIHJ1bGVzZXQ7XFxuICAgIH0sXFxuICAgIG1hdGNoOiBmdW5jdGlvbihhcmdzKSB7XFxuICAgICAgICByZXR1cm4gIWFyZ3MgfHwgYXJncy5sZW5ndGggPT09IDA7XFxuICAgIH0sXFxuICAgIHZhcmlhYmxlczogZnVuY3Rpb24oKSB7XFxuICAgICAgICBpZiAodGhpcy5fdmFyaWFibGVzKSB7IHJldHVybiB0aGlzLl92YXJpYWJsZXM7IH1cXG4gICAgICAgIGVsc2Uge1xcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl92YXJpYWJsZXMgPSB0aGlzLnJ1bGVzLnJlZHVjZShmdW5jdGlvbihoYXNoLCByKSB7XFxuICAgICAgICAgICAgICAgIGlmIChyIGluc3RhbmNlb2YgdHJlZS5SdWxlICYmIHIudmFyaWFibGUgPT09IHRydWUpIHtcXG4gICAgICAgICAgICAgICAgICAgIGhhc2hbci5uYW1lXSA9IHI7XFxuICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgcmV0dXJuIGhhc2g7XFxuICAgICAgICAgICAgfSwge30pO1xcbiAgICAgICAgfVxcbiAgICB9LFxcbiAgICB2YXJpYWJsZTogZnVuY3Rpb24obmFtZSkge1xcbiAgICAgICAgcmV0dXJuIHRoaXMudmFyaWFibGVzKClbbmFtZV07XFxuICAgIH0sXFxuICAgIHJ1bGVzZXRzOiBmdW5jdGlvbigpIHtcXG4gICAgICAgIGlmICh0aGlzLl9ydWxlc2V0cykgeyByZXR1cm4gdGhpcy5fcnVsZXNldHM7IH1cXG4gICAgICAgIGVsc2Uge1xcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9ydWxlc2V0cyA9IHRoaXMucnVsZXMuZmlsdGVyKGZ1bmN0aW9uKHIpIHtcXG4gICAgICAgICAgICAgICAgcmV0dXJuIChyIGluc3RhbmNlb2YgdHJlZS5SdWxlc2V0KTtcXG4gICAgICAgICAgICB9KTtcXG4gICAgICAgIH1cXG4gICAgfSxcXG4gICAgZmluZDogZnVuY3Rpb24oc2VsZWN0b3IsIHNlbGYpIHtcXG4gICAgICAgIHNlbGYgPSBzZWxmIHx8IHRoaXM7XFxuICAgICAgICB2YXIgcnVsZXMgPSBbXSwgcnVsZSwgbWF0Y2gsXFxuICAgICAgICAgICAga2V5ID0gc2VsZWN0b3IudG9TdHJpbmcoKTtcXG5cXG4gICAgICAgIGlmIChrZXkgaW4gdGhpcy5fbG9va3VwcykgeyByZXR1cm4gdGhpcy5fbG9va3Vwc1trZXldOyB9XFxuXFxuICAgICAgICB0aGlzLnJ1bGVzZXRzKCkuZm9yRWFjaChmdW5jdGlvbihydWxlKSB7XFxuICAgICAgICAgICAgaWYgKHJ1bGUgIT09IHNlbGYpIHtcXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBydWxlLnNlbGVjdG9ycy5sZW5ndGg7IGorKykge1xcbiAgICAgICAgICAgICAgICAgICAgbWF0Y2ggPSBzZWxlY3Rvci5tYXRjaChydWxlLnNlbGVjdG9yc1tqXSk7XFxuICAgICAgICAgICAgICAgICAgICBpZiAobWF0Y2gpIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2VsZWN0b3IuZWxlbWVudHMubGVuZ3RoID4gMSkge1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBBcnJheS5wcm90b3R5cGUucHVzaC5hcHBseShydWxlcywgcnVsZS5maW5kKFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IHRyZWUuU2VsZWN0b3IobnVsbCwgbnVsbCwgbnVsbCwgc2VsZWN0b3IuZWxlbWVudHMuc2xpY2UoMSkpLCBzZWxmKSk7XFxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcnVsZXMucHVzaChydWxlKTtcXG4gICAgICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XFxuICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICB9XFxuICAgICAgICB9KTtcXG4gICAgICAgIHJldHVybiB0aGlzLl9sb29rdXBzW2tleV0gPSBydWxlcztcXG4gICAgfSxcXG4gICAgLy8gWm9vbXMgY2FuIHVzZSB2YXJpYWJsZXMuIFRoaXMgcmVwbGFjZXMgdHJlZS5ab29tIG9iamVjdHMgb24gc2VsZWN0b3JzXFxuICAgIC8vIHdpdGggc2ltcGxlIGJpdC1hcnJheXMgdGhhdCB3ZSBjYW4gY29tcGFyZSBlYXNpbHkuXFxuICAgIGV2Wm9vbXM6IGZ1bmN0aW9uKGVudikge1xcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnNlbGVjdG9ycy5sZW5ndGg7IGkrKykge1xcbiAgICAgICAgICAgIHZhciB6dmFsID0gdHJlZS5ab29tLmFsbDtcXG4gICAgICAgICAgICBmb3IgKHZhciB6ID0gMDsgeiA8IHRoaXMuc2VsZWN0b3JzW2ldLnpvb20ubGVuZ3RoOyB6KyspIHtcXG4gICAgICAgICAgICAgICAgenZhbCA9IHp2YWwgJiB0aGlzLnNlbGVjdG9yc1tpXS56b29tW3pdLmV2KGVudikuem9vbTtcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgICAgdGhpcy5zZWxlY3RvcnNbaV0uem9vbSA9IHp2YWw7XFxuICAgICAgICB9XFxuICAgIH0sXFxuICAgIGZsYXR0ZW46IGZ1bmN0aW9uKHJlc3VsdCwgcGFyZW50cywgZW52KSB7XFxuICAgICAgICB2YXIgc2VsZWN0b3JzID0gW10sIGksIGo7XFxuICAgICAgICBpZiAodGhpcy5zZWxlY3RvcnMubGVuZ3RoID09PSAwKSB7XFxuICAgICAgICAgICAgZW52LmZyYW1lcyA9IGVudi5mcmFtZXMuY29uY2F0KHRoaXMucnVsZXMpO1xcbiAgICAgICAgfVxcbiAgICAgICAgLy8gZXZhbHVhdGUgem9vbSB2YXJpYWJsZXMgb24gdGhpcyBvYmplY3QuXFxuICAgICAgICB0aGlzLmV2Wm9vbXMoZW52KTtcXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCB0aGlzLnNlbGVjdG9ycy5sZW5ndGg7IGkrKykge1xcbiAgICAgICAgICAgIHZhciBjaGlsZCA9IHRoaXMuc2VsZWN0b3JzW2ldO1xcblxcbiAgICAgICAgICAgIGlmICghY2hpbGQuZmlsdGVycykge1xcbiAgICAgICAgICAgICAgICAvLyBUT0RPOiBpcyB0aGlzIGludGVybmFsIGluY29uc2lzdGVuY3k/XFxuICAgICAgICAgICAgICAgIC8vIFRoaXMgaXMgYW4gaW52YWxpZCBmaWx0ZXJzZXQuXFxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xcbiAgICAgICAgICAgIH1cXG5cXG4gICAgICAgICAgICBpZiAocGFyZW50cy5sZW5ndGgpIHtcXG4gICAgICAgICAgICAgICAgZm9yIChqID0gMDsgaiA8IHBhcmVudHMubGVuZ3RoOyBqKyspIHtcXG4gICAgICAgICAgICAgICAgICAgIHZhciBwYXJlbnQgPSBwYXJlbnRzW2pdO1xcblxcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1lcmdlZEZpbHRlcnMgPSBwYXJlbnQuZmlsdGVycy5jbG9uZVdpdGgoY2hpbGQuZmlsdGVycyk7XFxuICAgICAgICAgICAgICAgICAgICBpZiAobWVyZ2VkRmlsdGVycyA9PT0gbnVsbCkge1xcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEZpbHRlcnMgY291bGQgYmUgYWRkZWQsIGJ1dCB0aGV5IGRpZG4ndCBjaGFuZ2UgdGhlXFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZmlsdGVycy4gVGhpcyBtZWFucyB0aGF0IHdlIG9ubHkgaGF2ZSB0byBjbG9uZSB3aGVuXFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gdGhlIHpvb20gbGV2ZWxzIG9yIHRoZSBhdHRhY2htZW50IGlzIGRpZmZlcmVudCB0b28uXFxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBhcmVudC56b29tID09PSAocGFyZW50Lnpvb20gJiBjaGlsZC56b29tKSAmJlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnQuZnJhbWVfb2Zmc2V0ID09PSBjaGlsZC5mcmFtZV9vZmZzZXQgJiZcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50LmF0dGFjaG1lbnQgPT09IGNoaWxkLmF0dGFjaG1lbnQgJiZcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50LmVsZW1lbnRzLmpvaW4oKSA9PT0gY2hpbGQuZWxlbWVudHMuam9pbigpKSB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdG9ycy5wdXNoKHBhcmVudCk7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lcmdlZEZpbHRlcnMgPSBwYXJlbnQuZmlsdGVycztcXG4gICAgICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCFtZXJnZWRGaWx0ZXJzKSB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gVGhlIG1lcmdlZCBmaWx0ZXJzIGFyZSBpbnZhbGlkLCB0aGF0IG1lYW5zIHdlIGRvbid0XFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gaGF2ZSB0byBjbG9uZS5cXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcXG4gICAgICAgICAgICAgICAgICAgIH1cXG5cXG4gICAgICAgICAgICAgICAgICAgIHZhciBjbG9uZSA9IE9iamVjdC5jcmVhdGUodHJlZS5TZWxlY3Rvci5wcm90b3R5cGUpO1xcbiAgICAgICAgICAgICAgICAgICAgY2xvbmUuZmlsdGVycyA9IG1lcmdlZEZpbHRlcnM7XFxuICAgICAgICAgICAgICAgICAgICBjbG9uZS56b29tID0gcGFyZW50Lnpvb20gJiBjaGlsZC56b29tO1xcbiAgICAgICAgICAgICAgICAgICAgY2xvbmUuZnJhbWVfb2Zmc2V0ID0gY2hpbGQuZnJhbWVfb2Zmc2V0O1xcbiAgICAgICAgICAgICAgICAgICAgY2xvbmUuZWxlbWVudHMgPSBwYXJlbnQuZWxlbWVudHMuY29uY2F0KGNoaWxkLmVsZW1lbnRzKTtcXG4gICAgICAgICAgICAgICAgICAgIGlmIChwYXJlbnQuYXR0YWNobWVudCAmJiBjaGlsZC5hdHRhY2htZW50KSB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgY2xvbmUuYXR0YWNobWVudCA9IHBhcmVudC5hdHRhY2htZW50ICsgJy8nICsgY2hpbGQuYXR0YWNobWVudDtcXG4gICAgICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgY2xvbmUuYXR0YWNobWVudCA9IGNoaWxkLmF0dGFjaG1lbnQgfHwgcGFyZW50LmF0dGFjaG1lbnQ7XFxuICAgICAgICAgICAgICAgICAgICBjbG9uZS5jb25kaXRpb25zID0gcGFyZW50LmNvbmRpdGlvbnMgKyBjaGlsZC5jb25kaXRpb25zO1xcbiAgICAgICAgICAgICAgICAgICAgY2xvbmUuaW5kZXggPSBjaGlsZC5pbmRleDtcXG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdG9ycy5wdXNoKGNsb25lKTtcXG4gICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgICAgIHNlbGVjdG9ycy5wdXNoKGNoaWxkKTtcXG4gICAgICAgICAgICB9XFxuICAgICAgICB9XFxuXFxuICAgICAgICB2YXIgcnVsZXMgPSBbXTtcXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCB0aGlzLnJ1bGVzLmxlbmd0aDsgaSsrKSB7XFxuICAgICAgICAgICAgdmFyIHJ1bGUgPSB0aGlzLnJ1bGVzW2ldO1xcblxcbiAgICAgICAgICAgIC8vIFJlY3Vyc2l2ZWx5IGZsYXR0ZW4gYW55IG5lc3RlZCBydWxlc2V0c1xcbiAgICAgICAgICAgIGlmIChydWxlIGluc3RhbmNlb2YgdHJlZS5SdWxlc2V0KSB7XFxuICAgICAgICAgICAgICAgIHJ1bGUuZmxhdHRlbihyZXN1bHQsIHNlbGVjdG9ycywgZW52KTtcXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHJ1bGUgaW5zdGFuY2VvZiB0cmVlLlJ1bGUpIHtcXG4gICAgICAgICAgICAgICAgcnVsZXMucHVzaChydWxlKTtcXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHJ1bGUgaW5zdGFuY2VvZiB0cmVlLkludmFsaWQpIHtcXG4gICAgICAgICAgICAgICAgZW52LmVycm9yKHJ1bGUpO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgIH1cXG5cXG4gICAgICAgIHZhciBpbmRleCA9IHJ1bGVzLmxlbmd0aCA/IHJ1bGVzWzBdLmluZGV4IDogZmFsc2U7XFxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgc2VsZWN0b3JzLmxlbmd0aDsgaSsrKSB7XFxuICAgICAgICAgICAgLy8gRm9yIHNwZWNpZmljaXR5IHNvcnQsIHVzZSB0aGUgcG9zaXRpb24gb2YgdGhlIGZpcnN0IHJ1bGUgdG8gYWxsb3dcXG4gICAgICAgICAgICAvLyBkZWZpbmluZyBhdHRhY2htZW50cyB0aGF0IGFyZSB1bmRlciBjdXJyZW50IGVsZW1lbnQgYXMgYSBkZXNjZW5kYW50XFxuICAgICAgICAgICAgLy8gc2VsZWN0b3IuXFxuICAgICAgICAgICAgaWYgKGluZGV4ICE9PSBmYWxzZSkge1xcbiAgICAgICAgICAgICAgICBzZWxlY3RvcnNbaV0uaW5kZXggPSBpbmRleDtcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgICAgcmVzdWx0LnB1c2gobmV3IHRyZWUuRGVmaW5pdGlvbihzZWxlY3RvcnNbaV0sIHJ1bGVzLnNsaWNlKCkpKTtcXG4gICAgICAgIH1cXG5cXG4gICAgICAgIHJldHVybiByZXN1bHQ7XFxuICAgIH1cXG59O1xcbn0pKF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL3RyZWUgKi8gMCkpO1xcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pTVRBMkxtcHpJaXdpYzI5MWNtTmxjeUk2V3lKM1pXSndZV05yT2k4dkx5NHZmaTlqWVhKMGJ5OXNhV0l2WTJGeWRHOHZkSEpsWlM5eWRXeGxjMlYwTG1welB6TmxPVEVpWFN3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaUtHWjFibU4wYVc5dUtIUnlaV1VwSUh0Y2JseHVkSEpsWlM1U2RXeGxjMlYwSUQwZ1puVnVZM1JwYjI0Z1VuVnNaWE5sZENoelpXeGxZM1J2Y25Nc0lISjFiR1Z6S1NCN1hHNGdJQ0FnZEdocGN5NXpaV3hsWTNSdmNuTWdQU0J6Wld4bFkzUnZjbk03WEc0Z0lDQWdkR2hwY3k1eWRXeGxjeUE5SUhKMWJHVnpPMXh1SUNBZ0lDOHZJSE4wWVhScFl5QmpZV05vWlNCdlppQm1hVzVrS0NrZ1puVnVZM1JwYjI1Y2JpQWdJQ0IwYUdsekxsOXNiMjlyZFhCeklEMGdlMzA3WEc1OU8xeHVkSEpsWlM1U2RXeGxjMlYwTG5CeWIzUnZkSGx3WlNBOUlIdGNiaUFnSUNCcGN6b2dKM0oxYkdWelpYUW5MRnh1SUNBZ0lDZGxkaWM2SUdaMWJtTjBhVzl1S0dWdWRpa2dlMXh1SUNBZ0lDQWdJQ0IyWVhJZ2FTeGNiaUFnSUNBZ0lDQWdJQ0FnSUhKMWJHVnpaWFFnUFNCdVpYY2dkSEpsWlM1U2RXeGxjMlYwS0hSb2FYTXVjMlZzWldOMGIzSnpMQ0IwYUdsekxuSjFiR1Z6TG5Oc2FXTmxLREFwS1R0Y2JpQWdJQ0FnSUNBZ2NuVnNaWE5sZEM1eWIyOTBJRDBnZEdocGN5NXliMjkwTzF4dVhHNGdJQ0FnSUNBZ0lDOHZJSEIxYzJnZ2RHaGxJR04xY25KbGJuUWdjblZzWlhObGRDQjBieUIwYUdVZ1puSmhiV1Z6SUhOMFlXTnJYRzRnSUNBZ0lDQWdJR1Z1ZGk1bWNtRnRaWE11ZFc1emFHbG1kQ2h5ZFd4bGMyVjBLVHRjYmx4dUlDQWdJQ0FnSUNBdkx5QkZkbUZzZFdGMFpTQmxkbVZ5ZVhSb2FXNW5JR1ZzYzJWY2JpQWdJQ0FnSUNBZ1ptOXlJQ2hwSUQwZ01Dd2djblZzWlRzZ2FTQThJSEoxYkdWelpYUXVjblZzWlhNdWJHVnVaM1JvT3lCcEt5c3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISjFiR1VnUFNCeWRXeGxjMlYwTG5KMWJHVnpXMmxkTzF4dUlDQWdJQ0FnSUNBZ0lDQWdjblZzWlhObGRDNXlkV3hsYzF0cFhTQTlJSEoxYkdVdVpYWWdQeUJ5ZFd4bExtVjJLR1Z1ZGlrZ09pQnlkV3hsTzF4dUlDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdMeThnVUc5d0lIUm9aU0J6ZEdGamExeHVJQ0FnSUNBZ0lDQmxibll1Wm5KaGJXVnpMbk5vYVdaMEtDazdYRzVjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSEoxYkdWelpYUTdYRzRnSUNBZ2ZTeGNiaUFnSUNCdFlYUmphRG9nWm5WdVkzUnBiMjRvWVhKbmN5a2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdJV0Z5WjNNZ2ZId2dZWEpuY3k1c1pXNW5kR2dnUFQwOUlEQTdYRzRnSUNBZ2ZTeGNiaUFnSUNCMllYSnBZV0pzWlhNNklHWjFibU4wYVc5dUtDa2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTVmZG1GeWFXRmliR1Z6S1NCN0lISmxkSFZ5YmlCMGFHbHpMbDkyWVhKcFlXSnNaWE03SUgxY2JpQWdJQ0FnSUNBZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVmZG1GeWFXRmliR1Z6SUQwZ2RHaHBjeTV5ZFd4bGN5NXlaV1IxWTJVb1puVnVZM1JwYjI0b2FHRnphQ3dnY2lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2h5SUdsdWMzUmhibU5sYjJZZ2RISmxaUzVTZFd4bElDWW1JSEl1ZG1GeWFXRmliR1VnUFQwOUlIUnlkV1VwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhR0Z6YUZ0eUxtNWhiV1ZkSUQwZ2NqdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHaGhjMmc3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlMQ0I3ZlNrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOUxGeHVJQ0FnSUhaaGNtbGhZbXhsT2lCbWRXNWpkR2x2YmlodVlXMWxLU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxuWmhjbWxoWW14bGN5Z3BXMjVoYldWZE8xeHVJQ0FnSUgwc1hHNGdJQ0FnY25Wc1pYTmxkSE02SUdaMWJtTjBhVzl1S0NrZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NWZjblZzWlhObGRITXBJSHNnY21WMGRYSnVJSFJvYVhNdVgzSjFiR1Z6WlhSek95QjlYRzRnSUNBZ0lDQWdJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgzSjFiR1Z6WlhSeklEMGdkR2hwY3k1eWRXeGxjeTVtYVd4MFpYSW9ablZ1WTNScGIyNG9jaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUFvY2lCcGJuTjBZVzVqWlc5bUlIUnlaV1V1VW5Wc1pYTmxkQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDBzWEc0Z0lDQWdabWx1WkRvZ1puVnVZM1JwYjI0b2MyVnNaV04wYjNJc0lITmxiR1lwSUh0Y2JpQWdJQ0FnSUNBZ2MyVnNaaUE5SUhObGJHWWdmSHdnZEdocGN6dGNiaUFnSUNBZ0lDQWdkbUZ5SUhKMWJHVnpJRDBnVzEwc0lISjFiR1VzSUcxaGRHTm9MRnh1SUNBZ0lDQWdJQ0FnSUNBZ2EyVjVJRDBnYzJWc1pXTjBiM0l1ZEc5VGRISnBibWNvS1R0Y2JseHVJQ0FnSUNBZ0lDQnBaaUFvYTJWNUlHbHVJSFJvYVhNdVgyeHZiMnQxY0hNcElIc2djbVYwZFhKdUlIUm9hWE11WDJ4dmIydDFjSE5iYTJWNVhUc2dmVnh1WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjblZzWlhObGRITW9LUzVtYjNKRllXTm9LR1oxYm1OMGFXOXVLSEoxYkdVcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaHlkV3hsSUNFOVBTQnpaV3htS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1ptOXlJQ2gyWVhJZ2FpQTlJREE3SUdvZ1BDQnlkV3hsTG5ObGJHVmpkRzl5Y3k1c1pXNW5kR2c3SUdvckt5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdFlYUmphQ0E5SUhObGJHVmpkRzl5TG0xaGRHTm9LSEoxYkdVdWMyVnNaV04wYjNKelcycGRLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLRzFoZEdOb0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYzJWc1pXTjBiM0l1Wld4bGJXVnVkSE11YkdWdVozUm9JRDRnTVNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRUZ5Y21GNUxuQnliM1J2ZEhsd1pTNXdkWE5vTG1Gd2NHeDVLSEoxYkdWekxDQnlkV3hsTG1acGJtUW9YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHNWxkeUIwY21WbExsTmxiR1ZqZEc5eUtHNTFiR3dzSUc1MWJHd3NJRzUxYkd3c0lITmxiR1ZqZEc5eUxtVnNaVzFsYm5SekxuTnNhV05sS0RFcEtTd2djMlZzWmlrcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlkV3hsY3k1d2RYTm9LSEoxYkdVcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1luSmxZV3M3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMHBPMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZmJHOXZhM1Z3YzF0clpYbGRJRDBnY25Wc1pYTTdYRzRnSUNBZ2ZTeGNiaUFnSUNBdkx5QmFiMjl0Y3lCallXNGdkWE5sSUhaaGNtbGhZbXhsY3k0Z1ZHaHBjeUJ5WlhCc1lXTmxjeUIwY21WbExscHZiMjBnYjJKcVpXTjBjeUJ2YmlCelpXeGxZM1J2Y25OY2JpQWdJQ0F2THlCM2FYUm9JSE5wYlhCc1pTQmlhWFF0WVhKeVlYbHpJSFJvWVhRZ2QyVWdZMkZ1SUdOdmJYQmhjbVVnWldGemFXeDVMbHh1SUNBZ0lHVjJXbTl2YlhNNklHWjFibU4wYVc5dUtHVnVkaWtnZTF4dUlDQWdJQ0FnSUNCbWIzSWdLSFpoY2lCcElEMGdNRHNnYVNBOElIUm9hWE11YzJWc1pXTjBiM0p6TG14bGJtZDBhRHNnYVNzcktTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMllYSWdlblpoYkNBOUlIUnlaV1V1V205dmJTNWhiR3c3WEc0Z0lDQWdJQ0FnSUNBZ0lDQm1iM0lnS0haaGNpQjZJRDBnTURzZ2VpQThJSFJvYVhNdWMyVnNaV04wYjNKelcybGRMbnB2YjIwdWJHVnVaM1JvT3lCNkt5c3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I2ZG1Gc0lEMGdlblpoYkNBbUlIUm9hWE11YzJWc1pXTjBiM0p6VzJsZExucHZiMjFiZWwwdVpYWW9aVzUyS1M1NmIyOXRPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXpaV3hsWTNSdmNuTmJhVjB1ZW05dmJTQTlJSHAyWVd3N1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOUxGeHVJQ0FnSUdac1lYUjBaVzQ2SUdaMWJtTjBhVzl1S0hKbGMzVnNkQ3dnY0dGeVpXNTBjeXdnWlc1MktTQjdYRzRnSUNBZ0lDQWdJSFpoY2lCelpXeGxZM1J2Y25NZ1BTQmJYU3dnYVN3Z2FqdGNiaUFnSUNBZ0lDQWdhV1lnS0hSb2FYTXVjMlZzWldOMGIzSnpMbXhsYm1kMGFDQTlQVDBnTUNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWlc1MkxtWnlZVzFsY3lBOUlHVnVkaTVtY21GdFpYTXVZMjl1WTJGMEtIUm9hWE11Y25Wc1pYTXBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUM4dklHVjJZV3gxWVhSbElIcHZiMjBnZG1GeWFXRmliR1Z6SUc5dUlIUm9hWE1nYjJKcVpXTjBMbHh1SUNBZ0lDQWdJQ0IwYUdsekxtVjJXbTl2YlhNb1pXNTJLVHRjYmlBZ0lDQWdJQ0FnWm05eUlDaHBJRDBnTURzZ2FTQThJSFJvYVhNdWMyVnNaV04wYjNKekxteGxibWQwYURzZ2FTc3JLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjJZWElnWTJocGJHUWdQU0IwYUdsekxuTmxiR1ZqZEc5eWMxdHBYVHRjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0NGamFHbHNaQzVtYVd4MFpYSnpLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1ZFOUVUem9nYVhNZ2RHaHBjeUJwYm5SbGNtNWhiQ0JwYm1OdmJuTnBjM1JsYm1ONVAxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJRlJvYVhNZ2FYTWdZVzRnYVc1MllXeHBaQ0JtYVd4MFpYSnpaWFF1WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWRHbHVkV1U3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2h3WVhKbGJuUnpMbXhsYm1kMGFDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1p2Y2lBb2FpQTlJREE3SUdvZ1BDQndZWEpsYm5SekxteGxibWQwYURzZ2Fpc3JLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJ3WVhKbGJuUWdQU0J3WVhKbGJuUnpXMnBkTzF4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCdFpYSm5aV1JHYVd4MFpYSnpJRDBnY0dGeVpXNTBMbVpwYkhSbGNuTXVZMnh2Ym1WWGFYUm9LR05vYVd4a0xtWnBiSFJsY25NcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2JXVnlaMlZrUm1sc2RHVnljeUE5UFQwZ2JuVnNiQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1JtbHNkR1Z5Y3lCamIzVnNaQ0JpWlNCaFpHUmxaQ3dnWW5WMElIUm9aWGtnWkdsa2JpZDBJR05vWVc1blpTQjBhR1ZjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzh2SUdacGJIUmxjbk11SUZSb2FYTWdiV1ZoYm5NZ2RHaGhkQ0IzWlNCdmJteDVJR2hoZG1VZ2RHOGdZMnh2Ym1VZ2QyaGxibHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeThnZEdobElIcHZiMjBnYkdWMlpXeHpJRzl5SUhSb1pTQmhkSFJoWTJodFpXNTBJR2x6SUdScFptWmxjbVZ1ZENCMGIyOHVYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvY0dGeVpXNTBMbnB2YjIwZ1BUMDlJQ2h3WVhKbGJuUXVlbTl2YlNBbUlHTm9hV3hrTG5wdmIyMHBJQ1ltWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NHRnlaVzUwTG1aeVlXMWxYMjltWm5ObGRDQTlQVDBnWTJocGJHUXVabkpoYldWZmIyWm1jMlYwSUNZbVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjR0Z5Wlc1MExtRjBkR0ZqYUcxbGJuUWdQVDA5SUdOb2FXeGtMbUYwZEdGamFHMWxiblFnSmlaY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQndZWEpsYm5RdVpXeGxiV1Z1ZEhNdWFtOXBiaWdwSUQwOVBTQmphR2xzWkM1bGJHVnRaVzUwY3k1cWIybHVLQ2twSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnpaV3hsWTNSdmNuTXVjSFZ6YUNod1lYSmxiblFwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZiblJwYm5WbE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnRaWEpuWldSR2FXeDBaWEp6SUQwZ2NHRnlaVzUwTG1acGJIUmxjbk03WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMGdaV3h6WlNCcFppQW9JVzFsY21kbFpFWnBiSFJsY25NcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJRlJvWlNCdFpYSm5aV1FnWm1sc2RHVnljeUJoY21VZ2FXNTJZV3hwWkN3Z2RHaGhkQ0J0WldGdWN5QjNaU0JrYjI0bmRGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5OGdhR0YyWlNCMGJ5QmpiRzl1WlM1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOdmJuUnBiblZsTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJR05zYjI1bElEMGdUMkpxWldOMExtTnlaV0YwWlNoMGNtVmxMbE5sYkdWamRHOXlMbkJ5YjNSdmRIbHdaU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnNiMjVsTG1acGJIUmxjbk1nUFNCdFpYSm5aV1JHYVd4MFpYSnpPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamJHOXVaUzU2YjI5dElEMGdjR0Z5Wlc1MExucHZiMjBnSmlCamFHbHNaQzU2YjI5dE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYkc5dVpTNW1jbUZ0WlY5dlptWnpaWFFnUFNCamFHbHNaQzVtY21GdFpWOXZabVp6WlhRN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR05zYjI1bExtVnNaVzFsYm5SeklEMGdjR0Z5Wlc1MExtVnNaVzFsYm5SekxtTnZibU5oZENoamFHbHNaQzVsYkdWdFpXNTBjeWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2h3WVhKbGJuUXVZWFIwWVdOb2JXVnVkQ0FtSmlCamFHbHNaQzVoZEhSaFkyaHRaVzUwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamJHOXVaUzVoZEhSaFkyaHRaVzUwSUQwZ2NHRnlaVzUwTG1GMGRHRmphRzFsYm5RZ0t5QW5MeWNnS3lCamFHbHNaQzVoZEhSaFkyaHRaVzUwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdWc2MyVWdZMnh2Ym1VdVlYUjBZV05vYldWdWRDQTlJR05vYVd4a0xtRjBkR0ZqYUcxbGJuUWdmSHdnY0dGeVpXNTBMbUYwZEdGamFHMWxiblE3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnNiMjVsTG1OdmJtUnBkR2x2Ym5NZ1BTQndZWEpsYm5RdVkyOXVaR2wwYVc5dWN5QXJJR05vYVd4a0xtTnZibVJwZEdsdmJuTTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOc2IyNWxMbWx1WkdWNElEMGdZMmhwYkdRdWFXNWtaWGc3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITmxiR1ZqZEc5eWN5NXdkWE5vS0dOc2IyNWxLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITmxiR1ZqZEc5eWN5NXdkWE5vS0dOb2FXeGtLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUhaaGNpQnlkV3hsY3lBOUlGdGRPMXh1SUNBZ0lDQWdJQ0JtYjNJZ0tHa2dQU0F3T3lCcElEd2dkR2hwY3k1eWRXeGxjeTVzWlc1bmRHZzdJR2tyS3lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlISjFiR1VnUFNCMGFHbHpMbkoxYkdWelcybGRPMXh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUJTWldOMWNuTnBkbVZzZVNCbWJHRjBkR1Z1SUdGdWVTQnVaWE4wWldRZ2NuVnNaWE5sZEhOY2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoeWRXeGxJR2x1YzNSaGJtTmxiMllnZEhKbFpTNVNkV3hsYzJWMEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjblZzWlM1bWJHRjBkR1Z1S0hKbGMzVnNkQ3dnYzJWc1pXTjBiM0p6TENCbGJuWXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTQmxiSE5sSUdsbUlDaHlkV3hsSUdsdWMzUmhibU5sYjJZZ2RISmxaUzVTZFd4bEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjblZzWlhNdWNIVnphQ2h5ZFd4bEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0JwWmlBb2NuVnNaU0JwYm5OMFlXNWpaVzltSUhSeVpXVXVTVzUyWVd4cFpDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1Z1ZGk1bGNuSnZjaWh5ZFd4bEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJSFpoY2lCcGJtUmxlQ0E5SUhKMWJHVnpMbXhsYm1kMGFDQS9JSEoxYkdWeld6QmRMbWx1WkdWNElEb2dabUZzYzJVN1hHNGdJQ0FnSUNBZ0lHWnZjaUFvYVNBOUlEQTdJR2tnUENCelpXeGxZM1J2Y25NdWJHVnVaM1JvT3lCcEt5c3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJRVp2Y2lCemNHVmphV1pwWTJsMGVTQnpiM0owTENCMWMyVWdkR2hsSUhCdmMybDBhVzl1SUc5bUlIUm9aU0JtYVhKemRDQnlkV3hsSUhSdklHRnNiRzkzWEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUJrWldacGJtbHVaeUJoZEhSaFkyaHRaVzUwY3lCMGFHRjBJR0Z5WlNCMWJtUmxjaUJqZFhKeVpXNTBJR1ZzWlcxbGJuUWdZWE1nWVNCa1pYTmpaVzVrWVc1MFhHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCelpXeGxZM1J2Y2k1Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNocGJtUmxlQ0FoUFQwZ1ptRnNjMlVwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCelpXeGxZM1J2Y25OYmFWMHVhVzVrWlhnZ1BTQnBibVJsZUR0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxjM1ZzZEM1d2RYTm9LRzVsZHlCMGNtVmxMa1JsWm1sdWFYUnBiMjRvYzJWc1pXTjBiM0p6VzJsZExDQnlkV3hsY3k1emJHbGpaU2dwS1NrN1hHNGdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdjbVZ6ZFd4ME8xeHVJQ0FnSUgxY2JuMDdYRzU5S1NoeVpYRjFhWEpsS0NjdUxpOTBjbVZsSnlrcE8xeHVYRzVjYmx4dUx5OHZMeTh2THk4dkx5OHZMeTh2THk4dlhHNHZMeUJYUlVKUVFVTkxJRVpQVDFSRlVseHVMeThnTGk5K0wyTmhjblJ2TDJ4cFlpOWpZWEowYnk5MGNtVmxMM0oxYkdWelpYUXVhbk5jYmk4dklHMXZaSFZzWlNCcFpDQTlJREV3Tmx4dUx5OGdiVzlrZFd4bElHTm9kVzVyY3lBOUlEQWlYU3dpYldGd2NHbHVaM01pT2lKQlFVRkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUc2lMQ0p6YjNWeVkyVlNiMjkwSWpvaUluMD1cIik7XG5cbi8qKiovIH0pLFxuLyogMTA3ICovXG4vKiBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyogYWxsIGV4cG9ydHMgdXNlZCAqL1xuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9+L2NhcnRvL2xpYi9jYXJ0by90cmVlL3NlbGVjdG9yLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuZXZhbChcIihmdW5jdGlvbih0cmVlKSB7XFxuXFxudHJlZS5TZWxlY3RvciA9IGZ1bmN0aW9uIFNlbGVjdG9yKGZpbHRlcnMsIHpvb20sIGZyYW1lX29mZnNldCwgZWxlbWVudHMsIGF0dGFjaG1lbnQsIGNvbmRpdGlvbnMsIGluZGV4KSB7XFxuICAgIHRoaXMuZWxlbWVudHMgPSBlbGVtZW50cyB8fCBbXTtcXG4gICAgdGhpcy5hdHRhY2htZW50ID0gYXR0YWNobWVudDtcXG4gICAgdGhpcy5maWx0ZXJzID0gZmlsdGVycyB8fCB7fTtcXG4gICAgdGhpcy5mcmFtZV9vZmZzZXQgPSBmcmFtZV9vZmZzZXQ7XFxuICAgIHRoaXMuem9vbSA9IHR5cGVvZiB6b29tICE9PSAndW5kZWZpbmVkJyA/IHpvb20gOiB0cmVlLlpvb20uYWxsO1xcbiAgICB0aGlzLmNvbmRpdGlvbnMgPSBjb25kaXRpb25zO1xcbiAgICB0aGlzLmluZGV4ID0gaW5kZXg7XFxufTtcXG5cXG4vLyBEZXRlcm1pbmUgdGhlIHNwZWNpZmljaXR5IG9mIHRoaXMgc2VsZWN0b3JcXG4vLyBiYXNlZCBvbiB0aGUgc3BlY2lmaWNpdHkgb2YgaXRzIGVsZW1lbnRzIC0gY2FsbGluZ1xcbi8vIEVsZW1lbnQuc3BlY2lmaWNpdHkoKSBpbiBvcmRlciB0byBkbyBzb1xcbi8vXFxuLy8gW0lELCBDbGFzcywgRmlsdGVycywgUG9zaXRpb24gaW4gZG9jdW1lbnRdXFxudHJlZS5TZWxlY3Rvci5wcm90b3R5cGUuc3BlY2lmaWNpdHkgPSBmdW5jdGlvbigpIHtcXG4gICAgcmV0dXJuIHRoaXMuZWxlbWVudHMucmVkdWNlKGZ1bmN0aW9uKG1lbW8sIGUpIHtcXG4gICAgICAgIHZhciBzcGVjID0gZS5zcGVjaWZpY2l0eSgpO1xcbiAgICAgICAgbWVtb1swXSArPSBzcGVjWzBdO1xcbiAgICAgICAgbWVtb1sxXSArPSBzcGVjWzFdO1xcbiAgICAgICAgcmV0dXJuIG1lbW87XFxuICAgIH0sIFswLCAwLCB0aGlzLmNvbmRpdGlvbnMsIHRoaXMuaW5kZXhdKTtcXG59O1xcblxcbn0pKF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL3RyZWUgKi8gMCkpO1xcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pTVRBM0xtcHpJaXdpYzI5MWNtTmxjeUk2V3lKM1pXSndZV05yT2k4dkx5NHZmaTlqWVhKMGJ5OXNhV0l2WTJGeWRHOHZkSEpsWlM5elpXeGxZM1J2Y2k1cWN6OHlZVFE1SWwwc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYklpaG1kVzVqZEdsdmJpaDBjbVZsS1NCN1hHNWNiblJ5WldVdVUyVnNaV04wYjNJZ1BTQm1kVzVqZEdsdmJpQlRaV3hsWTNSdmNpaG1hV3gwWlhKekxDQjZiMjl0TENCbWNtRnRaVjl2Wm1aelpYUXNJR1ZzWlcxbGJuUnpMQ0JoZEhSaFkyaHRaVzUwTENCamIyNWthWFJwYjI1ekxDQnBibVJsZUNrZ2UxeHVJQ0FnSUhSb2FYTXVaV3hsYldWdWRITWdQU0JsYkdWdFpXNTBjeUI4ZkNCYlhUdGNiaUFnSUNCMGFHbHpMbUYwZEdGamFHMWxiblFnUFNCaGRIUmhZMmh0Wlc1ME8xeHVJQ0FnSUhSb2FYTXVabWxzZEdWeWN5QTlJR1pwYkhSbGNuTWdmSHdnZTMwN1hHNGdJQ0FnZEdocGN5NW1jbUZ0WlY5dlptWnpaWFFnUFNCbWNtRnRaVjl2Wm1aelpYUTdYRzRnSUNBZ2RHaHBjeTU2YjI5dElEMGdkSGx3Wlc5bUlIcHZiMjBnSVQwOUlDZDFibVJsWm1sdVpXUW5JRDhnZW05dmJTQTZJSFJ5WldVdVdtOXZiUzVoYkd3N1hHNGdJQ0FnZEdocGN5NWpiMjVrYVhScGIyNXpJRDBnWTI5dVpHbDBhVzl1Y3p0Y2JpQWdJQ0IwYUdsekxtbHVaR1Y0SUQwZ2FXNWtaWGc3WEc1OU8xeHVYRzR2THlCRVpYUmxjbTFwYm1VZ2RHaGxJSE53WldOcFptbGphWFI1SUc5bUlIUm9hWE1nYzJWc1pXTjBiM0pjYmk4dklHSmhjMlZrSUc5dUlIUm9aU0J6Y0dWamFXWnBZMmwwZVNCdlppQnBkSE1nWld4bGJXVnVkSE1nTFNCallXeHNhVzVuWEc0dkx5QkZiR1Z0Wlc1MExuTndaV05wWm1samFYUjVLQ2tnYVc0Z2IzSmtaWElnZEc4Z1pHOGdjMjljYmk4dlhHNHZMeUJiU1VRc0lFTnNZWE56TENCR2FXeDBaWEp6TENCUWIzTnBkR2x2YmlCcGJpQmtiMk4xYldWdWRGMWNiblJ5WldVdVUyVnNaV04wYjNJdWNISnZkRzkwZVhCbExuTndaV05wWm1samFYUjVJRDBnWm5WdVkzUnBiMjRvS1NCN1hHNGdJQ0FnY21WMGRYSnVJSFJvYVhNdVpXeGxiV1Z1ZEhNdWNtVmtkV05sS0daMWJtTjBhVzl1S0cxbGJXOHNJR1VwSUh0Y2JpQWdJQ0FnSUNBZ2RtRnlJSE53WldNZ1BTQmxMbk53WldOcFptbGphWFI1S0NrN1hHNGdJQ0FnSUNBZ0lHMWxiVzliTUYwZ0t6MGdjM0JsWTFzd1hUdGNiaUFnSUNBZ0lDQWdiV1Z0YjFzeFhTQXJQU0J6Y0dWald6RmRPMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdiV1Z0Ynp0Y2JpQWdJQ0I5TENCYk1Dd2dNQ3dnZEdocGN5NWpiMjVrYVhScGIyNXpMQ0IwYUdsekxtbHVaR1Y0WFNrN1hHNTlPMXh1WEc1OUtTaHlaWEYxYVhKbEtDY3VMaTkwY21WbEp5a3BPMXh1WEc1Y2JseHVMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZYRzR2THlCWFJVSlFRVU5MSUVaUFQxUkZVbHh1THk4Z0xpOStMMk5oY25SdkwyeHBZaTlqWVhKMGJ5OTBjbVZsTDNObGJHVmpkRzl5TG1welhHNHZMeUJ0YjJSMWJHVWdhV1FnUFNBeE1EZGNiaTh2SUcxdlpIVnNaU0JqYUhWdWEzTWdQU0F3SWwwc0ltMWhjSEJwYm1keklqb2lRVUZCUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdJaXdpYzI5MWNtTmxVbTl2ZENJNklpSjlcIik7XG5cbi8qKiovIH0pLFxuLyogMTA4ICovXG4vKiBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyogYWxsIGV4cG9ydHMgdXNlZCAqL1xuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9+L2NhcnRvL2xpYi9jYXJ0by90cmVlL3N0eWxlLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuZXZhbChcIi8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqLyhmdW5jdGlvbihnbG9iYWwpIHsoZnVuY3Rpb24odHJlZSkge1xcbnZhciBfID0gZ2xvYmFsLl8gfHwgX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgdW5kZXJzY29yZSAqLyA0KTtcXG5cXG4vLyBHaXZlbiBhIHN0eWxlJ3MgbmFtZSwgYXR0YWNobWVudCwgZGVmaW5pdGlvbnMsIGFuZCBhbiBlbnZpcm9ubWVudCBvYmplY3QsXFxuLy8gcmV0dXJuIGEgc3RyaW5naWZpZWQgc3R5bGUgZm9yIE1hcG5pa1xcbnRyZWUuU3R5bGVYTUwgPSBmdW5jdGlvbihuYW1lLCBhdHRhY2htZW50LCBkZWZpbml0aW9ucywgZW52KSB7XFxuICAgIHZhciBleGlzdGluZyA9IHt9O1xcbiAgICB2YXIgaW1hZ2VfZmlsdGVycyA9IFtdLCBpbWFnZV9maWx0ZXJzX2luZmxhdGUgPSBbXSwgZGlyZWN0X2ltYWdlX2ZpbHRlcnMgPSBbXSwgY29tcF9vcCA9IFtdLCBvcGFjaXR5ID0gW107XFxuXFxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGVmaW5pdGlvbnMubGVuZ3RoOyBpKyspIHtcXG4gICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgZGVmaW5pdGlvbnNbaV0ucnVsZXMubGVuZ3RoOyBqKyspIHtcXG4gICAgICAgICAgICBpZiAoZGVmaW5pdGlvbnNbaV0ucnVsZXNbal0ubmFtZSA9PT0gJ2ltYWdlLWZpbHRlcnMnKSB7XFxuICAgICAgICAgICAgICAgIGltYWdlX2ZpbHRlcnMucHVzaChkZWZpbml0aW9uc1tpXS5ydWxlc1tqXSk7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIGlmIChkZWZpbml0aW9uc1tpXS5ydWxlc1tqXS5uYW1lID09PSAnaW1hZ2UtZmlsdGVycy1pbmZsYXRlJykge1xcbiAgICAgICAgICAgICAgICBpbWFnZV9maWx0ZXJzX2luZmxhdGUucHVzaChkZWZpbml0aW9uc1tpXS5ydWxlc1tqXSk7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIGlmIChkZWZpbml0aW9uc1tpXS5ydWxlc1tqXS5uYW1lID09PSAnZGlyZWN0LWltYWdlLWZpbHRlcnMnKSB7XFxuICAgICAgICAgICAgICAgIGRpcmVjdF9pbWFnZV9maWx0ZXJzLnB1c2goZGVmaW5pdGlvbnNbaV0ucnVsZXNbal0pO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgICBpZiAoZGVmaW5pdGlvbnNbaV0ucnVsZXNbal0ubmFtZSA9PT0gJ2NvbXAtb3AnKSB7XFxuICAgICAgICAgICAgICAgIGNvbXBfb3AucHVzaChkZWZpbml0aW9uc1tpXS5ydWxlc1tqXSk7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIGlmIChkZWZpbml0aW9uc1tpXS5ydWxlc1tqXS5uYW1lID09PSAnb3BhY2l0eScpIHtcXG4gICAgICAgICAgICAgICAgb3BhY2l0eS5wdXNoKGRlZmluaXRpb25zW2ldLnJ1bGVzW2pdKTtcXG4gICAgICAgICAgICB9XFxuICAgICAgICB9XFxuICAgIH1cXG5cXG4gICAgdmFyIHJ1bGVzID0gZGVmaW5pdGlvbnMubWFwKGZ1bmN0aW9uKGRlZmluaXRpb24pIHtcXG4gICAgICAgIHJldHVybiBkZWZpbml0aW9uLnRvWE1MKGVudiwgZXhpc3RpbmcpO1xcbiAgICB9KTtcXG5cXG4gICAgdmFyIGF0dHJzX3htbCA9ICcnO1xcblxcbiAgICBpZiAoaW1hZ2VfZmlsdGVycy5sZW5ndGgpIHtcXG4gICAgICAgIGF0dHJzX3htbCArPSAnIGltYWdlLWZpbHRlcnM9XFxcIicgKyBfLmNoYWluKGltYWdlX2ZpbHRlcnMpXFxuICAgICAgICAgICAgLy8gcHJldmVudCBpZGVudGljYWwgZmlsdGVycyBmcm9tIGJlaW5nIGR1cGxpY2F0ZWQgaW4gdGhlIHN0eWxlXFxuICAgICAgICAgICAgLnVuaXEoZnVuY3Rpb24oaSkgeyByZXR1cm4gaS5pZDsgfSkubWFwKGZ1bmN0aW9uKGYpIHtcXG4gICAgICAgICAgICByZXR1cm4gZi5ldihlbnYpLnRvWE1MKGVudiwgdHJ1ZSwgJywnLCAnaW1hZ2UtZmlsdGVyJyk7XFxuICAgICAgICB9KS52YWx1ZSgpLmpvaW4oJywnKSArICdcXFwiJztcXG4gICAgfVxcblxcbiAgICBpZiAoaW1hZ2VfZmlsdGVyc19pbmZsYXRlLmxlbmd0aCkge1xcbiAgICAgICAgYXR0cnNfeG1sICs9ICcgaW1hZ2UtZmlsdGVycy1pbmZsYXRlPVxcXCInICsgaW1hZ2VfZmlsdGVyc19pbmZsYXRlWzBdLnZhbHVlLmV2KGVudikudG9TdHJpbmcoKSArICdcXFwiJztcXG4gICAgfVxcblxcbiAgICBpZiAoZGlyZWN0X2ltYWdlX2ZpbHRlcnMubGVuZ3RoKSB7XFxuICAgICAgICBhdHRyc194bWwgKz0gJyBkaXJlY3QtaW1hZ2UtZmlsdGVycz1cXFwiJyArIF8uY2hhaW4oZGlyZWN0X2ltYWdlX2ZpbHRlcnMpXFxuICAgICAgICAgICAgLy8gcHJldmVudCBpZGVudGljYWwgZmlsdGVycyBmcm9tIGJlaW5nIGR1cGxpY2F0ZWQgaW4gdGhlIHN0eWxlXFxuICAgICAgICAgICAgLnVuaXEoZnVuY3Rpb24oaSkgeyByZXR1cm4gaS5pZDsgfSkubWFwKGZ1bmN0aW9uKGYpIHtcXG4gICAgICAgICAgICByZXR1cm4gZi5ldihlbnYpLnRvWE1MKGVudiwgdHJ1ZSwgJywnLCAnZGlyZWN0LWltYWdlLWZpbHRlcicpO1xcbiAgICAgICAgfSkudmFsdWUoKS5qb2luKCcsJykgKyAnXFxcIic7XFxuICAgIH1cXG5cXG4gICAgaWYgKGNvbXBfb3AubGVuZ3RoICYmIGNvbXBfb3BbMF0udmFsdWUuZXYoZW52KS52YWx1ZSAhPSAnc3JjLW92ZXInKSB7XFxuICAgICAgICBhdHRyc194bWwgKz0gJyBjb21wLW9wPVxcXCInICsgY29tcF9vcFswXS52YWx1ZS5ldihlbnYpLnRvU3RyaW5nKCkgKyAnXFxcIic7XFxuICAgIH1cXG5cXG4gICAgaWYgKG9wYWNpdHkubGVuZ3RoICYmIG9wYWNpdHlbMF0udmFsdWUuZXYoZW52KS52YWx1ZSAhPSAxKSB7XFxuICAgICAgICBhdHRyc194bWwgKz0gJyBvcGFjaXR5PVxcXCInICsgb3BhY2l0eVswXS52YWx1ZS5ldihlbnYpLnRvU3RyaW5nKCkgKyAnXFxcIic7XFxuICAgIH1cXG4gICAgdmFyIHJ1bGVfc3RyaW5nID0gcnVsZXMuam9pbignJyk7XFxuICAgIGlmICghYXR0cnNfeG1sICYmICFydWxlX3N0cmluZykgcmV0dXJuICcnO1xcbiAgICByZXR1cm4gJzxTdHlsZSBuYW1lPVxcXCInICsgbmFtZSArICdcXFwiIGZpbHRlci1tb2RlPVxcXCJmaXJzdFxcXCInICsgYXR0cnNfeG1sICsgJz5cXFxcbicgKyBydWxlX3N0cmluZyArICc8L1N0eWxlPic7XFxufTtcXG5cXG59KShfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi90cmVlICovIDApKTtcXG5cXG4vKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi99LmNhbGwoZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi8uLi8uLi8uLi8uLi93ZWJwYWNrL2J1aWxkaW4vZ2xvYmFsLmpzICovIDMpKSkvLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaU1UQTRMbXB6SWl3aWMyOTFjbU5sY3lJNld5SjNaV0p3WVdOck9pOHZMeTR2Zmk5allYSjBieTlzYVdJdlkyRnlkRzh2ZEhKbFpTOXpkSGxzWlM1cWN6OHlOalUwSWwwc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYklpaG1kVzVqZEdsdmJpaDBjbVZsS1NCN1hHNTJZWElnWHlBOUlHZHNiMkpoYkM1ZklIeDhJSEpsY1hWcGNtVW9KM1Z1WkdWeWMyTnZjbVVuS1R0Y2JseHVMeThnUjJsMlpXNGdZU0J6ZEhsc1pTZHpJRzVoYldVc0lHRjBkR0ZqYUcxbGJuUXNJR1JsWm1sdWFYUnBiMjV6TENCaGJtUWdZVzRnWlc1MmFYSnZibTFsYm5RZ2IySnFaV04wTEZ4dUx5OGdjbVYwZFhKdUlHRWdjM1J5YVc1bmFXWnBaV1FnYzNSNWJHVWdabTl5SUUxaGNHNXBhMXh1ZEhKbFpTNVRkSGxzWlZoTlRDQTlJR1oxYm1OMGFXOXVLRzVoYldVc0lHRjBkR0ZqYUcxbGJuUXNJR1JsWm1sdWFYUnBiMjV6TENCbGJuWXBJSHRjYmlBZ0lDQjJZWElnWlhocGMzUnBibWNnUFNCN2ZUdGNiaUFnSUNCMllYSWdhVzFoWjJWZlptbHNkR1Z5Y3lBOUlGdGRMQ0JwYldGblpWOW1hV3gwWlhKelgybHVabXhoZEdVZ1BTQmJYU3dnWkdseVpXTjBYMmx0WVdkbFgyWnBiSFJsY25NZ1BTQmJYU3dnWTI5dGNGOXZjQ0E5SUZ0ZExDQnZjR0ZqYVhSNUlEMGdXMTA3WEc1Y2JpQWdJQ0JtYjNJZ0tIWmhjaUJwSUQwZ01Ec2dhU0E4SUdSbFptbHVhWFJwYjI1ekxteGxibWQwYURzZ2FTc3JLU0I3WEc0Z0lDQWdJQ0FnSUdadmNpQW9kbUZ5SUdvZ1BTQXdPeUJxSUR3Z1pHVm1hVzVwZEdsdmJuTmJhVjB1Y25Wc1pYTXViR1Z1WjNSb095QnFLeXNwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoa1pXWnBibWwwYVc5dWMxdHBYUzV5ZFd4bGMxdHFYUzV1WVcxbElEMDlQU0FuYVcxaFoyVXRabWxzZEdWeWN5Y3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwYldGblpWOW1hV3gwWlhKekxuQjFjMmdvWkdWbWFXNXBkR2x2Ym5OYmFWMHVjblZzWlhOYmFsMHBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHUmxabWx1YVhScGIyNXpXMmxkTG5KMWJHVnpXMnBkTG01aGJXVWdQVDA5SUNkcGJXRm5aUzFtYVd4MFpYSnpMV2x1Wm14aGRHVW5LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVcxaFoyVmZabWxzZEdWeWMxOXBibVpzWVhSbExuQjFjMmdvWkdWbWFXNXBkR2x2Ym5OYmFWMHVjblZzWlhOYmFsMHBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHUmxabWx1YVhScGIyNXpXMmxkTG5KMWJHVnpXMnBkTG01aGJXVWdQVDA5SUNka2FYSmxZM1F0YVcxaFoyVXRabWxzZEdWeWN5Y3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JrYVhKbFkzUmZhVzFoWjJWZlptbHNkR1Z5Y3k1d2RYTm9LR1JsWm1sdWFYUnBiMjV6VzJsZExuSjFiR1Z6VzJwZEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoa1pXWnBibWwwYVc5dWMxdHBYUzV5ZFd4bGMxdHFYUzV1WVcxbElEMDlQU0FuWTI5dGNDMXZjQ2NwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamIyMXdYMjl3TG5CMWMyZ29aR1ZtYVc1cGRHbHZibk5iYVYwdWNuVnNaWE5iYWwwcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0dSbFptbHVhWFJwYjI1elcybGRMbkoxYkdWelcycGRMbTVoYldVZ1BUMDlJQ2R2Y0dGamFYUjVKeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUc5d1lXTnBkSGt1Y0hWemFDaGtaV1pwYm1sMGFXOXVjMXRwWFM1eWRXeGxjMXRxWFNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5WEc1Y2JpQWdJQ0IyWVhJZ2NuVnNaWE1nUFNCa1pXWnBibWwwYVc5dWN5NXRZWEFvWm5WdVkzUnBiMjRvWkdWbWFXNXBkR2x2YmlrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1pHVm1hVzVwZEdsdmJpNTBiMWhOVENobGJuWXNJR1Y0YVhOMGFXNW5LVHRjYmlBZ0lDQjlLVHRjYmx4dUlDQWdJSFpoY2lCaGRIUnljMTk0Yld3Z1BTQW5KenRjYmx4dUlDQWdJR2xtSUNocGJXRm5aVjltYVd4MFpYSnpMbXhsYm1kMGFDa2dlMXh1SUNBZ0lDQWdJQ0JoZEhSeWMxOTRiV3dnS3owZ0p5QnBiV0ZuWlMxbWFXeDBaWEp6UFZ3aUp5QXJJRjh1WTJoaGFXNG9hVzFoWjJWZlptbHNkR1Z5Y3lsY2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUhCeVpYWmxiblFnYVdSbGJuUnBZMkZzSUdacGJIUmxjbk1nWm5KdmJTQmlaV2x1WnlCa2RYQnNhV05oZEdWa0lHbHVJSFJvWlNCemRIbHNaVnh1SUNBZ0lDQWdJQ0FnSUNBZ0xuVnVhWEVvWm5WdVkzUnBiMjRvYVNrZ2V5QnlaWFIxY200Z2FTNXBaRHNnZlNrdWJXRndLR1oxYm1OMGFXOXVLR1lwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQm1MbVYyS0dWdWRpa3VkRzlZVFV3b1pXNTJMQ0IwY25WbExDQW5MQ2NzSUNkcGJXRm5aUzFtYVd4MFpYSW5LVHRjYmlBZ0lDQWdJQ0FnZlNrdWRtRnNkV1VvS1M1cWIybHVLQ2NzSnlrZ0t5QW5YQ0luTzF4dUlDQWdJSDFjYmx4dUlDQWdJR2xtSUNocGJXRm5aVjltYVd4MFpYSnpYMmx1Wm14aGRHVXViR1Z1WjNSb0tTQjdYRzRnSUNBZ0lDQWdJR0YwZEhKelgzaHRiQ0FyUFNBbklHbHRZV2RsTFdacGJIUmxjbk10YVc1bWJHRjBaVDFjSWljZ0t5QnBiV0ZuWlY5bWFXeDBaWEp6WDJsdVpteGhkR1ZiTUYwdWRtRnNkV1V1WlhZb1pXNTJLUzUwYjFOMGNtbHVaeWdwSUNzZ0oxd2lKenRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnBaaUFvWkdseVpXTjBYMmx0WVdkbFgyWnBiSFJsY25NdWJHVnVaM1JvS1NCN1hHNGdJQ0FnSUNBZ0lHRjBkSEp6WDNodGJDQXJQU0FuSUdScGNtVmpkQzFwYldGblpTMW1hV3gwWlhKelBWd2lKeUFySUY4dVkyaGhhVzRvWkdseVpXTjBYMmx0WVdkbFgyWnBiSFJsY25NcFhHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCd2NtVjJaVzUwSUdsa1pXNTBhV05oYkNCbWFXeDBaWEp6SUdaeWIyMGdZbVZwYm1jZ1pIVndiR2xqWVhSbFpDQnBiaUIwYUdVZ2MzUjViR1ZjYmlBZ0lDQWdJQ0FnSUNBZ0lDNTFibWx4S0daMWJtTjBhVzl1S0drcElIc2djbVYwZFhKdUlHa3VhV1E3SUgwcExtMWhjQ2htZFc1amRHbHZiaWhtS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdaaTVsZGlobGJuWXBMblJ2V0UxTUtHVnVkaXdnZEhKMVpTd2dKeXduTENBblpHbHlaV04wTFdsdFlXZGxMV1pwYkhSbGNpY3BPMXh1SUNBZ0lDQWdJQ0I5S1M1MllXeDFaU2dwTG1wdmFXNG9KeXduS1NBcklDZGNJaWM3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdhV1lnS0dOdmJYQmZiM0F1YkdWdVozUm9JQ1ltSUdOdmJYQmZiM0JiTUYwdWRtRnNkV1V1WlhZb1pXNTJLUzUyWVd4MVpTQWhQU0FuYzNKakxXOTJaWEluS1NCN1hHNGdJQ0FnSUNBZ0lHRjBkSEp6WDNodGJDQXJQU0FuSUdOdmJYQXRiM0E5WENJbklDc2dZMjl0Y0Y5dmNGc3dYUzUyWVd4MVpTNWxkaWhsYm5ZcExuUnZVM1J5YVc1bktDa2dLeUFuWENJbk8xeHVJQ0FnSUgxY2JseHVJQ0FnSUdsbUlDaHZjR0ZqYVhSNUxteGxibWQwYUNBbUppQnZjR0ZqYVhSNVd6QmRMblpoYkhWbExtVjJLR1Z1ZGlrdWRtRnNkV1VnSVQwZ01Ta2dlMXh1SUNBZ0lDQWdJQ0JoZEhSeWMxOTRiV3dnS3owZ0p5QnZjR0ZqYVhSNVBWd2lKeUFySUc5d1lXTnBkSGxiTUYwdWRtRnNkV1V1WlhZb1pXNTJLUzUwYjFOMGNtbHVaeWdwSUNzZ0oxd2lKenRjYmlBZ0lDQjlYRzRnSUNBZ2RtRnlJSEoxYkdWZmMzUnlhVzVuSUQwZ2NuVnNaWE11YW05cGJpZ25KeWs3WEc0Z0lDQWdhV1lnS0NGaGRIUnljMTk0Yld3Z0ppWWdJWEoxYkdWZmMzUnlhVzVuS1NCeVpYUjFjbTRnSnljN1hHNGdJQ0FnY21WMGRYSnVJQ2M4VTNSNWJHVWdibUZ0WlQxY0lpY2dLeUJ1WVcxbElDc2dKMXdpSUdacGJIUmxjaTF0YjJSbFBWd2labWx5YzNSY0lpY2dLeUJoZEhSeWMxOTRiV3dnS3lBblBseGNiaWNnS3lCeWRXeGxYM04wY21sdVp5QXJJQ2M4TDFOMGVXeGxQaWM3WEc1OU8xeHVYRzU5S1NoeVpYRjFhWEpsS0NjdUxpOTBjbVZsSnlrcE8xeHVYRzVjYmx4dUx5OHZMeTh2THk4dkx5OHZMeTh2THk4dlhHNHZMeUJYUlVKUVFVTkxJRVpQVDFSRlVseHVMeThnTGk5K0wyTmhjblJ2TDJ4cFlpOWpZWEowYnk5MGNtVmxMM04wZVd4bExtcHpYRzR2THlCdGIyUjFiR1VnYVdRZ1BTQXhNRGhjYmk4dklHMXZaSFZzWlNCamFIVnVhM01nUFNBd0lsMHNJbTFoY0hCcGJtZHpJam9pUVVGQlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCSWl3aWMyOTFjbU5sVW05dmRDSTZJaUo5XCIpO1xuXG4vKioqLyB9KSxcbi8qIDEwOSAqL1xuLyogbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9cbi8qIGFsbCBleHBvcnRzIHVzZWQgKi9cbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL34vY2FydG8vbGliL2NhcnRvL3RyZWUvdXJsLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbmV2YWwoXCIoZnVuY3Rpb24odHJlZSkge1xcblxcbnRyZWUuVVJMID0gZnVuY3Rpb24gVVJMKHZhbCwgcGF0aHMpIHtcXG4gICAgdGhpcy52YWx1ZSA9IHZhbDtcXG4gICAgdGhpcy5wYXRocyA9IHBhdGhzO1xcbn07XFxuXFxudHJlZS5VUkwucHJvdG90eXBlID0ge1xcbiAgICBpczogJ3VyaScsXFxuICAgIHRvU3RyaW5nOiBmdW5jdGlvbigpIHtcXG4gICAgICAgIHJldHVybiB0aGlzLnZhbHVlLnRvU3RyaW5nKCk7XFxuICAgIH0sXFxuICAgIGV2OiBmdW5jdGlvbihjdHgpIHtcXG4gICAgICAgIHJldHVybiBuZXcgdHJlZS5VUkwodGhpcy52YWx1ZS5ldihjdHgpLCB0aGlzLnBhdGhzKTtcXG4gICAgfVxcbn07XFxuXFxufSkoX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vdHJlZSAqLyAwKSk7XFxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lNVEE1TG1weklpd2ljMjkxY21ObGN5STZXeUozWldKd1lXTnJPaTh2THk0dmZpOWpZWEowYnk5c2FXSXZZMkZ5ZEc4dmRISmxaUzkxY213dWFuTS9Oak5oWWlKZExDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SW9ablZ1WTNScGIyNG9kSEpsWlNrZ2UxeHVYRzUwY21WbExsVlNUQ0E5SUdaMWJtTjBhVzl1SUZWU1RDaDJZV3dzSUhCaGRHaHpLU0I3WEc0Z0lDQWdkR2hwY3k1MllXeDFaU0E5SUhaaGJEdGNiaUFnSUNCMGFHbHpMbkJoZEdoeklEMGdjR0YwYUhNN1hHNTlPMXh1WEc1MGNtVmxMbFZTVEM1d2NtOTBiM1I1Y0dVZ1BTQjdYRzRnSUNBZ2FYTTZJQ2QxY21rbkxGeHVJQ0FnSUhSdlUzUnlhVzVuT2lCbWRXNWpkR2x2YmlncElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11ZG1Gc2RXVXVkRzlUZEhKcGJtY29LVHRjYmlBZ0lDQjlMRnh1SUNBZ0lHVjJPaUJtZFc1amRHbHZiaWhqZEhncElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHNWxkeUIwY21WbExsVlNUQ2gwYUdsekxuWmhiSFZsTG1WMktHTjBlQ2tzSUhSb2FYTXVjR0YwYUhNcE8xeHVJQ0FnSUgxY2JuMDdYRzVjYm4wcEtISmxjWFZwY21Vb0p5NHVMM1J5WldVbktTazdYRzVjYmx4dVhHNHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OWNiaTh2SUZkRlFsQkJRMHNnUms5UFZFVlNYRzR2THlBdUwzNHZZMkZ5ZEc4dmJHbGlMMk5oY25SdkwzUnlaV1V2ZFhKc0xtcHpYRzR2THlCdGIyUjFiR1VnYVdRZ1BTQXhNRGxjYmk4dklHMXZaSFZzWlNCamFIVnVhM01nUFNBd0lsMHNJbTFoY0hCcGJtZHpJam9pUVVGQlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3SWl3aWMyOTFjbU5sVW05dmRDSTZJaUo5XCIpO1xuXG4vKioqLyB9KSxcbi8qIDExMCAqL1xuLyogbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9cbi8qIGFsbCBleHBvcnRzIHVzZWQgKi9cbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vfi9jYXJ0by9saWIvY2FydG8vdHJlZS92YWx1ZS5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbmV2YWwoXCIoZnVuY3Rpb24odHJlZSkge1xcblxcbnRyZWUuVmFsdWUgPSBmdW5jdGlvbiBWYWx1ZSh2YWx1ZSkge1xcbiAgICB0aGlzLnZhbHVlID0gdmFsdWU7XFxufTtcXG5cXG50cmVlLlZhbHVlLnByb3RvdHlwZSA9IHtcXG4gICAgaXM6ICd2YWx1ZScsXFxuICAgIGV2OiBmdW5jdGlvbihlbnYpIHtcXG4gICAgICAgIGlmICh0aGlzLnZhbHVlLmxlbmd0aCA9PT0gMSkge1xcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnZhbHVlWzBdLmV2KGVudik7XFxuICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICAgIHJldHVybiBuZXcgdHJlZS5WYWx1ZSh0aGlzLnZhbHVlLm1hcChmdW5jdGlvbih2KSB7XFxuICAgICAgICAgICAgICAgIHJldHVybiB2LmV2KGVudik7XFxuICAgICAgICAgICAgfSkpO1xcbiAgICAgICAgfVxcbiAgICB9LFxcbiAgICB0b1N0cmluZzogZnVuY3Rpb24oZW52LCBzZWxlY3Rvciwgc2VwLCBmb3JtYXQpIHtcXG4gICAgICAgIHJldHVybiB0aGlzLnZhbHVlLm1hcChmdW5jdGlvbihlKSB7XFxuICAgICAgICAgICAgcmV0dXJuIGUudG9TdHJpbmcoZW52LCBmb3JtYXQpO1xcbiAgICAgICAgfSkuam9pbihzZXAgfHwgJywgJyk7XFxuICAgIH0sXFxuICAgIGNsb25lOiBmdW5jdGlvbigpIHtcXG4gICAgICAgIHZhciBvYmogPSBPYmplY3QuY3JlYXRlKHRyZWUuVmFsdWUucHJvdG90eXBlKTtcXG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KG9iaikpIG9iai52YWx1ZSA9IHRoaXMudmFsdWUuc2xpY2UoKTtcXG4gICAgICAgIGVsc2Ugb2JqLnZhbHVlID0gdGhpcy52YWx1ZTtcXG4gICAgICAgIG9iai5pcyA9IHRoaXMuaXM7XFxuICAgICAgICByZXR1cm4gb2JqO1xcbiAgICB9LFxcblxcbiAgICB0b0pTOiBmdW5jdGlvbihlbnYpIHtcXG4gICAgICAvL3ZhciB2ID0gdGhpcy52YWx1ZVswXS52YWx1ZVswXTtcXG4gICAgICB2YXIgdmFsID0gdGhpcy5ldihlbnYpO1xcbiAgICAgIHZhciB2ID0gdmFsLnRvU3RyaW5nKCk7XFxuICAgICAgaWYodmFsLmlzID09PSBcXFwiY29sb3JcXFwiIHx8IHZhbC5pcyA9PT0gJ3VyaScgfHwgdmFsLmlzID09PSAnc3RyaW5nJyB8fCB2YWwuaXMgPT09ICdrZXl3b3JkJykge1xcbiAgICAgICAgdiA9IFxcXCInXFxcIiArIHYgKyBcXFwiJ1xcXCI7XFxuICAgICAgfSBlbHNlIGlmICh2YWwuaXMgPT09ICdmaWVsZCcpIHtcXG4gICAgICAgIC8vIHJlcGxhY2UgW3ZhcmlhYmxlXSBieSBjdHhbJ3ZhcmlhYmxlJ11cXG4gICAgICAgIHYgPSB2LnJlcGxhY2UoL1xcXFxbKFteXFxcXF1dKilcXFxcXS9nLCBmdW5jdGlvbihtYXRjaGVkKSB7XFxuICAgICAgICAgICAgcmV0dXJuIG1hdGNoZWQucmVwbGFjZSgvXFxcXFsoLiopXFxcXF0vZywgXFxcImRhdGFbJyQxJ11cXFwiKTtcXG4gICAgICAgIH0pO1xcbiAgICAgIH1lbHNlIGlmICh2YWwuaXMgPT09ICdjYWxsJykge1xcbiAgICAgICAgdiA9IEpTT04uc3RyaW5naWZ5KHtcXG4gICAgICAgICAgICBuYW1lOiB2YWwubmFtZSxcXG4gICAgICAgICAgICBhcmdzOiB2YWwuYXJnc1xcbiAgICAgICAgfSlcXG4gICAgICB9XFxuICAgICAgcmV0dXJuIFxcXCJfdmFsdWUgPSBcXFwiICsgdiArIFxcXCI7XFxcIjtcXG4gICAgfVxcblxcbn07XFxuXFxufSkoX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vdHJlZSAqLyAwKSk7XFxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lNVEV3TG1weklpd2ljMjkxY21ObGN5STZXeUozWldKd1lXTnJPaTh2THk0dmZpOWpZWEowYnk5c2FXSXZZMkZ5ZEc4dmRISmxaUzkyWVd4MVpTNXFjejltTmpnMUlsMHNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJaWhtZFc1amRHbHZiaWgwY21WbEtTQjdYRzVjYm5SeVpXVXVWbUZzZFdVZ1BTQm1kVzVqZEdsdmJpQldZV3gxWlNoMllXeDFaU2tnZTF4dUlDQWdJSFJvYVhNdWRtRnNkV1VnUFNCMllXeDFaVHRjYm4wN1hHNWNiblJ5WldVdVZtRnNkV1V1Y0hKdmRHOTBlWEJsSUQwZ2UxeHVJQ0FnSUdsek9pQW5kbUZzZFdVbkxGeHVJQ0FnSUdWMk9pQm1kVzVqZEdsdmJpaGxibllwSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdWRtRnNkV1V1YkdWdVozUm9JRDA5UFNBeEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NTJZV3gxWlZzd1hTNWxkaWhsYm5ZcE8xeHVJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJRzVsZHlCMGNtVmxMbFpoYkhWbEtIUm9hWE11ZG1Gc2RXVXViV0Z3S0daMWJtTjBhVzl1S0hZcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2RpNWxkaWhsYm5ZcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlNrcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ2ZTeGNiaUFnSUNCMGIxTjBjbWx1WnpvZ1puVnVZM1JwYjI0b1pXNTJMQ0J6Wld4bFkzUnZjaXdnYzJWd0xDQm1iM0p0WVhRcElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11ZG1Gc2RXVXViV0Z3S0daMWJtTjBhVzl1S0dVcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJsTG5SdlUzUnlhVzVuS0dWdWRpd2dabTl5YldGMEtUdGNiaUFnSUNBZ0lDQWdmU2t1YW05cGJpaHpaWEFnZkh3Z0p5d2dKeWs3WEc0Z0lDQWdmU3hjYmlBZ0lDQmpiRzl1WlRvZ1puVnVZM1JwYjI0b0tTQjdYRzRnSUNBZ0lDQWdJSFpoY2lCdlltb2dQU0JQWW1wbFkzUXVZM0psWVhSbEtIUnlaV1V1Vm1Gc2RXVXVjSEp2ZEc5MGVYQmxLVHRjYmlBZ0lDQWdJQ0FnYVdZZ0tFRnljbUY1TG1selFYSnlZWGtvYjJKcUtTa2diMkpxTG5aaGJIVmxJRDBnZEdocGN5NTJZV3gxWlM1emJHbGpaU2dwTzF4dUlDQWdJQ0FnSUNCbGJITmxJRzlpYWk1MllXeDFaU0E5SUhSb2FYTXVkbUZzZFdVN1hHNGdJQ0FnSUNBZ0lHOWlhaTVwY3lBOUlIUm9hWE11YVhNN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCdlltbzdYRzRnSUNBZ2ZTeGNibHh1SUNBZ0lIUnZTbE02SUdaMWJtTjBhVzl1S0dWdWRpa2dlMXh1SUNBZ0lDQWdMeTkyWVhJZ2RpQTlJSFJvYVhNdWRtRnNkV1ZiTUYwdWRtRnNkV1ZiTUYwN1hHNGdJQ0FnSUNCMllYSWdkbUZzSUQwZ2RHaHBjeTVsZGlobGJuWXBPMXh1SUNBZ0lDQWdkbUZ5SUhZZ1BTQjJZV3d1ZEc5VGRISnBibWNvS1R0Y2JpQWdJQ0FnSUdsbUtIWmhiQzVwY3lBOVBUMGdYQ0pqYjJ4dmNsd2lJSHg4SUhaaGJDNXBjeUE5UFQwZ0ozVnlhU2NnZkh3Z2RtRnNMbWx6SUQwOVBTQW5jM1J5YVc1bkp5QjhmQ0IyWVd3dWFYTWdQVDA5SUNkclpYbDNiM0prSnlrZ2UxeHVJQ0FnSUNBZ0lDQjJJRDBnWENJblhDSWdLeUIySUNzZ1hDSW5YQ0k3WEc0Z0lDQWdJQ0I5SUdWc2MyVWdhV1lnS0haaGJDNXBjeUE5UFQwZ0oyWnBaV3hrSnlrZ2UxeHVJQ0FnSUNBZ0lDQXZMeUJ5WlhCc1lXTmxJRnQyWVhKcFlXSnNaVjBnWW5rZ1kzUjRXeWQyWVhKcFlXSnNaU2RkWEc0Z0lDQWdJQ0FnSUhZZ1BTQjJMbkpsY0d4aFkyVW9MMXhjV3loYlhseGNYVjBxS1Z4Y1hTOW5MQ0JtZFc1amRHbHZiaWh0WVhSamFHVmtLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2JXRjBZMmhsWkM1eVpYQnNZV05sS0M5Y1hGc29MaW9wWEZ4ZEwyY3NJRndpWkdGMFlWc25KREVuWFZ3aUtUdGNiaUFnSUNBZ0lDQWdmU2s3WEc0Z0lDQWdJQ0I5Wld4elpTQnBaaUFvZG1Gc0xtbHpJRDA5UFNBblkyRnNiQ2NwSUh0Y2JpQWdJQ0FnSUNBZ2RpQTlJRXBUVDA0dWMzUnlhVzVuYVdaNUtIdGNiaUFnSUNBZ0lDQWdJQ0FnSUc1aGJXVTZJSFpoYkM1dVlXMWxMRnh1SUNBZ0lDQWdJQ0FnSUNBZ1lYSm5jem9nZG1Gc0xtRnlaM05jYmlBZ0lDQWdJQ0FnZlNsY2JpQWdJQ0FnSUgxY2JpQWdJQ0FnSUhKbGRIVnliaUJjSWw5MllXeDFaU0E5SUZ3aUlDc2dkaUFySUZ3aU8xd2lPMXh1SUNBZ0lIMWNibHh1ZlR0Y2JseHVmU2tvY21WeGRXbHlaU2duTGk0dmRISmxaU2NwS1R0Y2JseHVYRzVjYmk4dkx5OHZMeTh2THk4dkx5OHZMeTh2TDF4dUx5OGdWMFZDVUVGRFN5QkdUMDlVUlZKY2JpOHZJQzR2Zmk5allYSjBieTlzYVdJdlkyRnlkRzh2ZEhKbFpTOTJZV3gxWlM1cWMxeHVMeThnYlc5a2RXeGxJR2xrSUQwZ01URXdYRzR2THlCdGIyUjFiR1VnWTJoMWJtdHpJRDBnTUNKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzaUxDSnpiM1Z5WTJWU2IyOTBJam9pSW4wPVwiKTtcblxuLyoqKi8gfSksXG4vKiAxMTEgKi9cbi8qIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKiBhbGwgZXhwb3J0cyB1c2VkICovXG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL34vY2FydG8vbGliL2NhcnRvL3RyZWUvdmFyaWFibGUuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5ldmFsKFwiKGZ1bmN0aW9uKHRyZWUpIHtcXG5cXG50cmVlLlZhcmlhYmxlID0gZnVuY3Rpb24gVmFyaWFibGUobmFtZSwgaW5kZXgsIGZpbGVuYW1lKSB7XFxuICAgIHRoaXMubmFtZSA9IG5hbWU7XFxuICAgIHRoaXMuaW5kZXggPSBpbmRleDtcXG4gICAgdGhpcy5maWxlbmFtZSA9IGZpbGVuYW1lO1xcbn07XFxuXFxudHJlZS5WYXJpYWJsZS5wcm90b3R5cGUgPSB7XFxuICAgIGlzOiAndmFyaWFibGUnLFxcbiAgICB0b1N0cmluZzogZnVuY3Rpb24oKSB7XFxuICAgICAgICByZXR1cm4gdGhpcy5uYW1lO1xcbiAgICB9LFxcbiAgICBldjogZnVuY3Rpb24oZW52KSB7XFxuICAgICAgICB2YXIgdmFyaWFibGUsXFxuICAgICAgICAgICAgdixcXG4gICAgICAgICAgICBuYW1lID0gdGhpcy5uYW1lO1xcblxcbiAgICAgICAgaWYgKHRoaXMuX2NzcykgcmV0dXJuIHRoaXMuX2NzcztcXG5cXG4gICAgICAgIHZhciB0aGlzZnJhbWUgPSBlbnYuZnJhbWVzLmZpbHRlcihmdW5jdGlvbihmKSB7XFxuICAgICAgICAgICAgcmV0dXJuIGYubmFtZSA9PSB0aGlzLm5hbWU7XFxuICAgICAgICB9LmJpbmQodGhpcykpO1xcbiAgICAgICAgaWYgKHRoaXNmcmFtZS5sZW5ndGgpIHtcXG4gICAgICAgICAgICByZXR1cm4gdGhpc2ZyYW1lWzBdLnZhbHVlLmV2KGVudik7XFxuICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICAgIGVudi5lcnJvcih7XFxuICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICd2YXJpYWJsZSAnICsgdGhpcy5uYW1lICsgJyBpcyB1bmRlZmluZWQnLFxcbiAgICAgICAgICAgICAgICBpbmRleDogdGhpcy5pbmRleCxcXG4gICAgICAgICAgICAgICAgdHlwZTogJ3J1bnRpbWUnLFxcbiAgICAgICAgICAgICAgICBmaWxlbmFtZTogdGhpcy5maWxlbmFtZVxcbiAgICAgICAgICAgIH0pO1xcbiAgICAgICAgICAgIHJldHVybiB7XFxuICAgICAgICAgICAgICAgIGlzOiAndW5kZWZpbmVkJyxcXG4gICAgICAgICAgICAgICAgdmFsdWU6ICd1bmRlZmluZWQnXFxuICAgICAgICAgICAgfTtcXG4gICAgICAgIH1cXG4gICAgfVxcbn07XFxuXFxufSkoX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vdHJlZSAqLyAwKSk7XFxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lNVEV4TG1weklpd2ljMjkxY21ObGN5STZXeUozWldKd1lXTnJPaTh2THk0dmZpOWpZWEowYnk5c2FXSXZZMkZ5ZEc4dmRISmxaUzkyWVhKcFlXSnNaUzVxY3o5aVlXTmhJbDBzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSWlobWRXNWpkR2x2YmloMGNtVmxLU0I3WEc1Y2JuUnlaV1V1Vm1GeWFXRmliR1VnUFNCbWRXNWpkR2x2YmlCV1lYSnBZV0pzWlNodVlXMWxMQ0JwYm1SbGVDd2dabWxzWlc1aGJXVXBJSHRjYmlBZ0lDQjBhR2x6TG01aGJXVWdQU0J1WVcxbE8xeHVJQ0FnSUhSb2FYTXVhVzVrWlhnZ1BTQnBibVJsZUR0Y2JpQWdJQ0IwYUdsekxtWnBiR1Z1WVcxbElEMGdabWxzWlc1aGJXVTdYRzU5TzF4dVhHNTBjbVZsTGxaaGNtbGhZbXhsTG5CeWIzUnZkSGx3WlNBOUlIdGNiaUFnSUNCcGN6b2dKM1poY21saFlteGxKeXhjYmlBZ0lDQjBiMU4wY21sdVp6b2dablZ1WTNScGIyNG9LU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxtNWhiV1U3WEc0Z0lDQWdmU3hjYmlBZ0lDQmxkam9nWm5WdVkzUnBiMjRvWlc1MktTQjdYRzRnSUNBZ0lDQWdJSFpoY2lCMllYSnBZV0pzWlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJSFlzWEc0Z0lDQWdJQ0FnSUNBZ0lDQnVZVzFsSUQwZ2RHaHBjeTV1WVcxbE8xeHVYRzRnSUNBZ0lDQWdJR2xtSUNoMGFHbHpMbDlqYzNNcElISmxkSFZ5YmlCMGFHbHpMbDlqYzNNN1hHNWNiaUFnSUNBZ0lDQWdkbUZ5SUhSb2FYTm1jbUZ0WlNBOUlHVnVkaTVtY21GdFpYTXVabWxzZEdWeUtHWjFibU4wYVc5dUtHWXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCbUxtNWhiV1VnUFQwZ2RHaHBjeTV1WVcxbE8xeHVJQ0FnSUNBZ0lDQjlMbUpwYm1Rb2RHaHBjeWtwTzF4dUlDQWdJQ0FnSUNCcFppQW9kR2hwYzJaeVlXMWxMbXhsYm1kMGFDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTm1jbUZ0WlZzd1hTNTJZV3gxWlM1bGRpaGxibllwTzF4dUlDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdaVzUyTG1WeWNtOXlLSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J0WlhOellXZGxPaUFuZG1GeWFXRmliR1VnSnlBcklIUm9hWE11Ym1GdFpTQXJJQ2NnYVhNZ2RXNWtaV1pwYm1Wa0p5eGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBibVJsZURvZ2RHaHBjeTVwYm1SbGVDeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBlWEJsT2lBbmNuVnVkR2x0WlNjc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1ptbHNaVzVoYldVNklIUm9hWE11Wm1sc1pXNWhiV1ZjYmlBZ0lDQWdJQ0FnSUNBZ0lIMHBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcGN6b2dKM1Z1WkdWbWFXNWxaQ2NzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1Gc2RXVTZJQ2QxYm1SbFptbHVaV1FuWEc0Z0lDQWdJQ0FnSUNBZ0lDQjlPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdmVnh1ZlR0Y2JseHVmU2tvY21WeGRXbHlaU2duTGk0dmRISmxaU2NwS1R0Y2JseHVYRzVjYmk4dkx5OHZMeTh2THk4dkx5OHZMeTh2TDF4dUx5OGdWMFZDVUVGRFN5QkdUMDlVUlZKY2JpOHZJQzR2Zmk5allYSjBieTlzYVdJdlkyRnlkRzh2ZEhKbFpTOTJZWEpwWVdKc1pTNXFjMXh1THk4Z2JXOWtkV3hsSUdsa0lEMGdNVEV4WEc0dkx5QnRiMlIxYkdVZ1kyaDFibXR6SUQwZ01DSmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHNpTENKemIzVnlZMlZTYjI5MElqb2lJbjA9XCIpO1xuXG4vKioqLyB9KSxcbi8qIDExMiAqL1xuLyogbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9cbi8qIGFsbCBleHBvcnRzIHVzZWQgKi9cbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9+L2NhcnRvL2xpYi9jYXJ0by90cmVlL3pvb20uanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbmV2YWwoXCJ2YXIgdHJlZSA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL3RyZWUgKi8gMCk7XFxuXFxuLy8gU3RvcmFnZSBmb3Igem9vbSByYW5nZXMuIE9ubHkgc3VwcG9ydHMgY29udGludW91cyByYW5nZXMsXFxuLy8gYW5kIHN0b3JlcyB0aGVtIGFzIGJpdC1zZXF1ZW5jZXMgc28gdGhhdCB0aGV5IGNhbiBiZSBjb21iaW5lZCxcXG4vLyBpbnZlcnRlZCwgYW5kIGNvbXBhcmVkIHF1aWNrbHkuXFxudHJlZS5ab29tID0gZnVuY3Rpb24ob3AsIHZhbHVlLCBpbmRleCkge1xcbiAgICB0aGlzLm9wID0gb3A7XFxuICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcXG4gICAgdGhpcy5pbmRleCA9IGluZGV4O1xcbn07XFxuXFxudHJlZS5ab29tLnByb3RvdHlwZS5zZXRab29tID0gZnVuY3Rpb24oem9vbSkge1xcbiAgICB0aGlzLnpvb20gPSB6b29tO1xcbiAgICByZXR1cm4gdGhpcztcXG59O1xcblxcbnRyZWUuWm9vbS5wcm90b3R5cGUuZXYgPSBmdW5jdGlvbihlbnYpIHtcXG4gICAgdmFyIHN0YXJ0ID0gMCxcXG4gICAgICAgIGVuZCA9IEluZmluaXR5LFxcbiAgICAgICAgdmFsdWUgPSBwYXJzZUludCh0aGlzLnZhbHVlLmV2KGVudikudG9TdHJpbmcoKSwgMTApLFxcbiAgICAgICAgem9vbSA9IDA7XFxuXFxuICAgIGlmICh2YWx1ZSA+IHRyZWUuWm9vbS5tYXhab29tIHx8IHZhbHVlIDwgMCkge1xcbiAgICAgICAgZW52LmVycm9yKHtcXG4gICAgICAgICAgICBtZXNzYWdlOiAnT25seSB6b29tIGxldmVscyBiZXR3ZWVuIDAgYW5kICcgK1xcbiAgICAgICAgICAgICAgICB0cmVlLlpvb20ubWF4Wm9vbSArICcgc3VwcG9ydGVkLicsXFxuICAgICAgICAgICAgaW5kZXg6IHRoaXMuaW5kZXhcXG4gICAgICAgIH0pO1xcbiAgICB9XFxuXFxuICAgIHN3aXRjaCAodGhpcy5vcCkge1xcbiAgICAgICAgY2FzZSAnPSc6XFxuICAgICAgICAgICAgdGhpcy56b29tID0gMSA8PCB2YWx1ZTtcXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcXG4gICAgICAgIGNhc2UgJz4nOlxcbiAgICAgICAgICAgIHN0YXJ0ID0gdmFsdWUgKyAxO1xcbiAgICAgICAgICAgIGJyZWFrO1xcbiAgICAgICAgY2FzZSAnPj0nOlxcbiAgICAgICAgICAgIHN0YXJ0ID0gdmFsdWU7XFxuICAgICAgICAgICAgYnJlYWs7XFxuICAgICAgICBjYXNlICc8JzpcXG4gICAgICAgICAgICBlbmQgPSB2YWx1ZSAtIDE7XFxuICAgICAgICAgICAgYnJlYWs7XFxuICAgICAgICBjYXNlICc8PSc6XFxuICAgICAgICAgICAgZW5kID0gdmFsdWU7XFxuICAgICAgICAgICAgYnJlYWs7XFxuICAgIH1cXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPD0gdHJlZS5ab29tLm1heFpvb207IGkrKykge1xcbiAgICAgICAgaWYgKGkgPj0gc3RhcnQgJiYgaSA8PSBlbmQpIHtcXG4gICAgICAgICAgICB6b29tIHw9ICgxIDw8IGkpO1xcbiAgICAgICAgfVxcbiAgICB9XFxuICAgIHRoaXMuem9vbSA9IHpvb207XFxuICAgIHJldHVybiB0aGlzO1xcbn07XFxuXFxudHJlZS5ab29tLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xcbiAgICByZXR1cm4gdGhpcy56b29tO1xcbn07XFxuXFxuLy8gQ292ZXJzIGFsbCB6b29tbGV2ZWxzIGZyb20gMCB0byAyMlxcbnRyZWUuWm9vbS5hbGwgPSAweDdGRkZGRjtcXG5cXG50cmVlLlpvb20ubWF4Wm9vbSA9IDIyO1xcblxcbnRyZWUuWm9vbS5yYW5nZXMgPSB7XFxuICAgICAwOiAxMDAwMDAwMDAwLFxcbiAgICAgMTogNTAwMDAwMDAwLFxcbiAgICAgMjogMjAwMDAwMDAwLFxcbiAgICAgMzogMTAwMDAwMDAwLFxcbiAgICAgNDogNTAwMDAwMDAsXFxuICAgICA1OiAyNTAwMDAwMCxcXG4gICAgIDY6IDEyNTAwMDAwLFxcbiAgICAgNzogNjUwMDAwMCxcXG4gICAgIDg6IDMwMDAwMDAsXFxuICAgICA5OiAxNTAwMDAwLFxcbiAgICAxMDogNzUwMDAwLFxcbiAgICAxMTogNDAwMDAwLFxcbiAgICAxMjogMjAwMDAwLFxcbiAgICAxMzogMTAwMDAwLFxcbiAgICAxNDogNTAwMDAsXFxuICAgIDE1OiAyNTAwMCxcXG4gICAgMTY6IDEyNTAwLFxcbiAgICAxNzogNTAwMCxcXG4gICAgMTg6IDI1MDAsXFxuICAgIDE5OiAxNTAwLFxcbiAgICAyMDogNzUwLFxcbiAgICAyMTogNTAwLFxcbiAgICAyMjogMjUwLFxcbiAgICAyMzogMTAwXFxufTtcXG5cXG4vLyBPbmx5IHdvcmtzIGZvciBzaW5nbGUgcmFuZ2Ugem9vbXMuIGBbWFhYLi4uLlhYWFhYLi4uLi4uLi4uXWAgaXMgaW52YWxpZC5cXG50cmVlLlpvb20ucHJvdG90eXBlLnRvWE1MID0gZnVuY3Rpb24oKSB7XFxuICAgIHZhciBjb25kaXRpb25zID0gW107XFxuICAgIGlmICh0aGlzLnpvb20gIT0gdHJlZS5ab29tLmFsbCkge1xcbiAgICAgICAgdmFyIHN0YXJ0ID0gbnVsbCwgZW5kID0gbnVsbDtcXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDw9IHRyZWUuWm9vbS5tYXhab29tOyBpKyspIHtcXG4gICAgICAgICAgICBpZiAodGhpcy56b29tICYgKDEgPDwgaSkpIHtcXG4gICAgICAgICAgICAgICAgaWYgKHN0YXJ0ID09PSBudWxsKSBzdGFydCA9IGk7XFxuICAgICAgICAgICAgICAgIGVuZCA9IGk7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgfVxcbiAgICAgICAgaWYgKHN0YXJ0ID4gMCkgY29uZGl0aW9ucy5wdXNoKCcgICAgPE1heFNjYWxlRGVub21pbmF0b3I+JyArXFxuICAgICAgICAgICAgdHJlZS5ab29tLnJhbmdlc1tzdGFydF0gKyAnPC9NYXhTY2FsZURlbm9taW5hdG9yPlxcXFxuJyk7XFxuICAgICAgICBpZiAoZW5kIDwgMjIpIGNvbmRpdGlvbnMucHVzaCgnICAgIDxNaW5TY2FsZURlbm9taW5hdG9yPicgK1xcbiAgICAgICAgICAgIHRyZWUuWm9vbS5yYW5nZXNbZW5kICsgMV0gKyAnPC9NaW5TY2FsZURlbm9taW5hdG9yPlxcXFxuJyk7XFxuICAgIH1cXG4gICAgcmV0dXJuIGNvbmRpdGlvbnM7XFxufTtcXG5cXG50cmVlLlpvb20ucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XFxuICAgIHZhciBzdHIgPSAnJztcXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPD0gdHJlZS5ab29tLm1heFpvb207IGkrKykge1xcbiAgICAgICAgc3RyICs9ICh0aGlzLnpvb20gJiAoMSA8PCBpKSkgPyAnWCcgOiAnLic7XFxuICAgIH1cXG4gICAgcmV0dXJuIHN0cjtcXG59O1xcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pTVRFeUxtcHpJaXdpYzI5MWNtTmxjeUk2V3lKM1pXSndZV05yT2k4dkx5NHZmaTlqWVhKMGJ5OXNhV0l2WTJGeWRHOHZkSEpsWlM5NmIyOXRMbXB6UHpkaFlUQWlYU3dpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpZG1GeUlIUnlaV1VnUFNCeVpYRjFhWEpsS0NjdUxpOTBjbVZsSnlrN1hHNWNiaTh2SUZOMGIzSmhaMlVnWm05eUlIcHZiMjBnY21GdVoyVnpMaUJQYm14NUlITjFjSEJ2Y25SeklHTnZiblJwYm5WdmRYTWdjbUZ1WjJWekxGeHVMeThnWVc1a0lITjBiM0psY3lCMGFHVnRJR0Z6SUdKcGRDMXpaWEYxWlc1alpYTWdjMjhnZEdoaGRDQjBhR1Y1SUdOaGJpQmlaU0JqYjIxaWFXNWxaQ3hjYmk4dklHbHVkbVZ5ZEdWa0xDQmhibVFnWTI5dGNHRnlaV1FnY1hWcFkydHNlUzVjYm5SeVpXVXVXbTl2YlNBOUlHWjFibU4wYVc5dUtHOXdMQ0IyWVd4MVpTd2dhVzVrWlhncElIdGNiaUFnSUNCMGFHbHpMbTl3SUQwZ2IzQTdYRzRnSUNBZ2RHaHBjeTUyWVd4MVpTQTlJSFpoYkhWbE8xeHVJQ0FnSUhSb2FYTXVhVzVrWlhnZ1BTQnBibVJsZUR0Y2JuMDdYRzVjYm5SeVpXVXVXbTl2YlM1d2NtOTBiM1I1Y0dVdWMyVjBXbTl2YlNBOUlHWjFibU4wYVc5dUtIcHZiMjBwSUh0Y2JpQWdJQ0IwYUdsekxucHZiMjBnUFNCNmIyOXRPMXh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpPMXh1ZlR0Y2JseHVkSEpsWlM1YWIyOXRMbkJ5YjNSdmRIbHdaUzVsZGlBOUlHWjFibU4wYVc5dUtHVnVkaWtnZTF4dUlDQWdJSFpoY2lCemRHRnlkQ0E5SURBc1hHNGdJQ0FnSUNBZ0lHVnVaQ0E5SUVsdVptbHVhWFI1TEZ4dUlDQWdJQ0FnSUNCMllXeDFaU0E5SUhCaGNuTmxTVzUwS0hSb2FYTXVkbUZzZFdVdVpYWW9aVzUyS1M1MGIxTjBjbWx1WnlncExDQXhNQ2tzWEc0Z0lDQWdJQ0FnSUhwdmIyMGdQU0F3TzF4dVhHNGdJQ0FnYVdZZ0tIWmhiSFZsSUQ0Z2RISmxaUzVhYjI5dExtMWhlRnB2YjIwZ2ZId2dkbUZzZFdVZ1BDQXdLU0I3WEc0Z0lDQWdJQ0FnSUdWdWRpNWxjbkp2Y2loN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J0WlhOellXZGxPaUFuVDI1c2VTQjZiMjl0SUd4bGRtVnNjeUJpWlhSM1pXVnVJREFnWVc1a0lDY2dLMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJ5WldVdVdtOXZiUzV0WVhoYWIyOXRJQ3NnSnlCemRYQndiM0owWldRdUp5eGNiaUFnSUNBZ0lDQWdJQ0FnSUdsdVpHVjRPaUIwYUdsekxtbHVaR1Y0WEc0Z0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUhOM2FYUmphQ0FvZEdocGN5NXZjQ2tnZTF4dUlDQWdJQ0FnSUNCallYTmxJQ2M5SnpwY2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWVtOXZiU0E5SURFZ1BEd2dkbUZzZFdVN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3p0Y2JpQWdJQ0FnSUNBZ1kyRnpaU0FuUGljNlhHNGdJQ0FnSUNBZ0lDQWdJQ0J6ZEdGeWRDQTlJSFpoYkhWbElDc2dNVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHSnlaV0ZyTzF4dUlDQWdJQ0FnSUNCallYTmxJQ2MrUFNjNlhHNGdJQ0FnSUNBZ0lDQWdJQ0J6ZEdGeWRDQTlJSFpoYkhWbE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnWW5KbFlXczdYRzRnSUNBZ0lDQWdJR05oYzJVZ0p6d25PbHh1SUNBZ0lDQWdJQ0FnSUNBZ1pXNWtJRDBnZG1Gc2RXVWdMU0F4TzF4dUlDQWdJQ0FnSUNBZ0lDQWdZbkpsWVdzN1hHNGdJQ0FnSUNBZ0lHTmhjMlVnSnp3OUp6cGNiaUFnSUNBZ0lDQWdJQ0FnSUdWdVpDQTlJSFpoYkhWbE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnWW5KbFlXczdYRzRnSUNBZ2ZWeHVJQ0FnSUdadmNpQW9kbUZ5SUdrZ1BTQXdPeUJwSUR3OUlIUnlaV1V1V205dmJTNXRZWGhhYjI5dE95QnBLeXNwSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLR2tnUGowZ2MzUmhjblFnSmlZZ2FTQThQU0JsYm1RcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhwdmIyMGdmRDBnS0RFZ1BEd2dhU2s3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5WEc0Z0lDQWdkR2hwY3k1NmIyOXRJRDBnZW05dmJUdGNiaUFnSUNCeVpYUjFjbTRnZEdocGN6dGNibjA3WEc1Y2JuUnlaV1V1V205dmJTNXdjbTkwYjNSNWNHVXVkRzlUZEhKcGJtY2dQU0JtZFc1amRHbHZiaWdwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdkR2hwY3k1NmIyOXRPMXh1ZlR0Y2JseHVMeThnUTI5MlpYSnpJR0ZzYkNCNmIyOXRiR1YyWld4eklHWnliMjBnTUNCMGJ5QXlNbHh1ZEhKbFpTNWFiMjl0TG1Gc2JDQTlJREI0TjBaR1JrWkdPMXh1WEc1MGNtVmxMbHB2YjIwdWJXRjRXbTl2YlNBOUlESXlPMXh1WEc1MGNtVmxMbHB2YjIwdWNtRnVaMlZ6SUQwZ2UxeHVJQ0FnSUNBd09pQXhNREF3TURBd01EQXdMRnh1SUNBZ0lDQXhPaUExTURBd01EQXdNREFzWEc0Z0lDQWdJREk2SURJd01EQXdNREF3TUN4Y2JpQWdJQ0FnTXpvZ01UQXdNREF3TURBd0xGeHVJQ0FnSUNBME9pQTFNREF3TURBd01DeGNiaUFnSUNBZ05Ub2dNalV3TURBd01EQXNYRzRnSUNBZ0lEWTZJREV5TlRBd01EQXdMRnh1SUNBZ0lDQTNPaUEyTlRBd01EQXdMRnh1SUNBZ0lDQTRPaUF6TURBd01EQXdMRnh1SUNBZ0lDQTVPaUF4TlRBd01EQXdMRnh1SUNBZ0lERXdPaUEzTlRBd01EQXNYRzRnSUNBZ01URTZJRFF3TURBd01DeGNiaUFnSUNBeE1qb2dNakF3TURBd0xGeHVJQ0FnSURFek9pQXhNREF3TURBc1hHNGdJQ0FnTVRRNklEVXdNREF3TEZ4dUlDQWdJREUxT2lBeU5UQXdNQ3hjYmlBZ0lDQXhOam9nTVRJMU1EQXNYRzRnSUNBZ01UYzZJRFV3TURBc1hHNGdJQ0FnTVRnNklESTFNREFzWEc0Z0lDQWdNVGs2SURFMU1EQXNYRzRnSUNBZ01qQTZJRGMxTUN4Y2JpQWdJQ0F5TVRvZ05UQXdMRnh1SUNBZ0lESXlPaUF5TlRBc1hHNGdJQ0FnTWpNNklERXdNRnh1ZlR0Y2JseHVMeThnVDI1c2VTQjNiM0pyY3lCbWIzSWdjMmx1WjJ4bElISmhibWRsSUhwdmIyMXpMaUJnVzFoWVdDNHVMaTVZV0ZoWVdDNHVMaTR1TGk0dUxsMWdJR2x6SUdsdWRtRnNhV1F1WEc1MGNtVmxMbHB2YjIwdWNISnZkRzkwZVhCbExuUnZXRTFNSUQwZ1puVnVZM1JwYjI0b0tTQjdYRzRnSUNBZ2RtRnlJR052Ym1ScGRHbHZibk1nUFNCYlhUdGNiaUFnSUNCcFppQW9kR2hwY3k1NmIyOXRJQ0U5SUhSeVpXVXVXbTl2YlM1aGJHd3BJSHRjYmlBZ0lDQWdJQ0FnZG1GeUlITjBZWEowSUQwZ2JuVnNiQ3dnWlc1a0lEMGdiblZzYkR0Y2JpQWdJQ0FnSUNBZ1ptOXlJQ2gyWVhJZ2FTQTlJREE3SUdrZ1BEMGdkSEpsWlM1YWIyOXRMbTFoZUZwdmIyMDdJR2tyS3lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11ZW05dmJTQW1JQ2d4SUR3OElHa3BLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tITjBZWEowSUQwOVBTQnVkV3hzS1NCemRHRnlkQ0E5SUdrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pXNWtJRDBnYVR0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCcFppQW9jM1JoY25RZ1BpQXdLU0JqYjI1a2FYUnBiMjV6TG5CMWMyZ29KeUFnSUNBOFRXRjRVMk5oYkdWRVpXNXZiV2x1WVhSdmNqNG5JQ3RjYmlBZ0lDQWdJQ0FnSUNBZ0lIUnlaV1V1V205dmJTNXlZVzVuWlhOYmMzUmhjblJkSUNzZ0p6d3ZUV0Y0VTJOaGJHVkVaVzV2YldsdVlYUnZjajVjWEc0bktUdGNiaUFnSUNBZ0lDQWdhV1lnS0dWdVpDQThJREl5S1NCamIyNWthWFJwYjI1ekxuQjFjMmdvSnlBZ0lDQThUV2x1VTJOaGJHVkVaVzV2YldsdVlYUnZjajRuSUN0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJ5WldVdVdtOXZiUzV5WVc1blpYTmJaVzVrSUNzZ01WMGdLeUFuUEM5TmFXNVRZMkZzWlVSbGJtOXRhVzVoZEc5eVBseGNiaWNwTzF4dUlDQWdJSDFjYmlBZ0lDQnlaWFIxY200Z1kyOXVaR2wwYVc5dWN6dGNibjA3WEc1Y2JuUnlaV1V1V205dmJTNXdjbTkwYjNSNWNHVXVkRzlUZEhKcGJtY2dQU0JtZFc1amRHbHZiaWdwSUh0Y2JpQWdJQ0IyWVhJZ2MzUnlJRDBnSnljN1hHNGdJQ0FnWm05eUlDaDJZWElnYVNBOUlEQTdJR2tnUEQwZ2RISmxaUzVhYjI5dExtMWhlRnB2YjIwN0lHa3JLeWtnZTF4dUlDQWdJQ0FnSUNCemRISWdLejBnS0hSb2FYTXVlbTl2YlNBbUlDZ3hJRHc4SUdrcEtTQS9JQ2RZSnlBNklDY3VKenRjYmlBZ0lDQjlYRzRnSUNBZ2NtVjBkWEp1SUhOMGNqdGNibjA3WEc1Y2JseHVYRzR2THk4dkx5OHZMeTh2THk4dkx5OHZMeTljYmk4dklGZEZRbEJCUTBzZ1JrOVBWRVZTWEc0dkx5QXVMMzR2WTJGeWRHOHZiR2xpTDJOaGNuUnZMM1J5WldVdmVtOXZiUzVxYzF4dUx5OGdiVzlrZFd4bElHbGtJRDBnTVRFeVhHNHZMeUJ0YjJSMWJHVWdZMmgxYm10eklEMGdNQ0pkTENKdFlYQndhVzVuY3lJNklrRkJRVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3SWl3aWMyOTFjbU5sVW05dmRDSTZJaUo5XCIpO1xuXG4vKioqLyB9KSxcbi8qIDExMyAqL1xuLyogbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9cbi8qIGFsbCBleHBvcnRzIHVzZWQgKi9cbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vfi9jb3JlLWpzL2xpYnJhcnkvZm4vYXJyYXkvZnJvbS5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbmV2YWwoXCJfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi8uLi9tb2R1bGVzL2VzNi5zdHJpbmcuaXRlcmF0b3IgKi8gMTM4KTtcXG5fX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi8uLi9tb2R1bGVzL2VzNi5hcnJheS5mcm9tICovIDEzNyk7XFxubW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi8uLi9tb2R1bGVzL19jb3JlICovIDI4KS5BcnJheS5mcm9tOy8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pTVRFekxtcHpJaXdpYzI5MWNtTmxjeUk2V3lKM1pXSndZV05yT2k4dkx5NHZmaTlqYjNKbExXcHpMMnhwWW5KaGNua3ZabTR2WVhKeVlYa3Zabkp2YlM1cWN6ODJOamxrSWwwc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYkluSmxjWFZwY21Vb0p5NHVMeTR1TDIxdlpIVnNaWE12WlhNMkxuTjBjbWx1Wnk1cGRHVnlZWFJ2Y2ljcE8xeHVjbVZ4ZFdseVpTZ25MaTR2TGk0dmJXOWtkV3hsY3k5bGN6WXVZWEp5WVhrdVpuSnZiU2NwTzF4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCeVpYRjFhWEpsS0NjdUxpOHVMaTl0YjJSMWJHVnpMMTlqYjNKbEp5a3VRWEp5WVhrdVpuSnZiVHRjYmx4dVhHNHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OWNiaTh2SUZkRlFsQkJRMHNnUms5UFZFVlNYRzR2THlBdUwzNHZZMjl5WlMxcWN5OXNhV0p5WVhKNUwyWnVMMkZ5Y21GNUwyWnliMjB1YW5OY2JpOHZJRzF2WkhWc1pTQnBaQ0E5SURFeE0xeHVMeThnYlc5a2RXeGxJR05vZFc1cmN5QTlJREFpWFN3aWJXRndjR2x1WjNNaU9pSkJRVUZCTzBGQlEwRTdRVUZEUVNJc0luTnZkWEpqWlZKdmIzUWlPaUlpZlE9PVwiKTtcblxuLyoqKi8gfSksXG4vKiAxMTQgKi9cbi8qIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKiBhbGwgZXhwb3J0cyB1c2VkICovXG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2EtZnVuY3Rpb24uanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5ldmFsKFwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7XFxuICBpZih0eXBlb2YgaXQgIT0gJ2Z1bmN0aW9uJyl0aHJvdyBUeXBlRXJyb3IoaXQgKyAnIGlzIG5vdCBhIGZ1bmN0aW9uIScpO1xcbiAgcmV0dXJuIGl0O1xcbn07Ly8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lNVEUwTG1weklpd2ljMjkxY21ObGN5STZXeUozWldKd1lXTnJPaTh2THk0dmZpOWpiM0psTFdwekwyeHBZbkpoY25rdmJXOWtkV3hsY3k5ZllTMW1kVzVqZEdsdmJpNXFjejlrTlRObElsMHNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJbTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdablZ1WTNScGIyNG9hWFFwZTF4dUlDQnBaaWgwZVhCbGIyWWdhWFFnSVQwZ0oyWjFibU4wYVc5dUp5bDBhSEp2ZHlCVWVYQmxSWEp5YjNJb2FYUWdLeUFuSUdseklHNXZkQ0JoSUdaMWJtTjBhVzl1SVNjcE8xeHVJQ0J5WlhSMWNtNGdhWFE3WEc1OU8xeHVYRzVjYmk4dkx5OHZMeTh2THk4dkx5OHZMeTh2TDF4dUx5OGdWMFZDVUVGRFN5QkdUMDlVUlZKY2JpOHZJQzR2Zmk5amIzSmxMV3B6TDJ4cFluSmhjbmt2Ylc5a2RXeGxjeTlmWVMxbWRXNWpkR2x2Ymk1cWMxeHVMeThnYlc5a2RXeGxJR2xrSUQwZ01URTBYRzR2THlCdGIyUjFiR1VnWTJoMWJtdHpJRDBnTUNKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVFN1FVRkRRVHRCUVVOQk8wRkJRMEVpTENKemIzVnlZMlZTYjI5MElqb2lJbjA9XCIpO1xuXG4vKioqLyB9KSxcbi8qIDExNSAqL1xuLyogbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9cbi8qIGFsbCBleHBvcnRzIHVzZWQgKi9cbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2FycmF5LWluY2x1ZGVzLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbmV2YWwoXCIvLyBmYWxzZSAtPiBBcnJheSNpbmRleE9mXFxuLy8gdHJ1ZSAgLT4gQXJyYXkjaW5jbHVkZXNcXG52YXIgdG9JT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9fdG8taW9iamVjdCAqLyA0OSlcXG4gICwgdG9MZW5ndGggID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9fdG8tbGVuZ3RoICovIDUwKVxcbiAgLCB0b0luZGV4ICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL190by1pbmRleCAqLyAxMzQpO1xcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oSVNfSU5DTFVERVMpe1xcbiAgcmV0dXJuIGZ1bmN0aW9uKCR0aGlzLCBlbCwgZnJvbUluZGV4KXtcXG4gICAgdmFyIE8gICAgICA9IHRvSU9iamVjdCgkdGhpcylcXG4gICAgICAsIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKVxcbiAgICAgICwgaW5kZXggID0gdG9JbmRleChmcm9tSW5kZXgsIGxlbmd0aClcXG4gICAgICAsIHZhbHVlO1xcbiAgICAvLyBBcnJheSNpbmNsdWRlcyB1c2VzIFNhbWVWYWx1ZVplcm8gZXF1YWxpdHkgYWxnb3JpdGhtXFxuICAgIGlmKElTX0lOQ0xVREVTICYmIGVsICE9IGVsKXdoaWxlKGxlbmd0aCA+IGluZGV4KXtcXG4gICAgICB2YWx1ZSA9IE9baW5kZXgrK107XFxuICAgICAgaWYodmFsdWUgIT0gdmFsdWUpcmV0dXJuIHRydWU7XFxuICAgIC8vIEFycmF5I3RvSW5kZXggaWdub3JlcyBob2xlcywgQXJyYXkjaW5jbHVkZXMgLSBub3RcXG4gICAgfSBlbHNlIGZvcig7bGVuZ3RoID4gaW5kZXg7IGluZGV4KyspaWYoSVNfSU5DTFVERVMgfHwgaW5kZXggaW4gTyl7XFxuICAgICAgaWYoT1tpbmRleF0gPT09IGVsKXJldHVybiBJU19JTkNMVURFUyB8fCBpbmRleCB8fCAwO1xcbiAgICB9IHJldHVybiAhSVNfSU5DTFVERVMgJiYgLTE7XFxuICB9O1xcbn07Ly8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lNVEUxTG1weklpd2ljMjkxY21ObGN5STZXeUozWldKd1lXTnJPaTh2THk0dmZpOWpiM0psTFdwekwyeHBZbkpoY25rdmJXOWtkV3hsY3k5ZllYSnlZWGt0YVc1amJIVmtaWE11YW5NL05qRTVPU0pkTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lJdkx5Qm1ZV3h6WlNBdFBpQkJjbkpoZVNOcGJtUmxlRTltWEc0dkx5QjBjblZsSUNBdFBpQkJjbkpoZVNOcGJtTnNkV1JsYzF4dWRtRnlJSFJ2U1U5aWFtVmpkQ0E5SUhKbGNYVnBjbVVvSnk0dlgzUnZMV2x2WW1wbFkzUW5LVnh1SUNBc0lIUnZUR1Z1WjNSb0lDQTlJSEpsY1hWcGNtVW9KeTR2WDNSdkxXeGxibWQwYUNjcFhHNGdJQ3dnZEc5SmJtUmxlQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZkRzh0YVc1a1pYZ25LVHRjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnWm5WdVkzUnBiMjRvU1ZOZlNVNURURlZFUlZNcGUxeHVJQ0J5WlhSMWNtNGdablZ1WTNScGIyNG9KSFJvYVhNc0lHVnNMQ0JtY205dFNXNWtaWGdwZTF4dUlDQWdJSFpoY2lCUElDQWdJQ0FnUFNCMGIwbFBZbXBsWTNRb0pIUm9hWE1wWEc0Z0lDQWdJQ0FzSUd4bGJtZDBhQ0E5SUhSdlRHVnVaM1JvS0U4dWJHVnVaM1JvS1Z4dUlDQWdJQ0FnTENCcGJtUmxlQ0FnUFNCMGIwbHVaR1Y0S0daeWIyMUpibVJsZUN3Z2JHVnVaM1JvS1Z4dUlDQWdJQ0FnTENCMllXeDFaVHRjYmlBZ0lDQXZMeUJCY25KaGVTTnBibU5zZFdSbGN5QjFjMlZ6SUZOaGJXVldZV3gxWlZwbGNtOGdaWEYxWVd4cGRIa2dZV3huYjNKcGRHaHRYRzRnSUNBZ2FXWW9TVk5mU1U1RFRGVkVSVk1nSmlZZ1pXd2dJVDBnWld3cGQyaHBiR1VvYkdWdVozUm9JRDRnYVc1a1pYZ3BlMXh1SUNBZ0lDQWdkbUZzZFdVZ1BTQlBXMmx1WkdWNEt5dGRPMXh1SUNBZ0lDQWdhV1lvZG1Gc2RXVWdJVDBnZG1Gc2RXVXBjbVYwZFhKdUlIUnlkV1U3WEc0Z0lDQWdMeThnUVhKeVlYa2pkRzlKYm1SbGVDQnBaMjV2Y21WeklHaHZiR1Z6TENCQmNuSmhlU05wYm1Oc2RXUmxjeUF0SUc1dmRGeHVJQ0FnSUgwZ1pXeHpaU0JtYjNJb08yeGxibWQwYUNBK0lHbHVaR1Y0T3lCcGJtUmxlQ3NyS1dsbUtFbFRYMGxPUTB4VlJFVlRJSHg4SUdsdVpHVjRJR2x1SUU4cGUxeHVJQ0FnSUNBZ2FXWW9UMXRwYm1SbGVGMGdQVDA5SUdWc0tYSmxkSFZ5YmlCSlUxOUpUa05NVlVSRlV5QjhmQ0JwYm1SbGVDQjhmQ0F3TzF4dUlDQWdJSDBnY21WMGRYSnVJQ0ZKVTE5SlRrTk1WVVJGVXlBbUppQXRNVHRjYmlBZ2ZUdGNibjA3WEc1Y2JseHVMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZYRzR2THlCWFJVSlFRVU5MSUVaUFQxUkZVbHh1THk4Z0xpOStMMk52Y21VdGFuTXZiR2xpY21GeWVTOXRiMlIxYkdWekwxOWhjbkpoZVMxcGJtTnNkV1JsY3k1cWMxeHVMeThnYlc5a2RXeGxJR2xrSUQwZ01URTFYRzR2THlCdGIyUjFiR1VnWTJoMWJtdHpJRDBnTUNKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQklpd2ljMjkxY21ObFVtOXZkQ0k2SWlKOVwiKTtcblxuLyoqKi8gfSksXG4vKiAxMTYgKi9cbi8qIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKiBhbGwgZXhwb3J0cyB1c2VkICovXG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2NsYXNzb2YuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5ldmFsKFwiLy8gZ2V0dGluZyB0YWcgZnJvbSAxOS4xLjMuNiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nKClcXG52YXIgY29mID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9fY29mICovIDQxKVxcbiAgLCBUQUcgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL193a3MgKi8gNSkoJ3RvU3RyaW5nVGFnJylcXG4gIC8vIEVTMyB3cm9uZyBoZXJlXFxuICAsIEFSRyA9IGNvZihmdW5jdGlvbigpeyByZXR1cm4gYXJndW1lbnRzOyB9KCkpID09ICdBcmd1bWVudHMnO1xcblxcbi8vIGZhbGxiYWNrIGZvciBJRTExIFNjcmlwdCBBY2Nlc3MgRGVuaWVkIGVycm9yXFxudmFyIHRyeUdldCA9IGZ1bmN0aW9uKGl0LCBrZXkpe1xcbiAgdHJ5IHtcXG4gICAgcmV0dXJuIGl0W2tleV07XFxuICB9IGNhdGNoKGUpeyAvKiBlbXB0eSAqLyB9XFxufTtcXG5cXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXtcXG4gIHZhciBPLCBULCBCO1xcbiAgcmV0dXJuIGl0ID09PSB1bmRlZmluZWQgPyAnVW5kZWZpbmVkJyA6IGl0ID09PSBudWxsID8gJ051bGwnXFxuICAgIC8vIEBAdG9TdHJpbmdUYWcgY2FzZVxcbiAgICA6IHR5cGVvZiAoVCA9IHRyeUdldChPID0gT2JqZWN0KGl0KSwgVEFHKSkgPT0gJ3N0cmluZycgPyBUXFxuICAgIC8vIGJ1aWx0aW5UYWcgY2FzZVxcbiAgICA6IEFSRyA/IGNvZihPKVxcbiAgICAvLyBFUzMgYXJndW1lbnRzIGZhbGxiYWNrXFxuICAgIDogKEIgPSBjb2YoTykpID09ICdPYmplY3QnICYmIHR5cGVvZiBPLmNhbGxlZSA9PSAnZnVuY3Rpb24nID8gJ0FyZ3VtZW50cycgOiBCO1xcbn07Ly8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lNVEUyTG1weklpd2ljMjkxY21ObGN5STZXeUozWldKd1lXTnJPaTh2THk0dmZpOWpiM0psTFdwekwyeHBZbkpoY25rdmJXOWtkV3hsY3k5ZlkyeGhjM052Wmk1cWN6OWlOR0l6SWwwc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYklpOHZJR2RsZEhScGJtY2dkR0ZuSUdaeWIyMGdNVGt1TVM0ekxqWWdUMkpxWldOMExuQnliM1J2ZEhsd1pTNTBiMU4wY21sdVp5Z3BYRzUyWVhJZ1kyOW1JRDBnY21WeGRXbHlaU2duTGk5ZlkyOW1KeWxjYmlBZ0xDQlVRVWNnUFNCeVpYRjFhWEpsS0NjdUwxOTNhM01uS1NnbmRHOVRkSEpwYm1kVVlXY25LVnh1SUNBdkx5QkZVek1nZDNKdmJtY2dhR1Z5WlZ4dUlDQXNJRUZTUnlBOUlHTnZaaWhtZFc1amRHbHZiaWdwZXlCeVpYUjFjbTRnWVhKbmRXMWxiblJ6T3lCOUtDa3BJRDA5SUNkQmNtZDFiV1Z1ZEhNbk8xeHVYRzR2THlCbVlXeHNZbUZqYXlCbWIzSWdTVVV4TVNCVFkzSnBjSFFnUVdOalpYTnpJRVJsYm1sbFpDQmxjbkp2Y2x4dWRtRnlJSFJ5ZVVkbGRDQTlJR1oxYm1OMGFXOXVLR2wwTENCclpYa3BlMXh1SUNCMGNua2dlMXh1SUNBZ0lISmxkSFZ5YmlCcGRGdHJaWGxkTzF4dUlDQjlJR05oZEdOb0tHVXBleUF2S2lCbGJYQjBlU0FxTHlCOVhHNTlPMXh1WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUdaMWJtTjBhVzl1S0dsMEtYdGNiaUFnZG1GeUlFOHNJRlFzSUVJN1hHNGdJSEpsZEhWeWJpQnBkQ0E5UFQwZ2RXNWtaV1pwYm1Wa0lEOGdKMVZ1WkdWbWFXNWxaQ2NnT2lCcGRDQTlQVDBnYm5Wc2JDQS9JQ2RPZFd4c0oxeHVJQ0FnSUM4dklFQkFkRzlUZEhKcGJtZFVZV2NnWTJGelpWeHVJQ0FnSURvZ2RIbHdaVzltSUNoVUlEMGdkSEo1UjJWMEtFOGdQU0JQWW1wbFkzUW9hWFFwTENCVVFVY3BLU0E5UFNBbmMzUnlhVzVuSnlBL0lGUmNiaUFnSUNBdkx5QmlkV2xzZEdsdVZHRm5JR05oYzJWY2JpQWdJQ0E2SUVGU1J5QS9JR052WmloUEtWeHVJQ0FnSUM4dklFVlRNeUJoY21kMWJXVnVkSE1nWm1Gc2JHSmhZMnRjYmlBZ0lDQTZJQ2hDSUQwZ1kyOW1LRThwS1NBOVBTQW5UMkpxWldOMEp5QW1KaUIwZVhCbGIyWWdUeTVqWVd4c1pXVWdQVDBnSjJaMWJtTjBhVzl1SnlBL0lDZEJjbWQxYldWdWRITW5JRG9nUWp0Y2JuMDdYRzVjYmx4dUx5OHZMeTh2THk4dkx5OHZMeTh2THk4dlhHNHZMeUJYUlVKUVFVTkxJRVpQVDFSRlVseHVMeThnTGk5K0wyTnZjbVV0YW5NdmJHbGljbUZ5ZVM5dGIyUjFiR1Z6TDE5amJHRnpjMjltTG1welhHNHZMeUJ0YjJSMWJHVWdhV1FnUFNBeE1UWmNiaTh2SUcxdlpIVnNaU0JqYUhWdWEzTWdQU0F3SWwwc0ltMWhjSEJwYm1keklqb2lRVUZCUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQklpd2ljMjkxY21ObFVtOXZkQ0k2SWlKOVwiKTtcblxuLyoqKi8gfSksXG4vKiAxMTcgKi9cbi8qIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKiBhbGwgZXhwb3J0cyB1c2VkICovXG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fY3JlYXRlLXByb3BlcnR5LmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbmV2YWwoXCJcXG52YXIgJGRlZmluZVByb3BlcnR5ID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9fb2JqZWN0LWRwICovIDIzKVxcbiAgLCBjcmVhdGVEZXNjICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL19wcm9wZXJ0eS1kZXNjICovIDMyKTtcXG5cXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG9iamVjdCwgaW5kZXgsIHZhbHVlKXtcXG4gIGlmKGluZGV4IGluIG9iamVjdCkkZGVmaW5lUHJvcGVydHkuZihvYmplY3QsIGluZGV4LCBjcmVhdGVEZXNjKDAsIHZhbHVlKSk7XFxuICBlbHNlIG9iamVjdFtpbmRleF0gPSB2YWx1ZTtcXG59Oy8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pTVRFM0xtcHpJaXdpYzI5MWNtTmxjeUk2V3lKM1pXSndZV05yT2k4dkx5NHZmaTlqYjNKbExXcHpMMnhwWW5KaGNua3ZiVzlrZFd4bGN5OWZZM0psWVhSbExYQnliM0JsY25SNUxtcHpQekZoWkRFaVhTd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lKM1Z6WlNCemRISnBZM1FuTzF4dWRtRnlJQ1JrWldacGJtVlFjbTl3WlhKMGVTQTlJSEpsY1hWcGNtVW9KeTR2WDI5aWFtVmpkQzFrY0NjcFhHNGdJQ3dnWTNKbFlYUmxSR1Z6WXlBZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZmNISnZjR1Z5ZEhrdFpHVnpZeWNwTzF4dVhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlHWjFibU4wYVc5dUtHOWlhbVZqZEN3Z2FXNWtaWGdzSUhaaGJIVmxLWHRjYmlBZ2FXWW9hVzVrWlhnZ2FXNGdiMkpxWldOMEtTUmtaV1pwYm1WUWNtOXdaWEowZVM1bUtHOWlhbVZqZEN3Z2FXNWtaWGdzSUdOeVpXRjBaVVJsYzJNb01Dd2dkbUZzZFdVcEtUdGNiaUFnWld4elpTQnZZbXBsWTNSYmFXNWtaWGhkSUQwZ2RtRnNkV1U3WEc1OU8xeHVYRzVjYmk4dkx5OHZMeTh2THk4dkx5OHZMeTh2TDF4dUx5OGdWMFZDVUVGRFN5QkdUMDlVUlZKY2JpOHZJQzR2Zmk5amIzSmxMV3B6TDJ4cFluSmhjbmt2Ylc5a2RXeGxjeTlmWTNKbFlYUmxMWEJ5YjNCbGNuUjVMbXB6WEc0dkx5QnRiMlIxYkdVZ2FXUWdQU0F4TVRkY2JpOHZJRzF2WkhWc1pTQmphSFZ1YTNNZ1BTQXdJbDBzSW0xaGNIQnBibWR6SWpvaVFVRkJRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJJaXdpYzI5MWNtTmxVbTl2ZENJNklpSjlcIik7XG5cbi8qKiovIH0pLFxuLyogMTE4ICovXG4vKiBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyogYWxsIGV4cG9ydHMgdXNlZCAqL1xuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19odG1sLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuZXZhbChcIm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9fZ2xvYmFsICovIDEwKS5kb2N1bWVudCAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7Ly8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lNVEU0TG1weklpd2ljMjkxY21ObGN5STZXeUozWldKd1lXTnJPaTh2THk0dmZpOWpiM0psTFdwekwyeHBZbkpoY25rdmJXOWtkV3hsY3k5ZmFIUnRiQzVxY3o5bE5XRm1JbDBzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSW0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnY21WeGRXbHlaU2duTGk5ZloyeHZZbUZzSnlrdVpHOWpkVzFsYm5RZ0ppWWdaRzlqZFcxbGJuUXVaRzlqZFcxbGJuUkZiR1Z0Wlc1ME8xeHVYRzVjYmk4dkx5OHZMeTh2THk4dkx5OHZMeTh2TDF4dUx5OGdWMFZDVUVGRFN5QkdUMDlVUlZKY2JpOHZJQzR2Zmk5amIzSmxMV3B6TDJ4cFluSmhjbmt2Ylc5a2RXeGxjeTlmYUhSdGJDNXFjMXh1THk4Z2JXOWtkV3hsSUdsa0lEMGdNVEU0WEc0dkx5QnRiMlIxYkdVZ1kyaDFibXR6SUQwZ01DSmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUluMD1cIik7XG5cbi8qKiovIH0pLFxuLyogMTE5ICovXG4vKiBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyogYWxsIGV4cG9ydHMgdXNlZCAqL1xuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faWU4LWRvbS1kZWZpbmUuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuZXZhbChcIm1vZHVsZS5leHBvcnRzID0gIV9fd2VicGFja19yZXF1aXJlX18oLyohIC4vX2Rlc2NyaXB0b3JzICovIDIwKSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9fZmFpbHMgKi8gNDYpKGZ1bmN0aW9uKCl7XFxuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vX2RvbS1jcmVhdGUgKi8gNDMpKCdkaXYnKSwgJ2EnLCB7Z2V0OiBmdW5jdGlvbigpeyByZXR1cm4gNzsgfX0pLmEgIT0gNztcXG59KTsvLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaU1URTVMbXB6SWl3aWMyOTFjbU5sY3lJNld5SjNaV0p3WVdOck9pOHZMeTR2Zmk5amIzSmxMV3B6TDJ4cFluSmhjbmt2Ylc5a2RXeGxjeTlmYVdVNExXUnZiUzFrWldacGJtVXVhbk0vWW1ReFppSmRMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUp0YjJSMWJHVXVaWGh3YjNKMGN5QTlJQ0Z5WlhGMWFYSmxLQ2N1TDE5a1pYTmpjbWx3ZEc5eWN5Y3BJQ1ltSUNGeVpYRjFhWEpsS0NjdUwxOW1ZV2xzY3ljcEtHWjFibU4wYVc5dUtDbDdYRzRnSUhKbGRIVnliaUJQWW1wbFkzUXVaR1ZtYVc1bFVISnZjR1Z5ZEhrb2NtVnhkV2x5WlNnbkxpOWZaRzl0TFdOeVpXRjBaU2NwS0Nka2FYWW5LU3dnSjJFbkxDQjdaMlYwT2lCbWRXNWpkR2x2YmlncGV5QnlaWFIxY200Z056c2dmWDBwTG1FZ0lUMGdOenRjYm4wcE8xeHVYRzVjYmk4dkx5OHZMeTh2THk4dkx5OHZMeTh2TDF4dUx5OGdWMFZDVUVGRFN5QkdUMDlVUlZKY2JpOHZJQzR2Zmk5amIzSmxMV3B6TDJ4cFluSmhjbmt2Ylc5a2RXeGxjeTlmYVdVNExXUnZiUzFrWldacGJtVXVhbk5jYmk4dklHMXZaSFZzWlNCcFpDQTlJREV4T1Z4dUx5OGdiVzlrZFd4bElHTm9kVzVyY3lBOUlEQWlYU3dpYldGd2NHbHVaM01pT2lKQlFVRkJPMEZCUTBFN1FVRkRRU0lzSW5OdmRYSmpaVkp2YjNRaU9pSWlmUT09XCIpO1xuXG4vKioqLyB9KSxcbi8qIDEyMCAqL1xuLyogbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9cbi8qIGFsbCBleHBvcnRzIHVzZWQgKi9cbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faW9iamVjdC5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbmV2YWwoXCIvLyBmYWxsYmFjayBmb3Igbm9uLWFycmF5LWxpa2UgRVMzIGFuZCBub24tZW51bWVyYWJsZSBvbGQgVjggc3RyaW5nc1xcbnZhciBjb2YgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL19jb2YgKi8gNDEpO1xcbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0KCd6JykucHJvcGVydHlJc0VudW1lcmFibGUoMCkgPyBPYmplY3QgOiBmdW5jdGlvbihpdCl7XFxuICByZXR1cm4gY29mKGl0KSA9PSAnU3RyaW5nJyA/IGl0LnNwbGl0KCcnKSA6IE9iamVjdChpdCk7XFxufTsvLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaU1USXdMbXB6SWl3aWMyOTFjbU5sY3lJNld5SjNaV0p3WVdOck9pOHZMeTR2Zmk5amIzSmxMV3B6TDJ4cFluSmhjbmt2Ylc5a2RXeGxjeTlmYVc5aWFtVmpkQzVxY3o4MVkyWTVJbDBzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSWk4dklHWmhiR3hpWVdOcklHWnZjaUJ1YjI0dFlYSnlZWGt0YkdsclpTQkZVek1nWVc1a0lHNXZiaTFsYm5WdFpYSmhZbXhsSUc5c1pDQldPQ0J6ZEhKcGJtZHpYRzUyWVhJZ1kyOW1JRDBnY21WeGRXbHlaU2duTGk5ZlkyOW1KeWs3WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUU5aWFtVmpkQ2duZWljcExuQnliM0JsY25SNVNYTkZiblZ0WlhKaFlteGxLREFwSUQ4Z1QySnFaV04wSURvZ1puVnVZM1JwYjI0b2FYUXBlMXh1SUNCeVpYUjFjbTRnWTI5bUtHbDBLU0E5UFNBblUzUnlhVzVuSnlBL0lHbDBMbk53YkdsMEtDY25LU0E2SUU5aWFtVmpkQ2hwZENrN1hHNTlPMXh1WEc1Y2JpOHZMeTh2THk4dkx5OHZMeTh2THk4dkwxeHVMeThnVjBWQ1VFRkRTeUJHVDA5VVJWSmNiaTh2SUM0dmZpOWpiM0psTFdwekwyeHBZbkpoY25rdmJXOWtkV3hsY3k5ZmFXOWlhbVZqZEM1cWMxeHVMeThnYlc5a2RXeGxJR2xrSUQwZ01USXdYRzR2THlCdGIyUjFiR1VnWTJoMWJtdHpJRDBnTUNKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTSXNJbk52ZFhKalpWSnZiM1FpT2lJaWZRPT1cIik7XG5cbi8qKiovIH0pLFxuLyogMTIxICovXG4vKiBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyogYWxsIGV4cG9ydHMgdXNlZCAqL1xuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pcy1hcnJheS1pdGVyLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuZXZhbChcIi8vIGNoZWNrIG9uIGRlZmF1bHQgQXJyYXkgaXRlcmF0b3JcXG52YXIgSXRlcmF0b3JzICA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vX2l0ZXJhdG9ycyAqLyAzMSlcXG4gICwgSVRFUkFUT1IgICA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vX3drcyAqLyA1KSgnaXRlcmF0b3InKVxcbiAgLCBBcnJheVByb3RvID0gQXJyYXkucHJvdG90eXBlO1xcblxcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpe1xcbiAgcmV0dXJuIGl0ICE9PSB1bmRlZmluZWQgJiYgKEl0ZXJhdG9ycy5BcnJheSA9PT0gaXQgfHwgQXJyYXlQcm90b1tJVEVSQVRPUl0gPT09IGl0KTtcXG59Oy8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pTVRJeExtcHpJaXdpYzI5MWNtTmxjeUk2V3lKM1pXSndZV05yT2k4dkx5NHZmaTlqYjNKbExXcHpMMnhwWW5KaGNua3ZiVzlrZFd4bGN5OWZhWE10WVhKeVlYa3RhWFJsY2k1cWN6OWhOR0l6SWwwc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYklpOHZJR05vWldOcklHOXVJR1JsWm1GMWJIUWdRWEp5WVhrZ2FYUmxjbUYwYjNKY2JuWmhjaUJKZEdWeVlYUnZjbk1nSUQwZ2NtVnhkV2x5WlNnbkxpOWZhWFJsY21GMGIzSnpKeWxjYmlBZ0xDQkpWRVZTUVZSUFVpQWdJRDBnY21WeGRXbHlaU2duTGk5ZmQydHpKeWtvSjJsMFpYSmhkRzl5SnlsY2JpQWdMQ0JCY25KaGVWQnliM1J2SUQwZ1FYSnlZWGt1Y0hKdmRHOTBlWEJsTzF4dVhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlHWjFibU4wYVc5dUtHbDBLWHRjYmlBZ2NtVjBkWEp1SUdsMElDRTlQU0IxYm1SbFptbHVaV1FnSmlZZ0tFbDBaWEpoZEc5eWN5NUJjbkpoZVNBOVBUMGdhWFFnZkh3Z1FYSnlZWGxRY205MGIxdEpWRVZTUVZSUFVsMGdQVDA5SUdsMEtUdGNibjA3WEc1Y2JseHVMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZYRzR2THlCWFJVSlFRVU5MSUVaUFQxUkZVbHh1THk4Z0xpOStMMk52Y21VdGFuTXZiR2xpY21GeWVTOXRiMlIxYkdWekwxOXBjeTFoY25KaGVTMXBkR1Z5TG1welhHNHZMeUJ0YjJSMWJHVWdhV1FnUFNBeE1qRmNiaTh2SUcxdlpIVnNaU0JqYUhWdWEzTWdQU0F3SWwwc0ltMWhjSEJwYm1keklqb2lRVUZCUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CSWl3aWMyOTFjbU5sVW05dmRDSTZJaUo5XCIpO1xuXG4vKioqLyB9KSxcbi8qIDEyMiAqL1xuLyogbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9cbi8qIGFsbCBleHBvcnRzIHVzZWQgKi9cbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pdGVyLWNhbGwuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbmV2YWwoXCIvLyBjYWxsIHNvbWV0aGluZyBvbiBpdGVyYXRvciBzdGVwIHdpdGggc2FmZSBjbG9zaW5nIG9uIGVycm9yXFxudmFyIGFuT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9fYW4tb2JqZWN0ICovIDE5KTtcXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0ZXJhdG9yLCBmbiwgdmFsdWUsIGVudHJpZXMpe1xcbiAgdHJ5IHtcXG4gICAgcmV0dXJuIGVudHJpZXMgPyBmbihhbk9iamVjdCh2YWx1ZSlbMF0sIHZhbHVlWzFdKSA6IGZuKHZhbHVlKTtcXG4gIC8vIDcuNC42IEl0ZXJhdG9yQ2xvc2UoaXRlcmF0b3IsIGNvbXBsZXRpb24pXFxuICB9IGNhdGNoKGUpe1xcbiAgICB2YXIgcmV0ID0gaXRlcmF0b3JbJ3JldHVybiddO1xcbiAgICBpZihyZXQgIT09IHVuZGVmaW5lZClhbk9iamVjdChyZXQuY2FsbChpdGVyYXRvcikpO1xcbiAgICB0aHJvdyBlO1xcbiAgfVxcbn07Ly8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lNVEl5TG1weklpd2ljMjkxY21ObGN5STZXeUozWldKd1lXTnJPaTh2THk0dmZpOWpiM0psTFdwekwyeHBZbkpoY25rdmJXOWtkV3hsY3k5ZmFYUmxjaTFqWVd4c0xtcHpQelV4T0RraVhTd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lMeThnWTJGc2JDQnpiMjFsZEdocGJtY2diMjRnYVhSbGNtRjBiM0lnYzNSbGNDQjNhWFJvSUhOaFptVWdZMnh2YzJsdVp5QnZiaUJsY25KdmNseHVkbUZ5SUdGdVQySnFaV04wSUQwZ2NtVnhkV2x5WlNnbkxpOWZZVzR0YjJKcVpXTjBKeWs3WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUdaMWJtTjBhVzl1S0dsMFpYSmhkRzl5TENCbWJpd2dkbUZzZFdVc0lHVnVkSEpwWlhNcGUxeHVJQ0IwY25rZ2UxeHVJQ0FnSUhKbGRIVnliaUJsYm5SeWFXVnpJRDhnWm00b1lXNVBZbXBsWTNRb2RtRnNkV1VwV3pCZExDQjJZV3gxWlZzeFhTa2dPaUJtYmloMllXeDFaU2s3WEc0Z0lDOHZJRGN1TkM0MklFbDBaWEpoZEc5eVEyeHZjMlVvYVhSbGNtRjBiM0lzSUdOdmJYQnNaWFJwYjI0cFhHNGdJSDBnWTJGMFkyZ29aU2w3WEc0Z0lDQWdkbUZ5SUhKbGRDQTlJR2wwWlhKaGRHOXlXeWR5WlhSMWNtNG5YVHRjYmlBZ0lDQnBaaWh5WlhRZ0lUMDlJSFZ1WkdWbWFXNWxaQ2xoYms5aWFtVmpkQ2h5WlhRdVkyRnNiQ2hwZEdWeVlYUnZjaWtwTzF4dUlDQWdJSFJvY205M0lHVTdYRzRnSUgxY2JuMDdYRzVjYmx4dUx5OHZMeTh2THk4dkx5OHZMeTh2THk4dlhHNHZMeUJYUlVKUVFVTkxJRVpQVDFSRlVseHVMeThnTGk5K0wyTnZjbVV0YW5NdmJHbGljbUZ5ZVM5dGIyUjFiR1Z6TDE5cGRHVnlMV05oYkd3dWFuTmNiaTh2SUcxdlpIVnNaU0JwWkNBOUlERXlNbHh1THk4Z2JXOWtkV3hsSUdOb2RXNXJjeUE5SURBaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTSXNJbk52ZFhKalpWSnZiM1FpT2lJaWZRPT1cIik7XG5cbi8qKiovIH0pLFxuLyogMTIzICovXG4vKiBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyogYWxsIGV4cG9ydHMgdXNlZCAqL1xuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faXRlci1jcmVhdGUuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5ldmFsKFwiXFxudmFyIGNyZWF0ZSAgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9fb2JqZWN0LWNyZWF0ZSAqLyAxMjcpXFxuICAsIGRlc2NyaXB0b3IgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9fcHJvcGVydHktZGVzYyAqLyAzMilcXG4gICwgc2V0VG9TdHJpbmdUYWcgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL19zZXQtdG8tc3RyaW5nLXRhZyAqLyA0NylcXG4gICwgSXRlcmF0b3JQcm90b3R5cGUgPSB7fTtcXG5cXG4vLyAyNS4xLjIuMS4xICVJdGVyYXRvclByb3RvdHlwZSVbQEBpdGVyYXRvcl0oKVxcbl9fd2VicGFja19yZXF1aXJlX18oLyohIC4vX2hpZGUgKi8gMjIpKEl0ZXJhdG9yUHJvdG90eXBlLCBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL193a3MgKi8gNSkoJ2l0ZXJhdG9yJyksIGZ1bmN0aW9uKCl7IHJldHVybiB0aGlzOyB9KTtcXG5cXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKENvbnN0cnVjdG9yLCBOQU1FLCBuZXh0KXtcXG4gIENvbnN0cnVjdG9yLnByb3RvdHlwZSA9IGNyZWF0ZShJdGVyYXRvclByb3RvdHlwZSwge25leHQ6IGRlc2NyaXB0b3IoMSwgbmV4dCl9KTtcXG4gIHNldFRvU3RyaW5nVGFnKENvbnN0cnVjdG9yLCBOQU1FICsgJyBJdGVyYXRvcicpO1xcbn07Ly8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lNVEl6TG1weklpd2ljMjkxY21ObGN5STZXeUozWldKd1lXTnJPaTh2THk0dmZpOWpiM0psTFdwekwyeHBZbkpoY25rdmJXOWtkV3hsY3k5ZmFYUmxjaTFqY21WaGRHVXVhbk0vTURFeU55SmRMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUluZFhObElITjBjbWxqZENjN1hHNTJZWElnWTNKbFlYUmxJQ0FnSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5dlltcGxZM1F0WTNKbFlYUmxKeWxjYmlBZ0xDQmtaWE5qY21sd2RHOXlJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYM0J5YjNCbGNuUjVMV1JsYzJNbktWeHVJQ0FzSUhObGRGUnZVM1J5YVc1blZHRm5JRDBnY21WeGRXbHlaU2duTGk5ZmMyVjBMWFJ2TFhOMGNtbHVaeTEwWVdjbktWeHVJQ0FzSUVsMFpYSmhkRzl5VUhKdmRHOTBlWEJsSUQwZ2UzMDdYRzVjYmk4dklESTFMakV1TWk0eExqRWdKVWwwWlhKaGRHOXlVSEp2ZEc5MGVYQmxKVnRBUUdsMFpYSmhkRzl5WFNncFhHNXlaWEYxYVhKbEtDY3VMMTlvYVdSbEp5a29TWFJsY21GMGIzSlFjbTkwYjNSNWNHVXNJSEpsY1hWcGNtVW9KeTR2WDNkcmN5Y3BLQ2RwZEdWeVlYUnZjaWNwTENCbWRXNWpkR2x2YmlncGV5QnlaWFIxY200Z2RHaHBjenNnZlNrN1hHNWNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdablZ1WTNScGIyNG9RMjl1YzNSeWRXTjBiM0lzSUU1QlRVVXNJRzVsZUhRcGUxeHVJQ0JEYjI1emRISjFZM1J2Y2k1d2NtOTBiM1I1Y0dVZ1BTQmpjbVZoZEdVb1NYUmxjbUYwYjNKUWNtOTBiM1I1Y0dVc0lIdHVaWGgwT2lCa1pYTmpjbWx3ZEc5eUtERXNJRzVsZUhRcGZTazdYRzRnSUhObGRGUnZVM1J5YVc1blZHRm5LRU52Ym5OMGNuVmpkRzl5TENCT1FVMUZJQ3NnSnlCSmRHVnlZWFJ2Y2ljcE8xeHVmVHRjYmx4dVhHNHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OWNiaTh2SUZkRlFsQkJRMHNnUms5UFZFVlNYRzR2THlBdUwzNHZZMjl5WlMxcWN5OXNhV0p5WVhKNUwyMXZaSFZzWlhNdlgybDBaWEl0WTNKbFlYUmxMbXB6WEc0dkx5QnRiMlIxYkdVZ2FXUWdQU0F4TWpOY2JpOHZJRzF2WkhWc1pTQmphSFZ1YTNNZ1BTQXdJbDBzSW0xaGNIQnBibWR6SWpvaVFVRkJRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTSXNJbk52ZFhKalpWSnZiM1FpT2lJaWZRPT1cIik7XG5cbi8qKiovIH0pLFxuLyogMTI0ICovXG4vKiBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyogYWxsIGV4cG9ydHMgdXNlZCAqL1xuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faXRlci1kZWZpbmUuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5ldmFsKFwiXFxudmFyIExJQlJBUlkgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9fbGlicmFyeSAqLyAxMjYpXFxuICAsICRleHBvcnQgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9fZXhwb3J0ICovIDQ1KVxcbiAgLCByZWRlZmluZSAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vX3JlZGVmaW5lICovIDEzMilcXG4gICwgaGlkZSAgICAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL19oaWRlICovIDIyKVxcbiAgLCBoYXMgICAgICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vX2hhcyAqLyAyMSlcXG4gICwgSXRlcmF0b3JzICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL19pdGVyYXRvcnMgKi8gMzEpXFxuICAsICRpdGVyQ3JlYXRlICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9faXRlci1jcmVhdGUgKi8gMTIzKVxcbiAgLCBzZXRUb1N0cmluZ1RhZyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vX3NldC10by1zdHJpbmctdGFnICovIDQ3KVxcbiAgLCBnZXRQcm90b3R5cGVPZiA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vX29iamVjdC1ncG8gKi8gMTI5KVxcbiAgLCBJVEVSQVRPUiAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vX3drcyAqLyA1KSgnaXRlcmF0b3InKVxcbiAgLCBCVUdHWSAgICAgICAgICA9ICEoW10ua2V5cyAmJiAnbmV4dCcgaW4gW10ua2V5cygpKSAvLyBTYWZhcmkgaGFzIGJ1Z2d5IGl0ZXJhdG9ycyB3L28gYG5leHRgXFxuICAsIEZGX0lURVJBVE9SICAgID0gJ0BAaXRlcmF0b3InXFxuICAsIEtFWVMgICAgICAgICAgID0gJ2tleXMnXFxuICAsIFZBTFVFUyAgICAgICAgID0gJ3ZhbHVlcyc7XFxuXFxudmFyIHJldHVyblRoaXMgPSBmdW5jdGlvbigpeyByZXR1cm4gdGhpczsgfTtcXG5cXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKEJhc2UsIE5BTUUsIENvbnN0cnVjdG9yLCBuZXh0LCBERUZBVUxULCBJU19TRVQsIEZPUkNFRCl7XFxuICAkaXRlckNyZWF0ZShDb25zdHJ1Y3RvciwgTkFNRSwgbmV4dCk7XFxuICB2YXIgZ2V0TWV0aG9kID0gZnVuY3Rpb24oa2luZCl7XFxuICAgIGlmKCFCVUdHWSAmJiBraW5kIGluIHByb3RvKXJldHVybiBwcm90b1traW5kXTtcXG4gICAgc3dpdGNoKGtpbmQpe1xcbiAgICAgIGNhc2UgS0VZUzogcmV0dXJuIGZ1bmN0aW9uIGtleXMoKXsgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih0aGlzLCBraW5kKTsgfTtcXG4gICAgICBjYXNlIFZBTFVFUzogcmV0dXJuIGZ1bmN0aW9uIHZhbHVlcygpeyByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRoaXMsIGtpbmQpOyB9O1xcbiAgICB9IHJldHVybiBmdW5jdGlvbiBlbnRyaWVzKCl7IHJldHVybiBuZXcgQ29uc3RydWN0b3IodGhpcywga2luZCk7IH07XFxuICB9O1xcbiAgdmFyIFRBRyAgICAgICAgPSBOQU1FICsgJyBJdGVyYXRvcidcXG4gICAgLCBERUZfVkFMVUVTID0gREVGQVVMVCA9PSBWQUxVRVNcXG4gICAgLCBWQUxVRVNfQlVHID0gZmFsc2VcXG4gICAgLCBwcm90byAgICAgID0gQmFzZS5wcm90b3R5cGVcXG4gICAgLCAkbmF0aXZlICAgID0gcHJvdG9bSVRFUkFUT1JdIHx8IHByb3RvW0ZGX0lURVJBVE9SXSB8fCBERUZBVUxUICYmIHByb3RvW0RFRkFVTFRdXFxuICAgICwgJGRlZmF1bHQgICA9ICRuYXRpdmUgfHwgZ2V0TWV0aG9kKERFRkFVTFQpXFxuICAgICwgJGVudHJpZXMgICA9IERFRkFVTFQgPyAhREVGX1ZBTFVFUyA/ICRkZWZhdWx0IDogZ2V0TWV0aG9kKCdlbnRyaWVzJykgOiB1bmRlZmluZWRcXG4gICAgLCAkYW55TmF0aXZlID0gTkFNRSA9PSAnQXJyYXknID8gcHJvdG8uZW50cmllcyB8fCAkbmF0aXZlIDogJG5hdGl2ZVxcbiAgICAsIG1ldGhvZHMsIGtleSwgSXRlcmF0b3JQcm90b3R5cGU7XFxuICAvLyBGaXggbmF0aXZlXFxuICBpZigkYW55TmF0aXZlKXtcXG4gICAgSXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90b3R5cGVPZigkYW55TmF0aXZlLmNhbGwobmV3IEJhc2UpKTtcXG4gICAgaWYoSXRlcmF0b3JQcm90b3R5cGUgIT09IE9iamVjdC5wcm90b3R5cGUpe1xcbiAgICAgIC8vIFNldCBAQHRvU3RyaW5nVGFnIHRvIG5hdGl2ZSBpdGVyYXRvcnNcXG4gICAgICBzZXRUb1N0cmluZ1RhZyhJdGVyYXRvclByb3RvdHlwZSwgVEFHLCB0cnVlKTtcXG4gICAgICAvLyBmaXggZm9yIHNvbWUgb2xkIGVuZ2luZXNcXG4gICAgICBpZighTElCUkFSWSAmJiAhaGFzKEl0ZXJhdG9yUHJvdG90eXBlLCBJVEVSQVRPUikpaGlkZShJdGVyYXRvclByb3RvdHlwZSwgSVRFUkFUT1IsIHJldHVyblRoaXMpO1xcbiAgICB9XFxuICB9XFxuICAvLyBmaXggQXJyYXkje3ZhbHVlcywgQEBpdGVyYXRvcn0ubmFtZSBpbiBWOCAvIEZGXFxuICBpZihERUZfVkFMVUVTICYmICRuYXRpdmUgJiYgJG5hdGl2ZS5uYW1lICE9PSBWQUxVRVMpe1xcbiAgICBWQUxVRVNfQlVHID0gdHJ1ZTtcXG4gICAgJGRlZmF1bHQgPSBmdW5jdGlvbiB2YWx1ZXMoKXsgcmV0dXJuICRuYXRpdmUuY2FsbCh0aGlzKTsgfTtcXG4gIH1cXG4gIC8vIERlZmluZSBpdGVyYXRvclxcbiAgaWYoKCFMSUJSQVJZIHx8IEZPUkNFRCkgJiYgKEJVR0dZIHx8IFZBTFVFU19CVUcgfHwgIXByb3RvW0lURVJBVE9SXSkpe1xcbiAgICBoaWRlKHByb3RvLCBJVEVSQVRPUiwgJGRlZmF1bHQpO1xcbiAgfVxcbiAgLy8gUGx1ZyBmb3IgbGlicmFyeVxcbiAgSXRlcmF0b3JzW05BTUVdID0gJGRlZmF1bHQ7XFxuICBJdGVyYXRvcnNbVEFHXSAgPSByZXR1cm5UaGlzO1xcbiAgaWYoREVGQVVMVCl7XFxuICAgIG1ldGhvZHMgPSB7XFxuICAgICAgdmFsdWVzOiAgREVGX1ZBTFVFUyA/ICRkZWZhdWx0IDogZ2V0TWV0aG9kKFZBTFVFUyksXFxuICAgICAga2V5czogICAgSVNfU0VUICAgICA/ICRkZWZhdWx0IDogZ2V0TWV0aG9kKEtFWVMpLFxcbiAgICAgIGVudHJpZXM6ICRlbnRyaWVzXFxuICAgIH07XFxuICAgIGlmKEZPUkNFRClmb3Ioa2V5IGluIG1ldGhvZHMpe1xcbiAgICAgIGlmKCEoa2V5IGluIHByb3RvKSlyZWRlZmluZShwcm90bywga2V5LCBtZXRob2RzW2tleV0pO1xcbiAgICB9IGVsc2UgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoQlVHR1kgfHwgVkFMVUVTX0JVRyksIE5BTUUsIG1ldGhvZHMpO1xcbiAgfVxcbiAgcmV0dXJuIG1ldGhvZHM7XFxufTsvLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaU1USTBMbXB6SWl3aWMyOTFjbU5sY3lJNld5SjNaV0p3WVdOck9pOHZMeTR2Zmk5amIzSmxMV3B6TDJ4cFluSmhjbmt2Ylc5a2RXeGxjeTlmYVhSbGNpMWtaV1pwYm1VdWFuTS9PV0U1TkNKZExDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SW5kWE5sSUhOMGNtbGpkQ2M3WEc1MllYSWdURWxDVWtGU1dTQWdJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTlzYVdKeVlYSjVKeWxjYmlBZ0xDQWtaWGh3YjNKMElDQWdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYMlY0Y0c5eWRDY3BYRzRnSUN3Z2NtVmtaV1pwYm1VZ0lDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOXlaV1JsWm1sdVpTY3BYRzRnSUN3Z2FHbGtaU0FnSUNBZ0lDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOW9hV1JsSnlsY2JpQWdMQ0JvWVhNZ0lDQWdJQ0FnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDJoaGN5Y3BYRzRnSUN3Z1NYUmxjbUYwYjNKeklDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOXBkR1Z5WVhSdmNuTW5LVnh1SUNBc0lDUnBkR1Z5UTNKbFlYUmxJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZhWFJsY2kxamNtVmhkR1VuS1Z4dUlDQXNJSE5sZEZSdlUzUnlhVzVuVkdGbklEMGdjbVZ4ZFdseVpTZ25MaTlmYzJWMExYUnZMWE4wY21sdVp5MTBZV2NuS1Z4dUlDQXNJR2RsZEZCeWIzUnZkSGx3WlU5bUlEMGdjbVZ4ZFdseVpTZ25MaTlmYjJKcVpXTjBMV2R3YnljcFhHNGdJQ3dnU1ZSRlVrRlVUMUlnSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5M2EzTW5LU2duYVhSbGNtRjBiM0luS1Z4dUlDQXNJRUpWUjBkWklDQWdJQ0FnSUNBZ0lEMGdJU2hiWFM1clpYbHpJQ1ltSUNkdVpYaDBKeUJwYmlCYlhTNXJaWGx6S0NrcElDOHZJRk5oWm1GeWFTQm9ZWE1nWW5Wbloza2dhWFJsY21GMGIzSnpJSGN2YnlCZ2JtVjRkR0JjYmlBZ0xDQkdSbDlKVkVWU1FWUlBVaUFnSUNBOUlDZEFRR2wwWlhKaGRHOXlKMXh1SUNBc0lFdEZXVk1nSUNBZ0lDQWdJQ0FnSUQwZ0oydGxlWE1uWEc0Z0lDd2dWa0ZNVlVWVElDQWdJQ0FnSUNBZ1BTQW5kbUZzZFdWekp6dGNibHh1ZG1GeUlISmxkSFZ5YmxSb2FYTWdQU0JtZFc1amRHbHZiaWdwZXlCeVpYUjFjbTRnZEdocGN6c2dmVHRjYmx4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCbWRXNWpkR2x2YmloQ1lYTmxMQ0JPUVUxRkxDQkRiMjV6ZEhKMVkzUnZjaXdnYm1WNGRDd2dSRVZHUVZWTVZDd2dTVk5mVTBWVUxDQkdUMUpEUlVRcGUxeHVJQ0FrYVhSbGNrTnlaV0YwWlNoRGIyNXpkSEoxWTNSdmNpd2dUa0ZOUlN3Z2JtVjRkQ2s3WEc0Z0lIWmhjaUJuWlhSTlpYUm9iMlFnUFNCbWRXNWpkR2x2YmlocmFXNWtLWHRjYmlBZ0lDQnBaaWdoUWxWSFIxa2dKaVlnYTJsdVpDQnBiaUJ3Y205MGJ5bHlaWFIxY200Z2NISnZkRzliYTJsdVpGMDdYRzRnSUNBZ2MzZHBkR05vS0d0cGJtUXBlMXh1SUNBZ0lDQWdZMkZ6WlNCTFJWbFRPaUJ5WlhSMWNtNGdablZ1WTNScGIyNGdhMlY1Y3lncGV5QnlaWFIxY200Z2JtVjNJRU52Ym5OMGNuVmpkRzl5S0hSb2FYTXNJR3RwYm1RcE95QjlPMXh1SUNBZ0lDQWdZMkZ6WlNCV1FVeFZSVk02SUhKbGRIVnliaUJtZFc1amRHbHZiaUIyWVd4MVpYTW9LWHNnY21WMGRYSnVJRzVsZHlCRGIyNXpkSEoxWTNSdmNpaDBhR2x6TENCcmFXNWtLVHNnZlR0Y2JpQWdJQ0I5SUhKbGRIVnliaUJtZFc1amRHbHZiaUJsYm5SeWFXVnpLQ2w3SUhKbGRIVnliaUJ1WlhjZ1EyOXVjM1J5ZFdOMGIzSW9kR2hwY3l3Z2EybHVaQ2s3SUgwN1hHNGdJSDA3WEc0Z0lIWmhjaUJVUVVjZ0lDQWdJQ0FnSUQwZ1RrRk5SU0FySUNjZ1NYUmxjbUYwYjNJblhHNGdJQ0FnTENCRVJVWmZWa0ZNVlVWVElEMGdSRVZHUVZWTVZDQTlQU0JXUVV4VlJWTmNiaUFnSUNBc0lGWkJURlZGVTE5Q1ZVY2dQU0JtWVd4elpWeHVJQ0FnSUN3Z2NISnZkRzhnSUNBZ0lDQTlJRUpoYzJVdWNISnZkRzkwZVhCbFhHNGdJQ0FnTENBa2JtRjBhWFpsSUNBZ0lEMGdjSEp2ZEc5YlNWUkZVa0ZVVDFKZElIeDhJSEJ5YjNSdlcwWkdYMGxVUlZKQlZFOVNYU0I4ZkNCRVJVWkJWVXhVSUNZbUlIQnliM1J2VzBSRlJrRlZURlJkWEc0Z0lDQWdMQ0FrWkdWbVlYVnNkQ0FnSUQwZ0pHNWhkR2wyWlNCOGZDQm5aWFJOWlhSb2IyUW9SRVZHUVZWTVZDbGNiaUFnSUNBc0lDUmxiblJ5YVdWeklDQWdQU0JFUlVaQlZVeFVJRDhnSVVSRlJsOVdRVXhWUlZNZ1B5QWtaR1ZtWVhWc2RDQTZJR2RsZEUxbGRHaHZaQ2duWlc1MGNtbGxjeWNwSURvZ2RXNWtaV1pwYm1Wa1hHNGdJQ0FnTENBa1lXNTVUbUYwYVhabElEMGdUa0ZOUlNBOVBTQW5RWEp5WVhrbklEOGdjSEp2ZEc4dVpXNTBjbWxsY3lCOGZDQWtibUYwYVhabElEb2dKRzVoZEdsMlpWeHVJQ0FnSUN3Z2JXVjBhRzlrY3l3Z2EyVjVMQ0JKZEdWeVlYUnZjbEJ5YjNSdmRIbHdaVHRjYmlBZ0x5OGdSbWw0SUc1aGRHbDJaVnh1SUNCcFppZ2tZVzU1VG1GMGFYWmxLWHRjYmlBZ0lDQkpkR1Z5WVhSdmNsQnliM1J2ZEhsd1pTQTlJR2RsZEZCeWIzUnZkSGx3WlU5bUtDUmhibmxPWVhScGRtVXVZMkZzYkNodVpYY2dRbUZ6WlNrcE8xeHVJQ0FnSUdsbUtFbDBaWEpoZEc5eVVISnZkRzkwZVhCbElDRTlQU0JQWW1wbFkzUXVjSEp2ZEc5MGVYQmxLWHRjYmlBZ0lDQWdJQzh2SUZObGRDQkFRSFJ2VTNSeWFXNW5WR0ZuSUhSdklHNWhkR2wyWlNCcGRHVnlZWFJ2Y25OY2JpQWdJQ0FnSUhObGRGUnZVM1J5YVc1blZHRm5LRWwwWlhKaGRHOXlVSEp2ZEc5MGVYQmxMQ0JVUVVjc0lIUnlkV1VwTzF4dUlDQWdJQ0FnTHk4Z1ptbDRJR1p2Y2lCemIyMWxJRzlzWkNCbGJtZHBibVZ6WEc0Z0lDQWdJQ0JwWmlnaFRFbENVa0ZTV1NBbUppQWhhR0Z6S0VsMFpYSmhkRzl5VUhKdmRHOTBlWEJsTENCSlZFVlNRVlJQVWlrcGFHbGtaU2hKZEdWeVlYUnZjbEJ5YjNSdmRIbHdaU3dnU1ZSRlVrRlVUMUlzSUhKbGRIVnlibFJvYVhNcE8xeHVJQ0FnSUgxY2JpQWdmVnh1SUNBdkx5Qm1hWGdnUVhKeVlYa2plM1poYkhWbGN5d2dRRUJwZEdWeVlYUnZjbjB1Ym1GdFpTQnBiaUJXT0NBdklFWkdYRzRnSUdsbUtFUkZSbDlXUVV4VlJWTWdKaVlnSkc1aGRHbDJaU0FtSmlBa2JtRjBhWFpsTG01aGJXVWdJVDA5SUZaQlRGVkZVeWw3WEc0Z0lDQWdWa0ZNVlVWVFgwSlZSeUE5SUhSeWRXVTdYRzRnSUNBZ0pHUmxabUYxYkhRZ1BTQm1kVzVqZEdsdmJpQjJZV3gxWlhNb0tYc2djbVYwZFhKdUlDUnVZWFJwZG1VdVkyRnNiQ2gwYUdsektUc2dmVHRjYmlBZ2ZWeHVJQ0F2THlCRVpXWnBibVVnYVhSbGNtRjBiM0pjYmlBZ2FXWW9LQ0ZNU1VKU1FWSlpJSHg4SUVaUFVrTkZSQ2tnSmlZZ0tFSlZSMGRaSUh4OElGWkJURlZGVTE5Q1ZVY2dmSHdnSVhCeWIzUnZXMGxVUlZKQlZFOVNYU2twZTF4dUlDQWdJR2hwWkdVb2NISnZkRzhzSUVsVVJWSkJWRTlTTENBa1pHVm1ZWFZzZENrN1hHNGdJSDFjYmlBZ0x5OGdVR3gxWnlCbWIzSWdiR2xpY21GeWVWeHVJQ0JKZEdWeVlYUnZjbk5iVGtGTlJWMGdQU0FrWkdWbVlYVnNkRHRjYmlBZ1NYUmxjbUYwYjNKelcxUkJSMTBnSUQwZ2NtVjBkWEp1VkdocGN6dGNiaUFnYVdZb1JFVkdRVlZNVkNsN1hHNGdJQ0FnYldWMGFHOWtjeUE5SUh0Y2JpQWdJQ0FnSUhaaGJIVmxjem9nSUVSRlJsOVdRVXhWUlZNZ1B5QWtaR1ZtWVhWc2RDQTZJR2RsZEUxbGRHaHZaQ2hXUVV4VlJWTXBMRnh1SUNBZ0lDQWdhMlY1Y3pvZ0lDQWdTVk5mVTBWVUlDQWdJQ0EvSUNSa1pXWmhkV3gwSURvZ1oyVjBUV1YwYUc5a0tFdEZXVk1wTEZ4dUlDQWdJQ0FnWlc1MGNtbGxjem9nSkdWdWRISnBaWE5jYmlBZ0lDQjlPMXh1SUNBZ0lHbG1LRVpQVWtORlJDbG1iM0lvYTJWNUlHbHVJRzFsZEdodlpITXBlMXh1SUNBZ0lDQWdhV1lvSVNoclpYa2dhVzRnY0hKdmRHOHBLWEpsWkdWbWFXNWxLSEJ5YjNSdkxDQnJaWGtzSUcxbGRHaHZaSE5iYTJWNVhTazdYRzRnSUNBZ2ZTQmxiSE5sSUNSbGVIQnZjblFvSkdWNGNHOXlkQzVRSUNzZ0pHVjRjRzl5ZEM1R0lDb2dLRUpWUjBkWklIeDhJRlpCVEZWRlUxOUNWVWNwTENCT1FVMUZMQ0J0WlhSb2IyUnpLVHRjYmlBZ2ZWeHVJQ0J5WlhSMWNtNGdiV1YwYUc5a2N6dGNibjA3WEc1Y2JseHVMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZYRzR2THlCWFJVSlFRVU5MSUVaUFQxUkZVbHh1THk4Z0xpOStMMk52Y21VdGFuTXZiR2xpY21GeWVTOXRiMlIxYkdWekwxOXBkR1Z5TFdSbFptbHVaUzVxYzF4dUx5OGdiVzlrZFd4bElHbGtJRDBnTVRJMFhHNHZMeUJ0YjJSMWJHVWdZMmgxYm10eklEMGdNQ0pkTENKdFlYQndhVzVuY3lJNklrRkJRVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFaUxDSnpiM1Z5WTJWU2IyOTBJam9pSW4wPVwiKTtcblxuLyoqKi8gfSksXG4vKiAxMjUgKi9cbi8qIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKiBhbGwgZXhwb3J0cyB1c2VkICovXG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pdGVyLWRldGVjdC5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5ldmFsKFwidmFyIElURVJBVE9SICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vX3drcyAqLyA1KSgnaXRlcmF0b3InKVxcbiAgLCBTQUZFX0NMT1NJTkcgPSBmYWxzZTtcXG5cXG50cnkge1xcbiAgdmFyIHJpdGVyID0gWzddW0lURVJBVE9SXSgpO1xcbiAgcml0ZXJbJ3JldHVybiddID0gZnVuY3Rpb24oKXsgU0FGRV9DTE9TSU5HID0gdHJ1ZTsgfTtcXG4gIEFycmF5LmZyb20ocml0ZXIsIGZ1bmN0aW9uKCl7IHRocm93IDI7IH0pO1xcbn0gY2F0Y2goZSl7IC8qIGVtcHR5ICovIH1cXG5cXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGV4ZWMsIHNraXBDbG9zaW5nKXtcXG4gIGlmKCFza2lwQ2xvc2luZyAmJiAhU0FGRV9DTE9TSU5HKXJldHVybiBmYWxzZTtcXG4gIHZhciBzYWZlID0gZmFsc2U7XFxuICB0cnkge1xcbiAgICB2YXIgYXJyICA9IFs3XVxcbiAgICAgICwgaXRlciA9IGFycltJVEVSQVRPUl0oKTtcXG4gICAgaXRlci5uZXh0ID0gZnVuY3Rpb24oKXsgcmV0dXJuIHtkb25lOiBzYWZlID0gdHJ1ZX07IH07XFxuICAgIGFycltJVEVSQVRPUl0gPSBmdW5jdGlvbigpeyByZXR1cm4gaXRlcjsgfTtcXG4gICAgZXhlYyhhcnIpO1xcbiAgfSBjYXRjaChlKXsgLyogZW1wdHkgKi8gfVxcbiAgcmV0dXJuIHNhZmU7XFxufTsvLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaU1USTFMbXB6SWl3aWMyOTFjbU5sY3lJNld5SjNaV0p3WVdOck9pOHZMeTR2Zmk5amIzSmxMV3B6TDJ4cFluSmhjbmt2Ylc5a2RXeGxjeTlmYVhSbGNpMWtaWFJsWTNRdWFuTS9NR0U1TVNKZExDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SjJZWElnU1ZSRlVrRlVUMUlnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmZDJ0ekp5a29KMmwwWlhKaGRHOXlKeWxjYmlBZ0xDQlRRVVpGWDBOTVQxTkpUa2NnUFNCbVlXeHpaVHRjYmx4dWRISjVJSHRjYmlBZ2RtRnlJSEpwZEdWeUlEMGdXemRkVzBsVVJWSkJWRTlTWFNncE8xeHVJQ0J5YVhSbGNsc25jbVYwZFhKdUoxMGdQU0JtZFc1amRHbHZiaWdwZXlCVFFVWkZYME5NVDFOSlRrY2dQU0IwY25WbE95QjlPMXh1SUNCQmNuSmhlUzVtY205dEtISnBkR1Z5TENCbWRXNWpkR2x2YmlncGV5QjBhSEp2ZHlBeU95QjlLVHRjYm4wZ1kyRjBZMmdvWlNsN0lDOHFJR1Z0Y0hSNUlDb3ZJSDFjYmx4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCbWRXNWpkR2x2YmlobGVHVmpMQ0J6YTJsd1EyeHZjMmx1WnlsN1hHNGdJR2xtS0NGemEybHdRMnh2YzJsdVp5QW1KaUFoVTBGR1JWOURURTlUU1U1SEtYSmxkSFZ5YmlCbVlXeHpaVHRjYmlBZ2RtRnlJSE5oWm1VZ1BTQm1ZV3h6WlR0Y2JpQWdkSEo1SUh0Y2JpQWdJQ0IyWVhJZ1lYSnlJQ0E5SUZzM1hWeHVJQ0FnSUNBZ0xDQnBkR1Z5SUQwZ1lYSnlXMGxVUlZKQlZFOVNYU2dwTzF4dUlDQWdJR2wwWlhJdWJtVjRkQ0E5SUdaMWJtTjBhVzl1S0NsN0lISmxkSFZ5YmlCN1pHOXVaVG9nYzJGbVpTQTlJSFJ5ZFdWOU95QjlPMXh1SUNBZ0lHRnljbHRKVkVWU1FWUlBVbDBnUFNCbWRXNWpkR2x2YmlncGV5QnlaWFIxY200Z2FYUmxjanNnZlR0Y2JpQWdJQ0JsZUdWaktHRnljaWs3WEc0Z0lIMGdZMkYwWTJnb1pTbDdJQzhxSUdWdGNIUjVJQ292SUgxY2JpQWdjbVYwZFhKdUlITmhabVU3WEc1OU8xeHVYRzVjYmk4dkx5OHZMeTh2THk4dkx5OHZMeTh2TDF4dUx5OGdWMFZDVUVGRFN5QkdUMDlVUlZKY2JpOHZJQzR2Zmk5amIzSmxMV3B6TDJ4cFluSmhjbmt2Ylc5a2RXeGxjeTlmYVhSbGNpMWtaWFJsWTNRdWFuTmNiaTh2SUcxdlpIVnNaU0JwWkNBOUlERXlOVnh1THk4Z2JXOWtkV3hsSUdOb2RXNXJjeUE5SURBaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTSXNJbk52ZFhKalpWSnZiM1FpT2lJaWZRPT1cIik7XG5cbi8qKiovIH0pLFxuLyogMTI2ICovXG4vKiBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyogYWxsIGV4cG9ydHMgdXNlZCAqL1xuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19saWJyYXJ5LmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuZXZhbChcIm1vZHVsZS5leHBvcnRzID0gdHJ1ZTsvLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaU1USTJMbXB6SWl3aWMyOTFjbU5sY3lJNld5SjNaV0p3WVdOck9pOHZMeTR2Zmk5amIzSmxMV3B6TDJ4cFluSmhjbmt2Ylc5a2RXeGxjeTlmYkdsaWNtRnllUzVxY3o4eVl6Z3dJbDBzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSW0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnZEhKMVpUdGNibHh1WEc0dkx5OHZMeTh2THk4dkx5OHZMeTh2THk5Y2JpOHZJRmRGUWxCQlEwc2dSazlQVkVWU1hHNHZMeUF1TDM0dlkyOXlaUzFxY3k5c2FXSnlZWEo1TDIxdlpIVnNaWE12WDJ4cFluSmhjbmt1YW5OY2JpOHZJRzF2WkhWc1pTQnBaQ0E5SURFeU5seHVMeThnYlc5a2RXeGxJR05vZFc1cmN5QTlJREFpWFN3aWJXRndjR2x1WjNNaU9pSkJRVUZCSWl3aWMyOTFjbU5sVW05dmRDSTZJaUo5XCIpO1xuXG4vKioqLyB9KSxcbi8qIDEyNyAqL1xuLyogbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9cbi8qIGFsbCBleHBvcnRzIHVzZWQgKi9cbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWNyZWF0ZS5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbmV2YWwoXCIvLyAxOS4xLjIuMiAvIDE1LjIuMy41IE9iamVjdC5jcmVhdGUoTyBbLCBQcm9wZXJ0aWVzXSlcXG52YXIgYW5PYmplY3QgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL19hbi1vYmplY3QgKi8gMTkpXFxuICAsIGRQcyAgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9fb2JqZWN0LWRwcyAqLyAxMjgpXFxuICAsIGVudW1CdWdLZXlzID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9fZW51bS1idWcta2V5cyAqLyA0NClcXG4gICwgSUVfUFJPVE8gICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL19zaGFyZWQta2V5ICovIDMzKSgnSUVfUFJPVE8nKVxcbiAgLCBFbXB0eSAgICAgICA9IGZ1bmN0aW9uKCl7IC8qIGVtcHR5ICovIH1cXG4gICwgUFJPVE9UWVBFICAgPSAncHJvdG90eXBlJztcXG5cXG4vLyBDcmVhdGUgb2JqZWN0IHdpdGggZmFrZSBgbnVsbGAgcHJvdG90eXBlOiB1c2UgaWZyYW1lIE9iamVjdCB3aXRoIGNsZWFyZWQgcHJvdG90eXBlXFxudmFyIGNyZWF0ZURpY3QgPSBmdW5jdGlvbigpe1xcbiAgLy8gVGhyYXNoLCB3YXN0ZSBhbmQgc29kb215OiBJRSBHQyBidWdcXG4gIHZhciBpZnJhbWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL19kb20tY3JlYXRlICovIDQzKSgnaWZyYW1lJylcXG4gICAgLCBpICAgICAgPSBlbnVtQnVnS2V5cy5sZW5ndGhcXG4gICAgLCBsdCAgICAgPSAnPCdcXG4gICAgLCBndCAgICAgPSAnPidcXG4gICAgLCBpZnJhbWVEb2N1bWVudDtcXG4gIGlmcmFtZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xcbiAgX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9faHRtbCAqLyAxMTgpLmFwcGVuZENoaWxkKGlmcmFtZSk7XFxuICBpZnJhbWUuc3JjID0gJ2phdmFzY3JpcHQ6JzsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1zY3JpcHQtdXJsXFxuICAvLyBjcmVhdGVEaWN0ID0gaWZyYW1lLmNvbnRlbnRXaW5kb3cuT2JqZWN0O1xcbiAgLy8gaHRtbC5yZW1vdmVDaGlsZChpZnJhbWUpO1xcbiAgaWZyYW1lRG9jdW1lbnQgPSBpZnJhbWUuY29udGVudFdpbmRvdy5kb2N1bWVudDtcXG4gIGlmcmFtZURvY3VtZW50Lm9wZW4oKTtcXG4gIGlmcmFtZURvY3VtZW50LndyaXRlKGx0ICsgJ3NjcmlwdCcgKyBndCArICdkb2N1bWVudC5GPU9iamVjdCcgKyBsdCArICcvc2NyaXB0JyArIGd0KTtcXG4gIGlmcmFtZURvY3VtZW50LmNsb3NlKCk7XFxuICBjcmVhdGVEaWN0ID0gaWZyYW1lRG9jdW1lbnQuRjtcXG4gIHdoaWxlKGktLSlkZWxldGUgY3JlYXRlRGljdFtQUk9UT1RZUEVdW2VudW1CdWdLZXlzW2ldXTtcXG4gIHJldHVybiBjcmVhdGVEaWN0KCk7XFxufTtcXG5cXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5jcmVhdGUgfHwgZnVuY3Rpb24gY3JlYXRlKE8sIFByb3BlcnRpZXMpe1xcbiAgdmFyIHJlc3VsdDtcXG4gIGlmKE8gIT09IG51bGwpe1xcbiAgICBFbXB0eVtQUk9UT1RZUEVdID0gYW5PYmplY3QoTyk7XFxuICAgIHJlc3VsdCA9IG5ldyBFbXB0eTtcXG4gICAgRW1wdHlbUFJPVE9UWVBFXSA9IG51bGw7XFxuICAgIC8vIGFkZCBcXFwiX19wcm90b19fXFxcIiBmb3IgT2JqZWN0LmdldFByb3RvdHlwZU9mIHBvbHlmaWxsXFxuICAgIHJlc3VsdFtJRV9QUk9UT10gPSBPO1xcbiAgfSBlbHNlIHJlc3VsdCA9IGNyZWF0ZURpY3QoKTtcXG4gIHJldHVybiBQcm9wZXJ0aWVzID09PSB1bmRlZmluZWQgPyByZXN1bHQgOiBkUHMocmVzdWx0LCBQcm9wZXJ0aWVzKTtcXG59O1xcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pTVRJM0xtcHpJaXdpYzI5MWNtTmxjeUk2V3lKM1pXSndZV05yT2k4dkx5NHZmaTlqYjNKbExXcHpMMnhwWW5KaGNua3ZiVzlrZFd4bGN5OWZiMkpxWldOMExXTnlaV0YwWlM1cWN6OWtPR05tSWwwc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYklpOHZJREU1TGpFdU1pNHlJQzhnTVRVdU1pNHpMalVnVDJKcVpXTjBMbU55WldGMFpTaFBJRnNzSUZCeWIzQmxjblJwWlhOZEtWeHVkbUZ5SUdGdVQySnFaV04wSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmWVc0dGIySnFaV04wSnlsY2JpQWdMQ0JrVUhNZ0lDQWdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYMjlpYW1WamRDMWtjSE1uS1Z4dUlDQXNJR1Z1ZFcxQ2RXZExaWGx6SUQwZ2NtVnhkV2x5WlNnbkxpOWZaVzUxYlMxaWRXY3RhMlY1Y3ljcFhHNGdJQ3dnU1VWZlVGSlBWRThnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTl6YUdGeVpXUXRhMlY1Snlrb0owbEZYMUJTVDFSUEp5bGNiaUFnTENCRmJYQjBlU0FnSUNBZ0lDQTlJR1oxYm1OMGFXOXVLQ2w3SUM4cUlHVnRjSFI1SUNvdklIMWNiaUFnTENCUVVrOVVUMVJaVUVVZ0lDQTlJQ2R3Y205MGIzUjVjR1VuTzF4dVhHNHZMeUJEY21WaGRHVWdiMkpxWldOMElIZHBkR2dnWm1GclpTQmdiblZzYkdBZ2NISnZkRzkwZVhCbE9pQjFjMlVnYVdaeVlXMWxJRTlpYW1WamRDQjNhWFJvSUdOc1pXRnlaV1FnY0hKdmRHOTBlWEJsWEc1MllYSWdZM0psWVhSbFJHbGpkQ0E5SUdaMWJtTjBhVzl1S0NsN1hHNGdJQzh2SUZSb2NtRnphQ3dnZDJGemRHVWdZVzVrSUhOdlpHOXRlVG9nU1VVZ1IwTWdZblZuWEc0Z0lIWmhjaUJwWm5KaGJXVWdQU0J5WlhGMWFYSmxLQ2N1TDE5a2IyMHRZM0psWVhSbEp5a29KMmxtY21GdFpTY3BYRzRnSUNBZ0xDQnBJQ0FnSUNBZ1BTQmxiblZ0UW5WblMyVjVjeTVzWlc1bmRHaGNiaUFnSUNBc0lHeDBJQ0FnSUNBOUlDYzhKMXh1SUNBZ0lDd2daM1FnSUNBZ0lEMGdKejRuWEc0Z0lDQWdMQ0JwWm5KaGJXVkViMk4xYldWdWREdGNiaUFnYVdaeVlXMWxMbk4wZVd4bExtUnBjM0JzWVhrZ1BTQW5ibTl1WlNjN1hHNGdJSEpsY1hWcGNtVW9KeTR2WDJoMGJXd25LUzVoY0hCbGJtUkRhR2xzWkNocFpuSmhiV1VwTzF4dUlDQnBabkpoYldVdWMzSmpJRDBnSjJwaGRtRnpZM0pwY0hRNkp6c2dMeThnWlhOc2FXNTBMV1JwYzJGaWJHVXRiR2x1WlNCdWJ5MXpZM0pwY0hRdGRYSnNYRzRnSUM4dklHTnlaV0YwWlVScFkzUWdQU0JwWm5KaGJXVXVZMjl1ZEdWdWRGZHBibVJ2ZHk1UFltcGxZM1E3WEc0Z0lDOHZJR2gwYld3dWNtVnRiM1psUTJocGJHUW9hV1p5WVcxbEtUdGNiaUFnYVdaeVlXMWxSRzlqZFcxbGJuUWdQU0JwWm5KaGJXVXVZMjl1ZEdWdWRGZHBibVJ2ZHk1a2IyTjFiV1Z1ZER0Y2JpQWdhV1p5WVcxbFJHOWpkVzFsYm5RdWIzQmxiaWdwTzF4dUlDQnBabkpoYldWRWIyTjFiV1Z1ZEM1M2NtbDBaU2hzZENBcklDZHpZM0pwY0hRbklDc2daM1FnS3lBblpHOWpkVzFsYm5RdVJqMVBZbXBsWTNRbklDc2diSFFnS3lBbkwzTmpjbWx3ZENjZ0t5Qm5kQ2s3WEc0Z0lHbG1jbUZ0WlVSdlkzVnRaVzUwTG1Oc2IzTmxLQ2s3WEc0Z0lHTnlaV0YwWlVScFkzUWdQU0JwWm5KaGJXVkViMk4xYldWdWRDNUdPMXh1SUNCM2FHbHNaU2hwTFMwcFpHVnNaWFJsSUdOeVpXRjBaVVJwWTNSYlVGSlBWRTlVV1ZCRlhWdGxiblZ0UW5WblMyVjVjMXRwWFYwN1hHNGdJSEpsZEhWeWJpQmpjbVZoZEdWRWFXTjBLQ2s3WEc1OU8xeHVYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJRTlpYW1WamRDNWpjbVZoZEdVZ2ZId2dablZ1WTNScGIyNGdZM0psWVhSbEtFOHNJRkJ5YjNCbGNuUnBaWE1wZTF4dUlDQjJZWElnY21WemRXeDBPMXh1SUNCcFppaFBJQ0U5UFNCdWRXeHNLWHRjYmlBZ0lDQkZiWEIwZVZ0UVVrOVVUMVJaVUVWZElEMGdZVzVQWW1wbFkzUW9UeWs3WEc0Z0lDQWdjbVZ6ZFd4MElEMGdibVYzSUVWdGNIUjVPMXh1SUNBZ0lFVnRjSFI1VzFCU1QxUlBWRmxRUlYwZ1BTQnVkV3hzTzF4dUlDQWdJQzh2SUdGa1pDQmNJbDlmY0hKdmRHOWZYMXdpSUdadmNpQlBZbXBsWTNRdVoyVjBVSEp2ZEc5MGVYQmxUMllnY0c5c2VXWnBiR3hjYmlBZ0lDQnlaWE4xYkhSYlNVVmZVRkpQVkU5ZElEMGdUenRjYmlBZ2ZTQmxiSE5sSUhKbGMzVnNkQ0E5SUdOeVpXRjBaVVJwWTNRb0tUdGNiaUFnY21WMGRYSnVJRkJ5YjNCbGNuUnBaWE1nUFQwOUlIVnVaR1ZtYVc1bFpDQS9JSEpsYzNWc2RDQTZJR1JRY3loeVpYTjFiSFFzSUZCeWIzQmxjblJwWlhNcE8xeHVmVHRjYmx4dVhHNWNiaTh2THk4dkx5OHZMeTh2THk4dkx5OHZMMXh1THk4Z1YwVkNVRUZEU3lCR1QwOVVSVkpjYmk4dklDNHZmaTlqYjNKbExXcHpMMnhwWW5KaGNua3ZiVzlrZFd4bGN5OWZiMkpxWldOMExXTnlaV0YwWlM1cWMxeHVMeThnYlc5a2RXeGxJR2xrSUQwZ01USTNYRzR2THlCdGIyUjFiR1VnWTJoMWJtdHpJRDBnTUNKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUc2lMQ0p6YjNWeVkyVlNiMjkwSWpvaUluMD1cIik7XG5cbi8qKiovIH0pLFxuLyogMTI4ICovXG4vKiBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyogYWxsIGV4cG9ydHMgdXNlZCAqL1xuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtZHBzLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuZXZhbChcInZhciBkUCAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vX29iamVjdC1kcCAqLyAyMylcXG4gICwgYW5PYmplY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL19hbi1vYmplY3QgKi8gMTkpXFxuICAsIGdldEtleXMgID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9fb2JqZWN0LWtleXMgKi8gMTMxKTtcXG5cXG5tb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vX2Rlc2NyaXB0b3JzICovIDIwKSA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzIDogZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyhPLCBQcm9wZXJ0aWVzKXtcXG4gIGFuT2JqZWN0KE8pO1xcbiAgdmFyIGtleXMgICA9IGdldEtleXMoUHJvcGVydGllcylcXG4gICAgLCBsZW5ndGggPSBrZXlzLmxlbmd0aFxcbiAgICAsIGkgPSAwXFxuICAgICwgUDtcXG4gIHdoaWxlKGxlbmd0aCA+IGkpZFAuZihPLCBQID0ga2V5c1tpKytdLCBQcm9wZXJ0aWVzW1BdKTtcXG4gIHJldHVybiBPO1xcbn07Ly8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lNVEk0TG1weklpd2ljMjkxY21ObGN5STZXeUozWldKd1lXTnJPaTh2THk0dmZpOWpiM0psTFdwekwyeHBZbkpoY25rdmJXOWtkV3hsY3k5ZmIySnFaV04wTFdSd2N5NXFjejgwTjJaa0lsMHNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJblpoY2lCa1VDQWdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYMjlpYW1WamRDMWtjQ2NwWEc0Z0lDd2dZVzVQWW1wbFkzUWdQU0J5WlhGMWFYSmxLQ2N1TDE5aGJpMXZZbXBsWTNRbktWeHVJQ0FzSUdkbGRFdGxlWE1nSUQwZ2NtVnhkV2x5WlNnbkxpOWZiMkpxWldOMExXdGxlWE1uS1R0Y2JseHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQnlaWEYxYVhKbEtDY3VMMTlrWlhOamNtbHdkRzl5Y3ljcElEOGdUMkpxWldOMExtUmxabWx1WlZCeWIzQmxjblJwWlhNZ09pQm1kVzVqZEdsdmJpQmtaV1pwYm1WUWNtOXdaWEowYVdWektFOHNJRkJ5YjNCbGNuUnBaWE1wZTF4dUlDQmhiazlpYW1WamRDaFBLVHRjYmlBZ2RtRnlJR3RsZVhNZ0lDQTlJR2RsZEV0bGVYTW9VSEp2Y0dWeWRHbGxjeWxjYmlBZ0lDQXNJR3hsYm1kMGFDQTlJR3RsZVhNdWJHVnVaM1JvWEc0Z0lDQWdMQ0JwSUQwZ01GeHVJQ0FnSUN3Z1VEdGNiaUFnZDJocGJHVW9iR1Z1WjNSb0lENGdhU2xrVUM1bUtFOHNJRkFnUFNCclpYbHpXMmtySzEwc0lGQnliM0JsY25ScFpYTmJVRjBwTzF4dUlDQnlaWFIxY200Z1R6dGNibjA3WEc1Y2JseHVMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZYRzR2THlCWFJVSlFRVU5MSUVaUFQxUkZVbHh1THk4Z0xpOStMMk52Y21VdGFuTXZiR2xpY21GeWVTOXRiMlIxYkdWekwxOXZZbXBsWTNRdFpIQnpMbXB6WEc0dkx5QnRiMlIxYkdVZ2FXUWdQU0F4TWpoY2JpOHZJRzF2WkhWc1pTQmphSFZ1YTNNZ1BTQXdJbDBzSW0xaGNIQnBibWR6SWpvaVFVRkJRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTSXNJbk52ZFhKalpWSnZiM1FpT2lJaWZRPT1cIik7XG5cbi8qKiovIH0pLFxuLyogMTI5ICovXG4vKiBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyogYWxsIGV4cG9ydHMgdXNlZCAqL1xuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtZ3BvLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuZXZhbChcIi8vIDE5LjEuMi45IC8gMTUuMi4zLjIgT2JqZWN0LmdldFByb3RvdHlwZU9mKE8pXFxudmFyIGhhcyAgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9faGFzICovIDIxKVxcbiAgLCB0b09iamVjdCAgICA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vX3RvLW9iamVjdCAqLyA1MSlcXG4gICwgSUVfUFJPVE8gICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL19zaGFyZWQta2V5ICovIDMzKSgnSUVfUFJPVE8nKVxcbiAgLCBPYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XFxuXFxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24oTyl7XFxuICBPID0gdG9PYmplY3QoTyk7XFxuICBpZihoYXMoTywgSUVfUFJPVE8pKXJldHVybiBPW0lFX1BST1RPXTtcXG4gIGlmKHR5cGVvZiBPLmNvbnN0cnVjdG9yID09ICdmdW5jdGlvbicgJiYgTyBpbnN0YW5jZW9mIE8uY29uc3RydWN0b3Ipe1xcbiAgICByZXR1cm4gTy5jb25zdHJ1Y3Rvci5wcm90b3R5cGU7XFxuICB9IHJldHVybiBPIGluc3RhbmNlb2YgT2JqZWN0ID8gT2JqZWN0UHJvdG8gOiBudWxsO1xcbn07Ly8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lNVEk1TG1weklpd2ljMjkxY21ObGN5STZXeUozWldKd1lXTnJPaTh2THk0dmZpOWpiM0psTFdwekwyeHBZbkpoY25rdmJXOWtkV3hsY3k5ZmIySnFaV04wTFdkd2J5NXFjejlrTkRka0lsMHNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJaTh2SURFNUxqRXVNaTQ1SUM4Z01UVXVNaTR6TGpJZ1QySnFaV04wTG1kbGRGQnliM1J2ZEhsd1pVOW1LRThwWEc1MllYSWdhR0Z6SUNBZ0lDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOW9ZWE1uS1Z4dUlDQXNJSFJ2VDJKcVpXTjBJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZkRzh0YjJKcVpXTjBKeWxjYmlBZ0xDQkpSVjlRVWs5VVR5QWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgzTm9ZWEpsWkMxclpYa25LU2duU1VWZlVGSlBWRThuS1Z4dUlDQXNJRTlpYW1WamRGQnliM1J2SUQwZ1QySnFaV04wTG5CeWIzUnZkSGx3WlR0Y2JseHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQlBZbXBsWTNRdVoyVjBVSEp2ZEc5MGVYQmxUMllnZkh3Z1puVnVZM1JwYjI0b1R5bDdYRzRnSUU4Z1BTQjBiMDlpYW1WamRDaFBLVHRjYmlBZ2FXWW9hR0Z6S0U4c0lFbEZYMUJTVDFSUEtTbHlaWFIxY200Z1QxdEpSVjlRVWs5VVQxMDdYRzRnSUdsbUtIUjVjR1Z2WmlCUExtTnZibk4wY25WamRHOXlJRDA5SUNkbWRXNWpkR2x2YmljZ0ppWWdUeUJwYm5OMFlXNWpaVzltSUU4dVkyOXVjM1J5ZFdOMGIzSXBlMXh1SUNBZ0lISmxkSFZ5YmlCUExtTnZibk4wY25WamRHOXlMbkJ5YjNSdmRIbHdaVHRjYmlBZ2ZTQnlaWFIxY200Z1R5QnBibk4wWVc1alpXOW1JRTlpYW1WamRDQS9JRTlpYW1WamRGQnliM1J2SURvZ2JuVnNiRHRjYm4wN1hHNWNibHh1THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2WEc0dkx5QlhSVUpRUVVOTElFWlBUMVJGVWx4dUx5OGdMaTkrTDJOdmNtVXRhbk12YkdsaWNtRnllUzl0YjJSMWJHVnpMMTl2WW1wbFkzUXRaM0J2TG1welhHNHZMeUJ0YjJSMWJHVWdhV1FnUFNBeE1qbGNiaTh2SUcxdlpIVnNaU0JqYUhWdWEzTWdQU0F3SWwwc0ltMWhjSEJwYm1keklqb2lRVUZCUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU0lzSW5OdmRYSmpaVkp2YjNRaU9pSWlmUT09XCIpO1xuXG4vKioqLyB9KSxcbi8qIDEzMCAqL1xuLyogbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9cbi8qIGFsbCBleHBvcnRzIHVzZWQgKi9cbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1rZXlzLWludGVybmFsLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbmV2YWwoXCJ2YXIgaGFzICAgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9faGFzICovIDIxKVxcbiAgLCB0b0lPYmplY3QgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL190by1pb2JqZWN0ICovIDQ5KVxcbiAgLCBhcnJheUluZGV4T2YgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL19hcnJheS1pbmNsdWRlcyAqLyAxMTUpKGZhbHNlKVxcbiAgLCBJRV9QUk9UTyAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL19zaGFyZWQta2V5ICovIDMzKSgnSUVfUFJPVE8nKTtcXG5cXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG9iamVjdCwgbmFtZXMpe1xcbiAgdmFyIE8gICAgICA9IHRvSU9iamVjdChvYmplY3QpXFxuICAgICwgaSAgICAgID0gMFxcbiAgICAsIHJlc3VsdCA9IFtdXFxuICAgICwga2V5O1xcbiAgZm9yKGtleSBpbiBPKWlmKGtleSAhPSBJRV9QUk9UTyloYXMoTywga2V5KSAmJiByZXN1bHQucHVzaChrZXkpO1xcbiAgLy8gRG9uJ3QgZW51bSBidWcgJiBoaWRkZW4ga2V5c1xcbiAgd2hpbGUobmFtZXMubGVuZ3RoID4gaSlpZihoYXMoTywga2V5ID0gbmFtZXNbaSsrXSkpe1xcbiAgICB+YXJyYXlJbmRleE9mKHJlc3VsdCwga2V5KSB8fCByZXN1bHQucHVzaChrZXkpO1xcbiAgfVxcbiAgcmV0dXJuIHJlc3VsdDtcXG59Oy8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pTVRNd0xtcHpJaXdpYzI5MWNtTmxjeUk2V3lKM1pXSndZV05yT2k4dkx5NHZmaTlqYjNKbExXcHpMMnhwWW5KaGNua3ZiVzlrZFd4bGN5OWZiMkpxWldOMExXdGxlWE10YVc1MFpYSnVZV3d1YW5NL1ptTmxZU0pkTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lKMllYSWdhR0Z6SUNBZ0lDQWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZhR0Z6SnlsY2JpQWdMQ0IwYjBsUFltcGxZM1FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTkwYnkxcGIySnFaV04wSnlsY2JpQWdMQ0JoY25KaGVVbHVaR1Y0VDJZZ1BTQnlaWEYxYVhKbEtDY3VMMTloY25KaGVTMXBibU5zZFdSbGN5Y3BLR1poYkhObEtWeHVJQ0FzSUVsRlgxQlNUMVJQSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDNOb1lYSmxaQzFyWlhrbktTZ25TVVZmVUZKUFZFOG5LVHRjYmx4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCbWRXNWpkR2x2YmlodlltcGxZM1FzSUc1aGJXVnpLWHRjYmlBZ2RtRnlJRThnSUNBZ0lDQTlJSFJ2U1U5aWFtVmpkQ2h2WW1wbFkzUXBYRzRnSUNBZ0xDQnBJQ0FnSUNBZ1BTQXdYRzRnSUNBZ0xDQnlaWE4xYkhRZ1BTQmJYVnh1SUNBZ0lDd2dhMlY1TzF4dUlDQm1iM0lvYTJWNUlHbHVJRThwYVdZb2EyVjVJQ0U5SUVsRlgxQlNUMVJQS1doaGN5aFBMQ0JyWlhrcElDWW1JSEpsYzNWc2RDNXdkWE5vS0d0bGVTazdYRzRnSUM4dklFUnZiaWQwSUdWdWRXMGdZblZuSUNZZ2FHbGtaR1Z1SUd0bGVYTmNiaUFnZDJocGJHVW9ibUZ0WlhNdWJHVnVaM1JvSUQ0Z2FTbHBaaWhvWVhNb1R5d2dhMlY1SUQwZ2JtRnRaWE5iYVNzclhTa3BlMXh1SUNBZ0lINWhjbkpoZVVsdVpHVjRUMllvY21WemRXeDBMQ0JyWlhrcElIeDhJSEpsYzNWc2RDNXdkWE5vS0d0bGVTazdYRzRnSUgxY2JpQWdjbVYwZFhKdUlISmxjM1ZzZER0Y2JuMDdYRzVjYmx4dUx5OHZMeTh2THk4dkx5OHZMeTh2THk4dlhHNHZMeUJYUlVKUVFVTkxJRVpQVDFSRlVseHVMeThnTGk5K0wyTnZjbVV0YW5NdmJHbGljbUZ5ZVM5dGIyUjFiR1Z6TDE5dlltcGxZM1F0YTJWNWN5MXBiblJsY201aGJDNXFjMXh1THk4Z2JXOWtkV3hsSUdsa0lEMGdNVE13WEc0dkx5QnRiMlIxYkdVZ1kyaDFibXR6SUQwZ01DSmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTSXNJbk52ZFhKalpWSnZiM1FpT2lJaWZRPT1cIik7XG5cbi8qKiovIH0pLFxuLyogMTMxICovXG4vKiBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyogYWxsIGV4cG9ydHMgdXNlZCAqL1xuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWtleXMuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuZXZhbChcIi8vIDE5LjEuMi4xNCAvIDE1LjIuMy4xNCBPYmplY3Qua2V5cyhPKVxcbnZhciAka2V5cyAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vX29iamVjdC1rZXlzLWludGVybmFsICovIDEzMClcXG4gICwgZW51bUJ1Z0tleXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL19lbnVtLWJ1Zy1rZXlzICovIDQ0KTtcXG5cXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5rZXlzIHx8IGZ1bmN0aW9uIGtleXMoTyl7XFxuICByZXR1cm4gJGtleXMoTywgZW51bUJ1Z0tleXMpO1xcbn07Ly8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lNVE14TG1weklpd2ljMjkxY21ObGN5STZXeUozWldKd1lXTnJPaTh2THk0dmZpOWpiM0psTFdwekwyeHBZbkpoY25rdmJXOWtkV3hsY3k5ZmIySnFaV04wTFd0bGVYTXVhbk0vWmpWaVl5SmRMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUl2THlBeE9TNHhMakl1TVRRZ0x5QXhOUzR5TGpNdU1UUWdUMkpxWldOMExtdGxlWE1vVHlsY2JuWmhjaUFrYTJWNWN5QWdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYMjlpYW1WamRDMXJaWGx6TFdsdWRHVnlibUZzSnlsY2JpQWdMQ0JsYm5WdFFuVm5TMlY1Y3lBOUlISmxjWFZwY21Vb0p5NHZYMlZ1ZFcwdFluVm5MV3RsZVhNbktUdGNibHh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0JQWW1wbFkzUXVhMlY1Y3lCOGZDQm1kVzVqZEdsdmJpQnJaWGx6S0U4cGUxeHVJQ0J5WlhSMWNtNGdKR3RsZVhNb1R5d2daVzUxYlVKMVowdGxlWE1wTzF4dWZUdGNibHh1WEc0dkx5OHZMeTh2THk4dkx5OHZMeTh2THk5Y2JpOHZJRmRGUWxCQlEwc2dSazlQVkVWU1hHNHZMeUF1TDM0dlkyOXlaUzFxY3k5c2FXSnlZWEo1TDIxdlpIVnNaWE12WDI5aWFtVmpkQzFyWlhsekxtcHpYRzR2THlCdGIyUjFiR1VnYVdRZ1BTQXhNekZjYmk4dklHMXZaSFZzWlNCamFIVnVhM01nUFNBd0lsMHNJbTFoY0hCcGJtZHpJam9pUVVGQlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU0lzSW5OdmRYSmpaVkp2YjNRaU9pSWlmUT09XCIpO1xuXG4vKioqLyB9KSxcbi8qIDEzMiAqL1xuLyogbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9cbi8qIGFsbCBleHBvcnRzIHVzZWQgKi9cbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3JlZGVmaW5lLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbmV2YWwoXCJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vX2hpZGUgKi8gMjIpOy8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pTVRNeUxtcHpJaXdpYzI5MWNtTmxjeUk2V3lKM1pXSndZV05yT2k4dkx5NHZmaTlqYjNKbExXcHpMMnhwWW5KaGNua3ZiVzlrZFd4bGN5OWZjbVZrWldacGJtVXVhbk0vTVRRMU5TSmRMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUp0YjJSMWJHVXVaWGh3YjNKMGN5QTlJSEpsY1hWcGNtVW9KeTR2WDJocFpHVW5LVHRjYmx4dVhHNHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OWNiaTh2SUZkRlFsQkJRMHNnUms5UFZFVlNYRzR2THlBdUwzNHZZMjl5WlMxcWN5OXNhV0p5WVhKNUwyMXZaSFZzWlhNdlgzSmxaR1ZtYVc1bExtcHpYRzR2THlCdGIyUjFiR1VnYVdRZ1BTQXhNekpjYmk4dklHMXZaSFZzWlNCamFIVnVhM01nUFNBd0lsMHNJbTFoY0hCcGJtZHpJam9pUVVGQlFTSXNJbk52ZFhKalpWSnZiM1FpT2lJaWZRPT1cIik7XG5cbi8qKiovIH0pLFxuLyogMTMzICovXG4vKiBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyogYWxsIGV4cG9ydHMgdXNlZCAqL1xuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3N0cmluZy1hdC5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuZXZhbChcInZhciB0b0ludGVnZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL190by1pbnRlZ2VyICovIDM0KVxcbiAgLCBkZWZpbmVkICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL19kZWZpbmVkICovIDI5KTtcXG4vLyB0cnVlICAtPiBTdHJpbmcjYXRcXG4vLyBmYWxzZSAtPiBTdHJpbmcjY29kZVBvaW50QXRcXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKFRPX1NUUklORyl7XFxuICByZXR1cm4gZnVuY3Rpb24odGhhdCwgcG9zKXtcXG4gICAgdmFyIHMgPSBTdHJpbmcoZGVmaW5lZCh0aGF0KSlcXG4gICAgICAsIGkgPSB0b0ludGVnZXIocG9zKVxcbiAgICAgICwgbCA9IHMubGVuZ3RoXFxuICAgICAgLCBhLCBiO1xcbiAgICBpZihpIDwgMCB8fCBpID49IGwpcmV0dXJuIFRPX1NUUklORyA/ICcnIDogdW5kZWZpbmVkO1xcbiAgICBhID0gcy5jaGFyQ29kZUF0KGkpO1xcbiAgICByZXR1cm4gYSA8IDB4ZDgwMCB8fCBhID4gMHhkYmZmIHx8IGkgKyAxID09PSBsIHx8IChiID0gcy5jaGFyQ29kZUF0KGkgKyAxKSkgPCAweGRjMDAgfHwgYiA+IDB4ZGZmZlxcbiAgICAgID8gVE9fU1RSSU5HID8gcy5jaGFyQXQoaSkgOiBhXFxuICAgICAgOiBUT19TVFJJTkcgPyBzLnNsaWNlKGksIGkgKyAyKSA6IChhIC0gMHhkODAwIDw8IDEwKSArIChiIC0gMHhkYzAwKSArIDB4MTAwMDA7XFxuICB9O1xcbn07Ly8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lNVE16TG1weklpd2ljMjkxY21ObGN5STZXeUozWldKd1lXTnJPaTh2THk0dmZpOWpiM0psTFdwekwyeHBZbkpoY25rdmJXOWtkV3hsY3k5ZmMzUnlhVzVuTFdGMExtcHpQelF4TTJFaVhTd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lkbUZ5SUhSdlNXNTBaV2RsY2lBOUlISmxjWFZwY21Vb0p5NHZYM1J2TFdsdWRHVm5aWEluS1Z4dUlDQXNJR1JsWm1sdVpXUWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyUmxabWx1WldRbktUdGNiaTh2SUhSeWRXVWdJQzArSUZOMGNtbHVaeU5oZEZ4dUx5OGdabUZzYzJVZ0xUNGdVM1J5YVc1bkkyTnZaR1ZRYjJsdWRFRjBYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJR1oxYm1OMGFXOXVLRlJQWDFOVVVrbE9SeWw3WEc0Z0lISmxkSFZ5YmlCbWRXNWpkR2x2YmloMGFHRjBMQ0J3YjNNcGUxeHVJQ0FnSUhaaGNpQnpJRDBnVTNSeWFXNW5LR1JsWm1sdVpXUW9kR2hoZENrcFhHNGdJQ0FnSUNBc0lHa2dQU0IwYjBsdWRHVm5aWElvY0c5ektWeHVJQ0FnSUNBZ0xDQnNJRDBnY3k1c1pXNW5kR2hjYmlBZ0lDQWdJQ3dnWVN3Z1lqdGNiaUFnSUNCcFppaHBJRHdnTUNCOGZDQnBJRDQ5SUd3cGNtVjBkWEp1SUZSUFgxTlVVa2xPUnlBL0lDY25JRG9nZFc1a1pXWnBibVZrTzF4dUlDQWdJR0VnUFNCekxtTm9ZWEpEYjJSbFFYUW9hU2s3WEc0Z0lDQWdjbVYwZFhKdUlHRWdQQ0F3ZUdRNE1EQWdmSHdnWVNBK0lEQjRaR0ptWmlCOGZDQnBJQ3NnTVNBOVBUMGdiQ0I4ZkNBb1lpQTlJSE11WTJoaGNrTnZaR1ZCZENocElDc2dNU2twSUR3Z01IaGtZekF3SUh4OElHSWdQaUF3ZUdSbVptWmNiaUFnSUNBZ0lEOGdWRTlmVTFSU1NVNUhJRDhnY3k1amFHRnlRWFFvYVNrZ09pQmhYRzRnSUNBZ0lDQTZJRlJQWDFOVVVrbE9SeUEvSUhNdWMyeHBZMlVvYVN3Z2FTQXJJRElwSURvZ0tHRWdMU0F3ZUdRNE1EQWdQRHdnTVRBcElDc2dLR0lnTFNBd2VHUmpNREFwSUNzZ01IZ3hNREF3TUR0Y2JpQWdmVHRjYm4wN1hHNWNibHh1THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2WEc0dkx5QlhSVUpRUVVOTElFWlBUMVJGVWx4dUx5OGdMaTkrTDJOdmNtVXRhbk12YkdsaWNtRnllUzl0YjJSMWJHVnpMMTl6ZEhKcGJtY3RZWFF1YW5OY2JpOHZJRzF2WkhWc1pTQnBaQ0E5SURFek0xeHVMeThnYlc5a2RXeGxJR05vZFc1cmN5QTlJREFpWFN3aWJXRndjR2x1WjNNaU9pSkJRVUZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVpTENKemIzVnlZMlZTYjI5MElqb2lJbjA9XCIpO1xuXG4vKioqLyB9KSxcbi8qIDEzNCAqL1xuLyogbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9cbi8qIGFsbCBleHBvcnRzIHVzZWQgKi9cbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3RvLWluZGV4LmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbmV2YWwoXCJ2YXIgdG9JbnRlZ2VyID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9fdG8taW50ZWdlciAqLyAzNClcXG4gICwgbWF4ICAgICAgID0gTWF0aC5tYXhcXG4gICwgbWluICAgICAgID0gTWF0aC5taW47XFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpbmRleCwgbGVuZ3RoKXtcXG4gIGluZGV4ID0gdG9JbnRlZ2VyKGluZGV4KTtcXG4gIHJldHVybiBpbmRleCA8IDAgPyBtYXgoaW5kZXggKyBsZW5ndGgsIDApIDogbWluKGluZGV4LCBsZW5ndGgpO1xcbn07Ly8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lNVE0wTG1weklpd2ljMjkxY21ObGN5STZXeUozWldKd1lXTnJPaTh2THk0dmZpOWpiM0psTFdwekwyeHBZbkpoY25rdmJXOWtkV3hsY3k5ZmRHOHRhVzVrWlhndWFuTS9PV1prTkNKZExDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SjJZWElnZEc5SmJuUmxaMlZ5SUQwZ2NtVnhkV2x5WlNnbkxpOWZkRzh0YVc1MFpXZGxjaWNwWEc0Z0lDd2diV0Y0SUNBZ0lDQWdJRDBnVFdGMGFDNXRZWGhjYmlBZ0xDQnRhVzRnSUNBZ0lDQWdQU0JOWVhSb0xtMXBianRjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnWm5WdVkzUnBiMjRvYVc1a1pYZ3NJR3hsYm1kMGFDbDdYRzRnSUdsdVpHVjRJRDBnZEc5SmJuUmxaMlZ5S0dsdVpHVjRLVHRjYmlBZ2NtVjBkWEp1SUdsdVpHVjRJRHdnTUNBL0lHMWhlQ2hwYm1SbGVDQXJJR3hsYm1kMGFDd2dNQ2tnT2lCdGFXNG9hVzVrWlhnc0lHeGxibWQwYUNrN1hHNTlPMXh1WEc1Y2JpOHZMeTh2THk4dkx5OHZMeTh2THk4dkwxeHVMeThnVjBWQ1VFRkRTeUJHVDA5VVJWSmNiaTh2SUM0dmZpOWpiM0psTFdwekwyeHBZbkpoY25rdmJXOWtkV3hsY3k5ZmRHOHRhVzVrWlhndWFuTmNiaTh2SUcxdlpIVnNaU0JwWkNBOUlERXpORnh1THk4Z2JXOWtkV3hsSUdOb2RXNXJjeUE5SURBaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJJaXdpYzI5MWNtTmxVbTl2ZENJNklpSjlcIik7XG5cbi8qKiovIH0pLFxuLyogMTM1ICovXG4vKiBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyogYWxsIGV4cG9ydHMgdXNlZCAqL1xuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3RvLXByaW1pdGl2ZS5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuZXZhbChcIi8vIDcuMS4xIFRvUHJpbWl0aXZlKGlucHV0IFssIFByZWZlcnJlZFR5cGVdKVxcbnZhciBpc09iamVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vX2lzLW9iamVjdCAqLyAzMCk7XFxuLy8gaW5zdGVhZCBvZiB0aGUgRVM2IHNwZWMgdmVyc2lvbiwgd2UgZGlkbid0IGltcGxlbWVudCBAQHRvUHJpbWl0aXZlIGNhc2VcXG4vLyBhbmQgdGhlIHNlY29uZCBhcmd1bWVudCAtIGZsYWcgLSBwcmVmZXJyZWQgdHlwZSBpcyBhIHN0cmluZ1xcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQsIFMpe1xcbiAgaWYoIWlzT2JqZWN0KGl0KSlyZXR1cm4gaXQ7XFxuICB2YXIgZm4sIHZhbDtcXG4gIGlmKFMgJiYgdHlwZW9mIChmbiA9IGl0LnRvU3RyaW5nKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpcmV0dXJuIHZhbDtcXG4gIGlmKHR5cGVvZiAoZm4gPSBpdC52YWx1ZU9mKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpcmV0dXJuIHZhbDtcXG4gIGlmKCFTICYmIHR5cGVvZiAoZm4gPSBpdC50b1N0cmluZykgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKXJldHVybiB2YWw7XFxuICB0aHJvdyBUeXBlRXJyb3IoXFxcIkNhbid0IGNvbnZlcnQgb2JqZWN0IHRvIHByaW1pdGl2ZSB2YWx1ZVxcXCIpO1xcbn07Ly8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lNVE0xTG1weklpd2ljMjkxY21ObGN5STZXeUozWldKd1lXTnJPaTh2THk0dmZpOWpiM0psTFdwekwyeHBZbkpoY25rdmJXOWtkV3hsY3k5ZmRHOHRjSEpwYldsMGFYWmxMbXB6UHpRNVlUUWlYU3dpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpTHk4Z055NHhMakVnVkc5UWNtbHRhWFJwZG1Vb2FXNXdkWFFnV3l3Z1VISmxabVZ5Y21Wa1ZIbHdaVjBwWEc1MllYSWdhWE5QWW1wbFkzUWdQU0J5WlhGMWFYSmxLQ2N1TDE5cGN5MXZZbXBsWTNRbktUdGNiaTh2SUdsdWMzUmxZV1FnYjJZZ2RHaGxJRVZUTmlCemNHVmpJSFpsY25OcGIyNHNJSGRsSUdScFpHNG5kQ0JwYlhCc1pXMWxiblFnUUVCMGIxQnlhVzFwZEdsMlpTQmpZWE5sWEc0dkx5QmhibVFnZEdobElITmxZMjl1WkNCaGNtZDFiV1Z1ZENBdElHWnNZV2NnTFNCd2NtVm1aWEp5WldRZ2RIbHdaU0JwY3lCaElITjBjbWx1WjF4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCbWRXNWpkR2x2YmlocGRDd2dVeWw3WEc0Z0lHbG1LQ0ZwYzA5aWFtVmpkQ2hwZENrcGNtVjBkWEp1SUdsME8xeHVJQ0IyWVhJZ1ptNHNJSFpoYkR0Y2JpQWdhV1lvVXlBbUppQjBlWEJsYjJZZ0tHWnVJRDBnYVhRdWRHOVRkSEpwYm1jcElEMDlJQ2RtZFc1amRHbHZiaWNnSmlZZ0lXbHpUMkpxWldOMEtIWmhiQ0E5SUdadUxtTmhiR3dvYVhRcEtTbHlaWFIxY200Z2RtRnNPMXh1SUNCcFppaDBlWEJsYjJZZ0tHWnVJRDBnYVhRdWRtRnNkV1ZQWmlrZ1BUMGdKMloxYm1OMGFXOXVKeUFtSmlBaGFYTlBZbXBsWTNRb2RtRnNJRDBnWm00dVkyRnNiQ2hwZENrcEtYSmxkSFZ5YmlCMllXdzdYRzRnSUdsbUtDRlRJQ1ltSUhSNWNHVnZaaUFvWm00Z1BTQnBkQzUwYjFOMGNtbHVaeWtnUFQwZ0oyWjFibU4wYVc5dUp5QW1KaUFoYVhOUFltcGxZM1FvZG1Gc0lEMGdabTR1WTJGc2JDaHBkQ2twS1hKbGRIVnliaUIyWVd3N1hHNGdJSFJvY205M0lGUjVjR1ZGY25KdmNpaGNJa05oYmlkMElHTnZiblpsY25RZ2IySnFaV04wSUhSdklIQnlhVzFwZEdsMlpTQjJZV3gxWlZ3aUtUdGNibjA3WEc1Y2JseHVMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZYRzR2THlCWFJVSlFRVU5MSUVaUFQxUkZVbHh1THk4Z0xpOStMMk52Y21VdGFuTXZiR2xpY21GeWVTOXRiMlIxYkdWekwxOTBieTF3Y21sdGFYUnBkbVV1YW5OY2JpOHZJRzF2WkhWc1pTQnBaQ0E5SURFek5WeHVMeThnYlc5a2RXeGxJR05vZFc1cmN5QTlJREFpWFN3aWJXRndjR2x1WjNNaU9pSkJRVUZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVNJc0luTnZkWEpqWlZKdmIzUWlPaUlpZlE9PVwiKTtcblxuLyoqKi8gfSksXG4vKiAxMzYgKi9cbi8qIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKiBhbGwgZXhwb3J0cyB1c2VkICovXG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2NvcmUuZ2V0LWl0ZXJhdG9yLW1ldGhvZC5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5ldmFsKFwidmFyIGNsYXNzb2YgICA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vX2NsYXNzb2YgKi8gMTE2KVxcbiAgLCBJVEVSQVRPUiAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL193a3MgKi8gNSkoJ2l0ZXJhdG9yJylcXG4gICwgSXRlcmF0b3JzID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9faXRlcmF0b3JzICovIDMxKTtcXG5tb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vX2NvcmUgKi8gMjgpLmdldEl0ZXJhdG9yTWV0aG9kID0gZnVuY3Rpb24oaXQpe1xcbiAgaWYoaXQgIT0gdW5kZWZpbmVkKXJldHVybiBpdFtJVEVSQVRPUl1cXG4gICAgfHwgaXRbJ0BAaXRlcmF0b3InXVxcbiAgICB8fCBJdGVyYXRvcnNbY2xhc3NvZihpdCldO1xcbn07Ly8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lNVE0yTG1weklpd2ljMjkxY21ObGN5STZXeUozWldKd1lXTnJPaTh2THk0dmZpOWpiM0psTFdwekwyeHBZbkpoY25rdmJXOWtkV3hsY3k5amIzSmxMbWRsZEMxcGRHVnlZWFJ2Y2kxdFpYUm9iMlF1YW5NL09XTTRPQ0pkTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lKMllYSWdZMnhoYzNOdlppQWdJRDBnY21WeGRXbHlaU2duTGk5ZlkyeGhjM052WmljcFhHNGdJQ3dnU1ZSRlVrRlVUMUlnSUQwZ2NtVnhkV2x5WlNnbkxpOWZkMnR6Snlrb0oybDBaWEpoZEc5eUp5bGNiaUFnTENCSmRHVnlZWFJ2Y25NZ1BTQnlaWEYxYVhKbEtDY3VMMTlwZEdWeVlYUnZjbk1uS1R0Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ2NtVnhkV2x5WlNnbkxpOWZZMjl5WlNjcExtZGxkRWwwWlhKaGRHOXlUV1YwYUc5a0lEMGdablZ1WTNScGIyNG9hWFFwZTF4dUlDQnBaaWhwZENBaFBTQjFibVJsWm1sdVpXUXBjbVYwZFhKdUlHbDBXMGxVUlZKQlZFOVNYVnh1SUNBZ0lIeDhJR2wwV3lkQVFHbDBaWEpoZEc5eUoxMWNiaUFnSUNCOGZDQkpkR1Z5WVhSdmNuTmJZMnhoYzNOdlppaHBkQ2xkTzF4dWZUdGNibHh1WEc0dkx5OHZMeTh2THk4dkx5OHZMeTh2THk5Y2JpOHZJRmRGUWxCQlEwc2dSazlQVkVWU1hHNHZMeUF1TDM0dlkyOXlaUzFxY3k5c2FXSnlZWEo1TDIxdlpIVnNaWE12WTI5eVpTNW5aWFF0YVhSbGNtRjBiM0l0YldWMGFHOWtMbXB6WEc0dkx5QnRiMlIxYkdVZ2FXUWdQU0F4TXpaY2JpOHZJRzF2WkhWc1pTQmphSFZ1YTNNZ1BTQXdJbDBzSW0xaGNIQnBibWR6SWpvaVFVRkJRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJJaXdpYzI5MWNtTmxVbTl2ZENJNklpSjlcIik7XG5cbi8qKiovIH0pLFxuLyogMTM3ICovXG4vKiBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyogYWxsIGV4cG9ydHMgdXNlZCAqL1xuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5hcnJheS5mcm9tLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5ldmFsKFwiXFxudmFyIGN0eCAgICAgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9fY3R4ICovIDQyKVxcbiAgLCAkZXhwb3J0ICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vX2V4cG9ydCAqLyA0NSlcXG4gICwgdG9PYmplY3QgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL190by1vYmplY3QgKi8gNTEpXFxuICAsIGNhbGwgICAgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9faXRlci1jYWxsICovIDEyMilcXG4gICwgaXNBcnJheUl0ZXIgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL19pcy1hcnJheS1pdGVyICovIDEyMSlcXG4gICwgdG9MZW5ndGggICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL190by1sZW5ndGggKi8gNTApXFxuICAsIGNyZWF0ZVByb3BlcnR5ID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9fY3JlYXRlLXByb3BlcnR5ICovIDExNylcXG4gICwgZ2V0SXRlckZuICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL2NvcmUuZ2V0LWl0ZXJhdG9yLW1ldGhvZCAqLyAxMzYpO1xcblxcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIV9fd2VicGFja19yZXF1aXJlX18oLyohIC4vX2l0ZXItZGV0ZWN0ICovIDEyNSkoZnVuY3Rpb24oaXRlcil7IEFycmF5LmZyb20oaXRlcik7IH0pLCAnQXJyYXknLCB7XFxuICAvLyAyMi4xLjIuMSBBcnJheS5mcm9tKGFycmF5TGlrZSwgbWFwZm4gPSB1bmRlZmluZWQsIHRoaXNBcmcgPSB1bmRlZmluZWQpXFxuICBmcm9tOiBmdW5jdGlvbiBmcm9tKGFycmF5TGlrZS8qLCBtYXBmbiA9IHVuZGVmaW5lZCwgdGhpc0FyZyA9IHVuZGVmaW5lZCovKXtcXG4gICAgdmFyIE8gICAgICAgPSB0b09iamVjdChhcnJheUxpa2UpXFxuICAgICAgLCBDICAgICAgID0gdHlwZW9mIHRoaXMgPT0gJ2Z1bmN0aW9uJyA/IHRoaXMgOiBBcnJheVxcbiAgICAgICwgYUxlbiAgICA9IGFyZ3VtZW50cy5sZW5ndGhcXG4gICAgICAsIG1hcGZuICAgPSBhTGVuID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZFxcbiAgICAgICwgbWFwcGluZyA9IG1hcGZuICE9PSB1bmRlZmluZWRcXG4gICAgICAsIGluZGV4ICAgPSAwXFxuICAgICAgLCBpdGVyRm4gID0gZ2V0SXRlckZuKE8pXFxuICAgICAgLCBsZW5ndGgsIHJlc3VsdCwgc3RlcCwgaXRlcmF0b3I7XFxuICAgIGlmKG1hcHBpbmcpbWFwZm4gPSBjdHgobWFwZm4sIGFMZW4gPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkLCAyKTtcXG4gICAgLy8gaWYgb2JqZWN0IGlzbid0IGl0ZXJhYmxlIG9yIGl0J3MgYXJyYXkgd2l0aCBkZWZhdWx0IGl0ZXJhdG9yIC0gdXNlIHNpbXBsZSBjYXNlXFxuICAgIGlmKGl0ZXJGbiAhPSB1bmRlZmluZWQgJiYgIShDID09IEFycmF5ICYmIGlzQXJyYXlJdGVyKGl0ZXJGbikpKXtcXG4gICAgICBmb3IoaXRlcmF0b3IgPSBpdGVyRm4uY2FsbChPKSwgcmVzdWx0ID0gbmV3IEM7ICEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZTsgaW5kZXgrKyl7XFxuICAgICAgICBjcmVhdGVQcm9wZXJ0eShyZXN1bHQsIGluZGV4LCBtYXBwaW5nID8gY2FsbChpdGVyYXRvciwgbWFwZm4sIFtzdGVwLnZhbHVlLCBpbmRleF0sIHRydWUpIDogc3RlcC52YWx1ZSk7XFxuICAgICAgfVxcbiAgICB9IGVsc2Uge1xcbiAgICAgIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcXG4gICAgICBmb3IocmVzdWx0ID0gbmV3IEMobGVuZ3RoKTsgbGVuZ3RoID4gaW5kZXg7IGluZGV4Kyspe1xcbiAgICAgICAgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBpbmRleCwgbWFwcGluZyA/IG1hcGZuKE9baW5kZXhdLCBpbmRleCkgOiBPW2luZGV4XSk7XFxuICAgICAgfVxcbiAgICB9XFxuICAgIHJlc3VsdC5sZW5ndGggPSBpbmRleDtcXG4gICAgcmV0dXJuIHJlc3VsdDtcXG4gIH1cXG59KTtcXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaU1UTTNMbXB6SWl3aWMyOTFjbU5sY3lJNld5SjNaV0p3WVdOck9pOHZMeTR2Zmk5amIzSmxMV3B6TDJ4cFluSmhjbmt2Ylc5a2RXeGxjeTlsY3pZdVlYSnlZWGt1Wm5KdmJTNXFjejlqWlRka0lsMHNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJaWQxYzJVZ2MzUnlhV04wSnp0Y2JuWmhjaUJqZEhnZ0lDQWdJQ0FnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDJOMGVDY3BYRzRnSUN3Z0pHVjRjRzl5ZENBZ0lDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOWxlSEJ2Y25RbktWeHVJQ0FzSUhSdlQySnFaV04wSUNBZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZmRHOHRiMkpxWldOMEp5bGNiaUFnTENCallXeHNJQ0FnSUNBZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgybDBaWEl0WTJGc2JDY3BYRzRnSUN3Z2FYTkJjbkpoZVVsMFpYSWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOXBjeTFoY25KaGVTMXBkR1Z5SnlsY2JpQWdMQ0IwYjB4bGJtZDBhQ0FnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDNSdkxXeGxibWQwYUNjcFhHNGdJQ3dnWTNKbFlYUmxVSEp2Y0dWeWRIa2dQU0J5WlhGMWFYSmxLQ2N1TDE5amNtVmhkR1V0Y0hKdmNHVnlkSGtuS1Z4dUlDQXNJR2RsZEVsMFpYSkdiaUFnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlqYjNKbExtZGxkQzFwZEdWeVlYUnZjaTF0WlhSb2IyUW5LVHRjYmx4dUpHVjRjRzl5ZENna1pYaHdiM0owTGxNZ0t5QWtaWGh3YjNKMExrWWdLaUFoY21WeGRXbHlaU2duTGk5ZmFYUmxjaTFrWlhSbFkzUW5LU2htZFc1amRHbHZiaWhwZEdWeUtYc2dRWEp5WVhrdVpuSnZiU2hwZEdWeUtUc2dmU2tzSUNkQmNuSmhlU2NzSUh0Y2JpQWdMeThnTWpJdU1TNHlMakVnUVhKeVlYa3Vabkp2YlNoaGNuSmhlVXhwYTJVc0lHMWhjR1p1SUQwZ2RXNWtaV1pwYm1Wa0xDQjBhR2x6UVhKbklEMGdkVzVrWldacGJtVmtLVnh1SUNCbWNtOXRPaUJtZFc1amRHbHZiaUJtY205dEtHRnljbUY1VEdsclpTOHFMQ0J0WVhCbWJpQTlJSFZ1WkdWbWFXNWxaQ3dnZEdocGMwRnlaeUE5SUhWdVpHVm1hVzVsWkNvdktYdGNiaUFnSUNCMllYSWdUeUFnSUNBZ0lDQTlJSFJ2VDJKcVpXTjBLR0Z5Y21GNVRHbHJaU2xjYmlBZ0lDQWdJQ3dnUXlBZ0lDQWdJQ0E5SUhSNWNHVnZaaUIwYUdseklEMDlJQ2RtZFc1amRHbHZiaWNnUHlCMGFHbHpJRG9nUVhKeVlYbGNiaUFnSUNBZ0lDd2dZVXhsYmlBZ0lDQTlJR0Z5WjNWdFpXNTBjeTVzWlc1bmRHaGNiaUFnSUNBZ0lDd2diV0Z3Wm00Z0lDQTlJR0ZNWlc0Z1BpQXhJRDhnWVhKbmRXMWxiblJ6V3pGZElEb2dkVzVrWldacGJtVmtYRzRnSUNBZ0lDQXNJRzFoY0hCcGJtY2dQU0J0WVhCbWJpQWhQVDBnZFc1a1pXWnBibVZrWEc0Z0lDQWdJQ0FzSUdsdVpHVjRJQ0FnUFNBd1hHNGdJQ0FnSUNBc0lHbDBaWEpHYmlBZ1BTQm5aWFJKZEdWeVJtNG9UeWxjYmlBZ0lDQWdJQ3dnYkdWdVozUm9MQ0J5WlhOMWJIUXNJSE4wWlhBc0lHbDBaWEpoZEc5eU8xeHVJQ0FnSUdsbUtHMWhjSEJwYm1jcGJXRndabTRnUFNCamRIZ29iV0Z3Wm00c0lHRk1aVzRnUGlBeUlEOGdZWEpuZFcxbGJuUnpXekpkSURvZ2RXNWtaV1pwYm1Wa0xDQXlLVHRjYmlBZ0lDQXZMeUJwWmlCdlltcGxZM1FnYVhOdUozUWdhWFJsY21GaWJHVWdiM0lnYVhRbmN5QmhjbkpoZVNCM2FYUm9JR1JsWm1GMWJIUWdhWFJsY21GMGIzSWdMU0IxYzJVZ2MybHRjR3hsSUdOaGMyVmNiaUFnSUNCcFppaHBkR1Z5Um00Z0lUMGdkVzVrWldacGJtVmtJQ1ltSUNFb1F5QTlQU0JCY25KaGVTQW1KaUJwYzBGeWNtRjVTWFJsY2locGRHVnlSbTRwS1NsN1hHNGdJQ0FnSUNCbWIzSW9hWFJsY21GMGIzSWdQU0JwZEdWeVJtNHVZMkZzYkNoUEtTd2djbVZ6ZFd4MElEMGdibVYzSUVNN0lDRW9jM1JsY0NBOUlHbDBaWEpoZEc5eUxtNWxlSFFvS1NrdVpHOXVaVHNnYVc1a1pYZ3JLeWw3WEc0Z0lDQWdJQ0FnSUdOeVpXRjBaVkJ5YjNCbGNuUjVLSEpsYzNWc2RDd2dhVzVrWlhnc0lHMWhjSEJwYm1jZ1B5QmpZV3hzS0dsMFpYSmhkRzl5TENCdFlYQm1iaXdnVzNOMFpYQXVkbUZzZFdVc0lHbHVaR1Y0WFN3Z2RISjFaU2tnT2lCemRHVndMblpoYkhWbEtUdGNiaUFnSUNBZ0lIMWNiaUFnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnYkdWdVozUm9JRDBnZEc5TVpXNW5kR2dvVHk1c1pXNW5kR2dwTzF4dUlDQWdJQ0FnWm05eUtISmxjM1ZzZENBOUlHNWxkeUJES0d4bGJtZDBhQ2s3SUd4bGJtZDBhQ0ErSUdsdVpHVjRPeUJwYm1SbGVDc3JLWHRjYmlBZ0lDQWdJQ0FnWTNKbFlYUmxVSEp2Y0dWeWRIa29jbVZ6ZFd4MExDQnBibVJsZUN3Z2JXRndjR2x1WnlBL0lHMWhjR1p1S0U5YmFXNWtaWGhkTENCcGJtUmxlQ2tnT2lCUFcybHVaR1Y0WFNrN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dUlDQWdJSEpsYzNWc2RDNXNaVzVuZEdnZ1BTQnBibVJsZUR0Y2JpQWdJQ0J5WlhSMWNtNGdjbVZ6ZFd4ME8xeHVJQ0I5WEc1OUtUdGNibHh1WEc1Y2JpOHZMeTh2THk4dkx5OHZMeTh2THk4dkwxeHVMeThnVjBWQ1VFRkRTeUJHVDA5VVJWSmNiaTh2SUM0dmZpOWpiM0psTFdwekwyeHBZbkpoY25rdmJXOWtkV3hsY3k5bGN6WXVZWEp5WVhrdVpuSnZiUzVxYzF4dUx5OGdiVzlrZFd4bElHbGtJRDBnTVRNM1hHNHZMeUJ0YjJSMWJHVWdZMmgxYm10eklEMGdNQ0pkTENKdFlYQndhVzVuY3lJNklrRkJRVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3SWl3aWMyOTFjbU5sVW05dmRDSTZJaUo5XCIpO1xuXG4vKioqLyB9KSxcbi8qIDEzOCAqL1xuLyogbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9cbi8qIGFsbCBleHBvcnRzIHVzZWQgKi9cbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5zdHJpbmcuaXRlcmF0b3IuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuZXZhbChcIlxcbnZhciAkYXQgID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9fc3RyaW5nLWF0ICovIDEzMykodHJ1ZSk7XFxuXFxuLy8gMjEuMS4zLjI3IFN0cmluZy5wcm90b3R5cGVbQEBpdGVyYXRvcl0oKVxcbl9fd2VicGFja19yZXF1aXJlX18oLyohIC4vX2l0ZXItZGVmaW5lICovIDEyNCkoU3RyaW5nLCAnU3RyaW5nJywgZnVuY3Rpb24oaXRlcmF0ZWQpe1xcbiAgdGhpcy5fdCA9IFN0cmluZyhpdGVyYXRlZCk7IC8vIHRhcmdldFxcbiAgdGhpcy5faSA9IDA7ICAgICAgICAgICAgICAgIC8vIG5leHQgaW5kZXhcXG4vLyAyMS4xLjUuMi4xICVTdHJpbmdJdGVyYXRvclByb3RvdHlwZSUubmV4dCgpXFxufSwgZnVuY3Rpb24oKXtcXG4gIHZhciBPICAgICA9IHRoaXMuX3RcXG4gICAgLCBpbmRleCA9IHRoaXMuX2lcXG4gICAgLCBwb2ludDtcXG4gIGlmKGluZGV4ID49IE8ubGVuZ3RoKXJldHVybiB7dmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZX07XFxuICBwb2ludCA9ICRhdChPLCBpbmRleCk7XFxuICB0aGlzLl9pICs9IHBvaW50Lmxlbmd0aDtcXG4gIHJldHVybiB7dmFsdWU6IHBvaW50LCBkb25lOiBmYWxzZX07XFxufSk7Ly8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lNVE00TG1weklpd2ljMjkxY21ObGN5STZXeUozWldKd1lXTnJPaTh2THk0dmZpOWpiM0psTFdwekwyeHBZbkpoY25rdmJXOWtkV3hsY3k5bGN6WXVjM1J5YVc1bkxtbDBaWEpoZEc5eUxtcHpQMlpsTVRnaVhTd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lKM1Z6WlNCemRISnBZM1FuTzF4dWRtRnlJQ1JoZENBZ1BTQnlaWEYxYVhKbEtDY3VMMTl6ZEhKcGJtY3RZWFFuS1NoMGNuVmxLVHRjYmx4dUx5OGdNakV1TVM0ekxqSTNJRk4wY21sdVp5NXdjbTkwYjNSNWNHVmJRRUJwZEdWeVlYUnZjbDBvS1Z4dWNtVnhkV2x5WlNnbkxpOWZhWFJsY2kxa1pXWnBibVVuS1NoVGRISnBibWNzSUNkVGRISnBibWNuTENCbWRXNWpkR2x2YmlocGRHVnlZWFJsWkNsN1hHNGdJSFJvYVhNdVgzUWdQU0JUZEhKcGJtY29hWFJsY21GMFpXUXBPeUF2THlCMFlYSm5aWFJjYmlBZ2RHaHBjeTVmYVNBOUlEQTdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJRzVsZUhRZ2FXNWtaWGhjYmk4dklESXhMakV1TlM0eUxqRWdKVk4wY21sdVowbDBaWEpoZEc5eVVISnZkRzkwZVhCbEpTNXVaWGgwS0NsY2JuMHNJR1oxYm1OMGFXOXVLQ2w3WEc0Z0lIWmhjaUJQSUNBZ0lDQTlJSFJvYVhNdVgzUmNiaUFnSUNBc0lHbHVaR1Y0SUQwZ2RHaHBjeTVmYVZ4dUlDQWdJQ3dnY0c5cGJuUTdYRzRnSUdsbUtHbHVaR1Y0SUQ0OUlFOHViR1Z1WjNSb0tYSmxkSFZ5YmlCN2RtRnNkV1U2SUhWdVpHVm1hVzVsWkN3Z1pHOXVaVG9nZEhKMVpYMDdYRzRnSUhCdmFXNTBJRDBnSkdGMEtFOHNJR2x1WkdWNEtUdGNiaUFnZEdocGN5NWZhU0FyUFNCd2IybHVkQzVzWlc1bmRHZzdYRzRnSUhKbGRIVnliaUI3ZG1Gc2RXVTZJSEJ2YVc1MExDQmtiMjVsT2lCbVlXeHpaWDA3WEc1OUtUdGNibHh1WEc0dkx5OHZMeTh2THk4dkx5OHZMeTh2THk5Y2JpOHZJRmRGUWxCQlEwc2dSazlQVkVWU1hHNHZMeUF1TDM0dlkyOXlaUzFxY3k5c2FXSnlZWEo1TDIxdlpIVnNaWE12WlhNMkxuTjBjbWx1Wnk1cGRHVnlZWFJ2Y2k1cWMxeHVMeThnYlc5a2RXeGxJR2xrSUQwZ01UTTRYRzR2THlCdGIyUjFiR1VnWTJoMWJtdHpJRDBnTUNKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVNJc0luTnZkWEpqWlZKdmIzUWlPaUlpZlE9PVwiKTtcblxuLyoqKi8gfSksXG4vKiAxMzkgKi9cbi8qIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKiBhbGwgZXhwb3J0cyB1c2VkICovXG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL34vY3J5cHQvY3J5cHQuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5ldmFsKFwiKGZ1bmN0aW9uKCkge1xcbiAgdmFyIGJhc2U2NG1hcFxcbiAgICAgID0gJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky8nLFxcblxcbiAgY3J5cHQgPSB7XFxuICAgIC8vIEJpdC13aXNlIHJvdGF0aW9uIGxlZnRcXG4gICAgcm90bDogZnVuY3Rpb24obiwgYikge1xcbiAgICAgIHJldHVybiAobiA8PCBiKSB8IChuID4+PiAoMzIgLSBiKSk7XFxuICAgIH0sXFxuXFxuICAgIC8vIEJpdC13aXNlIHJvdGF0aW9uIHJpZ2h0XFxuICAgIHJvdHI6IGZ1bmN0aW9uKG4sIGIpIHtcXG4gICAgICByZXR1cm4gKG4gPDwgKDMyIC0gYikpIHwgKG4gPj4+IGIpO1xcbiAgICB9LFxcblxcbiAgICAvLyBTd2FwIGJpZy1lbmRpYW4gdG8gbGl0dGxlLWVuZGlhbiBhbmQgdmljZSB2ZXJzYVxcbiAgICBlbmRpYW46IGZ1bmN0aW9uKG4pIHtcXG4gICAgICAvLyBJZiBudW1iZXIgZ2l2ZW4sIHN3YXAgZW5kaWFuXFxuICAgICAgaWYgKG4uY29uc3RydWN0b3IgPT0gTnVtYmVyKSB7XFxuICAgICAgICByZXR1cm4gY3J5cHQucm90bChuLCA4KSAmIDB4MDBGRjAwRkYgfCBjcnlwdC5yb3RsKG4sIDI0KSAmIDB4RkYwMEZGMDA7XFxuICAgICAgfVxcblxcbiAgICAgIC8vIEVsc2UsIGFzc3VtZSBhcnJheSBhbmQgc3dhcCBhbGwgaXRlbXNcXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG4ubGVuZ3RoOyBpKyspXFxuICAgICAgICBuW2ldID0gY3J5cHQuZW5kaWFuKG5baV0pO1xcbiAgICAgIHJldHVybiBuO1xcbiAgICB9LFxcblxcbiAgICAvLyBHZW5lcmF0ZSBhbiBhcnJheSBvZiBhbnkgbGVuZ3RoIG9mIHJhbmRvbSBieXRlc1xcbiAgICByYW5kb21CeXRlczogZnVuY3Rpb24obikge1xcbiAgICAgIGZvciAodmFyIGJ5dGVzID0gW107IG4gPiAwOyBuLS0pXFxuICAgICAgICBieXRlcy5wdXNoKE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDI1NikpO1xcbiAgICAgIHJldHVybiBieXRlcztcXG4gICAgfSxcXG5cXG4gICAgLy8gQ29udmVydCBhIGJ5dGUgYXJyYXkgdG8gYmlnLWVuZGlhbiAzMi1iaXQgd29yZHNcXG4gICAgYnl0ZXNUb1dvcmRzOiBmdW5jdGlvbihieXRlcykge1xcbiAgICAgIGZvciAodmFyIHdvcmRzID0gW10sIGkgPSAwLCBiID0gMDsgaSA8IGJ5dGVzLmxlbmd0aDsgaSsrLCBiICs9IDgpXFxuICAgICAgICB3b3Jkc1tiID4+PiA1XSB8PSBieXRlc1tpXSA8PCAoMjQgLSBiICUgMzIpO1xcbiAgICAgIHJldHVybiB3b3JkcztcXG4gICAgfSxcXG5cXG4gICAgLy8gQ29udmVydCBiaWctZW5kaWFuIDMyLWJpdCB3b3JkcyB0byBhIGJ5dGUgYXJyYXlcXG4gICAgd29yZHNUb0J5dGVzOiBmdW5jdGlvbih3b3Jkcykge1xcbiAgICAgIGZvciAodmFyIGJ5dGVzID0gW10sIGIgPSAwOyBiIDwgd29yZHMubGVuZ3RoICogMzI7IGIgKz0gOClcXG4gICAgICAgIGJ5dGVzLnB1c2goKHdvcmRzW2IgPj4+IDVdID4+PiAoMjQgLSBiICUgMzIpKSAmIDB4RkYpO1xcbiAgICAgIHJldHVybiBieXRlcztcXG4gICAgfSxcXG5cXG4gICAgLy8gQ29udmVydCBhIGJ5dGUgYXJyYXkgdG8gYSBoZXggc3RyaW5nXFxuICAgIGJ5dGVzVG9IZXg6IGZ1bmN0aW9uKGJ5dGVzKSB7XFxuICAgICAgZm9yICh2YXIgaGV4ID0gW10sIGkgPSAwOyBpIDwgYnl0ZXMubGVuZ3RoOyBpKyspIHtcXG4gICAgICAgIGhleC5wdXNoKChieXRlc1tpXSA+Pj4gNCkudG9TdHJpbmcoMTYpKTtcXG4gICAgICAgIGhleC5wdXNoKChieXRlc1tpXSAmIDB4RikudG9TdHJpbmcoMTYpKTtcXG4gICAgICB9XFxuICAgICAgcmV0dXJuIGhleC5qb2luKCcnKTtcXG4gICAgfSxcXG5cXG4gICAgLy8gQ29udmVydCBhIGhleCBzdHJpbmcgdG8gYSBieXRlIGFycmF5XFxuICAgIGhleFRvQnl0ZXM6IGZ1bmN0aW9uKGhleCkge1xcbiAgICAgIGZvciAodmFyIGJ5dGVzID0gW10sIGMgPSAwOyBjIDwgaGV4Lmxlbmd0aDsgYyArPSAyKVxcbiAgICAgICAgYnl0ZXMucHVzaChwYXJzZUludChoZXguc3Vic3RyKGMsIDIpLCAxNikpO1xcbiAgICAgIHJldHVybiBieXRlcztcXG4gICAgfSxcXG5cXG4gICAgLy8gQ29udmVydCBhIGJ5dGUgYXJyYXkgdG8gYSBiYXNlLTY0IHN0cmluZ1xcbiAgICBieXRlc1RvQmFzZTY0OiBmdW5jdGlvbihieXRlcykge1xcbiAgICAgIGZvciAodmFyIGJhc2U2NCA9IFtdLCBpID0gMDsgaSA8IGJ5dGVzLmxlbmd0aDsgaSArPSAzKSB7XFxuICAgICAgICB2YXIgdHJpcGxldCA9IChieXRlc1tpXSA8PCAxNikgfCAoYnl0ZXNbaSArIDFdIDw8IDgpIHwgYnl0ZXNbaSArIDJdO1xcbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCA0OyBqKyspXFxuICAgICAgICAgIGlmIChpICogOCArIGogKiA2IDw9IGJ5dGVzLmxlbmd0aCAqIDgpXFxuICAgICAgICAgICAgYmFzZTY0LnB1c2goYmFzZTY0bWFwLmNoYXJBdCgodHJpcGxldCA+Pj4gNiAqICgzIC0gaikpICYgMHgzRikpO1xcbiAgICAgICAgICBlbHNlXFxuICAgICAgICAgICAgYmFzZTY0LnB1c2goJz0nKTtcXG4gICAgICB9XFxuICAgICAgcmV0dXJuIGJhc2U2NC5qb2luKCcnKTtcXG4gICAgfSxcXG5cXG4gICAgLy8gQ29udmVydCBhIGJhc2UtNjQgc3RyaW5nIHRvIGEgYnl0ZSBhcnJheVxcbiAgICBiYXNlNjRUb0J5dGVzOiBmdW5jdGlvbihiYXNlNjQpIHtcXG4gICAgICAvLyBSZW1vdmUgbm9uLWJhc2UtNjQgY2hhcmFjdGVyc1xcbiAgICAgIGJhc2U2NCA9IGJhc2U2NC5yZXBsYWNlKC9bXkEtWjAtOStcXFxcL10vaWcsICcnKTtcXG5cXG4gICAgICBmb3IgKHZhciBieXRlcyA9IFtdLCBpID0gMCwgaW1vZDQgPSAwOyBpIDwgYmFzZTY0Lmxlbmd0aDtcXG4gICAgICAgICAgaW1vZDQgPSArK2kgJSA0KSB7XFxuICAgICAgICBpZiAoaW1vZDQgPT0gMCkgY29udGludWU7XFxuICAgICAgICBieXRlcy5wdXNoKCgoYmFzZTY0bWFwLmluZGV4T2YoYmFzZTY0LmNoYXJBdChpIC0gMSkpXFxuICAgICAgICAgICAgJiAoTWF0aC5wb3coMiwgLTIgKiBpbW9kNCArIDgpIC0gMSkpIDw8IChpbW9kNCAqIDIpKVxcbiAgICAgICAgICAgIHwgKGJhc2U2NG1hcC5pbmRleE9mKGJhc2U2NC5jaGFyQXQoaSkpID4+PiAoNiAtIGltb2Q0ICogMikpKTtcXG4gICAgICB9XFxuICAgICAgcmV0dXJuIGJ5dGVzO1xcbiAgICB9XFxuICB9O1xcblxcbiAgbW9kdWxlLmV4cG9ydHMgPSBjcnlwdDtcXG59KSgpO1xcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pTVRNNUxtcHpJaXdpYzI5MWNtTmxjeUk2V3lKM1pXSndZV05yT2k4dkx5NHZmaTlqY25sd2RDOWpjbmx3ZEM1cWN6OWlNV1V5SWwwc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYklpaG1kVzVqZEdsdmJpZ3BJSHRjYmlBZ2RtRnlJR0poYzJVMk5HMWhjRnh1SUNBZ0lDQWdQU0FuUVVKRFJFVkdSMGhKU2t0TVRVNVBVRkZTVTFSVlZsZFlXVnBoWW1Oa1pXWm5hR2xxYTJ4dGJtOXdjWEp6ZEhWMmQzaDVlakF4TWpNME5UWTNPRGtyTHljc1hHNWNiaUFnWTNKNWNIUWdQU0I3WEc0Z0lDQWdMeThnUW1sMExYZHBjMlVnY205MFlYUnBiMjRnYkdWbWRGeHVJQ0FnSUhKdmRHdzZJR1oxYm1OMGFXOXVLRzRzSUdJcElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlBb2JpQThQQ0JpS1NCOElDaHVJRDQrUGlBb016SWdMU0JpS1NrN1hHNGdJQ0FnZlN4Y2JseHVJQ0FnSUM4dklFSnBkQzEzYVhObElISnZkR0YwYVc5dUlISnBaMmgwWEc0Z0lDQWdjbTkwY2pvZ1puVnVZM1JwYjI0b2Jpd2dZaWtnZTF4dUlDQWdJQ0FnY21WMGRYSnVJQ2h1SUR3OElDZ3pNaUF0SUdJcEtTQjhJQ2h1SUQ0K1BpQmlLVHRjYmlBZ0lDQjlMRnh1WEc0Z0lDQWdMeThnVTNkaGNDQmlhV2N0Wlc1a2FXRnVJSFJ2SUd4cGRIUnNaUzFsYm1ScFlXNGdZVzVrSUhacFkyVWdkbVZ5YzJGY2JpQWdJQ0JsYm1ScFlXNDZJR1oxYm1OMGFXOXVLRzRwSUh0Y2JpQWdJQ0FnSUM4dklFbG1JRzUxYldKbGNpQm5hWFpsYml3Z2MzZGhjQ0JsYm1ScFlXNWNiaUFnSUNBZ0lHbG1JQ2h1TG1OdmJuTjBjblZqZEc5eUlEMDlJRTUxYldKbGNpa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdZM0o1Y0hRdWNtOTBiQ2h1TENBNEtTQW1JREI0TURCR1JqQXdSa1lnZkNCamNubHdkQzV5YjNSc0tHNHNJREkwS1NBbUlEQjRSa1l3TUVaR01EQTdYRzRnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQzh2SUVWc2MyVXNJR0Z6YzNWdFpTQmhjbkpoZVNCaGJtUWdjM2RoY0NCaGJHd2dhWFJsYlhOY2JpQWdJQ0FnSUdadmNpQW9kbUZ5SUdrZ1BTQXdPeUJwSUR3Z2JpNXNaVzVuZEdnN0lHa3JLeWxjYmlBZ0lDQWdJQ0FnYmx0cFhTQTlJR055ZVhCMExtVnVaR2xoYmlodVcybGRLVHRjYmlBZ0lDQWdJSEpsZEhWeWJpQnVPMXh1SUNBZ0lIMHNYRzVjYmlBZ0lDQXZMeUJIWlc1bGNtRjBaU0JoYmlCaGNuSmhlU0J2WmlCaGJua2diR1Z1WjNSb0lHOW1JSEpoYm1SdmJTQmllWFJsYzF4dUlDQWdJSEpoYm1SdmJVSjVkR1Z6T2lCbWRXNWpkR2x2YmlodUtTQjdYRzRnSUNBZ0lDQm1iM0lnS0haaGNpQmllWFJsY3lBOUlGdGRPeUJ1SUQ0Z01Ec2diaTB0S1Z4dUlDQWdJQ0FnSUNCaWVYUmxjeTV3ZFhOb0tFMWhkR2d1Wm14dmIzSW9UV0YwYUM1eVlXNWtiMjBvS1NBcUlESTFOaWtwTzF4dUlDQWdJQ0FnY21WMGRYSnVJR0o1ZEdWek8xeHVJQ0FnSUgwc1hHNWNiaUFnSUNBdkx5QkRiMjUyWlhKMElHRWdZbmwwWlNCaGNuSmhlU0IwYnlCaWFXY3RaVzVrYVdGdUlETXlMV0pwZENCM2IzSmtjMXh1SUNBZ0lHSjVkR1Z6Vkc5WGIzSmtjem9nWm5WdVkzUnBiMjRvWW5sMFpYTXBJSHRjYmlBZ0lDQWdJR1p2Y2lBb2RtRnlJSGR2Y21SeklEMGdXMTBzSUdrZ1BTQXdMQ0JpSUQwZ01Ec2dhU0E4SUdKNWRHVnpMbXhsYm1kMGFEc2dhU3NyTENCaUlDczlJRGdwWEc0Z0lDQWdJQ0FnSUhkdmNtUnpXMklnUGo0K0lEVmRJSHc5SUdKNWRHVnpXMmxkSUR3OElDZ3lOQ0F0SUdJZ0pTQXpNaWs3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdkMjl5WkhNN1hHNGdJQ0FnZlN4Y2JseHVJQ0FnSUM4dklFTnZiblpsY25RZ1ltbG5MV1Z1WkdsaGJpQXpNaTFpYVhRZ2QyOXlaSE1nZEc4Z1lTQmllWFJsSUdGeWNtRjVYRzRnSUNBZ2QyOXlaSE5VYjBKNWRHVnpPaUJtZFc1amRHbHZiaWgzYjNKa2N5a2dlMXh1SUNBZ0lDQWdabTl5SUNoMllYSWdZbmwwWlhNZ1BTQmJYU3dnWWlBOUlEQTdJR0lnUENCM2IzSmtjeTVzWlc1bmRHZ2dLaUF6TWpzZ1lpQXJQU0E0S1Z4dUlDQWdJQ0FnSUNCaWVYUmxjeTV3ZFhOb0tDaDNiM0prYzF0aUlENCtQaUExWFNBK1BqNGdLREkwSUMwZ1lpQWxJRE15S1NrZ0ppQXdlRVpHS1R0Y2JpQWdJQ0FnSUhKbGRIVnliaUJpZVhSbGN6dGNiaUFnSUNCOUxGeHVYRzRnSUNBZ0x5OGdRMjl1ZG1WeWRDQmhJR0o1ZEdVZ1lYSnlZWGtnZEc4Z1lTQm9aWGdnYzNSeWFXNW5YRzRnSUNBZ1lubDBaWE5VYjBobGVEb2dablZ1WTNScGIyNG9ZbmwwWlhNcElIdGNiaUFnSUNBZ0lHWnZjaUFvZG1GeUlHaGxlQ0E5SUZ0ZExDQnBJRDBnTURzZ2FTQThJR0o1ZEdWekxteGxibWQwYURzZ2FTc3JLU0I3WEc0Z0lDQWdJQ0FnSUdobGVDNXdkWE5vS0NoaWVYUmxjMXRwWFNBK1BqNGdOQ2t1ZEc5VGRISnBibWNvTVRZcEtUdGNiaUFnSUNBZ0lDQWdhR1Y0TG5CMWMyZ29LR0o1ZEdWelcybGRJQ1lnTUhoR0tTNTBiMU4wY21sdVp5Z3hOaWtwTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJQ0FnY21WMGRYSnVJR2hsZUM1cWIybHVLQ2NuS1R0Y2JpQWdJQ0I5TEZ4dVhHNGdJQ0FnTHk4Z1EyOXVkbVZ5ZENCaElHaGxlQ0J6ZEhKcGJtY2dkRzhnWVNCaWVYUmxJR0Z5Y21GNVhHNGdJQ0FnYUdWNFZHOUNlWFJsY3pvZ1puVnVZM1JwYjI0b2FHVjRLU0I3WEc0Z0lDQWdJQ0JtYjNJZ0tIWmhjaUJpZVhSbGN5QTlJRnRkTENCaklEMGdNRHNnWXlBOElHaGxlQzVzWlc1bmRHZzdJR01nS3owZ01pbGNiaUFnSUNBZ0lDQWdZbmwwWlhNdWNIVnphQ2h3WVhKelpVbHVkQ2hvWlhndWMzVmljM1J5S0dNc0lESXBMQ0F4TmlrcE8xeHVJQ0FnSUNBZ2NtVjBkWEp1SUdKNWRHVnpPMXh1SUNBZ0lIMHNYRzVjYmlBZ0lDQXZMeUJEYjI1MlpYSjBJR0VnWW5sMFpTQmhjbkpoZVNCMGJ5QmhJR0poYzJVdE5qUWdjM1J5YVc1blhHNGdJQ0FnWW5sMFpYTlViMEpoYzJVMk5Eb2dablZ1WTNScGIyNG9ZbmwwWlhNcElIdGNiaUFnSUNBZ0lHWnZjaUFvZG1GeUlHSmhjMlUyTkNBOUlGdGRMQ0JwSUQwZ01Ec2dhU0E4SUdKNWRHVnpMbXhsYm1kMGFEc2dhU0FyUFNBektTQjdYRzRnSUNBZ0lDQWdJSFpoY2lCMGNtbHdiR1YwSUQwZ0tHSjVkR1Z6VzJsZElEdzhJREUyS1NCOElDaGllWFJsYzF0cElDc2dNVjBnUER3Z09Da2dmQ0JpZVhSbGMxdHBJQ3NnTWwwN1hHNGdJQ0FnSUNBZ0lHWnZjaUFvZG1GeUlHb2dQU0F3T3lCcUlEd2dORHNnYWlzcktWeHVJQ0FnSUNBZ0lDQWdJR2xtSUNocElDb2dPQ0FySUdvZ0tpQTJJRHc5SUdKNWRHVnpMbXhsYm1kMGFDQXFJRGdwWEc0Z0lDQWdJQ0FnSUNBZ0lDQmlZWE5sTmpRdWNIVnphQ2hpWVhObE5qUnRZWEF1WTJoaGNrRjBLQ2gwY21sd2JHVjBJRDQrUGlBMklDb2dLRE1nTFNCcUtTa2dKaUF3ZUROR0tTazdYRzRnSUNBZ0lDQWdJQ0FnWld4elpWeHVJQ0FnSUNBZ0lDQWdJQ0FnWW1GelpUWTBMbkIxYzJnb0p6MG5LVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQWdJSEpsZEhWeWJpQmlZWE5sTmpRdWFtOXBiaWduSnlrN1hHNGdJQ0FnZlN4Y2JseHVJQ0FnSUM4dklFTnZiblpsY25RZ1lTQmlZWE5sTFRZMElITjBjbWx1WnlCMGJ5QmhJR0o1ZEdVZ1lYSnlZWGxjYmlBZ0lDQmlZWE5sTmpSVWIwSjVkR1Z6T2lCbWRXNWpkR2x2YmloaVlYTmxOalFwSUh0Y2JpQWdJQ0FnSUM4dklGSmxiVzkyWlNCdWIyNHRZbUZ6WlMwMk5DQmphR0Z5WVdOMFpYSnpYRzRnSUNBZ0lDQmlZWE5sTmpRZ1BTQmlZWE5sTmpRdWNtVndiR0ZqWlNndlcxNUJMVm93TFRrclhGd3ZYUzlwWnl3Z0p5Y3BPMXh1WEc0Z0lDQWdJQ0JtYjNJZ0tIWmhjaUJpZVhSbGN5QTlJRnRkTENCcElEMGdNQ3dnYVcxdlpEUWdQU0F3T3lCcElEd2dZbUZ6WlRZMExteGxibWQwYUR0Y2JpQWdJQ0FnSUNBZ0lDQnBiVzlrTkNBOUlDc3JhU0FsSURRcElIdGNiaUFnSUNBZ0lDQWdhV1lnS0dsdGIyUTBJRDA5SURBcElHTnZiblJwYm5WbE8xeHVJQ0FnSUNBZ0lDQmllWFJsY3k1d2RYTm9LQ2dvWW1GelpUWTBiV0Z3TG1sdVpHVjRUMllvWW1GelpUWTBMbU5vWVhKQmRDaHBJQzBnTVNrcFhHNGdJQ0FnSUNBZ0lDQWdJQ0FtSUNoTllYUm9MbkJ2ZHlneUxDQXRNaUFxSUdsdGIyUTBJQ3NnT0NrZ0xTQXhLU2tnUER3Z0tHbHRiMlEwSUNvZ01pa3BYRzRnSUNBZ0lDQWdJQ0FnSUNCOElDaGlZWE5sTmpSdFlYQXVhVzVrWlhoUFppaGlZWE5sTmpRdVkyaGhja0YwS0drcEtTQStQajRnS0RZZ0xTQnBiVzlrTkNBcUlESXBLU2s3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdJQ0J5WlhSMWNtNGdZbmwwWlhNN1hHNGdJQ0FnZlZ4dUlDQjlPMXh1WEc0Z0lHMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1kzSjVjSFE3WEc1OUtTZ3BPMXh1WEc1Y2JseHVMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZYRzR2THlCWFJVSlFRVU5MSUVaUFQxUkZVbHh1THk4Z0xpOStMMk55ZVhCMEwyTnllWEIwTG1welhHNHZMeUJ0YjJSMWJHVWdhV1FnUFNBeE16bGNiaTh2SUcxdlpIVnNaU0JqYUhWdWEzTWdQU0F3SWwwc0ltMWhjSEJwYm1keklqb2lRVUZCUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3SWl3aWMyOTFjbU5sVW05dmRDSTZJaUo5XCIpO1xuXG4vKioqLyB9KSxcbi8qIDE0MCAqL1xuLyogbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9cbi8qIGFsbCBleHBvcnRzIHVzZWQgKi9cbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL34vaXMtYnVmZmVyL2luZGV4LmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbmV2YWwoXCIvKiFcXG4gKiBEZXRlcm1pbmUgaWYgYW4gb2JqZWN0IGlzIGEgQnVmZmVyXFxuICpcXG4gKiBAYXV0aG9yICAgRmVyb3NzIEFib3VraGFkaWplaCA8ZmVyb3NzQGZlcm9zcy5vcmc+IDxodHRwOi8vZmVyb3NzLm9yZz5cXG4gKiBAbGljZW5zZSAgTUlUXFxuICovXFxuXFxuLy8gVGhlIF9pc0J1ZmZlciBjaGVjayBpcyBmb3IgU2FmYXJpIDUtNyBzdXBwb3J0LCBiZWNhdXNlIGl0J3MgbWlzc2luZ1xcbi8vIE9iamVjdC5wcm90b3R5cGUuY29uc3RydWN0b3IuIFJlbW92ZSB0aGlzIGV2ZW50dWFsbHlcXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmopIHtcXG4gIHJldHVybiBvYmogIT0gbnVsbCAmJiAoaXNCdWZmZXIob2JqKSB8fCBpc1Nsb3dCdWZmZXIob2JqKSB8fCAhIW9iai5faXNCdWZmZXIpXFxufVxcblxcbmZ1bmN0aW9uIGlzQnVmZmVyIChvYmopIHtcXG4gIHJldHVybiAhIW9iai5jb25zdHJ1Y3RvciAmJiB0eXBlb2Ygb2JqLmNvbnN0cnVjdG9yLmlzQnVmZmVyID09PSAnZnVuY3Rpb24nICYmIG9iai5jb25zdHJ1Y3Rvci5pc0J1ZmZlcihvYmopXFxufVxcblxcbi8vIEZvciBOb2RlIHYwLjEwIHN1cHBvcnQuIFJlbW92ZSB0aGlzIGV2ZW50dWFsbHkuXFxuZnVuY3Rpb24gaXNTbG93QnVmZmVyIChvYmopIHtcXG4gIHJldHVybiB0eXBlb2Ygb2JqLnJlYWRGbG9hdExFID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBvYmouc2xpY2UgPT09ICdmdW5jdGlvbicgJiYgaXNCdWZmZXIob2JqLnNsaWNlKDAsIDApKVxcbn1cXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaU1UUXdMbXB6SWl3aWMyOTFjbU5sY3lJNld5SjNaV0p3WVdOck9pOHZMeTR2Zmk5cGN5MWlkV1ptWlhJdmFXNWtaWGd1YW5NL01XWTJZU0pkTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lJdktpRmNiaUFxSUVSbGRHVnliV2x1WlNCcFppQmhiaUJ2WW1wbFkzUWdhWE1nWVNCQ2RXWm1aWEpjYmlBcVhHNGdLaUJBWVhWMGFHOXlJQ0FnUm1WeWIzTnpJRUZpYjNWcmFHRmthV3BsYUNBOFptVnliM056UUdabGNtOXpjeTV2Y21jK0lEeG9kSFJ3T2k4dlptVnliM056TG05eVp6NWNiaUFxSUVCc2FXTmxibk5sSUNCTlNWUmNiaUFxTDF4dVhHNHZMeUJVYUdVZ1gybHpRblZtWm1WeUlHTm9aV05ySUdseklHWnZjaUJUWVdaaGNta2dOUzAzSUhOMWNIQnZjblFzSUdKbFkyRjFjMlVnYVhRbmN5QnRhWE56YVc1blhHNHZMeUJQWW1wbFkzUXVjSEp2ZEc5MGVYQmxMbU52Ym5OMGNuVmpkRzl5TGlCU1pXMXZkbVVnZEdocGN5QmxkbVZ1ZEhWaGJHeDVYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJR1oxYm1OMGFXOXVJQ2h2WW1vcElIdGNiaUFnY21WMGRYSnVJRzlpYWlBaFBTQnVkV3hzSUNZbUlDaHBjMEoxWm1abGNpaHZZbW9wSUh4OElHbHpVMnh2ZDBKMVptWmxjaWh2WW1vcElIeDhJQ0VoYjJKcUxsOXBjMEoxWm1abGNpbGNibjFjYmx4dVpuVnVZM1JwYjI0Z2FYTkNkV1ptWlhJZ0tHOWlhaWtnZTF4dUlDQnlaWFIxY200Z0lTRnZZbW91WTI5dWMzUnlkV04wYjNJZ0ppWWdkSGx3Wlc5bUlHOWlhaTVqYjI1emRISjFZM1J2Y2k1cGMwSjFabVpsY2lBOVBUMGdKMloxYm1OMGFXOXVKeUFtSmlCdlltb3VZMjl1YzNSeWRXTjBiM0l1YVhOQ2RXWm1aWElvYjJKcUtWeHVmVnh1WEc0dkx5QkdiM0lnVG05a1pTQjJNQzR4TUNCemRYQndiM0owTGlCU1pXMXZkbVVnZEdocGN5QmxkbVZ1ZEhWaGJHeDVMbHh1Wm5WdVkzUnBiMjRnYVhOVGJHOTNRblZtWm1WeUlDaHZZbW9wSUh0Y2JpQWdjbVYwZFhKdUlIUjVjR1Z2WmlCdlltb3VjbVZoWkVac2IyRjBURVVnUFQwOUlDZG1kVzVqZEdsdmJpY2dKaVlnZEhsd1pXOW1JRzlpYWk1emJHbGpaU0E5UFQwZ0oyWjFibU4wYVc5dUp5QW1KaUJwYzBKMVptWmxjaWh2WW1vdWMyeHBZMlVvTUN3Z01Da3BYRzU5WEc1Y2JseHVYRzR2THk4dkx5OHZMeTh2THk4dkx5OHZMeTljYmk4dklGZEZRbEJCUTBzZ1JrOVBWRVZTWEc0dkx5QXVMMzR2YVhNdFluVm1abVZ5TDJsdVpHVjRMbXB6WEc0dkx5QnRiMlIxYkdVZ2FXUWdQU0F4TkRCY2JpOHZJRzF2WkhWc1pTQmphSFZ1YTNNZ1BTQXdJbDBzSW0xaGNIQnBibWR6SWpvaVFVRkJRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3SWl3aWMyOTFjbU5sVW05dmRDSTZJaUo5XCIpO1xuXG4vKioqLyB9KSxcbi8qIDE0MSAqL1xuLyogbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9cbi8qIGFsbCBleHBvcnRzIHVzZWQgKi9cbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9+L21hcG5pay1yZWZlcmVuY2UvaW5kZXguanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbmV2YWwoXCIvKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi8oZnVuY3Rpb24oX19kaXJuYW1lKSB7dmFyIGZzID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgZnMgKi8gMTEpLFxcbiAgICBwYXRoID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgcGF0aCAqLyAxMiksXFxuICAgIGV4aXN0c1N5bmMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISBmcyAqLyAxMSkuZXhpc3RzU3luYyB8fCBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISBwYXRoICovIDEyKS5leGlzdHNTeW5jO1xcblxcbi8vIExvYWQgYWxsIHN0YXRlZCB2ZXJzaW9ucyBpbnRvIHRoZSBtb2R1bGUgZXhwb3J0c1xcbm1vZHVsZS5leHBvcnRzLnZlcnNpb24gPSB7fTtcXG5cXG52YXIgcmVmcyA9IFtcXG4gJzIuMC4wJyxcXG4gJzIuMC4xJyxcXG4gJzIuMC4yJyxcXG4gJzIuMS4wJyxcXG4gJzIuMS4xJyxcXG4gJzIuMi4wJyxcXG4gJzIuMy4wJyxcXG4gJzMuMC4wJ1xcbl07XFxuXFxucmVmcy5tYXAoZnVuY3Rpb24odmVyc2lvbikge1xcbiAgICBtb2R1bGUuZXhwb3J0cy52ZXJzaW9uW3ZlcnNpb25dID0gIShmdW5jdGlvbiB3ZWJwYWNrTWlzc2luZ01vZHVsZSgpIHsgdmFyIGUgPSBuZXcgRXJyb3IoXFxcIkNhbm5vdCBmaW5kIG1vZHVsZSBcXFxcXFxcIi5cXFxcXFxcIlxcXCIpOyBlLmNvZGUgPSAnTU9EVUxFX05PVF9GT1VORCc7IHRocm93IGU7IH0oKSk7XFxuICAgIHZhciBkc19wYXRoID0gcGF0aC5qb2luKF9fZGlybmFtZSwgdmVyc2lvbiwgJ2RhdGFzb3VyY2VzLmpzb24nKTtcXG4gICAgaWYgKGV4aXN0c1N5bmMoZHNfcGF0aCkpIHtcXG4gICAgICAgIG1vZHVsZS5leHBvcnRzLnZlcnNpb25bdmVyc2lvbl0uZGF0YXNvdXJjZXMgPSAhKGZ1bmN0aW9uIHdlYnBhY2tNaXNzaW5nTW9kdWxlKCkgeyB2YXIgZSA9IG5ldyBFcnJvcihcXFwiQ2Fubm90IGZpbmQgbW9kdWxlIFxcXFxcXFwiLlxcXFxcXFwiXFxcIik7IGUuY29kZSA9ICdNT0RVTEVfTk9UX0ZPVU5EJzsgdGhyb3cgZTsgfSgpKS5kYXRhc291cmNlcztcXG4gICAgfVxcbn0pO1xcblxcbi8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqL30uY2FsbChleHBvcnRzLCBcXFwiL1xcXCIpKS8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pTVRReExtcHpJaXdpYzI5MWNtTmxjeUk2V3lKM1pXSndZV05yT2k4dkx5NHZmaTl0WVhCdWFXc3RjbVZtWlhKbGJtTmxMMmx1WkdWNExtcHpQMlJoTlRRaVhTd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lkbUZ5SUdaeklEMGdjbVZ4ZFdseVpTZ25abk1uS1N4Y2JpQWdJQ0J3WVhSb0lEMGdjbVZ4ZFdseVpTZ25jR0YwYUNjcExGeHVJQ0FnSUdWNGFYTjBjMU41Ym1NZ1BTQnlaWEYxYVhKbEtDZG1jeWNwTG1WNGFYTjBjMU41Ym1NZ2ZId2djbVZ4ZFdseVpTZ25jR0YwYUNjcExtVjRhWE4wYzFONWJtTTdYRzVjYmk4dklFeHZZV1FnWVd4c0lITjBZWFJsWkNCMlpYSnphVzl1Y3lCcGJuUnZJSFJvWlNCdGIyUjFiR1VnWlhod2IzSjBjMXh1Ylc5a2RXeGxMbVY0Y0c5eWRITXVkbVZ5YzJsdmJpQTlJSHQ5TzF4dVhHNTJZWElnY21WbWN5QTlJRnRjYmlBbk1pNHdMakFuTEZ4dUlDY3lMakF1TVNjc1hHNGdKekl1TUM0eUp5eGNiaUFuTWk0eExqQW5MRnh1SUNjeUxqRXVNU2NzWEc0Z0p6SXVNaTR3Snl4Y2JpQW5NaTR6TGpBbkxGeHVJQ2N6TGpBdU1DZGNibDA3WEc1Y2JuSmxabk11YldGd0tHWjFibU4wYVc5dUtIWmxjbk5wYjI0cElIdGNiaUFnSUNCdGIyUjFiR1V1Wlhod2IzSjBjeTUyWlhKemFXOXVXM1psY25OcGIyNWRJRDBnY21WeGRXbHlaU2h3WVhSb0xtcHZhVzRvWDE5a2FYSnVZVzFsTENCMlpYSnphVzl1TENBbmNtVm1aWEpsYm1ObExtcHpiMjRuS1NrN1hHNGdJQ0FnZG1GeUlHUnpYM0JoZEdnZ1BTQndZWFJvTG1wdmFXNG9YMTlrYVhKdVlXMWxMQ0IyWlhKemFXOXVMQ0FuWkdGMFlYTnZkWEpqWlhNdWFuTnZiaWNwTzF4dUlDQWdJR2xtSUNobGVHbHpkSE5UZVc1aktHUnpYM0JoZEdncEtTQjdYRzRnSUNBZ0lDQWdJRzF2WkhWc1pTNWxlSEJ2Y25SekxuWmxjbk5wYjI1YmRtVnljMmx2YmwwdVpHRjBZWE52ZFhKalpYTWdQU0J5WlhGMWFYSmxLR1J6WDNCaGRHZ3BMbVJoZEdGemIzVnlZMlZ6TzF4dUlDQWdJSDFjYm4wcE8xeHVYRzVjYmx4dUx5OHZMeTh2THk4dkx5OHZMeTh2THk4dlhHNHZMeUJYUlVKUVFVTkxJRVpQVDFSRlVseHVMeThnTGk5K0wyMWhjRzVwYXkxeVpXWmxjbVZ1WTJVdmFXNWtaWGd1YW5OY2JpOHZJRzF2WkhWc1pTQnBaQ0E5SURFME1WeHVMeThnYlc5a2RXeGxJR05vZFc1cmN5QTlJREFpWFN3aWJXRndjR2x1WjNNaU9pSkJRVUZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJJaXdpYzI5MWNtTmxVbTl2ZENJNklpSjlcIik7XG5cbi8qKiovIH0pLFxuLyogMTQyICovXG4vKiBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyogYWxsIGV4cG9ydHMgdXNlZCAqL1xuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vfi9yYW1kYS9zcmMvYXAuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuZXZhbChcInZhciBfY29uY2F0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9pbnRlcm5hbC9fY29uY2F0ICovIDE1NCk7XFxudmFyIF9jdXJyeTIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL2ludGVybmFsL19jdXJyeTIgKi8gMSk7XFxudmFyIF9yZWR1Y2UgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL2ludGVybmFsL19yZWR1Y2UgKi8gMTYpO1xcbnZhciBtYXAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL21hcCAqLyA4KTtcXG5cXG5cXG4vKipcXG4gKiBhcCBhcHBsaWVzIGEgbGlzdCBvZiBmdW5jdGlvbnMgdG8gYSBsaXN0IG9mIHZhbHVlcy5cXG4gKlxcbiAqIERpc3BhdGNoZXMgdG8gdGhlIGBhcGAgbWV0aG9kIG9mIHRoZSBzZWNvbmQgYXJndW1lbnQsIGlmIHByZXNlbnQuIEFsc29cXG4gKiB0cmVhdHMgY3VycmllZCBmdW5jdGlvbnMgYXMgYXBwbGljYXRpdmVzLlxcbiAqXFxuICogQGZ1bmNcXG4gKiBAbWVtYmVyT2YgUlxcbiAqIEBzaW5jZSB2MC4zLjBcXG4gKiBAY2F0ZWdvcnkgRnVuY3Rpb25cXG4gKiBAc2lnIFthIC0+IGJdIC0+IFthXSAtPiBbYl1cXG4gKiBAc2lnIEFwcGx5IGYgPT4gZiAoYSAtPiBiKSAtPiBmIGEgLT4gZiBiXFxuICogQHBhcmFtIHtBcnJheX0gZm5zIEFuIGFycmF5IG9mIGZ1bmN0aW9uc1xcbiAqIEBwYXJhbSB7QXJyYXl9IHZzIEFuIGFycmF5IG9mIHZhbHVlc1xcbiAqIEByZXR1cm4ge0FycmF5fSBBbiBhcnJheSBvZiByZXN1bHRzIG9mIGFwcGx5aW5nIGVhY2ggb2YgYGZuc2AgdG8gYWxsIG9mIGB2c2AgaW4gdHVybi5cXG4gKiBAZXhhbXBsZVxcbiAqXFxuICogICAgICBSLmFwKFtSLm11bHRpcGx5KDIpLCBSLmFkZCgzKV0sIFsxLDIsM10pOyAvLz0+IFsyLCA0LCA2LCA0LCA1LCA2XVxcbiAqICAgICAgUi5hcChbUi5jb25jYXQoJ3Rhc3R5ICcpLCBSLnRvVXBwZXJdLCBbJ3BpenphJywgJ3NhbGFkJ10pOyAvLz0+IFtcXFwidGFzdHkgcGl6emFcXFwiLCBcXFwidGFzdHkgc2FsYWRcXFwiLCBcXFwiUElaWkFcXFwiLCBcXFwiU0FMQURcXFwiXVxcbiAqIEBzeW1iIFIuYXAoW2YsIGddLCBbYSwgYl0pID0gW2YoYSksIGYoYiksIGcoYSksIGcoYildXFxuICovXFxubW9kdWxlLmV4cG9ydHMgPSBfY3VycnkyKGZ1bmN0aW9uIGFwKGFwcGxpY2F0aXZlLCBmbikge1xcbiAgcmV0dXJuIChcXG4gICAgdHlwZW9mIGFwcGxpY2F0aXZlLmFwID09PSAnZnVuY3Rpb24nID9cXG4gICAgICBhcHBsaWNhdGl2ZS5hcChmbikgOlxcbiAgICB0eXBlb2YgYXBwbGljYXRpdmUgPT09ICdmdW5jdGlvbicgP1xcbiAgICAgIGZ1bmN0aW9uKHgpIHsgcmV0dXJuIGFwcGxpY2F0aXZlKHgpKGZuKHgpKTsgfSA6XFxuICAgIC8vIGVsc2VcXG4gICAgICBfcmVkdWNlKGZ1bmN0aW9uKGFjYywgZikgeyByZXR1cm4gX2NvbmNhdChhY2MsIG1hcChmLCBmbikpOyB9LCBbXSwgYXBwbGljYXRpdmUpXFxuICApO1xcbn0pO1xcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pTVRReUxtcHpJaXdpYzI5MWNtTmxjeUk2V3lKM1pXSndZV05yT2k4dkx5NHZmaTl5WVcxa1lTOXpjbU12WVhBdWFuTS9PV1UxTnlKZExDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SjJZWElnWDJOdmJtTmhkQ0E5SUhKbGNYVnBjbVVvSnk0dmFXNTBaWEp1WVd3dlgyTnZibU5oZENjcE8xeHVkbUZ5SUY5amRYSnllVElnUFNCeVpYRjFhWEpsS0NjdUwybHVkR1Z5Ym1Gc0wxOWpkWEp5ZVRJbktUdGNiblpoY2lCZmNtVmtkV05sSUQwZ2NtVnhkV2x5WlNnbkxpOXBiblJsY201aGJDOWZjbVZrZFdObEp5azdYRzUyWVhJZ2JXRndJRDBnY21WeGRXbHlaU2duTGk5dFlYQW5LVHRjYmx4dVhHNHZLaXBjYmlBcUlHRndJR0Z3Y0d4cFpYTWdZU0JzYVhOMElHOW1JR1oxYm1OMGFXOXVjeUIwYnlCaElHeHBjM1FnYjJZZ2RtRnNkV1Z6TGx4dUlDcGNiaUFxSUVScGMzQmhkR05vWlhNZ2RHOGdkR2hsSUdCaGNHQWdiV1YwYUc5a0lHOW1JSFJvWlNCelpXTnZibVFnWVhKbmRXMWxiblFzSUdsbUlIQnlaWE5sYm5RdUlFRnNjMjljYmlBcUlIUnlaV0YwY3lCamRYSnlhV1ZrSUdaMWJtTjBhVzl1Y3lCaGN5QmhjSEJzYVdOaGRHbDJaWE11WEc0Z0tseHVJQ29nUUdaMWJtTmNiaUFxSUVCdFpXMWlaWEpQWmlCU1hHNGdLaUJBYzJsdVkyVWdkakF1TXk0d1hHNGdLaUJBWTJGMFpXZHZjbmtnUm5WdVkzUnBiMjVjYmlBcUlFQnphV2NnVzJFZ0xUNGdZbDBnTFQ0Z1cyRmRJQzArSUZ0aVhWeHVJQ29nUUhOcFp5QkJjSEJzZVNCbUlEMCtJR1lnS0dFZ0xUNGdZaWtnTFQ0Z1ppQmhJQzArSUdZZ1lseHVJQ29nUUhCaGNtRnRJSHRCY25KaGVYMGdabTV6SUVGdUlHRnljbUY1SUc5bUlHWjFibU4wYVc5dWMxeHVJQ29nUUhCaGNtRnRJSHRCY25KaGVYMGdkbk1nUVc0Z1lYSnlZWGtnYjJZZ2RtRnNkV1Z6WEc0Z0tpQkFjbVYwZFhKdUlIdEJjbkpoZVgwZ1FXNGdZWEp5WVhrZ2IyWWdjbVZ6ZFd4MGN5QnZaaUJoY0hCc2VXbHVaeUJsWVdOb0lHOW1JR0JtYm5OZ0lIUnZJR0ZzYkNCdlppQmdkbk5nSUdsdUlIUjFjbTR1WEc0Z0tpQkFaWGhoYlhCc1pWeHVJQ3BjYmlBcUlDQWdJQ0FnVWk1aGNDaGJVaTV0ZFd4MGFYQnNlU2d5S1N3Z1VpNWhaR1FvTXlsZExDQmJNU3d5TEROZEtUc2dMeTg5UGlCYk1pd2dOQ3dnTml3Z05Dd2dOU3dnTmwxY2JpQXFJQ0FnSUNBZ1VpNWhjQ2hiVWk1amIyNWpZWFFvSjNSaGMzUjVJQ2NwTENCU0xuUnZWWEJ3WlhKZExDQmJKM0JwZW5waEp5d2dKM05oYkdGa0oxMHBPeUF2THowK0lGdGNJblJoYzNSNUlIQnBlbnBoWENJc0lGd2lkR0Z6ZEhrZ2MyRnNZV1JjSWl3Z1hDSlFTVnBhUVZ3aUxDQmNJbE5CVEVGRVhDSmRYRzRnS2lCQWMzbHRZaUJTTG1Gd0tGdG1MQ0JuWFN3Z1cyRXNJR0pkS1NBOUlGdG1LR0VwTENCbUtHSXBMQ0JuS0dFcExDQm5LR0lwWFZ4dUlDb3ZYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJRjlqZFhKeWVUSW9ablZ1WTNScGIyNGdZWEFvWVhCd2JHbGpZWFJwZG1Vc0lHWnVLU0I3WEc0Z0lISmxkSFZ5YmlBb1hHNGdJQ0FnZEhsd1pXOW1JR0Z3Y0d4cFkyRjBhWFpsTG1Gd0lEMDlQU0FuWm5WdVkzUnBiMjRuSUQ5Y2JpQWdJQ0FnSUdGd2NHeHBZMkYwYVhabExtRndLR1p1S1NBNlhHNGdJQ0FnZEhsd1pXOW1JR0Z3Y0d4cFkyRjBhWFpsSUQwOVBTQW5ablZ1WTNScGIyNG5JRDljYmlBZ0lDQWdJR1oxYm1OMGFXOXVLSGdwSUhzZ2NtVjBkWEp1SUdGd2NHeHBZMkYwYVhabEtIZ3BLR1p1S0hncEtUc2dmU0E2WEc0Z0lDQWdMeThnWld4elpWeHVJQ0FnSUNBZ1gzSmxaSFZqWlNobWRXNWpkR2x2YmloaFkyTXNJR1lwSUhzZ2NtVjBkWEp1SUY5amIyNWpZWFFvWVdOakxDQnRZWEFvWml3Z1ptNHBLVHNnZlN3Z1cxMHNJR0Z3Y0d4cFkyRjBhWFpsS1Z4dUlDQXBPMXh1ZlNrN1hHNWNibHh1WEc0dkx5OHZMeTh2THk4dkx5OHZMeTh2THk5Y2JpOHZJRmRGUWxCQlEwc2dSazlQVkVWU1hHNHZMeUF1TDM0dmNtRnRaR0V2YzNKakwyRndMbXB6WEc0dkx5QnRiMlIxYkdVZ2FXUWdQU0F4TkRKY2JpOHZJRzF2WkhWc1pTQmphSFZ1YTNNZ1BTQXdJbDBzSW0xaGNIQnBibWR6SWpvaVFVRkJRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHNpTENKemIzVnlZMlZTYjI5MElqb2lJbjA9XCIpO1xuXG4vKioqLyB9KSxcbi8qIDE0MyAqL1xuLyogbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9cbi8qIGFsbCBleHBvcnRzIHVzZWQgKi9cbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vfi9yYW1kYS9zcmMvYmluZC5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbmV2YWwoXCJ2YXIgX2FyaXR5ID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9pbnRlcm5hbC9fYXJpdHkgKi8gMTQpO1xcbnZhciBfY3VycnkyID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9pbnRlcm5hbC9fY3VycnkyICovIDEpO1xcblxcblxcbi8qKlxcbiAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGlzIGJvdW5kIHRvIGEgY29udGV4dC5cXG4gKiBOb3RlOiBgUi5iaW5kYCBkb2VzIG5vdCBwcm92aWRlIHRoZSBhZGRpdGlvbmFsIGFyZ3VtZW50LWJpbmRpbmcgY2FwYWJpbGl0aWVzIG9mXFxuICogW0Z1bmN0aW9uLnByb3RvdHlwZS5iaW5kXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9GdW5jdGlvbi9iaW5kKS5cXG4gKlxcbiAqIEBmdW5jXFxuICogQG1lbWJlck9mIFJcXG4gKiBAc2luY2UgdjAuNi4wXFxuICogQGNhdGVnb3J5IEZ1bmN0aW9uXFxuICogQGNhdGVnb3J5IE9iamVjdFxcbiAqIEBzaWcgKCogLT4gKikgLT4geyp9IC0+ICgqIC0+ICopXFxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGZ1bmN0aW9uIHRvIGJpbmQgdG8gY29udGV4dFxcbiAqIEBwYXJhbSB7T2JqZWN0fSB0aGlzT2JqIFRoZSBjb250ZXh0IHRvIGJpbmQgYGZuYCB0b1xcbiAqIEByZXR1cm4ge0Z1bmN0aW9ufSBBIGZ1bmN0aW9uIHRoYXQgd2lsbCBleGVjdXRlIGluIHRoZSBjb250ZXh0IG9mIGB0aGlzT2JqYC5cXG4gKiBAc2VlIFIucGFydGlhbFxcbiAqIEBleGFtcGxlXFxuICpcXG4gKiAgICAgIHZhciBsb2cgPSBSLmJpbmQoY29uc29sZS5sb2csIGNvbnNvbGUpO1xcbiAqICAgICAgUi5waXBlKFIuYXNzb2MoJ2EnLCAyKSwgUi50YXAobG9nKSwgUi5hc3NvYygnYScsIDMpKSh7YTogMX0pOyAvLz0+IHthOiAzfVxcbiAqICAgICAgLy8gbG9ncyB7YTogMn1cXG4gKiBAc3ltYiBSLmJpbmQoZiwgbykoYSwgYikgPSBmLmNhbGwobywgYSwgYilcXG4gKi9cXG5tb2R1bGUuZXhwb3J0cyA9IF9jdXJyeTIoZnVuY3Rpb24gYmluZChmbiwgdGhpc09iaikge1xcbiAgcmV0dXJuIF9hcml0eShmbi5sZW5ndGgsIGZ1bmN0aW9uKCkge1xcbiAgICByZXR1cm4gZm4uYXBwbHkodGhpc09iaiwgYXJndW1lbnRzKTtcXG4gIH0pO1xcbn0pO1xcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pTVRRekxtcHpJaXdpYzI5MWNtTmxjeUk2V3lKM1pXSndZV05yT2k4dkx5NHZmaTl5WVcxa1lTOXpjbU12WW1sdVpDNXFjejg0TVRVeklsMHNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJblpoY2lCZllYSnBkSGtnUFNCeVpYRjFhWEpsS0NjdUwybHVkR1Z5Ym1Gc0wxOWhjbWwwZVNjcE8xeHVkbUZ5SUY5amRYSnllVElnUFNCeVpYRjFhWEpsS0NjdUwybHVkR1Z5Ym1Gc0wxOWpkWEp5ZVRJbktUdGNibHh1WEc0dktpcGNiaUFxSUVOeVpXRjBaWE1nWVNCbWRXNWpkR2x2YmlCMGFHRjBJR2x6SUdKdmRXNWtJSFJ2SUdFZ1kyOXVkR1Y0ZEM1Y2JpQXFJRTV2ZEdVNklHQlNMbUpwYm1SZ0lHUnZaWE1nYm05MElIQnliM1pwWkdVZ2RHaGxJR0ZrWkdsMGFXOXVZV3dnWVhKbmRXMWxiblF0WW1sdVpHbHVaeUJqWVhCaFltbHNhWFJwWlhNZ2IyWmNiaUFxSUZ0R2RXNWpkR2x2Ymk1d2NtOTBiM1I1Y0dVdVltbHVaRjBvYUhSMGNITTZMeTlrWlhabGJHOXdaWEl1Ylc5NmFXeHNZUzV2Y21jdlpXNHRWVk12Wkc5amN5OVhaV0l2U21GMllWTmpjbWx3ZEM5U1pXWmxjbVZ1WTJVdlIyeHZZbUZzWDA5aWFtVmpkSE12Um5WdVkzUnBiMjR2WW1sdVpDa3VYRzRnS2x4dUlDb2dRR1oxYm1OY2JpQXFJRUJ0WlcxaVpYSlBaaUJTWEc0Z0tpQkFjMmx1WTJVZ2RqQXVOaTR3WEc0Z0tpQkFZMkYwWldkdmNua2dSblZ1WTNScGIyNWNiaUFxSUVCallYUmxaMjl5ZVNCUFltcGxZM1JjYmlBcUlFQnphV2NnS0NvZ0xUNGdLaWtnTFQ0Z2V5cDlJQzArSUNncUlDMCtJQ29wWEc0Z0tpQkFjR0Z5WVcwZ2UwWjFibU4wYVc5dWZTQm1iaUJVYUdVZ1puVnVZM1JwYjI0Z2RHOGdZbWx1WkNCMGJ5QmpiMjUwWlhoMFhHNGdLaUJBY0dGeVlXMGdlMDlpYW1WamRIMGdkR2hwYzA5aWFpQlVhR1VnWTI5dWRHVjRkQ0IwYnlCaWFXNWtJR0JtYm1BZ2RHOWNiaUFxSUVCeVpYUjFjbTRnZTBaMWJtTjBhVzl1ZlNCQklHWjFibU4wYVc5dUlIUm9ZWFFnZDJsc2JDQmxlR1ZqZFhSbElHbHVJSFJvWlNCamIyNTBaWGgwSUc5bUlHQjBhR2x6VDJKcVlDNWNiaUFxSUVCelpXVWdVaTV3WVhKMGFXRnNYRzRnS2lCQVpYaGhiWEJzWlZ4dUlDcGNiaUFxSUNBZ0lDQWdkbUZ5SUd4dlp5QTlJRkl1WW1sdVpDaGpiMjV6YjJ4bExteHZaeXdnWTI5dWMyOXNaU2s3WEc0Z0tpQWdJQ0FnSUZJdWNHbHdaU2hTTG1GemMyOWpLQ2RoSnl3Z01pa3NJRkl1ZEdGd0tHeHZaeWtzSUZJdVlYTnpiMk1vSjJFbkxDQXpLU2tvZTJFNklERjlLVHNnTHk4OVBpQjdZVG9nTTMxY2JpQXFJQ0FnSUNBZ0x5OGdiRzluY3lCN1lUb2dNbjFjYmlBcUlFQnplVzFpSUZJdVltbHVaQ2htTENCdktTaGhMQ0JpS1NBOUlHWXVZMkZzYkNodkxDQmhMQ0JpS1Z4dUlDb3ZYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJRjlqZFhKeWVUSW9ablZ1WTNScGIyNGdZbWx1WkNobWJpd2dkR2hwYzA5aWFpa2dlMXh1SUNCeVpYUjFjbTRnWDJGeWFYUjVLR1p1TG14bGJtZDBhQ3dnWm5WdVkzUnBiMjRvS1NCN1hHNGdJQ0FnY21WMGRYSnVJR1p1TG1Gd2NHeDVLSFJvYVhOUFltb3NJR0Z5WjNWdFpXNTBjeWs3WEc0Z0lIMHBPMXh1ZlNrN1hHNWNibHh1WEc0dkx5OHZMeTh2THk4dkx5OHZMeTh2THk5Y2JpOHZJRmRGUWxCQlEwc2dSazlQVkVWU1hHNHZMeUF1TDM0dmNtRnRaR0V2YzNKakwySnBibVF1YW5OY2JpOHZJRzF2WkhWc1pTQnBaQ0E5SURFME0xeHVMeThnYlc5a2RXeGxJR05vZFc1cmN5QTlJREFpWFN3aWJXRndjR2x1WjNNaU9pSkJRVUZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPeUlzSW5OdmRYSmpaVkp2YjNRaU9pSWlmUT09XCIpO1xuXG4vKioqLyB9KSxcbi8qIDE0NCAqL1xuLyogbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9cbi8qIGFsbCBleHBvcnRzIHVzZWQgKi9cbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vfi9yYW1kYS9zcmMvY29uZC5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbmV2YWwoXCJ2YXIgX2FyaXR5ID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9pbnRlcm5hbC9fYXJpdHkgKi8gMTQpO1xcbnZhciBfY3VycnkxID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9pbnRlcm5hbC9fY3VycnkxICovIDIpO1xcbnZhciBtYXAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL21hcCAqLyA4KTtcXG52YXIgbWF4ID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9tYXggKi8gNjMpO1xcbnZhciByZWR1Y2UgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL3JlZHVjZSAqLyAyNik7XFxuXFxuXFxuLyoqXFxuICogUmV0dXJucyBhIGZ1bmN0aW9uLCBgZm5gLCB3aGljaCBlbmNhcHN1bGF0ZXMgYGlmL2Vsc2UsIGlmL2Vsc2UsIC4uLmAgbG9naWMuXFxuICogYFIuY29uZGAgdGFrZXMgYSBsaXN0IG9mIFtwcmVkaWNhdGUsIHRyYW5zZm9ybWVyXSBwYWlycy4gQWxsIG9mIHRoZSBhcmd1bWVudHNcXG4gKiB0byBgZm5gIGFyZSBhcHBsaWVkIHRvIGVhY2ggb2YgdGhlIHByZWRpY2F0ZXMgaW4gdHVybiB1bnRpbCBvbmUgcmV0dXJucyBhXFxuICogXFxcInRydXRoeVxcXCIgdmFsdWUsIGF0IHdoaWNoIHBvaW50IGBmbmAgcmV0dXJucyB0aGUgcmVzdWx0IG9mIGFwcGx5aW5nIGl0c1xcbiAqIGFyZ3VtZW50cyB0byB0aGUgY29ycmVzcG9uZGluZyB0cmFuc2Zvcm1lci4gSWYgbm9uZSBvZiB0aGUgcHJlZGljYXRlc1xcbiAqIG1hdGNoZXMsIGBmbmAgcmV0dXJucyB1bmRlZmluZWQuXFxuICpcXG4gKiBAZnVuY1xcbiAqIEBtZW1iZXJPZiBSXFxuICogQHNpbmNlIHYwLjYuMFxcbiAqIEBjYXRlZ29yeSBMb2dpY1xcbiAqIEBzaWcgW1soKi4uLiAtPiBCb29sZWFuKSwoKi4uLiAtPiAqKV1dIC0+ICgqLi4uIC0+ICopXFxuICogQHBhcmFtIHtBcnJheX0gcGFpcnMgQSBsaXN0IG9mIFtwcmVkaWNhdGUsIHRyYW5zZm9ybWVyXVxcbiAqIEByZXR1cm4ge0Z1bmN0aW9ufVxcbiAqIEBleGFtcGxlXFxuICpcXG4gKiAgICAgIHZhciBmbiA9IFIuY29uZChbXFxuICogICAgICAgIFtSLmVxdWFscygwKSwgICBSLmFsd2F5cygnd2F0ZXIgZnJlZXplcyBhdCAwwrBDJyldLFxcbiAqICAgICAgICBbUi5lcXVhbHMoMTAwKSwgUi5hbHdheXMoJ3dhdGVyIGJvaWxzIGF0IDEwMMKwQycpXSxcXG4gKiAgICAgICAgW1IuVCwgICAgICAgICAgIHRlbXAgPT4gJ25vdGhpbmcgc3BlY2lhbCBoYXBwZW5zIGF0ICcgKyB0ZW1wICsgJ8KwQyddXFxuICogICAgICBdKTtcXG4gKiAgICAgIGZuKDApOyAvLz0+ICd3YXRlciBmcmVlemVzIGF0IDDCsEMnXFxuICogICAgICBmbig1MCk7IC8vPT4gJ25vdGhpbmcgc3BlY2lhbCBoYXBwZW5zIGF0IDUwwrBDJ1xcbiAqICAgICAgZm4oMTAwKTsgLy89PiAnd2F0ZXIgYm9pbHMgYXQgMTAwwrBDJ1xcbiAqL1xcbm1vZHVsZS5leHBvcnRzID0gX2N1cnJ5MShmdW5jdGlvbiBjb25kKHBhaXJzKSB7XFxuICB2YXIgYXJpdHkgPSByZWR1Y2UobWF4LFxcbiAgICAgICAgICAgICAgICAgICAgIDAsXFxuICAgICAgICAgICAgICAgICAgICAgbWFwKGZ1bmN0aW9uKHBhaXIpIHsgcmV0dXJuIHBhaXJbMF0ubGVuZ3RoOyB9LCBwYWlycykpO1xcbiAgcmV0dXJuIF9hcml0eShhcml0eSwgZnVuY3Rpb24oKSB7XFxuICAgIHZhciBpZHggPSAwO1xcbiAgICB3aGlsZSAoaWR4IDwgcGFpcnMubGVuZ3RoKSB7XFxuICAgICAgaWYgKHBhaXJzW2lkeF1bMF0uYXBwbHkodGhpcywgYXJndW1lbnRzKSkge1xcbiAgICAgICAgcmV0dXJuIHBhaXJzW2lkeF1bMV0uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcXG4gICAgICB9XFxuICAgICAgaWR4ICs9IDE7XFxuICAgIH1cXG4gIH0pO1xcbn0pO1xcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pTVRRMExtcHpJaXdpYzI5MWNtTmxjeUk2V3lKM1pXSndZV05yT2k4dkx5NHZmaTl5WVcxa1lTOXpjbU12WTI5dVpDNXFjejgzTmpVNUlsMHNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJblpoY2lCZllYSnBkSGtnUFNCeVpYRjFhWEpsS0NjdUwybHVkR1Z5Ym1Gc0wxOWhjbWwwZVNjcE8xeHVkbUZ5SUY5amRYSnllVEVnUFNCeVpYRjFhWEpsS0NjdUwybHVkR1Z5Ym1Gc0wxOWpkWEp5ZVRFbktUdGNiblpoY2lCdFlYQWdQU0J5WlhGMWFYSmxLQ2N1TDIxaGNDY3BPMXh1ZG1GeUlHMWhlQ0E5SUhKbGNYVnBjbVVvSnk0dmJXRjRKeWs3WEc1MllYSWdjbVZrZFdObElEMGdjbVZ4ZFdseVpTZ25MaTl5WldSMVkyVW5LVHRjYmx4dVhHNHZLaXBjYmlBcUlGSmxkSFZ5Ym5NZ1lTQm1kVzVqZEdsdmJpd2dZR1p1WUN3Z2QyaHBZMmdnWlc1allYQnpkV3hoZEdWeklHQnBaaTlsYkhObExDQnBaaTlsYkhObExDQXVMaTVnSUd4dloybGpMbHh1SUNvZ1lGSXVZMjl1WkdBZ2RHRnJaWE1nWVNCc2FYTjBJRzltSUZ0d2NtVmthV05oZEdVc0lIUnlZVzV6Wm05eWJXVnlYU0J3WVdseWN5NGdRV3hzSUc5bUlIUm9aU0JoY21kMWJXVnVkSE5jYmlBcUlIUnZJR0JtYm1BZ1lYSmxJR0Z3Y0d4cFpXUWdkRzhnWldGamFDQnZaaUIwYUdVZ2NISmxaR2xqWVhSbGN5QnBiaUIwZFhKdUlIVnVkR2xzSUc5dVpTQnlaWFIxY201eklHRmNiaUFxSUZ3aWRISjFkR2g1WENJZ2RtRnNkV1VzSUdGMElIZG9hV05vSUhCdmFXNTBJR0JtYm1BZ2NtVjBkWEp1Y3lCMGFHVWdjbVZ6ZFd4MElHOW1JR0Z3Y0d4NWFXNW5JR2wwYzF4dUlDb2dZWEpuZFcxbGJuUnpJSFJ2SUhSb1pTQmpiM0p5WlhOd2IyNWthVzVuSUhSeVlXNXpabTl5YldWeUxpQkpaaUJ1YjI1bElHOW1JSFJvWlNCd2NtVmthV05oZEdWelhHNGdLaUJ0WVhSamFHVnpMQ0JnWm01Z0lISmxkSFZ5Ym5NZ2RXNWtaV1pwYm1Wa0xseHVJQ3BjYmlBcUlFQm1kVzVqWEc0Z0tpQkFiV1Z0WW1WeVQyWWdVbHh1SUNvZ1FITnBibU5sSUhZd0xqWXVNRnh1SUNvZ1FHTmhkR1ZuYjNKNUlFeHZaMmxqWEc0Z0tpQkFjMmxuSUZ0YktDb3VMaTRnTFQ0Z1FtOXZiR1ZoYmlrc0tDb3VMaTRnTFQ0Z0tpbGRYU0F0UGlBb0tpNHVMaUF0UGlBcUtWeHVJQ29nUUhCaGNtRnRJSHRCY25KaGVYMGdjR0ZwY25NZ1FTQnNhWE4wSUc5bUlGdHdjbVZrYVdOaGRHVXNJSFJ5WVc1elptOXliV1Z5WFZ4dUlDb2dRSEpsZEhWeWJpQjdSblZ1WTNScGIyNTlYRzRnS2lCQVpYaGhiWEJzWlZ4dUlDcGNiaUFxSUNBZ0lDQWdkbUZ5SUdadUlEMGdVaTVqYjI1a0tGdGNiaUFxSUNBZ0lDQWdJQ0JiVWk1bGNYVmhiSE1vTUNrc0lDQWdVaTVoYkhkaGVYTW9KM2RoZEdWeUlHWnlaV1Y2WlhNZ1lYUWdNTUt3UXljcFhTeGNiaUFxSUNBZ0lDQWdJQ0JiVWk1bGNYVmhiSE1vTVRBd0tTd2dVaTVoYkhkaGVYTW9KM2RoZEdWeUlHSnZhV3h6SUdGMElERXdNTUt3UXljcFhTeGNiaUFxSUNBZ0lDQWdJQ0JiVWk1VUxDQWdJQ0FnSUNBZ0lDQWdkR1Z0Y0NBOVBpQW5ibTkwYUdsdVp5QnpjR1ZqYVdGc0lHaGhjSEJsYm5NZ1lYUWdKeUFySUhSbGJYQWdLeUFud3JCREoxMWNiaUFxSUNBZ0lDQWdYU2s3WEc0Z0tpQWdJQ0FnSUdadUtEQXBPeUF2THowK0lDZDNZWFJsY2lCbWNtVmxlbVZ6SUdGMElERENzRU1uWEc0Z0tpQWdJQ0FnSUdadUtEVXdLVHNnTHk4OVBpQW5ibTkwYUdsdVp5QnpjR1ZqYVdGc0lHaGhjSEJsYm5NZ1lYUWdOVERDc0VNblhHNGdLaUFnSUNBZ0lHWnVLREV3TUNrN0lDOHZQVDRnSjNkaGRHVnlJR0p2YVd4eklHRjBJREV3TU1Ld1F5ZGNiaUFxTDF4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCZlkzVnljbmt4S0daMWJtTjBhVzl1SUdOdmJtUW9jR0ZwY25NcElIdGNiaUFnZG1GeUlHRnlhWFI1SUQwZ2NtVmtkV05sS0cxaGVDeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSURBc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J0WVhBb1puVnVZM1JwYjI0b2NHRnBjaWtnZXlCeVpYUjFjbTRnY0dGcGNsc3dYUzVzWlc1bmRHZzdJSDBzSUhCaGFYSnpLU2s3WEc0Z0lISmxkSFZ5YmlCZllYSnBkSGtvWVhKcGRIa3NJR1oxYm1OMGFXOXVLQ2tnZTF4dUlDQWdJSFpoY2lCcFpIZ2dQU0F3TzF4dUlDQWdJSGRvYVd4bElDaHBaSGdnUENCd1lXbHljeTVzWlc1bmRHZ3BJSHRjYmlBZ0lDQWdJR2xtSUNod1lXbHljMXRwWkhoZFd6QmRMbUZ3Y0d4NUtIUm9hWE1zSUdGeVozVnRaVzUwY3lrcElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIQmhhWEp6VzJsa2VGMWJNVjB1WVhCd2JIa29kR2hwY3l3Z1lYSm5kVzFsYm5SektUdGNiaUFnSUNBZ0lIMWNiaUFnSUNBZ0lHbGtlQ0FyUFNBeE8xeHVJQ0FnSUgxY2JpQWdmU2s3WEc1OUtUdGNibHh1WEc1Y2JpOHZMeTh2THk4dkx5OHZMeTh2THk4dkwxeHVMeThnVjBWQ1VFRkRTeUJHVDA5VVJWSmNiaTh2SUM0dmZpOXlZVzFrWVM5emNtTXZZMjl1WkM1cWMxeHVMeThnYlc5a2RXeGxJR2xrSUQwZ01UUTBYRzR2THlCdGIyUjFiR1VnWTJoMWJtdHpJRDBnTUNKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHNpTENKemIzVnlZMlZTYjI5MElqb2lJbjA9XCIpO1xuXG4vKioqLyB9KSxcbi8qIDE0NSAqL1xuLyogbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9cbi8qIGFsbCBleHBvcnRzIHVzZWQgKi9cbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9+L3JhbWRhL3NyYy9kZWZhdWx0VG8uanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbmV2YWwoXCJ2YXIgX2N1cnJ5MiA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vaW50ZXJuYWwvX2N1cnJ5MiAqLyAxKTtcXG5cXG5cXG4vKipcXG4gKiBSZXR1cm5zIHRoZSBzZWNvbmQgYXJndW1lbnQgaWYgaXQgaXMgbm90IGBudWxsYCwgYHVuZGVmaW5lZGAgb3IgYE5hTmBcXG4gKiBvdGhlcndpc2UgdGhlIGZpcnN0IGFyZ3VtZW50IGlzIHJldHVybmVkLlxcbiAqXFxuICogQGZ1bmNcXG4gKiBAbWVtYmVyT2YgUlxcbiAqIEBzaW5jZSB2MC4xMC4wXFxuICogQGNhdGVnb3J5IExvZ2ljXFxuICogQHNpZyBhIC0+IGIgLT4gYSB8IGJcXG4gKiBAcGFyYW0ge2F9IGRlZmF1bHQgVGhlIGRlZmF1bHQgdmFsdWUuXFxuICogQHBhcmFtIHtifSB2YWwgYHZhbGAgd2lsbCBiZSByZXR1cm5lZCBpbnN0ZWFkIG9mIGBkZWZhdWx0YCB1bmxlc3MgYHZhbGAgaXMgYG51bGxgLCBgdW5kZWZpbmVkYCBvciBgTmFOYC5cXG4gKiBAcmV0dXJuIHsqfSBUaGUgc2Vjb25kIHZhbHVlIGlmIGl0IGlzIG5vdCBgbnVsbGAsIGB1bmRlZmluZWRgIG9yIGBOYU5gLCBvdGhlcndpc2UgdGhlIGRlZmF1bHQgdmFsdWVcXG4gKiBAZXhhbXBsZVxcbiAqXFxuICogICAgICB2YXIgZGVmYXVsdFRvNDIgPSBSLmRlZmF1bHRUbyg0Mik7XFxuICpcXG4gKiAgICAgIGRlZmF1bHRUbzQyKG51bGwpOyAgLy89PiA0MlxcbiAqICAgICAgZGVmYXVsdFRvNDIodW5kZWZpbmVkKTsgIC8vPT4gNDJcXG4gKiAgICAgIGRlZmF1bHRUbzQyKCdSYW1kYScpOyAgLy89PiAnUmFtZGEnXFxuICogICAgICAvLyBwYXJzZUludCgnc3RyaW5nJykgcmVzdWx0cyBpbiBOYU5cXG4gKiAgICAgIGRlZmF1bHRUbzQyKHBhcnNlSW50KCdzdHJpbmcnKSk7IC8vPT4gNDJcXG4gKi9cXG5tb2R1bGUuZXhwb3J0cyA9IF9jdXJyeTIoZnVuY3Rpb24gZGVmYXVsdFRvKGQsIHYpIHtcXG4gIHJldHVybiB2ID09IG51bGwgfHwgdiAhPT0gdiA/IGQgOiB2O1xcbn0pO1xcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pTVRRMUxtcHpJaXdpYzI5MWNtTmxjeUk2V3lKM1pXSndZV05yT2k4dkx5NHZmaTl5WVcxa1lTOXpjbU12WkdWbVlYVnNkRlJ2TG1welAySmxOV1VpWFN3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaWRtRnlJRjlqZFhKeWVUSWdQU0J5WlhGMWFYSmxLQ2N1TDJsdWRHVnlibUZzTDE5amRYSnllVEluS1R0Y2JseHVYRzR2S2lwY2JpQXFJRkpsZEhWeWJuTWdkR2hsSUhObFkyOXVaQ0JoY21kMWJXVnVkQ0JwWmlCcGRDQnBjeUJ1YjNRZ1lHNTFiR3hnTENCZ2RXNWtaV1pwYm1Wa1lDQnZjaUJnVG1GT1lGeHVJQ29nYjNSb1pYSjNhWE5sSUhSb1pTQm1hWEp6ZENCaGNtZDFiV1Z1ZENCcGN5QnlaWFIxY201bFpDNWNiaUFxWEc0Z0tpQkFablZ1WTF4dUlDb2dRRzFsYldKbGNrOW1JRkpjYmlBcUlFQnphVzVqWlNCMk1DNHhNQzR3WEc0Z0tpQkFZMkYwWldkdmNua2dURzluYVdOY2JpQXFJRUJ6YVdjZ1lTQXRQaUJpSUMwK0lHRWdmQ0JpWEc0Z0tpQkFjR0Z5WVcwZ2UyRjlJR1JsWm1GMWJIUWdWR2hsSUdSbFptRjFiSFFnZG1Gc2RXVXVYRzRnS2lCQWNHRnlZVzBnZTJKOUlIWmhiQ0JnZG1Gc1lDQjNhV3hzSUdKbElISmxkSFZ5Ym1Wa0lHbHVjM1JsWVdRZ2IyWWdZR1JsWm1GMWJIUmdJSFZ1YkdWemN5QmdkbUZzWUNCcGN5QmdiblZzYkdBc0lHQjFibVJsWm1sdVpXUmdJRzl5SUdCT1lVNWdMbHh1SUNvZ1FISmxkSFZ5YmlCN0tuMGdWR2hsSUhObFkyOXVaQ0IyWVd4MVpTQnBaaUJwZENCcGN5QnViM1FnWUc1MWJHeGdMQ0JnZFc1a1pXWnBibVZrWUNCdmNpQmdUbUZPWUN3Z2IzUm9aWEozYVhObElIUm9aU0JrWldaaGRXeDBJSFpoYkhWbFhHNGdLaUJBWlhoaGJYQnNaVnh1SUNwY2JpQXFJQ0FnSUNBZ2RtRnlJR1JsWm1GMWJIUlVielF5SUQwZ1VpNWtaV1poZFd4MFZHOG9ORElwTzF4dUlDcGNiaUFxSUNBZ0lDQWdaR1ZtWVhWc2RGUnZORElvYm5Wc2JDazdJQ0F2THowK0lEUXlYRzRnS2lBZ0lDQWdJR1JsWm1GMWJIUlVielF5S0hWdVpHVm1hVzVsWkNrN0lDQXZMejArSURReVhHNGdLaUFnSUNBZ0lHUmxabUYxYkhSVWJ6UXlLQ2RTWVcxa1lTY3BPeUFnTHk4OVBpQW5VbUZ0WkdFblhHNGdLaUFnSUNBZ0lDOHZJSEJoY25ObFNXNTBLQ2R6ZEhKcGJtY25LU0J5WlhOMWJIUnpJR2x1SUU1aFRseHVJQ29nSUNBZ0lDQmtaV1poZFd4MFZHODBNaWh3WVhKelpVbHVkQ2duYzNSeWFXNW5KeWtwT3lBdkx6MCtJRFF5WEc0Z0tpOWNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdYMk4xY25KNU1paG1kVzVqZEdsdmJpQmtaV1poZFd4MFZHOG9aQ3dnZGlrZ2UxeHVJQ0J5WlhSMWNtNGdkaUE5UFNCdWRXeHNJSHg4SUhZZ0lUMDlJSFlnUHlCa0lEb2dkanRjYm4wcE8xeHVYRzVjYmx4dUx5OHZMeTh2THk4dkx5OHZMeTh2THk4dlhHNHZMeUJYUlVKUVFVTkxJRVpQVDFSRlVseHVMeThnTGk5K0wzSmhiV1JoTDNOeVl5OWtaV1poZFd4MFZHOHVhbk5jYmk4dklHMXZaSFZzWlNCcFpDQTlJREUwTlZ4dUx5OGdiVzlrZFd4bElHTm9kVzVyY3lBOUlEQWlYU3dpYldGd2NHbHVaM01pT2lKQlFVRkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPeUlzSW5OdmRYSmpaVkp2YjNRaU9pSWlmUT09XCIpO1xuXG4vKioqLyB9KSxcbi8qIDE0NiAqL1xuLyogbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9cbi8qIGFsbCBleHBvcnRzIHVzZWQgKi9cbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9+L3JhbWRhL3NyYy9laXRoZXIuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbmV2YWwoXCJ2YXIgX2N1cnJ5MiA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vaW50ZXJuYWwvX2N1cnJ5MiAqLyAxKTtcXG52YXIgX2lzRnVuY3Rpb24gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL2ludGVybmFsL19pc0Z1bmN0aW9uICovIDU5KTtcXG52YXIgbGlmdCA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vbGlmdCAqLyAxNzYpO1xcbnZhciBvciA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vb3IgKi8gMTgxKTtcXG5cXG5cXG4vKipcXG4gKiBBIGZ1bmN0aW9uIHdyYXBwaW5nIGNhbGxzIHRvIHRoZSB0d28gZnVuY3Rpb25zIGluIGFuIGB8fGAgb3BlcmF0aW9uLFxcbiAqIHJldHVybmluZyB0aGUgcmVzdWx0IG9mIHRoZSBmaXJzdCBmdW5jdGlvbiBpZiBpdCBpcyB0cnV0aC15IGFuZCB0aGUgcmVzdWx0XFxuICogb2YgdGhlIHNlY29uZCBmdW5jdGlvbiBvdGhlcndpc2UuIE5vdGUgdGhhdCB0aGlzIGlzIHNob3J0LWNpcmN1aXRlZCxcXG4gKiBtZWFuaW5nIHRoYXQgdGhlIHNlY29uZCBmdW5jdGlvbiB3aWxsIG5vdCBiZSBpbnZva2VkIGlmIHRoZSBmaXJzdCByZXR1cm5zIGFcXG4gKiB0cnV0aC15IHZhbHVlLlxcbiAqXFxuICogSW4gYWRkaXRpb24gdG8gZnVuY3Rpb25zLCBgUi5laXRoZXJgIGFsc28gYWNjZXB0cyBhbnkgZmFudGFzeS1sYW5kIGNvbXBhdGlibGVcXG4gKiBhcHBsaWNhdGl2ZSBmdW5jdG9yLlxcbiAqXFxuICogQGZ1bmNcXG4gKiBAbWVtYmVyT2YgUlxcbiAqIEBzaW5jZSB2MC4xMi4wXFxuICogQGNhdGVnb3J5IExvZ2ljXFxuICogQHNpZyAoKi4uLiAtPiBCb29sZWFuKSAtPiAoKi4uLiAtPiBCb29sZWFuKSAtPiAoKi4uLiAtPiBCb29sZWFuKVxcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGYgYSBwcmVkaWNhdGVcXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBnIGFub3RoZXIgcHJlZGljYXRlXFxuICogQHJldHVybiB7RnVuY3Rpb259IGEgZnVuY3Rpb24gdGhhdCBhcHBsaWVzIGl0cyBhcmd1bWVudHMgdG8gYGZgIGFuZCBgZ2AgYW5kIGB8fGBzIHRoZWlyIG91dHB1dHMgdG9nZXRoZXIuXFxuICogQHNlZSBSLm9yXFxuICogQGV4YW1wbGVcXG4gKlxcbiAqICAgICAgdmFyIGd0MTAgPSB4ID0+IHggPiAxMDtcXG4gKiAgICAgIHZhciBldmVuID0geCA9PiB4ICUgMiA9PT0gMDtcXG4gKiAgICAgIHZhciBmID0gUi5laXRoZXIoZ3QxMCwgZXZlbik7XFxuICogICAgICBmKDEwMSk7IC8vPT4gdHJ1ZVxcbiAqICAgICAgZig4KTsgLy89PiB0cnVlXFxuICovXFxubW9kdWxlLmV4cG9ydHMgPSBfY3VycnkyKGZ1bmN0aW9uIGVpdGhlcihmLCBnKSB7XFxuICByZXR1cm4gX2lzRnVuY3Rpb24oZikgP1xcbiAgICBmdW5jdGlvbiBfZWl0aGVyKCkge1xcbiAgICAgIHJldHVybiBmLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgZy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xcbiAgICB9IDpcXG4gICAgbGlmdChvcikoZiwgZyk7XFxufSk7XFxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lNVFEyTG1weklpd2ljMjkxY21ObGN5STZXeUozWldKd1lXTnJPaTh2THk0dmZpOXlZVzFrWVM5emNtTXZaV2wwYUdWeUxtcHpQMkV3WldFaVhTd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lkbUZ5SUY5amRYSnllVElnUFNCeVpYRjFhWEpsS0NjdUwybHVkR1Z5Ym1Gc0wxOWpkWEp5ZVRJbktUdGNiblpoY2lCZmFYTkdkVzVqZEdsdmJpQTlJSEpsY1hWcGNtVW9KeTR2YVc1MFpYSnVZV3d2WDJselJuVnVZM1JwYjI0bktUdGNiblpoY2lCc2FXWjBJRDBnY21WeGRXbHlaU2duTGk5c2FXWjBKeWs3WEc1MllYSWdiM0lnUFNCeVpYRjFhWEpsS0NjdUwyOXlKeWs3WEc1Y2JseHVMeW9xWEc0Z0tpQkJJR1oxYm1OMGFXOXVJSGR5WVhCd2FXNW5JR05oYkd4eklIUnZJSFJvWlNCMGQyOGdablZ1WTNScGIyNXpJR2x1SUdGdUlHQjhmR0FnYjNCbGNtRjBhVzl1TEZ4dUlDb2djbVYwZFhKdWFXNW5JSFJvWlNCeVpYTjFiSFFnYjJZZ2RHaGxJR1pwY25OMElHWjFibU4wYVc5dUlHbG1JR2wwSUdseklIUnlkWFJvTFhrZ1lXNWtJSFJvWlNCeVpYTjFiSFJjYmlBcUlHOW1JSFJvWlNCelpXTnZibVFnWm5WdVkzUnBiMjRnYjNSb1pYSjNhWE5sTGlCT2IzUmxJSFJvWVhRZ2RHaHBjeUJwY3lCemFHOXlkQzFqYVhKamRXbDBaV1FzWEc0Z0tpQnRaV0Z1YVc1bklIUm9ZWFFnZEdobElITmxZMjl1WkNCbWRXNWpkR2x2YmlCM2FXeHNJRzV2ZENCaVpTQnBiblp2YTJWa0lHbG1JSFJvWlNCbWFYSnpkQ0J5WlhSMWNtNXpJR0ZjYmlBcUlIUnlkWFJvTFhrZ2RtRnNkV1V1WEc0Z0tseHVJQ29nU1c0Z1lXUmthWFJwYjI0Z2RHOGdablZ1WTNScGIyNXpMQ0JnVWk1bGFYUm9aWEpnSUdGc2MyOGdZV05qWlhCMGN5QmhibmtnWm1GdWRHRnplUzFzWVc1a0lHTnZiWEJoZEdsaWJHVmNiaUFxSUdGd2NHeHBZMkYwYVhabElHWjFibU4wYjNJdVhHNGdLbHh1SUNvZ1FHWjFibU5jYmlBcUlFQnRaVzFpWlhKUFppQlNYRzRnS2lCQWMybHVZMlVnZGpBdU1USXVNRnh1SUNvZ1FHTmhkR1ZuYjNKNUlFeHZaMmxqWEc0Z0tpQkFjMmxuSUNncUxpNHVJQzArSUVKdmIyeGxZVzRwSUMwK0lDZ3FMaTR1SUMwK0lFSnZiMnhsWVc0cElDMCtJQ2dxTGk0dUlDMCtJRUp2YjJ4bFlXNHBYRzRnS2lCQWNHRnlZVzBnZTBaMWJtTjBhVzl1ZlNCbUlHRWdjSEpsWkdsallYUmxYRzRnS2lCQWNHRnlZVzBnZTBaMWJtTjBhVzl1ZlNCbklHRnViM1JvWlhJZ2NISmxaR2xqWVhSbFhHNGdLaUJBY21WMGRYSnVJSHRHZFc1amRHbHZibjBnWVNCbWRXNWpkR2x2YmlCMGFHRjBJR0Z3Y0d4cFpYTWdhWFJ6SUdGeVozVnRaVzUwY3lCMGJ5QmdabUFnWVc1a0lHQm5ZQ0JoYm1RZ1lIeDhZSE1nZEdobGFYSWdiM1YwY0hWMGN5QjBiMmRsZEdobGNpNWNiaUFxSUVCelpXVWdVaTV2Y2x4dUlDb2dRR1Y0WVcxd2JHVmNiaUFxWEc0Z0tpQWdJQ0FnSUhaaGNpQm5kREV3SUQwZ2VDQTlQaUI0SUQ0Z01UQTdYRzRnS2lBZ0lDQWdJSFpoY2lCbGRtVnVJRDBnZUNBOVBpQjRJQ1VnTWlBOVBUMGdNRHRjYmlBcUlDQWdJQ0FnZG1GeUlHWWdQU0JTTG1WcGRHaGxjaWhuZERFd0xDQmxkbVZ1S1R0Y2JpQXFJQ0FnSUNBZ1ppZ3hNREVwT3lBdkx6MCtJSFJ5ZFdWY2JpQXFJQ0FnSUNBZ1ppZzRLVHNnTHk4OVBpQjBjblZsWEc0Z0tpOWNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdYMk4xY25KNU1paG1kVzVqZEdsdmJpQmxhWFJvWlhJb1ppd2daeWtnZTF4dUlDQnlaWFIxY200Z1gybHpSblZ1WTNScGIyNG9aaWtnUDF4dUlDQWdJR1oxYm1OMGFXOXVJRjlsYVhSb1pYSW9LU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdaaTVoY0hCc2VTaDBhR2x6TENCaGNtZDFiV1Z1ZEhNcElIeDhJR2N1WVhCd2JIa29kR2hwY3l3Z1lYSm5kVzFsYm5SektUdGNiaUFnSUNCOUlEcGNiaUFnSUNCc2FXWjBLRzl5S1NobUxDQm5LVHRjYm4wcE8xeHVYRzVjYmx4dUx5OHZMeTh2THk4dkx5OHZMeTh2THk4dlhHNHZMeUJYUlVKUVFVTkxJRVpQVDFSRlVseHVMeThnTGk5K0wzSmhiV1JoTDNOeVl5OWxhWFJvWlhJdWFuTmNiaTh2SUcxdlpIVnNaU0JwWkNBOUlERTBObHh1THk4Z2JXOWtkV3hsSUdOb2RXNXJjeUE5SURBaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3lJc0luTnZkWEpqWlZKdmIzUWlPaUlpZlE9PVwiKTtcblxuLyoqKi8gfSksXG4vKiAxNDcgKi9cbi8qIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKiBhbGwgZXhwb3J0cyB1c2VkICovXG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vfi9yYW1kYS9zcmMvZmlsdGVyLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5ldmFsKFwidmFyIF9jdXJyeTIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL2ludGVybmFsL19jdXJyeTIgKi8gMSk7XFxudmFyIF9kaXNwYXRjaGFibGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL2ludGVybmFsL19kaXNwYXRjaGFibGUgKi8gNTgpO1xcbnZhciBfZmlsdGVyID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9pbnRlcm5hbC9fZmlsdGVyICovIDE1OCk7XFxudmFyIF9pc09iamVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vaW50ZXJuYWwvX2lzT2JqZWN0ICovIDE2Myk7XFxudmFyIF9yZWR1Y2UgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL2ludGVybmFsL19yZWR1Y2UgKi8gMTYpO1xcbnZhciBfeGZpbHRlciA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vaW50ZXJuYWwvX3hmaWx0ZXIgKi8gMTcwKTtcXG52YXIga2V5cyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4va2V5cyAqLyAxNyk7XFxuXFxuXFxuLyoqXFxuICogVGFrZXMgYSBwcmVkaWNhdGUgYW5kIGEgXFxcImZpbHRlcmFibGVcXFwiLCBhbmQgcmV0dXJucyBhIG5ldyBmaWx0ZXJhYmxlIG9mIHRoZVxcbiAqIHNhbWUgdHlwZSBjb250YWluaW5nIHRoZSBtZW1iZXJzIG9mIHRoZSBnaXZlbiBmaWx0ZXJhYmxlIHdoaWNoIHNhdGlzZnkgdGhlXFxuICogZ2l2ZW4gcHJlZGljYXRlLlxcbiAqXFxuICogRGlzcGF0Y2hlcyB0byB0aGUgYGZpbHRlcmAgbWV0aG9kIG9mIHRoZSBzZWNvbmQgYXJndW1lbnQsIGlmIHByZXNlbnQuXFxuICpcXG4gKiBBY3RzIGFzIGEgdHJhbnNkdWNlciBpZiBhIHRyYW5zZm9ybWVyIGlzIGdpdmVuIGluIGxpc3QgcG9zaXRpb24uXFxuICpcXG4gKiBAZnVuY1xcbiAqIEBtZW1iZXJPZiBSXFxuICogQHNpbmNlIHYwLjEuMFxcbiAqIEBjYXRlZ29yeSBMaXN0XFxuICogQHNpZyBGaWx0ZXJhYmxlIGYgPT4gKGEgLT4gQm9vbGVhbikgLT4gZiBhIC0+IGYgYVxcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRcXG4gKiBAcGFyYW0ge0FycmF5fSBmaWx0ZXJhYmxlXFxuICogQHJldHVybiB7QXJyYXl9XFxuICogQHNlZSBSLnJlamVjdCwgUi50cmFuc2R1Y2UsIFIuYWRkSW5kZXhcXG4gKiBAZXhhbXBsZVxcbiAqXFxuICogICAgICB2YXIgaXNFdmVuID0gbiA9PiBuICUgMiA9PT0gMDtcXG4gKlxcbiAqICAgICAgUi5maWx0ZXIoaXNFdmVuLCBbMSwgMiwgMywgNF0pOyAvLz0+IFsyLCA0XVxcbiAqXFxuICogICAgICBSLmZpbHRlcihpc0V2ZW4sIHthOiAxLCBiOiAyLCBjOiAzLCBkOiA0fSk7IC8vPT4ge2I6IDIsIGQ6IDR9XFxuICovXFxubW9kdWxlLmV4cG9ydHMgPSBfY3VycnkyKF9kaXNwYXRjaGFibGUoWydmaWx0ZXInXSwgX3hmaWx0ZXIsIGZ1bmN0aW9uKHByZWQsIGZpbHRlcmFibGUpIHtcXG4gIHJldHVybiAoXFxuICAgIF9pc09iamVjdChmaWx0ZXJhYmxlKSA/XFxuICAgICAgX3JlZHVjZShmdW5jdGlvbihhY2MsIGtleSkge1xcbiAgICAgICAgaWYgKHByZWQoZmlsdGVyYWJsZVtrZXldKSkge1xcbiAgICAgICAgICBhY2Nba2V5XSA9IGZpbHRlcmFibGVba2V5XTtcXG4gICAgICAgIH1cXG4gICAgICAgIHJldHVybiBhY2M7XFxuICAgICAgfSwge30sIGtleXMoZmlsdGVyYWJsZSkpIDpcXG4gICAgLy8gZWxzZVxcbiAgICAgIF9maWx0ZXIocHJlZCwgZmlsdGVyYWJsZSlcXG4gICk7XFxufSkpO1xcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pTVRRM0xtcHpJaXdpYzI5MWNtTmxjeUk2V3lKM1pXSndZV05yT2k4dkx5NHZmaTl5WVcxa1lTOXpjbU12Wm1sc2RHVnlMbXB6UHpobE9UUWlYU3dpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpZG1GeUlGOWpkWEp5ZVRJZ1BTQnlaWEYxYVhKbEtDY3VMMmx1ZEdWeWJtRnNMMTlqZFhKeWVUSW5LVHRjYm5aaGNpQmZaR2x6Y0dGMFkyaGhZbXhsSUQwZ2NtVnhkV2x5WlNnbkxpOXBiblJsY201aGJDOWZaR2x6Y0dGMFkyaGhZbXhsSnlrN1hHNTJZWElnWDJacGJIUmxjaUE5SUhKbGNYVnBjbVVvSnk0dmFXNTBaWEp1WVd3dlgyWnBiSFJsY2ljcE8xeHVkbUZ5SUY5cGMwOWlhbVZqZENBOUlISmxjWFZwY21Vb0p5NHZhVzUwWlhKdVlXd3ZYMmx6VDJKcVpXTjBKeWs3WEc1MllYSWdYM0psWkhWalpTQTlJSEpsY1hWcGNtVW9KeTR2YVc1MFpYSnVZV3d2WDNKbFpIVmpaU2NwTzF4dWRtRnlJRjk0Wm1sc2RHVnlJRDBnY21WeGRXbHlaU2duTGk5cGJuUmxjbTVoYkM5ZmVHWnBiSFJsY2ljcE8xeHVkbUZ5SUd0bGVYTWdQU0J5WlhGMWFYSmxLQ2N1TDJ0bGVYTW5LVHRjYmx4dVhHNHZLaXBjYmlBcUlGUmhhMlZ6SUdFZ2NISmxaR2xqWVhSbElHRnVaQ0JoSUZ3aVptbHNkR1Z5WVdKc1pWd2lMQ0JoYm1RZ2NtVjBkWEp1Y3lCaElHNWxkeUJtYVd4MFpYSmhZbXhsSUc5bUlIUm9aVnh1SUNvZ2MyRnRaU0IwZVhCbElHTnZiblJoYVc1cGJtY2dkR2hsSUcxbGJXSmxjbk1nYjJZZ2RHaGxJR2RwZG1WdUlHWnBiSFJsY21GaWJHVWdkMmhwWTJnZ2MyRjBhWE5tZVNCMGFHVmNiaUFxSUdkcGRtVnVJSEJ5WldScFkyRjBaUzVjYmlBcVhHNGdLaUJFYVhOd1lYUmphR1Z6SUhSdklIUm9aU0JnWm1sc2RHVnlZQ0J0WlhSb2IyUWdiMllnZEdobElITmxZMjl1WkNCaGNtZDFiV1Z1ZEN3Z2FXWWdjSEpsYzJWdWRDNWNiaUFxWEc0Z0tpQkJZM1J6SUdGeklHRWdkSEpoYm5Oa2RXTmxjaUJwWmlCaElIUnlZVzV6Wm05eWJXVnlJR2x6SUdkcGRtVnVJR2x1SUd4cGMzUWdjRzl6YVhScGIyNHVYRzRnS2x4dUlDb2dRR1oxYm1OY2JpQXFJRUJ0WlcxaVpYSlBaaUJTWEc0Z0tpQkFjMmx1WTJVZ2RqQXVNUzR3WEc0Z0tpQkFZMkYwWldkdmNua2dUR2x6ZEZ4dUlDb2dRSE5wWnlCR2FXeDBaWEpoWW14bElHWWdQVDRnS0dFZ0xUNGdRbTl2YkdWaGJpa2dMVDRnWmlCaElDMCtJR1lnWVZ4dUlDb2dRSEJoY21GdElIdEdkVzVqZEdsdmJuMGdjSEpsWkZ4dUlDb2dRSEJoY21GdElIdEJjbkpoZVgwZ1ptbHNkR1Z5WVdKc1pWeHVJQ29nUUhKbGRIVnliaUI3UVhKeVlYbDlYRzRnS2lCQWMyVmxJRkl1Y21WcVpXTjBMQ0JTTG5SeVlXNXpaSFZqWlN3Z1VpNWhaR1JKYm1SbGVGeHVJQ29nUUdWNFlXMXdiR1ZjYmlBcVhHNGdLaUFnSUNBZ0lIWmhjaUJwYzBWMlpXNGdQU0J1SUQwK0lHNGdKU0F5SUQwOVBTQXdPMXh1SUNwY2JpQXFJQ0FnSUNBZ1VpNW1hV3gwWlhJb2FYTkZkbVZ1TENCYk1Td2dNaXdnTXl3Z05GMHBPeUF2THowK0lGc3lMQ0EwWFZ4dUlDcGNiaUFxSUNBZ0lDQWdVaTVtYVd4MFpYSW9hWE5GZG1WdUxDQjdZVG9nTVN3Z1lqb2dNaXdnWXpvZ015d2daRG9nTkgwcE95QXZMejArSUh0aU9pQXlMQ0JrT2lBMGZWeHVJQ292WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUY5amRYSnllVElvWDJScGMzQmhkR05vWVdKc1pTaGJKMlpwYkhSbGNpZGRMQ0JmZUdacGJIUmxjaXdnWm5WdVkzUnBiMjRvY0hKbFpDd2dabWxzZEdWeVlXSnNaU2tnZTF4dUlDQnlaWFIxY200Z0tGeHVJQ0FnSUY5cGMwOWlhbVZqZENobWFXeDBaWEpoWW14bEtTQS9YRzRnSUNBZ0lDQmZjbVZrZFdObEtHWjFibU4wYVc5dUtHRmpZeXdnYTJWNUtTQjdYRzRnSUNBZ0lDQWdJR2xtSUNod2NtVmtLR1pwYkhSbGNtRmliR1ZiYTJWNVhTa3BJSHRjYmlBZ0lDQWdJQ0FnSUNCaFkyTmJhMlY1WFNBOUlHWnBiSFJsY21GaWJHVmJhMlY1WFR0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1lXTmpPMXh1SUNBZ0lDQWdmU3dnZTMwc0lHdGxlWE1vWm1sc2RHVnlZV0pzWlNrcElEcGNiaUFnSUNBdkx5QmxiSE5sWEc0Z0lDQWdJQ0JmWm1sc2RHVnlLSEJ5WldRc0lHWnBiSFJsY21GaWJHVXBYRzRnSUNrN1hHNTlLU2s3WEc1Y2JseHVYRzR2THk4dkx5OHZMeTh2THk4dkx5OHZMeTljYmk4dklGZEZRbEJCUTBzZ1JrOVBWRVZTWEc0dkx5QXVMMzR2Y21GdFpHRXZjM0pqTDJacGJIUmxjaTVxYzF4dUx5OGdiVzlrZFd4bElHbGtJRDBnTVRRM1hHNHZMeUJ0YjJSMWJHVWdZMmgxYm10eklEMGdNQ0pkTENKdFlYQndhVzVuY3lJNklrRkJRVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3lJc0luTnZkWEpqWlZKdmIzUWlPaUlpZlE9PVwiKTtcblxuLyoqKi8gfSksXG4vKiAxNDggKi9cbi8qIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKiBhbGwgZXhwb3J0cyB1c2VkICovXG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vfi9yYW1kYS9zcmMvaWRlbnRpY2FsLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5ldmFsKFwidmFyIF9jdXJyeTIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL2ludGVybmFsL19jdXJyeTIgKi8gMSk7XFxuXFxuXFxuLyoqXFxuICogUmV0dXJucyB0cnVlIGlmIGl0cyBhcmd1bWVudHMgYXJlIGlkZW50aWNhbCwgZmFsc2Ugb3RoZXJ3aXNlLiBWYWx1ZXMgYXJlXFxuICogaWRlbnRpY2FsIGlmIHRoZXkgcmVmZXJlbmNlIHRoZSBzYW1lIG1lbW9yeS4gYE5hTmAgaXMgaWRlbnRpY2FsIHRvIGBOYU5gO1xcbiAqIGAwYCBhbmQgYC0wYCBhcmUgbm90IGlkZW50aWNhbC5cXG4gKlxcbiAqIEBmdW5jXFxuICogQG1lbWJlck9mIFJcXG4gKiBAc2luY2UgdjAuMTUuMFxcbiAqIEBjYXRlZ29yeSBSZWxhdGlvblxcbiAqIEBzaWcgYSAtPiBhIC0+IEJvb2xlYW5cXG4gKiBAcGFyYW0geyp9IGFcXG4gKiBAcGFyYW0geyp9IGJcXG4gKiBAcmV0dXJuIHtCb29sZWFufVxcbiAqIEBleGFtcGxlXFxuICpcXG4gKiAgICAgIHZhciBvID0ge307XFxuICogICAgICBSLmlkZW50aWNhbChvLCBvKTsgLy89PiB0cnVlXFxuICogICAgICBSLmlkZW50aWNhbCgxLCAxKTsgLy89PiB0cnVlXFxuICogICAgICBSLmlkZW50aWNhbCgxLCAnMScpOyAvLz0+IGZhbHNlXFxuICogICAgICBSLmlkZW50aWNhbChbXSwgW10pOyAvLz0+IGZhbHNlXFxuICogICAgICBSLmlkZW50aWNhbCgwLCAtMCk7IC8vPT4gZmFsc2VcXG4gKiAgICAgIFIuaWRlbnRpY2FsKE5hTiwgTmFOKTsgLy89PiB0cnVlXFxuICovXFxubW9kdWxlLmV4cG9ydHMgPSBfY3VycnkyKGZ1bmN0aW9uIGlkZW50aWNhbChhLCBiKSB7XFxuICAvLyBTYW1lVmFsdWUgYWxnb3JpdGhtXFxuICBpZiAoYSA9PT0gYikgeyAvLyBTdGVwcyAxLTUsIDctMTBcXG4gICAgLy8gU3RlcHMgNi5iLTYuZTogKzAgIT0gLTBcXG4gICAgcmV0dXJuIGEgIT09IDAgfHwgMSAvIGEgPT09IDEgLyBiO1xcbiAgfSBlbHNlIHtcXG4gICAgLy8gU3RlcCA2LmE6IE5hTiA9PSBOYU5cXG4gICAgcmV0dXJuIGEgIT09IGEgJiYgYiAhPT0gYjtcXG4gIH1cXG59KTtcXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaU1UUTRMbXB6SWl3aWMyOTFjbU5sY3lJNld5SjNaV0p3WVdOck9pOHZMeTR2Zmk5eVlXMWtZUzl6Y21NdmFXUmxiblJwWTJGc0xtcHpQelkxWlRRaVhTd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lkbUZ5SUY5amRYSnllVElnUFNCeVpYRjFhWEpsS0NjdUwybHVkR1Z5Ym1Gc0wxOWpkWEp5ZVRJbktUdGNibHh1WEc0dktpcGNiaUFxSUZKbGRIVnlibk1nZEhKMVpTQnBaaUJwZEhNZ1lYSm5kVzFsYm5SeklHRnlaU0JwWkdWdWRHbGpZV3dzSUdaaGJITmxJRzkwYUdWeWQybHpaUzRnVm1Gc2RXVnpJR0Z5WlZ4dUlDb2dhV1JsYm5ScFkyRnNJR2xtSUhSb1pYa2djbVZtWlhKbGJtTmxJSFJvWlNCellXMWxJRzFsYlc5eWVTNGdZRTVoVG1BZ2FYTWdhV1JsYm5ScFkyRnNJSFJ2SUdCT1lVNWdPMXh1SUNvZ1lEQmdJR0Z1WkNCZ0xUQmdJR0Z5WlNCdWIzUWdhV1JsYm5ScFkyRnNMbHh1SUNwY2JpQXFJRUJtZFc1alhHNGdLaUJBYldWdFltVnlUMllnVWx4dUlDb2dRSE5wYm1ObElIWXdMakUxTGpCY2JpQXFJRUJqWVhSbFoyOXllU0JTWld4aGRHbHZibHh1SUNvZ1FITnBaeUJoSUMwK0lHRWdMVDRnUW05dmJHVmhibHh1SUNvZ1FIQmhjbUZ0SUhzcWZTQmhYRzRnS2lCQWNHRnlZVzBnZXlwOUlHSmNiaUFxSUVCeVpYUjFjbTRnZTBKdmIyeGxZVzU5WEc0Z0tpQkFaWGhoYlhCc1pWeHVJQ3BjYmlBcUlDQWdJQ0FnZG1GeUlHOGdQU0I3ZlR0Y2JpQXFJQ0FnSUNBZ1VpNXBaR1Z1ZEdsallXd29ieXdnYnlrN0lDOHZQVDRnZEhKMVpWeHVJQ29nSUNBZ0lDQlNMbWxrWlc1MGFXTmhiQ2d4TENBeEtUc2dMeTg5UGlCMGNuVmxYRzRnS2lBZ0lDQWdJRkl1YVdSbGJuUnBZMkZzS0RFc0lDY3hKeWs3SUM4dlBUNGdabUZzYzJWY2JpQXFJQ0FnSUNBZ1VpNXBaR1Z1ZEdsallXd29XMTBzSUZ0ZEtUc2dMeTg5UGlCbVlXeHpaVnh1SUNvZ0lDQWdJQ0JTTG1sa1pXNTBhV05oYkNnd0xDQXRNQ2s3SUM4dlBUNGdabUZzYzJWY2JpQXFJQ0FnSUNBZ1VpNXBaR1Z1ZEdsallXd29UbUZPTENCT1lVNHBPeUF2THowK0lIUnlkV1ZjYmlBcUwxeHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQmZZM1Z5Y25reUtHWjFibU4wYVc5dUlHbGtaVzUwYVdOaGJDaGhMQ0JpS1NCN1hHNGdJQzh2SUZOaGJXVldZV3gxWlNCaGJHZHZjbWwwYUcxY2JpQWdhV1lnS0dFZ1BUMDlJR0lwSUhzZ0x5OGdVM1JsY0hNZ01TMDFMQ0EzTFRFd1hHNGdJQ0FnTHk4Z1UzUmxjSE1nTmk1aUxUWXVaVG9nS3pBZ0lUMGdMVEJjYmlBZ0lDQnlaWFIxY200Z1lTQWhQVDBnTUNCOGZDQXhJQzhnWVNBOVBUMGdNU0F2SUdJN1hHNGdJSDBnWld4elpTQjdYRzRnSUNBZ0x5OGdVM1JsY0NBMkxtRTZJRTVoVGlBOVBTQk9ZVTVjYmlBZ0lDQnlaWFIxY200Z1lTQWhQVDBnWVNBbUppQmlJQ0U5UFNCaU8xeHVJQ0I5WEc1OUtUdGNibHh1WEc1Y2JpOHZMeTh2THk4dkx5OHZMeTh2THk4dkwxeHVMeThnVjBWQ1VFRkRTeUJHVDA5VVJWSmNiaTh2SUM0dmZpOXlZVzFrWVM5emNtTXZhV1JsYm5ScFkyRnNMbXB6WEc0dkx5QnRiMlIxYkdVZ2FXUWdQU0F4TkRoY2JpOHZJRzF2WkhWc1pTQmphSFZ1YTNNZ1BTQXdJbDBzSW0xaGNIQnBibWR6SWpvaVFVRkJRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN0lpd2ljMjkxY21ObFVtOXZkQ0k2SWlKOVwiKTtcblxuLyoqKi8gfSksXG4vKiAxNDkgKi9cbi8qIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKiBhbGwgZXhwb3J0cyB1c2VkICovXG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9+L3JhbWRhL3NyYy9pZGVudGl0eS5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5ldmFsKFwidmFyIF9jdXJyeTEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL2ludGVybmFsL19jdXJyeTEgKi8gMik7XFxudmFyIF9pZGVudGl0eSA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vaW50ZXJuYWwvX2lkZW50aXR5ICovIDE2MCk7XFxuXFxuXFxuLyoqXFxuICogQSBmdW5jdGlvbiB0aGF0IGRvZXMgbm90aGluZyBidXQgcmV0dXJuIHRoZSBwYXJhbWV0ZXIgc3VwcGxpZWQgdG8gaXQuIEdvb2RcXG4gKiBhcyBhIGRlZmF1bHQgb3IgcGxhY2Vob2xkZXIgZnVuY3Rpb24uXFxuICpcXG4gKiBAZnVuY1xcbiAqIEBtZW1iZXJPZiBSXFxuICogQHNpbmNlIHYwLjEuMFxcbiAqIEBjYXRlZ29yeSBGdW5jdGlvblxcbiAqIEBzaWcgYSAtPiBhXFxuICogQHBhcmFtIHsqfSB4IFRoZSB2YWx1ZSB0byByZXR1cm4uXFxuICogQHJldHVybiB7Kn0gVGhlIGlucHV0IHZhbHVlLCBgeGAuXFxuICogQGV4YW1wbGVcXG4gKlxcbiAqICAgICAgUi5pZGVudGl0eSgxKTsgLy89PiAxXFxuICpcXG4gKiAgICAgIHZhciBvYmogPSB7fTtcXG4gKiAgICAgIFIuaWRlbnRpdHkob2JqKSA9PT0gb2JqOyAvLz0+IHRydWVcXG4gKiBAc3ltYiBSLmlkZW50aXR5KGEpID0gYVxcbiAqL1xcbm1vZHVsZS5leHBvcnRzID0gX2N1cnJ5MShfaWRlbnRpdHkpO1xcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pTVRRNUxtcHpJaXdpYzI5MWNtTmxjeUk2V3lKM1pXSndZV05yT2k4dkx5NHZmaTl5WVcxa1lTOXpjbU12YVdSbGJuUnBkSGt1YW5NL1lUQm1PU0pkTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lKMllYSWdYMk4xY25KNU1TQTlJSEpsY1hWcGNtVW9KeTR2YVc1MFpYSnVZV3d2WDJOMWNuSjVNU2NwTzF4dWRtRnlJRjlwWkdWdWRHbDBlU0E5SUhKbGNYVnBjbVVvSnk0dmFXNTBaWEp1WVd3dlgybGtaVzUwYVhSNUp5azdYRzVjYmx4dUx5b3FYRzRnS2lCQklHWjFibU4wYVc5dUlIUm9ZWFFnWkc5bGN5QnViM1JvYVc1bklHSjFkQ0J5WlhSMWNtNGdkR2hsSUhCaGNtRnRaWFJsY2lCemRYQndiR2xsWkNCMGJ5QnBkQzRnUjI5dlpGeHVJQ29nWVhNZ1lTQmtaV1poZFd4MElHOXlJSEJzWVdObGFHOXNaR1Z5SUdaMWJtTjBhVzl1TGx4dUlDcGNiaUFxSUVCbWRXNWpYRzRnS2lCQWJXVnRZbVZ5VDJZZ1VseHVJQ29nUUhOcGJtTmxJSFl3TGpFdU1GeHVJQ29nUUdOaGRHVm5iM0o1SUVaMWJtTjBhVzl1WEc0Z0tpQkFjMmxuSUdFZ0xUNGdZVnh1SUNvZ1FIQmhjbUZ0SUhzcWZTQjRJRlJvWlNCMllXeDFaU0IwYnlCeVpYUjFjbTR1WEc0Z0tpQkFjbVYwZFhKdUlIc3FmU0JVYUdVZ2FXNXdkWFFnZG1Gc2RXVXNJR0I0WUM1Y2JpQXFJRUJsZUdGdGNHeGxYRzRnS2x4dUlDb2dJQ0FnSUNCU0xtbGtaVzUwYVhSNUtERXBPeUF2THowK0lERmNiaUFxWEc0Z0tpQWdJQ0FnSUhaaGNpQnZZbW9nUFNCN2ZUdGNiaUFxSUNBZ0lDQWdVaTVwWkdWdWRHbDBlU2h2WW1vcElEMDlQU0J2WW1vN0lDOHZQVDRnZEhKMVpWeHVJQ29nUUhONWJXSWdVaTVwWkdWdWRHbDBlU2hoS1NBOUlHRmNiaUFxTDF4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCZlkzVnljbmt4S0Y5cFpHVnVkR2wwZVNrN1hHNWNibHh1WEc0dkx5OHZMeTh2THk4dkx5OHZMeTh2THk5Y2JpOHZJRmRGUWxCQlEwc2dSazlQVkVWU1hHNHZMeUF1TDM0dmNtRnRaR0V2YzNKakwybGtaVzUwYVhSNUxtcHpYRzR2THlCdGIyUjFiR1VnYVdRZ1BTQXhORGxjYmk4dklHMXZaSFZzWlNCamFIVnVhM01nUFNBd0lsMHNJbTFoY0hCcGJtZHpJam9pUVVGQlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN0lpd2ljMjkxY21ObFVtOXZkQ0k2SWlKOVwiKTtcblxuLyoqKi8gfSksXG4vKiAxNTAgKi9cbi8qIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKiBhbGwgZXhwb3J0cyB1c2VkICovXG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vfi9yYW1kYS9zcmMvaWZFbHNlLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5ldmFsKFwidmFyIF9jdXJyeTMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL2ludGVybmFsL19jdXJyeTMgKi8gNyk7XFxudmFyIGN1cnJ5TiA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vY3VycnlOICovIDYpO1xcblxcblxcbi8qKlxcbiAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHdpbGwgcHJvY2VzcyBlaXRoZXIgdGhlIGBvblRydWVgIG9yIHRoZSBgb25GYWxzZWBcXG4gKiBmdW5jdGlvbiBkZXBlbmRpbmcgdXBvbiB0aGUgcmVzdWx0IG9mIHRoZSBgY29uZGl0aW9uYCBwcmVkaWNhdGUuXFxuICpcXG4gKiBAZnVuY1xcbiAqIEBtZW1iZXJPZiBSXFxuICogQHNpbmNlIHYwLjguMFxcbiAqIEBjYXRlZ29yeSBMb2dpY1xcbiAqIEBzaWcgKCouLi4gLT4gQm9vbGVhbikgLT4gKCouLi4gLT4gKikgLT4gKCouLi4gLT4gKikgLT4gKCouLi4gLT4gKilcXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjb25kaXRpb24gQSBwcmVkaWNhdGUgZnVuY3Rpb25cXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBvblRydWUgQSBmdW5jdGlvbiB0byBpbnZva2Ugd2hlbiB0aGUgYGNvbmRpdGlvbmAgZXZhbHVhdGVzIHRvIGEgdHJ1dGh5IHZhbHVlLlxcbiAqIEBwYXJhbSB7RnVuY3Rpb259IG9uRmFsc2UgQSBmdW5jdGlvbiB0byBpbnZva2Ugd2hlbiB0aGUgYGNvbmRpdGlvbmAgZXZhbHVhdGVzIHRvIGEgZmFsc3kgdmFsdWUuXFxuICogQHJldHVybiB7RnVuY3Rpb259IEEgbmV3IHVuYXJ5IGZ1bmN0aW9uIHRoYXQgd2lsbCBwcm9jZXNzIGVpdGhlciB0aGUgYG9uVHJ1ZWAgb3IgdGhlIGBvbkZhbHNlYFxcbiAqICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBkZXBlbmRpbmcgdXBvbiB0aGUgcmVzdWx0IG9mIHRoZSBgY29uZGl0aW9uYCBwcmVkaWNhdGUuXFxuICogQHNlZSBSLnVubGVzcywgUi53aGVuXFxuICogQGV4YW1wbGVcXG4gKlxcbiAqICAgICAgdmFyIGluY0NvdW50ID0gUi5pZkVsc2UoXFxuICogICAgICAgIFIuaGFzKCdjb3VudCcpLFxcbiAqICAgICAgICBSLm92ZXIoUi5sZW5zUHJvcCgnY291bnQnKSwgUi5pbmMpLFxcbiAqICAgICAgICBSLmFzc29jKCdjb3VudCcsIDEpXFxuICogICAgICApO1xcbiAqICAgICAgaW5jQ291bnQoe30pOyAgICAgICAgICAgLy89PiB7IGNvdW50OiAxIH1cXG4gKiAgICAgIGluY0NvdW50KHsgY291bnQ6IDEgfSk7IC8vPT4geyBjb3VudDogMiB9XFxuICovXFxubW9kdWxlLmV4cG9ydHMgPSBfY3VycnkzKGZ1bmN0aW9uIGlmRWxzZShjb25kaXRpb24sIG9uVHJ1ZSwgb25GYWxzZSkge1xcbiAgcmV0dXJuIGN1cnJ5TihNYXRoLm1heChjb25kaXRpb24ubGVuZ3RoLCBvblRydWUubGVuZ3RoLCBvbkZhbHNlLmxlbmd0aCksXFxuICAgIGZ1bmN0aW9uIF9pZkVsc2UoKSB7XFxuICAgICAgcmV0dXJuIGNvbmRpdGlvbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpID8gb25UcnVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgOiBvbkZhbHNlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XFxuICAgIH1cXG4gICk7XFxufSk7XFxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lNVFV3TG1weklpd2ljMjkxY21ObGN5STZXeUozWldKd1lXTnJPaTh2THk0dmZpOXlZVzFrWVM5emNtTXZhV1pGYkhObExtcHpQelZrTm1NaVhTd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lkbUZ5SUY5amRYSnllVE1nUFNCeVpYRjFhWEpsS0NjdUwybHVkR1Z5Ym1Gc0wxOWpkWEp5ZVRNbktUdGNiblpoY2lCamRYSnllVTRnUFNCeVpYRjFhWEpsS0NjdUwyTjFjbko1VGljcE8xeHVYRzVjYmk4cUtseHVJQ29nUTNKbFlYUmxjeUJoSUdaMWJtTjBhVzl1SUhSb1lYUWdkMmxzYkNCd2NtOWpaWE56SUdWcGRHaGxjaUIwYUdVZ1lHOXVWSEoxWldBZ2IzSWdkR2hsSUdCdmJrWmhiSE5sWUZ4dUlDb2dablZ1WTNScGIyNGdaR1Z3Wlc1a2FXNW5JSFZ3YjI0Z2RHaGxJSEpsYzNWc2RDQnZaaUIwYUdVZ1lHTnZibVJwZEdsdmJtQWdjSEpsWkdsallYUmxMbHh1SUNwY2JpQXFJRUJtZFc1alhHNGdLaUJBYldWdFltVnlUMllnVWx4dUlDb2dRSE5wYm1ObElIWXdMamd1TUZ4dUlDb2dRR05oZEdWbmIzSjVJRXh2WjJsalhHNGdLaUJBYzJsbklDZ3FMaTR1SUMwK0lFSnZiMnhsWVc0cElDMCtJQ2dxTGk0dUlDMCtJQ29wSUMwK0lDZ3FMaTR1SUMwK0lDb3BJQzArSUNncUxpNHVJQzArSUNvcFhHNGdLaUJBY0dGeVlXMGdlMFoxYm1OMGFXOXVmU0JqYjI1a2FYUnBiMjRnUVNCd2NtVmthV05oZEdVZ1puVnVZM1JwYjI1Y2JpQXFJRUJ3WVhKaGJTQjdSblZ1WTNScGIyNTlJRzl1VkhKMVpTQkJJR1oxYm1OMGFXOXVJSFJ2SUdsdWRtOXJaU0IzYUdWdUlIUm9aU0JnWTI5dVpHbDBhVzl1WUNCbGRtRnNkV0YwWlhNZ2RHOGdZU0IwY25WMGFIa2dkbUZzZFdVdVhHNGdLaUJBY0dGeVlXMGdlMFoxYm1OMGFXOXVmU0J2YmtaaGJITmxJRUVnWm5WdVkzUnBiMjRnZEc4Z2FXNTJiMnRsSUhkb1pXNGdkR2hsSUdCamIyNWthWFJwYjI1Z0lHVjJZV3gxWVhSbGN5QjBieUJoSUdaaGJITjVJSFpoYkhWbExseHVJQ29nUUhKbGRIVnliaUI3Um5WdVkzUnBiMjU5SUVFZ2JtVjNJSFZ1WVhKNUlHWjFibU4wYVc5dUlIUm9ZWFFnZDJsc2JDQndjbTlqWlhOeklHVnBkR2hsY2lCMGFHVWdZRzl1VkhKMVpXQWdiM0lnZEdobElHQnZia1poYkhObFlGeHVJQ29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdaMWJtTjBhVzl1SUdSbGNHVnVaR2x1WnlCMWNHOXVJSFJvWlNCeVpYTjFiSFFnYjJZZ2RHaGxJR0JqYjI1a2FYUnBiMjVnSUhCeVpXUnBZMkYwWlM1Y2JpQXFJRUJ6WldVZ1VpNTFibXhsYzNNc0lGSXVkMmhsYmx4dUlDb2dRR1Y0WVcxd2JHVmNiaUFxWEc0Z0tpQWdJQ0FnSUhaaGNpQnBibU5EYjNWdWRDQTlJRkl1YVdaRmJITmxLRnh1SUNvZ0lDQWdJQ0FnSUZJdWFHRnpLQ2RqYjNWdWRDY3BMRnh1SUNvZ0lDQWdJQ0FnSUZJdWIzWmxjaWhTTG14bGJuTlFjbTl3S0NkamIzVnVkQ2NwTENCU0xtbHVZeWtzWEc0Z0tpQWdJQ0FnSUNBZ1VpNWhjM052WXlnblkyOTFiblFuTENBeEtWeHVJQ29nSUNBZ0lDQXBPMXh1SUNvZ0lDQWdJQ0JwYm1ORGIzVnVkQ2g3ZlNrN0lDQWdJQ0FnSUNBZ0lDQXZMejArSUhzZ1kyOTFiblE2SURFZ2ZWeHVJQ29nSUNBZ0lDQnBibU5EYjNWdWRDaDdJR052ZFc1ME9pQXhJSDBwT3lBdkx6MCtJSHNnWTI5MWJuUTZJRElnZlZ4dUlDb3ZYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJRjlqZFhKeWVUTW9ablZ1WTNScGIyNGdhV1pGYkhObEtHTnZibVJwZEdsdmJpd2diMjVVY25WbExDQnZia1poYkhObEtTQjdYRzRnSUhKbGRIVnliaUJqZFhKeWVVNG9UV0YwYUM1dFlYZ29ZMjl1WkdsMGFXOXVMbXhsYm1kMGFDd2diMjVVY25WbExteGxibWQwYUN3Z2IyNUdZV3h6WlM1c1pXNW5kR2dwTEZ4dUlDQWdJR1oxYm1OMGFXOXVJRjlwWmtWc2MyVW9LU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdZMjl1WkdsMGFXOXVMbUZ3Y0d4NUtIUm9hWE1zSUdGeVozVnRaVzUwY3lrZ1B5QnZibFJ5ZFdVdVlYQndiSGtvZEdocGN5d2dZWEpuZFcxbGJuUnpLU0E2SUc5dVJtRnNjMlV1WVhCd2JIa29kR2hwY3l3Z1lYSm5kVzFsYm5SektUdGNiaUFnSUNCOVhHNGdJQ2s3WEc1OUtUdGNibHh1WEc1Y2JpOHZMeTh2THk4dkx5OHZMeTh2THk4dkwxeHVMeThnVjBWQ1VFRkRTeUJHVDA5VVJWSmNiaTh2SUM0dmZpOXlZVzFrWVM5emNtTXZhV1pGYkhObExtcHpYRzR2THlCdGIyUjFiR1VnYVdRZ1BTQXhOVEJjYmk4dklHMXZaSFZzWlNCamFIVnVhM01nUFNBd0lsMHNJbTFoY0hCcGJtZHpJam9pUVVGQlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3SWl3aWMyOTFjbU5sVW05dmRDSTZJaUo5XCIpO1xuXG4vKioqLyB9KSxcbi8qIDE1MSAqL1xuLyogbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9cbi8qIGFsbCBleHBvcnRzIHVzZWQgKi9cbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9+L3JhbWRhL3NyYy9pbnRlcm5hbC9fYXJyYXlGcm9tSXRlcmF0b3IuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbmV2YWwoXCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIF9hcnJheUZyb21JdGVyYXRvcihpdGVyKSB7XFxuICB2YXIgbGlzdCA9IFtdO1xcbiAgdmFyIG5leHQ7XFxuICB3aGlsZSAoIShuZXh0ID0gaXRlci5uZXh0KCkpLmRvbmUpIHtcXG4gICAgbGlzdC5wdXNoKG5leHQudmFsdWUpO1xcbiAgfVxcbiAgcmV0dXJuIGxpc3Q7XFxufTtcXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaU1UVXhMbXB6SWl3aWMyOTFjbU5sY3lJNld5SjNaV0p3WVdOck9pOHZMeTR2Zmk5eVlXMWtZUzl6Y21NdmFXNTBaWEp1WVd3dlgyRnljbUY1Um5KdmJVbDBaWEpoZEc5eUxtcHpQMlk1TUdZaVhTd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2liVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQm1kVzVqZEdsdmJpQmZZWEp5WVhsR2NtOXRTWFJsY21GMGIzSW9hWFJsY2lrZ2UxeHVJQ0IyWVhJZ2JHbHpkQ0E5SUZ0ZE8xeHVJQ0IyWVhJZ2JtVjRkRHRjYmlBZ2QyaHBiR1VnS0NFb2JtVjRkQ0E5SUdsMFpYSXVibVY0ZENncEtTNWtiMjVsS1NCN1hHNGdJQ0FnYkdsemRDNXdkWE5vS0c1bGVIUXVkbUZzZFdVcE8xeHVJQ0I5WEc0Z0lISmxkSFZ5YmlCc2FYTjBPMXh1ZlR0Y2JseHVYRzVjYmk4dkx5OHZMeTh2THk4dkx5OHZMeTh2TDF4dUx5OGdWMFZDVUVGRFN5QkdUMDlVUlZKY2JpOHZJQzR2Zmk5eVlXMWtZUzl6Y21NdmFXNTBaWEp1WVd3dlgyRnljbUY1Um5KdmJVbDBaWEpoZEc5eUxtcHpYRzR2THlCdGIyUjFiR1VnYVdRZ1BTQXhOVEZjYmk4dklHMXZaSFZzWlNCamFIVnVhM01nUFNBd0lsMHNJbTFoY0hCcGJtZHpJam9pUVVGQlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk95SXNJbk52ZFhKalpWSnZiM1FpT2lJaWZRPT1cIik7XG5cbi8qKiovIH0pLFxuLyogMTUyICovXG4vKiBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyogYWxsIGV4cG9ydHMgdXNlZCAqL1xuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9+L3JhbWRhL3NyYy9pbnRlcm5hbC9fYXNzaWduLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuZXZhbChcInZhciBfb2JqZWN0QXNzaWduID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9fb2JqZWN0QXNzaWduICovIDE2NSk7XFxuXFxubW9kdWxlLmV4cG9ydHMgPVxcbiAgdHlwZW9mIE9iamVjdC5hc3NpZ24gPT09ICdmdW5jdGlvbicgPyBPYmplY3QuYXNzaWduIDogX29iamVjdEFzc2lnbjtcXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaU1UVXlMbXB6SWl3aWMyOTFjbU5sY3lJNld5SjNaV0p3WVdOck9pOHZMeTR2Zmk5eVlXMWtZUzl6Y21NdmFXNTBaWEp1WVd3dlgyRnpjMmxuYmk1cWN6OW1OemhrSWwwc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYkluWmhjaUJmYjJKcVpXTjBRWE56YVdkdUlEMGdjbVZ4ZFdseVpTZ25MaTlmYjJKcVpXTjBRWE56YVdkdUp5azdYRzVjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDFjYmlBZ2RIbHdaVzltSUU5aWFtVmpkQzVoYzNOcFoyNGdQVDA5SUNkbWRXNWpkR2x2YmljZ1B5QlBZbXBsWTNRdVlYTnphV2R1SURvZ1gyOWlhbVZqZEVGemMybG5ianRjYmx4dVhHNWNiaTh2THk4dkx5OHZMeTh2THk4dkx5OHZMMXh1THk4Z1YwVkNVRUZEU3lCR1QwOVVSVkpjYmk4dklDNHZmaTl5WVcxa1lTOXpjbU12YVc1MFpYSnVZV3d2WDJGemMybG5iaTVxYzF4dUx5OGdiVzlrZFd4bElHbGtJRDBnTVRVeVhHNHZMeUJ0YjJSMWJHVWdZMmgxYm10eklEMGdNQ0pkTENKdFlYQndhVzVuY3lJNklrRkJRVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdJaXdpYzI5MWNtTmxVbTl2ZENJNklpSjlcIik7XG5cbi8qKiovIH0pLFxuLyogMTUzICovXG4vKiBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyogYWxsIGV4cG9ydHMgdXNlZCAqL1xuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vfi9yYW1kYS9zcmMvaW50ZXJuYWwvX2NvbXBsZW1lbnQuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuZXZhbChcIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gX2NvbXBsZW1lbnQoZikge1xcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xcbiAgICByZXR1cm4gIWYuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcXG4gIH07XFxufTtcXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaU1UVXpMbXB6SWl3aWMyOTFjbU5sY3lJNld5SjNaV0p3WVdOck9pOHZMeTR2Zmk5eVlXMWtZUzl6Y21NdmFXNTBaWEp1WVd3dlgyTnZiWEJzWlcxbGJuUXVhbk0vTkRSaFppSmRMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUp0YjJSMWJHVXVaWGh3YjNKMGN5QTlJR1oxYm1OMGFXOXVJRjlqYjIxd2JHVnRaVzUwS0dZcElIdGNiaUFnY21WMGRYSnVJR1oxYm1OMGFXOXVLQ2tnZTF4dUlDQWdJSEpsZEhWeWJpQWhaaTVoY0hCc2VTaDBhR2x6TENCaGNtZDFiV1Z1ZEhNcE8xeHVJQ0I5TzF4dWZUdGNibHh1WEc1Y2JpOHZMeTh2THk4dkx5OHZMeTh2THk4dkwxeHVMeThnVjBWQ1VFRkRTeUJHVDA5VVJWSmNiaTh2SUM0dmZpOXlZVzFrWVM5emNtTXZhVzUwWlhKdVlXd3ZYMk52YlhCc1pXMWxiblF1YW5OY2JpOHZJRzF2WkhWc1pTQnBaQ0E5SURFMU0xeHVMeThnYlc5a2RXeGxJR05vZFc1cmN5QTlJREFpWFN3aWJXRndjR2x1WjNNaU9pSkJRVUZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN0lpd2ljMjkxY21ObFVtOXZkQ0k2SWlKOVwiKTtcblxuLyoqKi8gfSksXG4vKiAxNTQgKi9cbi8qIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKiBhbGwgZXhwb3J0cyB1c2VkICovXG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL34vcmFtZGEvc3JjL2ludGVybmFsL19jb25jYXQuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5ldmFsKFwiLyoqXFxuICogUHJpdmF0ZSBgY29uY2F0YCBmdW5jdGlvbiB0byBtZXJnZSB0d28gYXJyYXktbGlrZSBvYmplY3RzLlxcbiAqXFxuICogQHByaXZhdGVcXG4gKiBAcGFyYW0ge0FycmF5fEFyZ3VtZW50c30gW3NldDE9W11dIEFuIGFycmF5LWxpa2Ugb2JqZWN0LlxcbiAqIEBwYXJhbSB7QXJyYXl8QXJndW1lbnRzfSBbc2V0Mj1bXV0gQW4gYXJyYXktbGlrZSBvYmplY3QuXFxuICogQHJldHVybiB7QXJyYXl9IEEgbmV3LCBtZXJnZWQgYXJyYXkuXFxuICogQGV4YW1wbGVcXG4gKlxcbiAqICAgICAgX2NvbmNhdChbNCwgNSwgNl0sIFsxLCAyLCAzXSk7IC8vPT4gWzQsIDUsIDYsIDEsIDIsIDNdXFxuICovXFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBfY29uY2F0KHNldDEsIHNldDIpIHtcXG4gIHNldDEgPSBzZXQxIHx8IFtdO1xcbiAgc2V0MiA9IHNldDIgfHwgW107XFxuICB2YXIgaWR4O1xcbiAgdmFyIGxlbjEgPSBzZXQxLmxlbmd0aDtcXG4gIHZhciBsZW4yID0gc2V0Mi5sZW5ndGg7XFxuICB2YXIgcmVzdWx0ID0gW107XFxuXFxuICBpZHggPSAwO1xcbiAgd2hpbGUgKGlkeCA8IGxlbjEpIHtcXG4gICAgcmVzdWx0W3Jlc3VsdC5sZW5ndGhdID0gc2V0MVtpZHhdO1xcbiAgICBpZHggKz0gMTtcXG4gIH1cXG4gIGlkeCA9IDA7XFxuICB3aGlsZSAoaWR4IDwgbGVuMikge1xcbiAgICByZXN1bHRbcmVzdWx0Lmxlbmd0aF0gPSBzZXQyW2lkeF07XFxuICAgIGlkeCArPSAxO1xcbiAgfVxcbiAgcmV0dXJuIHJlc3VsdDtcXG59O1xcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pTVRVMExtcHpJaXdpYzI5MWNtTmxjeUk2V3lKM1pXSndZV05yT2k4dkx5NHZmaTl5WVcxa1lTOXpjbU12YVc1MFpYSnVZV3d2WDJOdmJtTmhkQzVxY3o5aFptSmhJbDBzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSWk4cUtseHVJQ29nVUhKcGRtRjBaU0JnWTI5dVkyRjBZQ0JtZFc1amRHbHZiaUIwYnlCdFpYSm5aU0IwZDI4Z1lYSnlZWGt0YkdsclpTQnZZbXBsWTNSekxseHVJQ3BjYmlBcUlFQndjbWwyWVhSbFhHNGdLaUJBY0dGeVlXMGdlMEZ5Y21GNWZFRnlaM1Z0Wlc1MGMzMGdXM05sZERFOVcxMWRJRUZ1SUdGeWNtRjVMV3hwYTJVZ2IySnFaV04wTGx4dUlDb2dRSEJoY21GdElIdEJjbkpoZVh4QmNtZDFiV1Z1ZEhOOUlGdHpaWFF5UFZ0ZFhTQkJiaUJoY25KaGVTMXNhV3RsSUc5aWFtVmpkQzVjYmlBcUlFQnlaWFIxY200Z2UwRnljbUY1ZlNCQklHNWxkeXdnYldWeVoyVmtJR0Z5Y21GNUxseHVJQ29nUUdWNFlXMXdiR1ZjYmlBcVhHNGdLaUFnSUNBZ0lGOWpiMjVqWVhRb1d6UXNJRFVzSURaZExDQmJNU3dnTWl3Z00xMHBPeUF2THowK0lGczBMQ0ExTENBMkxDQXhMQ0F5TENBelhWeHVJQ292WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUdaMWJtTjBhVzl1SUY5amIyNWpZWFFvYzJWME1Td2djMlYwTWlrZ2UxeHVJQ0J6WlhReElEMGdjMlYwTVNCOGZDQmJYVHRjYmlBZ2MyVjBNaUE5SUhObGRESWdmSHdnVzEwN1hHNGdJSFpoY2lCcFpIZzdYRzRnSUhaaGNpQnNaVzR4SUQwZ2MyVjBNUzVzWlc1bmRHZzdYRzRnSUhaaGNpQnNaVzR5SUQwZ2MyVjBNaTVzWlc1bmRHZzdYRzRnSUhaaGNpQnlaWE4xYkhRZ1BTQmJYVHRjYmx4dUlDQnBaSGdnUFNBd08xeHVJQ0IzYUdsc1pTQW9hV1I0SUR3Z2JHVnVNU2tnZTF4dUlDQWdJSEpsYzNWc2RGdHlaWE4xYkhRdWJHVnVaM1JvWFNBOUlITmxkREZiYVdSNFhUdGNiaUFnSUNCcFpIZ2dLejBnTVR0Y2JpQWdmVnh1SUNCcFpIZ2dQU0F3TzF4dUlDQjNhR2xzWlNBb2FXUjRJRHdnYkdWdU1pa2dlMXh1SUNBZ0lISmxjM1ZzZEZ0eVpYTjFiSFF1YkdWdVozUm9YU0E5SUhObGRESmJhV1I0WFR0Y2JpQWdJQ0JwWkhnZ0t6MGdNVHRjYmlBZ2ZWeHVJQ0J5WlhSMWNtNGdjbVZ6ZFd4ME8xeHVmVHRjYmx4dVhHNWNiaTh2THk4dkx5OHZMeTh2THk4dkx5OHZMMXh1THk4Z1YwVkNVRUZEU3lCR1QwOVVSVkpjYmk4dklDNHZmaTl5WVcxa1lTOXpjbU12YVc1MFpYSnVZV3d2WDJOdmJtTmhkQzVxYzF4dUx5OGdiVzlrZFd4bElHbGtJRDBnTVRVMFhHNHZMeUJ0YjJSMWJHVWdZMmgxYm10eklEMGdNQ0pkTENKdFlYQndhVzVuY3lJNklrRkJRVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdJaXdpYzI5MWNtTmxVbTl2ZENJNklpSjlcIik7XG5cbi8qKiovIH0pLFxuLyogMTU1ICovXG4vKiBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyogYWxsIGV4cG9ydHMgdXNlZCAqL1xuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL34vcmFtZGEvc3JjL2ludGVybmFsL19jb250YWlucy5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuZXZhbChcInZhciBfaW5kZXhPZiA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vX2luZGV4T2YgKi8gMTYxKTtcXG5cXG5cXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIF9jb250YWlucyhhLCBsaXN0KSB7XFxuICByZXR1cm4gX2luZGV4T2YobGlzdCwgYSwgMCkgPj0gMDtcXG59O1xcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pTVRVMUxtcHpJaXdpYzI5MWNtTmxjeUk2V3lKM1pXSndZV05yT2k4dkx5NHZmaTl5WVcxa1lTOXpjbU12YVc1MFpYSnVZV3d2WDJOdmJuUmhhVzV6TG1welB6WTBaVElpWFN3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaWRtRnlJRjlwYm1SbGVFOW1JRDBnY21WeGRXbHlaU2duTGk5ZmFXNWtaWGhQWmljcE8xeHVYRzVjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnWm5WdVkzUnBiMjRnWDJOdmJuUmhhVzV6S0dFc0lHeHBjM1FwSUh0Y2JpQWdjbVYwZFhKdUlGOXBibVJsZUU5bUtHeHBjM1FzSUdFc0lEQXBJRDQ5SURBN1hHNTlPMXh1WEc1Y2JseHVMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZYRzR2THlCWFJVSlFRVU5MSUVaUFQxUkZVbHh1THk4Z0xpOStMM0poYldSaEwzTnlZeTlwYm5SbGNtNWhiQzlmWTI5dWRHRnBibk11YW5OY2JpOHZJRzF2WkhWc1pTQnBaQ0E5SURFMU5WeHVMeThnYlc5a2RXeGxJR05vZFc1cmN5QTlJREFpWFN3aWJXRndjR2x1WjNNaU9pSkJRVUZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHNpTENKemIzVnlZMlZTYjI5MElqb2lJbjA9XCIpO1xuXG4vKioqLyB9KSxcbi8qIDE1NiAqL1xuLyogbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9cbi8qIGFsbCBleHBvcnRzIHVzZWQgKi9cbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vfi9yYW1kYS9zcmMvaW50ZXJuYWwvX2N1cnJ5Ti5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbmV2YWwoXCJ2YXIgX2FyaXR5ID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9fYXJpdHkgKi8gMTQpO1xcbnZhciBfaXNQbGFjZWhvbGRlciA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vX2lzUGxhY2Vob2xkZXIgKi8gMjUpO1xcblxcblxcbi8qKlxcbiAqIEludGVybmFsIGN1cnJ5TiBmdW5jdGlvbi5cXG4gKlxcbiAqIEBwcml2YXRlXFxuICogQGNhdGVnb3J5IEZ1bmN0aW9uXFxuICogQHBhcmFtIHtOdW1iZXJ9IGxlbmd0aCBUaGUgYXJpdHkgb2YgdGhlIGN1cnJpZWQgZnVuY3Rpb24uXFxuICogQHBhcmFtIHtBcnJheX0gcmVjZWl2ZWQgQW4gYXJyYXkgb2YgYXJndW1lbnRzIHJlY2VpdmVkIHRodXMgZmFyLlxcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBmdW5jdGlvbiB0byBjdXJyeS5cXG4gKiBAcmV0dXJuIHtGdW5jdGlvbn0gVGhlIGN1cnJpZWQgZnVuY3Rpb24uXFxuICovXFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBfY3VycnlOKGxlbmd0aCwgcmVjZWl2ZWQsIGZuKSB7XFxuICByZXR1cm4gZnVuY3Rpb24oKSB7XFxuICAgIHZhciBjb21iaW5lZCA9IFtdO1xcbiAgICB2YXIgYXJnc0lkeCA9IDA7XFxuICAgIHZhciBsZWZ0ID0gbGVuZ3RoO1xcbiAgICB2YXIgY29tYmluZWRJZHggPSAwO1xcbiAgICB3aGlsZSAoY29tYmluZWRJZHggPCByZWNlaXZlZC5sZW5ndGggfHwgYXJnc0lkeCA8IGFyZ3VtZW50cy5sZW5ndGgpIHtcXG4gICAgICB2YXIgcmVzdWx0O1xcbiAgICAgIGlmIChjb21iaW5lZElkeCA8IHJlY2VpdmVkLmxlbmd0aCAmJlxcbiAgICAgICAgICAoIV9pc1BsYWNlaG9sZGVyKHJlY2VpdmVkW2NvbWJpbmVkSWR4XSkgfHxcXG4gICAgICAgICAgIGFyZ3NJZHggPj0gYXJndW1lbnRzLmxlbmd0aCkpIHtcXG4gICAgICAgIHJlc3VsdCA9IHJlY2VpdmVkW2NvbWJpbmVkSWR4XTtcXG4gICAgICB9IGVsc2Uge1xcbiAgICAgICAgcmVzdWx0ID0gYXJndW1lbnRzW2FyZ3NJZHhdO1xcbiAgICAgICAgYXJnc0lkeCArPSAxO1xcbiAgICAgIH1cXG4gICAgICBjb21iaW5lZFtjb21iaW5lZElkeF0gPSByZXN1bHQ7XFxuICAgICAgaWYgKCFfaXNQbGFjZWhvbGRlcihyZXN1bHQpKSB7XFxuICAgICAgICBsZWZ0IC09IDE7XFxuICAgICAgfVxcbiAgICAgIGNvbWJpbmVkSWR4ICs9IDE7XFxuICAgIH1cXG4gICAgcmV0dXJuIGxlZnQgPD0gMCA/IGZuLmFwcGx5KHRoaXMsIGNvbWJpbmVkKVxcbiAgICAgICAgICAgICAgICAgICAgIDogX2FyaXR5KGxlZnQsIF9jdXJyeU4obGVuZ3RoLCBjb21iaW5lZCwgZm4pKTtcXG4gIH07XFxufTtcXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaU1UVTJMbXB6SWl3aWMyOTFjbU5sY3lJNld5SjNaV0p3WVdOck9pOHZMeTR2Zmk5eVlXMWtZUzl6Y21NdmFXNTBaWEp1WVd3dlgyTjFjbko1VGk1cWN6OHdOVGd3SWwwc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYkluWmhjaUJmWVhKcGRIa2dQU0J5WlhGMWFYSmxLQ2N1TDE5aGNtbDBlU2NwTzF4dWRtRnlJRjlwYzFCc1lXTmxhRzlzWkdWeUlEMGdjbVZ4ZFdseVpTZ25MaTlmYVhOUWJHRmpaV2h2YkdSbGNpY3BPMXh1WEc1Y2JpOHFLbHh1SUNvZ1NXNTBaWEp1WVd3Z1kzVnljbmxPSUdaMWJtTjBhVzl1TGx4dUlDcGNiaUFxSUVCd2NtbDJZWFJsWEc0Z0tpQkFZMkYwWldkdmNua2dSblZ1WTNScGIyNWNiaUFxSUVCd1lYSmhiU0I3VG5WdFltVnlmU0JzWlc1bmRHZ2dWR2hsSUdGeWFYUjVJRzltSUhSb1pTQmpkWEp5YVdWa0lHWjFibU4wYVc5dUxseHVJQ29nUUhCaGNtRnRJSHRCY25KaGVYMGdjbVZqWldsMlpXUWdRVzRnWVhKeVlYa2diMllnWVhKbmRXMWxiblJ6SUhKbFkyVnBkbVZrSUhSb2RYTWdabUZ5TGx4dUlDb2dRSEJoY21GdElIdEdkVzVqZEdsdmJuMGdabTRnVkdobElHWjFibU4wYVc5dUlIUnZJR04xY25KNUxseHVJQ29nUUhKbGRIVnliaUI3Um5WdVkzUnBiMjU5SUZSb1pTQmpkWEp5YVdWa0lHWjFibU4wYVc5dUxseHVJQ292WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUdaMWJtTjBhVzl1SUY5amRYSnllVTRvYkdWdVozUm9MQ0J5WldObGFYWmxaQ3dnWm00cElIdGNiaUFnY21WMGRYSnVJR1oxYm1OMGFXOXVLQ2tnZTF4dUlDQWdJSFpoY2lCamIyMWlhVzVsWkNBOUlGdGRPMXh1SUNBZ0lIWmhjaUJoY21kelNXUjRJRDBnTUR0Y2JpQWdJQ0IyWVhJZ2JHVm1kQ0E5SUd4bGJtZDBhRHRjYmlBZ0lDQjJZWElnWTI5dFltbHVaV1JKWkhnZ1BTQXdPMXh1SUNBZ0lIZG9hV3hsSUNoamIyMWlhVzVsWkVsa2VDQThJSEpsWTJWcGRtVmtMbXhsYm1kMGFDQjhmQ0JoY21kelNXUjRJRHdnWVhKbmRXMWxiblJ6TG14bGJtZDBhQ2tnZTF4dUlDQWdJQ0FnZG1GeUlISmxjM1ZzZER0Y2JpQWdJQ0FnSUdsbUlDaGpiMjFpYVc1bFpFbGtlQ0E4SUhKbFkyVnBkbVZrTG14bGJtZDBhQ0FtSmx4dUlDQWdJQ0FnSUNBZ0lDZ2hYMmx6VUd4aFkyVm9iMnhrWlhJb2NtVmpaV2wyWldSYlkyOXRZbWx1WldSSlpIaGRLU0I4ZkZ4dUlDQWdJQ0FnSUNBZ0lDQmhjbWR6U1dSNElENDlJR0Z5WjNWdFpXNTBjeTVzWlc1bmRHZ3BLU0I3WEc0Z0lDQWdJQ0FnSUhKbGMzVnNkQ0E5SUhKbFkyVnBkbVZrVzJOdmJXSnBibVZrU1dSNFhUdGNiaUFnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lISmxjM1ZzZENBOUlHRnlaM1Z0Wlc1MGMxdGhjbWR6U1dSNFhUdGNiaUFnSUNBZ0lDQWdZWEpuYzBsa2VDQXJQU0F4TzF4dUlDQWdJQ0FnZlZ4dUlDQWdJQ0FnWTI5dFltbHVaV1JiWTI5dFltbHVaV1JKWkhoZElEMGdjbVZ6ZFd4ME8xeHVJQ0FnSUNBZ2FXWWdLQ0ZmYVhOUWJHRmpaV2h2YkdSbGNpaHlaWE4xYkhRcEtTQjdYRzRnSUNBZ0lDQWdJR3hsWm5RZ0xUMGdNVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQWdJR052YldKcGJtVmtTV1I0SUNzOUlERTdYRzRnSUNBZ2ZWeHVJQ0FnSUhKbGRIVnliaUJzWldaMElEdzlJREFnUHlCbWJpNWhjSEJzZVNoMGFHbHpMQ0JqYjIxaWFXNWxaQ2xjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEb2dYMkZ5YVhSNUtHeGxablFzSUY5amRYSnllVTRvYkdWdVozUm9MQ0JqYjIxaWFXNWxaQ3dnWm00cEtUdGNiaUFnZlR0Y2JuMDdYRzVjYmx4dVhHNHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OWNiaTh2SUZkRlFsQkJRMHNnUms5UFZFVlNYRzR2THlBdUwzNHZjbUZ0WkdFdmMzSmpMMmx1ZEdWeWJtRnNMMTlqZFhKeWVVNHVhbk5jYmk4dklHMXZaSFZzWlNCcFpDQTlJREUxTmx4dUx5OGdiVzlrZFd4bElHTm9kVzVyY3lBOUlEQWlYU3dpYldGd2NHbHVaM01pT2lKQlFVRkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk95SXNJbk52ZFhKalpWSnZiM1FpT2lJaWZRPT1cIik7XG5cbi8qKiovIH0pLFxuLyogMTU3ICovXG4vKiBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyogYWxsIGV4cG9ydHMgdXNlZCAqL1xuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9+L3JhbWRhL3NyYy9pbnRlcm5hbC9fZXF1YWxzLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuZXZhbChcInZhciBfYXJyYXlGcm9tSXRlcmF0b3IgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL19hcnJheUZyb21JdGVyYXRvciAqLyAxNTEpO1xcbnZhciBfZnVuY3Rpb25OYW1lID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9fZnVuY3Rpb25OYW1lICovIDE1OSk7XFxudmFyIF9oYXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL19oYXMgKi8gMTUpO1xcbnZhciBpZGVudGljYWwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pZGVudGljYWwgKi8gMTQ4KTtcXG52YXIga2V5cyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2tleXMgKi8gMTcpO1xcbnZhciB0eXBlID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vdHlwZSAqLyAxOTIpO1xcblxcblxcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gX2VxdWFscyhhLCBiLCBzdGFja0EsIHN0YWNrQikge1xcbiAgaWYgKGlkZW50aWNhbChhLCBiKSkge1xcbiAgICByZXR1cm4gdHJ1ZTtcXG4gIH1cXG5cXG4gIGlmICh0eXBlKGEpICE9PSB0eXBlKGIpKSB7XFxuICAgIHJldHVybiBmYWxzZTtcXG4gIH1cXG5cXG4gIGlmIChhID09IG51bGwgfHwgYiA9PSBudWxsKSB7XFxuICAgIHJldHVybiBmYWxzZTtcXG4gIH1cXG5cXG4gIGlmICh0eXBlb2YgYS5lcXVhbHMgPT09ICdmdW5jdGlvbicgfHwgdHlwZW9mIGIuZXF1YWxzID09PSAnZnVuY3Rpb24nKSB7XFxuICAgIHJldHVybiB0eXBlb2YgYS5lcXVhbHMgPT09ICdmdW5jdGlvbicgJiYgYS5lcXVhbHMoYikgJiZcXG4gICAgICAgICAgIHR5cGVvZiBiLmVxdWFscyA9PT0gJ2Z1bmN0aW9uJyAmJiBiLmVxdWFscyhhKTtcXG4gIH1cXG5cXG4gIHN3aXRjaCAodHlwZShhKSkge1xcbiAgICBjYXNlICdBcmd1bWVudHMnOlxcbiAgICBjYXNlICdBcnJheSc6XFxuICAgIGNhc2UgJ09iamVjdCc6XFxuICAgICAgaWYgKHR5cGVvZiBhLmNvbnN0cnVjdG9yID09PSAnZnVuY3Rpb24nICYmXFxuICAgICAgICAgIF9mdW5jdGlvbk5hbWUoYS5jb25zdHJ1Y3RvcikgPT09ICdQcm9taXNlJykge1xcbiAgICAgICAgcmV0dXJuIGEgPT09IGI7XFxuICAgICAgfVxcbiAgICAgIGJyZWFrO1xcbiAgICBjYXNlICdCb29sZWFuJzpcXG4gICAgY2FzZSAnTnVtYmVyJzpcXG4gICAgY2FzZSAnU3RyaW5nJzpcXG4gICAgICBpZiAoISh0eXBlb2YgYSA9PT0gdHlwZW9mIGIgJiYgaWRlbnRpY2FsKGEudmFsdWVPZigpLCBiLnZhbHVlT2YoKSkpKSB7XFxuICAgICAgICByZXR1cm4gZmFsc2U7XFxuICAgICAgfVxcbiAgICAgIGJyZWFrO1xcbiAgICBjYXNlICdEYXRlJzpcXG4gICAgICBpZiAoIWlkZW50aWNhbChhLnZhbHVlT2YoKSwgYi52YWx1ZU9mKCkpKSB7XFxuICAgICAgICByZXR1cm4gZmFsc2U7XFxuICAgICAgfVxcbiAgICAgIGJyZWFrO1xcbiAgICBjYXNlICdFcnJvcic6XFxuICAgICAgcmV0dXJuIGEubmFtZSA9PT0gYi5uYW1lICYmIGEubWVzc2FnZSA9PT0gYi5tZXNzYWdlO1xcbiAgICBjYXNlICdSZWdFeHAnOlxcbiAgICAgIGlmICghKGEuc291cmNlID09PSBiLnNvdXJjZSAmJlxcbiAgICAgICAgICAgIGEuZ2xvYmFsID09PSBiLmdsb2JhbCAmJlxcbiAgICAgICAgICAgIGEuaWdub3JlQ2FzZSA9PT0gYi5pZ25vcmVDYXNlICYmXFxuICAgICAgICAgICAgYS5tdWx0aWxpbmUgPT09IGIubXVsdGlsaW5lICYmXFxuICAgICAgICAgICAgYS5zdGlja3kgPT09IGIuc3RpY2t5ICYmXFxuICAgICAgICAgICAgYS51bmljb2RlID09PSBiLnVuaWNvZGUpKSB7XFxuICAgICAgICByZXR1cm4gZmFsc2U7XFxuICAgICAgfVxcbiAgICAgIGJyZWFrO1xcbiAgICBjYXNlICdNYXAnOlxcbiAgICBjYXNlICdTZXQnOlxcbiAgICAgIGlmICghX2VxdWFscyhfYXJyYXlGcm9tSXRlcmF0b3IoYS5lbnRyaWVzKCkpLCBfYXJyYXlGcm9tSXRlcmF0b3IoYi5lbnRyaWVzKCkpLCBzdGFja0EsIHN0YWNrQikpIHtcXG4gICAgICAgIHJldHVybiBmYWxzZTtcXG4gICAgICB9XFxuICAgICAgYnJlYWs7XFxuICAgIGNhc2UgJ0ludDhBcnJheSc6XFxuICAgIGNhc2UgJ1VpbnQ4QXJyYXknOlxcbiAgICBjYXNlICdVaW50OENsYW1wZWRBcnJheSc6XFxuICAgIGNhc2UgJ0ludDE2QXJyYXknOlxcbiAgICBjYXNlICdVaW50MTZBcnJheSc6XFxuICAgIGNhc2UgJ0ludDMyQXJyYXknOlxcbiAgICBjYXNlICdVaW50MzJBcnJheSc6XFxuICAgIGNhc2UgJ0Zsb2F0MzJBcnJheSc6XFxuICAgIGNhc2UgJ0Zsb2F0NjRBcnJheSc6XFxuICAgICAgYnJlYWs7XFxuICAgIGNhc2UgJ0FycmF5QnVmZmVyJzpcXG4gICAgICBicmVhaztcXG4gICAgZGVmYXVsdDpcXG4gICAgICAvLyBWYWx1ZXMgb2Ygb3RoZXIgdHlwZXMgYXJlIG9ubHkgZXF1YWwgaWYgaWRlbnRpY2FsLlxcbiAgICAgIHJldHVybiBmYWxzZTtcXG4gIH1cXG5cXG4gIHZhciBrZXlzQSA9IGtleXMoYSk7XFxuICBpZiAoa2V5c0EubGVuZ3RoICE9PSBrZXlzKGIpLmxlbmd0aCkge1xcbiAgICByZXR1cm4gZmFsc2U7XFxuICB9XFxuXFxuICB2YXIgaWR4ID0gc3RhY2tBLmxlbmd0aCAtIDE7XFxuICB3aGlsZSAoaWR4ID49IDApIHtcXG4gICAgaWYgKHN0YWNrQVtpZHhdID09PSBhKSB7XFxuICAgICAgcmV0dXJuIHN0YWNrQltpZHhdID09PSBiO1xcbiAgICB9XFxuICAgIGlkeCAtPSAxO1xcbiAgfVxcblxcbiAgc3RhY2tBLnB1c2goYSk7XFxuICBzdGFja0IucHVzaChiKTtcXG4gIGlkeCA9IGtleXNBLmxlbmd0aCAtIDE7XFxuICB3aGlsZSAoaWR4ID49IDApIHtcXG4gICAgdmFyIGtleSA9IGtleXNBW2lkeF07XFxuICAgIGlmICghKF9oYXMoa2V5LCBiKSAmJiBfZXF1YWxzKGJba2V5XSwgYVtrZXldLCBzdGFja0EsIHN0YWNrQikpKSB7XFxuICAgICAgcmV0dXJuIGZhbHNlO1xcbiAgICB9XFxuICAgIGlkeCAtPSAxO1xcbiAgfVxcbiAgc3RhY2tBLnBvcCgpO1xcbiAgc3RhY2tCLnBvcCgpO1xcbiAgcmV0dXJuIHRydWU7XFxufTtcXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaU1UVTNMbXB6SWl3aWMyOTFjbU5sY3lJNld5SjNaV0p3WVdOck9pOHZMeTR2Zmk5eVlXMWtZUzl6Y21NdmFXNTBaWEp1WVd3dlgyVnhkV0ZzY3k1cWN6OW1ZMlpoSWwwc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYkluWmhjaUJmWVhKeVlYbEdjbTl0U1hSbGNtRjBiM0lnUFNCeVpYRjFhWEpsS0NjdUwxOWhjbkpoZVVaeWIyMUpkR1Z5WVhSdmNpY3BPMXh1ZG1GeUlGOW1kVzVqZEdsdmJrNWhiV1VnUFNCeVpYRjFhWEpsS0NjdUwxOW1kVzVqZEdsdmJrNWhiV1VuS1R0Y2JuWmhjaUJmYUdGeklEMGdjbVZ4ZFdseVpTZ25MaTlmYUdGekp5azdYRzUyWVhJZ2FXUmxiblJwWTJGc0lEMGdjbVZ4ZFdseVpTZ25MaTR2YVdSbGJuUnBZMkZzSnlrN1hHNTJZWElnYTJWNWN5QTlJSEpsY1hWcGNtVW9KeTR1TDJ0bGVYTW5LVHRjYm5aaGNpQjBlWEJsSUQwZ2NtVnhkV2x5WlNnbkxpNHZkSGx3WlNjcE8xeHVYRzVjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnWm5WdVkzUnBiMjRnWDJWeGRXRnNjeWhoTENCaUxDQnpkR0ZqYTBFc0lITjBZV05yUWlrZ2UxeHVJQ0JwWmlBb2FXUmxiblJwWTJGc0tHRXNJR0lwS1NCN1hHNGdJQ0FnY21WMGRYSnVJSFJ5ZFdVN1hHNGdJSDFjYmx4dUlDQnBaaUFvZEhsd1pTaGhLU0FoUFQwZ2RIbHdaU2hpS1NrZ2UxeHVJQ0FnSUhKbGRIVnliaUJtWVd4elpUdGNiaUFnZlZ4dVhHNGdJR2xtSUNoaElEMDlJRzUxYkd3Z2ZId2dZaUE5UFNCdWRXeHNLU0I3WEc0Z0lDQWdjbVYwZFhKdUlHWmhiSE5sTzF4dUlDQjlYRzVjYmlBZ2FXWWdLSFI1Y0dWdlppQmhMbVZ4ZFdGc2N5QTlQVDBnSjJaMWJtTjBhVzl1SnlCOGZDQjBlWEJsYjJZZ1lpNWxjWFZoYkhNZ1BUMDlJQ2RtZFc1amRHbHZiaWNwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdkSGx3Wlc5bUlHRXVaWEYxWVd4eklEMDlQU0FuWm5WdVkzUnBiMjRuSUNZbUlHRXVaWEYxWVd4ektHSXBJQ1ltWEc0Z0lDQWdJQ0FnSUNBZ0lIUjVjR1Z2WmlCaUxtVnhkV0ZzY3lBOVBUMGdKMloxYm1OMGFXOXVKeUFtSmlCaUxtVnhkV0ZzY3loaEtUdGNiaUFnZlZ4dVhHNGdJSE4zYVhSamFDQW9kSGx3WlNoaEtTa2dlMXh1SUNBZ0lHTmhjMlVnSjBGeVozVnRaVzUwY3ljNlhHNGdJQ0FnWTJGelpTQW5RWEp5WVhrbk9seHVJQ0FnSUdOaGMyVWdKMDlpYW1WamRDYzZYRzRnSUNBZ0lDQnBaaUFvZEhsd1pXOW1JR0V1WTI5dWMzUnlkV04wYjNJZ1BUMDlJQ2RtZFc1amRHbHZiaWNnSmlaY2JpQWdJQ0FnSUNBZ0lDQmZablZ1WTNScGIyNU9ZVzFsS0dFdVkyOXVjM1J5ZFdOMGIzSXBJRDA5UFNBblVISnZiV2x6WlNjcElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHRWdQVDA5SUdJN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnSUNCaWNtVmhhenRjYmlBZ0lDQmpZWE5sSUNkQ2IyOXNaV0Z1SnpwY2JpQWdJQ0JqWVhObElDZE9kVzFpWlhJbk9seHVJQ0FnSUdOaGMyVWdKMU4wY21sdVp5YzZYRzRnSUNBZ0lDQnBaaUFvSVNoMGVYQmxiMllnWVNBOVBUMGdkSGx3Wlc5bUlHSWdKaVlnYVdSbGJuUnBZMkZzS0dFdWRtRnNkV1ZQWmlncExDQmlMblpoYkhWbFQyWW9LU2twS1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCbVlXeHpaVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQWdJR0p5WldGck8xeHVJQ0FnSUdOaGMyVWdKMFJoZEdVbk9seHVJQ0FnSUNBZ2FXWWdLQ0ZwWkdWdWRHbGpZV3dvWVM1MllXeDFaVTltS0Nrc0lHSXVkbUZzZFdWUFppZ3BLU2tnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnWm1Gc2MyVTdYRzRnSUNBZ0lDQjlYRzRnSUNBZ0lDQmljbVZoYXp0Y2JpQWdJQ0JqWVhObElDZEZjbkp2Y2ljNlhHNGdJQ0FnSUNCeVpYUjFjbTRnWVM1dVlXMWxJRDA5UFNCaUxtNWhiV1VnSmlZZ1lTNXRaWE56WVdkbElEMDlQU0JpTG0xbGMzTmhaMlU3WEc0Z0lDQWdZMkZ6WlNBblVtVm5SWGh3SnpwY2JpQWdJQ0FnSUdsbUlDZ2hLR0V1YzI5MWNtTmxJRDA5UFNCaUxuTnZkWEpqWlNBbUpseHVJQ0FnSUNBZ0lDQWdJQ0FnWVM1bmJHOWlZV3dnUFQwOUlHSXVaMnh2WW1Gc0lDWW1YRzRnSUNBZ0lDQWdJQ0FnSUNCaExtbG5ibTl5WlVOaGMyVWdQVDA5SUdJdWFXZHViM0psUTJGelpTQW1KbHh1SUNBZ0lDQWdJQ0FnSUNBZ1lTNXRkV3gwYVd4cGJtVWdQVDA5SUdJdWJYVnNkR2xzYVc1bElDWW1YRzRnSUNBZ0lDQWdJQ0FnSUNCaExuTjBhV05yZVNBOVBUMGdZaTV6ZEdsamEza2dKaVpjYmlBZ0lDQWdJQ0FnSUNBZ0lHRXVkVzVwWTI5a1pTQTlQVDBnWWk1MWJtbGpiMlJsS1NrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1ptRnNjMlU3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdJQ0JpY21WaGF6dGNiaUFnSUNCallYTmxJQ2ROWVhBbk9seHVJQ0FnSUdOaGMyVWdKMU5sZENjNlhHNGdJQ0FnSUNCcFppQW9JVjlsY1hWaGJITW9YMkZ5Y21GNVJuSnZiVWwwWlhKaGRHOXlLR0V1Wlc1MGNtbGxjeWdwS1N3Z1gyRnljbUY1Um5KdmJVbDBaWEpoZEc5eUtHSXVaVzUwY21sbGN5Z3BLU3dnYzNSaFkydEJMQ0J6ZEdGamEwSXBLU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJtWVd4elpUdGNiaUFnSUNBZ0lIMWNiaUFnSUNBZ0lHSnlaV0ZyTzF4dUlDQWdJR05oYzJVZ0owbHVkRGhCY25KaGVTYzZYRzRnSUNBZ1kyRnpaU0FuVldsdWREaEJjbkpoZVNjNlhHNGdJQ0FnWTJGelpTQW5WV2x1ZERoRGJHRnRjR1ZrUVhKeVlYa25PbHh1SUNBZ0lHTmhjMlVnSjBsdWRERTJRWEp5WVhrbk9seHVJQ0FnSUdOaGMyVWdKMVZwYm5ReE5rRnljbUY1SnpwY2JpQWdJQ0JqWVhObElDZEpiblF6TWtGeWNtRjVKenBjYmlBZ0lDQmpZWE5sSUNkVmFXNTBNekpCY25KaGVTYzZYRzRnSUNBZ1kyRnpaU0FuUm14dllYUXpNa0Z5Y21GNUp6cGNiaUFnSUNCallYTmxJQ2RHYkc5aGREWTBRWEp5WVhrbk9seHVJQ0FnSUNBZ1luSmxZV3M3WEc0Z0lDQWdZMkZ6WlNBblFYSnlZWGxDZFdabVpYSW5PbHh1SUNBZ0lDQWdZbkpsWVdzN1hHNGdJQ0FnWkdWbVlYVnNkRHBjYmlBZ0lDQWdJQzh2SUZaaGJIVmxjeUJ2WmlCdmRHaGxjaUIwZVhCbGN5QmhjbVVnYjI1c2VTQmxjWFZoYkNCcFppQnBaR1Z1ZEdsallXd3VYRzRnSUNBZ0lDQnlaWFIxY200Z1ptRnNjMlU3WEc0Z0lIMWNibHh1SUNCMllYSWdhMlY1YzBFZ1BTQnJaWGx6S0dFcE8xeHVJQ0JwWmlBb2EyVjVjMEV1YkdWdVozUm9JQ0U5UFNCclpYbHpLR0lwTG14bGJtZDBhQ2tnZTF4dUlDQWdJSEpsZEhWeWJpQm1ZV3h6WlR0Y2JpQWdmVnh1WEc0Z0lIWmhjaUJwWkhnZ1BTQnpkR0ZqYTBFdWJHVnVaM1JvSUMwZ01UdGNiaUFnZDJocGJHVWdLR2xrZUNBK1BTQXdLU0I3WEc0Z0lDQWdhV1lnS0hOMFlXTnJRVnRwWkhoZElEMDlQU0JoS1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnYzNSaFkydENXMmxrZUYwZ1BUMDlJR0k3WEc0Z0lDQWdmVnh1SUNBZ0lHbGtlQ0F0UFNBeE8xeHVJQ0I5WEc1Y2JpQWdjM1JoWTJ0QkxuQjFjMmdvWVNrN1hHNGdJSE4wWVdOclFpNXdkWE5vS0dJcE8xeHVJQ0JwWkhnZ1BTQnJaWGx6UVM1c1pXNW5kR2dnTFNBeE8xeHVJQ0IzYUdsc1pTQW9hV1I0SUQ0OUlEQXBJSHRjYmlBZ0lDQjJZWElnYTJWNUlEMGdhMlY1YzBGYmFXUjRYVHRjYmlBZ0lDQnBaaUFvSVNoZmFHRnpLR3RsZVN3Z1lpa2dKaVlnWDJWeGRXRnNjeWhpVzJ0bGVWMHNJR0ZiYTJWNVhTd2djM1JoWTJ0QkxDQnpkR0ZqYTBJcEtTa2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlHWmhiSE5sTzF4dUlDQWdJSDFjYmlBZ0lDQnBaSGdnTFQwZ01UdGNiaUFnZlZ4dUlDQnpkR0ZqYTBFdWNHOXdLQ2s3WEc0Z0lITjBZV05yUWk1d2IzQW9LVHRjYmlBZ2NtVjBkWEp1SUhSeWRXVTdYRzU5TzF4dVhHNWNibHh1THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2WEc0dkx5QlhSVUpRUVVOTElFWlBUMVJGVWx4dUx5OGdMaTkrTDNKaGJXUmhMM055WXk5cGJuUmxjbTVoYkM5ZlpYRjFZV3h6TG1welhHNHZMeUJ0YjJSMWJHVWdhV1FnUFNBeE5UZGNiaTh2SUcxdlpIVnNaU0JqYUhWdWEzTWdQU0F3SWwwc0ltMWhjSEJwYm1keklqb2lRVUZCUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzaUxDSnpiM1Z5WTJWU2IyOTBJam9pSW4wPVwiKTtcblxuLyoqKi8gfSksXG4vKiAxNTggKi9cbi8qIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKiBhbGwgZXhwb3J0cyB1c2VkICovXG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL34vcmFtZGEvc3JjL2ludGVybmFsL19maWx0ZXIuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5ldmFsKFwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBfZmlsdGVyKGZuLCBsaXN0KSB7XFxuICB2YXIgaWR4ID0gMDtcXG4gIHZhciBsZW4gPSBsaXN0Lmxlbmd0aDtcXG4gIHZhciByZXN1bHQgPSBbXTtcXG5cXG4gIHdoaWxlIChpZHggPCBsZW4pIHtcXG4gICAgaWYgKGZuKGxpc3RbaWR4XSkpIHtcXG4gICAgICByZXN1bHRbcmVzdWx0Lmxlbmd0aF0gPSBsaXN0W2lkeF07XFxuICAgIH1cXG4gICAgaWR4ICs9IDE7XFxuICB9XFxuICByZXR1cm4gcmVzdWx0O1xcbn07XFxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lNVFU0TG1weklpd2ljMjkxY21ObGN5STZXeUozWldKd1lXTnJPaTh2THk0dmZpOXlZVzFrWVM5emNtTXZhVzUwWlhKdVlXd3ZYMlpwYkhSbGNpNXFjejh4TkdObUlsMHNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJbTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdablZ1WTNScGIyNGdYMlpwYkhSbGNpaG1iaXdnYkdsemRDa2dlMXh1SUNCMllYSWdhV1I0SUQwZ01EdGNiaUFnZG1GeUlHeGxiaUE5SUd4cGMzUXViR1Z1WjNSb08xeHVJQ0IyWVhJZ2NtVnpkV3gwSUQwZ1cxMDdYRzVjYmlBZ2QyaHBiR1VnS0dsa2VDQThJR3hsYmlrZ2UxeHVJQ0FnSUdsbUlDaG1iaWhzYVhOMFcybGtlRjBwS1NCN1hHNGdJQ0FnSUNCeVpYTjFiSFJiY21WemRXeDBMbXhsYm1kMGFGMGdQU0JzYVhOMFcybGtlRjA3WEc0Z0lDQWdmVnh1SUNBZ0lHbGtlQ0FyUFNBeE8xeHVJQ0I5WEc0Z0lISmxkSFZ5YmlCeVpYTjFiSFE3WEc1OU8xeHVYRzVjYmx4dUx5OHZMeTh2THk4dkx5OHZMeTh2THk4dlhHNHZMeUJYUlVKUVFVTkxJRVpQVDFSRlVseHVMeThnTGk5K0wzSmhiV1JoTDNOeVl5OXBiblJsY201aGJDOWZabWxzZEdWeUxtcHpYRzR2THlCdGIyUjFiR1VnYVdRZ1BTQXhOVGhjYmk4dklHMXZaSFZzWlNCamFIVnVhM01nUFNBd0lsMHNJbTFoY0hCcGJtZHpJam9pUVVGQlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzaUxDSnpiM1Z5WTJWU2IyOTBJam9pSW4wPVwiKTtcblxuLyoqKi8gfSksXG4vKiAxNTkgKi9cbi8qIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKiBhbGwgZXhwb3J0cyB1c2VkICovXG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL34vcmFtZGEvc3JjL2ludGVybmFsL19mdW5jdGlvbk5hbWUuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5ldmFsKFwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBfZnVuY3Rpb25OYW1lKGYpIHtcXG4gIC8vIFN0cmluZyh4ID0+IHgpIGV2YWx1YXRlcyB0byBcXFwieCA9PiB4XFxcIiwgc28gdGhlIHBhdHRlcm4gbWF5IG5vdCBtYXRjaC5cXG4gIHZhciBtYXRjaCA9IFN0cmluZyhmKS5tYXRjaCgvXmZ1bmN0aW9uIChcXFxcdyopLyk7XFxuICByZXR1cm4gbWF0Y2ggPT0gbnVsbCA/ICcnIDogbWF0Y2hbMV07XFxufTtcXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaU1UVTVMbXB6SWl3aWMyOTFjbU5sY3lJNld5SjNaV0p3WVdOck9pOHZMeTR2Zmk5eVlXMWtZUzl6Y21NdmFXNTBaWEp1WVd3dlgyWjFibU4wYVc5dVRtRnRaUzVxY3o4MllqRmtJbDBzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSW0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnWm5WdVkzUnBiMjRnWDJaMWJtTjBhVzl1VG1GdFpTaG1LU0I3WEc0Z0lDOHZJRk4wY21sdVp5aDRJRDArSUhncElHVjJZV3gxWVhSbGN5QjBieUJjSW5nZ1BUNGdlRndpTENCemJ5QjBhR1VnY0dGMGRHVnliaUJ0WVhrZ2JtOTBJRzFoZEdOb0xseHVJQ0IyWVhJZ2JXRjBZMmdnUFNCVGRISnBibWNvWmlrdWJXRjBZMmdvTDE1bWRXNWpkR2x2YmlBb1hGeDNLaWt2S1R0Y2JpQWdjbVYwZFhKdUlHMWhkR05vSUQwOUlHNTFiR3dnUHlBbkp5QTZJRzFoZEdOb1d6RmRPMXh1ZlR0Y2JseHVYRzVjYmk4dkx5OHZMeTh2THk4dkx5OHZMeTh2TDF4dUx5OGdWMFZDVUVGRFN5QkdUMDlVUlZKY2JpOHZJQzR2Zmk5eVlXMWtZUzl6Y21NdmFXNTBaWEp1WVd3dlgyWjFibU4wYVc5dVRtRnRaUzVxYzF4dUx5OGdiVzlrZFd4bElHbGtJRDBnTVRVNVhHNHZMeUJ0YjJSMWJHVWdZMmgxYm10eklEMGdNQ0pkTENKdFlYQndhVzVuY3lJNklrRkJRVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzaUxDSnpiM1Z5WTJWU2IyOTBJam9pSW4wPVwiKTtcblxuLyoqKi8gfSksXG4vKiAxNjAgKi9cbi8qIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKiBhbGwgZXhwb3J0cyB1c2VkICovXG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vfi9yYW1kYS9zcmMvaW50ZXJuYWwvX2lkZW50aXR5LmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5ldmFsKFwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBfaWRlbnRpdHkoeCkgeyByZXR1cm4geDsgfTtcXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaU1UWXdMbXB6SWl3aWMyOTFjbU5sY3lJNld5SjNaV0p3WVdOck9pOHZMeTR2Zmk5eVlXMWtZUzl6Y21NdmFXNTBaWEp1WVd3dlgybGtaVzUwYVhSNUxtcHpQMlU1T1dNaVhTd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2liVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQm1kVzVqZEdsdmJpQmZhV1JsYm5ScGRIa29lQ2tnZXlCeVpYUjFjbTRnZURzZ2ZUdGNibHh1WEc1Y2JpOHZMeTh2THk4dkx5OHZMeTh2THk4dkwxeHVMeThnVjBWQ1VFRkRTeUJHVDA5VVJWSmNiaTh2SUM0dmZpOXlZVzFrWVM5emNtTXZhVzUwWlhKdVlXd3ZYMmxrWlc1MGFYUjVMbXB6WEc0dkx5QnRiMlIxYkdVZ2FXUWdQU0F4TmpCY2JpOHZJRzF2WkhWc1pTQmphSFZ1YTNNZ1BTQXdJbDBzSW0xaGNIQnBibWR6SWpvaVFVRkJRVHNpTENKemIzVnlZMlZTYjI5MElqb2lJbjA9XCIpO1xuXG4vKioqLyB9KSxcbi8qIDE2MSAqL1xuLyogbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9cbi8qIGFsbCBleHBvcnRzIHVzZWQgKi9cbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL34vcmFtZGEvc3JjL2ludGVybmFsL19pbmRleE9mLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbmV2YWwoXCJ2YXIgZXF1YWxzID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vZXF1YWxzICovIDU2KTtcXG5cXG5cXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIF9pbmRleE9mKGxpc3QsIGEsIGlkeCkge1xcbiAgdmFyIGluZiwgaXRlbTtcXG4gIC8vIEFycmF5LnByb3RvdHlwZS5pbmRleE9mIGRvZXNuJ3QgZXhpc3QgYmVsb3cgSUU5XFxuICBpZiAodHlwZW9mIGxpc3QuaW5kZXhPZiA9PT0gJ2Z1bmN0aW9uJykge1xcbiAgICBzd2l0Y2ggKHR5cGVvZiBhKSB7XFxuICAgICAgY2FzZSAnbnVtYmVyJzpcXG4gICAgICAgIGlmIChhID09PSAwKSB7XFxuICAgICAgICAgIC8vIG1hbnVhbGx5IGNyYXdsIHRoZSBsaXN0IHRvIGRpc3Rpbmd1aXNoIGJldHdlZW4gKzAgYW5kIC0wXFxuICAgICAgICAgIGluZiA9IDEgLyBhO1xcbiAgICAgICAgICB3aGlsZSAoaWR4IDwgbGlzdC5sZW5ndGgpIHtcXG4gICAgICAgICAgICBpdGVtID0gbGlzdFtpZHhdO1xcbiAgICAgICAgICAgIGlmIChpdGVtID09PSAwICYmIDEgLyBpdGVtID09PSBpbmYpIHtcXG4gICAgICAgICAgICAgIHJldHVybiBpZHg7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIGlkeCArPSAxO1xcbiAgICAgICAgICB9XFxuICAgICAgICAgIHJldHVybiAtMTtcXG4gICAgICAgIH0gZWxzZSBpZiAoYSAhPT0gYSkge1xcbiAgICAgICAgICAvLyBOYU5cXG4gICAgICAgICAgd2hpbGUgKGlkeCA8IGxpc3QubGVuZ3RoKSB7XFxuICAgICAgICAgICAgaXRlbSA9IGxpc3RbaWR4XTtcXG4gICAgICAgICAgICBpZiAodHlwZW9mIGl0ZW0gPT09ICdudW1iZXInICYmIGl0ZW0gIT09IGl0ZW0pIHtcXG4gICAgICAgICAgICAgIHJldHVybiBpZHg7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIGlkeCArPSAxO1xcbiAgICAgICAgICB9XFxuICAgICAgICAgIHJldHVybiAtMTtcXG4gICAgICAgIH1cXG4gICAgICAgIC8vIG5vbi16ZXJvIG51bWJlcnMgY2FuIHV0aWxpc2UgU2V0XFxuICAgICAgICByZXR1cm4gbGlzdC5pbmRleE9mKGEsIGlkeCk7XFxuXFxuICAgICAgLy8gYWxsIHRoZXNlIHR5cGVzIGNhbiB1dGlsaXNlIFNldFxcbiAgICAgIGNhc2UgJ3N0cmluZyc6XFxuICAgICAgY2FzZSAnYm9vbGVhbic6XFxuICAgICAgY2FzZSAnZnVuY3Rpb24nOlxcbiAgICAgIGNhc2UgJ3VuZGVmaW5lZCc6XFxuICAgICAgICByZXR1cm4gbGlzdC5pbmRleE9mKGEsIGlkeCk7XFxuXFxuICAgICAgY2FzZSAnb2JqZWN0JzpcXG4gICAgICAgIGlmIChhID09PSBudWxsKSB7XFxuICAgICAgICAgIC8vIG51bGwgY2FuIHV0aWxpc2UgU2V0XFxuICAgICAgICAgIHJldHVybiBsaXN0LmluZGV4T2YoYSwgaWR4KTtcXG4gICAgICAgIH1cXG4gICAgfVxcbiAgfVxcbiAgLy8gYW55dGhpbmcgZWxzZSBub3QgY292ZXJlZCBhYm92ZSwgZGVmZXIgdG8gUi5lcXVhbHNcXG4gIHdoaWxlIChpZHggPCBsaXN0Lmxlbmd0aCkge1xcbiAgICBpZiAoZXF1YWxzKGxpc3RbaWR4XSwgYSkpIHtcXG4gICAgICByZXR1cm4gaWR4O1xcbiAgICB9XFxuICAgIGlkeCArPSAxO1xcbiAgfVxcbiAgcmV0dXJuIC0xO1xcbn07XFxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lNVFl4TG1weklpd2ljMjkxY21ObGN5STZXeUozWldKd1lXTnJPaTh2THk0dmZpOXlZVzFrWVM5emNtTXZhVzUwWlhKdVlXd3ZYMmx1WkdWNFQyWXVhbk0vWTJWbU1TSmRMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUoyWVhJZ1pYRjFZV3h6SUQwZ2NtVnhkV2x5WlNnbkxpNHZaWEYxWVd4ekp5azdYRzVjYmx4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCbWRXNWpkR2x2YmlCZmFXNWtaWGhQWmloc2FYTjBMQ0JoTENCcFpIZ3BJSHRjYmlBZ2RtRnlJR2x1Wml3Z2FYUmxiVHRjYmlBZ0x5OGdRWEp5WVhrdWNISnZkRzkwZVhCbExtbHVaR1Y0VDJZZ1pHOWxjMjRuZENCbGVHbHpkQ0JpWld4dmR5QkpSVGxjYmlBZ2FXWWdLSFI1Y0dWdlppQnNhWE4wTG1sdVpHVjRUMllnUFQwOUlDZG1kVzVqZEdsdmJpY3BJSHRjYmlBZ0lDQnpkMmwwWTJnZ0tIUjVjR1Z2WmlCaEtTQjdYRzRnSUNBZ0lDQmpZWE5sSUNkdWRXMWlaWEluT2x4dUlDQWdJQ0FnSUNCcFppQW9ZU0E5UFQwZ01Da2dlMXh1SUNBZ0lDQWdJQ0FnSUM4dklHMWhiblZoYkd4NUlHTnlZWGRzSUhSb1pTQnNhWE4wSUhSdklHUnBjM1JwYm1kMWFYTm9JR0psZEhkbFpXNGdLekFnWVc1a0lDMHdYRzRnSUNBZ0lDQWdJQ0FnYVc1bUlEMGdNU0F2SUdFN1hHNGdJQ0FnSUNBZ0lDQWdkMmhwYkdVZ0tHbGtlQ0E4SUd4cGMzUXViR1Z1WjNSb0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCcGRHVnRJRDBnYkdsemRGdHBaSGhkTzF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0dsMFpXMGdQVDA5SURBZ0ppWWdNU0F2SUdsMFpXMGdQVDA5SUdsdVppa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2FXUjRPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdSNElDczlJREU3WEc0Z0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQXRNVHRjYmlBZ0lDQWdJQ0FnZlNCbGJITmxJR2xtSUNoaElDRTlQU0JoS1NCN1hHNGdJQ0FnSUNBZ0lDQWdMeThnVG1GT1hHNGdJQ0FnSUNBZ0lDQWdkMmhwYkdVZ0tHbGtlQ0E4SUd4cGMzUXViR1Z1WjNSb0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCcGRHVnRJRDBnYkdsemRGdHBaSGhkTzF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hSNWNHVnZaaUJwZEdWdElEMDlQU0FuYm5WdFltVnlKeUFtSmlCcGRHVnRJQ0U5UFNCcGRHVnRLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQnBaSGc3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNCcFpIZ2dLejBnTVR0Y2JpQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJQzB4TzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDOHZJRzV2YmkxNlpYSnZJRzUxYldKbGNuTWdZMkZ1SUhWMGFXeHBjMlVnVTJWMFhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCc2FYTjBMbWx1WkdWNFQyWW9ZU3dnYVdSNEtUdGNibHh1SUNBZ0lDQWdMeThnWVd4c0lIUm9aWE5sSUhSNWNHVnpJR05oYmlCMWRHbHNhWE5sSUZObGRGeHVJQ0FnSUNBZ1kyRnpaU0FuYzNSeWFXNW5KenBjYmlBZ0lDQWdJR05oYzJVZ0oySnZiMnhsWVc0bk9seHVJQ0FnSUNBZ1kyRnpaU0FuWm5WdVkzUnBiMjRuT2x4dUlDQWdJQ0FnWTJGelpTQW5kVzVrWldacGJtVmtKenBjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJR3hwYzNRdWFXNWtaWGhQWmloaExDQnBaSGdwTzF4dVhHNGdJQ0FnSUNCallYTmxJQ2R2WW1wbFkzUW5PbHh1SUNBZ0lDQWdJQ0JwWmlBb1lTQTlQVDBnYm5Wc2JDa2dlMXh1SUNBZ0lDQWdJQ0FnSUM4dklHNTFiR3dnWTJGdUlIVjBhV3hwYzJVZ1UyVjBYRzRnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJR3hwYzNRdWFXNWtaWGhQWmloaExDQnBaSGdwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dUlDQjlYRzRnSUM4dklHRnVlWFJvYVc1bklHVnNjMlVnYm05MElHTnZkbVZ5WldRZ1lXSnZkbVVzSUdSbFptVnlJSFJ2SUZJdVpYRjFZV3h6WEc0Z0lIZG9hV3hsSUNocFpIZ2dQQ0JzYVhOMExteGxibWQwYUNrZ2UxeHVJQ0FnSUdsbUlDaGxjWFZoYkhNb2JHbHpkRnRwWkhoZExDQmhLU2tnZTF4dUlDQWdJQ0FnY21WMGRYSnVJR2xrZUR0Y2JpQWdJQ0I5WEc0Z0lDQWdhV1I0SUNzOUlERTdYRzRnSUgxY2JpQWdjbVYwZFhKdUlDMHhPMXh1ZlR0Y2JseHVYRzVjYmk4dkx5OHZMeTh2THk4dkx5OHZMeTh2TDF4dUx5OGdWMFZDVUVGRFN5QkdUMDlVUlZKY2JpOHZJQzR2Zmk5eVlXMWtZUzl6Y21NdmFXNTBaWEp1WVd3dlgybHVaR1Y0VDJZdWFuTmNiaTh2SUcxdlpIVnNaU0JwWkNBOUlERTJNVnh1THk4Z2JXOWtkV3hsSUdOb2RXNXJjeUE5SURBaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUc2lMQ0p6YjNWeVkyVlNiMjkwSWpvaUluMD1cIik7XG5cbi8qKiovIH0pLFxuLyogMTYyICovXG4vKiBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyogYWxsIGV4cG9ydHMgdXNlZCAqL1xuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL34vcmFtZGEvc3JjL2ludGVybmFsL19pc0FyZ3VtZW50cy5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuZXZhbChcInZhciBfaGFzID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9faGFzICovIDE1KTtcXG5cXG5cXG5tb2R1bGUuZXhwb3J0cyA9IChmdW5jdGlvbigpIHtcXG4gIHZhciB0b1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XFxuICByZXR1cm4gdG9TdHJpbmcuY2FsbChhcmd1bWVudHMpID09PSAnW29iamVjdCBBcmd1bWVudHNdJyA/XFxuICAgIGZ1bmN0aW9uIF9pc0FyZ3VtZW50cyh4KSB7IHJldHVybiB0b1N0cmluZy5jYWxsKHgpID09PSAnW29iamVjdCBBcmd1bWVudHNdJzsgfSA6XFxuICAgIGZ1bmN0aW9uIF9pc0FyZ3VtZW50cyh4KSB7IHJldHVybiBfaGFzKCdjYWxsZWUnLCB4KTsgfTtcXG59KCkpO1xcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pTVRZeUxtcHpJaXdpYzI5MWNtTmxjeUk2V3lKM1pXSndZV05yT2k4dkx5NHZmaTl5WVcxa1lTOXpjbU12YVc1MFpYSnVZV3d2WDJselFYSm5kVzFsYm5SekxtcHpQemMyTWpVaVhTd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lkbUZ5SUY5b1lYTWdQU0J5WlhGMWFYSmxLQ2N1TDE5b1lYTW5LVHRjYmx4dVhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlDaG1kVzVqZEdsdmJpZ3BJSHRjYmlBZ2RtRnlJSFJ2VTNSeWFXNW5JRDBnVDJKcVpXTjBMbkJ5YjNSdmRIbHdaUzUwYjFOMGNtbHVaenRjYmlBZ2NtVjBkWEp1SUhSdlUzUnlhVzVuTG1OaGJHd29ZWEpuZFcxbGJuUnpLU0E5UFQwZ0oxdHZZbXBsWTNRZ1FYSm5kVzFsYm5SelhTY2dQMXh1SUNBZ0lHWjFibU4wYVc5dUlGOXBjMEZ5WjNWdFpXNTBjeWg0S1NCN0lISmxkSFZ5YmlCMGIxTjBjbWx1Wnk1allXeHNLSGdwSUQwOVBTQW5XMjlpYW1WamRDQkJjbWQxYldWdWRITmRKenNnZlNBNlhHNGdJQ0FnWm5WdVkzUnBiMjRnWDJselFYSm5kVzFsYm5SektIZ3BJSHNnY21WMGRYSnVJRjlvWVhNb0oyTmhiR3hsWlNjc0lIZ3BPeUI5TzF4dWZTZ3BLVHRjYmx4dVhHNWNiaTh2THk4dkx5OHZMeTh2THk4dkx5OHZMMXh1THk4Z1YwVkNVRUZEU3lCR1QwOVVSVkpjYmk4dklDNHZmaTl5WVcxa1lTOXpjbU12YVc1MFpYSnVZV3d2WDJselFYSm5kVzFsYm5SekxtcHpYRzR2THlCdGIyUjFiR1VnYVdRZ1BTQXhOakpjYmk4dklHMXZaSFZzWlNCamFIVnVhM01nUFNBd0lsMHNJbTFoY0hCcGJtZHpJam9pUVVGQlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3SWl3aWMyOTFjbU5sVW05dmRDSTZJaUo5XCIpO1xuXG4vKioqLyB9KSxcbi8qIDE2MyAqL1xuLyogbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9cbi8qIGFsbCBleHBvcnRzIHVzZWQgKi9cbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9+L3JhbWRhL3NyYy9pbnRlcm5hbC9faXNPYmplY3QuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbmV2YWwoXCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIF9pc09iamVjdCh4KSB7XFxuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHgpID09PSAnW29iamVjdCBPYmplY3RdJztcXG59O1xcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pTVRZekxtcHpJaXdpYzI5MWNtTmxjeUk2V3lKM1pXSndZV05yT2k4dkx5NHZmaTl5WVcxa1lTOXpjbU12YVc1MFpYSnVZV3d2WDJselQySnFaV04wTG1welB6UTBNamNpWFN3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCbWRXNWpkR2x2YmlCZmFYTlBZbXBsWTNRb2VDa2dlMXh1SUNCeVpYUjFjbTRnVDJKcVpXTjBMbkJ5YjNSdmRIbHdaUzUwYjFOMGNtbHVaeTVqWVd4c0tIZ3BJRDA5UFNBblcyOWlhbVZqZENCUFltcGxZM1JkSnp0Y2JuMDdYRzVjYmx4dVhHNHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OWNiaTh2SUZkRlFsQkJRMHNnUms5UFZFVlNYRzR2THlBdUwzNHZjbUZ0WkdFdmMzSmpMMmx1ZEdWeWJtRnNMMTlwYzA5aWFtVmpkQzVxYzF4dUx5OGdiVzlrZFd4bElHbGtJRDBnTVRZelhHNHZMeUJ0YjJSMWJHVWdZMmgxYm10eklEMGdNQ0pkTENKdFlYQndhVzVuY3lJNklrRkJRVUU3UVVGRFFUdEJRVU5CT3lJc0luTnZkWEpqWlZKdmIzUWlPaUlpZlE9PVwiKTtcblxuLyoqKi8gfSksXG4vKiAxNjQgKi9cbi8qIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKiBhbGwgZXhwb3J0cyB1c2VkICovXG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9+L3JhbWRhL3NyYy9pbnRlcm5hbC9faXNUcmFuc2Zvcm1lci5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5ldmFsKFwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBfaXNUcmFuc2Zvcm1lcihvYmopIHtcXG4gIHJldHVybiB0eXBlb2Ygb2JqWydAQHRyYW5zZHVjZXIvc3RlcCddID09PSAnZnVuY3Rpb24nO1xcbn07XFxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lNVFkwTG1weklpd2ljMjkxY21ObGN5STZXeUozWldKd1lXTnJPaTh2THk0dmZpOXlZVzFrWVM5emNtTXZhVzUwWlhKdVlXd3ZYMmx6VkhKaGJuTm1iM0p0WlhJdWFuTS9OMkkxTWlKZExDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SnRiMlIxYkdVdVpYaHdiM0owY3lBOUlHWjFibU4wYVc5dUlGOXBjMVJ5WVc1elptOXliV1Z5S0c5aWFpa2dlMXh1SUNCeVpYUjFjbTRnZEhsd1pXOW1JRzlpYWxzblFFQjBjbUZ1YzJSMVkyVnlMM04wWlhBblhTQTlQVDBnSjJaMWJtTjBhVzl1Snp0Y2JuMDdYRzVjYmx4dVhHNHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OWNiaTh2SUZkRlFsQkJRMHNnUms5UFZFVlNYRzR2THlBdUwzNHZjbUZ0WkdFdmMzSmpMMmx1ZEdWeWJtRnNMMTlwYzFSeVlXNXpabTl5YldWeUxtcHpYRzR2THlCdGIyUjFiR1VnYVdRZ1BTQXhOalJjYmk4dklHMXZaSFZzWlNCamFIVnVhM01nUFNBd0lsMHNJbTFoY0hCcGJtZHpJam9pUVVGQlFUdEJRVU5CTzBGQlEwRTdJaXdpYzI5MWNtTmxVbTl2ZENJNklpSjlcIik7XG5cbi8qKiovIH0pLFxuLyogMTY1ICovXG4vKiBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyogYWxsIGV4cG9ydHMgdXNlZCAqL1xuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9+L3JhbWRhL3NyYy9pbnRlcm5hbC9fb2JqZWN0QXNzaWduLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuZXZhbChcInZhciBfaGFzID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9faGFzICovIDE1KTtcXG5cXG4vLyBCYXNlZCBvbiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9PYmplY3QvYXNzaWduXFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBfb2JqZWN0QXNzaWduKHRhcmdldCkge1xcbiAgaWYgKHRhcmdldCA9PSBudWxsKSB7XFxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0Nhbm5vdCBjb252ZXJ0IHVuZGVmaW5lZCBvciBudWxsIHRvIG9iamVjdCcpO1xcbiAgfVxcblxcbiAgdmFyIG91dHB1dCA9IE9iamVjdCh0YXJnZXQpO1xcbiAgdmFyIGlkeCA9IDE7XFxuICB2YXIgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcXG4gIHdoaWxlIChpZHggPCBsZW5ndGgpIHtcXG4gICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpZHhdO1xcbiAgICBpZiAoc291cmNlICE9IG51bGwpIHtcXG4gICAgICBmb3IgKHZhciBuZXh0S2V5IGluIHNvdXJjZSkge1xcbiAgICAgICAgaWYgKF9oYXMobmV4dEtleSwgc291cmNlKSkge1xcbiAgICAgICAgICBvdXRwdXRbbmV4dEtleV0gPSBzb3VyY2VbbmV4dEtleV07XFxuICAgICAgICB9XFxuICAgICAgfVxcbiAgICB9XFxuICAgIGlkeCArPSAxO1xcbiAgfVxcbiAgcmV0dXJuIG91dHB1dDtcXG59O1xcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pTVRZMUxtcHpJaXdpYzI5MWNtTmxjeUk2V3lKM1pXSndZV05yT2k4dkx5NHZmaTl5WVcxa1lTOXpjbU12YVc1MFpYSnVZV3d2WDI5aWFtVmpkRUZ6YzJsbmJpNXFjejgzWlRnMklsMHNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJblpoY2lCZmFHRnpJRDBnY21WeGRXbHlaU2duTGk5ZmFHRnpKeWs3WEc1Y2JpOHZJRUpoYzJWa0lHOXVJR2gwZEhCek9pOHZaR1YyWld4dmNHVnlMbTF2ZW1sc2JHRXViM0puTDJWdUwyUnZZM012VjJWaUwwcGhkbUZUWTNKcGNIUXZVbVZtWlhKbGJtTmxMMGRzYjJKaGJGOVBZbXBsWTNSekwwOWlhbVZqZEM5aGMzTnBaMjVjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnWm5WdVkzUnBiMjRnWDI5aWFtVmpkRUZ6YzJsbmJpaDBZWEpuWlhRcElIdGNiaUFnYVdZZ0tIUmhjbWRsZENBOVBTQnVkV3hzS1NCN1hHNGdJQ0FnZEdoeWIzY2dibVYzSUZSNWNHVkZjbkp2Y2lnblEyRnVibTkwSUdOdmJuWmxjblFnZFc1a1pXWnBibVZrSUc5eUlHNTFiR3dnZEc4Z2IySnFaV04wSnlrN1hHNGdJSDFjYmx4dUlDQjJZWElnYjNWMGNIVjBJRDBnVDJKcVpXTjBLSFJoY21kbGRDazdYRzRnSUhaaGNpQnBaSGdnUFNBeE8xeHVJQ0IyWVhJZ2JHVnVaM1JvSUQwZ1lYSm5kVzFsYm5SekxteGxibWQwYUR0Y2JpQWdkMmhwYkdVZ0tHbGtlQ0E4SUd4bGJtZDBhQ2tnZTF4dUlDQWdJSFpoY2lCemIzVnlZMlVnUFNCaGNtZDFiV1Z1ZEhOYmFXUjRYVHRjYmlBZ0lDQnBaaUFvYzI5MWNtTmxJQ0U5SUc1MWJHd3BJSHRjYmlBZ0lDQWdJR1p2Y2lBb2RtRnlJRzVsZUhSTFpYa2dhVzRnYzI5MWNtTmxLU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDaGZhR0Z6S0c1bGVIUkxaWGtzSUhOdmRYSmpaU2twSUh0Y2JpQWdJQ0FnSUNBZ0lDQnZkWFJ3ZFhSYmJtVjRkRXRsZVYwZ1BTQnpiM1Z5WTJWYmJtVjRkRXRsZVYwN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lIMWNiaUFnSUNCOVhHNGdJQ0FnYVdSNElDczlJREU3WEc0Z0lIMWNiaUFnY21WMGRYSnVJRzkxZEhCMWREdGNibjA3WEc1Y2JseHVYRzR2THk4dkx5OHZMeTh2THk4dkx5OHZMeTljYmk4dklGZEZRbEJCUTBzZ1JrOVBWRVZTWEc0dkx5QXVMMzR2Y21GdFpHRXZjM0pqTDJsdWRHVnlibUZzTDE5dlltcGxZM1JCYzNOcFoyNHVhbk5jYmk4dklHMXZaSFZzWlNCcFpDQTlJREUyTlZ4dUx5OGdiVzlrZFd4bElHTm9kVzVyY3lBOUlEQWlYU3dpYldGd2NHbHVaM01pT2lKQlFVRkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUc2lMQ0p6YjNWeVkyVlNiMjkwSWpvaUluMD1cIik7XG5cbi8qKiovIH0pLFxuLyogMTY2ICovXG4vKiBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyogYWxsIGV4cG9ydHMgdXNlZCAqL1xuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vfi9yYW1kYS9zcmMvaW50ZXJuYWwvX3BpcGUuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuZXZhbChcIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gX3BpcGUoZiwgZykge1xcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xcbiAgICByZXR1cm4gZy5jYWxsKHRoaXMsIGYuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XFxuICB9O1xcbn07XFxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lNVFkyTG1weklpd2ljMjkxY21ObGN5STZXeUozWldKd1lXTnJPaTh2THk0dmZpOXlZVzFrWVM5emNtTXZhVzUwWlhKdVlXd3ZYM0JwY0dVdWFuTS9ZVGhqWXlKZExDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SnRiMlIxYkdVdVpYaHdiM0owY3lBOUlHWjFibU4wYVc5dUlGOXdhWEJsS0dZc0lHY3BJSHRjYmlBZ2NtVjBkWEp1SUdaMWJtTjBhVzl1S0NrZ2UxeHVJQ0FnSUhKbGRIVnliaUJuTG1OaGJHd29kR2hwY3l3Z1ppNWhjSEJzZVNoMGFHbHpMQ0JoY21kMWJXVnVkSE1wS1R0Y2JpQWdmVHRjYm4wN1hHNWNibHh1WEc0dkx5OHZMeTh2THk4dkx5OHZMeTh2THk5Y2JpOHZJRmRGUWxCQlEwc2dSazlQVkVWU1hHNHZMeUF1TDM0dmNtRnRaR0V2YzNKakwybHVkR1Z5Ym1Gc0wxOXdhWEJsTG1welhHNHZMeUJ0YjJSMWJHVWdhV1FnUFNBeE5qWmNiaTh2SUcxdlpIVnNaU0JqYUhWdWEzTWdQU0F3SWwwc0ltMWhjSEJwYm1keklqb2lRVUZCUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk95SXNJbk52ZFhKalpWSnZiM1FpT2lJaWZRPT1cIik7XG5cbi8qKiovIH0pLFxuLyogMTY3ICovXG4vKiBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyogYWxsIGV4cG9ydHMgdXNlZCAqL1xuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL34vcmFtZGEvc3JjL2ludGVybmFsL19xdW90ZS5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuZXZhbChcIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gX3F1b3RlKHMpIHtcXG4gIHZhciBlc2NhcGVkID0gc1xcbiAgICAucmVwbGFjZSgvXFxcXFxcXFwvZywgJ1xcXFxcXFxcXFxcXFxcXFwnKVxcbiAgICAucmVwbGFjZSgvW1xcXFxiXS9nLCAnXFxcXFxcXFxiJykgIC8vIFxcXFxiIG1hdGNoZXMgd29yZCBib3VuZGFyeTsgW1xcXFxiXSBtYXRjaGVzIGJhY2tzcGFjZVxcbiAgICAucmVwbGFjZSgvXFxcXGYvZywgJ1xcXFxcXFxcZicpXFxuICAgIC5yZXBsYWNlKC9cXFxcbi9nLCAnXFxcXFxcXFxuJylcXG4gICAgLnJlcGxhY2UoL1xcXFxyL2csICdcXFxcXFxcXHInKVxcbiAgICAucmVwbGFjZSgvXFxcXHQvZywgJ1xcXFxcXFxcdCcpXFxuICAgIC5yZXBsYWNlKC9cXFxcdi9nLCAnXFxcXFxcXFx2JylcXG4gICAgLnJlcGxhY2UoL1xcXFwwL2csICdcXFxcXFxcXDAnKTtcXG5cXG4gIHJldHVybiAnXFxcIicgKyBlc2NhcGVkLnJlcGxhY2UoL1xcXCIvZywgJ1xcXFxcXFxcXFxcIicpICsgJ1xcXCInO1xcbn07XFxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lNVFkzTG1weklpd2ljMjkxY21ObGN5STZXeUozWldKd1lXTnJPaTh2THk0dmZpOXlZVzFrWVM5emNtTXZhVzUwWlhKdVlXd3ZYM0YxYjNSbExtcHpQek00WmpRaVhTd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2liVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQm1kVzVqZEdsdmJpQmZjWFZ2ZEdVb2N5a2dlMXh1SUNCMllYSWdaWE5qWVhCbFpDQTlJSE5jYmlBZ0lDQXVjbVZ3YkdGalpTZ3ZYRnhjWEM5bkxDQW5YRnhjWEZ4Y1hGd25LVnh1SUNBZ0lDNXlaWEJzWVdObEtDOWJYRnhpWFM5bkxDQW5YRnhjWEdJbktTQWdMeThnWEZ4aUlHMWhkR05vWlhNZ2QyOXlaQ0JpYjNWdVpHRnllVHNnVzF4Y1lsMGdiV0YwWTJobGN5QmlZV05yYzNCaFkyVmNiaUFnSUNBdWNtVndiR0ZqWlNndlhGeG1MMmNzSUNkY1hGeGNaaWNwWEc0Z0lDQWdMbkpsY0d4aFkyVW9MMXhjYmk5bkxDQW5YRnhjWEc0bktWeHVJQ0FnSUM1eVpYQnNZV05sS0M5Y1hISXZaeXdnSjF4Y1hGeHlKeWxjYmlBZ0lDQXVjbVZ3YkdGalpTZ3ZYRngwTDJjc0lDZGNYRnhjZENjcFhHNGdJQ0FnTG5KbGNHeGhZMlVvTDF4Y2RpOW5MQ0FuWEZ4Y1hIWW5LVnh1SUNBZ0lDNXlaWEJzWVdObEtDOWNYREF2Wnl3Z0oxeGNYRnd3SnlrN1hHNWNiaUFnY21WMGRYSnVJQ2RjSWljZ0t5QmxjMk5oY0dWa0xuSmxjR3hoWTJVb0wxd2lMMmNzSUNkY1hGeGNYQ0luS1NBcklDZGNJaWM3WEc1OU8xeHVYRzVjYmx4dUx5OHZMeTh2THk4dkx5OHZMeTh2THk4dlhHNHZMeUJYUlVKUVFVTkxJRVpQVDFSRlVseHVMeThnTGk5K0wzSmhiV1JoTDNOeVl5OXBiblJsY201aGJDOWZjWFZ2ZEdVdWFuTmNiaTh2SUcxdlpIVnNaU0JwWkNBOUlERTJOMXh1THk4Z2JXOWtkV3hsSUdOb2RXNXJjeUE5SURBaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3lJc0luTnZkWEpqWlZKdmIzUWlPaUlpZlE9PVwiKTtcblxuLyoqKi8gfSksXG4vKiAxNjggKi9cbi8qIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKiBhbGwgZXhwb3J0cyB1c2VkICovXG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vfi9yYW1kYS9zcmMvaW50ZXJuYWwvX3RvSVNPU3RyaW5nLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5ldmFsKFwiLyoqXFxuICogUG9seWZpbGwgZnJvbSA8aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvRGF0ZS90b0lTT1N0cmluZz4uXFxuICovXFxubW9kdWxlLmV4cG9ydHMgPSAoZnVuY3Rpb24oKSB7XFxuICB2YXIgcGFkID0gZnVuY3Rpb24gcGFkKG4pIHsgcmV0dXJuIChuIDwgMTAgPyAnMCcgOiAnJykgKyBuOyB9O1xcblxcbiAgcmV0dXJuIHR5cGVvZiBEYXRlLnByb3RvdHlwZS50b0lTT1N0cmluZyA9PT0gJ2Z1bmN0aW9uJyA/XFxuICAgIGZ1bmN0aW9uIF90b0lTT1N0cmluZyhkKSB7XFxuICAgICAgcmV0dXJuIGQudG9JU09TdHJpbmcoKTtcXG4gICAgfSA6XFxuICAgIGZ1bmN0aW9uIF90b0lTT1N0cmluZyhkKSB7XFxuICAgICAgcmV0dXJuIChcXG4gICAgICAgIGQuZ2V0VVRDRnVsbFllYXIoKSArICctJyArXFxuICAgICAgICBwYWQoZC5nZXRVVENNb250aCgpICsgMSkgKyAnLScgK1xcbiAgICAgICAgcGFkKGQuZ2V0VVRDRGF0ZSgpKSArICdUJyArXFxuICAgICAgICBwYWQoZC5nZXRVVENIb3VycygpKSArICc6JyArXFxuICAgICAgICBwYWQoZC5nZXRVVENNaW51dGVzKCkpICsgJzonICtcXG4gICAgICAgIHBhZChkLmdldFVUQ1NlY29uZHMoKSkgKyAnLicgK1xcbiAgICAgICAgKGQuZ2V0VVRDTWlsbGlzZWNvbmRzKCkgLyAxMDAwKS50b0ZpeGVkKDMpLnNsaWNlKDIsIDUpICsgJ1onXFxuICAgICAgKTtcXG4gICAgfTtcXG59KCkpO1xcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pTVRZNExtcHpJaXdpYzI5MWNtTmxjeUk2V3lKM1pXSndZV05yT2k4dkx5NHZmaTl5WVcxa1lTOXpjbU12YVc1MFpYSnVZV3d2WDNSdlNWTlBVM1J5YVc1bkxtcHpQek01TXpVaVhTd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lMeW9xWEc0Z0tpQlFiMng1Wm1sc2JDQm1jbTl0SUR4b2RIUndjem92TDJSbGRtVnNiM0JsY2k1dGIzcHBiR3hoTG05eVp5OWxiaTFWVXk5a2IyTnpMMWRsWWk5S1lYWmhVMk55YVhCMEwxSmxabVZ5Wlc1alpTOUhiRzlpWVd4ZlQySnFaV04wY3k5RVlYUmxMM1J2U1ZOUFUzUnlhVzVuUGk1Y2JpQXFMMXh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0FvWm5WdVkzUnBiMjRvS1NCN1hHNGdJSFpoY2lCd1lXUWdQU0JtZFc1amRHbHZiaUJ3WVdRb2Jpa2dleUJ5WlhSMWNtNGdLRzRnUENBeE1DQS9JQ2N3SnlBNklDY25LU0FySUc0N0lIMDdYRzVjYmlBZ2NtVjBkWEp1SUhSNWNHVnZaaUJFWVhSbExuQnliM1J2ZEhsd1pTNTBiMGxUVDFOMGNtbHVaeUE5UFQwZ0oyWjFibU4wYVc5dUp5QS9YRzRnSUNBZ1puVnVZM1JwYjI0Z1gzUnZTVk5QVTNSeWFXNW5LR1FwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUJrTG5SdlNWTlBVM1J5YVc1bktDazdYRzRnSUNBZ2ZTQTZYRzRnSUNBZ1puVnVZM1JwYjI0Z1gzUnZTVk5QVTNSeWFXNW5LR1FwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUFvWEc0Z0lDQWdJQ0FnSUdRdVoyVjBWVlJEUm5Wc2JGbGxZWElvS1NBcklDY3RKeUFyWEc0Z0lDQWdJQ0FnSUhCaFpDaGtMbWRsZEZWVVEwMXZiblJvS0NrZ0t5QXhLU0FySUNjdEp5QXJYRzRnSUNBZ0lDQWdJSEJoWkNoa0xtZGxkRlZVUTBSaGRHVW9LU2tnS3lBblZDY2dLMXh1SUNBZ0lDQWdJQ0J3WVdRb1pDNW5aWFJWVkVOSWIzVnljeWdwS1NBcklDYzZKeUFyWEc0Z0lDQWdJQ0FnSUhCaFpDaGtMbWRsZEZWVVEwMXBiblYwWlhNb0tTa2dLeUFuT2ljZ0sxeHVJQ0FnSUNBZ0lDQndZV1FvWkM1blpYUlZWRU5UWldOdmJtUnpLQ2twSUNzZ0p5NG5JQ3RjYmlBZ0lDQWdJQ0FnS0dRdVoyVjBWVlJEVFdsc2JHbHpaV052Ym1SektDa2dMeUF4TURBd0tTNTBiMFpwZUdWa0tETXBMbk5zYVdObEtESXNJRFVwSUNzZ0oxb25YRzRnSUNBZ0lDQXBPMXh1SUNBZ0lIMDdYRzU5S0NrcE8xeHVYRzVjYmx4dUx5OHZMeTh2THk4dkx5OHZMeTh2THk4dlhHNHZMeUJYUlVKUVFVTkxJRVpQVDFSRlVseHVMeThnTGk5K0wzSmhiV1JoTDNOeVl5OXBiblJsY201aGJDOWZkRzlKVTA5VGRISnBibWN1YW5OY2JpOHZJRzF2WkhWc1pTQnBaQ0E5SURFMk9GeHVMeThnYlc5a2RXeGxJR05vZFc1cmN5QTlJREFpWFN3aWJXRndjR2x1WjNNaU9pSkJRVUZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPeUlzSW5OdmRYSmpaVkp2YjNRaU9pSWlmUT09XCIpO1xuXG4vKioqLyB9KSxcbi8qIDE2OSAqL1xuLyogbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9cbi8qIGFsbCBleHBvcnRzIHVzZWQgKi9cbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9+L3JhbWRhL3NyYy9pbnRlcm5hbC9fdG9TdHJpbmcuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbmV2YWwoXCJ2YXIgX2NvbnRhaW5zID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9fY29udGFpbnMgKi8gMTU1KTtcXG52YXIgX21hcCA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vX21hcCAqLyA2MSk7XFxudmFyIF9xdW90ZSA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vX3F1b3RlICovIDE2Nyk7XFxudmFyIF90b0lTT1N0cmluZyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vX3RvSVNPU3RyaW5nICovIDE2OCk7XFxudmFyIGtleXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9rZXlzICovIDE3KTtcXG52YXIgcmVqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vcmVqZWN0ICovIDE4NSk7XFxuXFxuXFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBfdG9TdHJpbmcoeCwgc2Vlbikge1xcbiAgdmFyIHJlY3VyID0gZnVuY3Rpb24gcmVjdXIoeSkge1xcbiAgICB2YXIgeHMgPSBzZWVuLmNvbmNhdChbeF0pO1xcbiAgICByZXR1cm4gX2NvbnRhaW5zKHksIHhzKSA/ICc8Q2lyY3VsYXI+JyA6IF90b1N0cmluZyh5LCB4cyk7XFxuICB9O1xcblxcbiAgLy8gIG1hcFBhaXJzIDo6IChPYmplY3QsIFtTdHJpbmddKSAtPiBbU3RyaW5nXVxcbiAgdmFyIG1hcFBhaXJzID0gZnVuY3Rpb24ob2JqLCBrZXlzKSB7XFxuICAgIHJldHVybiBfbWFwKGZ1bmN0aW9uKGspIHsgcmV0dXJuIF9xdW90ZShrKSArICc6ICcgKyByZWN1cihvYmpba10pOyB9LCBrZXlzLnNsaWNlKCkuc29ydCgpKTtcXG4gIH07XFxuXFxuICBzd2l0Y2ggKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh4KSkge1xcbiAgICBjYXNlICdbb2JqZWN0IEFyZ3VtZW50c10nOlxcbiAgICAgIHJldHVybiAnKGZ1bmN0aW9uKCkgeyByZXR1cm4gYXJndW1lbnRzOyB9KCcgKyBfbWFwKHJlY3VyLCB4KS5qb2luKCcsICcpICsgJykpJztcXG4gICAgY2FzZSAnW29iamVjdCBBcnJheV0nOlxcbiAgICAgIHJldHVybiAnWycgKyBfbWFwKHJlY3VyLCB4KS5jb25jYXQobWFwUGFpcnMoeCwgcmVqZWN0KGZ1bmN0aW9uKGspIHsgcmV0dXJuIC9eXFxcXGQrJC8udGVzdChrKTsgfSwga2V5cyh4KSkpKS5qb2luKCcsICcpICsgJ10nO1xcbiAgICBjYXNlICdbb2JqZWN0IEJvb2xlYW5dJzpcXG4gICAgICByZXR1cm4gdHlwZW9mIHggPT09ICdvYmplY3QnID8gJ25ldyBCb29sZWFuKCcgKyByZWN1cih4LnZhbHVlT2YoKSkgKyAnKScgOiB4LnRvU3RyaW5nKCk7XFxuICAgIGNhc2UgJ1tvYmplY3QgRGF0ZV0nOlxcbiAgICAgIHJldHVybiAnbmV3IERhdGUoJyArIChpc05hTih4LnZhbHVlT2YoKSkgPyByZWN1cihOYU4pIDogX3F1b3RlKF90b0lTT1N0cmluZyh4KSkpICsgJyknO1xcbiAgICBjYXNlICdbb2JqZWN0IE51bGxdJzpcXG4gICAgICByZXR1cm4gJ251bGwnO1xcbiAgICBjYXNlICdbb2JqZWN0IE51bWJlcl0nOlxcbiAgICAgIHJldHVybiB0eXBlb2YgeCA9PT0gJ29iamVjdCcgPyAnbmV3IE51bWJlcignICsgcmVjdXIoeC52YWx1ZU9mKCkpICsgJyknIDogMSAvIHggPT09IC1JbmZpbml0eSA/ICctMCcgOiB4LnRvU3RyaW5nKDEwKTtcXG4gICAgY2FzZSAnW29iamVjdCBTdHJpbmddJzpcXG4gICAgICByZXR1cm4gdHlwZW9mIHggPT09ICdvYmplY3QnID8gJ25ldyBTdHJpbmcoJyArIHJlY3VyKHgudmFsdWVPZigpKSArICcpJyA6IF9xdW90ZSh4KTtcXG4gICAgY2FzZSAnW29iamVjdCBVbmRlZmluZWRdJzpcXG4gICAgICByZXR1cm4gJ3VuZGVmaW5lZCc7XFxuICAgIGRlZmF1bHQ6XFxuICAgICAgaWYgKHR5cGVvZiB4LnRvU3RyaW5nID09PSAnZnVuY3Rpb24nKSB7XFxuICAgICAgICB2YXIgcmVwciA9IHgudG9TdHJpbmcoKTtcXG4gICAgICAgIGlmIChyZXByICE9PSAnW29iamVjdCBPYmplY3RdJykge1xcbiAgICAgICAgICByZXR1cm4gcmVwcjtcXG4gICAgICAgIH1cXG4gICAgICB9XFxuICAgICAgcmV0dXJuICd7JyArIG1hcFBhaXJzKHgsIGtleXMoeCkpLmpvaW4oJywgJykgKyAnfSc7XFxuICB9XFxufTtcXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaU1UWTVMbXB6SWl3aWMyOTFjbU5sY3lJNld5SjNaV0p3WVdOck9pOHZMeTR2Zmk5eVlXMWtZUzl6Y21NdmFXNTBaWEp1WVd3dlgzUnZVM1J5YVc1bkxtcHpQekZtWldJaVhTd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lkbUZ5SUY5amIyNTBZV2x1Y3lBOUlISmxjWFZwY21Vb0p5NHZYMk52Ym5SaGFXNXpKeWs3WEc1MllYSWdYMjFoY0NBOUlISmxjWFZwY21Vb0p5NHZYMjFoY0NjcE8xeHVkbUZ5SUY5eGRXOTBaU0E5SUhKbGNYVnBjbVVvSnk0dlgzRjFiM1JsSnlrN1hHNTJZWElnWDNSdlNWTlBVM1J5YVc1bklEMGdjbVZ4ZFdseVpTZ25MaTlmZEc5SlUwOVRkSEpwYm1jbktUdGNiblpoY2lCclpYbHpJRDBnY21WeGRXbHlaU2duTGk0dmEyVjVjeWNwTzF4dWRtRnlJSEpsYW1WamRDQTlJSEpsY1hWcGNtVW9KeTR1TDNKbGFtVmpkQ2NwTzF4dVhHNWNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdablZ1WTNScGIyNGdYM1J2VTNSeWFXNW5LSGdzSUhObFpXNHBJSHRjYmlBZ2RtRnlJSEpsWTNWeUlEMGdablZ1WTNScGIyNGdjbVZqZFhJb2VTa2dlMXh1SUNBZ0lIWmhjaUI0Y3lBOUlITmxaVzR1WTI5dVkyRjBLRnQ0WFNrN1hHNGdJQ0FnY21WMGRYSnVJRjlqYjI1MFlXbHVjeWg1TENCNGN5a2dQeUFuUEVOcGNtTjFiR0Z5UGljZ09pQmZkRzlUZEhKcGJtY29lU3dnZUhNcE8xeHVJQ0I5TzF4dVhHNGdJQzh2SUNCdFlYQlFZV2x5Y3lBNk9pQW9UMkpxWldOMExDQmJVM1J5YVc1blhTa2dMVDRnVzFOMGNtbHVaMTFjYmlBZ2RtRnlJRzFoY0ZCaGFYSnpJRDBnWm5WdVkzUnBiMjRvYjJKcUxDQnJaWGx6S1NCN1hHNGdJQ0FnY21WMGRYSnVJRjl0WVhBb1puVnVZM1JwYjI0b2F5a2dleUJ5WlhSMWNtNGdYM0YxYjNSbEtHc3BJQ3NnSnpvZ0p5QXJJSEpsWTNWeUtHOWlhbHRyWFNrN0lIMHNJR3RsZVhNdWMyeHBZMlVvS1M1emIzSjBLQ2twTzF4dUlDQjlPMXh1WEc0Z0lITjNhWFJqYUNBb1QySnFaV04wTG5CeWIzUnZkSGx3WlM1MGIxTjBjbWx1Wnk1allXeHNLSGdwS1NCN1hHNGdJQ0FnWTJGelpTQW5XMjlpYW1WamRDQkJjbWQxYldWdWRITmRKenBjYmlBZ0lDQWdJSEpsZEhWeWJpQW5LR1oxYm1OMGFXOXVLQ2tnZXlCeVpYUjFjbTRnWVhKbmRXMWxiblJ6T3lCOUtDY2dLeUJmYldGd0tISmxZM1Z5TENCNEtTNXFiMmx1S0Njc0lDY3BJQ3NnSnlrcEp6dGNiaUFnSUNCallYTmxJQ2RiYjJKcVpXTjBJRUZ5Y21GNVhTYzZYRzRnSUNBZ0lDQnlaWFIxY200Z0oxc25JQ3NnWDIxaGNDaHlaV04xY2l3Z2VDa3VZMjl1WTJGMEtHMWhjRkJoYVhKektIZ3NJSEpsYW1WamRDaG1kVzVqZEdsdmJpaHJLU0I3SUhKbGRIVnliaUF2WGx4Y1pDc2tMeTUwWlhOMEtHc3BPeUI5TENCclpYbHpLSGdwS1NrcExtcHZhVzRvSnl3Z0p5a2dLeUFuWFNjN1hHNGdJQ0FnWTJGelpTQW5XMjlpYW1WamRDQkNiMjlzWldGdVhTYzZYRzRnSUNBZ0lDQnlaWFIxY200Z2RIbHdaVzltSUhnZ1BUMDlJQ2R2WW1wbFkzUW5JRDhnSjI1bGR5QkNiMjlzWldGdUtDY2dLeUJ5WldOMWNpaDRMblpoYkhWbFQyWW9LU2tnS3lBbktTY2dPaUI0TG5SdlUzUnlhVzVuS0NrN1hHNGdJQ0FnWTJGelpTQW5XMjlpYW1WamRDQkVZWFJsWFNjNlhHNGdJQ0FnSUNCeVpYUjFjbTRnSjI1bGR5QkVZWFJsS0NjZ0t5QW9hWE5PWVU0b2VDNTJZV3gxWlU5bUtDa3BJRDhnY21WamRYSW9UbUZPS1NBNklGOXhkVzkwWlNoZmRHOUpVMDlUZEhKcGJtY29lQ2twS1NBcklDY3BKenRjYmlBZ0lDQmpZWE5sSUNkYmIySnFaV04wSUU1MWJHeGRKenBjYmlBZ0lDQWdJSEpsZEhWeWJpQW5iblZzYkNjN1hHNGdJQ0FnWTJGelpTQW5XMjlpYW1WamRDQk9kVzFpWlhKZEp6cGNiaUFnSUNBZ0lISmxkSFZ5YmlCMGVYQmxiMllnZUNBOVBUMGdKMjlpYW1WamRDY2dQeUFuYm1WM0lFNTFiV0psY2lnbklDc2djbVZqZFhJb2VDNTJZV3gxWlU5bUtDa3BJQ3NnSnlrbklEb2dNU0F2SUhnZ1BUMDlJQzFKYm1acGJtbDBlU0EvSUNjdE1DY2dPaUI0TG5SdlUzUnlhVzVuS0RFd0tUdGNiaUFnSUNCallYTmxJQ2RiYjJKcVpXTjBJRk4wY21sdVoxMG5PbHh1SUNBZ0lDQWdjbVYwZFhKdUlIUjVjR1Z2WmlCNElEMDlQU0FuYjJKcVpXTjBKeUEvSUNkdVpYY2dVM1J5YVc1bktDY2dLeUJ5WldOMWNpaDRMblpoYkhWbFQyWW9LU2tnS3lBbktTY2dPaUJmY1hWdmRHVW9lQ2s3WEc0Z0lDQWdZMkZ6WlNBblcyOWlhbVZqZENCVmJtUmxabWx1WldSZEp6cGNiaUFnSUNBZ0lISmxkSFZ5YmlBbmRXNWtaV1pwYm1Wa0p6dGNiaUFnSUNCa1pXWmhkV3gwT2x4dUlDQWdJQ0FnYVdZZ0tIUjVjR1Z2WmlCNExuUnZVM1J5YVc1bklEMDlQU0FuWm5WdVkzUnBiMjRuS1NCN1hHNGdJQ0FnSUNBZ0lIWmhjaUJ5WlhCeUlEMGdlQzUwYjFOMGNtbHVaeWdwTzF4dUlDQWdJQ0FnSUNCcFppQW9jbVZ3Y2lBaFBUMGdKMXR2WW1wbFkzUWdUMkpxWldOMFhTY3BJSHRjYmlBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnY21Wd2NqdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdmVnh1SUNBZ0lDQWdjbVYwZFhKdUlDZDdKeUFySUcxaGNGQmhhWEp6S0hnc0lHdGxlWE1vZUNrcExtcHZhVzRvSnl3Z0p5a2dLeUFuZlNjN1hHNGdJSDFjYm4wN1hHNWNibHh1WEc0dkx5OHZMeTh2THk4dkx5OHZMeTh2THk5Y2JpOHZJRmRGUWxCQlEwc2dSazlQVkVWU1hHNHZMeUF1TDM0dmNtRnRaR0V2YzNKakwybHVkR1Z5Ym1Gc0wxOTBiMU4wY21sdVp5NXFjMXh1THk4Z2JXOWtkV3hsSUdsa0lEMGdNVFk1WEc0dkx5QnRiMlIxYkdVZ1kyaDFibXR6SUQwZ01DSmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdJaXdpYzI5MWNtTmxVbTl2ZENJNklpSjlcIik7XG5cbi8qKiovIH0pLFxuLyogMTcwICovXG4vKiBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyogYWxsIGV4cG9ydHMgdXNlZCAqL1xuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vfi9yYW1kYS9zcmMvaW50ZXJuYWwvX3hmaWx0ZXIuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuZXZhbChcInZhciBfY3VycnkyID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9fY3VycnkyICovIDEpO1xcbnZhciBfeGZCYXNlID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9feGZCYXNlICovIDYyKTtcXG5cXG5cXG5tb2R1bGUuZXhwb3J0cyA9IChmdW5jdGlvbigpIHtcXG4gIGZ1bmN0aW9uIFhGaWx0ZXIoZiwgeGYpIHtcXG4gICAgdGhpcy54ZiA9IHhmO1xcbiAgICB0aGlzLmYgPSBmO1xcbiAgfVxcbiAgWEZpbHRlci5wcm90b3R5cGVbJ0BAdHJhbnNkdWNlci9pbml0J10gPSBfeGZCYXNlLmluaXQ7XFxuICBYRmlsdGVyLnByb3RvdHlwZVsnQEB0cmFuc2R1Y2VyL3Jlc3VsdCddID0gX3hmQmFzZS5yZXN1bHQ7XFxuICBYRmlsdGVyLnByb3RvdHlwZVsnQEB0cmFuc2R1Y2VyL3N0ZXAnXSA9IGZ1bmN0aW9uKHJlc3VsdCwgaW5wdXQpIHtcXG4gICAgcmV0dXJuIHRoaXMuZihpbnB1dCkgPyB0aGlzLnhmWydAQHRyYW5zZHVjZXIvc3RlcCddKHJlc3VsdCwgaW5wdXQpIDogcmVzdWx0O1xcbiAgfTtcXG5cXG4gIHJldHVybiBfY3VycnkyKGZ1bmN0aW9uIF94ZmlsdGVyKGYsIHhmKSB7IHJldHVybiBuZXcgWEZpbHRlcihmLCB4Zik7IH0pO1xcbn0oKSk7XFxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lNVGN3TG1weklpd2ljMjkxY21ObGN5STZXeUozWldKd1lXTnJPaTh2THk0dmZpOXlZVzFrWVM5emNtTXZhVzUwWlhKdVlXd3ZYM2htYVd4MFpYSXVhbk0vWTJGa01TSmRMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUoyWVhJZ1gyTjFjbko1TWlBOUlISmxjWFZwY21Vb0p5NHZYMk4xY25KNU1pY3BPMXh1ZG1GeUlGOTRaa0poYzJVZ1BTQnlaWEYxYVhKbEtDY3VMMTk0WmtKaGMyVW5LVHRjYmx4dVhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlDaG1kVzVqZEdsdmJpZ3BJSHRjYmlBZ1puVnVZM1JwYjI0Z1dFWnBiSFJsY2lobUxDQjRaaWtnZTF4dUlDQWdJSFJvYVhNdWVHWWdQU0I0Wmp0Y2JpQWdJQ0IwYUdsekxtWWdQU0JtTzF4dUlDQjlYRzRnSUZoR2FXeDBaWEl1Y0hKdmRHOTBlWEJsV3lkQVFIUnlZVzV6WkhWalpYSXZhVzVwZENkZElEMGdYM2htUW1GelpTNXBibWwwTzF4dUlDQllSbWxzZEdWeUxuQnliM1J2ZEhsd1pWc25RRUIwY21GdWMyUjFZMlZ5TDNKbGMzVnNkQ2RkSUQwZ1gzaG1RbUZ6WlM1eVpYTjFiSFE3WEc0Z0lGaEdhV3gwWlhJdWNISnZkRzkwZVhCbFd5ZEFRSFJ5WVc1elpIVmpaWEl2YzNSbGNDZGRJRDBnWm5WdVkzUnBiMjRvY21WemRXeDBMQ0JwYm5CMWRDa2dlMXh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpMbVlvYVc1d2RYUXBJRDhnZEdocGN5NTRabHNuUUVCMGNtRnVjMlIxWTJWeUwzTjBaWEFuWFNoeVpYTjFiSFFzSUdsdWNIVjBLU0E2SUhKbGMzVnNkRHRjYmlBZ2ZUdGNibHh1SUNCeVpYUjFjbTRnWDJOMWNuSjVNaWhtZFc1amRHbHZiaUJmZUdacGJIUmxjaWhtTENCNFppa2dleUJ5WlhSMWNtNGdibVYzSUZoR2FXeDBaWElvWml3Z2VHWXBPeUI5S1R0Y2JuMG9LU2s3WEc1Y2JseHVYRzR2THk4dkx5OHZMeTh2THk4dkx5OHZMeTljYmk4dklGZEZRbEJCUTBzZ1JrOVBWRVZTWEc0dkx5QXVMMzR2Y21GdFpHRXZjM0pqTDJsdWRHVnlibUZzTDE5NFptbHNkR1Z5TG1welhHNHZMeUJ0YjJSMWJHVWdhV1FnUFNBeE56QmNiaTh2SUcxdlpIVnNaU0JqYUhWdWEzTWdQU0F3SWwwc0ltMWhjSEJwYm1keklqb2lRVUZCUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3lJc0luTnZkWEpqWlZKdmIzUWlPaUlpZlE9PVwiKTtcblxuLyoqKi8gfSksXG4vKiAxNzEgKi9cbi8qIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKiBhbGwgZXhwb3J0cyB1c2VkICovXG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9+L3JhbWRhL3NyYy9pbnRlcm5hbC9feG1hcC5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5ldmFsKFwidmFyIF9jdXJyeTIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL19jdXJyeTIgKi8gMSk7XFxudmFyIF94ZkJhc2UgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL194ZkJhc2UgKi8gNjIpO1xcblxcblxcbm1vZHVsZS5leHBvcnRzID0gKGZ1bmN0aW9uKCkge1xcbiAgZnVuY3Rpb24gWE1hcChmLCB4Zikge1xcbiAgICB0aGlzLnhmID0geGY7XFxuICAgIHRoaXMuZiA9IGY7XFxuICB9XFxuICBYTWFwLnByb3RvdHlwZVsnQEB0cmFuc2R1Y2VyL2luaXQnXSA9IF94ZkJhc2UuaW5pdDtcXG4gIFhNYXAucHJvdG90eXBlWydAQHRyYW5zZHVjZXIvcmVzdWx0J10gPSBfeGZCYXNlLnJlc3VsdDtcXG4gIFhNYXAucHJvdG90eXBlWydAQHRyYW5zZHVjZXIvc3RlcCddID0gZnVuY3Rpb24ocmVzdWx0LCBpbnB1dCkge1xcbiAgICByZXR1cm4gdGhpcy54ZlsnQEB0cmFuc2R1Y2VyL3N0ZXAnXShyZXN1bHQsIHRoaXMuZihpbnB1dCkpO1xcbiAgfTtcXG5cXG4gIHJldHVybiBfY3VycnkyKGZ1bmN0aW9uIF94bWFwKGYsIHhmKSB7IHJldHVybiBuZXcgWE1hcChmLCB4Zik7IH0pO1xcbn0oKSk7XFxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lNVGN4TG1weklpd2ljMjkxY21ObGN5STZXeUozWldKd1lXTnJPaTh2THk0dmZpOXlZVzFrWVM5emNtTXZhVzUwWlhKdVlXd3ZYM2h0WVhBdWFuTS9PREUwWmlKZExDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SjJZWElnWDJOMWNuSjVNaUE5SUhKbGNYVnBjbVVvSnk0dlgyTjFjbko1TWljcE8xeHVkbUZ5SUY5NFprSmhjMlVnUFNCeVpYRjFhWEpsS0NjdUwxOTRaa0poYzJVbktUdGNibHh1WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUNobWRXNWpkR2x2YmlncElIdGNiaUFnWm5WdVkzUnBiMjRnV0UxaGNDaG1MQ0I0WmlrZ2UxeHVJQ0FnSUhSb2FYTXVlR1lnUFNCNFpqdGNiaUFnSUNCMGFHbHpMbVlnUFNCbU8xeHVJQ0I5WEc0Z0lGaE5ZWEF1Y0hKdmRHOTBlWEJsV3lkQVFIUnlZVzV6WkhWalpYSXZhVzVwZENkZElEMGdYM2htUW1GelpTNXBibWwwTzF4dUlDQllUV0Z3TG5CeWIzUnZkSGx3WlZzblFFQjBjbUZ1YzJSMVkyVnlMM0psYzNWc2RDZGRJRDBnWDNobVFtRnpaUzV5WlhOMWJIUTdYRzRnSUZoTllYQXVjSEp2ZEc5MGVYQmxXeWRBUUhSeVlXNXpaSFZqWlhJdmMzUmxjQ2RkSUQwZ1puVnVZM1JwYjI0b2NtVnpkV3gwTENCcGJuQjFkQ2tnZTF4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TG5obVd5ZEFRSFJ5WVc1elpIVmpaWEl2YzNSbGNDZGRLSEpsYzNWc2RDd2dkR2hwY3k1bUtHbHVjSFYwS1NrN1hHNGdJSDA3WEc1Y2JpQWdjbVYwZFhKdUlGOWpkWEp5ZVRJb1puVnVZM1JwYjI0Z1gzaHRZWEFvWml3Z2VHWXBJSHNnY21WMGRYSnVJRzVsZHlCWVRXRndLR1lzSUhobUtUc2dmU2s3WEc1OUtDa3BPMXh1WEc1Y2JseHVMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZYRzR2THlCWFJVSlFRVU5MSUVaUFQxUkZVbHh1THk4Z0xpOStMM0poYldSaEwzTnlZeTlwYm5SbGNtNWhiQzlmZUcxaGNDNXFjMXh1THk4Z2JXOWtkV3hsSUdsa0lEMGdNVGN4WEc0dkx5QnRiMlIxYkdVZ1kyaDFibXR6SUQwZ01DSmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUc2lMQ0p6YjNWeVkyVlNiMjkwSWpvaUluMD1cIik7XG5cbi8qKiovIH0pLFxuLyogMTcyICovXG4vKiBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyogYWxsIGV4cG9ydHMgdXNlZCAqL1xuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL34vcmFtZGEvc3JjL2ludGVybmFsL194d3JhcC5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuZXZhbChcIm1vZHVsZS5leHBvcnRzID0gKGZ1bmN0aW9uKCkge1xcbiAgZnVuY3Rpb24gWFdyYXAoZm4pIHtcXG4gICAgdGhpcy5mID0gZm47XFxuICB9XFxuICBYV3JhcC5wcm90b3R5cGVbJ0BAdHJhbnNkdWNlci9pbml0J10gPSBmdW5jdGlvbigpIHtcXG4gICAgdGhyb3cgbmV3IEVycm9yKCdpbml0IG5vdCBpbXBsZW1lbnRlZCBvbiBYV3JhcCcpO1xcbiAgfTtcXG4gIFhXcmFwLnByb3RvdHlwZVsnQEB0cmFuc2R1Y2VyL3Jlc3VsdCddID0gZnVuY3Rpb24oYWNjKSB7IHJldHVybiBhY2M7IH07XFxuICBYV3JhcC5wcm90b3R5cGVbJ0BAdHJhbnNkdWNlci9zdGVwJ10gPSBmdW5jdGlvbihhY2MsIHgpIHtcXG4gICAgcmV0dXJuIHRoaXMuZihhY2MsIHgpO1xcbiAgfTtcXG5cXG4gIHJldHVybiBmdW5jdGlvbiBfeHdyYXAoZm4pIHsgcmV0dXJuIG5ldyBYV3JhcChmbik7IH07XFxufSgpKTtcXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaU1UY3lMbXB6SWl3aWMyOTFjbU5sY3lJNld5SjNaV0p3WVdOck9pOHZMeTR2Zmk5eVlXMWtZUzl6Y21NdmFXNTBaWEp1WVd3dlgzaDNjbUZ3TG1welB6UTVOaklpWFN3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNBb1puVnVZM1JwYjI0b0tTQjdYRzRnSUdaMWJtTjBhVzl1SUZoWGNtRndLR1p1S1NCN1hHNGdJQ0FnZEdocGN5NW1JRDBnWm00N1hHNGdJSDFjYmlBZ1dGZHlZWEF1Y0hKdmRHOTBlWEJsV3lkQVFIUnlZVzV6WkhWalpYSXZhVzVwZENkZElEMGdablZ1WTNScGIyNG9LU0I3WEc0Z0lDQWdkR2h5YjNjZ2JtVjNJRVZ5Y205eUtDZHBibWwwSUc1dmRDQnBiWEJzWlcxbGJuUmxaQ0J2YmlCWVYzSmhjQ2NwTzF4dUlDQjlPMXh1SUNCWVYzSmhjQzV3Y205MGIzUjVjR1ZiSjBCQWRISmhibk5rZFdObGNpOXlaWE4xYkhRblhTQTlJR1oxYm1OMGFXOXVLR0ZqWXlrZ2V5QnlaWFIxY200Z1lXTmpPeUI5TzF4dUlDQllWM0poY0M1d2NtOTBiM1I1Y0dWYkowQkFkSEpoYm5Oa2RXTmxjaTl6ZEdWd0oxMGdQU0JtZFc1amRHbHZiaWhoWTJNc0lIZ3BJSHRjYmlBZ0lDQnlaWFIxY200Z2RHaHBjeTVtS0dGall5d2dlQ2s3WEc0Z0lIMDdYRzVjYmlBZ2NtVjBkWEp1SUdaMWJtTjBhVzl1SUY5NGQzSmhjQ2htYmlrZ2V5QnlaWFIxY200Z2JtVjNJRmhYY21Gd0tHWnVLVHNnZlR0Y2JuMG9LU2s3WEc1Y2JseHVYRzR2THk4dkx5OHZMeTh2THk4dkx5OHZMeTljYmk4dklGZEZRbEJCUTBzZ1JrOVBWRVZTWEc0dkx5QXVMMzR2Y21GdFpHRXZjM0pqTDJsdWRHVnlibUZzTDE5NGQzSmhjQzVxYzF4dUx5OGdiVzlrZFd4bElHbGtJRDBnTVRjeVhHNHZMeUJ0YjJSMWJHVWdZMmgxYm10eklEMGdNQ0pkTENKdFlYQndhVzVuY3lJNklrRkJRVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzaUxDSnpiM1Z5WTJWU2IyOTBJam9pSW4wPVwiKTtcblxuLyoqKi8gfSksXG4vKiAxNzMgKi9cbi8qIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKiBhbGwgZXhwb3J0cyB1c2VkICovXG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL34vcmFtZGEvc3JjL2ludm9rZXIuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5ldmFsKFwidmFyIF9jdXJyeTIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL2ludGVybmFsL19jdXJyeTIgKi8gMSk7XFxudmFyIF9pc0Z1bmN0aW9uID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9pbnRlcm5hbC9faXNGdW5jdGlvbiAqLyA1OSk7XFxudmFyIGN1cnJ5TiA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vY3VycnlOICovIDYpO1xcbnZhciB0b1N0cmluZyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vdG9TdHJpbmcgKi8gMTkxKTtcXG5cXG5cXG4vKipcXG4gKiBUdXJucyBhIG5hbWVkIG1ldGhvZCB3aXRoIGEgc3BlY2lmaWVkIGFyaXR5IGludG8gYSBmdW5jdGlvbiB0aGF0IGNhbiBiZVxcbiAqIGNhbGxlZCBkaXJlY3RseSBzdXBwbGllZCB3aXRoIGFyZ3VtZW50cyBhbmQgYSB0YXJnZXQgb2JqZWN0LlxcbiAqXFxuICogVGhlIHJldHVybmVkIGZ1bmN0aW9uIGlzIGN1cnJpZWQgYW5kIGFjY2VwdHMgYGFyaXR5ICsgMWAgcGFyYW1ldGVycyB3aGVyZVxcbiAqIHRoZSBmaW5hbCBwYXJhbWV0ZXIgaXMgdGhlIHRhcmdldCBvYmplY3QuXFxuICpcXG4gKiBAZnVuY1xcbiAqIEBtZW1iZXJPZiBSXFxuICogQHNpbmNlIHYwLjEuMFxcbiAqIEBjYXRlZ29yeSBGdW5jdGlvblxcbiAqIEBzaWcgTnVtYmVyIC0+IFN0cmluZyAtPiAoYSAtPiBiIC0+IC4uLiAtPiBuIC0+IE9iamVjdCAtPiAqKVxcbiAqIEBwYXJhbSB7TnVtYmVyfSBhcml0eSBOdW1iZXIgb2YgYXJndW1lbnRzIHRoZSByZXR1cm5lZCBmdW5jdGlvbiBzaG91bGQgdGFrZVxcbiAqICAgICAgICBiZWZvcmUgdGhlIHRhcmdldCBvYmplY3QuXFxuICogQHBhcmFtIHtTdHJpbmd9IG1ldGhvZCBOYW1lIG9mIHRoZSBtZXRob2QgdG8gY2FsbC5cXG4gKiBAcmV0dXJuIHtGdW5jdGlvbn0gQSBuZXcgY3VycmllZCBmdW5jdGlvbi5cXG4gKiBAZXhhbXBsZVxcbiAqXFxuICogICAgICB2YXIgc2xpY2VGcm9tID0gUi5pbnZva2VyKDEsICdzbGljZScpO1xcbiAqICAgICAgc2xpY2VGcm9tKDYsICdhYmNkZWZnaGlqa2xtJyk7IC8vPT4gJ2doaWprbG0nXFxuICogICAgICB2YXIgc2xpY2VGcm9tNiA9IFIuaW52b2tlcigyLCAnc2xpY2UnKSg2KTtcXG4gKiAgICAgIHNsaWNlRnJvbTYoOCwgJ2FiY2RlZmdoaWprbG0nKTsgLy89PiAnZ2gnXFxuICogQHN5bWIgUi5pbnZva2VyKDAsICdtZXRob2QnKShvKSA9IG9bJ21ldGhvZCddKClcXG4gKiBAc3ltYiBSLmludm9rZXIoMSwgJ21ldGhvZCcpKGEsIG8pID0gb1snbWV0aG9kJ10oYSlcXG4gKiBAc3ltYiBSLmludm9rZXIoMiwgJ21ldGhvZCcpKGEsIGIsIG8pID0gb1snbWV0aG9kJ10oYSwgYilcXG4gKi9cXG5tb2R1bGUuZXhwb3J0cyA9IF9jdXJyeTIoZnVuY3Rpb24gaW52b2tlcihhcml0eSwgbWV0aG9kKSB7XFxuICByZXR1cm4gY3VycnlOKGFyaXR5ICsgMSwgZnVuY3Rpb24oKSB7XFxuICAgIHZhciB0YXJnZXQgPSBhcmd1bWVudHNbYXJpdHldO1xcbiAgICBpZiAodGFyZ2V0ICE9IG51bGwgJiYgX2lzRnVuY3Rpb24odGFyZ2V0W21ldGhvZF0pKSB7XFxuICAgICAgcmV0dXJuIHRhcmdldFttZXRob2RdLmFwcGx5KHRhcmdldCwgQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAwLCBhcml0eSkpO1xcbiAgICB9XFxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IodG9TdHJpbmcodGFyZ2V0KSArICcgZG9lcyBub3QgaGF2ZSBhIG1ldGhvZCBuYW1lZCBcXFwiJyArIG1ldGhvZCArICdcXFwiJyk7XFxuICB9KTtcXG59KTtcXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaU1UY3pMbXB6SWl3aWMyOTFjbU5sY3lJNld5SjNaV0p3WVdOck9pOHZMeTR2Zmk5eVlXMWtZUzl6Y21NdmFXNTJiMnRsY2k1cWN6OW1NakJsSWwwc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYkluWmhjaUJmWTNWeWNua3lJRDBnY21WeGRXbHlaU2duTGk5cGJuUmxjbTVoYkM5ZlkzVnljbmt5SnlrN1hHNTJZWElnWDJselJuVnVZM1JwYjI0Z1BTQnlaWEYxYVhKbEtDY3VMMmx1ZEdWeWJtRnNMMTlwYzBaMWJtTjBhVzl1SnlrN1hHNTJZWElnWTNWeWNubE9JRDBnY21WeGRXbHlaU2duTGk5amRYSnllVTRuS1R0Y2JuWmhjaUIwYjFOMGNtbHVaeUE5SUhKbGNYVnBjbVVvSnk0dmRHOVRkSEpwYm1jbktUdGNibHh1WEc0dktpcGNiaUFxSUZSMWNtNXpJR0VnYm1GdFpXUWdiV1YwYUc5a0lIZHBkR2dnWVNCemNHVmphV1pwWldRZ1lYSnBkSGtnYVc1MGJ5QmhJR1oxYm1OMGFXOXVJSFJvWVhRZ1kyRnVJR0psWEc0Z0tpQmpZV3hzWldRZ1pHbHlaV04wYkhrZ2MzVndjR3hwWldRZ2QybDBhQ0JoY21kMWJXVnVkSE1nWVc1a0lHRWdkR0Z5WjJWMElHOWlhbVZqZEM1Y2JpQXFYRzRnS2lCVWFHVWdjbVYwZFhKdVpXUWdablZ1WTNScGIyNGdhWE1nWTNWeWNtbGxaQ0JoYm1RZ1lXTmpaWEIwY3lCZ1lYSnBkSGtnS3lBeFlDQndZWEpoYldWMFpYSnpJSGRvWlhKbFhHNGdLaUIwYUdVZ1ptbHVZV3dnY0dGeVlXMWxkR1Z5SUdseklIUm9aU0IwWVhKblpYUWdiMkpxWldOMExseHVJQ3BjYmlBcUlFQm1kVzVqWEc0Z0tpQkFiV1Z0WW1WeVQyWWdVbHh1SUNvZ1FITnBibU5sSUhZd0xqRXVNRnh1SUNvZ1FHTmhkR1ZuYjNKNUlFWjFibU4wYVc5dVhHNGdLaUJBYzJsbklFNTFiV0psY2lBdFBpQlRkSEpwYm1jZ0xUNGdLR0VnTFQ0Z1lpQXRQaUF1TGk0Z0xUNGdiaUF0UGlCUFltcGxZM1FnTFQ0Z0tpbGNiaUFxSUVCd1lYSmhiU0I3VG5WdFltVnlmU0JoY21sMGVTQk9kVzFpWlhJZ2IyWWdZWEpuZFcxbGJuUnpJSFJvWlNCeVpYUjFjbTVsWkNCbWRXNWpkR2x2YmlCemFHOTFiR1FnZEdGclpWeHVJQ29nSUNBZ0lDQWdJR0psWm05eVpTQjBhR1VnZEdGeVoyVjBJRzlpYW1WamRDNWNiaUFxSUVCd1lYSmhiU0I3VTNSeWFXNW5mU0J0WlhSb2IyUWdUbUZ0WlNCdlppQjBhR1VnYldWMGFHOWtJSFJ2SUdOaGJHd3VYRzRnS2lCQWNtVjBkWEp1SUh0R2RXNWpkR2x2Ym4wZ1FTQnVaWGNnWTNWeWNtbGxaQ0JtZFc1amRHbHZiaTVjYmlBcUlFQmxlR0Z0Y0d4bFhHNGdLbHh1SUNvZ0lDQWdJQ0IyWVhJZ2MyeHBZMlZHY205dElEMGdVaTVwYm5admEyVnlLREVzSUNkemJHbGpaU2NwTzF4dUlDb2dJQ0FnSUNCemJHbGpaVVp5YjIwb05pd2dKMkZpWTJSbFptZG9hV3ByYkcwbktUc2dMeTg5UGlBbloyaHBhbXRzYlNkY2JpQXFJQ0FnSUNBZ2RtRnlJSE5zYVdObFJuSnZiVFlnUFNCU0xtbHVkbTlyWlhJb01pd2dKM05zYVdObEp5a29OaWs3WEc0Z0tpQWdJQ0FnSUhOc2FXTmxSbkp2YlRZb09Dd2dKMkZpWTJSbFptZG9hV3ByYkcwbktUc2dMeTg5UGlBbloyZ25YRzRnS2lCQWMzbHRZaUJTTG1sdWRtOXJaWElvTUN3Z0oyMWxkR2h2WkNjcEtHOHBJRDBnYjFzbmJXVjBhRzlrSjEwb0tWeHVJQ29nUUhONWJXSWdVaTVwYm5admEyVnlLREVzSUNkdFpYUm9iMlFuS1NoaExDQnZLU0E5SUc5YkoyMWxkR2h2WkNkZEtHRXBYRzRnS2lCQWMzbHRZaUJTTG1sdWRtOXJaWElvTWl3Z0oyMWxkR2h2WkNjcEtHRXNJR0lzSUc4cElEMGdiMXNuYldWMGFHOWtKMTBvWVN3Z1lpbGNiaUFxTDF4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCZlkzVnljbmt5S0daMWJtTjBhVzl1SUdsdWRtOXJaWElvWVhKcGRIa3NJRzFsZEdodlpDa2dlMXh1SUNCeVpYUjFjbTRnWTNWeWNubE9LR0Z5YVhSNUlDc2dNU3dnWm5WdVkzUnBiMjRvS1NCN1hHNGdJQ0FnZG1GeUlIUmhjbWRsZENBOUlHRnlaM1Z0Wlc1MGMxdGhjbWwwZVYwN1hHNGdJQ0FnYVdZZ0tIUmhjbWRsZENBaFBTQnVkV3hzSUNZbUlGOXBjMFoxYm1OMGFXOXVLSFJoY21kbGRGdHRaWFJvYjJSZEtTa2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlIUmhjbWRsZEZ0dFpYUm9iMlJkTG1Gd2NHeDVLSFJoY21kbGRDd2dRWEp5WVhrdWNISnZkRzkwZVhCbExuTnNhV05sTG1OaGJHd29ZWEpuZFcxbGJuUnpMQ0F3TENCaGNtbDBlU2twTzF4dUlDQWdJSDFjYmlBZ0lDQjBhSEp2ZHlCdVpYY2dWSGx3WlVWeWNtOXlLSFJ2VTNSeWFXNW5LSFJoY21kbGRDa2dLeUFuSUdSdlpYTWdibTkwSUdoaGRtVWdZU0J0WlhSb2IyUWdibUZ0WldRZ1hDSW5JQ3NnYldWMGFHOWtJQ3NnSjF3aUp5azdYRzRnSUgwcE8xeHVmU2s3WEc1Y2JseHVYRzR2THk4dkx5OHZMeTh2THk4dkx5OHZMeTljYmk4dklGZEZRbEJCUTBzZ1JrOVBWRVZTWEc0dkx5QXVMMzR2Y21GdFpHRXZjM0pqTDJsdWRtOXJaWEl1YW5OY2JpOHZJRzF2WkhWc1pTQnBaQ0E5SURFM00xeHVMeThnYlc5a2RXeGxJR05vZFc1cmN5QTlJREFpWFN3aWJXRndjR2x1WjNNaU9pSkJRVUZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN0lpd2ljMjkxY21ObFVtOXZkQ0k2SWlKOVwiKTtcblxuLyoqKi8gfSksXG4vKiAxNzQgKi9cbi8qIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKiBhbGwgZXhwb3J0cyB1c2VkICovXG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9+L3JhbWRhL3NyYy9pc0FycmF5TGlrZS5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5ldmFsKFwidmFyIF9jdXJyeTEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL2ludGVybmFsL19jdXJyeTEgKi8gMik7XFxudmFyIF9pc0FycmF5ID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9pbnRlcm5hbC9faXNBcnJheSAqLyAzNyk7XFxudmFyIF9pc1N0cmluZyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vaW50ZXJuYWwvX2lzU3RyaW5nICovIDYwKTtcXG5cXG5cXG4vKipcXG4gKiBUZXN0cyB3aGV0aGVyIG9yIG5vdCBhbiBvYmplY3QgaXMgc2ltaWxhciB0byBhbiBhcnJheS5cXG4gKlxcbiAqIEBmdW5jXFxuICogQG1lbWJlck9mIFJcXG4gKiBAc2luY2UgdjAuNS4wXFxuICogQGNhdGVnb3J5IFR5cGVcXG4gKiBAY2F0ZWdvcnkgTGlzdFxcbiAqIEBzaWcgKiAtPiBCb29sZWFuXFxuICogQHBhcmFtIHsqfSB4IFRoZSBvYmplY3QgdG8gdGVzdC5cXG4gKiBAcmV0dXJuIHtCb29sZWFufSBgdHJ1ZWAgaWYgYHhgIGhhcyBhIG51bWVyaWMgbGVuZ3RoIHByb3BlcnR5IGFuZCBleHRyZW1lIGluZGljZXMgZGVmaW5lZDsgYGZhbHNlYCBvdGhlcndpc2UuXFxuICogQGRlcHJlY2F0ZWQgc2luY2UgdjAuMjMuMFxcbiAqIEBleGFtcGxlXFxuICpcXG4gKiAgICAgIFIuaXNBcnJheUxpa2UoW10pOyAvLz0+IHRydWVcXG4gKiAgICAgIFIuaXNBcnJheUxpa2UodHJ1ZSk7IC8vPT4gZmFsc2VcXG4gKiAgICAgIFIuaXNBcnJheUxpa2Uoe30pOyAvLz0+IGZhbHNlXFxuICogICAgICBSLmlzQXJyYXlMaWtlKHtsZW5ndGg6IDEwfSk7IC8vPT4gZmFsc2VcXG4gKiAgICAgIFIuaXNBcnJheUxpa2UoezA6ICd6ZXJvJywgOTogJ25pbmUnLCBsZW5ndGg6IDEwfSk7IC8vPT4gdHJ1ZVxcbiAqL1xcbm1vZHVsZS5leHBvcnRzID0gX2N1cnJ5MShmdW5jdGlvbiBpc0FycmF5TGlrZSh4KSB7XFxuICBpZiAoX2lzQXJyYXkoeCkpIHsgcmV0dXJuIHRydWU7IH1cXG4gIGlmICgheCkgeyByZXR1cm4gZmFsc2U7IH1cXG4gIGlmICh0eXBlb2YgeCAhPT0gJ29iamVjdCcpIHsgcmV0dXJuIGZhbHNlOyB9XFxuICBpZiAoX2lzU3RyaW5nKHgpKSB7IHJldHVybiBmYWxzZTsgfVxcbiAgaWYgKHgubm9kZVR5cGUgPT09IDEpIHsgcmV0dXJuICEheC5sZW5ndGg7IH1cXG4gIGlmICh4Lmxlbmd0aCA9PT0gMCkgeyByZXR1cm4gdHJ1ZTsgfVxcbiAgaWYgKHgubGVuZ3RoID4gMCkge1xcbiAgICByZXR1cm4geC5oYXNPd25Qcm9wZXJ0eSgwKSAmJiB4Lmhhc093blByb3BlcnR5KHgubGVuZ3RoIC0gMSk7XFxuICB9XFxuICByZXR1cm4gZmFsc2U7XFxufSk7XFxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lNVGMwTG1weklpd2ljMjkxY21ObGN5STZXeUozWldKd1lXTnJPaTh2THk0dmZpOXlZVzFrWVM5emNtTXZhWE5CY25KaGVVeHBhMlV1YW5NL05qY3laQ0pkTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lKMllYSWdYMk4xY25KNU1TQTlJSEpsY1hWcGNtVW9KeTR2YVc1MFpYSnVZV3d2WDJOMWNuSjVNU2NwTzF4dWRtRnlJRjlwYzBGeWNtRjVJRDBnY21WeGRXbHlaU2duTGk5cGJuUmxjbTVoYkM5ZmFYTkJjbkpoZVNjcE8xeHVkbUZ5SUY5cGMxTjBjbWx1WnlBOUlISmxjWFZwY21Vb0p5NHZhVzUwWlhKdVlXd3ZYMmx6VTNSeWFXNW5KeWs3WEc1Y2JseHVMeW9xWEc0Z0tpQlVaWE4wY3lCM2FHVjBhR1Z5SUc5eUlHNXZkQ0JoYmlCdlltcGxZM1FnYVhNZ2MybHRhV3hoY2lCMGJ5QmhiaUJoY25KaGVTNWNiaUFxWEc0Z0tpQkFablZ1WTF4dUlDb2dRRzFsYldKbGNrOW1JRkpjYmlBcUlFQnphVzVqWlNCMk1DNDFMakJjYmlBcUlFQmpZWFJsWjI5eWVTQlVlWEJsWEc0Z0tpQkFZMkYwWldkdmNua2dUR2x6ZEZ4dUlDb2dRSE5wWnlBcUlDMCtJRUp2YjJ4bFlXNWNiaUFxSUVCd1lYSmhiU0I3S24wZ2VDQlVhR1VnYjJKcVpXTjBJSFJ2SUhSbGMzUXVYRzRnS2lCQWNtVjBkWEp1SUh0Q2IyOXNaV0Z1ZlNCZ2RISjFaV0FnYVdZZ1lIaGdJR2hoY3lCaElHNTFiV1Z5YVdNZ2JHVnVaM1JvSUhCeWIzQmxjblI1SUdGdVpDQmxlSFJ5WlcxbElHbHVaR2xqWlhNZ1pHVm1hVzVsWkRzZ1lHWmhiSE5sWUNCdmRHaGxjbmRwYzJVdVhHNGdLaUJBWkdWd2NtVmpZWFJsWkNCemFXNWpaU0IyTUM0eU15NHdYRzRnS2lCQVpYaGhiWEJzWlZ4dUlDcGNiaUFxSUNBZ0lDQWdVaTVwYzBGeWNtRjVUR2xyWlNoYlhTazdJQzh2UFQ0Z2RISjFaVnh1SUNvZ0lDQWdJQ0JTTG1selFYSnlZWGxNYVd0bEtIUnlkV1VwT3lBdkx6MCtJR1poYkhObFhHNGdLaUFnSUNBZ0lGSXVhWE5CY25KaGVVeHBhMlVvZTMwcE95QXZMejArSUdaaGJITmxYRzRnS2lBZ0lDQWdJRkl1YVhOQmNuSmhlVXhwYTJVb2UyeGxibWQwYURvZ01UQjlLVHNnTHk4OVBpQm1ZV3h6WlZ4dUlDb2dJQ0FnSUNCU0xtbHpRWEp5WVhsTWFXdGxLSHN3T2lBbmVtVnlieWNzSURrNklDZHVhVzVsSnl3Z2JHVnVaM1JvT2lBeE1IMHBPeUF2THowK0lIUnlkV1ZjYmlBcUwxeHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQmZZM1Z5Y25reEtHWjFibU4wYVc5dUlHbHpRWEp5WVhsTWFXdGxLSGdwSUh0Y2JpQWdhV1lnS0Y5cGMwRnljbUY1S0hncEtTQjdJSEpsZEhWeWJpQjBjblZsT3lCOVhHNGdJR2xtSUNnaGVDa2dleUJ5WlhSMWNtNGdabUZzYzJVN0lIMWNiaUFnYVdZZ0tIUjVjR1Z2WmlCNElDRTlQU0FuYjJKcVpXTjBKeWtnZXlCeVpYUjFjbTRnWm1Gc2MyVTdJSDFjYmlBZ2FXWWdLRjlwYzFOMGNtbHVaeWg0S1NrZ2V5QnlaWFIxY200Z1ptRnNjMlU3SUgxY2JpQWdhV1lnS0hndWJtOWtaVlI1Y0dVZ1BUMDlJREVwSUhzZ2NtVjBkWEp1SUNFaGVDNXNaVzVuZEdnN0lIMWNiaUFnYVdZZ0tIZ3ViR1Z1WjNSb0lEMDlQU0F3S1NCN0lISmxkSFZ5YmlCMGNuVmxPeUI5WEc0Z0lHbG1JQ2g0TG14bGJtZDBhQ0ErSURBcElIdGNiaUFnSUNCeVpYUjFjbTRnZUM1b1lYTlBkMjVRY205d1pYSjBlU2d3S1NBbUppQjRMbWhoYzA5M2JsQnliM0JsY25SNUtIZ3ViR1Z1WjNSb0lDMGdNU2s3WEc0Z0lIMWNiaUFnY21WMGRYSnVJR1poYkhObE8xeHVmU2s3WEc1Y2JseHVYRzR2THk4dkx5OHZMeTh2THk4dkx5OHZMeTljYmk4dklGZEZRbEJCUTBzZ1JrOVBWRVZTWEc0dkx5QXVMMzR2Y21GdFpHRXZjM0pqTDJselFYSnlZWGxNYVd0bExtcHpYRzR2THlCdGIyUjFiR1VnYVdRZ1BTQXhOelJjYmk4dklHMXZaSFZzWlNCamFIVnVhM01nUFNBd0lsMHNJbTFoY0hCcGJtZHpJam9pUVVGQlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUc2lMQ0p6YjNWeVkyVlNiMjkwSWpvaUluMD1cIik7XG5cbi8qKiovIH0pLFxuLyogMTc1ICovXG4vKiBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyogYWxsIGV4cG9ydHMgdXNlZCAqL1xuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vfi9yYW1kYS9zcmMvaXNOaWwuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuZXZhbChcInZhciBfY3VycnkxID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9pbnRlcm5hbC9fY3VycnkxICovIDIpO1xcblxcblxcbi8qKlxcbiAqIENoZWNrcyBpZiB0aGUgaW5wdXQgdmFsdWUgaXMgYG51bGxgIG9yIGB1bmRlZmluZWRgLlxcbiAqXFxuICogQGZ1bmNcXG4gKiBAbWVtYmVyT2YgUlxcbiAqIEBzaW5jZSB2MC45LjBcXG4gKiBAY2F0ZWdvcnkgVHlwZVxcbiAqIEBzaWcgKiAtPiBCb29sZWFuXFxuICogQHBhcmFtIHsqfSB4IFRoZSB2YWx1ZSB0byB0ZXN0LlxcbiAqIEByZXR1cm4ge0Jvb2xlYW59IGB0cnVlYCBpZiBgeGAgaXMgYHVuZGVmaW5lZGAgb3IgYG51bGxgLCBvdGhlcndpc2UgYGZhbHNlYC5cXG4gKiBAZXhhbXBsZVxcbiAqXFxuICogICAgICBSLmlzTmlsKG51bGwpOyAvLz0+IHRydWVcXG4gKiAgICAgIFIuaXNOaWwodW5kZWZpbmVkKTsgLy89PiB0cnVlXFxuICogICAgICBSLmlzTmlsKDApOyAvLz0+IGZhbHNlXFxuICogICAgICBSLmlzTmlsKFtdKTsgLy89PiBmYWxzZVxcbiAqL1xcbm1vZHVsZS5leHBvcnRzID0gX2N1cnJ5MShmdW5jdGlvbiBpc05pbCh4KSB7IHJldHVybiB4ID09IG51bGw7IH0pO1xcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pTVRjMUxtcHpJaXdpYzI5MWNtTmxjeUk2V3lKM1pXSndZV05yT2k4dkx5NHZmaTl5WVcxa1lTOXpjbU12YVhOT2FXd3Vhbk0vT1RVNE55SmRMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUoyWVhJZ1gyTjFjbko1TVNBOUlISmxjWFZwY21Vb0p5NHZhVzUwWlhKdVlXd3ZYMk4xY25KNU1TY3BPMXh1WEc1Y2JpOHFLbHh1SUNvZ1EyaGxZMnR6SUdsbUlIUm9aU0JwYm5CMWRDQjJZV3gxWlNCcGN5QmdiblZzYkdBZ2IzSWdZSFZ1WkdWbWFXNWxaR0F1WEc0Z0tseHVJQ29nUUdaMWJtTmNiaUFxSUVCdFpXMWlaWEpQWmlCU1hHNGdLaUJBYzJsdVkyVWdkakF1T1M0d1hHNGdLaUJBWTJGMFpXZHZjbmtnVkhsd1pWeHVJQ29nUUhOcFp5QXFJQzArSUVKdmIyeGxZVzVjYmlBcUlFQndZWEpoYlNCN0tuMGdlQ0JVYUdVZ2RtRnNkV1VnZEc4Z2RHVnpkQzVjYmlBcUlFQnlaWFIxY200Z2UwSnZiMnhsWVc1OUlHQjBjblZsWUNCcFppQmdlR0FnYVhNZ1lIVnVaR1ZtYVc1bFpHQWdiM0lnWUc1MWJHeGdMQ0J2ZEdobGNuZHBjMlVnWUdaaGJITmxZQzVjYmlBcUlFQmxlR0Z0Y0d4bFhHNGdLbHh1SUNvZ0lDQWdJQ0JTTG1selRtbHNLRzUxYkd3cE95QXZMejArSUhSeWRXVmNiaUFxSUNBZ0lDQWdVaTVwYzA1cGJDaDFibVJsWm1sdVpXUXBPeUF2THowK0lIUnlkV1ZjYmlBcUlDQWdJQ0FnVWk1cGMwNXBiQ2d3S1RzZ0x5ODlQaUJtWVd4elpWeHVJQ29nSUNBZ0lDQlNMbWx6VG1sc0tGdGRLVHNnTHk4OVBpQm1ZV3h6WlZ4dUlDb3ZYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJRjlqZFhKeWVURW9ablZ1WTNScGIyNGdhWE5PYVd3b2VDa2dleUJ5WlhSMWNtNGdlQ0E5UFNCdWRXeHNPeUI5S1R0Y2JseHVYRzVjYmk4dkx5OHZMeTh2THk4dkx5OHZMeTh2TDF4dUx5OGdWMFZDVUVGRFN5QkdUMDlVUlZKY2JpOHZJQzR2Zmk5eVlXMWtZUzl6Y21NdmFYTk9hV3d1YW5OY2JpOHZJRzF2WkhWc1pTQnBaQ0E5SURFM05WeHVMeThnYlc5a2RXeGxJR05vZFc1cmN5QTlJREFpWFN3aWJXRndjR2x1WjNNaU9pSkJRVUZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzaUxDSnpiM1Z5WTJWU2IyOTBJam9pSW4wPVwiKTtcblxuLyoqKi8gfSksXG4vKiAxNzYgKi9cbi8qIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKiBhbGwgZXhwb3J0cyB1c2VkICovXG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL34vcmFtZGEvc3JjL2xpZnQuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5ldmFsKFwidmFyIF9jdXJyeTEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL2ludGVybmFsL19jdXJyeTEgKi8gMik7XFxudmFyIGxpZnROID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9saWZ0TiAqLyAxNzcpO1xcblxcblxcbi8qKlxcbiAqIFxcXCJsaWZ0c1xcXCIgYSBmdW5jdGlvbiBvZiBhcml0eSA+IDEgc28gdGhhdCBpdCBtYXkgXFxcIm1hcCBvdmVyXFxcIiBhIGxpc3QsIEZ1bmN0aW9uIG9yIG90aGVyXFxuICogb2JqZWN0IHRoYXQgc2F0aXNmaWVzIHRoZSBbRmFudGFzeUxhbmQgQXBwbHkgc3BlY10oaHR0cHM6Ly9naXRodWIuY29tL2ZhbnRhc3lsYW5kL2ZhbnRhc3ktbGFuZCNhcHBseSkuXFxuICpcXG4gKiBAZnVuY1xcbiAqIEBtZW1iZXJPZiBSXFxuICogQHNpbmNlIHYwLjcuMFxcbiAqIEBjYXRlZ29yeSBGdW5jdGlvblxcbiAqIEBzaWcgKCouLi4gLT4gKikgLT4gKFsqXS4uLiAtPiBbKl0pXFxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGZ1bmN0aW9uIHRvIGxpZnQgaW50byBoaWdoZXIgY29udGV4dFxcbiAqIEByZXR1cm4ge0Z1bmN0aW9ufSBUaGUgbGlmdGVkIGZ1bmN0aW9uLlxcbiAqIEBzZWUgUi5saWZ0TlxcbiAqIEBleGFtcGxlXFxuICpcXG4gKiAgICAgIHZhciBtYWRkMyA9IFIubGlmdCgoYSwgYiwgYykgPT4gYSArIGIgKyBjKTtcXG4gKlxcbiAqICAgICAgbWFkZDMoWzEsMiwzXSwgWzEsMiwzXSwgWzFdKTsgLy89PiBbMywgNCwgNSwgNCwgNSwgNiwgNSwgNiwgN11cXG4gKlxcbiAqICAgICAgdmFyIG1hZGQ1ID0gUi5saWZ0KChhLCBiLCBjLCBkLCBlKSA9PiBhICsgYiArIGMgKyBkICsgZSk7XFxuICpcXG4gKiAgICAgIG1hZGQ1KFsxLDJdLCBbM10sIFs0LCA1XSwgWzZdLCBbNywgOF0pOyAvLz0+IFsyMSwgMjIsIDIyLCAyMywgMjIsIDIzLCAyMywgMjRdXFxuICovXFxubW9kdWxlLmV4cG9ydHMgPSBfY3VycnkxKGZ1bmN0aW9uIGxpZnQoZm4pIHtcXG4gIHJldHVybiBsaWZ0Tihmbi5sZW5ndGgsIGZuKTtcXG59KTtcXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaU1UYzJMbXB6SWl3aWMyOTFjbU5sY3lJNld5SjNaV0p3WVdOck9pOHZMeTR2Zmk5eVlXMWtZUzl6Y21NdmJHbG1kQzVxY3o4MlltRm1JbDBzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSW5aaGNpQmZZM1Z5Y25reElEMGdjbVZ4ZFdseVpTZ25MaTlwYm5SbGNtNWhiQzlmWTNWeWNua3hKeWs3WEc1MllYSWdiR2xtZEU0Z1BTQnlaWEYxYVhKbEtDY3VMMnhwWm5ST0p5azdYRzVjYmx4dUx5b3FYRzRnS2lCY0lteHBablJ6WENJZ1lTQm1kVzVqZEdsdmJpQnZaaUJoY21sMGVTQStJREVnYzI4Z2RHaGhkQ0JwZENCdFlYa2dYQ0p0WVhBZ2IzWmxjbHdpSUdFZ2JHbHpkQ3dnUm5WdVkzUnBiMjRnYjNJZ2IzUm9aWEpjYmlBcUlHOWlhbVZqZENCMGFHRjBJSE5oZEdselptbGxjeUIwYUdVZ1cwWmhiblJoYzNsTVlXNWtJRUZ3Y0d4NUlITndaV05kS0doMGRIQnpPaTh2WjJsMGFIVmlMbU52YlM5bVlXNTBZWE41YkdGdVpDOW1ZVzUwWVhONUxXeGhibVFqWVhCd2JIa3BMbHh1SUNwY2JpQXFJRUJtZFc1alhHNGdLaUJBYldWdFltVnlUMllnVWx4dUlDb2dRSE5wYm1ObElIWXdMamN1TUZ4dUlDb2dRR05oZEdWbmIzSjVJRVoxYm1OMGFXOXVYRzRnS2lCQWMybG5JQ2dxTGk0dUlDMCtJQ29wSUMwK0lDaGJLbDB1TGk0Z0xUNGdXeXBkS1Z4dUlDb2dRSEJoY21GdElIdEdkVzVqZEdsdmJuMGdabTRnVkdobElHWjFibU4wYVc5dUlIUnZJR3hwWm5RZ2FXNTBieUJvYVdkb1pYSWdZMjl1ZEdWNGRGeHVJQ29nUUhKbGRIVnliaUI3Um5WdVkzUnBiMjU5SUZSb1pTQnNhV1owWldRZ1puVnVZM1JwYjI0dVhHNGdLaUJBYzJWbElGSXViR2xtZEU1Y2JpQXFJRUJsZUdGdGNHeGxYRzRnS2x4dUlDb2dJQ0FnSUNCMllYSWdiV0ZrWkRNZ1BTQlNMbXhwWm5Rb0tHRXNJR0lzSUdNcElEMCtJR0VnS3lCaUlDc2dZeWs3WEc0Z0tseHVJQ29nSUNBZ0lDQnRZV1JrTXloYk1Td3lMRE5kTENCYk1Td3lMRE5kTENCYk1WMHBPeUF2THowK0lGc3pMQ0EwTENBMUxDQTBMQ0ExTENBMkxDQTFMQ0EyTENBM1hWeHVJQ3BjYmlBcUlDQWdJQ0FnZG1GeUlHMWhaR1ExSUQwZ1VpNXNhV1owS0NoaExDQmlMQ0JqTENCa0xDQmxLU0E5UGlCaElDc2dZaUFySUdNZ0t5QmtJQ3NnWlNrN1hHNGdLbHh1SUNvZ0lDQWdJQ0J0WVdSa05TaGJNU3d5WFN3Z1d6TmRMQ0JiTkN3Z05WMHNJRnMyWFN3Z1d6Y3NJRGhkS1RzZ0x5ODlQaUJiTWpFc0lESXlMQ0F5TWl3Z01qTXNJREl5TENBeU15d2dNak1zSURJMFhWeHVJQ292WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUY5amRYSnllVEVvWm5WdVkzUnBiMjRnYkdsbWRDaG1iaWtnZTF4dUlDQnlaWFIxY200Z2JHbG1kRTRvWm00dWJHVnVaM1JvTENCbWJpazdYRzU5S1R0Y2JseHVYRzVjYmk4dkx5OHZMeTh2THk4dkx5OHZMeTh2TDF4dUx5OGdWMFZDVUVGRFN5QkdUMDlVUlZKY2JpOHZJQzR2Zmk5eVlXMWtZUzl6Y21NdmJHbG1kQzVxYzF4dUx5OGdiVzlrZFd4bElHbGtJRDBnTVRjMlhHNHZMeUJ0YjJSMWJHVWdZMmgxYm10eklEMGdNQ0pkTENKdFlYQndhVzVuY3lJNklrRkJRVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUc2lMQ0p6YjNWeVkyVlNiMjkwSWpvaUluMD1cIik7XG5cbi8qKiovIH0pLFxuLyogMTc3ICovXG4vKiBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyogYWxsIGV4cG9ydHMgdXNlZCAqL1xuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vfi9yYW1kYS9zcmMvbGlmdE4uanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuZXZhbChcInZhciBfY3VycnkyID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9pbnRlcm5hbC9fY3VycnkyICovIDEpO1xcbnZhciBfcmVkdWNlID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9pbnRlcm5hbC9fcmVkdWNlICovIDE2KTtcXG52YXIgYXAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL2FwICovIDE0Mik7XFxudmFyIGN1cnJ5TiA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vY3VycnlOICovIDYpO1xcbnZhciBtYXAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL21hcCAqLyA4KTtcXG5cXG5cXG4vKipcXG4gKiBcXFwibGlmdHNcXFwiIGEgZnVuY3Rpb24gdG8gYmUgdGhlIHNwZWNpZmllZCBhcml0eSwgc28gdGhhdCBpdCBtYXkgXFxcIm1hcCBvdmVyXFxcIiB0aGF0XFxuICogbWFueSBsaXN0cywgRnVuY3Rpb25zIG9yIG90aGVyIG9iamVjdHMgdGhhdCBzYXRpc2Z5IHRoZSBbRmFudGFzeUxhbmQgQXBwbHkgc3BlY10oaHR0cHM6Ly9naXRodWIuY29tL2ZhbnRhc3lsYW5kL2ZhbnRhc3ktbGFuZCNhcHBseSkuXFxuICpcXG4gKiBAZnVuY1xcbiAqIEBtZW1iZXJPZiBSXFxuICogQHNpbmNlIHYwLjcuMFxcbiAqIEBjYXRlZ29yeSBGdW5jdGlvblxcbiAqIEBzaWcgTnVtYmVyIC0+ICgqLi4uIC0+ICopIC0+IChbKl0uLi4gLT4gWypdKVxcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBmdW5jdGlvbiB0byBsaWZ0IGludG8gaGlnaGVyIGNvbnRleHRcXG4gKiBAcmV0dXJuIHtGdW5jdGlvbn0gVGhlIGxpZnRlZCBmdW5jdGlvbi5cXG4gKiBAc2VlIFIubGlmdCwgUi5hcFxcbiAqIEBleGFtcGxlXFxuICpcXG4gKiAgICAgIHZhciBtYWRkMyA9IFIubGlmdE4oMywgKC4uLmFyZ3MpID0+IFIuc3VtKGFyZ3MpKTtcXG4gKiAgICAgIG1hZGQzKFsxLDIsM10sIFsxLDIsM10sIFsxXSk7IC8vPT4gWzMsIDQsIDUsIDQsIDUsIDYsIDUsIDYsIDddXFxuICovXFxubW9kdWxlLmV4cG9ydHMgPSBfY3VycnkyKGZ1bmN0aW9uIGxpZnROKGFyaXR5LCBmbikge1xcbiAgdmFyIGxpZnRlZCA9IGN1cnJ5Tihhcml0eSwgZm4pO1xcbiAgcmV0dXJuIGN1cnJ5Tihhcml0eSwgZnVuY3Rpb24oKSB7XFxuICAgIHJldHVybiBfcmVkdWNlKGFwLCBtYXAobGlmdGVkLCBhcmd1bWVudHNbMF0pLCBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpKTtcXG4gIH0pO1xcbn0pO1xcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pTVRjM0xtcHpJaXdpYzI5MWNtTmxjeUk2V3lKM1pXSndZV05yT2k4dkx5NHZmaTl5WVcxa1lTOXpjbU12YkdsbWRFNHVhbk0vWmpjNFpDSmRMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUoyWVhJZ1gyTjFjbko1TWlBOUlISmxjWFZwY21Vb0p5NHZhVzUwWlhKdVlXd3ZYMk4xY25KNU1pY3BPMXh1ZG1GeUlGOXlaV1IxWTJVZ1BTQnlaWEYxYVhKbEtDY3VMMmx1ZEdWeWJtRnNMMTl5WldSMVkyVW5LVHRjYm5aaGNpQmhjQ0E5SUhKbGNYVnBjbVVvSnk0dllYQW5LVHRjYm5aaGNpQmpkWEp5ZVU0Z1BTQnlaWEYxYVhKbEtDY3VMMk4xY25KNVRpY3BPMXh1ZG1GeUlHMWhjQ0E5SUhKbGNYVnBjbVVvSnk0dmJXRndKeWs3WEc1Y2JseHVMeW9xWEc0Z0tpQmNJbXhwWm5SelhDSWdZU0JtZFc1amRHbHZiaUIwYnlCaVpTQjBhR1VnYzNCbFkybG1hV1ZrSUdGeWFYUjVMQ0J6YnlCMGFHRjBJR2wwSUcxaGVTQmNJbTFoY0NCdmRtVnlYQ0lnZEdoaGRGeHVJQ29nYldGdWVTQnNhWE4wY3l3Z1JuVnVZM1JwYjI1eklHOXlJRzkwYUdWeUlHOWlhbVZqZEhNZ2RHaGhkQ0J6WVhScGMyWjVJSFJvWlNCYlJtRnVkR0Z6ZVV4aGJtUWdRWEJ3YkhrZ2MzQmxZMTBvYUhSMGNITTZMeTluYVhSb2RXSXVZMjl0TDJaaGJuUmhjM2xzWVc1a0wyWmhiblJoYzNrdGJHRnVaQ05oY0hCc2VTa3VYRzRnS2x4dUlDb2dRR1oxYm1OY2JpQXFJRUJ0WlcxaVpYSlBaaUJTWEc0Z0tpQkFjMmx1WTJVZ2RqQXVOeTR3WEc0Z0tpQkFZMkYwWldkdmNua2dSblZ1WTNScGIyNWNiaUFxSUVCemFXY2dUblZ0WW1WeUlDMCtJQ2dxTGk0dUlDMCtJQ29wSUMwK0lDaGJLbDB1TGk0Z0xUNGdXeXBkS1Z4dUlDb2dRSEJoY21GdElIdEdkVzVqZEdsdmJuMGdabTRnVkdobElHWjFibU4wYVc5dUlIUnZJR3hwWm5RZ2FXNTBieUJvYVdkb1pYSWdZMjl1ZEdWNGRGeHVJQ29nUUhKbGRIVnliaUI3Um5WdVkzUnBiMjU5SUZSb1pTQnNhV1owWldRZ1puVnVZM1JwYjI0dVhHNGdLaUJBYzJWbElGSXViR2xtZEN3Z1VpNWhjRnh1SUNvZ1FHVjRZVzF3YkdWY2JpQXFYRzRnS2lBZ0lDQWdJSFpoY2lCdFlXUmtNeUE5SUZJdWJHbG1kRTRvTXl3Z0tDNHVMbUZ5WjNNcElEMCtJRkl1YzNWdEtHRnlaM01wS1R0Y2JpQXFJQ0FnSUNBZ2JXRmtaRE1vV3pFc01pd3pYU3dnV3pFc01pd3pYU3dnV3pGZEtUc2dMeTg5UGlCYk15d2dOQ3dnTlN3Z05Dd2dOU3dnTml3Z05Td2dOaXdnTjExY2JpQXFMMXh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0JmWTNWeWNua3lLR1oxYm1OMGFXOXVJR3hwWm5ST0tHRnlhWFI1TENCbWJpa2dlMXh1SUNCMllYSWdiR2xtZEdWa0lEMGdZM1Z5Y25sT0tHRnlhWFI1TENCbWJpazdYRzRnSUhKbGRIVnliaUJqZFhKeWVVNG9ZWEpwZEhrc0lHWjFibU4wYVc5dUtDa2dlMXh1SUNBZ0lISmxkSFZ5YmlCZmNtVmtkV05sS0dGd0xDQnRZWEFvYkdsbWRHVmtMQ0JoY21kMWJXVnVkSE5iTUYwcExDQkJjbkpoZVM1d2NtOTBiM1I1Y0dVdWMyeHBZMlV1WTJGc2JDaGhjbWQxYldWdWRITXNJREVwS1R0Y2JpQWdmU2s3WEc1OUtUdGNibHh1WEc1Y2JpOHZMeTh2THk4dkx5OHZMeTh2THk4dkwxeHVMeThnVjBWQ1VFRkRTeUJHVDA5VVJWSmNiaTh2SUM0dmZpOXlZVzFrWVM5emNtTXZiR2xtZEU0dWFuTmNiaTh2SUcxdlpIVnNaU0JwWkNBOUlERTNOMXh1THk4Z2JXOWtkV3hsSUdOb2RXNXJjeUE5SURBaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUc2lMQ0p6YjNWeVkyVlNiMjkwSWpvaUluMD1cIik7XG5cbi8qKiovIH0pLFxuLyogMTc4ICovXG4vKiBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyogYWxsIGV4cG9ydHMgdXNlZCAqL1xuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vfi9yYW1kYS9zcmMvbWVyZ2UuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuZXZhbChcInZhciBfYXNzaWduID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9pbnRlcm5hbC9fYXNzaWduICovIDE1Mik7XFxudmFyIF9jdXJyeTIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL2ludGVybmFsL19jdXJyeTIgKi8gMSk7XFxuXFxuXFxuLyoqXFxuICogQ3JlYXRlIGEgbmV3IG9iamVjdCB3aXRoIHRoZSBvd24gcHJvcGVydGllcyBvZiB0aGUgZmlyc3Qgb2JqZWN0IG1lcmdlZCB3aXRoXFxuICogdGhlIG93biBwcm9wZXJ0aWVzIG9mIHRoZSBzZWNvbmQgb2JqZWN0LiBJZiBhIGtleSBleGlzdHMgaW4gYm90aCBvYmplY3RzLFxcbiAqIHRoZSB2YWx1ZSBmcm9tIHRoZSBzZWNvbmQgb2JqZWN0IHdpbGwgYmUgdXNlZC5cXG4gKlxcbiAqIEBmdW5jXFxuICogQG1lbWJlck9mIFJcXG4gKiBAc2luY2UgdjAuMS4wXFxuICogQGNhdGVnb3J5IE9iamVjdFxcbiAqIEBzaWcge2s6IHZ9IC0+IHtrOiB2fSAtPiB7azogdn1cXG4gKiBAcGFyYW0ge09iamVjdH0gbFxcbiAqIEBwYXJhbSB7T2JqZWN0fSByXFxuICogQHJldHVybiB7T2JqZWN0fVxcbiAqIEBzZWUgUi5tZXJnZVdpdGgsIFIubWVyZ2VXaXRoS2V5XFxuICogQGV4YW1wbGVcXG4gKlxcbiAqICAgICAgUi5tZXJnZSh7ICduYW1lJzogJ2ZyZWQnLCAnYWdlJzogMTAgfSwgeyAnYWdlJzogNDAgfSk7XFxuICogICAgICAvLz0+IHsgJ25hbWUnOiAnZnJlZCcsICdhZ2UnOiA0MCB9XFxuICpcXG4gKiAgICAgIHZhciByZXNldFRvRGVmYXVsdCA9IFIubWVyZ2UoUi5fXywge3g6IDB9KTtcXG4gKiAgICAgIHJlc2V0VG9EZWZhdWx0KHt4OiA1LCB5OiAyfSk7IC8vPT4ge3g6IDAsIHk6IDJ9XFxuICogQHN5bWIgUi5tZXJnZSh7IHg6IDEsIHk6IDIgfSwgeyB5OiA1LCB6OiAzIH0pID0geyB4OiAxLCB5OiA1LCB6OiAzIH1cXG4gKi9cXG5tb2R1bGUuZXhwb3J0cyA9IF9jdXJyeTIoZnVuY3Rpb24gbWVyZ2UobCwgcikge1xcbiAgcmV0dXJuIF9hc3NpZ24oe30sIGwsIHIpO1xcbn0pO1xcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pTVRjNExtcHpJaXdpYzI5MWNtTmxjeUk2V3lKM1pXSndZV05yT2k4dkx5NHZmaTl5WVcxa1lTOXpjbU12YldWeVoyVXVhbk0vTkdZd05pSmRMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUoyWVhJZ1gyRnpjMmxuYmlBOUlISmxjWFZwY21Vb0p5NHZhVzUwWlhKdVlXd3ZYMkZ6YzJsbmJpY3BPMXh1ZG1GeUlGOWpkWEp5ZVRJZ1BTQnlaWEYxYVhKbEtDY3VMMmx1ZEdWeWJtRnNMMTlqZFhKeWVUSW5LVHRjYmx4dVhHNHZLaXBjYmlBcUlFTnlaV0YwWlNCaElHNWxkeUJ2WW1wbFkzUWdkMmwwYUNCMGFHVWdiM2R1SUhCeWIzQmxjblJwWlhNZ2IyWWdkR2hsSUdacGNuTjBJRzlpYW1WamRDQnRaWEpuWldRZ2QybDBhRnh1SUNvZ2RHaGxJRzkzYmlCd2NtOXdaWEowYVdWeklHOW1JSFJvWlNCelpXTnZibVFnYjJKcVpXTjBMaUJKWmlCaElHdGxlU0JsZUdsemRITWdhVzRnWW05MGFDQnZZbXBsWTNSekxGeHVJQ29nZEdobElIWmhiSFZsSUdaeWIyMGdkR2hsSUhObFkyOXVaQ0J2WW1wbFkzUWdkMmxzYkNCaVpTQjFjMlZrTGx4dUlDcGNiaUFxSUVCbWRXNWpYRzRnS2lCQWJXVnRZbVZ5VDJZZ1VseHVJQ29nUUhOcGJtTmxJSFl3TGpFdU1GeHVJQ29nUUdOaGRHVm5iM0o1SUU5aWFtVmpkRnh1SUNvZ1FITnBaeUI3YXpvZ2RuMGdMVDRnZTJzNklIWjlJQzArSUh0ck9pQjJmVnh1SUNvZ1FIQmhjbUZ0SUh0UFltcGxZM1I5SUd4Y2JpQXFJRUJ3WVhKaGJTQjdUMkpxWldOMGZTQnlYRzRnS2lCQWNtVjBkWEp1SUh0UFltcGxZM1I5WEc0Z0tpQkFjMlZsSUZJdWJXVnlaMlZYYVhSb0xDQlNMbTFsY21kbFYybDBhRXRsZVZ4dUlDb2dRR1Y0WVcxd2JHVmNiaUFxWEc0Z0tpQWdJQ0FnSUZJdWJXVnlaMlVvZXlBbmJtRnRaU2M2SUNkbWNtVmtKeXdnSjJGblpTYzZJREV3SUgwc0lIc2dKMkZuWlNjNklEUXdJSDBwTzF4dUlDb2dJQ0FnSUNBdkx6MCtJSHNnSjI1aGJXVW5PaUFuWm5KbFpDY3NJQ2RoWjJVbk9pQTBNQ0I5WEc0Z0tseHVJQ29nSUNBZ0lDQjJZWElnY21WelpYUlViMFJsWm1GMWJIUWdQU0JTTG0xbGNtZGxLRkl1WDE4c0lIdDRPaUF3ZlNrN1hHNGdLaUFnSUNBZ0lISmxjMlYwVkc5RVpXWmhkV3gwS0h0NE9pQTFMQ0I1T2lBeWZTazdJQzh2UFQ0Z2UzZzZJREFzSUhrNklESjlYRzRnS2lCQWMzbHRZaUJTTG0xbGNtZGxLSHNnZURvZ01Td2dlVG9nTWlCOUxDQjdJSGs2SURVc0lIbzZJRE1nZlNrZ1BTQjdJSGc2SURFc0lIazZJRFVzSUhvNklETWdmVnh1SUNvdlhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlGOWpkWEp5ZVRJb1puVnVZM1JwYjI0Z2JXVnlaMlVvYkN3Z2Npa2dlMXh1SUNCeVpYUjFjbTRnWDJGemMybG5iaWg3ZlN3Z2JDd2djaWs3WEc1OUtUdGNibHh1WEc1Y2JpOHZMeTh2THk4dkx5OHZMeTh2THk4dkwxeHVMeThnVjBWQ1VFRkRTeUJHVDA5VVJWSmNiaTh2SUM0dmZpOXlZVzFrWVM5emNtTXZiV1Z5WjJVdWFuTmNiaTh2SUcxdlpIVnNaU0JwWkNBOUlERTNPRnh1THk4Z2JXOWtkV3hsSUdOb2RXNXJjeUE5SURBaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUc2lMQ0p6YjNWeVkyVlNiMjkwSWpvaUluMD1cIik7XG5cbi8qKiovIH0pLFxuLyogMTc5ICovXG4vKiBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyogYWxsIGV4cG9ydHMgdXNlZCAqL1xuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL34vcmFtZGEvc3JjL21lcmdlV2l0aC5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuZXZhbChcInZhciBfY3VycnkzID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9pbnRlcm5hbC9fY3VycnkzICovIDcpO1xcbnZhciBtZXJnZVdpdGhLZXkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL21lcmdlV2l0aEtleSAqLyAxODApO1xcblxcblxcbi8qKlxcbiAqIENyZWF0ZXMgYSBuZXcgb2JqZWN0IHdpdGggdGhlIG93biBwcm9wZXJ0aWVzIG9mIHRoZSB0d28gcHJvdmlkZWQgb2JqZWN0cy4gSWZcXG4gKiBhIGtleSBleGlzdHMgaW4gYm90aCBvYmplY3RzLCB0aGUgcHJvdmlkZWQgZnVuY3Rpb24gaXMgYXBwbGllZCB0byB0aGUgdmFsdWVzXFxuICogYXNzb2NpYXRlZCB3aXRoIHRoZSBrZXkgaW4gZWFjaCBvYmplY3QsIHdpdGggdGhlIHJlc3VsdCBiZWluZyB1c2VkIGFzIHRoZVxcbiAqIHZhbHVlIGFzc29jaWF0ZWQgd2l0aCB0aGUga2V5IGluIHRoZSByZXR1cm5lZCBvYmplY3QuIFRoZSBrZXkgd2lsbCBiZVxcbiAqIGV4Y2x1ZGVkIGZyb20gdGhlIHJldHVybmVkIG9iamVjdCBpZiB0aGUgcmVzdWx0aW5nIHZhbHVlIGlzIGB1bmRlZmluZWRgLlxcbiAqXFxuICogQGZ1bmNcXG4gKiBAbWVtYmVyT2YgUlxcbiAqIEBzaW5jZSB2MC4xOS4wXFxuICogQGNhdGVnb3J5IE9iamVjdFxcbiAqIEBzaWcgKGEgLT4gYSAtPiBhKSAtPiB7YX0gLT4ge2F9IC0+IHthfVxcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXFxuICogQHBhcmFtIHtPYmplY3R9IGxcXG4gKiBAcGFyYW0ge09iamVjdH0gclxcbiAqIEByZXR1cm4ge09iamVjdH1cXG4gKiBAc2VlIFIubWVyZ2UsIFIubWVyZ2VXaXRoS2V5XFxuICogQGV4YW1wbGVcXG4gKlxcbiAqICAgICAgUi5tZXJnZVdpdGgoUi5jb25jYXQsXFxuICogICAgICAgICAgICAgICAgICB7IGE6IHRydWUsIHZhbHVlczogWzEwLCAyMF0gfSxcXG4gKiAgICAgICAgICAgICAgICAgIHsgYjogdHJ1ZSwgdmFsdWVzOiBbMTUsIDM1XSB9KTtcXG4gKiAgICAgIC8vPT4geyBhOiB0cnVlLCBiOiB0cnVlLCB2YWx1ZXM6IFsxMCwgMjAsIDE1LCAzNV0gfVxcbiAqL1xcbm1vZHVsZS5leHBvcnRzID0gX2N1cnJ5MyhmdW5jdGlvbiBtZXJnZVdpdGgoZm4sIGwsIHIpIHtcXG4gIHJldHVybiBtZXJnZVdpdGhLZXkoZnVuY3Rpb24oXywgX2wsIF9yKSB7XFxuICAgIHJldHVybiBmbihfbCwgX3IpO1xcbiAgfSwgbCwgcik7XFxufSk7XFxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lNVGM1TG1weklpd2ljMjkxY21ObGN5STZXeUozWldKd1lXTnJPaTh2THk0dmZpOXlZVzFrWVM5emNtTXZiV1Z5WjJWWGFYUm9MbXB6UDJVNFl6Y2lYU3dpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpZG1GeUlGOWpkWEp5ZVRNZ1BTQnlaWEYxYVhKbEtDY3VMMmx1ZEdWeWJtRnNMMTlqZFhKeWVUTW5LVHRjYm5aaGNpQnRaWEpuWlZkcGRHaExaWGtnUFNCeVpYRjFhWEpsS0NjdUwyMWxjbWRsVjJsMGFFdGxlU2NwTzF4dVhHNWNiaThxS2x4dUlDb2dRM0psWVhSbGN5QmhJRzVsZHlCdlltcGxZM1FnZDJsMGFDQjBhR1VnYjNkdUlIQnliM0JsY25ScFpYTWdiMllnZEdobElIUjNieUJ3Y205MmFXUmxaQ0J2WW1wbFkzUnpMaUJKWmx4dUlDb2dZU0JyWlhrZ1pYaHBjM1J6SUdsdUlHSnZkR2dnYjJKcVpXTjBjeXdnZEdobElIQnliM1pwWkdWa0lHWjFibU4wYVc5dUlHbHpJR0Z3Y0d4cFpXUWdkRzhnZEdobElIWmhiSFZsYzF4dUlDb2dZWE56YjJOcFlYUmxaQ0IzYVhSb0lIUm9aU0JyWlhrZ2FXNGdaV0ZqYUNCdlltcGxZM1FzSUhkcGRHZ2dkR2hsSUhKbGMzVnNkQ0JpWldsdVp5QjFjMlZrSUdGeklIUm9aVnh1SUNvZ2RtRnNkV1VnWVhOemIyTnBZWFJsWkNCM2FYUm9JSFJvWlNCclpYa2dhVzRnZEdobElISmxkSFZ5Ym1Wa0lHOWlhbVZqZEM0Z1ZHaGxJR3RsZVNCM2FXeHNJR0psWEc0Z0tpQmxlR05zZFdSbFpDQm1jbTl0SUhSb1pTQnlaWFIxY201bFpDQnZZbXBsWTNRZ2FXWWdkR2hsSUhKbGMzVnNkR2x1WnlCMllXeDFaU0JwY3lCZ2RXNWtaV1pwYm1Wa1lDNWNiaUFxWEc0Z0tpQkFablZ1WTF4dUlDb2dRRzFsYldKbGNrOW1JRkpjYmlBcUlFQnphVzVqWlNCMk1DNHhPUzR3WEc0Z0tpQkFZMkYwWldkdmNua2dUMkpxWldOMFhHNGdLaUJBYzJsbklDaGhJQzArSUdFZ0xUNGdZU2tnTFQ0Z2UyRjlJQzArSUh0aGZTQXRQaUI3WVgxY2JpQXFJRUJ3WVhKaGJTQjdSblZ1WTNScGIyNTlJR1p1WEc0Z0tpQkFjR0Z5WVcwZ2UwOWlhbVZqZEgwZ2JGeHVJQ29nUUhCaGNtRnRJSHRQWW1wbFkzUjlJSEpjYmlBcUlFQnlaWFIxY200Z2UwOWlhbVZqZEgxY2JpQXFJRUJ6WldVZ1VpNXRaWEpuWlN3Z1VpNXRaWEpuWlZkcGRHaExaWGxjYmlBcUlFQmxlR0Z0Y0d4bFhHNGdLbHh1SUNvZ0lDQWdJQ0JTTG0xbGNtZGxWMmwwYUNoU0xtTnZibU5oZEN4Y2JpQXFJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdleUJoT2lCMGNuVmxMQ0IyWVd4MVpYTTZJRnN4TUN3Z01qQmRJSDBzWEc0Z0tpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIc2dZam9nZEhKMVpTd2dkbUZzZFdWek9pQmJNVFVzSURNMVhTQjlLVHRjYmlBcUlDQWdJQ0FnTHk4OVBpQjdJR0U2SUhSeWRXVXNJR0k2SUhSeWRXVXNJSFpoYkhWbGN6b2dXekV3TENBeU1Dd2dNVFVzSURNMVhTQjlYRzRnS2k5Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1gyTjFjbko1TXlobWRXNWpkR2x2YmlCdFpYSm5aVmRwZEdnb1ptNHNJR3dzSUhJcElIdGNiaUFnY21WMGRYSnVJRzFsY21kbFYybDBhRXRsZVNobWRXNWpkR2x2YmloZkxDQmZiQ3dnWDNJcElIdGNiaUFnSUNCeVpYUjFjbTRnWm00b1gyd3NJRjl5S1R0Y2JpQWdmU3dnYkN3Z2NpazdYRzU5S1R0Y2JseHVYRzVjYmk4dkx5OHZMeTh2THk4dkx5OHZMeTh2TDF4dUx5OGdWMFZDVUVGRFN5QkdUMDlVUlZKY2JpOHZJQzR2Zmk5eVlXMWtZUzl6Y21NdmJXVnlaMlZYYVhSb0xtcHpYRzR2THlCdGIyUjFiR1VnYVdRZ1BTQXhOemxjYmk4dklHMXZaSFZzWlNCamFIVnVhM01nUFNBd0lsMHNJbTFoY0hCcGJtZHpJam9pUVVGQlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN0lpd2ljMjkxY21ObFVtOXZkQ0k2SWlKOVwiKTtcblxuLyoqKi8gfSksXG4vKiAxODAgKi9cbi8qIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKiBhbGwgZXhwb3J0cyB1c2VkICovXG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vfi9yYW1kYS9zcmMvbWVyZ2VXaXRoS2V5LmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5ldmFsKFwidmFyIF9jdXJyeTMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL2ludGVybmFsL19jdXJyeTMgKi8gNyk7XFxudmFyIF9oYXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL2ludGVybmFsL19oYXMgKi8gMTUpO1xcblxcblxcbi8qKlxcbiAqIENyZWF0ZXMgYSBuZXcgb2JqZWN0IHdpdGggdGhlIG93biBwcm9wZXJ0aWVzIG9mIHRoZSB0d28gcHJvdmlkZWQgb2JqZWN0cy4gSWZcXG4gKiBhIGtleSBleGlzdHMgaW4gYm90aCBvYmplY3RzLCB0aGUgcHJvdmlkZWQgZnVuY3Rpb24gaXMgYXBwbGllZCB0byB0aGUga2V5XFxuICogYW5kIHRoZSB2YWx1ZXMgYXNzb2NpYXRlZCB3aXRoIHRoZSBrZXkgaW4gZWFjaCBvYmplY3QsIHdpdGggdGhlIHJlc3VsdCBiZWluZ1xcbiAqIHVzZWQgYXMgdGhlIHZhbHVlIGFzc29jaWF0ZWQgd2l0aCB0aGUga2V5IGluIHRoZSByZXR1cm5lZCBvYmplY3QuIFRoZSBrZXlcXG4gKiB3aWxsIGJlIGV4Y2x1ZGVkIGZyb20gdGhlIHJldHVybmVkIG9iamVjdCBpZiB0aGUgcmVzdWx0aW5nIHZhbHVlIGlzXFxuICogYHVuZGVmaW5lZGAuXFxuICpcXG4gKiBAZnVuY1xcbiAqIEBtZW1iZXJPZiBSXFxuICogQHNpbmNlIHYwLjE5LjBcXG4gKiBAY2F0ZWdvcnkgT2JqZWN0XFxuICogQHNpZyAoU3RyaW5nIC0+IGEgLT4gYSAtPiBhKSAtPiB7YX0gLT4ge2F9IC0+IHthfVxcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXFxuICogQHBhcmFtIHtPYmplY3R9IGxcXG4gKiBAcGFyYW0ge09iamVjdH0gclxcbiAqIEByZXR1cm4ge09iamVjdH1cXG4gKiBAc2VlIFIubWVyZ2UsIFIubWVyZ2VXaXRoXFxuICogQGV4YW1wbGVcXG4gKlxcbiAqICAgICAgbGV0IGNvbmNhdFZhbHVlcyA9IChrLCBsLCByKSA9PiBrID09ICd2YWx1ZXMnID8gUi5jb25jYXQobCwgcikgOiByXFxuICogICAgICBSLm1lcmdlV2l0aEtleShjb25jYXRWYWx1ZXMsXFxuICogICAgICAgICAgICAgICAgICAgICB7IGE6IHRydWUsIHRoaW5nOiAnZm9vJywgdmFsdWVzOiBbMTAsIDIwXSB9LFxcbiAqICAgICAgICAgICAgICAgICAgICAgeyBiOiB0cnVlLCB0aGluZzogJ2JhcicsIHZhbHVlczogWzE1LCAzNV0gfSk7XFxuICogICAgICAvLz0+IHsgYTogdHJ1ZSwgYjogdHJ1ZSwgdGhpbmc6ICdiYXInLCB2YWx1ZXM6IFsxMCwgMjAsIDE1LCAzNV0gfVxcbiAqIEBzeW1iIFIubWVyZ2VXaXRoS2V5KGYsIHsgeDogMSwgeTogMiB9LCB7IHk6IDUsIHo6IDMgfSkgPSB7IHg6IDEsIHk6IGYoJ3knLCAyLCA1KSwgejogMyB9XFxuICovXFxubW9kdWxlLmV4cG9ydHMgPSBfY3VycnkzKGZ1bmN0aW9uIG1lcmdlV2l0aEtleShmbiwgbCwgcikge1xcbiAgdmFyIHJlc3VsdCA9IHt9O1xcbiAgdmFyIGs7XFxuXFxuICBmb3IgKGsgaW4gbCkge1xcbiAgICBpZiAoX2hhcyhrLCBsKSkge1xcbiAgICAgIHJlc3VsdFtrXSA9IF9oYXMoaywgcikgPyBmbihrLCBsW2tdLCByW2tdKSA6IGxba107XFxuICAgIH1cXG4gIH1cXG5cXG4gIGZvciAoayBpbiByKSB7XFxuICAgIGlmIChfaGFzKGssIHIpICYmICEoX2hhcyhrLCByZXN1bHQpKSkge1xcbiAgICAgIHJlc3VsdFtrXSA9IHJba107XFxuICAgIH1cXG4gIH1cXG5cXG4gIHJldHVybiByZXN1bHQ7XFxufSk7XFxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lNVGd3TG1weklpd2ljMjkxY21ObGN5STZXeUozWldKd1lXTnJPaTh2THk0dmZpOXlZVzFrWVM5emNtTXZiV1Z5WjJWWGFYUm9TMlY1TG1welAySTRNRFlpWFN3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaWRtRnlJRjlqZFhKeWVUTWdQU0J5WlhGMWFYSmxLQ2N1TDJsdWRHVnlibUZzTDE5amRYSnllVE1uS1R0Y2JuWmhjaUJmYUdGeklEMGdjbVZ4ZFdseVpTZ25MaTlwYm5SbGNtNWhiQzlmYUdGekp5azdYRzVjYmx4dUx5b3FYRzRnS2lCRGNtVmhkR1Z6SUdFZ2JtVjNJRzlpYW1WamRDQjNhWFJvSUhSb1pTQnZkMjRnY0hKdmNHVnlkR2xsY3lCdlppQjBhR1VnZEhkdklIQnliM1pwWkdWa0lHOWlhbVZqZEhNdUlFbG1YRzRnS2lCaElHdGxlU0JsZUdsemRITWdhVzRnWW05MGFDQnZZbXBsWTNSekxDQjBhR1VnY0hKdmRtbGtaV1FnWm5WdVkzUnBiMjRnYVhNZ1lYQndiR2xsWkNCMGJ5QjBhR1VnYTJWNVhHNGdLaUJoYm1RZ2RHaGxJSFpoYkhWbGN5QmhjM052WTJsaGRHVmtJSGRwZEdnZ2RHaGxJR3RsZVNCcGJpQmxZV05vSUc5aWFtVmpkQ3dnZDJsMGFDQjBhR1VnY21WemRXeDBJR0psYVc1blhHNGdLaUIxYzJWa0lHRnpJSFJvWlNCMllXeDFaU0JoYzNOdlkybGhkR1ZrSUhkcGRHZ2dkR2hsSUd0bGVTQnBiaUIwYUdVZ2NtVjBkWEp1WldRZ2IySnFaV04wTGlCVWFHVWdhMlY1WEc0Z0tpQjNhV3hzSUdKbElHVjRZMngxWkdWa0lHWnliMjBnZEdobElISmxkSFZ5Ym1Wa0lHOWlhbVZqZENCcFppQjBhR1VnY21WemRXeDBhVzVuSUhaaGJIVmxJR2x6WEc0Z0tpQmdkVzVrWldacGJtVmtZQzVjYmlBcVhHNGdLaUJBWm5WdVkxeHVJQ29nUUcxbGJXSmxjazltSUZKY2JpQXFJRUJ6YVc1alpTQjJNQzR4T1M0d1hHNGdLaUJBWTJGMFpXZHZjbmtnVDJKcVpXTjBYRzRnS2lCQWMybG5JQ2hUZEhKcGJtY2dMVDRnWVNBdFBpQmhJQzArSUdFcElDMCtJSHRoZlNBdFBpQjdZWDBnTFQ0Z2UyRjlYRzRnS2lCQWNHRnlZVzBnZTBaMWJtTjBhVzl1ZlNCbWJseHVJQ29nUUhCaGNtRnRJSHRQWW1wbFkzUjlJR3hjYmlBcUlFQndZWEpoYlNCN1QySnFaV04wZlNCeVhHNGdLaUJBY21WMGRYSnVJSHRQWW1wbFkzUjlYRzRnS2lCQWMyVmxJRkl1YldWeVoyVXNJRkl1YldWeVoyVlhhWFJvWEc0Z0tpQkFaWGhoYlhCc1pWeHVJQ3BjYmlBcUlDQWdJQ0FnYkdWMElHTnZibU5oZEZaaGJIVmxjeUE5SUNockxDQnNMQ0J5S1NBOVBpQnJJRDA5SUNkMllXeDFaWE1uSUQ4Z1VpNWpiMjVqWVhRb2JDd2djaWtnT2lCeVhHNGdLaUFnSUNBZ0lGSXViV1Z5WjJWWGFYUm9TMlY1S0dOdmJtTmhkRlpoYkhWbGN5eGNiaUFxSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2V5QmhPaUIwY25WbExDQjBhR2x1WnpvZ0oyWnZieWNzSUhaaGJIVmxjem9nV3pFd0xDQXlNRjBnZlN4Y2JpQXFJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZXlCaU9pQjBjblZsTENCMGFHbHVaem9nSjJKaGNpY3NJSFpoYkhWbGN6b2dXekUxTENBek5WMGdmU2s3WEc0Z0tpQWdJQ0FnSUM4dlBUNGdleUJoT2lCMGNuVmxMQ0JpT2lCMGNuVmxMQ0IwYUdsdVp6b2dKMkpoY2ljc0lIWmhiSFZsY3pvZ1d6RXdMQ0F5TUN3Z01UVXNJRE0xWFNCOVhHNGdLaUJBYzNsdFlpQlNMbTFsY21kbFYybDBhRXRsZVNobUxDQjdJSGc2SURFc0lIazZJRElnZlN3Z2V5QjVPaUExTENCNk9pQXpJSDBwSUQwZ2V5QjRPaUF4TENCNU9pQm1LQ2Q1Snl3Z01pd2dOU2tzSUhvNklETWdmVnh1SUNvdlhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlGOWpkWEp5ZVRNb1puVnVZM1JwYjI0Z2JXVnlaMlZYYVhSb1MyVjVLR1p1TENCc0xDQnlLU0I3WEc0Z0lIWmhjaUJ5WlhOMWJIUWdQU0I3ZlR0Y2JpQWdkbUZ5SUdzN1hHNWNiaUFnWm05eUlDaHJJR2x1SUd3cElIdGNiaUFnSUNCcFppQW9YMmhoY3lockxDQnNLU2tnZTF4dUlDQWdJQ0FnY21WemRXeDBXMnRkSUQwZ1gyaGhjeWhyTENCeUtTQS9JR1p1S0dzc0lHeGJhMTBzSUhKYmExMHBJRG9nYkZ0clhUdGNiaUFnSUNCOVhHNGdJSDFjYmx4dUlDQm1iM0lnS0dzZ2FXNGdjaWtnZTF4dUlDQWdJR2xtSUNoZmFHRnpLR3NzSUhJcElDWW1JQ0VvWDJoaGN5aHJMQ0J5WlhOMWJIUXBLU2tnZTF4dUlDQWdJQ0FnY21WemRXeDBXMnRkSUQwZ2NsdHJYVHRjYmlBZ0lDQjlYRzRnSUgxY2JseHVJQ0J5WlhSMWNtNGdjbVZ6ZFd4ME8xeHVmU2s3WEc1Y2JseHVYRzR2THk4dkx5OHZMeTh2THk4dkx5OHZMeTljYmk4dklGZEZRbEJCUTBzZ1JrOVBWRVZTWEc0dkx5QXVMMzR2Y21GdFpHRXZjM0pqTDIxbGNtZGxWMmwwYUV0bGVTNXFjMXh1THk4Z2JXOWtkV3hsSUdsa0lEMGdNVGd3WEc0dkx5QnRiMlIxYkdVZ1kyaDFibXR6SUQwZ01DSmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN0lpd2ljMjkxY21ObFVtOXZkQ0k2SWlKOVwiKTtcblxuLyoqKi8gfSksXG4vKiAxODEgKi9cbi8qIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKiBhbGwgZXhwb3J0cyB1c2VkICovXG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9+L3JhbWRhL3NyYy9vci5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5ldmFsKFwidmFyIF9jdXJyeTIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL2ludGVybmFsL19jdXJyeTIgKi8gMSk7XFxuXFxuXFxuLyoqXFxuICogUmV0dXJucyBgdHJ1ZWAgaWYgb25lIG9yIGJvdGggb2YgaXRzIGFyZ3VtZW50cyBhcmUgYHRydWVgLiBSZXR1cm5zIGBmYWxzZWBcXG4gKiBpZiBib3RoIGFyZ3VtZW50cyBhcmUgYGZhbHNlYC5cXG4gKlxcbiAqIEBmdW5jXFxuICogQG1lbWJlck9mIFJcXG4gKiBAc2luY2UgdjAuMS4wXFxuICogQGNhdGVnb3J5IExvZ2ljXFxuICogQHNpZyBhIC0+IGIgLT4gYSB8IGJcXG4gKiBAcGFyYW0ge0FueX0gYVxcbiAqIEBwYXJhbSB7QW55fSBiXFxuICogQHJldHVybiB7QW55fSB0aGUgZmlyc3QgYXJndW1lbnQgaWYgdHJ1dGh5LCBvdGhlcndpc2UgdGhlIHNlY29uZCBhcmd1bWVudC5cXG4gKiBAc2VlIFIuZWl0aGVyXFxuICogQGV4YW1wbGVcXG4gKlxcbiAqICAgICAgUi5vcih0cnVlLCB0cnVlKTsgLy89PiB0cnVlXFxuICogICAgICBSLm9yKHRydWUsIGZhbHNlKTsgLy89PiB0cnVlXFxuICogICAgICBSLm9yKGZhbHNlLCB0cnVlKTsgLy89PiB0cnVlXFxuICogICAgICBSLm9yKGZhbHNlLCBmYWxzZSk7IC8vPT4gZmFsc2VcXG4gKi9cXG5tb2R1bGUuZXhwb3J0cyA9IF9jdXJyeTIoZnVuY3Rpb24gb3IoYSwgYikge1xcbiAgcmV0dXJuIGEgfHwgYjtcXG59KTtcXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaU1UZ3hMbXB6SWl3aWMyOTFjbU5sY3lJNld5SjNaV0p3WVdOck9pOHZMeTR2Zmk5eVlXMWtZUzl6Y21NdmIzSXVhbk0vTURBelpDSmRMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUoyWVhJZ1gyTjFjbko1TWlBOUlISmxjWFZwY21Vb0p5NHZhVzUwWlhKdVlXd3ZYMk4xY25KNU1pY3BPMXh1WEc1Y2JpOHFLbHh1SUNvZ1VtVjBkWEp1Y3lCZ2RISjFaV0FnYVdZZ2IyNWxJRzl5SUdKdmRHZ2diMllnYVhSeklHRnlaM1Z0Wlc1MGN5QmhjbVVnWUhSeWRXVmdMaUJTWlhSMWNtNXpJR0JtWVd4elpXQmNiaUFxSUdsbUlHSnZkR2dnWVhKbmRXMWxiblJ6SUdGeVpTQmdabUZzYzJWZ0xseHVJQ3BjYmlBcUlFQm1kVzVqWEc0Z0tpQkFiV1Z0WW1WeVQyWWdVbHh1SUNvZ1FITnBibU5sSUhZd0xqRXVNRnh1SUNvZ1FHTmhkR1ZuYjNKNUlFeHZaMmxqWEc0Z0tpQkFjMmxuSUdFZ0xUNGdZaUF0UGlCaElId2dZbHh1SUNvZ1FIQmhjbUZ0SUh0QmJubDlJR0ZjYmlBcUlFQndZWEpoYlNCN1FXNTVmU0JpWEc0Z0tpQkFjbVYwZFhKdUlIdEJibmw5SUhSb1pTQm1hWEp6ZENCaGNtZDFiV1Z1ZENCcFppQjBjblYwYUhrc0lHOTBhR1Z5ZDJselpTQjBhR1VnYzJWamIyNWtJR0Z5WjNWdFpXNTBMbHh1SUNvZ1FITmxaU0JTTG1WcGRHaGxjbHh1SUNvZ1FHVjRZVzF3YkdWY2JpQXFYRzRnS2lBZ0lDQWdJRkl1YjNJb2RISjFaU3dnZEhKMVpTazdJQzh2UFQ0Z2RISjFaVnh1SUNvZ0lDQWdJQ0JTTG05eUtIUnlkV1VzSUdaaGJITmxLVHNnTHk4OVBpQjBjblZsWEc0Z0tpQWdJQ0FnSUZJdWIzSW9abUZzYzJVc0lIUnlkV1VwT3lBdkx6MCtJSFJ5ZFdWY2JpQXFJQ0FnSUNBZ1VpNXZjaWhtWVd4elpTd2dabUZzYzJVcE95QXZMejArSUdaaGJITmxYRzRnS2k5Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1gyTjFjbko1TWlobWRXNWpkR2x2YmlCdmNpaGhMQ0JpS1NCN1hHNGdJSEpsZEhWeWJpQmhJSHg4SUdJN1hHNTlLVHRjYmx4dVhHNWNiaTh2THk4dkx5OHZMeTh2THk4dkx5OHZMMXh1THk4Z1YwVkNVRUZEU3lCR1QwOVVSVkpjYmk4dklDNHZmaTl5WVcxa1lTOXpjbU12YjNJdWFuTmNiaTh2SUcxdlpIVnNaU0JwWkNBOUlERTRNVnh1THk4Z2JXOWtkV3hsSUdOb2RXNXJjeUE5SURBaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN0lpd2ljMjkxY21ObFVtOXZkQ0k2SWlKOVwiKTtcblxuLyoqKi8gfSksXG4vKiAxODIgKi9cbi8qIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKiBhbGwgZXhwb3J0cyB1c2VkICovXG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vfi9yYW1kYS9zcmMvcGlja0J5LmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5ldmFsKFwidmFyIF9jdXJyeTIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL2ludGVybmFsL19jdXJyeTIgKi8gMSk7XFxuXFxuXFxuLyoqXFxuICogUmV0dXJucyBhIHBhcnRpYWwgY29weSBvZiBhbiBvYmplY3QgY29udGFpbmluZyBvbmx5IHRoZSBrZXlzIHRoYXQgc2F0aXNmeVxcbiAqIHRoZSBzdXBwbGllZCBwcmVkaWNhdGUuXFxuICpcXG4gKiBAZnVuY1xcbiAqIEBtZW1iZXJPZiBSXFxuICogQHNpbmNlIHYwLjguMFxcbiAqIEBjYXRlZ29yeSBPYmplY3RcXG4gKiBAc2lnICh2LCBrIC0+IEJvb2xlYW4pIC0+IHtrOiB2fSAtPiB7azogdn1cXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkIEEgcHJlZGljYXRlIHRvIGRldGVybWluZSB3aGV0aGVyIG9yIG5vdCBhIGtleVxcbiAqICAgICAgICBzaG91bGQgYmUgaW5jbHVkZWQgb24gdGhlIG91dHB1dCBvYmplY3QuXFxuICogQHBhcmFtIHtPYmplY3R9IG9iaiBUaGUgb2JqZWN0IHRvIGNvcHkgZnJvbVxcbiAqIEByZXR1cm4ge09iamVjdH0gQSBuZXcgb2JqZWN0IHdpdGggb25seSBwcm9wZXJ0aWVzIHRoYXQgc2F0aXNmeSBgcHJlZGBcXG4gKiAgICAgICAgIG9uIGl0LlxcbiAqIEBzZWUgUi5waWNrLCBSLmZpbHRlclxcbiAqIEBleGFtcGxlXFxuICpcXG4gKiAgICAgIHZhciBpc1VwcGVyQ2FzZSA9ICh2YWwsIGtleSkgPT4ga2V5LnRvVXBwZXJDYXNlKCkgPT09IGtleTtcXG4gKiAgICAgIFIucGlja0J5KGlzVXBwZXJDYXNlLCB7YTogMSwgYjogMiwgQTogMywgQjogNH0pOyAvLz0+IHtBOiAzLCBCOiA0fVxcbiAqL1xcbm1vZHVsZS5leHBvcnRzID0gX2N1cnJ5MihmdW5jdGlvbiBwaWNrQnkodGVzdCwgb2JqKSB7XFxuICB2YXIgcmVzdWx0ID0ge307XFxuICBmb3IgKHZhciBwcm9wIGluIG9iaikge1xcbiAgICBpZiAodGVzdChvYmpbcHJvcF0sIHByb3AsIG9iaikpIHtcXG4gICAgICByZXN1bHRbcHJvcF0gPSBvYmpbcHJvcF07XFxuICAgIH1cXG4gIH1cXG4gIHJldHVybiByZXN1bHQ7XFxufSk7XFxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lNVGd5TG1weklpd2ljMjkxY21ObGN5STZXeUozWldKd1lXTnJPaTh2THk0dmZpOXlZVzFrWVM5emNtTXZjR2xqYTBKNUxtcHpQelV3TWpnaVhTd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lkbUZ5SUY5amRYSnllVElnUFNCeVpYRjFhWEpsS0NjdUwybHVkR1Z5Ym1Gc0wxOWpkWEp5ZVRJbktUdGNibHh1WEc0dktpcGNiaUFxSUZKbGRIVnlibk1nWVNCd1lYSjBhV0ZzSUdOdmNIa2diMllnWVc0Z2IySnFaV04wSUdOdmJuUmhhVzVwYm1jZ2IyNXNlU0IwYUdVZ2EyVjVjeUIwYUdGMElITmhkR2x6Wm5sY2JpQXFJSFJvWlNCemRYQndiR2xsWkNCd2NtVmthV05oZEdVdVhHNGdLbHh1SUNvZ1FHWjFibU5jYmlBcUlFQnRaVzFpWlhKUFppQlNYRzRnS2lCQWMybHVZMlVnZGpBdU9DNHdYRzRnS2lCQVkyRjBaV2R2Y25rZ1QySnFaV04wWEc0Z0tpQkFjMmxuSUNoMkxDQnJJQzArSUVKdmIyeGxZVzRwSUMwK0lIdHJPaUIyZlNBdFBpQjdhem9nZG4xY2JpQXFJRUJ3WVhKaGJTQjdSblZ1WTNScGIyNTlJSEJ5WldRZ1FTQndjbVZrYVdOaGRHVWdkRzhnWkdWMFpYSnRhVzVsSUhkb1pYUm9aWElnYjNJZ2JtOTBJR0VnYTJWNVhHNGdLaUFnSUNBZ0lDQWdjMmh2ZFd4a0lHSmxJR2x1WTJ4MVpHVmtJRzl1SUhSb1pTQnZkWFJ3ZFhRZ2IySnFaV04wTGx4dUlDb2dRSEJoY21GdElIdFBZbXBsWTNSOUlHOWlhaUJVYUdVZ2IySnFaV04wSUhSdklHTnZjSGtnWm5KdmJWeHVJQ29nUUhKbGRIVnliaUI3VDJKcVpXTjBmU0JCSUc1bGR5QnZZbXBsWTNRZ2QybDBhQ0J2Ym14NUlIQnliM0JsY25ScFpYTWdkR2hoZENCellYUnBjMlo1SUdCd2NtVmtZRnh1SUNvZ0lDQWdJQ0FnSUNCdmJpQnBkQzVjYmlBcUlFQnpaV1VnVWk1d2FXTnJMQ0JTTG1acGJIUmxjbHh1SUNvZ1FHVjRZVzF3YkdWY2JpQXFYRzRnS2lBZ0lDQWdJSFpoY2lCcGMxVndjR1Z5UTJGelpTQTlJQ2gyWVd3c0lHdGxlU2tnUFQ0Z2EyVjVMblJ2VlhCd1pYSkRZWE5sS0NrZ1BUMDlJR3RsZVR0Y2JpQXFJQ0FnSUNBZ1VpNXdhV05yUW5rb2FYTlZjSEJsY2tOaGMyVXNJSHRoT2lBeExDQmlPaUF5TENCQk9pQXpMQ0JDT2lBMGZTazdJQzh2UFQ0Z2UwRTZJRE1zSUVJNklEUjlYRzRnS2k5Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1gyTjFjbko1TWlobWRXNWpkR2x2YmlCd2FXTnJRbmtvZEdWemRDd2diMkpxS1NCN1hHNGdJSFpoY2lCeVpYTjFiSFFnUFNCN2ZUdGNiaUFnWm05eUlDaDJZWElnY0hKdmNDQnBiaUJ2WW1vcElIdGNiaUFnSUNCcFppQW9kR1Z6ZENodlltcGJjSEp2Y0Ywc0lIQnliM0FzSUc5aWFpa3BJSHRjYmlBZ0lDQWdJSEpsYzNWc2RGdHdjbTl3WFNBOUlHOWlhbHR3Y205d1hUdGNiaUFnSUNCOVhHNGdJSDFjYmlBZ2NtVjBkWEp1SUhKbGMzVnNkRHRjYm4wcE8xeHVYRzVjYmx4dUx5OHZMeTh2THk4dkx5OHZMeTh2THk4dlhHNHZMeUJYUlVKUVFVTkxJRVpQVDFSRlVseHVMeThnTGk5K0wzSmhiV1JoTDNOeVl5OXdhV05yUW5rdWFuTmNiaTh2SUcxdlpIVnNaU0JwWkNBOUlERTRNbHh1THk4Z2JXOWtkV3hsSUdOb2RXNXJjeUE5SURBaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdJaXdpYzI5MWNtTmxVbTl2ZENJNklpSjlcIik7XG5cbi8qKiovIH0pLFxuLyogMTgzICovXG4vKiBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyogYWxsIGV4cG9ydHMgdXNlZCAqL1xuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9+L3JhbWRhL3NyYy9waXBlLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuZXZhbChcInZhciBfYXJpdHkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL2ludGVybmFsL19hcml0eSAqLyAxNCk7XFxudmFyIF9waXBlID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9pbnRlcm5hbC9fcGlwZSAqLyAxNjYpO1xcbnZhciByZWR1Y2UgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL3JlZHVjZSAqLyAyNik7XFxudmFyIHRhaWwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL3RhaWwgKi8gMTkwKTtcXG5cXG5cXG4vKipcXG4gKiBQZXJmb3JtcyBsZWZ0LXRvLXJpZ2h0IGZ1bmN0aW9uIGNvbXBvc2l0aW9uLiBUaGUgbGVmdG1vc3QgZnVuY3Rpb24gbWF5IGhhdmVcXG4gKiBhbnkgYXJpdHk7IHRoZSByZW1haW5pbmcgZnVuY3Rpb25zIG11c3QgYmUgdW5hcnkuXFxuICpcXG4gKiBJbiBzb21lIGxpYnJhcmllcyB0aGlzIGZ1bmN0aW9uIGlzIG5hbWVkIGBzZXF1ZW5jZWAuXFxuICpcXG4gKiAqKk5vdGU6KiogVGhlIHJlc3VsdCBvZiBwaXBlIGlzIG5vdCBhdXRvbWF0aWNhbGx5IGN1cnJpZWQuXFxuICpcXG4gKiBAZnVuY1xcbiAqIEBtZW1iZXJPZiBSXFxuICogQHNpbmNlIHYwLjEuMFxcbiAqIEBjYXRlZ29yeSBGdW5jdGlvblxcbiAqIEBzaWcgKCgoYSwgYiwgLi4uLCBuKSAtPiBvKSwgKG8gLT4gcCksIC4uLiwgKHggLT4geSksICh5IC0+IHopKSAtPiAoKGEsIGIsIC4uLiwgbikgLT4geilcXG4gKiBAcGFyYW0gey4uLkZ1bmN0aW9ufSBmdW5jdGlvbnNcXG4gKiBAcmV0dXJuIHtGdW5jdGlvbn1cXG4gKiBAc2VlIFIuY29tcG9zZVxcbiAqIEBleGFtcGxlXFxuICpcXG4gKiAgICAgIHZhciBmID0gUi5waXBlKE1hdGgucG93LCBSLm5lZ2F0ZSwgUi5pbmMpO1xcbiAqXFxuICogICAgICBmKDMsIDQpOyAvLyAtKDNeNCkgKyAxXFxuICogQHN5bWIgUi5waXBlKGYsIGcsIGgpKGEsIGIpID0gaChnKGYoYSwgYikpKVxcbiAqL1xcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gcGlwZSgpIHtcXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSB7XFxuICAgIHRocm93IG5ldyBFcnJvcigncGlwZSByZXF1aXJlcyBhdCBsZWFzdCBvbmUgYXJndW1lbnQnKTtcXG4gIH1cXG4gIHJldHVybiBfYXJpdHkoYXJndW1lbnRzWzBdLmxlbmd0aCxcXG4gICAgICAgICAgICAgICAgcmVkdWNlKF9waXBlLCBhcmd1bWVudHNbMF0sIHRhaWwoYXJndW1lbnRzKSkpO1xcbn07XFxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lNVGd6TG1weklpd2ljMjkxY21ObGN5STZXeUozWldKd1lXTnJPaTh2THk0dmZpOXlZVzFrWVM5emNtTXZjR2x3WlM1cWN6OHpZVFUxSWwwc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYkluWmhjaUJmWVhKcGRIa2dQU0J5WlhGMWFYSmxLQ2N1TDJsdWRHVnlibUZzTDE5aGNtbDBlU2NwTzF4dWRtRnlJRjl3YVhCbElEMGdjbVZ4ZFdseVpTZ25MaTlwYm5SbGNtNWhiQzlmY0dsd1pTY3BPMXh1ZG1GeUlISmxaSFZqWlNBOUlISmxjWFZwY21Vb0p5NHZjbVZrZFdObEp5azdYRzUyWVhJZ2RHRnBiQ0E5SUhKbGNYVnBjbVVvSnk0dmRHRnBiQ2NwTzF4dVhHNWNiaThxS2x4dUlDb2dVR1Z5Wm05eWJYTWdiR1ZtZEMxMGJ5MXlhV2RvZENCbWRXNWpkR2x2YmlCamIyMXdiM05wZEdsdmJpNGdWR2hsSUd4bFpuUnRiM04wSUdaMWJtTjBhVzl1SUcxaGVTQm9ZWFpsWEc0Z0tpQmhibmtnWVhKcGRIazdJSFJvWlNCeVpXMWhhVzVwYm1jZ1puVnVZM1JwYjI1eklHMTFjM1FnWW1VZ2RXNWhjbmt1WEc0Z0tseHVJQ29nU1c0Z2MyOXRaU0JzYVdKeVlYSnBaWE1nZEdocGN5Qm1kVzVqZEdsdmJpQnBjeUJ1WVcxbFpDQmdjMlZ4ZFdWdVkyVmdMbHh1SUNwY2JpQXFJQ29xVG05MFpUb3FLaUJVYUdVZ2NtVnpkV3gwSUc5bUlIQnBjR1VnYVhNZ2JtOTBJR0YxZEc5dFlYUnBZMkZzYkhrZ1kzVnljbWxsWkM1Y2JpQXFYRzRnS2lCQVpuVnVZMXh1SUNvZ1FHMWxiV0psY2s5bUlGSmNiaUFxSUVCemFXNWpaU0IyTUM0eExqQmNiaUFxSUVCallYUmxaMjl5ZVNCR2RXNWpkR2x2Ymx4dUlDb2dRSE5wWnlBb0tDaGhMQ0JpTENBdUxpNHNJRzRwSUMwK0lHOHBMQ0FvYnlBdFBpQndLU3dnTGk0dUxDQW9lQ0F0UGlCNUtTd2dLSGtnTFQ0Z2Vpa3BJQzArSUNnb1lTd2dZaXdnTGk0dUxDQnVLU0F0UGlCNktWeHVJQ29nUUhCaGNtRnRJSHN1TGk1R2RXNWpkR2x2Ym4wZ1puVnVZM1JwYjI1elhHNGdLaUJBY21WMGRYSnVJSHRHZFc1amRHbHZibjFjYmlBcUlFQnpaV1VnVWk1amIyMXdiM05sWEc0Z0tpQkFaWGhoYlhCc1pWeHVJQ3BjYmlBcUlDQWdJQ0FnZG1GeUlHWWdQU0JTTG5CcGNHVW9UV0YwYUM1d2IzY3NJRkl1Ym1WbllYUmxMQ0JTTG1sdVl5azdYRzRnS2x4dUlDb2dJQ0FnSUNCbUtETXNJRFFwT3lBdkx5QXRLRE5lTkNrZ0t5QXhYRzRnS2lCQWMzbHRZaUJTTG5CcGNHVW9aaXdnWnl3Z2FDa29ZU3dnWWlrZ1BTQm9LR2NvWmloaExDQmlLU2twWEc0Z0tpOWNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdablZ1WTNScGIyNGdjR2x3WlNncElIdGNiaUFnYVdZZ0tHRnlaM1Z0Wlc1MGN5NXNaVzVuZEdnZ1BUMDlJREFwSUh0Y2JpQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9KM0JwY0dVZ2NtVnhkV2x5WlhNZ1lYUWdiR1ZoYzNRZ2IyNWxJR0Z5WjNWdFpXNTBKeWs3WEc0Z0lIMWNiaUFnY21WMGRYSnVJRjloY21sMGVTaGhjbWQxYldWdWRITmJNRjB1YkdWdVozUm9MRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsWkhWalpTaGZjR2x3WlN3Z1lYSm5kVzFsYm5Seld6QmRMQ0IwWVdsc0tHRnlaM1Z0Wlc1MGN5a3BLVHRjYm4wN1hHNWNibHh1WEc0dkx5OHZMeTh2THk4dkx5OHZMeTh2THk5Y2JpOHZJRmRGUWxCQlEwc2dSazlQVkVWU1hHNHZMeUF1TDM0dmNtRnRaR0V2YzNKakwzQnBjR1V1YW5OY2JpOHZJRzF2WkhWc1pTQnBaQ0E5SURFNE0xeHVMeThnYlc5a2RXeGxJR05vZFc1cmN5QTlJREFpWFN3aWJXRndjR2x1WjNNaU9pSkJRVUZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUc2lMQ0p6YjNWeVkyVlNiMjkwSWpvaUluMD1cIik7XG5cbi8qKiovIH0pLFxuLyogMTg0ICovXG4vKiBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyogYWxsIGV4cG9ydHMgdXNlZCAqL1xuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vfi9yYW1kYS9zcmMvcGx1Y2suanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuZXZhbChcInZhciBfY3VycnkyID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9pbnRlcm5hbC9fY3VycnkyICovIDEpO1xcbnZhciBtYXAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL21hcCAqLyA4KTtcXG52YXIgcHJvcCA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vcHJvcCAqLyA2NSk7XFxuXFxuXFxuLyoqXFxuICogUmV0dXJucyBhIG5ldyBsaXN0IGJ5IHBsdWNraW5nIHRoZSBzYW1lIG5hbWVkIHByb3BlcnR5IG9mZiBhbGwgb2JqZWN0cyBpblxcbiAqIHRoZSBsaXN0IHN1cHBsaWVkLlxcbiAqXFxuICogQGZ1bmNcXG4gKiBAbWVtYmVyT2YgUlxcbiAqIEBzaW5jZSB2MC4xLjBcXG4gKiBAY2F0ZWdvcnkgTGlzdFxcbiAqIEBzaWcgayAtPiBbe2s6IHZ9XSAtPiBbdl1cXG4gKiBAcGFyYW0ge051bWJlcnxTdHJpbmd9IGtleSBUaGUga2V5IG5hbWUgdG8gcGx1Y2sgb2ZmIG9mIGVhY2ggb2JqZWN0LlxcbiAqIEBwYXJhbSB7QXJyYXl9IGxpc3QgVGhlIGFycmF5IHRvIGNvbnNpZGVyLlxcbiAqIEByZXR1cm4ge0FycmF5fSBUaGUgbGlzdCBvZiB2YWx1ZXMgZm9yIHRoZSBnaXZlbiBrZXkuXFxuICogQHNlZSBSLnByb3BzXFxuICogQGV4YW1wbGVcXG4gKlxcbiAqICAgICAgUi5wbHVjaygnYScpKFt7YTogMX0sIHthOiAyfV0pOyAvLz0+IFsxLCAyXVxcbiAqICAgICAgUi5wbHVjaygwKShbWzEsIDJdLCBbMywgNF1dKTsgICAvLz0+IFsxLCAzXVxcbiAqIEBzeW1iIFIucGx1Y2soJ3gnLCBbe3g6IDEsIHk6IDJ9LCB7eDogMywgeTogNH0sIHt4OiA1LCB5OiA2fV0pID0gWzEsIDMsIDVdXFxuICogQHN5bWIgUi5wbHVjaygwLCBbWzEsIDJdLCBbMywgNF0sIFs1LCA2XV0pID0gWzEsIDMsIDVdXFxuICovXFxubW9kdWxlLmV4cG9ydHMgPSBfY3VycnkyKGZ1bmN0aW9uIHBsdWNrKHAsIGxpc3QpIHtcXG4gIHJldHVybiBtYXAocHJvcChwKSwgbGlzdCk7XFxufSk7XFxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lNVGcwTG1weklpd2ljMjkxY21ObGN5STZXeUozWldKd1lXTnJPaTh2THk0dmZpOXlZVzFrWVM5emNtTXZjR3gxWTJzdWFuTS9aVFUwTUNKZExDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SjJZWElnWDJOMWNuSjVNaUE5SUhKbGNYVnBjbVVvSnk0dmFXNTBaWEp1WVd3dlgyTjFjbko1TWljcE8xeHVkbUZ5SUcxaGNDQTlJSEpsY1hWcGNtVW9KeTR2YldGd0p5azdYRzUyWVhJZ2NISnZjQ0E5SUhKbGNYVnBjbVVvSnk0dmNISnZjQ2NwTzF4dVhHNWNiaThxS2x4dUlDb2dVbVYwZFhKdWN5QmhJRzVsZHlCc2FYTjBJR0o1SUhCc2RXTnJhVzVuSUhSb1pTQnpZVzFsSUc1aGJXVmtJSEJ5YjNCbGNuUjVJRzltWmlCaGJHd2diMkpxWldOMGN5QnBibHh1SUNvZ2RHaGxJR3hwYzNRZ2MzVndjR3hwWldRdVhHNGdLbHh1SUNvZ1FHWjFibU5jYmlBcUlFQnRaVzFpWlhKUFppQlNYRzRnS2lCQWMybHVZMlVnZGpBdU1TNHdYRzRnS2lCQVkyRjBaV2R2Y25rZ1RHbHpkRnh1SUNvZ1FITnBaeUJySUMwK0lGdDdhem9nZG4xZElDMCtJRnQyWFZ4dUlDb2dRSEJoY21GdElIdE9kVzFpWlhKOFUzUnlhVzVuZlNCclpYa2dWR2hsSUd0bGVTQnVZVzFsSUhSdklIQnNkV05ySUc5bVppQnZaaUJsWVdOb0lHOWlhbVZqZEM1Y2JpQXFJRUJ3WVhKaGJTQjdRWEp5WVhsOUlHeHBjM1FnVkdobElHRnljbUY1SUhSdklHTnZibk5wWkdWeUxseHVJQ29nUUhKbGRIVnliaUI3UVhKeVlYbDlJRlJvWlNCc2FYTjBJRzltSUhaaGJIVmxjeUJtYjNJZ2RHaGxJR2RwZG1WdUlHdGxlUzVjYmlBcUlFQnpaV1VnVWk1d2NtOXdjMXh1SUNvZ1FHVjRZVzF3YkdWY2JpQXFYRzRnS2lBZ0lDQWdJRkl1Y0d4MVkyc29KMkVuS1NoYmUyRTZJREY5TENCN1lUb2dNbjFkS1RzZ0x5ODlQaUJiTVN3Z01sMWNiaUFxSUNBZ0lDQWdVaTV3YkhWamF5Z3dLU2hiV3pFc0lESmRMQ0JiTXl3Z05GMWRLVHNnSUNBdkx6MCtJRnN4TENBelhWeHVJQ29nUUhONWJXSWdVaTV3YkhWamF5Z25lQ2NzSUZ0N2VEb2dNU3dnZVRvZ01uMHNJSHQ0T2lBekxDQjVPaUEwZlN3Z2UzZzZJRFVzSUhrNklEWjlYU2tnUFNCYk1Td2dNeXdnTlYxY2JpQXFJRUJ6ZVcxaUlGSXVjR3gxWTJzb01Dd2dXMXN4TENBeVhTd2dXek1zSURSZExDQmJOU3dnTmwxZEtTQTlJRnN4TENBekxDQTFYVnh1SUNvdlhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlGOWpkWEp5ZVRJb1puVnVZM1JwYjI0Z2NHeDFZMnNvY0N3Z2JHbHpkQ2tnZTF4dUlDQnlaWFIxY200Z2JXRndLSEJ5YjNBb2NDa3NJR3hwYzNRcE8xeHVmU2s3WEc1Y2JseHVYRzR2THk4dkx5OHZMeTh2THk4dkx5OHZMeTljYmk4dklGZEZRbEJCUTBzZ1JrOVBWRVZTWEc0dkx5QXVMMzR2Y21GdFpHRXZjM0pqTDNCc2RXTnJMbXB6WEc0dkx5QnRiMlIxYkdVZ2FXUWdQU0F4T0RSY2JpOHZJRzF2WkhWc1pTQmphSFZ1YTNNZ1BTQXdJbDBzSW0xaGNIQnBibWR6SWpvaVFVRkJRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHNpTENKemIzVnlZMlZTYjI5MElqb2lJbjA9XCIpO1xuXG4vKioqLyB9KSxcbi8qIDE4NSAqL1xuLyogbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9cbi8qIGFsbCBleHBvcnRzIHVzZWQgKi9cbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9+L3JhbWRhL3NyYy9yZWplY3QuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbmV2YWwoXCJ2YXIgX2NvbXBsZW1lbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL2ludGVybmFsL19jb21wbGVtZW50ICovIDE1Myk7XFxudmFyIF9jdXJyeTIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL2ludGVybmFsL19jdXJyeTIgKi8gMSk7XFxudmFyIGZpbHRlciA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vZmlsdGVyICovIDE0Nyk7XFxuXFxuXFxuLyoqXFxuICogVGhlIGNvbXBsZW1lbnQgb2YgYGZpbHRlcmAuXFxuICpcXG4gKiBBY3RzIGFzIGEgdHJhbnNkdWNlciBpZiBhIHRyYW5zZm9ybWVyIGlzIGdpdmVuIGluIGxpc3QgcG9zaXRpb24uXFxuICpcXG4gKiBAZnVuY1xcbiAqIEBtZW1iZXJPZiBSXFxuICogQHNpbmNlIHYwLjEuMFxcbiAqIEBjYXRlZ29yeSBMaXN0XFxuICogQHNpZyBGaWx0ZXJhYmxlIGYgPT4gKGEgLT4gQm9vbGVhbikgLT4gZiBhIC0+IGYgYVxcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRcXG4gKiBAcGFyYW0ge0FycmF5fSBmaWx0ZXJhYmxlXFxuICogQHJldHVybiB7QXJyYXl9XFxuICogQHNlZSBSLmZpbHRlciwgUi50cmFuc2R1Y2UsIFIuYWRkSW5kZXhcXG4gKiBAZXhhbXBsZVxcbiAqXFxuICogICAgICB2YXIgaXNPZGQgPSAobikgPT4gbiAlIDIgPT09IDE7XFxuICpcXG4gKiAgICAgIFIucmVqZWN0KGlzT2RkLCBbMSwgMiwgMywgNF0pOyAvLz0+IFsyLCA0XVxcbiAqXFxuICogICAgICBSLnJlamVjdChpc09kZCwge2E6IDEsIGI6IDIsIGM6IDMsIGQ6IDR9KTsgLy89PiB7YjogMiwgZDogNH1cXG4gKi9cXG5tb2R1bGUuZXhwb3J0cyA9IF9jdXJyeTIoZnVuY3Rpb24gcmVqZWN0KHByZWQsIGZpbHRlcmFibGUpIHtcXG4gIHJldHVybiBmaWx0ZXIoX2NvbXBsZW1lbnQocHJlZCksIGZpbHRlcmFibGUpO1xcbn0pO1xcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pTVRnMUxtcHpJaXdpYzI5MWNtTmxjeUk2V3lKM1pXSndZV05yT2k4dkx5NHZmaTl5WVcxa1lTOXpjbU12Y21WcVpXTjBMbXB6UDJWbFpHTWlYU3dpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpZG1GeUlGOWpiMjF3YkdWdFpXNTBJRDBnY21WeGRXbHlaU2duTGk5cGJuUmxjbTVoYkM5ZlkyOXRjR3hsYldWdWRDY3BPMXh1ZG1GeUlGOWpkWEp5ZVRJZ1BTQnlaWEYxYVhKbEtDY3VMMmx1ZEdWeWJtRnNMMTlqZFhKeWVUSW5LVHRjYm5aaGNpQm1hV3gwWlhJZ1BTQnlaWEYxYVhKbEtDY3VMMlpwYkhSbGNpY3BPMXh1WEc1Y2JpOHFLbHh1SUNvZ1ZHaGxJR052YlhCc1pXMWxiblFnYjJZZ1lHWnBiSFJsY21BdVhHNGdLbHh1SUNvZ1FXTjBjeUJoY3lCaElIUnlZVzV6WkhWalpYSWdhV1lnWVNCMGNtRnVjMlp2Y20xbGNpQnBjeUJuYVhabGJpQnBiaUJzYVhOMElIQnZjMmwwYVc5dUxseHVJQ3BjYmlBcUlFQm1kVzVqWEc0Z0tpQkFiV1Z0WW1WeVQyWWdVbHh1SUNvZ1FITnBibU5sSUhZd0xqRXVNRnh1SUNvZ1FHTmhkR1ZuYjNKNUlFeHBjM1JjYmlBcUlFQnphV2NnUm1sc2RHVnlZV0pzWlNCbUlEMCtJQ2hoSUMwK0lFSnZiMnhsWVc0cElDMCtJR1lnWVNBdFBpQm1JR0ZjYmlBcUlFQndZWEpoYlNCN1JuVnVZM1JwYjI1OUlIQnlaV1JjYmlBcUlFQndZWEpoYlNCN1FYSnlZWGw5SUdacGJIUmxjbUZpYkdWY2JpQXFJRUJ5WlhSMWNtNGdlMEZ5Y21GNWZWeHVJQ29nUUhObFpTQlNMbVpwYkhSbGNpd2dVaTUwY21GdWMyUjFZMlVzSUZJdVlXUmtTVzVrWlhoY2JpQXFJRUJsZUdGdGNHeGxYRzRnS2x4dUlDb2dJQ0FnSUNCMllYSWdhWE5QWkdRZ1BTQW9iaWtnUFQ0Z2JpQWxJRElnUFQwOUlERTdYRzRnS2x4dUlDb2dJQ0FnSUNCU0xuSmxhbVZqZENocGMwOWtaQ3dnV3pFc0lESXNJRE1zSURSZEtUc2dMeTg5UGlCYk1pd2dORjFjYmlBcVhHNGdLaUFnSUNBZ0lGSXVjbVZxWldOMEtHbHpUMlJrTENCN1lUb2dNU3dnWWpvZ01pd2dZem9nTXl3Z1pEb2dOSDBwT3lBdkx6MCtJSHRpT2lBeUxDQmtPaUEwZlZ4dUlDb3ZYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJRjlqZFhKeWVUSW9ablZ1WTNScGIyNGdjbVZxWldOMEtIQnlaV1FzSUdacGJIUmxjbUZpYkdVcElIdGNiaUFnY21WMGRYSnVJR1pwYkhSbGNpaGZZMjl0Y0d4bGJXVnVkQ2h3Y21Wa0tTd2dabWxzZEdWeVlXSnNaU2s3WEc1OUtUdGNibHh1WEc1Y2JpOHZMeTh2THk4dkx5OHZMeTh2THk4dkwxeHVMeThnVjBWQ1VFRkRTeUJHVDA5VVJWSmNiaTh2SUM0dmZpOXlZVzFrWVM5emNtTXZjbVZxWldOMExtcHpYRzR2THlCdGIyUjFiR1VnYVdRZ1BTQXhPRFZjYmk4dklHMXZaSFZzWlNCamFIVnVhM01nUFNBd0lsMHNJbTFoY0hCcGJtZHpJam9pUVVGQlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdJaXdpYzI5MWNtTmxVbTl2ZENJNklpSjlcIik7XG5cbi8qKiovIH0pLFxuLyogMTg2ICovXG4vKiBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyogYWxsIGV4cG9ydHMgdXNlZCAqL1xuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9+L3JhbWRhL3NyYy9yZXBsYWNlLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuZXZhbChcInZhciBfY3VycnkzID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9pbnRlcm5hbC9fY3VycnkzICovIDcpO1xcblxcblxcbi8qKlxcbiAqIFJlcGxhY2UgYSBzdWJzdHJpbmcgb3IgcmVnZXggbWF0Y2ggaW4gYSBzdHJpbmcgd2l0aCBhIHJlcGxhY2VtZW50LlxcbiAqXFxuICogQGZ1bmNcXG4gKiBAbWVtYmVyT2YgUlxcbiAqIEBzaW5jZSB2MC43LjBcXG4gKiBAY2F0ZWdvcnkgU3RyaW5nXFxuICogQHNpZyBSZWdFeHB8U3RyaW5nIC0+IFN0cmluZyAtPiBTdHJpbmcgLT4gU3RyaW5nXFxuICogQHBhcmFtIHtSZWdFeHB8U3RyaW5nfSBwYXR0ZXJuIEEgcmVndWxhciBleHByZXNzaW9uIG9yIGEgc3Vic3RyaW5nIHRvIG1hdGNoLlxcbiAqIEBwYXJhbSB7U3RyaW5nfSByZXBsYWNlbWVudCBUaGUgc3RyaW5nIHRvIHJlcGxhY2UgdGhlIG1hdGNoZXMgd2l0aC5cXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyIFRoZSBTdHJpbmcgdG8gZG8gdGhlIHNlYXJjaCBhbmQgcmVwbGFjZW1lbnQgaW4uXFxuICogQHJldHVybiB7U3RyaW5nfSBUaGUgcmVzdWx0LlxcbiAqIEBleGFtcGxlXFxuICpcXG4gKiAgICAgIFIucmVwbGFjZSgnZm9vJywgJ2JhcicsICdmb28gZm9vIGZvbycpOyAvLz0+ICdiYXIgZm9vIGZvbydcXG4gKiAgICAgIFIucmVwbGFjZSgvZm9vLywgJ2JhcicsICdmb28gZm9vIGZvbycpOyAvLz0+ICdiYXIgZm9vIGZvbydcXG4gKlxcbiAqICAgICAgLy8gVXNlIHRoZSBcXFwiZ1xcXCIgKGdsb2JhbCkgZmxhZyB0byByZXBsYWNlIGFsbCBvY2N1cnJlbmNlczpcXG4gKiAgICAgIFIucmVwbGFjZSgvZm9vL2csICdiYXInLCAnZm9vIGZvbyBmb28nKTsgLy89PiAnYmFyIGJhciBiYXInXFxuICovXFxubW9kdWxlLmV4cG9ydHMgPSBfY3VycnkzKGZ1bmN0aW9uIHJlcGxhY2UocmVnZXgsIHJlcGxhY2VtZW50LCBzdHIpIHtcXG4gIHJldHVybiBzdHIucmVwbGFjZShyZWdleCwgcmVwbGFjZW1lbnQpO1xcbn0pO1xcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pTVRnMkxtcHpJaXdpYzI5MWNtTmxjeUk2V3lKM1pXSndZV05yT2k4dkx5NHZmaTl5WVcxa1lTOXpjbU12Y21Wd2JHRmpaUzVxY3o5bE5qZ3hJbDBzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSW5aaGNpQmZZM1Z5Y25reklEMGdjbVZ4ZFdseVpTZ25MaTlwYm5SbGNtNWhiQzlmWTNWeWNua3pKeWs3WEc1Y2JseHVMeW9xWEc0Z0tpQlNaWEJzWVdObElHRWdjM1ZpYzNSeWFXNW5JRzl5SUhKbFoyVjRJRzFoZEdOb0lHbHVJR0VnYzNSeWFXNW5JSGRwZEdnZ1lTQnlaWEJzWVdObGJXVnVkQzVjYmlBcVhHNGdLaUJBWm5WdVkxeHVJQ29nUUcxbGJXSmxjazltSUZKY2JpQXFJRUJ6YVc1alpTQjJNQzQzTGpCY2JpQXFJRUJqWVhSbFoyOXllU0JUZEhKcGJtZGNiaUFxSUVCemFXY2dVbVZuUlhod2ZGTjBjbWx1WnlBdFBpQlRkSEpwYm1jZ0xUNGdVM1J5YVc1bklDMCtJRk4wY21sdVoxeHVJQ29nUUhCaGNtRnRJSHRTWldkRmVIQjhVM1J5YVc1bmZTQndZWFIwWlhKdUlFRWdjbVZuZFd4aGNpQmxlSEJ5WlhOemFXOXVJRzl5SUdFZ2MzVmljM1J5YVc1bklIUnZJRzFoZEdOb0xseHVJQ29nUUhCaGNtRnRJSHRUZEhKcGJtZDlJSEpsY0d4aFkyVnRaVzUwSUZSb1pTQnpkSEpwYm1jZ2RHOGdjbVZ3YkdGalpTQjBhR1VnYldGMFkyaGxjeUIzYVhSb0xseHVJQ29nUUhCaGNtRnRJSHRUZEhKcGJtZDlJSE4wY2lCVWFHVWdVM1J5YVc1bklIUnZJR1J2SUhSb1pTQnpaV0Z5WTJnZ1lXNWtJSEpsY0d4aFkyVnRaVzUwSUdsdUxseHVJQ29nUUhKbGRIVnliaUI3VTNSeWFXNW5mU0JVYUdVZ2NtVnpkV3gwTGx4dUlDb2dRR1Y0WVcxd2JHVmNiaUFxWEc0Z0tpQWdJQ0FnSUZJdWNtVndiR0ZqWlNnblptOXZKeXdnSjJKaGNpY3NJQ2RtYjI4Z1ptOXZJR1p2YnljcE95QXZMejArSUNkaVlYSWdabTl2SUdadmJ5ZGNiaUFxSUNBZ0lDQWdVaTV5WlhCc1lXTmxLQzltYjI4dkxDQW5ZbUZ5Snl3Z0oyWnZieUJtYjI4Z1ptOXZKeWs3SUM4dlBUNGdKMkpoY2lCbWIyOGdabTl2SjF4dUlDcGNiaUFxSUNBZ0lDQWdMeThnVlhObElIUm9aU0JjSW1kY0lpQW9aMnh2WW1Gc0tTQm1iR0ZuSUhSdklISmxjR3hoWTJVZ1lXeHNJRzlqWTNWeWNtVnVZMlZ6T2x4dUlDb2dJQ0FnSUNCU0xuSmxjR3hoWTJVb0wyWnZieTluTENBblltRnlKeXdnSjJadmJ5Qm1iMjhnWm05dkp5azdJQzh2UFQ0Z0oySmhjaUJpWVhJZ1ltRnlKMXh1SUNvdlhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlGOWpkWEp5ZVRNb1puVnVZM1JwYjI0Z2NtVndiR0ZqWlNoeVpXZGxlQ3dnY21Wd2JHRmpaVzFsYm5Rc0lITjBjaWtnZTF4dUlDQnlaWFIxY200Z2MzUnlMbkpsY0d4aFkyVW9jbVZuWlhnc0lISmxjR3hoWTJWdFpXNTBLVHRjYm4wcE8xeHVYRzVjYmx4dUx5OHZMeTh2THk4dkx5OHZMeTh2THk4dlhHNHZMeUJYUlVKUVFVTkxJRVpQVDFSRlVseHVMeThnTGk5K0wzSmhiV1JoTDNOeVl5OXlaWEJzWVdObExtcHpYRzR2THlCdGIyUjFiR1VnYVdRZ1BTQXhPRFpjYmk4dklHMXZaSFZzWlNCamFIVnVhM01nUFNBd0lsMHNJbTFoY0hCcGJtZHpJam9pUVVGQlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk95SXNJbk52ZFhKalpWSnZiM1FpT2lJaWZRPT1cIik7XG5cbi8qKiovIH0pLFxuLyogMTg3ICovXG4vKiBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyogYWxsIGV4cG9ydHMgdXNlZCAqL1xuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9+L3JhbWRhL3NyYy9yZXZlcnNlLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuZXZhbChcInZhciBfY3VycnkxID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9pbnRlcm5hbC9fY3VycnkxICovIDIpO1xcbnZhciBfaXNTdHJpbmcgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL2ludGVybmFsL19pc1N0cmluZyAqLyA2MCk7XFxuXFxuXFxuLyoqXFxuICogUmV0dXJucyBhIG5ldyBsaXN0IG9yIHN0cmluZyB3aXRoIHRoZSBlbGVtZW50cyBvciBjaGFyYWN0ZXJzIGluIHJldmVyc2VcXG4gKiBvcmRlci5cXG4gKlxcbiAqIEBmdW5jXFxuICogQG1lbWJlck9mIFJcXG4gKiBAc2luY2UgdjAuMS4wXFxuICogQGNhdGVnb3J5IExpc3RcXG4gKiBAc2lnIFthXSAtPiBbYV1cXG4gKiBAc2lnIFN0cmluZyAtPiBTdHJpbmdcXG4gKiBAcGFyYW0ge0FycmF5fFN0cmluZ30gbGlzdFxcbiAqIEByZXR1cm4ge0FycmF5fFN0cmluZ31cXG4gKiBAZXhhbXBsZVxcbiAqXFxuICogICAgICBSLnJldmVyc2UoWzEsIDIsIDNdKTsgIC8vPT4gWzMsIDIsIDFdXFxuICogICAgICBSLnJldmVyc2UoWzEsIDJdKTsgICAgIC8vPT4gWzIsIDFdXFxuICogICAgICBSLnJldmVyc2UoWzFdKTsgICAgICAgIC8vPT4gWzFdXFxuICogICAgICBSLnJldmVyc2UoW10pOyAgICAgICAgIC8vPT4gW11cXG4gKlxcbiAqICAgICAgUi5yZXZlcnNlKCdhYmMnKTsgICAgICAvLz0+ICdjYmEnXFxuICogICAgICBSLnJldmVyc2UoJ2FiJyk7ICAgICAgIC8vPT4gJ2JhJ1xcbiAqICAgICAgUi5yZXZlcnNlKCdhJyk7ICAgICAgICAvLz0+ICdhJ1xcbiAqICAgICAgUi5yZXZlcnNlKCcnKTsgICAgICAgICAvLz0+ICcnXFxuICovXFxubW9kdWxlLmV4cG9ydHMgPSBfY3VycnkxKGZ1bmN0aW9uIHJldmVyc2UobGlzdCkge1xcbiAgcmV0dXJuIF9pc1N0cmluZyhsaXN0KSA/IGxpc3Quc3BsaXQoJycpLnJldmVyc2UoKS5qb2luKCcnKSA6XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwobGlzdCwgMCkucmV2ZXJzZSgpO1xcbn0pO1xcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pTVRnM0xtcHpJaXdpYzI5MWNtTmxjeUk2V3lKM1pXSndZV05yT2k4dkx5NHZmaTl5WVcxa1lTOXpjbU12Y21WMlpYSnpaUzVxY3o4d05UTXlJbDBzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSW5aaGNpQmZZM1Z5Y25reElEMGdjbVZ4ZFdseVpTZ25MaTlwYm5SbGNtNWhiQzlmWTNWeWNua3hKeWs3WEc1MllYSWdYMmx6VTNSeWFXNW5JRDBnY21WeGRXbHlaU2duTGk5cGJuUmxjbTVoYkM5ZmFYTlRkSEpwYm1jbktUdGNibHh1WEc0dktpcGNiaUFxSUZKbGRIVnlibk1nWVNCdVpYY2diR2x6ZENCdmNpQnpkSEpwYm1jZ2QybDBhQ0IwYUdVZ1pXeGxiV1Z1ZEhNZ2IzSWdZMmhoY21GamRHVnljeUJwYmlCeVpYWmxjbk5sWEc0Z0tpQnZjbVJsY2k1Y2JpQXFYRzRnS2lCQVpuVnVZMXh1SUNvZ1FHMWxiV0psY2s5bUlGSmNiaUFxSUVCemFXNWpaU0IyTUM0eExqQmNiaUFxSUVCallYUmxaMjl5ZVNCTWFYTjBYRzRnS2lCQWMybG5JRnRoWFNBdFBpQmJZVjFjYmlBcUlFQnphV2NnVTNSeWFXNW5JQzArSUZOMGNtbHVaMXh1SUNvZ1FIQmhjbUZ0SUh0QmNuSmhlWHhUZEhKcGJtZDlJR3hwYzNSY2JpQXFJRUJ5WlhSMWNtNGdlMEZ5Y21GNWZGTjBjbWx1WjMxY2JpQXFJRUJsZUdGdGNHeGxYRzRnS2x4dUlDb2dJQ0FnSUNCU0xuSmxkbVZ5YzJVb1d6RXNJRElzSUROZEtUc2dJQzh2UFQ0Z1d6TXNJRElzSURGZFhHNGdLaUFnSUNBZ0lGSXVjbVYyWlhKelpTaGJNU3dnTWwwcE95QWdJQ0FnTHk4OVBpQmJNaXdnTVYxY2JpQXFJQ0FnSUNBZ1VpNXlaWFpsY25ObEtGc3hYU2s3SUNBZ0lDQWdJQ0F2THowK0lGc3hYVnh1SUNvZ0lDQWdJQ0JTTG5KbGRtVnljMlVvVzEwcE95QWdJQ0FnSUNBZ0lDOHZQVDRnVzExY2JpQXFYRzRnS2lBZ0lDQWdJRkl1Y21WMlpYSnpaU2duWVdKakp5azdJQ0FnSUNBZ0x5ODlQaUFuWTJKaEoxeHVJQ29nSUNBZ0lDQlNMbkpsZG1WeWMyVW9KMkZpSnlrN0lDQWdJQ0FnSUM4dlBUNGdKMkpoSjF4dUlDb2dJQ0FnSUNCU0xuSmxkbVZ5YzJVb0oyRW5LVHNnSUNBZ0lDQWdJQzh2UFQ0Z0oyRW5YRzRnS2lBZ0lDQWdJRkl1Y21WMlpYSnpaU2duSnlrN0lDQWdJQ0FnSUNBZ0x5ODlQaUFuSjF4dUlDb3ZYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJRjlqZFhKeWVURW9ablZ1WTNScGIyNGdjbVYyWlhKelpTaHNhWE4wS1NCN1hHNGdJSEpsZEhWeWJpQmZhWE5UZEhKcGJtY29iR2x6ZENrZ1B5QnNhWE4wTG5Od2JHbDBLQ2NuS1M1eVpYWmxjbk5sS0NrdWFtOXBiaWduSnlrZ09seHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdRWEp5WVhrdWNISnZkRzkwZVhCbExuTnNhV05sTG1OaGJHd29iR2x6ZEN3Z01Da3VjbVYyWlhKelpTZ3BPMXh1ZlNrN1hHNWNibHh1WEc0dkx5OHZMeTh2THk4dkx5OHZMeTh2THk5Y2JpOHZJRmRGUWxCQlEwc2dSazlQVkVWU1hHNHZMeUF1TDM0dmNtRnRaR0V2YzNKakwzSmxkbVZ5YzJVdWFuTmNiaTh2SUcxdlpIVnNaU0JwWkNBOUlERTROMXh1THk4Z2JXOWtkV3hsSUdOb2RXNXJjeUE5SURBaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdJaXdpYzI5MWNtTmxVbTl2ZENJNklpSjlcIik7XG5cbi8qKiovIH0pLFxuLyogMTg4ICovXG4vKiBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyogYWxsIGV4cG9ydHMgdXNlZCAqL1xuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vfi9yYW1kYS9zcmMvc2xpY2UuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuZXZhbChcInZhciBfY2hlY2tGb3JNZXRob2QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL2ludGVybmFsL19jaGVja0Zvck1ldGhvZCAqLyA1Nyk7XFxudmFyIF9jdXJyeTMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL2ludGVybmFsL19jdXJyeTMgKi8gNyk7XFxuXFxuXFxuLyoqXFxuICogUmV0dXJucyB0aGUgZWxlbWVudHMgb2YgdGhlIGdpdmVuIGxpc3Qgb3Igc3RyaW5nIChvciBvYmplY3Qgd2l0aCBhIGBzbGljZWBcXG4gKiBtZXRob2QpIGZyb20gYGZyb21JbmRleGAgKGluY2x1c2l2ZSkgdG8gYHRvSW5kZXhgIChleGNsdXNpdmUpLlxcbiAqXFxuICogRGlzcGF0Y2hlcyB0byB0aGUgYHNsaWNlYCBtZXRob2Qgb2YgdGhlIHRoaXJkIGFyZ3VtZW50LCBpZiBwcmVzZW50LlxcbiAqXFxuICogQGZ1bmNcXG4gKiBAbWVtYmVyT2YgUlxcbiAqIEBzaW5jZSB2MC4xLjRcXG4gKiBAY2F0ZWdvcnkgTGlzdFxcbiAqIEBzaWcgTnVtYmVyIC0+IE51bWJlciAtPiBbYV0gLT4gW2FdXFxuICogQHNpZyBOdW1iZXIgLT4gTnVtYmVyIC0+IFN0cmluZyAtPiBTdHJpbmdcXG4gKiBAcGFyYW0ge051bWJlcn0gZnJvbUluZGV4IFRoZSBzdGFydCBpbmRleCAoaW5jbHVzaXZlKS5cXG4gKiBAcGFyYW0ge051bWJlcn0gdG9JbmRleCBUaGUgZW5kIGluZGV4IChleGNsdXNpdmUpLlxcbiAqIEBwYXJhbSB7Kn0gbGlzdFxcbiAqIEByZXR1cm4geyp9XFxuICogQGV4YW1wbGVcXG4gKlxcbiAqICAgICAgUi5zbGljZSgxLCAzLCBbJ2EnLCAnYicsICdjJywgJ2QnXSk7ICAgICAgICAvLz0+IFsnYicsICdjJ11cXG4gKiAgICAgIFIuc2xpY2UoMSwgSW5maW5pdHksIFsnYScsICdiJywgJ2MnLCAnZCddKTsgLy89PiBbJ2InLCAnYycsICdkJ11cXG4gKiAgICAgIFIuc2xpY2UoMCwgLTEsIFsnYScsICdiJywgJ2MnLCAnZCddKTsgICAgICAgLy89PiBbJ2EnLCAnYicsICdjJ11cXG4gKiAgICAgIFIuc2xpY2UoLTMsIC0xLCBbJ2EnLCAnYicsICdjJywgJ2QnXSk7ICAgICAgLy89PiBbJ2InLCAnYyddXFxuICogICAgICBSLnNsaWNlKDAsIDMsICdyYW1kYScpOyAgICAgICAgICAgICAgICAgICAgIC8vPT4gJ3JhbSdcXG4gKi9cXG5tb2R1bGUuZXhwb3J0cyA9IF9jdXJyeTMoX2NoZWNrRm9yTWV0aG9kKCdzbGljZScsIGZ1bmN0aW9uIHNsaWNlKGZyb21JbmRleCwgdG9JbmRleCwgbGlzdCkge1xcbiAgcmV0dXJuIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGxpc3QsIGZyb21JbmRleCwgdG9JbmRleCk7XFxufSkpO1xcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pTVRnNExtcHpJaXdpYzI5MWNtTmxjeUk2V3lKM1pXSndZV05yT2k4dkx5NHZmaTl5WVcxa1lTOXpjbU12YzJ4cFkyVXVhbk0vTmpBeVpDSmRMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUoyWVhJZ1gyTm9aV05yUm05eVRXVjBhRzlrSUQwZ2NtVnhkV2x5WlNnbkxpOXBiblJsY201aGJDOWZZMmhsWTJ0R2IzSk5aWFJvYjJRbktUdGNiblpoY2lCZlkzVnljbmt6SUQwZ2NtVnhkV2x5WlNnbkxpOXBiblJsY201aGJDOWZZM1Z5Y25rekp5azdYRzVjYmx4dUx5b3FYRzRnS2lCU1pYUjFjbTV6SUhSb1pTQmxiR1Z0Wlc1MGN5QnZaaUIwYUdVZ1oybDJaVzRnYkdsemRDQnZjaUJ6ZEhKcGJtY2dLRzl5SUc5aWFtVmpkQ0IzYVhSb0lHRWdZSE5zYVdObFlGeHVJQ29nYldWMGFHOWtLU0JtY205dElHQm1jbTl0U1c1a1pYaGdJQ2hwYm1Oc2RYTnBkbVVwSUhSdklHQjBiMGx1WkdWNFlDQW9aWGhqYkhWemFYWmxLUzVjYmlBcVhHNGdLaUJFYVhOd1lYUmphR1Z6SUhSdklIUm9aU0JnYzJ4cFkyVmdJRzFsZEdodlpDQnZaaUIwYUdVZ2RHaHBjbVFnWVhKbmRXMWxiblFzSUdsbUlIQnlaWE5sYm5RdVhHNGdLbHh1SUNvZ1FHWjFibU5jYmlBcUlFQnRaVzFpWlhKUFppQlNYRzRnS2lCQWMybHVZMlVnZGpBdU1TNDBYRzRnS2lCQVkyRjBaV2R2Y25rZ1RHbHpkRnh1SUNvZ1FITnBaeUJPZFcxaVpYSWdMVDRnVG5WdFltVnlJQzArSUZ0aFhTQXRQaUJiWVYxY2JpQXFJRUJ6YVdjZ1RuVnRZbVZ5SUMwK0lFNTFiV0psY2lBdFBpQlRkSEpwYm1jZ0xUNGdVM1J5YVc1blhHNGdLaUJBY0dGeVlXMGdlMDUxYldKbGNuMGdabkp2YlVsdVpHVjRJRlJvWlNCemRHRnlkQ0JwYm1SbGVDQW9hVzVqYkhWemFYWmxLUzVjYmlBcUlFQndZWEpoYlNCN1RuVnRZbVZ5ZlNCMGIwbHVaR1Y0SUZSb1pTQmxibVFnYVc1a1pYZ2dLR1Y0WTJ4MWMybDJaU2t1WEc0Z0tpQkFjR0Z5WVcwZ2V5cDlJR3hwYzNSY2JpQXFJRUJ5WlhSMWNtNGdleXA5WEc0Z0tpQkFaWGhoYlhCc1pWeHVJQ3BjYmlBcUlDQWdJQ0FnVWk1emJHbGpaU2d4TENBekxDQmJKMkVuTENBbllpY3NJQ2RqSnl3Z0oyUW5YU2s3SUNBZ0lDQWdJQ0F2THowK0lGc25ZaWNzSUNkakoxMWNiaUFxSUNBZ0lDQWdVaTV6YkdsalpTZ3hMQ0JKYm1acGJtbDBlU3dnV3lkaEp5d2dKMkluTENBbll5Y3NJQ2RrSjEwcE95QXZMejArSUZzbllpY3NJQ2RqSnl3Z0oyUW5YVnh1SUNvZ0lDQWdJQ0JTTG5Oc2FXTmxLREFzSUMweExDQmJKMkVuTENBbllpY3NJQ2RqSnl3Z0oyUW5YU2s3SUNBZ0lDQWdJQzh2UFQ0Z1d5ZGhKeXdnSjJJbkxDQW5ZeWRkWEc0Z0tpQWdJQ0FnSUZJdWMyeHBZMlVvTFRNc0lDMHhMQ0JiSjJFbkxDQW5ZaWNzSUNkakp5d2dKMlFuWFNrN0lDQWdJQ0FnTHk4OVBpQmJKMkluTENBbll5ZGRYRzRnS2lBZ0lDQWdJRkl1YzJ4cFkyVW9NQ3dnTXl3Z0ozSmhiV1JoSnlrN0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeTg5UGlBbmNtRnRKMXh1SUNvdlhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlGOWpkWEp5ZVRNb1gyTm9aV05yUm05eVRXVjBhRzlrS0NkemJHbGpaU2NzSUdaMWJtTjBhVzl1SUhOc2FXTmxLR1p5YjIxSmJtUmxlQ3dnZEc5SmJtUmxlQ3dnYkdsemRDa2dlMXh1SUNCeVpYUjFjbTRnUVhKeVlYa3VjSEp2ZEc5MGVYQmxMbk5zYVdObExtTmhiR3dvYkdsemRDd2dabkp2YlVsdVpHVjRMQ0IwYjBsdVpHVjRLVHRjYm4wcEtUdGNibHh1WEc1Y2JpOHZMeTh2THk4dkx5OHZMeTh2THk4dkwxeHVMeThnVjBWQ1VFRkRTeUJHVDA5VVJWSmNiaTh2SUM0dmZpOXlZVzFrWVM5emNtTXZjMnhwWTJVdWFuTmNiaTh2SUcxdlpIVnNaU0JwWkNBOUlERTRPRnh1THk4Z2JXOWtkV3hsSUdOb2RXNXJjeUE5SURBaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3lJc0luTnZkWEpqWlZKdmIzUWlPaUlpZlE9PVwiKTtcblxuLyoqKi8gfSksXG4vKiAxODkgKi9cbi8qIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKiBhbGwgZXhwb3J0cyB1c2VkICovXG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9+L3JhbWRhL3NyYy9zcGxpdC5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5ldmFsKFwidmFyIGludm9rZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL2ludm9rZXIgKi8gMTczKTtcXG5cXG5cXG4vKipcXG4gKiBTcGxpdHMgYSBzdHJpbmcgaW50byBhbiBhcnJheSBvZiBzdHJpbmdzIGJhc2VkIG9uIHRoZSBnaXZlblxcbiAqIHNlcGFyYXRvci5cXG4gKlxcbiAqIEBmdW5jXFxuICogQG1lbWJlck9mIFJcXG4gKiBAc2luY2UgdjAuMS4wXFxuICogQGNhdGVnb3J5IFN0cmluZ1xcbiAqIEBzaWcgKFN0cmluZyB8IFJlZ0V4cCkgLT4gU3RyaW5nIC0+IFtTdHJpbmddXFxuICogQHBhcmFtIHtTdHJpbmd8UmVnRXhwfSBzZXAgVGhlIHBhdHRlcm4uXFxuICogQHBhcmFtIHtTdHJpbmd9IHN0ciBUaGUgc3RyaW5nIHRvIHNlcGFyYXRlIGludG8gYW4gYXJyYXkuXFxuICogQHJldHVybiB7QXJyYXl9IFRoZSBhcnJheSBvZiBzdHJpbmdzIGZyb20gYHN0cmAgc2VwYXJhdGVkIGJ5IGBzdHJgLlxcbiAqIEBzZWUgUi5qb2luXFxuICogQGV4YW1wbGVcXG4gKlxcbiAqICAgICAgdmFyIHBhdGhDb21wb25lbnRzID0gUi5zcGxpdCgnLycpO1xcbiAqICAgICAgUi50YWlsKHBhdGhDb21wb25lbnRzKCcvdXNyL2xvY2FsL2Jpbi9ub2RlJykpOyAvLz0+IFsndXNyJywgJ2xvY2FsJywgJ2JpbicsICdub2RlJ11cXG4gKlxcbiAqICAgICAgUi5zcGxpdCgnLicsICdhLmIuYy54eXouZCcpOyAvLz0+IFsnYScsICdiJywgJ2MnLCAneHl6JywgJ2QnXVxcbiAqL1xcbm1vZHVsZS5leHBvcnRzID0gaW52b2tlcigxLCAnc3BsaXQnKTtcXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaU1UZzVMbXB6SWl3aWMyOTFjbU5sY3lJNld5SjNaV0p3WVdOck9pOHZMeTR2Zmk5eVlXMWtZUzl6Y21NdmMzQnNhWFF1YW5NL09XTXhOeUpkTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lKMllYSWdhVzUyYjJ0bGNpQTlJSEpsY1hWcGNtVW9KeTR2YVc1MmIydGxjaWNwTzF4dVhHNWNiaThxS2x4dUlDb2dVM0JzYVhSeklHRWdjM1J5YVc1bklHbHVkRzhnWVc0Z1lYSnlZWGtnYjJZZ2MzUnlhVzVuY3lCaVlYTmxaQ0J2YmlCMGFHVWdaMmwyWlc1Y2JpQXFJSE5sY0dGeVlYUnZjaTVjYmlBcVhHNGdLaUJBWm5WdVkxeHVJQ29nUUcxbGJXSmxjazltSUZKY2JpQXFJRUJ6YVc1alpTQjJNQzR4TGpCY2JpQXFJRUJqWVhSbFoyOXllU0JUZEhKcGJtZGNiaUFxSUVCemFXY2dLRk4wY21sdVp5QjhJRkpsWjBWNGNDa2dMVDRnVTNSeWFXNW5JQzArSUZ0VGRISnBibWRkWEc0Z0tpQkFjR0Z5WVcwZ2UxTjBjbWx1WjN4U1pXZEZlSEI5SUhObGNDQlVhR1VnY0dGMGRHVnliaTVjYmlBcUlFQndZWEpoYlNCN1UzUnlhVzVuZlNCemRISWdWR2hsSUhOMGNtbHVaeUIwYnlCelpYQmhjbUYwWlNCcGJuUnZJR0Z1SUdGeWNtRjVMbHh1SUNvZ1FISmxkSFZ5YmlCN1FYSnlZWGw5SUZSb1pTQmhjbkpoZVNCdlppQnpkSEpwYm1keklHWnliMjBnWUhOMGNtQWdjMlZ3WVhKaGRHVmtJR0o1SUdCemRISmdMbHh1SUNvZ1FITmxaU0JTTG1wdmFXNWNiaUFxSUVCbGVHRnRjR3hsWEc0Z0tseHVJQ29nSUNBZ0lDQjJZWElnY0dGMGFFTnZiWEJ2Ym1WdWRITWdQU0JTTG5Od2JHbDBLQ2N2SnlrN1hHNGdLaUFnSUNBZ0lGSXVkR0ZwYkNod1lYUm9RMjl0Y0c5dVpXNTBjeWduTDNWemNpOXNiMk5oYkM5aWFXNHZibTlrWlNjcEtUc2dMeTg5UGlCYkozVnpjaWNzSUNkc2IyTmhiQ2NzSUNkaWFXNG5MQ0FuYm05a1pTZGRYRzRnS2x4dUlDb2dJQ0FnSUNCU0xuTndiR2wwS0NjdUp5d2dKMkV1WWk1akxuaDVlaTVrSnlrN0lDOHZQVDRnV3lkaEp5d2dKMkluTENBbll5Y3NJQ2Q0ZVhvbkxDQW5aQ2RkWEc0Z0tpOWNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdhVzUyYjJ0bGNpZ3hMQ0FuYzNCc2FYUW5LVHRjYmx4dVhHNWNiaTh2THk4dkx5OHZMeTh2THk4dkx5OHZMMXh1THk4Z1YwVkNVRUZEU3lCR1QwOVVSVkpjYmk4dklDNHZmaTl5WVcxa1lTOXpjbU12YzNCc2FYUXVhbk5jYmk4dklHMXZaSFZzWlNCcFpDQTlJREU0T1Z4dUx5OGdiVzlrZFd4bElHTm9kVzVyY3lBOUlEQWlYU3dpYldGd2NHbHVaM01pT2lKQlFVRkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUc2lMQ0p6YjNWeVkyVlNiMjkwSWpvaUluMD1cIik7XG5cbi8qKiovIH0pLFxuLyogMTkwICovXG4vKiBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyogYWxsIGV4cG9ydHMgdXNlZCAqL1xuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9+L3JhbWRhL3NyYy90YWlsLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuZXZhbChcInZhciBfY2hlY2tGb3JNZXRob2QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL2ludGVybmFsL19jaGVja0Zvck1ldGhvZCAqLyA1Nyk7XFxudmFyIF9jdXJyeTEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL2ludGVybmFsL19jdXJyeTEgKi8gMik7XFxudmFyIHNsaWNlID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9zbGljZSAqLyAxODgpO1xcblxcblxcbi8qKlxcbiAqIFJldHVybnMgYWxsIGJ1dCB0aGUgZmlyc3QgZWxlbWVudCBvZiB0aGUgZ2l2ZW4gbGlzdCBvciBzdHJpbmcgKG9yIG9iamVjdFxcbiAqIHdpdGggYSBgdGFpbGAgbWV0aG9kKS5cXG4gKlxcbiAqIERpc3BhdGNoZXMgdG8gdGhlIGBzbGljZWAgbWV0aG9kIG9mIHRoZSBmaXJzdCBhcmd1bWVudCwgaWYgcHJlc2VudC5cXG4gKlxcbiAqIEBmdW5jXFxuICogQG1lbWJlck9mIFJcXG4gKiBAc2luY2UgdjAuMS4wXFxuICogQGNhdGVnb3J5IExpc3RcXG4gKiBAc2lnIFthXSAtPiBbYV1cXG4gKiBAc2lnIFN0cmluZyAtPiBTdHJpbmdcXG4gKiBAcGFyYW0geyp9IGxpc3RcXG4gKiBAcmV0dXJuIHsqfVxcbiAqIEBzZWUgUi5oZWFkLCBSLmluaXQsIFIubGFzdFxcbiAqIEBleGFtcGxlXFxuICpcXG4gKiAgICAgIFIudGFpbChbMSwgMiwgM10pOyAgLy89PiBbMiwgM11cXG4gKiAgICAgIFIudGFpbChbMSwgMl0pOyAgICAgLy89PiBbMl1cXG4gKiAgICAgIFIudGFpbChbMV0pOyAgICAgICAgLy89PiBbXVxcbiAqICAgICAgUi50YWlsKFtdKTsgICAgICAgICAvLz0+IFtdXFxuICpcXG4gKiAgICAgIFIudGFpbCgnYWJjJyk7ICAvLz0+ICdiYydcXG4gKiAgICAgIFIudGFpbCgnYWInKTsgICAvLz0+ICdiJ1xcbiAqICAgICAgUi50YWlsKCdhJyk7ICAgIC8vPT4gJydcXG4gKiAgICAgIFIudGFpbCgnJyk7ICAgICAvLz0+ICcnXFxuICovXFxubW9kdWxlLmV4cG9ydHMgPSBfY3VycnkxKF9jaGVja0Zvck1ldGhvZCgndGFpbCcsIHNsaWNlKDEsIEluZmluaXR5KSkpO1xcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pTVRrd0xtcHpJaXdpYzI5MWNtTmxjeUk2V3lKM1pXSndZV05yT2k4dkx5NHZmaTl5WVcxa1lTOXpjbU12ZEdGcGJDNXFjejgzT0dJMUlsMHNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJblpoY2lCZlkyaGxZMnRHYjNKTlpYUm9iMlFnUFNCeVpYRjFhWEpsS0NjdUwybHVkR1Z5Ym1Gc0wxOWphR1ZqYTBadmNrMWxkR2h2WkNjcE8xeHVkbUZ5SUY5amRYSnllVEVnUFNCeVpYRjFhWEpsS0NjdUwybHVkR1Z5Ym1Gc0wxOWpkWEp5ZVRFbktUdGNiblpoY2lCemJHbGpaU0E5SUhKbGNYVnBjbVVvSnk0dmMyeHBZMlVuS1R0Y2JseHVYRzR2S2lwY2JpQXFJRkpsZEhWeWJuTWdZV3hzSUdKMWRDQjBhR1VnWm1seWMzUWdaV3hsYldWdWRDQnZaaUIwYUdVZ1oybDJaVzRnYkdsemRDQnZjaUJ6ZEhKcGJtY2dLRzl5SUc5aWFtVmpkRnh1SUNvZ2QybDBhQ0JoSUdCMFlXbHNZQ0J0WlhSb2IyUXBMbHh1SUNwY2JpQXFJRVJwYzNCaGRHTm9aWE1nZEc4Z2RHaGxJR0J6YkdsalpXQWdiV1YwYUc5a0lHOW1JSFJvWlNCbWFYSnpkQ0JoY21kMWJXVnVkQ3dnYVdZZ2NISmxjMlZ1ZEM1Y2JpQXFYRzRnS2lCQVpuVnVZMXh1SUNvZ1FHMWxiV0psY2s5bUlGSmNiaUFxSUVCemFXNWpaU0IyTUM0eExqQmNiaUFxSUVCallYUmxaMjl5ZVNCTWFYTjBYRzRnS2lCQWMybG5JRnRoWFNBdFBpQmJZVjFjYmlBcUlFQnphV2NnVTNSeWFXNW5JQzArSUZOMGNtbHVaMXh1SUNvZ1FIQmhjbUZ0SUhzcWZTQnNhWE4wWEc0Z0tpQkFjbVYwZFhKdUlIc3FmVnh1SUNvZ1FITmxaU0JTTG1obFlXUXNJRkl1YVc1cGRDd2dVaTVzWVhOMFhHNGdLaUJBWlhoaGJYQnNaVnh1SUNwY2JpQXFJQ0FnSUNBZ1VpNTBZV2xzS0ZzeExDQXlMQ0F6WFNrN0lDQXZMejArSUZzeUxDQXpYVnh1SUNvZ0lDQWdJQ0JTTG5SaGFXd29XekVzSURKZEtUc2dJQ0FnSUM4dlBUNGdXekpkWEc0Z0tpQWdJQ0FnSUZJdWRHRnBiQ2hiTVYwcE95QWdJQ0FnSUNBZ0x5ODlQaUJiWFZ4dUlDb2dJQ0FnSUNCU0xuUmhhV3dvVzEwcE95QWdJQ0FnSUNBZ0lDOHZQVDRnVzExY2JpQXFYRzRnS2lBZ0lDQWdJRkl1ZEdGcGJDZ25ZV0pqSnlrN0lDQXZMejArSUNkaVl5ZGNiaUFxSUNBZ0lDQWdVaTUwWVdsc0tDZGhZaWNwT3lBZ0lDOHZQVDRnSjJJblhHNGdLaUFnSUNBZ0lGSXVkR0ZwYkNnbllTY3BPeUFnSUNBdkx6MCtJQ2NuWEc0Z0tpQWdJQ0FnSUZJdWRHRnBiQ2duSnlrN0lDQWdJQ0F2THowK0lDY25YRzRnS2k5Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1gyTjFjbko1TVNoZlkyaGxZMnRHYjNKTlpYUm9iMlFvSjNSaGFXd25MQ0J6YkdsalpTZ3hMQ0JKYm1acGJtbDBlU2twS1R0Y2JseHVYRzVjYmk4dkx5OHZMeTh2THk4dkx5OHZMeTh2TDF4dUx5OGdWMFZDVUVGRFN5QkdUMDlVUlZKY2JpOHZJQzR2Zmk5eVlXMWtZUzl6Y21NdmRHRnBiQzVxYzF4dUx5OGdiVzlrZFd4bElHbGtJRDBnTVRrd1hHNHZMeUJ0YjJSMWJHVWdZMmgxYm10eklEMGdNQ0pkTENKdFlYQndhVzVuY3lJNklrRkJRVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPeUlzSW5OdmRYSmpaVkp2YjNRaU9pSWlmUT09XCIpO1xuXG4vKioqLyB9KSxcbi8qIDE5MSAqL1xuLyogbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9cbi8qIGFsbCBleHBvcnRzIHVzZWQgKi9cbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL34vcmFtZGEvc3JjL3RvU3RyaW5nLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbmV2YWwoXCJ2YXIgX2N1cnJ5MSA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vaW50ZXJuYWwvX2N1cnJ5MSAqLyAyKTtcXG52YXIgX3RvU3RyaW5nID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9pbnRlcm5hbC9fdG9TdHJpbmcgKi8gMTY5KTtcXG5cXG5cXG4vKipcXG4gKiBSZXR1cm5zIHRoZSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIGdpdmVuIHZhbHVlLiBgZXZhbGAnaW5nIHRoZSBvdXRwdXRcXG4gKiBzaG91bGQgcmVzdWx0IGluIGEgdmFsdWUgZXF1aXZhbGVudCB0byB0aGUgaW5wdXQgdmFsdWUuIE1hbnkgb2YgdGhlIGJ1aWx0LWluXFxuICogYHRvU3RyaW5nYCBtZXRob2RzIGRvIG5vdCBzYXRpc2Z5IHRoaXMgcmVxdWlyZW1lbnQuXFxuICpcXG4gKiBJZiB0aGUgZ2l2ZW4gdmFsdWUgaXMgYW4gYFtvYmplY3QgT2JqZWN0XWAgd2l0aCBhIGB0b1N0cmluZ2AgbWV0aG9kIG90aGVyXFxuICogdGhhbiBgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZ2AsIHRoaXMgbWV0aG9kIGlzIGludm9rZWQgd2l0aCBubyBhcmd1bWVudHNcXG4gKiB0byBwcm9kdWNlIHRoZSByZXR1cm4gdmFsdWUuIFRoaXMgbWVhbnMgdXNlci1kZWZpbmVkIGNvbnN0cnVjdG9yIGZ1bmN0aW9uc1xcbiAqIGNhbiBwcm92aWRlIGEgc3VpdGFibGUgYHRvU3RyaW5nYCBtZXRob2QuIEZvciBleGFtcGxlOlxcbiAqXFxuICogICAgIGZ1bmN0aW9uIFBvaW50KHgsIHkpIHtcXG4gKiAgICAgICB0aGlzLnggPSB4O1xcbiAqICAgICAgIHRoaXMueSA9IHk7XFxuICogICAgIH1cXG4gKlxcbiAqICAgICBQb2ludC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcXG4gKiAgICAgICByZXR1cm4gJ25ldyBQb2ludCgnICsgdGhpcy54ICsgJywgJyArIHRoaXMueSArICcpJztcXG4gKiAgICAgfTtcXG4gKlxcbiAqICAgICBSLnRvU3RyaW5nKG5ldyBQb2ludCgxLCAyKSk7IC8vPT4gJ25ldyBQb2ludCgxLCAyKSdcXG4gKlxcbiAqIEBmdW5jXFxuICogQG1lbWJlck9mIFJcXG4gKiBAc2luY2UgdjAuMTQuMFxcbiAqIEBjYXRlZ29yeSBTdHJpbmdcXG4gKiBAc2lnICogLT4gU3RyaW5nXFxuICogQHBhcmFtIHsqfSB2YWxcXG4gKiBAcmV0dXJuIHtTdHJpbmd9XFxuICogQGV4YW1wbGVcXG4gKlxcbiAqICAgICAgUi50b1N0cmluZyg0Mik7IC8vPT4gJzQyJ1xcbiAqICAgICAgUi50b1N0cmluZygnYWJjJyk7IC8vPT4gJ1xcXCJhYmNcXFwiJ1xcbiAqICAgICAgUi50b1N0cmluZyhbMSwgMiwgM10pOyAvLz0+ICdbMSwgMiwgM10nXFxuICogICAgICBSLnRvU3RyaW5nKHtmb286IDEsIGJhcjogMiwgYmF6OiAzfSk7IC8vPT4gJ3tcXFwiYmFyXFxcIjogMiwgXFxcImJhelxcXCI6IDMsIFxcXCJmb29cXFwiOiAxfSdcXG4gKiAgICAgIFIudG9TdHJpbmcobmV3IERhdGUoJzIwMDEtMDItMDNUMDQ6MDU6MDZaJykpOyAvLz0+ICduZXcgRGF0ZShcXFwiMjAwMS0wMi0wM1QwNDowNTowNi4wMDBaXFxcIiknXFxuICovXFxubW9kdWxlLmV4cG9ydHMgPSBfY3VycnkxKGZ1bmN0aW9uIHRvU3RyaW5nKHZhbCkgeyByZXR1cm4gX3RvU3RyaW5nKHZhbCwgW10pOyB9KTtcXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaU1Ua3hMbXB6SWl3aWMyOTFjbU5sY3lJNld5SjNaV0p3WVdOck9pOHZMeTR2Zmk5eVlXMWtZUzl6Y21NdmRHOVRkSEpwYm1jdWFuTS9PVFF4TUNKZExDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SjJZWElnWDJOMWNuSjVNU0E5SUhKbGNYVnBjbVVvSnk0dmFXNTBaWEp1WVd3dlgyTjFjbko1TVNjcE8xeHVkbUZ5SUY5MGIxTjBjbWx1WnlBOUlISmxjWFZwY21Vb0p5NHZhVzUwWlhKdVlXd3ZYM1J2VTNSeWFXNW5KeWs3WEc1Y2JseHVMeW9xWEc0Z0tpQlNaWFIxY201eklIUm9aU0J6ZEhKcGJtY2djbVZ3Y21WelpXNTBZWFJwYjI0Z2IyWWdkR2hsSUdkcGRtVnVJSFpoYkhWbExpQmdaWFpoYkdBbmFXNW5JSFJvWlNCdmRYUndkWFJjYmlBcUlITm9iM1ZzWkNCeVpYTjFiSFFnYVc0Z1lTQjJZV3gxWlNCbGNYVnBkbUZzWlc1MElIUnZJSFJvWlNCcGJuQjFkQ0IyWVd4MVpTNGdUV0Z1ZVNCdlppQjBhR1VnWW5WcGJIUXRhVzVjYmlBcUlHQjBiMU4wY21sdVoyQWdiV1YwYUc5a2N5QmtieUJ1YjNRZ2MyRjBhWE5tZVNCMGFHbHpJSEpsY1hWcGNtVnRaVzUwTGx4dUlDcGNiaUFxSUVsbUlIUm9aU0JuYVhabGJpQjJZV3gxWlNCcGN5QmhiaUJnVzI5aWFtVmpkQ0JQWW1wbFkzUmRZQ0IzYVhSb0lHRWdZSFJ2VTNSeWFXNW5ZQ0J0WlhSb2IyUWdiM1JvWlhKY2JpQXFJSFJvWVc0Z1lFOWlhbVZqZEM1d2NtOTBiM1I1Y0dVdWRHOVRkSEpwYm1kZ0xDQjBhR2x6SUcxbGRHaHZaQ0JwY3lCcGJuWnZhMlZrSUhkcGRHZ2dibThnWVhKbmRXMWxiblJ6WEc0Z0tpQjBieUJ3Y205a2RXTmxJSFJvWlNCeVpYUjFjbTRnZG1Gc2RXVXVJRlJvYVhNZ2JXVmhibk1nZFhObGNpMWtaV1pwYm1Wa0lHTnZibk4wY25WamRHOXlJR1oxYm1OMGFXOXVjMXh1SUNvZ1kyRnVJSEJ5YjNacFpHVWdZU0J6ZFdsMFlXSnNaU0JnZEc5VGRISnBibWRnSUcxbGRHaHZaQzRnUm05eUlHVjRZVzF3YkdVNlhHNGdLbHh1SUNvZ0lDQWdJR1oxYm1OMGFXOXVJRkJ2YVc1MEtIZ3NJSGtwSUh0Y2JpQXFJQ0FnSUNBZ0lIUm9hWE11ZUNBOUlIZzdYRzRnS2lBZ0lDQWdJQ0IwYUdsekxua2dQU0I1TzF4dUlDb2dJQ0FnSUgxY2JpQXFYRzRnS2lBZ0lDQWdVRzlwYm5RdWNISnZkRzkwZVhCbExuUnZVM1J5YVc1bklEMGdablZ1WTNScGIyNG9LU0I3WEc0Z0tpQWdJQ0FnSUNCeVpYUjFjbTRnSjI1bGR5QlFiMmx1ZENnbklDc2dkR2hwY3k1NElDc2dKeXdnSnlBcklIUm9hWE11ZVNBcklDY3BKenRjYmlBcUlDQWdJQ0I5TzF4dUlDcGNiaUFxSUNBZ0lDQlNMblJ2VTNSeWFXNW5LRzVsZHlCUWIybHVkQ2d4TENBeUtTazdJQzh2UFQ0Z0oyNWxkeUJRYjJsdWRDZ3hMQ0F5S1NkY2JpQXFYRzRnS2lCQVpuVnVZMXh1SUNvZ1FHMWxiV0psY2s5bUlGSmNiaUFxSUVCemFXNWpaU0IyTUM0eE5DNHdYRzRnS2lCQVkyRjBaV2R2Y25rZ1UzUnlhVzVuWEc0Z0tpQkFjMmxuSUNvZ0xUNGdVM1J5YVc1blhHNGdLaUJBY0dGeVlXMGdleXA5SUhaaGJGeHVJQ29nUUhKbGRIVnliaUI3VTNSeWFXNW5mVnh1SUNvZ1FHVjRZVzF3YkdWY2JpQXFYRzRnS2lBZ0lDQWdJRkl1ZEc5VGRISnBibWNvTkRJcE95QXZMejArSUNjME1pZGNiaUFxSUNBZ0lDQWdVaTUwYjFOMGNtbHVaeWduWVdKakp5azdJQzh2UFQ0Z0oxd2lZV0pqWENJblhHNGdLaUFnSUNBZ0lGSXVkRzlUZEhKcGJtY29XekVzSURJc0lETmRLVHNnTHk4OVBpQW5XekVzSURJc0lETmRKMXh1SUNvZ0lDQWdJQ0JTTG5SdlUzUnlhVzVuS0h0bWIyODZJREVzSUdKaGNqb2dNaXdnWW1GNk9pQXpmU2s3SUM4dlBUNGdKM3RjSW1KaGNsd2lPaUF5TENCY0ltSmhlbHdpT2lBekxDQmNJbVp2YjF3aU9pQXhmU2RjYmlBcUlDQWdJQ0FnVWk1MGIxTjBjbWx1WnlodVpYY2dSR0YwWlNnbk1qQXdNUzB3TWkwd00xUXdORG93TlRvd05sb25LU2s3SUM4dlBUNGdKMjVsZHlCRVlYUmxLRndpTWpBd01TMHdNaTB3TTFRd05Eb3dOVG93Tmk0d01EQmFYQ0lwSjF4dUlDb3ZYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJRjlqZFhKeWVURW9ablZ1WTNScGIyNGdkRzlUZEhKcGJtY29kbUZzS1NCN0lISmxkSFZ5YmlCZmRHOVRkSEpwYm1jb2RtRnNMQ0JiWFNrN0lIMHBPMXh1WEc1Y2JseHVMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZYRzR2THlCWFJVSlFRVU5MSUVaUFQxUkZVbHh1THk4Z0xpOStMM0poYldSaEwzTnlZeTkwYjFOMGNtbHVaeTVxYzF4dUx5OGdiVzlrZFd4bElHbGtJRDBnTVRreFhHNHZMeUJ0YjJSMWJHVWdZMmgxYm10eklEMGdNQ0pkTENKdFlYQndhVzVuY3lJNklrRkJRVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzaUxDSnpiM1Z5WTJWU2IyOTBJam9pSW4wPVwiKTtcblxuLyoqKi8gfSksXG4vKiAxOTIgKi9cbi8qIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKiBhbGwgZXhwb3J0cyB1c2VkICovXG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL34vcmFtZGEvc3JjL3R5cGUuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5ldmFsKFwidmFyIF9jdXJyeTEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL2ludGVybmFsL19jdXJyeTEgKi8gMik7XFxuXFxuXFxuLyoqXFxuICogR2l2ZXMgYSBzaW5nbGUtd29yZCBzdHJpbmcgZGVzY3JpcHRpb24gb2YgdGhlIChuYXRpdmUpIHR5cGUgb2YgYSB2YWx1ZSxcXG4gKiByZXR1cm5pbmcgc3VjaCBhbnN3ZXJzIGFzICdPYmplY3QnLCAnTnVtYmVyJywgJ0FycmF5Jywgb3IgJ051bGwnLiBEb2VzIG5vdFxcbiAqIGF0dGVtcHQgdG8gZGlzdGluZ3Vpc2ggdXNlciBPYmplY3QgdHlwZXMgYW55IGZ1cnRoZXIsIHJlcG9ydGluZyB0aGVtIGFsbCBhc1xcbiAqICdPYmplY3QnLlxcbiAqXFxuICogQGZ1bmNcXG4gKiBAbWVtYmVyT2YgUlxcbiAqIEBzaW5jZSB2MC44LjBcXG4gKiBAY2F0ZWdvcnkgVHlwZVxcbiAqIEBzaWcgKCogLT4geyp9KSAtPiBTdHJpbmdcXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxcbiAqIEByZXR1cm4ge1N0cmluZ31cXG4gKiBAZXhhbXBsZVxcbiAqXFxuICogICAgICBSLnR5cGUoe30pOyAvLz0+IFxcXCJPYmplY3RcXFwiXFxuICogICAgICBSLnR5cGUoMSk7IC8vPT4gXFxcIk51bWJlclxcXCJcXG4gKiAgICAgIFIudHlwZShmYWxzZSk7IC8vPT4gXFxcIkJvb2xlYW5cXFwiXFxuICogICAgICBSLnR5cGUoJ3MnKTsgLy89PiBcXFwiU3RyaW5nXFxcIlxcbiAqICAgICAgUi50eXBlKG51bGwpOyAvLz0+IFxcXCJOdWxsXFxcIlxcbiAqICAgICAgUi50eXBlKFtdKTsgLy89PiBcXFwiQXJyYXlcXFwiXFxuICogICAgICBSLnR5cGUoL1tBLXpdLyk7IC8vPT4gXFxcIlJlZ0V4cFxcXCJcXG4gKi9cXG5tb2R1bGUuZXhwb3J0cyA9IF9jdXJyeTEoZnVuY3Rpb24gdHlwZSh2YWwpIHtcXG4gIHJldHVybiB2YWwgPT09IG51bGwgICAgICA/ICdOdWxsJyAgICAgIDpcXG4gICAgICAgICB2YWwgPT09IHVuZGVmaW5lZCA/ICdVbmRlZmluZWQnIDpcXG4gICAgICAgICBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsKS5zbGljZSg4LCAtMSk7XFxufSk7XFxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lNVGt5TG1weklpd2ljMjkxY21ObGN5STZXeUozWldKd1lXTnJPaTh2THk0dmZpOXlZVzFrWVM5emNtTXZkSGx3WlM1cWN6ODRZMk5sSWwwc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYkluWmhjaUJmWTNWeWNua3hJRDBnY21WeGRXbHlaU2duTGk5cGJuUmxjbTVoYkM5ZlkzVnljbmt4SnlrN1hHNWNibHh1THlvcVhHNGdLaUJIYVhabGN5QmhJSE5wYm1kc1pTMTNiM0prSUhOMGNtbHVaeUJrWlhOamNtbHdkR2x2YmlCdlppQjBhR1VnS0c1aGRHbDJaU2tnZEhsd1pTQnZaaUJoSUhaaGJIVmxMRnh1SUNvZ2NtVjBkWEp1YVc1bklITjFZMmdnWVc1emQyVnljeUJoY3lBblQySnFaV04wSnl3Z0owNTFiV0psY2ljc0lDZEJjbkpoZVNjc0lHOXlJQ2RPZFd4c0p5NGdSRzlsY3lCdWIzUmNiaUFxSUdGMGRHVnRjSFFnZEc4Z1pHbHpkR2x1WjNWcGMyZ2dkWE5sY2lCUFltcGxZM1FnZEhsd1pYTWdZVzU1SUdaMWNuUm9aWElzSUhKbGNHOXlkR2x1WnlCMGFHVnRJR0ZzYkNCaGMxeHVJQ29nSjA5aWFtVmpkQ2N1WEc0Z0tseHVJQ29nUUdaMWJtTmNiaUFxSUVCdFpXMWlaWEpQWmlCU1hHNGdLaUJBYzJsdVkyVWdkakF1T0M0d1hHNGdLaUJBWTJGMFpXZHZjbmtnVkhsd1pWeHVJQ29nUUhOcFp5QW9LaUF0UGlCN0tuMHBJQzArSUZOMGNtbHVaMXh1SUNvZ1FIQmhjbUZ0SUhzcWZTQjJZV3dnVkdobElIWmhiSFZsSUhSdklIUmxjM1JjYmlBcUlFQnlaWFIxY200Z2UxTjBjbWx1WjMxY2JpQXFJRUJsZUdGdGNHeGxYRzRnS2x4dUlDb2dJQ0FnSUNCU0xuUjVjR1VvZTMwcE95QXZMejArSUZ3aVQySnFaV04wWENKY2JpQXFJQ0FnSUNBZ1VpNTBlWEJsS0RFcE95QXZMejArSUZ3aVRuVnRZbVZ5WENKY2JpQXFJQ0FnSUNBZ1VpNTBlWEJsS0daaGJITmxLVHNnTHk4OVBpQmNJa0p2YjJ4bFlXNWNJbHh1SUNvZ0lDQWdJQ0JTTG5SNWNHVW9KM01uS1RzZ0x5ODlQaUJjSWxOMGNtbHVaMXdpWEc0Z0tpQWdJQ0FnSUZJdWRIbHdaU2h1ZFd4c0tUc2dMeTg5UGlCY0lrNTFiR3hjSWx4dUlDb2dJQ0FnSUNCU0xuUjVjR1VvVzEwcE95QXZMejArSUZ3aVFYSnlZWGxjSWx4dUlDb2dJQ0FnSUNCU0xuUjVjR1VvTDF0QkxYcGRMeWs3SUM4dlBUNGdYQ0pTWldkRmVIQmNJbHh1SUNvdlhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlGOWpkWEp5ZVRFb1puVnVZM1JwYjI0Z2RIbHdaU2gyWVd3cElIdGNiaUFnY21WMGRYSnVJSFpoYkNBOVBUMGdiblZzYkNBZ0lDQWdJRDhnSjA1MWJHd25JQ0FnSUNBZ09seHVJQ0FnSUNBZ0lDQWdkbUZzSUQwOVBTQjFibVJsWm1sdVpXUWdQeUFuVlc1a1pXWnBibVZrSnlBNlhHNGdJQ0FnSUNBZ0lDQlBZbXBsWTNRdWNISnZkRzkwZVhCbExuUnZVM1J5YVc1bkxtTmhiR3dvZG1Gc0tTNXpiR2xqWlNnNExDQXRNU2s3WEc1OUtUdGNibHh1WEc1Y2JpOHZMeTh2THk4dkx5OHZMeTh2THk4dkwxeHVMeThnVjBWQ1VFRkRTeUJHVDA5VVJWSmNiaTh2SUM0dmZpOXlZVzFrWVM5emNtTXZkSGx3WlM1cWMxeHVMeThnYlc5a2RXeGxJR2xrSUQwZ01Ua3lYRzR2THlCdGIyUjFiR1VnWTJoMWJtdHpJRDBnTUNKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3SWl3aWMyOTFjbU5sVW05dmRDSTZJaUo5XCIpO1xuXG4vKioqLyB9KSxcbi8qIDE5MyAqL1xuLyogbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9cbi8qIGFsbCBleHBvcnRzIHVzZWQgKi9cbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vfi90YW5ncmFtLXJlZmVyZW5jZS8xLjAuMC9yZWZlcmVuY2UuanNvbiAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbmV2YWwoXCJtb2R1bGUuZXhwb3J0cyA9IHtcXG5cXHRcXFwidmVyc2lvblxcXCI6IFxcXCIxLjAuMFxcXCIsXFxuXFx0XFxcInN5bWJvbGl6ZXJzXFxcIjoge1xcblxcdFxcdFxcXCJwb2x5Z29uXFxcIjoge1xcblxcdFxcdFxcdFxcXCJmaWxsXFxcIjoge1xcblxcdFxcdFxcdFxcdFxcXCJjc3NcXFwiOiBcXFwicG9seWdvbi1maWxsXFxcIixcXG5cXHRcXHRcXHRcXHRcXFwidHlwZVxcXCI6IFxcXCJjb2xvclxcXCIsXFxuXFx0XFx0XFx0XFx0XFxcImRlZmF1bHQtdmFsdWVcXFwiOiBcXFwicmdiYSgxMjgsMTI4LDEyOCwxKVxcXCIsXFxuXFx0XFx0XFx0XFx0XFxcImRlZmF1bHQtbWVhbmluZ1xcXCI6IFxcXCJncmF5IGFuZCBmdWxseSBvcGFxdWUgKGFscGhhID0gMSksIHNhbWUgYXMgcmdiKDEyOCwxMjgsMTI4KVxcXCIsXFxuXFx0XFx0XFx0XFx0XFxcImRvY1xcXCI6IFxcXCJGaWxsIGNvbG9yIHRvIGFzc2lnbiB0byBhIHBvbHlnb25cXFwiXFxuXFx0XFx0XFx0fSxcXG5cXHRcXHRcXHRcXFwiZmlsbC1vcGFjaXR5XFxcIjoge1xcblxcdFxcdFxcdFxcdFxcXCJjc3NcXFwiOiBcXFwicG9seWdvbi1vcGFjaXR5XFxcIixcXG5cXHRcXHRcXHRcXHRcXFwidHlwZVxcXCI6IFxcXCJmbG9hdFxcXCIsXFxuXFx0XFx0XFx0XFx0XFxcImRvY1xcXCI6IFxcXCJUaGUgb3BhY2l0eSBvZiB0aGUgcG9seWdvblxcXCIsXFxuXFx0XFx0XFx0XFx0XFxcImRlZmF1bHQtdmFsdWVcXFwiOiAxLFxcblxcdFxcdFxcdFxcdFxcXCJkZWZhdWx0LW1lYW5pbmdcXFwiOiBcXFwib3BhcXVlXFxcIlxcblxcdFxcdFxcdH0sXFxuXFx0XFx0XFx0XFxcImNvbXAtb3BcXFwiOiB7XFxuXFx0XFx0XFx0XFx0XFxcImNzc1xcXCI6IFxcXCJwb2x5Z29uLWNvbXAtb3BcXFwiLFxcblxcdFxcdFxcdFxcdFxcXCJkZWZhdWx0LXZhbHVlXFxcIjogXFxcInNyYy1vdmVyXFxcIixcXG5cXHRcXHRcXHRcXHRcXFwiZGVmYXVsdC1tZWFuaW5nXFxcIjogXFxcIkFkZCB0aGUgY3VycmVudCBzeW1ib2xpemVyIG9uIHRvcCBvZiBvdGhlciBzeW1ib2xpemVyLlxcXCIsXFxuXFx0XFx0XFx0XFx0XFxcImRvY1xcXCI6IFxcXCJDb21wb3NpdGUgb3BlcmF0aW9uLiBUaGlzIGRlZmluZXMgaG93IHRoaXMgc3ltYm9saXplciBzaG91bGQgYmVoYXZlIHJlbGF0aXZlIHRvIHN5bWJvbGl6ZXJzIGF0b3Agb3IgYmVsb3cgaXQuXFxcIixcXG5cXHRcXHRcXHRcXHRcXFwidHlwZVxcXCI6IFtcXG5cXHRcXHRcXHRcXHRcXHRcXFwibXVsdGlwbHlcXFwiLFxcblxcdFxcdFxcdFxcdFxcdFxcXCJhZGRcXFwiLFxcblxcdFxcdFxcdFxcdFxcdFxcXCJvdmVybGF5XFxcIlxcblxcdFxcdFxcdFxcdF0sXFxuXFx0XFx0XFx0XFx0XFxcImV4cHJlc3Npb25cXFwiOiB0cnVlXFxuXFx0XFx0XFx0fVxcblxcdFxcdH0sXFxuXFx0XFx0XFxcInBvbHlnb24tcGF0dGVyblxcXCI6IHtcXG5cXHRcXHRcXHRcXFwiZmlsZVxcXCI6IHtcXG5cXHRcXHRcXHRcXHRcXFwiY3NzXFxcIjogXFxcInBvbHlnb24tcGF0dGVybi1maWxlXFxcIixcXG5cXHRcXHRcXHRcXHRcXFwidHlwZVxcXCI6IFxcXCJ1cmlcXFwiLFxcblxcdFxcdFxcdFxcdFxcXCJleHByZXNzaW9uXFxcIjogdHJ1ZSxcXG5cXHRcXHRcXHRcXHRcXFwiZGVmYXVsdC12YWx1ZVxcXCI6IFxcXCJub25lXFxcIixcXG5cXHRcXHRcXHRcXHRcXFwicmVxdWlyZWRcXFwiOiB0cnVlLFxcblxcdFxcdFxcdFxcdFxcXCJkb2NcXFwiOiBcXFwiSW1hZ2UgdG8gdXNlIGFzIGEgcmVwZWF0ZWQgcGF0dGVybiBmaWxsIHdpdGhpbiBhIHBvbHlnb24uIEFjY2VwdGVkIGZvcm1hdHM6IHN2ZywganBnLCBwbmcsIHRpZmYsIGFuZCB3ZWJwLlxcXCIsXFxuXFx0XFx0XFx0XFx0XFxcImRlZmF1bHQtbWVhbmluZ1xcXCI6IFxcXCJcXFwiXFxuXFx0XFx0XFx0fVxcblxcdFxcdH0sXFxuXFx0XFx0XFxcImxpbmVcXFwiOiB7XFxuXFx0XFx0XFx0XFxcInN0cm9rZVxcXCI6IHtcXG5cXHRcXHRcXHRcXHRcXFwiY3NzXFxcIjogXFxcImxpbmUtY29sb3JcXFwiLFxcblxcdFxcdFxcdFxcdFxcXCJkZWZhdWx0LXZhbHVlXFxcIjogXFxcInJnYmEoMCwwLDAsMSlcXFwiLFxcblxcdFxcdFxcdFxcdFxcXCJ0eXBlXFxcIjogXFxcImNvbG9yXFxcIixcXG5cXHRcXHRcXHRcXHRcXFwiZGVmYXVsdC1tZWFuaW5nXFxcIjogXFxcImJsYWNrIGFuZCBmdWxseSBvcGFxdWUgKGFscGhhID0gMSksIHNhbWUgYXMgcmdiKDAsMCwwKVxcXCIsXFxuXFx0XFx0XFx0XFx0XFxcImRvY1xcXCI6IFxcXCJUaGUgY29sb3Igb2YgYSBkcmF3biBsaW5lXFxcIlxcblxcdFxcdFxcdH0sXFxuXFx0XFx0XFx0XFxcInN0cm9rZS13aWR0aFxcXCI6IHtcXG5cXHRcXHRcXHRcXHRcXFwiY3NzXFxcIjogXFxcImxpbmUtd2lkdGhcXFwiLFxcblxcdFxcdFxcdFxcdFxcXCJkZWZhdWx0LXZhbHVlXFxcIjogMSxcXG5cXHRcXHRcXHRcXHRcXFwidHlwZVxcXCI6IFxcXCJmbG9hdFxcXCIsXFxuXFx0XFx0XFx0XFx0XFxcImRvY1xcXCI6IFxcXCJUaGUgd2lkdGggb2YgYSBsaW5lIGluIHBpeGVsc1xcXCJcXG5cXHRcXHRcXHR9LFxcblxcdFxcdFxcdFxcXCJzdHJva2Utb3BhY2l0eVxcXCI6IHtcXG5cXHRcXHRcXHRcXHRcXFwiY3NzXFxcIjogXFxcImxpbmUtb3BhY2l0eVxcXCIsXFxuXFx0XFx0XFx0XFx0XFxcImRlZmF1bHQtdmFsdWVcXFwiOiAxLFxcblxcdFxcdFxcdFxcdFxcXCJ0eXBlXFxcIjogXFxcImZsb2F0XFxcIixcXG5cXHRcXHRcXHRcXHRcXFwiZGVmYXVsdC1tZWFuaW5nXFxcIjogXFxcIm9wYXF1ZVxcXCIsXFxuXFx0XFx0XFx0XFx0XFxcImRvY1xcXCI6IFxcXCJUaGUgb3BhY2l0eSBvZiBhIGxpbmVcXFwiXFxuXFx0XFx0XFx0fSxcXG5cXHRcXHRcXHRcXFwic3Ryb2tlLWxpbmVqb2luXFxcIjoge1xcblxcdFxcdFxcdFxcdFxcXCJjc3NcXFwiOiBcXFwibGluZS1qb2luXFxcIixcXG5cXHRcXHRcXHRcXHRcXFwiZGVmYXVsdC12YWx1ZVxcXCI6IFxcXCJtaXRlclxcXCIsXFxuXFx0XFx0XFx0XFx0XFxcInR5cGVcXFwiOiBbXFxuXFx0XFx0XFx0XFx0XFx0XFxcIm1pdGVyXFxcIixcXG5cXHRcXHRcXHRcXHRcXHRcXFwibWl0ZXItcmV2ZXJ0XFxcIixcXG5cXHRcXHRcXHRcXHRcXHRcXFwicm91bmRcXFwiLFxcblxcdFxcdFxcdFxcdFxcdFxcXCJiZXZlbFxcXCJcXG5cXHRcXHRcXHRcXHRdLFxcblxcdFxcdFxcdFxcdFxcXCJleHByZXNzaW9uXFxcIjogdHJ1ZSxcXG5cXHRcXHRcXHRcXHRcXFwiZG9jXFxcIjogXFxcIlRoZSBiZWhhdmlvciBvZiBsaW5lcyB3aGVuIGpvaW5pbmcuXFxcIixcXG5cXHRcXHRcXHRcXHRcXFwiZGVmYXVsdC1tZWFuaW5nXFxcIjogXFxcIlRoZSBsaW5lIGpvaW5zIHdpbGwgYmUgcmVuZGVyZWQgdXNpbmcgYSBtaXRlciBsb29rLlxcXCJcXG5cXHRcXHRcXHR9LFxcblxcdFxcdFxcdFxcXCJzdHJva2UtbGluZWNhcFxcXCI6IHtcXG5cXHRcXHRcXHRcXHRcXFwiY3NzXFxcIjogXFxcImxpbmUtY2FwXFxcIixcXG5cXHRcXHRcXHRcXHRcXFwiZGVmYXVsdC12YWx1ZVxcXCI6IFxcXCJidXR0XFxcIixcXG5cXHRcXHRcXHRcXHRcXFwidHlwZVxcXCI6IFtcXG5cXHRcXHRcXHRcXHRcXHRcXFwiYnV0dFxcXCIsXFxuXFx0XFx0XFx0XFx0XFx0XFxcInJvdW5kXFxcIixcXG5cXHRcXHRcXHRcXHRcXHRcXFwic3F1YXJlXFxcIlxcblxcdFxcdFxcdFxcdF0sXFxuXFx0XFx0XFx0XFx0XFxcImV4cHJlc3Npb25cXFwiOiB0cnVlLFxcblxcdFxcdFxcdFxcdFxcXCJkb2NcXFwiOiBcXFwiVGhlIGRpc3BsYXkgb2YgbGluZSBlbmRpbmdzLlxcXCIsXFxuXFx0XFx0XFx0XFx0XFxcImRlZmF1bHQtbWVhbmluZ1xcXCI6IFxcXCJUaGUgbGluZSBlbmRpbmdzIHdpbGwgYmUgcmVuZGVyZWQgdXNpbmcgYSBidXR0IGxvb2suXFxcIlxcblxcdFxcdFxcdH0sXFxuXFx0XFx0XFx0XFxcImNvbXAtb3BcXFwiOiB7XFxuXFx0XFx0XFx0XFx0XFxcImNzc1xcXCI6IFxcXCJsaW5lLWNvbXAtb3BcXFwiLFxcblxcdFxcdFxcdFxcdFxcXCJkZWZhdWx0LXZhbHVlXFxcIjogXFxcIm92ZXJsYXlcXFwiLFxcblxcdFxcdFxcdFxcdFxcXCJkZWZhdWx0LW1lYW5pbmdcXFwiOiBcXFwiQWRkIHRoZSBjdXJyZW50IHN5bWJvbGl6ZXIgb24gdG9wIG9mIG90aGVyIHN5bWJvbGl6ZXIuXFxcIixcXG5cXHRcXHRcXHRcXHRcXFwiZG9jXFxcIjogXFxcIkNvbXBvc2l0ZSBvcGVyYXRpb24uIFRoaXMgZGVmaW5lcyBob3cgdGhpcyBzeW1ib2xpemVyIHNob3VsZCBiZWhhdmUgcmVsYXRpdmUgdG8gc3ltYm9saXplcnMgYXRvcCBvciBiZWxvdyBpdC5cXFwiLFxcblxcdFxcdFxcdFxcdFxcXCJ0eXBlXFxcIjogW1xcblxcdFxcdFxcdFxcdFxcdFxcXCJtdWx0aXBseVxcXCIsXFxuXFx0XFx0XFx0XFx0XFx0XFxcImFkZFxcXCIsXFxuXFx0XFx0XFx0XFx0XFx0XFxcIm92ZXJsYXlcXFwiXFxuXFx0XFx0XFx0XFx0XSxcXG5cXHRcXHRcXHRcXHRcXFwiZXhwcmVzc2lvblxcXCI6IHRydWVcXG5cXHRcXHRcXHR9LFxcblxcdFxcdFxcdFxcXCJzdHJva2UtZGFzaGFycmF5XFxcIjoge1xcblxcdFxcdFxcdFxcdFxcXCJjc3NcXFwiOiBcXFwibGluZS1kYXNoYXJyYXlcXFwiLFxcblxcdFxcdFxcdFxcdFxcXCJ0eXBlXFxcIjogXFxcIm51bWJlcnNcXFwiLFxcblxcdFxcdFxcdFxcdFxcXCJleHByZXNzaW9uXFxcIjogdHJ1ZSxcXG5cXHRcXHRcXHRcXHRcXFwiZG9jXFxcIjogXFxcIkEgcGFpciBvZiBsZW5ndGggdmFsdWVzIFthLGJdLCB3aGVyZSAoYSkgaXMgdGhlIGRhc2ggbGVuZ3RoIGFuZCAoYikgaXMgdGhlIGdhcCBsZW5ndGggcmVzcGVjdGl2ZWx5LiBNb3JlIHRoYW4gdHdvIHZhbHVlcyBhcmUgc3VwcG9ydGVkIGZvciBtb3JlIGNvbXBsZXggcGF0dGVybnMuXFxcIixcXG5cXHRcXHRcXHRcXHRcXFwiZGVmYXVsdC12YWx1ZVxcXCI6IFxcXCJub25lXFxcIixcXG5cXHRcXHRcXHRcXHRcXFwiZGVmYXVsdC1tZWFuaW5nXFxcIjogXFxcIlRoZSBsaW5lIHdpbGwgYmUgZHJhd24gd2l0aG91dCBkYXNoZXMuXFxcIlxcblxcdFxcdFxcdH1cXG5cXHRcXHR9LFxcblxcdFxcdFxcXCJtYXJrZXJzXFxcIjoge1xcblxcdFxcdFxcdFxcXCJmaWxlXFxcIjoge1xcblxcdFxcdFxcdFxcdFxcXCJjc3NcXFwiOiBcXFwibWFya2VyLWZpbGVcXFwiLFxcblxcdFxcdFxcdFxcdFxcXCJkb2NcXFwiOiBcXFwiQSBmaWxlIHRoYXQgdGhpcyBtYXJrZXIgc2hvd3MgYXQgZWFjaCBwbGFjZW1lbnQuIElmIG5vIGZpbGUgaXMgZ2l2ZW4sIHRoZSBtYXJrZXIgd2lsbCBzaG93IGFuIGVsbGlwc2UuIEFjY2VwdGVkIGZvcm1hdHM6IHN2ZywganBnLCBwbmcsIHRpZmYsIGFuZCB3ZWJwLlxcXCIsXFxuXFx0XFx0XFx0XFx0XFxcImRlZmF1bHQtdmFsdWVcXFwiOiBcXFwibm9uZVxcXCIsXFxuXFx0XFx0XFx0XFx0XFxcImRlZmF1bHQtbWVhbmluZ1xcXCI6IFxcXCJBbiBlbGxpcHNlIG9yIGNpcmNsZSwgaWYgd2lkdGggZXF1YWxzIGhlaWdodC5cXFwiLFxcblxcdFxcdFxcdFxcdFxcXCJ0eXBlXFxcIjogXFxcInVyaVxcXCIsXFxuXFx0XFx0XFx0XFx0XFxcImV4cHJlc3Npb25cXFwiOiB0cnVlXFxuXFx0XFx0XFx0fSxcXG5cXHRcXHRcXHRcXFwib3BhY2l0eVxcXCI6IHtcXG5cXHRcXHRcXHRcXHRcXFwiY3NzXFxcIjogXFxcIm1hcmtlci1vcGFjaXR5XFxcIixcXG5cXHRcXHRcXHRcXHRcXFwiZG9jXFxcIjogXFxcIlRoZSBvdmVyYWxsIG9wYWNpdHkgb2YgdGhlIG1hcmtlciwgaWYgc2V0LCBvdmVycmlkZXMgYm90aCB0aGUgb3BhY2l0eSBvZiBib3RoIHRoZSBmaWxsIGFuZCBzdHJva2VcXFwiLFxcblxcdFxcdFxcdFxcdFxcXCJkZWZhdWx0LXZhbHVlXFxcIjogMSxcXG5cXHRcXHRcXHRcXHRcXFwiZGVmYXVsdC1tZWFuaW5nXFxcIjogXFxcIlRoZSBzdHJva2Utb3BhY2l0eSBhbmQgZmlsbC1vcGFjaXR5IHdpbGwgYmUgdXNlZFxcXCIsXFxuXFx0XFx0XFx0XFx0XFxcInR5cGVcXFwiOiBcXFwiZmxvYXRcXFwiXFxuXFx0XFx0XFx0fSxcXG5cXHRcXHRcXHRcXFwiZmlsbFxcXCI6IHtcXG5cXHRcXHRcXHRcXHRcXFwiY3NzXFxcIjogXFxcIm1hcmtlci1maWxsXFxcIixcXG5cXHRcXHRcXHRcXHRcXFwiZGVmYXVsdC12YWx1ZVxcXCI6IFxcXCIjRkZGXFxcIixcXG5cXHRcXHRcXHRcXHRcXFwiZG9jXFxcIjogXFxcIlRoZSBjb2xvciBvZiB0aGUgYXJlYSBvZiB0aGUgbWFya2VyLlxcXCIsXFxuXFx0XFx0XFx0XFx0XFxcInR5cGVcXFwiOiBcXFwiY29sb3JcXFwiLFxcblxcdFxcdFxcdFxcdFxcXCJleHByZXNzaW9uXFxcIjogdHJ1ZVxcblxcdFxcdFxcdH0sXFxuXFx0XFx0XFx0XFxcImFsbG93LW92ZXJsYXBcXFwiOiB7XFxuXFx0XFx0XFx0XFx0XFxcImNzc1xcXCI6IFxcXCJtYXJrZXItYWxsb3ctb3ZlcmxhcFxcXCIsXFxuXFx0XFx0XFx0XFx0XFxcInR5cGVcXFwiOiBcXFwiYm9vbGVhblxcXCIsXFxuXFx0XFx0XFx0XFx0XFxcImV4cHJlc3Npb25cXFwiOiB0cnVlLFxcblxcdFxcdFxcdFxcdFxcXCJkZWZhdWx0LXZhbHVlXFxcIjogZmFsc2UsXFxuXFx0XFx0XFx0XFx0XFxcImRvY1xcXCI6IFxcXCJDb250cm9sIHdoZXRoZXIgb3ZlcmxhcHBpbmcgbWFya2VycyBhcmUgc2hvd24gb3IgaGlkZGVuLlxcXCIsXFxuXFx0XFx0XFx0XFx0XFxcImRlZmF1bHQtbWVhbmluZ1xcXCI6IFxcXCJEbyBub3QgYWxsb3cgbWFya2VycyB0byBvdmVybGFwIHdpdGggZWFjaCBvdGhlciAtIG92ZXJsYXBwaW5nIG1hcmtlcnMgd2lsbCBub3QgYmUgc2hvd24uXFxcIlxcblxcdFxcdFxcdH0sXFxuXFx0XFx0XFx0XFxcIndpZHRoXFxcIjoge1xcblxcdFxcdFxcdFxcdFxcXCJjc3NcXFwiOiBcXFwibWFya2VyLXdpZHRoXFxcIixcXG5cXHRcXHRcXHRcXHRcXFwiZGVmYXVsdC12YWx1ZVxcXCI6IDEwLFxcblxcdFxcdFxcdFxcdFxcXCJkb2NcXFwiOiBcXFwiVGhlIHdpZHRoIG9mIHRoZSBtYXJrZXIsIGlmIHVzaW5nIG9uZSBvZiB0aGUgZGVmYXVsdCB0eXBlcy5cXFwiLFxcblxcdFxcdFxcdFxcdFxcXCJ0eXBlXFxcIjogXFxcImZsb2F0XFxcIixcXG5cXHRcXHRcXHRcXHRcXFwiZXhwcmVzc2lvblxcXCI6IHRydWUsXFxuXFx0XFx0XFx0XFx0XFxcImRlZmF1bHQtbWVhbmluZ1xcXCI6IFxcXCJUaGUgbWFya2VyIHdpZHRoIGlzIDEwIHBpeGVscy5cXFwiXFxuXFx0XFx0XFx0fSxcXG5cXHRcXHRcXHRcXFwiZmlsbC1vcGFjaXR5XFxcIjoge1xcblxcdFxcdFxcdFxcdFxcXCJjc3NcXFwiOiBcXFwibWFya2VyLWZpbGwtb3BhY2l0eVxcXCIsXFxuXFx0XFx0XFx0XFx0XFxcImRvY1xcXCI6IFxcXCJUaGUgZmlsbCBvcGFjaXR5IG9mIHRoZSBtYXJrZXIuXFxcIixcXG5cXHRcXHRcXHRcXHRcXFwiZGVmYXVsdC12YWx1ZVxcXCI6IDEsXFxuXFx0XFx0XFx0XFx0XFxcImV4cHJlc3Npb25cXFwiOiB0cnVlLFxcblxcdFxcdFxcdFxcdFxcXCJkZWZhdWx0LW1lYW5pbmdcXFwiOiBcXFwiQ29sb3IgaXMgZnVsbHkgb3BhcXVlLlxcXCIsXFxuXFx0XFx0XFx0XFx0XFxcInR5cGVcXFwiOiBcXFwiZmxvYXRcXFwiXFxuXFx0XFx0XFx0fSxcXG5cXHRcXHRcXHRcXFwiY29tcC1vcFxcXCI6IHtcXG5cXHRcXHRcXHRcXHRcXFwiY3NzXFxcIjogXFxcIm1hcmtlci1jb21wLW9wXFxcIixcXG5cXHRcXHRcXHRcXHRcXFwiZGVmYXVsdC12YWx1ZVxcXCI6IFxcXCJzcmMtb3ZlclxcXCIsXFxuXFx0XFx0XFx0XFx0XFxcImRlZmF1bHQtbWVhbmluZ1xcXCI6IFxcXCJBZGQgdGhlIGN1cnJlbnQgc3ltYm9saXplciBvbiB0b3Agb2Ygb3RoZXIgc3ltYm9saXplci5cXFwiLFxcblxcdFxcdFxcdFxcdFxcXCJkb2NcXFwiOiBcXFwiQ29tcG9zaXRlIG9wZXJhdGlvbi4gVGhpcyBkZWZpbmVzIGhvdyB0aGlzIHN5bWJvbGl6ZXIgc2hvdWxkIGJlaGF2ZSByZWxhdGl2ZSB0byBzeW1ib2xpemVycyBhdG9wIG9yIGJlbG93IGl0LlxcXCIsXFxuXFx0XFx0XFx0XFx0XFxcInR5cGVcXFwiOiBbXFxuXFx0XFx0XFx0XFx0XFx0XFxcIm11bHRpcGx5XFxcIixcXG5cXHRcXHRcXHRcXHRcXHRcXFwiYWRkXFxcIixcXG5cXHRcXHRcXHRcXHRcXHRcXFwib3ZlcmxheVxcXCJcXG5cXHRcXHRcXHRcXHRdLFxcblxcdFxcdFxcdFxcdFxcXCJleHByZXNzaW9uXFxcIjogdHJ1ZVxcblxcdFxcdFxcdH0sXFxuXFx0XFx0XFx0XFxcInN0cm9rZVxcXCI6IHtcXG5cXHRcXHRcXHRcXHRcXFwiY3NzXFxcIjogXFxcIm1hcmtlci1saW5lLWNvbG9yXFxcIixcXG5cXHRcXHRcXHRcXHRcXFwiZG9jXFxcIjogXFxcIlRoZSBjb2xvciBvZiB0aGUgc3Ryb2tlIGFyb3VuZCB0aGUgbWFya2VyLlxcXCIsXFxuXFx0XFx0XFx0XFx0XFxcImRlZmF1bHQtdmFsdWVcXFwiOiBcXFwiYmxhY2tcXFwiLFxcblxcdFxcdFxcdFxcdFxcXCJ0eXBlXFxcIjogXFxcImNvbG9yXFxcIixcXG5cXHRcXHRcXHRcXHRcXFwiZXhwcmVzc2lvblxcXCI6IHRydWUsXFxuXFx0XFx0XFx0XFx0XFxcImRlZmF1bHQtbWVhbmluZ1xcXCI6IFxcXCJUaGUgbWFya2VyIHdpbGwgYmUgZHJhd24gd2l0aCBhIGJsYWNrIG91dGxpbmUuXFxcIlxcblxcdFxcdFxcdH0sXFxuXFx0XFx0XFx0XFxcInN0cm9rZS13aWR0aFxcXCI6IHtcXG5cXHRcXHRcXHRcXHRcXFwiY3NzXFxcIjogXFxcIm1hcmtlci1saW5lLXdpZHRoXFxcIixcXG5cXHRcXHRcXHRcXHRcXFwiZGVmYXVsdC12YWx1ZVxcXCI6IDAuNSxcXG5cXHRcXHRcXHRcXHRcXFwiZG9jXFxcIjogXFxcIlRoZSB3aWR0aCBvZiB0aGUgc3Ryb2tlIGFyb3VuZCB0aGUgbWFya2VyLCBpbiBwaXhlbHMuIFRoaXMgaXMgcG9zaXRpb25lZCBvbiB0aGUgYm91bmRhcnksIHNvIGhpZ2ggdmFsdWVzIGNhbiBjb3ZlciB0aGUgYXJlYSBpdHNlbGYuXFxcIixcXG5cXHRcXHRcXHRcXHRcXFwidHlwZVxcXCI6IFxcXCJmbG9hdFxcXCIsXFxuXFx0XFx0XFx0XFx0XFxcImV4cHJlc3Npb25cXFwiOiB0cnVlLFxcblxcdFxcdFxcdFxcdFxcXCJkZWZhdWx0LW1lYW5pbmdcXFwiOiBcXFwiVGhlIG1hcmtlciB3aWxsIGJlIGRyYXduIHdpdGggYW4gb3V0bGluZSBvZiAuNSBwaXhlbHMgd2lkZS5cXFwiXFxuXFx0XFx0XFx0fSxcXG5cXHRcXHRcXHRcXFwic3Ryb2tlLW9wYWNpdHlcXFwiOiB7XFxuXFx0XFx0XFx0XFx0XFxcImNzc1xcXCI6IFxcXCJtYXJrZXItbGluZS1vcGFjaXR5XFxcIixcXG5cXHRcXHRcXHRcXHRcXFwiZGVmYXVsdC12YWx1ZVxcXCI6IDEsXFxuXFx0XFx0XFx0XFx0XFxcImRlZmF1bHQtbWVhbmluZ1xcXCI6IFxcXCJDb2xvciBpcyBmdWxseSBvcGFxdWUuXFxcIixcXG5cXHRcXHRcXHRcXHRcXFwiZG9jXFxcIjogXFxcIlRoZSBvcGFjaXR5IG9mIGEgbGluZS5cXFwiLFxcblxcdFxcdFxcdFxcdFxcXCJ0eXBlXFxcIjogXFxcImZsb2F0XFxcIixcXG5cXHRcXHRcXHRcXHRcXFwiZXhwcmVzc2lvblxcXCI6IHRydWVcXG5cXHRcXHRcXHR9LFxcblxcdFxcdFxcdFxcXCJwbGFjZW1lbnRcXFwiOiB7XFxuXFx0XFx0XFx0XFx0XFxcImNzc1xcXCI6IFxcXCJtYXJrZXItcGxhY2VtZW50XFxcIixcXG5cXHRcXHRcXHRcXHRcXFwidHlwZVxcXCI6IFtcXG5cXHRcXHRcXHRcXHRcXHRcXFwicG9pbnRcXFwiXFxuXFx0XFx0XFx0XFx0XSxcXG5cXHRcXHRcXHRcXHRcXFwiZXhwcmVzc2lvblxcXCI6IHRydWUsXFxuXFx0XFx0XFx0XFx0XFxcImRlZmF1bHQtdmFsdWVcXFwiOiBcXFwicG9pbnRcXFwiLFxcblxcdFxcdFxcdFxcdFxcXCJkZWZhdWx0LW1lYW5pbmdcXFwiOiBcXFwiUGxhY2UgbWFya2VycyBhdCB0aGUgY2VudGVyIHBvaW50IChjZW50cm9pZCkgb2YgdGhlIGdlb21ldHJ5LlxcXCIsXFxuXFx0XFx0XFx0XFx0XFxcImRvY1xcXCI6IFxcXCJBdHRlbXB0IHRvIHBsYWNlIG1hcmtlcnMgb24gYSBwb2ludCwgaW4gdGhlIGNlbnRlciBvZiBhIHBvbHlnb24sIG9yIGlmIG1hcmtlcnMtcGxhY2VtZW50OmxpbmUsIHRoZW4gbXVsdGlwbGUgdGltZXMgYWxvbmcgYSBsaW5lLiAnaW50ZXJpb3InIHBsYWNlbWVudCBjYW4gYmUgdXNlZCB0byBlbnN1cmUgdGhhdCBwb2ludHMgcGxhY2VkIG9uIHBvbHlnb25zIGFyZSBmb3JjZWQgdG8gYmUgaW5zaWRlIHRoZSBwb2x5Z29uIGludGVyaW9yLiBUaGUgJ3ZlcnRleC1maXJzdCcgYW5kICd2ZXJ0ZXgtbGFzdCcgb3B0aW9ucyBjYW4gYmUgdXNlZCB0byBwbGFjZSBtYXJrZXJzIGF0IHRoZSBmaXJzdCBvciBsYXN0IHZlcnRleCBvZiBsaW5lcyBvciBwb2x5Z29ucy5cXFwiXFxuXFx0XFx0XFx0fSxcXG5cXHRcXHRcXHRcXFwibWFya2VyLXR5cGVcXFwiOiB7XFxuXFx0XFx0XFx0XFx0XFxcImNzc1xcXCI6IFxcXCJtYXJrZXItdHlwZVxcXCIsXFxuXFx0XFx0XFx0XFx0XFxcInR5cGVcXFwiOiBbXFxuXFx0XFx0XFx0XFx0XFx0XFxcImVsbGlwc2VcXFwiXFxuXFx0XFx0XFx0XFx0XSxcXG5cXHRcXHRcXHRcXHRcXFwiZXhwcmVzc2lvblxcXCI6IHRydWUsXFxuXFx0XFx0XFx0XFx0XFxcImRlZmF1bHQtdmFsdWVcXFwiOiBcXFwiZWxsaXBzZVxcXCIsXFxuXFx0XFx0XFx0XFx0XFxcImRlZmF1bHQtbWVhbmluZ1xcXCI6IFxcXCJUaGUgbWFya2VyIHNoYXBlIGlzIGFuIGVsbGlwc2UuXFxcIixcXG5cXHRcXHRcXHRcXHRcXFwiZG9jXFxcIjogXFxcIlRoZSBkZWZhdWx0IG1hcmtlci10eXBlLiBJZiBhIFNWRyBmaWxlIGlzIG5vdCBnaXZlbiBhcyB0aGUgbWFya2VyLWZpbGUgcGFyYW1ldGVyLCB0aGUgcmVuZGVyZXIgcHJvdmlkZXMgZWl0aGVyIGFuIGFycm93IG9yIGFuIGVsbGlwc2UgKGEgY2lyY2xlIGlmIGhlaWdodCBpcyBlcXVhbCB0byB3aWR0aCkuXFxcIixcXG5cXHRcXHRcXHRcXHRcXFwic3RhdHVzXFxcIjogXFxcImRlcHJlY2F0ZWRcXFwiXFxuXFx0XFx0XFx0fVxcblxcdFxcdH0sXFxuXFx0XFx0XFxcInRleHRcXFwiOiB7XFxuXFx0XFx0XFx0XFxcIm5hbWVcXFwiOiB7XFxuXFx0XFx0XFx0XFx0XFxcImNzc1xcXCI6IFxcXCJ0ZXh0LW5hbWVcXFwiLFxcblxcdFxcdFxcdFxcdFxcXCJ0eXBlXFxcIjogXFxcInN0cmluZ1xcXCIsXFxuXFx0XFx0XFx0XFx0XFxcImV4cHJlc3Npb25cXFwiOiB0cnVlLFxcblxcdFxcdFxcdFxcdFxcXCJyZXF1aXJlZFxcXCI6IHRydWUsXFxuXFx0XFx0XFx0XFx0XFxcImRlZmF1bHQtdmFsdWVcXFwiOiBcXFwibm9uZVxcXCIsXFxuXFx0XFx0XFx0XFx0XFxcInNlcmlhbGl6YXRpb25cXFwiOiBcXFwiY29udGVudFxcXCIsXFxuXFx0XFx0XFx0XFx0XFxcImRvY1xcXCI6IFxcXCJWYWx1ZSB0byB1c2UgZm9yIGEgdGV4dCBsYWJlbC4gRGF0YSBjb2x1bW5zIGFyZSBzcGVjaWZpZWQgdXNpbmcgYnJhY2tldHMgbGlrZSBbY29sdW1uX25hbWVdLlxcXCIsXFxuXFx0XFx0XFx0XFx0XFxcImRlZmF1bHQtbWVhbmluZ1xcXCI6IFxcXCJcXFwiXFxuXFx0XFx0XFx0fSxcXG5cXHRcXHRcXHRcXFwic2l6ZVxcXCI6IHtcXG5cXHRcXHRcXHRcXHRcXFwiY3NzXFxcIjogXFxcInRleHQtc2l6ZVxcXCIsXFxuXFx0XFx0XFx0XFx0XFxcInR5cGVcXFwiOiBcXFwiZmxvYXRcXFwiLFxcblxcdFxcdFxcdFxcdFxcXCJleHByZXNzaW9uXFxcIjogdHJ1ZSxcXG5cXHRcXHRcXHRcXHRcXFwiZGVmYXVsdC12YWx1ZVxcXCI6IDEwLFxcblxcdFxcdFxcdFxcdFxcXCJkb2NcXFwiOiBcXFwiVGV4dCBzaXplIGluIHBpeGVscy5cXFwiLFxcblxcdFxcdFxcdFxcdFxcXCJkZWZhdWx0LW1lYW5pbmdcXFwiOiBcXFwiRm9udCBzaXplIG9mIDEwIHdpbGwgYmUgdXNlZCB0byByZW5kZXIgdGV4dC5cXFwiXFxuXFx0XFx0XFx0fSxcXG5cXHRcXHRcXHRcXFwiZmlsbFxcXCI6IHtcXG5cXHRcXHRcXHRcXHRcXFwiY3NzXFxcIjogXFxcInRleHQtZmlsbFxcXCIsXFxuXFx0XFx0XFx0XFx0XFxcInR5cGVcXFwiOiBcXFwiY29sb3JcXFwiLFxcblxcdFxcdFxcdFxcdFxcXCJleHByZXNzaW9uXFxcIjogdHJ1ZSxcXG5cXHRcXHRcXHRcXHRcXFwiZG9jXFxcIjogXFxcIlNwZWNpZmllcyB0aGUgY29sb3IgZm9yIHRoZSB0ZXh0LlxcXCIsXFxuXFx0XFx0XFx0XFx0XFxcImRlZmF1bHQtdmFsdWVcXFwiOiBcXFwiYmxhY2tcXFwiLFxcblxcdFxcdFxcdFxcdFxcXCJkZWZhdWx0LW1lYW5pbmdcXFwiOiBcXFwiVGhlIHRleHQgd2lsbCBiZSByZW5kZXJlZCBibGFjay5cXFwiXFxuXFx0XFx0XFx0fSxcXG5cXHRcXHRcXHRcXFwib3BhY2l0eVxcXCI6IHtcXG5cXHRcXHRcXHRcXHRcXFwiY3NzXFxcIjogXFxcInRleHQtb3BhY2l0eVxcXCIsXFxuXFx0XFx0XFx0XFx0XFxcImRvY1xcXCI6IFxcXCJBIG51bWJlciBmcm9tIDAgdG8gMSBzcGVjaWZ5aW5nIHRoZSBvcGFjaXR5IGZvciB0aGUgdGV4dC5cXFwiLFxcblxcdFxcdFxcdFxcdFxcXCJkZWZhdWx0LXZhbHVlXFxcIjogMSxcXG5cXHRcXHRcXHRcXHRcXFwiZGVmYXVsdC1tZWFuaW5nXFxcIjogXFxcIkZ1bGx5IG9wYXF1ZVxcXCIsXFxuXFx0XFx0XFx0XFx0XFxcImV4cHJlc3Npb25cXFwiOiB0cnVlLFxcblxcdFxcdFxcdFxcdFxcXCJ0eXBlXFxcIjogXFxcImZsb2F0XFxcIlxcblxcdFxcdFxcdH1cXG5cXHRcXHR9XFxuXFx0fSxcXG5cXHRcXFwiY29sb3JzXFxcIjoge1xcblxcdFxcdFxcXCJhbGljZWJsdWVcXFwiOiBbXFxuXFx0XFx0XFx0MjQwLFxcblxcdFxcdFxcdDI0OCxcXG5cXHRcXHRcXHQyNTVcXG5cXHRcXHRdLFxcblxcdFxcdFxcXCJhbnRpcXVld2hpdGVcXFwiOiBbXFxuXFx0XFx0XFx0MjUwLFxcblxcdFxcdFxcdDIzNSxcXG5cXHRcXHRcXHQyMTVcXG5cXHRcXHRdLFxcblxcdFxcdFxcXCJhcXVhXFxcIjogW1xcblxcdFxcdFxcdDAsXFxuXFx0XFx0XFx0MjU1LFxcblxcdFxcdFxcdDI1NVxcblxcdFxcdF0sXFxuXFx0XFx0XFxcImFxdWFtYXJpbmVcXFwiOiBbXFxuXFx0XFx0XFx0MTI3LFxcblxcdFxcdFxcdDI1NSxcXG5cXHRcXHRcXHQyMTJcXG5cXHRcXHRdLFxcblxcdFxcdFxcXCJhenVyZVxcXCI6IFtcXG5cXHRcXHRcXHQyNDAsXFxuXFx0XFx0XFx0MjU1LFxcblxcdFxcdFxcdDI1NVxcblxcdFxcdF0sXFxuXFx0XFx0XFxcImJlaWdlXFxcIjogW1xcblxcdFxcdFxcdDI0NSxcXG5cXHRcXHRcXHQyNDUsXFxuXFx0XFx0XFx0MjIwXFxuXFx0XFx0XSxcXG5cXHRcXHRcXFwiYmlzcXVlXFxcIjogW1xcblxcdFxcdFxcdDI1NSxcXG5cXHRcXHRcXHQyMjgsXFxuXFx0XFx0XFx0MTk2XFxuXFx0XFx0XSxcXG5cXHRcXHRcXFwiYmxhY2tcXFwiOiBbXFxuXFx0XFx0XFx0MCxcXG5cXHRcXHRcXHQwLFxcblxcdFxcdFxcdDBcXG5cXHRcXHRdLFxcblxcdFxcdFxcXCJibGFuY2hlZGFsbW9uZFxcXCI6IFtcXG5cXHRcXHRcXHQyNTUsXFxuXFx0XFx0XFx0MjM1LFxcblxcdFxcdFxcdDIwNVxcblxcdFxcdF0sXFxuXFx0XFx0XFxcImJsdWVcXFwiOiBbXFxuXFx0XFx0XFx0MCxcXG5cXHRcXHRcXHQwLFxcblxcdFxcdFxcdDI1NVxcblxcdFxcdF0sXFxuXFx0XFx0XFxcImJsdWV2aW9sZXRcXFwiOiBbXFxuXFx0XFx0XFx0MTM4LFxcblxcdFxcdFxcdDQzLFxcblxcdFxcdFxcdDIyNlxcblxcdFxcdF0sXFxuXFx0XFx0XFxcImJyb3duXFxcIjogW1xcblxcdFxcdFxcdDE2NSxcXG5cXHRcXHRcXHQ0MixcXG5cXHRcXHRcXHQ0MlxcblxcdFxcdF0sXFxuXFx0XFx0XFxcImJ1cmx5d29vZFxcXCI6IFtcXG5cXHRcXHRcXHQyMjIsXFxuXFx0XFx0XFx0MTg0LFxcblxcdFxcdFxcdDEzNVxcblxcdFxcdF0sXFxuXFx0XFx0XFxcImNhZGV0Ymx1ZVxcXCI6IFtcXG5cXHRcXHRcXHQ5NSxcXG5cXHRcXHRcXHQxNTgsXFxuXFx0XFx0XFx0MTYwXFxuXFx0XFx0XSxcXG5cXHRcXHRcXFwiY2hhcnRyZXVzZVxcXCI6IFtcXG5cXHRcXHRcXHQxMjcsXFxuXFx0XFx0XFx0MjU1LFxcblxcdFxcdFxcdDBcXG5cXHRcXHRdLFxcblxcdFxcdFxcXCJjaG9jb2xhdGVcXFwiOiBbXFxuXFx0XFx0XFx0MjEwLFxcblxcdFxcdFxcdDEwNSxcXG5cXHRcXHRcXHQzMFxcblxcdFxcdF0sXFxuXFx0XFx0XFxcImNvcmFsXFxcIjogW1xcblxcdFxcdFxcdDI1NSxcXG5cXHRcXHRcXHQxMjcsXFxuXFx0XFx0XFx0ODBcXG5cXHRcXHRdLFxcblxcdFxcdFxcXCJjb3JuZmxvd2VyYmx1ZVxcXCI6IFtcXG5cXHRcXHRcXHQxMDAsXFxuXFx0XFx0XFx0MTQ5LFxcblxcdFxcdFxcdDIzN1xcblxcdFxcdF0sXFxuXFx0XFx0XFxcImNvcm5zaWxrXFxcIjogW1xcblxcdFxcdFxcdDI1NSxcXG5cXHRcXHRcXHQyNDgsXFxuXFx0XFx0XFx0MjIwXFxuXFx0XFx0XSxcXG5cXHRcXHRcXFwiY3JpbXNvblxcXCI6IFtcXG5cXHRcXHRcXHQyMjAsXFxuXFx0XFx0XFx0MjAsXFxuXFx0XFx0XFx0NjBcXG5cXHRcXHRdLFxcblxcdFxcdFxcXCJjeWFuXFxcIjogW1xcblxcdFxcdFxcdDAsXFxuXFx0XFx0XFx0MjU1LFxcblxcdFxcdFxcdDI1NVxcblxcdFxcdF0sXFxuXFx0XFx0XFxcImRhcmtibHVlXFxcIjogW1xcblxcdFxcdFxcdDAsXFxuXFx0XFx0XFx0MCxcXG5cXHRcXHRcXHQxMzlcXG5cXHRcXHRdLFxcblxcdFxcdFxcXCJkYXJrY3lhblxcXCI6IFtcXG5cXHRcXHRcXHQwLFxcblxcdFxcdFxcdDEzOSxcXG5cXHRcXHRcXHQxMzlcXG5cXHRcXHRdLFxcblxcdFxcdFxcXCJkYXJrZ29sZGVucm9kXFxcIjogW1xcblxcdFxcdFxcdDE4NCxcXG5cXHRcXHRcXHQxMzQsXFxuXFx0XFx0XFx0MTFcXG5cXHRcXHRdLFxcblxcdFxcdFxcXCJkYXJrZ3JheVxcXCI6IFtcXG5cXHRcXHRcXHQxNjksXFxuXFx0XFx0XFx0MTY5LFxcblxcdFxcdFxcdDE2OVxcblxcdFxcdF0sXFxuXFx0XFx0XFxcImRhcmtncmVlblxcXCI6IFtcXG5cXHRcXHRcXHQwLFxcblxcdFxcdFxcdDEwMCxcXG5cXHRcXHRcXHQwXFxuXFx0XFx0XSxcXG5cXHRcXHRcXFwiZGFya2dyZXlcXFwiOiBbXFxuXFx0XFx0XFx0MTY5LFxcblxcdFxcdFxcdDE2OSxcXG5cXHRcXHRcXHQxNjlcXG5cXHRcXHRdLFxcblxcdFxcdFxcXCJkYXJra2hha2lcXFwiOiBbXFxuXFx0XFx0XFx0MTg5LFxcblxcdFxcdFxcdDE4MyxcXG5cXHRcXHRcXHQxMDdcXG5cXHRcXHRdLFxcblxcdFxcdFxcXCJkYXJrbWFnZW50YVxcXCI6IFtcXG5cXHRcXHRcXHQxMzksXFxuXFx0XFx0XFx0MCxcXG5cXHRcXHRcXHQxMzlcXG5cXHRcXHRdLFxcblxcdFxcdFxcXCJkYXJrb2xpdmVncmVlblxcXCI6IFtcXG5cXHRcXHRcXHQ4NSxcXG5cXHRcXHRcXHQxMDcsXFxuXFx0XFx0XFx0NDdcXG5cXHRcXHRdLFxcblxcdFxcdFxcXCJkYXJrb3JhbmdlXFxcIjogW1xcblxcdFxcdFxcdDI1NSxcXG5cXHRcXHRcXHQxNDAsXFxuXFx0XFx0XFx0MFxcblxcdFxcdF0sXFxuXFx0XFx0XFxcImRhcmtvcmNoaWRcXFwiOiBbXFxuXFx0XFx0XFx0MTUzLFxcblxcdFxcdFxcdDUwLFxcblxcdFxcdFxcdDIwNFxcblxcdFxcdF0sXFxuXFx0XFx0XFxcImRhcmtyZWRcXFwiOiBbXFxuXFx0XFx0XFx0MTM5LFxcblxcdFxcdFxcdDAsXFxuXFx0XFx0XFx0MFxcblxcdFxcdF0sXFxuXFx0XFx0XFxcImRhcmtzYWxtb25cXFwiOiBbXFxuXFx0XFx0XFx0MjMzLFxcblxcdFxcdFxcdDE1MCxcXG5cXHRcXHRcXHQxMjJcXG5cXHRcXHRdLFxcblxcdFxcdFxcXCJkYXJrc2VhZ3JlZW5cXFwiOiBbXFxuXFx0XFx0XFx0MTQzLFxcblxcdFxcdFxcdDE4OCxcXG5cXHRcXHRcXHQxNDNcXG5cXHRcXHRdLFxcblxcdFxcdFxcXCJkYXJrc2xhdGVibHVlXFxcIjogW1xcblxcdFxcdFxcdDcyLFxcblxcdFxcdFxcdDYxLFxcblxcdFxcdFxcdDEzOVxcblxcdFxcdF0sXFxuXFx0XFx0XFxcImRhcmtzbGF0ZWdyZXlcXFwiOiBbXFxuXFx0XFx0XFx0NDcsXFxuXFx0XFx0XFx0NzksXFxuXFx0XFx0XFx0NzlcXG5cXHRcXHRdLFxcblxcdFxcdFxcXCJkYXJrdHVycXVvaXNlXFxcIjogW1xcblxcdFxcdFxcdDAsXFxuXFx0XFx0XFx0MjA2LFxcblxcdFxcdFxcdDIwOVxcblxcdFxcdF0sXFxuXFx0XFx0XFxcImRhcmt2aW9sZXRcXFwiOiBbXFxuXFx0XFx0XFx0MTQ4LFxcblxcdFxcdFxcdDAsXFxuXFx0XFx0XFx0MjExXFxuXFx0XFx0XSxcXG5cXHRcXHRcXFwiZGVlcHBpbmtcXFwiOiBbXFxuXFx0XFx0XFx0MjU1LFxcblxcdFxcdFxcdDIwLFxcblxcdFxcdFxcdDE0N1xcblxcdFxcdF0sXFxuXFx0XFx0XFxcImRlZXBza3libHVlXFxcIjogW1xcblxcdFxcdFxcdDAsXFxuXFx0XFx0XFx0MTkxLFxcblxcdFxcdFxcdDI1NVxcblxcdFxcdF0sXFxuXFx0XFx0XFxcImRpbWdyYXlcXFwiOiBbXFxuXFx0XFx0XFx0MTA1LFxcblxcdFxcdFxcdDEwNSxcXG5cXHRcXHRcXHQxMDVcXG5cXHRcXHRdLFxcblxcdFxcdFxcXCJkaW1ncmV5XFxcIjogW1xcblxcdFxcdFxcdDEwNSxcXG5cXHRcXHRcXHQxMDUsXFxuXFx0XFx0XFx0MTA1XFxuXFx0XFx0XSxcXG5cXHRcXHRcXFwiZG9kZ2VyYmx1ZVxcXCI6IFtcXG5cXHRcXHRcXHQzMCxcXG5cXHRcXHRcXHQxNDQsXFxuXFx0XFx0XFx0MjU1XFxuXFx0XFx0XSxcXG5cXHRcXHRcXFwiZmlyZWJyaWNrXFxcIjogW1xcblxcdFxcdFxcdDE3OCxcXG5cXHRcXHRcXHQzNCxcXG5cXHRcXHRcXHQzNFxcblxcdFxcdF0sXFxuXFx0XFx0XFxcImZsb3JhbHdoaXRlXFxcIjogW1xcblxcdFxcdFxcdDI1NSxcXG5cXHRcXHRcXHQyNTAsXFxuXFx0XFx0XFx0MjQwXFxuXFx0XFx0XSxcXG5cXHRcXHRcXFwiZm9yZXN0Z3JlZW5cXFwiOiBbXFxuXFx0XFx0XFx0MzQsXFxuXFx0XFx0XFx0MTM5LFxcblxcdFxcdFxcdDM0XFxuXFx0XFx0XSxcXG5cXHRcXHRcXFwiZnVjaHNpYVxcXCI6IFtcXG5cXHRcXHRcXHQyNTUsXFxuXFx0XFx0XFx0MCxcXG5cXHRcXHRcXHQyNTVcXG5cXHRcXHRdLFxcblxcdFxcdFxcXCJnYWluc2Jvcm9cXFwiOiBbXFxuXFx0XFx0XFx0MjIwLFxcblxcdFxcdFxcdDIyMCxcXG5cXHRcXHRcXHQyMjBcXG5cXHRcXHRdLFxcblxcdFxcdFxcXCJnaG9zdHdoaXRlXFxcIjogW1xcblxcdFxcdFxcdDI0OCxcXG5cXHRcXHRcXHQyNDgsXFxuXFx0XFx0XFx0MjU1XFxuXFx0XFx0XSxcXG5cXHRcXHRcXFwiZ29sZFxcXCI6IFtcXG5cXHRcXHRcXHQyNTUsXFxuXFx0XFx0XFx0MjE1LFxcblxcdFxcdFxcdDBcXG5cXHRcXHRdLFxcblxcdFxcdFxcXCJnb2xkZW5yb2RcXFwiOiBbXFxuXFx0XFx0XFx0MjE4LFxcblxcdFxcdFxcdDE2NSxcXG5cXHRcXHRcXHQzMlxcblxcdFxcdF0sXFxuXFx0XFx0XFxcImdyYXlcXFwiOiBbXFxuXFx0XFx0XFx0MTI4LFxcblxcdFxcdFxcdDEyOCxcXG5cXHRcXHRcXHQxMjhcXG5cXHRcXHRdLFxcblxcdFxcdFxcXCJncmV5XFxcIjogW1xcblxcdFxcdFxcdDEyOCxcXG5cXHRcXHRcXHQxMjgsXFxuXFx0XFx0XFx0MTI4XFxuXFx0XFx0XSxcXG5cXHRcXHRcXFwiZ3JlZW5cXFwiOiBbXFxuXFx0XFx0XFx0MCxcXG5cXHRcXHRcXHQxMjgsXFxuXFx0XFx0XFx0MFxcblxcdFxcdF0sXFxuXFx0XFx0XFxcImdyZWVueWVsbG93XFxcIjogW1xcblxcdFxcdFxcdDE3MyxcXG5cXHRcXHRcXHQyNTUsXFxuXFx0XFx0XFx0NDdcXG5cXHRcXHRdLFxcblxcdFxcdFxcXCJob25leWRld1xcXCI6IFtcXG5cXHRcXHRcXHQyNDAsXFxuXFx0XFx0XFx0MjU1LFxcblxcdFxcdFxcdDI0MFxcblxcdFxcdF0sXFxuXFx0XFx0XFxcImhvdHBpbmtcXFwiOiBbXFxuXFx0XFx0XFx0MjU1LFxcblxcdFxcdFxcdDEwNSxcXG5cXHRcXHRcXHQxODBcXG5cXHRcXHRdLFxcblxcdFxcdFxcXCJpbmRpYW5yZWRcXFwiOiBbXFxuXFx0XFx0XFx0MjA1LFxcblxcdFxcdFxcdDkyLFxcblxcdFxcdFxcdDkyXFxuXFx0XFx0XSxcXG5cXHRcXHRcXFwiaW5kaWdvXFxcIjogW1xcblxcdFxcdFxcdDc1LFxcblxcdFxcdFxcdDAsXFxuXFx0XFx0XFx0MTMwXFxuXFx0XFx0XSxcXG5cXHRcXHRcXFwiaXZvcnlcXFwiOiBbXFxuXFx0XFx0XFx0MjU1LFxcblxcdFxcdFxcdDI1NSxcXG5cXHRcXHRcXHQyNDBcXG5cXHRcXHRdLFxcblxcdFxcdFxcXCJraGFraVxcXCI6IFtcXG5cXHRcXHRcXHQyNDAsXFxuXFx0XFx0XFx0MjMwLFxcblxcdFxcdFxcdDE0MFxcblxcdFxcdF0sXFxuXFx0XFx0XFxcImxhdmVuZGVyXFxcIjogW1xcblxcdFxcdFxcdDIzMCxcXG5cXHRcXHRcXHQyMzAsXFxuXFx0XFx0XFx0MjUwXFxuXFx0XFx0XSxcXG5cXHRcXHRcXFwibGF2ZW5kZXJibHVzaFxcXCI6IFtcXG5cXHRcXHRcXHQyNTUsXFxuXFx0XFx0XFx0MjQwLFxcblxcdFxcdFxcdDI0NVxcblxcdFxcdF0sXFxuXFx0XFx0XFxcImxhd25ncmVlblxcXCI6IFtcXG5cXHRcXHRcXHQxMjQsXFxuXFx0XFx0XFx0MjUyLFxcblxcdFxcdFxcdDBcXG5cXHRcXHRdLFxcblxcdFxcdFxcXCJsZW1vbmNoaWZmb25cXFwiOiBbXFxuXFx0XFx0XFx0MjU1LFxcblxcdFxcdFxcdDI1MCxcXG5cXHRcXHRcXHQyMDVcXG5cXHRcXHRdLFxcblxcdFxcdFxcXCJsaWdodGJsdWVcXFwiOiBbXFxuXFx0XFx0XFx0MTczLFxcblxcdFxcdFxcdDIxNixcXG5cXHRcXHRcXHQyMzBcXG5cXHRcXHRdLFxcblxcdFxcdFxcXCJsaWdodGNvcmFsXFxcIjogW1xcblxcdFxcdFxcdDI0MCxcXG5cXHRcXHRcXHQxMjgsXFxuXFx0XFx0XFx0MTI4XFxuXFx0XFx0XSxcXG5cXHRcXHRcXFwibGlnaHRjeWFuXFxcIjogW1xcblxcdFxcdFxcdDIyNCxcXG5cXHRcXHRcXHQyNTUsXFxuXFx0XFx0XFx0MjU1XFxuXFx0XFx0XSxcXG5cXHRcXHRcXFwibGlnaHRnb2xkZW5yb2R5ZWxsb3dcXFwiOiBbXFxuXFx0XFx0XFx0MjUwLFxcblxcdFxcdFxcdDI1MCxcXG5cXHRcXHRcXHQyMTBcXG5cXHRcXHRdLFxcblxcdFxcdFxcXCJsaWdodGdyYXlcXFwiOiBbXFxuXFx0XFx0XFx0MjExLFxcblxcdFxcdFxcdDIxMSxcXG5cXHRcXHRcXHQyMTFcXG5cXHRcXHRdLFxcblxcdFxcdFxcXCJsaWdodGdyZWVuXFxcIjogW1xcblxcdFxcdFxcdDE0NCxcXG5cXHRcXHRcXHQyMzgsXFxuXFx0XFx0XFx0MTQ0XFxuXFx0XFx0XSxcXG5cXHRcXHRcXFwibGlnaHRncmV5XFxcIjogW1xcblxcdFxcdFxcdDIxMSxcXG5cXHRcXHRcXHQyMTEsXFxuXFx0XFx0XFx0MjExXFxuXFx0XFx0XSxcXG5cXHRcXHRcXFwibGlnaHRwaW5rXFxcIjogW1xcblxcdFxcdFxcdDI1NSxcXG5cXHRcXHRcXHQxODIsXFxuXFx0XFx0XFx0MTkzXFxuXFx0XFx0XSxcXG5cXHRcXHRcXFwibGlnaHRzYWxtb25cXFwiOiBbXFxuXFx0XFx0XFx0MjU1LFxcblxcdFxcdFxcdDE2MCxcXG5cXHRcXHRcXHQxMjJcXG5cXHRcXHRdLFxcblxcdFxcdFxcXCJsaWdodHNlYWdyZWVuXFxcIjogW1xcblxcdFxcdFxcdDMyLFxcblxcdFxcdFxcdDE3OCxcXG5cXHRcXHRcXHQxNzBcXG5cXHRcXHRdLFxcblxcdFxcdFxcXCJsaWdodHNreWJsdWVcXFwiOiBbXFxuXFx0XFx0XFx0MTM1LFxcblxcdFxcdFxcdDIwNixcXG5cXHRcXHRcXHQyNTBcXG5cXHRcXHRdLFxcblxcdFxcdFxcXCJsaWdodHNsYXRlZ3JheVxcXCI6IFtcXG5cXHRcXHRcXHQxMTksXFxuXFx0XFx0XFx0MTM2LFxcblxcdFxcdFxcdDE1M1xcblxcdFxcdF0sXFxuXFx0XFx0XFxcImxpZ2h0c2xhdGVncmV5XFxcIjogW1xcblxcdFxcdFxcdDExOSxcXG5cXHRcXHRcXHQxMzYsXFxuXFx0XFx0XFx0MTUzXFxuXFx0XFx0XSxcXG5cXHRcXHRcXFwibGlnaHRzdGVlbGJsdWVcXFwiOiBbXFxuXFx0XFx0XFx0MTc2LFxcblxcdFxcdFxcdDE5NixcXG5cXHRcXHRcXHQyMjJcXG5cXHRcXHRdLFxcblxcdFxcdFxcXCJsaWdodHllbGxvd1xcXCI6IFtcXG5cXHRcXHRcXHQyNTUsXFxuXFx0XFx0XFx0MjU1LFxcblxcdFxcdFxcdDIyNFxcblxcdFxcdF0sXFxuXFx0XFx0XFxcImxpbWVcXFwiOiBbXFxuXFx0XFx0XFx0MCxcXG5cXHRcXHRcXHQyNTUsXFxuXFx0XFx0XFx0MFxcblxcdFxcdF0sXFxuXFx0XFx0XFxcImxpbWVncmVlblxcXCI6IFtcXG5cXHRcXHRcXHQ1MCxcXG5cXHRcXHRcXHQyMDUsXFxuXFx0XFx0XFx0NTBcXG5cXHRcXHRdLFxcblxcdFxcdFxcXCJsaW5lblxcXCI6IFtcXG5cXHRcXHRcXHQyNTAsXFxuXFx0XFx0XFx0MjQwLFxcblxcdFxcdFxcdDIzMFxcblxcdFxcdF0sXFxuXFx0XFx0XFxcIm1hZ2VudGFcXFwiOiBbXFxuXFx0XFx0XFx0MjU1LFxcblxcdFxcdFxcdDAsXFxuXFx0XFx0XFx0MjU1XFxuXFx0XFx0XSxcXG5cXHRcXHRcXFwibWFyb29uXFxcIjogW1xcblxcdFxcdFxcdDEyOCxcXG5cXHRcXHRcXHQwLFxcblxcdFxcdFxcdDBcXG5cXHRcXHRdLFxcblxcdFxcdFxcXCJtZWRpdW1hcXVhbWFyaW5lXFxcIjogW1xcblxcdFxcdFxcdDEwMixcXG5cXHRcXHRcXHQyMDUsXFxuXFx0XFx0XFx0MTcwXFxuXFx0XFx0XSxcXG5cXHRcXHRcXFwibWVkaXVtYmx1ZVxcXCI6IFtcXG5cXHRcXHRcXHQwLFxcblxcdFxcdFxcdDAsXFxuXFx0XFx0XFx0MjA1XFxuXFx0XFx0XSxcXG5cXHRcXHRcXFwibWVkaXVtb3JjaGlkXFxcIjogW1xcblxcdFxcdFxcdDE4NixcXG5cXHRcXHRcXHQ4NSxcXG5cXHRcXHRcXHQyMTFcXG5cXHRcXHRdLFxcblxcdFxcdFxcXCJtZWRpdW1wdXJwbGVcXFwiOiBbXFxuXFx0XFx0XFx0MTQ3LFxcblxcdFxcdFxcdDExMixcXG5cXHRcXHRcXHQyMTlcXG5cXHRcXHRdLFxcblxcdFxcdFxcXCJtZWRpdW1zZWFncmVlblxcXCI6IFtcXG5cXHRcXHRcXHQ2MCxcXG5cXHRcXHRcXHQxNzksXFxuXFx0XFx0XFx0MTEzXFxuXFx0XFx0XSxcXG5cXHRcXHRcXFwibWVkaXVtc2xhdGVibHVlXFxcIjogW1xcblxcdFxcdFxcdDEyMyxcXG5cXHRcXHRcXHQxMDQsXFxuXFx0XFx0XFx0MjM4XFxuXFx0XFx0XSxcXG5cXHRcXHRcXFwibWVkaXVtc3ByaW5nZ3JlZW5cXFwiOiBbXFxuXFx0XFx0XFx0MCxcXG5cXHRcXHRcXHQyNTAsXFxuXFx0XFx0XFx0MTU0XFxuXFx0XFx0XSxcXG5cXHRcXHRcXFwibWVkaXVtdHVycXVvaXNlXFxcIjogW1xcblxcdFxcdFxcdDcyLFxcblxcdFxcdFxcdDIwOSxcXG5cXHRcXHRcXHQyMDRcXG5cXHRcXHRdLFxcblxcdFxcdFxcXCJtZWRpdW12aW9sZXRyZWRcXFwiOiBbXFxuXFx0XFx0XFx0MTk5LFxcblxcdFxcdFxcdDIxLFxcblxcdFxcdFxcdDEzM1xcblxcdFxcdF0sXFxuXFx0XFx0XFxcIm1pZG5pZ2h0Ymx1ZVxcXCI6IFtcXG5cXHRcXHRcXHQyNSxcXG5cXHRcXHRcXHQyNSxcXG5cXHRcXHRcXHQxMTJcXG5cXHRcXHRdLFxcblxcdFxcdFxcXCJtaW50Y3JlYW1cXFwiOiBbXFxuXFx0XFx0XFx0MjQ1LFxcblxcdFxcdFxcdDI1NSxcXG5cXHRcXHRcXHQyNTBcXG5cXHRcXHRdLFxcblxcdFxcdFxcXCJtaXN0eXJvc2VcXFwiOiBbXFxuXFx0XFx0XFx0MjU1LFxcblxcdFxcdFxcdDIyOCxcXG5cXHRcXHRcXHQyMjVcXG5cXHRcXHRdLFxcblxcdFxcdFxcXCJtb2NjYXNpblxcXCI6IFtcXG5cXHRcXHRcXHQyNTUsXFxuXFx0XFx0XFx0MjI4LFxcblxcdFxcdFxcdDE4MVxcblxcdFxcdF0sXFxuXFx0XFx0XFxcIm5hdmFqb3doaXRlXFxcIjogW1xcblxcdFxcdFxcdDI1NSxcXG5cXHRcXHRcXHQyMjIsXFxuXFx0XFx0XFx0MTczXFxuXFx0XFx0XSxcXG5cXHRcXHRcXFwibmF2eVxcXCI6IFtcXG5cXHRcXHRcXHQwLFxcblxcdFxcdFxcdDAsXFxuXFx0XFx0XFx0MTI4XFxuXFx0XFx0XSxcXG5cXHRcXHRcXFwib2xkbGFjZVxcXCI6IFtcXG5cXHRcXHRcXHQyNTMsXFxuXFx0XFx0XFx0MjQ1LFxcblxcdFxcdFxcdDIzMFxcblxcdFxcdF0sXFxuXFx0XFx0XFxcIm9saXZlXFxcIjogW1xcblxcdFxcdFxcdDEyOCxcXG5cXHRcXHRcXHQxMjgsXFxuXFx0XFx0XFx0MFxcblxcdFxcdF0sXFxuXFx0XFx0XFxcIm9saXZlZHJhYlxcXCI6IFtcXG5cXHRcXHRcXHQxMDcsXFxuXFx0XFx0XFx0MTQyLFxcblxcdFxcdFxcdDM1XFxuXFx0XFx0XSxcXG5cXHRcXHRcXFwib3JhbmdlXFxcIjogW1xcblxcdFxcdFxcdDI1NSxcXG5cXHRcXHRcXHQxNjUsXFxuXFx0XFx0XFx0MFxcblxcdFxcdF0sXFxuXFx0XFx0XFxcIm9yYW5nZXJlZFxcXCI6IFtcXG5cXHRcXHRcXHQyNTUsXFxuXFx0XFx0XFx0NjksXFxuXFx0XFx0XFx0MFxcblxcdFxcdF0sXFxuXFx0XFx0XFxcIm9yY2hpZFxcXCI6IFtcXG5cXHRcXHRcXHQyMTgsXFxuXFx0XFx0XFx0MTEyLFxcblxcdFxcdFxcdDIxNFxcblxcdFxcdF0sXFxuXFx0XFx0XFxcInBhbGVnb2xkZW5yb2RcXFwiOiBbXFxuXFx0XFx0XFx0MjM4LFxcblxcdFxcdFxcdDIzMixcXG5cXHRcXHRcXHQxNzBcXG5cXHRcXHRdLFxcblxcdFxcdFxcXCJwYWxlZ3JlZW5cXFwiOiBbXFxuXFx0XFx0XFx0MTUyLFxcblxcdFxcdFxcdDI1MSxcXG5cXHRcXHRcXHQxNTJcXG5cXHRcXHRdLFxcblxcdFxcdFxcXCJwYWxldHVycXVvaXNlXFxcIjogW1xcblxcdFxcdFxcdDE3NSxcXG5cXHRcXHRcXHQyMzgsXFxuXFx0XFx0XFx0MjM4XFxuXFx0XFx0XSxcXG5cXHRcXHRcXFwicGFsZXZpb2xldHJlZFxcXCI6IFtcXG5cXHRcXHRcXHQyMTksXFxuXFx0XFx0XFx0MTEyLFxcblxcdFxcdFxcdDE0N1xcblxcdFxcdF0sXFxuXFx0XFx0XFxcInBhcGF5YXdoaXBcXFwiOiBbXFxuXFx0XFx0XFx0MjU1LFxcblxcdFxcdFxcdDIzOSxcXG5cXHRcXHRcXHQyMTNcXG5cXHRcXHRdLFxcblxcdFxcdFxcXCJwZWFjaHB1ZmZcXFwiOiBbXFxuXFx0XFx0XFx0MjU1LFxcblxcdFxcdFxcdDIxOCxcXG5cXHRcXHRcXHQxODVcXG5cXHRcXHRdLFxcblxcdFxcdFxcXCJwZXJ1XFxcIjogW1xcblxcdFxcdFxcdDIwNSxcXG5cXHRcXHRcXHQxMzMsXFxuXFx0XFx0XFx0NjNcXG5cXHRcXHRdLFxcblxcdFxcdFxcXCJwaW5rXFxcIjogW1xcblxcdFxcdFxcdDI1NSxcXG5cXHRcXHRcXHQxOTIsXFxuXFx0XFx0XFx0MjAzXFxuXFx0XFx0XSxcXG5cXHRcXHRcXFwicGx1bVxcXCI6IFtcXG5cXHRcXHRcXHQyMjEsXFxuXFx0XFx0XFx0MTYwLFxcblxcdFxcdFxcdDIyMVxcblxcdFxcdF0sXFxuXFx0XFx0XFxcInBvd2RlcmJsdWVcXFwiOiBbXFxuXFx0XFx0XFx0MTc2LFxcblxcdFxcdFxcdDIyNCxcXG5cXHRcXHRcXHQyMzBcXG5cXHRcXHRdLFxcblxcdFxcdFxcXCJwdXJwbGVcXFwiOiBbXFxuXFx0XFx0XFx0MTI4LFxcblxcdFxcdFxcdDAsXFxuXFx0XFx0XFx0MTI4XFxuXFx0XFx0XSxcXG5cXHRcXHRcXFwicmVkXFxcIjogW1xcblxcdFxcdFxcdDI1NSxcXG5cXHRcXHRcXHQwLFxcblxcdFxcdFxcdDBcXG5cXHRcXHRdLFxcblxcdFxcdFxcXCJyb3N5YnJvd25cXFwiOiBbXFxuXFx0XFx0XFx0MTg4LFxcblxcdFxcdFxcdDE0MyxcXG5cXHRcXHRcXHQxNDNcXG5cXHRcXHRdLFxcblxcdFxcdFxcXCJyb3lhbGJsdWVcXFwiOiBbXFxuXFx0XFx0XFx0NjUsXFxuXFx0XFx0XFx0MTA1LFxcblxcdFxcdFxcdDIyNVxcblxcdFxcdF0sXFxuXFx0XFx0XFxcInNhZGRsZWJyb3duXFxcIjogW1xcblxcdFxcdFxcdDEzOSxcXG5cXHRcXHRcXHQ2OSxcXG5cXHRcXHRcXHQxOVxcblxcdFxcdF0sXFxuXFx0XFx0XFxcInNhbG1vblxcXCI6IFtcXG5cXHRcXHRcXHQyNTAsXFxuXFx0XFx0XFx0MTI4LFxcblxcdFxcdFxcdDExNFxcblxcdFxcdF0sXFxuXFx0XFx0XFxcInNhbmR5YnJvd25cXFwiOiBbXFxuXFx0XFx0XFx0MjQ0LFxcblxcdFxcdFxcdDE2NCxcXG5cXHRcXHRcXHQ5NlxcblxcdFxcdF0sXFxuXFx0XFx0XFxcInNlYWdyZWVuXFxcIjogW1xcblxcdFxcdFxcdDQ2LFxcblxcdFxcdFxcdDEzOSxcXG5cXHRcXHRcXHQ4N1xcblxcdFxcdF0sXFxuXFx0XFx0XFxcInNlYXNoZWxsXFxcIjogW1xcblxcdFxcdFxcdDI1NSxcXG5cXHRcXHRcXHQyNDUsXFxuXFx0XFx0XFx0MjM4XFxuXFx0XFx0XSxcXG5cXHRcXHRcXFwic2llbm5hXFxcIjogW1xcblxcdFxcdFxcdDE2MCxcXG5cXHRcXHRcXHQ4MixcXG5cXHRcXHRcXHQ0NVxcblxcdFxcdF0sXFxuXFx0XFx0XFxcInNpbHZlclxcXCI6IFtcXG5cXHRcXHRcXHQxOTIsXFxuXFx0XFx0XFx0MTkyLFxcblxcdFxcdFxcdDE5MlxcblxcdFxcdF0sXFxuXFx0XFx0XFxcInNreWJsdWVcXFwiOiBbXFxuXFx0XFx0XFx0MTM1LFxcblxcdFxcdFxcdDIwNixcXG5cXHRcXHRcXHQyMzVcXG5cXHRcXHRdLFxcblxcdFxcdFxcXCJzbGF0ZWJsdWVcXFwiOiBbXFxuXFx0XFx0XFx0MTA2LFxcblxcdFxcdFxcdDkwLFxcblxcdFxcdFxcdDIwNVxcblxcdFxcdF0sXFxuXFx0XFx0XFxcInNsYXRlZ3JheVxcXCI6IFtcXG5cXHRcXHRcXHQxMTIsXFxuXFx0XFx0XFx0MTI4LFxcblxcdFxcdFxcdDE0NFxcblxcdFxcdF0sXFxuXFx0XFx0XFxcInNsYXRlZ3JleVxcXCI6IFtcXG5cXHRcXHRcXHQxMTIsXFxuXFx0XFx0XFx0MTI4LFxcblxcdFxcdFxcdDE0NFxcblxcdFxcdF0sXFxuXFx0XFx0XFxcInNub3dcXFwiOiBbXFxuXFx0XFx0XFx0MjU1LFxcblxcdFxcdFxcdDI1MCxcXG5cXHRcXHRcXHQyNTBcXG5cXHRcXHRdLFxcblxcdFxcdFxcXCJzcHJpbmdncmVlblxcXCI6IFtcXG5cXHRcXHRcXHQwLFxcblxcdFxcdFxcdDI1NSxcXG5cXHRcXHRcXHQxMjdcXG5cXHRcXHRdLFxcblxcdFxcdFxcXCJzdGVlbGJsdWVcXFwiOiBbXFxuXFx0XFx0XFx0NzAsXFxuXFx0XFx0XFx0MTMwLFxcblxcdFxcdFxcdDE4MFxcblxcdFxcdF0sXFxuXFx0XFx0XFxcInRhblxcXCI6IFtcXG5cXHRcXHRcXHQyMTAsXFxuXFx0XFx0XFx0MTgwLFxcblxcdFxcdFxcdDE0MFxcblxcdFxcdF0sXFxuXFx0XFx0XFxcInRlYWxcXFwiOiBbXFxuXFx0XFx0XFx0MCxcXG5cXHRcXHRcXHQxMjgsXFxuXFx0XFx0XFx0MTI4XFxuXFx0XFx0XSxcXG5cXHRcXHRcXFwidGhpc3RsZVxcXCI6IFtcXG5cXHRcXHRcXHQyMTYsXFxuXFx0XFx0XFx0MTkxLFxcblxcdFxcdFxcdDIxNlxcblxcdFxcdF0sXFxuXFx0XFx0XFxcInRvbWF0b1xcXCI6IFtcXG5cXHRcXHRcXHQyNTUsXFxuXFx0XFx0XFx0OTksXFxuXFx0XFx0XFx0NzFcXG5cXHRcXHRdLFxcblxcdFxcdFxcXCJ0dXJxdW9pc2VcXFwiOiBbXFxuXFx0XFx0XFx0NjQsXFxuXFx0XFx0XFx0MjI0LFxcblxcdFxcdFxcdDIwOFxcblxcdFxcdF0sXFxuXFx0XFx0XFxcInZpb2xldFxcXCI6IFtcXG5cXHRcXHRcXHQyMzgsXFxuXFx0XFx0XFx0MTMwLFxcblxcdFxcdFxcdDIzOFxcblxcdFxcdF0sXFxuXFx0XFx0XFxcIndoZWF0XFxcIjogW1xcblxcdFxcdFxcdDI0NSxcXG5cXHRcXHRcXHQyMjIsXFxuXFx0XFx0XFx0MTc5XFxuXFx0XFx0XSxcXG5cXHRcXHRcXFwid2hpdGVcXFwiOiBbXFxuXFx0XFx0XFx0MjU1LFxcblxcdFxcdFxcdDI1NSxcXG5cXHRcXHRcXHQyNTVcXG5cXHRcXHRdLFxcblxcdFxcdFxcXCJ3aGl0ZXNtb2tlXFxcIjogW1xcblxcdFxcdFxcdDI0NSxcXG5cXHRcXHRcXHQyNDUsXFxuXFx0XFx0XFx0MjQ1XFxuXFx0XFx0XSxcXG5cXHRcXHRcXFwieWVsbG93XFxcIjogW1xcblxcdFxcdFxcdDI1NSxcXG5cXHRcXHRcXHQyNTUsXFxuXFx0XFx0XFx0MFxcblxcdFxcdF0sXFxuXFx0XFx0XFxcInllbGxvd2dyZWVuXFxcIjogW1xcblxcdFxcdFxcdDE1NCxcXG5cXHRcXHRcXHQyMDUsXFxuXFx0XFx0XFx0NTBcXG5cXHRcXHRdLFxcblxcdFxcdFxcXCJ0cmFuc3BhcmVudFxcXCI6IFtcXG5cXHRcXHRcXHQwLFxcblxcdFxcdFxcdDAsXFxuXFx0XFx0XFx0MCxcXG5cXHRcXHRcXHQwXFxuXFx0XFx0XVxcblxcdH1cXG59Oy8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pTVRrekxtcHpJaXdpYzI5MWNtTmxjeUk2V3lKM1pXSndZV05yT2k4dkx5NHZmaTkwWVc1bmNtRnRMWEpsWm1WeVpXNWpaUzh4TGpBdU1DOXlaV1psY21WdVkyVXVhbk52Ymo4d1kyUTNJbDBzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSW0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnZTF4dVhIUmNJblpsY25OcGIyNWNJam9nWENJeExqQXVNRndpTEZ4dVhIUmNJbk41YldKdmJHbDZaWEp6WENJNklIdGNibHgwWEhSY0luQnZiSGxuYjI1Y0lqb2dlMXh1WEhSY2RGeDBYQ0ptYVd4c1hDSTZJSHRjYmx4MFhIUmNkRngwWENKamMzTmNJam9nWENKd2IyeDVaMjl1TFdacGJHeGNJaXhjYmx4MFhIUmNkRngwWENKMGVYQmxYQ0k2SUZ3aVkyOXNiM0pjSWl4Y2JseDBYSFJjZEZ4MFhDSmtaV1poZFd4MExYWmhiSFZsWENJNklGd2ljbWRpWVNneE1qZ3NNVEk0TERFeU9Dd3hLVndpTEZ4dVhIUmNkRngwWEhSY0ltUmxabUYxYkhRdGJXVmhibWx1WjF3aU9pQmNJbWR5WVhrZ1lXNWtJR1oxYkd4NUlHOXdZWEYxWlNBb1lXeHdhR0VnUFNBeEtTd2djMkZ0WlNCaGN5QnlaMklvTVRJNExERXlPQ3d4TWpncFhDSXNYRzVjZEZ4MFhIUmNkRndpWkc5alhDSTZJRndpUm1sc2JDQmpiMnh2Y2lCMGJ5QmhjM05wWjI0Z2RHOGdZU0J3YjJ4NVoyOXVYQ0pjYmx4MFhIUmNkSDBzWEc1Y2RGeDBYSFJjSW1acGJHd3RiM0JoWTJsMGVWd2lPaUI3WEc1Y2RGeDBYSFJjZEZ3aVkzTnpYQ0k2SUZ3aWNHOXNlV2R2YmkxdmNHRmphWFI1WENJc1hHNWNkRngwWEhSY2RGd2lkSGx3WlZ3aU9pQmNJbVpzYjJGMFhDSXNYRzVjZEZ4MFhIUmNkRndpWkc5alhDSTZJRndpVkdobElHOXdZV05wZEhrZ2IyWWdkR2hsSUhCdmJIbG5iMjVjSWl4Y2JseDBYSFJjZEZ4MFhDSmtaV1poZFd4MExYWmhiSFZsWENJNklERXNYRzVjZEZ4MFhIUmNkRndpWkdWbVlYVnNkQzF0WldGdWFXNW5YQ0k2SUZ3aWIzQmhjWFZsWENKY2JseDBYSFJjZEgwc1hHNWNkRngwWEhSY0ltTnZiWEF0YjNCY0lqb2dlMXh1WEhSY2RGeDBYSFJjSW1OemMxd2lPaUJjSW5CdmJIbG5iMjR0WTI5dGNDMXZjRndpTEZ4dVhIUmNkRngwWEhSY0ltUmxabUYxYkhRdGRtRnNkV1ZjSWpvZ1hDSnpjbU10YjNabGNsd2lMRnh1WEhSY2RGeDBYSFJjSW1SbFptRjFiSFF0YldWaGJtbHVaMXdpT2lCY0lrRmtaQ0IwYUdVZ1kzVnljbVZ1ZENCemVXMWliMnhwZW1WeUlHOXVJSFJ2Y0NCdlppQnZkR2hsY2lCemVXMWliMnhwZW1WeUxsd2lMRnh1WEhSY2RGeDBYSFJjSW1Sdlkxd2lPaUJjSWtOdmJYQnZjMmwwWlNCdmNHVnlZWFJwYjI0dUlGUm9hWE1nWkdWbWFXNWxjeUJvYjNjZ2RHaHBjeUJ6ZVcxaWIyeHBlbVZ5SUhOb2IzVnNaQ0JpWldoaGRtVWdjbVZzWVhScGRtVWdkRzhnYzNsdFltOXNhWHBsY25NZ1lYUnZjQ0J2Y2lCaVpXeHZkeUJwZEM1Y0lpeGNibHgwWEhSY2RGeDBYQ0owZVhCbFhDSTZJRnRjYmx4MFhIUmNkRngwWEhSY0ltMTFiSFJwY0d4NVhDSXNYRzVjZEZ4MFhIUmNkRngwWENKaFpHUmNJaXhjYmx4MFhIUmNkRngwWEhSY0ltOTJaWEpzWVhsY0lseHVYSFJjZEZ4MFhIUmRMRnh1WEhSY2RGeDBYSFJjSW1WNGNISmxjM05wYjI1Y0lqb2dkSEoxWlZ4dVhIUmNkRngwZlZ4dVhIUmNkSDBzWEc1Y2RGeDBYQ0p3YjJ4NVoyOXVMWEJoZEhSbGNtNWNJam9nZTF4dVhIUmNkRngwWENKbWFXeGxYQ0k2SUh0Y2JseDBYSFJjZEZ4MFhDSmpjM05jSWpvZ1hDSndiMng1WjI5dUxYQmhkSFJsY200dFptbHNaVndpTEZ4dVhIUmNkRngwWEhSY0luUjVjR1ZjSWpvZ1hDSjFjbWxjSWl4Y2JseDBYSFJjZEZ4MFhDSmxlSEJ5WlhOemFXOXVYQ0k2SUhSeWRXVXNYRzVjZEZ4MFhIUmNkRndpWkdWbVlYVnNkQzEyWVd4MVpWd2lPaUJjSW01dmJtVmNJaXhjYmx4MFhIUmNkRngwWENKeVpYRjFhWEpsWkZ3aU9pQjBjblZsTEZ4dVhIUmNkRngwWEhSY0ltUnZZMXdpT2lCY0lrbHRZV2RsSUhSdklIVnpaU0JoY3lCaElISmxjR1ZoZEdWa0lIQmhkSFJsY200Z1ptbHNiQ0IzYVhSb2FXNGdZU0J3YjJ4NVoyOXVMaUJCWTJObGNIUmxaQ0JtYjNKdFlYUnpPaUJ6ZG1jc0lHcHdaeXdnY0c1bkxDQjBhV1ptTENCaGJtUWdkMlZpY0M1Y0lpeGNibHgwWEhSY2RGeDBYQ0prWldaaGRXeDBMVzFsWVc1cGJtZGNJam9nWENKY0lseHVYSFJjZEZ4MGZWeHVYSFJjZEgwc1hHNWNkRngwWENKc2FXNWxYQ0k2SUh0Y2JseDBYSFJjZEZ3aWMzUnliMnRsWENJNklIdGNibHgwWEhSY2RGeDBYQ0pqYzNOY0lqb2dYQ0pzYVc1bExXTnZiRzl5WENJc1hHNWNkRngwWEhSY2RGd2laR1ZtWVhWc2RDMTJZV3gxWlZ3aU9pQmNJbkpuWW1Fb01Dd3dMREFzTVNsY0lpeGNibHgwWEhSY2RGeDBYQ0owZVhCbFhDSTZJRndpWTI5c2IzSmNJaXhjYmx4MFhIUmNkRngwWENKa1pXWmhkV3gwTFcxbFlXNXBibWRjSWpvZ1hDSmliR0ZqYXlCaGJtUWdablZzYkhrZ2IzQmhjWFZsSUNoaGJIQm9ZU0E5SURFcExDQnpZVzFsSUdGeklISm5ZaWd3TERBc01DbGNJaXhjYmx4MFhIUmNkRngwWENKa2IyTmNJam9nWENKVWFHVWdZMjlzYjNJZ2IyWWdZU0JrY21GM2JpQnNhVzVsWENKY2JseDBYSFJjZEgwc1hHNWNkRngwWEhSY0luTjBjbTlyWlMxM2FXUjBhRndpT2lCN1hHNWNkRngwWEhSY2RGd2lZM056WENJNklGd2liR2x1WlMxM2FXUjBhRndpTEZ4dVhIUmNkRngwWEhSY0ltUmxabUYxYkhRdGRtRnNkV1ZjSWpvZ01TeGNibHgwWEhSY2RGeDBYQ0owZVhCbFhDSTZJRndpWm14dllYUmNJaXhjYmx4MFhIUmNkRngwWENKa2IyTmNJam9nWENKVWFHVWdkMmxrZEdnZ2IyWWdZU0JzYVc1bElHbHVJSEJwZUdWc2Mxd2lYRzVjZEZ4MFhIUjlMRnh1WEhSY2RGeDBYQ0p6ZEhKdmEyVXRiM0JoWTJsMGVWd2lPaUI3WEc1Y2RGeDBYSFJjZEZ3aVkzTnpYQ0k2SUZ3aWJHbHVaUzF2Y0dGamFYUjVYQ0lzWEc1Y2RGeDBYSFJjZEZ3aVpHVm1ZWFZzZEMxMllXeDFaVndpT2lBeExGeHVYSFJjZEZ4MFhIUmNJblI1Y0dWY0lqb2dYQ0ptYkc5aGRGd2lMRnh1WEhSY2RGeDBYSFJjSW1SbFptRjFiSFF0YldWaGJtbHVaMXdpT2lCY0ltOXdZWEYxWlZ3aUxGeHVYSFJjZEZ4MFhIUmNJbVJ2WTF3aU9pQmNJbFJvWlNCdmNHRmphWFI1SUc5bUlHRWdiR2x1WlZ3aVhHNWNkRngwWEhSOUxGeHVYSFJjZEZ4MFhDSnpkSEp2YTJVdGJHbHVaV3B2YVc1Y0lqb2dlMXh1WEhSY2RGeDBYSFJjSW1OemMxd2lPaUJjSW14cGJtVXRhbTlwYmx3aUxGeHVYSFJjZEZ4MFhIUmNJbVJsWm1GMWJIUXRkbUZzZFdWY0lqb2dYQ0p0YVhSbGNsd2lMRnh1WEhSY2RGeDBYSFJjSW5SNWNHVmNJam9nVzF4dVhIUmNkRngwWEhSY2RGd2liV2wwWlhKY0lpeGNibHgwWEhSY2RGeDBYSFJjSW0xcGRHVnlMWEpsZG1WeWRGd2lMRnh1WEhSY2RGeDBYSFJjZEZ3aWNtOTFibVJjSWl4Y2JseDBYSFJjZEZ4MFhIUmNJbUpsZG1Wc1hDSmNibHgwWEhSY2RGeDBYU3hjYmx4MFhIUmNkRngwWENKbGVIQnlaWE56YVc5dVhDSTZJSFJ5ZFdVc1hHNWNkRngwWEhSY2RGd2laRzlqWENJNklGd2lWR2hsSUdKbGFHRjJhVzl5SUc5bUlHeHBibVZ6SUhkb1pXNGdhbTlwYm1sdVp5NWNJaXhjYmx4MFhIUmNkRngwWENKa1pXWmhkV3gwTFcxbFlXNXBibWRjSWpvZ1hDSlVhR1VnYkdsdVpTQnFiMmx1Y3lCM2FXeHNJR0psSUhKbGJtUmxjbVZrSUhWemFXNW5JR0VnYldsMFpYSWdiRzl2YXk1Y0lseHVYSFJjZEZ4MGZTeGNibHgwWEhSY2RGd2ljM1J5YjJ0bExXeHBibVZqWVhCY0lqb2dlMXh1WEhSY2RGeDBYSFJjSW1OemMxd2lPaUJjSW14cGJtVXRZMkZ3WENJc1hHNWNkRngwWEhSY2RGd2laR1ZtWVhWc2RDMTJZV3gxWlZ3aU9pQmNJbUoxZEhSY0lpeGNibHgwWEhSY2RGeDBYQ0owZVhCbFhDSTZJRnRjYmx4MFhIUmNkRngwWEhSY0ltSjFkSFJjSWl4Y2JseDBYSFJjZEZ4MFhIUmNJbkp2ZFc1a1hDSXNYRzVjZEZ4MFhIUmNkRngwWENKemNYVmhjbVZjSWx4dVhIUmNkRngwWEhSZExGeHVYSFJjZEZ4MFhIUmNJbVY0Y0hKbGMzTnBiMjVjSWpvZ2RISjFaU3hjYmx4MFhIUmNkRngwWENKa2IyTmNJam9nWENKVWFHVWdaR2x6Y0d4aGVTQnZaaUJzYVc1bElHVnVaR2x1WjNNdVhDSXNYRzVjZEZ4MFhIUmNkRndpWkdWbVlYVnNkQzF0WldGdWFXNW5YQ0k2SUZ3aVZHaGxJR3hwYm1VZ1pXNWthVzVuY3lCM2FXeHNJR0psSUhKbGJtUmxjbVZrSUhWemFXNW5JR0VnWW5WMGRDQnNiMjlyTGx3aVhHNWNkRngwWEhSOUxGeHVYSFJjZEZ4MFhDSmpiMjF3TFc5d1hDSTZJSHRjYmx4MFhIUmNkRngwWENKamMzTmNJam9nWENKc2FXNWxMV052YlhBdGIzQmNJaXhjYmx4MFhIUmNkRngwWENKa1pXWmhkV3gwTFhaaGJIVmxYQ0k2SUZ3aWIzWmxjbXhoZVZ3aUxGeHVYSFJjZEZ4MFhIUmNJbVJsWm1GMWJIUXRiV1ZoYm1sdVoxd2lPaUJjSWtGa1pDQjBhR1VnWTNWeWNtVnVkQ0J6ZVcxaWIyeHBlbVZ5SUc5dUlIUnZjQ0J2WmlCdmRHaGxjaUJ6ZVcxaWIyeHBlbVZ5TGx3aUxGeHVYSFJjZEZ4MFhIUmNJbVJ2WTF3aU9pQmNJa052YlhCdmMybDBaU0J2Y0dWeVlYUnBiMjR1SUZSb2FYTWdaR1ZtYVc1bGN5Qm9iM2NnZEdocGN5QnplVzFpYjJ4cGVtVnlJSE5vYjNWc1pDQmlaV2hoZG1VZ2NtVnNZWFJwZG1VZ2RHOGdjM2x0WW05c2FYcGxjbk1nWVhSdmNDQnZjaUJpWld4dmR5QnBkQzVjSWl4Y2JseDBYSFJjZEZ4MFhDSjBlWEJsWENJNklGdGNibHgwWEhSY2RGeDBYSFJjSW0xMWJIUnBjR3g1WENJc1hHNWNkRngwWEhSY2RGeDBYQ0poWkdSY0lpeGNibHgwWEhSY2RGeDBYSFJjSW05MlpYSnNZWGxjSWx4dVhIUmNkRngwWEhSZExGeHVYSFJjZEZ4MFhIUmNJbVY0Y0hKbGMzTnBiMjVjSWpvZ2RISjFaVnh1WEhSY2RGeDBmU3hjYmx4MFhIUmNkRndpYzNSeWIydGxMV1JoYzJoaGNuSmhlVndpT2lCN1hHNWNkRngwWEhSY2RGd2lZM056WENJNklGd2liR2x1WlMxa1lYTm9ZWEp5WVhsY0lpeGNibHgwWEhSY2RGeDBYQ0owZVhCbFhDSTZJRndpYm5WdFltVnljMXdpTEZ4dVhIUmNkRngwWEhSY0ltVjRjSEpsYzNOcGIyNWNJam9nZEhKMVpTeGNibHgwWEhSY2RGeDBYQ0prYjJOY0lqb2dYQ0pCSUhCaGFYSWdiMllnYkdWdVozUm9JSFpoYkhWbGN5QmJZU3hpWFN3Z2QyaGxjbVVnS0dFcElHbHpJSFJvWlNCa1lYTm9JR3hsYm1kMGFDQmhibVFnS0dJcElHbHpJSFJvWlNCbllYQWdiR1Z1WjNSb0lISmxjM0JsWTNScGRtVnNlUzRnVFc5eVpTQjBhR0Z1SUhSM2J5QjJZV3gxWlhNZ1lYSmxJSE4xY0hCdmNuUmxaQ0JtYjNJZ2JXOXlaU0JqYjIxd2JHVjRJSEJoZEhSbGNtNXpMbHdpTEZ4dVhIUmNkRngwWEhSY0ltUmxabUYxYkhRdGRtRnNkV1ZjSWpvZ1hDSnViMjVsWENJc1hHNWNkRngwWEhSY2RGd2laR1ZtWVhWc2RDMXRaV0Z1YVc1blhDSTZJRndpVkdobElHeHBibVVnZDJsc2JDQmlaU0JrY21GM2JpQjNhWFJvYjNWMElHUmhjMmhsY3k1Y0lseHVYSFJjZEZ4MGZWeHVYSFJjZEgwc1hHNWNkRngwWENKdFlYSnJaWEp6WENJNklIdGNibHgwWEhSY2RGd2labWxzWlZ3aU9pQjdYRzVjZEZ4MFhIUmNkRndpWTNOelhDSTZJRndpYldGeWEyVnlMV1pwYkdWY0lpeGNibHgwWEhSY2RGeDBYQ0prYjJOY0lqb2dYQ0pCSUdacGJHVWdkR2hoZENCMGFHbHpJRzFoY210bGNpQnphRzkzY3lCaGRDQmxZV05vSUhCc1lXTmxiV1Z1ZEM0Z1NXWWdibThnWm1sc1pTQnBjeUJuYVhabGJpd2dkR2hsSUcxaGNtdGxjaUIzYVd4c0lITm9iM2NnWVc0Z1pXeHNhWEJ6WlM0Z1FXTmpaWEIwWldRZ1ptOXliV0YwY3pvZ2MzWm5MQ0JxY0djc0lIQnVaeXdnZEdsbVppd2dZVzVrSUhkbFluQXVYQ0lzWEc1Y2RGeDBYSFJjZEZ3aVpHVm1ZWFZzZEMxMllXeDFaVndpT2lCY0ltNXZibVZjSWl4Y2JseDBYSFJjZEZ4MFhDSmtaV1poZFd4MExXMWxZVzVwYm1kY0lqb2dYQ0pCYmlCbGJHeHBjSE5sSUc5eUlHTnBjbU5zWlN3Z2FXWWdkMmxrZEdnZ1pYRjFZV3h6SUdobGFXZG9kQzVjSWl4Y2JseDBYSFJjZEZ4MFhDSjBlWEJsWENJNklGd2lkWEpwWENJc1hHNWNkRngwWEhSY2RGd2laWGh3Y21WemMybHZibHdpT2lCMGNuVmxYRzVjZEZ4MFhIUjlMRnh1WEhSY2RGeDBYQ0p2Y0dGamFYUjVYQ0k2SUh0Y2JseDBYSFJjZEZ4MFhDSmpjM05jSWpvZ1hDSnRZWEpyWlhJdGIzQmhZMmwwZVZ3aUxGeHVYSFJjZEZ4MFhIUmNJbVJ2WTF3aU9pQmNJbFJvWlNCdmRtVnlZV3hzSUc5d1lXTnBkSGtnYjJZZ2RHaGxJRzFoY210bGNpd2dhV1lnYzJWMExDQnZkbVZ5Y21sa1pYTWdZbTkwYUNCMGFHVWdiM0JoWTJsMGVTQnZaaUJpYjNSb0lIUm9aU0JtYVd4c0lHRnVaQ0J6ZEhKdmEyVmNJaXhjYmx4MFhIUmNkRngwWENKa1pXWmhkV3gwTFhaaGJIVmxYQ0k2SURFc1hHNWNkRngwWEhSY2RGd2laR1ZtWVhWc2RDMXRaV0Z1YVc1blhDSTZJRndpVkdobElITjBjbTlyWlMxdmNHRmphWFI1SUdGdVpDQm1hV3hzTFc5d1lXTnBkSGtnZDJsc2JDQmlaU0IxYzJWa1hDSXNYRzVjZEZ4MFhIUmNkRndpZEhsd1pWd2lPaUJjSW1ac2IyRjBYQ0pjYmx4MFhIUmNkSDBzWEc1Y2RGeDBYSFJjSW1acGJHeGNJam9nZTF4dVhIUmNkRngwWEhSY0ltTnpjMXdpT2lCY0ltMWhjbXRsY2kxbWFXeHNYQ0lzWEc1Y2RGeDBYSFJjZEZ3aVpHVm1ZWFZzZEMxMllXeDFaVndpT2lCY0lpTkdSa1pjSWl4Y2JseDBYSFJjZEZ4MFhDSmtiMk5jSWpvZ1hDSlVhR1VnWTI5c2IzSWdiMllnZEdobElHRnlaV0VnYjJZZ2RHaGxJRzFoY210bGNpNWNJaXhjYmx4MFhIUmNkRngwWENKMGVYQmxYQ0k2SUZ3aVkyOXNiM0pjSWl4Y2JseDBYSFJjZEZ4MFhDSmxlSEJ5WlhOemFXOXVYQ0k2SUhSeWRXVmNibHgwWEhSY2RIMHNYRzVjZEZ4MFhIUmNJbUZzYkc5M0xXOTJaWEpzWVhCY0lqb2dlMXh1WEhSY2RGeDBYSFJjSW1OemMxd2lPaUJjSW0xaGNtdGxjaTFoYkd4dmR5MXZkbVZ5YkdGd1hDSXNYRzVjZEZ4MFhIUmNkRndpZEhsd1pWd2lPaUJjSW1KdmIyeGxZVzVjSWl4Y2JseDBYSFJjZEZ4MFhDSmxlSEJ5WlhOemFXOXVYQ0k2SUhSeWRXVXNYRzVjZEZ4MFhIUmNkRndpWkdWbVlYVnNkQzEyWVd4MVpWd2lPaUJtWVd4elpTeGNibHgwWEhSY2RGeDBYQ0prYjJOY0lqb2dYQ0pEYjI1MGNtOXNJSGRvWlhSb1pYSWdiM1psY214aGNIQnBibWNnYldGeWEyVnljeUJoY21VZ2MyaHZkMjRnYjNJZ2FHbGtaR1Z1TGx3aUxGeHVYSFJjZEZ4MFhIUmNJbVJsWm1GMWJIUXRiV1ZoYm1sdVoxd2lPaUJjSWtSdklHNXZkQ0JoYkd4dmR5QnRZWEpyWlhKeklIUnZJRzkyWlhKc1lYQWdkMmwwYUNCbFlXTm9JRzkwYUdWeUlDMGdiM1psY214aGNIQnBibWNnYldGeWEyVnljeUIzYVd4c0lHNXZkQ0JpWlNCemFHOTNiaTVjSWx4dVhIUmNkRngwZlN4Y2JseDBYSFJjZEZ3aWQybGtkR2hjSWpvZ2UxeHVYSFJjZEZ4MFhIUmNJbU56YzF3aU9pQmNJbTFoY210bGNpMTNhV1IwYUZ3aUxGeHVYSFJjZEZ4MFhIUmNJbVJsWm1GMWJIUXRkbUZzZFdWY0lqb2dNVEFzWEc1Y2RGeDBYSFJjZEZ3aVpHOWpYQ0k2SUZ3aVZHaGxJSGRwWkhSb0lHOW1JSFJvWlNCdFlYSnJaWElzSUdsbUlIVnphVzVuSUc5dVpTQnZaaUIwYUdVZ1pHVm1ZWFZzZENCMGVYQmxjeTVjSWl4Y2JseDBYSFJjZEZ4MFhDSjBlWEJsWENJNklGd2labXh2WVhSY0lpeGNibHgwWEhSY2RGeDBYQ0psZUhCeVpYTnphVzl1WENJNklIUnlkV1VzWEc1Y2RGeDBYSFJjZEZ3aVpHVm1ZWFZzZEMxdFpXRnVhVzVuWENJNklGd2lWR2hsSUcxaGNtdGxjaUIzYVdSMGFDQnBjeUF4TUNCd2FYaGxiSE11WENKY2JseDBYSFJjZEgwc1hHNWNkRngwWEhSY0ltWnBiR3d0YjNCaFkybDBlVndpT2lCN1hHNWNkRngwWEhSY2RGd2lZM056WENJNklGd2liV0Z5YTJWeUxXWnBiR3d0YjNCaFkybDBlVndpTEZ4dVhIUmNkRngwWEhSY0ltUnZZMXdpT2lCY0lsUm9aU0JtYVd4c0lHOXdZV05wZEhrZ2IyWWdkR2hsSUcxaGNtdGxjaTVjSWl4Y2JseDBYSFJjZEZ4MFhDSmtaV1poZFd4MExYWmhiSFZsWENJNklERXNYRzVjZEZ4MFhIUmNkRndpWlhod2NtVnpjMmx2Ymx3aU9pQjBjblZsTEZ4dVhIUmNkRngwWEhSY0ltUmxabUYxYkhRdGJXVmhibWx1WjF3aU9pQmNJa052Ykc5eUlHbHpJR1oxYkd4NUlHOXdZWEYxWlM1Y0lpeGNibHgwWEhSY2RGeDBYQ0owZVhCbFhDSTZJRndpWm14dllYUmNJbHh1WEhSY2RGeDBmU3hjYmx4MFhIUmNkRndpWTI5dGNDMXZjRndpT2lCN1hHNWNkRngwWEhSY2RGd2lZM056WENJNklGd2liV0Z5YTJWeUxXTnZiWEF0YjNCY0lpeGNibHgwWEhSY2RGeDBYQ0prWldaaGRXeDBMWFpoYkhWbFhDSTZJRndpYzNKakxXOTJaWEpjSWl4Y2JseDBYSFJjZEZ4MFhDSmtaV1poZFd4MExXMWxZVzVwYm1kY0lqb2dYQ0pCWkdRZ2RHaGxJR04xY25KbGJuUWdjM2x0WW05c2FYcGxjaUJ2YmlCMGIzQWdiMllnYjNSb1pYSWdjM2x0WW05c2FYcGxjaTVjSWl4Y2JseDBYSFJjZEZ4MFhDSmtiMk5jSWpvZ1hDSkRiMjF3YjNOcGRHVWdiM0JsY21GMGFXOXVMaUJVYUdseklHUmxabWx1WlhNZ2FHOTNJSFJvYVhNZ2MzbHRZbTlzYVhwbGNpQnphRzkxYkdRZ1ltVm9ZWFpsSUhKbGJHRjBhWFpsSUhSdklITjViV0p2YkdsNlpYSnpJR0YwYjNBZ2IzSWdZbVZzYjNjZ2FYUXVYQ0lzWEc1Y2RGeDBYSFJjZEZ3aWRIbHdaVndpT2lCYlhHNWNkRngwWEhSY2RGeDBYQ0p0ZFd4MGFYQnNlVndpTEZ4dVhIUmNkRngwWEhSY2RGd2lZV1JrWENJc1hHNWNkRngwWEhSY2RGeDBYQ0p2ZG1WeWJHRjVYQ0pjYmx4MFhIUmNkRngwWFN4Y2JseDBYSFJjZEZ4MFhDSmxlSEJ5WlhOemFXOXVYQ0k2SUhSeWRXVmNibHgwWEhSY2RIMHNYRzVjZEZ4MFhIUmNJbk4wY205clpWd2lPaUI3WEc1Y2RGeDBYSFJjZEZ3aVkzTnpYQ0k2SUZ3aWJXRnlhMlZ5TFd4cGJtVXRZMjlzYjNKY0lpeGNibHgwWEhSY2RGeDBYQ0prYjJOY0lqb2dYQ0pVYUdVZ1kyOXNiM0lnYjJZZ2RHaGxJSE4wY205clpTQmhjbTkxYm1RZ2RHaGxJRzFoY210bGNpNWNJaXhjYmx4MFhIUmNkRngwWENKa1pXWmhkV3gwTFhaaGJIVmxYQ0k2SUZ3aVlteGhZMnRjSWl4Y2JseDBYSFJjZEZ4MFhDSjBlWEJsWENJNklGd2lZMjlzYjNKY0lpeGNibHgwWEhSY2RGeDBYQ0psZUhCeVpYTnphVzl1WENJNklIUnlkV1VzWEc1Y2RGeDBYSFJjZEZ3aVpHVm1ZWFZzZEMxdFpXRnVhVzVuWENJNklGd2lWR2hsSUcxaGNtdGxjaUIzYVd4c0lHSmxJR1J5WVhkdUlIZHBkR2dnWVNCaWJHRmpheUJ2ZFhSc2FXNWxMbHdpWEc1Y2RGeDBYSFI5TEZ4dVhIUmNkRngwWENKemRISnZhMlV0ZDJsa2RHaGNJam9nZTF4dVhIUmNkRngwWEhSY0ltTnpjMXdpT2lCY0ltMWhjbXRsY2kxc2FXNWxMWGRwWkhSb1hDSXNYRzVjZEZ4MFhIUmNkRndpWkdWbVlYVnNkQzEyWVd4MVpWd2lPaUF3TGpVc1hHNWNkRngwWEhSY2RGd2laRzlqWENJNklGd2lWR2hsSUhkcFpIUm9JRzltSUhSb1pTQnpkSEp2YTJVZ1lYSnZkVzVrSUhSb1pTQnRZWEpyWlhJc0lHbHVJSEJwZUdWc2N5NGdWR2hwY3lCcGN5QndiM05wZEdsdmJtVmtJRzl1SUhSb1pTQmliM1Z1WkdGeWVTd2djMjhnYUdsbmFDQjJZV3gxWlhNZ1kyRnVJR052ZG1WeUlIUm9aU0JoY21WaElHbDBjMlZzWmk1Y0lpeGNibHgwWEhSY2RGeDBYQ0owZVhCbFhDSTZJRndpWm14dllYUmNJaXhjYmx4MFhIUmNkRngwWENKbGVIQnlaWE56YVc5dVhDSTZJSFJ5ZFdVc1hHNWNkRngwWEhSY2RGd2laR1ZtWVhWc2RDMXRaV0Z1YVc1blhDSTZJRndpVkdobElHMWhjbXRsY2lCM2FXeHNJR0psSUdSeVlYZHVJSGRwZEdnZ1lXNGdiM1YwYkdsdVpTQnZaaUF1TlNCd2FYaGxiSE1nZDJsa1pTNWNJbHh1WEhSY2RGeDBmU3hjYmx4MFhIUmNkRndpYzNSeWIydGxMVzl3WVdOcGRIbGNJam9nZTF4dVhIUmNkRngwWEhSY0ltTnpjMXdpT2lCY0ltMWhjbXRsY2kxc2FXNWxMVzl3WVdOcGRIbGNJaXhjYmx4MFhIUmNkRngwWENKa1pXWmhkV3gwTFhaaGJIVmxYQ0k2SURFc1hHNWNkRngwWEhSY2RGd2laR1ZtWVhWc2RDMXRaV0Z1YVc1blhDSTZJRndpUTI5c2IzSWdhWE1nWm5Wc2JIa2diM0JoY1hWbExsd2lMRnh1WEhSY2RGeDBYSFJjSW1Sdlkxd2lPaUJjSWxSb1pTQnZjR0ZqYVhSNUlHOW1JR0VnYkdsdVpTNWNJaXhjYmx4MFhIUmNkRngwWENKMGVYQmxYQ0k2SUZ3aVpteHZZWFJjSWl4Y2JseDBYSFJjZEZ4MFhDSmxlSEJ5WlhOemFXOXVYQ0k2SUhSeWRXVmNibHgwWEhSY2RIMHNYRzVjZEZ4MFhIUmNJbkJzWVdObGJXVnVkRndpT2lCN1hHNWNkRngwWEhSY2RGd2lZM056WENJNklGd2liV0Z5YTJWeUxYQnNZV05sYldWdWRGd2lMRnh1WEhSY2RGeDBYSFJjSW5SNWNHVmNJam9nVzF4dVhIUmNkRngwWEhSY2RGd2ljRzlwYm5SY0lseHVYSFJjZEZ4MFhIUmRMRnh1WEhSY2RGeDBYSFJjSW1WNGNISmxjM05wYjI1Y0lqb2dkSEoxWlN4Y2JseDBYSFJjZEZ4MFhDSmtaV1poZFd4MExYWmhiSFZsWENJNklGd2ljRzlwYm5SY0lpeGNibHgwWEhSY2RGeDBYQ0prWldaaGRXeDBMVzFsWVc1cGJtZGNJam9nWENKUWJHRmpaU0J0WVhKclpYSnpJR0YwSUhSb1pTQmpaVzUwWlhJZ2NHOXBiblFnS0dObGJuUnliMmxrS1NCdlppQjBhR1VnWjJWdmJXVjBjbmt1WENJc1hHNWNkRngwWEhSY2RGd2laRzlqWENJNklGd2lRWFIwWlcxd2RDQjBieUJ3YkdGalpTQnRZWEpyWlhKeklHOXVJR0VnY0c5cGJuUXNJR2x1SUhSb1pTQmpaVzUwWlhJZ2IyWWdZU0J3YjJ4NVoyOXVMQ0J2Y2lCcFppQnRZWEpyWlhKekxYQnNZV05sYldWdWREcHNhVzVsTENCMGFHVnVJRzExYkhScGNHeGxJSFJwYldWeklHRnNiMjVuSUdFZ2JHbHVaUzRnSjJsdWRHVnlhVzl5SnlCd2JHRmpaVzFsYm5RZ1kyRnVJR0psSUhWelpXUWdkRzhnWlc1emRYSmxJSFJvWVhRZ2NHOXBiblJ6SUhCc1lXTmxaQ0J2YmlCd2IyeDVaMjl1Y3lCaGNtVWdabTl5WTJWa0lIUnZJR0psSUdsdWMybGtaU0IwYUdVZ2NHOXNlV2R2YmlCcGJuUmxjbWx2Y2k0Z1ZHaGxJQ2QyWlhKMFpYZ3RabWx5YzNRbklHRnVaQ0FuZG1WeWRHVjRMV3hoYzNRbklHOXdkR2x2Ym5NZ1kyRnVJR0psSUhWelpXUWdkRzhnY0d4aFkyVWdiV0Z5YTJWeWN5QmhkQ0IwYUdVZ1ptbHljM1FnYjNJZ2JHRnpkQ0IyWlhKMFpYZ2diMllnYkdsdVpYTWdiM0lnY0c5c2VXZHZibk11WENKY2JseDBYSFJjZEgwc1hHNWNkRngwWEhSY0ltMWhjbXRsY2kxMGVYQmxYQ0k2SUh0Y2JseDBYSFJjZEZ4MFhDSmpjM05jSWpvZ1hDSnRZWEpyWlhJdGRIbHdaVndpTEZ4dVhIUmNkRngwWEhSY0luUjVjR1ZjSWpvZ1cxeHVYSFJjZEZ4MFhIUmNkRndpWld4c2FYQnpaVndpWEc1Y2RGeDBYSFJjZEYwc1hHNWNkRngwWEhSY2RGd2laWGh3Y21WemMybHZibHdpT2lCMGNuVmxMRnh1WEhSY2RGeDBYSFJjSW1SbFptRjFiSFF0ZG1Gc2RXVmNJam9nWENKbGJHeHBjSE5sWENJc1hHNWNkRngwWEhSY2RGd2laR1ZtWVhWc2RDMXRaV0Z1YVc1blhDSTZJRndpVkdobElHMWhjbXRsY2lCemFHRndaU0JwY3lCaGJpQmxiR3hwY0hObExsd2lMRnh1WEhSY2RGeDBYSFJjSW1Sdlkxd2lPaUJjSWxSb1pTQmtaV1poZFd4MElHMWhjbXRsY2kxMGVYQmxMaUJKWmlCaElGTldSeUJtYVd4bElHbHpJRzV2ZENCbmFYWmxiaUJoY3lCMGFHVWdiV0Z5YTJWeUxXWnBiR1VnY0dGeVlXMWxkR1Z5TENCMGFHVWdjbVZ1WkdWeVpYSWdjSEp2ZG1sa1pYTWdaV2wwYUdWeUlHRnVJR0Z5Y205M0lHOXlJR0Z1SUdWc2JHbHdjMlVnS0dFZ1kybHlZMnhsSUdsbUlHaGxhV2RvZENCcGN5QmxjWFZoYkNCMGJ5QjNhV1IwYUNrdVhDSXNYRzVjZEZ4MFhIUmNkRndpYzNSaGRIVnpYQ0k2SUZ3aVpHVndjbVZqWVhSbFpGd2lYRzVjZEZ4MFhIUjlYRzVjZEZ4MGZTeGNibHgwWEhSY0luUmxlSFJjSWpvZ2UxeHVYSFJjZEZ4MFhDSnVZVzFsWENJNklIdGNibHgwWEhSY2RGeDBYQ0pqYzNOY0lqb2dYQ0owWlhoMExXNWhiV1ZjSWl4Y2JseDBYSFJjZEZ4MFhDSjBlWEJsWENJNklGd2ljM1J5YVc1blhDSXNYRzVjZEZ4MFhIUmNkRndpWlhod2NtVnpjMmx2Ymx3aU9pQjBjblZsTEZ4dVhIUmNkRngwWEhSY0luSmxjWFZwY21Wa1hDSTZJSFJ5ZFdVc1hHNWNkRngwWEhSY2RGd2laR1ZtWVhWc2RDMTJZV3gxWlZ3aU9pQmNJbTV2Ym1WY0lpeGNibHgwWEhSY2RGeDBYQ0p6WlhKcFlXeHBlbUYwYVc5dVhDSTZJRndpWTI5dWRHVnVkRndpTEZ4dVhIUmNkRngwWEhSY0ltUnZZMXdpT2lCY0lsWmhiSFZsSUhSdklIVnpaU0JtYjNJZ1lTQjBaWGgwSUd4aFltVnNMaUJFWVhSaElHTnZiSFZ0Ym5NZ1lYSmxJSE53WldOcFptbGxaQ0IxYzJsdVp5QmljbUZqYTJWMGN5QnNhV3RsSUZ0amIyeDFiVzVmYm1GdFpWMHVYQ0lzWEc1Y2RGeDBYSFJjZEZ3aVpHVm1ZWFZzZEMxdFpXRnVhVzVuWENJNklGd2lYQ0pjYmx4MFhIUmNkSDBzWEc1Y2RGeDBYSFJjSW5OcGVtVmNJam9nZTF4dVhIUmNkRngwWEhSY0ltTnpjMXdpT2lCY0luUmxlSFF0YzJsNlpWd2lMRnh1WEhSY2RGeDBYSFJjSW5SNWNHVmNJam9nWENKbWJHOWhkRndpTEZ4dVhIUmNkRngwWEhSY0ltVjRjSEpsYzNOcGIyNWNJam9nZEhKMVpTeGNibHgwWEhSY2RGeDBYQ0prWldaaGRXeDBMWFpoYkhWbFhDSTZJREV3TEZ4dVhIUmNkRngwWEhSY0ltUnZZMXdpT2lCY0lsUmxlSFFnYzJsNlpTQnBiaUJ3YVhobGJITXVYQ0lzWEc1Y2RGeDBYSFJjZEZ3aVpHVm1ZWFZzZEMxdFpXRnVhVzVuWENJNklGd2lSbTl1ZENCemFYcGxJRzltSURFd0lIZHBiR3dnWW1VZ2RYTmxaQ0IwYnlCeVpXNWtaWElnZEdWNGRDNWNJbHh1WEhSY2RGeDBmU3hjYmx4MFhIUmNkRndpWm1sc2JGd2lPaUI3WEc1Y2RGeDBYSFJjZEZ3aVkzTnpYQ0k2SUZ3aWRHVjRkQzFtYVd4c1hDSXNYRzVjZEZ4MFhIUmNkRndpZEhsd1pWd2lPaUJjSW1OdmJHOXlYQ0lzWEc1Y2RGeDBYSFJjZEZ3aVpYaHdjbVZ6YzJsdmJsd2lPaUIwY25WbExGeHVYSFJjZEZ4MFhIUmNJbVJ2WTF3aU9pQmNJbE53WldOcFptbGxjeUIwYUdVZ1kyOXNiM0lnWm05eUlIUm9aU0IwWlhoMExsd2lMRnh1WEhSY2RGeDBYSFJjSW1SbFptRjFiSFF0ZG1Gc2RXVmNJam9nWENKaWJHRmphMXdpTEZ4dVhIUmNkRngwWEhSY0ltUmxabUYxYkhRdGJXVmhibWx1WjF3aU9pQmNJbFJvWlNCMFpYaDBJSGRwYkd3Z1ltVWdjbVZ1WkdWeVpXUWdZbXhoWTJzdVhDSmNibHgwWEhSY2RIMHNYRzVjZEZ4MFhIUmNJbTl3WVdOcGRIbGNJam9nZTF4dVhIUmNkRngwWEhSY0ltTnpjMXdpT2lCY0luUmxlSFF0YjNCaFkybDBlVndpTEZ4dVhIUmNkRngwWEhSY0ltUnZZMXdpT2lCY0lrRWdiblZ0WW1WeUlHWnliMjBnTUNCMGJ5QXhJSE53WldOcFpubHBibWNnZEdobElHOXdZV05wZEhrZ1ptOXlJSFJvWlNCMFpYaDBMbHdpTEZ4dVhIUmNkRngwWEhSY0ltUmxabUYxYkhRdGRtRnNkV1ZjSWpvZ01TeGNibHgwWEhSY2RGeDBYQ0prWldaaGRXeDBMVzFsWVc1cGJtZGNJam9nWENKR2RXeHNlU0J2Y0dGeGRXVmNJaXhjYmx4MFhIUmNkRngwWENKbGVIQnlaWE56YVc5dVhDSTZJSFJ5ZFdVc1hHNWNkRngwWEhSY2RGd2lkSGx3WlZ3aU9pQmNJbVpzYjJGMFhDSmNibHgwWEhSY2RIMWNibHgwWEhSOVhHNWNkSDBzWEc1Y2RGd2lZMjlzYjNKelhDSTZJSHRjYmx4MFhIUmNJbUZzYVdObFlteDFaVndpT2lCYlhHNWNkRngwWEhReU5EQXNYRzVjZEZ4MFhIUXlORGdzWEc1Y2RGeDBYSFF5TlRWY2JseDBYSFJkTEZ4dVhIUmNkRndpWVc1MGFYRjFaWGRvYVhSbFhDSTZJRnRjYmx4MFhIUmNkREkxTUN4Y2JseDBYSFJjZERJek5TeGNibHgwWEhSY2RESXhOVnh1WEhSY2RGMHNYRzVjZEZ4MFhDSmhjWFZoWENJNklGdGNibHgwWEhSY2REQXNYRzVjZEZ4MFhIUXlOVFVzWEc1Y2RGeDBYSFF5TlRWY2JseDBYSFJkTEZ4dVhIUmNkRndpWVhGMVlXMWhjbWx1WlZ3aU9pQmJYRzVjZEZ4MFhIUXhNamNzWEc1Y2RGeDBYSFF5TlRVc1hHNWNkRngwWEhReU1USmNibHgwWEhSZExGeHVYSFJjZEZ3aVlYcDFjbVZjSWpvZ1cxeHVYSFJjZEZ4ME1qUXdMRnh1WEhSY2RGeDBNalUxTEZ4dVhIUmNkRngwTWpVMVhHNWNkRngwWFN4Y2JseDBYSFJjSW1KbGFXZGxYQ0k2SUZ0Y2JseDBYSFJjZERJME5TeGNibHgwWEhSY2RESTBOU3hjYmx4MFhIUmNkREl5TUZ4dVhIUmNkRjBzWEc1Y2RGeDBYQ0ppYVhOeGRXVmNJam9nVzF4dVhIUmNkRngwTWpVMUxGeHVYSFJjZEZ4ME1qSTRMRnh1WEhSY2RGeDBNVGsyWEc1Y2RGeDBYU3hjYmx4MFhIUmNJbUpzWVdOclhDSTZJRnRjYmx4MFhIUmNkREFzWEc1Y2RGeDBYSFF3TEZ4dVhIUmNkRngwTUZ4dVhIUmNkRjBzWEc1Y2RGeDBYQ0ppYkdGdVkyaGxaR0ZzYlc5dVpGd2lPaUJiWEc1Y2RGeDBYSFF5TlRVc1hHNWNkRngwWEhReU16VXNYRzVjZEZ4MFhIUXlNRFZjYmx4MFhIUmRMRnh1WEhSY2RGd2lZbXgxWlZ3aU9pQmJYRzVjZEZ4MFhIUXdMRnh1WEhSY2RGeDBNQ3hjYmx4MFhIUmNkREkxTlZ4dVhIUmNkRjBzWEc1Y2RGeDBYQ0ppYkhWbGRtbHZiR1YwWENJNklGdGNibHgwWEhSY2RERXpPQ3hjYmx4MFhIUmNkRFF6TEZ4dVhIUmNkRngwTWpJMlhHNWNkRngwWFN4Y2JseDBYSFJjSW1KeWIzZHVYQ0k2SUZ0Y2JseDBYSFJjZERFMk5TeGNibHgwWEhSY2REUXlMRnh1WEhSY2RGeDBOREpjYmx4MFhIUmRMRnh1WEhSY2RGd2lZblZ5YkhsM2IyOWtYQ0k2SUZ0Y2JseDBYSFJjZERJeU1peGNibHgwWEhSY2RERTROQ3hjYmx4MFhIUmNkREV6TlZ4dVhIUmNkRjBzWEc1Y2RGeDBYQ0pqWVdSbGRHSnNkV1ZjSWpvZ1cxeHVYSFJjZEZ4ME9UVXNYRzVjZEZ4MFhIUXhOVGdzWEc1Y2RGeDBYSFF4TmpCY2JseDBYSFJkTEZ4dVhIUmNkRndpWTJoaGNuUnlaWFZ6WlZ3aU9pQmJYRzVjZEZ4MFhIUXhNamNzWEc1Y2RGeDBYSFF5TlRVc1hHNWNkRngwWEhRd1hHNWNkRngwWFN4Y2JseDBYSFJjSW1Ob2IyTnZiR0YwWlZ3aU9pQmJYRzVjZEZ4MFhIUXlNVEFzWEc1Y2RGeDBYSFF4TURVc1hHNWNkRngwWEhRek1GeHVYSFJjZEYwc1hHNWNkRngwWENKamIzSmhiRndpT2lCYlhHNWNkRngwWEhReU5UVXNYRzVjZEZ4MFhIUXhNamNzWEc1Y2RGeDBYSFE0TUZ4dVhIUmNkRjBzWEc1Y2RGeDBYQ0pqYjNKdVpteHZkMlZ5WW14MVpWd2lPaUJiWEc1Y2RGeDBYSFF4TURBc1hHNWNkRngwWEhReE5Ea3NYRzVjZEZ4MFhIUXlNemRjYmx4MFhIUmRMRnh1WEhSY2RGd2lZMjl5Ym5OcGJHdGNJam9nVzF4dVhIUmNkRngwTWpVMUxGeHVYSFJjZEZ4ME1qUTRMRnh1WEhSY2RGeDBNakl3WEc1Y2RGeDBYU3hjYmx4MFhIUmNJbU55YVcxemIyNWNJam9nVzF4dVhIUmNkRngwTWpJd0xGeHVYSFJjZEZ4ME1qQXNYRzVjZEZ4MFhIUTJNRnh1WEhSY2RGMHNYRzVjZEZ4MFhDSmplV0Z1WENJNklGdGNibHgwWEhSY2REQXNYRzVjZEZ4MFhIUXlOVFVzWEc1Y2RGeDBYSFF5TlRWY2JseDBYSFJkTEZ4dVhIUmNkRndpWkdGeWEySnNkV1ZjSWpvZ1cxeHVYSFJjZEZ4ME1DeGNibHgwWEhSY2REQXNYRzVjZEZ4MFhIUXhNemxjYmx4MFhIUmRMRnh1WEhSY2RGd2laR0Z5YTJONVlXNWNJam9nVzF4dVhIUmNkRngwTUN4Y2JseDBYSFJjZERFek9TeGNibHgwWEhSY2RERXpPVnh1WEhSY2RGMHNYRzVjZEZ4MFhDSmtZWEpyWjI5c1pHVnVjbTlrWENJNklGdGNibHgwWEhSY2RERTROQ3hjYmx4MFhIUmNkREV6TkN4Y2JseDBYSFJjZERFeFhHNWNkRngwWFN4Y2JseDBYSFJjSW1SaGNtdG5jbUY1WENJNklGdGNibHgwWEhSY2RERTJPU3hjYmx4MFhIUmNkREUyT1N4Y2JseDBYSFJjZERFMk9WeHVYSFJjZEYwc1hHNWNkRngwWENKa1lYSnJaM0psWlc1Y0lqb2dXMXh1WEhSY2RGeDBNQ3hjYmx4MFhIUmNkREV3TUN4Y2JseDBYSFJjZERCY2JseDBYSFJkTEZ4dVhIUmNkRndpWkdGeWEyZHlaWGxjSWpvZ1cxeHVYSFJjZEZ4ME1UWTVMRnh1WEhSY2RGeDBNVFk1TEZ4dVhIUmNkRngwTVRZNVhHNWNkRngwWFN4Y2JseDBYSFJjSW1SaGNtdHJhR0ZyYVZ3aU9pQmJYRzVjZEZ4MFhIUXhPRGtzWEc1Y2RGeDBYSFF4T0RNc1hHNWNkRngwWEhReE1EZGNibHgwWEhSZExGeHVYSFJjZEZ3aVpHRnlhMjFoWjJWdWRHRmNJam9nVzF4dVhIUmNkRngwTVRNNUxGeHVYSFJjZEZ4ME1DeGNibHgwWEhSY2RERXpPVnh1WEhSY2RGMHNYRzVjZEZ4MFhDSmtZWEpyYjJ4cGRtVm5jbVZsYmx3aU9pQmJYRzVjZEZ4MFhIUTROU3hjYmx4MFhIUmNkREV3Tnl4Y2JseDBYSFJjZERRM1hHNWNkRngwWFN4Y2JseDBYSFJjSW1SaGNtdHZjbUZ1WjJWY0lqb2dXMXh1WEhSY2RGeDBNalUxTEZ4dVhIUmNkRngwTVRRd0xGeHVYSFJjZEZ4ME1GeHVYSFJjZEYwc1hHNWNkRngwWENKa1lYSnJiM0pqYUdsa1hDSTZJRnRjYmx4MFhIUmNkREUxTXl4Y2JseDBYSFJjZERVd0xGeHVYSFJjZEZ4ME1qQTBYRzVjZEZ4MFhTeGNibHgwWEhSY0ltUmhjbXR5WldSY0lqb2dXMXh1WEhSY2RGeDBNVE01TEZ4dVhIUmNkRngwTUN4Y2JseDBYSFJjZERCY2JseDBYSFJkTEZ4dVhIUmNkRndpWkdGeWEzTmhiRzF2Ymx3aU9pQmJYRzVjZEZ4MFhIUXlNek1zWEc1Y2RGeDBYSFF4TlRBc1hHNWNkRngwWEhReE1qSmNibHgwWEhSZExGeHVYSFJjZEZ3aVpHRnlhM05sWVdkeVpXVnVYQ0k2SUZ0Y2JseDBYSFJjZERFME15eGNibHgwWEhSY2RERTRPQ3hjYmx4MFhIUmNkREUwTTF4dVhIUmNkRjBzWEc1Y2RGeDBYQ0prWVhKcmMyeGhkR1ZpYkhWbFhDSTZJRnRjYmx4MFhIUmNkRGN5TEZ4dVhIUmNkRngwTmpFc1hHNWNkRngwWEhReE16bGNibHgwWEhSZExGeHVYSFJjZEZ3aVpHRnlhM05zWVhSbFozSmxlVndpT2lCYlhHNWNkRngwWEhRME55eGNibHgwWEhSY2REYzVMRnh1WEhSY2RGeDBOemxjYmx4MFhIUmRMRnh1WEhSY2RGd2laR0Z5YTNSMWNuRjFiMmx6WlZ3aU9pQmJYRzVjZEZ4MFhIUXdMRnh1WEhSY2RGeDBNakEyTEZ4dVhIUmNkRngwTWpBNVhHNWNkRngwWFN4Y2JseDBYSFJjSW1SaGNtdDJhVzlzWlhSY0lqb2dXMXh1WEhSY2RGeDBNVFE0TEZ4dVhIUmNkRngwTUN4Y2JseDBYSFJjZERJeE1WeHVYSFJjZEYwc1hHNWNkRngwWENKa1pXVndjR2x1YTF3aU9pQmJYRzVjZEZ4MFhIUXlOVFVzWEc1Y2RGeDBYSFF5TUN4Y2JseDBYSFJjZERFME4xeHVYSFJjZEYwc1hHNWNkRngwWENKa1pXVndjMnQ1WW14MVpWd2lPaUJiWEc1Y2RGeDBYSFF3TEZ4dVhIUmNkRngwTVRreExGeHVYSFJjZEZ4ME1qVTFYRzVjZEZ4MFhTeGNibHgwWEhSY0ltUnBiV2R5WVhsY0lqb2dXMXh1WEhSY2RGeDBNVEExTEZ4dVhIUmNkRngwTVRBMUxGeHVYSFJjZEZ4ME1UQTFYRzVjZEZ4MFhTeGNibHgwWEhSY0ltUnBiV2R5WlhsY0lqb2dXMXh1WEhSY2RGeDBNVEExTEZ4dVhIUmNkRngwTVRBMUxGeHVYSFJjZEZ4ME1UQTFYRzVjZEZ4MFhTeGNibHgwWEhSY0ltUnZaR2RsY21Kc2RXVmNJam9nVzF4dVhIUmNkRngwTXpBc1hHNWNkRngwWEhReE5EUXNYRzVjZEZ4MFhIUXlOVFZjYmx4MFhIUmRMRnh1WEhSY2RGd2labWx5WldKeWFXTnJYQ0k2SUZ0Y2JseDBYSFJjZERFM09DeGNibHgwWEhSY2RETTBMRnh1WEhSY2RGeDBNelJjYmx4MFhIUmRMRnh1WEhSY2RGd2labXh2Y21Gc2QyaHBkR1ZjSWpvZ1cxeHVYSFJjZEZ4ME1qVTFMRnh1WEhSY2RGeDBNalV3TEZ4dVhIUmNkRngwTWpRd1hHNWNkRngwWFN4Y2JseDBYSFJjSW1admNtVnpkR2R5WldWdVhDSTZJRnRjYmx4MFhIUmNkRE0wTEZ4dVhIUmNkRngwTVRNNUxGeHVYSFJjZEZ4ME16UmNibHgwWEhSZExGeHVYSFJjZEZ3aVpuVmphSE5wWVZ3aU9pQmJYRzVjZEZ4MFhIUXlOVFVzWEc1Y2RGeDBYSFF3TEZ4dVhIUmNkRngwTWpVMVhHNWNkRngwWFN4Y2JseDBYSFJjSW1kaGFXNXpZbTl5YjF3aU9pQmJYRzVjZEZ4MFhIUXlNakFzWEc1Y2RGeDBYSFF5TWpBc1hHNWNkRngwWEhReU1qQmNibHgwWEhSZExGeHVYSFJjZEZ3aVoyaHZjM1IzYUdsMFpWd2lPaUJiWEc1Y2RGeDBYSFF5TkRnc1hHNWNkRngwWEhReU5EZ3NYRzVjZEZ4MFhIUXlOVFZjYmx4MFhIUmRMRnh1WEhSY2RGd2laMjlzWkZ3aU9pQmJYRzVjZEZ4MFhIUXlOVFVzWEc1Y2RGeDBYSFF5TVRVc1hHNWNkRngwWEhRd1hHNWNkRngwWFN4Y2JseDBYSFJjSW1kdmJHUmxibkp2WkZ3aU9pQmJYRzVjZEZ4MFhIUXlNVGdzWEc1Y2RGeDBYSFF4TmpVc1hHNWNkRngwWEhRek1seHVYSFJjZEYwc1hHNWNkRngwWENKbmNtRjVYQ0k2SUZ0Y2JseDBYSFJjZERFeU9DeGNibHgwWEhSY2RERXlPQ3hjYmx4MFhIUmNkREV5T0Z4dVhIUmNkRjBzWEc1Y2RGeDBYQ0puY21WNVhDSTZJRnRjYmx4MFhIUmNkREV5T0N4Y2JseDBYSFJjZERFeU9DeGNibHgwWEhSY2RERXlPRnh1WEhSY2RGMHNYRzVjZEZ4MFhDSm5jbVZsYmx3aU9pQmJYRzVjZEZ4MFhIUXdMRnh1WEhSY2RGeDBNVEk0TEZ4dVhIUmNkRngwTUZ4dVhIUmNkRjBzWEc1Y2RGeDBYQ0puY21WbGJubGxiR3h2ZDF3aU9pQmJYRzVjZEZ4MFhIUXhOek1zWEc1Y2RGeDBYSFF5TlRVc1hHNWNkRngwWEhRME4xeHVYSFJjZEYwc1hHNWNkRngwWENKb2IyNWxlV1JsZDF3aU9pQmJYRzVjZEZ4MFhIUXlOREFzWEc1Y2RGeDBYSFF5TlRVc1hHNWNkRngwWEhReU5EQmNibHgwWEhSZExGeHVYSFJjZEZ3aWFHOTBjR2x1YTF3aU9pQmJYRzVjZEZ4MFhIUXlOVFVzWEc1Y2RGeDBYSFF4TURVc1hHNWNkRngwWEhReE9EQmNibHgwWEhSZExGeHVYSFJjZEZ3aWFXNWthV0Z1Y21Wa1hDSTZJRnRjYmx4MFhIUmNkREl3TlN4Y2JseDBYSFJjZERreUxGeHVYSFJjZEZ4ME9USmNibHgwWEhSZExGeHVYSFJjZEZ3aWFXNWthV2R2WENJNklGdGNibHgwWEhSY2REYzFMRnh1WEhSY2RGeDBNQ3hjYmx4MFhIUmNkREV6TUZ4dVhIUmNkRjBzWEc1Y2RGeDBYQ0pwZG05eWVWd2lPaUJiWEc1Y2RGeDBYSFF5TlRVc1hHNWNkRngwWEhReU5UVXNYRzVjZEZ4MFhIUXlOREJjYmx4MFhIUmRMRnh1WEhSY2RGd2lhMmhoYTJsY0lqb2dXMXh1WEhSY2RGeDBNalF3TEZ4dVhIUmNkRngwTWpNd0xGeHVYSFJjZEZ4ME1UUXdYRzVjZEZ4MFhTeGNibHgwWEhSY0lteGhkbVZ1WkdWeVhDSTZJRnRjYmx4MFhIUmNkREl6TUN4Y2JseDBYSFJjZERJek1DeGNibHgwWEhSY2RESTFNRnh1WEhSY2RGMHNYRzVjZEZ4MFhDSnNZWFpsYm1SbGNtSnNkWE5vWENJNklGdGNibHgwWEhSY2RESTFOU3hjYmx4MFhIUmNkREkwTUN4Y2JseDBYSFJjZERJME5WeHVYSFJjZEYwc1hHNWNkRngwWENKc1lYZHVaM0psWlc1Y0lqb2dXMXh1WEhSY2RGeDBNVEkwTEZ4dVhIUmNkRngwTWpVeUxGeHVYSFJjZEZ4ME1GeHVYSFJjZEYwc1hHNWNkRngwWENKc1pXMXZibU5vYVdabWIyNWNJam9nVzF4dVhIUmNkRngwTWpVMUxGeHVYSFJjZEZ4ME1qVXdMRnh1WEhSY2RGeDBNakExWEc1Y2RGeDBYU3hjYmx4MFhIUmNJbXhwWjJoMFlteDFaVndpT2lCYlhHNWNkRngwWEhReE56TXNYRzVjZEZ4MFhIUXlNVFlzWEc1Y2RGeDBYSFF5TXpCY2JseDBYSFJkTEZ4dVhIUmNkRndpYkdsbmFIUmpiM0poYkZ3aU9pQmJYRzVjZEZ4MFhIUXlOREFzWEc1Y2RGeDBYSFF4TWpnc1hHNWNkRngwWEhReE1qaGNibHgwWEhSZExGeHVYSFJjZEZ3aWJHbG5hSFJqZVdGdVhDSTZJRnRjYmx4MFhIUmNkREl5TkN4Y2JseDBYSFJjZERJMU5TeGNibHgwWEhSY2RESTFOVnh1WEhSY2RGMHNYRzVjZEZ4MFhDSnNhV2RvZEdkdmJHUmxibkp2WkhsbGJHeHZkMXdpT2lCYlhHNWNkRngwWEhReU5UQXNYRzVjZEZ4MFhIUXlOVEFzWEc1Y2RGeDBYSFF5TVRCY2JseDBYSFJkTEZ4dVhIUmNkRndpYkdsbmFIUm5jbUY1WENJNklGdGNibHgwWEhSY2RESXhNU3hjYmx4MFhIUmNkREl4TVN4Y2JseDBYSFJjZERJeE1WeHVYSFJjZEYwc1hHNWNkRngwWENKc2FXZG9kR2R5WldWdVhDSTZJRnRjYmx4MFhIUmNkREUwTkN4Y2JseDBYSFJjZERJek9DeGNibHgwWEhSY2RERTBORnh1WEhSY2RGMHNYRzVjZEZ4MFhDSnNhV2RvZEdkeVpYbGNJam9nVzF4dVhIUmNkRngwTWpFeExGeHVYSFJjZEZ4ME1qRXhMRnh1WEhSY2RGeDBNakV4WEc1Y2RGeDBYU3hjYmx4MFhIUmNJbXhwWjJoMGNHbHVhMXdpT2lCYlhHNWNkRngwWEhReU5UVXNYRzVjZEZ4MFhIUXhPRElzWEc1Y2RGeDBYSFF4T1ROY2JseDBYSFJkTEZ4dVhIUmNkRndpYkdsbmFIUnpZV3h0YjI1Y0lqb2dXMXh1WEhSY2RGeDBNalUxTEZ4dVhIUmNkRngwTVRZd0xGeHVYSFJjZEZ4ME1USXlYRzVjZEZ4MFhTeGNibHgwWEhSY0lteHBaMmgwYzJWaFozSmxaVzVjSWpvZ1cxeHVYSFJjZEZ4ME16SXNYRzVjZEZ4MFhIUXhOemdzWEc1Y2RGeDBYSFF4TnpCY2JseDBYSFJkTEZ4dVhIUmNkRndpYkdsbmFIUnphM2xpYkhWbFhDSTZJRnRjYmx4MFhIUmNkREV6TlN4Y2JseDBYSFJjZERJd05peGNibHgwWEhSY2RESTFNRnh1WEhSY2RGMHNYRzVjZEZ4MFhDSnNhV2RvZEhOc1lYUmxaM0poZVZ3aU9pQmJYRzVjZEZ4MFhIUXhNVGtzWEc1Y2RGeDBYSFF4TXpZc1hHNWNkRngwWEhReE5UTmNibHgwWEhSZExGeHVYSFJjZEZ3aWJHbG5hSFJ6YkdGMFpXZHlaWGxjSWpvZ1cxeHVYSFJjZEZ4ME1URTVMRnh1WEhSY2RGeDBNVE0yTEZ4dVhIUmNkRngwTVRVelhHNWNkRngwWFN4Y2JseDBYSFJjSW14cFoyaDBjM1JsWld4aWJIVmxYQ0k2SUZ0Y2JseDBYSFJjZERFM05peGNibHgwWEhSY2RERTVOaXhjYmx4MFhIUmNkREl5TWx4dVhIUmNkRjBzWEc1Y2RGeDBYQ0pzYVdkb2RIbGxiR3h2ZDF3aU9pQmJYRzVjZEZ4MFhIUXlOVFVzWEc1Y2RGeDBYSFF5TlRVc1hHNWNkRngwWEhReU1qUmNibHgwWEhSZExGeHVYSFJjZEZ3aWJHbHRaVndpT2lCYlhHNWNkRngwWEhRd0xGeHVYSFJjZEZ4ME1qVTFMRnh1WEhSY2RGeDBNRnh1WEhSY2RGMHNYRzVjZEZ4MFhDSnNhVzFsWjNKbFpXNWNJam9nVzF4dVhIUmNkRngwTlRBc1hHNWNkRngwWEhReU1EVXNYRzVjZEZ4MFhIUTFNRnh1WEhSY2RGMHNYRzVjZEZ4MFhDSnNhVzVsYmx3aU9pQmJYRzVjZEZ4MFhIUXlOVEFzWEc1Y2RGeDBYSFF5TkRBc1hHNWNkRngwWEhReU16QmNibHgwWEhSZExGeHVYSFJjZEZ3aWJXRm5aVzUwWVZ3aU9pQmJYRzVjZEZ4MFhIUXlOVFVzWEc1Y2RGeDBYSFF3TEZ4dVhIUmNkRngwTWpVMVhHNWNkRngwWFN4Y2JseDBYSFJjSW0xaGNtOXZibHdpT2lCYlhHNWNkRngwWEhReE1qZ3NYRzVjZEZ4MFhIUXdMRnh1WEhSY2RGeDBNRnh1WEhSY2RGMHNYRzVjZEZ4MFhDSnRaV1JwZFcxaGNYVmhiV0Z5YVc1bFhDSTZJRnRjYmx4MFhIUmNkREV3TWl4Y2JseDBYSFJjZERJd05TeGNibHgwWEhSY2RERTNNRnh1WEhSY2RGMHNYRzVjZEZ4MFhDSnRaV1JwZFcxaWJIVmxYQ0k2SUZ0Y2JseDBYSFJjZERBc1hHNWNkRngwWEhRd0xGeHVYSFJjZEZ4ME1qQTFYRzVjZEZ4MFhTeGNibHgwWEhSY0ltMWxaR2wxYlc5eVkyaHBaRndpT2lCYlhHNWNkRngwWEhReE9EWXNYRzVjZEZ4MFhIUTROU3hjYmx4MFhIUmNkREl4TVZ4dVhIUmNkRjBzWEc1Y2RGeDBYQ0p0WldScGRXMXdkWEp3YkdWY0lqb2dXMXh1WEhSY2RGeDBNVFEzTEZ4dVhIUmNkRngwTVRFeUxGeHVYSFJjZEZ4ME1qRTVYRzVjZEZ4MFhTeGNibHgwWEhSY0ltMWxaR2wxYlhObFlXZHlaV1Z1WENJNklGdGNibHgwWEhSY2REWXdMRnh1WEhSY2RGeDBNVGM1TEZ4dVhIUmNkRngwTVRFelhHNWNkRngwWFN4Y2JseDBYSFJjSW0xbFpHbDFiWE5zWVhSbFlteDFaVndpT2lCYlhHNWNkRngwWEhReE1qTXNYRzVjZEZ4MFhIUXhNRFFzWEc1Y2RGeDBYSFF5TXpoY2JseDBYSFJkTEZ4dVhIUmNkRndpYldWa2FYVnRjM0J5YVc1blozSmxaVzVjSWpvZ1cxeHVYSFJjZEZ4ME1DeGNibHgwWEhSY2RESTFNQ3hjYmx4MFhIUmNkREUxTkZ4dVhIUmNkRjBzWEc1Y2RGeDBYQ0p0WldScGRXMTBkWEp4ZFc5cGMyVmNJam9nVzF4dVhIUmNkRngwTnpJc1hHNWNkRngwWEhReU1Ea3NYRzVjZEZ4MFhIUXlNRFJjYmx4MFhIUmRMRnh1WEhSY2RGd2liV1ZrYVhWdGRtbHZiR1YwY21Wa1hDSTZJRnRjYmx4MFhIUmNkREU1T1N4Y2JseDBYSFJjZERJeExGeHVYSFJjZEZ4ME1UTXpYRzVjZEZ4MFhTeGNibHgwWEhSY0ltMXBaRzVwWjJoMFlteDFaVndpT2lCYlhHNWNkRngwWEhReU5TeGNibHgwWEhSY2RESTFMRnh1WEhSY2RGeDBNVEV5WEc1Y2RGeDBYU3hjYmx4MFhIUmNJbTFwYm5SamNtVmhiVndpT2lCYlhHNWNkRngwWEhReU5EVXNYRzVjZEZ4MFhIUXlOVFVzWEc1Y2RGeDBYSFF5TlRCY2JseDBYSFJkTEZ4dVhIUmNkRndpYldsemRIbHliM05sWENJNklGdGNibHgwWEhSY2RESTFOU3hjYmx4MFhIUmNkREl5T0N4Y2JseDBYSFJjZERJeU5WeHVYSFJjZEYwc1hHNWNkRngwWENKdGIyTmpZWE5wYmx3aU9pQmJYRzVjZEZ4MFhIUXlOVFVzWEc1Y2RGeDBYSFF5TWpnc1hHNWNkRngwWEhReE9ERmNibHgwWEhSZExGeHVYSFJjZEZ3aWJtRjJZV3B2ZDJocGRHVmNJam9nVzF4dVhIUmNkRngwTWpVMUxGeHVYSFJjZEZ4ME1qSXlMRnh1WEhSY2RGeDBNVGN6WEc1Y2RGeDBYU3hjYmx4MFhIUmNJbTVoZG5sY0lqb2dXMXh1WEhSY2RGeDBNQ3hjYmx4MFhIUmNkREFzWEc1Y2RGeDBYSFF4TWpoY2JseDBYSFJkTEZ4dVhIUmNkRndpYjJ4a2JHRmpaVndpT2lCYlhHNWNkRngwWEhReU5UTXNYRzVjZEZ4MFhIUXlORFVzWEc1Y2RGeDBYSFF5TXpCY2JseDBYSFJkTEZ4dVhIUmNkRndpYjJ4cGRtVmNJam9nVzF4dVhIUmNkRngwTVRJNExGeHVYSFJjZEZ4ME1USTRMRnh1WEhSY2RGeDBNRnh1WEhSY2RGMHNYRzVjZEZ4MFhDSnZiR2wyWldSeVlXSmNJam9nVzF4dVhIUmNkRngwTVRBM0xGeHVYSFJjZEZ4ME1UUXlMRnh1WEhSY2RGeDBNelZjYmx4MFhIUmRMRnh1WEhSY2RGd2liM0poYm1kbFhDSTZJRnRjYmx4MFhIUmNkREkxTlN4Y2JseDBYSFJjZERFMk5TeGNibHgwWEhSY2REQmNibHgwWEhSZExGeHVYSFJjZEZ3aWIzSmhibWRsY21Wa1hDSTZJRnRjYmx4MFhIUmNkREkxTlN4Y2JseDBYSFJjZERZNUxGeHVYSFJjZEZ4ME1GeHVYSFJjZEYwc1hHNWNkRngwWENKdmNtTm9hV1JjSWpvZ1cxeHVYSFJjZEZ4ME1qRTRMRnh1WEhSY2RGeDBNVEV5TEZ4dVhIUmNkRngwTWpFMFhHNWNkRngwWFN4Y2JseDBYSFJjSW5CaGJHVm5iMnhrWlc1eWIyUmNJam9nVzF4dVhIUmNkRngwTWpNNExGeHVYSFJjZEZ4ME1qTXlMRnh1WEhSY2RGeDBNVGN3WEc1Y2RGeDBYU3hjYmx4MFhIUmNJbkJoYkdWbmNtVmxibHdpT2lCYlhHNWNkRngwWEhReE5USXNYRzVjZEZ4MFhIUXlOVEVzWEc1Y2RGeDBYSFF4TlRKY2JseDBYSFJkTEZ4dVhIUmNkRndpY0dGc1pYUjFjbkYxYjJselpWd2lPaUJiWEc1Y2RGeDBYSFF4TnpVc1hHNWNkRngwWEhReU16Z3NYRzVjZEZ4MFhIUXlNemhjYmx4MFhIUmRMRnh1WEhSY2RGd2ljR0ZzWlhacGIyeGxkSEpsWkZ3aU9pQmJYRzVjZEZ4MFhIUXlNVGtzWEc1Y2RGeDBYSFF4TVRJc1hHNWNkRngwWEhReE5EZGNibHgwWEhSZExGeHVYSFJjZEZ3aWNHRndZWGxoZDJocGNGd2lPaUJiWEc1Y2RGeDBYSFF5TlRVc1hHNWNkRngwWEhReU16a3NYRzVjZEZ4MFhIUXlNVE5jYmx4MFhIUmRMRnh1WEhSY2RGd2ljR1ZoWTJod2RXWm1YQ0k2SUZ0Y2JseDBYSFJjZERJMU5TeGNibHgwWEhSY2RESXhPQ3hjYmx4MFhIUmNkREU0TlZ4dVhIUmNkRjBzWEc1Y2RGeDBYQ0p3WlhKMVhDSTZJRnRjYmx4MFhIUmNkREl3TlN4Y2JseDBYSFJjZERFek15eGNibHgwWEhSY2REWXpYRzVjZEZ4MFhTeGNibHgwWEhSY0luQnBibXRjSWpvZ1cxeHVYSFJjZEZ4ME1qVTFMRnh1WEhSY2RGeDBNVGt5TEZ4dVhIUmNkRngwTWpBelhHNWNkRngwWFN4Y2JseDBYSFJjSW5Cc2RXMWNJam9nVzF4dVhIUmNkRngwTWpJeExGeHVYSFJjZEZ4ME1UWXdMRnh1WEhSY2RGeDBNakl4WEc1Y2RGeDBYU3hjYmx4MFhIUmNJbkJ2ZDJSbGNtSnNkV1ZjSWpvZ1cxeHVYSFJjZEZ4ME1UYzJMRnh1WEhSY2RGeDBNakkwTEZ4dVhIUmNkRngwTWpNd1hHNWNkRngwWFN4Y2JseDBYSFJjSW5CMWNuQnNaVndpT2lCYlhHNWNkRngwWEhReE1qZ3NYRzVjZEZ4MFhIUXdMRnh1WEhSY2RGeDBNVEk0WEc1Y2RGeDBYU3hjYmx4MFhIUmNJbkpsWkZ3aU9pQmJYRzVjZEZ4MFhIUXlOVFVzWEc1Y2RGeDBYSFF3TEZ4dVhIUmNkRngwTUZ4dVhIUmNkRjBzWEc1Y2RGeDBYQ0p5YjNONVluSnZkMjVjSWpvZ1cxeHVYSFJjZEZ4ME1UZzRMRnh1WEhSY2RGeDBNVFF6TEZ4dVhIUmNkRngwTVRRelhHNWNkRngwWFN4Y2JseDBYSFJjSW5KdmVXRnNZbXgxWlZ3aU9pQmJYRzVjZEZ4MFhIUTJOU3hjYmx4MFhIUmNkREV3TlN4Y2JseDBYSFJjZERJeU5WeHVYSFJjZEYwc1hHNWNkRngwWENKellXUmtiR1ZpY205M2Jsd2lPaUJiWEc1Y2RGeDBYSFF4TXprc1hHNWNkRngwWEhRMk9TeGNibHgwWEhSY2RERTVYRzVjZEZ4MFhTeGNibHgwWEhSY0luTmhiRzF2Ymx3aU9pQmJYRzVjZEZ4MFhIUXlOVEFzWEc1Y2RGeDBYSFF4TWpnc1hHNWNkRngwWEhReE1UUmNibHgwWEhSZExGeHVYSFJjZEZ3aWMyRnVaSGxpY205M2Jsd2lPaUJiWEc1Y2RGeDBYSFF5TkRRc1hHNWNkRngwWEhReE5qUXNYRzVjZEZ4MFhIUTVObHh1WEhSY2RGMHNYRzVjZEZ4MFhDSnpaV0ZuY21WbGJsd2lPaUJiWEc1Y2RGeDBYSFEwTml4Y2JseDBYSFJjZERFek9TeGNibHgwWEhSY2REZzNYRzVjZEZ4MFhTeGNibHgwWEhSY0luTmxZWE5vWld4c1hDSTZJRnRjYmx4MFhIUmNkREkxTlN4Y2JseDBYSFJjZERJME5TeGNibHgwWEhSY2RESXpPRnh1WEhSY2RGMHNYRzVjZEZ4MFhDSnphV1Z1Ym1GY0lqb2dXMXh1WEhSY2RGeDBNVFl3TEZ4dVhIUmNkRngwT0RJc1hHNWNkRngwWEhRME5WeHVYSFJjZEYwc1hHNWNkRngwWENKemFXeDJaWEpjSWpvZ1cxeHVYSFJjZEZ4ME1Ua3lMRnh1WEhSY2RGeDBNVGt5TEZ4dVhIUmNkRngwTVRreVhHNWNkRngwWFN4Y2JseDBYSFJjSW5OcmVXSnNkV1ZjSWpvZ1cxeHVYSFJjZEZ4ME1UTTFMRnh1WEhSY2RGeDBNakEyTEZ4dVhIUmNkRngwTWpNMVhHNWNkRngwWFN4Y2JseDBYSFJjSW5Oc1lYUmxZbXgxWlZ3aU9pQmJYRzVjZEZ4MFhIUXhNRFlzWEc1Y2RGeDBYSFE1TUN4Y2JseDBYSFJjZERJd05WeHVYSFJjZEYwc1hHNWNkRngwWENKemJHRjBaV2R5WVhsY0lqb2dXMXh1WEhSY2RGeDBNVEV5TEZ4dVhIUmNkRngwTVRJNExGeHVYSFJjZEZ4ME1UUTBYRzVjZEZ4MFhTeGNibHgwWEhSY0luTnNZWFJsWjNKbGVWd2lPaUJiWEc1Y2RGeDBYSFF4TVRJc1hHNWNkRngwWEhReE1qZ3NYRzVjZEZ4MFhIUXhORFJjYmx4MFhIUmRMRnh1WEhSY2RGd2ljMjV2ZDF3aU9pQmJYRzVjZEZ4MFhIUXlOVFVzWEc1Y2RGeDBYSFF5TlRBc1hHNWNkRngwWEhReU5UQmNibHgwWEhSZExGeHVYSFJjZEZ3aWMzQnlhVzVuWjNKbFpXNWNJam9nVzF4dVhIUmNkRngwTUN4Y2JseDBYSFJjZERJMU5TeGNibHgwWEhSY2RERXlOMXh1WEhSY2RGMHNYRzVjZEZ4MFhDSnpkR1ZsYkdKc2RXVmNJam9nVzF4dVhIUmNkRngwTnpBc1hHNWNkRngwWEhReE16QXNYRzVjZEZ4MFhIUXhPREJjYmx4MFhIUmRMRnh1WEhSY2RGd2lkR0Z1WENJNklGdGNibHgwWEhSY2RESXhNQ3hjYmx4MFhIUmNkREU0TUN4Y2JseDBYSFJjZERFME1GeHVYSFJjZEYwc1hHNWNkRngwWENKMFpXRnNYQ0k2SUZ0Y2JseDBYSFJjZERBc1hHNWNkRngwWEhReE1qZ3NYRzVjZEZ4MFhIUXhNamhjYmx4MFhIUmRMRnh1WEhSY2RGd2lkR2hwYzNSc1pWd2lPaUJiWEc1Y2RGeDBYSFF5TVRZc1hHNWNkRngwWEhReE9URXNYRzVjZEZ4MFhIUXlNVFpjYmx4MFhIUmRMRnh1WEhSY2RGd2lkRzl0WVhSdlhDSTZJRnRjYmx4MFhIUmNkREkxTlN4Y2JseDBYSFJjZERrNUxGeHVYSFJjZEZ4ME56RmNibHgwWEhSZExGeHVYSFJjZEZ3aWRIVnljWFZ2YVhObFhDSTZJRnRjYmx4MFhIUmNkRFkwTEZ4dVhIUmNkRngwTWpJMExGeHVYSFJjZEZ4ME1qQTRYRzVjZEZ4MFhTeGNibHgwWEhSY0luWnBiMnhsZEZ3aU9pQmJYRzVjZEZ4MFhIUXlNemdzWEc1Y2RGeDBYSFF4TXpBc1hHNWNkRngwWEhReU16aGNibHgwWEhSZExGeHVYSFJjZEZ3aWQyaGxZWFJjSWpvZ1cxeHVYSFJjZEZ4ME1qUTFMRnh1WEhSY2RGeDBNakl5TEZ4dVhIUmNkRngwTVRjNVhHNWNkRngwWFN4Y2JseDBYSFJjSW5kb2FYUmxYQ0k2SUZ0Y2JseDBYSFJjZERJMU5TeGNibHgwWEhSY2RESTFOU3hjYmx4MFhIUmNkREkxTlZ4dVhIUmNkRjBzWEc1Y2RGeDBYQ0ozYUdsMFpYTnRiMnRsWENJNklGdGNibHgwWEhSY2RESTBOU3hjYmx4MFhIUmNkREkwTlN4Y2JseDBYSFJjZERJME5WeHVYSFJjZEYwc1hHNWNkRngwWENKNVpXeHNiM2RjSWpvZ1cxeHVYSFJjZEZ4ME1qVTFMRnh1WEhSY2RGeDBNalUxTEZ4dVhIUmNkRngwTUZ4dVhIUmNkRjBzWEc1Y2RGeDBYQ0o1Wld4c2IzZG5jbVZsYmx3aU9pQmJYRzVjZEZ4MFhIUXhOVFFzWEc1Y2RGeDBYSFF5TURVc1hHNWNkRngwWEhRMU1GeHVYSFJjZEYwc1hHNWNkRngwWENKMGNtRnVjM0JoY21WdWRGd2lPaUJiWEc1Y2RGeDBYSFF3TEZ4dVhIUmNkRngwTUN4Y2JseDBYSFJjZERBc1hHNWNkRngwWEhRd1hHNWNkRngwWFZ4dVhIUjlYRzU5TzF4dVhHNWNiaTh2THk4dkx5OHZMeTh2THk4dkx5OHZMMXh1THk4Z1YwVkNVRUZEU3lCR1QwOVVSVkpjYmk4dklDNHZmaTkwWVc1bmNtRnRMWEpsWm1WeVpXNWpaUzh4TGpBdU1DOXlaV1psY21WdVkyVXVhbk52Ymx4dUx5OGdiVzlrZFd4bElHbGtJRDBnTVRrelhHNHZMeUJ0YjJSMWJHVWdZMmgxYm10eklEMGdNQ0pkTENKdFlYQndhVzVuY3lJNklrRkJRVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQklpd2ljMjkxY21ObFVtOXZkQ0k2SWlKOVwiKTtcblxuLyoqKi8gfSksXG4vKiAxOTQgKi9cbi8qIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKiBhbGwgZXhwb3J0cyB1c2VkICovXG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL34vdXRpbC9+L2luaGVyaXRzL2luaGVyaXRzX2Jyb3dzZXIuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5ldmFsKFwiaWYgKHR5cGVvZiBPYmplY3QuY3JlYXRlID09PSAnZnVuY3Rpb24nKSB7XFxuICAvLyBpbXBsZW1lbnRhdGlvbiBmcm9tIHN0YW5kYXJkIG5vZGUuanMgJ3V0aWwnIG1vZHVsZVxcbiAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpbmhlcml0cyhjdG9yLCBzdXBlckN0b3IpIHtcXG4gICAgY3Rvci5zdXBlcl8gPSBzdXBlckN0b3JcXG4gICAgY3Rvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ3Rvci5wcm90b3R5cGUsIHtcXG4gICAgICBjb25zdHJ1Y3Rvcjoge1xcbiAgICAgICAgdmFsdWU6IGN0b3IsXFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXFxuICAgICAgfVxcbiAgICB9KTtcXG4gIH07XFxufSBlbHNlIHtcXG4gIC8vIG9sZCBzY2hvb2wgc2hpbSBmb3Igb2xkIGJyb3dzZXJzXFxuICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGluaGVyaXRzKGN0b3IsIHN1cGVyQ3Rvcikge1xcbiAgICBjdG9yLnN1cGVyXyA9IHN1cGVyQ3RvclxcbiAgICB2YXIgVGVtcEN0b3IgPSBmdW5jdGlvbiAoKSB7fVxcbiAgICBUZW1wQ3Rvci5wcm90b3R5cGUgPSBzdXBlckN0b3IucHJvdG90eXBlXFxuICAgIGN0b3IucHJvdG90eXBlID0gbmV3IFRlbXBDdG9yKClcXG4gICAgY3Rvci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBjdG9yXFxuICB9XFxufVxcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pTVRrMExtcHpJaXdpYzI5MWNtTmxjeUk2V3lKM1pXSndZV05yT2k4dkx5NHZmaTkxZEdsc0wzNHZhVzVvWlhKcGRITXZhVzVvWlhKcGRITmZZbkp2ZDNObGNpNXFjejloWW1FMUlsMHNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJbWxtSUNoMGVYQmxiMllnVDJKcVpXTjBMbU55WldGMFpTQTlQVDBnSjJaMWJtTjBhVzl1SnlrZ2UxeHVJQ0F2THlCcGJYQnNaVzFsYm5SaGRHbHZiaUJtY205dElITjBZVzVrWVhKa0lHNXZaR1V1YW5NZ0ozVjBhV3duSUcxdlpIVnNaVnh1SUNCdGIyUjFiR1V1Wlhod2IzSjBjeUE5SUdaMWJtTjBhVzl1SUdsdWFHVnlhWFJ6S0dOMGIzSXNJSE4xY0dWeVEzUnZjaWtnZTF4dUlDQWdJR04wYjNJdWMzVndaWEpmSUQwZ2MzVndaWEpEZEc5eVhHNGdJQ0FnWTNSdmNpNXdjbTkwYjNSNWNHVWdQU0JQWW1wbFkzUXVZM0psWVhSbEtITjFjR1Z5UTNSdmNpNXdjbTkwYjNSNWNHVXNJSHRjYmlBZ0lDQWdJR052Ym5OMGNuVmpkRzl5T2lCN1hHNGdJQ0FnSUNBZ0lIWmhiSFZsT2lCamRHOXlMRnh1SUNBZ0lDQWdJQ0JsYm5WdFpYSmhZbXhsT2lCbVlXeHpaU3hjYmlBZ0lDQWdJQ0FnZDNKcGRHRmliR1U2SUhSeWRXVXNYRzRnSUNBZ0lDQWdJR052Ym1acFozVnlZV0pzWlRvZ2RISjFaVnh1SUNBZ0lDQWdmVnh1SUNBZ0lIMHBPMXh1SUNCOU8xeHVmU0JsYkhObElIdGNiaUFnTHk4Z2IyeGtJSE5qYUc5dmJDQnphR2x0SUdadmNpQnZiR1FnWW5KdmQzTmxjbk5jYmlBZ2JXOWtkV3hsTG1WNGNHOXlkSE1nUFNCbWRXNWpkR2x2YmlCcGJtaGxjbWwwY3loamRHOXlMQ0J6ZFhCbGNrTjBiM0lwSUh0Y2JpQWdJQ0JqZEc5eUxuTjFjR1Z5WHlBOUlITjFjR1Z5UTNSdmNseHVJQ0FnSUhaaGNpQlVaVzF3UTNSdmNpQTlJR1oxYm1OMGFXOXVJQ2dwSUh0OVhHNGdJQ0FnVkdWdGNFTjBiM0l1Y0hKdmRHOTBlWEJsSUQwZ2MzVndaWEpEZEc5eUxuQnliM1J2ZEhsd1pWeHVJQ0FnSUdOMGIzSXVjSEp2ZEc5MGVYQmxJRDBnYm1WM0lGUmxiWEJEZEc5eUtDbGNiaUFnSUNCamRHOXlMbkJ5YjNSdmRIbHdaUzVqYjI1emRISjFZM1J2Y2lBOUlHTjBiM0pjYmlBZ2ZWeHVmVnh1WEc1Y2JseHVMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZYRzR2THlCWFJVSlFRVU5MSUVaUFQxUkZVbHh1THk4Z0xpOStMM1YwYVd3dmZpOXBibWhsY21sMGN5OXBibWhsY21sMGMxOWljbTkzYzJWeUxtcHpYRzR2THlCdGIyUjFiR1VnYVdRZ1BTQXhPVFJjYmk4dklHMXZaSFZzWlNCamFIVnVhM01nUFNBd0lsMHNJbTFoY0hCcGJtZHpJam9pUVVGQlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPeUlzSW5OdmRYSmpaVkp2YjNRaU9pSWlmUT09XCIpO1xuXG4vKioqLyB9KSxcbi8qIDE5NSAqL1xuLyogbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9cbi8qIGFsbCBleHBvcnRzIHVzZWQgKi9cbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9+L3V0aWwvc3VwcG9ydC9pc0J1ZmZlckJyb3dzZXIuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbmV2YWwoXCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQnVmZmVyKGFyZykge1xcbiAgcmV0dXJuIGFyZyAmJiB0eXBlb2YgYXJnID09PSAnb2JqZWN0J1xcbiAgICAmJiB0eXBlb2YgYXJnLmNvcHkgPT09ICdmdW5jdGlvbidcXG4gICAgJiYgdHlwZW9mIGFyZy5maWxsID09PSAnZnVuY3Rpb24nXFxuICAgICYmIHR5cGVvZiBhcmcucmVhZFVJbnQ4ID09PSAnZnVuY3Rpb24nO1xcbn0vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaU1UazFMbXB6SWl3aWMyOTFjbU5sY3lJNld5SjNaV0p3WVdOck9pOHZMeTR2Zmk5MWRHbHNMM04xY0hCdmNuUXZhWE5DZFdabVpYSkNjbTkzYzJWeUxtcHpQemcxT1RZaVhTd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2liVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQm1kVzVqZEdsdmJpQnBjMEoxWm1abGNpaGhjbWNwSUh0Y2JpQWdjbVYwZFhKdUlHRnlaeUFtSmlCMGVYQmxiMllnWVhKbklEMDlQU0FuYjJKcVpXTjBKMXh1SUNBZ0lDWW1JSFI1Y0dWdlppQmhjbWN1WTI5d2VTQTlQVDBnSjJaMWJtTjBhVzl1SjF4dUlDQWdJQ1ltSUhSNWNHVnZaaUJoY21jdVptbHNiQ0E5UFQwZ0oyWjFibU4wYVc5dUoxeHVJQ0FnSUNZbUlIUjVjR1Z2WmlCaGNtY3VjbVZoWkZWSmJuUTRJRDA5UFNBblpuVnVZM1JwYjI0bk8xeHVmVnh1WEc1Y2JpOHZMeTh2THk4dkx5OHZMeTh2THk4dkwxeHVMeThnVjBWQ1VFRkRTeUJHVDA5VVJWSmNiaTh2SUM0dmZpOTFkR2xzTDNOMWNIQnZjblF2YVhOQ2RXWm1aWEpDY205M2MyVnlMbXB6WEc0dkx5QnRiMlIxYkdVZ2FXUWdQU0F4T1RWY2JpOHZJRzF2WkhWc1pTQmphSFZ1YTNNZ1BTQXdJbDBzSW0xaGNIQnBibWR6SWpvaVFVRkJRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUluMD1cIik7XG5cbi8qKiovIH0pXG4vKioqKioqLyBdKSkpOyIsIi8vIEdlbmVyYXRlZCBieSBDb2ZmZWVTY3JpcHQgMS4xMi40XG52YXIgRHVtcGVyLCBJbmxpbmUsIFV0aWxzO1xuXG5VdGlscyA9IHJlcXVpcmUoJy4vVXRpbHMnKTtcblxuSW5saW5lID0gcmVxdWlyZSgnLi9JbmxpbmUnKTtcblxuRHVtcGVyID0gKGZ1bmN0aW9uKCkge1xuICBmdW5jdGlvbiBEdW1wZXIoKSB7fVxuXG4gIER1bXBlci5pbmRlbnRhdGlvbiA9IDQ7XG5cbiAgRHVtcGVyLnByb3RvdHlwZS5kdW1wID0gZnVuY3Rpb24oaW5wdXQsIGlubGluZSwgaW5kZW50LCBleGNlcHRpb25PbkludmFsaWRUeXBlLCBvYmplY3RFbmNvZGVyKSB7XG4gICAgdmFyIGksIGtleSwgbGVuLCBvdXRwdXQsIHByZWZpeCwgdmFsdWUsIHdpbGxCZUlubGluZWQ7XG4gICAgaWYgKGlubGluZSA9PSBudWxsKSB7XG4gICAgICBpbmxpbmUgPSAwO1xuICAgIH1cbiAgICBpZiAoaW5kZW50ID09IG51bGwpIHtcbiAgICAgIGluZGVudCA9IDA7XG4gICAgfVxuICAgIGlmIChleGNlcHRpb25PbkludmFsaWRUeXBlID09IG51bGwpIHtcbiAgICAgIGV4Y2VwdGlvbk9uSW52YWxpZFR5cGUgPSBmYWxzZTtcbiAgICB9XG4gICAgaWYgKG9iamVjdEVuY29kZXIgPT0gbnVsbCkge1xuICAgICAgb2JqZWN0RW5jb2RlciA9IG51bGw7XG4gICAgfVxuICAgIG91dHB1dCA9ICcnO1xuICAgIHByZWZpeCA9IChpbmRlbnQgPyBVdGlscy5zdHJSZXBlYXQoJyAnLCBpbmRlbnQpIDogJycpO1xuICAgIGlmIChpbmxpbmUgPD0gMCB8fCB0eXBlb2YgaW5wdXQgIT09ICdvYmplY3QnIHx8IGlucHV0IGluc3RhbmNlb2YgRGF0ZSB8fCBVdGlscy5pc0VtcHR5KGlucHV0KSkge1xuICAgICAgb3V0cHV0ICs9IHByZWZpeCArIElubGluZS5kdW1wKGlucHV0LCBleGNlcHRpb25PbkludmFsaWRUeXBlLCBvYmplY3RFbmNvZGVyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGlucHV0IGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgICAgZm9yIChpID0gMCwgbGVuID0gaW5wdXQubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICB2YWx1ZSA9IGlucHV0W2ldO1xuICAgICAgICAgIHdpbGxCZUlubGluZWQgPSBpbmxpbmUgLSAxIDw9IDAgfHwgdHlwZW9mIHZhbHVlICE9PSAnb2JqZWN0JyB8fCBVdGlscy5pc0VtcHR5KHZhbHVlKTtcbiAgICAgICAgICBvdXRwdXQgKz0gcHJlZml4ICsgJy0nICsgKHdpbGxCZUlubGluZWQgPyAnICcgOiBcIlxcblwiKSArIHRoaXMuZHVtcCh2YWx1ZSwgaW5saW5lIC0gMSwgKHdpbGxCZUlubGluZWQgPyAwIDogaW5kZW50ICsgdGhpcy5pbmRlbnRhdGlvbiksIGV4Y2VwdGlvbk9uSW52YWxpZFR5cGUsIG9iamVjdEVuY29kZXIpICsgKHdpbGxCZUlubGluZWQgPyBcIlxcblwiIDogJycpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmb3IgKGtleSBpbiBpbnB1dCkge1xuICAgICAgICAgIHZhbHVlID0gaW5wdXRba2V5XTtcbiAgICAgICAgICB3aWxsQmVJbmxpbmVkID0gaW5saW5lIC0gMSA8PSAwIHx8IHR5cGVvZiB2YWx1ZSAhPT0gJ29iamVjdCcgfHwgVXRpbHMuaXNFbXB0eSh2YWx1ZSk7XG4gICAgICAgICAgb3V0cHV0ICs9IHByZWZpeCArIElubGluZS5kdW1wKGtleSwgZXhjZXB0aW9uT25JbnZhbGlkVHlwZSwgb2JqZWN0RW5jb2RlcikgKyAnOicgKyAod2lsbEJlSW5saW5lZCA/ICcgJyA6IFwiXFxuXCIpICsgdGhpcy5kdW1wKHZhbHVlLCBpbmxpbmUgLSAxLCAod2lsbEJlSW5saW5lZCA/IDAgOiBpbmRlbnQgKyB0aGlzLmluZGVudGF0aW9uKSwgZXhjZXB0aW9uT25JbnZhbGlkVHlwZSwgb2JqZWN0RW5jb2RlcikgKyAod2lsbEJlSW5saW5lZCA/IFwiXFxuXCIgOiAnJyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG91dHB1dDtcbiAgfTtcblxuICByZXR1cm4gRHVtcGVyO1xuXG59KSgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IER1bXBlcjtcbiIsIi8vIEdlbmVyYXRlZCBieSBDb2ZmZWVTY3JpcHQgMS4xMi40XG52YXIgRXNjYXBlciwgUGF0dGVybjtcblxuUGF0dGVybiA9IHJlcXVpcmUoJy4vUGF0dGVybicpO1xuXG5Fc2NhcGVyID0gKGZ1bmN0aW9uKCkge1xuICB2YXIgY2g7XG5cbiAgZnVuY3Rpb24gRXNjYXBlcigpIHt9XG5cbiAgRXNjYXBlci5MSVNUX0VTQ0FQRUVTID0gWydcXFxcJywgJ1xcXFxcXFxcJywgJ1xcXFxcIicsICdcIicsIFwiXFx4MDBcIiwgXCJcXHgwMVwiLCBcIlxceDAyXCIsIFwiXFx4MDNcIiwgXCJcXHgwNFwiLCBcIlxceDA1XCIsIFwiXFx4MDZcIiwgXCJcXHgwN1wiLCBcIlxceDA4XCIsIFwiXFx4MDlcIiwgXCJcXHgwYVwiLCBcIlxceDBiXCIsIFwiXFx4MGNcIiwgXCJcXHgwZFwiLCBcIlxceDBlXCIsIFwiXFx4MGZcIiwgXCJcXHgxMFwiLCBcIlxceDExXCIsIFwiXFx4MTJcIiwgXCJcXHgxM1wiLCBcIlxceDE0XCIsIFwiXFx4MTVcIiwgXCJcXHgxNlwiLCBcIlxceDE3XCIsIFwiXFx4MThcIiwgXCJcXHgxOVwiLCBcIlxceDFhXCIsIFwiXFx4MWJcIiwgXCJcXHgxY1wiLCBcIlxceDFkXCIsIFwiXFx4MWVcIiwgXCJcXHgxZlwiLCAoY2ggPSBTdHJpbmcuZnJvbUNoYXJDb2RlKSgweDAwODUpLCBjaCgweDAwQTApLCBjaCgweDIwMjgpLCBjaCgweDIwMjkpXTtcblxuICBFc2NhcGVyLkxJU1RfRVNDQVBFRCA9IFsnXFxcXFxcXFwnLCAnXFxcXFwiJywgJ1xcXFxcIicsICdcXFxcXCInLCBcIlxcXFwwXCIsIFwiXFxcXHgwMVwiLCBcIlxcXFx4MDJcIiwgXCJcXFxceDAzXCIsIFwiXFxcXHgwNFwiLCBcIlxcXFx4MDVcIiwgXCJcXFxceDA2XCIsIFwiXFxcXGFcIiwgXCJcXFxcYlwiLCBcIlxcXFx0XCIsIFwiXFxcXG5cIiwgXCJcXFxcdlwiLCBcIlxcXFxmXCIsIFwiXFxcXHJcIiwgXCJcXFxceDBlXCIsIFwiXFxcXHgwZlwiLCBcIlxcXFx4MTBcIiwgXCJcXFxceDExXCIsIFwiXFxcXHgxMlwiLCBcIlxcXFx4MTNcIiwgXCJcXFxceDE0XCIsIFwiXFxcXHgxNVwiLCBcIlxcXFx4MTZcIiwgXCJcXFxceDE3XCIsIFwiXFxcXHgxOFwiLCBcIlxcXFx4MTlcIiwgXCJcXFxceDFhXCIsIFwiXFxcXGVcIiwgXCJcXFxceDFjXCIsIFwiXFxcXHgxZFwiLCBcIlxcXFx4MWVcIiwgXCJcXFxceDFmXCIsIFwiXFxcXE5cIiwgXCJcXFxcX1wiLCBcIlxcXFxMXCIsIFwiXFxcXFBcIl07XG5cbiAgRXNjYXBlci5NQVBQSU5HX0VTQ0FQRUVTX1RPX0VTQ0FQRUQgPSAoZnVuY3Rpb24oKSB7XG4gICAgdmFyIGksIGosIG1hcHBpbmcsIHJlZjtcbiAgICBtYXBwaW5nID0ge307XG4gICAgZm9yIChpID0gaiA9IDAsIHJlZiA9IEVzY2FwZXIuTElTVF9FU0NBUEVFUy5sZW5ndGg7IDAgPD0gcmVmID8gaiA8IHJlZiA6IGogPiByZWY7IGkgPSAwIDw9IHJlZiA/ICsraiA6IC0taikge1xuICAgICAgbWFwcGluZ1tFc2NhcGVyLkxJU1RfRVNDQVBFRVNbaV1dID0gRXNjYXBlci5MSVNUX0VTQ0FQRURbaV07XG4gICAgfVxuICAgIHJldHVybiBtYXBwaW5nO1xuICB9KSgpO1xuXG4gIEVzY2FwZXIuUEFUVEVSTl9DSEFSQUNURVJTX1RPX0VTQ0FQRSA9IG5ldyBQYXR0ZXJuKCdbXFxcXHgwMC1cXFxceDFmXXxcXHhjMlxceDg1fFxceGMyXFx4YTB8XFx4ZTJcXHg4MFxceGE4fFxceGUyXFx4ODBcXHhhOScpO1xuXG4gIEVzY2FwZXIuUEFUVEVSTl9NQVBQSU5HX0VTQ0FQRUVTID0gbmV3IFBhdHRlcm4oRXNjYXBlci5MSVNUX0VTQ0FQRUVTLmpvaW4oJ3wnKS5zcGxpdCgnXFxcXCcpLmpvaW4oJ1xcXFxcXFxcJykpO1xuXG4gIEVzY2FwZXIuUEFUVEVSTl9TSU5HTEVfUVVPVElORyA9IG5ldyBQYXR0ZXJuKCdbXFxcXHNcXCdcIjp7fVtcXFxcXSwmKiM/XXxeWy0/fDw+PSElQGBdJyk7XG5cbiAgRXNjYXBlci5yZXF1aXJlc0RvdWJsZVF1b3RpbmcgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHJldHVybiB0aGlzLlBBVFRFUk5fQ0hBUkFDVEVSU19UT19FU0NBUEUudGVzdCh2YWx1ZSk7XG4gIH07XG5cbiAgRXNjYXBlci5lc2NhcGVXaXRoRG91YmxlUXVvdGVzID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICB2YXIgcmVzdWx0O1xuICAgIHJlc3VsdCA9IHRoaXMuUEFUVEVSTl9NQVBQSU5HX0VTQ0FQRUVTLnJlcGxhY2UodmFsdWUsIChmdW5jdGlvbihfdGhpcykge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHN0cikge1xuICAgICAgICByZXR1cm4gX3RoaXMuTUFQUElOR19FU0NBUEVFU19UT19FU0NBUEVEW3N0cl07XG4gICAgICB9O1xuICAgIH0pKHRoaXMpKTtcbiAgICByZXR1cm4gJ1wiJyArIHJlc3VsdCArICdcIic7XG4gIH07XG5cbiAgRXNjYXBlci5yZXF1aXJlc1NpbmdsZVF1b3RpbmcgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHJldHVybiB0aGlzLlBBVFRFUk5fU0lOR0xFX1FVT1RJTkcudGVzdCh2YWx1ZSk7XG4gIH07XG5cbiAgRXNjYXBlci5lc2NhcGVXaXRoU2luZ2xlUXVvdGVzID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXR1cm4gXCInXCIgKyB2YWx1ZS5yZXBsYWNlKC8nL2csIFwiJydcIikgKyBcIidcIjtcbiAgfTtcblxuICByZXR1cm4gRXNjYXBlcjtcblxufSkoKTtcblxubW9kdWxlLmV4cG9ydHMgPSBFc2NhcGVyO1xuIiwiLy8gR2VuZXJhdGVkIGJ5IENvZmZlZVNjcmlwdCAxLjEyLjRcbnZhciBEdW1wRXhjZXB0aW9uLFxuICBleHRlbmQgPSBmdW5jdGlvbihjaGlsZCwgcGFyZW50KSB7IGZvciAodmFyIGtleSBpbiBwYXJlbnQpIHsgaWYgKGhhc1Byb3AuY2FsbChwYXJlbnQsIGtleSkpIGNoaWxkW2tleV0gPSBwYXJlbnRba2V5XTsgfSBmdW5jdGlvbiBjdG9yKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gY2hpbGQ7IH0gY3Rvci5wcm90b3R5cGUgPSBwYXJlbnQucHJvdG90eXBlOyBjaGlsZC5wcm90b3R5cGUgPSBuZXcgY3RvcigpOyBjaGlsZC5fX3N1cGVyX18gPSBwYXJlbnQucHJvdG90eXBlOyByZXR1cm4gY2hpbGQ7IH0sXG4gIGhhc1Byb3AgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblxuRHVtcEV4Y2VwdGlvbiA9IChmdW5jdGlvbihzdXBlckNsYXNzKSB7XG4gIGV4dGVuZChEdW1wRXhjZXB0aW9uLCBzdXBlckNsYXNzKTtcblxuICBmdW5jdGlvbiBEdW1wRXhjZXB0aW9uKG1lc3NhZ2UsIHBhcnNlZExpbmUsIHNuaXBwZXQpIHtcbiAgICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlO1xuICAgIHRoaXMucGFyc2VkTGluZSA9IHBhcnNlZExpbmU7XG4gICAgdGhpcy5zbmlwcGV0ID0gc25pcHBldDtcbiAgfVxuXG4gIER1bXBFeGNlcHRpb24ucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKCh0aGlzLnBhcnNlZExpbmUgIT0gbnVsbCkgJiYgKHRoaXMuc25pcHBldCAhPSBudWxsKSkge1xuICAgICAgcmV0dXJuICc8RHVtcEV4Y2VwdGlvbj4gJyArIHRoaXMubWVzc2FnZSArICcgKGxpbmUgJyArIHRoaXMucGFyc2VkTGluZSArICc6IFxcJycgKyB0aGlzLnNuaXBwZXQgKyAnXFwnKSc7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAnPER1bXBFeGNlcHRpb24+ICcgKyB0aGlzLm1lc3NhZ2U7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBEdW1wRXhjZXB0aW9uO1xuXG59KShFcnJvcik7XG5cbm1vZHVsZS5leHBvcnRzID0gRHVtcEV4Y2VwdGlvbjtcbiIsIi8vIEdlbmVyYXRlZCBieSBDb2ZmZWVTY3JpcHQgMS4xMi40XG52YXIgUGFyc2VFeGNlcHRpb24sXG4gIGV4dGVuZCA9IGZ1bmN0aW9uKGNoaWxkLCBwYXJlbnQpIHsgZm9yICh2YXIga2V5IGluIHBhcmVudCkgeyBpZiAoaGFzUHJvcC5jYWxsKHBhcmVudCwga2V5KSkgY2hpbGRba2V5XSA9IHBhcmVudFtrZXldOyB9IGZ1bmN0aW9uIGN0b3IoKSB7IHRoaXMuY29uc3RydWN0b3IgPSBjaGlsZDsgfSBjdG9yLnByb3RvdHlwZSA9IHBhcmVudC5wcm90b3R5cGU7IGNoaWxkLnByb3RvdHlwZSA9IG5ldyBjdG9yKCk7IGNoaWxkLl9fc3VwZXJfXyA9IHBhcmVudC5wcm90b3R5cGU7IHJldHVybiBjaGlsZDsgfSxcbiAgaGFzUHJvcCA9IHt9Lmhhc093blByb3BlcnR5O1xuXG5QYXJzZUV4Y2VwdGlvbiA9IChmdW5jdGlvbihzdXBlckNsYXNzKSB7XG4gIGV4dGVuZChQYXJzZUV4Y2VwdGlvbiwgc3VwZXJDbGFzcyk7XG5cbiAgZnVuY3Rpb24gUGFyc2VFeGNlcHRpb24obWVzc2FnZSwgcGFyc2VkTGluZSwgc25pcHBldCkge1xuICAgIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2U7XG4gICAgdGhpcy5wYXJzZWRMaW5lID0gcGFyc2VkTGluZTtcbiAgICB0aGlzLnNuaXBwZXQgPSBzbmlwcGV0O1xuICB9XG5cbiAgUGFyc2VFeGNlcHRpb24ucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKCh0aGlzLnBhcnNlZExpbmUgIT0gbnVsbCkgJiYgKHRoaXMuc25pcHBldCAhPSBudWxsKSkge1xuICAgICAgcmV0dXJuICc8UGFyc2VFeGNlcHRpb24+ICcgKyB0aGlzLm1lc3NhZ2UgKyAnIChsaW5lICcgKyB0aGlzLnBhcnNlZExpbmUgKyAnOiBcXCcnICsgdGhpcy5zbmlwcGV0ICsgJ1xcJyknO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gJzxQYXJzZUV4Y2VwdGlvbj4gJyArIHRoaXMubWVzc2FnZTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIFBhcnNlRXhjZXB0aW9uO1xuXG59KShFcnJvcik7XG5cbm1vZHVsZS5leHBvcnRzID0gUGFyc2VFeGNlcHRpb247XG4iLCIvLyBHZW5lcmF0ZWQgYnkgQ29mZmVlU2NyaXB0IDEuMTIuNFxudmFyIFBhcnNlTW9yZSxcbiAgZXh0ZW5kID0gZnVuY3Rpb24oY2hpbGQsIHBhcmVudCkgeyBmb3IgKHZhciBrZXkgaW4gcGFyZW50KSB7IGlmIChoYXNQcm9wLmNhbGwocGFyZW50LCBrZXkpKSBjaGlsZFtrZXldID0gcGFyZW50W2tleV07IH0gZnVuY3Rpb24gY3RvcigpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGNoaWxkOyB9IGN0b3IucHJvdG90eXBlID0gcGFyZW50LnByb3RvdHlwZTsgY2hpbGQucHJvdG90eXBlID0gbmV3IGN0b3IoKTsgY2hpbGQuX19zdXBlcl9fID0gcGFyZW50LnByb3RvdHlwZTsgcmV0dXJuIGNoaWxkOyB9LFxuICBoYXNQcm9wID0ge30uaGFzT3duUHJvcGVydHk7XG5cblBhcnNlTW9yZSA9IChmdW5jdGlvbihzdXBlckNsYXNzKSB7XG4gIGV4dGVuZChQYXJzZU1vcmUsIHN1cGVyQ2xhc3MpO1xuXG4gIGZ1bmN0aW9uIFBhcnNlTW9yZShtZXNzYWdlLCBwYXJzZWRMaW5lLCBzbmlwcGV0KSB7XG4gICAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZTtcbiAgICB0aGlzLnBhcnNlZExpbmUgPSBwYXJzZWRMaW5lO1xuICAgIHRoaXMuc25pcHBldCA9IHNuaXBwZXQ7XG4gIH1cblxuICBQYXJzZU1vcmUucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKCh0aGlzLnBhcnNlZExpbmUgIT0gbnVsbCkgJiYgKHRoaXMuc25pcHBldCAhPSBudWxsKSkge1xuICAgICAgcmV0dXJuICc8UGFyc2VNb3JlPiAnICsgdGhpcy5tZXNzYWdlICsgJyAobGluZSAnICsgdGhpcy5wYXJzZWRMaW5lICsgJzogXFwnJyArIHRoaXMuc25pcHBldCArICdcXCcpJztcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICc8UGFyc2VNb3JlPiAnICsgdGhpcy5tZXNzYWdlO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gUGFyc2VNb3JlO1xuXG59KShFcnJvcik7XG5cbm1vZHVsZS5leHBvcnRzID0gUGFyc2VNb3JlO1xuIiwiLy8gR2VuZXJhdGVkIGJ5IENvZmZlZVNjcmlwdCAxLjEyLjRcbnZhciBEdW1wRXhjZXB0aW9uLCBFc2NhcGVyLCBJbmxpbmUsIFBhcnNlRXhjZXB0aW9uLCBQYXJzZU1vcmUsIFBhdHRlcm4sIFVuZXNjYXBlciwgVXRpbHMsXG4gIGluZGV4T2YgPSBbXS5pbmRleE9mIHx8IGZ1bmN0aW9uKGl0ZW0pIHsgZm9yICh2YXIgaSA9IDAsIGwgPSB0aGlzLmxlbmd0aDsgaSA8IGw7IGkrKykgeyBpZiAoaSBpbiB0aGlzICYmIHRoaXNbaV0gPT09IGl0ZW0pIHJldHVybiBpOyB9IHJldHVybiAtMTsgfTtcblxuUGF0dGVybiA9IHJlcXVpcmUoJy4vUGF0dGVybicpO1xuXG5VbmVzY2FwZXIgPSByZXF1aXJlKCcuL1VuZXNjYXBlcicpO1xuXG5Fc2NhcGVyID0gcmVxdWlyZSgnLi9Fc2NhcGVyJyk7XG5cblV0aWxzID0gcmVxdWlyZSgnLi9VdGlscycpO1xuXG5QYXJzZUV4Y2VwdGlvbiA9IHJlcXVpcmUoJy4vRXhjZXB0aW9uL1BhcnNlRXhjZXB0aW9uJyk7XG5cblBhcnNlTW9yZSA9IHJlcXVpcmUoJy4vRXhjZXB0aW9uL1BhcnNlTW9yZScpO1xuXG5EdW1wRXhjZXB0aW9uID0gcmVxdWlyZSgnLi9FeGNlcHRpb24vRHVtcEV4Y2VwdGlvbicpO1xuXG5JbmxpbmUgPSAoZnVuY3Rpb24oKSB7XG4gIGZ1bmN0aW9uIElubGluZSgpIHt9XG5cbiAgSW5saW5lLlJFR0VYX1FVT1RFRF9TVFJJTkcgPSAnKD86XCIoPzpbXlwiXFxcXFxcXFxdKig/OlxcXFxcXFxcLlteXCJcXFxcXFxcXF0qKSopXCJ8XFwnKD86W15cXCddKig/OlxcJ1xcJ1teXFwnXSopKilcXCcpJztcblxuICBJbmxpbmUuUEFUVEVSTl9UUkFJTElOR19DT01NRU5UUyA9IG5ldyBQYXR0ZXJuKCdeXFxcXHMqIy4qJCcpO1xuXG4gIElubGluZS5QQVRURVJOX1FVT1RFRF9TQ0FMQVIgPSBuZXcgUGF0dGVybignXicgKyBJbmxpbmUuUkVHRVhfUVVPVEVEX1NUUklORyk7XG5cbiAgSW5saW5lLlBBVFRFUk5fVEhPVVNBTkRfTlVNRVJJQ19TQ0FMQVIgPSBuZXcgUGF0dGVybignXigtfFxcXFwrKT9bMC05LF0rKFxcXFwuWzAtOV0rKT8kJyk7XG5cbiAgSW5saW5lLlBBVFRFUk5fU0NBTEFSX0JZX0RFTElNSVRFUlMgPSB7fTtcblxuICBJbmxpbmUuc2V0dGluZ3MgPSB7fTtcblxuICBJbmxpbmUuY29uZmlndXJlID0gZnVuY3Rpb24oZXhjZXB0aW9uT25JbnZhbGlkVHlwZSwgb2JqZWN0RGVjb2Rlcikge1xuICAgIGlmIChleGNlcHRpb25PbkludmFsaWRUeXBlID09IG51bGwpIHtcbiAgICAgIGV4Y2VwdGlvbk9uSW52YWxpZFR5cGUgPSBudWxsO1xuICAgIH1cbiAgICBpZiAob2JqZWN0RGVjb2RlciA9PSBudWxsKSB7XG4gICAgICBvYmplY3REZWNvZGVyID0gbnVsbDtcbiAgICB9XG4gICAgdGhpcy5zZXR0aW5ncy5leGNlcHRpb25PbkludmFsaWRUeXBlID0gZXhjZXB0aW9uT25JbnZhbGlkVHlwZTtcbiAgICB0aGlzLnNldHRpbmdzLm9iamVjdERlY29kZXIgPSBvYmplY3REZWNvZGVyO1xuICB9O1xuXG4gIElubGluZS5wYXJzZSA9IGZ1bmN0aW9uKHZhbHVlLCBleGNlcHRpb25PbkludmFsaWRUeXBlLCBvYmplY3REZWNvZGVyKSB7XG4gICAgdmFyIGNvbnRleHQsIHJlc3VsdDtcbiAgICBpZiAoZXhjZXB0aW9uT25JbnZhbGlkVHlwZSA9PSBudWxsKSB7XG4gICAgICBleGNlcHRpb25PbkludmFsaWRUeXBlID0gZmFsc2U7XG4gICAgfVxuICAgIGlmIChvYmplY3REZWNvZGVyID09IG51bGwpIHtcbiAgICAgIG9iamVjdERlY29kZXIgPSBudWxsO1xuICAgIH1cbiAgICB0aGlzLnNldHRpbmdzLmV4Y2VwdGlvbk9uSW52YWxpZFR5cGUgPSBleGNlcHRpb25PbkludmFsaWRUeXBlO1xuICAgIHRoaXMuc2V0dGluZ3Mub2JqZWN0RGVjb2RlciA9IG9iamVjdERlY29kZXI7XG4gICAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICAgIHJldHVybiAnJztcbiAgICB9XG4gICAgdmFsdWUgPSBVdGlscy50cmltKHZhbHVlKTtcbiAgICBpZiAoMCA9PT0gdmFsdWUubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuICAgIGNvbnRleHQgPSB7XG4gICAgICBleGNlcHRpb25PbkludmFsaWRUeXBlOiBleGNlcHRpb25PbkludmFsaWRUeXBlLFxuICAgICAgb2JqZWN0RGVjb2Rlcjogb2JqZWN0RGVjb2RlcixcbiAgICAgIGk6IDBcbiAgICB9O1xuICAgIHN3aXRjaCAodmFsdWUuY2hhckF0KDApKSB7XG4gICAgICBjYXNlICdbJzpcbiAgICAgICAgcmVzdWx0ID0gdGhpcy5wYXJzZVNlcXVlbmNlKHZhbHVlLCBjb250ZXh0KTtcbiAgICAgICAgKytjb250ZXh0Lmk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAneyc6XG4gICAgICAgIHJlc3VsdCA9IHRoaXMucGFyc2VNYXBwaW5nKHZhbHVlLCBjb250ZXh0KTtcbiAgICAgICAgKytjb250ZXh0Lmk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmVzdWx0ID0gdGhpcy5wYXJzZVNjYWxhcih2YWx1ZSwgbnVsbCwgWydcIicsIFwiJ1wiXSwgY29udGV4dCk7XG4gICAgfVxuICAgIGlmICh0aGlzLlBBVFRFUk5fVFJBSUxJTkdfQ09NTUVOVFMucmVwbGFjZSh2YWx1ZS5zbGljZShjb250ZXh0LmkpLCAnJykgIT09ICcnKSB7XG4gICAgICB0aHJvdyBuZXcgUGFyc2VFeGNlcHRpb24oJ1VuZXhwZWN0ZWQgY2hhcmFjdGVycyBuZWFyIFwiJyArIHZhbHVlLnNsaWNlKGNvbnRleHQuaSkgKyAnXCIuJyk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgSW5saW5lLmR1bXAgPSBmdW5jdGlvbih2YWx1ZSwgZXhjZXB0aW9uT25JbnZhbGlkVHlwZSwgb2JqZWN0RW5jb2Rlcikge1xuICAgIHZhciByZWYsIHJlc3VsdCwgdHlwZTtcbiAgICBpZiAoZXhjZXB0aW9uT25JbnZhbGlkVHlwZSA9PSBudWxsKSB7XG4gICAgICBleGNlcHRpb25PbkludmFsaWRUeXBlID0gZmFsc2U7XG4gICAgfVxuICAgIGlmIChvYmplY3RFbmNvZGVyID09IG51bGwpIHtcbiAgICAgIG9iamVjdEVuY29kZXIgPSBudWxsO1xuICAgIH1cbiAgICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuICdudWxsJztcbiAgICB9XG4gICAgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgICBpZiAodHlwZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIERhdGUpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlLnRvSVNPU3RyaW5nKCk7XG4gICAgICB9IGVsc2UgaWYgKG9iamVjdEVuY29kZXIgIT0gbnVsbCkge1xuICAgICAgICByZXN1bHQgPSBvYmplY3RFbmNvZGVyKHZhbHVlKTtcbiAgICAgICAgaWYgKHR5cGVvZiByZXN1bHQgPT09ICdzdHJpbmcnIHx8IChyZXN1bHQgIT0gbnVsbCkpIHtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5kdW1wT2JqZWN0KHZhbHVlKTtcbiAgICB9XG4gICAgaWYgKHR5cGUgPT09ICdib29sZWFuJykge1xuICAgICAgcmV0dXJuICh2YWx1ZSA/ICd0cnVlJyA6ICdmYWxzZScpO1xuICAgIH1cbiAgICBpZiAoVXRpbHMuaXNEaWdpdHModmFsdWUpKSB7XG4gICAgICByZXR1cm4gKHR5cGUgPT09ICdzdHJpbmcnID8gXCInXCIgKyB2YWx1ZSArIFwiJ1wiIDogU3RyaW5nKHBhcnNlSW50KHZhbHVlKSkpO1xuICAgIH1cbiAgICBpZiAoVXRpbHMuaXNOdW1lcmljKHZhbHVlKSkge1xuICAgICAgcmV0dXJuICh0eXBlID09PSAnc3RyaW5nJyA/IFwiJ1wiICsgdmFsdWUgKyBcIidcIiA6IFN0cmluZyhwYXJzZUZsb2F0KHZhbHVlKSkpO1xuICAgIH1cbiAgICBpZiAodHlwZSA9PT0gJ251bWJlcicpIHtcbiAgICAgIHJldHVybiAodmFsdWUgPT09IDJlMzA4ID8gJy5JbmYnIDogKHZhbHVlID09PSAtMmUzMDggPyAnLS5JbmYnIDogKGlzTmFOKHZhbHVlKSA/ICcuTmFOJyA6IHZhbHVlKSkpO1xuICAgIH1cbiAgICBpZiAoRXNjYXBlci5yZXF1aXJlc0RvdWJsZVF1b3RpbmcodmFsdWUpKSB7XG4gICAgICByZXR1cm4gRXNjYXBlci5lc2NhcGVXaXRoRG91YmxlUXVvdGVzKHZhbHVlKTtcbiAgICB9XG4gICAgaWYgKEVzY2FwZXIucmVxdWlyZXNTaW5nbGVRdW90aW5nKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIEVzY2FwZXIuZXNjYXBlV2l0aFNpbmdsZVF1b3Rlcyh2YWx1ZSk7XG4gICAgfVxuICAgIGlmICgnJyA9PT0gdmFsdWUpIHtcbiAgICAgIHJldHVybiAnXCJcIic7XG4gICAgfVxuICAgIGlmIChVdGlscy5QQVRURVJOX0RBVEUudGVzdCh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiBcIidcIiArIHZhbHVlICsgXCInXCI7XG4gICAgfVxuICAgIGlmICgocmVmID0gdmFsdWUudG9Mb3dlckNhc2UoKSkgPT09ICdudWxsJyB8fCByZWYgPT09ICd+JyB8fCByZWYgPT09ICd0cnVlJyB8fCByZWYgPT09ICdmYWxzZScpIHtcbiAgICAgIHJldHVybiBcIidcIiArIHZhbHVlICsgXCInXCI7XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZTtcbiAgfTtcblxuICBJbmxpbmUuZHVtcE9iamVjdCA9IGZ1bmN0aW9uKHZhbHVlLCBleGNlcHRpb25PbkludmFsaWRUeXBlLCBvYmplY3RTdXBwb3J0KSB7XG4gICAgdmFyIGosIGtleSwgbGVuMSwgb3V0cHV0LCB2YWw7XG4gICAgaWYgKG9iamVjdFN1cHBvcnQgPT0gbnVsbCkge1xuICAgICAgb2JqZWN0U3VwcG9ydCA9IG51bGw7XG4gICAgfVxuICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICBvdXRwdXQgPSBbXTtcbiAgICAgIGZvciAoaiA9IDAsIGxlbjEgPSB2YWx1ZS5sZW5ndGg7IGogPCBsZW4xOyBqKyspIHtcbiAgICAgICAgdmFsID0gdmFsdWVbal07XG4gICAgICAgIG91dHB1dC5wdXNoKHRoaXMuZHVtcCh2YWwpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiAnWycgKyBvdXRwdXQuam9pbignLCAnKSArICddJztcbiAgICB9IGVsc2Uge1xuICAgICAgb3V0cHV0ID0gW107XG4gICAgICBmb3IgKGtleSBpbiB2YWx1ZSkge1xuICAgICAgICB2YWwgPSB2YWx1ZVtrZXldO1xuICAgICAgICBvdXRwdXQucHVzaCh0aGlzLmR1bXAoa2V5KSArICc6ICcgKyB0aGlzLmR1bXAodmFsKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gJ3snICsgb3V0cHV0LmpvaW4oJywgJykgKyAnfSc7XG4gICAgfVxuICB9O1xuXG4gIElubGluZS5wYXJzZVNjYWxhciA9IGZ1bmN0aW9uKHNjYWxhciwgZGVsaW1pdGVycywgc3RyaW5nRGVsaW1pdGVycywgY29udGV4dCwgZXZhbHVhdGUpIHtcbiAgICB2YXIgaSwgam9pbmVkRGVsaW1pdGVycywgbWF0Y2gsIG91dHB1dCwgcGF0dGVybiwgcmVmLCByZWYxLCBzdHJwb3MsIHRtcDtcbiAgICBpZiAoZGVsaW1pdGVycyA9PSBudWxsKSB7XG4gICAgICBkZWxpbWl0ZXJzID0gbnVsbDtcbiAgICB9XG4gICAgaWYgKHN0cmluZ0RlbGltaXRlcnMgPT0gbnVsbCkge1xuICAgICAgc3RyaW5nRGVsaW1pdGVycyA9IFsnXCInLCBcIidcIl07XG4gICAgfVxuICAgIGlmIChjb250ZXh0ID09IG51bGwpIHtcbiAgICAgIGNvbnRleHQgPSBudWxsO1xuICAgIH1cbiAgICBpZiAoZXZhbHVhdGUgPT0gbnVsbCkge1xuICAgICAgZXZhbHVhdGUgPSB0cnVlO1xuICAgIH1cbiAgICBpZiAoY29udGV4dCA9PSBudWxsKSB7XG4gICAgICBjb250ZXh0ID0ge1xuICAgICAgICBleGNlcHRpb25PbkludmFsaWRUeXBlOiB0aGlzLnNldHRpbmdzLmV4Y2VwdGlvbk9uSW52YWxpZFR5cGUsXG4gICAgICAgIG9iamVjdERlY29kZXI6IHRoaXMuc2V0dGluZ3Mub2JqZWN0RGVjb2RlcixcbiAgICAgICAgaTogMFxuICAgICAgfTtcbiAgICB9XG4gICAgaSA9IGNvbnRleHQuaTtcbiAgICBpZiAocmVmID0gc2NhbGFyLmNoYXJBdChpKSwgaW5kZXhPZi5jYWxsKHN0cmluZ0RlbGltaXRlcnMsIHJlZikgPj0gMCkge1xuICAgICAgb3V0cHV0ID0gdGhpcy5wYXJzZVF1b3RlZFNjYWxhcihzY2FsYXIsIGNvbnRleHQpO1xuICAgICAgaSA9IGNvbnRleHQuaTtcbiAgICAgIGlmIChkZWxpbWl0ZXJzICE9IG51bGwpIHtcbiAgICAgICAgdG1wID0gVXRpbHMubHRyaW0oc2NhbGFyLnNsaWNlKGkpLCAnICcpO1xuICAgICAgICBpZiAoIShyZWYxID0gdG1wLmNoYXJBdCgwKSwgaW5kZXhPZi5jYWxsKGRlbGltaXRlcnMsIHJlZjEpID49IDApKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFBhcnNlRXhjZXB0aW9uKCdVbmV4cGVjdGVkIGNoYXJhY3RlcnMgKCcgKyBzY2FsYXIuc2xpY2UoaSkgKyAnKS4nKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoIWRlbGltaXRlcnMpIHtcbiAgICAgICAgb3V0cHV0ID0gc2NhbGFyLnNsaWNlKGkpO1xuICAgICAgICBpICs9IG91dHB1dC5sZW5ndGg7XG4gICAgICAgIHN0cnBvcyA9IG91dHB1dC5pbmRleE9mKCcgIycpO1xuICAgICAgICBpZiAoc3RycG9zICE9PSAtMSkge1xuICAgICAgICAgIG91dHB1dCA9IFV0aWxzLnJ0cmltKG91dHB1dC5zbGljZSgwLCBzdHJwb3MpKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgam9pbmVkRGVsaW1pdGVycyA9IGRlbGltaXRlcnMuam9pbignfCcpO1xuICAgICAgICBwYXR0ZXJuID0gdGhpcy5QQVRURVJOX1NDQUxBUl9CWV9ERUxJTUlURVJTW2pvaW5lZERlbGltaXRlcnNdO1xuICAgICAgICBpZiAocGF0dGVybiA9PSBudWxsKSB7XG4gICAgICAgICAgcGF0dGVybiA9IG5ldyBQYXR0ZXJuKCdeKC4rPykoJyArIGpvaW5lZERlbGltaXRlcnMgKyAnKScpO1xuICAgICAgICAgIHRoaXMuUEFUVEVSTl9TQ0FMQVJfQllfREVMSU1JVEVSU1tqb2luZWREZWxpbWl0ZXJzXSA9IHBhdHRlcm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1hdGNoID0gcGF0dGVybi5leGVjKHNjYWxhci5zbGljZShpKSkpIHtcbiAgICAgICAgICBvdXRwdXQgPSBtYXRjaFsxXTtcbiAgICAgICAgICBpICs9IG91dHB1dC5sZW5ndGg7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFBhcnNlRXhjZXB0aW9uKCdNYWxmb3JtZWQgaW5saW5lIFlBTUwgc3RyaW5nICgnICsgc2NhbGFyICsgJykuJyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChldmFsdWF0ZSkge1xuICAgICAgICBvdXRwdXQgPSB0aGlzLmV2YWx1YXRlU2NhbGFyKG91dHB1dCwgY29udGV4dCk7XG4gICAgICB9XG4gICAgfVxuICAgIGNvbnRleHQuaSA9IGk7XG4gICAgcmV0dXJuIG91dHB1dDtcbiAgfTtcblxuICBJbmxpbmUucGFyc2VRdW90ZWRTY2FsYXIgPSBmdW5jdGlvbihzY2FsYXIsIGNvbnRleHQpIHtcbiAgICB2YXIgaSwgbWF0Y2gsIG91dHB1dDtcbiAgICBpID0gY29udGV4dC5pO1xuICAgIGlmICghKG1hdGNoID0gdGhpcy5QQVRURVJOX1FVT1RFRF9TQ0FMQVIuZXhlYyhzY2FsYXIuc2xpY2UoaSkpKSkge1xuICAgICAgdGhyb3cgbmV3IFBhcnNlTW9yZSgnTWFsZm9ybWVkIGlubGluZSBZQU1MIHN0cmluZyAoJyArIHNjYWxhci5zbGljZShpKSArICcpLicpO1xuICAgIH1cbiAgICBvdXRwdXQgPSBtYXRjaFswXS5zdWJzdHIoMSwgbWF0Y2hbMF0ubGVuZ3RoIC0gMik7XG4gICAgaWYgKCdcIicgPT09IHNjYWxhci5jaGFyQXQoaSkpIHtcbiAgICAgIG91dHB1dCA9IFVuZXNjYXBlci51bmVzY2FwZURvdWJsZVF1b3RlZFN0cmluZyhvdXRwdXQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBvdXRwdXQgPSBVbmVzY2FwZXIudW5lc2NhcGVTaW5nbGVRdW90ZWRTdHJpbmcob3V0cHV0KTtcbiAgICB9XG4gICAgaSArPSBtYXRjaFswXS5sZW5ndGg7XG4gICAgY29udGV4dC5pID0gaTtcbiAgICByZXR1cm4gb3V0cHV0O1xuICB9O1xuXG4gIElubGluZS5wYXJzZVNlcXVlbmNlID0gZnVuY3Rpb24oc2VxdWVuY2UsIGNvbnRleHQpIHtcbiAgICB2YXIgZSwgaSwgaXNRdW90ZWQsIGxlbiwgb3V0cHV0LCByZWYsIHZhbHVlO1xuICAgIG91dHB1dCA9IFtdO1xuICAgIGxlbiA9IHNlcXVlbmNlLmxlbmd0aDtcbiAgICBpID0gY29udGV4dC5pO1xuICAgIGkgKz0gMTtcbiAgICB3aGlsZSAoaSA8IGxlbikge1xuICAgICAgY29udGV4dC5pID0gaTtcbiAgICAgIHN3aXRjaCAoc2VxdWVuY2UuY2hhckF0KGkpKSB7XG4gICAgICAgIGNhc2UgJ1snOlxuICAgICAgICAgIG91dHB1dC5wdXNoKHRoaXMucGFyc2VTZXF1ZW5jZShzZXF1ZW5jZSwgY29udGV4dCkpO1xuICAgICAgICAgIGkgPSBjb250ZXh0Lmk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3snOlxuICAgICAgICAgIG91dHB1dC5wdXNoKHRoaXMucGFyc2VNYXBwaW5nKHNlcXVlbmNlLCBjb250ZXh0KSk7XG4gICAgICAgICAgaSA9IGNvbnRleHQuaTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnXSc6XG4gICAgICAgICAgcmV0dXJuIG91dHB1dDtcbiAgICAgICAgY2FzZSAnLCc6XG4gICAgICAgIGNhc2UgJyAnOlxuICAgICAgICBjYXNlIFwiXFxuXCI6XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgaXNRdW90ZWQgPSAoKHJlZiA9IHNlcXVlbmNlLmNoYXJBdChpKSkgPT09ICdcIicgfHwgcmVmID09PSBcIidcIik7XG4gICAgICAgICAgdmFsdWUgPSB0aGlzLnBhcnNlU2NhbGFyKHNlcXVlbmNlLCBbJywnLCAnXSddLCBbJ1wiJywgXCInXCJdLCBjb250ZXh0KTtcbiAgICAgICAgICBpID0gY29udGV4dC5pO1xuICAgICAgICAgIGlmICghaXNRdW90ZWQgJiYgdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyAmJiAodmFsdWUuaW5kZXhPZignOiAnKSAhPT0gLTEgfHwgdmFsdWUuaW5kZXhPZihcIjpcXG5cIikgIT09IC0xKSkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgdmFsdWUgPSB0aGlzLnBhcnNlTWFwcGluZygneycgKyB2YWx1ZSArICd9Jyk7XG4gICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICBlID0gZXJyb3I7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIG91dHB1dC5wdXNoKHZhbHVlKTtcbiAgICAgICAgICAtLWk7XG4gICAgICB9XG4gICAgICArK2k7XG4gICAgfVxuICAgIHRocm93IG5ldyBQYXJzZU1vcmUoJ01hbGZvcm1lZCBpbmxpbmUgWUFNTCBzdHJpbmcgJyArIHNlcXVlbmNlKTtcbiAgfTtcblxuICBJbmxpbmUucGFyc2VNYXBwaW5nID0gZnVuY3Rpb24obWFwcGluZywgY29udGV4dCkge1xuICAgIHZhciBkb25lLCBpLCBrZXksIGxlbiwgb3V0cHV0LCBzaG91bGRDb250aW51ZVdoaWxlTG9vcCwgdmFsdWU7XG4gICAgb3V0cHV0ID0ge307XG4gICAgbGVuID0gbWFwcGluZy5sZW5ndGg7XG4gICAgaSA9IGNvbnRleHQuaTtcbiAgICBpICs9IDE7XG4gICAgc2hvdWxkQ29udGludWVXaGlsZUxvb3AgPSBmYWxzZTtcbiAgICB3aGlsZSAoaSA8IGxlbikge1xuICAgICAgY29udGV4dC5pID0gaTtcbiAgICAgIHN3aXRjaCAobWFwcGluZy5jaGFyQXQoaSkpIHtcbiAgICAgICAgY2FzZSAnICc6XG4gICAgICAgIGNhc2UgJywnOlxuICAgICAgICBjYXNlIFwiXFxuXCI6XG4gICAgICAgICAgKytpO1xuICAgICAgICAgIGNvbnRleHQuaSA9IGk7XG4gICAgICAgICAgc2hvdWxkQ29udGludWVXaGlsZUxvb3AgPSB0cnVlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICd9JzpcbiAgICAgICAgICByZXR1cm4gb3V0cHV0O1xuICAgICAgfVxuICAgICAgaWYgKHNob3VsZENvbnRpbnVlV2hpbGVMb29wKSB7XG4gICAgICAgIHNob3VsZENvbnRpbnVlV2hpbGVMb29wID0gZmFsc2U7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAga2V5ID0gdGhpcy5wYXJzZVNjYWxhcihtYXBwaW5nLCBbJzonLCAnICcsIFwiXFxuXCJdLCBbJ1wiJywgXCInXCJdLCBjb250ZXh0LCBmYWxzZSk7XG4gICAgICBpID0gY29udGV4dC5pO1xuICAgICAgZG9uZSA9IGZhbHNlO1xuICAgICAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICAgICAgY29udGV4dC5pID0gaTtcbiAgICAgICAgc3dpdGNoIChtYXBwaW5nLmNoYXJBdChpKSkge1xuICAgICAgICAgIGNhc2UgJ1snOlxuICAgICAgICAgICAgdmFsdWUgPSB0aGlzLnBhcnNlU2VxdWVuY2UobWFwcGluZywgY29udGV4dCk7XG4gICAgICAgICAgICBpID0gY29udGV4dC5pO1xuICAgICAgICAgICAgaWYgKG91dHB1dFtrZXldID09PSB2b2lkIDApIHtcbiAgICAgICAgICAgICAgb3V0cHV0W2tleV0gPSB2YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRvbmUgPSB0cnVlO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAneyc6XG4gICAgICAgICAgICB2YWx1ZSA9IHRoaXMucGFyc2VNYXBwaW5nKG1hcHBpbmcsIGNvbnRleHQpO1xuICAgICAgICAgICAgaSA9IGNvbnRleHQuaTtcbiAgICAgICAgICAgIGlmIChvdXRwdXRba2V5XSA9PT0gdm9pZCAwKSB7XG4gICAgICAgICAgICAgIG91dHB1dFtrZXldID0gdmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkb25lID0gdHJ1ZTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgJzonOlxuICAgICAgICAgIGNhc2UgJyAnOlxuICAgICAgICAgIGNhc2UgXCJcXG5cIjpcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICB2YWx1ZSA9IHRoaXMucGFyc2VTY2FsYXIobWFwcGluZywgWycsJywgJ30nXSwgWydcIicsIFwiJ1wiXSwgY29udGV4dCk7XG4gICAgICAgICAgICBpID0gY29udGV4dC5pO1xuICAgICAgICAgICAgaWYgKG91dHB1dFtrZXldID09PSB2b2lkIDApIHtcbiAgICAgICAgICAgICAgb3V0cHV0W2tleV0gPSB2YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRvbmUgPSB0cnVlO1xuICAgICAgICAgICAgLS1pO1xuICAgICAgICB9XG4gICAgICAgICsraTtcbiAgICAgICAgaWYgKGRvbmUpIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICB0aHJvdyBuZXcgUGFyc2VNb3JlKCdNYWxmb3JtZWQgaW5saW5lIFlBTUwgc3RyaW5nICcgKyBtYXBwaW5nKTtcbiAgfTtcblxuICBJbmxpbmUuZXZhbHVhdGVTY2FsYXIgPSBmdW5jdGlvbihzY2FsYXIsIGNvbnRleHQpIHtcbiAgICB2YXIgY2FzdCwgZGF0ZSwgZXhjZXB0aW9uT25JbnZhbGlkVHlwZSwgZmlyc3RDaGFyLCBmaXJzdFNwYWNlLCBmaXJzdFdvcmQsIG9iamVjdERlY29kZXIsIHJhdywgc2NhbGFyTG93ZXIsIHN1YlZhbHVlLCB0cmltbWVkU2NhbGFyO1xuICAgIHNjYWxhciA9IFV0aWxzLnRyaW0oc2NhbGFyKTtcbiAgICBzY2FsYXJMb3dlciA9IHNjYWxhci50b0xvd2VyQ2FzZSgpO1xuICAgIHN3aXRjaCAoc2NhbGFyTG93ZXIpIHtcbiAgICAgIGNhc2UgJ251bGwnOlxuICAgICAgY2FzZSAnJzpcbiAgICAgIGNhc2UgJ34nOlxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIGNhc2UgJ3RydWUnOlxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIGNhc2UgJ2ZhbHNlJzpcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgY2FzZSAnLmluZic6XG4gICAgICAgIHJldHVybiAyZTMwODtcbiAgICAgIGNhc2UgJy5uYW4nOlxuICAgICAgICByZXR1cm4gMC8wO1xuICAgICAgY2FzZSAnLS5pbmYnOlxuICAgICAgICByZXR1cm4gMmUzMDg7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBmaXJzdENoYXIgPSBzY2FsYXJMb3dlci5jaGFyQXQoMCk7XG4gICAgICAgIHN3aXRjaCAoZmlyc3RDaGFyKSB7XG4gICAgICAgICAgY2FzZSAnISc6XG4gICAgICAgICAgICBmaXJzdFNwYWNlID0gc2NhbGFyLmluZGV4T2YoJyAnKTtcbiAgICAgICAgICAgIGlmIChmaXJzdFNwYWNlID09PSAtMSkge1xuICAgICAgICAgICAgICBmaXJzdFdvcmQgPSBzY2FsYXJMb3dlcjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGZpcnN0V29yZCA9IHNjYWxhckxvd2VyLnNsaWNlKDAsIGZpcnN0U3BhY2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3dpdGNoIChmaXJzdFdvcmQpIHtcbiAgICAgICAgICAgICAgY2FzZSAnISc6XG4gICAgICAgICAgICAgICAgaWYgKGZpcnN0U3BhY2UgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gcGFyc2VJbnQodGhpcy5wYXJzZVNjYWxhcihzY2FsYXIuc2xpY2UoMikpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgIGNhc2UgJyFzdHInOlxuICAgICAgICAgICAgICAgIHJldHVybiBVdGlscy5sdHJpbShzY2FsYXIuc2xpY2UoNCkpO1xuICAgICAgICAgICAgICBjYXNlICchIXN0cic6XG4gICAgICAgICAgICAgICAgcmV0dXJuIFV0aWxzLmx0cmltKHNjYWxhci5zbGljZSg1KSk7XG4gICAgICAgICAgICAgIGNhc2UgJyEhaW50JzpcbiAgICAgICAgICAgICAgICByZXR1cm4gcGFyc2VJbnQodGhpcy5wYXJzZVNjYWxhcihzY2FsYXIuc2xpY2UoNSkpKTtcbiAgICAgICAgICAgICAgY2FzZSAnISFib29sJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gVXRpbHMucGFyc2VCb29sZWFuKHRoaXMucGFyc2VTY2FsYXIoc2NhbGFyLnNsaWNlKDYpKSwgZmFsc2UpO1xuICAgICAgICAgICAgICBjYXNlICchIWZsb2F0JzpcbiAgICAgICAgICAgICAgICByZXR1cm4gcGFyc2VGbG9hdCh0aGlzLnBhcnNlU2NhbGFyKHNjYWxhci5zbGljZSg3KSkpO1xuICAgICAgICAgICAgICBjYXNlICchIXRpbWVzdGFtcCc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIFV0aWxzLnN0cmluZ1RvRGF0ZShVdGlscy5sdHJpbShzY2FsYXIuc2xpY2UoMTEpKSk7XG4gICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgaWYgKGNvbnRleHQgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgY29udGV4dCA9IHtcbiAgICAgICAgICAgICAgICAgICAgZXhjZXB0aW9uT25JbnZhbGlkVHlwZTogdGhpcy5zZXR0aW5ncy5leGNlcHRpb25PbkludmFsaWRUeXBlLFxuICAgICAgICAgICAgICAgICAgICBvYmplY3REZWNvZGVyOiB0aGlzLnNldHRpbmdzLm9iamVjdERlY29kZXIsXG4gICAgICAgICAgICAgICAgICAgIGk6IDBcbiAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG9iamVjdERlY29kZXIgPSBjb250ZXh0Lm9iamVjdERlY29kZXIsIGV4Y2VwdGlvbk9uSW52YWxpZFR5cGUgPSBjb250ZXh0LmV4Y2VwdGlvbk9uSW52YWxpZFR5cGU7XG4gICAgICAgICAgICAgICAgaWYgKG9iamVjdERlY29kZXIpIHtcbiAgICAgICAgICAgICAgICAgIHRyaW1tZWRTY2FsYXIgPSBVdGlscy5ydHJpbShzY2FsYXIpO1xuICAgICAgICAgICAgICAgICAgZmlyc3RTcGFjZSA9IHRyaW1tZWRTY2FsYXIuaW5kZXhPZignICcpO1xuICAgICAgICAgICAgICAgICAgaWYgKGZpcnN0U3BhY2UgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBvYmplY3REZWNvZGVyKHRyaW1tZWRTY2FsYXIsIG51bGwpO1xuICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgc3ViVmFsdWUgPSBVdGlscy5sdHJpbSh0cmltbWVkU2NhbGFyLnNsaWNlKGZpcnN0U3BhY2UgKyAxKSk7XG4gICAgICAgICAgICAgICAgICAgIGlmICghKHN1YlZhbHVlLmxlbmd0aCA+IDApKSB7XG4gICAgICAgICAgICAgICAgICAgICAgc3ViVmFsdWUgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBvYmplY3REZWNvZGVyKHRyaW1tZWRTY2FsYXIuc2xpY2UoMCwgZmlyc3RTcGFjZSksIHN1YlZhbHVlKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGV4Y2VwdGlvbk9uSW52YWxpZFR5cGUpIHtcbiAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBQYXJzZUV4Y2VwdGlvbignQ3VzdG9tIG9iamVjdCBzdXBwb3J0IHdoZW4gcGFyc2luZyBhIFlBTUwgZmlsZSBoYXMgYmVlbiBkaXNhYmxlZC4nKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlICcwJzpcbiAgICAgICAgICAgIGlmICgnMHgnID09PSBzY2FsYXIuc2xpY2UoMCwgMikpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIFV0aWxzLmhleERlYyhzY2FsYXIpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChVdGlscy5pc0RpZ2l0cyhzY2FsYXIpKSB7XG4gICAgICAgICAgICAgIHJldHVybiBVdGlscy5vY3REZWMoc2NhbGFyKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoVXRpbHMuaXNOdW1lcmljKHNjYWxhcikpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHBhcnNlRmxvYXQoc2NhbGFyKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHJldHVybiBzY2FsYXI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlICcrJzpcbiAgICAgICAgICAgIGlmIChVdGlscy5pc0RpZ2l0cyhzY2FsYXIpKSB7XG4gICAgICAgICAgICAgIHJhdyA9IHNjYWxhcjtcbiAgICAgICAgICAgICAgY2FzdCA9IHBhcnNlSW50KHJhdyk7XG4gICAgICAgICAgICAgIGlmIChyYXcgPT09IFN0cmluZyhjYXN0KSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBjYXN0O1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiByYXc7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoVXRpbHMuaXNOdW1lcmljKHNjYWxhcikpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHBhcnNlRmxvYXQoc2NhbGFyKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5QQVRURVJOX1RIT1VTQU5EX05VTUVSSUNfU0NBTEFSLnRlc3Qoc2NhbGFyKSkge1xuICAgICAgICAgICAgICByZXR1cm4gcGFyc2VGbG9hdChzY2FsYXIucmVwbGFjZSgnLCcsICcnKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gc2NhbGFyO1xuICAgICAgICAgIGNhc2UgJy0nOlxuICAgICAgICAgICAgaWYgKFV0aWxzLmlzRGlnaXRzKHNjYWxhci5zbGljZSgxKSkpIHtcbiAgICAgICAgICAgICAgaWYgKCcwJyA9PT0gc2NhbGFyLmNoYXJBdCgxKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAtVXRpbHMub2N0RGVjKHNjYWxhci5zbGljZSgxKSk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmF3ID0gc2NhbGFyLnNsaWNlKDEpO1xuICAgICAgICAgICAgICAgIGNhc3QgPSBwYXJzZUludChyYXcpO1xuICAgICAgICAgICAgICAgIGlmIChyYXcgPT09IFN0cmluZyhjYXN0KSkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIC1jYXN0O1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gLXJhdztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoVXRpbHMuaXNOdW1lcmljKHNjYWxhcikpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHBhcnNlRmxvYXQoc2NhbGFyKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5QQVRURVJOX1RIT1VTQU5EX05VTUVSSUNfU0NBTEFSLnRlc3Qoc2NhbGFyKSkge1xuICAgICAgICAgICAgICByZXR1cm4gcGFyc2VGbG9hdChzY2FsYXIucmVwbGFjZSgnLCcsICcnKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gc2NhbGFyO1xuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBpZiAoZGF0ZSA9IFV0aWxzLnN0cmluZ1RvRGF0ZShzY2FsYXIpKSB7XG4gICAgICAgICAgICAgIHJldHVybiBkYXRlO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChVdGlscy5pc051bWVyaWMoc2NhbGFyKSkge1xuICAgICAgICAgICAgICByZXR1cm4gcGFyc2VGbG9hdChzY2FsYXIpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLlBBVFRFUk5fVEhPVVNBTkRfTlVNRVJJQ19TQ0FMQVIudGVzdChzY2FsYXIpKSB7XG4gICAgICAgICAgICAgIHJldHVybiBwYXJzZUZsb2F0KHNjYWxhci5yZXBsYWNlKCcsJywgJycpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBzY2FsYXI7XG4gICAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIElubGluZTtcblxufSkoKTtcblxubW9kdWxlLmV4cG9ydHMgPSBJbmxpbmU7XG4iLCIvLyBHZW5lcmF0ZWQgYnkgQ29mZmVlU2NyaXB0IDEuMTIuNFxudmFyIElubGluZSwgUGFyc2VFeGNlcHRpb24sIFBhcnNlTW9yZSwgUGFyc2VyLCBQYXR0ZXJuLCBVdGlscztcblxuSW5saW5lID0gcmVxdWlyZSgnLi9JbmxpbmUnKTtcblxuUGF0dGVybiA9IHJlcXVpcmUoJy4vUGF0dGVybicpO1xuXG5VdGlscyA9IHJlcXVpcmUoJy4vVXRpbHMnKTtcblxuUGFyc2VFeGNlcHRpb24gPSByZXF1aXJlKCcuL0V4Y2VwdGlvbi9QYXJzZUV4Y2VwdGlvbicpO1xuXG5QYXJzZU1vcmUgPSByZXF1aXJlKCcuL0V4Y2VwdGlvbi9QYXJzZU1vcmUnKTtcblxuUGFyc2VyID0gKGZ1bmN0aW9uKCkge1xuICBQYXJzZXIucHJvdG90eXBlLlBBVFRFUk5fRk9MREVEX1NDQUxBUl9BTEwgPSBuZXcgUGF0dGVybignXig/Oig/PHR5cGU+IVteXFxcXHw+XSopXFxcXHMrKT8oPzxzZXBhcmF0b3I+XFxcXHx8PikoPzxtb2RpZmllcnM+XFxcXCt8XFxcXC18XFxcXGQrfFxcXFwrXFxcXGQrfFxcXFwtXFxcXGQrfFxcXFxkK1xcXFwrfFxcXFxkK1xcXFwtKT8oPzxjb21tZW50cz4gKyMuKik/JCcpO1xuXG4gIFBhcnNlci5wcm90b3R5cGUuUEFUVEVSTl9GT0xERURfU0NBTEFSX0VORCA9IG5ldyBQYXR0ZXJuKCcoPzxzZXBhcmF0b3I+XFxcXHx8PikoPzxtb2RpZmllcnM+XFxcXCt8XFxcXC18XFxcXGQrfFxcXFwrXFxcXGQrfFxcXFwtXFxcXGQrfFxcXFxkK1xcXFwrfFxcXFxkK1xcXFwtKT8oPzxjb21tZW50cz4gKyMuKik/JCcpO1xuXG4gIFBhcnNlci5wcm90b3R5cGUuUEFUVEVSTl9TRVFVRU5DRV9JVEVNID0gbmV3IFBhdHRlcm4oJ15cXFxcLSgoPzxsZWFkc3BhY2VzPlxcXFxzKykoPzx2YWx1ZT4uKz8pKT9cXFxccyokJyk7XG5cbiAgUGFyc2VyLnByb3RvdHlwZS5QQVRURVJOX0FOQ0hPUl9WQUxVRSA9IG5ldyBQYXR0ZXJuKCdeJig/PHJlZj5bXiBdKykgKig/PHZhbHVlPi4qKScpO1xuXG4gIFBhcnNlci5wcm90b3R5cGUuUEFUVEVSTl9DT01QQUNUX05PVEFUSU9OID0gbmV3IFBhdHRlcm4oJ14oPzxrZXk+JyArIElubGluZS5SRUdFWF9RVU9URURfU1RSSU5HICsgJ3xbXiBcXCdcIlxcXFx7XFxcXFtdLio/KSAqXFxcXDooXFxcXHMrKD88dmFsdWU+Lis/KSk/XFxcXHMqJCcpO1xuXG4gIFBhcnNlci5wcm90b3R5cGUuUEFUVEVSTl9NQVBQSU5HX0lURU0gPSBuZXcgUGF0dGVybignXig/PGtleT4nICsgSW5saW5lLlJFR0VYX1FVT1RFRF9TVFJJTkcgKyAnfFteIFxcJ1wiXFxcXFtcXFxce10uKj8pICpcXFxcOihcXFxccysoPzx2YWx1ZT4uKz8pKT9cXFxccyokJyk7XG5cbiAgUGFyc2VyLnByb3RvdHlwZS5QQVRURVJOX0RFQ0lNQUwgPSBuZXcgUGF0dGVybignXFxcXGQrJyk7XG5cbiAgUGFyc2VyLnByb3RvdHlwZS5QQVRURVJOX0lOREVOVF9TUEFDRVMgPSBuZXcgUGF0dGVybignXiArJyk7XG5cbiAgUGFyc2VyLnByb3RvdHlwZS5QQVRURVJOX1RSQUlMSU5HX0xJTkVTID0gbmV3IFBhdHRlcm4oJyhcXG4qKSQnKTtcblxuICBQYXJzZXIucHJvdG90eXBlLlBBVFRFUk5fWUFNTF9IRUFERVIgPSBuZXcgUGF0dGVybignXlxcXFwlWUFNTFs6IF1bXFxcXGRcXFxcLl0rLipcXG4nLCAnbScpO1xuXG4gIFBhcnNlci5wcm90b3R5cGUuUEFUVEVSTl9MRUFESU5HX0NPTU1FTlRTID0gbmV3IFBhdHRlcm4oJ14oXFxcXCMuKj9cXG4pKycsICdtJyk7XG5cbiAgUGFyc2VyLnByb3RvdHlwZS5QQVRURVJOX0RPQ1VNRU5UX01BUktFUl9TVEFSVCA9IG5ldyBQYXR0ZXJuKCdeXFxcXC1cXFxcLVxcXFwtLio/XFxuJywgJ20nKTtcblxuICBQYXJzZXIucHJvdG90eXBlLlBBVFRFUk5fRE9DVU1FTlRfTUFSS0VSX0VORCA9IG5ldyBQYXR0ZXJuKCdeXFxcXC5cXFxcLlxcXFwuXFxcXHMqJCcsICdtJyk7XG5cbiAgUGFyc2VyLnByb3RvdHlwZS5QQVRURVJOX0ZPTERFRF9TQ0FMQVJfQllfSU5ERU5UQVRJT04gPSB7fTtcblxuICBQYXJzZXIucHJvdG90eXBlLkNPTlRFWFRfTk9ORSA9IDA7XG5cbiAgUGFyc2VyLnByb3RvdHlwZS5DT05URVhUX1NFUVVFTkNFID0gMTtcblxuICBQYXJzZXIucHJvdG90eXBlLkNPTlRFWFRfTUFQUElORyA9IDI7XG5cbiAgZnVuY3Rpb24gUGFyc2VyKG9mZnNldCkge1xuICAgIHRoaXMub2Zmc2V0ID0gb2Zmc2V0ICE9IG51bGwgPyBvZmZzZXQgOiAwO1xuICAgIHRoaXMubGluZXMgPSBbXTtcbiAgICB0aGlzLmN1cnJlbnRMaW5lTmIgPSAtMTtcbiAgICB0aGlzLmN1cnJlbnRMaW5lID0gJyc7XG4gICAgdGhpcy5yZWZzID0ge307XG4gIH1cblxuICBQYXJzZXIucHJvdG90eXBlLnBhcnNlID0gZnVuY3Rpb24odmFsdWUsIGV4Y2VwdGlvbk9uSW52YWxpZFR5cGUsIG9iamVjdERlY29kZXIpIHtcbiAgICB2YXIgYWxpYXMsIGFsbG93T3ZlcndyaXRlLCBibG9jaywgYywgY29udGV4dCwgZGF0YSwgZSwgZmlyc3QsIGksIGluZGVudCwgaXNSZWYsIGosIGssIGtleSwgbCwgbGFzdEtleSwgbGVuLCBsZW4xLCBsZW4yLCBsZW4zLCBsaW5lQ291bnQsIG0sIG1hdGNoZXMsIG1lcmdlTm9kZSwgbiwgbmFtZSwgcGFyc2VkLCBwYXJzZWRJdGVtLCBwYXJzZXIsIHJlZiwgcmVmMSwgcmVmMiwgcmVmTmFtZSwgcmVmVmFsdWUsIHZhbCwgdmFsdWVzO1xuICAgIGlmIChleGNlcHRpb25PbkludmFsaWRUeXBlID09IG51bGwpIHtcbiAgICAgIGV4Y2VwdGlvbk9uSW52YWxpZFR5cGUgPSBmYWxzZTtcbiAgICB9XG4gICAgaWYgKG9iamVjdERlY29kZXIgPT0gbnVsbCkge1xuICAgICAgb2JqZWN0RGVjb2RlciA9IG51bGw7XG4gICAgfVxuICAgIHRoaXMuY3VycmVudExpbmVOYiA9IC0xO1xuICAgIHRoaXMuY3VycmVudExpbmUgPSAnJztcbiAgICB0aGlzLmxpbmVzID0gdGhpcy5jbGVhbnVwKHZhbHVlKS5zcGxpdChcIlxcblwiKTtcbiAgICBkYXRhID0gbnVsbDtcbiAgICBjb250ZXh0ID0gdGhpcy5DT05URVhUX05PTkU7XG4gICAgYWxsb3dPdmVyd3JpdGUgPSBmYWxzZTtcbiAgICB3aGlsZSAodGhpcy5tb3ZlVG9OZXh0TGluZSgpKSB7XG4gICAgICBpZiAodGhpcy5pc0N1cnJlbnRMaW5lRW1wdHkoKSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGlmIChcIlxcdFwiID09PSB0aGlzLmN1cnJlbnRMaW5lWzBdKSB7XG4gICAgICAgIHRocm93IG5ldyBQYXJzZUV4Y2VwdGlvbignQSBZQU1MIGZpbGUgY2Fubm90IGNvbnRhaW4gdGFicyBhcyBpbmRlbnRhdGlvbi4nLCB0aGlzLmdldFJlYWxDdXJyZW50TGluZU5iKCkgKyAxLCB0aGlzLmN1cnJlbnRMaW5lKTtcbiAgICAgIH1cbiAgICAgIGlzUmVmID0gbWVyZ2VOb2RlID0gZmFsc2U7XG4gICAgICBpZiAodmFsdWVzID0gdGhpcy5QQVRURVJOX1NFUVVFTkNFX0lURU0uZXhlYyh0aGlzLmN1cnJlbnRMaW5lKSkge1xuICAgICAgICBpZiAodGhpcy5DT05URVhUX01BUFBJTkcgPT09IGNvbnRleHQpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgUGFyc2VFeGNlcHRpb24oJ1lvdSBjYW5ub3QgZGVmaW5lIGEgc2VxdWVuY2UgaXRlbSB3aGVuIGluIGEgbWFwcGluZycpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnRleHQgPSB0aGlzLkNPTlRFWFRfU0VRVUVOQ0U7XG4gICAgICAgIGlmIChkYXRhID09IG51bGwpIHtcbiAgICAgICAgICBkYXRhID0gW107XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCh2YWx1ZXMudmFsdWUgIT0gbnVsbCkgJiYgKG1hdGNoZXMgPSB0aGlzLlBBVFRFUk5fQU5DSE9SX1ZBTFVFLmV4ZWModmFsdWVzLnZhbHVlKSkpIHtcbiAgICAgICAgICBpc1JlZiA9IG1hdGNoZXMucmVmO1xuICAgICAgICAgIHZhbHVlcy52YWx1ZSA9IG1hdGNoZXMudmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCEodmFsdWVzLnZhbHVlICE9IG51bGwpIHx8ICcnID09PSBVdGlscy50cmltKHZhbHVlcy52YWx1ZSwgJyAnKSB8fCBVdGlscy5sdHJpbSh2YWx1ZXMudmFsdWUsICcgJykuaW5kZXhPZignIycpID09PSAwKSB7XG4gICAgICAgICAgaWYgKHRoaXMuY3VycmVudExpbmVOYiA8IHRoaXMubGluZXMubGVuZ3RoIC0gMSAmJiAhdGhpcy5pc05leHRMaW5lVW5JbmRlbnRlZENvbGxlY3Rpb24oKSkge1xuICAgICAgICAgICAgYyA9IHRoaXMuZ2V0UmVhbEN1cnJlbnRMaW5lTmIoKSArIDE7XG4gICAgICAgICAgICBwYXJzZXIgPSBuZXcgUGFyc2VyKGMpO1xuICAgICAgICAgICAgcGFyc2VyLnJlZnMgPSB0aGlzLnJlZnM7XG4gICAgICAgICAgICBkYXRhLnB1c2gocGFyc2VyLnBhcnNlKHRoaXMuZ2V0TmV4dEVtYmVkQmxvY2sobnVsbCwgdHJ1ZSksIGV4Y2VwdGlvbk9uSW52YWxpZFR5cGUsIG9iamVjdERlY29kZXIpKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZGF0YS5wdXNoKG51bGwpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoKChyZWYgPSB2YWx1ZXMubGVhZHNwYWNlcykgIT0gbnVsbCA/IHJlZi5sZW5ndGggOiB2b2lkIDApICYmIChtYXRjaGVzID0gdGhpcy5QQVRURVJOX0NPTVBBQ1RfTk9UQVRJT04uZXhlYyh2YWx1ZXMudmFsdWUpKSkge1xuICAgICAgICAgICAgYyA9IHRoaXMuZ2V0UmVhbEN1cnJlbnRMaW5lTmIoKTtcbiAgICAgICAgICAgIHBhcnNlciA9IG5ldyBQYXJzZXIoYyk7XG4gICAgICAgICAgICBwYXJzZXIucmVmcyA9IHRoaXMucmVmcztcbiAgICAgICAgICAgIGJsb2NrID0gdmFsdWVzLnZhbHVlO1xuICAgICAgICAgICAgaW5kZW50ID0gdGhpcy5nZXRDdXJyZW50TGluZUluZGVudGF0aW9uKCk7XG4gICAgICAgICAgICBpZiAodGhpcy5pc05leHRMaW5lSW5kZW50ZWQoZmFsc2UpKSB7XG4gICAgICAgICAgICAgIGJsb2NrICs9IFwiXFxuXCIgKyB0aGlzLmdldE5leHRFbWJlZEJsb2NrKGluZGVudCArIHZhbHVlcy5sZWFkc3BhY2VzLmxlbmd0aCArIDEsIHRydWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGF0YS5wdXNoKHBhcnNlci5wYXJzZShibG9jaywgZXhjZXB0aW9uT25JbnZhbGlkVHlwZSwgb2JqZWN0RGVjb2RlcikpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkYXRhLnB1c2godGhpcy5wYXJzZVZhbHVlKHZhbHVlcy52YWx1ZSwgZXhjZXB0aW9uT25JbnZhbGlkVHlwZSwgb2JqZWN0RGVjb2RlcikpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICgodmFsdWVzID0gdGhpcy5QQVRURVJOX01BUFBJTkdfSVRFTS5leGVjKHRoaXMuY3VycmVudExpbmUpKSAmJiB2YWx1ZXMua2V5LmluZGV4T2YoJyAjJykgPT09IC0xKSB7XG4gICAgICAgIGlmICh0aGlzLkNPTlRFWFRfU0VRVUVOQ0UgPT09IGNvbnRleHQpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgUGFyc2VFeGNlcHRpb24oJ1lvdSBjYW5ub3QgZGVmaW5lIGEgbWFwcGluZyBpdGVtIHdoZW4gaW4gYSBzZXF1ZW5jZScpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnRleHQgPSB0aGlzLkNPTlRFWFRfTUFQUElORztcbiAgICAgICAgaWYgKGRhdGEgPT0gbnVsbCkge1xuICAgICAgICAgIGRhdGEgPSB7fTtcbiAgICAgICAgfVxuICAgICAgICBJbmxpbmUuY29uZmlndXJlKGV4Y2VwdGlvbk9uSW52YWxpZFR5cGUsIG9iamVjdERlY29kZXIpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGtleSA9IElubGluZS5wYXJzZVNjYWxhcih2YWx1ZXMua2V5KTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICBlID0gZXJyb3I7XG4gICAgICAgICAgZS5wYXJzZWRMaW5lID0gdGhpcy5nZXRSZWFsQ3VycmVudExpbmVOYigpICsgMTtcbiAgICAgICAgICBlLnNuaXBwZXQgPSB0aGlzLmN1cnJlbnRMaW5lO1xuICAgICAgICAgIHRocm93IGU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCc8PCcgPT09IGtleSkge1xuICAgICAgICAgIG1lcmdlTm9kZSA9IHRydWU7XG4gICAgICAgICAgYWxsb3dPdmVyd3JpdGUgPSB0cnVlO1xuICAgICAgICAgIGlmICgoKHJlZjEgPSB2YWx1ZXMudmFsdWUpICE9IG51bGwgPyByZWYxLmluZGV4T2YoJyonKSA6IHZvaWQgMCkgPT09IDApIHtcbiAgICAgICAgICAgIHJlZk5hbWUgPSB2YWx1ZXMudmFsdWUuc2xpY2UoMSk7XG4gICAgICAgICAgICBpZiAodGhpcy5yZWZzW3JlZk5hbWVdID09IG51bGwpIHtcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IFBhcnNlRXhjZXB0aW9uKCdSZWZlcmVuY2UgXCInICsgcmVmTmFtZSArICdcIiBkb2VzIG5vdCBleGlzdC4nLCB0aGlzLmdldFJlYWxDdXJyZW50TGluZU5iKCkgKyAxLCB0aGlzLmN1cnJlbnRMaW5lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlZlZhbHVlID0gdGhpcy5yZWZzW3JlZk5hbWVdO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiByZWZWYWx1ZSAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IFBhcnNlRXhjZXB0aW9uKCdZQU1MIG1lcmdlIGtleXMgdXNlZCB3aXRoIGEgc2NhbGFyIHZhbHVlIGluc3RlYWQgb2YgYW4gb2JqZWN0LicsIHRoaXMuZ2V0UmVhbEN1cnJlbnRMaW5lTmIoKSArIDEsIHRoaXMuY3VycmVudExpbmUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHJlZlZhbHVlIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgICAgICAgICAgZm9yIChpID0gaiA9IDAsIGxlbiA9IHJlZlZhbHVlLmxlbmd0aDsgaiA8IGxlbjsgaSA9ICsraikge1xuICAgICAgICAgICAgICAgIHZhbHVlID0gcmVmVmFsdWVbaV07XG4gICAgICAgICAgICAgICAgaWYgKGRhdGFbbmFtZSA9IFN0cmluZyhpKV0gPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgZGF0YVtuYW1lXSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgZm9yIChrZXkgaW4gcmVmVmFsdWUpIHtcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHJlZlZhbHVlW2tleV07XG4gICAgICAgICAgICAgICAgaWYgKGRhdGFba2V5XSA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICBkYXRhW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKCh2YWx1ZXMudmFsdWUgIT0gbnVsbCkgJiYgdmFsdWVzLnZhbHVlICE9PSAnJykge1xuICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlcy52YWx1ZTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHZhbHVlID0gdGhpcy5nZXROZXh0RW1iZWRCbG9jaygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYyA9IHRoaXMuZ2V0UmVhbEN1cnJlbnRMaW5lTmIoKSArIDE7XG4gICAgICAgICAgICBwYXJzZXIgPSBuZXcgUGFyc2VyKGMpO1xuICAgICAgICAgICAgcGFyc2VyLnJlZnMgPSB0aGlzLnJlZnM7XG4gICAgICAgICAgICBwYXJzZWQgPSBwYXJzZXIucGFyc2UodmFsdWUsIGV4Y2VwdGlvbk9uSW52YWxpZFR5cGUpO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBwYXJzZWQgIT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgIHRocm93IG5ldyBQYXJzZUV4Y2VwdGlvbignWUFNTCBtZXJnZSBrZXlzIHVzZWQgd2l0aCBhIHNjYWxhciB2YWx1ZSBpbnN0ZWFkIG9mIGFuIG9iamVjdC4nLCB0aGlzLmdldFJlYWxDdXJyZW50TGluZU5iKCkgKyAxLCB0aGlzLmN1cnJlbnRMaW5lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChwYXJzZWQgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgICAgICAgICBmb3IgKGwgPSAwLCBsZW4xID0gcGFyc2VkLmxlbmd0aDsgbCA8IGxlbjE7IGwrKykge1xuICAgICAgICAgICAgICAgIHBhcnNlZEl0ZW0gPSBwYXJzZWRbbF07XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBwYXJzZWRJdGVtICE9PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFBhcnNlRXhjZXB0aW9uKCdNZXJnZSBpdGVtcyBtdXN0IGJlIG9iamVjdHMuJywgdGhpcy5nZXRSZWFsQ3VycmVudExpbmVOYigpICsgMSwgcGFyc2VkSXRlbSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChwYXJzZWRJdGVtIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgICAgICAgICAgICAgIGZvciAoaSA9IG0gPSAwLCBsZW4yID0gcGFyc2VkSXRlbS5sZW5ndGg7IG0gPCBsZW4yOyBpID0gKyttKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gcGFyc2VkSXRlbVtpXTtcbiAgICAgICAgICAgICAgICAgICAgayA9IFN0cmluZyhpKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFkYXRhLmhhc093blByb3BlcnR5KGspKSB7XG4gICAgICAgICAgICAgICAgICAgICAgZGF0YVtrXSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIGZvciAoa2V5IGluIHBhcnNlZEl0ZW0pIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBwYXJzZWRJdGVtW2tleV07XG4gICAgICAgICAgICAgICAgICAgIGlmICghZGF0YS5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgZGF0YVtrZXldID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGZvciAoa2V5IGluIHBhcnNlZCkge1xuICAgICAgICAgICAgICAgIHZhbHVlID0gcGFyc2VkW2tleV07XG4gICAgICAgICAgICAgICAgaWYgKCFkYXRhLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgICAgICAgICAgIGRhdGFba2V5XSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICgodmFsdWVzLnZhbHVlICE9IG51bGwpICYmIChtYXRjaGVzID0gdGhpcy5QQVRURVJOX0FOQ0hPUl9WQUxVRS5leGVjKHZhbHVlcy52YWx1ZSkpKSB7XG4gICAgICAgICAgaXNSZWYgPSBtYXRjaGVzLnJlZjtcbiAgICAgICAgICB2YWx1ZXMudmFsdWUgPSBtYXRjaGVzLnZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXJnZU5vZGUpIHtcblxuICAgICAgICB9IGVsc2UgaWYgKCEodmFsdWVzLnZhbHVlICE9IG51bGwpIHx8ICcnID09PSBVdGlscy50cmltKHZhbHVlcy52YWx1ZSwgJyAnKSB8fCBVdGlscy5sdHJpbSh2YWx1ZXMudmFsdWUsICcgJykuaW5kZXhPZignIycpID09PSAwKSB7XG4gICAgICAgICAgaWYgKCEodGhpcy5pc05leHRMaW5lSW5kZW50ZWQoKSkgJiYgISh0aGlzLmlzTmV4dExpbmVVbkluZGVudGVkQ29sbGVjdGlvbigpKSkge1xuICAgICAgICAgICAgaWYgKGFsbG93T3ZlcndyaXRlIHx8IGRhdGFba2V5XSA9PT0gdm9pZCAwKSB7XG4gICAgICAgICAgICAgIGRhdGFba2V5XSA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGMgPSB0aGlzLmdldFJlYWxDdXJyZW50TGluZU5iKCkgKyAxO1xuICAgICAgICAgICAgcGFyc2VyID0gbmV3IFBhcnNlcihjKTtcbiAgICAgICAgICAgIHBhcnNlci5yZWZzID0gdGhpcy5yZWZzO1xuICAgICAgICAgICAgdmFsID0gcGFyc2VyLnBhcnNlKHRoaXMuZ2V0TmV4dEVtYmVkQmxvY2soKSwgZXhjZXB0aW9uT25JbnZhbGlkVHlwZSwgb2JqZWN0RGVjb2Rlcik7XG4gICAgICAgICAgICBpZiAoYWxsb3dPdmVyd3JpdGUgfHwgZGF0YVtrZXldID09PSB2b2lkIDApIHtcbiAgICAgICAgICAgICAgZGF0YVtrZXldID0gdmFsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YWwgPSB0aGlzLnBhcnNlVmFsdWUodmFsdWVzLnZhbHVlLCBleGNlcHRpb25PbkludmFsaWRUeXBlLCBvYmplY3REZWNvZGVyKTtcbiAgICAgICAgICBpZiAoYWxsb3dPdmVyd3JpdGUgfHwgZGF0YVtrZXldID09PSB2b2lkIDApIHtcbiAgICAgICAgICAgIGRhdGFba2V5XSA9IHZhbDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxpbmVDb3VudCA9IHRoaXMubGluZXMubGVuZ3RoO1xuICAgICAgICBpZiAoMSA9PT0gbGluZUNvdW50IHx8ICgyID09PSBsaW5lQ291bnQgJiYgVXRpbHMuaXNFbXB0eSh0aGlzLmxpbmVzWzFdKSkpIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgdmFsdWUgPSBJbmxpbmUucGFyc2UodGhpcy5saW5lc1swXSwgZXhjZXB0aW9uT25JbnZhbGlkVHlwZSwgb2JqZWN0RGVjb2Rlcik7XG4gICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGUgPSBlcnJvcjtcbiAgICAgICAgICAgIGUucGFyc2VkTGluZSA9IHRoaXMuZ2V0UmVhbEN1cnJlbnRMaW5lTmIoKSArIDE7XG4gICAgICAgICAgICBlLnNuaXBwZXQgPSB0aGlzLmN1cnJlbnRMaW5lO1xuICAgICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICAgICAgICAgIGZpcnN0ID0gdmFsdWVbMF07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBmb3IgKGtleSBpbiB2YWx1ZSkge1xuICAgICAgICAgICAgICAgIGZpcnN0ID0gdmFsdWVba2V5XTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHR5cGVvZiBmaXJzdCA9PT0gJ3N0cmluZycgJiYgZmlyc3QuaW5kZXhPZignKicpID09PSAwKSB7XG4gICAgICAgICAgICAgIGRhdGEgPSBbXTtcbiAgICAgICAgICAgICAgZm9yIChuID0gMCwgbGVuMyA9IHZhbHVlLmxlbmd0aDsgbiA8IGxlbjM7IG4rKykge1xuICAgICAgICAgICAgICAgIGFsaWFzID0gdmFsdWVbbl07XG4gICAgICAgICAgICAgICAgZGF0YS5wdXNoKHRoaXMucmVmc1thbGlhcy5zbGljZSgxKV0pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHZhbHVlID0gZGF0YTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9IGVsc2UgaWYgKChyZWYyID0gVXRpbHMubHRyaW0odmFsdWUpLmNoYXJBdCgwKSkgPT09ICdbJyB8fCByZWYyID09PSAneycpIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIElubGluZS5wYXJzZSh2YWx1ZSwgZXhjZXB0aW9uT25JbnZhbGlkVHlwZSwgb2JqZWN0RGVjb2Rlcik7XG4gICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGUgPSBlcnJvcjtcbiAgICAgICAgICAgIGUucGFyc2VkTGluZSA9IHRoaXMuZ2V0UmVhbEN1cnJlbnRMaW5lTmIoKSArIDE7XG4gICAgICAgICAgICBlLnNuaXBwZXQgPSB0aGlzLmN1cnJlbnRMaW5lO1xuICAgICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgbmV3IFBhcnNlRXhjZXB0aW9uKCdVbmFibGUgdG8gcGFyc2UuJywgdGhpcy5nZXRSZWFsQ3VycmVudExpbmVOYigpICsgMSwgdGhpcy5jdXJyZW50TGluZSk7XG4gICAgICB9XG4gICAgICBpZiAoaXNSZWYpIHtcbiAgICAgICAgaWYgKGRhdGEgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgICAgIHRoaXMucmVmc1tpc1JlZl0gPSBkYXRhW2RhdGEubGVuZ3RoIC0gMV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbGFzdEtleSA9IG51bGw7XG4gICAgICAgICAgZm9yIChrZXkgaW4gZGF0YSkge1xuICAgICAgICAgICAgbGFzdEtleSA9IGtleTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5yZWZzW2lzUmVmXSA9IGRhdGFbbGFzdEtleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKFV0aWxzLmlzRW1wdHkoZGF0YSkpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG4gIH07XG5cbiAgUGFyc2VyLnByb3RvdHlwZS5nZXRSZWFsQ3VycmVudExpbmVOYiA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLmN1cnJlbnRMaW5lTmIgKyB0aGlzLm9mZnNldDtcbiAgfTtcblxuICBQYXJzZXIucHJvdG90eXBlLmdldEN1cnJlbnRMaW5lSW5kZW50YXRpb24gPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5jdXJyZW50TGluZS5sZW5ndGggLSBVdGlscy5sdHJpbSh0aGlzLmN1cnJlbnRMaW5lLCAnICcpLmxlbmd0aDtcbiAgfTtcblxuICBQYXJzZXIucHJvdG90eXBlLmdldE5leHRFbWJlZEJsb2NrID0gZnVuY3Rpb24oaW5kZW50YXRpb24sIGluY2x1ZGVVbmluZGVudGVkQ29sbGVjdGlvbikge1xuICAgIHZhciBkYXRhLCBpbmRlbnQsIGlzSXRVbmluZGVudGVkQ29sbGVjdGlvbiwgbmV3SW5kZW50LCByZW1vdmVDb21tZW50cywgcmVtb3ZlQ29tbWVudHNQYXR0ZXJuLCB1bmluZGVudGVkRW1iZWRCbG9jaztcbiAgICBpZiAoaW5kZW50YXRpb24gPT0gbnVsbCkge1xuICAgICAgaW5kZW50YXRpb24gPSBudWxsO1xuICAgIH1cbiAgICBpZiAoaW5jbHVkZVVuaW5kZW50ZWRDb2xsZWN0aW9uID09IG51bGwpIHtcbiAgICAgIGluY2x1ZGVVbmluZGVudGVkQ29sbGVjdGlvbiA9IGZhbHNlO1xuICAgIH1cbiAgICB0aGlzLm1vdmVUb05leHRMaW5lKCk7XG4gICAgaWYgKGluZGVudGF0aW9uID09IG51bGwpIHtcbiAgICAgIG5ld0luZGVudCA9IHRoaXMuZ2V0Q3VycmVudExpbmVJbmRlbnRhdGlvbigpO1xuICAgICAgdW5pbmRlbnRlZEVtYmVkQmxvY2sgPSB0aGlzLmlzU3RyaW5nVW5JbmRlbnRlZENvbGxlY3Rpb25JdGVtKHRoaXMuY3VycmVudExpbmUpO1xuICAgICAgaWYgKCEodGhpcy5pc0N1cnJlbnRMaW5lRW1wdHkoKSkgJiYgMCA9PT0gbmV3SW5kZW50ICYmICF1bmluZGVudGVkRW1iZWRCbG9jaykge1xuICAgICAgICB0aHJvdyBuZXcgUGFyc2VFeGNlcHRpb24oJ0luZGVudGF0aW9uIHByb2JsZW0uJywgdGhpcy5nZXRSZWFsQ3VycmVudExpbmVOYigpICsgMSwgdGhpcy5jdXJyZW50TGluZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIG5ld0luZGVudCA9IGluZGVudGF0aW9uO1xuICAgIH1cbiAgICBkYXRhID0gW3RoaXMuY3VycmVudExpbmUuc2xpY2UobmV3SW5kZW50KV07XG4gICAgaWYgKCFpbmNsdWRlVW5pbmRlbnRlZENvbGxlY3Rpb24pIHtcbiAgICAgIGlzSXRVbmluZGVudGVkQ29sbGVjdGlvbiA9IHRoaXMuaXNTdHJpbmdVbkluZGVudGVkQ29sbGVjdGlvbkl0ZW0odGhpcy5jdXJyZW50TGluZSk7XG4gICAgfVxuICAgIHJlbW92ZUNvbW1lbnRzUGF0dGVybiA9IHRoaXMuUEFUVEVSTl9GT0xERURfU0NBTEFSX0VORDtcbiAgICByZW1vdmVDb21tZW50cyA9ICFyZW1vdmVDb21tZW50c1BhdHRlcm4udGVzdCh0aGlzLmN1cnJlbnRMaW5lKTtcbiAgICB3aGlsZSAodGhpcy5tb3ZlVG9OZXh0TGluZSgpKSB7XG4gICAgICBpbmRlbnQgPSB0aGlzLmdldEN1cnJlbnRMaW5lSW5kZW50YXRpb24oKTtcbiAgICAgIGlmIChpbmRlbnQgPT09IG5ld0luZGVudCkge1xuICAgICAgICByZW1vdmVDb21tZW50cyA9ICFyZW1vdmVDb21tZW50c1BhdHRlcm4udGVzdCh0aGlzLmN1cnJlbnRMaW5lKTtcbiAgICAgIH1cbiAgICAgIGlmIChyZW1vdmVDb21tZW50cyAmJiB0aGlzLmlzQ3VycmVudExpbmVDb21tZW50KCkpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5pc0N1cnJlbnRMaW5lQmxhbmsoKSkge1xuICAgICAgICBkYXRhLnB1c2godGhpcy5jdXJyZW50TGluZS5zbGljZShuZXdJbmRlbnQpKTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBpZiAoaXNJdFVuaW5kZW50ZWRDb2xsZWN0aW9uICYmICF0aGlzLmlzU3RyaW5nVW5JbmRlbnRlZENvbGxlY3Rpb25JdGVtKHRoaXMuY3VycmVudExpbmUpICYmIGluZGVudCA9PT0gbmV3SW5kZW50KSB7XG4gICAgICAgIHRoaXMubW92ZVRvUHJldmlvdXNMaW5lKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgaWYgKGluZGVudCA+PSBuZXdJbmRlbnQpIHtcbiAgICAgICAgZGF0YS5wdXNoKHRoaXMuY3VycmVudExpbmUuc2xpY2UobmV3SW5kZW50KSk7XG4gICAgICB9IGVsc2UgaWYgKFV0aWxzLmx0cmltKHRoaXMuY3VycmVudExpbmUpLmNoYXJBdCgwKSA9PT0gJyMnKSB7XG5cbiAgICAgIH0gZWxzZSBpZiAoMCA9PT0gaW5kZW50KSB7XG4gICAgICAgIHRoaXMubW92ZVRvUHJldmlvdXNMaW5lKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IFBhcnNlRXhjZXB0aW9uKCdJbmRlbnRhdGlvbiBwcm9ibGVtLicsIHRoaXMuZ2V0UmVhbEN1cnJlbnRMaW5lTmIoKSArIDEsIHRoaXMuY3VycmVudExpbmUpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZGF0YS5qb2luKFwiXFxuXCIpO1xuICB9O1xuXG4gIFBhcnNlci5wcm90b3R5cGUubW92ZVRvTmV4dExpbmUgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy5jdXJyZW50TGluZU5iID49IHRoaXMubGluZXMubGVuZ3RoIC0gMSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB0aGlzLmN1cnJlbnRMaW5lID0gdGhpcy5saW5lc1srK3RoaXMuY3VycmVudExpbmVOYl07XG4gICAgcmV0dXJuIHRydWU7XG4gIH07XG5cbiAgUGFyc2VyLnByb3RvdHlwZS5tb3ZlVG9QcmV2aW91c0xpbmUgPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLmN1cnJlbnRMaW5lID0gdGhpcy5saW5lc1stLXRoaXMuY3VycmVudExpbmVOYl07XG4gIH07XG5cbiAgUGFyc2VyLnByb3RvdHlwZS5wYXJzZVZhbHVlID0gZnVuY3Rpb24odmFsdWUsIGV4Y2VwdGlvbk9uSW52YWxpZFR5cGUsIG9iamVjdERlY29kZXIpIHtcbiAgICB2YXIgZSwgZm9sZGVkSW5kZW50LCBtYXRjaGVzLCBtb2RpZmllcnMsIHBvcywgcmVmLCByZWYxLCB2YWw7XG4gICAgaWYgKDAgPT09IHZhbHVlLmluZGV4T2YoJyonKSkge1xuICAgICAgcG9zID0gdmFsdWUuaW5kZXhPZignIycpO1xuICAgICAgaWYgKHBvcyAhPT0gLTEpIHtcbiAgICAgICAgdmFsdWUgPSB2YWx1ZS5zdWJzdHIoMSwgcG9zIC0gMik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YWx1ZSA9IHZhbHVlLnNsaWNlKDEpO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMucmVmc1t2YWx1ZV0gPT09IHZvaWQgMCkge1xuICAgICAgICB0aHJvdyBuZXcgUGFyc2VFeGNlcHRpb24oJ1JlZmVyZW5jZSBcIicgKyB2YWx1ZSArICdcIiBkb2VzIG5vdCBleGlzdC4nLCB0aGlzLmN1cnJlbnRMaW5lKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLnJlZnNbdmFsdWVdO1xuICAgIH1cbiAgICBpZiAobWF0Y2hlcyA9IHRoaXMuUEFUVEVSTl9GT0xERURfU0NBTEFSX0FMTC5leGVjKHZhbHVlKSkge1xuICAgICAgbW9kaWZpZXJzID0gKHJlZiA9IG1hdGNoZXMubW9kaWZpZXJzKSAhPSBudWxsID8gcmVmIDogJyc7XG4gICAgICBmb2xkZWRJbmRlbnQgPSBNYXRoLmFicyhwYXJzZUludChtb2RpZmllcnMpKTtcbiAgICAgIGlmIChpc05hTihmb2xkZWRJbmRlbnQpKSB7XG4gICAgICAgIGZvbGRlZEluZGVudCA9IDA7XG4gICAgICB9XG4gICAgICB2YWwgPSB0aGlzLnBhcnNlRm9sZGVkU2NhbGFyKG1hdGNoZXMuc2VwYXJhdG9yLCB0aGlzLlBBVFRFUk5fREVDSU1BTC5yZXBsYWNlKG1vZGlmaWVycywgJycpLCBmb2xkZWRJbmRlbnQpO1xuICAgICAgaWYgKG1hdGNoZXMudHlwZSAhPSBudWxsKSB7XG4gICAgICAgIElubGluZS5jb25maWd1cmUoZXhjZXB0aW9uT25JbnZhbGlkVHlwZSwgb2JqZWN0RGVjb2Rlcik7XG4gICAgICAgIHJldHVybiBJbmxpbmUucGFyc2VTY2FsYXIobWF0Y2hlcy50eXBlICsgJyAnICsgdmFsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB2YWw7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICgocmVmMSA9IHZhbHVlLmNoYXJBdCgwKSkgPT09ICdbJyB8fCByZWYxID09PSAneycgfHwgcmVmMSA9PT0gJ1wiJyB8fCByZWYxID09PSBcIidcIikge1xuICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICByZXR1cm4gSW5saW5lLnBhcnNlKHZhbHVlLCBleGNlcHRpb25PbkludmFsaWRUeXBlLCBvYmplY3REZWNvZGVyKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICBlID0gZXJyb3I7XG4gICAgICAgICAgaWYgKGUgaW5zdGFuY2VvZiBQYXJzZU1vcmUgJiYgdGhpcy5tb3ZlVG9OZXh0TGluZSgpKSB7XG4gICAgICAgICAgICB2YWx1ZSArPSBcIlxcblwiICsgVXRpbHMudHJpbSh0aGlzLmN1cnJlbnRMaW5lLCAnICcpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBlLnBhcnNlZExpbmUgPSB0aGlzLmdldFJlYWxDdXJyZW50TGluZU5iKCkgKyAxO1xuICAgICAgICAgICAgZS5zbmlwcGV0ID0gdGhpcy5jdXJyZW50TGluZTtcbiAgICAgICAgICAgIHRocm93IGU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICh0aGlzLmlzTmV4dExpbmVJbmRlbnRlZCgpKSB7XG4gICAgICAgIHZhbHVlICs9IFwiXFxuXCIgKyB0aGlzLmdldE5leHRFbWJlZEJsb2NrKCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gSW5saW5lLnBhcnNlKHZhbHVlLCBleGNlcHRpb25PbkludmFsaWRUeXBlLCBvYmplY3REZWNvZGVyKTtcbiAgICB9XG4gIH07XG5cbiAgUGFyc2VyLnByb3RvdHlwZS5wYXJzZUZvbGRlZFNjYWxhciA9IGZ1bmN0aW9uKHNlcGFyYXRvciwgaW5kaWNhdG9yLCBpbmRlbnRhdGlvbikge1xuICAgIHZhciBpc0N1cnJlbnRMaW5lQmxhbmssIGosIGxlbiwgbGluZSwgbWF0Y2hlcywgbmV3VGV4dCwgbm90RU9GLCBwYXR0ZXJuLCByZWYsIHRleHQ7XG4gICAgaWYgKGluZGljYXRvciA9PSBudWxsKSB7XG4gICAgICBpbmRpY2F0b3IgPSAnJztcbiAgICB9XG4gICAgaWYgKGluZGVudGF0aW9uID09IG51bGwpIHtcbiAgICAgIGluZGVudGF0aW9uID0gMDtcbiAgICB9XG4gICAgbm90RU9GID0gdGhpcy5tb3ZlVG9OZXh0TGluZSgpO1xuICAgIGlmICghbm90RU9GKSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuICAgIGlzQ3VycmVudExpbmVCbGFuayA9IHRoaXMuaXNDdXJyZW50TGluZUJsYW5rKCk7XG4gICAgdGV4dCA9ICcnO1xuICAgIHdoaWxlIChub3RFT0YgJiYgaXNDdXJyZW50TGluZUJsYW5rKSB7XG4gICAgICBpZiAobm90RU9GID0gdGhpcy5tb3ZlVG9OZXh0TGluZSgpKSB7XG4gICAgICAgIHRleHQgKz0gXCJcXG5cIjtcbiAgICAgICAgaXNDdXJyZW50TGluZUJsYW5rID0gdGhpcy5pc0N1cnJlbnRMaW5lQmxhbmsoKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKDAgPT09IGluZGVudGF0aW9uKSB7XG4gICAgICBpZiAobWF0Y2hlcyA9IHRoaXMuUEFUVEVSTl9JTkRFTlRfU1BBQ0VTLmV4ZWModGhpcy5jdXJyZW50TGluZSkpIHtcbiAgICAgICAgaW5kZW50YXRpb24gPSBtYXRjaGVzWzBdLmxlbmd0aDtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGluZGVudGF0aW9uID4gMCkge1xuICAgICAgcGF0dGVybiA9IHRoaXMuUEFUVEVSTl9GT0xERURfU0NBTEFSX0JZX0lOREVOVEFUSU9OW2luZGVudGF0aW9uXTtcbiAgICAgIGlmIChwYXR0ZXJuID09IG51bGwpIHtcbiAgICAgICAgcGF0dGVybiA9IG5ldyBQYXR0ZXJuKCdeIHsnICsgaW5kZW50YXRpb24gKyAnfSguKikkJyk7XG4gICAgICAgIFBhcnNlci5wcm90b3R5cGUuUEFUVEVSTl9GT0xERURfU0NBTEFSX0JZX0lOREVOVEFUSU9OW2luZGVudGF0aW9uXSA9IHBhdHRlcm47XG4gICAgICB9XG4gICAgICB3aGlsZSAobm90RU9GICYmIChpc0N1cnJlbnRMaW5lQmxhbmsgfHwgKG1hdGNoZXMgPSBwYXR0ZXJuLmV4ZWModGhpcy5jdXJyZW50TGluZSkpKSkge1xuICAgICAgICBpZiAoaXNDdXJyZW50TGluZUJsYW5rKSB7XG4gICAgICAgICAgdGV4dCArPSB0aGlzLmN1cnJlbnRMaW5lLnNsaWNlKGluZGVudGF0aW9uKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0ZXh0ICs9IG1hdGNoZXNbMV07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG5vdEVPRiA9IHRoaXMubW92ZVRvTmV4dExpbmUoKSkge1xuICAgICAgICAgIHRleHQgKz0gXCJcXG5cIjtcbiAgICAgICAgICBpc0N1cnJlbnRMaW5lQmxhbmsgPSB0aGlzLmlzQ3VycmVudExpbmVCbGFuaygpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChub3RFT0YpIHtcbiAgICAgIHRleHQgKz0gXCJcXG5cIjtcbiAgICB9XG4gICAgaWYgKG5vdEVPRikge1xuICAgICAgdGhpcy5tb3ZlVG9QcmV2aW91c0xpbmUoKTtcbiAgICB9XG4gICAgaWYgKCc+JyA9PT0gc2VwYXJhdG9yKSB7XG4gICAgICBuZXdUZXh0ID0gJyc7XG4gICAgICByZWYgPSB0ZXh0LnNwbGl0KFwiXFxuXCIpO1xuICAgICAgZm9yIChqID0gMCwgbGVuID0gcmVmLmxlbmd0aDsgaiA8IGxlbjsgaisrKSB7XG4gICAgICAgIGxpbmUgPSByZWZbal07XG4gICAgICAgIGlmIChsaW5lLmxlbmd0aCA9PT0gMCB8fCBsaW5lLmNoYXJBdCgwKSA9PT0gJyAnKSB7XG4gICAgICAgICAgbmV3VGV4dCA9IFV0aWxzLnJ0cmltKG5ld1RleHQsICcgJykgKyBsaW5lICsgXCJcXG5cIjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBuZXdUZXh0ICs9IGxpbmUgKyAnICc7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHRleHQgPSBuZXdUZXh0O1xuICAgIH1cbiAgICBpZiAoJysnICE9PSBpbmRpY2F0b3IpIHtcbiAgICAgIHRleHQgPSBVdGlscy5ydHJpbSh0ZXh0KTtcbiAgICB9XG4gICAgaWYgKCcnID09PSBpbmRpY2F0b3IpIHtcbiAgICAgIHRleHQgPSB0aGlzLlBBVFRFUk5fVFJBSUxJTkdfTElORVMucmVwbGFjZSh0ZXh0LCBcIlxcblwiKTtcbiAgICB9IGVsc2UgaWYgKCctJyA9PT0gaW5kaWNhdG9yKSB7XG4gICAgICB0ZXh0ID0gdGhpcy5QQVRURVJOX1RSQUlMSU5HX0xJTkVTLnJlcGxhY2UodGV4dCwgJycpO1xuICAgIH1cbiAgICByZXR1cm4gdGV4dDtcbiAgfTtcblxuICBQYXJzZXIucHJvdG90eXBlLmlzTmV4dExpbmVJbmRlbnRlZCA9IGZ1bmN0aW9uKGlnbm9yZUNvbW1lbnRzKSB7XG4gICAgdmFyIEVPRiwgY3VycmVudEluZGVudGF0aW9uLCByZXQ7XG4gICAgaWYgKGlnbm9yZUNvbW1lbnRzID09IG51bGwpIHtcbiAgICAgIGlnbm9yZUNvbW1lbnRzID0gdHJ1ZTtcbiAgICB9XG4gICAgY3VycmVudEluZGVudGF0aW9uID0gdGhpcy5nZXRDdXJyZW50TGluZUluZGVudGF0aW9uKCk7XG4gICAgRU9GID0gIXRoaXMubW92ZVRvTmV4dExpbmUoKTtcbiAgICBpZiAoaWdub3JlQ29tbWVudHMpIHtcbiAgICAgIHdoaWxlICghRU9GICYmIHRoaXMuaXNDdXJyZW50TGluZUVtcHR5KCkpIHtcbiAgICAgICAgRU9GID0gIXRoaXMubW92ZVRvTmV4dExpbmUoKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgd2hpbGUgKCFFT0YgJiYgdGhpcy5pc0N1cnJlbnRMaW5lQmxhbmsoKSkge1xuICAgICAgICBFT0YgPSAhdGhpcy5tb3ZlVG9OZXh0TGluZSgpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoRU9GKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldCA9IGZhbHNlO1xuICAgIGlmICh0aGlzLmdldEN1cnJlbnRMaW5lSW5kZW50YXRpb24oKSA+IGN1cnJlbnRJbmRlbnRhdGlvbikge1xuICAgICAgcmV0ID0gdHJ1ZTtcbiAgICB9XG4gICAgdGhpcy5tb3ZlVG9QcmV2aW91c0xpbmUoKTtcbiAgICByZXR1cm4gcmV0O1xuICB9O1xuXG4gIFBhcnNlci5wcm90b3R5cGUuaXNDdXJyZW50TGluZUVtcHR5ID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHRyaW1tZWRMaW5lO1xuICAgIHRyaW1tZWRMaW5lID0gVXRpbHMudHJpbSh0aGlzLmN1cnJlbnRMaW5lLCAnICcpO1xuICAgIHJldHVybiB0cmltbWVkTGluZS5sZW5ndGggPT09IDAgfHwgdHJpbW1lZExpbmUuY2hhckF0KDApID09PSAnIyc7XG4gIH07XG5cbiAgUGFyc2VyLnByb3RvdHlwZS5pc0N1cnJlbnRMaW5lQmxhbmsgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gJycgPT09IFV0aWxzLnRyaW0odGhpcy5jdXJyZW50TGluZSwgJyAnKTtcbiAgfTtcblxuICBQYXJzZXIucHJvdG90eXBlLmlzQ3VycmVudExpbmVDb21tZW50ID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGx0cmltbWVkTGluZTtcbiAgICBsdHJpbW1lZExpbmUgPSBVdGlscy5sdHJpbSh0aGlzLmN1cnJlbnRMaW5lLCAnICcpO1xuICAgIHJldHVybiBsdHJpbW1lZExpbmUuY2hhckF0KDApID09PSAnIyc7XG4gIH07XG5cbiAgUGFyc2VyLnByb3RvdHlwZS5jbGVhbnVwID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICB2YXIgY291bnQsIGksIGluZGVudCwgaiwgbCwgbGVuLCBsZW4xLCBsaW5lLCBsaW5lcywgcmVmLCByZWYxLCByZWYyLCBzbWFsbGVzdEluZGVudCwgdHJpbW1lZFZhbHVlO1xuICAgIGlmICh2YWx1ZS5pbmRleE9mKFwiXFxyXCIpICE9PSAtMSkge1xuICAgICAgdmFsdWUgPSB2YWx1ZS5zcGxpdChcIlxcclxcblwiKS5qb2luKFwiXFxuXCIpLnNwbGl0KFwiXFxyXCIpLmpvaW4oXCJcXG5cIik7XG4gICAgfVxuICAgIGNvdW50ID0gMDtcbiAgICByZWYgPSB0aGlzLlBBVFRFUk5fWUFNTF9IRUFERVIucmVwbGFjZUFsbCh2YWx1ZSwgJycpLCB2YWx1ZSA9IHJlZlswXSwgY291bnQgPSByZWZbMV07XG4gICAgdGhpcy5vZmZzZXQgKz0gY291bnQ7XG4gICAgcmVmMSA9IHRoaXMuUEFUVEVSTl9MRUFESU5HX0NPTU1FTlRTLnJlcGxhY2VBbGwodmFsdWUsICcnLCAxKSwgdHJpbW1lZFZhbHVlID0gcmVmMVswXSwgY291bnQgPSByZWYxWzFdO1xuICAgIGlmIChjb3VudCA9PT0gMSkge1xuICAgICAgdGhpcy5vZmZzZXQgKz0gVXRpbHMuc3ViU3RyQ291bnQodmFsdWUsIFwiXFxuXCIpIC0gVXRpbHMuc3ViU3RyQ291bnQodHJpbW1lZFZhbHVlLCBcIlxcblwiKTtcbiAgICAgIHZhbHVlID0gdHJpbW1lZFZhbHVlO1xuICAgIH1cbiAgICByZWYyID0gdGhpcy5QQVRURVJOX0RPQ1VNRU5UX01BUktFUl9TVEFSVC5yZXBsYWNlQWxsKHZhbHVlLCAnJywgMSksIHRyaW1tZWRWYWx1ZSA9IHJlZjJbMF0sIGNvdW50ID0gcmVmMlsxXTtcbiAgICBpZiAoY291bnQgPT09IDEpIHtcbiAgICAgIHRoaXMub2Zmc2V0ICs9IFV0aWxzLnN1YlN0ckNvdW50KHZhbHVlLCBcIlxcblwiKSAtIFV0aWxzLnN1YlN0ckNvdW50KHRyaW1tZWRWYWx1ZSwgXCJcXG5cIik7XG4gICAgICB2YWx1ZSA9IHRyaW1tZWRWYWx1ZTtcbiAgICAgIHZhbHVlID0gdGhpcy5QQVRURVJOX0RPQ1VNRU5UX01BUktFUl9FTkQucmVwbGFjZSh2YWx1ZSwgJycpO1xuICAgIH1cbiAgICBsaW5lcyA9IHZhbHVlLnNwbGl0KFwiXFxuXCIpO1xuICAgIHNtYWxsZXN0SW5kZW50ID0gLTE7XG4gICAgZm9yIChqID0gMCwgbGVuID0gbGluZXMubGVuZ3RoOyBqIDwgbGVuOyBqKyspIHtcbiAgICAgIGxpbmUgPSBsaW5lc1tqXTtcbiAgICAgIGlmIChVdGlscy50cmltKGxpbmUsICcgJykubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgaW5kZW50ID0gbGluZS5sZW5ndGggLSBVdGlscy5sdHJpbShsaW5lKS5sZW5ndGg7XG4gICAgICBpZiAoc21hbGxlc3RJbmRlbnQgPT09IC0xIHx8IGluZGVudCA8IHNtYWxsZXN0SW5kZW50KSB7XG4gICAgICAgIHNtYWxsZXN0SW5kZW50ID0gaW5kZW50O1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoc21hbGxlc3RJbmRlbnQgPiAwKSB7XG4gICAgICBmb3IgKGkgPSBsID0gMCwgbGVuMSA9IGxpbmVzLmxlbmd0aDsgbCA8IGxlbjE7IGkgPSArK2wpIHtcbiAgICAgICAgbGluZSA9IGxpbmVzW2ldO1xuICAgICAgICBsaW5lc1tpXSA9IGxpbmUuc2xpY2Uoc21hbGxlc3RJbmRlbnQpO1xuICAgICAgfVxuICAgICAgdmFsdWUgPSBsaW5lcy5qb2luKFwiXFxuXCIpO1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWU7XG4gIH07XG5cbiAgUGFyc2VyLnByb3RvdHlwZS5pc05leHRMaW5lVW5JbmRlbnRlZENvbGxlY3Rpb24gPSBmdW5jdGlvbihjdXJyZW50SW5kZW50YXRpb24pIHtcbiAgICB2YXIgbm90RU9GLCByZXQ7XG4gICAgaWYgKGN1cnJlbnRJbmRlbnRhdGlvbiA9PSBudWxsKSB7XG4gICAgICBjdXJyZW50SW5kZW50YXRpb24gPSBudWxsO1xuICAgIH1cbiAgICBpZiAoY3VycmVudEluZGVudGF0aW9uID09IG51bGwpIHtcbiAgICAgIGN1cnJlbnRJbmRlbnRhdGlvbiA9IHRoaXMuZ2V0Q3VycmVudExpbmVJbmRlbnRhdGlvbigpO1xuICAgIH1cbiAgICBub3RFT0YgPSB0aGlzLm1vdmVUb05leHRMaW5lKCk7XG4gICAgd2hpbGUgKG5vdEVPRiAmJiB0aGlzLmlzQ3VycmVudExpbmVFbXB0eSgpKSB7XG4gICAgICBub3RFT0YgPSB0aGlzLm1vdmVUb05leHRMaW5lKCk7XG4gICAgfVxuICAgIGlmIChmYWxzZSA9PT0gbm90RU9GKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldCA9IGZhbHNlO1xuICAgIGlmICh0aGlzLmdldEN1cnJlbnRMaW5lSW5kZW50YXRpb24oKSA9PT0gY3VycmVudEluZGVudGF0aW9uICYmIHRoaXMuaXNTdHJpbmdVbkluZGVudGVkQ29sbGVjdGlvbkl0ZW0odGhpcy5jdXJyZW50TGluZSkpIHtcbiAgICAgIHJldCA9IHRydWU7XG4gICAgfVxuICAgIHRoaXMubW92ZVRvUHJldmlvdXNMaW5lKCk7XG4gICAgcmV0dXJuIHJldDtcbiAgfTtcblxuICBQYXJzZXIucHJvdG90eXBlLmlzU3RyaW5nVW5JbmRlbnRlZENvbGxlY3Rpb25JdGVtID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuY3VycmVudExpbmUgPT09ICctJyB8fCB0aGlzLmN1cnJlbnRMaW5lLnNsaWNlKDAsIDIpID09PSAnLSAnO1xuICB9O1xuXG4gIHJldHVybiBQYXJzZXI7XG5cbn0pKCk7XG5cbm1vZHVsZS5leHBvcnRzID0gUGFyc2VyO1xuIiwiLy8gR2VuZXJhdGVkIGJ5IENvZmZlZVNjcmlwdCAxLjEyLjRcbnZhciBQYXR0ZXJuO1xuXG5QYXR0ZXJuID0gKGZ1bmN0aW9uKCkge1xuICBQYXR0ZXJuLnByb3RvdHlwZS5yZWdleCA9IG51bGw7XG5cbiAgUGF0dGVybi5wcm90b3R5cGUucmF3UmVnZXggPSBudWxsO1xuXG4gIFBhdHRlcm4ucHJvdG90eXBlLmNsZWFuZWRSZWdleCA9IG51bGw7XG5cbiAgUGF0dGVybi5wcm90b3R5cGUubWFwcGluZyA9IG51bGw7XG5cbiAgZnVuY3Rpb24gUGF0dGVybihyYXdSZWdleCwgbW9kaWZpZXJzKSB7XG4gICAgdmFyIF9jaGFyLCBjYXB0dXJpbmdCcmFja2V0TnVtYmVyLCBjbGVhbmVkUmVnZXgsIGksIGxlbiwgbWFwcGluZywgbmFtZSwgcGFydCwgc3ViQ2hhcjtcbiAgICBpZiAobW9kaWZpZXJzID09IG51bGwpIHtcbiAgICAgIG1vZGlmaWVycyA9ICcnO1xuICAgIH1cbiAgICBjbGVhbmVkUmVnZXggPSAnJztcbiAgICBsZW4gPSByYXdSZWdleC5sZW5ndGg7XG4gICAgbWFwcGluZyA9IG51bGw7XG4gICAgY2FwdHVyaW5nQnJhY2tldE51bWJlciA9IDA7XG4gICAgaSA9IDA7XG4gICAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICAgIF9jaGFyID0gcmF3UmVnZXguY2hhckF0KGkpO1xuICAgICAgaWYgKF9jaGFyID09PSAnXFxcXCcpIHtcbiAgICAgICAgY2xlYW5lZFJlZ2V4ICs9IHJhd1JlZ2V4LnNsaWNlKGksICsoaSArIDEpICsgMSB8fCA5ZTkpO1xuICAgICAgICBpKys7XG4gICAgICB9IGVsc2UgaWYgKF9jaGFyID09PSAnKCcpIHtcbiAgICAgICAgaWYgKGkgPCBsZW4gLSAyKSB7XG4gICAgICAgICAgcGFydCA9IHJhd1JlZ2V4LnNsaWNlKGksICsoaSArIDIpICsgMSB8fCA5ZTkpO1xuICAgICAgICAgIGlmIChwYXJ0ID09PSAnKD86Jykge1xuICAgICAgICAgICAgaSArPSAyO1xuICAgICAgICAgICAgY2xlYW5lZFJlZ2V4ICs9IHBhcnQ7XG4gICAgICAgICAgfSBlbHNlIGlmIChwYXJ0ID09PSAnKD88Jykge1xuICAgICAgICAgICAgY2FwdHVyaW5nQnJhY2tldE51bWJlcisrO1xuICAgICAgICAgICAgaSArPSAyO1xuICAgICAgICAgICAgbmFtZSA9ICcnO1xuICAgICAgICAgICAgd2hpbGUgKGkgKyAxIDwgbGVuKSB7XG4gICAgICAgICAgICAgIHN1YkNoYXIgPSByYXdSZWdleC5jaGFyQXQoaSArIDEpO1xuICAgICAgICAgICAgICBpZiAoc3ViQ2hhciA9PT0gJz4nKSB7XG4gICAgICAgICAgICAgICAgY2xlYW5lZFJlZ2V4ICs9ICcoJztcbiAgICAgICAgICAgICAgICBpKys7XG4gICAgICAgICAgICAgICAgaWYgKG5hbWUubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgaWYgKG1hcHBpbmcgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBtYXBwaW5nID0ge307XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBtYXBwaW5nW25hbWVdID0gY2FwdHVyaW5nQnJhY2tldE51bWJlcjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgbmFtZSArPSBzdWJDaGFyO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGkrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2xlYW5lZFJlZ2V4ICs9IF9jaGFyO1xuICAgICAgICAgICAgY2FwdHVyaW5nQnJhY2tldE51bWJlcisrO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjbGVhbmVkUmVnZXggKz0gX2NoYXI7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNsZWFuZWRSZWdleCArPSBfY2hhcjtcbiAgICAgIH1cbiAgICAgIGkrKztcbiAgICB9XG4gICAgdGhpcy5yYXdSZWdleCA9IHJhd1JlZ2V4O1xuICAgIHRoaXMuY2xlYW5lZFJlZ2V4ID0gY2xlYW5lZFJlZ2V4O1xuICAgIHRoaXMucmVnZXggPSBuZXcgUmVnRXhwKHRoaXMuY2xlYW5lZFJlZ2V4LCAnZycgKyBtb2RpZmllcnMucmVwbGFjZSgnZycsICcnKSk7XG4gICAgdGhpcy5tYXBwaW5nID0gbWFwcGluZztcbiAgfVxuXG4gIFBhdHRlcm4ucHJvdG90eXBlLmV4ZWMgPSBmdW5jdGlvbihzdHIpIHtcbiAgICB2YXIgaW5kZXgsIG1hdGNoZXMsIG5hbWUsIHJlZjtcbiAgICB0aGlzLnJlZ2V4Lmxhc3RJbmRleCA9IDA7XG4gICAgbWF0Y2hlcyA9IHRoaXMucmVnZXguZXhlYyhzdHIpO1xuICAgIGlmIChtYXRjaGVzID09IG51bGwpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBpZiAodGhpcy5tYXBwaW5nICE9IG51bGwpIHtcbiAgICAgIHJlZiA9IHRoaXMubWFwcGluZztcbiAgICAgIGZvciAobmFtZSBpbiByZWYpIHtcbiAgICAgICAgaW5kZXggPSByZWZbbmFtZV07XG4gICAgICAgIG1hdGNoZXNbbmFtZV0gPSBtYXRjaGVzW2luZGV4XTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG1hdGNoZXM7XG4gIH07XG5cbiAgUGF0dGVybi5wcm90b3R5cGUudGVzdCA9IGZ1bmN0aW9uKHN0cikge1xuICAgIHRoaXMucmVnZXgubGFzdEluZGV4ID0gMDtcbiAgICByZXR1cm4gdGhpcy5yZWdleC50ZXN0KHN0cik7XG4gIH07XG5cbiAgUGF0dGVybi5wcm90b3R5cGUucmVwbGFjZSA9IGZ1bmN0aW9uKHN0ciwgcmVwbGFjZW1lbnQpIHtcbiAgICB0aGlzLnJlZ2V4Lmxhc3RJbmRleCA9IDA7XG4gICAgcmV0dXJuIHN0ci5yZXBsYWNlKHRoaXMucmVnZXgsIHJlcGxhY2VtZW50KTtcbiAgfTtcblxuICBQYXR0ZXJuLnByb3RvdHlwZS5yZXBsYWNlQWxsID0gZnVuY3Rpb24oc3RyLCByZXBsYWNlbWVudCwgbGltaXQpIHtcbiAgICB2YXIgY291bnQ7XG4gICAgaWYgKGxpbWl0ID09IG51bGwpIHtcbiAgICAgIGxpbWl0ID0gMDtcbiAgICB9XG4gICAgdGhpcy5yZWdleC5sYXN0SW5kZXggPSAwO1xuICAgIGNvdW50ID0gMDtcbiAgICB3aGlsZSAodGhpcy5yZWdleC50ZXN0KHN0cikgJiYgKGxpbWl0ID09PSAwIHx8IGNvdW50IDwgbGltaXQpKSB7XG4gICAgICB0aGlzLnJlZ2V4Lmxhc3RJbmRleCA9IDA7XG4gICAgICBzdHIgPSBzdHIucmVwbGFjZSh0aGlzLnJlZ2V4LCByZXBsYWNlbWVudCk7XG4gICAgICBjb3VudCsrO1xuICAgIH1cbiAgICByZXR1cm4gW3N0ciwgY291bnRdO1xuICB9O1xuXG4gIHJldHVybiBQYXR0ZXJuO1xuXG59KSgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFBhdHRlcm47XG4iLCIvLyBHZW5lcmF0ZWQgYnkgQ29mZmVlU2NyaXB0IDEuMTIuNFxudmFyIFBhdHRlcm4sIFVuZXNjYXBlciwgVXRpbHM7XG5cblV0aWxzID0gcmVxdWlyZSgnLi9VdGlscycpO1xuXG5QYXR0ZXJuID0gcmVxdWlyZSgnLi9QYXR0ZXJuJyk7XG5cblVuZXNjYXBlciA9IChmdW5jdGlvbigpIHtcbiAgZnVuY3Rpb24gVW5lc2NhcGVyKCkge31cblxuICBVbmVzY2FwZXIuUEFUVEVSTl9FU0NBUEVEX0NIQVJBQ1RFUiA9IG5ldyBQYXR0ZXJuKCdcXFxcXFxcXChbMGFidFxcdG52ZnJlIFwiXFxcXC9cXFxcXFxcXE5fTFBdfHhbMC05YS1mQS1GXXsyfXx1WzAtOWEtZkEtRl17NH18VVswLTlhLWZBLUZdezh9KScpO1xuXG4gIFVuZXNjYXBlci51bmVzY2FwZVNpbmdsZVF1b3RlZFN0cmluZyA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlLnJlcGxhY2UoL1xcJ1xcJy9nLCAnXFwnJyk7XG4gIH07XG5cbiAgVW5lc2NhcGVyLnVuZXNjYXBlRG91YmxlUXVvdGVkU3RyaW5nID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICBpZiAodGhpcy5fdW5lc2NhcGVDYWxsYmFjayA9PSBudWxsKSB7XG4gICAgICB0aGlzLl91bmVzY2FwZUNhbGxiYWNrID0gKGZ1bmN0aW9uKF90aGlzKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbihzdHIpIHtcbiAgICAgICAgICByZXR1cm4gX3RoaXMudW5lc2NhcGVDaGFyYWN0ZXIoc3RyKTtcbiAgICAgICAgfTtcbiAgICAgIH0pKHRoaXMpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5QQVRURVJOX0VTQ0FQRURfQ0hBUkFDVEVSLnJlcGxhY2UodmFsdWUsIHRoaXMuX3VuZXNjYXBlQ2FsbGJhY2spO1xuICB9O1xuXG4gIFVuZXNjYXBlci51bmVzY2FwZUNoYXJhY3RlciA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgdmFyIGNoO1xuICAgIGNoID0gU3RyaW5nLmZyb21DaGFyQ29kZTtcbiAgICBzd2l0Y2ggKHZhbHVlLmNoYXJBdCgxKSkge1xuICAgICAgY2FzZSAnMCc6XG4gICAgICAgIHJldHVybiBjaCgwKTtcbiAgICAgIGNhc2UgJ2EnOlxuICAgICAgICByZXR1cm4gY2goNyk7XG4gICAgICBjYXNlICdiJzpcbiAgICAgICAgcmV0dXJuIGNoKDgpO1xuICAgICAgY2FzZSAndCc6XG4gICAgICAgIHJldHVybiBcIlxcdFwiO1xuICAgICAgY2FzZSBcIlxcdFwiOlxuICAgICAgICByZXR1cm4gXCJcXHRcIjtcbiAgICAgIGNhc2UgJ24nOlxuICAgICAgICByZXR1cm4gXCJcXG5cIjtcbiAgICAgIGNhc2UgJ3YnOlxuICAgICAgICByZXR1cm4gY2goMTEpO1xuICAgICAgY2FzZSAnZic6XG4gICAgICAgIHJldHVybiBjaCgxMik7XG4gICAgICBjYXNlICdyJzpcbiAgICAgICAgcmV0dXJuIGNoKDEzKTtcbiAgICAgIGNhc2UgJ2UnOlxuICAgICAgICByZXR1cm4gY2goMjcpO1xuICAgICAgY2FzZSAnICc6XG4gICAgICAgIHJldHVybiAnICc7XG4gICAgICBjYXNlICdcIic6XG4gICAgICAgIHJldHVybiAnXCInO1xuICAgICAgY2FzZSAnLyc6XG4gICAgICAgIHJldHVybiAnLyc7XG4gICAgICBjYXNlICdcXFxcJzpcbiAgICAgICAgcmV0dXJuICdcXFxcJztcbiAgICAgIGNhc2UgJ04nOlxuICAgICAgICByZXR1cm4gY2goMHgwMDg1KTtcbiAgICAgIGNhc2UgJ18nOlxuICAgICAgICByZXR1cm4gY2goMHgwMEEwKTtcbiAgICAgIGNhc2UgJ0wnOlxuICAgICAgICByZXR1cm4gY2goMHgyMDI4KTtcbiAgICAgIGNhc2UgJ1AnOlxuICAgICAgICByZXR1cm4gY2goMHgyMDI5KTtcbiAgICAgIGNhc2UgJ3gnOlxuICAgICAgICByZXR1cm4gVXRpbHMudXRmOGNocihVdGlscy5oZXhEZWModmFsdWUuc3Vic3RyKDIsIDIpKSk7XG4gICAgICBjYXNlICd1JzpcbiAgICAgICAgcmV0dXJuIFV0aWxzLnV0ZjhjaHIoVXRpbHMuaGV4RGVjKHZhbHVlLnN1YnN0cigyLCA0KSkpO1xuICAgICAgY2FzZSAnVSc6XG4gICAgICAgIHJldHVybiBVdGlscy51dGY4Y2hyKFV0aWxzLmhleERlYyh2YWx1ZS5zdWJzdHIoMiwgOCkpKTtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiAnJztcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIFVuZXNjYXBlcjtcblxufSkoKTtcblxubW9kdWxlLmV4cG9ydHMgPSBVbmVzY2FwZXI7XG4iLCIvLyBHZW5lcmF0ZWQgYnkgQ29mZmVlU2NyaXB0IDEuMTIuNFxudmFyIFBhdHRlcm4sIFV0aWxzLFxuICBoYXNQcm9wID0ge30uaGFzT3duUHJvcGVydHk7XG5cblBhdHRlcm4gPSByZXF1aXJlKCcuL1BhdHRlcm4nKTtcblxuVXRpbHMgPSAoZnVuY3Rpb24oKSB7XG4gIGZ1bmN0aW9uIFV0aWxzKCkge31cblxuICBVdGlscy5SRUdFWF9MRUZUX1RSSU1fQllfQ0hBUiA9IHt9O1xuXG4gIFV0aWxzLlJFR0VYX1JJR0hUX1RSSU1fQllfQ0hBUiA9IHt9O1xuXG4gIFV0aWxzLlJFR0VYX1NQQUNFUyA9IC9cXHMrL2c7XG5cbiAgVXRpbHMuUkVHRVhfRElHSVRTID0gL15cXGQrJC87XG5cbiAgVXRpbHMuUkVHRVhfT0NUQUwgPSAvW14wLTddL2dpO1xuXG4gIFV0aWxzLlJFR0VYX0hFWEFERUNJTUFMID0gL1teYS1mMC05XS9naTtcblxuICBVdGlscy5QQVRURVJOX0RBVEUgPSBuZXcgUGF0dGVybignXicgKyAnKD88eWVhcj5bMC05XVswLTldWzAtOV1bMC05XSknICsgJy0oPzxtb250aD5bMC05XVswLTldPyknICsgJy0oPzxkYXk+WzAtOV1bMC05XT8pJyArICcoPzooPzpbVHRdfFsgXFx0XSspJyArICcoPzxob3VyPlswLTldWzAtOV0/KScgKyAnOig/PG1pbnV0ZT5bMC05XVswLTldKScgKyAnOig/PHNlY29uZD5bMC05XVswLTldKScgKyAnKD86XFwuKD88ZnJhY3Rpb24+WzAtOV0qKSk/JyArICcoPzpbIFxcdF0qKD88dHo+WnwoPzx0el9zaWduPlstK10pKD88dHpfaG91cj5bMC05XVswLTldPyknICsgJyg/OjooPzx0el9taW51dGU+WzAtOV1bMC05XSkpPykpPyk/JyArICckJywgJ2knKTtcblxuICBVdGlscy5MT0NBTF9USU1FWk9ORV9PRkZTRVQgPSBuZXcgRGF0ZSgpLmdldFRpbWV6b25lT2Zmc2V0KCkgKiA2MCAqIDEwMDA7XG5cbiAgVXRpbHMudHJpbSA9IGZ1bmN0aW9uKHN0ciwgX2NoYXIpIHtcbiAgICB2YXIgcmVnZXhMZWZ0LCByZWdleFJpZ2h0O1xuICAgIGlmIChfY2hhciA9PSBudWxsKSB7XG4gICAgICBfY2hhciA9ICdcXFxccyc7XG4gICAgfVxuICAgIHJlZ2V4TGVmdCA9IHRoaXMuUkVHRVhfTEVGVF9UUklNX0JZX0NIQVJbX2NoYXJdO1xuICAgIGlmIChyZWdleExlZnQgPT0gbnVsbCkge1xuICAgICAgdGhpcy5SRUdFWF9MRUZUX1RSSU1fQllfQ0hBUltfY2hhcl0gPSByZWdleExlZnQgPSBuZXcgUmVnRXhwKCdeJyArIF9jaGFyICsgJycgKyBfY2hhciArICcqJyk7XG4gICAgfVxuICAgIHJlZ2V4TGVmdC5sYXN0SW5kZXggPSAwO1xuICAgIHJlZ2V4UmlnaHQgPSB0aGlzLlJFR0VYX1JJR0hUX1RSSU1fQllfQ0hBUltfY2hhcl07XG4gICAgaWYgKHJlZ2V4UmlnaHQgPT0gbnVsbCkge1xuICAgICAgdGhpcy5SRUdFWF9SSUdIVF9UUklNX0JZX0NIQVJbX2NoYXJdID0gcmVnZXhSaWdodCA9IG5ldyBSZWdFeHAoX2NoYXIgKyAnJyArIF9jaGFyICsgJyokJyk7XG4gICAgfVxuICAgIHJlZ2V4UmlnaHQubGFzdEluZGV4ID0gMDtcbiAgICByZXR1cm4gc3RyLnJlcGxhY2UocmVnZXhMZWZ0LCAnJykucmVwbGFjZShyZWdleFJpZ2h0LCAnJyk7XG4gIH07XG5cbiAgVXRpbHMubHRyaW0gPSBmdW5jdGlvbihzdHIsIF9jaGFyKSB7XG4gICAgdmFyIHJlZ2V4TGVmdDtcbiAgICBpZiAoX2NoYXIgPT0gbnVsbCkge1xuICAgICAgX2NoYXIgPSAnXFxcXHMnO1xuICAgIH1cbiAgICByZWdleExlZnQgPSB0aGlzLlJFR0VYX0xFRlRfVFJJTV9CWV9DSEFSW19jaGFyXTtcbiAgICBpZiAocmVnZXhMZWZ0ID09IG51bGwpIHtcbiAgICAgIHRoaXMuUkVHRVhfTEVGVF9UUklNX0JZX0NIQVJbX2NoYXJdID0gcmVnZXhMZWZ0ID0gbmV3IFJlZ0V4cCgnXicgKyBfY2hhciArICcnICsgX2NoYXIgKyAnKicpO1xuICAgIH1cbiAgICByZWdleExlZnQubGFzdEluZGV4ID0gMDtcbiAgICByZXR1cm4gc3RyLnJlcGxhY2UocmVnZXhMZWZ0LCAnJyk7XG4gIH07XG5cbiAgVXRpbHMucnRyaW0gPSBmdW5jdGlvbihzdHIsIF9jaGFyKSB7XG4gICAgdmFyIHJlZ2V4UmlnaHQ7XG4gICAgaWYgKF9jaGFyID09IG51bGwpIHtcbiAgICAgIF9jaGFyID0gJ1xcXFxzJztcbiAgICB9XG4gICAgcmVnZXhSaWdodCA9IHRoaXMuUkVHRVhfUklHSFRfVFJJTV9CWV9DSEFSW19jaGFyXTtcbiAgICBpZiAocmVnZXhSaWdodCA9PSBudWxsKSB7XG4gICAgICB0aGlzLlJFR0VYX1JJR0hUX1RSSU1fQllfQ0hBUltfY2hhcl0gPSByZWdleFJpZ2h0ID0gbmV3IFJlZ0V4cChfY2hhciArICcnICsgX2NoYXIgKyAnKiQnKTtcbiAgICB9XG4gICAgcmVnZXhSaWdodC5sYXN0SW5kZXggPSAwO1xuICAgIHJldHVybiBzdHIucmVwbGFjZShyZWdleFJpZ2h0LCAnJyk7XG4gIH07XG5cbiAgVXRpbHMuaXNFbXB0eSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuICF2YWx1ZSB8fCB2YWx1ZSA9PT0gJycgfHwgdmFsdWUgPT09ICcwJyB8fCAodmFsdWUgaW5zdGFuY2VvZiBBcnJheSAmJiB2YWx1ZS5sZW5ndGggPT09IDApIHx8IHRoaXMuaXNFbXB0eU9iamVjdCh2YWx1ZSk7XG4gIH07XG5cbiAgVXRpbHMuaXNFbXB0eU9iamVjdCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgdmFyIGs7XG4gICAgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgT2JqZWN0ICYmICgoZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgcmVzdWx0cztcbiAgICAgIHJlc3VsdHMgPSBbXTtcbiAgICAgIGZvciAoayBpbiB2YWx1ZSkge1xuICAgICAgICBpZiAoIWhhc1Byb3AuY2FsbCh2YWx1ZSwgaykpIGNvbnRpbnVlO1xuICAgICAgICByZXN1bHRzLnB1c2goayk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0cztcbiAgICB9KSgpKS5sZW5ndGggPT09IDA7XG4gIH07XG5cbiAgVXRpbHMuc3ViU3RyQ291bnQgPSBmdW5jdGlvbihzdHJpbmcsIHN1YlN0cmluZywgc3RhcnQsIGxlbmd0aCkge1xuICAgIHZhciBjLCBpLCBqLCBsZW4sIHJlZiwgc3VibGVuO1xuICAgIGMgPSAwO1xuICAgIHN0cmluZyA9ICcnICsgc3RyaW5nO1xuICAgIHN1YlN0cmluZyA9ICcnICsgc3ViU3RyaW5nO1xuICAgIGlmIChzdGFydCAhPSBudWxsKSB7XG4gICAgICBzdHJpbmcgPSBzdHJpbmcuc2xpY2Uoc3RhcnQpO1xuICAgIH1cbiAgICBpZiAobGVuZ3RoICE9IG51bGwpIHtcbiAgICAgIHN0cmluZyA9IHN0cmluZy5zbGljZSgwLCBsZW5ndGgpO1xuICAgIH1cbiAgICBsZW4gPSBzdHJpbmcubGVuZ3RoO1xuICAgIHN1YmxlbiA9IHN1YlN0cmluZy5sZW5ndGg7XG4gICAgZm9yIChpID0gaiA9IDAsIHJlZiA9IGxlbjsgMCA8PSByZWYgPyBqIDwgcmVmIDogaiA+IHJlZjsgaSA9IDAgPD0gcmVmID8gKytqIDogLS1qKSB7XG4gICAgICBpZiAoc3ViU3RyaW5nID09PSBzdHJpbmcuc2xpY2UoaSwgc3VibGVuKSkge1xuICAgICAgICBjKys7XG4gICAgICAgIGkgKz0gc3VibGVuIC0gMTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGM7XG4gIH07XG5cbiAgVXRpbHMuaXNEaWdpdHMgPSBmdW5jdGlvbihpbnB1dCkge1xuICAgIHRoaXMuUkVHRVhfRElHSVRTLmxhc3RJbmRleCA9IDA7XG4gICAgcmV0dXJuIHRoaXMuUkVHRVhfRElHSVRTLnRlc3QoaW5wdXQpO1xuICB9O1xuXG4gIFV0aWxzLm9jdERlYyA9IGZ1bmN0aW9uKGlucHV0KSB7XG4gICAgdGhpcy5SRUdFWF9PQ1RBTC5sYXN0SW5kZXggPSAwO1xuICAgIHJldHVybiBwYXJzZUludCgoaW5wdXQgKyAnJykucmVwbGFjZSh0aGlzLlJFR0VYX09DVEFMLCAnJyksIDgpO1xuICB9O1xuXG4gIFV0aWxzLmhleERlYyA9IGZ1bmN0aW9uKGlucHV0KSB7XG4gICAgdGhpcy5SRUdFWF9IRVhBREVDSU1BTC5sYXN0SW5kZXggPSAwO1xuICAgIGlucHV0ID0gdGhpcy50cmltKGlucHV0KTtcbiAgICBpZiAoKGlucHV0ICsgJycpLnNsaWNlKDAsIDIpID09PSAnMHgnKSB7XG4gICAgICBpbnB1dCA9IChpbnB1dCArICcnKS5zbGljZSgyKTtcbiAgICB9XG4gICAgcmV0dXJuIHBhcnNlSW50KChpbnB1dCArICcnKS5yZXBsYWNlKHRoaXMuUkVHRVhfSEVYQURFQ0lNQUwsICcnKSwgMTYpO1xuICB9O1xuXG4gIFV0aWxzLnV0ZjhjaHIgPSBmdW5jdGlvbihjKSB7XG4gICAgdmFyIGNoO1xuICAgIGNoID0gU3RyaW5nLmZyb21DaGFyQ29kZTtcbiAgICBpZiAoMHg4MCA+IChjICU9IDB4MjAwMDAwKSkge1xuICAgICAgcmV0dXJuIGNoKGMpO1xuICAgIH1cbiAgICBpZiAoMHg4MDAgPiBjKSB7XG4gICAgICByZXR1cm4gY2goMHhDMCB8IGMgPj4gNikgKyBjaCgweDgwIHwgYyAmIDB4M0YpO1xuICAgIH1cbiAgICBpZiAoMHgxMDAwMCA+IGMpIHtcbiAgICAgIHJldHVybiBjaCgweEUwIHwgYyA+PiAxMikgKyBjaCgweDgwIHwgYyA+PiA2ICYgMHgzRikgKyBjaCgweDgwIHwgYyAmIDB4M0YpO1xuICAgIH1cbiAgICByZXR1cm4gY2goMHhGMCB8IGMgPj4gMTgpICsgY2goMHg4MCB8IGMgPj4gMTIgJiAweDNGKSArIGNoKDB4ODAgfCBjID4+IDYgJiAweDNGKSArIGNoKDB4ODAgfCBjICYgMHgzRik7XG4gIH07XG5cbiAgVXRpbHMucGFyc2VCb29sZWFuID0gZnVuY3Rpb24oaW5wdXQsIHN0cmljdCkge1xuICAgIHZhciBsb3dlcklucHV0O1xuICAgIGlmIChzdHJpY3QgPT0gbnVsbCkge1xuICAgICAgc3RyaWN0ID0gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBpbnB1dCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGxvd2VySW5wdXQgPSBpbnB1dC50b0xvd2VyQ2FzZSgpO1xuICAgICAgaWYgKCFzdHJpY3QpIHtcbiAgICAgICAgaWYgKGxvd2VySW5wdXQgPT09ICdubycpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChsb3dlcklucHV0ID09PSAnMCcpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgaWYgKGxvd2VySW5wdXQgPT09ICdmYWxzZScpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgaWYgKGxvd2VySW5wdXQgPT09ICcnKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gISFpbnB1dDtcbiAgfTtcblxuICBVdGlscy5pc051bWVyaWMgPSBmdW5jdGlvbihpbnB1dCkge1xuICAgIHRoaXMuUkVHRVhfU1BBQ0VTLmxhc3RJbmRleCA9IDA7XG4gICAgcmV0dXJuIHR5cGVvZiBpbnB1dCA9PT0gJ251bWJlcicgfHwgdHlwZW9mIGlucHV0ID09PSAnc3RyaW5nJyAmJiAhaXNOYU4oaW5wdXQpICYmIGlucHV0LnJlcGxhY2UodGhpcy5SRUdFWF9TUEFDRVMsICcnKSAhPT0gJyc7XG4gIH07XG5cbiAgVXRpbHMuc3RyaW5nVG9EYXRlID0gZnVuY3Rpb24oc3RyKSB7XG4gICAgdmFyIGRhdGUsIGRheSwgZnJhY3Rpb24sIGhvdXIsIGluZm8sIG1pbnV0ZSwgbW9udGgsIHNlY29uZCwgdHpfaG91ciwgdHpfbWludXRlLCB0el9vZmZzZXQsIHllYXI7XG4gICAgaWYgKCEoc3RyICE9IG51bGwgPyBzdHIubGVuZ3RoIDogdm9pZCAwKSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGluZm8gPSB0aGlzLlBBVFRFUk5fREFURS5leGVjKHN0cik7XG4gICAgaWYgKCFpbmZvKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgeWVhciA9IHBhcnNlSW50KGluZm8ueWVhciwgMTApO1xuICAgIG1vbnRoID0gcGFyc2VJbnQoaW5mby5tb250aCwgMTApIC0gMTtcbiAgICBkYXkgPSBwYXJzZUludChpbmZvLmRheSwgMTApO1xuICAgIGlmIChpbmZvLmhvdXIgPT0gbnVsbCkge1xuICAgICAgZGF0ZSA9IG5ldyBEYXRlKERhdGUuVVRDKHllYXIsIG1vbnRoLCBkYXkpKTtcbiAgICAgIHJldHVybiBkYXRlO1xuICAgIH1cbiAgICBob3VyID0gcGFyc2VJbnQoaW5mby5ob3VyLCAxMCk7XG4gICAgbWludXRlID0gcGFyc2VJbnQoaW5mby5taW51dGUsIDEwKTtcbiAgICBzZWNvbmQgPSBwYXJzZUludChpbmZvLnNlY29uZCwgMTApO1xuICAgIGlmIChpbmZvLmZyYWN0aW9uICE9IG51bGwpIHtcbiAgICAgIGZyYWN0aW9uID0gaW5mby5mcmFjdGlvbi5zbGljZSgwLCAzKTtcbiAgICAgIHdoaWxlIChmcmFjdGlvbi5sZW5ndGggPCAzKSB7XG4gICAgICAgIGZyYWN0aW9uICs9ICcwJztcbiAgICAgIH1cbiAgICAgIGZyYWN0aW9uID0gcGFyc2VJbnQoZnJhY3Rpb24sIDEwKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZnJhY3Rpb24gPSAwO1xuICAgIH1cbiAgICBpZiAoaW5mby50eiAhPSBudWxsKSB7XG4gICAgICB0el9ob3VyID0gcGFyc2VJbnQoaW5mby50el9ob3VyLCAxMCk7XG4gICAgICBpZiAoaW5mby50el9taW51dGUgIT0gbnVsbCkge1xuICAgICAgICB0el9taW51dGUgPSBwYXJzZUludChpbmZvLnR6X21pbnV0ZSwgMTApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdHpfbWludXRlID0gMDtcbiAgICAgIH1cbiAgICAgIHR6X29mZnNldCA9ICh0el9ob3VyICogNjAgKyB0el9taW51dGUpICogNjAwMDA7XG4gICAgICBpZiAoJy0nID09PSBpbmZvLnR6X3NpZ24pIHtcbiAgICAgICAgdHpfb2Zmc2V0ICo9IC0xO1xuICAgICAgfVxuICAgIH1cbiAgICBkYXRlID0gbmV3IERhdGUoRGF0ZS5VVEMoeWVhciwgbW9udGgsIGRheSwgaG91ciwgbWludXRlLCBzZWNvbmQsIGZyYWN0aW9uKSk7XG4gICAgaWYgKHR6X29mZnNldCkge1xuICAgICAgZGF0ZS5zZXRUaW1lKGRhdGUuZ2V0VGltZSgpIC0gdHpfb2Zmc2V0KTtcbiAgICB9XG4gICAgcmV0dXJuIGRhdGU7XG4gIH07XG5cbiAgVXRpbHMuc3RyUmVwZWF0ID0gZnVuY3Rpb24oc3RyLCBudW1iZXIpIHtcbiAgICB2YXIgaSwgcmVzO1xuICAgIHJlcyA9ICcnO1xuICAgIGkgPSAwO1xuICAgIHdoaWxlIChpIDwgbnVtYmVyKSB7XG4gICAgICByZXMgKz0gc3RyO1xuICAgICAgaSsrO1xuICAgIH1cbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIFV0aWxzLmdldFN0cmluZ0Zyb21GaWxlID0gZnVuY3Rpb24ocGF0aCwgY2FsbGJhY2spIHtcbiAgICB2YXIgZGF0YSwgZnMsIGosIGxlbjEsIG5hbWUsIHJlZiwgcmVxLCB4aHI7XG4gICAgaWYgKGNhbGxiYWNrID09IG51bGwpIHtcbiAgICAgIGNhbGxiYWNrID0gbnVsbDtcbiAgICB9XG4gICAgeGhyID0gbnVsbDtcbiAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiAmJiB3aW5kb3cgIT09IG51bGwpIHtcbiAgICAgIGlmICh3aW5kb3cuWE1MSHR0cFJlcXVlc3QpIHtcbiAgICAgICAgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gICAgICB9IGVsc2UgaWYgKHdpbmRvdy5BY3RpdmVYT2JqZWN0KSB7XG4gICAgICAgIHJlZiA9IFtcIk1zeG1sMi5YTUxIVFRQLjYuMFwiLCBcIk1zeG1sMi5YTUxIVFRQLjMuMFwiLCBcIk1zeG1sMi5YTUxIVFRQXCIsIFwiTWljcm9zb2Z0LlhNTEhUVFBcIl07XG4gICAgICAgIGZvciAoaiA9IDAsIGxlbjEgPSByZWYubGVuZ3RoOyBqIDwgbGVuMTsgaisrKSB7XG4gICAgICAgICAgbmFtZSA9IHJlZltqXTtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgeGhyID0gbmV3IEFjdGl2ZVhPYmplY3QobmFtZSk7XG4gICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHt9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHhociAhPSBudWxsKSB7XG4gICAgICBpZiAoY2FsbGJhY2sgIT0gbnVsbCkge1xuICAgICAgICB4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgaWYgKHhoci5yZWFkeVN0YXRlID09PSA0KSB7XG4gICAgICAgICAgICBpZiAoeGhyLnN0YXR1cyA9PT0gMjAwIHx8IHhoci5zdGF0dXMgPT09IDApIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKHhoci5yZXNwb25zZVRleHQpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKG51bGwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgeGhyLm9wZW4oJ0dFVCcsIHBhdGgsIHRydWUpO1xuICAgICAgICByZXR1cm4geGhyLnNlbmQobnVsbCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB4aHIub3BlbignR0VUJywgcGF0aCwgZmFsc2UpO1xuICAgICAgICB4aHIuc2VuZChudWxsKTtcbiAgICAgICAgaWYgKHhoci5zdGF0dXMgPT09IDIwMCB8fCB4aHIuc3RhdHVzID09PSAwKSB7XG4gICAgICAgICAgcmV0dXJuIHhoci5yZXNwb25zZVRleHQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlcSA9IHJlcXVpcmU7XG4gICAgICBmcyA9IHJlcSgnZnMnKTtcbiAgICAgIGlmIChjYWxsYmFjayAhPSBudWxsKSB7XG4gICAgICAgIHJldHVybiBmcy5yZWFkRmlsZShwYXRoLCBmdW5jdGlvbihlcnIsIGRhdGEpIHtcbiAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICByZXR1cm4gY2FsbGJhY2sobnVsbCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhTdHJpbmcoZGF0YSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkYXRhID0gZnMucmVhZEZpbGVTeW5jKHBhdGgpO1xuICAgICAgICBpZiAoZGF0YSAhPSBudWxsKSB7XG4gICAgICAgICAgcmV0dXJuIFN0cmluZyhkYXRhKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIFV0aWxzO1xuXG59KSgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFV0aWxzO1xuIiwiLy8gR2VuZXJhdGVkIGJ5IENvZmZlZVNjcmlwdCAxLjEyLjRcbnZhciBEdW1wZXIsIFBhcnNlciwgVXRpbHMsIFlhbWw7XG5cblBhcnNlciA9IHJlcXVpcmUoJy4vUGFyc2VyJyk7XG5cbkR1bXBlciA9IHJlcXVpcmUoJy4vRHVtcGVyJyk7XG5cblV0aWxzID0gcmVxdWlyZSgnLi9VdGlscycpO1xuXG5ZYW1sID0gKGZ1bmN0aW9uKCkge1xuICBmdW5jdGlvbiBZYW1sKCkge31cblxuICBZYW1sLnBhcnNlID0gZnVuY3Rpb24oaW5wdXQsIGV4Y2VwdGlvbk9uSW52YWxpZFR5cGUsIG9iamVjdERlY29kZXIpIHtcbiAgICBpZiAoZXhjZXB0aW9uT25JbnZhbGlkVHlwZSA9PSBudWxsKSB7XG4gICAgICBleGNlcHRpb25PbkludmFsaWRUeXBlID0gZmFsc2U7XG4gICAgfVxuICAgIGlmIChvYmplY3REZWNvZGVyID09IG51bGwpIHtcbiAgICAgIG9iamVjdERlY29kZXIgPSBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IFBhcnNlcigpLnBhcnNlKGlucHV0LCBleGNlcHRpb25PbkludmFsaWRUeXBlLCBvYmplY3REZWNvZGVyKTtcbiAgfTtcblxuICBZYW1sLnBhcnNlRmlsZSA9IGZ1bmN0aW9uKHBhdGgsIGNhbGxiYWNrLCBleGNlcHRpb25PbkludmFsaWRUeXBlLCBvYmplY3REZWNvZGVyKSB7XG4gICAgdmFyIGlucHV0O1xuICAgIGlmIChjYWxsYmFjayA9PSBudWxsKSB7XG4gICAgICBjYWxsYmFjayA9IG51bGw7XG4gICAgfVxuICAgIGlmIChleGNlcHRpb25PbkludmFsaWRUeXBlID09IG51bGwpIHtcbiAgICAgIGV4Y2VwdGlvbk9uSW52YWxpZFR5cGUgPSBmYWxzZTtcbiAgICB9XG4gICAgaWYgKG9iamVjdERlY29kZXIgPT0gbnVsbCkge1xuICAgICAgb2JqZWN0RGVjb2RlciA9IG51bGw7XG4gICAgfVxuICAgIGlmIChjYWxsYmFjayAhPSBudWxsKSB7XG4gICAgICByZXR1cm4gVXRpbHMuZ2V0U3RyaW5nRnJvbUZpbGUocGF0aCwgKGZ1bmN0aW9uKF90aGlzKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbihpbnB1dCkge1xuICAgICAgICAgIHZhciByZXN1bHQ7XG4gICAgICAgICAgcmVzdWx0ID0gbnVsbDtcbiAgICAgICAgICBpZiAoaW5wdXQgIT0gbnVsbCkge1xuICAgICAgICAgICAgcmVzdWx0ID0gX3RoaXMucGFyc2UoaW5wdXQsIGV4Y2VwdGlvbk9uSW52YWxpZFR5cGUsIG9iamVjdERlY29kZXIpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjYWxsYmFjayhyZXN1bHQpO1xuICAgICAgICB9O1xuICAgICAgfSkodGhpcykpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpbnB1dCA9IFV0aWxzLmdldFN0cmluZ0Zyb21GaWxlKHBhdGgpO1xuICAgICAgaWYgKGlucHV0ICE9IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyc2UoaW5wdXQsIGV4Y2VwdGlvbk9uSW52YWxpZFR5cGUsIG9iamVjdERlY29kZXIpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9O1xuXG4gIFlhbWwuZHVtcCA9IGZ1bmN0aW9uKGlucHV0LCBpbmxpbmUsIGluZGVudCwgZXhjZXB0aW9uT25JbnZhbGlkVHlwZSwgb2JqZWN0RW5jb2Rlcikge1xuICAgIHZhciB5YW1sO1xuICAgIGlmIChpbmxpbmUgPT0gbnVsbCkge1xuICAgICAgaW5saW5lID0gMjtcbiAgICB9XG4gICAgaWYgKGluZGVudCA9PSBudWxsKSB7XG4gICAgICBpbmRlbnQgPSA0O1xuICAgIH1cbiAgICBpZiAoZXhjZXB0aW9uT25JbnZhbGlkVHlwZSA9PSBudWxsKSB7XG4gICAgICBleGNlcHRpb25PbkludmFsaWRUeXBlID0gZmFsc2U7XG4gICAgfVxuICAgIGlmIChvYmplY3RFbmNvZGVyID09IG51bGwpIHtcbiAgICAgIG9iamVjdEVuY29kZXIgPSBudWxsO1xuICAgIH1cbiAgICB5YW1sID0gbmV3IER1bXBlcigpO1xuICAgIHlhbWwuaW5kZW50YXRpb24gPSBpbmRlbnQ7XG4gICAgcmV0dXJuIHlhbWwuZHVtcChpbnB1dCwgaW5saW5lLCAwLCBleGNlcHRpb25PbkludmFsaWRUeXBlLCBvYmplY3RFbmNvZGVyKTtcbiAgfTtcblxuICBZYW1sLnJlZ2lzdGVyID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHJlcXVpcmVfaGFuZGxlcjtcbiAgICByZXF1aXJlX2hhbmRsZXIgPSBmdW5jdGlvbihtb2R1bGUsIGZpbGVuYW1lKSB7XG4gICAgICByZXR1cm4gbW9kdWxlLmV4cG9ydHMgPSBZQU1MLnBhcnNlRmlsZShmaWxlbmFtZSk7XG4gICAgfTtcbiAgICBpZiAoKHR5cGVvZiByZXF1aXJlICE9PSBcInVuZGVmaW5lZFwiICYmIHJlcXVpcmUgIT09IG51bGwgPyByZXF1aXJlLmV4dGVuc2lvbnMgOiB2b2lkIDApICE9IG51bGwpIHtcbiAgICAgIHJlcXVpcmUuZXh0ZW5zaW9uc1snLnltbCddID0gcmVxdWlyZV9oYW5kbGVyO1xuICAgICAgcmV0dXJuIHJlcXVpcmUuZXh0ZW5zaW9uc1snLnlhbWwnXSA9IHJlcXVpcmVfaGFuZGxlcjtcbiAgICB9XG4gIH07XG5cbiAgWWFtbC5zdHJpbmdpZnkgPSBmdW5jdGlvbihpbnB1dCwgaW5saW5lLCBpbmRlbnQsIGV4Y2VwdGlvbk9uSW52YWxpZFR5cGUsIG9iamVjdEVuY29kZXIpIHtcbiAgICByZXR1cm4gdGhpcy5kdW1wKGlucHV0LCBpbmxpbmUsIGluZGVudCwgZXhjZXB0aW9uT25JbnZhbGlkVHlwZSwgb2JqZWN0RW5jb2Rlcik7XG4gIH07XG5cbiAgWWFtbC5sb2FkID0gZnVuY3Rpb24ocGF0aCwgY2FsbGJhY2ssIGV4Y2VwdGlvbk9uSW52YWxpZFR5cGUsIG9iamVjdERlY29kZXIpIHtcbiAgICByZXR1cm4gdGhpcy5wYXJzZUZpbGUocGF0aCwgY2FsbGJhY2ssIGV4Y2VwdGlvbk9uSW52YWxpZFR5cGUsIG9iamVjdERlY29kZXIpO1xuICB9O1xuXG4gIHJldHVybiBZYW1sO1xuXG59KSgpO1xuXG5pZiAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiAmJiB3aW5kb3cgIT09IG51bGwpIHtcbiAgd2luZG93LllBTUwgPSBZYW1sO1xufVxuXG5pZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJ1bmRlZmluZWRcIiB8fCB3aW5kb3cgPT09IG51bGwpIHtcbiAgdGhpcy5ZQU1MID0gWWFtbDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBZYW1sO1xuIiwiaW1wb3J0IENDU1MgZnJvbSAndGFuZ3JhbS1jYXJ0b2Nzcyc7XG5pbXBvcnQgeWFtbCBmcm9tICcuL3lhbWwnO1xuaW1wb3J0IG1kNSBmcm9tICdtZDUnO1xuXG52YXIgU09VUkNFUyA9IHtcbiAgICBtYXBuaWs6IHtcbiAgICAgICAgdHlwZTogJ01WVCdcbiAgICB9XG59O1xuXG52YXIgZ2VuZXJhdGVTb3VyY2VzID0gZnVuY3Rpb24gZ2VuZXJhdGVTb3VyY2VzKHVybCwgc3ViZG9tYWlucykge1xuICAvLyBUT0RPOiBtYWtlIHRoaXMgZHluYW1pYyBpZiBpdCBpcyBuZWNjZXNzYXJ5XG4gIHZhciBzb3VyY2UgPSBTT1VSQ0VTLm1hcG5paztcblxuICByZXR1cm4ge1xuICAgIHR5cGU6IHNvdXJjZS50eXBlLFxuICAgIHVybDogdXJsLFxuICAgIHVybF9zdWJkb21haW5zOiBzdWJkb21haW5zXG4gIH07XG59O1xuXG52YXIgVEMgPSBmdW5jdGlvbiAobWFwLCBjYikge1xuICB0aGlzLmxheWVyID0gVGFuZ3JhbS5sZWFmbGV0TGF5ZXIoe1xuICAgIHNjZW5lOiB5YW1sLmdldEJhc2VGaWxlKClcbiAgfSkuYWRkVG8obWFwKTtcblxuICB0aGlzLnNjZW5lID0gdGhpcy5sYXllci5zY2VuZTtcblxuICB0aGlzLnNjZW5lLnN1YnNjcmliZSh7XG4gICAgbG9hZDogKCkgPT4ge1xuICAgICAgdGhpcy5zY2VuZS5zZXRJbnRyb3NwZWN0aW9uKHRydWUpO1xuICAgICAgY2IoKTtcbiAgICB9XG4gIH0pO1xuXG59O1xuXG5UQy5wcm90b3R5cGUgPSB7XG4gIG9uTG9hZGVkOiBmdW5jdGlvbiAoY2IpIHtcbiAgICB0aGlzLnNjZW5lLnN1YnNjcmliZSh7XG4gICAgICB2aWV3X2NvbXBsZXRlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNiKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0sXG5cbiAgYWRkRXZlbnRzOiBmdW5jdGlvbiAoZXYpIHtcbiAgICB0aGlzLnRhbmdyYW1MYXllci5zZXRTZWxlY3Rpb25FdmVudHMoZXYpO1xuICB9LFxuXG4gIGdldFRvdGFsR2VvbWV0cmllczogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKHRoaXMuc2NlbmUudGlsZV9tYW5hZ2VyLnRpbGVzKS5yZWR1Y2UoKHN1bSwgdGlsZUlkKSA9PiB7XG4gICAgICByZXR1cm4gc3VtICsgdGhpcy5zY2VuZS50aWxlX21hbmFnZXIudGlsZXNbdGlsZUlkXS5kZWJ1Zy5nZW9tZXRyeV9jb3VudDtcbiAgICB9LCAwKTtcbiAgfSxcblxuICBhZGRMYXllcjogZnVuY3Rpb24gKGxheWVyLCBpKSB7XG4gICAgbGV0IGNvbmZpZyA9IENDU1MuY2FydG8yRHJhdyhsYXllci5tZXRhLmNhcnRvY3NzLCBpKTtcblxuICAgIGNvbmZpZy5mb3JFYWNoKGwgPT4ge1xuICAgICAgbGV0IGx5ID0ge1xuICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgbGF5ZXI6IGxheWVyLmlkLFxuICAgICAgICAgIHNvdXJjZTogJ0NhcnRvREInXG4gICAgICAgIH0sXG4gICAgICAgIGRyYXc6IGwuZHJhdyxcbiAgICAgICAgdmlzaWJsZTogbGF5ZXIudmlzaWJsZVxuICAgICAgfTtcblxuICAgICAgY29uc3QgbGF5ZXJOYW1lID0gbWQ1KGxheWVyLmlkICsgbC5uYW1lKTtcblxuICAgICAgdGhpcy5zY2VuZS5jb25maWcubGF5ZXJzW2xheWVyTmFtZV0gPSBseTtcblxuICAgICAgT2JqZWN0LmFzc2lnbihcbiAgICAgICAgdGhpcy5zY2VuZS5jb25maWcuc3R5bGVzLFxuICAgICAgICBsLnN0eWxlc1xuICAgICAgKTtcblxuICAgICAgT2JqZWN0LmFzc2lnbihcbiAgICAgICAgdGhpcy5zY2VuZS5jb25maWcudGV4dHVyZXMsXG4gICAgICAgIGwudGV4dHVyZXNcbiAgICAgICk7XG4gICAgfSk7XG5cbiAgICB0aGlzLnNjZW5lLnVwZGF0ZUNvbmZpZyh7cmVidWlsZDogdHJ1ZX0pO1xuICB9LFxuXG4gIGFkZERhdGFTb3VyY2U6IGZ1bmN0aW9uICh1cmwsIHN1YmRvbWFpbnMpIHtcbiAgICB0aGlzLnNjZW5lLnNldERhdGFTb3VyY2UoJ0NhcnRvREInLCBnZW5lcmF0ZVNvdXJjZXModXJsLCBzdWJkb21haW5zKSk7XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IFRDO1xuIiwiaW1wb3J0IHlhbWxqcyBmcm9tICd5YW1sanMnO1xuXG5jb25zdCBnZXRCYXNlUHJvcGVydGllcyA9IGZ1bmN0aW9uIGdldEJhc2VQcm9wZXJ0aWVzKCkge1xuICByZXR1cm4ge1xuICAgIGdsb2JhbDoge1xuICAgICAgbGFuZ3VhZ2U6ICdlbidcbiAgICB9LFxuICAgIGZvbnRzOiB7XG4gICAgICBNb250c2VycmF0OiB7XG4gICAgICAgIHVybDogJ2h0dHBzOi8vZm9udHMuZ3N0YXRpYy5jb20vcy9tb250c2VycmF0L3Y3L3poY3otX1dpaGpTUUMwb0hKOVRDWUwzaHB3M3BneTJnQWktSXA3V1BNaTAud29mZidcbiAgICAgIH1cbiAgICB9LFxuICAgIGxheWVyczoge30sXG4gICAgc3R5bGVzOiB7XG4gICAgICAgIHBvbHlnb25zX2JsZW5kOiB7XG4gICAgICAgICAgICBiYXNlOiAncG9seWdvbnMnLFxuICAgICAgICAgICAgYmxlbmQ6ICdvdmVybGF5J1xuICAgICAgICB9LFxuICAgICAgICBsaW5lc19ibGVuZDoge1xuICAgICAgICAgICAgYmFzZTogJ2xpbmVzJyxcbiAgICAgICAgICAgIGJsZW5kOiAnb3ZlcmxheSdcbiAgICAgICAgfSxcbiAgICAgICAgcG9pbnRzX2JsZW5kOiB7XG4gICAgICAgICAgICBiYXNlOiAncG9pbnRzJyxcbiAgICAgICAgICAgIGJsZW5kOiAnb3ZlcmxheSdcbiAgICAgICAgfVxuICAgIH1cbiAgfTtcbn07XG5cbmNvbnN0IGdlbmVyYXRlWUFNTCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHlhbWxqcy5zdHJpbmdpZnkoIGdldEJhc2VQcm9wZXJ0aWVzKCksIDMpO1xufTtcblxuY29uc3QgZ2V0QmFzZUZpbGUgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBVUkwuY3JlYXRlT2JqZWN0VVJMKCBuZXcgQmxvYiggWyBnZW5lcmF0ZVlBTUwoKSBdICkgKTtcbn07XG5cbnZhciB5YW1sO1xuZXhwb3J0IGRlZmF1bHQgeWFtbCA9IHtcbiAgZ2V0QmFzZUZpbGVcbn07XG4iXX0=
