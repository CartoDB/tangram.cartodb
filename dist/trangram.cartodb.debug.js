(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.TangramCarto = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){
(function (global){
!function(e){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{var t;t="undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:this,t.CCSS=e()}}(function(){var define,module,exports;return function e(t,n,r){function i(a,s){if(!n[a]){if(!t[a]){var l="function"==typeof _dereq_&&_dereq_;if(!s&&l)return l(a,!0);if(o)return o(a,!0);var u=new Error("Cannot find module '"+a+"'");throw u.code="MODULE_NOT_FOUND",u}var c=n[a]={exports:{}};t[a][0].call(c.exports,function(e){var n=t[a][1][e];return i(n?n:e)},c,c.exports,e,t,n,r)}return n[a].exports}for(var o="function"==typeof _dereq_&&_dereq_,a=0;a<r.length;a++)i(r[a]);return i}({1:[function(e,t){function n(e,t){return d.isUndefined(t)?""+t:d.isNumber(t)&&!isFinite(t)?t.toString():d.isFunction(t)||d.isRegExp(t)?t.toString():t}function r(e,t){return d.isString(e)?e.length<t?e:e.slice(0,t):e}function i(e){return r(JSON.stringify(e.actual,n),128)+" "+e.operator+" "+r(JSON.stringify(e.expected,n),128)}function o(e,t,n,r,i){throw new m.AssertionError({message:n,actual:e,expected:t,operator:r,stackStartFunction:i})}function a(e,t){e||o(e,!0,t,"==",m.ok)}function s(e,t){if(e===t)return!0;if(d.isBuffer(e)&&d.isBuffer(t)){if(e.length!=t.length)return!1;for(var n=0;n<e.length;n++)if(e[n]!==t[n])return!1;return!0}return d.isDate(e)&&d.isDate(t)?e.getTime()===t.getTime():d.isRegExp(e)&&d.isRegExp(t)?e.source===t.source&&e.global===t.global&&e.multiline===t.multiline&&e.lastIndex===t.lastIndex&&e.ignoreCase===t.ignoreCase:d.isObject(e)||d.isObject(t)?u(e,t):e==t}function l(e){return"[object Arguments]"==Object.prototype.toString.call(e)}function u(e,t){if(d.isNullOrUndefined(e)||d.isNullOrUndefined(t))return!1;if(e.prototype!==t.prototype)return!1;if(d.isPrimitive(e)||d.isPrimitive(t))return e===t;var n=l(e),r=l(t);if(n&&!r||!n&&r)return!1;if(n)return e=h.call(e),t=h.call(t),s(e,t);var i,o,a=g(e),u=g(t);if(a.length!=u.length)return!1;for(a.sort(),u.sort(),o=a.length-1;o>=0;o--)if(a[o]!=u[o])return!1;for(o=a.length-1;o>=0;o--)if(i=a[o],!s(e[i],t[i]))return!1;return!0}function c(e,t){return e&&t?"[object RegExp]"==Object.prototype.toString.call(t)?t.test(e):e instanceof t?!0:t.call({},e)===!0?!0:!1:!1}function f(e,t,n,r){var i;d.isString(n)&&(r=n,n=null);try{t()}catch(a){i=a}if(r=(n&&n.name?" ("+n.name+").":".")+(r?" "+r:"."),e&&!i&&o(i,n,"Missing expected exception"+r),!e&&c(i,n)&&o(i,n,"Got unwanted exception"+r),e&&i&&n&&!c(i,n)||!e&&i)throw i}var d=e("util/"),h=Array.prototype.slice,p=Object.prototype.hasOwnProperty,m=t.exports=a;m.AssertionError=function(e){this.name="AssertionError",this.actual=e.actual,this.expected=e.expected,this.operator=e.operator,e.message?(this.message=e.message,this.generatedMessage=!1):(this.message=i(this),this.generatedMessage=!0);var t=e.stackStartFunction||o;if(Error.captureStackTrace)Error.captureStackTrace(this,t);else{var n=new Error;if(n.stack){var r=n.stack,a=t.name,s=r.indexOf("\n"+a);if(s>=0){var l=r.indexOf("\n",s+1);r=r.substring(l+1)}this.stack=r}}},d.inherits(m.AssertionError,Error),m.fail=o,m.ok=a,m.equal=function(e,t,n){e!=t&&o(e,t,n,"==",m.equal)},m.notEqual=function(e,t,n){e==t&&o(e,t,n,"!=",m.notEqual)},m.deepEqual=function(e,t,n){s(e,t)||o(e,t,n,"deepEqual",m.deepEqual)},m.notDeepEqual=function(e,t,n){s(e,t)&&o(e,t,n,"notDeepEqual",m.notDeepEqual)},m.strictEqual=function(e,t,n){e!==t&&o(e,t,n,"===",m.strictEqual)},m.notStrictEqual=function(e,t,n){e===t&&o(e,t,n,"!==",m.notStrictEqual)},m.throws=function(){f.apply(this,[!0].concat(h.call(arguments)))},m.doesNotThrow=function(){f.apply(this,[!1].concat(h.call(arguments)))},m.ifError=function(e){if(e)throw e};var g=Object.keys||function(e){var t=[];for(var n in e)p.call(e,n)&&t.push(n);return t}},{"util/":45}],2:[function(){},{}],3:[function(e){!function(e){function t(t){return e.functions.hsla(t.h,t.s,t.l,t.a)}function n(t){return t instanceof e.Dimension?parseFloat("%"==t.unit?t.value/100:t.value):"number"==typeof t?t:0/0}function r(e){return Math.min(1,Math.max(0,e))}e.functions={rgb:function(e,t,n){return this.rgba(e,t,n,1)},rgba:function(t,r,i,o){var a=[t,r,i].map(function(e){return n(e)});return o=n(o),a.some(isNaN)||isNaN(o)?null:new e.Color(a,o)},stop:function(e){var t,n;return arguments.length>1&&(t=arguments[1]),arguments.length>2&&(n=arguments[2]),{is:"tag",val:e,color:t,mode:n,toString:function(r){return'\n	<stop value="'+e.ev(r)+'"'+(t?' color="'+t.ev(r)+'" ':"")+(n?' mode="'+n.ev(r)+'" ':"")+"/>"}}},hsl:function(e,t,n){return this.hsla(e,t,n,1)},hsla:function(e,t,r,i){function o(e){return e=0>e?e+1:e>1?e-1:e,1>6*e?s+(a-s)*e*6:1>2*e?a:2>3*e?s+(a-s)*(2/3-e)*6:s}if(e=n(e)%360/360,t=n(t),r=n(r),i=n(i),[e,t,r,i].some(isNaN))return null;var a=.5>=r?r*(t+1):r+t-r*t,s=2*r-a;return this.rgba(255*o(e+1/3),255*o(e),255*o(e-1/3),i)},hue:function(t){return"toHSL"in t?new e.Dimension(Math.round(t.toHSL().h)):null},saturation:function(t){return"toHSL"in t?new e.Dimension(Math.round(100*t.toHSL().s),"%"):null},lightness:function(t){return"toHSL"in t?new e.Dimension(Math.round(100*t.toHSL().l),"%"):null},alpha:function(t){return"toHSL"in t?new e.Dimension(t.toHSL().a):null},saturate:function(e,n){if(!("toHSL"in e))return null;var i=e.toHSL();return i.s+=n.value/100,i.s=r(i.s),t(i)},desaturate:function(e,n){if(!("toHSL"in e))return null;var i=e.toHSL();return i.s-=n.value/100,i.s=r(i.s),t(i)},lighten:function(e,n){if(!("toHSL"in e))return null;var i=e.toHSL();return i.l+=n.value/100,i.l=r(i.l),t(i)},darken:function(e,n){if(!("toHSL"in e))return null;var i=e.toHSL();return i.l-=n.value/100,i.l=r(i.l),t(i)},fadein:function(e,n){if(!("toHSL"in e))return null;var i=e.toHSL();return i.a+=n.value/100,i.a=r(i.a),t(i)},fadeout:function(e,n){if(!("toHSL"in e))return null;var i=e.toHSL();return i.a-=n.value/100,i.a=r(i.a),t(i)},spin:function(e,n){if(!("toHSL"in e))return null;var r=e.toHSL(),i=(r.h+n.value)%360;return r.h=0>i?360+i:i,t(r)},replace:function(e,t,n){return"field"===e.is?e.toString+".replace("+t.toString()+", "+n.toString()+")":e.replace(t,n)},mix:function(t,n,r){var i=r.value/100,o=2*i-1,a=t.toHSL().a-n.toHSL().a,s=((o*a==-1?o:(o+a)/(1+o*a))+1)/2,l=1-s,u=[t.rgb[0]*s+n.rgb[0]*l,t.rgb[1]*s+n.rgb[1]*l,t.rgb[2]*s+n.rgb[2]*l],c=t.alpha*i+n.alpha*(1-i);return new e.Color(u,c)},greyscale:function(t){return this.desaturate(t,new e.Dimension(100))},"%":function(t){for(var n=Array.prototype.slice.call(arguments,1),r=t.value,i=0;i<n.length;i++)r=r.replace(/%s/,n[i].value).replace(/%[da]/,n[i].toString());return r=r.replace(/%%/g,"%"),new e.Quoted(r)}};for(var i=["emboss","blur","gray","sobel","edge-detect","x-gradient","y-gradient","sharpen"],o=0;o<i.length;o++){var a=i[o];e.functions[a]=function(t){return function(){return new e.ImageFilter(t)}}(a)}e.functions["agg-stack-blur"]=function(t,n){return new e.ImageFilter("agg-stack-blur",[t,n])},e.functions["scale-hsla"]=function(t,n,r,i,o,a,s,l){return new e.ImageFilter("scale-hsla",[t,n,r,i,o,a,s,l])}}(e("./tree"))},{"./tree":9}],4:[function(e,t,n){(function(t,r){function i(){if(t.browser)return e("../../package.json").version.split(".");if(parseInt(t.version.split(".")[1],10)>4)return e("../../package.json").version.split(".");var n=JSON.parse(s.readFileSync(l.join(r,"../../package.json")));return n.version.split(".")}function o(e,t){var n={bold:[1,22],inverse:[7,27],underline:[4,24],yellow:[33,39],green:[32,39],red:[31,39],grey:[90,39]};return"["+n[t][0]+"m"+e+"["+n[t][1]+"m"}var a=e("util"),s=e("fs"),l=e("path"),u={version:i(),Parser:e("./parser").Parser,Renderer:e("./renderer").Renderer,tree:e("./tree"),RendererJS:e("./renderer_js"),default_reference:e("./torque-reference"),writeError:function(e,t){var n="",r=e.extract,i=[];if(t=t||{},!t.silent){if(t.indent=t.indent||"",!("index"in e&&r))return a.error(t.indent+(e.stack||e.message));"string"==typeof r[0]&&i.push(o(e.line-1+" "+r[0],"grey")),""===r[1]&&"undefined"==typeof r[2]&&(r[1]="Â¶"),i.push(e.line+" "+r[1].slice(0,e.column)+o(o(r[1][e.column],"bold")+r[1].slice(e.column+1),"yellow")),"string"==typeof r[2]&&i.push(o(e.line+1+" "+r[2],"grey")),i=t.indent+i.join("\n"+t.indent)+"[0m\n",n=t.indent+n+o(e.message,"red"),e.filename&&(n+=o(" in ","red")+e.filename),a.error(n,i),e.callLine&&(a.error(o("from ","red")+(e.filename||"")),a.error(o(e.callLine,"grey")+" "+e.callExtract)),e.stack&&a.error(o(e.stack,"red"))}}};e("./tree/call"),e("./tree/color"),e("./tree/comment"),e("./tree/definition"),e("./tree/dimension"),e("./tree/element"),e("./tree/expression"),e("./tree/filterset"),e("./tree/filter"),e("./tree/field"),e("./tree/keyword"),e("./tree/layer"),e("./tree/literal"),e("./tree/operation"),e("./tree/quoted"),e("./tree/imagefilter"),e("./tree/reference"),e("./tree/rule"),e("./tree/ruleset"),e("./tree/selector"),e("./tree/style"),e("./tree/url"),e("./tree/value"),e("./tree/variable"),e("./tree/zoom"),e("./tree/invalid"),e("./tree/fontset"),e("./tree/frame_offset"),e("./functions");for(var c in u)n[c]=u[c]}).call(this,e("_process"),"/node_modules/carto/lib/carto")},{"../../package.json":38,"./functions":3,"./parser":5,"./renderer":6,"./renderer_js":7,"./torque-reference":8,"./tree":9,"./tree/call":10,"./tree/color":11,"./tree/comment":12,"./tree/definition":13,"./tree/dimension":14,"./tree/element":15,"./tree/expression":16,"./tree/field":17,"./tree/filter":18,"./tree/filterset":19,"./tree/fontset":20,"./tree/frame_offset":21,"./tree/imagefilter":22,"./tree/invalid":23,"./tree/keyword":24,"./tree/layer":25,"./tree/literal":26,"./tree/operation":27,"./tree/quoted":28,"./tree/reference":29,"./tree/rule":30,"./tree/ruleset":31,"./tree/selector":32,"./tree/style":33,"./tree/url":34,"./tree/value":35,"./tree/variable":36,"./tree/zoom":37,_process:41,fs:2,path:40,util:45}],5:[function(e,t,n){(function(t){var r=n,i=e("./tree"),o=t._||e("underscore");r.Parser=function(e){function t(){h=g[d],p=f,v=f}function n(){g[d]=h,f=p,v=f}function r(){f>v&&(g[d]=g[d].slice(f-v),v=f)}function a(e){var t,n,i,o;if(e instanceof Function)return e.call(y.parsers);if("string"==typeof e)t=c.charAt(f)===e?e:null,n=1,r();else{if(r(),t=e.exec(g[d]),!t)return null;n=t[0].length}if(t){var a=f+=n;for(o=f+g[d].length-n;o>f&&(i=c.charCodeAt(f),32===i||10===i||9===i);)f++;return g[d]=g[d].slice(n+(f-a)),v=f,0===g[d].length&&d<g.length-1&&d++,"string"==typeof t?t:1===t.length?t[0]:t}}function s(e){return"string"==typeof e?c.charAt(f)===e:!!e.test(g[d])}function l(e,t){return(e.slice(0,t).match(/\n/g)||"").length+1}function u(t){var n,r;o.defaults(t,{index:m,filename:e.filename,message:"Parse error.",line:0,column:-1}),n=t.filename&&b.env.inputs&&b.env.inputs[t.filename]?b.env.inputs[t.filename]:c,t.line=l(n,t.index);for(var i=t.index;i>=0&&"\n"!==n.charAt(i);i--)t.column++;return r=o.template("<%=filename%>:<%=line%>:<%=column%> <%=message%>"),new Error(r(t))}var c,f,d,h,p,m,g,v,y,b=this;return this.env=e=e||{},this.env.filename=this.env.filename||null,this.env.inputs=this.env.inputs||{},y={extractErrorLine:l,parse:function(t){var n,r=null;f=d=v=m=0,g=[],c=t.replace(/\r\n/g,"\n"),e.filename&&(b.env.inputs[e.filename]=c);if(g=function(e){for(var t,n,i,o,a=0,s=/(?:@\{[\w-]+\}|[^"'`\{\}\/\(\)\\])+/g,l=/\/\*(?:[^*]|\*+[^\/*])*\*+\/|\/\/.*/g,u=/"((?:[^"\\\r\n]|\\.)*)"|'((?:[^'\\\r\n]|\\.)*)'|`((?:[^`]|\\.)*)`/g,f=0,d=e[0],h=0;h<c.length;)if(s.lastIndex=h,(t=s.exec(c))&&t.index===h&&(h+=t[0].length,d.push(t[0])),i=c.charAt(h),l.lastIndex=u.lastIndex=h,(t=u.exec(c))&&t.index===h)h+=t[0].length,d.push(t[0]);else if(n||"/"!==i||(o=c.charAt(h+1),"/"!==o&&"*"!==o||!(t=l.exec(c))||t.index!==h)){switch(i){case"{":if(!n){f++,d.push(i);break}case"}":if(!n){f--,d.push(i),e[++a]=d=[];break}case"(":if(!n){n=!0,d.push(i);break}case")":if(n){n=!1,d.push(i);break}default:d.push(i)}h++}else h+=t[0].length,d.push(t[0]);return 0!==f&&(r={index:h-1,type:"Parse",message:f>0?"missing closing `}`":"missing opening `{`"}),e.map(function(e){return e.join("")})}([[]]),r)throw u(r);n=new i.Ruleset([],a(this.parsers.primary)),n.root=!0,n.toList=function(){return function(e){e.error=function(t){e.errors||(e.errors=new Error("")),e.errors.message?e.errors.message+="\n"+u(t).message:e.errors.message=u(t).message},e.frames=e.frames||[];var t=this.flatten([],[],e);return t.sort(o),t}}();var o=function(e,t){var n=e.specificity,r=t.specificity;return n[0]!=r[0]?r[0]-n[0]:n[1]!=r[1]?r[1]-n[1]:n[2]!=r[2]?r[2]-n[2]:r[3]-n[3]};return n},parsers:{primary:function(){for(var e,t=[];(e=a(this.rule)||a(this.ruleset)||a(this.comment))||a(/^[\s\n]+/)||(e=a(this.invalid));)e&&t.push(e);return t},invalid:function(){var e=a(/^[^;\n]*[;\n]/);return e?new i.Invalid(e,p):void 0},comment:function(){var e;if("/"===c.charAt(f))return"/"===c.charAt(f+1)?new i.Comment(a(/^\/\/.*/),!0):(e=a(/^\/\*(?:[^*]|\*+[^\/*])*\*+\/\n?/))?new i.Comment(e):void 0},entities:{quoted:function(){if('"'===c.charAt(f)||"'"===c.charAt(f)){var e=a(/^"((?:[^"\\\r\n]|\\.)*)"|'((?:[^'\\\r\n]|\\.)*)'/);return e?new i.Quoted(e[1]||e[2]):void 0}},field:function(){if(a("[")){var e=a(/(^[^\]]+)/);if(a("]"))return e?new i.Field(e[1]):void 0}},comparison:function(){var e=a(/^=~|=|!=|<=|>=|<|>/);return e?e:void 0},keyword:function(){var e=a(/^[A-Za-z-]+[A-Za-z-0-9_]*/);return e?new i.Keyword(e):void 0},call:function(){var e,t;if(e=/^([\w\-]+|%)\(/.exec(g[d])){if(e=e[1],"url"===e)return null;if(f+=e.length,a("("),t=a(this.entities.arguments),a(")"))return e?new i.Call(e,t,f):void 0}},arguments:function(){for(var e,t=[];(e=a(this.expression))&&(t.push(e),a(",")););return t},literal:function(){return a(this.entities.dimension)||a(this.entities.keywordcolor)||a(this.entities.hexcolor)||a(this.entities.quoted)},url:function(){var e;if("u"===c.charAt(f)&&a(/^url\(/))return e=a(this.entities.quoted)||a(this.entities.variable)||a(/^[\-\w%@$\/.&=:;#+?~]+/)||"",a(")")?new i.URL("undefined"!=typeof e.value||e instanceof i.Variable?e:new i.Quoted(e)):new i.Invalid(e,p,"Missing closing ) in URL.")},variable:function(){var t,n=f;return"@"===c.charAt(f)&&(t=a(/^@[\w-]+/))?new i.Variable(t,n,e.filename):void 0},hexcolor:function(){var e;return"#"===c.charAt(f)&&(e=a(/^#([a-fA-F0-9]{6}|[a-fA-F0-9]{3})/))?new i.Color(e[1]):void 0},keywordcolor:function(){var e=g[d].match(/^[a-z]+/);return e&&e[0]in i.Reference.data.colors?new i.Color(i.Reference.data.colors[a(/^[a-z]+/)]):void 0},dimension:function(){var e=c.charCodeAt(f);if(!(e>57||45>e||47===e)){var t=a(/^(-?\d*\.?\d+(?:[eE][-+]?\d+)?)(\%|\w+)?/);return t?new i.Dimension(t[1],t[2],p):void 0}}},variable:function(){var e;return"@"===c.charAt(f)&&(e=a(/^(@[\w-]+)\s*:/))?e[1]:void 0},entity:function(){return a(this.entities.call)||a(this.entities.literal)||a(this.entities.field)||a(this.entities.variable)||a(this.entities.url)||a(this.entities.keyword)},end:function(){return a(";")||s("}")},element:function(){var e=a(/^(?:[.#][\w\-]+|\*|Map)/);return e?new i.Element(e):void 0},attachment:function(){var e=a(/^::([\w\-]+(?:\/[\w\-]+)*)/);return e?e[1]:void 0},selector:function(){var e,t,n,r,o,s=[],l=new i.Filterset,d=[],h=i.FrameOffset.none;for(segments=0,conditions=0;(n=a(this.element))||(o=a(this.zoom))||(fo=a(this.frame_offset))||(r=a(this.filter))||(e=a(this.attachment));){if(segments++,n)s.push(n);else if(o)d.push(o),conditions++;else if(fo)h=fo,conditions++;else if(r){var m=l.add(r);if(m)throw u({message:m,index:f-1});conditions++}else{if(t)throw u({message:"Encountered second attachment name.",index:f-1});t=e}var g=c.charAt(f);if("{"===g||"}"===g||";"===g||","===g)break}return segments?new i.Selector(l,d,h,s,t,conditions,p):void 0},filter:function(){t();var n,r,o;if(a("[")&&(n=a(/^[a-zA-Z0-9\-_]+/)||a(this.entities.quoted)||a(this.entities.variable)||a(this.entities.keyword)||a(this.entities.field))&&(n instanceof i.Quoted&&(n=new i.Field(n.toString())),(r=a(this.entities.comparison))&&(o=a(this.entities.quoted)||a(this.entities.variable)||a(this.entities.dimension)||a(this.entities.keyword)||a(this.entities.field)))){if(!a("]"))throw u({message:"Missing closing ] of filter.",index:p-1});return n.is||(n=new i.Field(n)),new i.Filter(n,r,o,p,e.filename)}},frame_offset:function(){t();var e,n;return a(/^\[\s*frame-offset/g)&&(e=a(this.entities.comparison))&&(n=a(/^\d+/))&&a("]")?i.FrameOffset(e,n,p):void 0},zoom:function(){t();var e,r;return a(/^\[\s*zoom/g)&&(e=a(this.entities.comparison))&&(r=a(this.entities.variable)||a(this.entities.dimension))&&a("]")?new i.Zoom(e,r,p):void n()},block:function(){var e;return a("{")&&(e=a(this.primary))&&a("}")?e:void 0},ruleset:function(){var e,r,o=[];for(t();e=a(this.selector);){for(o.push(e);a(this.comment););if(!a(","))break;for(;a(this.comment););}if(e)for(;a(this.comment););if(o.length>0&&(r=a(this.block))){if(1===o.length&&o[0].elements.length&&"Map"===o[0].elements[0].value){var s=new i.Ruleset(o,r);return s.isMap=!0,s}return new i.Ruleset(o,r)}n()},rule:function(){var r,o,s=c.charAt(f);if(t(),"."!==s&&"#"!==s&&(r=a(this.variable)||a(this.property))){if(o=a(this.value),o&&a(this.end))return new i.Rule(r,o,p,e.filename);m=f,n()}},font:function(){for(var e,t=[],n=[];e=a(this.entity);)n.push(e);if(t.push(new i.Expression(n)),a(","))for(;(e=a(this.expression))&&(t.push(e),a(",")););return new i.Value(t)},value:function(){for(var e,t=[];(e=a(this.expression))&&(t.push(e),a(",")););return t.length>1?new i.Value(t.map(function(e){return e.value[0]})):1===t.length?new i.Value(t):void 0},sub:function(){var e,t=[];if(a("(")){for(;(e=a(this.expression))&&(t.push(e),a(",")););a(")")}return t.length>1?new i.Value(t.map(function(e){return e.value[0]})):1===t.length?new i.Value(t):void 0},multiplication:function(){var e,t,n,r;if(e=a(this.operand)){for(;(n=a("/")||a("*")||a("%"))&&(t=a(this.operand));)r=new i.Operation(n,[r||e,t],p);return r||e}},addition:function(){var e,t,n,r;if(e=a(this.multiplication)){for(;(n=a(/^[-+]\s+/)||" "!=c.charAt(f-1)&&(a("+")||a("-")))&&(t=a(this.multiplication));)r=new i.Operation(n,[r||e,t],p);return r||e}},operand:function(){return a(this.sub)||a(this.entity)},expression:function(){for(var e,t=[];e=a(this.addition)||a(this.entity);)t.push(e);return t.length>0?new i.Expression(t):void 0},property:function(){var e=a(/^(([a-z][-a-z_0-9]*\/)?\*?-?[-a-z_0-9]+)\s*:/);return e?e[1]:void 0}}}}}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"./tree":9,underscore:42}],6:[function(e,t){(function(n){function r(e,t,n){for(var r,i,o,a=t.filters,s=t.rules,l=0;l<e.length;l++)r=e[l].filters.cloneWith(a),r?(o=n[r],o?o.addRules(s):(i=e[l].clone(r),i.addRules(s)&&(n[r]=i,e.splice(l,0,i),l++))):null===r&&(e[l]=e[l].clone(),e[l].addRules(s));return e}function i(e,t){var n,i,o=+new Date,a={},s={},l=[];e.forEach(function(e){e.filters.ev(t)});for(var u=0;u<e.length;u++){i=e[u].attachment,n=[e[u]],a[i]||(a[i]=[],a[i].attachment=i,s[i]={},l.push(a[i]));for(var c=u+1;c<e.length;c++)e[c].attachment===i&&(n=r(n,e[c],s[i],t));for(var f=0;f<n.length;f++)s[i][n[f].filters]=n[f],a[i].push(n[f])}return t.benchmark&&console.warn("Inheritance time: "+(new Date-o)+"ms"),l}function o(e,t){return t.index-e.index}function a(e){for(var t=0;t<e.length;t++){var n=e[t];n.index=1/0;for(var r=0;r<n.length;r++)for(var i=n[r].rules,a=0;a<i.length;a++){var s=i[a];s.index<n.index&&(n.index=s.index)}}var l=e.slice();return l.sort(o),l}function s(e,t,n){var r={},i=u.tree.Reference.data.symbolizers.map;return l(e).each(function(e,t){t in i&&(r[t]=t+'="'+e+'"')}),t.filter(function(e){return"Map"===e.elements.join("")}).forEach(function(e){for(var t=0;t<e.rules.length;t++){var o=e.rules[t].name;o in i||n.error({message:"Rule "+o+" not allowed for Map.",index:e.rules[t].index}),r[o]=e.rules[t].ev(n).toXML(n)}}),r}var l=n._||e("underscore"),u=e("./index");u.Renderer=function(e,t){this.env=e||{},this.options=t||{},this.options.mapnik_version=this.options.mapnik_version||"3.0.0"},u.Renderer.prototype.renderMSS=function(e){var t=l.defaults(this.env,{benchmark:!1,validation_data:!1,effects:[]});if(!u.tree.Reference.setVersion(this.options.mapnik_version))throw new Error("Could not set mapnik version to "+this.options.mapnik_version);var n=[],r=[];t.benchmark&&console.time("Parsing MSS");var o=u.Parser(t).parse(e);t.benchmark&&console.timeEnd("Parsing MSS"),t.benchmark&&console.time("Rule generation");var s=o.toList(t);t.benchmark&&console.timeEnd("Rule generation"),t.benchmark&&console.time("Rule inheritance");var c=i(s,t);t.benchmark&&console.timeEnd("Rule inheritance"),t.benchmark&&console.time("Style sort");var f=a(c,t);t.benchmark&&console.timeEnd("Style sort"),t.benchmark&&console.time("Total Style generation");for(var d,h,p=0;p<f.length;p++){d=f[p],h="style"+("__default__"!==d.attachment?"-"+d.attachment:""),r.push(h);var m='	Style "'+h+'" (#'+p+") toXML";t.benchmark&&console.time(m),n.push(u.tree.StyleXML(h,d.attachment,d,t)),t.benchmark&&console.timeEnd(m)}if(t.benchmark&&console.timeEnd("Total Style generation"),t.errors)throw t.errors;return n.join("\n")},u.Renderer.prototype.render=function(e){function t(e,t){return function(e){return e.appliesTo(o.name,t)}}var n=l.defaults(this.env,{benchmark:!1,validation_data:!1,effects:[],ppi:90.714});if(!u.tree.Reference.setVersion(this.options.mapnik_version))throw new Error("Could not set mapnik version to "+this.options.mapnik_version);for(var r,o,c,f,d,h,p=[],m=l.chain(e.Stylesheet).map(function(e){if("string"==typeof e)throw new Error("Stylesheet object is expected not a string: '"+e+"'");n=l.extend(n,{filename:e.id});var t=+new Date,r=u.Parser(n).parse(e.data);return n.benchmark&&console.warn("Parsing time: "+(new Date-t)+"ms"),r.toList(n)}).flatten().value(),g=0;g<e.Layer.length;g++){o=e.Layer[g],r=[],c={},n.benchmark&&console.warn("processing layer: "+o.id);for(var v=(o["class"]||"").split(/\s+/g),y=0;y<v.length;y++)c[v[y]]=!0;h=m.filter(t(o.name,c)),f=i(h,n),d=a(f,n);for(var b,w,x=0;x<d.length;x++){b=d[x],w=o.name+("__default__"!==b.attachment?"-"+b.attachment:"");var k=u.tree.StyleXML(w,b.attachment,b,n);k&&(p.push(k),r.push(w))}p.push(u.tree.LayerXML(o,r))}p.unshift(n.effects.map(function(e){return e.toXML(n)}).join("\n"));var S=s(e,m,n);if(n.errors)throw n.errors;var z=l.reduce(e,function(e,t,n){if(!t&&0!==t)return e;switch(n){case"srs":case"Layer":case"Stylesheet":break;case"bounds":case"center":case"minzoom":case"maxzoom":case"version":e.push('  <Parameter name="'+n+'">'+t+"</Parameter>");break;case"name":case"description":case"legend":case"attribution":case"template":e.push('  <Parameter name="'+n+'"><![CDATA['+t+"]]></Parameter>");break;case"format":e.push('  <Parameter name="'+n+'">'+t+"</Parameter>");break;case"interactivity":e.push('  <Parameter name="interactivity_layer">'+t.layer+"</Parameter>"),e.push('  <Parameter name="interactivity_fields">'+t.fields+"</Parameter>");break;default:"string"==typeof t?e.push('  <Parameter name="'+n+'"><![CDATA['+t+"]]></Parameter>"):"number"==typeof t?e.push('  <Parameter name="'+n+'">'+t+"</Parameter>"):"boolean"==typeof t&&e.push('  <Parameter name="'+n+'">'+t+"</Parameter>")}return e},[]);z.length&&p.unshift("<Parameters>\n"+z.join("\n")+"\n</Parameters>\n");var _=l.map(S,function(e){return" "+e}).join("");return p.unshift('<?xml version="1.0" encoding="utf-8"?>\n<!DOCTYPE Map[]>\n<Map'+_+">\n"),p.push("</Map>"),p.join("\n")},t.exports=u,t.exports.addRules=r,t.exports.inheritDefinitions=i,t.exports.sortStyles=a}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"./index":4,underscore:42}],7:[function(_dereq_,module,exports){(function(global){!function(carto){function CartoCSS(e,t){this.options=t||{},this.imageURLs=[],e&&this.setStyle(e)}var tree=_dereq_("./tree"),_=global._||_dereq_("underscore");CartoCSS.Layer=function(e,t){this.options=t,this.shader=e},CartoCSS.Layer.prototype={fullName:function(){return this.shader.attachment},name:function(){return this.fullName().split("::")[0]},frames:function(){return this.shader.frames},attachment:function(){return this.fullName().split("::")[1]},eval:function(e){var t=this.shader[e];if(t&&t.style)return t.style({},{zoom:0,"frame-offset":0})},getStyle:function(e,t){var n={};for(var r in this.shader)"attachment"!==r&&"zoom"!==r&&"frames"!==r&&"symbolizers"!==r&&(n[r]=this.shader[r].style(e,t));return n},getSymbolizers:function(){return this.shader.symbolizers},isVariable:function(){for(var e in this.shader)if("attachment"!==e&&"zoom"!==e&&"frames"!==e&&"symbolizers"!==e&&!this.shader[e].constant)return!0;return!1},getShader:function(){return this.shader},filter:function(e,t,n){for(var r in this.shader){var i=this.shader[r](t,n);if(i)return!0}return!1},transformGeometry:function(e){return e},transformGeometries:function(e){return e}},CartoCSS.prototype={setStyle:function(e){var t=this.parse(e);if(!t)throw new Error(this.parse_env.errors);this.layers=t.map(function(e){return new CartoCSS.Layer(e)})},getLayers:function(){return this.layers},getDefault:function(){return this.findLayer({attachment:"__default__"})},findLayer:function(e){return _.find(this.layers,function(t){for(var n in e){var r=t[n];if("function"==typeof r&&(r=r.call(t)),e[n]!==r)return!1}return!0})},_createFn:function(e){var t=e.join("\n");return this.options.debug&&console.log(t),Function("data","ctx","var _value = null; "+t+"; return _value; ")},_compile:function(shader){"string"==typeof shader&&(shader=eval("(function() { return "+shader+"; })()")),this.shader_src=shader;for(var attr in shader){var c=mapper[attr];c&&(this.compiled[c]=eval("(function() { return shader[attr]; })();"))}},getImageURLs:function(){return this.imageURLs},parse:function(e){function t(e){return e.elements[0]+"::"+e.attachment}var n={frames:[],errors:[],error:function(e){this.errors.push(e)}};this.parse_env=n;var r=null;try{r=new carto.Parser(n).parse(e)}catch(i){return void n.errors.push(i.message)}if(r){var o=r.toList(n);o.reverse();for(var a={},s=0;s<o.length;++s){for(var l=o[s],u=t(l),c=a[u]=a[u]||{symbolizers:[]},f=0;f<l.rules.length;f++)if("marker-file"===l.rules[f].name||"point-file"===l.rules[f].name){var d=l.rules[f].value.value[0].value[0].value.value;this.imageURLs.push(d)}c.frames=[],c.zoom=tree.Zoom.all;var h=l.toJS(n);this.options.debug&&console.log("props",h);for(var p in h){var m=c[p]=c[p]||{constant:!1,symbolizer:null,js:[],index:0};m.js.push(h[p].map(function(e){return e.js}).join("\n")),m.symbolizer=_.first(h[p].map(function(e){return e.symbolizer})),m.index=_.max(h[p].map(function(e){return e.index}).concat(m.index)),m.constant=!_.any(h[p].map(function(e){return!e.constant}))}}var g=[];this.options.debug&&console.log(a);for(var v={},s=0;s<o.length;++s){var l=o[s],y=t(l),c=a[y];if(!v[y]){this.options.debug&&console.log("**",y);for(var b in c)"zoom"!==b&&"frames"!==b&&"symbolizers"!==b&&(this.options.debug&&console.log("*",b),c[b].style=this._createFn(c[b].js),c.symbolizers.push(c[b].symbolizer),c.symbolizers=_.uniq(c.symbolizers));c.attachment=y,g.push(c),v[y]=!0}c.zoom|=l.zoom,c.frames.push(l.frame_offset)}for(s=0;s<g.length;++s)g[s].frames=_.uniq(g[s].frames);return g}return null}},carto.RendererJS=function(e){this.options=e||{},this.options.mapnik_version=this.options.mapnik_version||"latest"},carto.RendererJS.prototype.render=function(e){var t=_dereq_("./torque-reference");return tree.Reference.setData(t.version.latest),new CartoCSS(e,this.options)},"undefined"!=typeof module&&(module.exports=carto.RendererJS)}(_dereq_("../carto"))}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"../carto":4,"./torque-reference":8,"./tree":9,underscore:42}],8:[function(e,t){var n={version:"2.1.1",style:{"filter-mode":{type:["all","first"],doc:"Control the processing behavior of Rule filters within a Style. If 'all' is used then all Rules are processed sequentially independent of whether any previous filters matched. If 'first' is used then it means processing ends after the first match (a positive filter evaluation) and no further Rules in the Style are processed ('first' is usually the default for CSS implementations on top of Mapnik to simplify translation from CSS to Mapnik XML)","default-value":"all","default-meaning":"All Rules in a Style are processed whether they have filters or not and whether or not the filter conditions evaluate to true."},"image-filters":{css:"image-filters","default-value":"none","default-meaning":"no filters",type:"functions",functions:[["agg-stack-blur",2],["emboss",0],["blur",0],["gray",0],["sobel",0],["edge-detect",0],["x-gradient",0],["y-gradient",0],["invert",0],["sharpen",0],["colorize-alpha",-1],["color-to-alpha",1],["scale-hsla",8]],doc:"A list of image filters."},"comp-op":{css:"comp-op","default-value":"src-over","default-meaning":"add the current layer on top of other layers",doc:"Composite operation. This defines how this layer should behave relative to layers atop or below it.",type:["clear","src","dst","src-over","source-over","dst-over","src-in","dst-in","src-out","dst-out","src-atop","dst-atop","xor","plus","minus","multiply","screen","overlay","darken","lighten","lighter","color-dodge","color-burn","hard-light","soft-light","difference","exclusion","contrast","invert","invert-rgb","grain-merge","grain-extract","hue","saturation","color","value"]},opacity:{css:"opacity",type:"float",doc:"An alpha value for the style (which means an alpha applied to all features in separate buffer and then composited back to main buffer)","default-value":1,"default-meaning":"no separate buffer will be used and no alpha will be applied to the style after rendering"}},layer:{name:{"default-value":"",type:"string",required:!0,"default-meaning":"No layer name has been provided",doc:"The name of a layer. Can be anything you wish and is not strictly validated, but ideally unique  in the map"},srs:{"default-value":"",type:"string","default-meaning":"No srs value is provided and the value will be inherited from the Map's srs",doc:"The spatial reference system definition for the layer, aka the projection. Can either be a proj4 literal string like '+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs' or, if the proper proj4 epsg/nad/etc identifier files are installed, a string that uses an id like: '+init=epsg:4326'"},status:{"default-value":!0,type:"boolean","default-meaning":"This layer will be marked as active and available for processing",doc:"A property that can be set to false to disable this layer from being processed"},minzoom:{"default-value":"0",type:"float","default-meaning":"The layer will be visible at the minimum possible scale",doc:"The minimum scale denominator that this layer will be visible at. A layer's visibility is determined by whether its status is true and if the Map scale >= minzoom - 1e-6 and scale < maxzoom + 1e-6"},maxzoom:{"default-value":"1.79769e+308",type:"float","default-meaning":"The layer will be visible at the maximum possible scale",doc:"The maximum scale denominator that this layer will be visible at. The default is the numeric limit of the C++ double type, which may vary slightly by system, but is likely a massive number like 1.79769e+308 and ensures that this layer will always be visible unless the value is reduced. A layer's visibility is determined by whether its status is true and if the Map scale >= minzoom - 1e-6 and scale < maxzoom + 1e-6"},queryable:{"default-value":!1,type:"boolean","default-meaning":"The layer will not be available for the direct querying of data values",doc:"This property was added for GetFeatureInfo/WMS compatibility and is rarely used. It is off by default meaning that in a WMS context the layer will not be able to be queried unless the property is explicitly set to true"},"clear-label-cache":{"default-value":!1,type:"boolean","default-meaning":"The renderer's collision detector cache (used for avoiding duplicate labels and overlapping markers) will not be cleared immediately before processing this layer",doc:"This property, by default off, can be enabled to allow a user to clear the collision detector cache before a given layer is processed. This may be desirable to ensure that a given layers data shows up on the map even if it normally would not because of collisions with previously rendered labels or markers"},"group-by":{"default-value":"",type:"string","default-meaning":"No special layer grouping will be used during rendering",doc:"https://github.com/mapnik/mapnik/wiki/Grouped-rendering"},"buffer-size":{"default-value":"0",type:"float","default-meaning":"No buffer will be used",doc:"Extra tolerance around the Layer extent (in pixels) used to when querying and (potentially) clipping the layer data during rendering"},"maximum-extent":{"default-value":"none",type:"bbox","default-meaning":"No clipping extent will be used",doc:"An extent to be used to limit the bounds used to query this specific layer data during rendering. Should be minx, miny, maxx, maxy in the coordinates of the Layer."}},symbolizers:{"*":{"image-filters":{css:"image-filters","default-value":"none","default-meaning":"no filters",type:"functions",functions:[["agg-stack-blur",2],["emboss",0],["blur",0],["gray",0],["sobel",0],["edge-detect",0],["x-gradient",0],["y-gradient",0],["invert",0],["sharpen",0],["colorize-alpha",-1],["color-to-alpha",1],["scale-hsla",8],["buckets",-1],["category",-1],["equal",-1],["headtails",-1],["jenks",-1],["quantiles",-1],["cartocolor",-1],["colorbrewer",-1],["range",-1],["ramp",-1]],doc:"A list of image filters."},"comp-op":{css:"comp-op","default-value":"src-over","default-meaning":"add the current layer on top of other layers",doc:"Composite operation. This defines how this layer should behave relative to layers atop or below it.",type:["clear","src","dst","src-over","source-over","dst-over","src-in","dst-in","src-out","dst-out","src-atop","dst-atop","xor","plus","minus","multiply","screen","overlay","darken","lighten","lighter","color-dodge","color-burn","hard-light","soft-light","difference","exclusion","contrast","invert","invert-rgb","grain-merge","grain-extract","hue","saturation","color","value"]},opacity:{css:"opacity",type:"float",doc:"An alpha value for the style (which means an alpha applied to all features in separate buffer and then composited back to main buffer)","default-value":1,"default-meaning":"no separate buffer will be used and no alpha will be applied to the style after rendering"}},map:{"background-color":{css:"background-color","default-value":"none","default-meaning":"transparent",type:"color",doc:"Map Background color"},"background-image":{css:"background-image",type:"uri","default-value":"","default-meaning":"transparent",doc:"An image that is repeated below all features on a map as a background.",description:"Map Background image"},srs:{css:"srs",type:"string","default-value":"+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs","default-meaning":"The proj4 literal of EPSG:4326 is assumed to be the Map's spatial reference and all data from layers within this map will be plotted using this coordinate system. If any layers do not declare an srs value then they will be assumed to be in the same srs as the Map and not transformations will be needed to plot them in the Map's coordinate space",doc:"Map spatial reference (proj4 string)"},"buffer-size":{css:"buffer-size","default-value":"0",type:"float","default-meaning":"No buffer will be used",doc:'Extra tolerance around the map (in pixels) used to ensure labels crossing tile boundaries are equally rendered in each tile (e.g. cut in each tile). Not intended to be used in combination with "avoid-edges".'},"maximum-extent":{css:"","default-value":"none",type:"bbox","default-meaning":"No clipping extent will be used",doc:"An extent to be used to limit the bounds used to query all layers during rendering. Should be minx, miny, maxx, maxy in the coordinates of the Map."},base:{css:"base","default-value":"","default-meaning":"This base path defaults to an empty string meaning that any relative paths to files referenced in styles or layers will be interpreted relative to the application process.",type:"string",doc:"Any relative paths used to reference files will be understood as relative to this directory path if the map is loaded from an in memory object rather than from the filesystem. If the map is loaded from the filesystem and this option is not provided it will be set to the directory of the stylesheet."},"paths-from-xml":{css:"","default-value":!0,"default-meaning":"Paths read from XML will be interpreted from the location of the XML",type:"boolean",doc:"value to control whether paths in the XML will be interpreted from the location of the XML or from the working directory of the program that calls load_map()"},"minimum-version":{css:"","default-value":"none","default-meaning":"Mapnik version will not be detected and no error will be thrown about compatibility",type:"string",doc:"The minumum Mapnik version (e.g. 0.7.2) needed to use certain functionality in the stylesheet"},"font-directory":{css:"font-directory",type:"uri","default-value":"none","default-meaning":"No map-specific fonts will be registered",doc:"Path to a directory which holds fonts which should be registered when the Map is loaded (in addition to any fonts that may be automatically registered)."}},polygon:{fill:{css:"polygon-fill",type:"color","default-value":"rgba(128,128,128,1)","default-meaning":"gray and fully opaque (alpha = 1), same as rgb(128,128,128)",doc:"Fill color to assign to a polygon",expression:!0},"fill-opacity":{css:"polygon-opacity",type:"float",doc:"The opacity of the polygon","default-value":1,"default-meaning":"opaque"},gamma:{css:"polygon-gamma",type:"float","default-value":1,"default-meaning":"fully antialiased",range:"0-1",doc:"Level of antialiasing of polygon edges"},"gamma-method":{css:"polygon-gamma-method",type:["power","linear","none","threshold","multiply"],"default-value":"power","default-meaning":"pow(x,gamma) is used to calculate pixel gamma, which produces slightly smoother line and polygon antialiasing than the 'linear' method, while other methods are usually only used to disable AA",doc:"An Antigrain Geometry specific rendering hint to control the quality of antialiasing. Under the hood in Mapnik this method is used in combination with the 'gamma' value (which defaults to 1). The methods are in the AGG source at https://github.com/mapnik/mapnik/blob/master/deps/agg/include/agg_gamma_functions.h"},clip:{css:"polygon-clip",type:"boolean","default-value":!0,"default-meaning":"geometry will be clipped to map bounds before rendering",doc:"geometries are clipped to map bounds by default for best rendering performance. In some cases users may wish to disable this to avoid rendering artifacts."},smooth:{css:"polygon-smooth",type:"float","default-value":0,"default-meaning":"no smoothing",range:"0-1",doc:"Smooths out geometry angles. 0 is no smoothing, 1 is fully smoothed. Values greater than 1 will produce wild, looping geometries."},"geometry-transform":{css:"polygon-geometry-transform",type:"functions","default-value":"none","default-meaning":"geometry will not be transformed",doc:"Allows transformation functions to be applied to the geometry.",functions:[["matrix",6],["translate",2],["scale",2],["rotate",3],["skewX",1],["skewY",1]]},"comp-op":{css:"polygon-comp-op","default-value":"src-over","default-meaning":"add the current symbolizer on top of other symbolizer",doc:"Composite operation. This defines how this symbolizer should behave relative to symbolizers atop or below it.",type:["clear","src","dst","src-over","dst-over","src-in","dst-in","src-out","dst-out","src-atop","dst-atop","xor","plus","minus","multiply","screen","overlay","darken","lighten","color-dodge","color-burn","hard-light","soft-light","difference","exclusion","contrast","invert","invert-rgb","grain-merge","grain-extract","hue","saturation","color","value"]}},line:{stroke:{css:"line-color","default-value":"rgba(0,0,0,1)",type:"color","default-meaning":"black and fully opaque (alpha = 1), same as rgb(0,0,0)",doc:"The color of a drawn line",expression:!0},"stroke-width":{css:"line-width","default-value":1,type:"float",doc:"The width of a line in pixels",expression:!0},"stroke-opacity":{css:"line-opacity","default-value":1,type:"float","default-meaning":"opaque",doc:"The opacity of a line"},"stroke-linejoin":{css:"line-join","default-value":"miter",type:["miter","round","bevel"],doc:"The behavior of lines when joining"},"stroke-linecap":{css:"line-cap","default-value":"butt",type:["butt","round","square"],doc:"The display of line endings"},"stroke-gamma":{css:"line-gamma",type:"float","default-value":1,"default-meaning":"fully antialiased",range:"0-1",doc:"Level of antialiasing of stroke line"},"stroke-gamma-method":{css:"line-gamma-method",type:["power","linear","none","threshold","multiply"],"default-value":"power","default-meaning":"pow(x,gamma) is used to calculate pixel gamma, which produces slightly smoother line and polygon antialiasing than the 'linear' method, while other methods are usually only used to disable AA",doc:"An Antigrain Geometry specific rendering hint to control the quality of antialiasing. Under the hood in Mapnik this method is used in combination with the 'gamma' value (which defaults to 1). The methods are in the AGG source at https://github.com/mapnik/mapnik/blob/master/deps/agg/include/agg_gamma_functions.h"},"stroke-dasharray":{css:"line-dasharray",type:"numbers",doc:"A pair of length values [a,b], where (a) is the dash length and (b) is the gap length respectively. More than two values are supported for more complex patterns.","default-value":"none","default-meaning":"solid line"},"stroke-dashoffset":{css:"line-dash-offset",type:"numbers",doc:"valid parameter but not currently used in renderers (only exists for experimental svg support in Mapnik which is not yet enabled)","default-value":"none","default-meaning":"solid line"},"stroke-miterlimit":{css:"line-miterlimit",type:"float",doc:"The limit on the ratio of the miter length to the stroke-width. Used to automatically convert miter joins to bevel joins for sharp angles to avoid the miter extending beyond the thickness of the stroking path. Normally will not need to be set, but a larger value can sometimes help avoid jaggy artifacts.","default-value":4,"default-meaning":"Will auto-convert miters to bevel line joins when theta is less than 29 degrees as per the SVG spec: 'miterLength / stroke-width = 1 / sin ( theta / 2 )'"},clip:{css:"line-clip",type:"boolean","default-value":!0,"default-meaning":"geometry will be clipped to map bounds before rendering",doc:"geometries are clipped to map bounds by default for best rendering performance. In some cases users may wish to disable this to avoid rendering artifacts."},smooth:{css:"line-smooth",type:"float","default-value":0,"default-meaning":"no smoothing",range:"0-1",doc:"Smooths out geometry angles. 0 is no smoothing, 1 is fully smoothed. Values greater than 1 will produce wild, looping geometries."},offset:{css:"line-offset",type:"float","default-value":0,"default-meaning":"no offset",doc:"Offsets a line a number of pixels parallel to its actual path. Postive values move the line left, negative values move it right (relative to the directionality of the line)."},rasterizer:{css:"line-rasterizer",type:["full","fast"],"default-value":"full",doc:"Exposes an alternate AGG rendering method that sacrifices some accuracy for speed."},"geometry-transform":{css:"line-geometry-transform",type:"functions","default-value":"none","default-meaning":"geometry will not be transformed",doc:"Allows transformation functions to be applied to the geometry.",functions:[["matrix",6],["translate",2],["scale",2],["rotate",3],["skewX",1],["skewY",1]]},"comp-op":{css:"line-comp-op","default-value":"src-over","default-meaning":"add the current symbolizer on top of other symbolizer",doc:"Composite operation. This defines how this symbolizer should behave relative to symbolizers atop or below it.",type:["clear","src","dst","src-over","dst-over","src-in","dst-in","src-out","dst-out","src-atop","dst-atop","xor","plus","minus","multiply","screen","overlay","darken","lighten","color-dodge","color-burn","hard-light","soft-light","difference","exclusion","contrast","invert","invert-rgb","grain-merge","grain-extract","hue","saturation","color","value"]}},markers:{file:{css:"marker-file",doc:"An SVG file that this marker shows at each placement. If no file is given, the marker will show an ellipse.","default-value":"","default-meaning":"An ellipse or circle, if width equals height",type:"uri"},opacity:{css:"marker-opacity",doc:"The overall opacity of the marker, if set, overrides both the opacity of both the fill and stroke","default-value":1,"default-meaning":"The stroke-opacity and fill-opacity will be used",type:"float"},"fill-opacity":{css:"marker-fill-opacity",doc:"The fill opacity of the marker","default-value":1,"default-meaning":"opaque",type:"float"},stroke:{css:"marker-line-color",doc:"The color of the stroke around a marker shape.","default-value":"black",type:"color"},"stroke-width":{css:"marker-line-width",doc:"The width of the stroke around a marker shape, in pixels. This is positioned on the boundary, so high values can cover the area itself.",type:"float"},"stroke-opacity":{css:"marker-line-opacity","default-value":1,"default-meaning":"opaque",doc:"The opacity of a line",type:"float"},placement:{css:"marker-placement",type:["point","line","interior"],"default-value":"point","default-meaning":"Place markers at the center point (centroid) of the geometry",doc:"Attempt to place markers on a point, in the center of a polygon, or if markers-placement:line, then multiple times along a line. 'interior' placement can be used to ensure that points placed on polygons are forced to be inside the polygon interior"},"multi-policy":{css:"marker-multi-policy",type:["each","whole","largest"],"default-value":"each","default-meaning":"If a feature contains multiple geometries and the placement type is either point or interior then a marker will be rendered for each",doc:"A special setting to allow the user to control rendering behavior for 'multi-geometries' (when a feature contains multiple geometries). This setting does not apply to markers placed along lines. The 'each' policy is default and means all geometries will get a marker. The 'whole' policy means that the aggregate centroid between all geometries will be used. The 'largest' policy means that only the largest (by bounding box areas) feature will get a rendered marker (this is how text labeling behaves by default)."},"marker-type":{css:"marker-type",type:["arrow","ellipse","rectangle"],"default-value":"ellipse",doc:"The default marker-type. If a SVG file is not given as the marker-file parameter, the renderer provides either an arrow or an ellipse (a circle if height is equal to width)"},width:{css:"marker-width","default-value":10,doc:"The width of the marker, if using one of the default types.",type:"float",expression:!0},height:{css:"marker-height","default-value":10,doc:"The height of the marker, if using one of the default types.",type:"float",expression:!0},fill:{css:"marker-fill","default-value":"blue",doc:"The color of the area of the marker.",type:"color",expression:!0},"allow-overlap":{css:"marker-allow-overlap",type:"boolean","default-value":!1,doc:"Control whether overlapping markers are shown or hidden.","default-meaning":"Do not allow makers to overlap with each other - overlapping markers will not be shown."},"ignore-placement":{css:"marker-ignore-placement",type:"boolean","default-value":!1,"default-meaning":"do not store the bbox of this geometry in the collision detector cache",doc:"value to control whether the placement of the feature will prevent the placement of other features"},spacing:{css:"marker-spacing",doc:"Space between repeated labels","default-value":100,type:"float"},"max-error":{css:"marker-max-error",type:"float","default-value":.2,doc:"The maximum difference between actual marker placement and the marker-spacing parameter. Setting a high value can allow the renderer to try to resolve placement conflicts with other symbolizers."},transform:{css:"marker-transform",type:"functions",functions:[["matrix",6],["translate",2],["scale",2],["rotate",3],["skewX",1],["skewY",1]],"default-value":"","default-meaning":"No transformation",doc:"SVG transformation definition"},clip:{css:"marker-clip",type:"boolean","default-value":!0,"default-meaning":"geometry will be clipped to map bounds before rendering",doc:"geometries are clipped to map bounds by default for best rendering performance. In some cases users may wish to disable this to avoid rendering artifacts."},smooth:{css:"marker-smooth",type:"float","default-value":0,"default-meaning":"no smoothing",range:"0-1",doc:"Smooths out geometry angles. 0 is no smoothing, 1 is fully smoothed. Values greater than 1 will produce wild, looping geometries."},"geometry-transform":{css:"marker-geometry-transform",type:"functions","default-value":"none","default-meaning":"geometry will not be transformed",doc:"Allows transformation functions to be applied to the geometry.",functions:[["matrix",6],["translate",2],["scale",2],["rotate",3],["skewX",1],["skewY",1]]},"comp-op":{css:"marker-comp-op","default-value":"src-over","default-meaning":"add the current symbolizer on top of other symbolizer",doc:"Composite operation. This defines how this symbolizer should behave relative to symbolizers atop or below it.",type:["clear","src","dst","src-over","dst-over","src-in","dst-in","src-out","dst-out","src-atop","dst-atop","xor","plus","minus","multiply","screen","overlay","darken","lighten","color-dodge","color-burn","hard-light","soft-light","difference","exclusion","contrast","invert","invert-rgb","grain-merge","grain-extract","hue","saturation","color","value"]}},shield:{name:{css:"shield-name",type:"string",expression:!0,serialization:"content",doc:'Value to use for a shield"s text label. Data columns are specified using brackets like [column_name]'},file:{css:"shield-file",required:!0,type:"uri","default-value":"none",doc:"Image file to render behind the shield text"},"face-name":{css:"shield-face-name",type:"string",validate:"font",doc:"Font name and style to use for the shield text","default-value":"",required:!0},"unlock-image":{css:"shield-unlock-image",type:"boolean",doc:"This parameter should be set to true if you are trying to position text beside rather than on top of the shield image","default-value":!1,"default-meaning":"text alignment relative to the shield image uses the center of the image as the anchor for text positioning."},size:{css:"shield-size",type:"float",doc:"The size of the shield text in pixels"},fill:{css:"shield-fill",type:"color",doc:"The color of the shield text"},placement:{css:"shield-placement",type:["point","line","vertex","interior"],"default-value":"point",doc:"How this shield should be placed. Point placement attempts to place it on top of points, line places along lines multiple times per feature, vertex places on the vertexes of polygons, and interior attempts to place inside of polygons."},"avoid-edges":{css:"shield-avoid-edges",doc:"Tell positioning algorithm to avoid labeling near intersection edges.",type:"boolean","default-value":!1},"allow-overlap":{css:"shield-allow-overlap",type:"boolean","default-value":!1,doc:"Control whether overlapping shields are shown or hidden.","default-meaning":"Do not allow shields to overlap with other map elements already placed."},"minimum-distance":{css:"shield-min-distance",type:"float","default-value":0,doc:"Minimum distance to the next shield symbol, not necessarily the same shield."},spacing:{css:"shield-spacing",type:"float","default-value":0,doc:"The spacing between repeated occurrences of the same shield on a line"},"minimum-padding":{css:"shield-min-padding","default-value":0,doc:"Determines the minimum amount of padding that a shield gets relative to other shields",type:"float"},"wrap-width":{css:"shield-wrap-width",type:"unsigned","default-value":0,doc:"Length of a chunk of text in characters before wrapping text"},"wrap-before":{css:"shield-wrap-before",type:"boolean","default-value":!1,doc:"Wrap text before wrap-width is reached. If false, wrapped lines will be a bit longer than wrap-width."},"wrap-character":{css:"shield-wrap-character",type:"string","default-value":" ",doc:"Use this character instead of a space to wrap long names."},"halo-fill":{css:"shield-halo-fill",type:"color","default-value":"#FFFFFF","default-meaning":"white",doc:"Specifies the color of the halo around the text."},"halo-radius":{css:"shield-halo-radius",doc:"Specify the radius of the halo in pixels","default-value":0,"default-meaning":"no halo",type:"float"},"character-spacing":{css:"shield-character-spacing",type:"unsigned","default-value":0,doc:"Horizontal spacing between characters (in pixels). Currently works for point placement only, not line placement."},"line-spacing":{css:"shield-line-spacing",doc:"Vertical spacing between lines of multiline labels (in pixels)",type:"unsigned"},dx:{css:"shield-text-dx",type:"float",doc:"Displace text within shield by fixed amount, in pixels, +/- along the X axis.  A positive value will shift the text right","default-value":0},dy:{css:"shield-text-dy",type:"float",doc:"Displace text within shield by fixed amount, in pixels, +/- along the Y axis.  A positive value will shift the text down","default-value":0},"shield-dx":{css:"shield-dx",type:"float",doc:"Displace shield by fixed amount, in pixels, +/- along the X axis.  A positive value will shift the text right","default-value":0},"shield-dy":{css:"shield-dy",type:"float",doc:"Displace shield by fixed amount, in pixels, +/- along the Y axis.  A positive value will shift the text down","default-value":0},opacity:{css:"shield-opacity",type:"float",doc:"(Default 1.0) - opacity of the image used for the shield","default-value":1},"text-opacity":{css:"shield-text-opacity",type:"float",doc:"(Default 1.0) - opacity of the text placed on top of the shield","default-value":1},"horizontal-alignment":{css:"shield-horizontal-alignment",type:["left","middle","right","auto"],doc:"The shield's horizontal alignment from its centerpoint","default-value":"auto"},"vertical-alignment":{css:"shield-vertical-alignment",type:["top","middle","bottom","auto"],doc:"The shield's vertical alignment from its centerpoint","default-value":"middle"},"text-transform":{css:"shield-text-transform",type:["none","uppercase","lowercase","capitalize"],doc:"Transform the case of the characters","default-value":"none"},"justify-alignment":{css:"shield-justify-alignment",type:["left","center","right","auto"],doc:"Define how text in a shield's label is justified","default-value":"auto"},clip:{css:"shield-clip",type:"boolean","default-value":!0,"default-meaning":"geometry will be clipped to map bounds before rendering",doc:"geometries are clipped to map bounds by default for best rendering performance. In some cases users may wish to disable this to avoid rendering artifacts."},"comp-op":{css:"shield-comp-op","default-value":"src-over","default-meaning":"add the current symbolizer on top of other symbolizer",doc:"Composite operation. This defines how this symbolizer should behave relative to symbolizers atop or below it.",type:["clear","src","dst","src-over","dst-over","src-in","dst-in","src-out","dst-out","src-atop","dst-atop","xor","plus","minus","multiply","screen","overlay","darken","lighten","color-dodge","color-burn","hard-light","soft-light","difference","exclusion","contrast","invert","invert-rgb","grain-merge","grain-extract","hue","saturation","color","value"]}},"line-pattern":{file:{css:"line-pattern-file",type:"uri","default-value":"none",required:!0,doc:"An image file to be repeated and warped along a line"},clip:{css:"line-pattern-clip",type:"boolean","default-value":!0,"default-meaning":"geometry will be clipped to map bounds before rendering",doc:"geometries are clipped to map bounds by default for best rendering performance. In some cases users may wish to disable this to avoid rendering artifacts."},smooth:{css:"line-pattern-smooth",type:"float","default-value":0,"default-meaning":"no smoothing",range:"0-1",doc:"Smooths out geometry angles. 0 is no smoothing, 1 is fully smoothed. Values greater than 1 will produce wild, looping geometries."},"geometry-transform":{css:"line-pattern-geometry-transform",type:"functions","default-value":"none","default-meaning":"geometry will not be transformed",doc:"Allows transformation functions to be applied to the geometry.",functions:[["matrix",6],["translate",2],["scale",2],["rotate",3],["skewX",1],["skewY",1]]},"comp-op":{css:"line-pattern-comp-op","default-value":"src-over","default-meaning":"add the current symbolizer on top of other symbolizer",doc:"Composite operation. This defines how this symbolizer should behave relative to symbolizers atop or below it.",type:["clear","src","dst","src-over","dst-over","src-in","dst-in","src-out","dst-out","src-atop","dst-atop","xor","plus","minus","multiply","screen","overlay","darken","lighten","color-dodge","color-burn","hard-light","soft-light","difference","exclusion","contrast","invert","invert-rgb","grain-merge","grain-extract","hue","saturation","color","value"]}},"polygon-pattern":{file:{css:"polygon-pattern-file",type:"uri","default-value":"none",required:!0,doc:"Image to use as a repeated pattern fill within a polygon"},alignment:{css:"polygon-pattern-alignment",type:["local","global"],"default-value":"local",doc:"Specify whether to align pattern fills to the layer or to the map."},gamma:{css:"polygon-pattern-gamma",type:"float","default-value":1,"default-meaning":"fully antialiased",range:"0-1",doc:"Level of antialiasing of polygon pattern edges"},opacity:{css:"polygon-pattern-opacity",type:"float",doc:"(Default 1.0) - Apply an opacity level to the image used for the pattern","default-value":1,"default-meaning":"The image is rendered without modifications"},clip:{css:"polygon-pattern-clip",type:"boolean","default-value":!0,"default-meaning":"geometry will be clipped to map bounds before rendering",doc:"geometries are clipped to map bounds by default for best rendering performance. In some cases users may wish to disable this to avoid rendering artifacts."},smooth:{css:"polygon-pattern-smooth",type:"float","default-value":0,"default-meaning":"no smoothing",range:"0-1",doc:"Smooths out geometry angles. 0 is no smoothing, 1 is fully smoothed. Values greater than 1 will produce wild, looping geometries."},"geometry-transform":{css:"polygon-pattern-geometry-transform",type:"functions","default-value":"none","default-meaning":"geometry will not be transformed",doc:"Allows transformation functions to be applied to the geometry.",functions:[["matrix",6],["translate",2],["scale",2],["rotate",3],["skewX",1],["skewY",1]]},"comp-op":{css:"polygon-pattern-comp-op","default-value":"src-over","default-meaning":"add the current symbolizer on top of other symbolizer",doc:"Composite operation. This defines how this symbolizer should behave relative to symbolizers atop or below it.",type:["clear","src","dst","src-over","dst-over","src-in","dst-in","src-out","dst-out","src-atop","dst-atop","xor","plus","minus","multiply","screen","overlay","darken","lighten","color-dodge","color-burn","hard-light","soft-light","difference","exclusion","contrast","invert","invert-rgb","grain-merge","grain-extract","hue","saturation","color","value"]}},raster:{opacity:{css:"raster-opacity","default-value":1,"default-meaning":"opaque",type:"float",doc:"The opacity of the raster symbolizer on top of other symbolizers."},"filter-factor":{css:"raster-filter-factor","default-value":-1,"default-meaning":"Allow the datasource to choose appropriate downscaling.",type:"float",doc:"This is used by the Raster or Gdal datasources to pre-downscale images using overviews. Higher numbers can sometimes cause much better scaled image output, at the cost of speed."},scaling:{css:"raster-scaling",type:["near","fast","bilinear","bilinear8","bicubic","spline16","spline36","hanning","hamming","hermite","kaiser","quadric","catrom","gaussian","bessel","mitchell","sinc","lanczos","blackman"],"default-value":"near",doc:"The scaling algorithm used to making different resolution versions of this raster layer. Bilinear is a good compromise between speed and accuracy, while lanczos gives the highest quality."},"mesh-size":{css:"raster-mesh-size","default-value":16,"default-meaning":"Reprojection mesh will be 1/16 of the resolution of the source image",type:"unsigned",doc:"A reduced resolution mesh is used for raster reprojection, and the total image size is divided by the mesh-size to determine the quality of that mesh. Values for mesh-size larger than the default will result in faster reprojection but might lead to distortion."},"comp-op":{css:"raster-comp-op","default-value":"src-over","default-meaning":"add the current symbolizer on top of other symbolizer",doc:"Composite operation. This defines how this symbolizer should behave relative to symbolizers atop or below it.",type:["clear","src","dst","src-over","dst-over","src-in","dst-in","src-out","dst-out","src-atop","dst-atop","xor","plus","minus","multiply","screen","overlay","darken","lighten","color-dodge","color-burn","hard-light","soft-light","difference","exclusion","contrast","invert","invert-rgb","grain-merge","grain-extract","hue","saturation","color","value"]}},point:{file:{css:"point-file",type:"uri",required:!1,"default-value":"none",doc:"Image file to represent a point"},"allow-overlap":{css:"point-allow-overlap",type:"boolean","default-value":!1,doc:"Control whether overlapping points are shown or hidden.","default-meaning":"Do not allow points to overlap with each other - overlapping markers will not be shown."},"ignore-placement":{css:"point-ignore-placement",type:"boolean","default-value":!1,"default-meaning":"do not store the bbox of this geometry in the collision detector cache",doc:"value to control whether the placement of the feature will prevent the placement of other features"},opacity:{css:"point-opacity",type:"float","default-value":1,"default-meaning":"Fully opaque",doc:"A value from 0 to 1 to control the opacity of the point"},placement:{css:"point-placement",type:["centroid","interior"],doc:"How this point should be placed. Centroid calculates the geometric center of a polygon, which can be outside of it, while interior always places inside of a polygon.","default-value":"centroid"},transform:{css:"point-transform",type:"functions",functions:[["matrix",6],["translate",2],["scale",2],["rotate",3],["skewX",1],["skewY",1]],"default-value":"","default-meaning":"No transformation",doc:"SVG transformation definition"},"comp-op":{css:"point-comp-op","default-value":"src-over","default-meaning":"add the current symbolizer on top of other symbolizer",doc:"Composite operation. This defines how this symbolizer should behave relative to symbolizers atop or below it.",type:["clear","src","dst","src-over","dst-over","src-in","dst-in","src-out","dst-out","src-atop","dst-atop","xor","plus","minus","multiply","screen","overlay","darken","lighten","color-dodge","color-burn","hard-light","soft-light","difference","exclusion","contrast","invert","invert-rgb","grain-merge","grain-extract","hue","saturation","color","value"]}},text:{name:{css:"text-name",type:"string",expression:!0,required:!0,"default-value":"",serialization:"content",doc:"Value to use for a text label. Data columns are specified using brackets like [column_name]"},"face-name":{css:"text-face-name",type:"string",validate:"font",doc:"Font name and style to render a label in",required:!0},size:{css:"text-size",type:"float","default-value":10,doc:"Text size in pixels"},"text-ratio":{css:"text-ratio",doc:"Define the amount of text (of the total) present on successive lines when wrapping occurs","default-value":0,type:"unsigned"},"wrap-width":{css:"text-wrap-width",doc:"Length of a chunk of text in characters before wrapping text","default-value":0,type:"unsigned"},"wrap-before":{css:"text-wrap-before",type:"boolean","default-value":!1,doc:"Wrap text before wrap-width is reached. If false, wrapped lines will be a bit longer than wrap-width."},"wrap-character":{css:"text-wrap-character",type:"string","default-value":" ",doc:"Use this character instead of a space to wrap long text."},spacing:{css:"text-spacing",type:"unsigned",doc:"Distance between repeated text labels on a line (aka. label-spacing)"},"character-spacing":{css:"text-character-spacing",type:"float","default-value":0,doc:"Horizontal spacing adjustment between characters in pixels"},"line-spacing":{css:"text-line-spacing","default-value":0,type:"unsigned",doc:"Vertical spacing adjustment between lines in pixels"},"label-position-tolerance":{css:"text-label-position-tolerance","default-value":0,type:"unsigned",doc:"Allows the label to be displaced from its ideal position by a number of pixels (only works with placement:line)"},"max-char-angle-delta":{css:"text-max-char-angle-delta",type:"float","default-value":"22.5",doc:"The maximum angle change, in degrees, allowed between adjacent characters in a label. This value internally is converted to radians to the default is 22.5*math.pi/180.0. The higher the value the fewer labels will be placed around around sharp corners."},fill:{css:"text-fill",doc:"Specifies the color for the text","default-value":"#000000",type:"color"},opacity:{css:"text-opacity",doc:"A number from 0 to 1 specifying the opacity for the text","default-value":1,"default-meaning":"Fully opaque",type:"float"},"halo-fill":{css:"text-halo-fill",type:"color","default-value":"#FFFFFF","default-meaning":"white",doc:"Specifies the color of the halo around the text."},"halo-radius":{css:"text-halo-radius",doc:"Specify the radius of the halo in pixels","default-value":0,"default-meaning":"no halo",type:"float"},dx:{css:"text-dx",type:"float",doc:"Displace text by fixed amount, in pixels, +/- along the X axis.  A positive value will shift the text right","default-value":0},dy:{css:"text-dy",type:"float",doc:"Displace text by fixed amount, in pixels, +/- along the Y axis.  A positive value will shift the text down","default-value":0},"vertical-alignment":{css:"text-vertical-alignment",type:["top","middle","bottom","auto"],doc:"Position of label relative to point position.","default-value":"auto","default-meaning":'Default affected by value of dy; "bottom" for dy>0, "top" for dy<0.'},"avoid-edges":{css:"text-avoid-edges",doc:"Tell positioning algorithm to avoid labeling near intersection edges.","default-value":!1,type:"boolean"},"minimum-distance":{css:"text-min-distance",doc:"Minimum permitted distance to the next text symbolizer.",type:"float"},"minimum-padding":{css:"text-min-padding",doc:"Determines the minimum amount of padding that a text symbolizer gets relative to other text",type:"float"},"minimum-path-length":{css:"text-min-path-length",type:"float","default-value":0,"default-meaning":"place labels on all paths",doc:"Place labels only on paths longer than this value."},"allow-overlap":{css:"text-allow-overlap",type:"boolean","default-value":!1,doc:"Control whether overlapping text is shown or hidden.","default-meaning":"Do not allow text to overlap with other text - overlapping markers will not be shown."},orientation:{css:"text-orientation",type:"float",expression:!0,doc:"Rotate the text."},placement:{css:"text-placement",type:["point","line","vertex","interior"],"default-value":"point",doc:"Control the style of placement of a point versus the geometry it is attached to."},"placement-type":{css:"text-placement-type",doc:'Re-position and/or re-size text to avoid overlaps. "simple" for basic algorithm (using text-placements string,) "dummy" to turn this feature off.',type:["dummy","simple"],"default-value":"dummy"},placements:{css:"text-placements",type:"string","default-value":"",doc:'If "placement-type" is set to "simple", use this "POSITIONS,[SIZES]" string. An example is `text-placements: "E,NE,SE,W,NW,SW";` '},"text-transform":{css:"text-transform",type:["none","uppercase","lowercase","capitalize"],doc:"Transform the case of the characters","default-value":"none"},"horizontal-alignment":{css:"text-horizontal-alignment",type:["left","middle","right","auto"],doc:"The text's horizontal alignment from its centerpoint","default-value":"auto"},"justify-alignment":{css:"text-align",type:["left","right","center","auto"],doc:"Define how text is justified","default-value":"auto","default-meaning":"Auto alignment means that text will be centered by default except when using the `placement-type` parameter - in that case either right or left justification will be used automatically depending on where the text could be fit given the `text-placements` directives"},clip:{css:"text-clip",type:"boolean","default-value":!0,"default-meaning":"geometry will be clipped to map bounds before rendering",doc:"geometries are clipped to map bounds by default for best rendering performance. In some cases users may wish to disable this to avoid rendering artifacts."},"comp-op":{css:"text-comp-op","default-value":"src-over","default-meaning":"add the current symbolizer on top of other symbolizer",doc:"Composite operation. This defines how this symbolizer should behave relative to symbolizers atop or below it.",type:["clear","src","dst","src-over","dst-over","src-in","dst-in","src-out","dst-out","src-atop","dst-atop","xor","plus","minus","multiply","screen","overlay","darken","lighten","color-dodge","color-burn","hard-light","soft-light","difference","exclusion","contrast","invert","invert-rgb","grain-merge","grain-extract","hue","saturation","color","value"]}},building:{fill:{css:"building-fill","default-value":"#FFFFFF",doc:"The color of the buildings walls.",type:"color"},"fill-opacity":{css:"building-fill-opacity",type:"float",doc:"The opacity of the building as a whole, including all walls.","default-value":1},height:{css:"building-height",doc:"The height of the building in pixels.",type:"float",expression:!0,"default-value":"0"}},torque:{"-torque-clear-color":{css:"-torque-clear-color",type:"color","default-value":"rgba(255, 255, 255, 0)","default-meaning":"full clear",doc:"color used to clear canvas on each frame"},"-torque-frame-count":{css:"-torque-frame-count","default-value":"128",type:"float","default-meaning":"the data is broken into 128 time frames",doc:"Number of animation steps/frames used in the animation. If the data contains a fewere number of total frames, the lesser value will be used."},"-torque-resolution":{css:"-torque-resolution","default-value":"2",type:"float","default-meaning":"",doc:"Spatial resolution in pixels. A resolution of 1 means no spatial aggregation of the data. Any other resolution of N results in spatial aggregation into cells of NxN pixels. The value N must be power of 2"},"-torque-animation-duration":{css:"-torque-animation-duration","default-value":"30",type:"float","default-meaning":"the animation lasts 30 seconds",doc:"Animation duration in seconds"},"-torque-aggregation-function":{css:"-torque-aggregation-function","default-value":"count(cartodb_id)",type:"string","default-meaning":"the value for each cell is the count of points in that cell",doc:"A function used to calculate a value from the aggregate data for each cell. See -torque-resolution"},"-torque-time-attribute":{css:"-torque-time-attribute","default-value":"time",type:"string","default-meaning":"the data column in your table that is of a time based type",doc:"The table column that contains the time information used create the animation"},"-torque-data-aggregation":{css:"-torque-data-aggregation","default-value":"linear",type:["linear","cumulative"],"default-meaning":"previous values are discarded",doc:"A linear animation will discard previous values while a cumulative animation will accumulate them until it restarts"}}},colors:{aliceblue:[240,248,255],antiquewhite:[250,235,215],aqua:[0,255,255],aquamarine:[127,255,212],azure:[240,255,255],beige:[245,245,220],bisque:[255,228,196],black:[0,0,0],blanchedalmond:[255,235,205],blue:[0,0,255],blueviolet:[138,43,226],brown:[165,42,42],burlywood:[222,184,135],cadetblue:[95,158,160],chartreuse:[127,255,0],chocolate:[210,105,30],coral:[255,127,80],cornflowerblue:[100,149,237],cornsilk:[255,248,220],crimson:[220,20,60],cyan:[0,255,255],darkblue:[0,0,139],darkcyan:[0,139,139],darkgoldenrod:[184,134,11],darkgray:[169,169,169],darkgreen:[0,100,0],darkgrey:[169,169,169],darkkhaki:[189,183,107],darkmagenta:[139,0,139],darkolivegreen:[85,107,47],darkorange:[255,140,0],darkorchid:[153,50,204],darkred:[139,0,0],darksalmon:[233,150,122],darkseagreen:[143,188,143],darkslateblue:[72,61,139],darkslategrey:[47,79,79],darkturquoise:[0,206,209],darkviolet:[148,0,211],deeppink:[255,20,147],deepskyblue:[0,191,255],dimgray:[105,105,105],dimgrey:[105,105,105],dodgerblue:[30,144,255],firebrick:[178,34,34],floralwhite:[255,250,240],forestgreen:[34,139,34],fuchsia:[255,0,255],gainsboro:[220,220,220],ghostwhite:[248,248,255],gold:[255,215,0],goldenrod:[218,165,32],gray:[128,128,128],grey:[128,128,128],green:[0,128,0],greenyellow:[173,255,47],honeydew:[240,255,240],hotpink:[255,105,180],indianred:[205,92,92],indigo:[75,0,130],ivory:[255,255,240],khaki:[240,230,140],lavender:[230,230,250],lavenderblush:[255,240,245],lawngreen:[124,252,0],lemonchiffon:[255,250,205],lightblue:[173,216,230],lightcoral:[240,128,128],lightcyan:[224,255,255],lightgoldenrodyellow:[250,250,210],lightgray:[211,211,211],lightgreen:[144,238,144],lightgrey:[211,211,211],lightpink:[255,182,193],lightsalmon:[255,160,122],lightseagreen:[32,178,170],lightskyblue:[135,206,250],lightslategray:[119,136,153],lightslategrey:[119,136,153],lightsteelblue:[176,196,222],lightyellow:[255,255,224],lime:[0,255,0],limegreen:[50,205,50],linen:[250,240,230],magenta:[255,0,255],maroon:[128,0,0],mediumaquamarine:[102,205,170],mediumblue:[0,0,205],mediumorchid:[186,85,211],mediumpurple:[147,112,219],mediumseagreen:[60,179,113],mediumslateblue:[123,104,238],mediumspringgreen:[0,250,154],mediumturquoise:[72,209,204],mediumvioletred:[199,21,133],midnightblue:[25,25,112],mintcream:[245,255,250],mistyrose:[255,228,225],moccasin:[255,228,181],navajowhite:[255,222,173],navy:[0,0,128],oldlace:[253,245,230],olive:[128,128,0],olivedrab:[107,142,35],orange:[255,165,0],orangered:[255,69,0],orchid:[218,112,214],palegoldenrod:[238,232,170],palegreen:[152,251,152],paleturquoise:[175,238,238],palevioletred:[219,112,147],papayawhip:[255,239,213],peachpuff:[255,218,185],peru:[205,133,63],pink:[255,192,203],plum:[221,160,221],powderblue:[176,224,230],purple:[128,0,128],red:[255,0,0],rosybrown:[188,143,143],royalblue:[65,105,225],saddlebrown:[139,69,19],salmon:[250,128,114],sandybrown:[244,164,96],seagreen:[46,139,87],seashell:[255,245,238],sienna:[160,82,45],silver:[192,192,192],skyblue:[135,206,235],slateblue:[106,90,205],slategray:[112,128,144],slategrey:[112,128,144],snow:[255,250,250],springgreen:[0,255,127],steelblue:[70,130,180],tan:[210,180,140],teal:[0,128,128],thistle:[216,191,216],tomato:[255,99,71],turquoise:[64,224,208],violet:[238,130,238],wheat:[245,222,179],white:[255,255,255],whitesmoke:[245,245,245],yellow:[255,255,0],yellowgreen:[154,205,50],transparent:[0,0,0,0]},filter:{value:["true","false","null","point","linestring","polygon","collection"]}};
t.exports={version:{latest:n,"2.1.1":n}}},{}],9:[function(e,t){"undefined"!=typeof t&&(t.exports.find=function(e,t){for(var n,r=0;r<e.length;r++)if(n=t.call(e,e[r]))return n;return null})},{}],10:[function(e){(function(t){!function(n){var r=t._||e("underscore");n.Call=function(e,t,n){this.name=e,this.args=t,this.index=n},n.Call.prototype={is:"call",ev:function(e){for(var t=this.args.map(function(t){return t.ev(e)}),i=0;i<t.length;i++)if("undefined"===t[i].is)return{is:"undefined",value:"undefined"};if(this.name in n.functions){if(n.functions[this.name].length<=t.length){var o=n.functions[this.name].apply(n.functions,t);return null===o?(e.error({message:"incorrect arguments given to "+this.name+"()",index:this.index,type:"runtime",filename:this.filename}),{is:"undefined",value:"undefined"}):o}return e.error({message:"incorrect number of arguments for "+this.name+"(). "+n.functions[this.name].length+" expected.",index:this.index,type:"runtime",filename:this.filename}),{is:"undefined",value:"undefined"}}var a=n.Reference.mapnikFunctions[this.name];if(void 0===a){var s=r.pairs(n.Reference.mapnikFunctions),l=this.name,u=s.map(function(e){return[e[0],n.Reference.editDistance(l,e[0]),e[1]]}).sort(function(e,t){return e[1]-t[1]});return e.error({message:"unknown function "+this.name+"(), did you mean "+u[0][0]+"("+u[0][2]+")",index:this.index,type:"runtime",filename:this.filename}),{is:"undefined",value:"undefined"}}return a===t.length||Array.isArray(a)&&r.include(a,t.length)||-1===a?(this.args=t,this):(e.error({message:"function "+this.name+"() takes "+a+" arguments and was given "+t.length,index:this.index,type:"runtime",filename:this.filename}),{is:"undefined",value:"undefined"})},toString:function(){return this.args.length?this.name+"("+this.args.join(",")+")":this.name}}}(e("../tree"))}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"../tree":9,underscore:42}],11:[function(e){!function(e){e.Color=function(e,t){this.rgb=Array.isArray(e)?e.slice(0,3):6==e.length?e.match(/.{2}/g).map(function(e){return parseInt(e,16)}):e.split("").map(function(e){return parseInt(e+e,16)}),this.alpha="number"==typeof t?t:4===e.length?e[3]:1},e.Color.prototype={is:"color",ev:function(){return this},toString:function(){return this.alpha<1?"rgba("+this.rgb.map(function(e){return Math.round(e)}).concat(this.alpha).join(", ")+")":"#"+this.rgb.map(function(e){return e=Math.round(e),e=(e>255?255:0>e?0:e).toString(16),1===e.length?"0"+e:e}).join("")},operate:function(t,n,r){var i=[];r instanceof e.Color||(r=r.toColor());for(var o=0;3>o;o++)i[o]=e.operate(n,this.rgb[o],r.rgb[o]);return new e.Color(i)},toHSL:function(){var e,t,n=this.rgb[0]/255,r=this.rgb[1]/255,i=this.rgb[2]/255,o=this.alpha,a=Math.max(n,r,i),s=Math.min(n,r,i),l=(a+s)/2,u=a-s;if(a===s)e=t=0;else{switch(t=l>.5?u/(2-a-s):u/(a+s),a){case n:e=(r-i)/u+(i>r?6:0);break;case r:e=(i-n)/u+2;break;case i:e=(n-r)/u+4}e/=6}return{h:360*e,s:t,l:l,a:o}}}}(e("../tree"))},{"../tree":9}],12:[function(e){!function(e){e.Comment=function(e,t){this.value=e,this.silent=!!t},e.Comment.prototype={toString:function(){return"<!--"+this.value+"-->"},ev:function(){return this}}}(e("../tree"))},{"../tree":9}],13:[function(e){(function(t){!function(n){function r(e){function t(e){return e[1].toUpperCase()}return e.charAt(0).toUpperCase()+e.slice(1).replace(/\-./,t)+"Symbolizer"}function i(e){return e.sort(function(e,t){return e[1]-t[1]}).map(function(e){return e[0]})}var o=e("assert"),a=t._||e("underscore");n.Definition=function(e,t){this.elements=e.elements,o.ok(e.filters instanceof n.Filterset),this.rules=t,this.ruleIndex={};for(var r=0;r<this.rules.length;r++)"zoom"in this.rules[r]&&(this.rules[r]=this.rules[r].clone()),this.rules[r].zoom=e.zoom,this.ruleIndex[this.rules[r].updateID()]=!0;this.filters=e.filters,this.zoom=e.zoom,this.frame_offset=e.frame_offset,this.attachment=e.attachment||"__default__",this.specificity=e.specificity()},n.Definition.prototype.toString=function(){for(var e=this.filters.toString(),t=0;t<this.rules.length;t++)e+="\n    "+this.rules[t];return e},n.Definition.prototype.clone=function(e){e&&o.ok(e instanceof n.Filterset);var t=Object.create(n.Definition.prototype);return t.rules=this.rules.slice(),t.ruleIndex=a.clone(this.ruleIndex),t.filters=e?e:this.filters.clone(),t.attachment=this.attachment,t},n.Definition.prototype.addRules=function(e){for(var t=0,n=0;n<e.length;n++)this.ruleIndex[e[n].id]||(this.rules.push(e[n]),this.ruleIndex[e[n].id]=!0,t++);return t},n.Definition.prototype.appliesTo=function(e,t){for(var n=0,r=this.elements.length;r>n;n++){var i=this.elements[n];if(!(i.wildcard||"class"===i.type&&t[i.clean]||"id"===i.type&&e===i.clean))return!1}return!0},n.Definition.prototype.symbolizersToXML=function(e,t,o){var a=o.toXML(e).join("")+this.filters.toXML(e),s=[],l=[];for(var u in t){l=[];for(var c in t[u])l.push(t[u][c].index);var f=Math.min.apply(Math,l);s.push([u,f])}s=i(s);for(var d=0,h=0;h<s.length;h++){var p=t[s[h]],m=s[h].split("/").pop();if("*"!==m){d++;var g=n.Reference.requiredProperties(m,p);if(g){var v=p[Object.keys(p).shift()];e.error({message:g,index:v.index,filename:v.filename})}var y,b=r(m),w=!0;a+="    <"+b+" ";for(var x in p){"map"===m&&e.error({message:"Map properties are not permitted in other rules",index:p[x].index,filename:p[x].filename});var k=n.Reference.selector(p[x].name);k&&k.serialization&&"content"===k.serialization?(w=!1,y=p[x].ev(e).toXML(e,!0)):k&&k.serialization&&"tag"===k.serialization?(w=!1,y=p[x].ev(e).toXML(e,!0)):a+=p[x].ev(e).toXML(e)+" "}w?a+="/>\n":"undefined"!=typeof y&&(a+=-1!=y.indexOf("<")?">"+y+"</"+b+">\n":"><![CDATA["+y+"]]></"+b+">\n")}}return d&&a?"  <Rule>\n"+a+"  </Rule>\n":""},n.Definition.prototype.collectSymbolizers=function(e,t){for(var n,r={},i=t;i<this.rules.length;i++){n=this.rules[i];var o=n.instance+"/"+n.symbolizer;!(e.current&n.zoom)||o in r&&n.name in r[o]||(e.current&=n.zoom,o in r||(r[o]={}),r[o][n.name]=n)}return Object.keys(r).length?(e.rule&=e.available&=~e.current,r):void 0},n.Definition.prototype.toXML=function(e,t){var r=this.filters.toString();r in t||(t[r]=n.Zoom.all);for(var i,o=n.Zoom.all,a="",s={available:n.Zoom.all},l=0;l<this.rules.length&&o;l++)if(s.rule=this.rules[l].zoom,t[r]&s.rule)for(;s.current=s.rule&o;)if(i=this.collectSymbolizers(s,l)){if(!(t[r]&s.current))continue;a+=this.symbolizersToXML(e,i,(new n.Zoom).setZoom(t[r]&s.current)),t[r]&=~s.current}return a},n.Definition.prototype.toJS=function(e){var t={},r="("+this.zoom+" & (1 << ctx.zoom))",i=this.frame_offset,o=this.filters.toJS(e),s=[r];return o&&s.push(o),i&&s.push('ctx["frame-offset"] === '+i),o=s.join(" && "),a.each(this.rules,function(r){if(!(r instanceof n.Rule))throw new Error("Ruleset not supported");t[r.name]=t[r.name]||[];var i={index:r.index,symbolizer:r.symbolizer};i.js=o?"if("+o+"){"+r.value.toJS(e)+"}":r.value.toJS(e),i.constant="field"!==r.value.ev(e).is,i.filtered=!!o,t[r.name].push(i)}),t}}(e("../tree"))}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"../tree":9,assert:1,underscore:42}],14:[function(e){(function(t){!function(n){var r=t._||e("underscore");n.Dimension=function(e,t,n){this.value=parseFloat(e),this.unit=t||null,this.index=n},n.Dimension.prototype={is:"float",physical_units:["m","cm","in","mm","pt","pc"],screen_units:["px","%"],all_units:["m","cm","in","mm","pt","pc","px","%"],densities:{m:.0254,mm:25.4,cm:2.54,pt:72,pc:6},ev:function(e){if(this.unit&&!r.contains(this.all_units,this.unit))return e.error({message:"Invalid unit: '"+this.unit+"'",index:this.index}),{is:"undefined",value:"undefined"};if(this.unit&&r.contains(this.physical_units,this.unit)){if(!e.ppi)return e.error({message:"ppi is not set, so metric units can't be used",index:this.index}),{is:"undefined",value:"undefined"};this.value=this.value/this.densities[this.unit]*e.ppi,this.unit="px"}return this},round:function(){return this.value=Math.round(this.value),this},toColor:function(){return new n.Color([this.value,this.value,this.value])},round:function(){return this.value=Math.round(this.value),this},toString:function(){return this.value.toString()},operate:function(e,t,r){return"%"===this.unit&&"%"!==r.unit?(e.error({message:"If two operands differ, the first must not be %",index:this.index}),{is:"undefined",value:"undefined"}):"%"!==this.unit&&"%"===r.unit?"*"===t||"/"===t||"%"===t?(e.error({message:"Percent values can only be added or subtracted from other values",index:this.index}),{is:"undefined",value:"undefined"}):new n.Dimension(n.operate(t,this.value,this.value*r.value*.01),this.unit):new n.Dimension(n.operate(t,this.value,r.value),this.unit||r.unit)}}}(e("../tree"))}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"../tree":9,underscore:42}],15:[function(e){!function(e){e.Element=function(e){this.value=e.trim(),"#"===this.value[0]&&(this.type="id",this.clean=this.value.replace(/^#/,"")),"."===this.value[0]&&(this.type="class",this.clean=this.value.replace(/^\./,"")),-1!==this.value.indexOf("*")&&(this.type="wildcard")},e.Element.prototype.specificity=function(){return["id"===this.type?1:0,"class"===this.type?1:0]},e.Element.prototype.toString=function(){return this.value}}(e("../tree"))},{"../tree":9}],16:[function(e){!function(e){e.Expression=function(e){this.value=e},e.Expression.prototype={is:"expression",ev:function(t){return this.value.length>1?new e.Expression(this.value.map(function(e){return e.ev(t)})):this.value[0].ev(t)},toString:function(e){return this.value.map(function(t){return t.toString(e)}).join(" ")}}}(e("../tree"))},{"../tree":9}],17:[function(e){!function(e){e.Field=function(e){this.value=e||""},e.Field.prototype={is:"field",toString:function(){return"["+this.value+"]"},ev:function(){return this}}}(e("../tree"))},{"../tree":9}],18:[function(e){!function(e){e.Filter=function(e,t,n,r,i){this.key=e,this.op=t,this.val=n,this.index=r,this.filename=i,this.id=this.key+this.op+this.val};var t={"<":[" &lt; ","numeric"],">":[" &gt; ","numeric"],"=":[" = ","both"],"!=":[" != ","both"],"<=":[" &lt;= ","numeric"],">=":[" &gt;= ","numeric"],"=~":[".match(","string",")"]};e.Filter.prototype.ev=function(e){return this.key=this.key.ev(e),this.val=this.val.ev(e),this},e.Filter.prototype.toXML=function(n){e.Reference.data.filter&&("keyword"===this.key.is&&-1===e.Reference.data.filter.value.indexOf(this.key.toString())&&n.error({message:this.key.toString()+" is not a valid keyword in a filter expression",index:this.index,filename:this.filename}),"keyword"===this.val.is&&-1===e.Reference.data.filter.value.indexOf(this.val.toString())&&n.error({message:this.val.toString()+" is not a valid keyword in a filter expression",index:this.index,filename:this.filename}));var r=this.key.toString(!1),i=this.val.toString("string"==this.val.is);return("numeric"==t[this.op][1]&&isNaN(i)&&"field"!==this.val.is||"string"==t[this.op][1]&&"'"!=i[0])&&n.error({message:'Cannot use operator "'+this.op+'" with value '+this.val,index:this.index,filename:this.filename}),r+t[this.op][0]+i+(t[this.op][2]||"")},e.Filter.prototype.toString=function(){return"["+this.id+"]"}}(e("../tree"))},{"../tree":9}],19:[function(e){(function(t){var n=e("../tree"),r=t._||e("underscore");n.Filterset=function(){this.filters={}},n.Filterset.prototype.toXML=function(e){var t=[];for(var n in this.filters)t.push("("+this.filters[n].toXML(e).trim()+")");return t.length?"    <Filter>"+t.join(" and ")+"</Filter>\n":""},n.Filterset.prototype.toString=function(){var e=[];for(var t in this.filters)e.push(this.filters[t].id);return e.sort().join("	")},n.Filterset.prototype.ev=function(e){for(var t in this.filters)this.filters[t].ev(e);return this},n.Filterset.prototype.clone=function(){var e=new n.Filterset;for(var t in this.filters)e.filters[t]=this.filters[t];return e},n.Filterset.prototype.cloneWith=function(e){var t=[];for(var r in e.filters){var i=this.addable(e.filters[r]);if(i===!1)return!1;i===!0&&t.push(e.filters[r])}if(!t.length)return null;var o=new n.Filterset;for(r in this.filters)o.filters[r]=this.filters[r];for(;r=t.shift();)o.add(r);return o},n.Filterset.prototype.toJS=function(){var e={"=":"==="};return r.map(this.filters,function(t){var n=t.op;n in e&&(n=e[n]);var r=t.val;void 0!==t._val&&(r=t._val.toString(!0));var i="data";return i+"['"+t.key.value+"'] "+n+" "+("string"===r.is?"'"+r.toString().replace(/'/g,"\\'")+"'":r)}).join(" && ")},n.Filterset.prototype.addable=function(e){var t=e.key.toString(),n=e.val.toString();switch(n.match(/^[0-9]+(\.[0-9]*)?$/)&&(n=parseFloat(n)),e.op){case"=":return void 0!==this.filters[t+"="]?this.filters[t+"="].val.toString()!=n?!1:null:void 0!==this.filters[t+"!="+n]?!1:void 0!==this.filters[t+">"]&&this.filters[t+">"].val>=n?!1:void 0!==this.filters[t+"<"]&&this.filters[t+"<"].val<=n?!1:void 0!==this.filters[t+">="]&&this.filters[t+">="].val>n?!1:void 0!==this.filters[t+"<="]&&this.filters[t+"<="].val<n?!1:!0;case"=~":return!0;case"!=":return void 0!==this.filters[t+"="]?this.filters[t+"="].val==n?!1:null:void 0!==this.filters[t+"!="+n]?null:void 0!==this.filters[t+">"]&&this.filters[t+">"].val>=n?null:void 0!==this.filters[t+"<"]&&this.filters[t+"<"].val<=n?null:void 0!==this.filters[t+">="]&&this.filters[t+">="].val>n?null:void 0!==this.filters[t+"<="]&&this.filters[t+"<="].val<n?null:!0;case">":return t+"="in this.filters?this.filters[t+"="].val<=n?!1:null:void 0!==this.filters[t+"<"]&&this.filters[t+"<"].val<=n?!1:void 0!==this.filters[t+"<="]&&this.filters[t+"<="].val<=n?!1:void 0!==this.filters[t+">"]&&this.filters[t+">"].val>=n?null:void 0!==this.filters[t+">="]&&this.filters[t+">="].val>n?null:!0;case">=":return void 0!==this.filters[t+"="]?this.filters[t+"="].val<n?!1:null:void 0!==this.filters[t+"<"]&&this.filters[t+"<"].val<=n?!1:void 0!==this.filters[t+"<="]&&this.filters[t+"<="].val<n?!1:void 0!==this.filters[t+">"]&&this.filters[t+">"].val>=n?null:void 0!==this.filters[t+">="]&&this.filters[t+">="].val>=n?null:!0;case"<":return void 0!==this.filters[t+"="]?this.filters[t+"="].val>=n?!1:null:void 0!==this.filters[t+">"]&&this.filters[t+">"].val>=n?!1:void 0!==this.filters[t+">="]&&this.filters[t+">="].val>=n?!1:void 0!==this.filters[t+"<"]&&this.filters[t+"<"].val<=n?null:void 0!==this.filters[t+"<="]&&this.filters[t+"<="].val<n?null:!0;case"<=":return void 0!==this.filters[t+"="]?this.filters[t+"="].val>n?!1:null:void 0!==this.filters[t+">"]&&this.filters[t+">"].val>=n?!1:void 0!==this.filters[t+">="]&&this.filters[t+">="].val>n?!1:void 0!==this.filters[t+"<"]&&this.filters[t+"<"].val<=n?null:void 0!==this.filters[t+"<="]&&this.filters[t+"<="].val<=n?null:!0}},n.Filterset.prototype.conflict=function(e){var t=e.key.toString(),n=e.val.toString();return isNaN(parseFloat(n))||(n=parseFloat(n)),"="===e.op&&void 0!==this.filters[t+"="]&&n!=this.filters[t+"="].val.toString()||"!="===e.op&&void 0!==this.filters[t+"="]&&n==this.filters[t+"="].val.toString()||"="===e.op&&void 0!==this.filters[t+"!="]&&n==this.filters[t+"!="].val.toString()?e.toString()+" added to "+this.toString()+" produces an invalid filter":!1},n.Filterset.prototype.add=function(e){var t,n=e.key.toString(),r=e.op,i=this.conflict(e);if(i)return i;if("="===r){for(var o in this.filters)this.filters[o].key==n&&delete this.filters[o];this.filters[n+"="]=e}else if("!="===r)this.filters[n+"!="+e.val]=e;else if("=~"===r)this.filters[n+"=~"+e.val]=e;else if(">"===r){for(var a in this.filters)this.filters[a].key==n&&this.filters[a].val<=e.val&&delete this.filters[a];this.filters[n+">"]=e}else if(">="===r){for(var s in this.filters)t=+this.filters[s].val.toString(),this.filters[s].key==n&&t<e.val&&delete this.filters[s];void 0!==this.filters[n+"!="+e.val]?(delete this.filters[n+"!="+e.val],e.op=">",this.filters[n+">"]=e):this.filters[n+">="]=e}else if("<"===r){for(var l in this.filters)t=+this.filters[l].val.toString(),this.filters[l].key==n&&t>=e.val&&delete this.filters[l];this.filters[n+"<"]=e}else if("<="===r){for(var u in this.filters)t=+this.filters[u].val.toString(),this.filters[u].key==n&&t>e.val&&delete this.filters[u];void 0!==this.filters[n+"!="+e.val]?(delete this.filters[n+"!="+e.val],e.op="<",this.filters[n+"<"]=e):this.filters[n+"<="]=e}}}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"../tree":9,underscore:42}],20:[function(e){!function(e){e._getFontSet=function(t,n){var r=n.join("");if(t._fontMap&&t._fontMap[r])return t._fontMap[r];var i=new e.FontSet(t,n);return t.effects.push(i),t._fontMap||(t._fontMap={}),t._fontMap[r]=i,i},e.FontSet=function(e,t){this.fonts=t,this.name="fontset-"+e.effects.length},e.FontSet.prototype.toXML=function(){return'<FontSet name="'+this.name+'">\n'+this.fonts.map(function(e){return'  <Font face-name="'+e+'"/>'}).join("\n")+"\n</FontSet>"}}(e("../tree"))},{"../tree":9}],21:[function(e){var t=e("../tree");t.FrameOffset=function(e,n,r){if(n=parseInt(n,10),n>t.FrameOffset.max||0>=n)throw{message:"Only frame-offset levels between 1 and "+t.FrameOffset.max+" supported.",index:r};if("="!==e)throw{message:"only = operator is supported for frame-offset",index:r};return n},t.FrameOffset.max=32,t.FrameOffset.none=0},{"../tree":9}],22:[function(e){!function(e){e.ImageFilter=function(e,t){this.filter=e,this.args=t||null},e.ImageFilter.prototype={is:"imagefilter",ev:function(){return this},toString:function(){return this.args?this.filter+"("+this.args.join(",")+")":this.filter}}}(e("../tree"))},{"../tree":9}],23:[function(e){!function(e){e.Invalid=function(e,t,n){this.chunk=e,this.index=t,this.type="syntax",this.message=n||"Invalid code: "+this.chunk},e.Invalid.prototype.is="invalid",e.Invalid.prototype.ev=function(e){return e.error({chunk:this.chunk,index:this.index,type:"syntax",message:this.message||"Invalid code: "+this.chunk}),{is:"undefined"}}}(e("../tree"))},{"../tree":9}],24:[function(e){!function(e){e.Keyword=function(e){this.value=e;var t={transparent:"color","true":"boolean","false":"boolean"};this.is=t[e]?t[e]:"keyword"},e.Keyword.prototype={ev:function(){return this},toString:function(){return this.value}}}(e("../tree"))},{"../tree":9}],25:[function(e){!function(e){e.LayerXML=function(t,n){var r=[];for(var i in t.Datasource)r.push('<Parameter name="'+i+'"><![CDATA['+t.Datasource[i]+"]]></Parameter>");var o="";for(var a in t.properties)o+="minzoom"===a?'  maxzoom="'+e.Zoom.ranges[t.properties[a]]+'"\n':"maxzoom"===a?'  minzoom="'+e.Zoom.ranges[t.properties[a]+1]+'"\n':"  "+a+'="'+t.properties[a]+'"\n';return'<Layer name="'+t.name+'"\n'+o+("undefined"==typeof t.status?"":'  status="'+t.status+'"\n')+("undefined"==typeof t.srs?"":'  srs="'+t.srs+'"')+">\n    "+n.reverse().map(function(e){return"<StyleName>"+e+"</StyleName>"}).join("\n    ")+(r.length?"\n    <Datasource>\n       "+r.join("\n       ")+"\n    </Datasource>\n":"")+"  </Layer>\n"}}(e("../tree"))},{"../tree":9}],26:[function(e){!function(e){e.Literal=function(e){this.value=e||"",this.is="field"},e.Literal.prototype={toString:function(){return this.value},ev:function(){return this}}}(e("../tree"))},{"../tree":9}],27:[function(e){!function(e){e.Operation=function(e,t,n){this.op=e.trim(),this.operands=t,this.index=n},e.Operation.prototype.is="operation",e.Operation.prototype.ev=function(t){var n,r=this.operands[0].ev(t),i=this.operands[1].ev(t);return"undefined"===r.is||"undefined"===i.is?{is:"undefined",value:"undefined"}:(r instanceof e.Dimension&&i instanceof e.Color&&("*"===this.op||"+"===this.op?(n=i,i=r,r=n):t.error({name:"OperationError",message:"Can't substract or divide a color from a number",index:this.index})),r instanceof e.Quoted&&i instanceof e.Quoted&&"+"!==this.op?(t.error({message:"Can't subtract, divide, or multiply strings.",index:this.index,type:"runtime",filename:this.filename}),{is:"undefined",value:"undefined"}):r instanceof e.Field||i instanceof e.Field||r instanceof e.Literal||i instanceof e.Literal?"color"===r.is||"color"===i.is?(t.error({message:"Can't subtract, divide, or multiply colors in expressions.",index:this.index,type:"runtime",filename:this.filename}),{is:"undefined",value:"undefined"}):new e.Literal(r.ev(t).toString(!0)+this.op+i.ev(t).toString(!0)):void 0===r.operate?(t.error({message:"Cannot do math with type "+r.is+".",index:this.index,type:"runtime",filename:this.filename}),{is:"undefined",value:"undefined"}):r.operate(t,this.op,i))},e.operate=function(e,t,n){switch(e){case"+":return t+n;case"-":return t-n;case"*":return t*n;case"%":return t%n;case"/":return t/n}}}(e("../tree"))},{"../tree":9}],28:[function(e){!function(e){e.Quoted=function(e){this.value=e||""},e.Quoted.prototype={is:"string",toString:function(e){var t=this.value.replace(/&/g,"&amp;"),n=t.replace(/\'/g,"\\'").replace(/\"/g,"&quot;").replace(/</g,"&lt;").replace(/\>/g,"&gt;");return e===!0?"'"+n+"'":t},ev:function(){return this},operate:function(t,n,r){return new e.Quoted(e.operate(n,this.toString(),r.toString(this.contains_field)))}}}(e("../tree"))},{"../tree":9}],29:[function(e){(function(t){!function(n){function r(e){var t={};for(var n in e.symbolizers)for(var r in e.symbolizers[n])e.symbolizers[n][r].hasOwnProperty("css")&&(t[e.symbolizers[n][r].css]=[e.symbolizers[n][r],n,r]);return t}function i(e){var t={};for(var n in e.symbolizers)for(var r in e.symbolizers[n])if("functions"===e.symbolizers[n][r].type)for(var i=0;i<e.symbolizers[n][r].functions.length;i++){var o=e.symbolizers[n][r].functions[i];t[o[0]]=o[1]}return t}function o(e){var t={};for(var n in e.symbolizers){t[n]=[];for(var r in e.symbolizers[n])e.symbolizers[n][r].required&&t[n].push(e.symbolizers[n][r].css)}return t}function a(e,t){if("string"===e.value[0].is)return!0;for(var n in e.value)for(var r in e.value[n].value){if("call"!==e.value[n].value[r].is)return!1;var i=l.find(u.selector(t).functions,function(t){return t[0]==e.value[n].value[r].name});if(!(i&&-1==i[1]||i&&i[1]===e.value[n].value[r].args.length))return!1}return!0}function s(e,t){return"object"==typeof u.selector(t).type?-1!==u.selector(t).type.indexOf(e.value[0].value):"string"===u.selector(t).type}var l=t._||e("underscore"),u={};u.setData=function(e){u.data=e,u.selector_cache=r(e),u.mapnikFunctions=i(e),u.mapnikFunctions.matrix=[6],u.mapnikFunctions.translate=[1,2],u.mapnikFunctions.scale=[1,2],u.mapnikFunctions.rotate=[1,3],u.mapnikFunctions.skewX=[1],u.mapnikFunctions.skewY=[1],u.required_cache=o(e)},u.setVersion=function(t){var n=e("mapnik-reference");return n.version.hasOwnProperty(t)?(u.setData(n.version[t]),!0):!1},u.selectorData=function(e,t){return u.selector_cache[e]?u.selector_cache[e][t]:void 0},u.validSelector=function(e){return!!u.selector_cache[e]},u.selectorName=function(e){return u.selectorData(e,2)},u.selector=function(e){return u.selectorData(e,0)},u.symbolizer=function(e){return u.selectorData(e,1)},u.requiredProperties=function(e,t){var n=u.required_cache[e];for(var r in n)if(!(n[r]in t))return"Property "+n[r]+" required for defining "+e+" styles."},u._validateValue={font:function(e,t){return e.validation_data&&e.validation_data.fonts?-1!=e.validation_data.fonts.indexOf(t):!0}},u.isFont=function(e){return"font"==u.selector(e).validate},u.editDistance=function(e,t){if(0===e.length)return t.length;if(0===t.length)return e.length;for(var n=[],r=0;r<=t.length;r++)n[r]=[r];for(var i=0;i<=e.length;i++)n[0][i]=i;for(r=1;r<=t.length;r++)for(i=1;i<=e.length;i++)n[r][i]=t.charAt(r-1)==e.charAt(i-1)?n[r-1][i-1]:Math.min(n[r-1][i-1]+1,Math.min(n[r][i-1]+1,n[r-1][i]+1));return n[t.length][e.length]},u.validValue=function(e,t,n){var r;if(u.selector(t)){if("keyword"==n.value[0].is)return s(n,t);if("undefined"==n.value[0].is)return!0;if("numbers"==u.selector(t).type){for(r in n.value)if("float"!==n.value[r].is)return!1;return!0}if("tags"==u.selector(t).type){if(!n.value)return!1;if(!n.value[0].value)return"tag"===n.value[0].is;for(r=0;r<n.value[0].value.length;r++)if("tag"!==n.value[0].value[r].is)return!1;return!0}if("functions"==u.selector(t).type)return a(n,t);if("unsigned"===u.selector(t).type)return"float"===n.value[0].is?(n.value[0].round(),!0):!1;if(u.selector(t).expression)return!0;if(u.selector(t).validate){var i=!1;for(r=0;r<n.value.length;r++)if(u.selector(t).type==n.value[r].is&&u._validateValue[u.selector(t).validate](e,n.value[r].value))return!0;return i}return u.selector(t).type==n.value[0].is}return!1},n.Reference=u}(e("../tree"))}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"../tree":9,"mapnik-reference":39,underscore:42}],30:[function(e){!function(e){function t(t){return Object.keys(e.Reference.selector_cache).map(function(n){return[n,e.Reference.editDistance(t,n)]}).sort(function(e,t){return e[1]-t[1]})}e.Rule=function(t,n,r,i){var o=t.split("/");this.name=o.pop(),this.instance=o.length?o[0]:"__default__",this.value=n instanceof e.Value?n:new e.Value([n]),this.index=r,this.symbolizer=e.Reference.symbolizer(this.name),this.filename=i,this.variable="@"===t.charAt(0)},e.Rule.prototype.is="rule",e.Rule.prototype.clone=function(){var t=Object.create(e.Rule.prototype);return t.name=this.name,t.value=this.value,t.index=this.index,t.instance=this.instance,t.symbolizer=this.symbolizer,t.filename=this.filename,t.variable=this.variable,t},e.Rule.prototype.updateID=function(){return this.id=this.zoom+"#"+this.instance+"#"+this.name},e.Rule.prototype.toString=function(){return"["+e.Zoom.toString(this.zoom)+"] "+this.name+": "+this.value},e.Rule.prototype.toXML=function(n,r,i){if(!e.Reference.validSelector(this.name)){var o=t(this.name),a="";return o[0][1]<3&&(a=". Did you mean "+o[0][0]+"?"),n.error({message:"Unrecognized rule: "+this.name+a,index:this.index,type:"syntax",filename:this.filename})}if(this.value instanceof e.Value&&!e.Reference.validValue(n,this.name,this.value)){if(e.Reference.selector(this.name)){var s;return s=e.Reference.selector(this.name).validate?e.Reference.selector(this.name).validate:"object"==typeof e.Reference.selector(this.name).type?"keyword (options: "+e.Reference.selector(this.name).type.join(", ")+")":e.Reference.selector(this.name).type,n.error({message:"Invalid value for "+this.name+", the type "+s+" is expected. "+this.value+" (of type "+this.value.value[0].is+")  was given.",index:this.index,type:"syntax",filename:this.filename})}return n.error({message:"Unrecognized property: "+this.name,index:this.index,type:"syntax",filename:this.filename})}if(this.variable)return"";if(e.Reference.isFont(this.name)&&this.value.value.length>1){var l=e._getFontSet(n,this.value.value);return'fontset-name="'+l.name+'"'}return r?this.value.toString(n,this.name,i):e.Reference.selectorName(this.name)+'="'+this.value.toString(n,this.name)+'"'},e.Rule.prototype.ev=function(t){return new e.Rule(this.name,this.value.ev(t),this.index,this.filename)}}(e("../tree"))},{"../tree":9}],31:[function(e){!function(e){e.Ruleset=function(e,t){this.selectors=e,this.rules=t,this._lookups={}},e.Ruleset.prototype={is:"ruleset",ev:function(t){var n,r=new e.Ruleset(this.selectors,this.rules.slice(0));for(r.root=this.root,t.frames.unshift(r),n=0,rule;n<r.rules.length;n++)rule=r.rules[n],r.rules[n]=rule.ev?rule.ev(t):rule;return t.frames.shift(),r},match:function(e){return!e||0===e.length},variables:function(){return this._variables?this._variables:this._variables=this.rules.reduce(function(t,n){return n instanceof e.Rule&&n.variable===!0&&(t[n.name]=n),t},{})},variable:function(e){return this.variables()[e]},rulesets:function(){return this._rulesets?this._rulesets:this._rulesets=this.rules.filter(function(t){return t instanceof e.Ruleset})},find:function(t,n){n=n||this;var r,i=[],o=t.toString();return o in this._lookups?this._lookups[o]:(this.rulesets().forEach(function(o){if(o!==n)for(var a=0;a<o.selectors.length;a++)if(r=t.match(o.selectors[a])){t.elements.length>1?Array.prototype.push.apply(i,o.find(new e.Selector(null,null,null,t.elements.slice(1)),n)):i.push(o);break}}),this._lookups[o]=i)},evZooms:function(t){for(var n=0;n<this.selectors.length;n++){for(var r=e.Zoom.all,i=0;i<this.selectors[n].zoom.length;i++)r&=this.selectors[n].zoom[i].ev(t).zoom;this.selectors[n].zoom=r}},flatten:function(t,n,r){var i,o,a=[];for(0===this.selectors.length&&(r.frames=r.frames.concat(this.rules)),this.evZooms(r),i=0;i<this.selectors.length;i++){var s=this.selectors[i];if(s.filters)if(n.length)for(o=0;o<n.length;o++){var l=n[o],u=l.filters.cloneWith(s.filters);if(null===u){if(l.zoom===(l.zoom&s.zoom)&&l.frame_offset===s.frame_offset&&l.attachment===s.attachment&&l.elements.join()===s.elements.join()){a.push(l);continue}u=l.filters}else if(!u)continue;var c=Object.create(e.Selector.prototype);c.filters=u,c.zoom=l.zoom&s.zoom,c.frame_offset=s.frame_offset,c.elements=l.elements.concat(s.elements),c.attachment=l.attachment&&s.attachment?l.attachment+"/"+s.attachment:s.attachment||l.attachment,c.conditions=l.conditions+s.conditions,c.index=s.index,a.push(c)}else a.push(s)}var f=[];for(i=0;i<this.rules.length;i++){var d=this.rules[i];d instanceof e.Ruleset?d.flatten(t,a,r):d instanceof e.Rule?f.push(d):d instanceof e.Invalid&&r.error(d)}var h=f.length?f[0].index:!1;for(i=0;i<a.length;i++)h!==!1&&(a[i].index=h),t.push(new e.Definition(a[i],f.slice()));return t}}}(e("../tree"))},{"../tree":9}],32:[function(e){!function(e){e.Selector=function(t,n,r,i,o,a,s){this.elements=i||[],this.attachment=o,this.filters=t||{},this.frame_offset=r,this.zoom="undefined"!=typeof n?n:e.Zoom.all,this.conditions=a,this.index=s},e.Selector.prototype.specificity=function(){return this.elements.reduce(function(e,t){var n=t.specificity();return e[0]+=n[0],e[1]+=n[1],e},[0,0,this.conditions,this.index])}}(e("../tree"))},{"../tree":9}],33:[function(e){(function(t){!function(n){var r=t._||e("underscore");n.StyleXML=function(e,t,n,i){for(var o={},a=[],s=[],l=[],u=[],c=[],f=0;f<n.length;f++)for(var d=0;d<n[f].rules.length;d++)"image-filters"===n[f].rules[d].name&&a.push(n[f].rules[d]),"image-filters-inflate"===n[f].rules[d].name&&s.push(n[f].rules[d]),"direct-image-filters"===n[f].rules[d].name&&l.push(n[f].rules[d]),"comp-op"===n[f].rules[d].name&&u.push(n[f].rules[d]),"opacity"===n[f].rules[d].name&&c.push(n[f].rules[d]);var h=n.map(function(e){return e.toXML(i,o)}),p="";a.length&&(p+=' image-filters="'+r.chain(a).uniq(function(e){return e.id}).map(function(e){return e.ev(i).toXML(i,!0,",","image-filter")}).value().join(",")+'"'),s.length&&(p+=' image-filters-inflate="'+s[0].value.ev(i).toString()+'"'),l.length&&(p+=' direct-image-filters="'+r.chain(l).uniq(function(e){return e.id}).map(function(e){return e.ev(i).toXML(i,!0,",","direct-image-filter")}).value().join(",")+'"'),u.length&&"src-over"!=u[0].value.ev(i).value&&(p+=' comp-op="'+u[0].value.ev(i).toString()+'"'),c.length&&1!=c[0].value.ev(i).value&&(p+=' opacity="'+c[0].value.ev(i).toString()+'"');var m=h.join("");return p||m?'<Style name="'+e+'" filter-mode="first"'+p+">\n"+m+"</Style>":""}}(e("../tree"))}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"../tree":9,underscore:42}],34:[function(e){!function(e){e.URL=function(e,t){this.value=e,this.paths=t},e.URL.prototype={is:"uri",toString:function(){return this.value.toString()},ev:function(t){return new e.URL(this.value.ev(t),this.paths)}}}(e("../tree"))},{"../tree":9}],35:[function(e){!function(e){e.Value=function(e){this.value=e},e.Value.prototype={is:"value",ev:function(t){return 1===this.value.length?this.value[0].ev(t):new e.Value(this.value.map(function(e){return e.ev(t)}))},toString:function(e,t,n,r){return this.value.map(function(t){return t.toString(e,r)}).join(n||", ")},clone:function(){var t=Object.create(e.Value.prototype);return t.value=Array.isArray(t)?this.value.slice():this.value,t.is=this.is,t},toJS:function(e){var t=this.ev(e),n=t.toString();return"color"===t.is||"uri"===t.is||"string"===t.is||"keyword"===t.is?n="'"+n+"'":"field"===t.is?n=n.replace(/\[(.*)\]/g,"data['$1']"):"call"===t.is&&(n=JSON.stringify({name:t.name,args:t.args})),"_value = "+n+";"
}}}(e("../tree"))},{"../tree":9}],36:[function(e){!function(e){e.Variable=function(e,t,n){this.name=e,this.index=t,this.filename=n},e.Variable.prototype={is:"variable",toString:function(){return this.name},ev:function(e){this.name;if(this._css)return this._css;var t=e.frames.filter(function(e){return e.name==this.name}.bind(this));return t.length?t[0].value.ev(e):(e.error({message:"variable "+this.name+" is undefined",index:this.index,type:"runtime",filename:this.filename}),{is:"undefined",value:"undefined"})}}}(e("../tree"))},{"../tree":9}],37:[function(e){var t=e("../tree");t.Zoom=function(e,t,n){this.op=e,this.value=t,this.index=n},t.Zoom.prototype.setZoom=function(e){return this.zoom=e,this},t.Zoom.prototype.ev=function(e){var n=0,r=1/0,i=parseInt(this.value.ev(e).toString(),10),o=0;switch((i>t.Zoom.maxZoom||0>i)&&e.error({message:"Only zoom levels between 0 and "+t.Zoom.maxZoom+" supported.",index:this.index}),this.op){case"=":return this.zoom=1<<i,this;case">":n=i+1;break;case">=":n=i;break;case"<":r=i-1;break;case"<=":r=i}for(var a=0;a<=t.Zoom.maxZoom;a++)a>=n&&r>=a&&(o|=1<<a);return this.zoom=o,this},t.Zoom.prototype.toString=function(){return this.zoom},t.Zoom.all=8388607,t.Zoom.maxZoom=22,t.Zoom.ranges={0:1e9,1:5e8,2:2e8,3:1e8,4:5e7,5:25e6,6:125e5,7:65e5,8:3e6,9:15e5,10:75e4,11:4e5,12:2e5,13:1e5,14:5e4,15:25e3,16:12500,17:5e3,18:2500,19:1500,20:750,21:500,22:250,23:100},t.Zoom.prototype.toXML=function(){var e=[];if(this.zoom!=t.Zoom.all){for(var n=null,r=null,i=0;i<=t.Zoom.maxZoom;i++)this.zoom&1<<i&&(null===n&&(n=i),r=i);n>0&&e.push("    <MaxScaleDenominator>"+t.Zoom.ranges[n]+"</MaxScaleDenominator>\n"),22>r&&e.push("    <MinScaleDenominator>"+t.Zoom.ranges[r+1]+"</MinScaleDenominator>\n")}return e},t.Zoom.prototype.toString=function(){for(var e="",n=0;n<=t.Zoom.maxZoom;n++)e+=this.zoom&1<<n?"X":".";return e}},{"../tree":9}],38:[function(e,t){t.exports={name:"carto",version:"0.15.1-cdb1",description:"CartoCSS Stylesheet Compiler",url:"https://github.com/cartodb/carto",repository:{type:"git",url:"http://github.com/cartodb/carto.git"},author:{name:"CartoDB",url:"http://cartodb.com/"},keywords:["maps","css","stylesheets"],contributors:["Tom MacWright <macwright@gmail.com>","Konstantin KÃ¤fer","Alexis Sellier <self@cloudhead.net>","Raul Ochoa <rochoa@cartodb.com>","Javi Santana <jsantana@cartodb.com>"],licenses:[{type:"Apache"}],bin:{carto:"./bin/carto"},man:"./man/carto.1",main:"./lib/carto/index",engines:{node:">=0.4.x"},dependencies:{underscore:"1.8.3","mapnik-reference":"~6.0.2",optimist:"~0.6.0"},devDependencies:{mocha:"1.12.x",jshint:"0.2.x",sax:"0.1.x",istanbul:"~0.2.14",coveralls:"~2.10.1",browserify:"~7.0.0","uglify-js":"1.3.3"},scripts:{pretest:"npm install",test:"mocha -R spec",coverage:"istanbul cover ./node_modules/.bin/_mocha && coveralls < ./coverage/lcov.info"}}},{}],39:[function(e,t){(function(n){var r=(e("fs"),e("path")),i=e("fs").existsSync||e("path").existsSync;t.exports.version={};var o=["2.0.0","2.0.1","2.0.2","2.1.0","2.1.1","2.2.0","2.3.0","3.0.0"];o.map(function(o){t.exports.version[o]=e(r.join(n,o,"reference.json"));var a=r.join(n,o,"datasources.json");i(a)&&(t.exports.version[o].datasources=e(a).datasources)})}).call(this,"/node_modules/mapnik-reference")},{fs:2,path:40}],40:[function(e,t,n){(function(e){function t(e,t){for(var n=0,r=e.length-1;r>=0;r--){var i=e[r];"."===i?e.splice(r,1):".."===i?(e.splice(r,1),n++):n&&(e.splice(r,1),n--)}if(t)for(;n--;n)e.unshift("..");return e}function r(e,t){if(e.filter)return e.filter(t);for(var n=[],r=0;r<e.length;r++)t(e[r],r,e)&&n.push(e[r]);return n}var i=/^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/,o=function(e){return i.exec(e).slice(1)};n.resolve=function(){for(var n="",i=!1,o=arguments.length-1;o>=-1&&!i;o--){var a=o>=0?arguments[o]:e.cwd();if("string"!=typeof a)throw new TypeError("Arguments to path.resolve must be strings");a&&(n=a+"/"+n,i="/"===a.charAt(0))}return n=t(r(n.split("/"),function(e){return!!e}),!i).join("/"),(i?"/":"")+n||"."},n.normalize=function(e){var i=n.isAbsolute(e),o="/"===a(e,-1);return e=t(r(e.split("/"),function(e){return!!e}),!i).join("/"),e||i||(e="."),e&&o&&(e+="/"),(i?"/":"")+e},n.isAbsolute=function(e){return"/"===e.charAt(0)},n.join=function(){var e=Array.prototype.slice.call(arguments,0);return n.normalize(r(e,function(e){if("string"!=typeof e)throw new TypeError("Arguments to path.join must be strings");return e}).join("/"))},n.relative=function(e,t){function r(e){for(var t=0;t<e.length&&""===e[t];t++);for(var n=e.length-1;n>=0&&""===e[n];n--);return t>n?[]:e.slice(t,n-t+1)}e=n.resolve(e).substr(1),t=n.resolve(t).substr(1);for(var i=r(e.split("/")),o=r(t.split("/")),a=Math.min(i.length,o.length),s=a,l=0;a>l;l++)if(i[l]!==o[l]){s=l;break}for(var u=[],l=s;l<i.length;l++)u.push("..");return u=u.concat(o.slice(s)),u.join("/")},n.sep="/",n.delimiter=":",n.dirname=function(e){var t=o(e),n=t[0],r=t[1];return n||r?(r&&(r=r.substr(0,r.length-1)),n+r):"."},n.basename=function(e,t){var n=o(e)[2];return t&&n.substr(-1*t.length)===t&&(n=n.substr(0,n.length-t.length)),n},n.extname=function(e){return o(e)[3]};var a="b"==="ab".substr(-1)?function(e,t,n){return e.substr(t,n)}:function(e,t,n){return 0>t&&(t=e.length+t),e.substr(t,n)}}).call(this,e("_process"))},{_process:41}],41:[function(e,t){function n(){throw new Error("setTimeout has not been defined")}function r(){throw new Error("clearTimeout has not been defined")}function i(e){if(c===setTimeout)return setTimeout(e,0);if((c===n||!c)&&setTimeout)return c=setTimeout,setTimeout(e,0);try{return c(e,0)}catch(t){try{return c.call(null,e,0)}catch(t){return c.call(this,e,0)}}}function o(e){if(f===clearTimeout)return clearTimeout(e);if((f===r||!f)&&clearTimeout)return f=clearTimeout,clearTimeout(e);try{return f(e)}catch(t){try{return f.call(null,e)}catch(t){return f.call(this,e)}}}function a(){m&&h&&(m=!1,h.length?p=h.concat(p):g=-1,p.length&&s())}function s(){if(!m){var e=i(a);m=!0;for(var t=p.length;t;){for(h=p,p=[];++g<t;)h&&h[g].run();g=-1,t=p.length}h=null,m=!1,o(e)}}function l(e,t){this.fun=e,this.array=t}function u(){}var c,f,d=t.exports={};!function(){try{c="function"==typeof setTimeout?setTimeout:n}catch(e){c=n}try{f="function"==typeof clearTimeout?clearTimeout:r}catch(e){f=r}}();var h,p=[],m=!1,g=-1;d.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];p.push(new l(e,t)),1!==p.length||m||i(s)},l.prototype.run=function(){this.fun.apply(null,this.array)},d.title="browser",d.browser=!0,d.env={},d.argv=[],d.version="",d.versions={},d.on=u,d.addListener=u,d.once=u,d.off=u,d.removeListener=u,d.removeAllListeners=u,d.emit=u,d.binding=function(){throw new Error("process.binding is not supported")},d.cwd=function(){return"/"},d.chdir=function(){throw new Error("process.chdir is not supported")},d.umask=function(){return 0}},{}],42:[function(e,t,n){(function(){function e(e){function t(t,n,r,i,o,a){for(;o>=0&&a>o;o+=e){var s=i?i[o]:o;r=n(r,t[s],s,t)}return r}return function(n,r,i,o){r=x(r,o,4);var a=!F(n)&&w.keys(n),s=(a||n).length,l=e>0?0:s-1;return arguments.length<3&&(i=n[a?a[l]:l],l+=e),t(n,r,i,a,l,s)}}function r(e){return function(t,n,r){n=k(n,r);for(var i=A(t),o=e>0?0:i-1;o>=0&&i>o;o+=e)if(n(t[o],o,t))return o;return-1}}function i(e,t,n){return function(r,i,o){var a=0,s=A(r);if("number"==typeof o)e>0?a=o>=0?o:Math.max(o+s,a):s=o>=0?Math.min(o+1,s):o+s+1;else if(n&&o&&s)return o=n(r,i),r[o]===i?o:-1;if(i!==i)return o=t(d.call(r,a,s),w.isNaN),o>=0?o+a:-1;for(o=e>0?a:s-1;o>=0&&s>o;o+=e)if(r[o]===i)return o;return-1}}function o(e,t){var n=L.length,r=e.constructor,i=w.isFunction(r)&&r.prototype||u,o="constructor";for(w.has(e,o)&&!w.contains(t,o)&&t.push(o);n--;)o=L[n],o in e&&e[o]!==i[o]&&!w.contains(t,o)&&t.push(o)}var a=this,s=a._,l=Array.prototype,u=Object.prototype,c=Function.prototype,f=l.push,d=l.slice,h=u.toString,p=u.hasOwnProperty,m=Array.isArray,g=Object.keys,v=c.bind,y=Object.create,b=function(){},w=function(e){return e instanceof w?e:this instanceof w?void(this._wrapped=e):new w(e)};"undefined"!=typeof n?("undefined"!=typeof t&&t.exports&&(n=t.exports=w),n._=w):a._=w,w.VERSION="1.8.3";var x=function(e,t,n){if(void 0===t)return e;switch(null==n?3:n){case 1:return function(n){return e.call(t,n)};case 2:return function(n,r){return e.call(t,n,r)};case 3:return function(n,r,i){return e.call(t,n,r,i)};case 4:return function(n,r,i,o){return e.call(t,n,r,i,o)}}return function(){return e.apply(t,arguments)}},k=function(e,t,n){return null==e?w.identity:w.isFunction(e)?x(e,t,n):w.isObject(e)?w.matcher(e):w.property(e)};w.iteratee=function(e,t){return k(e,t,1/0)};var S=function(e,t){return function(n){var r=arguments.length;if(2>r||null==n)return n;for(var i=1;r>i;i++)for(var o=arguments[i],a=e(o),s=a.length,l=0;s>l;l++){var u=a[l];t&&void 0!==n[u]||(n[u]=o[u])}return n}},z=function(e){if(!w.isObject(e))return{};if(y)return y(e);b.prototype=e;var t=new b;return b.prototype=null,t},_=function(e){return function(t){return null==t?void 0:t[e]}},j=Math.pow(2,53)-1,A=_("length"),F=function(e){var t=A(e);return"number"==typeof t&&t>=0&&j>=t};w.each=w.forEach=function(e,t,n){t=x(t,n);var r,i;if(F(e))for(r=0,i=e.length;i>r;r++)t(e[r],r,e);else{var o=w.keys(e);for(r=0,i=o.length;i>r;r++)t(e[o[r]],o[r],e)}return e},w.map=w.collect=function(e,t,n){t=k(t,n);for(var r=!F(e)&&w.keys(e),i=(r||e).length,o=Array(i),a=0;i>a;a++){var s=r?r[a]:a;o[a]=t(e[s],s,e)}return o},w.reduce=w.foldl=w.inject=e(1),w.reduceRight=w.foldr=e(-1),w.find=w.detect=function(e,t,n){var r;return r=F(e)?w.findIndex(e,t,n):w.findKey(e,t,n),void 0!==r&&-1!==r?e[r]:void 0},w.filter=w.select=function(e,t,n){var r=[];return t=k(t,n),w.each(e,function(e,n,i){t(e,n,i)&&r.push(e)}),r},w.reject=function(e,t,n){return w.filter(e,w.negate(k(t)),n)},w.every=w.all=function(e,t,n){t=k(t,n);for(var r=!F(e)&&w.keys(e),i=(r||e).length,o=0;i>o;o++){var a=r?r[o]:o;if(!t(e[a],a,e))return!1}return!0},w.some=w.any=function(e,t,n){t=k(t,n);for(var r=!F(e)&&w.keys(e),i=(r||e).length,o=0;i>o;o++){var a=r?r[o]:o;if(t(e[a],a,e))return!0}return!1},w.contains=w.includes=w.include=function(e,t,n,r){return F(e)||(e=w.values(e)),("number"!=typeof n||r)&&(n=0),w.indexOf(e,t,n)>=0},w.invoke=function(e,t){var n=d.call(arguments,2),r=w.isFunction(t);return w.map(e,function(e){var i=r?t:e[t];return null==i?i:i.apply(e,n)})},w.pluck=function(e,t){return w.map(e,w.property(t))},w.where=function(e,t){return w.filter(e,w.matcher(t))},w.findWhere=function(e,t){return w.find(e,w.matcher(t))},w.max=function(e,t,n){var r,i,o=-1/0,a=-1/0;if(null==t&&null!=e){e=F(e)?e:w.values(e);for(var s=0,l=e.length;l>s;s++)r=e[s],r>o&&(o=r)}else t=k(t,n),w.each(e,function(e,n,r){i=t(e,n,r),(i>a||i===-1/0&&o===-1/0)&&(o=e,a=i)});return o},w.min=function(e,t,n){var r,i,o=1/0,a=1/0;if(null==t&&null!=e){e=F(e)?e:w.values(e);for(var s=0,l=e.length;l>s;s++)r=e[s],o>r&&(o=r)}else t=k(t,n),w.each(e,function(e,n,r){i=t(e,n,r),(a>i||1/0===i&&1/0===o)&&(o=e,a=i)});return o},w.shuffle=function(e){for(var t,n=F(e)?e:w.values(e),r=n.length,i=Array(r),o=0;r>o;o++)t=w.random(0,o),t!==o&&(i[o]=i[t]),i[t]=n[o];return i},w.sample=function(e,t,n){return null==t||n?(F(e)||(e=w.values(e)),e[w.random(e.length-1)]):w.shuffle(e).slice(0,Math.max(0,t))},w.sortBy=function(e,t,n){return t=k(t,n),w.pluck(w.map(e,function(e,n,r){return{value:e,index:n,criteria:t(e,n,r)}}).sort(function(e,t){var n=e.criteria,r=t.criteria;if(n!==r){if(n>r||void 0===n)return 1;if(r>n||void 0===r)return-1}return e.index-t.index}),"value")};var T=function(e){return function(t,n,r){var i={};return n=k(n,r),w.each(t,function(r,o){var a=n(r,o,t);e(i,r,a)}),i}};w.groupBy=T(function(e,t,n){w.has(e,n)?e[n].push(t):e[n]=[t]}),w.indexBy=T(function(e,t,n){e[n]=t}),w.countBy=T(function(e,t,n){w.has(e,n)?e[n]++:e[n]=1}),w.toArray=function(e){return e?w.isArray(e)?d.call(e):F(e)?w.map(e,w.identity):w.values(e):[]},w.size=function(e){return null==e?0:F(e)?e.length:w.keys(e).length},w.partition=function(e,t,n){t=k(t,n);var r=[],i=[];return w.each(e,function(e,n,o){(t(e,n,o)?r:i).push(e)}),[r,i]},w.first=w.head=w.take=function(e,t,n){return null==e?void 0:null==t||n?e[0]:w.initial(e,e.length-t)},w.initial=function(e,t,n){return d.call(e,0,Math.max(0,e.length-(null==t||n?1:t)))},w.last=function(e,t,n){return null==e?void 0:null==t||n?e[e.length-1]:w.rest(e,Math.max(0,e.length-t))},w.rest=w.tail=w.drop=function(e,t,n){return d.call(e,null==t||n?1:t)},w.compact=function(e){return w.filter(e,w.identity)};var M=function(e,t,n,r){for(var i=[],o=0,a=r||0,s=A(e);s>a;a++){var l=e[a];if(F(l)&&(w.isArray(l)||w.isArguments(l))){t||(l=M(l,t,n));var u=0,c=l.length;for(i.length+=c;c>u;)i[o++]=l[u++]}else n||(i[o++]=l)}return i};w.flatten=function(e,t){return M(e,t,!1)},w.without=function(e){return w.difference(e,d.call(arguments,1))},w.uniq=w.unique=function(e,t,n,r){w.isBoolean(t)||(r=n,n=t,t=!1),null!=n&&(n=k(n,r));for(var i=[],o=[],a=0,s=A(e);s>a;a++){var l=e[a],u=n?n(l,a,e):l;t?(a&&o===u||i.push(l),o=u):n?w.contains(o,u)||(o.push(u),i.push(l)):w.contains(i,l)||i.push(l)}return i},w.union=function(){return w.uniq(M(arguments,!0,!0))},w.intersection=function(e){for(var t=[],n=arguments.length,r=0,i=A(e);i>r;r++){var o=e[r];if(!w.contains(t,o)){for(var a=1;n>a&&w.contains(arguments[a],o);a++);a===n&&t.push(o)}}return t},w.difference=function(e){var t=M(arguments,!0,!0,1);return w.filter(e,function(e){return!w.contains(t,e)})},w.zip=function(){return w.unzip(arguments)},w.unzip=function(e){for(var t=e&&w.max(e,A).length||0,n=Array(t),r=0;t>r;r++)n[r]=w.pluck(e,r);return n},w.object=function(e,t){for(var n={},r=0,i=A(e);i>r;r++)t?n[e[r]]=t[r]:n[e[r][0]]=e[r][1];return n},w.findIndex=r(1),w.findLastIndex=r(-1),w.sortedIndex=function(e,t,n,r){n=k(n,r,1);for(var i=n(t),o=0,a=A(e);a>o;){var s=Math.floor((o+a)/2);n(e[s])<i?o=s+1:a=s}return o},w.indexOf=i(1,w.findIndex,w.sortedIndex),w.lastIndexOf=i(-1,w.findLastIndex),w.range=function(e,t,n){null==t&&(t=e||0,e=0),n=n||1;for(var r=Math.max(Math.ceil((t-e)/n),0),i=Array(r),o=0;r>o;o++,e+=n)i[o]=e;return i};var q=function(e,t,n,r,i){if(!(r instanceof t))return e.apply(n,i);var o=z(e.prototype),a=e.apply(o,i);return w.isObject(a)?a:o};w.bind=function(e,t){if(v&&e.bind===v)return v.apply(e,d.call(arguments,1));if(!w.isFunction(e))throw new TypeError("Bind must be called on a function");var n=d.call(arguments,2),r=function(){return q(e,r,t,this,n.concat(d.call(arguments)))};return r},w.partial=function(e){var t=d.call(arguments,1),n=function(){for(var r=0,i=t.length,o=Array(i),a=0;i>a;a++)o[a]=t[a]===w?arguments[r++]:t[a];for(;r<arguments.length;)o.push(arguments[r++]);return q(e,n,this,this,o)};return n},w.bindAll=function(e){var t,n,r=arguments.length;if(1>=r)throw new Error("bindAll must be passed function names");for(t=1;r>t;t++)n=arguments[t],e[n]=w.bind(e[n],e);return e},w.memoize=function(e,t){var n=function(r){var i=n.cache,o=""+(t?t.apply(this,arguments):r);return w.has(i,o)||(i[o]=e.apply(this,arguments)),i[o]};return n.cache={},n},w.delay=function(e,t){var n=d.call(arguments,2);return setTimeout(function(){return e.apply(null,n)},t)},w.defer=w.partial(w.delay,w,1),w.throttle=function(e,t,n){var r,i,o,a=null,s=0;n||(n={});var l=function(){s=n.leading===!1?0:w.now(),a=null,o=e.apply(r,i),a||(r=i=null)};return function(){var u=w.now();s||n.leading!==!1||(s=u);var c=t-(u-s);return r=this,i=arguments,0>=c||c>t?(a&&(clearTimeout(a),a=null),s=u,o=e.apply(r,i),a||(r=i=null)):a||n.trailing===!1||(a=setTimeout(l,c)),o}},w.debounce=function(e,t,n){var r,i,o,a,s,l=function(){var u=w.now()-a;t>u&&u>=0?r=setTimeout(l,t-u):(r=null,n||(s=e.apply(o,i),r||(o=i=null)))};return function(){o=this,i=arguments,a=w.now();var u=n&&!r;return r||(r=setTimeout(l,t)),u&&(s=e.apply(o,i),o=i=null),s}},w.wrap=function(e,t){return w.partial(t,e)},w.negate=function(e){return function(){return!e.apply(this,arguments)}},w.compose=function(){var e=arguments,t=e.length-1;return function(){for(var n=t,r=e[t].apply(this,arguments);n--;)r=e[n].call(this,r);return r}},w.after=function(e,t){return function(){return--e<1?t.apply(this,arguments):void 0}},w.before=function(e,t){var n;return function(){return--e>0&&(n=t.apply(this,arguments)),1>=e&&(t=null),n}},w.once=w.partial(w.before,2);var R=!{toString:null}.propertyIsEnumerable("toString"),L=["valueOf","isPrototypeOf","toString","propertyIsEnumerable","hasOwnProperty","toLocaleString"];w.keys=function(e){if(!w.isObject(e))return[];if(g)return g(e);var t=[];for(var n in e)w.has(e,n)&&t.push(n);return R&&o(e,t),t},w.allKeys=function(e){if(!w.isObject(e))return[];var t=[];for(var n in e)t.push(n);return R&&o(e,t),t},w.values=function(e){for(var t=w.keys(e),n=t.length,r=Array(n),i=0;n>i;i++)r[i]=e[t[i]];return r},w.mapObject=function(e,t,n){t=k(t,n);for(var r,i=w.keys(e),o=i.length,a={},s=0;o>s;s++)r=i[s],a[r]=t(e[r],r,e);return a},w.pairs=function(e){for(var t=w.keys(e),n=t.length,r=Array(n),i=0;n>i;i++)r[i]=[t[i],e[t[i]]];return r},w.invert=function(e){for(var t={},n=w.keys(e),r=0,i=n.length;i>r;r++)t[e[n[r]]]=n[r];return t},w.functions=w.methods=function(e){var t=[];for(var n in e)w.isFunction(e[n])&&t.push(n);return t.sort()},w.extend=S(w.allKeys),w.extendOwn=w.assign=S(w.keys),w.findKey=function(e,t,n){t=k(t,n);for(var r,i=w.keys(e),o=0,a=i.length;a>o;o++)if(r=i[o],t(e[r],r,e))return r},w.pick=function(e,t,n){var r,i,o={},a=e;if(null==a)return o;w.isFunction(t)?(i=w.allKeys(a),r=x(t,n)):(i=M(arguments,!1,!1,1),r=function(e,t,n){return t in n},a=Object(a));for(var s=0,l=i.length;l>s;s++){var u=i[s],c=a[u];r(c,u,a)&&(o[u]=c)}return o},w.omit=function(e,t,n){if(w.isFunction(t))t=w.negate(t);else{var r=w.map(M(arguments,!1,!1,1),String);t=function(e,t){return!w.contains(r,t)}}return w.pick(e,t,n)},w.defaults=S(w.allKeys,!0),w.create=function(e,t){var n=z(e);return t&&w.extendOwn(n,t),n},w.clone=function(e){return w.isObject(e)?w.isArray(e)?e.slice():w.extend({},e):e},w.tap=function(e,t){return t(e),e},w.isMatch=function(e,t){var n=w.keys(t),r=n.length;if(null==e)return!r;for(var i=Object(e),o=0;r>o;o++){var a=n[o];if(t[a]!==i[a]||!(a in i))return!1}return!0};var O=function(e,t,n,r){if(e===t)return 0!==e||1/e===1/t;if(null==e||null==t)return e===t;e instanceof w&&(e=e._wrapped),t instanceof w&&(t=t._wrapped);var i=h.call(e);if(i!==h.call(t))return!1;switch(i){case"[object RegExp]":case"[object String]":return""+e==""+t;case"[object Number]":return+e!==+e?+t!==+t:0===+e?1/+e===1/t:+e===+t;case"[object Date]":case"[object Boolean]":return+e===+t}var o="[object Array]"===i;if(!o){if("object"!=typeof e||"object"!=typeof t)return!1;var a=e.constructor,s=t.constructor;if(a!==s&&!(w.isFunction(a)&&a instanceof a&&w.isFunction(s)&&s instanceof s)&&"constructor"in e&&"constructor"in t)return!1}n=n||[],r=r||[];for(var l=n.length;l--;)if(n[l]===e)return r[l]===t;if(n.push(e),r.push(t),o){if(l=e.length,l!==t.length)return!1;for(;l--;)if(!O(e[l],t[l],n,r))return!1}else{var u,c=w.keys(e);if(l=c.length,w.keys(t).length!==l)return!1;for(;l--;)if(u=c[l],!w.has(t,u)||!O(e[u],t[u],n,r))return!1}return n.pop(),r.pop(),!0};w.isEqual=function(e,t){return O(e,t)},w.isEmpty=function(e){return null==e?!0:F(e)&&(w.isArray(e)||w.isString(e)||w.isArguments(e))?0===e.length:0===w.keys(e).length},w.isElement=function(e){return!(!e||1!==e.nodeType)},w.isArray=m||function(e){return"[object Array]"===h.call(e)},w.isObject=function(e){var t=typeof e;return"function"===t||"object"===t&&!!e},w.each(["Arguments","Function","String","Number","Date","RegExp","Error"],function(e){w["is"+e]=function(t){return h.call(t)==="[object "+e+"]"}}),w.isArguments(arguments)||(w.isArguments=function(e){return w.has(e,"callee")}),"function"!=typeof/./&&"object"!=typeof Int8Array&&(w.isFunction=function(e){return"function"==typeof e||!1}),w.isFinite=function(e){return isFinite(e)&&!isNaN(parseFloat(e))},w.isNaN=function(e){return w.isNumber(e)&&e!==+e},w.isBoolean=function(e){return e===!0||e===!1||"[object Boolean]"===h.call(e)},w.isNull=function(e){return null===e},w.isUndefined=function(e){return void 0===e},w.has=function(e,t){return null!=e&&p.call(e,t)},w.noConflict=function(){return a._=s,this},w.identity=function(e){return e},w.constant=function(e){return function(){return e}},w.noop=function(){},w.property=_,w.propertyOf=function(e){return null==e?function(){}:function(t){return e[t]}},w.matcher=w.matches=function(e){return e=w.extendOwn({},e),function(t){return w.isMatch(t,e)}},w.times=function(e,t,n){var r=Array(Math.max(0,e));t=x(t,n,1);for(var i=0;e>i;i++)r[i]=t(i);return r},w.random=function(e,t){return null==t&&(t=e,e=0),e+Math.floor(Math.random()*(t-e+1))},w.now=Date.now||function(){return(new Date).getTime()};var D={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#x27;","`":"&#x60;"},E=w.invert(D),C=function(e){var t=function(t){return e[t]},n="(?:"+w.keys(e).join("|")+")",r=RegExp(n),i=RegExp(n,"g");return function(e){return e=null==e?"":""+e,r.test(e)?e.replace(i,t):e}};w.escape=C(D),w.unescape=C(E),w.result=function(e,t,n){var r=null==e?void 0:e[t];return void 0===r&&(r=n),w.isFunction(r)?r.call(e):r};var I=0;w.uniqueId=function(e){var t=++I+"";return e?e+t:t},w.templateSettings={evaluate:/<%([\s\S]+?)%>/g,interpolate:/<%=([\s\S]+?)%>/g,escape:/<%-([\s\S]+?)%>/g};var N=/(.)^/,P={"'":"'","\\":"\\","\r":"r","\n":"n","\u2028":"u2028","\u2029":"u2029"},Z=/\\|'|\r|\n|\u2028|\u2029/g,X=function(e){return"\\"+P[e]};w.template=function(e,t,n){!t&&n&&(t=n),t=w.defaults({},t,w.templateSettings);var r=RegExp([(t.escape||N).source,(t.interpolate||N).source,(t.evaluate||N).source].join("|")+"|$","g"),i=0,o="__p+='";e.replace(r,function(t,n,r,a,s){return o+=e.slice(i,s).replace(Z,X),i=s+t.length,n?o+="'+\n((__t=("+n+"))==null?'':_.escape(__t))+\n'":r?o+="'+\n((__t=("+r+"))==null?'':__t)+\n'":a&&(o+="';\n"+a+"\n__p+='"),t}),o+="';\n",t.variable||(o="with(obj||{}){\n"+o+"}\n"),o="var __t,__p='',__j=Array.prototype.join,print=function(){__p+=__j.call(arguments,'');};\n"+o+"return __p;\n";try{var a=new Function(t.variable||"obj","_",o)}catch(s){throw s.source=o,s}var l=function(e){return a.call(this,e,w)},u=t.variable||"obj";return l.source="function("+u+"){\n"+o+"}",l},w.chain=function(e){var t=w(e);return t._chain=!0,t};var V=function(e,t){return e._chain?w(t).chain():t};w.mixin=function(e){w.each(w.functions(e),function(t){var n=w[t]=e[t];w.prototype[t]=function(){var e=[this._wrapped];return f.apply(e,arguments),V(this,n.apply(w,e))}})},w.mixin(w),w.each(["pop","push","reverse","shift","sort","splice","unshift"],function(e){var t=l[e];w.prototype[e]=function(){var n=this._wrapped;return t.apply(n,arguments),"shift"!==e&&"splice"!==e||0!==n.length||delete n[0],V(this,n)}}),w.each(["concat","join","slice"],function(e){var t=l[e];w.prototype[e]=function(){return V(this,t.apply(this._wrapped,arguments))}}),w.prototype.value=function(){return this._wrapped},w.prototype.valueOf=w.prototype.toJSON=w.prototype.value,w.prototype.toString=function(){return""+this._wrapped},"function"==typeof define&&define.amd&&define("underscore",[],function(){return w})}).call(this)},{}],43:[function(e,t){t.exports="function"==typeof Object.create?function(e,t){e.super_=t,e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}})}:function(e,t){e.super_=t;var n=function(){};n.prototype=t.prototype,e.prototype=new n,e.prototype.constructor=e}},{}],44:[function(e,t){t.exports=function(e){return e&&"object"==typeof e&&"function"==typeof e.copy&&"function"==typeof e.fill&&"function"==typeof e.readUInt8}},{}],45:[function(e,t,n){(function(t,r){function i(e,t){var r={seen:[],stylize:a};return arguments.length>=3&&(r.depth=arguments[2]),arguments.length>=4&&(r.colors=arguments[3]),m(t)?r.showHidden=t:t&&n._extend(r,t),x(r.showHidden)&&(r.showHidden=!1),x(r.depth)&&(r.depth=2),x(r.colors)&&(r.colors=!1),x(r.customInspect)&&(r.customInspect=!0),r.colors&&(r.stylize=o),l(r,e,r.depth)}function o(e,t){var n=i.styles[t];return n?"["+i.colors[n][0]+"m"+e+"["+i.colors[n][1]+"m":e}function a(e){return e}function s(e){var t={};return e.forEach(function(e){t[e]=!0}),t}function l(e,t,r){if(e.customInspect&&t&&j(t.inspect)&&t.inspect!==n.inspect&&(!t.constructor||t.constructor.prototype!==t)){var i=t.inspect(r,e);return b(i)||(i=l(e,i,r)),i}var o=u(e,t);if(o)return o;var a=Object.keys(t),m=s(a);if(e.showHidden&&(a=Object.getOwnPropertyNames(t)),_(t)&&(a.indexOf("message")>=0||a.indexOf("description")>=0))return c(t);if(0===a.length){if(j(t)){var g=t.name?": "+t.name:"";return e.stylize("[Function"+g+"]","special")}if(k(t))return e.stylize(RegExp.prototype.toString.call(t),"regexp");if(z(t))return e.stylize(Date.prototype.toString.call(t),"date");if(_(t))return c(t)}var v="",y=!1,w=["{","}"];if(p(t)&&(y=!0,w=["[","]"]),j(t)){var x=t.name?": "+t.name:"";v=" [Function"+x+"]"}if(k(t)&&(v=" "+RegExp.prototype.toString.call(t)),z(t)&&(v=" "+Date.prototype.toUTCString.call(t)),_(t)&&(v=" "+c(t)),0===a.length&&(!y||0==t.length))return w[0]+v+w[1];if(0>r)return k(t)?e.stylize(RegExp.prototype.toString.call(t),"regexp"):e.stylize("[Object]","special");e.seen.push(t);var S;return S=y?f(e,t,r,m,a):a.map(function(n){return d(e,t,r,m,n,y)}),e.seen.pop(),h(S,v,w)}function u(e,t){if(x(t))return e.stylize("undefined","undefined");if(b(t)){var n="'"+JSON.stringify(t).replace(/^"|"$/g,"").replace(/'/g,"\\'").replace(/\\"/g,'"')+"'";return e.stylize(n,"string")}return y(t)?e.stylize(""+t,"number"):m(t)?e.stylize(""+t,"boolean"):g(t)?e.stylize("null","null"):void 0}function c(e){return"["+Error.prototype.toString.call(e)+"]"}function f(e,t,n,r,i){for(var o=[],a=0,s=t.length;s>a;++a)o.push(q(t,String(a))?d(e,t,n,r,String(a),!0):"");return i.forEach(function(i){i.match(/^\d+$/)||o.push(d(e,t,n,r,i,!0))}),o}function d(e,t,n,r,i,o){var a,s,u;if(u=Object.getOwnPropertyDescriptor(t,i)||{value:t[i]},u.get?s=u.set?e.stylize("[Getter/Setter]","special"):e.stylize("[Getter]","special"):u.set&&(s=e.stylize("[Setter]","special")),q(r,i)||(a="["+i+"]"),s||(e.seen.indexOf(u.value)<0?(s=g(n)?l(e,u.value,null):l(e,u.value,n-1),s.indexOf("\n")>-1&&(s=o?s.split("\n").map(function(e){return"  "+e}).join("\n").substr(2):"\n"+s.split("\n").map(function(e){return"   "+e}).join("\n"))):s=e.stylize("[Circular]","special")),x(a)){if(o&&i.match(/^\d+$/))return s;a=JSON.stringify(""+i),a.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)?(a=a.substr(1,a.length-2),a=e.stylize(a,"name")):(a=a.replace(/'/g,"\\'").replace(/\\"/g,'"').replace(/(^"|"$)/g,"'"),a=e.stylize(a,"string"))}return a+": "+s}function h(e,t,n){var r=0,i=e.reduce(function(e,t){return r++,t.indexOf("\n")>=0&&r++,e+t.replace(/\u001b\[\d\d?m/g,"").length+1},0);return i>60?n[0]+(""===t?"":t+"\n ")+" "+e.join(",\n  ")+" "+n[1]:n[0]+t+" "+e.join(", ")+" "+n[1]}function p(e){return Array.isArray(e)}function m(e){return"boolean"==typeof e}function g(e){return null===e}function v(e){return null==e}function y(e){return"number"==typeof e}function b(e){return"string"==typeof e}function w(e){return"symbol"==typeof e}function x(e){return void 0===e}function k(e){return S(e)&&"[object RegExp]"===F(e)}function S(e){return"object"==typeof e&&null!==e}function z(e){return S(e)&&"[object Date]"===F(e)}function _(e){return S(e)&&("[object Error]"===F(e)||e instanceof Error)}function j(e){return"function"==typeof e}function A(e){return null===e||"boolean"==typeof e||"number"==typeof e||"string"==typeof e||"symbol"==typeof e||"undefined"==typeof e}function F(e){return Object.prototype.toString.call(e)}function T(e){return 10>e?"0"+e.toString(10):e.toString(10)}function M(){var e=new Date,t=[T(e.getHours()),T(e.getMinutes()),T(e.getSeconds())].join(":");return[e.getDate(),D[e.getMonth()],t].join(" ")}function q(e,t){return Object.prototype.hasOwnProperty.call(e,t)}var R=/%[sdj%]/g;n.format=function(e){if(!b(e)){for(var t=[],n=0;n<arguments.length;n++)t.push(i(arguments[n]));return t.join(" ")}for(var n=1,r=arguments,o=r.length,a=String(e).replace(R,function(e){if("%%"===e)return"%";if(n>=o)return e;switch(e){case"%s":return String(r[n++]);case"%d":return Number(r[n++]);case"%j":try{return JSON.stringify(r[n++])}catch(t){return"[Circular]"}default:return e}}),s=r[n];o>n;s=r[++n])a+=g(s)||!S(s)?" "+s:" "+i(s);return a},n.deprecate=function(e,i){function o(){if(!a){if(t.throwDeprecation)throw new Error(i);t.traceDeprecation?console.trace(i):console.error(i),a=!0}return e.apply(this,arguments)}if(x(r.process))return function(){return n.deprecate(e,i).apply(this,arguments)};if(t.noDeprecation===!0)return e;var a=!1;return o};var L,O={};n.debuglog=function(e){if(x(L)&&(L=t.env.NODE_DEBUG||""),e=e.toUpperCase(),!O[e])if(new RegExp("\\b"+e+"\\b","i").test(L)){var r=t.pid;O[e]=function(){var t=n.format.apply(n,arguments);console.error("%s %d: %s",e,r,t)}}else O[e]=function(){};return O[e]},n.inspect=i,i.colors={bold:[1,22],italic:[3,23],underline:[4,24],inverse:[7,27],white:[37,39],grey:[90,39],black:[30,39],blue:[34,39],cyan:[36,39],green:[32,39],magenta:[35,39],red:[31,39],yellow:[33,39]},i.styles={special:"cyan",number:"yellow","boolean":"yellow",undefined:"grey","null":"bold",string:"green",date:"magenta",regexp:"red"},n.isArray=p,n.isBoolean=m,n.isNull=g,n.isNullOrUndefined=v,n.isNumber=y,n.isString=b,n.isSymbol=w,n.isUndefined=x,n.isRegExp=k,n.isObject=S,n.isDate=z,n.isError=_,n.isFunction=j,n.isPrimitive=A,n.isBuffer=e("./support/isBuffer");var D=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];n.log=function(){console.log("%s - %s",M(),n.format.apply(n,arguments))},n.inherits=e("inherits"),n._extend=function(e,t){if(!t||!S(t))return e;for(var n=Object.keys(t),r=n.length;r--;)e[n[r]]=t[n[r]];return e}}).call(this,e("_process"),"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"./support/isBuffer":44,_process:41,inherits:43}],46:[function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(n,"__esModule",{value:!0});var i,o=e("carto"),a=r(o),s={marker:"points",polygon:"polygons",line:"lines"},l=new a.default.RendererJS,u=function(e){return s[e]},c=function(e,t){return e+"-"+t},f=function(e){return"function () {\n    var _value = null;\n    "+e+"\n    return _value;\n  }"},d=function(e){return e.replace(/ctx.zoom/g,"$zoom").replace(/data\[/g,"feature[")},h=function(e,t,n){var r=n[c(e,t)];if(!r)return"";for(var i=r.js,o="",a=0;a<i.length;a++)o+=d(i[a]);return f(o)},p=function(e){for(var t={},n=0;n<e.symbolizers.length;n++){var r=e.symbolizers[n];t[u(r)]={color:h(r,"fill",e),size:h(r,"size",e),width:h(r,"width",e)}}return t},m=function(e){for(var t=l.render(e).getLayers(),n={},r=0;r<t.length;r++){var i=t[r].shader;n=p(i)}return n};n.default=i={extractFeatures:m}},{carto:4}],47:[function(e,t){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}var r=e("./carto"),i=n(r);t.exports={carto2Draw:i.default.extractFeatures}},{"./carto":46}]},{},[47])(47)});
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],2:[function(_dereq_,module,exports){
// Generated by CoffeeScript 1.10.0
var Dumper, Inline, Utils;

Utils = _dereq_('./Utils');

Inline = _dereq_('./Inline');

Dumper = (function() {
  function Dumper() {}

  Dumper.indentation = 4;

  Dumper.prototype.dump = function(input, inline, indent, exceptionOnInvalidType, objectEncoder) {
    var i, key, len, output, prefix, value, willBeInlined;
    if (inline == null) {
      inline = 0;
    }
    if (indent == null) {
      indent = 0;
    }
    if (exceptionOnInvalidType == null) {
      exceptionOnInvalidType = false;
    }
    if (objectEncoder == null) {
      objectEncoder = null;
    }
    output = '';
    prefix = (indent ? Utils.strRepeat(' ', indent) : '');
    if (inline <= 0 || typeof input !== 'object' || input instanceof Date || Utils.isEmpty(input)) {
      output += prefix + Inline.dump(input, exceptionOnInvalidType, objectEncoder);
    } else {
      if (input instanceof Array) {
        for (i = 0, len = input.length; i < len; i++) {
          value = input[i];
          willBeInlined = inline - 1 <= 0 || typeof value !== 'object' || Utils.isEmpty(value);
          output += prefix + '-' + (willBeInlined ? ' ' : "\n") + this.dump(value, inline - 1, (willBeInlined ? 0 : indent + this.indentation), exceptionOnInvalidType, objectEncoder) + (willBeInlined ? "\n" : '');
        }
      } else {
        for (key in input) {
          value = input[key];
          willBeInlined = inline - 1 <= 0 || typeof value !== 'object' || Utils.isEmpty(value);
          output += prefix + Inline.dump(key, exceptionOnInvalidType, objectEncoder) + ':' + (willBeInlined ? ' ' : "\n") + this.dump(value, inline - 1, (willBeInlined ? 0 : indent + this.indentation), exceptionOnInvalidType, objectEncoder) + (willBeInlined ? "\n" : '');
        }
      }
    }
    return output;
  };

  return Dumper;

})();

module.exports = Dumper;

},{"./Inline":6,"./Utils":10}],3:[function(_dereq_,module,exports){
// Generated by CoffeeScript 1.10.0
var Escaper, Pattern;

Pattern = _dereq_('./Pattern');

Escaper = (function() {
  var ch;

  function Escaper() {}

  Escaper.LIST_ESCAPEES = ['\\', '\\\\', '\\"', '"', "\x00", "\x01", "\x02", "\x03", "\x04", "\x05", "\x06", "\x07", "\x08", "\x09", "\x0a", "\x0b", "\x0c", "\x0d", "\x0e", "\x0f", "\x10", "\x11", "\x12", "\x13", "\x14", "\x15", "\x16", "\x17", "\x18", "\x19", "\x1a", "\x1b", "\x1c", "\x1d", "\x1e", "\x1f", (ch = String.fromCharCode)(0x0085), ch(0x00A0), ch(0x2028), ch(0x2029)];

  Escaper.LIST_ESCAPED = ['\\\\', '\\"', '\\"', '\\"', "\\0", "\\x01", "\\x02", "\\x03", "\\x04", "\\x05", "\\x06", "\\a", "\\b", "\\t", "\\n", "\\v", "\\f", "\\r", "\\x0e", "\\x0f", "\\x10", "\\x11", "\\x12", "\\x13", "\\x14", "\\x15", "\\x16", "\\x17", "\\x18", "\\x19", "\\x1a", "\\e", "\\x1c", "\\x1d", "\\x1e", "\\x1f", "\\N", "\\_", "\\L", "\\P"];

  Escaper.MAPPING_ESCAPEES_TO_ESCAPED = (function() {
    var i, j, mapping, ref;
    mapping = {};
    for (i = j = 0, ref = Escaper.LIST_ESCAPEES.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
      mapping[Escaper.LIST_ESCAPEES[i]] = Escaper.LIST_ESCAPED[i];
    }
    return mapping;
  })();

  Escaper.PATTERN_CHARACTERS_TO_ESCAPE = new Pattern('[\\x00-\\x1f]|\xc2\x85|\xc2\xa0|\xe2\x80\xa8|\xe2\x80\xa9');

  Escaper.PATTERN_MAPPING_ESCAPEES = new Pattern(Escaper.LIST_ESCAPEES.join('|').split('\\').join('\\\\'));

  Escaper.PATTERN_SINGLE_QUOTING = new Pattern('[\\s\'":{}[\\],&*#?]|^[-?|<>=!%@`]');

  Escaper.requiresDoubleQuoting = function(value) {
    return this.PATTERN_CHARACTERS_TO_ESCAPE.test(value);
  };

  Escaper.escapeWithDoubleQuotes = function(value) {
    var result;
    result = this.PATTERN_MAPPING_ESCAPEES.replace(value, (function(_this) {
      return function(str) {
        return _this.MAPPING_ESCAPEES_TO_ESCAPED[str];
      };
    })(this));
    return '"' + result + '"';
  };

  Escaper.requiresSingleQuoting = function(value) {
    return this.PATTERN_SINGLE_QUOTING.test(value);
  };

  Escaper.escapeWithSingleQuotes = function(value) {
    return "'" + value.replace(/'/g, "''") + "'";
  };

  return Escaper;

})();

module.exports = Escaper;

},{"./Pattern":8}],4:[function(_dereq_,module,exports){
// Generated by CoffeeScript 1.10.0
var DumpException,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

DumpException = (function(superClass) {
  extend(DumpException, superClass);

  function DumpException(message, parsedLine, snippet) {
    this.message = message;
    this.parsedLine = parsedLine;
    this.snippet = snippet;
  }

  DumpException.prototype.toString = function() {
    if ((this.parsedLine != null) && (this.snippet != null)) {
      return '<DumpException> ' + this.message + ' (line ' + this.parsedLine + ': \'' + this.snippet + '\')';
    } else {
      return '<DumpException> ' + this.message;
    }
  };

  return DumpException;

})(Error);

module.exports = DumpException;

},{}],5:[function(_dereq_,module,exports){
// Generated by CoffeeScript 1.10.0
var ParseException,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ParseException = (function(superClass) {
  extend(ParseException, superClass);

  function ParseException(message, parsedLine, snippet) {
    this.message = message;
    this.parsedLine = parsedLine;
    this.snippet = snippet;
  }

  ParseException.prototype.toString = function() {
    if ((this.parsedLine != null) && (this.snippet != null)) {
      return '<ParseException> ' + this.message + ' (line ' + this.parsedLine + ': \'' + this.snippet + '\')';
    } else {
      return '<ParseException> ' + this.message;
    }
  };

  return ParseException;

})(Error);

module.exports = ParseException;

},{}],6:[function(_dereq_,module,exports){
// Generated by CoffeeScript 1.10.0
var DumpException, Escaper, Inline, ParseException, Pattern, Unescaper, Utils,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

Pattern = _dereq_('./Pattern');

Unescaper = _dereq_('./Unescaper');

Escaper = _dereq_('./Escaper');

Utils = _dereq_('./Utils');

ParseException = _dereq_('./Exception/ParseException');

DumpException = _dereq_('./Exception/DumpException');

Inline = (function() {
  function Inline() {}

  Inline.REGEX_QUOTED_STRING = '(?:"(?:[^"\\\\]*(?:\\\\.[^"\\\\]*)*)"|\'(?:[^\']*(?:\'\'[^\']*)*)\')';

  Inline.PATTERN_TRAILING_COMMENTS = new Pattern('^\\s*#.*$');

  Inline.PATTERN_QUOTED_SCALAR = new Pattern('^' + Inline.REGEX_QUOTED_STRING);

  Inline.PATTERN_THOUSAND_NUMERIC_SCALAR = new Pattern('^(-|\\+)?[0-9,]+(\\.[0-9]+)?$');

  Inline.PATTERN_SCALAR_BY_DELIMITERS = {};

  Inline.settings = {};

  Inline.configure = function(exceptionOnInvalidType, objectDecoder) {
    if (exceptionOnInvalidType == null) {
      exceptionOnInvalidType = null;
    }
    if (objectDecoder == null) {
      objectDecoder = null;
    }
    this.settings.exceptionOnInvalidType = exceptionOnInvalidType;
    this.settings.objectDecoder = objectDecoder;
  };

  Inline.parse = function(value, exceptionOnInvalidType, objectDecoder) {
    var context, result;
    if (exceptionOnInvalidType == null) {
      exceptionOnInvalidType = false;
    }
    if (objectDecoder == null) {
      objectDecoder = null;
    }
    this.settings.exceptionOnInvalidType = exceptionOnInvalidType;
    this.settings.objectDecoder = objectDecoder;
    if (value == null) {
      return '';
    }
    value = Utils.trim(value);
    if (0 === value.length) {
      return '';
    }
    context = {
      exceptionOnInvalidType: exceptionOnInvalidType,
      objectDecoder: objectDecoder,
      i: 0
    };
    switch (value.charAt(0)) {
      case '[':
        result = this.parseSequence(value, context);
        ++context.i;
        break;
      case '{':
        result = this.parseMapping(value, context);
        ++context.i;
        break;
      default:
        result = this.parseScalar(value, null, ['"', "'"], context);
    }
    if (this.PATTERN_TRAILING_COMMENTS.replace(value.slice(context.i), '') !== '') {
      throw new ParseException('Unexpected characters near "' + value.slice(context.i) + '".');
    }
    return result;
  };

  Inline.dump = function(value, exceptionOnInvalidType, objectEncoder) {
    var ref, result, type;
    if (exceptionOnInvalidType == null) {
      exceptionOnInvalidType = false;
    }
    if (objectEncoder == null) {
      objectEncoder = null;
    }
    if (value == null) {
      return 'null';
    }
    type = typeof value;
    if (type === 'object') {
      if (value instanceof Date) {
        return value.toISOString();
      } else if (objectEncoder != null) {
        result = objectEncoder(value);
        if (typeof result === 'string' || (result != null)) {
          return result;
        }
      }
      return this.dumpObject(value);
    }
    if (type === 'boolean') {
      return (value ? 'true' : 'false');
    }
    if (Utils.isDigits(value)) {
      return (type === 'string' ? "'" + value + "'" : String(parseInt(value)));
    }
    if (Utils.isNumeric(value)) {
      return (type === 'string' ? "'" + value + "'" : String(parseFloat(value)));
    }
    if (type === 'number') {
      return (value === Infinity ? '.Inf' : (value === -Infinity ? '-.Inf' : (isNaN(value) ? '.NaN' : value)));
    }
    if (Escaper.requiresDoubleQuoting(value)) {
      return Escaper.escapeWithDoubleQuotes(value);
    }
    if (Escaper.requiresSingleQuoting(value)) {
      return Escaper.escapeWithSingleQuotes(value);
    }
    if ('' === value) {
      return '""';
    }
    if (Utils.PATTERN_DATE.test(value)) {
      return "'" + value + "'";
    }
    if ((ref = value.toLowerCase()) === 'null' || ref === '~' || ref === 'true' || ref === 'false') {
      return "'" + value + "'";
    }
    return value;
  };

  Inline.dumpObject = function(value, exceptionOnInvalidType, objectSupport) {
    var j, key, len1, output, val;
    if (objectSupport == null) {
      objectSupport = null;
    }
    if (value instanceof Array) {
      output = [];
      for (j = 0, len1 = value.length; j < len1; j++) {
        val = value[j];
        output.push(this.dump(val));
      }
      return '[' + output.join(', ') + ']';
    } else {
      output = [];
      for (key in value) {
        val = value[key];
        output.push(this.dump(key) + ': ' + this.dump(val));
      }
      return '{' + output.join(', ') + '}';
    }
  };

  Inline.parseScalar = function(scalar, delimiters, stringDelimiters, context, evaluate) {
    var i, joinedDelimiters, match, output, pattern, ref, ref1, strpos, tmp;
    if (delimiters == null) {
      delimiters = null;
    }
    if (stringDelimiters == null) {
      stringDelimiters = ['"', "'"];
    }
    if (context == null) {
      context = null;
    }
    if (evaluate == null) {
      evaluate = true;
    }
    if (context == null) {
      context = {
        exceptionOnInvalidType: this.settings.exceptionOnInvalidType,
        objectDecoder: this.settings.objectDecoder,
        i: 0
      };
    }
    i = context.i;
    if (ref = scalar.charAt(i), indexOf.call(stringDelimiters, ref) >= 0) {
      output = this.parseQuotedScalar(scalar, context);
      i = context.i;
      if (delimiters != null) {
        tmp = Utils.ltrim(scalar.slice(i), ' ');
        if (!(ref1 = tmp.charAt(0), indexOf.call(delimiters, ref1) >= 0)) {
          throw new ParseException('Unexpected characters (' + scalar.slice(i) + ').');
        }
      }
    } else {
      if (!delimiters) {
        output = scalar.slice(i);
        i += output.length;
        strpos = output.indexOf(' #');
        if (strpos !== -1) {
          output = Utils.rtrim(output.slice(0, strpos));
        }
      } else {
        joinedDelimiters = delimiters.join('|');
        pattern = this.PATTERN_SCALAR_BY_DELIMITERS[joinedDelimiters];
        if (pattern == null) {
          pattern = new Pattern('^(.+?)(' + joinedDelimiters + ')');
          this.PATTERN_SCALAR_BY_DELIMITERS[joinedDelimiters] = pattern;
        }
        if (match = pattern.exec(scalar.slice(i))) {
          output = match[1];
          i += output.length;
        } else {
          throw new ParseException('Malformed inline YAML string (' + scalar + ').');
        }
      }
      if (evaluate) {
        output = this.evaluateScalar(output, context);
      }
    }
    context.i = i;
    return output;
  };

  Inline.parseQuotedScalar = function(scalar, context) {
    var i, match, output;
    i = context.i;
    if (!(match = this.PATTERN_QUOTED_SCALAR.exec(scalar.slice(i)))) {
      throw new ParseException('Malformed inline YAML string (' + scalar.slice(i) + ').');
    }
    output = match[0].substr(1, match[0].length - 2);
    if ('"' === scalar.charAt(i)) {
      output = Unescaper.unescapeDoubleQuotedString(output);
    } else {
      output = Unescaper.unescapeSingleQuotedString(output);
    }
    i += match[0].length;
    context.i = i;
    return output;
  };

  Inline.parseSequence = function(sequence, context) {
    var e, error, i, isQuoted, len, output, ref, value;
    output = [];
    len = sequence.length;
    i = context.i;
    i += 1;
    while (i < len) {
      context.i = i;
      switch (sequence.charAt(i)) {
        case '[':
          output.push(this.parseSequence(sequence, context));
          i = context.i;
          break;
        case '{':
          output.push(this.parseMapping(sequence, context));
          i = context.i;
          break;
        case ']':
          return output;
        case ',':
        case ' ':
        case "\n":
          break;
        default:
          isQuoted = ((ref = sequence.charAt(i)) === '"' || ref === "'");
          value = this.parseScalar(sequence, [',', ']'], ['"', "'"], context);
          i = context.i;
          if (!isQuoted && typeof value === 'string' && (value.indexOf(': ') !== -1 || value.indexOf(":\n") !== -1)) {
            try {
              value = this.parseMapping('{' + value + '}');
            } catch (error) {
              e = error;
            }
          }
          output.push(value);
          --i;
      }
      ++i;
    }
    throw new ParseException('Malformed inline YAML string ' + sequence);
  };

  Inline.parseMapping = function(mapping, context) {
    var done, i, key, len, output, shouldContinueWhileLoop, value;
    output = {};
    len = mapping.length;
    i = context.i;
    i += 1;
    shouldContinueWhileLoop = false;
    while (i < len) {
      context.i = i;
      switch (mapping.charAt(i)) {
        case ' ':
        case ',':
        case "\n":
          ++i;
          context.i = i;
          shouldContinueWhileLoop = true;
          break;
        case '}':
          return output;
      }
      if (shouldContinueWhileLoop) {
        shouldContinueWhileLoop = false;
        continue;
      }
      key = this.parseScalar(mapping, [':', ' ', "\n"], ['"', "'"], context, false);
      i = context.i;
      done = false;
      while (i < len) {
        context.i = i;
        switch (mapping.charAt(i)) {
          case '[':
            value = this.parseSequence(mapping, context);
            i = context.i;
            if (output[key] === void 0) {
              output[key] = value;
            }
            done = true;
            break;
          case '{':
            value = this.parseMapping(mapping, context);
            i = context.i;
            if (output[key] === void 0) {
              output[key] = value;
            }
            done = true;
            break;
          case ':':
          case ' ':
          case "\n":
            break;
          default:
            value = this.parseScalar(mapping, [',', '}'], ['"', "'"], context);
            i = context.i;
            if (output[key] === void 0) {
              output[key] = value;
            }
            done = true;
            --i;
        }
        ++i;
        if (done) {
          break;
        }
      }
    }
    throw new ParseException('Malformed inline YAML string ' + mapping);
  };

  Inline.evaluateScalar = function(scalar, context) {
    var cast, date, exceptionOnInvalidType, firstChar, firstSpace, firstWord, objectDecoder, raw, scalarLower, subValue, trimmedScalar;
    scalar = Utils.trim(scalar);
    scalarLower = scalar.toLowerCase();
    switch (scalarLower) {
      case 'null':
      case '':
      case '~':
        return null;
      case 'true':
        return true;
      case 'false':
        return false;
      case '.inf':
        return Infinity;
      case '.nan':
        return NaN;
      case '-.inf':
        return Infinity;
      default:
        firstChar = scalarLower.charAt(0);
        switch (firstChar) {
          case '!':
            firstSpace = scalar.indexOf(' ');
            if (firstSpace === -1) {
              firstWord = scalarLower;
            } else {
              firstWord = scalarLower.slice(0, firstSpace);
            }
            switch (firstWord) {
              case '!':
                if (firstSpace !== -1) {
                  return parseInt(this.parseScalar(scalar.slice(2)));
                }
                return null;
              case '!str':
                return Utils.ltrim(scalar.slice(4));
              case '!!str':
                return Utils.ltrim(scalar.slice(5));
              case '!!int':
                return parseInt(this.parseScalar(scalar.slice(5)));
              case '!!bool':
                return Utils.parseBoolean(this.parseScalar(scalar.slice(6)), false);
              case '!!float':
                return parseFloat(this.parseScalar(scalar.slice(7)));
              case '!!timestamp':
                return Utils.stringToDate(Utils.ltrim(scalar.slice(11)));
              default:
                if (context == null) {
                  context = {
                    exceptionOnInvalidType: this.settings.exceptionOnInvalidType,
                    objectDecoder: this.settings.objectDecoder,
                    i: 0
                  };
                }
                objectDecoder = context.objectDecoder, exceptionOnInvalidType = context.exceptionOnInvalidType;
                if (objectDecoder) {
                  trimmedScalar = Utils.rtrim(scalar);
                  firstSpace = trimmedScalar.indexOf(' ');
                  if (firstSpace === -1) {
                    return objectDecoder(trimmedScalar, null);
                  } else {
                    subValue = Utils.ltrim(trimmedScalar.slice(firstSpace + 1));
                    if (!(subValue.length > 0)) {
                      subValue = null;
                    }
                    return objectDecoder(trimmedScalar.slice(0, firstSpace), subValue);
                  }
                }
                if (exceptionOnInvalidType) {
                  throw new ParseException('Custom object support when parsing a YAML file has been disabled.');
                }
                return null;
            }
            break;
          case '0':
            if ('0x' === scalar.slice(0, 2)) {
              return Utils.hexDec(scalar);
            } else if (Utils.isDigits(scalar)) {
              return Utils.octDec(scalar);
            } else if (Utils.isNumeric(scalar)) {
              return parseFloat(scalar);
            } else {
              return scalar;
            }
            break;
          case '+':
            if (Utils.isDigits(scalar)) {
              raw = scalar;
              cast = parseInt(raw);
              if (raw === String(cast)) {
                return cast;
              } else {
                return raw;
              }
            } else if (Utils.isNumeric(scalar)) {
              return parseFloat(scalar);
            } else if (this.PATTERN_THOUSAND_NUMERIC_SCALAR.test(scalar)) {
              return parseFloat(scalar.replace(',', ''));
            }
            return scalar;
          case '-':
            if (Utils.isDigits(scalar.slice(1))) {
              if ('0' === scalar.charAt(1)) {
                return -Utils.octDec(scalar.slice(1));
              } else {
                raw = scalar.slice(1);
                cast = parseInt(raw);
                if (raw === String(cast)) {
                  return -cast;
                } else {
                  return -raw;
                }
              }
            } else if (Utils.isNumeric(scalar)) {
              return parseFloat(scalar);
            } else if (this.PATTERN_THOUSAND_NUMERIC_SCALAR.test(scalar)) {
              return parseFloat(scalar.replace(',', ''));
            }
            return scalar;
          default:
            if (date = Utils.stringToDate(scalar)) {
              return date;
            } else if (Utils.isNumeric(scalar)) {
              return parseFloat(scalar);
            } else if (this.PATTERN_THOUSAND_NUMERIC_SCALAR.test(scalar)) {
              return parseFloat(scalar.replace(',', ''));
            }
            return scalar;
        }
    }
  };

  return Inline;

})();

module.exports = Inline;

},{"./Escaper":3,"./Exception/DumpException":4,"./Exception/ParseException":5,"./Pattern":8,"./Unescaper":9,"./Utils":10}],7:[function(_dereq_,module,exports){
// Generated by CoffeeScript 1.10.0
var Inline, ParseException, Parser, Pattern, Utils;

Inline = _dereq_('./Inline');

Pattern = _dereq_('./Pattern');

Utils = _dereq_('./Utils');

ParseException = _dereq_('./Exception/ParseException');

Parser = (function() {
  Parser.prototype.PATTERN_FOLDED_SCALAR_ALL = new Pattern('^(?:(?<type>![^\\|>]*)\\s+)?(?<separator>\\||>)(?<modifiers>\\+|\\-|\\d+|\\+\\d+|\\-\\d+|\\d+\\+|\\d+\\-)?(?<comments> +#.*)?$');

  Parser.prototype.PATTERN_FOLDED_SCALAR_END = new Pattern('(?<separator>\\||>)(?<modifiers>\\+|\\-|\\d+|\\+\\d+|\\-\\d+|\\d+\\+|\\d+\\-)?(?<comments> +#.*)?$');

  Parser.prototype.PATTERN_SEQUENCE_ITEM = new Pattern('^\\-((?<leadspaces>\\s+)(?<value>.+?))?\\s*$');

  Parser.prototype.PATTERN_ANCHOR_VALUE = new Pattern('^&(?<ref>[^ ]+) *(?<value>.*)');

  Parser.prototype.PATTERN_COMPACT_NOTATION = new Pattern('^(?<key>' + Inline.REGEX_QUOTED_STRING + '|[^ \'"\\{\\[].*?) *\\:(\\s+(?<value>.+?))?\\s*$');

  Parser.prototype.PATTERN_MAPPING_ITEM = new Pattern('^(?<key>' + Inline.REGEX_QUOTED_STRING + '|[^ \'"\\[\\{].*?) *\\:(\\s+(?<value>.+?))?\\s*$');

  Parser.prototype.PATTERN_DECIMAL = new Pattern('\\d+');

  Parser.prototype.PATTERN_INDENT_SPACES = new Pattern('^ +');

  Parser.prototype.PATTERN_TRAILING_LINES = new Pattern('(\n*)$');

  Parser.prototype.PATTERN_YAML_HEADER = new Pattern('^\\%YAML[: ][\\d\\.]+.*\n');

  Parser.prototype.PATTERN_LEADING_COMMENTS = new Pattern('^(\\#.*?\n)+');

  Parser.prototype.PATTERN_DOCUMENT_MARKER_START = new Pattern('^\\-\\-\\-.*?\n');

  Parser.prototype.PATTERN_DOCUMENT_MARKER_END = new Pattern('^\\.\\.\\.\\s*$');

  Parser.prototype.PATTERN_FOLDED_SCALAR_BY_INDENTATION = {};

  Parser.prototype.CONTEXT_NONE = 0;

  Parser.prototype.CONTEXT_SEQUENCE = 1;

  Parser.prototype.CONTEXT_MAPPING = 2;

  function Parser(offset) {
    this.offset = offset != null ? offset : 0;
    this.lines = [];
    this.currentLineNb = -1;
    this.currentLine = '';
    this.refs = {};
  }

  Parser.prototype.parse = function(value, exceptionOnInvalidType, objectDecoder) {
    var alias, allowOverwrite, block, c, context, data, e, error, error1, error2, first, i, indent, isRef, j, k, key, l, lastKey, len, len1, len2, len3, lineCount, m, matches, mergeNode, n, name, parsed, parsedItem, parser, ref, ref1, ref2, refName, refValue, val, values;
    if (exceptionOnInvalidType == null) {
      exceptionOnInvalidType = false;
    }
    if (objectDecoder == null) {
      objectDecoder = null;
    }
    this.currentLineNb = -1;
    this.currentLine = '';
    this.lines = this.cleanup(value).split("\n");
    data = null;
    context = this.CONTEXT_NONE;
    allowOverwrite = false;
    while (this.moveToNextLine()) {
      if (this.isCurrentLineEmpty()) {
        continue;
      }
      if ("\t" === this.currentLine[0]) {
        throw new ParseException('A YAML file cannot contain tabs as indentation.', this.getRealCurrentLineNb() + 1, this.currentLine);
      }
      isRef = mergeNode = false;
      if (values = this.PATTERN_SEQUENCE_ITEM.exec(this.currentLine)) {
        if (this.CONTEXT_MAPPING === context) {
          throw new ParseException('You cannot define a sequence item when in a mapping');
        }
        context = this.CONTEXT_SEQUENCE;
        if (data == null) {
          data = [];
        }
        if ((values.value != null) && (matches = this.PATTERN_ANCHOR_VALUE.exec(values.value))) {
          isRef = matches.ref;
          values.value = matches.value;
        }
        if (!(values.value != null) || '' === Utils.trim(values.value, ' ') || Utils.ltrim(values.value, ' ').indexOf('#') === 0) {
          if (this.currentLineNb < this.lines.length - 1 && !this.isNextLineUnIndentedCollection()) {
            c = this.getRealCurrentLineNb() + 1;
            parser = new Parser(c);
            parser.refs = this.refs;
            data.push(parser.parse(this.getNextEmbedBlock(null, true), exceptionOnInvalidType, objectDecoder));
          } else {
            data.push(null);
          }
        } else {
          if (((ref = values.leadspaces) != null ? ref.length : void 0) && (matches = this.PATTERN_COMPACT_NOTATION.exec(values.value))) {
            c = this.getRealCurrentLineNb();
            parser = new Parser(c);
            parser.refs = this.refs;
            block = values.value;
            indent = this.getCurrentLineIndentation();
            if (this.isNextLineIndented(false)) {
              block += "\n" + this.getNextEmbedBlock(indent + values.leadspaces.length + 1, true);
            }
            data.push(parser.parse(block, exceptionOnInvalidType, objectDecoder));
          } else {
            data.push(this.parseValue(values.value, exceptionOnInvalidType, objectDecoder));
          }
        }
      } else if ((values = this.PATTERN_MAPPING_ITEM.exec(this.currentLine)) && values.key.indexOf(' #') === -1) {
        if (this.CONTEXT_SEQUENCE === context) {
          throw new ParseException('You cannot define a mapping item when in a sequence');
        }
        context = this.CONTEXT_MAPPING;
        if (data == null) {
          data = {};
        }
        Inline.configure(exceptionOnInvalidType, objectDecoder);
        try {
          key = Inline.parseScalar(values.key);
        } catch (error) {
          e = error;
          e.parsedLine = this.getRealCurrentLineNb() + 1;
          e.snippet = this.currentLine;
          throw e;
        }
        if ('<<' === key) {
          mergeNode = true;
          allowOverwrite = true;
          if (((ref1 = values.value) != null ? ref1.indexOf('*') : void 0) === 0) {
            refName = values.value.slice(1);
            if (this.refs[refName] == null) {
              throw new ParseException('Reference "' + refName + '" does not exist.', this.getRealCurrentLineNb() + 1, this.currentLine);
            }
            refValue = this.refs[refName];
            if (typeof refValue !== 'object') {
              throw new ParseException('YAML merge keys used with a scalar value instead of an object.', this.getRealCurrentLineNb() + 1, this.currentLine);
            }
            if (refValue instanceof Array) {
              for (i = j = 0, len = refValue.length; j < len; i = ++j) {
                value = refValue[i];
                if (data[name = String(i)] == null) {
                  data[name] = value;
                }
              }
            } else {
              for (key in refValue) {
                value = refValue[key];
                if (data[key] == null) {
                  data[key] = value;
                }
              }
            }
          } else {
            if ((values.value != null) && values.value !== '') {
              value = values.value;
            } else {
              value = this.getNextEmbedBlock();
            }
            c = this.getRealCurrentLineNb() + 1;
            parser = new Parser(c);
            parser.refs = this.refs;
            parsed = parser.parse(value, exceptionOnInvalidType);
            if (typeof parsed !== 'object') {
              throw new ParseException('YAML merge keys used with a scalar value instead of an object.', this.getRealCurrentLineNb() + 1, this.currentLine);
            }
            if (parsed instanceof Array) {
              for (l = 0, len1 = parsed.length; l < len1; l++) {
                parsedItem = parsed[l];
                if (typeof parsedItem !== 'object') {
                  throw new ParseException('Merge items must be objects.', this.getRealCurrentLineNb() + 1, parsedItem);
                }
                if (parsedItem instanceof Array) {
                  for (i = m = 0, len2 = parsedItem.length; m < len2; i = ++m) {
                    value = parsedItem[i];
                    k = String(i);
                    if (!data.hasOwnProperty(k)) {
                      data[k] = value;
                    }
                  }
                } else {
                  for (key in parsedItem) {
                    value = parsedItem[key];
                    if (!data.hasOwnProperty(key)) {
                      data[key] = value;
                    }
                  }
                }
              }
            } else {
              for (key in parsed) {
                value = parsed[key];
                if (!data.hasOwnProperty(key)) {
                  data[key] = value;
                }
              }
            }
          }
        } else if ((values.value != null) && (matches = this.PATTERN_ANCHOR_VALUE.exec(values.value))) {
          isRef = matches.ref;
          values.value = matches.value;
        }
        if (mergeNode) {

        } else if (!(values.value != null) || '' === Utils.trim(values.value, ' ') || Utils.ltrim(values.value, ' ').indexOf('#') === 0) {
          if (!(this.isNextLineIndented()) && !(this.isNextLineUnIndentedCollection())) {
            if (allowOverwrite || data[key] === void 0) {
              data[key] = null;
            }
          } else {
            c = this.getRealCurrentLineNb() + 1;
            parser = new Parser(c);
            parser.refs = this.refs;
            val = parser.parse(this.getNextEmbedBlock(), exceptionOnInvalidType, objectDecoder);
            if (allowOverwrite || data[key] === void 0) {
              data[key] = val;
            }
          }
        } else {
          val = this.parseValue(values.value, exceptionOnInvalidType, objectDecoder);
          if (allowOverwrite || data[key] === void 0) {
            data[key] = val;
          }
        }
      } else {
        lineCount = this.lines.length;
        if (1 === lineCount || (2 === lineCount && Utils.isEmpty(this.lines[1]))) {
          try {
            value = Inline.parse(this.lines[0], exceptionOnInvalidType, objectDecoder);
          } catch (error1) {
            e = error1;
            e.parsedLine = this.getRealCurrentLineNb() + 1;
            e.snippet = this.currentLine;
            throw e;
          }
          if (typeof value === 'object') {
            if (value instanceof Array) {
              first = value[0];
            } else {
              for (key in value) {
                first = value[key];
                break;
              }
            }
            if (typeof first === 'string' && first.indexOf('*') === 0) {
              data = [];
              for (n = 0, len3 = value.length; n < len3; n++) {
                alias = value[n];
                data.push(this.refs[alias.slice(1)]);
              }
              value = data;
            }
          }
          return value;
        } else if ((ref2 = Utils.ltrim(value).charAt(0)) === '[' || ref2 === '{') {
          try {
            return Inline.parse(value, exceptionOnInvalidType, objectDecoder);
          } catch (error2) {
            e = error2;
            e.parsedLine = this.getRealCurrentLineNb() + 1;
            e.snippet = this.currentLine;
            throw e;
          }
        }
        throw new ParseException('Unable to parse.', this.getRealCurrentLineNb() + 1, this.currentLine);
      }
      if (isRef) {
        if (data instanceof Array) {
          this.refs[isRef] = data[data.length - 1];
        } else {
          lastKey = null;
          for (key in data) {
            lastKey = key;
          }
          this.refs[isRef] = data[lastKey];
        }
      }
    }
    if (Utils.isEmpty(data)) {
      return null;
    } else {
      return data;
    }
  };

  Parser.prototype.getRealCurrentLineNb = function() {
    return this.currentLineNb + this.offset;
  };

  Parser.prototype.getCurrentLineIndentation = function() {
    return this.currentLine.length - Utils.ltrim(this.currentLine, ' ').length;
  };

  Parser.prototype.getNextEmbedBlock = function(indentation, includeUnindentedCollection) {
    var data, indent, isItUnindentedCollection, newIndent, removeComments, removeCommentsPattern, unindentedEmbedBlock;
    if (indentation == null) {
      indentation = null;
    }
    if (includeUnindentedCollection == null) {
      includeUnindentedCollection = false;
    }
    this.moveToNextLine();
    if (indentation == null) {
      newIndent = this.getCurrentLineIndentation();
      unindentedEmbedBlock = this.isStringUnIndentedCollectionItem(this.currentLine);
      if (!(this.isCurrentLineEmpty()) && 0 === newIndent && !unindentedEmbedBlock) {
        throw new ParseException('Indentation problem.', this.getRealCurrentLineNb() + 1, this.currentLine);
      }
    } else {
      newIndent = indentation;
    }
    data = [this.currentLine.slice(newIndent)];
    if (!includeUnindentedCollection) {
      isItUnindentedCollection = this.isStringUnIndentedCollectionItem(this.currentLine);
    }
    removeCommentsPattern = this.PATTERN_FOLDED_SCALAR_END;
    removeComments = !removeCommentsPattern.test(this.currentLine);
    while (this.moveToNextLine()) {
      indent = this.getCurrentLineIndentation();
      if (indent === newIndent) {
        removeComments = !removeCommentsPattern.test(this.currentLine);
      }
      if (isItUnindentedCollection && !this.isStringUnIndentedCollectionItem(this.currentLine) && indent === newIndent) {
        this.moveToPreviousLine();
        break;
      }
      if (this.isCurrentLineBlank()) {
        data.push(this.currentLine.slice(newIndent));
        continue;
      }
      if (removeComments && this.isCurrentLineComment()) {
        if (indent === newIndent) {
          continue;
        }
      }
      if (indent >= newIndent) {
        data.push(this.currentLine.slice(newIndent));
      } else if (Utils.ltrim(this.currentLine).charAt(0) === '#') {

      } else if (0 === indent) {
        this.moveToPreviousLine();
        break;
      } else {
        throw new ParseException('Indentation problem.', this.getRealCurrentLineNb() + 1, this.currentLine);
      }
    }
    return data.join("\n");
  };

  Parser.prototype.moveToNextLine = function() {
    if (this.currentLineNb >= this.lines.length - 1) {
      return false;
    }
    this.currentLine = this.lines[++this.currentLineNb];
    return true;
  };

  Parser.prototype.moveToPreviousLine = function() {
    this.currentLine = this.lines[--this.currentLineNb];
  };

  Parser.prototype.parseValue = function(value, exceptionOnInvalidType, objectDecoder) {
    var e, error, error1, foldedIndent, matches, modifiers, pos, ref, ref1, val;
    if (0 === value.indexOf('*')) {
      pos = value.indexOf('#');
      if (pos !== -1) {
        value = value.substr(1, pos - 2);
      } else {
        value = value.slice(1);
      }
      if (this.refs[value] === void 0) {
        throw new ParseException('Reference "' + value + '" does not exist.', this.currentLine);
      }
      return this.refs[value];
    }
    if (matches = this.PATTERN_FOLDED_SCALAR_ALL.exec(value)) {
      modifiers = (ref = matches.modifiers) != null ? ref : '';
      foldedIndent = Math.abs(parseInt(modifiers));
      if (isNaN(foldedIndent)) {
        foldedIndent = 0;
      }
      val = this.parseFoldedScalar(matches.separator, this.PATTERN_DECIMAL.replace(modifiers, ''), foldedIndent);
      if (matches.type != null) {
        Inline.configure(exceptionOnInvalidType, objectDecoder);
        return Inline.parseScalar(matches.type + ' ' + val);
      } else {
        return val;
      }
    }
    try {
      return Inline.parse(value, exceptionOnInvalidType, objectDecoder);
    } catch (error) {
      e = error;
      if (((ref1 = value.charAt(0)) === '[' || ref1 === '{') && e instanceof ParseException && this.isNextLineIndented()) {
        value += "\n" + this.getNextEmbedBlock();
        try {
          return Inline.parse(value, exceptionOnInvalidType, objectDecoder);
        } catch (error1) {
          e = error1;
          e.parsedLine = this.getRealCurrentLineNb() + 1;
          e.snippet = this.currentLine;
          throw e;
        }
      } else {
        e.parsedLine = this.getRealCurrentLineNb() + 1;
        e.snippet = this.currentLine;
        throw e;
      }
    }
  };

  Parser.prototype.parseFoldedScalar = function(separator, indicator, indentation) {
    var isCurrentLineBlank, j, len, line, matches, newText, notEOF, pattern, ref, text;
    if (indicator == null) {
      indicator = '';
    }
    if (indentation == null) {
      indentation = 0;
    }
    notEOF = this.moveToNextLine();
    if (!notEOF) {
      return '';
    }
    isCurrentLineBlank = this.isCurrentLineBlank();
    text = '';
    while (notEOF && isCurrentLineBlank) {
      if (notEOF = this.moveToNextLine()) {
        text += "\n";
        isCurrentLineBlank = this.isCurrentLineBlank();
      }
    }
    if (0 === indentation) {
      if (matches = this.PATTERN_INDENT_SPACES.exec(this.currentLine)) {
        indentation = matches[0].length;
      }
    }
    if (indentation > 0) {
      pattern = this.PATTERN_FOLDED_SCALAR_BY_INDENTATION[indentation];
      if (pattern == null) {
        pattern = new Pattern('^ {' + indentation + '}(.*)$');
        Parser.prototype.PATTERN_FOLDED_SCALAR_BY_INDENTATION[indentation] = pattern;
      }
      while (notEOF && (isCurrentLineBlank || (matches = pattern.exec(this.currentLine)))) {
        if (isCurrentLineBlank) {
          text += this.currentLine.slice(indentation);
        } else {
          text += matches[1];
        }
        if (notEOF = this.moveToNextLine()) {
          text += "\n";
          isCurrentLineBlank = this.isCurrentLineBlank();
        }
      }
    } else if (notEOF) {
      text += "\n";
    }
    if (notEOF) {
      this.moveToPreviousLine();
    }
    if ('>' === separator) {
      newText = '';
      ref = text.split("\n");
      for (j = 0, len = ref.length; j < len; j++) {
        line = ref[j];
        if (line.length === 0 || line.charAt(0) === ' ') {
          newText = Utils.rtrim(newText, ' ') + line + "\n";
        } else {
          newText += line + ' ';
        }
      }
      text = newText;
    }
    if ('+' !== indicator) {
      text = Utils.rtrim(text);
    }
    if ('' === indicator) {
      text = this.PATTERN_TRAILING_LINES.replace(text, "\n");
    } else if ('-' === indicator) {
      text = this.PATTERN_TRAILING_LINES.replace(text, '');
    }
    return text;
  };

  Parser.prototype.isNextLineIndented = function(ignoreComments) {
    var EOF, currentIndentation, ret;
    if (ignoreComments == null) {
      ignoreComments = true;
    }
    currentIndentation = this.getCurrentLineIndentation();
    EOF = !this.moveToNextLine();
    if (ignoreComments) {
      while (!EOF && this.isCurrentLineEmpty()) {
        EOF = !this.moveToNextLine();
      }
    } else {
      while (!EOF && this.isCurrentLineBlank()) {
        EOF = !this.moveToNextLine();
      }
    }
    if (EOF) {
      return false;
    }
    ret = false;
    if (this.getCurrentLineIndentation() > currentIndentation) {
      ret = true;
    }
    this.moveToPreviousLine();
    return ret;
  };

  Parser.prototype.isCurrentLineEmpty = function() {
    var trimmedLine;
    trimmedLine = Utils.trim(this.currentLine, ' ');
    return trimmedLine.length === 0 || trimmedLine.charAt(0) === '#';
  };

  Parser.prototype.isCurrentLineBlank = function() {
    return '' === Utils.trim(this.currentLine, ' ');
  };

  Parser.prototype.isCurrentLineComment = function() {
    var ltrimmedLine;
    ltrimmedLine = Utils.ltrim(this.currentLine, ' ');
    return ltrimmedLine.charAt(0) === '#';
  };

  Parser.prototype.cleanup = function(value) {
    var count, i, indent, j, l, len, len1, line, lines, ref, ref1, ref2, smallestIndent, trimmedValue;
    if (value.indexOf("\r") !== -1) {
      value = value.split("\r\n").join("\n").split("\r").join("\n");
    }
    count = 0;
    ref = this.PATTERN_YAML_HEADER.replaceAll(value, ''), value = ref[0], count = ref[1];
    this.offset += count;
    ref1 = this.PATTERN_LEADING_COMMENTS.replaceAll(value, '', 1), trimmedValue = ref1[0], count = ref1[1];
    if (count === 1) {
      this.offset += Utils.subStrCount(value, "\n") - Utils.subStrCount(trimmedValue, "\n");
      value = trimmedValue;
    }
    ref2 = this.PATTERN_DOCUMENT_MARKER_START.replaceAll(value, '', 1), trimmedValue = ref2[0], count = ref2[1];
    if (count === 1) {
      this.offset += Utils.subStrCount(value, "\n") - Utils.subStrCount(trimmedValue, "\n");
      value = trimmedValue;
      value = this.PATTERN_DOCUMENT_MARKER_END.replace(value, '');
    }
    lines = value.split("\n");
    smallestIndent = -1;
    for (j = 0, len = lines.length; j < len; j++) {
      line = lines[j];
      if (Utils.trim(line, ' ').length === 0) {
        continue;
      }
      indent = line.length - Utils.ltrim(line).length;
      if (smallestIndent === -1 || indent < smallestIndent) {
        smallestIndent = indent;
      }
    }
    if (smallestIndent > 0) {
      for (i = l = 0, len1 = lines.length; l < len1; i = ++l) {
        line = lines[i];
        lines[i] = line.slice(smallestIndent);
      }
      value = lines.join("\n");
    }
    return value;
  };

  Parser.prototype.isNextLineUnIndentedCollection = function(currentIndentation) {
    var notEOF, ret;
    if (currentIndentation == null) {
      currentIndentation = null;
    }
    if (currentIndentation == null) {
      currentIndentation = this.getCurrentLineIndentation();
    }
    notEOF = this.moveToNextLine();
    while (notEOF && this.isCurrentLineEmpty()) {
      notEOF = this.moveToNextLine();
    }
    if (false === notEOF) {
      return false;
    }
    ret = false;
    if (this.getCurrentLineIndentation() === currentIndentation && this.isStringUnIndentedCollectionItem(this.currentLine)) {
      ret = true;
    }
    this.moveToPreviousLine();
    return ret;
  };

  Parser.prototype.isStringUnIndentedCollectionItem = function() {
    return this.currentLine === '-' || this.currentLine.slice(0, 2) === '- ';
  };

  return Parser;

})();

module.exports = Parser;

},{"./Exception/ParseException":5,"./Inline":6,"./Pattern":8,"./Utils":10}],8:[function(_dereq_,module,exports){
// Generated by CoffeeScript 1.10.0
var Pattern;

Pattern = (function() {
  Pattern.prototype.regex = null;

  Pattern.prototype.rawRegex = null;

  Pattern.prototype.cleanedRegex = null;

  Pattern.prototype.mapping = null;

  function Pattern(rawRegex, modifiers) {
    var _char, capturingBracketNumber, cleanedRegex, i, len, mapping, name, part, subChar;
    if (modifiers == null) {
      modifiers = '';
    }
    cleanedRegex = '';
    len = rawRegex.length;
    mapping = null;
    capturingBracketNumber = 0;
    i = 0;
    while (i < len) {
      _char = rawRegex.charAt(i);
      if (_char === '\\') {
        cleanedRegex += rawRegex.slice(i, +(i + 1) + 1 || 9e9);
        i++;
      } else if (_char === '(') {
        if (i < len - 2) {
          part = rawRegex.slice(i, +(i + 2) + 1 || 9e9);
          if (part === '(?:') {
            i += 2;
            cleanedRegex += part;
          } else if (part === '(?<') {
            capturingBracketNumber++;
            i += 2;
            name = '';
            while (i + 1 < len) {
              subChar = rawRegex.charAt(i + 1);
              if (subChar === '>') {
                cleanedRegex += '(';
                i++;
                if (name.length > 0) {
                  if (mapping == null) {
                    mapping = {};
                  }
                  mapping[name] = capturingBracketNumber;
                }
                break;
              } else {
                name += subChar;
              }
              i++;
            }
          } else {
            cleanedRegex += _char;
            capturingBracketNumber++;
          }
        } else {
          cleanedRegex += _char;
        }
      } else {
        cleanedRegex += _char;
      }
      i++;
    }
    this.rawRegex = rawRegex;
    this.cleanedRegex = cleanedRegex;
    this.regex = new RegExp(this.cleanedRegex, 'g' + modifiers.replace('g', ''));
    this.mapping = mapping;
  }

  Pattern.prototype.exec = function(str) {
    var index, matches, name, ref;
    this.regex.lastIndex = 0;
    matches = this.regex.exec(str);
    if (matches == null) {
      return null;
    }
    if (this.mapping != null) {
      ref = this.mapping;
      for (name in ref) {
        index = ref[name];
        matches[name] = matches[index];
      }
    }
    return matches;
  };

  Pattern.prototype.test = function(str) {
    this.regex.lastIndex = 0;
    return this.regex.test(str);
  };

  Pattern.prototype.replace = function(str, replacement) {
    this.regex.lastIndex = 0;
    return str.replace(this.regex, replacement);
  };

  Pattern.prototype.replaceAll = function(str, replacement, limit) {
    var count;
    if (limit == null) {
      limit = 0;
    }
    this.regex.lastIndex = 0;
    count = 0;
    while (this.regex.test(str) && (limit === 0 || count < limit)) {
      this.regex.lastIndex = 0;
      str = str.replace(this.regex, '');
      count++;
    }
    return [str, count];
  };

  return Pattern;

})();

module.exports = Pattern;

},{}],9:[function(_dereq_,module,exports){
// Generated by CoffeeScript 1.10.0
var Pattern, Unescaper, Utils;

Utils = _dereq_('./Utils');

Pattern = _dereq_('./Pattern');

Unescaper = (function() {
  function Unescaper() {}

  Unescaper.PATTERN_ESCAPED_CHARACTER = new Pattern('\\\\([0abt\tnvfre "\\/\\\\N_LP]|x[0-9a-fA-F]{2}|u[0-9a-fA-F]{4}|U[0-9a-fA-F]{8})');

  Unescaper.unescapeSingleQuotedString = function(value) {
    return value.replace(/\'\'/g, '\'');
  };

  Unescaper.unescapeDoubleQuotedString = function(value) {
    if (this._unescapeCallback == null) {
      this._unescapeCallback = (function(_this) {
        return function(str) {
          return _this.unescapeCharacter(str);
        };
      })(this);
    }
    return this.PATTERN_ESCAPED_CHARACTER.replace(value, this._unescapeCallback);
  };

  Unescaper.unescapeCharacter = function(value) {
    var ch;
    ch = String.fromCharCode;
    switch (value.charAt(1)) {
      case '0':
        return ch(0);
      case 'a':
        return ch(7);
      case 'b':
        return ch(8);
      case 't':
        return "\t";
      case "\t":
        return "\t";
      case 'n':
        return "\n";
      case 'v':
        return ch(11);
      case 'f':
        return ch(12);
      case 'r':
        return ch(13);
      case 'e':
        return ch(27);
      case ' ':
        return ' ';
      case '"':
        return '"';
      case '/':
        return '/';
      case '\\':
        return '\\';
      case 'N':
        return ch(0x0085);
      case '_':
        return ch(0x00A0);
      case 'L':
        return ch(0x2028);
      case 'P':
        return ch(0x2029);
      case 'x':
        return Utils.utf8chr(Utils.hexDec(value.substr(2, 2)));
      case 'u':
        return Utils.utf8chr(Utils.hexDec(value.substr(2, 4)));
      case 'U':
        return Utils.utf8chr(Utils.hexDec(value.substr(2, 8)));
      default:
        return '';
    }
  };

  return Unescaper;

})();

module.exports = Unescaper;

},{"./Pattern":8,"./Utils":10}],10:[function(_dereq_,module,exports){
// Generated by CoffeeScript 1.10.0
var Pattern, Utils;

Pattern = _dereq_('./Pattern');

Utils = (function() {
  function Utils() {}

  Utils.REGEX_LEFT_TRIM_BY_CHAR = {};

  Utils.REGEX_RIGHT_TRIM_BY_CHAR = {};

  Utils.REGEX_SPACES = /\s+/g;

  Utils.REGEX_DIGITS = /^\d+$/;

  Utils.REGEX_OCTAL = /[^0-7]/gi;

  Utils.REGEX_HEXADECIMAL = /[^a-f0-9]/gi;

  Utils.PATTERN_DATE = new Pattern('^' + '(?<year>[0-9][0-9][0-9][0-9])' + '-(?<month>[0-9][0-9]?)' + '-(?<day>[0-9][0-9]?)' + '(?:(?:[Tt]|[ \t]+)' + '(?<hour>[0-9][0-9]?)' + ':(?<minute>[0-9][0-9])' + ':(?<second>[0-9][0-9])' + '(?:\.(?<fraction>[0-9]*))?' + '(?:[ \t]*(?<tz>Z|(?<tz_sign>[-+])(?<tz_hour>[0-9][0-9]?)' + '(?::(?<tz_minute>[0-9][0-9]))?))?)?' + '$', 'i');

  Utils.LOCAL_TIMEZONE_OFFSET = new Date().getTimezoneOffset() * 60 * 1000;

  Utils.trim = function(str, _char) {
    var regexLeft, regexRight;
    if (_char == null) {
      _char = '\\s';
    }
    return str.trim();
    regexLeft = this.REGEX_LEFT_TRIM_BY_CHAR[_char];
    if (regexLeft == null) {
      this.REGEX_LEFT_TRIM_BY_CHAR[_char] = regexLeft = new RegExp('^' + _char + '' + _char + '*');
    }
    regexLeft.lastIndex = 0;
    regexRight = this.REGEX_RIGHT_TRIM_BY_CHAR[_char];
    if (regexRight == null) {
      this.REGEX_RIGHT_TRIM_BY_CHAR[_char] = regexRight = new RegExp(_char + '' + _char + '*$');
    }
    regexRight.lastIndex = 0;
    return str.replace(regexLeft, '').replace(regexRight, '');
  };

  Utils.ltrim = function(str, _char) {
    var regexLeft;
    if (_char == null) {
      _char = '\\s';
    }
    regexLeft = this.REGEX_LEFT_TRIM_BY_CHAR[_char];
    if (regexLeft == null) {
      this.REGEX_LEFT_TRIM_BY_CHAR[_char] = regexLeft = new RegExp('^' + _char + '' + _char + '*');
    }
    regexLeft.lastIndex = 0;
    return str.replace(regexLeft, '');
  };

  Utils.rtrim = function(str, _char) {
    var regexRight;
    if (_char == null) {
      _char = '\\s';
    }
    regexRight = this.REGEX_RIGHT_TRIM_BY_CHAR[_char];
    if (regexRight == null) {
      this.REGEX_RIGHT_TRIM_BY_CHAR[_char] = regexRight = new RegExp(_char + '' + _char + '*$');
    }
    regexRight.lastIndex = 0;
    return str.replace(regexRight, '');
  };

  Utils.isEmpty = function(value) {
    return !value || value === '' || value === '0' || (value instanceof Array && value.length === 0);
  };

  Utils.subStrCount = function(string, subString, start, length) {
    var c, i, j, len, ref, sublen;
    c = 0;
    string = '' + string;
    subString = '' + subString;
    if (start != null) {
      string = string.slice(start);
    }
    if (length != null) {
      string = string.slice(0, length);
    }
    len = string.length;
    sublen = subString.length;
    for (i = j = 0, ref = len; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
      if (subString === string.slice(i, sublen)) {
        c++;
        i += sublen - 1;
      }
    }
    return c;
  };

  Utils.isDigits = function(input) {
    this.REGEX_DIGITS.lastIndex = 0;
    return this.REGEX_DIGITS.test(input);
  };

  Utils.octDec = function(input) {
    this.REGEX_OCTAL.lastIndex = 0;
    return parseInt((input + '').replace(this.REGEX_OCTAL, ''), 8);
  };

  Utils.hexDec = function(input) {
    this.REGEX_HEXADECIMAL.lastIndex = 0;
    input = this.trim(input);
    if ((input + '').slice(0, 2) === '0x') {
      input = (input + '').slice(2);
    }
    return parseInt((input + '').replace(this.REGEX_HEXADECIMAL, ''), 16);
  };

  Utils.utf8chr = function(c) {
    var ch;
    ch = String.fromCharCode;
    if (0x80 > (c %= 0x200000)) {
      return ch(c);
    }
    if (0x800 > c) {
      return ch(0xC0 | c >> 6) + ch(0x80 | c & 0x3F);
    }
    if (0x10000 > c) {
      return ch(0xE0 | c >> 12) + ch(0x80 | c >> 6 & 0x3F) + ch(0x80 | c & 0x3F);
    }
    return ch(0xF0 | c >> 18) + ch(0x80 | c >> 12 & 0x3F) + ch(0x80 | c >> 6 & 0x3F) + ch(0x80 | c & 0x3F);
  };

  Utils.parseBoolean = function(input, strict) {
    var lowerInput;
    if (strict == null) {
      strict = true;
    }
    if (typeof input === 'string') {
      lowerInput = input.toLowerCase();
      if (!strict) {
        if (lowerInput === 'no') {
          return false;
        }
      }
      if (lowerInput === '0') {
        return false;
      }
      if (lowerInput === 'false') {
        return false;
      }
      if (lowerInput === '') {
        return false;
      }
      return true;
    }
    return !!input;
  };

  Utils.isNumeric = function(input) {
    this.REGEX_SPACES.lastIndex = 0;
    return typeof input === 'number' || typeof input === 'string' && !isNaN(input) && input.replace(this.REGEX_SPACES, '') !== '';
  };

  Utils.stringToDate = function(str) {
    var date, day, fraction, hour, info, minute, month, second, tz_hour, tz_minute, tz_offset, year;
    if (!(str != null ? str.length : void 0)) {
      return null;
    }
    info = this.PATTERN_DATE.exec(str);
    if (!info) {
      return null;
    }
    year = parseInt(info.year, 10);
    month = parseInt(info.month, 10) - 1;
    day = parseInt(info.day, 10);
    if (info.hour == null) {
      date = new Date(Date.UTC(year, month, day));
      return date;
    }
    hour = parseInt(info.hour, 10);
    minute = parseInt(info.minute, 10);
    second = parseInt(info.second, 10);
    if (info.fraction != null) {
      fraction = info.fraction.slice(0, 3);
      while (fraction.length < 3) {
        fraction += '0';
      }
      fraction = parseInt(fraction, 10);
    } else {
      fraction = 0;
    }
    if (info.tz != null) {
      tz_hour = parseInt(info.tz_hour, 10);
      if (info.tz_minute != null) {
        tz_minute = parseInt(info.tz_minute, 10);
      } else {
        tz_minute = 0;
      }
      tz_offset = (tz_hour * 60 + tz_minute) * 60000;
      if ('-' === info.tz_sign) {
        tz_offset *= -1;
      }
    }
    date = new Date(Date.UTC(year, month, day, hour, minute, second, fraction));
    if (tz_offset) {
      date.setTime(date.getTime() + tz_offset);
    }
    return date;
  };

  Utils.strRepeat = function(str, number) {
    var i, res;
    res = '';
    i = 0;
    while (i < number) {
      res += str;
      i++;
    }
    return res;
  };

  Utils.getStringFromFile = function(path, callback) {
    var data, fs, j, len1, name, ref, req, xhr;
    if (callback == null) {
      callback = null;
    }
    xhr = null;
    if (typeof window !== "undefined" && window !== null) {
      if (window.XMLHttpRequest) {
        xhr = new XMLHttpRequest();
      } else if (window.ActiveXObject) {
        ref = ["Msxml2.XMLHTTP.6.0", "Msxml2.XMLHTTP.3.0", "Msxml2.XMLHTTP", "Microsoft.XMLHTTP"];
        for (j = 0, len1 = ref.length; j < len1; j++) {
          name = ref[j];
          try {
            xhr = new ActiveXObject(name);
          } catch (undefined) {}
        }
      }
    }
    if (xhr != null) {
      if (callback != null) {
        xhr.onreadystatechange = function() {
          if (xhr.readyState === 4) {
            if (xhr.status === 200 || xhr.status === 0) {
              return callback(xhr.responseText);
            } else {
              return callback(null);
            }
          }
        };
        xhr.open('GET', path, true);
        return xhr.send(null);
      } else {
        xhr.open('GET', path, false);
        xhr.send(null);
        if (xhr.status === 200 || xhr.status === 0) {
          return xhr.responseText;
        }
        return null;
      }
    } else {
      req = _dereq_;
      fs = req('fs');
      if (callback != null) {
        return fs.readFile(path, function(err, data) {
          if (err) {
            return callback(null);
          } else {
            return callback(String(data));
          }
        });
      } else {
        data = fs.readFileSync(path);
        if (data != null) {
          return String(data);
        }
        return null;
      }
    }
  };

  return Utils;

})();

module.exports = Utils;

},{"./Pattern":8}],11:[function(_dereq_,module,exports){
// Generated by CoffeeScript 1.10.0
var Dumper, Parser, Utils, Yaml;

Parser = _dereq_('./Parser');

Dumper = _dereq_('./Dumper');

Utils = _dereq_('./Utils');

Yaml = (function() {
  function Yaml() {}

  Yaml.parse = function(input, exceptionOnInvalidType, objectDecoder) {
    if (exceptionOnInvalidType == null) {
      exceptionOnInvalidType = false;
    }
    if (objectDecoder == null) {
      objectDecoder = null;
    }
    return new Parser().parse(input, exceptionOnInvalidType, objectDecoder);
  };

  Yaml.parseFile = function(path, callback, exceptionOnInvalidType, objectDecoder) {
    var input;
    if (callback == null) {
      callback = null;
    }
    if (exceptionOnInvalidType == null) {
      exceptionOnInvalidType = false;
    }
    if (objectDecoder == null) {
      objectDecoder = null;
    }
    if (callback != null) {
      return Utils.getStringFromFile(path, (function(_this) {
        return function(input) {
          var result;
          result = null;
          if (input != null) {
            result = _this.parse(input, exceptionOnInvalidType, objectDecoder);
          }
          callback(result);
        };
      })(this));
    } else {
      input = Utils.getStringFromFile(path);
      if (input != null) {
        return this.parse(input, exceptionOnInvalidType, objectDecoder);
      }
      return null;
    }
  };

  Yaml.dump = function(input, inline, indent, exceptionOnInvalidType, objectEncoder) {
    var yaml;
    if (inline == null) {
      inline = 2;
    }
    if (indent == null) {
      indent = 4;
    }
    if (exceptionOnInvalidType == null) {
      exceptionOnInvalidType = false;
    }
    if (objectEncoder == null) {
      objectEncoder = null;
    }
    yaml = new Dumper();
    yaml.indentation = indent;
    return yaml.dump(input, inline, 0, exceptionOnInvalidType, objectEncoder);
  };

  Yaml.register = function() {
    var require_handler;
    require_handler = function(module, filename) {
      return module.exports = YAML.parseFile(filename);
    };
    if ((typeof _dereq_ !== "undefined" && _dereq_ !== null ? _dereq_.extensions : void 0) != null) {
      _dereq_.extensions['.yml'] = require_handler;
      return _dereq_.extensions['.yaml'] = require_handler;
    }
  };

  Yaml.stringify = function(input, inline, indent, exceptionOnInvalidType, objectEncoder) {
    return this.dump(input, inline, indent, exceptionOnInvalidType, objectEncoder);
  };

  Yaml.load = function(path, callback, exceptionOnInvalidType, objectDecoder) {
    return this.parseFile(path, callback, exceptionOnInvalidType, objectDecoder);
  };

  return Yaml;

})();

if (typeof window !== "undefined" && window !== null) {
  window.YAML = Yaml;
}

if (typeof window === "undefined" || window === null) {
  this.YAML = Yaml;
}

module.exports = Yaml;

},{"./Dumper":2,"./Parser":7,"./Utils":10}],12:[function(_dereq_,module,exports){
'use strict';

var _tangram = _dereq_('./tangram');

var _tangram2 = _interopRequireDefault(_tangram);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.exports = _tangram2.default;

},{"./tangram":13}],13:[function(_dereq_,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _tangramCartocss = _dereq_('tangram-cartocss');

var _tangramCartocss2 = _interopRequireDefault(_tangramCartocss);

var _yaml = _dereq_('./yaml');

var _yaml2 = _interopRequireDefault(_yaml);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var SOURCES = {
  mapnik: {
    type: 'MVT',
    url: function url(_url) {
      return _url.replace('{layerIndexes}', 'mapnik').replace('.png', '.mvt');
    }
  }
};

var generateSources = function generateSources(url) {
  // TODO: make this dynamic if it is neccessary
  var source = SOURCES['mapnik'];

  return {
    type: source.type,
    url: source.url(url)
  };
};

var TC = function TC(map) {
  this.scene = Tangram.leafletLayer({
    scene: _yaml2.default.getBaseFile()
  });
};

TC.prototype = {
  addLayer: function addLayer(layer) {
    var ly = {
      data: {
        layer: layer.id,
        source: 'CartoDB'
      },
      draw: _tangramCartocss2.default.carto2Draw(layer.meta.cartocss)
    };

    this.scene.config.layers[layer.layer_name] = ly;
    this.scene.updateConfig();
  },

  addDataSource: function addDataSource(url) {
    this.scene.setDataSource('CartoDB', generateSources(url));
  }
};

exports.default = TC;

},{"./yaml":14,"tangram-cartocss":1}],14:[function(_dereq_,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
var yamljs = _dereq_('yamljs');

var SOURCES = {
  mapnik: {
    type: 'MVT',
    url: function url(_url) {
      return _url.replace('{layerIndexes}', 'mapnik').replace('.png', '.mvt');
    }
  }
};

var getBaseProperties = function getBaseProperties() {
  return {
    global: {
      language: 'en'
    },

    cameras: {
      prespective: {
        type: 'perspective',
        vanishing_point: ['0', '-250px'],
        active: false
      },

      isometric: {
        type: 'isometric',
        axis: [0, 1],
        active: true
      },
      flat: {
        type: 'flat',
        active: false
      }
    },

    scene: {
      background: {
        color: ''
      }
    },

    fonts: {
      Montserrat: {
        url: 'https://fonts.gstatic.com/s/montserrat/v7/zhcz-_WihjSQC0oHJ9TCYL3hpw3pgy2gAi-Ip7WPMi0.woff'
      }
    },

    sources: {},

    layers: {},

    styles: {}
  };
};

var generateYAML = function generateYAML() {
  return yamljs.stringify(getBaseProperties(), 3);
};

var getBaseFile = function getBaseFile() {
  return URL.createObjectURL(new Blob([string]));
};

var yaml;
exports.default = yaml = {
  getBaseFile: getBaseFile
};

},{"yamljs":11}]},{},[12])(12)
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJub2RlX21vZHVsZXMvdGFuZ3JhbS1jYXJ0b2Nzcy9kaXN0L3RhbmdyYW0tY2FydG9jc3MubWluLmpzIiwibm9kZV9tb2R1bGVzL3lhbWxqcy9saWIvRHVtcGVyLmpzIiwibm9kZV9tb2R1bGVzL3lhbWxqcy9saWIvRXNjYXBlci5qcyIsIm5vZGVfbW9kdWxlcy95YW1sanMvbGliL0V4Y2VwdGlvbi9EdW1wRXhjZXB0aW9uLmpzIiwibm9kZV9tb2R1bGVzL3lhbWxqcy9saWIvRXhjZXB0aW9uL1BhcnNlRXhjZXB0aW9uLmpzIiwibm9kZV9tb2R1bGVzL3lhbWxqcy9saWIvSW5saW5lLmpzIiwibm9kZV9tb2R1bGVzL3lhbWxqcy9saWIvUGFyc2VyLmpzIiwibm9kZV9tb2R1bGVzL3lhbWxqcy9saWIvUGF0dGVybi5qcyIsIm5vZGVfbW9kdWxlcy95YW1sanMvbGliL1VuZXNjYXBlci5qcyIsIm5vZGVfbW9kdWxlcy95YW1sanMvbGliL1V0aWxzLmpzIiwibm9kZV9tb2R1bGVzL3lhbWxqcy9saWIvWWFtbC5qcyIsInNyYy9tb2R1bGUuanMiLCJzcmMvdGFuZ3JhbS5qcyIsInNyYy95YW1sLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQ0FBO0FBQ0E7QUFDQTs7OztBQ0ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNyREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3hEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMzQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDM0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ25lQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDMWxCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdkhBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNuRkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzVSQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7QUN4R0E7Ozs7OztBQUVBLE9BQU8sT0FBUDs7Ozs7Ozs7O0FDRkE7Ozs7QUFDQTs7Ozs7O0FBRUEsSUFBSSxVQUFVO0FBQ1YsVUFBUTtBQUNKLFVBQU0sS0FERjtBQUVKLFNBQUssYUFBVSxJQUFWLEVBQWdCO0FBQ2pCLGFBQU8sS0FBSSxPQUFKLENBQVksZ0JBQVosRUFBOEIsUUFBOUIsRUFBd0MsT0FBeEMsQ0FBZ0QsTUFBaEQsRUFBd0QsTUFBeEQsQ0FBUDtBQUNIO0FBSkc7QUFERSxDQUFkOztBQVNBLElBQUksa0JBQWtCLFNBQVMsZUFBVCxDQUF5QixHQUF6QixFQUE4QjtBQUNsRDtBQUNBLE1BQUksU0FBUyxRQUFRLFFBQVIsQ0FBYjs7QUFFQSxTQUFPO0FBQ0wsVUFBTSxPQUFPLElBRFI7QUFFTCxTQUFLLE9BQU8sR0FBUCxDQUFZLEdBQVo7QUFGQSxHQUFQO0FBSUQsQ0FSRDs7QUFVQSxJQUFJLEtBQUssU0FBTCxFQUFLLENBQVUsR0FBVixFQUFlO0FBQ3RCLE9BQUssS0FBTCxHQUFhLFFBQVEsWUFBUixDQUFxQjtBQUNoQyxXQUFPLGVBQUssV0FBTDtBQUR5QixHQUFyQixDQUFiO0FBR0QsQ0FKRDs7QUFNQSxHQUFHLFNBQUgsR0FBZTtBQUNiLFlBQVUsa0JBQVUsS0FBVixFQUFpQjtBQUN6QixRQUFJLEtBQUs7QUFDUCxZQUFNO0FBQ0osZUFBTyxNQUFNLEVBRFQ7QUFFSixnQkFBUTtBQUZKLE9BREM7QUFLUCxZQUFNLDBCQUFLLFVBQUwsQ0FBZ0IsTUFBTSxJQUFOLENBQVcsUUFBM0I7QUFMQyxLQUFUOztBQVFBLFNBQUssS0FBTCxDQUFXLE1BQVgsQ0FBa0IsTUFBbEIsQ0FBeUIsTUFBTSxVQUEvQixJQUE2QyxFQUE3QztBQUNBLFNBQUssS0FBTCxDQUFXLFlBQVg7QUFDRCxHQVpZOztBQWNiLGlCQUFlLHVCQUFVLEdBQVYsRUFBZTtBQUM1QixTQUFLLEtBQUwsQ0FBVyxhQUFYLENBQXlCLFNBQXpCLEVBQW9DLGdCQUFnQixHQUFoQixDQUFwQztBQUNEO0FBaEJZLENBQWY7O2tCQW1CZSxFOzs7Ozs7OztBQy9DZixJQUFJLFNBQVMsUUFBUSxRQUFSLENBQWI7O0FBRUEsSUFBTSxVQUFVO0FBQ1osVUFBUTtBQUNKLFVBQU0sS0FERjtBQUVKLFNBQUssYUFBVSxJQUFWLEVBQWdCO0FBQ2pCLGFBQU8sS0FBSSxPQUFKLENBQVksZ0JBQVosRUFBOEIsUUFBOUIsRUFBd0MsT0FBeEMsQ0FBZ0QsTUFBaEQsRUFBd0QsTUFBeEQsQ0FBUDtBQUNIO0FBSkc7QUFESSxDQUFoQjs7QUFTQSxJQUFNLG9CQUFvQixTQUFTLGlCQUFULEdBQTZCO0FBQ3JELFNBQU87QUFDTCxZQUFRO0FBQ04sZ0JBQVU7QUFESixLQURIOztBQUtMLGFBQVM7QUFDUCxtQkFBYTtBQUNYLGNBQU0sYUFESztBQUVYLHlCQUFpQixDQUFFLEdBQUYsRUFBTyxRQUFQLENBRk47QUFHWCxnQkFBUTtBQUhHLE9BRE47O0FBT1AsaUJBQVc7QUFDVCxjQUFNLFdBREc7QUFFVCxjQUFNLENBQUUsQ0FBRixFQUFLLENBQUwsQ0FGRztBQUdULGdCQUFRO0FBSEMsT0FQSjtBQVlQLFlBQU07QUFDSixjQUFNLE1BREY7QUFFSixnQkFBUTtBQUZKO0FBWkMsS0FMSjs7QUF1QkwsV0FBTztBQUNMLGtCQUFZO0FBQ1YsZUFBTztBQURHO0FBRFAsS0F2QkY7O0FBNkJMLFdBQU87QUFDTCxrQkFBWTtBQUNWLGFBQUs7QUFESztBQURQLEtBN0JGOztBQW1DTCxhQUFTLEVBbkNKOztBQXFDTCxZQUFRLEVBckNIOztBQXVDTCxZQUFRO0FBdkNILEdBQVA7QUF5Q0QsQ0ExQ0Q7O0FBNENBLElBQU0sZUFBZSxTQUFmLFlBQWUsR0FBWTtBQUMvQixTQUFPLE9BQU8sU0FBUCxDQUFrQixtQkFBbEIsRUFBdUMsQ0FBdkMsQ0FBUDtBQUNELENBRkQ7O0FBSUEsSUFBTSxjQUFjLFNBQWQsV0FBYyxHQUFZO0FBQzlCLFNBQU8sSUFBSSxlQUFKLENBQXFCLElBQUksSUFBSixDQUFVLENBQUUsTUFBRixDQUFWLENBQXJCLENBQVA7QUFDRCxDQUZEOztBQUlBLElBQUksSUFBSjtrQkFDZSxPQUFPO0FBQ3BCO0FBRG9CLEMiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKTt0aHJvdyBmLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsZn12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pIiwiIWZ1bmN0aW9uKGUpe2lmKFwib2JqZWN0XCI9PXR5cGVvZiBleHBvcnRzJiZcInVuZGVmaW5lZFwiIT10eXBlb2YgbW9kdWxlKW1vZHVsZS5leHBvcnRzPWUoKTtlbHNlIGlmKFwiZnVuY3Rpb25cIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZClkZWZpbmUoW10sZSk7ZWxzZXt2YXIgdDt0PVwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3c/d2luZG93OlwidW5kZWZpbmVkXCIhPXR5cGVvZiBnbG9iYWw/Z2xvYmFsOlwidW5kZWZpbmVkXCIhPXR5cGVvZiBzZWxmP3NlbGY6dGhpcyx0LkNDU1M9ZSgpfX0oZnVuY3Rpb24oKXt2YXIgZGVmaW5lLG1vZHVsZSxleHBvcnRzO3JldHVybiBmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBpKGEscyl7aWYoIW5bYV0pe2lmKCF0W2FdKXt2YXIgbD1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlO2lmKCFzJiZsKXJldHVybiBsKGEsITApO2lmKG8pcmV0dXJuIG8oYSwhMCk7dmFyIHU9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIithK1wiJ1wiKTt0aHJvdyB1LmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsdX12YXIgYz1uW2FdPXtleHBvcnRzOnt9fTt0W2FdWzBdLmNhbGwoYy5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbYV1bMV1bZV07cmV0dXJuIGkobj9uOmUpfSxjLGMuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gblthXS5leHBvcnRzfWZvcih2YXIgbz1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlLGE9MDthPHIubGVuZ3RoO2ErKylpKHJbYV0pO3JldHVybiBpfSh7MTpbZnVuY3Rpb24oZSx0KXtmdW5jdGlvbiBuKGUsdCl7cmV0dXJuIGQuaXNVbmRlZmluZWQodCk/XCJcIit0OmQuaXNOdW1iZXIodCkmJiFpc0Zpbml0ZSh0KT90LnRvU3RyaW5nKCk6ZC5pc0Z1bmN0aW9uKHQpfHxkLmlzUmVnRXhwKHQpP3QudG9TdHJpbmcoKTp0fWZ1bmN0aW9uIHIoZSx0KXtyZXR1cm4gZC5pc1N0cmluZyhlKT9lLmxlbmd0aDx0P2U6ZS5zbGljZSgwLHQpOmV9ZnVuY3Rpb24gaShlKXtyZXR1cm4gcihKU09OLnN0cmluZ2lmeShlLmFjdHVhbCxuKSwxMjgpK1wiIFwiK2Uub3BlcmF0b3IrXCIgXCIrcihKU09OLnN0cmluZ2lmeShlLmV4cGVjdGVkLG4pLDEyOCl9ZnVuY3Rpb24gbyhlLHQsbixyLGkpe3Rocm93IG5ldyBtLkFzc2VydGlvbkVycm9yKHttZXNzYWdlOm4sYWN0dWFsOmUsZXhwZWN0ZWQ6dCxvcGVyYXRvcjpyLHN0YWNrU3RhcnRGdW5jdGlvbjppfSl9ZnVuY3Rpb24gYShlLHQpe2V8fG8oZSwhMCx0LFwiPT1cIixtLm9rKX1mdW5jdGlvbiBzKGUsdCl7aWYoZT09PXQpcmV0dXJuITA7aWYoZC5pc0J1ZmZlcihlKSYmZC5pc0J1ZmZlcih0KSl7aWYoZS5sZW5ndGghPXQubGVuZ3RoKXJldHVybiExO2Zvcih2YXIgbj0wO248ZS5sZW5ndGg7bisrKWlmKGVbbl0hPT10W25dKXJldHVybiExO3JldHVybiEwfXJldHVybiBkLmlzRGF0ZShlKSYmZC5pc0RhdGUodCk/ZS5nZXRUaW1lKCk9PT10LmdldFRpbWUoKTpkLmlzUmVnRXhwKGUpJiZkLmlzUmVnRXhwKHQpP2Uuc291cmNlPT09dC5zb3VyY2UmJmUuZ2xvYmFsPT09dC5nbG9iYWwmJmUubXVsdGlsaW5lPT09dC5tdWx0aWxpbmUmJmUubGFzdEluZGV4PT09dC5sYXN0SW5kZXgmJmUuaWdub3JlQ2FzZT09PXQuaWdub3JlQ2FzZTpkLmlzT2JqZWN0KGUpfHxkLmlzT2JqZWN0KHQpP3UoZSx0KTplPT10fWZ1bmN0aW9uIGwoZSl7cmV0dXJuXCJbb2JqZWN0IEFyZ3VtZW50c11cIj09T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGUpfWZ1bmN0aW9uIHUoZSx0KXtpZihkLmlzTnVsbE9yVW5kZWZpbmVkKGUpfHxkLmlzTnVsbE9yVW5kZWZpbmVkKHQpKXJldHVybiExO2lmKGUucHJvdG90eXBlIT09dC5wcm90b3R5cGUpcmV0dXJuITE7aWYoZC5pc1ByaW1pdGl2ZShlKXx8ZC5pc1ByaW1pdGl2ZSh0KSlyZXR1cm4gZT09PXQ7dmFyIG49bChlKSxyPWwodCk7aWYobiYmIXJ8fCFuJiZyKXJldHVybiExO2lmKG4pcmV0dXJuIGU9aC5jYWxsKGUpLHQ9aC5jYWxsKHQpLHMoZSx0KTt2YXIgaSxvLGE9ZyhlKSx1PWcodCk7aWYoYS5sZW5ndGghPXUubGVuZ3RoKXJldHVybiExO2ZvcihhLnNvcnQoKSx1LnNvcnQoKSxvPWEubGVuZ3RoLTE7bz49MDtvLS0paWYoYVtvXSE9dVtvXSlyZXR1cm4hMTtmb3Iobz1hLmxlbmd0aC0xO28+PTA7by0tKWlmKGk9YVtvXSwhcyhlW2ldLHRbaV0pKXJldHVybiExO3JldHVybiEwfWZ1bmN0aW9uIGMoZSx0KXtyZXR1cm4gZSYmdD9cIltvYmplY3QgUmVnRXhwXVwiPT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodCk/dC50ZXN0KGUpOmUgaW5zdGFuY2VvZiB0PyEwOnQuY2FsbCh7fSxlKT09PSEwPyEwOiExOiExfWZ1bmN0aW9uIGYoZSx0LG4scil7dmFyIGk7ZC5pc1N0cmluZyhuKSYmKHI9bixuPW51bGwpO3RyeXt0KCl9Y2F0Y2goYSl7aT1hfWlmKHI9KG4mJm4ubmFtZT9cIiAoXCIrbi5uYW1lK1wiKS5cIjpcIi5cIikrKHI/XCIgXCIrcjpcIi5cIiksZSYmIWkmJm8oaSxuLFwiTWlzc2luZyBleHBlY3RlZCBleGNlcHRpb25cIityKSwhZSYmYyhpLG4pJiZvKGksbixcIkdvdCB1bndhbnRlZCBleGNlcHRpb25cIityKSxlJiZpJiZuJiYhYyhpLG4pfHwhZSYmaSl0aHJvdyBpfXZhciBkPWUoXCJ1dGlsL1wiKSxoPUFycmF5LnByb3RvdHlwZS5zbGljZSxwPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksbT10LmV4cG9ydHM9YTttLkFzc2VydGlvbkVycm9yPWZ1bmN0aW9uKGUpe3RoaXMubmFtZT1cIkFzc2VydGlvbkVycm9yXCIsdGhpcy5hY3R1YWw9ZS5hY3R1YWwsdGhpcy5leHBlY3RlZD1lLmV4cGVjdGVkLHRoaXMub3BlcmF0b3I9ZS5vcGVyYXRvcixlLm1lc3NhZ2U/KHRoaXMubWVzc2FnZT1lLm1lc3NhZ2UsdGhpcy5nZW5lcmF0ZWRNZXNzYWdlPSExKToodGhpcy5tZXNzYWdlPWkodGhpcyksdGhpcy5nZW5lcmF0ZWRNZXNzYWdlPSEwKTt2YXIgdD1lLnN0YWNrU3RhcnRGdW5jdGlvbnx8bztpZihFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSlFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSh0aGlzLHQpO2Vsc2V7dmFyIG49bmV3IEVycm9yO2lmKG4uc3RhY2spe3ZhciByPW4uc3RhY2ssYT10Lm5hbWUscz1yLmluZGV4T2YoXCJcXG5cIithKTtpZihzPj0wKXt2YXIgbD1yLmluZGV4T2YoXCJcXG5cIixzKzEpO3I9ci5zdWJzdHJpbmcobCsxKX10aGlzLnN0YWNrPXJ9fX0sZC5pbmhlcml0cyhtLkFzc2VydGlvbkVycm9yLEVycm9yKSxtLmZhaWw9byxtLm9rPWEsbS5lcXVhbD1mdW5jdGlvbihlLHQsbil7ZSE9dCYmbyhlLHQsbixcIj09XCIsbS5lcXVhbCl9LG0ubm90RXF1YWw9ZnVuY3Rpb24oZSx0LG4pe2U9PXQmJm8oZSx0LG4sXCIhPVwiLG0ubm90RXF1YWwpfSxtLmRlZXBFcXVhbD1mdW5jdGlvbihlLHQsbil7cyhlLHQpfHxvKGUsdCxuLFwiZGVlcEVxdWFsXCIsbS5kZWVwRXF1YWwpfSxtLm5vdERlZXBFcXVhbD1mdW5jdGlvbihlLHQsbil7cyhlLHQpJiZvKGUsdCxuLFwibm90RGVlcEVxdWFsXCIsbS5ub3REZWVwRXF1YWwpfSxtLnN0cmljdEVxdWFsPWZ1bmN0aW9uKGUsdCxuKXtlIT09dCYmbyhlLHQsbixcIj09PVwiLG0uc3RyaWN0RXF1YWwpfSxtLm5vdFN0cmljdEVxdWFsPWZ1bmN0aW9uKGUsdCxuKXtlPT09dCYmbyhlLHQsbixcIiE9PVwiLG0ubm90U3RyaWN0RXF1YWwpfSxtLnRocm93cz1mdW5jdGlvbigpe2YuYXBwbHkodGhpcyxbITBdLmNvbmNhdChoLmNhbGwoYXJndW1lbnRzKSkpfSxtLmRvZXNOb3RUaHJvdz1mdW5jdGlvbigpe2YuYXBwbHkodGhpcyxbITFdLmNvbmNhdChoLmNhbGwoYXJndW1lbnRzKSkpfSxtLmlmRXJyb3I9ZnVuY3Rpb24oZSl7aWYoZSl0aHJvdyBlfTt2YXIgZz1PYmplY3Qua2V5c3x8ZnVuY3Rpb24oZSl7dmFyIHQ9W107Zm9yKHZhciBuIGluIGUpcC5jYWxsKGUsbikmJnQucHVzaChuKTtyZXR1cm4gdH19LHtcInV0aWwvXCI6NDV9XSwyOltmdW5jdGlvbigpe30se31dLDM6W2Z1bmN0aW9uKGUpeyFmdW5jdGlvbihlKXtmdW5jdGlvbiB0KHQpe3JldHVybiBlLmZ1bmN0aW9ucy5oc2xhKHQuaCx0LnMsdC5sLHQuYSl9ZnVuY3Rpb24gbih0KXtyZXR1cm4gdCBpbnN0YW5jZW9mIGUuRGltZW5zaW9uP3BhcnNlRmxvYXQoXCIlXCI9PXQudW5pdD90LnZhbHVlLzEwMDp0LnZhbHVlKTpcIm51bWJlclwiPT10eXBlb2YgdD90OjAvMH1mdW5jdGlvbiByKGUpe3JldHVybiBNYXRoLm1pbigxLE1hdGgubWF4KDAsZSkpfWUuZnVuY3Rpb25zPXtyZ2I6ZnVuY3Rpb24oZSx0LG4pe3JldHVybiB0aGlzLnJnYmEoZSx0LG4sMSl9LHJnYmE6ZnVuY3Rpb24odCxyLGksbyl7dmFyIGE9W3QscixpXS5tYXAoZnVuY3Rpb24oZSl7cmV0dXJuIG4oZSl9KTtyZXR1cm4gbz1uKG8pLGEuc29tZShpc05hTil8fGlzTmFOKG8pP251bGw6bmV3IGUuQ29sb3IoYSxvKX0sc3RvcDpmdW5jdGlvbihlKXt2YXIgdCxuO3JldHVybiBhcmd1bWVudHMubGVuZ3RoPjEmJih0PWFyZ3VtZW50c1sxXSksYXJndW1lbnRzLmxlbmd0aD4yJiYobj1hcmd1bWVudHNbMl0pLHtpczpcInRhZ1wiLHZhbDplLGNvbG9yOnQsbW9kZTpuLHRvU3RyaW5nOmZ1bmN0aW9uKHIpe3JldHVybidcXG5cdDxzdG9wIHZhbHVlPVwiJytlLmV2KHIpKydcIicrKHQ/JyBjb2xvcj1cIicrdC5ldihyKSsnXCIgJzpcIlwiKSsobj8nIG1vZGU9XCInK24uZXYocikrJ1wiICc6XCJcIikrXCIvPlwifX19LGhzbDpmdW5jdGlvbihlLHQsbil7cmV0dXJuIHRoaXMuaHNsYShlLHQsbiwxKX0saHNsYTpmdW5jdGlvbihlLHQscixpKXtmdW5jdGlvbiBvKGUpe3JldHVybiBlPTA+ZT9lKzE6ZT4xP2UtMTplLDE+NiplP3MrKGEtcykqZSo2OjE+MiplP2E6Mj4zKmU/cysoYS1zKSooMi8zLWUpKjY6c31pZihlPW4oZSklMzYwLzM2MCx0PW4odCkscj1uKHIpLGk9bihpKSxbZSx0LHIsaV0uc29tZShpc05hTikpcmV0dXJuIG51bGw7dmFyIGE9LjU+PXI/cioodCsxKTpyK3Qtcip0LHM9MipyLWE7cmV0dXJuIHRoaXMucmdiYSgyNTUqbyhlKzEvMyksMjU1Km8oZSksMjU1Km8oZS0xLzMpLGkpfSxodWU6ZnVuY3Rpb24odCl7cmV0dXJuXCJ0b0hTTFwiaW4gdD9uZXcgZS5EaW1lbnNpb24oTWF0aC5yb3VuZCh0LnRvSFNMKCkuaCkpOm51bGx9LHNhdHVyYXRpb246ZnVuY3Rpb24odCl7cmV0dXJuXCJ0b0hTTFwiaW4gdD9uZXcgZS5EaW1lbnNpb24oTWF0aC5yb3VuZCgxMDAqdC50b0hTTCgpLnMpLFwiJVwiKTpudWxsfSxsaWdodG5lc3M6ZnVuY3Rpb24odCl7cmV0dXJuXCJ0b0hTTFwiaW4gdD9uZXcgZS5EaW1lbnNpb24oTWF0aC5yb3VuZCgxMDAqdC50b0hTTCgpLmwpLFwiJVwiKTpudWxsfSxhbHBoYTpmdW5jdGlvbih0KXtyZXR1cm5cInRvSFNMXCJpbiB0P25ldyBlLkRpbWVuc2lvbih0LnRvSFNMKCkuYSk6bnVsbH0sc2F0dXJhdGU6ZnVuY3Rpb24oZSxuKXtpZighKFwidG9IU0xcImluIGUpKXJldHVybiBudWxsO3ZhciBpPWUudG9IU0woKTtyZXR1cm4gaS5zKz1uLnZhbHVlLzEwMCxpLnM9cihpLnMpLHQoaSl9LGRlc2F0dXJhdGU6ZnVuY3Rpb24oZSxuKXtpZighKFwidG9IU0xcImluIGUpKXJldHVybiBudWxsO3ZhciBpPWUudG9IU0woKTtyZXR1cm4gaS5zLT1uLnZhbHVlLzEwMCxpLnM9cihpLnMpLHQoaSl9LGxpZ2h0ZW46ZnVuY3Rpb24oZSxuKXtpZighKFwidG9IU0xcImluIGUpKXJldHVybiBudWxsO3ZhciBpPWUudG9IU0woKTtyZXR1cm4gaS5sKz1uLnZhbHVlLzEwMCxpLmw9cihpLmwpLHQoaSl9LGRhcmtlbjpmdW5jdGlvbihlLG4pe2lmKCEoXCJ0b0hTTFwiaW4gZSkpcmV0dXJuIG51bGw7dmFyIGk9ZS50b0hTTCgpO3JldHVybiBpLmwtPW4udmFsdWUvMTAwLGkubD1yKGkubCksdChpKX0sZmFkZWluOmZ1bmN0aW9uKGUsbil7aWYoIShcInRvSFNMXCJpbiBlKSlyZXR1cm4gbnVsbDt2YXIgaT1lLnRvSFNMKCk7cmV0dXJuIGkuYSs9bi52YWx1ZS8xMDAsaS5hPXIoaS5hKSx0KGkpfSxmYWRlb3V0OmZ1bmN0aW9uKGUsbil7aWYoIShcInRvSFNMXCJpbiBlKSlyZXR1cm4gbnVsbDt2YXIgaT1lLnRvSFNMKCk7cmV0dXJuIGkuYS09bi52YWx1ZS8xMDAsaS5hPXIoaS5hKSx0KGkpfSxzcGluOmZ1bmN0aW9uKGUsbil7aWYoIShcInRvSFNMXCJpbiBlKSlyZXR1cm4gbnVsbDt2YXIgcj1lLnRvSFNMKCksaT0oci5oK24udmFsdWUpJTM2MDtyZXR1cm4gci5oPTA+aT8zNjAraTppLHQocil9LHJlcGxhY2U6ZnVuY3Rpb24oZSx0LG4pe3JldHVyblwiZmllbGRcIj09PWUuaXM/ZS50b1N0cmluZytcIi5yZXBsYWNlKFwiK3QudG9TdHJpbmcoKStcIiwgXCIrbi50b1N0cmluZygpK1wiKVwiOmUucmVwbGFjZSh0LG4pfSxtaXg6ZnVuY3Rpb24odCxuLHIpe3ZhciBpPXIudmFsdWUvMTAwLG89MippLTEsYT10LnRvSFNMKCkuYS1uLnRvSFNMKCkuYSxzPSgobyphPT0tMT9vOihvK2EpLygxK28qYSkpKzEpLzIsbD0xLXMsdT1bdC5yZ2JbMF0qcytuLnJnYlswXSpsLHQucmdiWzFdKnMrbi5yZ2JbMV0qbCx0LnJnYlsyXSpzK24ucmdiWzJdKmxdLGM9dC5hbHBoYSppK24uYWxwaGEqKDEtaSk7cmV0dXJuIG5ldyBlLkNvbG9yKHUsYyl9LGdyZXlzY2FsZTpmdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5kZXNhdHVyYXRlKHQsbmV3IGUuRGltZW5zaW9uKDEwMCkpfSxcIiVcIjpmdW5jdGlvbih0KXtmb3IodmFyIG49QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLDEpLHI9dC52YWx1ZSxpPTA7aTxuLmxlbmd0aDtpKyspcj1yLnJlcGxhY2UoLyVzLyxuW2ldLnZhbHVlKS5yZXBsYWNlKC8lW2RhXS8sbltpXS50b1N0cmluZygpKTtyZXR1cm4gcj1yLnJlcGxhY2UoLyUlL2csXCIlXCIpLG5ldyBlLlF1b3RlZChyKX19O2Zvcih2YXIgaT1bXCJlbWJvc3NcIixcImJsdXJcIixcImdyYXlcIixcInNvYmVsXCIsXCJlZGdlLWRldGVjdFwiLFwieC1ncmFkaWVudFwiLFwieS1ncmFkaWVudFwiLFwic2hhcnBlblwiXSxvPTA7bzxpLmxlbmd0aDtvKyspe3ZhciBhPWlbb107ZS5mdW5jdGlvbnNbYV09ZnVuY3Rpb24odCl7cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIG5ldyBlLkltYWdlRmlsdGVyKHQpfX0oYSl9ZS5mdW5jdGlvbnNbXCJhZ2ctc3RhY2stYmx1clwiXT1mdW5jdGlvbih0LG4pe3JldHVybiBuZXcgZS5JbWFnZUZpbHRlcihcImFnZy1zdGFjay1ibHVyXCIsW3Qsbl0pfSxlLmZ1bmN0aW9uc1tcInNjYWxlLWhzbGFcIl09ZnVuY3Rpb24odCxuLHIsaSxvLGEscyxsKXtyZXR1cm4gbmV3IGUuSW1hZ2VGaWx0ZXIoXCJzY2FsZS1oc2xhXCIsW3QsbixyLGksbyxhLHMsbF0pfX0oZShcIi4vdHJlZVwiKSl9LHtcIi4vdHJlZVwiOjl9XSw0OltmdW5jdGlvbihlLHQsbil7KGZ1bmN0aW9uKHQscil7ZnVuY3Rpb24gaSgpe2lmKHQuYnJvd3NlcilyZXR1cm4gZShcIi4uLy4uL3BhY2thZ2UuanNvblwiKS52ZXJzaW9uLnNwbGl0KFwiLlwiKTtpZihwYXJzZUludCh0LnZlcnNpb24uc3BsaXQoXCIuXCIpWzFdLDEwKT40KXJldHVybiBlKFwiLi4vLi4vcGFja2FnZS5qc29uXCIpLnZlcnNpb24uc3BsaXQoXCIuXCIpO3ZhciBuPUpTT04ucGFyc2Uocy5yZWFkRmlsZVN5bmMobC5qb2luKHIsXCIuLi8uLi9wYWNrYWdlLmpzb25cIikpKTtyZXR1cm4gbi52ZXJzaW9uLnNwbGl0KFwiLlwiKX1mdW5jdGlvbiBvKGUsdCl7dmFyIG49e2JvbGQ6WzEsMjJdLGludmVyc2U6WzcsMjddLHVuZGVybGluZTpbNCwyNF0seWVsbG93OlszMywzOV0sZ3JlZW46WzMyLDM5XSxyZWQ6WzMxLDM5XSxncmV5Ols5MCwzOV19O3JldHVyblwiXHUwMDFiW1wiK25bdF1bMF0rXCJtXCIrZStcIlx1MDAxYltcIituW3RdWzFdK1wibVwifXZhciBhPWUoXCJ1dGlsXCIpLHM9ZShcImZzXCIpLGw9ZShcInBhdGhcIiksdT17dmVyc2lvbjppKCksUGFyc2VyOmUoXCIuL3BhcnNlclwiKS5QYXJzZXIsUmVuZGVyZXI6ZShcIi4vcmVuZGVyZXJcIikuUmVuZGVyZXIsdHJlZTplKFwiLi90cmVlXCIpLFJlbmRlcmVySlM6ZShcIi4vcmVuZGVyZXJfanNcIiksZGVmYXVsdF9yZWZlcmVuY2U6ZShcIi4vdG9ycXVlLXJlZmVyZW5jZVwiKSx3cml0ZUVycm9yOmZ1bmN0aW9uKGUsdCl7dmFyIG49XCJcIixyPWUuZXh0cmFjdCxpPVtdO2lmKHQ9dHx8e30sIXQuc2lsZW50KXtpZih0LmluZGVudD10LmluZGVudHx8XCJcIiwhKFwiaW5kZXhcImluIGUmJnIpKXJldHVybiBhLmVycm9yKHQuaW5kZW50KyhlLnN0YWNrfHxlLm1lc3NhZ2UpKTtcInN0cmluZ1wiPT10eXBlb2YgclswXSYmaS5wdXNoKG8oZS5saW5lLTErXCIgXCIrclswXSxcImdyZXlcIikpLFwiXCI9PT1yWzFdJiZcInVuZGVmaW5lZFwiPT10eXBlb2YgclsyXSYmKHJbMV09XCLCtlwiKSxpLnB1c2goZS5saW5lK1wiIFwiK3JbMV0uc2xpY2UoMCxlLmNvbHVtbikrbyhvKHJbMV1bZS5jb2x1bW5dLFwiYm9sZFwiKStyWzFdLnNsaWNlKGUuY29sdW1uKzEpLFwieWVsbG93XCIpKSxcInN0cmluZ1wiPT10eXBlb2YgclsyXSYmaS5wdXNoKG8oZS5saW5lKzErXCIgXCIrclsyXSxcImdyZXlcIikpLGk9dC5pbmRlbnQraS5qb2luKFwiXFxuXCIrdC5pbmRlbnQpK1wiXHUwMDFiWzBtXFxuXCIsbj10LmluZGVudCtuK28oZS5tZXNzYWdlLFwicmVkXCIpLGUuZmlsZW5hbWUmJihuKz1vKFwiIGluIFwiLFwicmVkXCIpK2UuZmlsZW5hbWUpLGEuZXJyb3IobixpKSxlLmNhbGxMaW5lJiYoYS5lcnJvcihvKFwiZnJvbSBcIixcInJlZFwiKSsoZS5maWxlbmFtZXx8XCJcIikpLGEuZXJyb3IobyhlLmNhbGxMaW5lLFwiZ3JleVwiKStcIiBcIitlLmNhbGxFeHRyYWN0KSksZS5zdGFjayYmYS5lcnJvcihvKGUuc3RhY2ssXCJyZWRcIikpfX19O2UoXCIuL3RyZWUvY2FsbFwiKSxlKFwiLi90cmVlL2NvbG9yXCIpLGUoXCIuL3RyZWUvY29tbWVudFwiKSxlKFwiLi90cmVlL2RlZmluaXRpb25cIiksZShcIi4vdHJlZS9kaW1lbnNpb25cIiksZShcIi4vdHJlZS9lbGVtZW50XCIpLGUoXCIuL3RyZWUvZXhwcmVzc2lvblwiKSxlKFwiLi90cmVlL2ZpbHRlcnNldFwiKSxlKFwiLi90cmVlL2ZpbHRlclwiKSxlKFwiLi90cmVlL2ZpZWxkXCIpLGUoXCIuL3RyZWUva2V5d29yZFwiKSxlKFwiLi90cmVlL2xheWVyXCIpLGUoXCIuL3RyZWUvbGl0ZXJhbFwiKSxlKFwiLi90cmVlL29wZXJhdGlvblwiKSxlKFwiLi90cmVlL3F1b3RlZFwiKSxlKFwiLi90cmVlL2ltYWdlZmlsdGVyXCIpLGUoXCIuL3RyZWUvcmVmZXJlbmNlXCIpLGUoXCIuL3RyZWUvcnVsZVwiKSxlKFwiLi90cmVlL3J1bGVzZXRcIiksZShcIi4vdHJlZS9zZWxlY3RvclwiKSxlKFwiLi90cmVlL3N0eWxlXCIpLGUoXCIuL3RyZWUvdXJsXCIpLGUoXCIuL3RyZWUvdmFsdWVcIiksZShcIi4vdHJlZS92YXJpYWJsZVwiKSxlKFwiLi90cmVlL3pvb21cIiksZShcIi4vdHJlZS9pbnZhbGlkXCIpLGUoXCIuL3RyZWUvZm9udHNldFwiKSxlKFwiLi90cmVlL2ZyYW1lX29mZnNldFwiKSxlKFwiLi9mdW5jdGlvbnNcIik7Zm9yKHZhciBjIGluIHUpbltjXT11W2NdfSkuY2FsbCh0aGlzLGUoXCJfcHJvY2Vzc1wiKSxcIi9ub2RlX21vZHVsZXMvY2FydG8vbGliL2NhcnRvXCIpfSx7XCIuLi8uLi9wYWNrYWdlLmpzb25cIjozOCxcIi4vZnVuY3Rpb25zXCI6MyxcIi4vcGFyc2VyXCI6NSxcIi4vcmVuZGVyZXJcIjo2LFwiLi9yZW5kZXJlcl9qc1wiOjcsXCIuL3RvcnF1ZS1yZWZlcmVuY2VcIjo4LFwiLi90cmVlXCI6OSxcIi4vdHJlZS9jYWxsXCI6MTAsXCIuL3RyZWUvY29sb3JcIjoxMSxcIi4vdHJlZS9jb21tZW50XCI6MTIsXCIuL3RyZWUvZGVmaW5pdGlvblwiOjEzLFwiLi90cmVlL2RpbWVuc2lvblwiOjE0LFwiLi90cmVlL2VsZW1lbnRcIjoxNSxcIi4vdHJlZS9leHByZXNzaW9uXCI6MTYsXCIuL3RyZWUvZmllbGRcIjoxNyxcIi4vdHJlZS9maWx0ZXJcIjoxOCxcIi4vdHJlZS9maWx0ZXJzZXRcIjoxOSxcIi4vdHJlZS9mb250c2V0XCI6MjAsXCIuL3RyZWUvZnJhbWVfb2Zmc2V0XCI6MjEsXCIuL3RyZWUvaW1hZ2VmaWx0ZXJcIjoyMixcIi4vdHJlZS9pbnZhbGlkXCI6MjMsXCIuL3RyZWUva2V5d29yZFwiOjI0LFwiLi90cmVlL2xheWVyXCI6MjUsXCIuL3RyZWUvbGl0ZXJhbFwiOjI2LFwiLi90cmVlL29wZXJhdGlvblwiOjI3LFwiLi90cmVlL3F1b3RlZFwiOjI4LFwiLi90cmVlL3JlZmVyZW5jZVwiOjI5LFwiLi90cmVlL3J1bGVcIjozMCxcIi4vdHJlZS9ydWxlc2V0XCI6MzEsXCIuL3RyZWUvc2VsZWN0b3JcIjozMixcIi4vdHJlZS9zdHlsZVwiOjMzLFwiLi90cmVlL3VybFwiOjM0LFwiLi90cmVlL3ZhbHVlXCI6MzUsXCIuL3RyZWUvdmFyaWFibGVcIjozNixcIi4vdHJlZS96b29tXCI6MzcsX3Byb2Nlc3M6NDEsZnM6MixwYXRoOjQwLHV0aWw6NDV9XSw1OltmdW5jdGlvbihlLHQsbil7KGZ1bmN0aW9uKHQpe3ZhciByPW4saT1lKFwiLi90cmVlXCIpLG89dC5ffHxlKFwidW5kZXJzY29yZVwiKTtyLlBhcnNlcj1mdW5jdGlvbihlKXtmdW5jdGlvbiB0KCl7aD1nW2RdLHA9Zix2PWZ9ZnVuY3Rpb24gbigpe2dbZF09aCxmPXAsdj1mfWZ1bmN0aW9uIHIoKXtmPnYmJihnW2RdPWdbZF0uc2xpY2UoZi12KSx2PWYpfWZ1bmN0aW9uIGEoZSl7dmFyIHQsbixpLG87aWYoZSBpbnN0YW5jZW9mIEZ1bmN0aW9uKXJldHVybiBlLmNhbGwoeS5wYXJzZXJzKTtpZihcInN0cmluZ1wiPT10eXBlb2YgZSl0PWMuY2hhckF0KGYpPT09ZT9lOm51bGwsbj0xLHIoKTtlbHNle2lmKHIoKSx0PWUuZXhlYyhnW2RdKSwhdClyZXR1cm4gbnVsbDtuPXRbMF0ubGVuZ3RofWlmKHQpe3ZhciBhPWYrPW47Zm9yKG89ZitnW2RdLmxlbmd0aC1uO28+ZiYmKGk9Yy5jaGFyQ29kZUF0KGYpLDMyPT09aXx8MTA9PT1pfHw5PT09aSk7KWYrKztyZXR1cm4gZ1tkXT1nW2RdLnNsaWNlKG4rKGYtYSkpLHY9ZiwwPT09Z1tkXS5sZW5ndGgmJmQ8Zy5sZW5ndGgtMSYmZCsrLFwic3RyaW5nXCI9PXR5cGVvZiB0P3Q6MT09PXQubGVuZ3RoP3RbMF06dH19ZnVuY3Rpb24gcyhlKXtyZXR1cm5cInN0cmluZ1wiPT10eXBlb2YgZT9jLmNoYXJBdChmKT09PWU6ISFlLnRlc3QoZ1tkXSl9ZnVuY3Rpb24gbChlLHQpe3JldHVybihlLnNsaWNlKDAsdCkubWF0Y2goL1xcbi9nKXx8XCJcIikubGVuZ3RoKzF9ZnVuY3Rpb24gdSh0KXt2YXIgbixyO28uZGVmYXVsdHModCx7aW5kZXg6bSxmaWxlbmFtZTplLmZpbGVuYW1lLG1lc3NhZ2U6XCJQYXJzZSBlcnJvci5cIixsaW5lOjAsY29sdW1uOi0xfSksbj10LmZpbGVuYW1lJiZiLmVudi5pbnB1dHMmJmIuZW52LmlucHV0c1t0LmZpbGVuYW1lXT9iLmVudi5pbnB1dHNbdC5maWxlbmFtZV06Yyx0LmxpbmU9bChuLHQuaW5kZXgpO2Zvcih2YXIgaT10LmluZGV4O2k+PTAmJlwiXFxuXCIhPT1uLmNoYXJBdChpKTtpLS0pdC5jb2x1bW4rKztyZXR1cm4gcj1vLnRlbXBsYXRlKFwiPCU9ZmlsZW5hbWUlPjo8JT1saW5lJT46PCU9Y29sdW1uJT4gPCU9bWVzc2FnZSU+XCIpLG5ldyBFcnJvcihyKHQpKX12YXIgYyxmLGQsaCxwLG0sZyx2LHksYj10aGlzO3JldHVybiB0aGlzLmVudj1lPWV8fHt9LHRoaXMuZW52LmZpbGVuYW1lPXRoaXMuZW52LmZpbGVuYW1lfHxudWxsLHRoaXMuZW52LmlucHV0cz10aGlzLmVudi5pbnB1dHN8fHt9LHk9e2V4dHJhY3RFcnJvckxpbmU6bCxwYXJzZTpmdW5jdGlvbih0KXt2YXIgbixyPW51bGw7Zj1kPXY9bT0wLGc9W10sYz10LnJlcGxhY2UoL1xcclxcbi9nLFwiXFxuXCIpLGUuZmlsZW5hbWUmJihiLmVudi5pbnB1dHNbZS5maWxlbmFtZV09Yyk7aWYoZz1mdW5jdGlvbihlKXtmb3IodmFyIHQsbixpLG8sYT0wLHM9Lyg/OkBcXHtbXFx3LV0rXFx9fFteXCInYFxce1xcfVxcL1xcKFxcKVxcXFxdKSsvZyxsPS9cXC9cXCooPzpbXipdfFxcKitbXlxcLypdKSpcXCorXFwvfFxcL1xcLy4qL2csdT0vXCIoKD86W15cIlxcXFxcXHJcXG5dfFxcXFwuKSopXCJ8JygoPzpbXidcXFxcXFxyXFxuXXxcXFxcLikqKSd8YCgoPzpbXmBdfFxcXFwuKSopYC9nLGY9MCxkPWVbMF0saD0wO2g8Yy5sZW5ndGg7KWlmKHMubGFzdEluZGV4PWgsKHQ9cy5leGVjKGMpKSYmdC5pbmRleD09PWgmJihoKz10WzBdLmxlbmd0aCxkLnB1c2godFswXSkpLGk9Yy5jaGFyQXQoaCksbC5sYXN0SW5kZXg9dS5sYXN0SW5kZXg9aCwodD11LmV4ZWMoYykpJiZ0LmluZGV4PT09aCloKz10WzBdLmxlbmd0aCxkLnB1c2godFswXSk7ZWxzZSBpZihufHxcIi9cIiE9PWl8fChvPWMuY2hhckF0KGgrMSksXCIvXCIhPT1vJiZcIipcIiE9PW98fCEodD1sLmV4ZWMoYykpfHx0LmluZGV4IT09aCkpe3N3aXRjaChpKXtjYXNlXCJ7XCI6aWYoIW4pe2YrKyxkLnB1c2goaSk7YnJlYWt9Y2FzZVwifVwiOmlmKCFuKXtmLS0sZC5wdXNoKGkpLGVbKythXT1kPVtdO2JyZWFrfWNhc2VcIihcIjppZighbil7bj0hMCxkLnB1c2goaSk7YnJlYWt9Y2FzZVwiKVwiOmlmKG4pe249ITEsZC5wdXNoKGkpO2JyZWFrfWRlZmF1bHQ6ZC5wdXNoKGkpfWgrK31lbHNlIGgrPXRbMF0ubGVuZ3RoLGQucHVzaCh0WzBdKTtyZXR1cm4gMCE9PWYmJihyPXtpbmRleDpoLTEsdHlwZTpcIlBhcnNlXCIsbWVzc2FnZTpmPjA/XCJtaXNzaW5nIGNsb3NpbmcgYH1gXCI6XCJtaXNzaW5nIG9wZW5pbmcgYHtgXCJ9KSxlLm1hcChmdW5jdGlvbihlKXtyZXR1cm4gZS5qb2luKFwiXCIpfSl9KFtbXV0pLHIpdGhyb3cgdShyKTtuPW5ldyBpLlJ1bGVzZXQoW10sYSh0aGlzLnBhcnNlcnMucHJpbWFyeSkpLG4ucm9vdD0hMCxuLnRvTGlzdD1mdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbihlKXtlLmVycm9yPWZ1bmN0aW9uKHQpe2UuZXJyb3JzfHwoZS5lcnJvcnM9bmV3IEVycm9yKFwiXCIpKSxlLmVycm9ycy5tZXNzYWdlP2UuZXJyb3JzLm1lc3NhZ2UrPVwiXFxuXCIrdSh0KS5tZXNzYWdlOmUuZXJyb3JzLm1lc3NhZ2U9dSh0KS5tZXNzYWdlfSxlLmZyYW1lcz1lLmZyYW1lc3x8W107dmFyIHQ9dGhpcy5mbGF0dGVuKFtdLFtdLGUpO3JldHVybiB0LnNvcnQobyksdH19KCk7dmFyIG89ZnVuY3Rpb24oZSx0KXt2YXIgbj1lLnNwZWNpZmljaXR5LHI9dC5zcGVjaWZpY2l0eTtyZXR1cm4gblswXSE9clswXT9yWzBdLW5bMF06blsxXSE9clsxXT9yWzFdLW5bMV06blsyXSE9clsyXT9yWzJdLW5bMl06clszXS1uWzNdfTtyZXR1cm4gbn0scGFyc2Vyczp7cHJpbWFyeTpmdW5jdGlvbigpe2Zvcih2YXIgZSx0PVtdOyhlPWEodGhpcy5ydWxlKXx8YSh0aGlzLnJ1bGVzZXQpfHxhKHRoaXMuY29tbWVudCkpfHxhKC9eW1xcc1xcbl0rLyl8fChlPWEodGhpcy5pbnZhbGlkKSk7KWUmJnQucHVzaChlKTtyZXR1cm4gdH0saW52YWxpZDpmdW5jdGlvbigpe3ZhciBlPWEoL15bXjtcXG5dKls7XFxuXS8pO3JldHVybiBlP25ldyBpLkludmFsaWQoZSxwKTp2b2lkIDB9LGNvbW1lbnQ6ZnVuY3Rpb24oKXt2YXIgZTtpZihcIi9cIj09PWMuY2hhckF0KGYpKXJldHVyblwiL1wiPT09Yy5jaGFyQXQoZisxKT9uZXcgaS5Db21tZW50KGEoL15cXC9cXC8uKi8pLCEwKTooZT1hKC9eXFwvXFwqKD86W14qXXxcXCorW15cXC8qXSkqXFwqK1xcL1xcbj8vKSk/bmV3IGkuQ29tbWVudChlKTp2b2lkIDB9LGVudGl0aWVzOntxdW90ZWQ6ZnVuY3Rpb24oKXtpZignXCInPT09Yy5jaGFyQXQoZil8fFwiJ1wiPT09Yy5jaGFyQXQoZikpe3ZhciBlPWEoL15cIigoPzpbXlwiXFxcXFxcclxcbl18XFxcXC4pKilcInwnKCg/OlteJ1xcXFxcXHJcXG5dfFxcXFwuKSopJy8pO3JldHVybiBlP25ldyBpLlF1b3RlZChlWzFdfHxlWzJdKTp2b2lkIDB9fSxmaWVsZDpmdW5jdGlvbigpe2lmKGEoXCJbXCIpKXt2YXIgZT1hKC8oXlteXFxdXSspLyk7aWYoYShcIl1cIikpcmV0dXJuIGU/bmV3IGkuRmllbGQoZVsxXSk6dm9pZCAwfX0sY29tcGFyaXNvbjpmdW5jdGlvbigpe3ZhciBlPWEoL149fnw9fCE9fDw9fD49fDx8Pi8pO3JldHVybiBlP2U6dm9pZCAwfSxrZXl3b3JkOmZ1bmN0aW9uKCl7dmFyIGU9YSgvXltBLVphLXotXStbQS1aYS16LTAtOV9dKi8pO3JldHVybiBlP25ldyBpLktleXdvcmQoZSk6dm9pZCAwfSxjYWxsOmZ1bmN0aW9uKCl7dmFyIGUsdDtpZihlPS9eKFtcXHdcXC1dK3wlKVxcKC8uZXhlYyhnW2RdKSl7aWYoZT1lWzFdLFwidXJsXCI9PT1lKXJldHVybiBudWxsO2lmKGYrPWUubGVuZ3RoLGEoXCIoXCIpLHQ9YSh0aGlzLmVudGl0aWVzLmFyZ3VtZW50cyksYShcIilcIikpcmV0dXJuIGU/bmV3IGkuQ2FsbChlLHQsZik6dm9pZCAwfX0sYXJndW1lbnRzOmZ1bmN0aW9uKCl7Zm9yKHZhciBlLHQ9W107KGU9YSh0aGlzLmV4cHJlc3Npb24pKSYmKHQucHVzaChlKSxhKFwiLFwiKSk7KTtyZXR1cm4gdH0sbGl0ZXJhbDpmdW5jdGlvbigpe3JldHVybiBhKHRoaXMuZW50aXRpZXMuZGltZW5zaW9uKXx8YSh0aGlzLmVudGl0aWVzLmtleXdvcmRjb2xvcil8fGEodGhpcy5lbnRpdGllcy5oZXhjb2xvcil8fGEodGhpcy5lbnRpdGllcy5xdW90ZWQpfSx1cmw6ZnVuY3Rpb24oKXt2YXIgZTtpZihcInVcIj09PWMuY2hhckF0KGYpJiZhKC9edXJsXFwoLykpcmV0dXJuIGU9YSh0aGlzLmVudGl0aWVzLnF1b3RlZCl8fGEodGhpcy5lbnRpdGllcy52YXJpYWJsZSl8fGEoL15bXFwtXFx3JUAkXFwvLiY9OjsjKz9+XSsvKXx8XCJcIixhKFwiKVwiKT9uZXcgaS5VUkwoXCJ1bmRlZmluZWRcIiE9dHlwZW9mIGUudmFsdWV8fGUgaW5zdGFuY2VvZiBpLlZhcmlhYmxlP2U6bmV3IGkuUXVvdGVkKGUpKTpuZXcgaS5JbnZhbGlkKGUscCxcIk1pc3NpbmcgY2xvc2luZyApIGluIFVSTC5cIil9LHZhcmlhYmxlOmZ1bmN0aW9uKCl7dmFyIHQsbj1mO3JldHVyblwiQFwiPT09Yy5jaGFyQXQoZikmJih0PWEoL15AW1xcdy1dKy8pKT9uZXcgaS5WYXJpYWJsZSh0LG4sZS5maWxlbmFtZSk6dm9pZCAwfSxoZXhjb2xvcjpmdW5jdGlvbigpe3ZhciBlO3JldHVyblwiI1wiPT09Yy5jaGFyQXQoZikmJihlPWEoL14jKFthLWZBLUYwLTldezZ9fFthLWZBLUYwLTldezN9KS8pKT9uZXcgaS5Db2xvcihlWzFdKTp2b2lkIDB9LGtleXdvcmRjb2xvcjpmdW5jdGlvbigpe3ZhciBlPWdbZF0ubWF0Y2goL15bYS16XSsvKTtyZXR1cm4gZSYmZVswXWluIGkuUmVmZXJlbmNlLmRhdGEuY29sb3JzP25ldyBpLkNvbG9yKGkuUmVmZXJlbmNlLmRhdGEuY29sb3JzW2EoL15bYS16XSsvKV0pOnZvaWQgMH0sZGltZW5zaW9uOmZ1bmN0aW9uKCl7dmFyIGU9Yy5jaGFyQ29kZUF0KGYpO2lmKCEoZT41N3x8NDU+ZXx8NDc9PT1lKSl7dmFyIHQ9YSgvXigtP1xcZCpcXC4/XFxkKyg/OltlRV1bLStdP1xcZCspPykoXFwlfFxcdyspPy8pO3JldHVybiB0P25ldyBpLkRpbWVuc2lvbih0WzFdLHRbMl0scCk6dm9pZCAwfX19LHZhcmlhYmxlOmZ1bmN0aW9uKCl7dmFyIGU7cmV0dXJuXCJAXCI9PT1jLmNoYXJBdChmKSYmKGU9YSgvXihAW1xcdy1dKylcXHMqOi8pKT9lWzFdOnZvaWQgMH0sZW50aXR5OmZ1bmN0aW9uKCl7cmV0dXJuIGEodGhpcy5lbnRpdGllcy5jYWxsKXx8YSh0aGlzLmVudGl0aWVzLmxpdGVyYWwpfHxhKHRoaXMuZW50aXRpZXMuZmllbGQpfHxhKHRoaXMuZW50aXRpZXMudmFyaWFibGUpfHxhKHRoaXMuZW50aXRpZXMudXJsKXx8YSh0aGlzLmVudGl0aWVzLmtleXdvcmQpfSxlbmQ6ZnVuY3Rpb24oKXtyZXR1cm4gYShcIjtcIil8fHMoXCJ9XCIpfSxlbGVtZW50OmZ1bmN0aW9uKCl7dmFyIGU9YSgvXig/OlsuI11bXFx3XFwtXSt8XFwqfE1hcCkvKTtyZXR1cm4gZT9uZXcgaS5FbGVtZW50KGUpOnZvaWQgMH0sYXR0YWNobWVudDpmdW5jdGlvbigpe3ZhciBlPWEoL146OihbXFx3XFwtXSsoPzpcXC9bXFx3XFwtXSspKikvKTtyZXR1cm4gZT9lWzFdOnZvaWQgMH0sc2VsZWN0b3I6ZnVuY3Rpb24oKXt2YXIgZSx0LG4scixvLHM9W10sbD1uZXcgaS5GaWx0ZXJzZXQsZD1bXSxoPWkuRnJhbWVPZmZzZXQubm9uZTtmb3Ioc2VnbWVudHM9MCxjb25kaXRpb25zPTA7KG49YSh0aGlzLmVsZW1lbnQpKXx8KG89YSh0aGlzLnpvb20pKXx8KGZvPWEodGhpcy5mcmFtZV9vZmZzZXQpKXx8KHI9YSh0aGlzLmZpbHRlcikpfHwoZT1hKHRoaXMuYXR0YWNobWVudCkpOyl7aWYoc2VnbWVudHMrKyxuKXMucHVzaChuKTtlbHNlIGlmKG8pZC5wdXNoKG8pLGNvbmRpdGlvbnMrKztlbHNlIGlmKGZvKWg9Zm8sY29uZGl0aW9ucysrO2Vsc2UgaWYocil7dmFyIG09bC5hZGQocik7aWYobSl0aHJvdyB1KHttZXNzYWdlOm0saW5kZXg6Zi0xfSk7Y29uZGl0aW9ucysrfWVsc2V7aWYodCl0aHJvdyB1KHttZXNzYWdlOlwiRW5jb3VudGVyZWQgc2Vjb25kIGF0dGFjaG1lbnQgbmFtZS5cIixpbmRleDpmLTF9KTt0PWV9dmFyIGc9Yy5jaGFyQXQoZik7aWYoXCJ7XCI9PT1nfHxcIn1cIj09PWd8fFwiO1wiPT09Z3x8XCIsXCI9PT1nKWJyZWFrfXJldHVybiBzZWdtZW50cz9uZXcgaS5TZWxlY3RvcihsLGQsaCxzLHQsY29uZGl0aW9ucyxwKTp2b2lkIDB9LGZpbHRlcjpmdW5jdGlvbigpe3QoKTt2YXIgbixyLG87aWYoYShcIltcIikmJihuPWEoL15bYS16QS1aMC05XFwtX10rLyl8fGEodGhpcy5lbnRpdGllcy5xdW90ZWQpfHxhKHRoaXMuZW50aXRpZXMudmFyaWFibGUpfHxhKHRoaXMuZW50aXRpZXMua2V5d29yZCl8fGEodGhpcy5lbnRpdGllcy5maWVsZCkpJiYobiBpbnN0YW5jZW9mIGkuUXVvdGVkJiYobj1uZXcgaS5GaWVsZChuLnRvU3RyaW5nKCkpKSwocj1hKHRoaXMuZW50aXRpZXMuY29tcGFyaXNvbikpJiYobz1hKHRoaXMuZW50aXRpZXMucXVvdGVkKXx8YSh0aGlzLmVudGl0aWVzLnZhcmlhYmxlKXx8YSh0aGlzLmVudGl0aWVzLmRpbWVuc2lvbil8fGEodGhpcy5lbnRpdGllcy5rZXl3b3JkKXx8YSh0aGlzLmVudGl0aWVzLmZpZWxkKSkpKXtpZighYShcIl1cIikpdGhyb3cgdSh7bWVzc2FnZTpcIk1pc3NpbmcgY2xvc2luZyBdIG9mIGZpbHRlci5cIixpbmRleDpwLTF9KTtyZXR1cm4gbi5pc3x8KG49bmV3IGkuRmllbGQobikpLG5ldyBpLkZpbHRlcihuLHIsbyxwLGUuZmlsZW5hbWUpfX0sZnJhbWVfb2Zmc2V0OmZ1bmN0aW9uKCl7dCgpO3ZhciBlLG47cmV0dXJuIGEoL15cXFtcXHMqZnJhbWUtb2Zmc2V0L2cpJiYoZT1hKHRoaXMuZW50aXRpZXMuY29tcGFyaXNvbikpJiYobj1hKC9eXFxkKy8pKSYmYShcIl1cIik/aS5GcmFtZU9mZnNldChlLG4scCk6dm9pZCAwfSx6b29tOmZ1bmN0aW9uKCl7dCgpO3ZhciBlLHI7cmV0dXJuIGEoL15cXFtcXHMqem9vbS9nKSYmKGU9YSh0aGlzLmVudGl0aWVzLmNvbXBhcmlzb24pKSYmKHI9YSh0aGlzLmVudGl0aWVzLnZhcmlhYmxlKXx8YSh0aGlzLmVudGl0aWVzLmRpbWVuc2lvbikpJiZhKFwiXVwiKT9uZXcgaS5ab29tKGUscixwKTp2b2lkIG4oKX0sYmxvY2s6ZnVuY3Rpb24oKXt2YXIgZTtyZXR1cm4gYShcIntcIikmJihlPWEodGhpcy5wcmltYXJ5KSkmJmEoXCJ9XCIpP2U6dm9pZCAwfSxydWxlc2V0OmZ1bmN0aW9uKCl7dmFyIGUscixvPVtdO2Zvcih0KCk7ZT1hKHRoaXMuc2VsZWN0b3IpOyl7Zm9yKG8ucHVzaChlKTthKHRoaXMuY29tbWVudCk7KTtpZighYShcIixcIikpYnJlYWs7Zm9yKDthKHRoaXMuY29tbWVudCk7KTt9aWYoZSlmb3IoO2EodGhpcy5jb21tZW50KTspO2lmKG8ubGVuZ3RoPjAmJihyPWEodGhpcy5ibG9jaykpKXtpZigxPT09by5sZW5ndGgmJm9bMF0uZWxlbWVudHMubGVuZ3RoJiZcIk1hcFwiPT09b1swXS5lbGVtZW50c1swXS52YWx1ZSl7dmFyIHM9bmV3IGkuUnVsZXNldChvLHIpO3JldHVybiBzLmlzTWFwPSEwLHN9cmV0dXJuIG5ldyBpLlJ1bGVzZXQobyxyKX1uKCl9LHJ1bGU6ZnVuY3Rpb24oKXt2YXIgcixvLHM9Yy5jaGFyQXQoZik7aWYodCgpLFwiLlwiIT09cyYmXCIjXCIhPT1zJiYocj1hKHRoaXMudmFyaWFibGUpfHxhKHRoaXMucHJvcGVydHkpKSl7aWYobz1hKHRoaXMudmFsdWUpLG8mJmEodGhpcy5lbmQpKXJldHVybiBuZXcgaS5SdWxlKHIsbyxwLGUuZmlsZW5hbWUpO209ZixuKCl9fSxmb250OmZ1bmN0aW9uKCl7Zm9yKHZhciBlLHQ9W10sbj1bXTtlPWEodGhpcy5lbnRpdHkpOyluLnB1c2goZSk7aWYodC5wdXNoKG5ldyBpLkV4cHJlc3Npb24obikpLGEoXCIsXCIpKWZvcig7KGU9YSh0aGlzLmV4cHJlc3Npb24pKSYmKHQucHVzaChlKSxhKFwiLFwiKSk7KTtyZXR1cm4gbmV3IGkuVmFsdWUodCl9LHZhbHVlOmZ1bmN0aW9uKCl7Zm9yKHZhciBlLHQ9W107KGU9YSh0aGlzLmV4cHJlc3Npb24pKSYmKHQucHVzaChlKSxhKFwiLFwiKSk7KTtyZXR1cm4gdC5sZW5ndGg+MT9uZXcgaS5WYWx1ZSh0Lm1hcChmdW5jdGlvbihlKXtyZXR1cm4gZS52YWx1ZVswXX0pKToxPT09dC5sZW5ndGg/bmV3IGkuVmFsdWUodCk6dm9pZCAwfSxzdWI6ZnVuY3Rpb24oKXt2YXIgZSx0PVtdO2lmKGEoXCIoXCIpKXtmb3IoOyhlPWEodGhpcy5leHByZXNzaW9uKSkmJih0LnB1c2goZSksYShcIixcIikpOyk7YShcIilcIil9cmV0dXJuIHQubGVuZ3RoPjE/bmV3IGkuVmFsdWUodC5tYXAoZnVuY3Rpb24oZSl7cmV0dXJuIGUudmFsdWVbMF19KSk6MT09PXQubGVuZ3RoP25ldyBpLlZhbHVlKHQpOnZvaWQgMH0sbXVsdGlwbGljYXRpb246ZnVuY3Rpb24oKXt2YXIgZSx0LG4scjtpZihlPWEodGhpcy5vcGVyYW5kKSl7Zm9yKDsobj1hKFwiL1wiKXx8YShcIipcIil8fGEoXCIlXCIpKSYmKHQ9YSh0aGlzLm9wZXJhbmQpKTspcj1uZXcgaS5PcGVyYXRpb24obixbcnx8ZSx0XSxwKTtyZXR1cm4gcnx8ZX19LGFkZGl0aW9uOmZ1bmN0aW9uKCl7dmFyIGUsdCxuLHI7aWYoZT1hKHRoaXMubXVsdGlwbGljYXRpb24pKXtmb3IoOyhuPWEoL15bLStdXFxzKy8pfHxcIiBcIiE9Yy5jaGFyQXQoZi0xKSYmKGEoXCIrXCIpfHxhKFwiLVwiKSkpJiYodD1hKHRoaXMubXVsdGlwbGljYXRpb24pKTspcj1uZXcgaS5PcGVyYXRpb24obixbcnx8ZSx0XSxwKTtyZXR1cm4gcnx8ZX19LG9wZXJhbmQ6ZnVuY3Rpb24oKXtyZXR1cm4gYSh0aGlzLnN1Yil8fGEodGhpcy5lbnRpdHkpfSxleHByZXNzaW9uOmZ1bmN0aW9uKCl7Zm9yKHZhciBlLHQ9W107ZT1hKHRoaXMuYWRkaXRpb24pfHxhKHRoaXMuZW50aXR5KTspdC5wdXNoKGUpO3JldHVybiB0Lmxlbmd0aD4wP25ldyBpLkV4cHJlc3Npb24odCk6dm9pZCAwfSxwcm9wZXJ0eTpmdW5jdGlvbigpe3ZhciBlPWEoL14oKFthLXpdWy1hLXpfMC05XSpcXC8pP1xcKj8tP1stYS16XzAtOV0rKVxccyo6Lyk7cmV0dXJuIGU/ZVsxXTp2b2lkIDB9fX19fSkuY2FsbCh0aGlzLFwidW5kZWZpbmVkXCIhPXR5cGVvZiBnbG9iYWw/Z2xvYmFsOlwidW5kZWZpbmVkXCIhPXR5cGVvZiBzZWxmP3NlbGY6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdz93aW5kb3c6e30pfSx7XCIuL3RyZWVcIjo5LHVuZGVyc2NvcmU6NDJ9XSw2OltmdW5jdGlvbihlLHQpeyhmdW5jdGlvbihuKXtmdW5jdGlvbiByKGUsdCxuKXtmb3IodmFyIHIsaSxvLGE9dC5maWx0ZXJzLHM9dC5ydWxlcyxsPTA7bDxlLmxlbmd0aDtsKyspcj1lW2xdLmZpbHRlcnMuY2xvbmVXaXRoKGEpLHI/KG89bltyXSxvP28uYWRkUnVsZXMocyk6KGk9ZVtsXS5jbG9uZShyKSxpLmFkZFJ1bGVzKHMpJiYobltyXT1pLGUuc3BsaWNlKGwsMCxpKSxsKyspKSk6bnVsbD09PXImJihlW2xdPWVbbF0uY2xvbmUoKSxlW2xdLmFkZFJ1bGVzKHMpKTtyZXR1cm4gZX1mdW5jdGlvbiBpKGUsdCl7dmFyIG4saSxvPStuZXcgRGF0ZSxhPXt9LHM9e30sbD1bXTtlLmZvckVhY2goZnVuY3Rpb24oZSl7ZS5maWx0ZXJzLmV2KHQpfSk7Zm9yKHZhciB1PTA7dTxlLmxlbmd0aDt1Kyspe2k9ZVt1XS5hdHRhY2htZW50LG49W2VbdV1dLGFbaV18fChhW2ldPVtdLGFbaV0uYXR0YWNobWVudD1pLHNbaV09e30sbC5wdXNoKGFbaV0pKTtmb3IodmFyIGM9dSsxO2M8ZS5sZW5ndGg7YysrKWVbY10uYXR0YWNobWVudD09PWkmJihuPXIobixlW2NdLHNbaV0sdCkpO2Zvcih2YXIgZj0wO2Y8bi5sZW5ndGg7ZisrKXNbaV1bbltmXS5maWx0ZXJzXT1uW2ZdLGFbaV0ucHVzaChuW2ZdKX1yZXR1cm4gdC5iZW5jaG1hcmsmJmNvbnNvbGUud2FybihcIkluaGVyaXRhbmNlIHRpbWU6IFwiKyhuZXcgRGF0ZS1vKStcIm1zXCIpLGx9ZnVuY3Rpb24gbyhlLHQpe3JldHVybiB0LmluZGV4LWUuaW5kZXh9ZnVuY3Rpb24gYShlKXtmb3IodmFyIHQ9MDt0PGUubGVuZ3RoO3QrKyl7dmFyIG49ZVt0XTtuLmluZGV4PTEvMDtmb3IodmFyIHI9MDtyPG4ubGVuZ3RoO3IrKylmb3IodmFyIGk9bltyXS5ydWxlcyxhPTA7YTxpLmxlbmd0aDthKyspe3ZhciBzPWlbYV07cy5pbmRleDxuLmluZGV4JiYobi5pbmRleD1zLmluZGV4KX19dmFyIGw9ZS5zbGljZSgpO3JldHVybiBsLnNvcnQobyksbH1mdW5jdGlvbiBzKGUsdCxuKXt2YXIgcj17fSxpPXUudHJlZS5SZWZlcmVuY2UuZGF0YS5zeW1ib2xpemVycy5tYXA7cmV0dXJuIGwoZSkuZWFjaChmdW5jdGlvbihlLHQpe3QgaW4gaSYmKHJbdF09dCsnPVwiJytlKydcIicpfSksdC5maWx0ZXIoZnVuY3Rpb24oZSl7cmV0dXJuXCJNYXBcIj09PWUuZWxlbWVudHMuam9pbihcIlwiKX0pLmZvckVhY2goZnVuY3Rpb24oZSl7Zm9yKHZhciB0PTA7dDxlLnJ1bGVzLmxlbmd0aDt0Kyspe3ZhciBvPWUucnVsZXNbdF0ubmFtZTtvIGluIGl8fG4uZXJyb3Ioe21lc3NhZ2U6XCJSdWxlIFwiK28rXCIgbm90IGFsbG93ZWQgZm9yIE1hcC5cIixpbmRleDplLnJ1bGVzW3RdLmluZGV4fSkscltvXT1lLnJ1bGVzW3RdLmV2KG4pLnRvWE1MKG4pfX0pLHJ9dmFyIGw9bi5ffHxlKFwidW5kZXJzY29yZVwiKSx1PWUoXCIuL2luZGV4XCIpO3UuUmVuZGVyZXI9ZnVuY3Rpb24oZSx0KXt0aGlzLmVudj1lfHx7fSx0aGlzLm9wdGlvbnM9dHx8e30sdGhpcy5vcHRpb25zLm1hcG5pa192ZXJzaW9uPXRoaXMub3B0aW9ucy5tYXBuaWtfdmVyc2lvbnx8XCIzLjAuMFwifSx1LlJlbmRlcmVyLnByb3RvdHlwZS5yZW5kZXJNU1M9ZnVuY3Rpb24oZSl7dmFyIHQ9bC5kZWZhdWx0cyh0aGlzLmVudix7YmVuY2htYXJrOiExLHZhbGlkYXRpb25fZGF0YTohMSxlZmZlY3RzOltdfSk7aWYoIXUudHJlZS5SZWZlcmVuY2Uuc2V0VmVyc2lvbih0aGlzLm9wdGlvbnMubWFwbmlrX3ZlcnNpb24pKXRocm93IG5ldyBFcnJvcihcIkNvdWxkIG5vdCBzZXQgbWFwbmlrIHZlcnNpb24gdG8gXCIrdGhpcy5vcHRpb25zLm1hcG5pa192ZXJzaW9uKTt2YXIgbj1bXSxyPVtdO3QuYmVuY2htYXJrJiZjb25zb2xlLnRpbWUoXCJQYXJzaW5nIE1TU1wiKTt2YXIgbz11LlBhcnNlcih0KS5wYXJzZShlKTt0LmJlbmNobWFyayYmY29uc29sZS50aW1lRW5kKFwiUGFyc2luZyBNU1NcIiksdC5iZW5jaG1hcmsmJmNvbnNvbGUudGltZShcIlJ1bGUgZ2VuZXJhdGlvblwiKTt2YXIgcz1vLnRvTGlzdCh0KTt0LmJlbmNobWFyayYmY29uc29sZS50aW1lRW5kKFwiUnVsZSBnZW5lcmF0aW9uXCIpLHQuYmVuY2htYXJrJiZjb25zb2xlLnRpbWUoXCJSdWxlIGluaGVyaXRhbmNlXCIpO3ZhciBjPWkocyx0KTt0LmJlbmNobWFyayYmY29uc29sZS50aW1lRW5kKFwiUnVsZSBpbmhlcml0YW5jZVwiKSx0LmJlbmNobWFyayYmY29uc29sZS50aW1lKFwiU3R5bGUgc29ydFwiKTt2YXIgZj1hKGMsdCk7dC5iZW5jaG1hcmsmJmNvbnNvbGUudGltZUVuZChcIlN0eWxlIHNvcnRcIiksdC5iZW5jaG1hcmsmJmNvbnNvbGUudGltZShcIlRvdGFsIFN0eWxlIGdlbmVyYXRpb25cIik7Zm9yKHZhciBkLGgscD0wO3A8Zi5sZW5ndGg7cCsrKXtkPWZbcF0saD1cInN0eWxlXCIrKFwiX19kZWZhdWx0X19cIiE9PWQuYXR0YWNobWVudD9cIi1cIitkLmF0dGFjaG1lbnQ6XCJcIiksci5wdXNoKGgpO3ZhciBtPSdcdFN0eWxlIFwiJytoKydcIiAoIycrcCtcIikgdG9YTUxcIjt0LmJlbmNobWFyayYmY29uc29sZS50aW1lKG0pLG4ucHVzaCh1LnRyZWUuU3R5bGVYTUwoaCxkLmF0dGFjaG1lbnQsZCx0KSksdC5iZW5jaG1hcmsmJmNvbnNvbGUudGltZUVuZChtKX1pZih0LmJlbmNobWFyayYmY29uc29sZS50aW1lRW5kKFwiVG90YWwgU3R5bGUgZ2VuZXJhdGlvblwiKSx0LmVycm9ycyl0aHJvdyB0LmVycm9ycztyZXR1cm4gbi5qb2luKFwiXFxuXCIpfSx1LlJlbmRlcmVyLnByb3RvdHlwZS5yZW5kZXI9ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gdChlLHQpe3JldHVybiBmdW5jdGlvbihlKXtyZXR1cm4gZS5hcHBsaWVzVG8oby5uYW1lLHQpfX12YXIgbj1sLmRlZmF1bHRzKHRoaXMuZW52LHtiZW5jaG1hcms6ITEsdmFsaWRhdGlvbl9kYXRhOiExLGVmZmVjdHM6W10scHBpOjkwLjcxNH0pO2lmKCF1LnRyZWUuUmVmZXJlbmNlLnNldFZlcnNpb24odGhpcy5vcHRpb25zLm1hcG5pa192ZXJzaW9uKSl0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZCBub3Qgc2V0IG1hcG5payB2ZXJzaW9uIHRvIFwiK3RoaXMub3B0aW9ucy5tYXBuaWtfdmVyc2lvbik7Zm9yKHZhciByLG8sYyxmLGQsaCxwPVtdLG09bC5jaGFpbihlLlN0eWxlc2hlZXQpLm1hcChmdW5jdGlvbihlKXtpZihcInN0cmluZ1wiPT10eXBlb2YgZSl0aHJvdyBuZXcgRXJyb3IoXCJTdHlsZXNoZWV0IG9iamVjdCBpcyBleHBlY3RlZCBub3QgYSBzdHJpbmc6ICdcIitlK1wiJ1wiKTtuPWwuZXh0ZW5kKG4se2ZpbGVuYW1lOmUuaWR9KTt2YXIgdD0rbmV3IERhdGUscj11LlBhcnNlcihuKS5wYXJzZShlLmRhdGEpO3JldHVybiBuLmJlbmNobWFyayYmY29uc29sZS53YXJuKFwiUGFyc2luZyB0aW1lOiBcIisobmV3IERhdGUtdCkrXCJtc1wiKSxyLnRvTGlzdChuKX0pLmZsYXR0ZW4oKS52YWx1ZSgpLGc9MDtnPGUuTGF5ZXIubGVuZ3RoO2crKyl7bz1lLkxheWVyW2ddLHI9W10sYz17fSxuLmJlbmNobWFyayYmY29uc29sZS53YXJuKFwicHJvY2Vzc2luZyBsYXllcjogXCIrby5pZCk7Zm9yKHZhciB2PShvW1wiY2xhc3NcIl18fFwiXCIpLnNwbGl0KC9cXHMrL2cpLHk9MDt5PHYubGVuZ3RoO3krKyljW3ZbeV1dPSEwO2g9bS5maWx0ZXIodChvLm5hbWUsYykpLGY9aShoLG4pLGQ9YShmLG4pO2Zvcih2YXIgYix3LHg9MDt4PGQubGVuZ3RoO3grKyl7Yj1kW3hdLHc9by5uYW1lKyhcIl9fZGVmYXVsdF9fXCIhPT1iLmF0dGFjaG1lbnQ/XCItXCIrYi5hdHRhY2htZW50OlwiXCIpO3ZhciBrPXUudHJlZS5TdHlsZVhNTCh3LGIuYXR0YWNobWVudCxiLG4pO2smJihwLnB1c2goayksci5wdXNoKHcpKX1wLnB1c2godS50cmVlLkxheWVyWE1MKG8scikpfXAudW5zaGlmdChuLmVmZmVjdHMubWFwKGZ1bmN0aW9uKGUpe3JldHVybiBlLnRvWE1MKG4pfSkuam9pbihcIlxcblwiKSk7dmFyIFM9cyhlLG0sbik7aWYobi5lcnJvcnMpdGhyb3cgbi5lcnJvcnM7dmFyIHo9bC5yZWR1Y2UoZSxmdW5jdGlvbihlLHQsbil7aWYoIXQmJjAhPT10KXJldHVybiBlO3N3aXRjaChuKXtjYXNlXCJzcnNcIjpjYXNlXCJMYXllclwiOmNhc2VcIlN0eWxlc2hlZXRcIjpicmVhaztjYXNlXCJib3VuZHNcIjpjYXNlXCJjZW50ZXJcIjpjYXNlXCJtaW56b29tXCI6Y2FzZVwibWF4em9vbVwiOmNhc2VcInZlcnNpb25cIjplLnB1c2goJyAgPFBhcmFtZXRlciBuYW1lPVwiJytuKydcIj4nK3QrXCI8L1BhcmFtZXRlcj5cIik7YnJlYWs7Y2FzZVwibmFtZVwiOmNhc2VcImRlc2NyaXB0aW9uXCI6Y2FzZVwibGVnZW5kXCI6Y2FzZVwiYXR0cmlidXRpb25cIjpjYXNlXCJ0ZW1wbGF0ZVwiOmUucHVzaCgnICA8UGFyYW1ldGVyIG5hbWU9XCInK24rJ1wiPjwhW0NEQVRBWycrdCtcIl1dPjwvUGFyYW1ldGVyPlwiKTticmVhaztjYXNlXCJmb3JtYXRcIjplLnB1c2goJyAgPFBhcmFtZXRlciBuYW1lPVwiJytuKydcIj4nK3QrXCI8L1BhcmFtZXRlcj5cIik7YnJlYWs7Y2FzZVwiaW50ZXJhY3Rpdml0eVwiOmUucHVzaCgnICA8UGFyYW1ldGVyIG5hbWU9XCJpbnRlcmFjdGl2aXR5X2xheWVyXCI+Jyt0LmxheWVyK1wiPC9QYXJhbWV0ZXI+XCIpLGUucHVzaCgnICA8UGFyYW1ldGVyIG5hbWU9XCJpbnRlcmFjdGl2aXR5X2ZpZWxkc1wiPicrdC5maWVsZHMrXCI8L1BhcmFtZXRlcj5cIik7YnJlYWs7ZGVmYXVsdDpcInN0cmluZ1wiPT10eXBlb2YgdD9lLnB1c2goJyAgPFBhcmFtZXRlciBuYW1lPVwiJytuKydcIj48IVtDREFUQVsnK3QrXCJdXT48L1BhcmFtZXRlcj5cIik6XCJudW1iZXJcIj09dHlwZW9mIHQ/ZS5wdXNoKCcgIDxQYXJhbWV0ZXIgbmFtZT1cIicrbisnXCI+Jyt0K1wiPC9QYXJhbWV0ZXI+XCIpOlwiYm9vbGVhblwiPT10eXBlb2YgdCYmZS5wdXNoKCcgIDxQYXJhbWV0ZXIgbmFtZT1cIicrbisnXCI+Jyt0K1wiPC9QYXJhbWV0ZXI+XCIpfXJldHVybiBlfSxbXSk7ei5sZW5ndGgmJnAudW5zaGlmdChcIjxQYXJhbWV0ZXJzPlxcblwiK3ouam9pbihcIlxcblwiKStcIlxcbjwvUGFyYW1ldGVycz5cXG5cIik7dmFyIF89bC5tYXAoUyxmdW5jdGlvbihlKXtyZXR1cm5cIiBcIitlfSkuam9pbihcIlwiKTtyZXR1cm4gcC51bnNoaWZ0KCc8P3htbCB2ZXJzaW9uPVwiMS4wXCIgZW5jb2Rpbmc9XCJ1dGYtOFwiPz5cXG48IURPQ1RZUEUgTWFwW10+XFxuPE1hcCcrXytcIj5cXG5cIikscC5wdXNoKFwiPC9NYXA+XCIpLHAuam9pbihcIlxcblwiKX0sdC5leHBvcnRzPXUsdC5leHBvcnRzLmFkZFJ1bGVzPXIsdC5leHBvcnRzLmluaGVyaXREZWZpbml0aW9ucz1pLHQuZXhwb3J0cy5zb3J0U3R5bGVzPWF9KS5jYWxsKHRoaXMsXCJ1bmRlZmluZWRcIiE9dHlwZW9mIGdsb2JhbD9nbG9iYWw6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHNlbGY/c2VsZjpcInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93P3dpbmRvdzp7fSl9LHtcIi4vaW5kZXhcIjo0LHVuZGVyc2NvcmU6NDJ9XSw3OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsoZnVuY3Rpb24oZ2xvYmFsKXshZnVuY3Rpb24oY2FydG8pe2Z1bmN0aW9uIENhcnRvQ1NTKGUsdCl7dGhpcy5vcHRpb25zPXR8fHt9LHRoaXMuaW1hZ2VVUkxzPVtdLGUmJnRoaXMuc2V0U3R5bGUoZSl9dmFyIHRyZWU9X2RlcmVxXyhcIi4vdHJlZVwiKSxfPWdsb2JhbC5ffHxfZGVyZXFfKFwidW5kZXJzY29yZVwiKTtDYXJ0b0NTUy5MYXllcj1mdW5jdGlvbihlLHQpe3RoaXMub3B0aW9ucz10LHRoaXMuc2hhZGVyPWV9LENhcnRvQ1NTLkxheWVyLnByb3RvdHlwZT17ZnVsbE5hbWU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5zaGFkZXIuYXR0YWNobWVudH0sbmFtZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLmZ1bGxOYW1lKCkuc3BsaXQoXCI6OlwiKVswXX0sZnJhbWVzOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuc2hhZGVyLmZyYW1lc30sYXR0YWNobWVudDpmdW5jdGlvbigpe3JldHVybiB0aGlzLmZ1bGxOYW1lKCkuc3BsaXQoXCI6OlwiKVsxXX0sZXZhbDpmdW5jdGlvbihlKXt2YXIgdD10aGlzLnNoYWRlcltlXTtpZih0JiZ0LnN0eWxlKXJldHVybiB0LnN0eWxlKHt9LHt6b29tOjAsXCJmcmFtZS1vZmZzZXRcIjowfSl9LGdldFN0eWxlOmZ1bmN0aW9uKGUsdCl7dmFyIG49e307Zm9yKHZhciByIGluIHRoaXMuc2hhZGVyKVwiYXR0YWNobWVudFwiIT09ciYmXCJ6b29tXCIhPT1yJiZcImZyYW1lc1wiIT09ciYmXCJzeW1ib2xpemVyc1wiIT09ciYmKG5bcl09dGhpcy5zaGFkZXJbcl0uc3R5bGUoZSx0KSk7cmV0dXJuIG59LGdldFN5bWJvbGl6ZXJzOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuc2hhZGVyLnN5bWJvbGl6ZXJzfSxpc1ZhcmlhYmxlOmZ1bmN0aW9uKCl7Zm9yKHZhciBlIGluIHRoaXMuc2hhZGVyKWlmKFwiYXR0YWNobWVudFwiIT09ZSYmXCJ6b29tXCIhPT1lJiZcImZyYW1lc1wiIT09ZSYmXCJzeW1ib2xpemVyc1wiIT09ZSYmIXRoaXMuc2hhZGVyW2VdLmNvbnN0YW50KXJldHVybiEwO3JldHVybiExfSxnZXRTaGFkZXI6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5zaGFkZXJ9LGZpbHRlcjpmdW5jdGlvbihlLHQsbil7Zm9yKHZhciByIGluIHRoaXMuc2hhZGVyKXt2YXIgaT10aGlzLnNoYWRlcltyXSh0LG4pO2lmKGkpcmV0dXJuITB9cmV0dXJuITF9LHRyYW5zZm9ybUdlb21ldHJ5OmZ1bmN0aW9uKGUpe3JldHVybiBlfSx0cmFuc2Zvcm1HZW9tZXRyaWVzOmZ1bmN0aW9uKGUpe3JldHVybiBlfX0sQ2FydG9DU1MucHJvdG90eXBlPXtzZXRTdHlsZTpmdW5jdGlvbihlKXt2YXIgdD10aGlzLnBhcnNlKGUpO2lmKCF0KXRocm93IG5ldyBFcnJvcih0aGlzLnBhcnNlX2Vudi5lcnJvcnMpO3RoaXMubGF5ZXJzPXQubWFwKGZ1bmN0aW9uKGUpe3JldHVybiBuZXcgQ2FydG9DU1MuTGF5ZXIoZSl9KX0sZ2V0TGF5ZXJzOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubGF5ZXJzfSxnZXREZWZhdWx0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZmluZExheWVyKHthdHRhY2htZW50OlwiX19kZWZhdWx0X19cIn0pfSxmaW5kTGF5ZXI6ZnVuY3Rpb24oZSl7cmV0dXJuIF8uZmluZCh0aGlzLmxheWVycyxmdW5jdGlvbih0KXtmb3IodmFyIG4gaW4gZSl7dmFyIHI9dFtuXTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiByJiYocj1yLmNhbGwodCkpLGVbbl0hPT1yKXJldHVybiExfXJldHVybiEwfSl9LF9jcmVhdGVGbjpmdW5jdGlvbihlKXt2YXIgdD1lLmpvaW4oXCJcXG5cIik7cmV0dXJuIHRoaXMub3B0aW9ucy5kZWJ1ZyYmY29uc29sZS5sb2codCksRnVuY3Rpb24oXCJkYXRhXCIsXCJjdHhcIixcInZhciBfdmFsdWUgPSBudWxsOyBcIit0K1wiOyByZXR1cm4gX3ZhbHVlOyBcIil9LF9jb21waWxlOmZ1bmN0aW9uKHNoYWRlcil7XCJzdHJpbmdcIj09dHlwZW9mIHNoYWRlciYmKHNoYWRlcj1ldmFsKFwiKGZ1bmN0aW9uKCkgeyByZXR1cm4gXCIrc2hhZGVyK1wiOyB9KSgpXCIpKSx0aGlzLnNoYWRlcl9zcmM9c2hhZGVyO2Zvcih2YXIgYXR0ciBpbiBzaGFkZXIpe3ZhciBjPW1hcHBlclthdHRyXTtjJiYodGhpcy5jb21waWxlZFtjXT1ldmFsKFwiKGZ1bmN0aW9uKCkgeyByZXR1cm4gc2hhZGVyW2F0dHJdOyB9KSgpO1wiKSl9fSxnZXRJbWFnZVVSTHM6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5pbWFnZVVSTHN9LHBhcnNlOmZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHQoZSl7cmV0dXJuIGUuZWxlbWVudHNbMF0rXCI6OlwiK2UuYXR0YWNobWVudH12YXIgbj17ZnJhbWVzOltdLGVycm9yczpbXSxlcnJvcjpmdW5jdGlvbihlKXt0aGlzLmVycm9ycy5wdXNoKGUpfX07dGhpcy5wYXJzZV9lbnY9bjt2YXIgcj1udWxsO3RyeXtyPW5ldyBjYXJ0by5QYXJzZXIobikucGFyc2UoZSl9Y2F0Y2goaSl7cmV0dXJuIHZvaWQgbi5lcnJvcnMucHVzaChpLm1lc3NhZ2UpfWlmKHIpe3ZhciBvPXIudG9MaXN0KG4pO28ucmV2ZXJzZSgpO2Zvcih2YXIgYT17fSxzPTA7czxvLmxlbmd0aDsrK3Mpe2Zvcih2YXIgbD1vW3NdLHU9dChsKSxjPWFbdV09YVt1XXx8e3N5bWJvbGl6ZXJzOltdfSxmPTA7ZjxsLnJ1bGVzLmxlbmd0aDtmKyspaWYoXCJtYXJrZXItZmlsZVwiPT09bC5ydWxlc1tmXS5uYW1lfHxcInBvaW50LWZpbGVcIj09PWwucnVsZXNbZl0ubmFtZSl7dmFyIGQ9bC5ydWxlc1tmXS52YWx1ZS52YWx1ZVswXS52YWx1ZVswXS52YWx1ZS52YWx1ZTt0aGlzLmltYWdlVVJMcy5wdXNoKGQpfWMuZnJhbWVzPVtdLGMuem9vbT10cmVlLlpvb20uYWxsO3ZhciBoPWwudG9KUyhuKTt0aGlzLm9wdGlvbnMuZGVidWcmJmNvbnNvbGUubG9nKFwicHJvcHNcIixoKTtmb3IodmFyIHAgaW4gaCl7dmFyIG09Y1twXT1jW3BdfHx7Y29uc3RhbnQ6ITEsc3ltYm9saXplcjpudWxsLGpzOltdLGluZGV4OjB9O20uanMucHVzaChoW3BdLm1hcChmdW5jdGlvbihlKXtyZXR1cm4gZS5qc30pLmpvaW4oXCJcXG5cIikpLG0uc3ltYm9saXplcj1fLmZpcnN0KGhbcF0ubWFwKGZ1bmN0aW9uKGUpe3JldHVybiBlLnN5bWJvbGl6ZXJ9KSksbS5pbmRleD1fLm1heChoW3BdLm1hcChmdW5jdGlvbihlKXtyZXR1cm4gZS5pbmRleH0pLmNvbmNhdChtLmluZGV4KSksbS5jb25zdGFudD0hXy5hbnkoaFtwXS5tYXAoZnVuY3Rpb24oZSl7cmV0dXJuIWUuY29uc3RhbnR9KSl9fXZhciBnPVtdO3RoaXMub3B0aW9ucy5kZWJ1ZyYmY29uc29sZS5sb2coYSk7Zm9yKHZhciB2PXt9LHM9MDtzPG8ubGVuZ3RoOysrcyl7dmFyIGw9b1tzXSx5PXQobCksYz1hW3ldO2lmKCF2W3ldKXt0aGlzLm9wdGlvbnMuZGVidWcmJmNvbnNvbGUubG9nKFwiKipcIix5KTtmb3IodmFyIGIgaW4gYylcInpvb21cIiE9PWImJlwiZnJhbWVzXCIhPT1iJiZcInN5bWJvbGl6ZXJzXCIhPT1iJiYodGhpcy5vcHRpb25zLmRlYnVnJiZjb25zb2xlLmxvZyhcIipcIixiKSxjW2JdLnN0eWxlPXRoaXMuX2NyZWF0ZUZuKGNbYl0uanMpLGMuc3ltYm9saXplcnMucHVzaChjW2JdLnN5bWJvbGl6ZXIpLGMuc3ltYm9saXplcnM9Xy51bmlxKGMuc3ltYm9saXplcnMpKTtjLmF0dGFjaG1lbnQ9eSxnLnB1c2goYyksdlt5XT0hMH1jLnpvb218PWwuem9vbSxjLmZyYW1lcy5wdXNoKGwuZnJhbWVfb2Zmc2V0KX1mb3Iocz0wO3M8Zy5sZW5ndGg7KytzKWdbc10uZnJhbWVzPV8udW5pcShnW3NdLmZyYW1lcyk7cmV0dXJuIGd9cmV0dXJuIG51bGx9fSxjYXJ0by5SZW5kZXJlckpTPWZ1bmN0aW9uKGUpe3RoaXMub3B0aW9ucz1lfHx7fSx0aGlzLm9wdGlvbnMubWFwbmlrX3ZlcnNpb249dGhpcy5vcHRpb25zLm1hcG5pa192ZXJzaW9ufHxcImxhdGVzdFwifSxjYXJ0by5SZW5kZXJlckpTLnByb3RvdHlwZS5yZW5kZXI9ZnVuY3Rpb24oZSl7dmFyIHQ9X2RlcmVxXyhcIi4vdG9ycXVlLXJlZmVyZW5jZVwiKTtyZXR1cm4gdHJlZS5SZWZlcmVuY2Uuc2V0RGF0YSh0LnZlcnNpb24ubGF0ZXN0KSxuZXcgQ2FydG9DU1MoZSx0aGlzLm9wdGlvbnMpfSxcInVuZGVmaW5lZFwiIT10eXBlb2YgbW9kdWxlJiYobW9kdWxlLmV4cG9ydHM9Y2FydG8uUmVuZGVyZXJKUyl9KF9kZXJlcV8oXCIuLi9jYXJ0b1wiKSl9KS5jYWxsKHRoaXMsXCJ1bmRlZmluZWRcIiE9dHlwZW9mIGdsb2JhbD9nbG9iYWw6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHNlbGY/c2VsZjpcInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93P3dpbmRvdzp7fSl9LHtcIi4uL2NhcnRvXCI6NCxcIi4vdG9ycXVlLXJlZmVyZW5jZVwiOjgsXCIuL3RyZWVcIjo5LHVuZGVyc2NvcmU6NDJ9XSw4OltmdW5jdGlvbihlLHQpe3ZhciBuPXt2ZXJzaW9uOlwiMi4xLjFcIixzdHlsZTp7XCJmaWx0ZXItbW9kZVwiOnt0eXBlOltcImFsbFwiLFwiZmlyc3RcIl0sZG9jOlwiQ29udHJvbCB0aGUgcHJvY2Vzc2luZyBiZWhhdmlvciBvZiBSdWxlIGZpbHRlcnMgd2l0aGluIGEgU3R5bGUuIElmICdhbGwnIGlzIHVzZWQgdGhlbiBhbGwgUnVsZXMgYXJlIHByb2Nlc3NlZCBzZXF1ZW50aWFsbHkgaW5kZXBlbmRlbnQgb2Ygd2hldGhlciBhbnkgcHJldmlvdXMgZmlsdGVycyBtYXRjaGVkLiBJZiAnZmlyc3QnIGlzIHVzZWQgdGhlbiBpdCBtZWFucyBwcm9jZXNzaW5nIGVuZHMgYWZ0ZXIgdGhlIGZpcnN0IG1hdGNoIChhIHBvc2l0aXZlIGZpbHRlciBldmFsdWF0aW9uKSBhbmQgbm8gZnVydGhlciBSdWxlcyBpbiB0aGUgU3R5bGUgYXJlIHByb2Nlc3NlZCAoJ2ZpcnN0JyBpcyB1c3VhbGx5IHRoZSBkZWZhdWx0IGZvciBDU1MgaW1wbGVtZW50YXRpb25zIG9uIHRvcCBvZiBNYXBuaWsgdG8gc2ltcGxpZnkgdHJhbnNsYXRpb24gZnJvbSBDU1MgdG8gTWFwbmlrIFhNTClcIixcImRlZmF1bHQtdmFsdWVcIjpcImFsbFwiLFwiZGVmYXVsdC1tZWFuaW5nXCI6XCJBbGwgUnVsZXMgaW4gYSBTdHlsZSBhcmUgcHJvY2Vzc2VkIHdoZXRoZXIgdGhleSBoYXZlIGZpbHRlcnMgb3Igbm90IGFuZCB3aGV0aGVyIG9yIG5vdCB0aGUgZmlsdGVyIGNvbmRpdGlvbnMgZXZhbHVhdGUgdG8gdHJ1ZS5cIn0sXCJpbWFnZS1maWx0ZXJzXCI6e2NzczpcImltYWdlLWZpbHRlcnNcIixcImRlZmF1bHQtdmFsdWVcIjpcIm5vbmVcIixcImRlZmF1bHQtbWVhbmluZ1wiOlwibm8gZmlsdGVyc1wiLHR5cGU6XCJmdW5jdGlvbnNcIixmdW5jdGlvbnM6W1tcImFnZy1zdGFjay1ibHVyXCIsMl0sW1wiZW1ib3NzXCIsMF0sW1wiYmx1clwiLDBdLFtcImdyYXlcIiwwXSxbXCJzb2JlbFwiLDBdLFtcImVkZ2UtZGV0ZWN0XCIsMF0sW1wieC1ncmFkaWVudFwiLDBdLFtcInktZ3JhZGllbnRcIiwwXSxbXCJpbnZlcnRcIiwwXSxbXCJzaGFycGVuXCIsMF0sW1wiY29sb3JpemUtYWxwaGFcIiwtMV0sW1wiY29sb3ItdG8tYWxwaGFcIiwxXSxbXCJzY2FsZS1oc2xhXCIsOF1dLGRvYzpcIkEgbGlzdCBvZiBpbWFnZSBmaWx0ZXJzLlwifSxcImNvbXAtb3BcIjp7Y3NzOlwiY29tcC1vcFwiLFwiZGVmYXVsdC12YWx1ZVwiOlwic3JjLW92ZXJcIixcImRlZmF1bHQtbWVhbmluZ1wiOlwiYWRkIHRoZSBjdXJyZW50IGxheWVyIG9uIHRvcCBvZiBvdGhlciBsYXllcnNcIixkb2M6XCJDb21wb3NpdGUgb3BlcmF0aW9uLiBUaGlzIGRlZmluZXMgaG93IHRoaXMgbGF5ZXIgc2hvdWxkIGJlaGF2ZSByZWxhdGl2ZSB0byBsYXllcnMgYXRvcCBvciBiZWxvdyBpdC5cIix0eXBlOltcImNsZWFyXCIsXCJzcmNcIixcImRzdFwiLFwic3JjLW92ZXJcIixcInNvdXJjZS1vdmVyXCIsXCJkc3Qtb3ZlclwiLFwic3JjLWluXCIsXCJkc3QtaW5cIixcInNyYy1vdXRcIixcImRzdC1vdXRcIixcInNyYy1hdG9wXCIsXCJkc3QtYXRvcFwiLFwieG9yXCIsXCJwbHVzXCIsXCJtaW51c1wiLFwibXVsdGlwbHlcIixcInNjcmVlblwiLFwib3ZlcmxheVwiLFwiZGFya2VuXCIsXCJsaWdodGVuXCIsXCJsaWdodGVyXCIsXCJjb2xvci1kb2RnZVwiLFwiY29sb3ItYnVyblwiLFwiaGFyZC1saWdodFwiLFwic29mdC1saWdodFwiLFwiZGlmZmVyZW5jZVwiLFwiZXhjbHVzaW9uXCIsXCJjb250cmFzdFwiLFwiaW52ZXJ0XCIsXCJpbnZlcnQtcmdiXCIsXCJncmFpbi1tZXJnZVwiLFwiZ3JhaW4tZXh0cmFjdFwiLFwiaHVlXCIsXCJzYXR1cmF0aW9uXCIsXCJjb2xvclwiLFwidmFsdWVcIl19LG9wYWNpdHk6e2NzczpcIm9wYWNpdHlcIix0eXBlOlwiZmxvYXRcIixkb2M6XCJBbiBhbHBoYSB2YWx1ZSBmb3IgdGhlIHN0eWxlICh3aGljaCBtZWFucyBhbiBhbHBoYSBhcHBsaWVkIHRvIGFsbCBmZWF0dXJlcyBpbiBzZXBhcmF0ZSBidWZmZXIgYW5kIHRoZW4gY29tcG9zaXRlZCBiYWNrIHRvIG1haW4gYnVmZmVyKVwiLFwiZGVmYXVsdC12YWx1ZVwiOjEsXCJkZWZhdWx0LW1lYW5pbmdcIjpcIm5vIHNlcGFyYXRlIGJ1ZmZlciB3aWxsIGJlIHVzZWQgYW5kIG5vIGFscGhhIHdpbGwgYmUgYXBwbGllZCB0byB0aGUgc3R5bGUgYWZ0ZXIgcmVuZGVyaW5nXCJ9fSxsYXllcjp7bmFtZTp7XCJkZWZhdWx0LXZhbHVlXCI6XCJcIix0eXBlOlwic3RyaW5nXCIscmVxdWlyZWQ6ITAsXCJkZWZhdWx0LW1lYW5pbmdcIjpcIk5vIGxheWVyIG5hbWUgaGFzIGJlZW4gcHJvdmlkZWRcIixkb2M6XCJUaGUgbmFtZSBvZiBhIGxheWVyLiBDYW4gYmUgYW55dGhpbmcgeW91IHdpc2ggYW5kIGlzIG5vdCBzdHJpY3RseSB2YWxpZGF0ZWQsIGJ1dCBpZGVhbGx5IHVuaXF1ZSAgaW4gdGhlIG1hcFwifSxzcnM6e1wiZGVmYXVsdC12YWx1ZVwiOlwiXCIsdHlwZTpcInN0cmluZ1wiLFwiZGVmYXVsdC1tZWFuaW5nXCI6XCJObyBzcnMgdmFsdWUgaXMgcHJvdmlkZWQgYW5kIHRoZSB2YWx1ZSB3aWxsIGJlIGluaGVyaXRlZCBmcm9tIHRoZSBNYXAncyBzcnNcIixkb2M6XCJUaGUgc3BhdGlhbCByZWZlcmVuY2Ugc3lzdGVtIGRlZmluaXRpb24gZm9yIHRoZSBsYXllciwgYWthIHRoZSBwcm9qZWN0aW9uLiBDYW4gZWl0aGVyIGJlIGEgcHJvajQgbGl0ZXJhbCBzdHJpbmcgbGlrZSAnK3Byb2o9bG9uZ2xhdCArZWxscHM9V0dTODQgK2RhdHVtPVdHUzg0ICtub19kZWZzJyBvciwgaWYgdGhlIHByb3BlciBwcm9qNCBlcHNnL25hZC9ldGMgaWRlbnRpZmllciBmaWxlcyBhcmUgaW5zdGFsbGVkLCBhIHN0cmluZyB0aGF0IHVzZXMgYW4gaWQgbGlrZTogJytpbml0PWVwc2c6NDMyNidcIn0sc3RhdHVzOntcImRlZmF1bHQtdmFsdWVcIjohMCx0eXBlOlwiYm9vbGVhblwiLFwiZGVmYXVsdC1tZWFuaW5nXCI6XCJUaGlzIGxheWVyIHdpbGwgYmUgbWFya2VkIGFzIGFjdGl2ZSBhbmQgYXZhaWxhYmxlIGZvciBwcm9jZXNzaW5nXCIsZG9jOlwiQSBwcm9wZXJ0eSB0aGF0IGNhbiBiZSBzZXQgdG8gZmFsc2UgdG8gZGlzYWJsZSB0aGlzIGxheWVyIGZyb20gYmVpbmcgcHJvY2Vzc2VkXCJ9LG1pbnpvb206e1wiZGVmYXVsdC12YWx1ZVwiOlwiMFwiLHR5cGU6XCJmbG9hdFwiLFwiZGVmYXVsdC1tZWFuaW5nXCI6XCJUaGUgbGF5ZXIgd2lsbCBiZSB2aXNpYmxlIGF0IHRoZSBtaW5pbXVtIHBvc3NpYmxlIHNjYWxlXCIsZG9jOlwiVGhlIG1pbmltdW0gc2NhbGUgZGVub21pbmF0b3IgdGhhdCB0aGlzIGxheWVyIHdpbGwgYmUgdmlzaWJsZSBhdC4gQSBsYXllcidzIHZpc2liaWxpdHkgaXMgZGV0ZXJtaW5lZCBieSB3aGV0aGVyIGl0cyBzdGF0dXMgaXMgdHJ1ZSBhbmQgaWYgdGhlIE1hcCBzY2FsZSA+PSBtaW56b29tIC0gMWUtNiBhbmQgc2NhbGUgPCBtYXh6b29tICsgMWUtNlwifSxtYXh6b29tOntcImRlZmF1bHQtdmFsdWVcIjpcIjEuNzk3NjllKzMwOFwiLHR5cGU6XCJmbG9hdFwiLFwiZGVmYXVsdC1tZWFuaW5nXCI6XCJUaGUgbGF5ZXIgd2lsbCBiZSB2aXNpYmxlIGF0IHRoZSBtYXhpbXVtIHBvc3NpYmxlIHNjYWxlXCIsZG9jOlwiVGhlIG1heGltdW0gc2NhbGUgZGVub21pbmF0b3IgdGhhdCB0aGlzIGxheWVyIHdpbGwgYmUgdmlzaWJsZSBhdC4gVGhlIGRlZmF1bHQgaXMgdGhlIG51bWVyaWMgbGltaXQgb2YgdGhlIEMrKyBkb3VibGUgdHlwZSwgd2hpY2ggbWF5IHZhcnkgc2xpZ2h0bHkgYnkgc3lzdGVtLCBidXQgaXMgbGlrZWx5IGEgbWFzc2l2ZSBudW1iZXIgbGlrZSAxLjc5NzY5ZSszMDggYW5kIGVuc3VyZXMgdGhhdCB0aGlzIGxheWVyIHdpbGwgYWx3YXlzIGJlIHZpc2libGUgdW5sZXNzIHRoZSB2YWx1ZSBpcyByZWR1Y2VkLiBBIGxheWVyJ3MgdmlzaWJpbGl0eSBpcyBkZXRlcm1pbmVkIGJ5IHdoZXRoZXIgaXRzIHN0YXR1cyBpcyB0cnVlIGFuZCBpZiB0aGUgTWFwIHNjYWxlID49IG1pbnpvb20gLSAxZS02IGFuZCBzY2FsZSA8IG1heHpvb20gKyAxZS02XCJ9LHF1ZXJ5YWJsZTp7XCJkZWZhdWx0LXZhbHVlXCI6ITEsdHlwZTpcImJvb2xlYW5cIixcImRlZmF1bHQtbWVhbmluZ1wiOlwiVGhlIGxheWVyIHdpbGwgbm90IGJlIGF2YWlsYWJsZSBmb3IgdGhlIGRpcmVjdCBxdWVyeWluZyBvZiBkYXRhIHZhbHVlc1wiLGRvYzpcIlRoaXMgcHJvcGVydHkgd2FzIGFkZGVkIGZvciBHZXRGZWF0dXJlSW5mby9XTVMgY29tcGF0aWJpbGl0eSBhbmQgaXMgcmFyZWx5IHVzZWQuIEl0IGlzIG9mZiBieSBkZWZhdWx0IG1lYW5pbmcgdGhhdCBpbiBhIFdNUyBjb250ZXh0IHRoZSBsYXllciB3aWxsIG5vdCBiZSBhYmxlIHRvIGJlIHF1ZXJpZWQgdW5sZXNzIHRoZSBwcm9wZXJ0eSBpcyBleHBsaWNpdGx5IHNldCB0byB0cnVlXCJ9LFwiY2xlYXItbGFiZWwtY2FjaGVcIjp7XCJkZWZhdWx0LXZhbHVlXCI6ITEsdHlwZTpcImJvb2xlYW5cIixcImRlZmF1bHQtbWVhbmluZ1wiOlwiVGhlIHJlbmRlcmVyJ3MgY29sbGlzaW9uIGRldGVjdG9yIGNhY2hlICh1c2VkIGZvciBhdm9pZGluZyBkdXBsaWNhdGUgbGFiZWxzIGFuZCBvdmVybGFwcGluZyBtYXJrZXJzKSB3aWxsIG5vdCBiZSBjbGVhcmVkIGltbWVkaWF0ZWx5IGJlZm9yZSBwcm9jZXNzaW5nIHRoaXMgbGF5ZXJcIixkb2M6XCJUaGlzIHByb3BlcnR5LCBieSBkZWZhdWx0IG9mZiwgY2FuIGJlIGVuYWJsZWQgdG8gYWxsb3cgYSB1c2VyIHRvIGNsZWFyIHRoZSBjb2xsaXNpb24gZGV0ZWN0b3IgY2FjaGUgYmVmb3JlIGEgZ2l2ZW4gbGF5ZXIgaXMgcHJvY2Vzc2VkLiBUaGlzIG1heSBiZSBkZXNpcmFibGUgdG8gZW5zdXJlIHRoYXQgYSBnaXZlbiBsYXllcnMgZGF0YSBzaG93cyB1cCBvbiB0aGUgbWFwIGV2ZW4gaWYgaXQgbm9ybWFsbHkgd291bGQgbm90IGJlY2F1c2Ugb2YgY29sbGlzaW9ucyB3aXRoIHByZXZpb3VzbHkgcmVuZGVyZWQgbGFiZWxzIG9yIG1hcmtlcnNcIn0sXCJncm91cC1ieVwiOntcImRlZmF1bHQtdmFsdWVcIjpcIlwiLHR5cGU6XCJzdHJpbmdcIixcImRlZmF1bHQtbWVhbmluZ1wiOlwiTm8gc3BlY2lhbCBsYXllciBncm91cGluZyB3aWxsIGJlIHVzZWQgZHVyaW5nIHJlbmRlcmluZ1wiLGRvYzpcImh0dHBzOi8vZ2l0aHViLmNvbS9tYXBuaWsvbWFwbmlrL3dpa2kvR3JvdXBlZC1yZW5kZXJpbmdcIn0sXCJidWZmZXItc2l6ZVwiOntcImRlZmF1bHQtdmFsdWVcIjpcIjBcIix0eXBlOlwiZmxvYXRcIixcImRlZmF1bHQtbWVhbmluZ1wiOlwiTm8gYnVmZmVyIHdpbGwgYmUgdXNlZFwiLGRvYzpcIkV4dHJhIHRvbGVyYW5jZSBhcm91bmQgdGhlIExheWVyIGV4dGVudCAoaW4gcGl4ZWxzKSB1c2VkIHRvIHdoZW4gcXVlcnlpbmcgYW5kIChwb3RlbnRpYWxseSkgY2xpcHBpbmcgdGhlIGxheWVyIGRhdGEgZHVyaW5nIHJlbmRlcmluZ1wifSxcIm1heGltdW0tZXh0ZW50XCI6e1wiZGVmYXVsdC12YWx1ZVwiOlwibm9uZVwiLHR5cGU6XCJiYm94XCIsXCJkZWZhdWx0LW1lYW5pbmdcIjpcIk5vIGNsaXBwaW5nIGV4dGVudCB3aWxsIGJlIHVzZWRcIixkb2M6XCJBbiBleHRlbnQgdG8gYmUgdXNlZCB0byBsaW1pdCB0aGUgYm91bmRzIHVzZWQgdG8gcXVlcnkgdGhpcyBzcGVjaWZpYyBsYXllciBkYXRhIGR1cmluZyByZW5kZXJpbmcuIFNob3VsZCBiZSBtaW54LCBtaW55LCBtYXh4LCBtYXh5IGluIHRoZSBjb29yZGluYXRlcyBvZiB0aGUgTGF5ZXIuXCJ9fSxzeW1ib2xpemVyczp7XCIqXCI6e1wiaW1hZ2UtZmlsdGVyc1wiOntjc3M6XCJpbWFnZS1maWx0ZXJzXCIsXCJkZWZhdWx0LXZhbHVlXCI6XCJub25lXCIsXCJkZWZhdWx0LW1lYW5pbmdcIjpcIm5vIGZpbHRlcnNcIix0eXBlOlwiZnVuY3Rpb25zXCIsZnVuY3Rpb25zOltbXCJhZ2ctc3RhY2stYmx1clwiLDJdLFtcImVtYm9zc1wiLDBdLFtcImJsdXJcIiwwXSxbXCJncmF5XCIsMF0sW1wic29iZWxcIiwwXSxbXCJlZGdlLWRldGVjdFwiLDBdLFtcIngtZ3JhZGllbnRcIiwwXSxbXCJ5LWdyYWRpZW50XCIsMF0sW1wiaW52ZXJ0XCIsMF0sW1wic2hhcnBlblwiLDBdLFtcImNvbG9yaXplLWFscGhhXCIsLTFdLFtcImNvbG9yLXRvLWFscGhhXCIsMV0sW1wic2NhbGUtaHNsYVwiLDhdLFtcImJ1Y2tldHNcIiwtMV0sW1wiY2F0ZWdvcnlcIiwtMV0sW1wiZXF1YWxcIiwtMV0sW1wiaGVhZHRhaWxzXCIsLTFdLFtcImplbmtzXCIsLTFdLFtcInF1YW50aWxlc1wiLC0xXSxbXCJjYXJ0b2NvbG9yXCIsLTFdLFtcImNvbG9yYnJld2VyXCIsLTFdLFtcInJhbmdlXCIsLTFdLFtcInJhbXBcIiwtMV1dLGRvYzpcIkEgbGlzdCBvZiBpbWFnZSBmaWx0ZXJzLlwifSxcImNvbXAtb3BcIjp7Y3NzOlwiY29tcC1vcFwiLFwiZGVmYXVsdC12YWx1ZVwiOlwic3JjLW92ZXJcIixcImRlZmF1bHQtbWVhbmluZ1wiOlwiYWRkIHRoZSBjdXJyZW50IGxheWVyIG9uIHRvcCBvZiBvdGhlciBsYXllcnNcIixkb2M6XCJDb21wb3NpdGUgb3BlcmF0aW9uLiBUaGlzIGRlZmluZXMgaG93IHRoaXMgbGF5ZXIgc2hvdWxkIGJlaGF2ZSByZWxhdGl2ZSB0byBsYXllcnMgYXRvcCBvciBiZWxvdyBpdC5cIix0eXBlOltcImNsZWFyXCIsXCJzcmNcIixcImRzdFwiLFwic3JjLW92ZXJcIixcInNvdXJjZS1vdmVyXCIsXCJkc3Qtb3ZlclwiLFwic3JjLWluXCIsXCJkc3QtaW5cIixcInNyYy1vdXRcIixcImRzdC1vdXRcIixcInNyYy1hdG9wXCIsXCJkc3QtYXRvcFwiLFwieG9yXCIsXCJwbHVzXCIsXCJtaW51c1wiLFwibXVsdGlwbHlcIixcInNjcmVlblwiLFwib3ZlcmxheVwiLFwiZGFya2VuXCIsXCJsaWdodGVuXCIsXCJsaWdodGVyXCIsXCJjb2xvci1kb2RnZVwiLFwiY29sb3ItYnVyblwiLFwiaGFyZC1saWdodFwiLFwic29mdC1saWdodFwiLFwiZGlmZmVyZW5jZVwiLFwiZXhjbHVzaW9uXCIsXCJjb250cmFzdFwiLFwiaW52ZXJ0XCIsXCJpbnZlcnQtcmdiXCIsXCJncmFpbi1tZXJnZVwiLFwiZ3JhaW4tZXh0cmFjdFwiLFwiaHVlXCIsXCJzYXR1cmF0aW9uXCIsXCJjb2xvclwiLFwidmFsdWVcIl19LG9wYWNpdHk6e2NzczpcIm9wYWNpdHlcIix0eXBlOlwiZmxvYXRcIixkb2M6XCJBbiBhbHBoYSB2YWx1ZSBmb3IgdGhlIHN0eWxlICh3aGljaCBtZWFucyBhbiBhbHBoYSBhcHBsaWVkIHRvIGFsbCBmZWF0dXJlcyBpbiBzZXBhcmF0ZSBidWZmZXIgYW5kIHRoZW4gY29tcG9zaXRlZCBiYWNrIHRvIG1haW4gYnVmZmVyKVwiLFwiZGVmYXVsdC12YWx1ZVwiOjEsXCJkZWZhdWx0LW1lYW5pbmdcIjpcIm5vIHNlcGFyYXRlIGJ1ZmZlciB3aWxsIGJlIHVzZWQgYW5kIG5vIGFscGhhIHdpbGwgYmUgYXBwbGllZCB0byB0aGUgc3R5bGUgYWZ0ZXIgcmVuZGVyaW5nXCJ9fSxtYXA6e1wiYmFja2dyb3VuZC1jb2xvclwiOntjc3M6XCJiYWNrZ3JvdW5kLWNvbG9yXCIsXCJkZWZhdWx0LXZhbHVlXCI6XCJub25lXCIsXCJkZWZhdWx0LW1lYW5pbmdcIjpcInRyYW5zcGFyZW50XCIsdHlwZTpcImNvbG9yXCIsZG9jOlwiTWFwIEJhY2tncm91bmQgY29sb3JcIn0sXCJiYWNrZ3JvdW5kLWltYWdlXCI6e2NzczpcImJhY2tncm91bmQtaW1hZ2VcIix0eXBlOlwidXJpXCIsXCJkZWZhdWx0LXZhbHVlXCI6XCJcIixcImRlZmF1bHQtbWVhbmluZ1wiOlwidHJhbnNwYXJlbnRcIixkb2M6XCJBbiBpbWFnZSB0aGF0IGlzIHJlcGVhdGVkIGJlbG93IGFsbCBmZWF0dXJlcyBvbiBhIG1hcCBhcyBhIGJhY2tncm91bmQuXCIsZGVzY3JpcHRpb246XCJNYXAgQmFja2dyb3VuZCBpbWFnZVwifSxzcnM6e2NzczpcInNyc1wiLHR5cGU6XCJzdHJpbmdcIixcImRlZmF1bHQtdmFsdWVcIjpcIitwcm9qPWxvbmdsYXQgK2VsbHBzPVdHUzg0ICtkYXR1bT1XR1M4NCArbm9fZGVmc1wiLFwiZGVmYXVsdC1tZWFuaW5nXCI6XCJUaGUgcHJvajQgbGl0ZXJhbCBvZiBFUFNHOjQzMjYgaXMgYXNzdW1lZCB0byBiZSB0aGUgTWFwJ3Mgc3BhdGlhbCByZWZlcmVuY2UgYW5kIGFsbCBkYXRhIGZyb20gbGF5ZXJzIHdpdGhpbiB0aGlzIG1hcCB3aWxsIGJlIHBsb3R0ZWQgdXNpbmcgdGhpcyBjb29yZGluYXRlIHN5c3RlbS4gSWYgYW55IGxheWVycyBkbyBub3QgZGVjbGFyZSBhbiBzcnMgdmFsdWUgdGhlbiB0aGV5IHdpbGwgYmUgYXNzdW1lZCB0byBiZSBpbiB0aGUgc2FtZSBzcnMgYXMgdGhlIE1hcCBhbmQgbm90IHRyYW5zZm9ybWF0aW9ucyB3aWxsIGJlIG5lZWRlZCB0byBwbG90IHRoZW0gaW4gdGhlIE1hcCdzIGNvb3JkaW5hdGUgc3BhY2VcIixkb2M6XCJNYXAgc3BhdGlhbCByZWZlcmVuY2UgKHByb2o0IHN0cmluZylcIn0sXCJidWZmZXItc2l6ZVwiOntjc3M6XCJidWZmZXItc2l6ZVwiLFwiZGVmYXVsdC12YWx1ZVwiOlwiMFwiLHR5cGU6XCJmbG9hdFwiLFwiZGVmYXVsdC1tZWFuaW5nXCI6XCJObyBidWZmZXIgd2lsbCBiZSB1c2VkXCIsZG9jOidFeHRyYSB0b2xlcmFuY2UgYXJvdW5kIHRoZSBtYXAgKGluIHBpeGVscykgdXNlZCB0byBlbnN1cmUgbGFiZWxzIGNyb3NzaW5nIHRpbGUgYm91bmRhcmllcyBhcmUgZXF1YWxseSByZW5kZXJlZCBpbiBlYWNoIHRpbGUgKGUuZy4gY3V0IGluIGVhY2ggdGlsZSkuIE5vdCBpbnRlbmRlZCB0byBiZSB1c2VkIGluIGNvbWJpbmF0aW9uIHdpdGggXCJhdm9pZC1lZGdlc1wiLid9LFwibWF4aW11bS1leHRlbnRcIjp7Y3NzOlwiXCIsXCJkZWZhdWx0LXZhbHVlXCI6XCJub25lXCIsdHlwZTpcImJib3hcIixcImRlZmF1bHQtbWVhbmluZ1wiOlwiTm8gY2xpcHBpbmcgZXh0ZW50IHdpbGwgYmUgdXNlZFwiLGRvYzpcIkFuIGV4dGVudCB0byBiZSB1c2VkIHRvIGxpbWl0IHRoZSBib3VuZHMgdXNlZCB0byBxdWVyeSBhbGwgbGF5ZXJzIGR1cmluZyByZW5kZXJpbmcuIFNob3VsZCBiZSBtaW54LCBtaW55LCBtYXh4LCBtYXh5IGluIHRoZSBjb29yZGluYXRlcyBvZiB0aGUgTWFwLlwifSxiYXNlOntjc3M6XCJiYXNlXCIsXCJkZWZhdWx0LXZhbHVlXCI6XCJcIixcImRlZmF1bHQtbWVhbmluZ1wiOlwiVGhpcyBiYXNlIHBhdGggZGVmYXVsdHMgdG8gYW4gZW1wdHkgc3RyaW5nIG1lYW5pbmcgdGhhdCBhbnkgcmVsYXRpdmUgcGF0aHMgdG8gZmlsZXMgcmVmZXJlbmNlZCBpbiBzdHlsZXMgb3IgbGF5ZXJzIHdpbGwgYmUgaW50ZXJwcmV0ZWQgcmVsYXRpdmUgdG8gdGhlIGFwcGxpY2F0aW9uIHByb2Nlc3MuXCIsdHlwZTpcInN0cmluZ1wiLGRvYzpcIkFueSByZWxhdGl2ZSBwYXRocyB1c2VkIHRvIHJlZmVyZW5jZSBmaWxlcyB3aWxsIGJlIHVuZGVyc3Rvb2QgYXMgcmVsYXRpdmUgdG8gdGhpcyBkaXJlY3RvcnkgcGF0aCBpZiB0aGUgbWFwIGlzIGxvYWRlZCBmcm9tIGFuIGluIG1lbW9yeSBvYmplY3QgcmF0aGVyIHRoYW4gZnJvbSB0aGUgZmlsZXN5c3RlbS4gSWYgdGhlIG1hcCBpcyBsb2FkZWQgZnJvbSB0aGUgZmlsZXN5c3RlbSBhbmQgdGhpcyBvcHRpb24gaXMgbm90IHByb3ZpZGVkIGl0IHdpbGwgYmUgc2V0IHRvIHRoZSBkaXJlY3Rvcnkgb2YgdGhlIHN0eWxlc2hlZXQuXCJ9LFwicGF0aHMtZnJvbS14bWxcIjp7Y3NzOlwiXCIsXCJkZWZhdWx0LXZhbHVlXCI6ITAsXCJkZWZhdWx0LW1lYW5pbmdcIjpcIlBhdGhzIHJlYWQgZnJvbSBYTUwgd2lsbCBiZSBpbnRlcnByZXRlZCBmcm9tIHRoZSBsb2NhdGlvbiBvZiB0aGUgWE1MXCIsdHlwZTpcImJvb2xlYW5cIixkb2M6XCJ2YWx1ZSB0byBjb250cm9sIHdoZXRoZXIgcGF0aHMgaW4gdGhlIFhNTCB3aWxsIGJlIGludGVycHJldGVkIGZyb20gdGhlIGxvY2F0aW9uIG9mIHRoZSBYTUwgb3IgZnJvbSB0aGUgd29ya2luZyBkaXJlY3Rvcnkgb2YgdGhlIHByb2dyYW0gdGhhdCBjYWxscyBsb2FkX21hcCgpXCJ9LFwibWluaW11bS12ZXJzaW9uXCI6e2NzczpcIlwiLFwiZGVmYXVsdC12YWx1ZVwiOlwibm9uZVwiLFwiZGVmYXVsdC1tZWFuaW5nXCI6XCJNYXBuaWsgdmVyc2lvbiB3aWxsIG5vdCBiZSBkZXRlY3RlZCBhbmQgbm8gZXJyb3Igd2lsbCBiZSB0aHJvd24gYWJvdXQgY29tcGF0aWJpbGl0eVwiLHR5cGU6XCJzdHJpbmdcIixkb2M6XCJUaGUgbWludW11bSBNYXBuaWsgdmVyc2lvbiAoZS5nLiAwLjcuMikgbmVlZGVkIHRvIHVzZSBjZXJ0YWluIGZ1bmN0aW9uYWxpdHkgaW4gdGhlIHN0eWxlc2hlZXRcIn0sXCJmb250LWRpcmVjdG9yeVwiOntjc3M6XCJmb250LWRpcmVjdG9yeVwiLHR5cGU6XCJ1cmlcIixcImRlZmF1bHQtdmFsdWVcIjpcIm5vbmVcIixcImRlZmF1bHQtbWVhbmluZ1wiOlwiTm8gbWFwLXNwZWNpZmljIGZvbnRzIHdpbGwgYmUgcmVnaXN0ZXJlZFwiLGRvYzpcIlBhdGggdG8gYSBkaXJlY3Rvcnkgd2hpY2ggaG9sZHMgZm9udHMgd2hpY2ggc2hvdWxkIGJlIHJlZ2lzdGVyZWQgd2hlbiB0aGUgTWFwIGlzIGxvYWRlZCAoaW4gYWRkaXRpb24gdG8gYW55IGZvbnRzIHRoYXQgbWF5IGJlIGF1dG9tYXRpY2FsbHkgcmVnaXN0ZXJlZCkuXCJ9fSxwb2x5Z29uOntmaWxsOntjc3M6XCJwb2x5Z29uLWZpbGxcIix0eXBlOlwiY29sb3JcIixcImRlZmF1bHQtdmFsdWVcIjpcInJnYmEoMTI4LDEyOCwxMjgsMSlcIixcImRlZmF1bHQtbWVhbmluZ1wiOlwiZ3JheSBhbmQgZnVsbHkgb3BhcXVlIChhbHBoYSA9IDEpLCBzYW1lIGFzIHJnYigxMjgsMTI4LDEyOClcIixkb2M6XCJGaWxsIGNvbG9yIHRvIGFzc2lnbiB0byBhIHBvbHlnb25cIixleHByZXNzaW9uOiEwfSxcImZpbGwtb3BhY2l0eVwiOntjc3M6XCJwb2x5Z29uLW9wYWNpdHlcIix0eXBlOlwiZmxvYXRcIixkb2M6XCJUaGUgb3BhY2l0eSBvZiB0aGUgcG9seWdvblwiLFwiZGVmYXVsdC12YWx1ZVwiOjEsXCJkZWZhdWx0LW1lYW5pbmdcIjpcIm9wYXF1ZVwifSxnYW1tYTp7Y3NzOlwicG9seWdvbi1nYW1tYVwiLHR5cGU6XCJmbG9hdFwiLFwiZGVmYXVsdC12YWx1ZVwiOjEsXCJkZWZhdWx0LW1lYW5pbmdcIjpcImZ1bGx5IGFudGlhbGlhc2VkXCIscmFuZ2U6XCIwLTFcIixkb2M6XCJMZXZlbCBvZiBhbnRpYWxpYXNpbmcgb2YgcG9seWdvbiBlZGdlc1wifSxcImdhbW1hLW1ldGhvZFwiOntjc3M6XCJwb2x5Z29uLWdhbW1hLW1ldGhvZFwiLHR5cGU6W1wicG93ZXJcIixcImxpbmVhclwiLFwibm9uZVwiLFwidGhyZXNob2xkXCIsXCJtdWx0aXBseVwiXSxcImRlZmF1bHQtdmFsdWVcIjpcInBvd2VyXCIsXCJkZWZhdWx0LW1lYW5pbmdcIjpcInBvdyh4LGdhbW1hKSBpcyB1c2VkIHRvIGNhbGN1bGF0ZSBwaXhlbCBnYW1tYSwgd2hpY2ggcHJvZHVjZXMgc2xpZ2h0bHkgc21vb3RoZXIgbGluZSBhbmQgcG9seWdvbiBhbnRpYWxpYXNpbmcgdGhhbiB0aGUgJ2xpbmVhcicgbWV0aG9kLCB3aGlsZSBvdGhlciBtZXRob2RzIGFyZSB1c3VhbGx5IG9ubHkgdXNlZCB0byBkaXNhYmxlIEFBXCIsZG9jOlwiQW4gQW50aWdyYWluIEdlb21ldHJ5IHNwZWNpZmljIHJlbmRlcmluZyBoaW50IHRvIGNvbnRyb2wgdGhlIHF1YWxpdHkgb2YgYW50aWFsaWFzaW5nLiBVbmRlciB0aGUgaG9vZCBpbiBNYXBuaWsgdGhpcyBtZXRob2QgaXMgdXNlZCBpbiBjb21iaW5hdGlvbiB3aXRoIHRoZSAnZ2FtbWEnIHZhbHVlICh3aGljaCBkZWZhdWx0cyB0byAxKS4gVGhlIG1ldGhvZHMgYXJlIGluIHRoZSBBR0cgc291cmNlIGF0IGh0dHBzOi8vZ2l0aHViLmNvbS9tYXBuaWsvbWFwbmlrL2Jsb2IvbWFzdGVyL2RlcHMvYWdnL2luY2x1ZGUvYWdnX2dhbW1hX2Z1bmN0aW9ucy5oXCJ9LGNsaXA6e2NzczpcInBvbHlnb24tY2xpcFwiLHR5cGU6XCJib29sZWFuXCIsXCJkZWZhdWx0LXZhbHVlXCI6ITAsXCJkZWZhdWx0LW1lYW5pbmdcIjpcImdlb21ldHJ5IHdpbGwgYmUgY2xpcHBlZCB0byBtYXAgYm91bmRzIGJlZm9yZSByZW5kZXJpbmdcIixkb2M6XCJnZW9tZXRyaWVzIGFyZSBjbGlwcGVkIHRvIG1hcCBib3VuZHMgYnkgZGVmYXVsdCBmb3IgYmVzdCByZW5kZXJpbmcgcGVyZm9ybWFuY2UuIEluIHNvbWUgY2FzZXMgdXNlcnMgbWF5IHdpc2ggdG8gZGlzYWJsZSB0aGlzIHRvIGF2b2lkIHJlbmRlcmluZyBhcnRpZmFjdHMuXCJ9LHNtb290aDp7Y3NzOlwicG9seWdvbi1zbW9vdGhcIix0eXBlOlwiZmxvYXRcIixcImRlZmF1bHQtdmFsdWVcIjowLFwiZGVmYXVsdC1tZWFuaW5nXCI6XCJubyBzbW9vdGhpbmdcIixyYW5nZTpcIjAtMVwiLGRvYzpcIlNtb290aHMgb3V0IGdlb21ldHJ5IGFuZ2xlcy4gMCBpcyBubyBzbW9vdGhpbmcsIDEgaXMgZnVsbHkgc21vb3RoZWQuIFZhbHVlcyBncmVhdGVyIHRoYW4gMSB3aWxsIHByb2R1Y2Ugd2lsZCwgbG9vcGluZyBnZW9tZXRyaWVzLlwifSxcImdlb21ldHJ5LXRyYW5zZm9ybVwiOntjc3M6XCJwb2x5Z29uLWdlb21ldHJ5LXRyYW5zZm9ybVwiLHR5cGU6XCJmdW5jdGlvbnNcIixcImRlZmF1bHQtdmFsdWVcIjpcIm5vbmVcIixcImRlZmF1bHQtbWVhbmluZ1wiOlwiZ2VvbWV0cnkgd2lsbCBub3QgYmUgdHJhbnNmb3JtZWRcIixkb2M6XCJBbGxvd3MgdHJhbnNmb3JtYXRpb24gZnVuY3Rpb25zIHRvIGJlIGFwcGxpZWQgdG8gdGhlIGdlb21ldHJ5LlwiLGZ1bmN0aW9uczpbW1wibWF0cml4XCIsNl0sW1widHJhbnNsYXRlXCIsMl0sW1wic2NhbGVcIiwyXSxbXCJyb3RhdGVcIiwzXSxbXCJza2V3WFwiLDFdLFtcInNrZXdZXCIsMV1dfSxcImNvbXAtb3BcIjp7Y3NzOlwicG9seWdvbi1jb21wLW9wXCIsXCJkZWZhdWx0LXZhbHVlXCI6XCJzcmMtb3ZlclwiLFwiZGVmYXVsdC1tZWFuaW5nXCI6XCJhZGQgdGhlIGN1cnJlbnQgc3ltYm9saXplciBvbiB0b3Agb2Ygb3RoZXIgc3ltYm9saXplclwiLGRvYzpcIkNvbXBvc2l0ZSBvcGVyYXRpb24uIFRoaXMgZGVmaW5lcyBob3cgdGhpcyBzeW1ib2xpemVyIHNob3VsZCBiZWhhdmUgcmVsYXRpdmUgdG8gc3ltYm9saXplcnMgYXRvcCBvciBiZWxvdyBpdC5cIix0eXBlOltcImNsZWFyXCIsXCJzcmNcIixcImRzdFwiLFwic3JjLW92ZXJcIixcImRzdC1vdmVyXCIsXCJzcmMtaW5cIixcImRzdC1pblwiLFwic3JjLW91dFwiLFwiZHN0LW91dFwiLFwic3JjLWF0b3BcIixcImRzdC1hdG9wXCIsXCJ4b3JcIixcInBsdXNcIixcIm1pbnVzXCIsXCJtdWx0aXBseVwiLFwic2NyZWVuXCIsXCJvdmVybGF5XCIsXCJkYXJrZW5cIixcImxpZ2h0ZW5cIixcImNvbG9yLWRvZGdlXCIsXCJjb2xvci1idXJuXCIsXCJoYXJkLWxpZ2h0XCIsXCJzb2Z0LWxpZ2h0XCIsXCJkaWZmZXJlbmNlXCIsXCJleGNsdXNpb25cIixcImNvbnRyYXN0XCIsXCJpbnZlcnRcIixcImludmVydC1yZ2JcIixcImdyYWluLW1lcmdlXCIsXCJncmFpbi1leHRyYWN0XCIsXCJodWVcIixcInNhdHVyYXRpb25cIixcImNvbG9yXCIsXCJ2YWx1ZVwiXX19LGxpbmU6e3N0cm9rZTp7Y3NzOlwibGluZS1jb2xvclwiLFwiZGVmYXVsdC12YWx1ZVwiOlwicmdiYSgwLDAsMCwxKVwiLHR5cGU6XCJjb2xvclwiLFwiZGVmYXVsdC1tZWFuaW5nXCI6XCJibGFjayBhbmQgZnVsbHkgb3BhcXVlIChhbHBoYSA9IDEpLCBzYW1lIGFzIHJnYigwLDAsMClcIixkb2M6XCJUaGUgY29sb3Igb2YgYSBkcmF3biBsaW5lXCIsZXhwcmVzc2lvbjohMH0sXCJzdHJva2Utd2lkdGhcIjp7Y3NzOlwibGluZS13aWR0aFwiLFwiZGVmYXVsdC12YWx1ZVwiOjEsdHlwZTpcImZsb2F0XCIsZG9jOlwiVGhlIHdpZHRoIG9mIGEgbGluZSBpbiBwaXhlbHNcIixleHByZXNzaW9uOiEwfSxcInN0cm9rZS1vcGFjaXR5XCI6e2NzczpcImxpbmUtb3BhY2l0eVwiLFwiZGVmYXVsdC12YWx1ZVwiOjEsdHlwZTpcImZsb2F0XCIsXCJkZWZhdWx0LW1lYW5pbmdcIjpcIm9wYXF1ZVwiLGRvYzpcIlRoZSBvcGFjaXR5IG9mIGEgbGluZVwifSxcInN0cm9rZS1saW5lam9pblwiOntjc3M6XCJsaW5lLWpvaW5cIixcImRlZmF1bHQtdmFsdWVcIjpcIm1pdGVyXCIsdHlwZTpbXCJtaXRlclwiLFwicm91bmRcIixcImJldmVsXCJdLGRvYzpcIlRoZSBiZWhhdmlvciBvZiBsaW5lcyB3aGVuIGpvaW5pbmdcIn0sXCJzdHJva2UtbGluZWNhcFwiOntjc3M6XCJsaW5lLWNhcFwiLFwiZGVmYXVsdC12YWx1ZVwiOlwiYnV0dFwiLHR5cGU6W1wiYnV0dFwiLFwicm91bmRcIixcInNxdWFyZVwiXSxkb2M6XCJUaGUgZGlzcGxheSBvZiBsaW5lIGVuZGluZ3NcIn0sXCJzdHJva2UtZ2FtbWFcIjp7Y3NzOlwibGluZS1nYW1tYVwiLHR5cGU6XCJmbG9hdFwiLFwiZGVmYXVsdC12YWx1ZVwiOjEsXCJkZWZhdWx0LW1lYW5pbmdcIjpcImZ1bGx5IGFudGlhbGlhc2VkXCIscmFuZ2U6XCIwLTFcIixkb2M6XCJMZXZlbCBvZiBhbnRpYWxpYXNpbmcgb2Ygc3Ryb2tlIGxpbmVcIn0sXCJzdHJva2UtZ2FtbWEtbWV0aG9kXCI6e2NzczpcImxpbmUtZ2FtbWEtbWV0aG9kXCIsdHlwZTpbXCJwb3dlclwiLFwibGluZWFyXCIsXCJub25lXCIsXCJ0aHJlc2hvbGRcIixcIm11bHRpcGx5XCJdLFwiZGVmYXVsdC12YWx1ZVwiOlwicG93ZXJcIixcImRlZmF1bHQtbWVhbmluZ1wiOlwicG93KHgsZ2FtbWEpIGlzIHVzZWQgdG8gY2FsY3VsYXRlIHBpeGVsIGdhbW1hLCB3aGljaCBwcm9kdWNlcyBzbGlnaHRseSBzbW9vdGhlciBsaW5lIGFuZCBwb2x5Z29uIGFudGlhbGlhc2luZyB0aGFuIHRoZSAnbGluZWFyJyBtZXRob2QsIHdoaWxlIG90aGVyIG1ldGhvZHMgYXJlIHVzdWFsbHkgb25seSB1c2VkIHRvIGRpc2FibGUgQUFcIixkb2M6XCJBbiBBbnRpZ3JhaW4gR2VvbWV0cnkgc3BlY2lmaWMgcmVuZGVyaW5nIGhpbnQgdG8gY29udHJvbCB0aGUgcXVhbGl0eSBvZiBhbnRpYWxpYXNpbmcuIFVuZGVyIHRoZSBob29kIGluIE1hcG5payB0aGlzIG1ldGhvZCBpcyB1c2VkIGluIGNvbWJpbmF0aW9uIHdpdGggdGhlICdnYW1tYScgdmFsdWUgKHdoaWNoIGRlZmF1bHRzIHRvIDEpLiBUaGUgbWV0aG9kcyBhcmUgaW4gdGhlIEFHRyBzb3VyY2UgYXQgaHR0cHM6Ly9naXRodWIuY29tL21hcG5pay9tYXBuaWsvYmxvYi9tYXN0ZXIvZGVwcy9hZ2cvaW5jbHVkZS9hZ2dfZ2FtbWFfZnVuY3Rpb25zLmhcIn0sXCJzdHJva2UtZGFzaGFycmF5XCI6e2NzczpcImxpbmUtZGFzaGFycmF5XCIsdHlwZTpcIm51bWJlcnNcIixkb2M6XCJBIHBhaXIgb2YgbGVuZ3RoIHZhbHVlcyBbYSxiXSwgd2hlcmUgKGEpIGlzIHRoZSBkYXNoIGxlbmd0aCBhbmQgKGIpIGlzIHRoZSBnYXAgbGVuZ3RoIHJlc3BlY3RpdmVseS4gTW9yZSB0aGFuIHR3byB2YWx1ZXMgYXJlIHN1cHBvcnRlZCBmb3IgbW9yZSBjb21wbGV4IHBhdHRlcm5zLlwiLFwiZGVmYXVsdC12YWx1ZVwiOlwibm9uZVwiLFwiZGVmYXVsdC1tZWFuaW5nXCI6XCJzb2xpZCBsaW5lXCJ9LFwic3Ryb2tlLWRhc2hvZmZzZXRcIjp7Y3NzOlwibGluZS1kYXNoLW9mZnNldFwiLHR5cGU6XCJudW1iZXJzXCIsZG9jOlwidmFsaWQgcGFyYW1ldGVyIGJ1dCBub3QgY3VycmVudGx5IHVzZWQgaW4gcmVuZGVyZXJzIChvbmx5IGV4aXN0cyBmb3IgZXhwZXJpbWVudGFsIHN2ZyBzdXBwb3J0IGluIE1hcG5payB3aGljaCBpcyBub3QgeWV0IGVuYWJsZWQpXCIsXCJkZWZhdWx0LXZhbHVlXCI6XCJub25lXCIsXCJkZWZhdWx0LW1lYW5pbmdcIjpcInNvbGlkIGxpbmVcIn0sXCJzdHJva2UtbWl0ZXJsaW1pdFwiOntjc3M6XCJsaW5lLW1pdGVybGltaXRcIix0eXBlOlwiZmxvYXRcIixkb2M6XCJUaGUgbGltaXQgb24gdGhlIHJhdGlvIG9mIHRoZSBtaXRlciBsZW5ndGggdG8gdGhlIHN0cm9rZS13aWR0aC4gVXNlZCB0byBhdXRvbWF0aWNhbGx5IGNvbnZlcnQgbWl0ZXIgam9pbnMgdG8gYmV2ZWwgam9pbnMgZm9yIHNoYXJwIGFuZ2xlcyB0byBhdm9pZCB0aGUgbWl0ZXIgZXh0ZW5kaW5nIGJleW9uZCB0aGUgdGhpY2tuZXNzIG9mIHRoZSBzdHJva2luZyBwYXRoLiBOb3JtYWxseSB3aWxsIG5vdCBuZWVkIHRvIGJlIHNldCwgYnV0IGEgbGFyZ2VyIHZhbHVlIGNhbiBzb21ldGltZXMgaGVscCBhdm9pZCBqYWdneSBhcnRpZmFjdHMuXCIsXCJkZWZhdWx0LXZhbHVlXCI6NCxcImRlZmF1bHQtbWVhbmluZ1wiOlwiV2lsbCBhdXRvLWNvbnZlcnQgbWl0ZXJzIHRvIGJldmVsIGxpbmUgam9pbnMgd2hlbiB0aGV0YSBpcyBsZXNzIHRoYW4gMjkgZGVncmVlcyBhcyBwZXIgdGhlIFNWRyBzcGVjOiAnbWl0ZXJMZW5ndGggLyBzdHJva2Utd2lkdGggPSAxIC8gc2luICggdGhldGEgLyAyICknXCJ9LGNsaXA6e2NzczpcImxpbmUtY2xpcFwiLHR5cGU6XCJib29sZWFuXCIsXCJkZWZhdWx0LXZhbHVlXCI6ITAsXCJkZWZhdWx0LW1lYW5pbmdcIjpcImdlb21ldHJ5IHdpbGwgYmUgY2xpcHBlZCB0byBtYXAgYm91bmRzIGJlZm9yZSByZW5kZXJpbmdcIixkb2M6XCJnZW9tZXRyaWVzIGFyZSBjbGlwcGVkIHRvIG1hcCBib3VuZHMgYnkgZGVmYXVsdCBmb3IgYmVzdCByZW5kZXJpbmcgcGVyZm9ybWFuY2UuIEluIHNvbWUgY2FzZXMgdXNlcnMgbWF5IHdpc2ggdG8gZGlzYWJsZSB0aGlzIHRvIGF2b2lkIHJlbmRlcmluZyBhcnRpZmFjdHMuXCJ9LHNtb290aDp7Y3NzOlwibGluZS1zbW9vdGhcIix0eXBlOlwiZmxvYXRcIixcImRlZmF1bHQtdmFsdWVcIjowLFwiZGVmYXVsdC1tZWFuaW5nXCI6XCJubyBzbW9vdGhpbmdcIixyYW5nZTpcIjAtMVwiLGRvYzpcIlNtb290aHMgb3V0IGdlb21ldHJ5IGFuZ2xlcy4gMCBpcyBubyBzbW9vdGhpbmcsIDEgaXMgZnVsbHkgc21vb3RoZWQuIFZhbHVlcyBncmVhdGVyIHRoYW4gMSB3aWxsIHByb2R1Y2Ugd2lsZCwgbG9vcGluZyBnZW9tZXRyaWVzLlwifSxvZmZzZXQ6e2NzczpcImxpbmUtb2Zmc2V0XCIsdHlwZTpcImZsb2F0XCIsXCJkZWZhdWx0LXZhbHVlXCI6MCxcImRlZmF1bHQtbWVhbmluZ1wiOlwibm8gb2Zmc2V0XCIsZG9jOlwiT2Zmc2V0cyBhIGxpbmUgYSBudW1iZXIgb2YgcGl4ZWxzIHBhcmFsbGVsIHRvIGl0cyBhY3R1YWwgcGF0aC4gUG9zdGl2ZSB2YWx1ZXMgbW92ZSB0aGUgbGluZSBsZWZ0LCBuZWdhdGl2ZSB2YWx1ZXMgbW92ZSBpdCByaWdodCAocmVsYXRpdmUgdG8gdGhlIGRpcmVjdGlvbmFsaXR5IG9mIHRoZSBsaW5lKS5cIn0scmFzdGVyaXplcjp7Y3NzOlwibGluZS1yYXN0ZXJpemVyXCIsdHlwZTpbXCJmdWxsXCIsXCJmYXN0XCJdLFwiZGVmYXVsdC12YWx1ZVwiOlwiZnVsbFwiLGRvYzpcIkV4cG9zZXMgYW4gYWx0ZXJuYXRlIEFHRyByZW5kZXJpbmcgbWV0aG9kIHRoYXQgc2FjcmlmaWNlcyBzb21lIGFjY3VyYWN5IGZvciBzcGVlZC5cIn0sXCJnZW9tZXRyeS10cmFuc2Zvcm1cIjp7Y3NzOlwibGluZS1nZW9tZXRyeS10cmFuc2Zvcm1cIix0eXBlOlwiZnVuY3Rpb25zXCIsXCJkZWZhdWx0LXZhbHVlXCI6XCJub25lXCIsXCJkZWZhdWx0LW1lYW5pbmdcIjpcImdlb21ldHJ5IHdpbGwgbm90IGJlIHRyYW5zZm9ybWVkXCIsZG9jOlwiQWxsb3dzIHRyYW5zZm9ybWF0aW9uIGZ1bmN0aW9ucyB0byBiZSBhcHBsaWVkIHRvIHRoZSBnZW9tZXRyeS5cIixmdW5jdGlvbnM6W1tcIm1hdHJpeFwiLDZdLFtcInRyYW5zbGF0ZVwiLDJdLFtcInNjYWxlXCIsMl0sW1wicm90YXRlXCIsM10sW1wic2tld1hcIiwxXSxbXCJza2V3WVwiLDFdXX0sXCJjb21wLW9wXCI6e2NzczpcImxpbmUtY29tcC1vcFwiLFwiZGVmYXVsdC12YWx1ZVwiOlwic3JjLW92ZXJcIixcImRlZmF1bHQtbWVhbmluZ1wiOlwiYWRkIHRoZSBjdXJyZW50IHN5bWJvbGl6ZXIgb24gdG9wIG9mIG90aGVyIHN5bWJvbGl6ZXJcIixkb2M6XCJDb21wb3NpdGUgb3BlcmF0aW9uLiBUaGlzIGRlZmluZXMgaG93IHRoaXMgc3ltYm9saXplciBzaG91bGQgYmVoYXZlIHJlbGF0aXZlIHRvIHN5bWJvbGl6ZXJzIGF0b3Agb3IgYmVsb3cgaXQuXCIsdHlwZTpbXCJjbGVhclwiLFwic3JjXCIsXCJkc3RcIixcInNyYy1vdmVyXCIsXCJkc3Qtb3ZlclwiLFwic3JjLWluXCIsXCJkc3QtaW5cIixcInNyYy1vdXRcIixcImRzdC1vdXRcIixcInNyYy1hdG9wXCIsXCJkc3QtYXRvcFwiLFwieG9yXCIsXCJwbHVzXCIsXCJtaW51c1wiLFwibXVsdGlwbHlcIixcInNjcmVlblwiLFwib3ZlcmxheVwiLFwiZGFya2VuXCIsXCJsaWdodGVuXCIsXCJjb2xvci1kb2RnZVwiLFwiY29sb3ItYnVyblwiLFwiaGFyZC1saWdodFwiLFwic29mdC1saWdodFwiLFwiZGlmZmVyZW5jZVwiLFwiZXhjbHVzaW9uXCIsXCJjb250cmFzdFwiLFwiaW52ZXJ0XCIsXCJpbnZlcnQtcmdiXCIsXCJncmFpbi1tZXJnZVwiLFwiZ3JhaW4tZXh0cmFjdFwiLFwiaHVlXCIsXCJzYXR1cmF0aW9uXCIsXCJjb2xvclwiLFwidmFsdWVcIl19fSxtYXJrZXJzOntmaWxlOntjc3M6XCJtYXJrZXItZmlsZVwiLGRvYzpcIkFuIFNWRyBmaWxlIHRoYXQgdGhpcyBtYXJrZXIgc2hvd3MgYXQgZWFjaCBwbGFjZW1lbnQuIElmIG5vIGZpbGUgaXMgZ2l2ZW4sIHRoZSBtYXJrZXIgd2lsbCBzaG93IGFuIGVsbGlwc2UuXCIsXCJkZWZhdWx0LXZhbHVlXCI6XCJcIixcImRlZmF1bHQtbWVhbmluZ1wiOlwiQW4gZWxsaXBzZSBvciBjaXJjbGUsIGlmIHdpZHRoIGVxdWFscyBoZWlnaHRcIix0eXBlOlwidXJpXCJ9LG9wYWNpdHk6e2NzczpcIm1hcmtlci1vcGFjaXR5XCIsZG9jOlwiVGhlIG92ZXJhbGwgb3BhY2l0eSBvZiB0aGUgbWFya2VyLCBpZiBzZXQsIG92ZXJyaWRlcyBib3RoIHRoZSBvcGFjaXR5IG9mIGJvdGggdGhlIGZpbGwgYW5kIHN0cm9rZVwiLFwiZGVmYXVsdC12YWx1ZVwiOjEsXCJkZWZhdWx0LW1lYW5pbmdcIjpcIlRoZSBzdHJva2Utb3BhY2l0eSBhbmQgZmlsbC1vcGFjaXR5IHdpbGwgYmUgdXNlZFwiLHR5cGU6XCJmbG9hdFwifSxcImZpbGwtb3BhY2l0eVwiOntjc3M6XCJtYXJrZXItZmlsbC1vcGFjaXR5XCIsZG9jOlwiVGhlIGZpbGwgb3BhY2l0eSBvZiB0aGUgbWFya2VyXCIsXCJkZWZhdWx0LXZhbHVlXCI6MSxcImRlZmF1bHQtbWVhbmluZ1wiOlwib3BhcXVlXCIsdHlwZTpcImZsb2F0XCJ9LHN0cm9rZTp7Y3NzOlwibWFya2VyLWxpbmUtY29sb3JcIixkb2M6XCJUaGUgY29sb3Igb2YgdGhlIHN0cm9rZSBhcm91bmQgYSBtYXJrZXIgc2hhcGUuXCIsXCJkZWZhdWx0LXZhbHVlXCI6XCJibGFja1wiLHR5cGU6XCJjb2xvclwifSxcInN0cm9rZS13aWR0aFwiOntjc3M6XCJtYXJrZXItbGluZS13aWR0aFwiLGRvYzpcIlRoZSB3aWR0aCBvZiB0aGUgc3Ryb2tlIGFyb3VuZCBhIG1hcmtlciBzaGFwZSwgaW4gcGl4ZWxzLiBUaGlzIGlzIHBvc2l0aW9uZWQgb24gdGhlIGJvdW5kYXJ5LCBzbyBoaWdoIHZhbHVlcyBjYW4gY292ZXIgdGhlIGFyZWEgaXRzZWxmLlwiLHR5cGU6XCJmbG9hdFwifSxcInN0cm9rZS1vcGFjaXR5XCI6e2NzczpcIm1hcmtlci1saW5lLW9wYWNpdHlcIixcImRlZmF1bHQtdmFsdWVcIjoxLFwiZGVmYXVsdC1tZWFuaW5nXCI6XCJvcGFxdWVcIixkb2M6XCJUaGUgb3BhY2l0eSBvZiBhIGxpbmVcIix0eXBlOlwiZmxvYXRcIn0scGxhY2VtZW50Ontjc3M6XCJtYXJrZXItcGxhY2VtZW50XCIsdHlwZTpbXCJwb2ludFwiLFwibGluZVwiLFwiaW50ZXJpb3JcIl0sXCJkZWZhdWx0LXZhbHVlXCI6XCJwb2ludFwiLFwiZGVmYXVsdC1tZWFuaW5nXCI6XCJQbGFjZSBtYXJrZXJzIGF0IHRoZSBjZW50ZXIgcG9pbnQgKGNlbnRyb2lkKSBvZiB0aGUgZ2VvbWV0cnlcIixkb2M6XCJBdHRlbXB0IHRvIHBsYWNlIG1hcmtlcnMgb24gYSBwb2ludCwgaW4gdGhlIGNlbnRlciBvZiBhIHBvbHlnb24sIG9yIGlmIG1hcmtlcnMtcGxhY2VtZW50OmxpbmUsIHRoZW4gbXVsdGlwbGUgdGltZXMgYWxvbmcgYSBsaW5lLiAnaW50ZXJpb3InIHBsYWNlbWVudCBjYW4gYmUgdXNlZCB0byBlbnN1cmUgdGhhdCBwb2ludHMgcGxhY2VkIG9uIHBvbHlnb25zIGFyZSBmb3JjZWQgdG8gYmUgaW5zaWRlIHRoZSBwb2x5Z29uIGludGVyaW9yXCJ9LFwibXVsdGktcG9saWN5XCI6e2NzczpcIm1hcmtlci1tdWx0aS1wb2xpY3lcIix0eXBlOltcImVhY2hcIixcIndob2xlXCIsXCJsYXJnZXN0XCJdLFwiZGVmYXVsdC12YWx1ZVwiOlwiZWFjaFwiLFwiZGVmYXVsdC1tZWFuaW5nXCI6XCJJZiBhIGZlYXR1cmUgY29udGFpbnMgbXVsdGlwbGUgZ2VvbWV0cmllcyBhbmQgdGhlIHBsYWNlbWVudCB0eXBlIGlzIGVpdGhlciBwb2ludCBvciBpbnRlcmlvciB0aGVuIGEgbWFya2VyIHdpbGwgYmUgcmVuZGVyZWQgZm9yIGVhY2hcIixkb2M6XCJBIHNwZWNpYWwgc2V0dGluZyB0byBhbGxvdyB0aGUgdXNlciB0byBjb250cm9sIHJlbmRlcmluZyBiZWhhdmlvciBmb3IgJ211bHRpLWdlb21ldHJpZXMnICh3aGVuIGEgZmVhdHVyZSBjb250YWlucyBtdWx0aXBsZSBnZW9tZXRyaWVzKS4gVGhpcyBzZXR0aW5nIGRvZXMgbm90IGFwcGx5IHRvIG1hcmtlcnMgcGxhY2VkIGFsb25nIGxpbmVzLiBUaGUgJ2VhY2gnIHBvbGljeSBpcyBkZWZhdWx0IGFuZCBtZWFucyBhbGwgZ2VvbWV0cmllcyB3aWxsIGdldCBhIG1hcmtlci4gVGhlICd3aG9sZScgcG9saWN5IG1lYW5zIHRoYXQgdGhlIGFnZ3JlZ2F0ZSBjZW50cm9pZCBiZXR3ZWVuIGFsbCBnZW9tZXRyaWVzIHdpbGwgYmUgdXNlZC4gVGhlICdsYXJnZXN0JyBwb2xpY3kgbWVhbnMgdGhhdCBvbmx5IHRoZSBsYXJnZXN0IChieSBib3VuZGluZyBib3ggYXJlYXMpIGZlYXR1cmUgd2lsbCBnZXQgYSByZW5kZXJlZCBtYXJrZXIgKHRoaXMgaXMgaG93IHRleHQgbGFiZWxpbmcgYmVoYXZlcyBieSBkZWZhdWx0KS5cIn0sXCJtYXJrZXItdHlwZVwiOntjc3M6XCJtYXJrZXItdHlwZVwiLHR5cGU6W1wiYXJyb3dcIixcImVsbGlwc2VcIixcInJlY3RhbmdsZVwiXSxcImRlZmF1bHQtdmFsdWVcIjpcImVsbGlwc2VcIixkb2M6XCJUaGUgZGVmYXVsdCBtYXJrZXItdHlwZS4gSWYgYSBTVkcgZmlsZSBpcyBub3QgZ2l2ZW4gYXMgdGhlIG1hcmtlci1maWxlIHBhcmFtZXRlciwgdGhlIHJlbmRlcmVyIHByb3ZpZGVzIGVpdGhlciBhbiBhcnJvdyBvciBhbiBlbGxpcHNlIChhIGNpcmNsZSBpZiBoZWlnaHQgaXMgZXF1YWwgdG8gd2lkdGgpXCJ9LHdpZHRoOntjc3M6XCJtYXJrZXItd2lkdGhcIixcImRlZmF1bHQtdmFsdWVcIjoxMCxkb2M6XCJUaGUgd2lkdGggb2YgdGhlIG1hcmtlciwgaWYgdXNpbmcgb25lIG9mIHRoZSBkZWZhdWx0IHR5cGVzLlwiLHR5cGU6XCJmbG9hdFwiLGV4cHJlc3Npb246ITB9LGhlaWdodDp7Y3NzOlwibWFya2VyLWhlaWdodFwiLFwiZGVmYXVsdC12YWx1ZVwiOjEwLGRvYzpcIlRoZSBoZWlnaHQgb2YgdGhlIG1hcmtlciwgaWYgdXNpbmcgb25lIG9mIHRoZSBkZWZhdWx0IHR5cGVzLlwiLHR5cGU6XCJmbG9hdFwiLGV4cHJlc3Npb246ITB9LGZpbGw6e2NzczpcIm1hcmtlci1maWxsXCIsXCJkZWZhdWx0LXZhbHVlXCI6XCJibHVlXCIsZG9jOlwiVGhlIGNvbG9yIG9mIHRoZSBhcmVhIG9mIHRoZSBtYXJrZXIuXCIsdHlwZTpcImNvbG9yXCIsZXhwcmVzc2lvbjohMH0sXCJhbGxvdy1vdmVybGFwXCI6e2NzczpcIm1hcmtlci1hbGxvdy1vdmVybGFwXCIsdHlwZTpcImJvb2xlYW5cIixcImRlZmF1bHQtdmFsdWVcIjohMSxkb2M6XCJDb250cm9sIHdoZXRoZXIgb3ZlcmxhcHBpbmcgbWFya2VycyBhcmUgc2hvd24gb3IgaGlkZGVuLlwiLFwiZGVmYXVsdC1tZWFuaW5nXCI6XCJEbyBub3QgYWxsb3cgbWFrZXJzIHRvIG92ZXJsYXAgd2l0aCBlYWNoIG90aGVyIC0gb3ZlcmxhcHBpbmcgbWFya2VycyB3aWxsIG5vdCBiZSBzaG93bi5cIn0sXCJpZ25vcmUtcGxhY2VtZW50XCI6e2NzczpcIm1hcmtlci1pZ25vcmUtcGxhY2VtZW50XCIsdHlwZTpcImJvb2xlYW5cIixcImRlZmF1bHQtdmFsdWVcIjohMSxcImRlZmF1bHQtbWVhbmluZ1wiOlwiZG8gbm90IHN0b3JlIHRoZSBiYm94IG9mIHRoaXMgZ2VvbWV0cnkgaW4gdGhlIGNvbGxpc2lvbiBkZXRlY3RvciBjYWNoZVwiLGRvYzpcInZhbHVlIHRvIGNvbnRyb2wgd2hldGhlciB0aGUgcGxhY2VtZW50IG9mIHRoZSBmZWF0dXJlIHdpbGwgcHJldmVudCB0aGUgcGxhY2VtZW50IG9mIG90aGVyIGZlYXR1cmVzXCJ9LHNwYWNpbmc6e2NzczpcIm1hcmtlci1zcGFjaW5nXCIsZG9jOlwiU3BhY2UgYmV0d2VlbiByZXBlYXRlZCBsYWJlbHNcIixcImRlZmF1bHQtdmFsdWVcIjoxMDAsdHlwZTpcImZsb2F0XCJ9LFwibWF4LWVycm9yXCI6e2NzczpcIm1hcmtlci1tYXgtZXJyb3JcIix0eXBlOlwiZmxvYXRcIixcImRlZmF1bHQtdmFsdWVcIjouMixkb2M6XCJUaGUgbWF4aW11bSBkaWZmZXJlbmNlIGJldHdlZW4gYWN0dWFsIG1hcmtlciBwbGFjZW1lbnQgYW5kIHRoZSBtYXJrZXItc3BhY2luZyBwYXJhbWV0ZXIuIFNldHRpbmcgYSBoaWdoIHZhbHVlIGNhbiBhbGxvdyB0aGUgcmVuZGVyZXIgdG8gdHJ5IHRvIHJlc29sdmUgcGxhY2VtZW50IGNvbmZsaWN0cyB3aXRoIG90aGVyIHN5bWJvbGl6ZXJzLlwifSx0cmFuc2Zvcm06e2NzczpcIm1hcmtlci10cmFuc2Zvcm1cIix0eXBlOlwiZnVuY3Rpb25zXCIsZnVuY3Rpb25zOltbXCJtYXRyaXhcIiw2XSxbXCJ0cmFuc2xhdGVcIiwyXSxbXCJzY2FsZVwiLDJdLFtcInJvdGF0ZVwiLDNdLFtcInNrZXdYXCIsMV0sW1wic2tld1lcIiwxXV0sXCJkZWZhdWx0LXZhbHVlXCI6XCJcIixcImRlZmF1bHQtbWVhbmluZ1wiOlwiTm8gdHJhbnNmb3JtYXRpb25cIixkb2M6XCJTVkcgdHJhbnNmb3JtYXRpb24gZGVmaW5pdGlvblwifSxjbGlwOntjc3M6XCJtYXJrZXItY2xpcFwiLHR5cGU6XCJib29sZWFuXCIsXCJkZWZhdWx0LXZhbHVlXCI6ITAsXCJkZWZhdWx0LW1lYW5pbmdcIjpcImdlb21ldHJ5IHdpbGwgYmUgY2xpcHBlZCB0byBtYXAgYm91bmRzIGJlZm9yZSByZW5kZXJpbmdcIixkb2M6XCJnZW9tZXRyaWVzIGFyZSBjbGlwcGVkIHRvIG1hcCBib3VuZHMgYnkgZGVmYXVsdCBmb3IgYmVzdCByZW5kZXJpbmcgcGVyZm9ybWFuY2UuIEluIHNvbWUgY2FzZXMgdXNlcnMgbWF5IHdpc2ggdG8gZGlzYWJsZSB0aGlzIHRvIGF2b2lkIHJlbmRlcmluZyBhcnRpZmFjdHMuXCJ9LHNtb290aDp7Y3NzOlwibWFya2VyLXNtb290aFwiLHR5cGU6XCJmbG9hdFwiLFwiZGVmYXVsdC12YWx1ZVwiOjAsXCJkZWZhdWx0LW1lYW5pbmdcIjpcIm5vIHNtb290aGluZ1wiLHJhbmdlOlwiMC0xXCIsZG9jOlwiU21vb3RocyBvdXQgZ2VvbWV0cnkgYW5nbGVzLiAwIGlzIG5vIHNtb290aGluZywgMSBpcyBmdWxseSBzbW9vdGhlZC4gVmFsdWVzIGdyZWF0ZXIgdGhhbiAxIHdpbGwgcHJvZHVjZSB3aWxkLCBsb29waW5nIGdlb21ldHJpZXMuXCJ9LFwiZ2VvbWV0cnktdHJhbnNmb3JtXCI6e2NzczpcIm1hcmtlci1nZW9tZXRyeS10cmFuc2Zvcm1cIix0eXBlOlwiZnVuY3Rpb25zXCIsXCJkZWZhdWx0LXZhbHVlXCI6XCJub25lXCIsXCJkZWZhdWx0LW1lYW5pbmdcIjpcImdlb21ldHJ5IHdpbGwgbm90IGJlIHRyYW5zZm9ybWVkXCIsZG9jOlwiQWxsb3dzIHRyYW5zZm9ybWF0aW9uIGZ1bmN0aW9ucyB0byBiZSBhcHBsaWVkIHRvIHRoZSBnZW9tZXRyeS5cIixmdW5jdGlvbnM6W1tcIm1hdHJpeFwiLDZdLFtcInRyYW5zbGF0ZVwiLDJdLFtcInNjYWxlXCIsMl0sW1wicm90YXRlXCIsM10sW1wic2tld1hcIiwxXSxbXCJza2V3WVwiLDFdXX0sXCJjb21wLW9wXCI6e2NzczpcIm1hcmtlci1jb21wLW9wXCIsXCJkZWZhdWx0LXZhbHVlXCI6XCJzcmMtb3ZlclwiLFwiZGVmYXVsdC1tZWFuaW5nXCI6XCJhZGQgdGhlIGN1cnJlbnQgc3ltYm9saXplciBvbiB0b3Agb2Ygb3RoZXIgc3ltYm9saXplclwiLGRvYzpcIkNvbXBvc2l0ZSBvcGVyYXRpb24uIFRoaXMgZGVmaW5lcyBob3cgdGhpcyBzeW1ib2xpemVyIHNob3VsZCBiZWhhdmUgcmVsYXRpdmUgdG8gc3ltYm9saXplcnMgYXRvcCBvciBiZWxvdyBpdC5cIix0eXBlOltcImNsZWFyXCIsXCJzcmNcIixcImRzdFwiLFwic3JjLW92ZXJcIixcImRzdC1vdmVyXCIsXCJzcmMtaW5cIixcImRzdC1pblwiLFwic3JjLW91dFwiLFwiZHN0LW91dFwiLFwic3JjLWF0b3BcIixcImRzdC1hdG9wXCIsXCJ4b3JcIixcInBsdXNcIixcIm1pbnVzXCIsXCJtdWx0aXBseVwiLFwic2NyZWVuXCIsXCJvdmVybGF5XCIsXCJkYXJrZW5cIixcImxpZ2h0ZW5cIixcImNvbG9yLWRvZGdlXCIsXCJjb2xvci1idXJuXCIsXCJoYXJkLWxpZ2h0XCIsXCJzb2Z0LWxpZ2h0XCIsXCJkaWZmZXJlbmNlXCIsXCJleGNsdXNpb25cIixcImNvbnRyYXN0XCIsXCJpbnZlcnRcIixcImludmVydC1yZ2JcIixcImdyYWluLW1lcmdlXCIsXCJncmFpbi1leHRyYWN0XCIsXCJodWVcIixcInNhdHVyYXRpb25cIixcImNvbG9yXCIsXCJ2YWx1ZVwiXX19LHNoaWVsZDp7bmFtZTp7Y3NzOlwic2hpZWxkLW5hbWVcIix0eXBlOlwic3RyaW5nXCIsZXhwcmVzc2lvbjohMCxzZXJpYWxpemF0aW9uOlwiY29udGVudFwiLGRvYzonVmFsdWUgdG8gdXNlIGZvciBhIHNoaWVsZFwicyB0ZXh0IGxhYmVsLiBEYXRhIGNvbHVtbnMgYXJlIHNwZWNpZmllZCB1c2luZyBicmFja2V0cyBsaWtlIFtjb2x1bW5fbmFtZV0nfSxmaWxlOntjc3M6XCJzaGllbGQtZmlsZVwiLHJlcXVpcmVkOiEwLHR5cGU6XCJ1cmlcIixcImRlZmF1bHQtdmFsdWVcIjpcIm5vbmVcIixkb2M6XCJJbWFnZSBmaWxlIHRvIHJlbmRlciBiZWhpbmQgdGhlIHNoaWVsZCB0ZXh0XCJ9LFwiZmFjZS1uYW1lXCI6e2NzczpcInNoaWVsZC1mYWNlLW5hbWVcIix0eXBlOlwic3RyaW5nXCIsdmFsaWRhdGU6XCJmb250XCIsZG9jOlwiRm9udCBuYW1lIGFuZCBzdHlsZSB0byB1c2UgZm9yIHRoZSBzaGllbGQgdGV4dFwiLFwiZGVmYXVsdC12YWx1ZVwiOlwiXCIscmVxdWlyZWQ6ITB9LFwidW5sb2NrLWltYWdlXCI6e2NzczpcInNoaWVsZC11bmxvY2staW1hZ2VcIix0eXBlOlwiYm9vbGVhblwiLGRvYzpcIlRoaXMgcGFyYW1ldGVyIHNob3VsZCBiZSBzZXQgdG8gdHJ1ZSBpZiB5b3UgYXJlIHRyeWluZyB0byBwb3NpdGlvbiB0ZXh0IGJlc2lkZSByYXRoZXIgdGhhbiBvbiB0b3Agb2YgdGhlIHNoaWVsZCBpbWFnZVwiLFwiZGVmYXVsdC12YWx1ZVwiOiExLFwiZGVmYXVsdC1tZWFuaW5nXCI6XCJ0ZXh0IGFsaWdubWVudCByZWxhdGl2ZSB0byB0aGUgc2hpZWxkIGltYWdlIHVzZXMgdGhlIGNlbnRlciBvZiB0aGUgaW1hZ2UgYXMgdGhlIGFuY2hvciBmb3IgdGV4dCBwb3NpdGlvbmluZy5cIn0sc2l6ZTp7Y3NzOlwic2hpZWxkLXNpemVcIix0eXBlOlwiZmxvYXRcIixkb2M6XCJUaGUgc2l6ZSBvZiB0aGUgc2hpZWxkIHRleHQgaW4gcGl4ZWxzXCJ9LGZpbGw6e2NzczpcInNoaWVsZC1maWxsXCIsdHlwZTpcImNvbG9yXCIsZG9jOlwiVGhlIGNvbG9yIG9mIHRoZSBzaGllbGQgdGV4dFwifSxwbGFjZW1lbnQ6e2NzczpcInNoaWVsZC1wbGFjZW1lbnRcIix0eXBlOltcInBvaW50XCIsXCJsaW5lXCIsXCJ2ZXJ0ZXhcIixcImludGVyaW9yXCJdLFwiZGVmYXVsdC12YWx1ZVwiOlwicG9pbnRcIixkb2M6XCJIb3cgdGhpcyBzaGllbGQgc2hvdWxkIGJlIHBsYWNlZC4gUG9pbnQgcGxhY2VtZW50IGF0dGVtcHRzIHRvIHBsYWNlIGl0IG9uIHRvcCBvZiBwb2ludHMsIGxpbmUgcGxhY2VzIGFsb25nIGxpbmVzIG11bHRpcGxlIHRpbWVzIHBlciBmZWF0dXJlLCB2ZXJ0ZXggcGxhY2VzIG9uIHRoZSB2ZXJ0ZXhlcyBvZiBwb2x5Z29ucywgYW5kIGludGVyaW9yIGF0dGVtcHRzIHRvIHBsYWNlIGluc2lkZSBvZiBwb2x5Z29ucy5cIn0sXCJhdm9pZC1lZGdlc1wiOntjc3M6XCJzaGllbGQtYXZvaWQtZWRnZXNcIixkb2M6XCJUZWxsIHBvc2l0aW9uaW5nIGFsZ29yaXRobSB0byBhdm9pZCBsYWJlbGluZyBuZWFyIGludGVyc2VjdGlvbiBlZGdlcy5cIix0eXBlOlwiYm9vbGVhblwiLFwiZGVmYXVsdC12YWx1ZVwiOiExfSxcImFsbG93LW92ZXJsYXBcIjp7Y3NzOlwic2hpZWxkLWFsbG93LW92ZXJsYXBcIix0eXBlOlwiYm9vbGVhblwiLFwiZGVmYXVsdC12YWx1ZVwiOiExLGRvYzpcIkNvbnRyb2wgd2hldGhlciBvdmVybGFwcGluZyBzaGllbGRzIGFyZSBzaG93biBvciBoaWRkZW4uXCIsXCJkZWZhdWx0LW1lYW5pbmdcIjpcIkRvIG5vdCBhbGxvdyBzaGllbGRzIHRvIG92ZXJsYXAgd2l0aCBvdGhlciBtYXAgZWxlbWVudHMgYWxyZWFkeSBwbGFjZWQuXCJ9LFwibWluaW11bS1kaXN0YW5jZVwiOntjc3M6XCJzaGllbGQtbWluLWRpc3RhbmNlXCIsdHlwZTpcImZsb2F0XCIsXCJkZWZhdWx0LXZhbHVlXCI6MCxkb2M6XCJNaW5pbXVtIGRpc3RhbmNlIHRvIHRoZSBuZXh0IHNoaWVsZCBzeW1ib2wsIG5vdCBuZWNlc3NhcmlseSB0aGUgc2FtZSBzaGllbGQuXCJ9LHNwYWNpbmc6e2NzczpcInNoaWVsZC1zcGFjaW5nXCIsdHlwZTpcImZsb2F0XCIsXCJkZWZhdWx0LXZhbHVlXCI6MCxkb2M6XCJUaGUgc3BhY2luZyBiZXR3ZWVuIHJlcGVhdGVkIG9jY3VycmVuY2VzIG9mIHRoZSBzYW1lIHNoaWVsZCBvbiBhIGxpbmVcIn0sXCJtaW5pbXVtLXBhZGRpbmdcIjp7Y3NzOlwic2hpZWxkLW1pbi1wYWRkaW5nXCIsXCJkZWZhdWx0LXZhbHVlXCI6MCxkb2M6XCJEZXRlcm1pbmVzIHRoZSBtaW5pbXVtIGFtb3VudCBvZiBwYWRkaW5nIHRoYXQgYSBzaGllbGQgZ2V0cyByZWxhdGl2ZSB0byBvdGhlciBzaGllbGRzXCIsdHlwZTpcImZsb2F0XCJ9LFwid3JhcC13aWR0aFwiOntjc3M6XCJzaGllbGQtd3JhcC13aWR0aFwiLHR5cGU6XCJ1bnNpZ25lZFwiLFwiZGVmYXVsdC12YWx1ZVwiOjAsZG9jOlwiTGVuZ3RoIG9mIGEgY2h1bmsgb2YgdGV4dCBpbiBjaGFyYWN0ZXJzIGJlZm9yZSB3cmFwcGluZyB0ZXh0XCJ9LFwid3JhcC1iZWZvcmVcIjp7Y3NzOlwic2hpZWxkLXdyYXAtYmVmb3JlXCIsdHlwZTpcImJvb2xlYW5cIixcImRlZmF1bHQtdmFsdWVcIjohMSxkb2M6XCJXcmFwIHRleHQgYmVmb3JlIHdyYXAtd2lkdGggaXMgcmVhY2hlZC4gSWYgZmFsc2UsIHdyYXBwZWQgbGluZXMgd2lsbCBiZSBhIGJpdCBsb25nZXIgdGhhbiB3cmFwLXdpZHRoLlwifSxcIndyYXAtY2hhcmFjdGVyXCI6e2NzczpcInNoaWVsZC13cmFwLWNoYXJhY3RlclwiLHR5cGU6XCJzdHJpbmdcIixcImRlZmF1bHQtdmFsdWVcIjpcIiBcIixkb2M6XCJVc2UgdGhpcyBjaGFyYWN0ZXIgaW5zdGVhZCBvZiBhIHNwYWNlIHRvIHdyYXAgbG9uZyBuYW1lcy5cIn0sXCJoYWxvLWZpbGxcIjp7Y3NzOlwic2hpZWxkLWhhbG8tZmlsbFwiLHR5cGU6XCJjb2xvclwiLFwiZGVmYXVsdC12YWx1ZVwiOlwiI0ZGRkZGRlwiLFwiZGVmYXVsdC1tZWFuaW5nXCI6XCJ3aGl0ZVwiLGRvYzpcIlNwZWNpZmllcyB0aGUgY29sb3Igb2YgdGhlIGhhbG8gYXJvdW5kIHRoZSB0ZXh0LlwifSxcImhhbG8tcmFkaXVzXCI6e2NzczpcInNoaWVsZC1oYWxvLXJhZGl1c1wiLGRvYzpcIlNwZWNpZnkgdGhlIHJhZGl1cyBvZiB0aGUgaGFsbyBpbiBwaXhlbHNcIixcImRlZmF1bHQtdmFsdWVcIjowLFwiZGVmYXVsdC1tZWFuaW5nXCI6XCJubyBoYWxvXCIsdHlwZTpcImZsb2F0XCJ9LFwiY2hhcmFjdGVyLXNwYWNpbmdcIjp7Y3NzOlwic2hpZWxkLWNoYXJhY3Rlci1zcGFjaW5nXCIsdHlwZTpcInVuc2lnbmVkXCIsXCJkZWZhdWx0LXZhbHVlXCI6MCxkb2M6XCJIb3Jpem9udGFsIHNwYWNpbmcgYmV0d2VlbiBjaGFyYWN0ZXJzIChpbiBwaXhlbHMpLiBDdXJyZW50bHkgd29ya3MgZm9yIHBvaW50IHBsYWNlbWVudCBvbmx5LCBub3QgbGluZSBwbGFjZW1lbnQuXCJ9LFwibGluZS1zcGFjaW5nXCI6e2NzczpcInNoaWVsZC1saW5lLXNwYWNpbmdcIixkb2M6XCJWZXJ0aWNhbCBzcGFjaW5nIGJldHdlZW4gbGluZXMgb2YgbXVsdGlsaW5lIGxhYmVscyAoaW4gcGl4ZWxzKVwiLHR5cGU6XCJ1bnNpZ25lZFwifSxkeDp7Y3NzOlwic2hpZWxkLXRleHQtZHhcIix0eXBlOlwiZmxvYXRcIixkb2M6XCJEaXNwbGFjZSB0ZXh0IHdpdGhpbiBzaGllbGQgYnkgZml4ZWQgYW1vdW50LCBpbiBwaXhlbHMsICsvLSBhbG9uZyB0aGUgWCBheGlzLiAgQSBwb3NpdGl2ZSB2YWx1ZSB3aWxsIHNoaWZ0IHRoZSB0ZXh0IHJpZ2h0XCIsXCJkZWZhdWx0LXZhbHVlXCI6MH0sZHk6e2NzczpcInNoaWVsZC10ZXh0LWR5XCIsdHlwZTpcImZsb2F0XCIsZG9jOlwiRGlzcGxhY2UgdGV4dCB3aXRoaW4gc2hpZWxkIGJ5IGZpeGVkIGFtb3VudCwgaW4gcGl4ZWxzLCArLy0gYWxvbmcgdGhlIFkgYXhpcy4gIEEgcG9zaXRpdmUgdmFsdWUgd2lsbCBzaGlmdCB0aGUgdGV4dCBkb3duXCIsXCJkZWZhdWx0LXZhbHVlXCI6MH0sXCJzaGllbGQtZHhcIjp7Y3NzOlwic2hpZWxkLWR4XCIsdHlwZTpcImZsb2F0XCIsZG9jOlwiRGlzcGxhY2Ugc2hpZWxkIGJ5IGZpeGVkIGFtb3VudCwgaW4gcGl4ZWxzLCArLy0gYWxvbmcgdGhlIFggYXhpcy4gIEEgcG9zaXRpdmUgdmFsdWUgd2lsbCBzaGlmdCB0aGUgdGV4dCByaWdodFwiLFwiZGVmYXVsdC12YWx1ZVwiOjB9LFwic2hpZWxkLWR5XCI6e2NzczpcInNoaWVsZC1keVwiLHR5cGU6XCJmbG9hdFwiLGRvYzpcIkRpc3BsYWNlIHNoaWVsZCBieSBmaXhlZCBhbW91bnQsIGluIHBpeGVscywgKy8tIGFsb25nIHRoZSBZIGF4aXMuICBBIHBvc2l0aXZlIHZhbHVlIHdpbGwgc2hpZnQgdGhlIHRleHQgZG93blwiLFwiZGVmYXVsdC12YWx1ZVwiOjB9LG9wYWNpdHk6e2NzczpcInNoaWVsZC1vcGFjaXR5XCIsdHlwZTpcImZsb2F0XCIsZG9jOlwiKERlZmF1bHQgMS4wKSAtIG9wYWNpdHkgb2YgdGhlIGltYWdlIHVzZWQgZm9yIHRoZSBzaGllbGRcIixcImRlZmF1bHQtdmFsdWVcIjoxfSxcInRleHQtb3BhY2l0eVwiOntjc3M6XCJzaGllbGQtdGV4dC1vcGFjaXR5XCIsdHlwZTpcImZsb2F0XCIsZG9jOlwiKERlZmF1bHQgMS4wKSAtIG9wYWNpdHkgb2YgdGhlIHRleHQgcGxhY2VkIG9uIHRvcCBvZiB0aGUgc2hpZWxkXCIsXCJkZWZhdWx0LXZhbHVlXCI6MX0sXCJob3Jpem9udGFsLWFsaWdubWVudFwiOntjc3M6XCJzaGllbGQtaG9yaXpvbnRhbC1hbGlnbm1lbnRcIix0eXBlOltcImxlZnRcIixcIm1pZGRsZVwiLFwicmlnaHRcIixcImF1dG9cIl0sZG9jOlwiVGhlIHNoaWVsZCdzIGhvcml6b250YWwgYWxpZ25tZW50IGZyb20gaXRzIGNlbnRlcnBvaW50XCIsXCJkZWZhdWx0LXZhbHVlXCI6XCJhdXRvXCJ9LFwidmVydGljYWwtYWxpZ25tZW50XCI6e2NzczpcInNoaWVsZC12ZXJ0aWNhbC1hbGlnbm1lbnRcIix0eXBlOltcInRvcFwiLFwibWlkZGxlXCIsXCJib3R0b21cIixcImF1dG9cIl0sZG9jOlwiVGhlIHNoaWVsZCdzIHZlcnRpY2FsIGFsaWdubWVudCBmcm9tIGl0cyBjZW50ZXJwb2ludFwiLFwiZGVmYXVsdC12YWx1ZVwiOlwibWlkZGxlXCJ9LFwidGV4dC10cmFuc2Zvcm1cIjp7Y3NzOlwic2hpZWxkLXRleHQtdHJhbnNmb3JtXCIsdHlwZTpbXCJub25lXCIsXCJ1cHBlcmNhc2VcIixcImxvd2VyY2FzZVwiLFwiY2FwaXRhbGl6ZVwiXSxkb2M6XCJUcmFuc2Zvcm0gdGhlIGNhc2Ugb2YgdGhlIGNoYXJhY3RlcnNcIixcImRlZmF1bHQtdmFsdWVcIjpcIm5vbmVcIn0sXCJqdXN0aWZ5LWFsaWdubWVudFwiOntjc3M6XCJzaGllbGQtanVzdGlmeS1hbGlnbm1lbnRcIix0eXBlOltcImxlZnRcIixcImNlbnRlclwiLFwicmlnaHRcIixcImF1dG9cIl0sZG9jOlwiRGVmaW5lIGhvdyB0ZXh0IGluIGEgc2hpZWxkJ3MgbGFiZWwgaXMganVzdGlmaWVkXCIsXCJkZWZhdWx0LXZhbHVlXCI6XCJhdXRvXCJ9LGNsaXA6e2NzczpcInNoaWVsZC1jbGlwXCIsdHlwZTpcImJvb2xlYW5cIixcImRlZmF1bHQtdmFsdWVcIjohMCxcImRlZmF1bHQtbWVhbmluZ1wiOlwiZ2VvbWV0cnkgd2lsbCBiZSBjbGlwcGVkIHRvIG1hcCBib3VuZHMgYmVmb3JlIHJlbmRlcmluZ1wiLGRvYzpcImdlb21ldHJpZXMgYXJlIGNsaXBwZWQgdG8gbWFwIGJvdW5kcyBieSBkZWZhdWx0IGZvciBiZXN0IHJlbmRlcmluZyBwZXJmb3JtYW5jZS4gSW4gc29tZSBjYXNlcyB1c2VycyBtYXkgd2lzaCB0byBkaXNhYmxlIHRoaXMgdG8gYXZvaWQgcmVuZGVyaW5nIGFydGlmYWN0cy5cIn0sXCJjb21wLW9wXCI6e2NzczpcInNoaWVsZC1jb21wLW9wXCIsXCJkZWZhdWx0LXZhbHVlXCI6XCJzcmMtb3ZlclwiLFwiZGVmYXVsdC1tZWFuaW5nXCI6XCJhZGQgdGhlIGN1cnJlbnQgc3ltYm9saXplciBvbiB0b3Agb2Ygb3RoZXIgc3ltYm9saXplclwiLGRvYzpcIkNvbXBvc2l0ZSBvcGVyYXRpb24uIFRoaXMgZGVmaW5lcyBob3cgdGhpcyBzeW1ib2xpemVyIHNob3VsZCBiZWhhdmUgcmVsYXRpdmUgdG8gc3ltYm9saXplcnMgYXRvcCBvciBiZWxvdyBpdC5cIix0eXBlOltcImNsZWFyXCIsXCJzcmNcIixcImRzdFwiLFwic3JjLW92ZXJcIixcImRzdC1vdmVyXCIsXCJzcmMtaW5cIixcImRzdC1pblwiLFwic3JjLW91dFwiLFwiZHN0LW91dFwiLFwic3JjLWF0b3BcIixcImRzdC1hdG9wXCIsXCJ4b3JcIixcInBsdXNcIixcIm1pbnVzXCIsXCJtdWx0aXBseVwiLFwic2NyZWVuXCIsXCJvdmVybGF5XCIsXCJkYXJrZW5cIixcImxpZ2h0ZW5cIixcImNvbG9yLWRvZGdlXCIsXCJjb2xvci1idXJuXCIsXCJoYXJkLWxpZ2h0XCIsXCJzb2Z0LWxpZ2h0XCIsXCJkaWZmZXJlbmNlXCIsXCJleGNsdXNpb25cIixcImNvbnRyYXN0XCIsXCJpbnZlcnRcIixcImludmVydC1yZ2JcIixcImdyYWluLW1lcmdlXCIsXCJncmFpbi1leHRyYWN0XCIsXCJodWVcIixcInNhdHVyYXRpb25cIixcImNvbG9yXCIsXCJ2YWx1ZVwiXX19LFwibGluZS1wYXR0ZXJuXCI6e2ZpbGU6e2NzczpcImxpbmUtcGF0dGVybi1maWxlXCIsdHlwZTpcInVyaVwiLFwiZGVmYXVsdC12YWx1ZVwiOlwibm9uZVwiLHJlcXVpcmVkOiEwLGRvYzpcIkFuIGltYWdlIGZpbGUgdG8gYmUgcmVwZWF0ZWQgYW5kIHdhcnBlZCBhbG9uZyBhIGxpbmVcIn0sY2xpcDp7Y3NzOlwibGluZS1wYXR0ZXJuLWNsaXBcIix0eXBlOlwiYm9vbGVhblwiLFwiZGVmYXVsdC12YWx1ZVwiOiEwLFwiZGVmYXVsdC1tZWFuaW5nXCI6XCJnZW9tZXRyeSB3aWxsIGJlIGNsaXBwZWQgdG8gbWFwIGJvdW5kcyBiZWZvcmUgcmVuZGVyaW5nXCIsZG9jOlwiZ2VvbWV0cmllcyBhcmUgY2xpcHBlZCB0byBtYXAgYm91bmRzIGJ5IGRlZmF1bHQgZm9yIGJlc3QgcmVuZGVyaW5nIHBlcmZvcm1hbmNlLiBJbiBzb21lIGNhc2VzIHVzZXJzIG1heSB3aXNoIHRvIGRpc2FibGUgdGhpcyB0byBhdm9pZCByZW5kZXJpbmcgYXJ0aWZhY3RzLlwifSxzbW9vdGg6e2NzczpcImxpbmUtcGF0dGVybi1zbW9vdGhcIix0eXBlOlwiZmxvYXRcIixcImRlZmF1bHQtdmFsdWVcIjowLFwiZGVmYXVsdC1tZWFuaW5nXCI6XCJubyBzbW9vdGhpbmdcIixyYW5nZTpcIjAtMVwiLGRvYzpcIlNtb290aHMgb3V0IGdlb21ldHJ5IGFuZ2xlcy4gMCBpcyBubyBzbW9vdGhpbmcsIDEgaXMgZnVsbHkgc21vb3RoZWQuIFZhbHVlcyBncmVhdGVyIHRoYW4gMSB3aWxsIHByb2R1Y2Ugd2lsZCwgbG9vcGluZyBnZW9tZXRyaWVzLlwifSxcImdlb21ldHJ5LXRyYW5zZm9ybVwiOntjc3M6XCJsaW5lLXBhdHRlcm4tZ2VvbWV0cnktdHJhbnNmb3JtXCIsdHlwZTpcImZ1bmN0aW9uc1wiLFwiZGVmYXVsdC12YWx1ZVwiOlwibm9uZVwiLFwiZGVmYXVsdC1tZWFuaW5nXCI6XCJnZW9tZXRyeSB3aWxsIG5vdCBiZSB0cmFuc2Zvcm1lZFwiLGRvYzpcIkFsbG93cyB0cmFuc2Zvcm1hdGlvbiBmdW5jdGlvbnMgdG8gYmUgYXBwbGllZCB0byB0aGUgZ2VvbWV0cnkuXCIsZnVuY3Rpb25zOltbXCJtYXRyaXhcIiw2XSxbXCJ0cmFuc2xhdGVcIiwyXSxbXCJzY2FsZVwiLDJdLFtcInJvdGF0ZVwiLDNdLFtcInNrZXdYXCIsMV0sW1wic2tld1lcIiwxXV19LFwiY29tcC1vcFwiOntjc3M6XCJsaW5lLXBhdHRlcm4tY29tcC1vcFwiLFwiZGVmYXVsdC12YWx1ZVwiOlwic3JjLW92ZXJcIixcImRlZmF1bHQtbWVhbmluZ1wiOlwiYWRkIHRoZSBjdXJyZW50IHN5bWJvbGl6ZXIgb24gdG9wIG9mIG90aGVyIHN5bWJvbGl6ZXJcIixkb2M6XCJDb21wb3NpdGUgb3BlcmF0aW9uLiBUaGlzIGRlZmluZXMgaG93IHRoaXMgc3ltYm9saXplciBzaG91bGQgYmVoYXZlIHJlbGF0aXZlIHRvIHN5bWJvbGl6ZXJzIGF0b3Agb3IgYmVsb3cgaXQuXCIsdHlwZTpbXCJjbGVhclwiLFwic3JjXCIsXCJkc3RcIixcInNyYy1vdmVyXCIsXCJkc3Qtb3ZlclwiLFwic3JjLWluXCIsXCJkc3QtaW5cIixcInNyYy1vdXRcIixcImRzdC1vdXRcIixcInNyYy1hdG9wXCIsXCJkc3QtYXRvcFwiLFwieG9yXCIsXCJwbHVzXCIsXCJtaW51c1wiLFwibXVsdGlwbHlcIixcInNjcmVlblwiLFwib3ZlcmxheVwiLFwiZGFya2VuXCIsXCJsaWdodGVuXCIsXCJjb2xvci1kb2RnZVwiLFwiY29sb3ItYnVyblwiLFwiaGFyZC1saWdodFwiLFwic29mdC1saWdodFwiLFwiZGlmZmVyZW5jZVwiLFwiZXhjbHVzaW9uXCIsXCJjb250cmFzdFwiLFwiaW52ZXJ0XCIsXCJpbnZlcnQtcmdiXCIsXCJncmFpbi1tZXJnZVwiLFwiZ3JhaW4tZXh0cmFjdFwiLFwiaHVlXCIsXCJzYXR1cmF0aW9uXCIsXCJjb2xvclwiLFwidmFsdWVcIl19fSxcInBvbHlnb24tcGF0dGVyblwiOntmaWxlOntjc3M6XCJwb2x5Z29uLXBhdHRlcm4tZmlsZVwiLHR5cGU6XCJ1cmlcIixcImRlZmF1bHQtdmFsdWVcIjpcIm5vbmVcIixyZXF1aXJlZDohMCxkb2M6XCJJbWFnZSB0byB1c2UgYXMgYSByZXBlYXRlZCBwYXR0ZXJuIGZpbGwgd2l0aGluIGEgcG9seWdvblwifSxhbGlnbm1lbnQ6e2NzczpcInBvbHlnb24tcGF0dGVybi1hbGlnbm1lbnRcIix0eXBlOltcImxvY2FsXCIsXCJnbG9iYWxcIl0sXCJkZWZhdWx0LXZhbHVlXCI6XCJsb2NhbFwiLGRvYzpcIlNwZWNpZnkgd2hldGhlciB0byBhbGlnbiBwYXR0ZXJuIGZpbGxzIHRvIHRoZSBsYXllciBvciB0byB0aGUgbWFwLlwifSxnYW1tYTp7Y3NzOlwicG9seWdvbi1wYXR0ZXJuLWdhbW1hXCIsdHlwZTpcImZsb2F0XCIsXCJkZWZhdWx0LXZhbHVlXCI6MSxcImRlZmF1bHQtbWVhbmluZ1wiOlwiZnVsbHkgYW50aWFsaWFzZWRcIixyYW5nZTpcIjAtMVwiLGRvYzpcIkxldmVsIG9mIGFudGlhbGlhc2luZyBvZiBwb2x5Z29uIHBhdHRlcm4gZWRnZXNcIn0sb3BhY2l0eTp7Y3NzOlwicG9seWdvbi1wYXR0ZXJuLW9wYWNpdHlcIix0eXBlOlwiZmxvYXRcIixkb2M6XCIoRGVmYXVsdCAxLjApIC0gQXBwbHkgYW4gb3BhY2l0eSBsZXZlbCB0byB0aGUgaW1hZ2UgdXNlZCBmb3IgdGhlIHBhdHRlcm5cIixcImRlZmF1bHQtdmFsdWVcIjoxLFwiZGVmYXVsdC1tZWFuaW5nXCI6XCJUaGUgaW1hZ2UgaXMgcmVuZGVyZWQgd2l0aG91dCBtb2RpZmljYXRpb25zXCJ9LGNsaXA6e2NzczpcInBvbHlnb24tcGF0dGVybi1jbGlwXCIsdHlwZTpcImJvb2xlYW5cIixcImRlZmF1bHQtdmFsdWVcIjohMCxcImRlZmF1bHQtbWVhbmluZ1wiOlwiZ2VvbWV0cnkgd2lsbCBiZSBjbGlwcGVkIHRvIG1hcCBib3VuZHMgYmVmb3JlIHJlbmRlcmluZ1wiLGRvYzpcImdlb21ldHJpZXMgYXJlIGNsaXBwZWQgdG8gbWFwIGJvdW5kcyBieSBkZWZhdWx0IGZvciBiZXN0IHJlbmRlcmluZyBwZXJmb3JtYW5jZS4gSW4gc29tZSBjYXNlcyB1c2VycyBtYXkgd2lzaCB0byBkaXNhYmxlIHRoaXMgdG8gYXZvaWQgcmVuZGVyaW5nIGFydGlmYWN0cy5cIn0sc21vb3RoOntjc3M6XCJwb2x5Z29uLXBhdHRlcm4tc21vb3RoXCIsdHlwZTpcImZsb2F0XCIsXCJkZWZhdWx0LXZhbHVlXCI6MCxcImRlZmF1bHQtbWVhbmluZ1wiOlwibm8gc21vb3RoaW5nXCIscmFuZ2U6XCIwLTFcIixkb2M6XCJTbW9vdGhzIG91dCBnZW9tZXRyeSBhbmdsZXMuIDAgaXMgbm8gc21vb3RoaW5nLCAxIGlzIGZ1bGx5IHNtb290aGVkLiBWYWx1ZXMgZ3JlYXRlciB0aGFuIDEgd2lsbCBwcm9kdWNlIHdpbGQsIGxvb3BpbmcgZ2VvbWV0cmllcy5cIn0sXCJnZW9tZXRyeS10cmFuc2Zvcm1cIjp7Y3NzOlwicG9seWdvbi1wYXR0ZXJuLWdlb21ldHJ5LXRyYW5zZm9ybVwiLHR5cGU6XCJmdW5jdGlvbnNcIixcImRlZmF1bHQtdmFsdWVcIjpcIm5vbmVcIixcImRlZmF1bHQtbWVhbmluZ1wiOlwiZ2VvbWV0cnkgd2lsbCBub3QgYmUgdHJhbnNmb3JtZWRcIixkb2M6XCJBbGxvd3MgdHJhbnNmb3JtYXRpb24gZnVuY3Rpb25zIHRvIGJlIGFwcGxpZWQgdG8gdGhlIGdlb21ldHJ5LlwiLGZ1bmN0aW9uczpbW1wibWF0cml4XCIsNl0sW1widHJhbnNsYXRlXCIsMl0sW1wic2NhbGVcIiwyXSxbXCJyb3RhdGVcIiwzXSxbXCJza2V3WFwiLDFdLFtcInNrZXdZXCIsMV1dfSxcImNvbXAtb3BcIjp7Y3NzOlwicG9seWdvbi1wYXR0ZXJuLWNvbXAtb3BcIixcImRlZmF1bHQtdmFsdWVcIjpcInNyYy1vdmVyXCIsXCJkZWZhdWx0LW1lYW5pbmdcIjpcImFkZCB0aGUgY3VycmVudCBzeW1ib2xpemVyIG9uIHRvcCBvZiBvdGhlciBzeW1ib2xpemVyXCIsZG9jOlwiQ29tcG9zaXRlIG9wZXJhdGlvbi4gVGhpcyBkZWZpbmVzIGhvdyB0aGlzIHN5bWJvbGl6ZXIgc2hvdWxkIGJlaGF2ZSByZWxhdGl2ZSB0byBzeW1ib2xpemVycyBhdG9wIG9yIGJlbG93IGl0LlwiLHR5cGU6W1wiY2xlYXJcIixcInNyY1wiLFwiZHN0XCIsXCJzcmMtb3ZlclwiLFwiZHN0LW92ZXJcIixcInNyYy1pblwiLFwiZHN0LWluXCIsXCJzcmMtb3V0XCIsXCJkc3Qtb3V0XCIsXCJzcmMtYXRvcFwiLFwiZHN0LWF0b3BcIixcInhvclwiLFwicGx1c1wiLFwibWludXNcIixcIm11bHRpcGx5XCIsXCJzY3JlZW5cIixcIm92ZXJsYXlcIixcImRhcmtlblwiLFwibGlnaHRlblwiLFwiY29sb3ItZG9kZ2VcIixcImNvbG9yLWJ1cm5cIixcImhhcmQtbGlnaHRcIixcInNvZnQtbGlnaHRcIixcImRpZmZlcmVuY2VcIixcImV4Y2x1c2lvblwiLFwiY29udHJhc3RcIixcImludmVydFwiLFwiaW52ZXJ0LXJnYlwiLFwiZ3JhaW4tbWVyZ2VcIixcImdyYWluLWV4dHJhY3RcIixcImh1ZVwiLFwic2F0dXJhdGlvblwiLFwiY29sb3JcIixcInZhbHVlXCJdfX0scmFzdGVyOntvcGFjaXR5Ontjc3M6XCJyYXN0ZXItb3BhY2l0eVwiLFwiZGVmYXVsdC12YWx1ZVwiOjEsXCJkZWZhdWx0LW1lYW5pbmdcIjpcIm9wYXF1ZVwiLHR5cGU6XCJmbG9hdFwiLGRvYzpcIlRoZSBvcGFjaXR5IG9mIHRoZSByYXN0ZXIgc3ltYm9saXplciBvbiB0b3Agb2Ygb3RoZXIgc3ltYm9saXplcnMuXCJ9LFwiZmlsdGVyLWZhY3RvclwiOntjc3M6XCJyYXN0ZXItZmlsdGVyLWZhY3RvclwiLFwiZGVmYXVsdC12YWx1ZVwiOi0xLFwiZGVmYXVsdC1tZWFuaW5nXCI6XCJBbGxvdyB0aGUgZGF0YXNvdXJjZSB0byBjaG9vc2UgYXBwcm9wcmlhdGUgZG93bnNjYWxpbmcuXCIsdHlwZTpcImZsb2F0XCIsZG9jOlwiVGhpcyBpcyB1c2VkIGJ5IHRoZSBSYXN0ZXIgb3IgR2RhbCBkYXRhc291cmNlcyB0byBwcmUtZG93bnNjYWxlIGltYWdlcyB1c2luZyBvdmVydmlld3MuIEhpZ2hlciBudW1iZXJzIGNhbiBzb21ldGltZXMgY2F1c2UgbXVjaCBiZXR0ZXIgc2NhbGVkIGltYWdlIG91dHB1dCwgYXQgdGhlIGNvc3Qgb2Ygc3BlZWQuXCJ9LHNjYWxpbmc6e2NzczpcInJhc3Rlci1zY2FsaW5nXCIsdHlwZTpbXCJuZWFyXCIsXCJmYXN0XCIsXCJiaWxpbmVhclwiLFwiYmlsaW5lYXI4XCIsXCJiaWN1YmljXCIsXCJzcGxpbmUxNlwiLFwic3BsaW5lMzZcIixcImhhbm5pbmdcIixcImhhbW1pbmdcIixcImhlcm1pdGVcIixcImthaXNlclwiLFwicXVhZHJpY1wiLFwiY2F0cm9tXCIsXCJnYXVzc2lhblwiLFwiYmVzc2VsXCIsXCJtaXRjaGVsbFwiLFwic2luY1wiLFwibGFuY3pvc1wiLFwiYmxhY2ttYW5cIl0sXCJkZWZhdWx0LXZhbHVlXCI6XCJuZWFyXCIsZG9jOlwiVGhlIHNjYWxpbmcgYWxnb3JpdGhtIHVzZWQgdG8gbWFraW5nIGRpZmZlcmVudCByZXNvbHV0aW9uIHZlcnNpb25zIG9mIHRoaXMgcmFzdGVyIGxheWVyLiBCaWxpbmVhciBpcyBhIGdvb2QgY29tcHJvbWlzZSBiZXR3ZWVuIHNwZWVkIGFuZCBhY2N1cmFjeSwgd2hpbGUgbGFuY3pvcyBnaXZlcyB0aGUgaGlnaGVzdCBxdWFsaXR5LlwifSxcIm1lc2gtc2l6ZVwiOntjc3M6XCJyYXN0ZXItbWVzaC1zaXplXCIsXCJkZWZhdWx0LXZhbHVlXCI6MTYsXCJkZWZhdWx0LW1lYW5pbmdcIjpcIlJlcHJvamVjdGlvbiBtZXNoIHdpbGwgYmUgMS8xNiBvZiB0aGUgcmVzb2x1dGlvbiBvZiB0aGUgc291cmNlIGltYWdlXCIsdHlwZTpcInVuc2lnbmVkXCIsZG9jOlwiQSByZWR1Y2VkIHJlc29sdXRpb24gbWVzaCBpcyB1c2VkIGZvciByYXN0ZXIgcmVwcm9qZWN0aW9uLCBhbmQgdGhlIHRvdGFsIGltYWdlIHNpemUgaXMgZGl2aWRlZCBieSB0aGUgbWVzaC1zaXplIHRvIGRldGVybWluZSB0aGUgcXVhbGl0eSBvZiB0aGF0IG1lc2guIFZhbHVlcyBmb3IgbWVzaC1zaXplIGxhcmdlciB0aGFuIHRoZSBkZWZhdWx0IHdpbGwgcmVzdWx0IGluIGZhc3RlciByZXByb2plY3Rpb24gYnV0IG1pZ2h0IGxlYWQgdG8gZGlzdG9ydGlvbi5cIn0sXCJjb21wLW9wXCI6e2NzczpcInJhc3Rlci1jb21wLW9wXCIsXCJkZWZhdWx0LXZhbHVlXCI6XCJzcmMtb3ZlclwiLFwiZGVmYXVsdC1tZWFuaW5nXCI6XCJhZGQgdGhlIGN1cnJlbnQgc3ltYm9saXplciBvbiB0b3Agb2Ygb3RoZXIgc3ltYm9saXplclwiLGRvYzpcIkNvbXBvc2l0ZSBvcGVyYXRpb24uIFRoaXMgZGVmaW5lcyBob3cgdGhpcyBzeW1ib2xpemVyIHNob3VsZCBiZWhhdmUgcmVsYXRpdmUgdG8gc3ltYm9saXplcnMgYXRvcCBvciBiZWxvdyBpdC5cIix0eXBlOltcImNsZWFyXCIsXCJzcmNcIixcImRzdFwiLFwic3JjLW92ZXJcIixcImRzdC1vdmVyXCIsXCJzcmMtaW5cIixcImRzdC1pblwiLFwic3JjLW91dFwiLFwiZHN0LW91dFwiLFwic3JjLWF0b3BcIixcImRzdC1hdG9wXCIsXCJ4b3JcIixcInBsdXNcIixcIm1pbnVzXCIsXCJtdWx0aXBseVwiLFwic2NyZWVuXCIsXCJvdmVybGF5XCIsXCJkYXJrZW5cIixcImxpZ2h0ZW5cIixcImNvbG9yLWRvZGdlXCIsXCJjb2xvci1idXJuXCIsXCJoYXJkLWxpZ2h0XCIsXCJzb2Z0LWxpZ2h0XCIsXCJkaWZmZXJlbmNlXCIsXCJleGNsdXNpb25cIixcImNvbnRyYXN0XCIsXCJpbnZlcnRcIixcImludmVydC1yZ2JcIixcImdyYWluLW1lcmdlXCIsXCJncmFpbi1leHRyYWN0XCIsXCJodWVcIixcInNhdHVyYXRpb25cIixcImNvbG9yXCIsXCJ2YWx1ZVwiXX19LHBvaW50OntmaWxlOntjc3M6XCJwb2ludC1maWxlXCIsdHlwZTpcInVyaVwiLHJlcXVpcmVkOiExLFwiZGVmYXVsdC12YWx1ZVwiOlwibm9uZVwiLGRvYzpcIkltYWdlIGZpbGUgdG8gcmVwcmVzZW50IGEgcG9pbnRcIn0sXCJhbGxvdy1vdmVybGFwXCI6e2NzczpcInBvaW50LWFsbG93LW92ZXJsYXBcIix0eXBlOlwiYm9vbGVhblwiLFwiZGVmYXVsdC12YWx1ZVwiOiExLGRvYzpcIkNvbnRyb2wgd2hldGhlciBvdmVybGFwcGluZyBwb2ludHMgYXJlIHNob3duIG9yIGhpZGRlbi5cIixcImRlZmF1bHQtbWVhbmluZ1wiOlwiRG8gbm90IGFsbG93IHBvaW50cyB0byBvdmVybGFwIHdpdGggZWFjaCBvdGhlciAtIG92ZXJsYXBwaW5nIG1hcmtlcnMgd2lsbCBub3QgYmUgc2hvd24uXCJ9LFwiaWdub3JlLXBsYWNlbWVudFwiOntjc3M6XCJwb2ludC1pZ25vcmUtcGxhY2VtZW50XCIsdHlwZTpcImJvb2xlYW5cIixcImRlZmF1bHQtdmFsdWVcIjohMSxcImRlZmF1bHQtbWVhbmluZ1wiOlwiZG8gbm90IHN0b3JlIHRoZSBiYm94IG9mIHRoaXMgZ2VvbWV0cnkgaW4gdGhlIGNvbGxpc2lvbiBkZXRlY3RvciBjYWNoZVwiLGRvYzpcInZhbHVlIHRvIGNvbnRyb2wgd2hldGhlciB0aGUgcGxhY2VtZW50IG9mIHRoZSBmZWF0dXJlIHdpbGwgcHJldmVudCB0aGUgcGxhY2VtZW50IG9mIG90aGVyIGZlYXR1cmVzXCJ9LG9wYWNpdHk6e2NzczpcInBvaW50LW9wYWNpdHlcIix0eXBlOlwiZmxvYXRcIixcImRlZmF1bHQtdmFsdWVcIjoxLFwiZGVmYXVsdC1tZWFuaW5nXCI6XCJGdWxseSBvcGFxdWVcIixkb2M6XCJBIHZhbHVlIGZyb20gMCB0byAxIHRvIGNvbnRyb2wgdGhlIG9wYWNpdHkgb2YgdGhlIHBvaW50XCJ9LHBsYWNlbWVudDp7Y3NzOlwicG9pbnQtcGxhY2VtZW50XCIsdHlwZTpbXCJjZW50cm9pZFwiLFwiaW50ZXJpb3JcIl0sZG9jOlwiSG93IHRoaXMgcG9pbnQgc2hvdWxkIGJlIHBsYWNlZC4gQ2VudHJvaWQgY2FsY3VsYXRlcyB0aGUgZ2VvbWV0cmljIGNlbnRlciBvZiBhIHBvbHlnb24sIHdoaWNoIGNhbiBiZSBvdXRzaWRlIG9mIGl0LCB3aGlsZSBpbnRlcmlvciBhbHdheXMgcGxhY2VzIGluc2lkZSBvZiBhIHBvbHlnb24uXCIsXCJkZWZhdWx0LXZhbHVlXCI6XCJjZW50cm9pZFwifSx0cmFuc2Zvcm06e2NzczpcInBvaW50LXRyYW5zZm9ybVwiLHR5cGU6XCJmdW5jdGlvbnNcIixmdW5jdGlvbnM6W1tcIm1hdHJpeFwiLDZdLFtcInRyYW5zbGF0ZVwiLDJdLFtcInNjYWxlXCIsMl0sW1wicm90YXRlXCIsM10sW1wic2tld1hcIiwxXSxbXCJza2V3WVwiLDFdXSxcImRlZmF1bHQtdmFsdWVcIjpcIlwiLFwiZGVmYXVsdC1tZWFuaW5nXCI6XCJObyB0cmFuc2Zvcm1hdGlvblwiLGRvYzpcIlNWRyB0cmFuc2Zvcm1hdGlvbiBkZWZpbml0aW9uXCJ9LFwiY29tcC1vcFwiOntjc3M6XCJwb2ludC1jb21wLW9wXCIsXCJkZWZhdWx0LXZhbHVlXCI6XCJzcmMtb3ZlclwiLFwiZGVmYXVsdC1tZWFuaW5nXCI6XCJhZGQgdGhlIGN1cnJlbnQgc3ltYm9saXplciBvbiB0b3Agb2Ygb3RoZXIgc3ltYm9saXplclwiLGRvYzpcIkNvbXBvc2l0ZSBvcGVyYXRpb24uIFRoaXMgZGVmaW5lcyBob3cgdGhpcyBzeW1ib2xpemVyIHNob3VsZCBiZWhhdmUgcmVsYXRpdmUgdG8gc3ltYm9saXplcnMgYXRvcCBvciBiZWxvdyBpdC5cIix0eXBlOltcImNsZWFyXCIsXCJzcmNcIixcImRzdFwiLFwic3JjLW92ZXJcIixcImRzdC1vdmVyXCIsXCJzcmMtaW5cIixcImRzdC1pblwiLFwic3JjLW91dFwiLFwiZHN0LW91dFwiLFwic3JjLWF0b3BcIixcImRzdC1hdG9wXCIsXCJ4b3JcIixcInBsdXNcIixcIm1pbnVzXCIsXCJtdWx0aXBseVwiLFwic2NyZWVuXCIsXCJvdmVybGF5XCIsXCJkYXJrZW5cIixcImxpZ2h0ZW5cIixcImNvbG9yLWRvZGdlXCIsXCJjb2xvci1idXJuXCIsXCJoYXJkLWxpZ2h0XCIsXCJzb2Z0LWxpZ2h0XCIsXCJkaWZmZXJlbmNlXCIsXCJleGNsdXNpb25cIixcImNvbnRyYXN0XCIsXCJpbnZlcnRcIixcImludmVydC1yZ2JcIixcImdyYWluLW1lcmdlXCIsXCJncmFpbi1leHRyYWN0XCIsXCJodWVcIixcInNhdHVyYXRpb25cIixcImNvbG9yXCIsXCJ2YWx1ZVwiXX19LHRleHQ6e25hbWU6e2NzczpcInRleHQtbmFtZVwiLHR5cGU6XCJzdHJpbmdcIixleHByZXNzaW9uOiEwLHJlcXVpcmVkOiEwLFwiZGVmYXVsdC12YWx1ZVwiOlwiXCIsc2VyaWFsaXphdGlvbjpcImNvbnRlbnRcIixkb2M6XCJWYWx1ZSB0byB1c2UgZm9yIGEgdGV4dCBsYWJlbC4gRGF0YSBjb2x1bW5zIGFyZSBzcGVjaWZpZWQgdXNpbmcgYnJhY2tldHMgbGlrZSBbY29sdW1uX25hbWVdXCJ9LFwiZmFjZS1uYW1lXCI6e2NzczpcInRleHQtZmFjZS1uYW1lXCIsdHlwZTpcInN0cmluZ1wiLHZhbGlkYXRlOlwiZm9udFwiLGRvYzpcIkZvbnQgbmFtZSBhbmQgc3R5bGUgdG8gcmVuZGVyIGEgbGFiZWwgaW5cIixyZXF1aXJlZDohMH0sc2l6ZTp7Y3NzOlwidGV4dC1zaXplXCIsdHlwZTpcImZsb2F0XCIsXCJkZWZhdWx0LXZhbHVlXCI6MTAsZG9jOlwiVGV4dCBzaXplIGluIHBpeGVsc1wifSxcInRleHQtcmF0aW9cIjp7Y3NzOlwidGV4dC1yYXRpb1wiLGRvYzpcIkRlZmluZSB0aGUgYW1vdW50IG9mIHRleHQgKG9mIHRoZSB0b3RhbCkgcHJlc2VudCBvbiBzdWNjZXNzaXZlIGxpbmVzIHdoZW4gd3JhcHBpbmcgb2NjdXJzXCIsXCJkZWZhdWx0LXZhbHVlXCI6MCx0eXBlOlwidW5zaWduZWRcIn0sXCJ3cmFwLXdpZHRoXCI6e2NzczpcInRleHQtd3JhcC13aWR0aFwiLGRvYzpcIkxlbmd0aCBvZiBhIGNodW5rIG9mIHRleHQgaW4gY2hhcmFjdGVycyBiZWZvcmUgd3JhcHBpbmcgdGV4dFwiLFwiZGVmYXVsdC12YWx1ZVwiOjAsdHlwZTpcInVuc2lnbmVkXCJ9LFwid3JhcC1iZWZvcmVcIjp7Y3NzOlwidGV4dC13cmFwLWJlZm9yZVwiLHR5cGU6XCJib29sZWFuXCIsXCJkZWZhdWx0LXZhbHVlXCI6ITEsZG9jOlwiV3JhcCB0ZXh0IGJlZm9yZSB3cmFwLXdpZHRoIGlzIHJlYWNoZWQuIElmIGZhbHNlLCB3cmFwcGVkIGxpbmVzIHdpbGwgYmUgYSBiaXQgbG9uZ2VyIHRoYW4gd3JhcC13aWR0aC5cIn0sXCJ3cmFwLWNoYXJhY3RlclwiOntjc3M6XCJ0ZXh0LXdyYXAtY2hhcmFjdGVyXCIsdHlwZTpcInN0cmluZ1wiLFwiZGVmYXVsdC12YWx1ZVwiOlwiIFwiLGRvYzpcIlVzZSB0aGlzIGNoYXJhY3RlciBpbnN0ZWFkIG9mIGEgc3BhY2UgdG8gd3JhcCBsb25nIHRleHQuXCJ9LHNwYWNpbmc6e2NzczpcInRleHQtc3BhY2luZ1wiLHR5cGU6XCJ1bnNpZ25lZFwiLGRvYzpcIkRpc3RhbmNlIGJldHdlZW4gcmVwZWF0ZWQgdGV4dCBsYWJlbHMgb24gYSBsaW5lIChha2EuIGxhYmVsLXNwYWNpbmcpXCJ9LFwiY2hhcmFjdGVyLXNwYWNpbmdcIjp7Y3NzOlwidGV4dC1jaGFyYWN0ZXItc3BhY2luZ1wiLHR5cGU6XCJmbG9hdFwiLFwiZGVmYXVsdC12YWx1ZVwiOjAsZG9jOlwiSG9yaXpvbnRhbCBzcGFjaW5nIGFkanVzdG1lbnQgYmV0d2VlbiBjaGFyYWN0ZXJzIGluIHBpeGVsc1wifSxcImxpbmUtc3BhY2luZ1wiOntjc3M6XCJ0ZXh0LWxpbmUtc3BhY2luZ1wiLFwiZGVmYXVsdC12YWx1ZVwiOjAsdHlwZTpcInVuc2lnbmVkXCIsZG9jOlwiVmVydGljYWwgc3BhY2luZyBhZGp1c3RtZW50IGJldHdlZW4gbGluZXMgaW4gcGl4ZWxzXCJ9LFwibGFiZWwtcG9zaXRpb24tdG9sZXJhbmNlXCI6e2NzczpcInRleHQtbGFiZWwtcG9zaXRpb24tdG9sZXJhbmNlXCIsXCJkZWZhdWx0LXZhbHVlXCI6MCx0eXBlOlwidW5zaWduZWRcIixkb2M6XCJBbGxvd3MgdGhlIGxhYmVsIHRvIGJlIGRpc3BsYWNlZCBmcm9tIGl0cyBpZGVhbCBwb3NpdGlvbiBieSBhIG51bWJlciBvZiBwaXhlbHMgKG9ubHkgd29ya3Mgd2l0aCBwbGFjZW1lbnQ6bGluZSlcIn0sXCJtYXgtY2hhci1hbmdsZS1kZWx0YVwiOntjc3M6XCJ0ZXh0LW1heC1jaGFyLWFuZ2xlLWRlbHRhXCIsdHlwZTpcImZsb2F0XCIsXCJkZWZhdWx0LXZhbHVlXCI6XCIyMi41XCIsZG9jOlwiVGhlIG1heGltdW0gYW5nbGUgY2hhbmdlLCBpbiBkZWdyZWVzLCBhbGxvd2VkIGJldHdlZW4gYWRqYWNlbnQgY2hhcmFjdGVycyBpbiBhIGxhYmVsLiBUaGlzIHZhbHVlIGludGVybmFsbHkgaXMgY29udmVydGVkIHRvIHJhZGlhbnMgdG8gdGhlIGRlZmF1bHQgaXMgMjIuNSptYXRoLnBpLzE4MC4wLiBUaGUgaGlnaGVyIHRoZSB2YWx1ZSB0aGUgZmV3ZXIgbGFiZWxzIHdpbGwgYmUgcGxhY2VkIGFyb3VuZCBhcm91bmQgc2hhcnAgY29ybmVycy5cIn0sZmlsbDp7Y3NzOlwidGV4dC1maWxsXCIsZG9jOlwiU3BlY2lmaWVzIHRoZSBjb2xvciBmb3IgdGhlIHRleHRcIixcImRlZmF1bHQtdmFsdWVcIjpcIiMwMDAwMDBcIix0eXBlOlwiY29sb3JcIn0sb3BhY2l0eTp7Y3NzOlwidGV4dC1vcGFjaXR5XCIsZG9jOlwiQSBudW1iZXIgZnJvbSAwIHRvIDEgc3BlY2lmeWluZyB0aGUgb3BhY2l0eSBmb3IgdGhlIHRleHRcIixcImRlZmF1bHQtdmFsdWVcIjoxLFwiZGVmYXVsdC1tZWFuaW5nXCI6XCJGdWxseSBvcGFxdWVcIix0eXBlOlwiZmxvYXRcIn0sXCJoYWxvLWZpbGxcIjp7Y3NzOlwidGV4dC1oYWxvLWZpbGxcIix0eXBlOlwiY29sb3JcIixcImRlZmF1bHQtdmFsdWVcIjpcIiNGRkZGRkZcIixcImRlZmF1bHQtbWVhbmluZ1wiOlwid2hpdGVcIixkb2M6XCJTcGVjaWZpZXMgdGhlIGNvbG9yIG9mIHRoZSBoYWxvIGFyb3VuZCB0aGUgdGV4dC5cIn0sXCJoYWxvLXJhZGl1c1wiOntjc3M6XCJ0ZXh0LWhhbG8tcmFkaXVzXCIsZG9jOlwiU3BlY2lmeSB0aGUgcmFkaXVzIG9mIHRoZSBoYWxvIGluIHBpeGVsc1wiLFwiZGVmYXVsdC12YWx1ZVwiOjAsXCJkZWZhdWx0LW1lYW5pbmdcIjpcIm5vIGhhbG9cIix0eXBlOlwiZmxvYXRcIn0sZHg6e2NzczpcInRleHQtZHhcIix0eXBlOlwiZmxvYXRcIixkb2M6XCJEaXNwbGFjZSB0ZXh0IGJ5IGZpeGVkIGFtb3VudCwgaW4gcGl4ZWxzLCArLy0gYWxvbmcgdGhlIFggYXhpcy4gIEEgcG9zaXRpdmUgdmFsdWUgd2lsbCBzaGlmdCB0aGUgdGV4dCByaWdodFwiLFwiZGVmYXVsdC12YWx1ZVwiOjB9LGR5Ontjc3M6XCJ0ZXh0LWR5XCIsdHlwZTpcImZsb2F0XCIsZG9jOlwiRGlzcGxhY2UgdGV4dCBieSBmaXhlZCBhbW91bnQsIGluIHBpeGVscywgKy8tIGFsb25nIHRoZSBZIGF4aXMuICBBIHBvc2l0aXZlIHZhbHVlIHdpbGwgc2hpZnQgdGhlIHRleHQgZG93blwiLFwiZGVmYXVsdC12YWx1ZVwiOjB9LFwidmVydGljYWwtYWxpZ25tZW50XCI6e2NzczpcInRleHQtdmVydGljYWwtYWxpZ25tZW50XCIsdHlwZTpbXCJ0b3BcIixcIm1pZGRsZVwiLFwiYm90dG9tXCIsXCJhdXRvXCJdLGRvYzpcIlBvc2l0aW9uIG9mIGxhYmVsIHJlbGF0aXZlIHRvIHBvaW50IHBvc2l0aW9uLlwiLFwiZGVmYXVsdC12YWx1ZVwiOlwiYXV0b1wiLFwiZGVmYXVsdC1tZWFuaW5nXCI6J0RlZmF1bHQgYWZmZWN0ZWQgYnkgdmFsdWUgb2YgZHk7IFwiYm90dG9tXCIgZm9yIGR5PjAsIFwidG9wXCIgZm9yIGR5PDAuJ30sXCJhdm9pZC1lZGdlc1wiOntjc3M6XCJ0ZXh0LWF2b2lkLWVkZ2VzXCIsZG9jOlwiVGVsbCBwb3NpdGlvbmluZyBhbGdvcml0aG0gdG8gYXZvaWQgbGFiZWxpbmcgbmVhciBpbnRlcnNlY3Rpb24gZWRnZXMuXCIsXCJkZWZhdWx0LXZhbHVlXCI6ITEsdHlwZTpcImJvb2xlYW5cIn0sXCJtaW5pbXVtLWRpc3RhbmNlXCI6e2NzczpcInRleHQtbWluLWRpc3RhbmNlXCIsZG9jOlwiTWluaW11bSBwZXJtaXR0ZWQgZGlzdGFuY2UgdG8gdGhlIG5leHQgdGV4dCBzeW1ib2xpemVyLlwiLHR5cGU6XCJmbG9hdFwifSxcIm1pbmltdW0tcGFkZGluZ1wiOntjc3M6XCJ0ZXh0LW1pbi1wYWRkaW5nXCIsZG9jOlwiRGV0ZXJtaW5lcyB0aGUgbWluaW11bSBhbW91bnQgb2YgcGFkZGluZyB0aGF0IGEgdGV4dCBzeW1ib2xpemVyIGdldHMgcmVsYXRpdmUgdG8gb3RoZXIgdGV4dFwiLHR5cGU6XCJmbG9hdFwifSxcIm1pbmltdW0tcGF0aC1sZW5ndGhcIjp7Y3NzOlwidGV4dC1taW4tcGF0aC1sZW5ndGhcIix0eXBlOlwiZmxvYXRcIixcImRlZmF1bHQtdmFsdWVcIjowLFwiZGVmYXVsdC1tZWFuaW5nXCI6XCJwbGFjZSBsYWJlbHMgb24gYWxsIHBhdGhzXCIsZG9jOlwiUGxhY2UgbGFiZWxzIG9ubHkgb24gcGF0aHMgbG9uZ2VyIHRoYW4gdGhpcyB2YWx1ZS5cIn0sXCJhbGxvdy1vdmVybGFwXCI6e2NzczpcInRleHQtYWxsb3ctb3ZlcmxhcFwiLHR5cGU6XCJib29sZWFuXCIsXCJkZWZhdWx0LXZhbHVlXCI6ITEsZG9jOlwiQ29udHJvbCB3aGV0aGVyIG92ZXJsYXBwaW5nIHRleHQgaXMgc2hvd24gb3IgaGlkZGVuLlwiLFwiZGVmYXVsdC1tZWFuaW5nXCI6XCJEbyBub3QgYWxsb3cgdGV4dCB0byBvdmVybGFwIHdpdGggb3RoZXIgdGV4dCAtIG92ZXJsYXBwaW5nIG1hcmtlcnMgd2lsbCBub3QgYmUgc2hvd24uXCJ9LG9yaWVudGF0aW9uOntjc3M6XCJ0ZXh0LW9yaWVudGF0aW9uXCIsdHlwZTpcImZsb2F0XCIsZXhwcmVzc2lvbjohMCxkb2M6XCJSb3RhdGUgdGhlIHRleHQuXCJ9LHBsYWNlbWVudDp7Y3NzOlwidGV4dC1wbGFjZW1lbnRcIix0eXBlOltcInBvaW50XCIsXCJsaW5lXCIsXCJ2ZXJ0ZXhcIixcImludGVyaW9yXCJdLFwiZGVmYXVsdC12YWx1ZVwiOlwicG9pbnRcIixkb2M6XCJDb250cm9sIHRoZSBzdHlsZSBvZiBwbGFjZW1lbnQgb2YgYSBwb2ludCB2ZXJzdXMgdGhlIGdlb21ldHJ5IGl0IGlzIGF0dGFjaGVkIHRvLlwifSxcInBsYWNlbWVudC10eXBlXCI6e2NzczpcInRleHQtcGxhY2VtZW50LXR5cGVcIixkb2M6J1JlLXBvc2l0aW9uIGFuZC9vciByZS1zaXplIHRleHQgdG8gYXZvaWQgb3ZlcmxhcHMuIFwic2ltcGxlXCIgZm9yIGJhc2ljIGFsZ29yaXRobSAodXNpbmcgdGV4dC1wbGFjZW1lbnRzIHN0cmluZywpIFwiZHVtbXlcIiB0byB0dXJuIHRoaXMgZmVhdHVyZSBvZmYuJyx0eXBlOltcImR1bW15XCIsXCJzaW1wbGVcIl0sXCJkZWZhdWx0LXZhbHVlXCI6XCJkdW1teVwifSxwbGFjZW1lbnRzOntjc3M6XCJ0ZXh0LXBsYWNlbWVudHNcIix0eXBlOlwic3RyaW5nXCIsXCJkZWZhdWx0LXZhbHVlXCI6XCJcIixkb2M6J0lmIFwicGxhY2VtZW50LXR5cGVcIiBpcyBzZXQgdG8gXCJzaW1wbGVcIiwgdXNlIHRoaXMgXCJQT1NJVElPTlMsW1NJWkVTXVwiIHN0cmluZy4gQW4gZXhhbXBsZSBpcyBgdGV4dC1wbGFjZW1lbnRzOiBcIkUsTkUsU0UsVyxOVyxTV1wiO2AgJ30sXCJ0ZXh0LXRyYW5zZm9ybVwiOntjc3M6XCJ0ZXh0LXRyYW5zZm9ybVwiLHR5cGU6W1wibm9uZVwiLFwidXBwZXJjYXNlXCIsXCJsb3dlcmNhc2VcIixcImNhcGl0YWxpemVcIl0sZG9jOlwiVHJhbnNmb3JtIHRoZSBjYXNlIG9mIHRoZSBjaGFyYWN0ZXJzXCIsXCJkZWZhdWx0LXZhbHVlXCI6XCJub25lXCJ9LFwiaG9yaXpvbnRhbC1hbGlnbm1lbnRcIjp7Y3NzOlwidGV4dC1ob3Jpem9udGFsLWFsaWdubWVudFwiLHR5cGU6W1wibGVmdFwiLFwibWlkZGxlXCIsXCJyaWdodFwiLFwiYXV0b1wiXSxkb2M6XCJUaGUgdGV4dCdzIGhvcml6b250YWwgYWxpZ25tZW50IGZyb20gaXRzIGNlbnRlcnBvaW50XCIsXCJkZWZhdWx0LXZhbHVlXCI6XCJhdXRvXCJ9LFwianVzdGlmeS1hbGlnbm1lbnRcIjp7Y3NzOlwidGV4dC1hbGlnblwiLHR5cGU6W1wibGVmdFwiLFwicmlnaHRcIixcImNlbnRlclwiLFwiYXV0b1wiXSxkb2M6XCJEZWZpbmUgaG93IHRleHQgaXMganVzdGlmaWVkXCIsXCJkZWZhdWx0LXZhbHVlXCI6XCJhdXRvXCIsXCJkZWZhdWx0LW1lYW5pbmdcIjpcIkF1dG8gYWxpZ25tZW50IG1lYW5zIHRoYXQgdGV4dCB3aWxsIGJlIGNlbnRlcmVkIGJ5IGRlZmF1bHQgZXhjZXB0IHdoZW4gdXNpbmcgdGhlIGBwbGFjZW1lbnQtdHlwZWAgcGFyYW1ldGVyIC0gaW4gdGhhdCBjYXNlIGVpdGhlciByaWdodCBvciBsZWZ0IGp1c3RpZmljYXRpb24gd2lsbCBiZSB1c2VkIGF1dG9tYXRpY2FsbHkgZGVwZW5kaW5nIG9uIHdoZXJlIHRoZSB0ZXh0IGNvdWxkIGJlIGZpdCBnaXZlbiB0aGUgYHRleHQtcGxhY2VtZW50c2AgZGlyZWN0aXZlc1wifSxjbGlwOntjc3M6XCJ0ZXh0LWNsaXBcIix0eXBlOlwiYm9vbGVhblwiLFwiZGVmYXVsdC12YWx1ZVwiOiEwLFwiZGVmYXVsdC1tZWFuaW5nXCI6XCJnZW9tZXRyeSB3aWxsIGJlIGNsaXBwZWQgdG8gbWFwIGJvdW5kcyBiZWZvcmUgcmVuZGVyaW5nXCIsZG9jOlwiZ2VvbWV0cmllcyBhcmUgY2xpcHBlZCB0byBtYXAgYm91bmRzIGJ5IGRlZmF1bHQgZm9yIGJlc3QgcmVuZGVyaW5nIHBlcmZvcm1hbmNlLiBJbiBzb21lIGNhc2VzIHVzZXJzIG1heSB3aXNoIHRvIGRpc2FibGUgdGhpcyB0byBhdm9pZCByZW5kZXJpbmcgYXJ0aWZhY3RzLlwifSxcImNvbXAtb3BcIjp7Y3NzOlwidGV4dC1jb21wLW9wXCIsXCJkZWZhdWx0LXZhbHVlXCI6XCJzcmMtb3ZlclwiLFwiZGVmYXVsdC1tZWFuaW5nXCI6XCJhZGQgdGhlIGN1cnJlbnQgc3ltYm9saXplciBvbiB0b3Agb2Ygb3RoZXIgc3ltYm9saXplclwiLGRvYzpcIkNvbXBvc2l0ZSBvcGVyYXRpb24uIFRoaXMgZGVmaW5lcyBob3cgdGhpcyBzeW1ib2xpemVyIHNob3VsZCBiZWhhdmUgcmVsYXRpdmUgdG8gc3ltYm9saXplcnMgYXRvcCBvciBiZWxvdyBpdC5cIix0eXBlOltcImNsZWFyXCIsXCJzcmNcIixcImRzdFwiLFwic3JjLW92ZXJcIixcImRzdC1vdmVyXCIsXCJzcmMtaW5cIixcImRzdC1pblwiLFwic3JjLW91dFwiLFwiZHN0LW91dFwiLFwic3JjLWF0b3BcIixcImRzdC1hdG9wXCIsXCJ4b3JcIixcInBsdXNcIixcIm1pbnVzXCIsXCJtdWx0aXBseVwiLFwic2NyZWVuXCIsXCJvdmVybGF5XCIsXCJkYXJrZW5cIixcImxpZ2h0ZW5cIixcImNvbG9yLWRvZGdlXCIsXCJjb2xvci1idXJuXCIsXCJoYXJkLWxpZ2h0XCIsXCJzb2Z0LWxpZ2h0XCIsXCJkaWZmZXJlbmNlXCIsXCJleGNsdXNpb25cIixcImNvbnRyYXN0XCIsXCJpbnZlcnRcIixcImludmVydC1yZ2JcIixcImdyYWluLW1lcmdlXCIsXCJncmFpbi1leHRyYWN0XCIsXCJodWVcIixcInNhdHVyYXRpb25cIixcImNvbG9yXCIsXCJ2YWx1ZVwiXX19LGJ1aWxkaW5nOntmaWxsOntjc3M6XCJidWlsZGluZy1maWxsXCIsXCJkZWZhdWx0LXZhbHVlXCI6XCIjRkZGRkZGXCIsZG9jOlwiVGhlIGNvbG9yIG9mIHRoZSBidWlsZGluZ3Mgd2FsbHMuXCIsdHlwZTpcImNvbG9yXCJ9LFwiZmlsbC1vcGFjaXR5XCI6e2NzczpcImJ1aWxkaW5nLWZpbGwtb3BhY2l0eVwiLHR5cGU6XCJmbG9hdFwiLGRvYzpcIlRoZSBvcGFjaXR5IG9mIHRoZSBidWlsZGluZyBhcyBhIHdob2xlLCBpbmNsdWRpbmcgYWxsIHdhbGxzLlwiLFwiZGVmYXVsdC12YWx1ZVwiOjF9LGhlaWdodDp7Y3NzOlwiYnVpbGRpbmctaGVpZ2h0XCIsZG9jOlwiVGhlIGhlaWdodCBvZiB0aGUgYnVpbGRpbmcgaW4gcGl4ZWxzLlwiLHR5cGU6XCJmbG9hdFwiLGV4cHJlc3Npb246ITAsXCJkZWZhdWx0LXZhbHVlXCI6XCIwXCJ9fSx0b3JxdWU6e1wiLXRvcnF1ZS1jbGVhci1jb2xvclwiOntjc3M6XCItdG9ycXVlLWNsZWFyLWNvbG9yXCIsdHlwZTpcImNvbG9yXCIsXCJkZWZhdWx0LXZhbHVlXCI6XCJyZ2JhKDI1NSwgMjU1LCAyNTUsIDApXCIsXCJkZWZhdWx0LW1lYW5pbmdcIjpcImZ1bGwgY2xlYXJcIixkb2M6XCJjb2xvciB1c2VkIHRvIGNsZWFyIGNhbnZhcyBvbiBlYWNoIGZyYW1lXCJ9LFwiLXRvcnF1ZS1mcmFtZS1jb3VudFwiOntjc3M6XCItdG9ycXVlLWZyYW1lLWNvdW50XCIsXCJkZWZhdWx0LXZhbHVlXCI6XCIxMjhcIix0eXBlOlwiZmxvYXRcIixcImRlZmF1bHQtbWVhbmluZ1wiOlwidGhlIGRhdGEgaXMgYnJva2VuIGludG8gMTI4IHRpbWUgZnJhbWVzXCIsZG9jOlwiTnVtYmVyIG9mIGFuaW1hdGlvbiBzdGVwcy9mcmFtZXMgdXNlZCBpbiB0aGUgYW5pbWF0aW9uLiBJZiB0aGUgZGF0YSBjb250YWlucyBhIGZld2VyZSBudW1iZXIgb2YgdG90YWwgZnJhbWVzLCB0aGUgbGVzc2VyIHZhbHVlIHdpbGwgYmUgdXNlZC5cIn0sXCItdG9ycXVlLXJlc29sdXRpb25cIjp7Y3NzOlwiLXRvcnF1ZS1yZXNvbHV0aW9uXCIsXCJkZWZhdWx0LXZhbHVlXCI6XCIyXCIsdHlwZTpcImZsb2F0XCIsXCJkZWZhdWx0LW1lYW5pbmdcIjpcIlwiLGRvYzpcIlNwYXRpYWwgcmVzb2x1dGlvbiBpbiBwaXhlbHMuIEEgcmVzb2x1dGlvbiBvZiAxIG1lYW5zIG5vIHNwYXRpYWwgYWdncmVnYXRpb24gb2YgdGhlIGRhdGEuIEFueSBvdGhlciByZXNvbHV0aW9uIG9mIE4gcmVzdWx0cyBpbiBzcGF0aWFsIGFnZ3JlZ2F0aW9uIGludG8gY2VsbHMgb2YgTnhOIHBpeGVscy4gVGhlIHZhbHVlIE4gbXVzdCBiZSBwb3dlciBvZiAyXCJ9LFwiLXRvcnF1ZS1hbmltYXRpb24tZHVyYXRpb25cIjp7Y3NzOlwiLXRvcnF1ZS1hbmltYXRpb24tZHVyYXRpb25cIixcImRlZmF1bHQtdmFsdWVcIjpcIjMwXCIsdHlwZTpcImZsb2F0XCIsXCJkZWZhdWx0LW1lYW5pbmdcIjpcInRoZSBhbmltYXRpb24gbGFzdHMgMzAgc2Vjb25kc1wiLGRvYzpcIkFuaW1hdGlvbiBkdXJhdGlvbiBpbiBzZWNvbmRzXCJ9LFwiLXRvcnF1ZS1hZ2dyZWdhdGlvbi1mdW5jdGlvblwiOntjc3M6XCItdG9ycXVlLWFnZ3JlZ2F0aW9uLWZ1bmN0aW9uXCIsXCJkZWZhdWx0LXZhbHVlXCI6XCJjb3VudChjYXJ0b2RiX2lkKVwiLHR5cGU6XCJzdHJpbmdcIixcImRlZmF1bHQtbWVhbmluZ1wiOlwidGhlIHZhbHVlIGZvciBlYWNoIGNlbGwgaXMgdGhlIGNvdW50IG9mIHBvaW50cyBpbiB0aGF0IGNlbGxcIixkb2M6XCJBIGZ1bmN0aW9uIHVzZWQgdG8gY2FsY3VsYXRlIGEgdmFsdWUgZnJvbSB0aGUgYWdncmVnYXRlIGRhdGEgZm9yIGVhY2ggY2VsbC4gU2VlIC10b3JxdWUtcmVzb2x1dGlvblwifSxcIi10b3JxdWUtdGltZS1hdHRyaWJ1dGVcIjp7Y3NzOlwiLXRvcnF1ZS10aW1lLWF0dHJpYnV0ZVwiLFwiZGVmYXVsdC12YWx1ZVwiOlwidGltZVwiLHR5cGU6XCJzdHJpbmdcIixcImRlZmF1bHQtbWVhbmluZ1wiOlwidGhlIGRhdGEgY29sdW1uIGluIHlvdXIgdGFibGUgdGhhdCBpcyBvZiBhIHRpbWUgYmFzZWQgdHlwZVwiLGRvYzpcIlRoZSB0YWJsZSBjb2x1bW4gdGhhdCBjb250YWlucyB0aGUgdGltZSBpbmZvcm1hdGlvbiB1c2VkIGNyZWF0ZSB0aGUgYW5pbWF0aW9uXCJ9LFwiLXRvcnF1ZS1kYXRhLWFnZ3JlZ2F0aW9uXCI6e2NzczpcIi10b3JxdWUtZGF0YS1hZ2dyZWdhdGlvblwiLFwiZGVmYXVsdC12YWx1ZVwiOlwibGluZWFyXCIsdHlwZTpbXCJsaW5lYXJcIixcImN1bXVsYXRpdmVcIl0sXCJkZWZhdWx0LW1lYW5pbmdcIjpcInByZXZpb3VzIHZhbHVlcyBhcmUgZGlzY2FyZGVkXCIsZG9jOlwiQSBsaW5lYXIgYW5pbWF0aW9uIHdpbGwgZGlzY2FyZCBwcmV2aW91cyB2YWx1ZXMgd2hpbGUgYSBjdW11bGF0aXZlIGFuaW1hdGlvbiB3aWxsIGFjY3VtdWxhdGUgdGhlbSB1bnRpbCBpdCByZXN0YXJ0c1wifX19LGNvbG9yczp7YWxpY2VibHVlOlsyNDAsMjQ4LDI1NV0sYW50aXF1ZXdoaXRlOlsyNTAsMjM1LDIxNV0sYXF1YTpbMCwyNTUsMjU1XSxhcXVhbWFyaW5lOlsxMjcsMjU1LDIxMl0sYXp1cmU6WzI0MCwyNTUsMjU1XSxiZWlnZTpbMjQ1LDI0NSwyMjBdLGJpc3F1ZTpbMjU1LDIyOCwxOTZdLGJsYWNrOlswLDAsMF0sYmxhbmNoZWRhbG1vbmQ6WzI1NSwyMzUsMjA1XSxibHVlOlswLDAsMjU1XSxibHVldmlvbGV0OlsxMzgsNDMsMjI2XSxicm93bjpbMTY1LDQyLDQyXSxidXJseXdvb2Q6WzIyMiwxODQsMTM1XSxjYWRldGJsdWU6Wzk1LDE1OCwxNjBdLGNoYXJ0cmV1c2U6WzEyNywyNTUsMF0sY2hvY29sYXRlOlsyMTAsMTA1LDMwXSxjb3JhbDpbMjU1LDEyNyw4MF0sY29ybmZsb3dlcmJsdWU6WzEwMCwxNDksMjM3XSxjb3Juc2lsazpbMjU1LDI0OCwyMjBdLGNyaW1zb246WzIyMCwyMCw2MF0sY3lhbjpbMCwyNTUsMjU1XSxkYXJrYmx1ZTpbMCwwLDEzOV0sZGFya2N5YW46WzAsMTM5LDEzOV0sZGFya2dvbGRlbnJvZDpbMTg0LDEzNCwxMV0sZGFya2dyYXk6WzE2OSwxNjksMTY5XSxkYXJrZ3JlZW46WzAsMTAwLDBdLGRhcmtncmV5OlsxNjksMTY5LDE2OV0sZGFya2toYWtpOlsxODksMTgzLDEwN10sZGFya21hZ2VudGE6WzEzOSwwLDEzOV0sZGFya29saXZlZ3JlZW46Wzg1LDEwNyw0N10sZGFya29yYW5nZTpbMjU1LDE0MCwwXSxkYXJrb3JjaGlkOlsxNTMsNTAsMjA0XSxkYXJrcmVkOlsxMzksMCwwXSxkYXJrc2FsbW9uOlsyMzMsMTUwLDEyMl0sZGFya3NlYWdyZWVuOlsxNDMsMTg4LDE0M10sZGFya3NsYXRlYmx1ZTpbNzIsNjEsMTM5XSxkYXJrc2xhdGVncmV5Ols0Nyw3OSw3OV0sZGFya3R1cnF1b2lzZTpbMCwyMDYsMjA5XSxkYXJrdmlvbGV0OlsxNDgsMCwyMTFdLGRlZXBwaW5rOlsyNTUsMjAsMTQ3XSxkZWVwc2t5Ymx1ZTpbMCwxOTEsMjU1XSxkaW1ncmF5OlsxMDUsMTA1LDEwNV0sZGltZ3JleTpbMTA1LDEwNSwxMDVdLGRvZGdlcmJsdWU6WzMwLDE0NCwyNTVdLGZpcmVicmljazpbMTc4LDM0LDM0XSxmbG9yYWx3aGl0ZTpbMjU1LDI1MCwyNDBdLGZvcmVzdGdyZWVuOlszNCwxMzksMzRdLGZ1Y2hzaWE6WzI1NSwwLDI1NV0sZ2FpbnNib3JvOlsyMjAsMjIwLDIyMF0sZ2hvc3R3aGl0ZTpbMjQ4LDI0OCwyNTVdLGdvbGQ6WzI1NSwyMTUsMF0sZ29sZGVucm9kOlsyMTgsMTY1LDMyXSxncmF5OlsxMjgsMTI4LDEyOF0sZ3JleTpbMTI4LDEyOCwxMjhdLGdyZWVuOlswLDEyOCwwXSxncmVlbnllbGxvdzpbMTczLDI1NSw0N10saG9uZXlkZXc6WzI0MCwyNTUsMjQwXSxob3RwaW5rOlsyNTUsMTA1LDE4MF0saW5kaWFucmVkOlsyMDUsOTIsOTJdLGluZGlnbzpbNzUsMCwxMzBdLGl2b3J5OlsyNTUsMjU1LDI0MF0sa2hha2k6WzI0MCwyMzAsMTQwXSxsYXZlbmRlcjpbMjMwLDIzMCwyNTBdLGxhdmVuZGVyYmx1c2g6WzI1NSwyNDAsMjQ1XSxsYXduZ3JlZW46WzEyNCwyNTIsMF0sbGVtb25jaGlmZm9uOlsyNTUsMjUwLDIwNV0sbGlnaHRibHVlOlsxNzMsMjE2LDIzMF0sbGlnaHRjb3JhbDpbMjQwLDEyOCwxMjhdLGxpZ2h0Y3lhbjpbMjI0LDI1NSwyNTVdLGxpZ2h0Z29sZGVucm9keWVsbG93OlsyNTAsMjUwLDIxMF0sbGlnaHRncmF5OlsyMTEsMjExLDIxMV0sbGlnaHRncmVlbjpbMTQ0LDIzOCwxNDRdLGxpZ2h0Z3JleTpbMjExLDIxMSwyMTFdLGxpZ2h0cGluazpbMjU1LDE4MiwxOTNdLGxpZ2h0c2FsbW9uOlsyNTUsMTYwLDEyMl0sbGlnaHRzZWFncmVlbjpbMzIsMTc4LDE3MF0sbGlnaHRza3libHVlOlsxMzUsMjA2LDI1MF0sbGlnaHRzbGF0ZWdyYXk6WzExOSwxMzYsMTUzXSxsaWdodHNsYXRlZ3JleTpbMTE5LDEzNiwxNTNdLGxpZ2h0c3RlZWxibHVlOlsxNzYsMTk2LDIyMl0sbGlnaHR5ZWxsb3c6WzI1NSwyNTUsMjI0XSxsaW1lOlswLDI1NSwwXSxsaW1lZ3JlZW46WzUwLDIwNSw1MF0sbGluZW46WzI1MCwyNDAsMjMwXSxtYWdlbnRhOlsyNTUsMCwyNTVdLG1hcm9vbjpbMTI4LDAsMF0sbWVkaXVtYXF1YW1hcmluZTpbMTAyLDIwNSwxNzBdLG1lZGl1bWJsdWU6WzAsMCwyMDVdLG1lZGl1bW9yY2hpZDpbMTg2LDg1LDIxMV0sbWVkaXVtcHVycGxlOlsxNDcsMTEyLDIxOV0sbWVkaXVtc2VhZ3JlZW46WzYwLDE3OSwxMTNdLG1lZGl1bXNsYXRlYmx1ZTpbMTIzLDEwNCwyMzhdLG1lZGl1bXNwcmluZ2dyZWVuOlswLDI1MCwxNTRdLG1lZGl1bXR1cnF1b2lzZTpbNzIsMjA5LDIwNF0sbWVkaXVtdmlvbGV0cmVkOlsxOTksMjEsMTMzXSxtaWRuaWdodGJsdWU6WzI1LDI1LDExMl0sbWludGNyZWFtOlsyNDUsMjU1LDI1MF0sbWlzdHlyb3NlOlsyNTUsMjI4LDIyNV0sbW9jY2FzaW46WzI1NSwyMjgsMTgxXSxuYXZham93aGl0ZTpbMjU1LDIyMiwxNzNdLG5hdnk6WzAsMCwxMjhdLG9sZGxhY2U6WzI1MywyNDUsMjMwXSxvbGl2ZTpbMTI4LDEyOCwwXSxvbGl2ZWRyYWI6WzEwNywxNDIsMzVdLG9yYW5nZTpbMjU1LDE2NSwwXSxvcmFuZ2VyZWQ6WzI1NSw2OSwwXSxvcmNoaWQ6WzIxOCwxMTIsMjE0XSxwYWxlZ29sZGVucm9kOlsyMzgsMjMyLDE3MF0scGFsZWdyZWVuOlsxNTIsMjUxLDE1Ml0scGFsZXR1cnF1b2lzZTpbMTc1LDIzOCwyMzhdLHBhbGV2aW9sZXRyZWQ6WzIxOSwxMTIsMTQ3XSxwYXBheWF3aGlwOlsyNTUsMjM5LDIxM10scGVhY2hwdWZmOlsyNTUsMjE4LDE4NV0scGVydTpbMjA1LDEzMyw2M10scGluazpbMjU1LDE5MiwyMDNdLHBsdW06WzIyMSwxNjAsMjIxXSxwb3dkZXJibHVlOlsxNzYsMjI0LDIzMF0scHVycGxlOlsxMjgsMCwxMjhdLHJlZDpbMjU1LDAsMF0scm9zeWJyb3duOlsxODgsMTQzLDE0M10scm95YWxibHVlOls2NSwxMDUsMjI1XSxzYWRkbGVicm93bjpbMTM5LDY5LDE5XSxzYWxtb246WzI1MCwxMjgsMTE0XSxzYW5keWJyb3duOlsyNDQsMTY0LDk2XSxzZWFncmVlbjpbNDYsMTM5LDg3XSxzZWFzaGVsbDpbMjU1LDI0NSwyMzhdLHNpZW5uYTpbMTYwLDgyLDQ1XSxzaWx2ZXI6WzE5MiwxOTIsMTkyXSxza3libHVlOlsxMzUsMjA2LDIzNV0sc2xhdGVibHVlOlsxMDYsOTAsMjA1XSxzbGF0ZWdyYXk6WzExMiwxMjgsMTQ0XSxzbGF0ZWdyZXk6WzExMiwxMjgsMTQ0XSxzbm93OlsyNTUsMjUwLDI1MF0sc3ByaW5nZ3JlZW46WzAsMjU1LDEyN10sc3RlZWxibHVlOls3MCwxMzAsMTgwXSx0YW46WzIxMCwxODAsMTQwXSx0ZWFsOlswLDEyOCwxMjhdLHRoaXN0bGU6WzIxNiwxOTEsMjE2XSx0b21hdG86WzI1NSw5OSw3MV0sdHVycXVvaXNlOls2NCwyMjQsMjA4XSx2aW9sZXQ6WzIzOCwxMzAsMjM4XSx3aGVhdDpbMjQ1LDIyMiwxNzldLHdoaXRlOlsyNTUsMjU1LDI1NV0sd2hpdGVzbW9rZTpbMjQ1LDI0NSwyNDVdLHllbGxvdzpbMjU1LDI1NSwwXSx5ZWxsb3dncmVlbjpbMTU0LDIwNSw1MF0sdHJhbnNwYXJlbnQ6WzAsMCwwLDBdfSxmaWx0ZXI6e3ZhbHVlOltcInRydWVcIixcImZhbHNlXCIsXCJudWxsXCIsXCJwb2ludFwiLFwibGluZXN0cmluZ1wiLFwicG9seWdvblwiLFwiY29sbGVjdGlvblwiXX19O1xudC5leHBvcnRzPXt2ZXJzaW9uOntsYXRlc3Q6bixcIjIuMS4xXCI6bn19fSx7fV0sOTpbZnVuY3Rpb24oZSx0KXtcInVuZGVmaW5lZFwiIT10eXBlb2YgdCYmKHQuZXhwb3J0cy5maW5kPWZ1bmN0aW9uKGUsdCl7Zm9yKHZhciBuLHI9MDtyPGUubGVuZ3RoO3IrKylpZihuPXQuY2FsbChlLGVbcl0pKXJldHVybiBuO3JldHVybiBudWxsfSl9LHt9XSwxMDpbZnVuY3Rpb24oZSl7KGZ1bmN0aW9uKHQpeyFmdW5jdGlvbihuKXt2YXIgcj10Ll98fGUoXCJ1bmRlcnNjb3JlXCIpO24uQ2FsbD1mdW5jdGlvbihlLHQsbil7dGhpcy5uYW1lPWUsdGhpcy5hcmdzPXQsdGhpcy5pbmRleD1ufSxuLkNhbGwucHJvdG90eXBlPXtpczpcImNhbGxcIixldjpmdW5jdGlvbihlKXtmb3IodmFyIHQ9dGhpcy5hcmdzLm1hcChmdW5jdGlvbih0KXtyZXR1cm4gdC5ldihlKX0pLGk9MDtpPHQubGVuZ3RoO2krKylpZihcInVuZGVmaW5lZFwiPT09dFtpXS5pcylyZXR1cm57aXM6XCJ1bmRlZmluZWRcIix2YWx1ZTpcInVuZGVmaW5lZFwifTtpZih0aGlzLm5hbWUgaW4gbi5mdW5jdGlvbnMpe2lmKG4uZnVuY3Rpb25zW3RoaXMubmFtZV0ubGVuZ3RoPD10Lmxlbmd0aCl7dmFyIG89bi5mdW5jdGlvbnNbdGhpcy5uYW1lXS5hcHBseShuLmZ1bmN0aW9ucyx0KTtyZXR1cm4gbnVsbD09PW8/KGUuZXJyb3Ioe21lc3NhZ2U6XCJpbmNvcnJlY3QgYXJndW1lbnRzIGdpdmVuIHRvIFwiK3RoaXMubmFtZStcIigpXCIsaW5kZXg6dGhpcy5pbmRleCx0eXBlOlwicnVudGltZVwiLGZpbGVuYW1lOnRoaXMuZmlsZW5hbWV9KSx7aXM6XCJ1bmRlZmluZWRcIix2YWx1ZTpcInVuZGVmaW5lZFwifSk6b31yZXR1cm4gZS5lcnJvcih7bWVzc2FnZTpcImluY29ycmVjdCBudW1iZXIgb2YgYXJndW1lbnRzIGZvciBcIit0aGlzLm5hbWUrXCIoKS4gXCIrbi5mdW5jdGlvbnNbdGhpcy5uYW1lXS5sZW5ndGgrXCIgZXhwZWN0ZWQuXCIsaW5kZXg6dGhpcy5pbmRleCx0eXBlOlwicnVudGltZVwiLGZpbGVuYW1lOnRoaXMuZmlsZW5hbWV9KSx7aXM6XCJ1bmRlZmluZWRcIix2YWx1ZTpcInVuZGVmaW5lZFwifX12YXIgYT1uLlJlZmVyZW5jZS5tYXBuaWtGdW5jdGlvbnNbdGhpcy5uYW1lXTtpZih2b2lkIDA9PT1hKXt2YXIgcz1yLnBhaXJzKG4uUmVmZXJlbmNlLm1hcG5pa0Z1bmN0aW9ucyksbD10aGlzLm5hbWUsdT1zLm1hcChmdW5jdGlvbihlKXtyZXR1cm5bZVswXSxuLlJlZmVyZW5jZS5lZGl0RGlzdGFuY2UobCxlWzBdKSxlWzFdXX0pLnNvcnQoZnVuY3Rpb24oZSx0KXtyZXR1cm4gZVsxXS10WzFdfSk7cmV0dXJuIGUuZXJyb3Ioe21lc3NhZ2U6XCJ1bmtub3duIGZ1bmN0aW9uIFwiK3RoaXMubmFtZStcIigpLCBkaWQgeW91IG1lYW4gXCIrdVswXVswXStcIihcIit1WzBdWzJdK1wiKVwiLGluZGV4OnRoaXMuaW5kZXgsdHlwZTpcInJ1bnRpbWVcIixmaWxlbmFtZTp0aGlzLmZpbGVuYW1lfSkse2lzOlwidW5kZWZpbmVkXCIsdmFsdWU6XCJ1bmRlZmluZWRcIn19cmV0dXJuIGE9PT10Lmxlbmd0aHx8QXJyYXkuaXNBcnJheShhKSYmci5pbmNsdWRlKGEsdC5sZW5ndGgpfHwtMT09PWE/KHRoaXMuYXJncz10LHRoaXMpOihlLmVycm9yKHttZXNzYWdlOlwiZnVuY3Rpb24gXCIrdGhpcy5uYW1lK1wiKCkgdGFrZXMgXCIrYStcIiBhcmd1bWVudHMgYW5kIHdhcyBnaXZlbiBcIit0Lmxlbmd0aCxpbmRleDp0aGlzLmluZGV4LHR5cGU6XCJydW50aW1lXCIsZmlsZW5hbWU6dGhpcy5maWxlbmFtZX0pLHtpczpcInVuZGVmaW5lZFwiLHZhbHVlOlwidW5kZWZpbmVkXCJ9KX0sdG9TdHJpbmc6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5hcmdzLmxlbmd0aD90aGlzLm5hbWUrXCIoXCIrdGhpcy5hcmdzLmpvaW4oXCIsXCIpK1wiKVwiOnRoaXMubmFtZX19fShlKFwiLi4vdHJlZVwiKSl9KS5jYWxsKHRoaXMsXCJ1bmRlZmluZWRcIiE9dHlwZW9mIGdsb2JhbD9nbG9iYWw6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHNlbGY/c2VsZjpcInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93P3dpbmRvdzp7fSl9LHtcIi4uL3RyZWVcIjo5LHVuZGVyc2NvcmU6NDJ9XSwxMTpbZnVuY3Rpb24oZSl7IWZ1bmN0aW9uKGUpe2UuQ29sb3I9ZnVuY3Rpb24oZSx0KXt0aGlzLnJnYj1BcnJheS5pc0FycmF5KGUpP2Uuc2xpY2UoMCwzKTo2PT1lLmxlbmd0aD9lLm1hdGNoKC8uezJ9L2cpLm1hcChmdW5jdGlvbihlKXtyZXR1cm4gcGFyc2VJbnQoZSwxNil9KTplLnNwbGl0KFwiXCIpLm1hcChmdW5jdGlvbihlKXtyZXR1cm4gcGFyc2VJbnQoZStlLDE2KX0pLHRoaXMuYWxwaGE9XCJudW1iZXJcIj09dHlwZW9mIHQ/dDo0PT09ZS5sZW5ndGg/ZVszXToxfSxlLkNvbG9yLnByb3RvdHlwZT17aXM6XCJjb2xvclwiLGV2OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXN9LHRvU3RyaW5nOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuYWxwaGE8MT9cInJnYmEoXCIrdGhpcy5yZ2IubWFwKGZ1bmN0aW9uKGUpe3JldHVybiBNYXRoLnJvdW5kKGUpfSkuY29uY2F0KHRoaXMuYWxwaGEpLmpvaW4oXCIsIFwiKStcIilcIjpcIiNcIit0aGlzLnJnYi5tYXAoZnVuY3Rpb24oZSl7cmV0dXJuIGU9TWF0aC5yb3VuZChlKSxlPShlPjI1NT8yNTU6MD5lPzA6ZSkudG9TdHJpbmcoMTYpLDE9PT1lLmxlbmd0aD9cIjBcIitlOmV9KS5qb2luKFwiXCIpfSxvcGVyYXRlOmZ1bmN0aW9uKHQsbixyKXt2YXIgaT1bXTtyIGluc3RhbmNlb2YgZS5Db2xvcnx8KHI9ci50b0NvbG9yKCkpO2Zvcih2YXIgbz0wOzM+bztvKyspaVtvXT1lLm9wZXJhdGUobix0aGlzLnJnYltvXSxyLnJnYltvXSk7cmV0dXJuIG5ldyBlLkNvbG9yKGkpfSx0b0hTTDpmdW5jdGlvbigpe3ZhciBlLHQsbj10aGlzLnJnYlswXS8yNTUscj10aGlzLnJnYlsxXS8yNTUsaT10aGlzLnJnYlsyXS8yNTUsbz10aGlzLmFscGhhLGE9TWF0aC5tYXgobixyLGkpLHM9TWF0aC5taW4obixyLGkpLGw9KGErcykvMix1PWEtcztpZihhPT09cyllPXQ9MDtlbHNle3N3aXRjaCh0PWw+LjU/dS8oMi1hLXMpOnUvKGErcyksYSl7Y2FzZSBuOmU9KHItaSkvdSsoaT5yPzY6MCk7YnJlYWs7Y2FzZSByOmU9KGktbikvdSsyO2JyZWFrO2Nhc2UgaTplPShuLXIpL3UrNH1lLz02fXJldHVybntoOjM2MCplLHM6dCxsOmwsYTpvfX19fShlKFwiLi4vdHJlZVwiKSl9LHtcIi4uL3RyZWVcIjo5fV0sMTI6W2Z1bmN0aW9uKGUpeyFmdW5jdGlvbihlKXtlLkNvbW1lbnQ9ZnVuY3Rpb24oZSx0KXt0aGlzLnZhbHVlPWUsdGhpcy5zaWxlbnQ9ISF0fSxlLkNvbW1lbnQucHJvdG90eXBlPXt0b1N0cmluZzpmdW5jdGlvbigpe3JldHVyblwiPCEtLVwiK3RoaXMudmFsdWUrXCItLT5cIn0sZXY6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpc319fShlKFwiLi4vdHJlZVwiKSl9LHtcIi4uL3RyZWVcIjo5fV0sMTM6W2Z1bmN0aW9uKGUpeyhmdW5jdGlvbih0KXshZnVuY3Rpb24obil7ZnVuY3Rpb24gcihlKXtmdW5jdGlvbiB0KGUpe3JldHVybiBlWzFdLnRvVXBwZXJDYXNlKCl9cmV0dXJuIGUuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkrZS5zbGljZSgxKS5yZXBsYWNlKC9cXC0uLyx0KStcIlN5bWJvbGl6ZXJcIn1mdW5jdGlvbiBpKGUpe3JldHVybiBlLnNvcnQoZnVuY3Rpb24oZSx0KXtyZXR1cm4gZVsxXS10WzFdfSkubWFwKGZ1bmN0aW9uKGUpe3JldHVybiBlWzBdfSl9dmFyIG89ZShcImFzc2VydFwiKSxhPXQuX3x8ZShcInVuZGVyc2NvcmVcIik7bi5EZWZpbml0aW9uPWZ1bmN0aW9uKGUsdCl7dGhpcy5lbGVtZW50cz1lLmVsZW1lbnRzLG8ub2soZS5maWx0ZXJzIGluc3RhbmNlb2Ygbi5GaWx0ZXJzZXQpLHRoaXMucnVsZXM9dCx0aGlzLnJ1bGVJbmRleD17fTtmb3IodmFyIHI9MDtyPHRoaXMucnVsZXMubGVuZ3RoO3IrKylcInpvb21cImluIHRoaXMucnVsZXNbcl0mJih0aGlzLnJ1bGVzW3JdPXRoaXMucnVsZXNbcl0uY2xvbmUoKSksdGhpcy5ydWxlc1tyXS56b29tPWUuem9vbSx0aGlzLnJ1bGVJbmRleFt0aGlzLnJ1bGVzW3JdLnVwZGF0ZUlEKCldPSEwO3RoaXMuZmlsdGVycz1lLmZpbHRlcnMsdGhpcy56b29tPWUuem9vbSx0aGlzLmZyYW1lX29mZnNldD1lLmZyYW1lX29mZnNldCx0aGlzLmF0dGFjaG1lbnQ9ZS5hdHRhY2htZW50fHxcIl9fZGVmYXVsdF9fXCIsdGhpcy5zcGVjaWZpY2l0eT1lLnNwZWNpZmljaXR5KCl9LG4uRGVmaW5pdGlvbi5wcm90b3R5cGUudG9TdHJpbmc9ZnVuY3Rpb24oKXtmb3IodmFyIGU9dGhpcy5maWx0ZXJzLnRvU3RyaW5nKCksdD0wO3Q8dGhpcy5ydWxlcy5sZW5ndGg7dCsrKWUrPVwiXFxuICAgIFwiK3RoaXMucnVsZXNbdF07cmV0dXJuIGV9LG4uRGVmaW5pdGlvbi5wcm90b3R5cGUuY2xvbmU9ZnVuY3Rpb24oZSl7ZSYmby5vayhlIGluc3RhbmNlb2Ygbi5GaWx0ZXJzZXQpO3ZhciB0PU9iamVjdC5jcmVhdGUobi5EZWZpbml0aW9uLnByb3RvdHlwZSk7cmV0dXJuIHQucnVsZXM9dGhpcy5ydWxlcy5zbGljZSgpLHQucnVsZUluZGV4PWEuY2xvbmUodGhpcy5ydWxlSW5kZXgpLHQuZmlsdGVycz1lP2U6dGhpcy5maWx0ZXJzLmNsb25lKCksdC5hdHRhY2htZW50PXRoaXMuYXR0YWNobWVudCx0fSxuLkRlZmluaXRpb24ucHJvdG90eXBlLmFkZFJ1bGVzPWZ1bmN0aW9uKGUpe2Zvcih2YXIgdD0wLG49MDtuPGUubGVuZ3RoO24rKyl0aGlzLnJ1bGVJbmRleFtlW25dLmlkXXx8KHRoaXMucnVsZXMucHVzaChlW25dKSx0aGlzLnJ1bGVJbmRleFtlW25dLmlkXT0hMCx0KyspO3JldHVybiB0fSxuLkRlZmluaXRpb24ucHJvdG90eXBlLmFwcGxpZXNUbz1mdW5jdGlvbihlLHQpe2Zvcih2YXIgbj0wLHI9dGhpcy5lbGVtZW50cy5sZW5ndGg7cj5uO24rKyl7dmFyIGk9dGhpcy5lbGVtZW50c1tuXTtpZighKGkud2lsZGNhcmR8fFwiY2xhc3NcIj09PWkudHlwZSYmdFtpLmNsZWFuXXx8XCJpZFwiPT09aS50eXBlJiZlPT09aS5jbGVhbikpcmV0dXJuITF9cmV0dXJuITB9LG4uRGVmaW5pdGlvbi5wcm90b3R5cGUuc3ltYm9saXplcnNUb1hNTD1mdW5jdGlvbihlLHQsbyl7dmFyIGE9by50b1hNTChlKS5qb2luKFwiXCIpK3RoaXMuZmlsdGVycy50b1hNTChlKSxzPVtdLGw9W107Zm9yKHZhciB1IGluIHQpe2w9W107Zm9yKHZhciBjIGluIHRbdV0pbC5wdXNoKHRbdV1bY10uaW5kZXgpO3ZhciBmPU1hdGgubWluLmFwcGx5KE1hdGgsbCk7cy5wdXNoKFt1LGZdKX1zPWkocyk7Zm9yKHZhciBkPTAsaD0wO2g8cy5sZW5ndGg7aCsrKXt2YXIgcD10W3NbaF1dLG09c1toXS5zcGxpdChcIi9cIikucG9wKCk7aWYoXCIqXCIhPT1tKXtkKys7dmFyIGc9bi5SZWZlcmVuY2UucmVxdWlyZWRQcm9wZXJ0aWVzKG0scCk7aWYoZyl7dmFyIHY9cFtPYmplY3Qua2V5cyhwKS5zaGlmdCgpXTtlLmVycm9yKHttZXNzYWdlOmcsaW5kZXg6di5pbmRleCxmaWxlbmFtZTp2LmZpbGVuYW1lfSl9dmFyIHksYj1yKG0pLHc9ITA7YSs9XCIgICAgPFwiK2IrXCIgXCI7Zm9yKHZhciB4IGluIHApe1wibWFwXCI9PT1tJiZlLmVycm9yKHttZXNzYWdlOlwiTWFwIHByb3BlcnRpZXMgYXJlIG5vdCBwZXJtaXR0ZWQgaW4gb3RoZXIgcnVsZXNcIixpbmRleDpwW3hdLmluZGV4LGZpbGVuYW1lOnBbeF0uZmlsZW5hbWV9KTt2YXIgaz1uLlJlZmVyZW5jZS5zZWxlY3RvcihwW3hdLm5hbWUpO2smJmsuc2VyaWFsaXphdGlvbiYmXCJjb250ZW50XCI9PT1rLnNlcmlhbGl6YXRpb24/KHc9ITEseT1wW3hdLmV2KGUpLnRvWE1MKGUsITApKTprJiZrLnNlcmlhbGl6YXRpb24mJlwidGFnXCI9PT1rLnNlcmlhbGl6YXRpb24/KHc9ITEseT1wW3hdLmV2KGUpLnRvWE1MKGUsITApKTphKz1wW3hdLmV2KGUpLnRvWE1MKGUpK1wiIFwifXc/YSs9XCIvPlxcblwiOlwidW5kZWZpbmVkXCIhPXR5cGVvZiB5JiYoYSs9LTEhPXkuaW5kZXhPZihcIjxcIik/XCI+XCIreStcIjwvXCIrYitcIj5cXG5cIjpcIj48IVtDREFUQVtcIit5K1wiXV0+PC9cIitiK1wiPlxcblwiKX19cmV0dXJuIGQmJmE/XCIgIDxSdWxlPlxcblwiK2ErXCIgIDwvUnVsZT5cXG5cIjpcIlwifSxuLkRlZmluaXRpb24ucHJvdG90eXBlLmNvbGxlY3RTeW1ib2xpemVycz1mdW5jdGlvbihlLHQpe2Zvcih2YXIgbixyPXt9LGk9dDtpPHRoaXMucnVsZXMubGVuZ3RoO2krKyl7bj10aGlzLnJ1bGVzW2ldO3ZhciBvPW4uaW5zdGFuY2UrXCIvXCIrbi5zeW1ib2xpemVyOyEoZS5jdXJyZW50Jm4uem9vbSl8fG8gaW4gciYmbi5uYW1lIGluIHJbb118fChlLmN1cnJlbnQmPW4uem9vbSxvIGluIHJ8fChyW29dPXt9KSxyW29dW24ubmFtZV09bil9cmV0dXJuIE9iamVjdC5rZXlzKHIpLmxlbmd0aD8oZS5ydWxlJj1lLmF2YWlsYWJsZSY9fmUuY3VycmVudCxyKTp2b2lkIDB9LG4uRGVmaW5pdGlvbi5wcm90b3R5cGUudG9YTUw9ZnVuY3Rpb24oZSx0KXt2YXIgcj10aGlzLmZpbHRlcnMudG9TdHJpbmcoKTtyIGluIHR8fCh0W3JdPW4uWm9vbS5hbGwpO2Zvcih2YXIgaSxvPW4uWm9vbS5hbGwsYT1cIlwiLHM9e2F2YWlsYWJsZTpuLlpvb20uYWxsfSxsPTA7bDx0aGlzLnJ1bGVzLmxlbmd0aCYmbztsKyspaWYocy5ydWxlPXRoaXMucnVsZXNbbF0uem9vbSx0W3JdJnMucnVsZSlmb3IoO3MuY3VycmVudD1zLnJ1bGUmbzspaWYoaT10aGlzLmNvbGxlY3RTeW1ib2xpemVycyhzLGwpKXtpZighKHRbcl0mcy5jdXJyZW50KSljb250aW51ZTthKz10aGlzLnN5bWJvbGl6ZXJzVG9YTUwoZSxpLChuZXcgbi5ab29tKS5zZXRab29tKHRbcl0mcy5jdXJyZW50KSksdFtyXSY9fnMuY3VycmVudH1yZXR1cm4gYX0sbi5EZWZpbml0aW9uLnByb3RvdHlwZS50b0pTPWZ1bmN0aW9uKGUpe3ZhciB0PXt9LHI9XCIoXCIrdGhpcy56b29tK1wiICYgKDEgPDwgY3R4Lnpvb20pKVwiLGk9dGhpcy5mcmFtZV9vZmZzZXQsbz10aGlzLmZpbHRlcnMudG9KUyhlKSxzPVtyXTtyZXR1cm4gbyYmcy5wdXNoKG8pLGkmJnMucHVzaCgnY3R4W1wiZnJhbWUtb2Zmc2V0XCJdID09PSAnK2kpLG89cy5qb2luKFwiICYmIFwiKSxhLmVhY2godGhpcy5ydWxlcyxmdW5jdGlvbihyKXtpZighKHIgaW5zdGFuY2VvZiBuLlJ1bGUpKXRocm93IG5ldyBFcnJvcihcIlJ1bGVzZXQgbm90IHN1cHBvcnRlZFwiKTt0W3IubmFtZV09dFtyLm5hbWVdfHxbXTt2YXIgaT17aW5kZXg6ci5pbmRleCxzeW1ib2xpemVyOnIuc3ltYm9saXplcn07aS5qcz1vP1wiaWYoXCIrbytcIil7XCIrci52YWx1ZS50b0pTKGUpK1wifVwiOnIudmFsdWUudG9KUyhlKSxpLmNvbnN0YW50PVwiZmllbGRcIiE9PXIudmFsdWUuZXYoZSkuaXMsaS5maWx0ZXJlZD0hIW8sdFtyLm5hbWVdLnB1c2goaSl9KSx0fX0oZShcIi4uL3RyZWVcIikpfSkuY2FsbCh0aGlzLFwidW5kZWZpbmVkXCIhPXR5cGVvZiBnbG9iYWw/Z2xvYmFsOlwidW5kZWZpbmVkXCIhPXR5cGVvZiBzZWxmP3NlbGY6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdz93aW5kb3c6e30pfSx7XCIuLi90cmVlXCI6OSxhc3NlcnQ6MSx1bmRlcnNjb3JlOjQyfV0sMTQ6W2Z1bmN0aW9uKGUpeyhmdW5jdGlvbih0KXshZnVuY3Rpb24obil7dmFyIHI9dC5ffHxlKFwidW5kZXJzY29yZVwiKTtuLkRpbWVuc2lvbj1mdW5jdGlvbihlLHQsbil7dGhpcy52YWx1ZT1wYXJzZUZsb2F0KGUpLHRoaXMudW5pdD10fHxudWxsLHRoaXMuaW5kZXg9bn0sbi5EaW1lbnNpb24ucHJvdG90eXBlPXtpczpcImZsb2F0XCIscGh5c2ljYWxfdW5pdHM6W1wibVwiLFwiY21cIixcImluXCIsXCJtbVwiLFwicHRcIixcInBjXCJdLHNjcmVlbl91bml0czpbXCJweFwiLFwiJVwiXSxhbGxfdW5pdHM6W1wibVwiLFwiY21cIixcImluXCIsXCJtbVwiLFwicHRcIixcInBjXCIsXCJweFwiLFwiJVwiXSxkZW5zaXRpZXM6e206LjAyNTQsbW06MjUuNCxjbToyLjU0LHB0OjcyLHBjOjZ9LGV2OmZ1bmN0aW9uKGUpe2lmKHRoaXMudW5pdCYmIXIuY29udGFpbnModGhpcy5hbGxfdW5pdHMsdGhpcy51bml0KSlyZXR1cm4gZS5lcnJvcih7bWVzc2FnZTpcIkludmFsaWQgdW5pdDogJ1wiK3RoaXMudW5pdCtcIidcIixpbmRleDp0aGlzLmluZGV4fSkse2lzOlwidW5kZWZpbmVkXCIsdmFsdWU6XCJ1bmRlZmluZWRcIn07aWYodGhpcy51bml0JiZyLmNvbnRhaW5zKHRoaXMucGh5c2ljYWxfdW5pdHMsdGhpcy51bml0KSl7aWYoIWUucHBpKXJldHVybiBlLmVycm9yKHttZXNzYWdlOlwicHBpIGlzIG5vdCBzZXQsIHNvIG1ldHJpYyB1bml0cyBjYW4ndCBiZSB1c2VkXCIsaW5kZXg6dGhpcy5pbmRleH0pLHtpczpcInVuZGVmaW5lZFwiLHZhbHVlOlwidW5kZWZpbmVkXCJ9O3RoaXMudmFsdWU9dGhpcy52YWx1ZS90aGlzLmRlbnNpdGllc1t0aGlzLnVuaXRdKmUucHBpLHRoaXMudW5pdD1cInB4XCJ9cmV0dXJuIHRoaXN9LHJvdW5kOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudmFsdWU9TWF0aC5yb3VuZCh0aGlzLnZhbHVlKSx0aGlzfSx0b0NvbG9yOmZ1bmN0aW9uKCl7cmV0dXJuIG5ldyBuLkNvbG9yKFt0aGlzLnZhbHVlLHRoaXMudmFsdWUsdGhpcy52YWx1ZV0pfSxyb3VuZDpmdW5jdGlvbigpe3JldHVybiB0aGlzLnZhbHVlPU1hdGgucm91bmQodGhpcy52YWx1ZSksdGhpc30sdG9TdHJpbmc6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy52YWx1ZS50b1N0cmluZygpfSxvcGVyYXRlOmZ1bmN0aW9uKGUsdCxyKXtyZXR1cm5cIiVcIj09PXRoaXMudW5pdCYmXCIlXCIhPT1yLnVuaXQ/KGUuZXJyb3Ioe21lc3NhZ2U6XCJJZiB0d28gb3BlcmFuZHMgZGlmZmVyLCB0aGUgZmlyc3QgbXVzdCBub3QgYmUgJVwiLGluZGV4OnRoaXMuaW5kZXh9KSx7aXM6XCJ1bmRlZmluZWRcIix2YWx1ZTpcInVuZGVmaW5lZFwifSk6XCIlXCIhPT10aGlzLnVuaXQmJlwiJVwiPT09ci51bml0P1wiKlwiPT09dHx8XCIvXCI9PT10fHxcIiVcIj09PXQ/KGUuZXJyb3Ioe21lc3NhZ2U6XCJQZXJjZW50IHZhbHVlcyBjYW4gb25seSBiZSBhZGRlZCBvciBzdWJ0cmFjdGVkIGZyb20gb3RoZXIgdmFsdWVzXCIsaW5kZXg6dGhpcy5pbmRleH0pLHtpczpcInVuZGVmaW5lZFwiLHZhbHVlOlwidW5kZWZpbmVkXCJ9KTpuZXcgbi5EaW1lbnNpb24obi5vcGVyYXRlKHQsdGhpcy52YWx1ZSx0aGlzLnZhbHVlKnIudmFsdWUqLjAxKSx0aGlzLnVuaXQpOm5ldyBuLkRpbWVuc2lvbihuLm9wZXJhdGUodCx0aGlzLnZhbHVlLHIudmFsdWUpLHRoaXMudW5pdHx8ci51bml0KX19fShlKFwiLi4vdHJlZVwiKSl9KS5jYWxsKHRoaXMsXCJ1bmRlZmluZWRcIiE9dHlwZW9mIGdsb2JhbD9nbG9iYWw6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHNlbGY/c2VsZjpcInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93P3dpbmRvdzp7fSl9LHtcIi4uL3RyZWVcIjo5LHVuZGVyc2NvcmU6NDJ9XSwxNTpbZnVuY3Rpb24oZSl7IWZ1bmN0aW9uKGUpe2UuRWxlbWVudD1mdW5jdGlvbihlKXt0aGlzLnZhbHVlPWUudHJpbSgpLFwiI1wiPT09dGhpcy52YWx1ZVswXSYmKHRoaXMudHlwZT1cImlkXCIsdGhpcy5jbGVhbj10aGlzLnZhbHVlLnJlcGxhY2UoL14jLyxcIlwiKSksXCIuXCI9PT10aGlzLnZhbHVlWzBdJiYodGhpcy50eXBlPVwiY2xhc3NcIix0aGlzLmNsZWFuPXRoaXMudmFsdWUucmVwbGFjZSgvXlxcLi8sXCJcIikpLC0xIT09dGhpcy52YWx1ZS5pbmRleE9mKFwiKlwiKSYmKHRoaXMudHlwZT1cIndpbGRjYXJkXCIpfSxlLkVsZW1lbnQucHJvdG90eXBlLnNwZWNpZmljaXR5PWZ1bmN0aW9uKCl7cmV0dXJuW1wiaWRcIj09PXRoaXMudHlwZT8xOjAsXCJjbGFzc1wiPT09dGhpcy50eXBlPzE6MF19LGUuRWxlbWVudC5wcm90b3R5cGUudG9TdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy52YWx1ZX19KGUoXCIuLi90cmVlXCIpKX0se1wiLi4vdHJlZVwiOjl9XSwxNjpbZnVuY3Rpb24oZSl7IWZ1bmN0aW9uKGUpe2UuRXhwcmVzc2lvbj1mdW5jdGlvbihlKXt0aGlzLnZhbHVlPWV9LGUuRXhwcmVzc2lvbi5wcm90b3R5cGU9e2lzOlwiZXhwcmVzc2lvblwiLGV2OmZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLnZhbHVlLmxlbmd0aD4xP25ldyBlLkV4cHJlc3Npb24odGhpcy52YWx1ZS5tYXAoZnVuY3Rpb24oZSl7cmV0dXJuIGUuZXYodCl9KSk6dGhpcy52YWx1ZVswXS5ldih0KX0sdG9TdHJpbmc6ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMudmFsdWUubWFwKGZ1bmN0aW9uKHQpe3JldHVybiB0LnRvU3RyaW5nKGUpfSkuam9pbihcIiBcIil9fX0oZShcIi4uL3RyZWVcIikpfSx7XCIuLi90cmVlXCI6OX1dLDE3OltmdW5jdGlvbihlKXshZnVuY3Rpb24oZSl7ZS5GaWVsZD1mdW5jdGlvbihlKXt0aGlzLnZhbHVlPWV8fFwiXCJ9LGUuRmllbGQucHJvdG90eXBlPXtpczpcImZpZWxkXCIsdG9TdHJpbmc6ZnVuY3Rpb24oKXtyZXR1cm5cIltcIit0aGlzLnZhbHVlK1wiXVwifSxldjpmdW5jdGlvbigpe3JldHVybiB0aGlzfX19KGUoXCIuLi90cmVlXCIpKX0se1wiLi4vdHJlZVwiOjl9XSwxODpbZnVuY3Rpb24oZSl7IWZ1bmN0aW9uKGUpe2UuRmlsdGVyPWZ1bmN0aW9uKGUsdCxuLHIsaSl7dGhpcy5rZXk9ZSx0aGlzLm9wPXQsdGhpcy52YWw9bix0aGlzLmluZGV4PXIsdGhpcy5maWxlbmFtZT1pLHRoaXMuaWQ9dGhpcy5rZXkrdGhpcy5vcCt0aGlzLnZhbH07dmFyIHQ9e1wiPFwiOltcIiAmbHQ7IFwiLFwibnVtZXJpY1wiXSxcIj5cIjpbXCIgJmd0OyBcIixcIm51bWVyaWNcIl0sXCI9XCI6W1wiID0gXCIsXCJib3RoXCJdLFwiIT1cIjpbXCIgIT0gXCIsXCJib3RoXCJdLFwiPD1cIjpbXCIgJmx0Oz0gXCIsXCJudW1lcmljXCJdLFwiPj1cIjpbXCIgJmd0Oz0gXCIsXCJudW1lcmljXCJdLFwiPX5cIjpbXCIubWF0Y2goXCIsXCJzdHJpbmdcIixcIilcIl19O2UuRmlsdGVyLnByb3RvdHlwZS5ldj1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5rZXk9dGhpcy5rZXkuZXYoZSksdGhpcy52YWw9dGhpcy52YWwuZXYoZSksdGhpc30sZS5GaWx0ZXIucHJvdG90eXBlLnRvWE1MPWZ1bmN0aW9uKG4pe2UuUmVmZXJlbmNlLmRhdGEuZmlsdGVyJiYoXCJrZXl3b3JkXCI9PT10aGlzLmtleS5pcyYmLTE9PT1lLlJlZmVyZW5jZS5kYXRhLmZpbHRlci52YWx1ZS5pbmRleE9mKHRoaXMua2V5LnRvU3RyaW5nKCkpJiZuLmVycm9yKHttZXNzYWdlOnRoaXMua2V5LnRvU3RyaW5nKCkrXCIgaXMgbm90IGEgdmFsaWQga2V5d29yZCBpbiBhIGZpbHRlciBleHByZXNzaW9uXCIsaW5kZXg6dGhpcy5pbmRleCxmaWxlbmFtZTp0aGlzLmZpbGVuYW1lfSksXCJrZXl3b3JkXCI9PT10aGlzLnZhbC5pcyYmLTE9PT1lLlJlZmVyZW5jZS5kYXRhLmZpbHRlci52YWx1ZS5pbmRleE9mKHRoaXMudmFsLnRvU3RyaW5nKCkpJiZuLmVycm9yKHttZXNzYWdlOnRoaXMudmFsLnRvU3RyaW5nKCkrXCIgaXMgbm90IGEgdmFsaWQga2V5d29yZCBpbiBhIGZpbHRlciBleHByZXNzaW9uXCIsaW5kZXg6dGhpcy5pbmRleCxmaWxlbmFtZTp0aGlzLmZpbGVuYW1lfSkpO3ZhciByPXRoaXMua2V5LnRvU3RyaW5nKCExKSxpPXRoaXMudmFsLnRvU3RyaW5nKFwic3RyaW5nXCI9PXRoaXMudmFsLmlzKTtyZXR1cm4oXCJudW1lcmljXCI9PXRbdGhpcy5vcF1bMV0mJmlzTmFOKGkpJiZcImZpZWxkXCIhPT10aGlzLnZhbC5pc3x8XCJzdHJpbmdcIj09dFt0aGlzLm9wXVsxXSYmXCInXCIhPWlbMF0pJiZuLmVycm9yKHttZXNzYWdlOidDYW5ub3QgdXNlIG9wZXJhdG9yIFwiJyt0aGlzLm9wKydcIiB3aXRoIHZhbHVlICcrdGhpcy52YWwsaW5kZXg6dGhpcy5pbmRleCxmaWxlbmFtZTp0aGlzLmZpbGVuYW1lfSkscit0W3RoaXMub3BdWzBdK2krKHRbdGhpcy5vcF1bMl18fFwiXCIpfSxlLkZpbHRlci5wcm90b3R5cGUudG9TdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm5cIltcIit0aGlzLmlkK1wiXVwifX0oZShcIi4uL3RyZWVcIikpfSx7XCIuLi90cmVlXCI6OX1dLDE5OltmdW5jdGlvbihlKXsoZnVuY3Rpb24odCl7dmFyIG49ZShcIi4uL3RyZWVcIikscj10Ll98fGUoXCJ1bmRlcnNjb3JlXCIpO24uRmlsdGVyc2V0PWZ1bmN0aW9uKCl7dGhpcy5maWx0ZXJzPXt9fSxuLkZpbHRlcnNldC5wcm90b3R5cGUudG9YTUw9ZnVuY3Rpb24oZSl7dmFyIHQ9W107Zm9yKHZhciBuIGluIHRoaXMuZmlsdGVycyl0LnB1c2goXCIoXCIrdGhpcy5maWx0ZXJzW25dLnRvWE1MKGUpLnRyaW0oKStcIilcIik7cmV0dXJuIHQubGVuZ3RoP1wiICAgIDxGaWx0ZXI+XCIrdC5qb2luKFwiIGFuZCBcIikrXCI8L0ZpbHRlcj5cXG5cIjpcIlwifSxuLkZpbHRlcnNldC5wcm90b3R5cGUudG9TdHJpbmc9ZnVuY3Rpb24oKXt2YXIgZT1bXTtmb3IodmFyIHQgaW4gdGhpcy5maWx0ZXJzKWUucHVzaCh0aGlzLmZpbHRlcnNbdF0uaWQpO3JldHVybiBlLnNvcnQoKS5qb2luKFwiXHRcIil9LG4uRmlsdGVyc2V0LnByb3RvdHlwZS5ldj1mdW5jdGlvbihlKXtmb3IodmFyIHQgaW4gdGhpcy5maWx0ZXJzKXRoaXMuZmlsdGVyc1t0XS5ldihlKTtyZXR1cm4gdGhpc30sbi5GaWx0ZXJzZXQucHJvdG90eXBlLmNsb25lPWZ1bmN0aW9uKCl7dmFyIGU9bmV3IG4uRmlsdGVyc2V0O2Zvcih2YXIgdCBpbiB0aGlzLmZpbHRlcnMpZS5maWx0ZXJzW3RdPXRoaXMuZmlsdGVyc1t0XTtyZXR1cm4gZX0sbi5GaWx0ZXJzZXQucHJvdG90eXBlLmNsb25lV2l0aD1mdW5jdGlvbihlKXt2YXIgdD1bXTtmb3IodmFyIHIgaW4gZS5maWx0ZXJzKXt2YXIgaT10aGlzLmFkZGFibGUoZS5maWx0ZXJzW3JdKTtpZihpPT09ITEpcmV0dXJuITE7aT09PSEwJiZ0LnB1c2goZS5maWx0ZXJzW3JdKX1pZighdC5sZW5ndGgpcmV0dXJuIG51bGw7dmFyIG89bmV3IG4uRmlsdGVyc2V0O2ZvcihyIGluIHRoaXMuZmlsdGVycylvLmZpbHRlcnNbcl09dGhpcy5maWx0ZXJzW3JdO2Zvcig7cj10LnNoaWZ0KCk7KW8uYWRkKHIpO3JldHVybiBvfSxuLkZpbHRlcnNldC5wcm90b3R5cGUudG9KUz1mdW5jdGlvbigpe3ZhciBlPXtcIj1cIjpcIj09PVwifTtyZXR1cm4gci5tYXAodGhpcy5maWx0ZXJzLGZ1bmN0aW9uKHQpe3ZhciBuPXQub3A7biBpbiBlJiYobj1lW25dKTt2YXIgcj10LnZhbDt2b2lkIDAhPT10Ll92YWwmJihyPXQuX3ZhbC50b1N0cmluZyghMCkpO3ZhciBpPVwiZGF0YVwiO3JldHVybiBpK1wiWydcIit0LmtleS52YWx1ZStcIiddIFwiK24rXCIgXCIrKFwic3RyaW5nXCI9PT1yLmlzP1wiJ1wiK3IudG9TdHJpbmcoKS5yZXBsYWNlKC8nL2csXCJcXFxcJ1wiKStcIidcIjpyKX0pLmpvaW4oXCIgJiYgXCIpfSxuLkZpbHRlcnNldC5wcm90b3R5cGUuYWRkYWJsZT1mdW5jdGlvbihlKXt2YXIgdD1lLmtleS50b1N0cmluZygpLG49ZS52YWwudG9TdHJpbmcoKTtzd2l0Y2gobi5tYXRjaCgvXlswLTldKyhcXC5bMC05XSopPyQvKSYmKG49cGFyc2VGbG9hdChuKSksZS5vcCl7Y2FzZVwiPVwiOnJldHVybiB2b2lkIDAhPT10aGlzLmZpbHRlcnNbdCtcIj1cIl0/dGhpcy5maWx0ZXJzW3QrXCI9XCJdLnZhbC50b1N0cmluZygpIT1uPyExOm51bGw6dm9pZCAwIT09dGhpcy5maWx0ZXJzW3QrXCIhPVwiK25dPyExOnZvaWQgMCE9PXRoaXMuZmlsdGVyc1t0K1wiPlwiXSYmdGhpcy5maWx0ZXJzW3QrXCI+XCJdLnZhbD49bj8hMTp2b2lkIDAhPT10aGlzLmZpbHRlcnNbdCtcIjxcIl0mJnRoaXMuZmlsdGVyc1t0K1wiPFwiXS52YWw8PW4/ITE6dm9pZCAwIT09dGhpcy5maWx0ZXJzW3QrXCI+PVwiXSYmdGhpcy5maWx0ZXJzW3QrXCI+PVwiXS52YWw+bj8hMTp2b2lkIDAhPT10aGlzLmZpbHRlcnNbdCtcIjw9XCJdJiZ0aGlzLmZpbHRlcnNbdCtcIjw9XCJdLnZhbDxuPyExOiEwO2Nhc2VcIj1+XCI6cmV0dXJuITA7Y2FzZVwiIT1cIjpyZXR1cm4gdm9pZCAwIT09dGhpcy5maWx0ZXJzW3QrXCI9XCJdP3RoaXMuZmlsdGVyc1t0K1wiPVwiXS52YWw9PW4/ITE6bnVsbDp2b2lkIDAhPT10aGlzLmZpbHRlcnNbdCtcIiE9XCIrbl0/bnVsbDp2b2lkIDAhPT10aGlzLmZpbHRlcnNbdCtcIj5cIl0mJnRoaXMuZmlsdGVyc1t0K1wiPlwiXS52YWw+PW4/bnVsbDp2b2lkIDAhPT10aGlzLmZpbHRlcnNbdCtcIjxcIl0mJnRoaXMuZmlsdGVyc1t0K1wiPFwiXS52YWw8PW4/bnVsbDp2b2lkIDAhPT10aGlzLmZpbHRlcnNbdCtcIj49XCJdJiZ0aGlzLmZpbHRlcnNbdCtcIj49XCJdLnZhbD5uP251bGw6dm9pZCAwIT09dGhpcy5maWx0ZXJzW3QrXCI8PVwiXSYmdGhpcy5maWx0ZXJzW3QrXCI8PVwiXS52YWw8bj9udWxsOiEwO2Nhc2VcIj5cIjpyZXR1cm4gdCtcIj1cImluIHRoaXMuZmlsdGVycz90aGlzLmZpbHRlcnNbdCtcIj1cIl0udmFsPD1uPyExOm51bGw6dm9pZCAwIT09dGhpcy5maWx0ZXJzW3QrXCI8XCJdJiZ0aGlzLmZpbHRlcnNbdCtcIjxcIl0udmFsPD1uPyExOnZvaWQgMCE9PXRoaXMuZmlsdGVyc1t0K1wiPD1cIl0mJnRoaXMuZmlsdGVyc1t0K1wiPD1cIl0udmFsPD1uPyExOnZvaWQgMCE9PXRoaXMuZmlsdGVyc1t0K1wiPlwiXSYmdGhpcy5maWx0ZXJzW3QrXCI+XCJdLnZhbD49bj9udWxsOnZvaWQgMCE9PXRoaXMuZmlsdGVyc1t0K1wiPj1cIl0mJnRoaXMuZmlsdGVyc1t0K1wiPj1cIl0udmFsPm4/bnVsbDohMDtjYXNlXCI+PVwiOnJldHVybiB2b2lkIDAhPT10aGlzLmZpbHRlcnNbdCtcIj1cIl0/dGhpcy5maWx0ZXJzW3QrXCI9XCJdLnZhbDxuPyExOm51bGw6dm9pZCAwIT09dGhpcy5maWx0ZXJzW3QrXCI8XCJdJiZ0aGlzLmZpbHRlcnNbdCtcIjxcIl0udmFsPD1uPyExOnZvaWQgMCE9PXRoaXMuZmlsdGVyc1t0K1wiPD1cIl0mJnRoaXMuZmlsdGVyc1t0K1wiPD1cIl0udmFsPG4/ITE6dm9pZCAwIT09dGhpcy5maWx0ZXJzW3QrXCI+XCJdJiZ0aGlzLmZpbHRlcnNbdCtcIj5cIl0udmFsPj1uP251bGw6dm9pZCAwIT09dGhpcy5maWx0ZXJzW3QrXCI+PVwiXSYmdGhpcy5maWx0ZXJzW3QrXCI+PVwiXS52YWw+PW4/bnVsbDohMDtjYXNlXCI8XCI6cmV0dXJuIHZvaWQgMCE9PXRoaXMuZmlsdGVyc1t0K1wiPVwiXT90aGlzLmZpbHRlcnNbdCtcIj1cIl0udmFsPj1uPyExOm51bGw6dm9pZCAwIT09dGhpcy5maWx0ZXJzW3QrXCI+XCJdJiZ0aGlzLmZpbHRlcnNbdCtcIj5cIl0udmFsPj1uPyExOnZvaWQgMCE9PXRoaXMuZmlsdGVyc1t0K1wiPj1cIl0mJnRoaXMuZmlsdGVyc1t0K1wiPj1cIl0udmFsPj1uPyExOnZvaWQgMCE9PXRoaXMuZmlsdGVyc1t0K1wiPFwiXSYmdGhpcy5maWx0ZXJzW3QrXCI8XCJdLnZhbDw9bj9udWxsOnZvaWQgMCE9PXRoaXMuZmlsdGVyc1t0K1wiPD1cIl0mJnRoaXMuZmlsdGVyc1t0K1wiPD1cIl0udmFsPG4/bnVsbDohMDtjYXNlXCI8PVwiOnJldHVybiB2b2lkIDAhPT10aGlzLmZpbHRlcnNbdCtcIj1cIl0/dGhpcy5maWx0ZXJzW3QrXCI9XCJdLnZhbD5uPyExOm51bGw6dm9pZCAwIT09dGhpcy5maWx0ZXJzW3QrXCI+XCJdJiZ0aGlzLmZpbHRlcnNbdCtcIj5cIl0udmFsPj1uPyExOnZvaWQgMCE9PXRoaXMuZmlsdGVyc1t0K1wiPj1cIl0mJnRoaXMuZmlsdGVyc1t0K1wiPj1cIl0udmFsPm4/ITE6dm9pZCAwIT09dGhpcy5maWx0ZXJzW3QrXCI8XCJdJiZ0aGlzLmZpbHRlcnNbdCtcIjxcIl0udmFsPD1uP251bGw6dm9pZCAwIT09dGhpcy5maWx0ZXJzW3QrXCI8PVwiXSYmdGhpcy5maWx0ZXJzW3QrXCI8PVwiXS52YWw8PW4/bnVsbDohMH19LG4uRmlsdGVyc2V0LnByb3RvdHlwZS5jb25mbGljdD1mdW5jdGlvbihlKXt2YXIgdD1lLmtleS50b1N0cmluZygpLG49ZS52YWwudG9TdHJpbmcoKTtyZXR1cm4gaXNOYU4ocGFyc2VGbG9hdChuKSl8fChuPXBhcnNlRmxvYXQobikpLFwiPVwiPT09ZS5vcCYmdm9pZCAwIT09dGhpcy5maWx0ZXJzW3QrXCI9XCJdJiZuIT10aGlzLmZpbHRlcnNbdCtcIj1cIl0udmFsLnRvU3RyaW5nKCl8fFwiIT1cIj09PWUub3AmJnZvaWQgMCE9PXRoaXMuZmlsdGVyc1t0K1wiPVwiXSYmbj09dGhpcy5maWx0ZXJzW3QrXCI9XCJdLnZhbC50b1N0cmluZygpfHxcIj1cIj09PWUub3AmJnZvaWQgMCE9PXRoaXMuZmlsdGVyc1t0K1wiIT1cIl0mJm49PXRoaXMuZmlsdGVyc1t0K1wiIT1cIl0udmFsLnRvU3RyaW5nKCk/ZS50b1N0cmluZygpK1wiIGFkZGVkIHRvIFwiK3RoaXMudG9TdHJpbmcoKStcIiBwcm9kdWNlcyBhbiBpbnZhbGlkIGZpbHRlclwiOiExfSxuLkZpbHRlcnNldC5wcm90b3R5cGUuYWRkPWZ1bmN0aW9uKGUpe3ZhciB0LG49ZS5rZXkudG9TdHJpbmcoKSxyPWUub3AsaT10aGlzLmNvbmZsaWN0KGUpO2lmKGkpcmV0dXJuIGk7aWYoXCI9XCI9PT1yKXtmb3IodmFyIG8gaW4gdGhpcy5maWx0ZXJzKXRoaXMuZmlsdGVyc1tvXS5rZXk9PW4mJmRlbGV0ZSB0aGlzLmZpbHRlcnNbb107dGhpcy5maWx0ZXJzW24rXCI9XCJdPWV9ZWxzZSBpZihcIiE9XCI9PT1yKXRoaXMuZmlsdGVyc1tuK1wiIT1cIitlLnZhbF09ZTtlbHNlIGlmKFwiPX5cIj09PXIpdGhpcy5maWx0ZXJzW24rXCI9flwiK2UudmFsXT1lO2Vsc2UgaWYoXCI+XCI9PT1yKXtmb3IodmFyIGEgaW4gdGhpcy5maWx0ZXJzKXRoaXMuZmlsdGVyc1thXS5rZXk9PW4mJnRoaXMuZmlsdGVyc1thXS52YWw8PWUudmFsJiZkZWxldGUgdGhpcy5maWx0ZXJzW2FdO3RoaXMuZmlsdGVyc1tuK1wiPlwiXT1lfWVsc2UgaWYoXCI+PVwiPT09cil7Zm9yKHZhciBzIGluIHRoaXMuZmlsdGVycyl0PSt0aGlzLmZpbHRlcnNbc10udmFsLnRvU3RyaW5nKCksdGhpcy5maWx0ZXJzW3NdLmtleT09biYmdDxlLnZhbCYmZGVsZXRlIHRoaXMuZmlsdGVyc1tzXTt2b2lkIDAhPT10aGlzLmZpbHRlcnNbbitcIiE9XCIrZS52YWxdPyhkZWxldGUgdGhpcy5maWx0ZXJzW24rXCIhPVwiK2UudmFsXSxlLm9wPVwiPlwiLHRoaXMuZmlsdGVyc1tuK1wiPlwiXT1lKTp0aGlzLmZpbHRlcnNbbitcIj49XCJdPWV9ZWxzZSBpZihcIjxcIj09PXIpe2Zvcih2YXIgbCBpbiB0aGlzLmZpbHRlcnMpdD0rdGhpcy5maWx0ZXJzW2xdLnZhbC50b1N0cmluZygpLHRoaXMuZmlsdGVyc1tsXS5rZXk9PW4mJnQ+PWUudmFsJiZkZWxldGUgdGhpcy5maWx0ZXJzW2xdO3RoaXMuZmlsdGVyc1tuK1wiPFwiXT1lfWVsc2UgaWYoXCI8PVwiPT09cil7Zm9yKHZhciB1IGluIHRoaXMuZmlsdGVycyl0PSt0aGlzLmZpbHRlcnNbdV0udmFsLnRvU3RyaW5nKCksdGhpcy5maWx0ZXJzW3VdLmtleT09biYmdD5lLnZhbCYmZGVsZXRlIHRoaXMuZmlsdGVyc1t1XTt2b2lkIDAhPT10aGlzLmZpbHRlcnNbbitcIiE9XCIrZS52YWxdPyhkZWxldGUgdGhpcy5maWx0ZXJzW24rXCIhPVwiK2UudmFsXSxlLm9wPVwiPFwiLHRoaXMuZmlsdGVyc1tuK1wiPFwiXT1lKTp0aGlzLmZpbHRlcnNbbitcIjw9XCJdPWV9fX0pLmNhbGwodGhpcyxcInVuZGVmaW5lZFwiIT10eXBlb2YgZ2xvYmFsP2dsb2JhbDpcInVuZGVmaW5lZFwiIT10eXBlb2Ygc2VsZj9zZWxmOlwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3c/d2luZG93Ont9KX0se1wiLi4vdHJlZVwiOjksdW5kZXJzY29yZTo0Mn1dLDIwOltmdW5jdGlvbihlKXshZnVuY3Rpb24oZSl7ZS5fZ2V0Rm9udFNldD1mdW5jdGlvbih0LG4pe3ZhciByPW4uam9pbihcIlwiKTtpZih0Ll9mb250TWFwJiZ0Ll9mb250TWFwW3JdKXJldHVybiB0Ll9mb250TWFwW3JdO3ZhciBpPW5ldyBlLkZvbnRTZXQodCxuKTtyZXR1cm4gdC5lZmZlY3RzLnB1c2goaSksdC5fZm9udE1hcHx8KHQuX2ZvbnRNYXA9e30pLHQuX2ZvbnRNYXBbcl09aSxpfSxlLkZvbnRTZXQ9ZnVuY3Rpb24oZSx0KXt0aGlzLmZvbnRzPXQsdGhpcy5uYW1lPVwiZm9udHNldC1cIitlLmVmZmVjdHMubGVuZ3RofSxlLkZvbnRTZXQucHJvdG90eXBlLnRvWE1MPWZ1bmN0aW9uKCl7cmV0dXJuJzxGb250U2V0IG5hbWU9XCInK3RoaXMubmFtZSsnXCI+XFxuJyt0aGlzLmZvbnRzLm1hcChmdW5jdGlvbihlKXtyZXR1cm4nICA8Rm9udCBmYWNlLW5hbWU9XCInK2UrJ1wiLz4nfSkuam9pbihcIlxcblwiKStcIlxcbjwvRm9udFNldD5cIn19KGUoXCIuLi90cmVlXCIpKX0se1wiLi4vdHJlZVwiOjl9XSwyMTpbZnVuY3Rpb24oZSl7dmFyIHQ9ZShcIi4uL3RyZWVcIik7dC5GcmFtZU9mZnNldD1mdW5jdGlvbihlLG4scil7aWYobj1wYXJzZUludChuLDEwKSxuPnQuRnJhbWVPZmZzZXQubWF4fHwwPj1uKXRocm93e21lc3NhZ2U6XCJPbmx5IGZyYW1lLW9mZnNldCBsZXZlbHMgYmV0d2VlbiAxIGFuZCBcIit0LkZyYW1lT2Zmc2V0Lm1heCtcIiBzdXBwb3J0ZWQuXCIsaW5kZXg6cn07aWYoXCI9XCIhPT1lKXRocm93e21lc3NhZ2U6XCJvbmx5ID0gb3BlcmF0b3IgaXMgc3VwcG9ydGVkIGZvciBmcmFtZS1vZmZzZXRcIixpbmRleDpyfTtyZXR1cm4gbn0sdC5GcmFtZU9mZnNldC5tYXg9MzIsdC5GcmFtZU9mZnNldC5ub25lPTB9LHtcIi4uL3RyZWVcIjo5fV0sMjI6W2Z1bmN0aW9uKGUpeyFmdW5jdGlvbihlKXtlLkltYWdlRmlsdGVyPWZ1bmN0aW9uKGUsdCl7dGhpcy5maWx0ZXI9ZSx0aGlzLmFyZ3M9dHx8bnVsbH0sZS5JbWFnZUZpbHRlci5wcm90b3R5cGU9e2lzOlwiaW1hZ2VmaWx0ZXJcIixldjpmdW5jdGlvbigpe3JldHVybiB0aGlzfSx0b1N0cmluZzpmdW5jdGlvbigpe3JldHVybiB0aGlzLmFyZ3M/dGhpcy5maWx0ZXIrXCIoXCIrdGhpcy5hcmdzLmpvaW4oXCIsXCIpK1wiKVwiOnRoaXMuZmlsdGVyfX19KGUoXCIuLi90cmVlXCIpKX0se1wiLi4vdHJlZVwiOjl9XSwyMzpbZnVuY3Rpb24oZSl7IWZ1bmN0aW9uKGUpe2UuSW52YWxpZD1mdW5jdGlvbihlLHQsbil7dGhpcy5jaHVuaz1lLHRoaXMuaW5kZXg9dCx0aGlzLnR5cGU9XCJzeW50YXhcIix0aGlzLm1lc3NhZ2U9bnx8XCJJbnZhbGlkIGNvZGU6IFwiK3RoaXMuY2h1bmt9LGUuSW52YWxpZC5wcm90b3R5cGUuaXM9XCJpbnZhbGlkXCIsZS5JbnZhbGlkLnByb3RvdHlwZS5ldj1mdW5jdGlvbihlKXtyZXR1cm4gZS5lcnJvcih7Y2h1bms6dGhpcy5jaHVuayxpbmRleDp0aGlzLmluZGV4LHR5cGU6XCJzeW50YXhcIixtZXNzYWdlOnRoaXMubWVzc2FnZXx8XCJJbnZhbGlkIGNvZGU6IFwiK3RoaXMuY2h1bmt9KSx7aXM6XCJ1bmRlZmluZWRcIn19fShlKFwiLi4vdHJlZVwiKSl9LHtcIi4uL3RyZWVcIjo5fV0sMjQ6W2Z1bmN0aW9uKGUpeyFmdW5jdGlvbihlKXtlLktleXdvcmQ9ZnVuY3Rpb24oZSl7dGhpcy52YWx1ZT1lO3ZhciB0PXt0cmFuc3BhcmVudDpcImNvbG9yXCIsXCJ0cnVlXCI6XCJib29sZWFuXCIsXCJmYWxzZVwiOlwiYm9vbGVhblwifTt0aGlzLmlzPXRbZV0/dFtlXTpcImtleXdvcmRcIn0sZS5LZXl3b3JkLnByb3RvdHlwZT17ZXY6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpc30sdG9TdHJpbmc6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy52YWx1ZX19fShlKFwiLi4vdHJlZVwiKSl9LHtcIi4uL3RyZWVcIjo5fV0sMjU6W2Z1bmN0aW9uKGUpeyFmdW5jdGlvbihlKXtlLkxheWVyWE1MPWZ1bmN0aW9uKHQsbil7dmFyIHI9W107Zm9yKHZhciBpIGluIHQuRGF0YXNvdXJjZSlyLnB1c2goJzxQYXJhbWV0ZXIgbmFtZT1cIicraSsnXCI+PCFbQ0RBVEFbJyt0LkRhdGFzb3VyY2VbaV0rXCJdXT48L1BhcmFtZXRlcj5cIik7dmFyIG89XCJcIjtmb3IodmFyIGEgaW4gdC5wcm9wZXJ0aWVzKW8rPVwibWluem9vbVwiPT09YT8nICBtYXh6b29tPVwiJytlLlpvb20ucmFuZ2VzW3QucHJvcGVydGllc1thXV0rJ1wiXFxuJzpcIm1heHpvb21cIj09PWE/JyAgbWluem9vbT1cIicrZS5ab29tLnJhbmdlc1t0LnByb3BlcnRpZXNbYV0rMV0rJ1wiXFxuJzpcIiAgXCIrYSsnPVwiJyt0LnByb3BlcnRpZXNbYV0rJ1wiXFxuJztyZXR1cm4nPExheWVyIG5hbWU9XCInK3QubmFtZSsnXCJcXG4nK28rKFwidW5kZWZpbmVkXCI9PXR5cGVvZiB0LnN0YXR1cz9cIlwiOicgIHN0YXR1cz1cIicrdC5zdGF0dXMrJ1wiXFxuJykrKFwidW5kZWZpbmVkXCI9PXR5cGVvZiB0LnNycz9cIlwiOicgIHNycz1cIicrdC5zcnMrJ1wiJykrXCI+XFxuICAgIFwiK24ucmV2ZXJzZSgpLm1hcChmdW5jdGlvbihlKXtyZXR1cm5cIjxTdHlsZU5hbWU+XCIrZStcIjwvU3R5bGVOYW1lPlwifSkuam9pbihcIlxcbiAgICBcIikrKHIubGVuZ3RoP1wiXFxuICAgIDxEYXRhc291cmNlPlxcbiAgICAgICBcIityLmpvaW4oXCJcXG4gICAgICAgXCIpK1wiXFxuICAgIDwvRGF0YXNvdXJjZT5cXG5cIjpcIlwiKStcIiAgPC9MYXllcj5cXG5cIn19KGUoXCIuLi90cmVlXCIpKX0se1wiLi4vdHJlZVwiOjl9XSwyNjpbZnVuY3Rpb24oZSl7IWZ1bmN0aW9uKGUpe2UuTGl0ZXJhbD1mdW5jdGlvbihlKXt0aGlzLnZhbHVlPWV8fFwiXCIsdGhpcy5pcz1cImZpZWxkXCJ9LGUuTGl0ZXJhbC5wcm90b3R5cGU9e3RvU3RyaW5nOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudmFsdWV9LGV2OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXN9fX0oZShcIi4uL3RyZWVcIikpfSx7XCIuLi90cmVlXCI6OX1dLDI3OltmdW5jdGlvbihlKXshZnVuY3Rpb24oZSl7ZS5PcGVyYXRpb249ZnVuY3Rpb24oZSx0LG4pe3RoaXMub3A9ZS50cmltKCksdGhpcy5vcGVyYW5kcz10LHRoaXMuaW5kZXg9bn0sZS5PcGVyYXRpb24ucHJvdG90eXBlLmlzPVwib3BlcmF0aW9uXCIsZS5PcGVyYXRpb24ucHJvdG90eXBlLmV2PWZ1bmN0aW9uKHQpe3ZhciBuLHI9dGhpcy5vcGVyYW5kc1swXS5ldih0KSxpPXRoaXMub3BlcmFuZHNbMV0uZXYodCk7cmV0dXJuXCJ1bmRlZmluZWRcIj09PXIuaXN8fFwidW5kZWZpbmVkXCI9PT1pLmlzP3tpczpcInVuZGVmaW5lZFwiLHZhbHVlOlwidW5kZWZpbmVkXCJ9OihyIGluc3RhbmNlb2YgZS5EaW1lbnNpb24mJmkgaW5zdGFuY2VvZiBlLkNvbG9yJiYoXCIqXCI9PT10aGlzLm9wfHxcIitcIj09PXRoaXMub3A/KG49aSxpPXIscj1uKTp0LmVycm9yKHtuYW1lOlwiT3BlcmF0aW9uRXJyb3JcIixtZXNzYWdlOlwiQ2FuJ3Qgc3Vic3RyYWN0IG9yIGRpdmlkZSBhIGNvbG9yIGZyb20gYSBudW1iZXJcIixpbmRleDp0aGlzLmluZGV4fSkpLHIgaW5zdGFuY2VvZiBlLlF1b3RlZCYmaSBpbnN0YW5jZW9mIGUuUXVvdGVkJiZcIitcIiE9PXRoaXMub3A/KHQuZXJyb3Ioe21lc3NhZ2U6XCJDYW4ndCBzdWJ0cmFjdCwgZGl2aWRlLCBvciBtdWx0aXBseSBzdHJpbmdzLlwiLGluZGV4OnRoaXMuaW5kZXgsdHlwZTpcInJ1bnRpbWVcIixmaWxlbmFtZTp0aGlzLmZpbGVuYW1lfSkse2lzOlwidW5kZWZpbmVkXCIsdmFsdWU6XCJ1bmRlZmluZWRcIn0pOnIgaW5zdGFuY2VvZiBlLkZpZWxkfHxpIGluc3RhbmNlb2YgZS5GaWVsZHx8ciBpbnN0YW5jZW9mIGUuTGl0ZXJhbHx8aSBpbnN0YW5jZW9mIGUuTGl0ZXJhbD9cImNvbG9yXCI9PT1yLmlzfHxcImNvbG9yXCI9PT1pLmlzPyh0LmVycm9yKHttZXNzYWdlOlwiQ2FuJ3Qgc3VidHJhY3QsIGRpdmlkZSwgb3IgbXVsdGlwbHkgY29sb3JzIGluIGV4cHJlc3Npb25zLlwiLGluZGV4OnRoaXMuaW5kZXgsdHlwZTpcInJ1bnRpbWVcIixmaWxlbmFtZTp0aGlzLmZpbGVuYW1lfSkse2lzOlwidW5kZWZpbmVkXCIsdmFsdWU6XCJ1bmRlZmluZWRcIn0pOm5ldyBlLkxpdGVyYWwoci5ldih0KS50b1N0cmluZyghMCkrdGhpcy5vcCtpLmV2KHQpLnRvU3RyaW5nKCEwKSk6dm9pZCAwPT09ci5vcGVyYXRlPyh0LmVycm9yKHttZXNzYWdlOlwiQ2Fubm90IGRvIG1hdGggd2l0aCB0eXBlIFwiK3IuaXMrXCIuXCIsaW5kZXg6dGhpcy5pbmRleCx0eXBlOlwicnVudGltZVwiLGZpbGVuYW1lOnRoaXMuZmlsZW5hbWV9KSx7aXM6XCJ1bmRlZmluZWRcIix2YWx1ZTpcInVuZGVmaW5lZFwifSk6ci5vcGVyYXRlKHQsdGhpcy5vcCxpKSl9LGUub3BlcmF0ZT1mdW5jdGlvbihlLHQsbil7c3dpdGNoKGUpe2Nhc2VcIitcIjpyZXR1cm4gdCtuO2Nhc2VcIi1cIjpyZXR1cm4gdC1uO2Nhc2VcIipcIjpyZXR1cm4gdCpuO2Nhc2VcIiVcIjpyZXR1cm4gdCVuO2Nhc2VcIi9cIjpyZXR1cm4gdC9ufX19KGUoXCIuLi90cmVlXCIpKX0se1wiLi4vdHJlZVwiOjl9XSwyODpbZnVuY3Rpb24oZSl7IWZ1bmN0aW9uKGUpe2UuUXVvdGVkPWZ1bmN0aW9uKGUpe3RoaXMudmFsdWU9ZXx8XCJcIn0sZS5RdW90ZWQucHJvdG90eXBlPXtpczpcInN0cmluZ1wiLHRvU3RyaW5nOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMudmFsdWUucmVwbGFjZSgvJi9nLFwiJmFtcDtcIiksbj10LnJlcGxhY2UoL1xcJy9nLFwiXFxcXCdcIikucmVwbGFjZSgvXFxcIi9nLFwiJnF1b3Q7XCIpLnJlcGxhY2UoLzwvZyxcIiZsdDtcIikucmVwbGFjZSgvXFw+L2csXCImZ3Q7XCIpO3JldHVybiBlPT09ITA/XCInXCIrbitcIidcIjp0fSxldjpmdW5jdGlvbigpe3JldHVybiB0aGlzfSxvcGVyYXRlOmZ1bmN0aW9uKHQsbixyKXtyZXR1cm4gbmV3IGUuUXVvdGVkKGUub3BlcmF0ZShuLHRoaXMudG9TdHJpbmcoKSxyLnRvU3RyaW5nKHRoaXMuY29udGFpbnNfZmllbGQpKSl9fX0oZShcIi4uL3RyZWVcIikpfSx7XCIuLi90cmVlXCI6OX1dLDI5OltmdW5jdGlvbihlKXsoZnVuY3Rpb24odCl7IWZ1bmN0aW9uKG4pe2Z1bmN0aW9uIHIoZSl7dmFyIHQ9e307Zm9yKHZhciBuIGluIGUuc3ltYm9saXplcnMpZm9yKHZhciByIGluIGUuc3ltYm9saXplcnNbbl0pZS5zeW1ib2xpemVyc1tuXVtyXS5oYXNPd25Qcm9wZXJ0eShcImNzc1wiKSYmKHRbZS5zeW1ib2xpemVyc1tuXVtyXS5jc3NdPVtlLnN5bWJvbGl6ZXJzW25dW3JdLG4scl0pO3JldHVybiB0fWZ1bmN0aW9uIGkoZSl7dmFyIHQ9e307Zm9yKHZhciBuIGluIGUuc3ltYm9saXplcnMpZm9yKHZhciByIGluIGUuc3ltYm9saXplcnNbbl0paWYoXCJmdW5jdGlvbnNcIj09PWUuc3ltYm9saXplcnNbbl1bcl0udHlwZSlmb3IodmFyIGk9MDtpPGUuc3ltYm9saXplcnNbbl1bcl0uZnVuY3Rpb25zLmxlbmd0aDtpKyspe3ZhciBvPWUuc3ltYm9saXplcnNbbl1bcl0uZnVuY3Rpb25zW2ldO3Rbb1swXV09b1sxXX1yZXR1cm4gdH1mdW5jdGlvbiBvKGUpe3ZhciB0PXt9O2Zvcih2YXIgbiBpbiBlLnN5bWJvbGl6ZXJzKXt0W25dPVtdO2Zvcih2YXIgciBpbiBlLnN5bWJvbGl6ZXJzW25dKWUuc3ltYm9saXplcnNbbl1bcl0ucmVxdWlyZWQmJnRbbl0ucHVzaChlLnN5bWJvbGl6ZXJzW25dW3JdLmNzcyl9cmV0dXJuIHR9ZnVuY3Rpb24gYShlLHQpe2lmKFwic3RyaW5nXCI9PT1lLnZhbHVlWzBdLmlzKXJldHVybiEwO2Zvcih2YXIgbiBpbiBlLnZhbHVlKWZvcih2YXIgciBpbiBlLnZhbHVlW25dLnZhbHVlKXtpZihcImNhbGxcIiE9PWUudmFsdWVbbl0udmFsdWVbcl0uaXMpcmV0dXJuITE7dmFyIGk9bC5maW5kKHUuc2VsZWN0b3IodCkuZnVuY3Rpb25zLGZ1bmN0aW9uKHQpe3JldHVybiB0WzBdPT1lLnZhbHVlW25dLnZhbHVlW3JdLm5hbWV9KTtpZighKGkmJi0xPT1pWzFdfHxpJiZpWzFdPT09ZS52YWx1ZVtuXS52YWx1ZVtyXS5hcmdzLmxlbmd0aCkpcmV0dXJuITF9cmV0dXJuITB9ZnVuY3Rpb24gcyhlLHQpe3JldHVyblwib2JqZWN0XCI9PXR5cGVvZiB1LnNlbGVjdG9yKHQpLnR5cGU/LTEhPT11LnNlbGVjdG9yKHQpLnR5cGUuaW5kZXhPZihlLnZhbHVlWzBdLnZhbHVlKTpcInN0cmluZ1wiPT09dS5zZWxlY3Rvcih0KS50eXBlfXZhciBsPXQuX3x8ZShcInVuZGVyc2NvcmVcIiksdT17fTt1LnNldERhdGE9ZnVuY3Rpb24oZSl7dS5kYXRhPWUsdS5zZWxlY3Rvcl9jYWNoZT1yKGUpLHUubWFwbmlrRnVuY3Rpb25zPWkoZSksdS5tYXBuaWtGdW5jdGlvbnMubWF0cml4PVs2XSx1Lm1hcG5pa0Z1bmN0aW9ucy50cmFuc2xhdGU9WzEsMl0sdS5tYXBuaWtGdW5jdGlvbnMuc2NhbGU9WzEsMl0sdS5tYXBuaWtGdW5jdGlvbnMucm90YXRlPVsxLDNdLHUubWFwbmlrRnVuY3Rpb25zLnNrZXdYPVsxXSx1Lm1hcG5pa0Z1bmN0aW9ucy5za2V3WT1bMV0sdS5yZXF1aXJlZF9jYWNoZT1vKGUpfSx1LnNldFZlcnNpb249ZnVuY3Rpb24odCl7dmFyIG49ZShcIm1hcG5pay1yZWZlcmVuY2VcIik7cmV0dXJuIG4udmVyc2lvbi5oYXNPd25Qcm9wZXJ0eSh0KT8odS5zZXREYXRhKG4udmVyc2lvblt0XSksITApOiExfSx1LnNlbGVjdG9yRGF0YT1mdW5jdGlvbihlLHQpe3JldHVybiB1LnNlbGVjdG9yX2NhY2hlW2VdP3Uuc2VsZWN0b3JfY2FjaGVbZV1bdF06dm9pZCAwfSx1LnZhbGlkU2VsZWN0b3I9ZnVuY3Rpb24oZSl7cmV0dXJuISF1LnNlbGVjdG9yX2NhY2hlW2VdfSx1LnNlbGVjdG9yTmFtZT1mdW5jdGlvbihlKXtyZXR1cm4gdS5zZWxlY3RvckRhdGEoZSwyKX0sdS5zZWxlY3Rvcj1mdW5jdGlvbihlKXtyZXR1cm4gdS5zZWxlY3RvckRhdGEoZSwwKX0sdS5zeW1ib2xpemVyPWZ1bmN0aW9uKGUpe3JldHVybiB1LnNlbGVjdG9yRGF0YShlLDEpfSx1LnJlcXVpcmVkUHJvcGVydGllcz1mdW5jdGlvbihlLHQpe3ZhciBuPXUucmVxdWlyZWRfY2FjaGVbZV07Zm9yKHZhciByIGluIG4paWYoIShuW3JdaW4gdCkpcmV0dXJuXCJQcm9wZXJ0eSBcIituW3JdK1wiIHJlcXVpcmVkIGZvciBkZWZpbmluZyBcIitlK1wiIHN0eWxlcy5cIn0sdS5fdmFsaWRhdGVWYWx1ZT17Zm9udDpmdW5jdGlvbihlLHQpe3JldHVybiBlLnZhbGlkYXRpb25fZGF0YSYmZS52YWxpZGF0aW9uX2RhdGEuZm9udHM/LTEhPWUudmFsaWRhdGlvbl9kYXRhLmZvbnRzLmluZGV4T2YodCk6ITB9fSx1LmlzRm9udD1mdW5jdGlvbihlKXtyZXR1cm5cImZvbnRcIj09dS5zZWxlY3RvcihlKS52YWxpZGF0ZX0sdS5lZGl0RGlzdGFuY2U9ZnVuY3Rpb24oZSx0KXtpZigwPT09ZS5sZW5ndGgpcmV0dXJuIHQubGVuZ3RoO2lmKDA9PT10Lmxlbmd0aClyZXR1cm4gZS5sZW5ndGg7Zm9yKHZhciBuPVtdLHI9MDtyPD10Lmxlbmd0aDtyKyspbltyXT1bcl07Zm9yKHZhciBpPTA7aTw9ZS5sZW5ndGg7aSsrKW5bMF1baV09aTtmb3Iocj0xO3I8PXQubGVuZ3RoO3IrKylmb3IoaT0xO2k8PWUubGVuZ3RoO2krKyluW3JdW2ldPXQuY2hhckF0KHItMSk9PWUuY2hhckF0KGktMSk/bltyLTFdW2ktMV06TWF0aC5taW4obltyLTFdW2ktMV0rMSxNYXRoLm1pbihuW3JdW2ktMV0rMSxuW3ItMV1baV0rMSkpO3JldHVybiBuW3QubGVuZ3RoXVtlLmxlbmd0aF19LHUudmFsaWRWYWx1ZT1mdW5jdGlvbihlLHQsbil7dmFyIHI7aWYodS5zZWxlY3Rvcih0KSl7aWYoXCJrZXl3b3JkXCI9PW4udmFsdWVbMF0uaXMpcmV0dXJuIHMobix0KTtpZihcInVuZGVmaW5lZFwiPT1uLnZhbHVlWzBdLmlzKXJldHVybiEwO2lmKFwibnVtYmVyc1wiPT11LnNlbGVjdG9yKHQpLnR5cGUpe2ZvcihyIGluIG4udmFsdWUpaWYoXCJmbG9hdFwiIT09bi52YWx1ZVtyXS5pcylyZXR1cm4hMTtyZXR1cm4hMH1pZihcInRhZ3NcIj09dS5zZWxlY3Rvcih0KS50eXBlKXtpZighbi52YWx1ZSlyZXR1cm4hMTtpZighbi52YWx1ZVswXS52YWx1ZSlyZXR1cm5cInRhZ1wiPT09bi52YWx1ZVswXS5pcztmb3Iocj0wO3I8bi52YWx1ZVswXS52YWx1ZS5sZW5ndGg7cisrKWlmKFwidGFnXCIhPT1uLnZhbHVlWzBdLnZhbHVlW3JdLmlzKXJldHVybiExO3JldHVybiEwfWlmKFwiZnVuY3Rpb25zXCI9PXUuc2VsZWN0b3IodCkudHlwZSlyZXR1cm4gYShuLHQpO2lmKFwidW5zaWduZWRcIj09PXUuc2VsZWN0b3IodCkudHlwZSlyZXR1cm5cImZsb2F0XCI9PT1uLnZhbHVlWzBdLmlzPyhuLnZhbHVlWzBdLnJvdW5kKCksITApOiExO2lmKHUuc2VsZWN0b3IodCkuZXhwcmVzc2lvbilyZXR1cm4hMDtpZih1LnNlbGVjdG9yKHQpLnZhbGlkYXRlKXt2YXIgaT0hMTtmb3Iocj0wO3I8bi52YWx1ZS5sZW5ndGg7cisrKWlmKHUuc2VsZWN0b3IodCkudHlwZT09bi52YWx1ZVtyXS5pcyYmdS5fdmFsaWRhdGVWYWx1ZVt1LnNlbGVjdG9yKHQpLnZhbGlkYXRlXShlLG4udmFsdWVbcl0udmFsdWUpKXJldHVybiEwO3JldHVybiBpfXJldHVybiB1LnNlbGVjdG9yKHQpLnR5cGU9PW4udmFsdWVbMF0uaXN9cmV0dXJuITF9LG4uUmVmZXJlbmNlPXV9KGUoXCIuLi90cmVlXCIpKX0pLmNhbGwodGhpcyxcInVuZGVmaW5lZFwiIT10eXBlb2YgZ2xvYmFsP2dsb2JhbDpcInVuZGVmaW5lZFwiIT10eXBlb2Ygc2VsZj9zZWxmOlwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3c/d2luZG93Ont9KX0se1wiLi4vdHJlZVwiOjksXCJtYXBuaWstcmVmZXJlbmNlXCI6MzksdW5kZXJzY29yZTo0Mn1dLDMwOltmdW5jdGlvbihlKXshZnVuY3Rpb24oZSl7ZnVuY3Rpb24gdCh0KXtyZXR1cm4gT2JqZWN0LmtleXMoZS5SZWZlcmVuY2Uuc2VsZWN0b3JfY2FjaGUpLm1hcChmdW5jdGlvbihuKXtyZXR1cm5bbixlLlJlZmVyZW5jZS5lZGl0RGlzdGFuY2UodCxuKV19KS5zb3J0KGZ1bmN0aW9uKGUsdCl7cmV0dXJuIGVbMV0tdFsxXX0pfWUuUnVsZT1mdW5jdGlvbih0LG4scixpKXt2YXIgbz10LnNwbGl0KFwiL1wiKTt0aGlzLm5hbWU9by5wb3AoKSx0aGlzLmluc3RhbmNlPW8ubGVuZ3RoP29bMF06XCJfX2RlZmF1bHRfX1wiLHRoaXMudmFsdWU9biBpbnN0YW5jZW9mIGUuVmFsdWU/bjpuZXcgZS5WYWx1ZShbbl0pLHRoaXMuaW5kZXg9cix0aGlzLnN5bWJvbGl6ZXI9ZS5SZWZlcmVuY2Uuc3ltYm9saXplcih0aGlzLm5hbWUpLHRoaXMuZmlsZW5hbWU9aSx0aGlzLnZhcmlhYmxlPVwiQFwiPT09dC5jaGFyQXQoMCl9LGUuUnVsZS5wcm90b3R5cGUuaXM9XCJydWxlXCIsZS5SdWxlLnByb3RvdHlwZS5jbG9uZT1mdW5jdGlvbigpe3ZhciB0PU9iamVjdC5jcmVhdGUoZS5SdWxlLnByb3RvdHlwZSk7cmV0dXJuIHQubmFtZT10aGlzLm5hbWUsdC52YWx1ZT10aGlzLnZhbHVlLHQuaW5kZXg9dGhpcy5pbmRleCx0Lmluc3RhbmNlPXRoaXMuaW5zdGFuY2UsdC5zeW1ib2xpemVyPXRoaXMuc3ltYm9saXplcix0LmZpbGVuYW1lPXRoaXMuZmlsZW5hbWUsdC52YXJpYWJsZT10aGlzLnZhcmlhYmxlLHR9LGUuUnVsZS5wcm90b3R5cGUudXBkYXRlSUQ9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5pZD10aGlzLnpvb20rXCIjXCIrdGhpcy5pbnN0YW5jZStcIiNcIit0aGlzLm5hbWV9LGUuUnVsZS5wcm90b3R5cGUudG9TdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm5cIltcIitlLlpvb20udG9TdHJpbmcodGhpcy56b29tKStcIl0gXCIrdGhpcy5uYW1lK1wiOiBcIit0aGlzLnZhbHVlfSxlLlJ1bGUucHJvdG90eXBlLnRvWE1MPWZ1bmN0aW9uKG4scixpKXtpZighZS5SZWZlcmVuY2UudmFsaWRTZWxlY3Rvcih0aGlzLm5hbWUpKXt2YXIgbz10KHRoaXMubmFtZSksYT1cIlwiO3JldHVybiBvWzBdWzFdPDMmJihhPVwiLiBEaWQgeW91IG1lYW4gXCIrb1swXVswXStcIj9cIiksbi5lcnJvcih7bWVzc2FnZTpcIlVucmVjb2duaXplZCBydWxlOiBcIit0aGlzLm5hbWUrYSxpbmRleDp0aGlzLmluZGV4LHR5cGU6XCJzeW50YXhcIixmaWxlbmFtZTp0aGlzLmZpbGVuYW1lfSl9aWYodGhpcy52YWx1ZSBpbnN0YW5jZW9mIGUuVmFsdWUmJiFlLlJlZmVyZW5jZS52YWxpZFZhbHVlKG4sdGhpcy5uYW1lLHRoaXMudmFsdWUpKXtpZihlLlJlZmVyZW5jZS5zZWxlY3Rvcih0aGlzLm5hbWUpKXt2YXIgcztyZXR1cm4gcz1lLlJlZmVyZW5jZS5zZWxlY3Rvcih0aGlzLm5hbWUpLnZhbGlkYXRlP2UuUmVmZXJlbmNlLnNlbGVjdG9yKHRoaXMubmFtZSkudmFsaWRhdGU6XCJvYmplY3RcIj09dHlwZW9mIGUuUmVmZXJlbmNlLnNlbGVjdG9yKHRoaXMubmFtZSkudHlwZT9cImtleXdvcmQgKG9wdGlvbnM6IFwiK2UuUmVmZXJlbmNlLnNlbGVjdG9yKHRoaXMubmFtZSkudHlwZS5qb2luKFwiLCBcIikrXCIpXCI6ZS5SZWZlcmVuY2Uuc2VsZWN0b3IodGhpcy5uYW1lKS50eXBlLG4uZXJyb3Ioe21lc3NhZ2U6XCJJbnZhbGlkIHZhbHVlIGZvciBcIit0aGlzLm5hbWUrXCIsIHRoZSB0eXBlIFwiK3MrXCIgaXMgZXhwZWN0ZWQuIFwiK3RoaXMudmFsdWUrXCIgKG9mIHR5cGUgXCIrdGhpcy52YWx1ZS52YWx1ZVswXS5pcytcIikgIHdhcyBnaXZlbi5cIixpbmRleDp0aGlzLmluZGV4LHR5cGU6XCJzeW50YXhcIixmaWxlbmFtZTp0aGlzLmZpbGVuYW1lfSl9cmV0dXJuIG4uZXJyb3Ioe21lc3NhZ2U6XCJVbnJlY29nbml6ZWQgcHJvcGVydHk6IFwiK3RoaXMubmFtZSxpbmRleDp0aGlzLmluZGV4LHR5cGU6XCJzeW50YXhcIixmaWxlbmFtZTp0aGlzLmZpbGVuYW1lfSl9aWYodGhpcy52YXJpYWJsZSlyZXR1cm5cIlwiO2lmKGUuUmVmZXJlbmNlLmlzRm9udCh0aGlzLm5hbWUpJiZ0aGlzLnZhbHVlLnZhbHVlLmxlbmd0aD4xKXt2YXIgbD1lLl9nZXRGb250U2V0KG4sdGhpcy52YWx1ZS52YWx1ZSk7cmV0dXJuJ2ZvbnRzZXQtbmFtZT1cIicrbC5uYW1lKydcIid9cmV0dXJuIHI/dGhpcy52YWx1ZS50b1N0cmluZyhuLHRoaXMubmFtZSxpKTplLlJlZmVyZW5jZS5zZWxlY3Rvck5hbWUodGhpcy5uYW1lKSsnPVwiJyt0aGlzLnZhbHVlLnRvU3RyaW5nKG4sdGhpcy5uYW1lKSsnXCInfSxlLlJ1bGUucHJvdG90eXBlLmV2PWZ1bmN0aW9uKHQpe3JldHVybiBuZXcgZS5SdWxlKHRoaXMubmFtZSx0aGlzLnZhbHVlLmV2KHQpLHRoaXMuaW5kZXgsdGhpcy5maWxlbmFtZSl9fShlKFwiLi4vdHJlZVwiKSl9LHtcIi4uL3RyZWVcIjo5fV0sMzE6W2Z1bmN0aW9uKGUpeyFmdW5jdGlvbihlKXtlLlJ1bGVzZXQ9ZnVuY3Rpb24oZSx0KXt0aGlzLnNlbGVjdG9ycz1lLHRoaXMucnVsZXM9dCx0aGlzLl9sb29rdXBzPXt9fSxlLlJ1bGVzZXQucHJvdG90eXBlPXtpczpcInJ1bGVzZXRcIixldjpmdW5jdGlvbih0KXt2YXIgbixyPW5ldyBlLlJ1bGVzZXQodGhpcy5zZWxlY3RvcnMsdGhpcy5ydWxlcy5zbGljZSgwKSk7Zm9yKHIucm9vdD10aGlzLnJvb3QsdC5mcmFtZXMudW5zaGlmdChyKSxuPTAscnVsZTtuPHIucnVsZXMubGVuZ3RoO24rKylydWxlPXIucnVsZXNbbl0sci5ydWxlc1tuXT1ydWxlLmV2P3J1bGUuZXYodCk6cnVsZTtyZXR1cm4gdC5mcmFtZXMuc2hpZnQoKSxyfSxtYXRjaDpmdW5jdGlvbihlKXtyZXR1cm4hZXx8MD09PWUubGVuZ3RofSx2YXJpYWJsZXM6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fdmFyaWFibGVzP3RoaXMuX3ZhcmlhYmxlczp0aGlzLl92YXJpYWJsZXM9dGhpcy5ydWxlcy5yZWR1Y2UoZnVuY3Rpb24odCxuKXtyZXR1cm4gbiBpbnN0YW5jZW9mIGUuUnVsZSYmbi52YXJpYWJsZT09PSEwJiYodFtuLm5hbWVdPW4pLHR9LHt9KX0sdmFyaWFibGU6ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMudmFyaWFibGVzKClbZV19LHJ1bGVzZXRzOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3J1bGVzZXRzP3RoaXMuX3J1bGVzZXRzOnRoaXMuX3J1bGVzZXRzPXRoaXMucnVsZXMuZmlsdGVyKGZ1bmN0aW9uKHQpe3JldHVybiB0IGluc3RhbmNlb2YgZS5SdWxlc2V0fSl9LGZpbmQ6ZnVuY3Rpb24odCxuKXtuPW58fHRoaXM7dmFyIHIsaT1bXSxvPXQudG9TdHJpbmcoKTtyZXR1cm4gbyBpbiB0aGlzLl9sb29rdXBzP3RoaXMuX2xvb2t1cHNbb106KHRoaXMucnVsZXNldHMoKS5mb3JFYWNoKGZ1bmN0aW9uKG8pe2lmKG8hPT1uKWZvcih2YXIgYT0wO2E8by5zZWxlY3RvcnMubGVuZ3RoO2ErKylpZihyPXQubWF0Y2goby5zZWxlY3RvcnNbYV0pKXt0LmVsZW1lbnRzLmxlbmd0aD4xP0FycmF5LnByb3RvdHlwZS5wdXNoLmFwcGx5KGksby5maW5kKG5ldyBlLlNlbGVjdG9yKG51bGwsbnVsbCxudWxsLHQuZWxlbWVudHMuc2xpY2UoMSkpLG4pKTppLnB1c2gobyk7YnJlYWt9fSksdGhpcy5fbG9va3Vwc1tvXT1pKX0sZXZab29tczpmdW5jdGlvbih0KXtmb3IodmFyIG49MDtuPHRoaXMuc2VsZWN0b3JzLmxlbmd0aDtuKyspe2Zvcih2YXIgcj1lLlpvb20uYWxsLGk9MDtpPHRoaXMuc2VsZWN0b3JzW25dLnpvb20ubGVuZ3RoO2krKylyJj10aGlzLnNlbGVjdG9yc1tuXS56b29tW2ldLmV2KHQpLnpvb207dGhpcy5zZWxlY3RvcnNbbl0uem9vbT1yfX0sZmxhdHRlbjpmdW5jdGlvbih0LG4scil7dmFyIGksbyxhPVtdO2ZvcigwPT09dGhpcy5zZWxlY3RvcnMubGVuZ3RoJiYoci5mcmFtZXM9ci5mcmFtZXMuY29uY2F0KHRoaXMucnVsZXMpKSx0aGlzLmV2Wm9vbXMociksaT0wO2k8dGhpcy5zZWxlY3RvcnMubGVuZ3RoO2krKyl7dmFyIHM9dGhpcy5zZWxlY3RvcnNbaV07aWYocy5maWx0ZXJzKWlmKG4ubGVuZ3RoKWZvcihvPTA7bzxuLmxlbmd0aDtvKyspe3ZhciBsPW5bb10sdT1sLmZpbHRlcnMuY2xvbmVXaXRoKHMuZmlsdGVycyk7aWYobnVsbD09PXUpe2lmKGwuem9vbT09PShsLnpvb20mcy56b29tKSYmbC5mcmFtZV9vZmZzZXQ9PT1zLmZyYW1lX29mZnNldCYmbC5hdHRhY2htZW50PT09cy5hdHRhY2htZW50JiZsLmVsZW1lbnRzLmpvaW4oKT09PXMuZWxlbWVudHMuam9pbigpKXthLnB1c2gobCk7Y29udGludWV9dT1sLmZpbHRlcnN9ZWxzZSBpZighdSljb250aW51ZTt2YXIgYz1PYmplY3QuY3JlYXRlKGUuU2VsZWN0b3IucHJvdG90eXBlKTtjLmZpbHRlcnM9dSxjLnpvb209bC56b29tJnMuem9vbSxjLmZyYW1lX29mZnNldD1zLmZyYW1lX29mZnNldCxjLmVsZW1lbnRzPWwuZWxlbWVudHMuY29uY2F0KHMuZWxlbWVudHMpLGMuYXR0YWNobWVudD1sLmF0dGFjaG1lbnQmJnMuYXR0YWNobWVudD9sLmF0dGFjaG1lbnQrXCIvXCIrcy5hdHRhY2htZW50OnMuYXR0YWNobWVudHx8bC5hdHRhY2htZW50LGMuY29uZGl0aW9ucz1sLmNvbmRpdGlvbnMrcy5jb25kaXRpb25zLGMuaW5kZXg9cy5pbmRleCxhLnB1c2goYyl9ZWxzZSBhLnB1c2gocyl9dmFyIGY9W107Zm9yKGk9MDtpPHRoaXMucnVsZXMubGVuZ3RoO2krKyl7dmFyIGQ9dGhpcy5ydWxlc1tpXTtkIGluc3RhbmNlb2YgZS5SdWxlc2V0P2QuZmxhdHRlbih0LGEscik6ZCBpbnN0YW5jZW9mIGUuUnVsZT9mLnB1c2goZCk6ZCBpbnN0YW5jZW9mIGUuSW52YWxpZCYmci5lcnJvcihkKX12YXIgaD1mLmxlbmd0aD9mWzBdLmluZGV4OiExO2ZvcihpPTA7aTxhLmxlbmd0aDtpKyspaCE9PSExJiYoYVtpXS5pbmRleD1oKSx0LnB1c2gobmV3IGUuRGVmaW5pdGlvbihhW2ldLGYuc2xpY2UoKSkpO3JldHVybiB0fX19KGUoXCIuLi90cmVlXCIpKX0se1wiLi4vdHJlZVwiOjl9XSwzMjpbZnVuY3Rpb24oZSl7IWZ1bmN0aW9uKGUpe2UuU2VsZWN0b3I9ZnVuY3Rpb24odCxuLHIsaSxvLGEscyl7dGhpcy5lbGVtZW50cz1pfHxbXSx0aGlzLmF0dGFjaG1lbnQ9byx0aGlzLmZpbHRlcnM9dHx8e30sdGhpcy5mcmFtZV9vZmZzZXQ9cix0aGlzLnpvb209XCJ1bmRlZmluZWRcIiE9dHlwZW9mIG4/bjplLlpvb20uYWxsLHRoaXMuY29uZGl0aW9ucz1hLHRoaXMuaW5kZXg9c30sZS5TZWxlY3Rvci5wcm90b3R5cGUuc3BlY2lmaWNpdHk9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5lbGVtZW50cy5yZWR1Y2UoZnVuY3Rpb24oZSx0KXt2YXIgbj10LnNwZWNpZmljaXR5KCk7cmV0dXJuIGVbMF0rPW5bMF0sZVsxXSs9blsxXSxlfSxbMCwwLHRoaXMuY29uZGl0aW9ucyx0aGlzLmluZGV4XSl9fShlKFwiLi4vdHJlZVwiKSl9LHtcIi4uL3RyZWVcIjo5fV0sMzM6W2Z1bmN0aW9uKGUpeyhmdW5jdGlvbih0KXshZnVuY3Rpb24obil7dmFyIHI9dC5ffHxlKFwidW5kZXJzY29yZVwiKTtuLlN0eWxlWE1MPWZ1bmN0aW9uKGUsdCxuLGkpe2Zvcih2YXIgbz17fSxhPVtdLHM9W10sbD1bXSx1PVtdLGM9W10sZj0wO2Y8bi5sZW5ndGg7ZisrKWZvcih2YXIgZD0wO2Q8bltmXS5ydWxlcy5sZW5ndGg7ZCsrKVwiaW1hZ2UtZmlsdGVyc1wiPT09bltmXS5ydWxlc1tkXS5uYW1lJiZhLnB1c2gobltmXS5ydWxlc1tkXSksXCJpbWFnZS1maWx0ZXJzLWluZmxhdGVcIj09PW5bZl0ucnVsZXNbZF0ubmFtZSYmcy5wdXNoKG5bZl0ucnVsZXNbZF0pLFwiZGlyZWN0LWltYWdlLWZpbHRlcnNcIj09PW5bZl0ucnVsZXNbZF0ubmFtZSYmbC5wdXNoKG5bZl0ucnVsZXNbZF0pLFwiY29tcC1vcFwiPT09bltmXS5ydWxlc1tkXS5uYW1lJiZ1LnB1c2gobltmXS5ydWxlc1tkXSksXCJvcGFjaXR5XCI9PT1uW2ZdLnJ1bGVzW2RdLm5hbWUmJmMucHVzaChuW2ZdLnJ1bGVzW2RdKTt2YXIgaD1uLm1hcChmdW5jdGlvbihlKXtyZXR1cm4gZS50b1hNTChpLG8pfSkscD1cIlwiO2EubGVuZ3RoJiYocCs9JyBpbWFnZS1maWx0ZXJzPVwiJytyLmNoYWluKGEpLnVuaXEoZnVuY3Rpb24oZSl7cmV0dXJuIGUuaWR9KS5tYXAoZnVuY3Rpb24oZSl7cmV0dXJuIGUuZXYoaSkudG9YTUwoaSwhMCxcIixcIixcImltYWdlLWZpbHRlclwiKX0pLnZhbHVlKCkuam9pbihcIixcIikrJ1wiJykscy5sZW5ndGgmJihwKz0nIGltYWdlLWZpbHRlcnMtaW5mbGF0ZT1cIicrc1swXS52YWx1ZS5ldihpKS50b1N0cmluZygpKydcIicpLGwubGVuZ3RoJiYocCs9JyBkaXJlY3QtaW1hZ2UtZmlsdGVycz1cIicrci5jaGFpbihsKS51bmlxKGZ1bmN0aW9uKGUpe3JldHVybiBlLmlkfSkubWFwKGZ1bmN0aW9uKGUpe3JldHVybiBlLmV2KGkpLnRvWE1MKGksITAsXCIsXCIsXCJkaXJlY3QtaW1hZ2UtZmlsdGVyXCIpfSkudmFsdWUoKS5qb2luKFwiLFwiKSsnXCInKSx1Lmxlbmd0aCYmXCJzcmMtb3ZlclwiIT11WzBdLnZhbHVlLmV2KGkpLnZhbHVlJiYocCs9JyBjb21wLW9wPVwiJyt1WzBdLnZhbHVlLmV2KGkpLnRvU3RyaW5nKCkrJ1wiJyksYy5sZW5ndGgmJjEhPWNbMF0udmFsdWUuZXYoaSkudmFsdWUmJihwKz0nIG9wYWNpdHk9XCInK2NbMF0udmFsdWUuZXYoaSkudG9TdHJpbmcoKSsnXCInKTt2YXIgbT1oLmpvaW4oXCJcIik7cmV0dXJuIHB8fG0/JzxTdHlsZSBuYW1lPVwiJytlKydcIiBmaWx0ZXItbW9kZT1cImZpcnN0XCInK3ArXCI+XFxuXCIrbStcIjwvU3R5bGU+XCI6XCJcIn19KGUoXCIuLi90cmVlXCIpKX0pLmNhbGwodGhpcyxcInVuZGVmaW5lZFwiIT10eXBlb2YgZ2xvYmFsP2dsb2JhbDpcInVuZGVmaW5lZFwiIT10eXBlb2Ygc2VsZj9zZWxmOlwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3c/d2luZG93Ont9KX0se1wiLi4vdHJlZVwiOjksdW5kZXJzY29yZTo0Mn1dLDM0OltmdW5jdGlvbihlKXshZnVuY3Rpb24oZSl7ZS5VUkw9ZnVuY3Rpb24oZSx0KXt0aGlzLnZhbHVlPWUsdGhpcy5wYXRocz10fSxlLlVSTC5wcm90b3R5cGU9e2lzOlwidXJpXCIsdG9TdHJpbmc6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy52YWx1ZS50b1N0cmluZygpfSxldjpmdW5jdGlvbih0KXtyZXR1cm4gbmV3IGUuVVJMKHRoaXMudmFsdWUuZXYodCksdGhpcy5wYXRocyl9fX0oZShcIi4uL3RyZWVcIikpfSx7XCIuLi90cmVlXCI6OX1dLDM1OltmdW5jdGlvbihlKXshZnVuY3Rpb24oZSl7ZS5WYWx1ZT1mdW5jdGlvbihlKXt0aGlzLnZhbHVlPWV9LGUuVmFsdWUucHJvdG90eXBlPXtpczpcInZhbHVlXCIsZXY6ZnVuY3Rpb24odCl7cmV0dXJuIDE9PT10aGlzLnZhbHVlLmxlbmd0aD90aGlzLnZhbHVlWzBdLmV2KHQpOm5ldyBlLlZhbHVlKHRoaXMudmFsdWUubWFwKGZ1bmN0aW9uKGUpe3JldHVybiBlLmV2KHQpfSkpfSx0b1N0cmluZzpmdW5jdGlvbihlLHQsbixyKXtyZXR1cm4gdGhpcy52YWx1ZS5tYXAoZnVuY3Rpb24odCl7cmV0dXJuIHQudG9TdHJpbmcoZSxyKX0pLmpvaW4obnx8XCIsIFwiKX0sY2xvbmU6ZnVuY3Rpb24oKXt2YXIgdD1PYmplY3QuY3JlYXRlKGUuVmFsdWUucHJvdG90eXBlKTtyZXR1cm4gdC52YWx1ZT1BcnJheS5pc0FycmF5KHQpP3RoaXMudmFsdWUuc2xpY2UoKTp0aGlzLnZhbHVlLHQuaXM9dGhpcy5pcyx0fSx0b0pTOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMuZXYoZSksbj10LnRvU3RyaW5nKCk7cmV0dXJuXCJjb2xvclwiPT09dC5pc3x8XCJ1cmlcIj09PXQuaXN8fFwic3RyaW5nXCI9PT10LmlzfHxcImtleXdvcmRcIj09PXQuaXM/bj1cIidcIituK1wiJ1wiOlwiZmllbGRcIj09PXQuaXM/bj1uLnJlcGxhY2UoL1xcWyguKilcXF0vZyxcImRhdGFbJyQxJ11cIik6XCJjYWxsXCI9PT10LmlzJiYobj1KU09OLnN0cmluZ2lmeSh7bmFtZTp0Lm5hbWUsYXJnczp0LmFyZ3N9KSksXCJfdmFsdWUgPSBcIituK1wiO1wiXG59fX0oZShcIi4uL3RyZWVcIikpfSx7XCIuLi90cmVlXCI6OX1dLDM2OltmdW5jdGlvbihlKXshZnVuY3Rpb24oZSl7ZS5WYXJpYWJsZT1mdW5jdGlvbihlLHQsbil7dGhpcy5uYW1lPWUsdGhpcy5pbmRleD10LHRoaXMuZmlsZW5hbWU9bn0sZS5WYXJpYWJsZS5wcm90b3R5cGU9e2lzOlwidmFyaWFibGVcIix0b1N0cmluZzpmdW5jdGlvbigpe3JldHVybiB0aGlzLm5hbWV9LGV2OmZ1bmN0aW9uKGUpe3RoaXMubmFtZTtpZih0aGlzLl9jc3MpcmV0dXJuIHRoaXMuX2Nzczt2YXIgdD1lLmZyYW1lcy5maWx0ZXIoZnVuY3Rpb24oZSl7cmV0dXJuIGUubmFtZT09dGhpcy5uYW1lfS5iaW5kKHRoaXMpKTtyZXR1cm4gdC5sZW5ndGg/dFswXS52YWx1ZS5ldihlKTooZS5lcnJvcih7bWVzc2FnZTpcInZhcmlhYmxlIFwiK3RoaXMubmFtZStcIiBpcyB1bmRlZmluZWRcIixpbmRleDp0aGlzLmluZGV4LHR5cGU6XCJydW50aW1lXCIsZmlsZW5hbWU6dGhpcy5maWxlbmFtZX0pLHtpczpcInVuZGVmaW5lZFwiLHZhbHVlOlwidW5kZWZpbmVkXCJ9KX19fShlKFwiLi4vdHJlZVwiKSl9LHtcIi4uL3RyZWVcIjo5fV0sMzc6W2Z1bmN0aW9uKGUpe3ZhciB0PWUoXCIuLi90cmVlXCIpO3QuWm9vbT1mdW5jdGlvbihlLHQsbil7dGhpcy5vcD1lLHRoaXMudmFsdWU9dCx0aGlzLmluZGV4PW59LHQuWm9vbS5wcm90b3R5cGUuc2V0Wm9vbT1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy56b29tPWUsdGhpc30sdC5ab29tLnByb3RvdHlwZS5ldj1mdW5jdGlvbihlKXt2YXIgbj0wLHI9MS8wLGk9cGFyc2VJbnQodGhpcy52YWx1ZS5ldihlKS50b1N0cmluZygpLDEwKSxvPTA7c3dpdGNoKChpPnQuWm9vbS5tYXhab29tfHwwPmkpJiZlLmVycm9yKHttZXNzYWdlOlwiT25seSB6b29tIGxldmVscyBiZXR3ZWVuIDAgYW5kIFwiK3QuWm9vbS5tYXhab29tK1wiIHN1cHBvcnRlZC5cIixpbmRleDp0aGlzLmluZGV4fSksdGhpcy5vcCl7Y2FzZVwiPVwiOnJldHVybiB0aGlzLnpvb209MTw8aSx0aGlzO2Nhc2VcIj5cIjpuPWkrMTticmVhaztjYXNlXCI+PVwiOm49aTticmVhaztjYXNlXCI8XCI6cj1pLTE7YnJlYWs7Y2FzZVwiPD1cIjpyPWl9Zm9yKHZhciBhPTA7YTw9dC5ab29tLm1heFpvb207YSsrKWE+PW4mJnI+PWEmJihvfD0xPDxhKTtyZXR1cm4gdGhpcy56b29tPW8sdGhpc30sdC5ab29tLnByb3RvdHlwZS50b1N0cmluZz1mdW5jdGlvbigpe3JldHVybiB0aGlzLnpvb219LHQuWm9vbS5hbGw9ODM4ODYwNyx0Llpvb20ubWF4Wm9vbT0yMix0Llpvb20ucmFuZ2VzPXswOjFlOSwxOjVlOCwyOjJlOCwzOjFlOCw0OjVlNyw1OjI1ZTYsNjoxMjVlNSw3OjY1ZTUsODozZTYsOToxNWU1LDEwOjc1ZTQsMTE6NGU1LDEyOjJlNSwxMzoxZTUsMTQ6NWU0LDE1OjI1ZTMsMTY6MTI1MDAsMTc6NWUzLDE4OjI1MDAsMTk6MTUwMCwyMDo3NTAsMjE6NTAwLDIyOjI1MCwyMzoxMDB9LHQuWm9vbS5wcm90b3R5cGUudG9YTUw9ZnVuY3Rpb24oKXt2YXIgZT1bXTtpZih0aGlzLnpvb20hPXQuWm9vbS5hbGwpe2Zvcih2YXIgbj1udWxsLHI9bnVsbCxpPTA7aTw9dC5ab29tLm1heFpvb207aSsrKXRoaXMuem9vbSYxPDxpJiYobnVsbD09PW4mJihuPWkpLHI9aSk7bj4wJiZlLnB1c2goXCIgICAgPE1heFNjYWxlRGVub21pbmF0b3I+XCIrdC5ab29tLnJhbmdlc1tuXStcIjwvTWF4U2NhbGVEZW5vbWluYXRvcj5cXG5cIiksMjI+ciYmZS5wdXNoKFwiICAgIDxNaW5TY2FsZURlbm9taW5hdG9yPlwiK3QuWm9vbS5yYW5nZXNbcisxXStcIjwvTWluU2NhbGVEZW5vbWluYXRvcj5cXG5cIil9cmV0dXJuIGV9LHQuWm9vbS5wcm90b3R5cGUudG9TdHJpbmc9ZnVuY3Rpb24oKXtmb3IodmFyIGU9XCJcIixuPTA7bjw9dC5ab29tLm1heFpvb207bisrKWUrPXRoaXMuem9vbSYxPDxuP1wiWFwiOlwiLlwiO3JldHVybiBlfX0se1wiLi4vdHJlZVwiOjl9XSwzODpbZnVuY3Rpb24oZSx0KXt0LmV4cG9ydHM9e25hbWU6XCJjYXJ0b1wiLHZlcnNpb246XCIwLjE1LjEtY2RiMVwiLGRlc2NyaXB0aW9uOlwiQ2FydG9DU1MgU3R5bGVzaGVldCBDb21waWxlclwiLHVybDpcImh0dHBzOi8vZ2l0aHViLmNvbS9jYXJ0b2RiL2NhcnRvXCIscmVwb3NpdG9yeTp7dHlwZTpcImdpdFwiLHVybDpcImh0dHA6Ly9naXRodWIuY29tL2NhcnRvZGIvY2FydG8uZ2l0XCJ9LGF1dGhvcjp7bmFtZTpcIkNhcnRvREJcIix1cmw6XCJodHRwOi8vY2FydG9kYi5jb20vXCJ9LGtleXdvcmRzOltcIm1hcHNcIixcImNzc1wiLFwic3R5bGVzaGVldHNcIl0sY29udHJpYnV0b3JzOltcIlRvbSBNYWNXcmlnaHQgPG1hY3dyaWdodEBnbWFpbC5jb20+XCIsXCJLb25zdGFudGluIEvDpGZlclwiLFwiQWxleGlzIFNlbGxpZXIgPHNlbGZAY2xvdWRoZWFkLm5ldD5cIixcIlJhdWwgT2Nob2EgPHJvY2hvYUBjYXJ0b2RiLmNvbT5cIixcIkphdmkgU2FudGFuYSA8anNhbnRhbmFAY2FydG9kYi5jb20+XCJdLGxpY2Vuc2VzOlt7dHlwZTpcIkFwYWNoZVwifV0sYmluOntjYXJ0bzpcIi4vYmluL2NhcnRvXCJ9LG1hbjpcIi4vbWFuL2NhcnRvLjFcIixtYWluOlwiLi9saWIvY2FydG8vaW5kZXhcIixlbmdpbmVzOntub2RlOlwiPj0wLjQueFwifSxkZXBlbmRlbmNpZXM6e3VuZGVyc2NvcmU6XCIxLjguM1wiLFwibWFwbmlrLXJlZmVyZW5jZVwiOlwifjYuMC4yXCIsb3B0aW1pc3Q6XCJ+MC42LjBcIn0sZGV2RGVwZW5kZW5jaWVzOnttb2NoYTpcIjEuMTIueFwiLGpzaGludDpcIjAuMi54XCIsc2F4OlwiMC4xLnhcIixpc3RhbmJ1bDpcIn4wLjIuMTRcIixjb3ZlcmFsbHM6XCJ+Mi4xMC4xXCIsYnJvd3NlcmlmeTpcIn43LjAuMFwiLFwidWdsaWZ5LWpzXCI6XCIxLjMuM1wifSxzY3JpcHRzOntwcmV0ZXN0OlwibnBtIGluc3RhbGxcIix0ZXN0OlwibW9jaGEgLVIgc3BlY1wiLGNvdmVyYWdlOlwiaXN0YW5idWwgY292ZXIgLi9ub2RlX21vZHVsZXMvLmJpbi9fbW9jaGEgJiYgY292ZXJhbGxzIDwgLi9jb3ZlcmFnZS9sY292LmluZm9cIn19fSx7fV0sMzk6W2Z1bmN0aW9uKGUsdCl7KGZ1bmN0aW9uKG4pe3ZhciByPShlKFwiZnNcIiksZShcInBhdGhcIikpLGk9ZShcImZzXCIpLmV4aXN0c1N5bmN8fGUoXCJwYXRoXCIpLmV4aXN0c1N5bmM7dC5leHBvcnRzLnZlcnNpb249e307dmFyIG89W1wiMi4wLjBcIixcIjIuMC4xXCIsXCIyLjAuMlwiLFwiMi4xLjBcIixcIjIuMS4xXCIsXCIyLjIuMFwiLFwiMi4zLjBcIixcIjMuMC4wXCJdO28ubWFwKGZ1bmN0aW9uKG8pe3QuZXhwb3J0cy52ZXJzaW9uW29dPWUoci5qb2luKG4sbyxcInJlZmVyZW5jZS5qc29uXCIpKTt2YXIgYT1yLmpvaW4obixvLFwiZGF0YXNvdXJjZXMuanNvblwiKTtpKGEpJiYodC5leHBvcnRzLnZlcnNpb25bb10uZGF0YXNvdXJjZXM9ZShhKS5kYXRhc291cmNlcyl9KX0pLmNhbGwodGhpcyxcIi9ub2RlX21vZHVsZXMvbWFwbmlrLXJlZmVyZW5jZVwiKX0se2ZzOjIscGF0aDo0MH1dLDQwOltmdW5jdGlvbihlLHQsbil7KGZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHQoZSx0KXtmb3IodmFyIG49MCxyPWUubGVuZ3RoLTE7cj49MDtyLS0pe3ZhciBpPWVbcl07XCIuXCI9PT1pP2Uuc3BsaWNlKHIsMSk6XCIuLlwiPT09aT8oZS5zcGxpY2UociwxKSxuKyspOm4mJihlLnNwbGljZShyLDEpLG4tLSl9aWYodClmb3IoO24tLTtuKWUudW5zaGlmdChcIi4uXCIpO3JldHVybiBlfWZ1bmN0aW9uIHIoZSx0KXtpZihlLmZpbHRlcilyZXR1cm4gZS5maWx0ZXIodCk7Zm9yKHZhciBuPVtdLHI9MDtyPGUubGVuZ3RoO3IrKyl0KGVbcl0scixlKSYmbi5wdXNoKGVbcl0pO3JldHVybiBufXZhciBpPS9eKFxcLz98KShbXFxzXFxTXSo/KSgoPzpcXC57MSwyfXxbXlxcL10rP3wpKFxcLlteLlxcL10qfCkpKD86W1xcL10qKSQvLG89ZnVuY3Rpb24oZSl7cmV0dXJuIGkuZXhlYyhlKS5zbGljZSgxKX07bi5yZXNvbHZlPWZ1bmN0aW9uKCl7Zm9yKHZhciBuPVwiXCIsaT0hMSxvPWFyZ3VtZW50cy5sZW5ndGgtMTtvPj0tMSYmIWk7by0tKXt2YXIgYT1vPj0wP2FyZ3VtZW50c1tvXTplLmN3ZCgpO2lmKFwic3RyaW5nXCIhPXR5cGVvZiBhKXRocm93IG5ldyBUeXBlRXJyb3IoXCJBcmd1bWVudHMgdG8gcGF0aC5yZXNvbHZlIG11c3QgYmUgc3RyaW5nc1wiKTthJiYobj1hK1wiL1wiK24saT1cIi9cIj09PWEuY2hhckF0KDApKX1yZXR1cm4gbj10KHIobi5zcGxpdChcIi9cIiksZnVuY3Rpb24oZSl7cmV0dXJuISFlfSksIWkpLmpvaW4oXCIvXCIpLChpP1wiL1wiOlwiXCIpK258fFwiLlwifSxuLm5vcm1hbGl6ZT1mdW5jdGlvbihlKXt2YXIgaT1uLmlzQWJzb2x1dGUoZSksbz1cIi9cIj09PWEoZSwtMSk7cmV0dXJuIGU9dChyKGUuc3BsaXQoXCIvXCIpLGZ1bmN0aW9uKGUpe3JldHVybiEhZX0pLCFpKS5qb2luKFwiL1wiKSxlfHxpfHwoZT1cIi5cIiksZSYmbyYmKGUrPVwiL1wiKSwoaT9cIi9cIjpcIlwiKStlfSxuLmlzQWJzb2x1dGU9ZnVuY3Rpb24oZSl7cmV0dXJuXCIvXCI9PT1lLmNoYXJBdCgwKX0sbi5qb2luPWZ1bmN0aW9uKCl7dmFyIGU9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLDApO3JldHVybiBuLm5vcm1hbGl6ZShyKGUsZnVuY3Rpb24oZSl7aWYoXCJzdHJpbmdcIiE9dHlwZW9mIGUpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkFyZ3VtZW50cyB0byBwYXRoLmpvaW4gbXVzdCBiZSBzdHJpbmdzXCIpO3JldHVybiBlfSkuam9pbihcIi9cIikpfSxuLnJlbGF0aXZlPWZ1bmN0aW9uKGUsdCl7ZnVuY3Rpb24gcihlKXtmb3IodmFyIHQ9MDt0PGUubGVuZ3RoJiZcIlwiPT09ZVt0XTt0KyspO2Zvcih2YXIgbj1lLmxlbmd0aC0xO24+PTAmJlwiXCI9PT1lW25dO24tLSk7cmV0dXJuIHQ+bj9bXTplLnNsaWNlKHQsbi10KzEpfWU9bi5yZXNvbHZlKGUpLnN1YnN0cigxKSx0PW4ucmVzb2x2ZSh0KS5zdWJzdHIoMSk7Zm9yKHZhciBpPXIoZS5zcGxpdChcIi9cIikpLG89cih0LnNwbGl0KFwiL1wiKSksYT1NYXRoLm1pbihpLmxlbmd0aCxvLmxlbmd0aCkscz1hLGw9MDthPmw7bCsrKWlmKGlbbF0hPT1vW2xdKXtzPWw7YnJlYWt9Zm9yKHZhciB1PVtdLGw9cztsPGkubGVuZ3RoO2wrKyl1LnB1c2goXCIuLlwiKTtyZXR1cm4gdT11LmNvbmNhdChvLnNsaWNlKHMpKSx1LmpvaW4oXCIvXCIpfSxuLnNlcD1cIi9cIixuLmRlbGltaXRlcj1cIjpcIixuLmRpcm5hbWU9ZnVuY3Rpb24oZSl7dmFyIHQ9byhlKSxuPXRbMF0scj10WzFdO3JldHVybiBufHxyPyhyJiYocj1yLnN1YnN0cigwLHIubGVuZ3RoLTEpKSxuK3IpOlwiLlwifSxuLmJhc2VuYW1lPWZ1bmN0aW9uKGUsdCl7dmFyIG49byhlKVsyXTtyZXR1cm4gdCYmbi5zdWJzdHIoLTEqdC5sZW5ndGgpPT09dCYmKG49bi5zdWJzdHIoMCxuLmxlbmd0aC10Lmxlbmd0aCkpLG59LG4uZXh0bmFtZT1mdW5jdGlvbihlKXtyZXR1cm4gbyhlKVszXX07dmFyIGE9XCJiXCI9PT1cImFiXCIuc3Vic3RyKC0xKT9mdW5jdGlvbihlLHQsbil7cmV0dXJuIGUuc3Vic3RyKHQsbil9OmZ1bmN0aW9uKGUsdCxuKXtyZXR1cm4gMD50JiYodD1lLmxlbmd0aCt0KSxlLnN1YnN0cih0LG4pfX0pLmNhbGwodGhpcyxlKFwiX3Byb2Nlc3NcIikpfSx7X3Byb2Nlc3M6NDF9XSw0MTpbZnVuY3Rpb24oZSx0KXtmdW5jdGlvbiBuKCl7dGhyb3cgbmV3IEVycm9yKFwic2V0VGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZFwiKX1mdW5jdGlvbiByKCl7dGhyb3cgbmV3IEVycm9yKFwiY2xlYXJUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkXCIpfWZ1bmN0aW9uIGkoZSl7aWYoYz09PXNldFRpbWVvdXQpcmV0dXJuIHNldFRpbWVvdXQoZSwwKTtpZigoYz09PW58fCFjKSYmc2V0VGltZW91dClyZXR1cm4gYz1zZXRUaW1lb3V0LHNldFRpbWVvdXQoZSwwKTt0cnl7cmV0dXJuIGMoZSwwKX1jYXRjaCh0KXt0cnl7cmV0dXJuIGMuY2FsbChudWxsLGUsMCl9Y2F0Y2godCl7cmV0dXJuIGMuY2FsbCh0aGlzLGUsMCl9fX1mdW5jdGlvbiBvKGUpe2lmKGY9PT1jbGVhclRpbWVvdXQpcmV0dXJuIGNsZWFyVGltZW91dChlKTtpZigoZj09PXJ8fCFmKSYmY2xlYXJUaW1lb3V0KXJldHVybiBmPWNsZWFyVGltZW91dCxjbGVhclRpbWVvdXQoZSk7dHJ5e3JldHVybiBmKGUpfWNhdGNoKHQpe3RyeXtyZXR1cm4gZi5jYWxsKG51bGwsZSl9Y2F0Y2godCl7cmV0dXJuIGYuY2FsbCh0aGlzLGUpfX19ZnVuY3Rpb24gYSgpe20mJmgmJihtPSExLGgubGVuZ3RoP3A9aC5jb25jYXQocCk6Zz0tMSxwLmxlbmd0aCYmcygpKX1mdW5jdGlvbiBzKCl7aWYoIW0pe3ZhciBlPWkoYSk7bT0hMDtmb3IodmFyIHQ9cC5sZW5ndGg7dDspe2ZvcihoPXAscD1bXTsrK2c8dDspaCYmaFtnXS5ydW4oKTtnPS0xLHQ9cC5sZW5ndGh9aD1udWxsLG09ITEsbyhlKX19ZnVuY3Rpb24gbChlLHQpe3RoaXMuZnVuPWUsdGhpcy5hcnJheT10fWZ1bmN0aW9uIHUoKXt9dmFyIGMsZixkPXQuZXhwb3J0cz17fTshZnVuY3Rpb24oKXt0cnl7Yz1cImZ1bmN0aW9uXCI9PXR5cGVvZiBzZXRUaW1lb3V0P3NldFRpbWVvdXQ6bn1jYXRjaChlKXtjPW59dHJ5e2Y9XCJmdW5jdGlvblwiPT10eXBlb2YgY2xlYXJUaW1lb3V0P2NsZWFyVGltZW91dDpyfWNhdGNoKGUpe2Y9cn19KCk7dmFyIGgscD1bXSxtPSExLGc9LTE7ZC5uZXh0VGljaz1mdW5jdGlvbihlKXt2YXIgdD1uZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aC0xKTtpZihhcmd1bWVudHMubGVuZ3RoPjEpZm9yKHZhciBuPTE7bjxhcmd1bWVudHMubGVuZ3RoO24rKyl0W24tMV09YXJndW1lbnRzW25dO3AucHVzaChuZXcgbChlLHQpKSwxIT09cC5sZW5ndGh8fG18fGkocyl9LGwucHJvdG90eXBlLnJ1bj1mdW5jdGlvbigpe3RoaXMuZnVuLmFwcGx5KG51bGwsdGhpcy5hcnJheSl9LGQudGl0bGU9XCJicm93c2VyXCIsZC5icm93c2VyPSEwLGQuZW52PXt9LGQuYXJndj1bXSxkLnZlcnNpb249XCJcIixkLnZlcnNpb25zPXt9LGQub249dSxkLmFkZExpc3RlbmVyPXUsZC5vbmNlPXUsZC5vZmY9dSxkLnJlbW92ZUxpc3RlbmVyPXUsZC5yZW1vdmVBbGxMaXN0ZW5lcnM9dSxkLmVtaXQ9dSxkLmJpbmRpbmc9ZnVuY3Rpb24oKXt0aHJvdyBuZXcgRXJyb3IoXCJwcm9jZXNzLmJpbmRpbmcgaXMgbm90IHN1cHBvcnRlZFwiKX0sZC5jd2Q9ZnVuY3Rpb24oKXtyZXR1cm5cIi9cIn0sZC5jaGRpcj1mdW5jdGlvbigpe3Rocm93IG5ldyBFcnJvcihcInByb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZFwiKX0sZC51bWFzaz1mdW5jdGlvbigpe3JldHVybiAwfX0se31dLDQyOltmdW5jdGlvbihlLHQsbil7KGZ1bmN0aW9uKCl7ZnVuY3Rpb24gZShlKXtmdW5jdGlvbiB0KHQsbixyLGksbyxhKXtmb3IoO28+PTAmJmE+bztvKz1lKXt2YXIgcz1pP2lbb106bztyPW4ocix0W3NdLHMsdCl9cmV0dXJuIHJ9cmV0dXJuIGZ1bmN0aW9uKG4scixpLG8pe3I9eChyLG8sNCk7dmFyIGE9IUYobikmJncua2V5cyhuKSxzPShhfHxuKS5sZW5ndGgsbD1lPjA/MDpzLTE7cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGg8MyYmKGk9blthP2FbbF06bF0sbCs9ZSksdChuLHIsaSxhLGwscyl9fWZ1bmN0aW9uIHIoZSl7cmV0dXJuIGZ1bmN0aW9uKHQsbixyKXtuPWsobixyKTtmb3IodmFyIGk9QSh0KSxvPWU+MD8wOmktMTtvPj0wJiZpPm87bys9ZSlpZihuKHRbb10sbyx0KSlyZXR1cm4gbztyZXR1cm4tMX19ZnVuY3Rpb24gaShlLHQsbil7cmV0dXJuIGZ1bmN0aW9uKHIsaSxvKXt2YXIgYT0wLHM9QShyKTtpZihcIm51bWJlclwiPT10eXBlb2YgbyllPjA/YT1vPj0wP286TWF0aC5tYXgobytzLGEpOnM9bz49MD9NYXRoLm1pbihvKzEscyk6bytzKzE7ZWxzZSBpZihuJiZvJiZzKXJldHVybiBvPW4ocixpKSxyW29dPT09aT9vOi0xO2lmKGkhPT1pKXJldHVybiBvPXQoZC5jYWxsKHIsYSxzKSx3LmlzTmFOKSxvPj0wP28rYTotMTtmb3Iobz1lPjA/YTpzLTE7bz49MCYmcz5vO28rPWUpaWYocltvXT09PWkpcmV0dXJuIG87cmV0dXJuLTF9fWZ1bmN0aW9uIG8oZSx0KXt2YXIgbj1MLmxlbmd0aCxyPWUuY29uc3RydWN0b3IsaT13LmlzRnVuY3Rpb24ocikmJnIucHJvdG90eXBlfHx1LG89XCJjb25zdHJ1Y3RvclwiO2Zvcih3LmhhcyhlLG8pJiYhdy5jb250YWlucyh0LG8pJiZ0LnB1c2gobyk7bi0tOylvPUxbbl0sbyBpbiBlJiZlW29dIT09aVtvXSYmIXcuY29udGFpbnModCxvKSYmdC5wdXNoKG8pfXZhciBhPXRoaXMscz1hLl8sbD1BcnJheS5wcm90b3R5cGUsdT1PYmplY3QucHJvdG90eXBlLGM9RnVuY3Rpb24ucHJvdG90eXBlLGY9bC5wdXNoLGQ9bC5zbGljZSxoPXUudG9TdHJpbmcscD11Lmhhc093blByb3BlcnR5LG09QXJyYXkuaXNBcnJheSxnPU9iamVjdC5rZXlzLHY9Yy5iaW5kLHk9T2JqZWN0LmNyZWF0ZSxiPWZ1bmN0aW9uKCl7fSx3PWZ1bmN0aW9uKGUpe3JldHVybiBlIGluc3RhbmNlb2Ygdz9lOnRoaXMgaW5zdGFuY2VvZiB3P3ZvaWQodGhpcy5fd3JhcHBlZD1lKTpuZXcgdyhlKX07XCJ1bmRlZmluZWRcIiE9dHlwZW9mIG4/KFwidW5kZWZpbmVkXCIhPXR5cGVvZiB0JiZ0LmV4cG9ydHMmJihuPXQuZXhwb3J0cz13KSxuLl89dyk6YS5fPXcsdy5WRVJTSU9OPVwiMS44LjNcIjt2YXIgeD1mdW5jdGlvbihlLHQsbil7aWYodm9pZCAwPT09dClyZXR1cm4gZTtzd2l0Y2gobnVsbD09bj8zOm4pe2Nhc2UgMTpyZXR1cm4gZnVuY3Rpb24obil7cmV0dXJuIGUuY2FsbCh0LG4pfTtjYXNlIDI6cmV0dXJuIGZ1bmN0aW9uKG4scil7cmV0dXJuIGUuY2FsbCh0LG4scil9O2Nhc2UgMzpyZXR1cm4gZnVuY3Rpb24obixyLGkpe3JldHVybiBlLmNhbGwodCxuLHIsaSl9O2Nhc2UgNDpyZXR1cm4gZnVuY3Rpb24obixyLGksbyl7cmV0dXJuIGUuY2FsbCh0LG4scixpLG8pfX1yZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gZS5hcHBseSh0LGFyZ3VtZW50cyl9fSxrPWZ1bmN0aW9uKGUsdCxuKXtyZXR1cm4gbnVsbD09ZT93LmlkZW50aXR5OncuaXNGdW5jdGlvbihlKT94KGUsdCxuKTp3LmlzT2JqZWN0KGUpP3cubWF0Y2hlcihlKTp3LnByb3BlcnR5KGUpfTt3Lml0ZXJhdGVlPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIGsoZSx0LDEvMCl9O3ZhciBTPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIGZ1bmN0aW9uKG4pe3ZhciByPWFyZ3VtZW50cy5sZW5ndGg7aWYoMj5yfHxudWxsPT1uKXJldHVybiBuO2Zvcih2YXIgaT0xO3I+aTtpKyspZm9yKHZhciBvPWFyZ3VtZW50c1tpXSxhPWUobykscz1hLmxlbmd0aCxsPTA7cz5sO2wrKyl7dmFyIHU9YVtsXTt0JiZ2b2lkIDAhPT1uW3VdfHwoblt1XT1vW3VdKX1yZXR1cm4gbn19LHo9ZnVuY3Rpb24oZSl7aWYoIXcuaXNPYmplY3QoZSkpcmV0dXJue307aWYoeSlyZXR1cm4geShlKTtiLnByb3RvdHlwZT1lO3ZhciB0PW5ldyBiO3JldHVybiBiLnByb3RvdHlwZT1udWxsLHR9LF89ZnVuY3Rpb24oZSl7cmV0dXJuIGZ1bmN0aW9uKHQpe3JldHVybiBudWxsPT10P3ZvaWQgMDp0W2VdfX0saj1NYXRoLnBvdygyLDUzKS0xLEE9XyhcImxlbmd0aFwiKSxGPWZ1bmN0aW9uKGUpe3ZhciB0PUEoZSk7cmV0dXJuXCJudW1iZXJcIj09dHlwZW9mIHQmJnQ+PTAmJmo+PXR9O3cuZWFjaD13LmZvckVhY2g9ZnVuY3Rpb24oZSx0LG4pe3Q9eCh0LG4pO3ZhciByLGk7aWYoRihlKSlmb3Iocj0wLGk9ZS5sZW5ndGg7aT5yO3IrKyl0KGVbcl0scixlKTtlbHNle3ZhciBvPXcua2V5cyhlKTtmb3Iocj0wLGk9by5sZW5ndGg7aT5yO3IrKyl0KGVbb1tyXV0sb1tyXSxlKX1yZXR1cm4gZX0sdy5tYXA9dy5jb2xsZWN0PWZ1bmN0aW9uKGUsdCxuKXt0PWsodCxuKTtmb3IodmFyIHI9IUYoZSkmJncua2V5cyhlKSxpPShyfHxlKS5sZW5ndGgsbz1BcnJheShpKSxhPTA7aT5hO2ErKyl7dmFyIHM9cj9yW2FdOmE7b1thXT10KGVbc10scyxlKX1yZXR1cm4gb30sdy5yZWR1Y2U9dy5mb2xkbD13LmluamVjdD1lKDEpLHcucmVkdWNlUmlnaHQ9dy5mb2xkcj1lKC0xKSx3LmZpbmQ9dy5kZXRlY3Q9ZnVuY3Rpb24oZSx0LG4pe3ZhciByO3JldHVybiByPUYoZSk/dy5maW5kSW5kZXgoZSx0LG4pOncuZmluZEtleShlLHQsbiksdm9pZCAwIT09ciYmLTEhPT1yP2Vbcl06dm9pZCAwfSx3LmZpbHRlcj13LnNlbGVjdD1mdW5jdGlvbihlLHQsbil7dmFyIHI9W107cmV0dXJuIHQ9ayh0LG4pLHcuZWFjaChlLGZ1bmN0aW9uKGUsbixpKXt0KGUsbixpKSYmci5wdXNoKGUpfSkscn0sdy5yZWplY3Q9ZnVuY3Rpb24oZSx0LG4pe3JldHVybiB3LmZpbHRlcihlLHcubmVnYXRlKGsodCkpLG4pfSx3LmV2ZXJ5PXcuYWxsPWZ1bmN0aW9uKGUsdCxuKXt0PWsodCxuKTtmb3IodmFyIHI9IUYoZSkmJncua2V5cyhlKSxpPShyfHxlKS5sZW5ndGgsbz0wO2k+bztvKyspe3ZhciBhPXI/cltvXTpvO2lmKCF0KGVbYV0sYSxlKSlyZXR1cm4hMX1yZXR1cm4hMH0sdy5zb21lPXcuYW55PWZ1bmN0aW9uKGUsdCxuKXt0PWsodCxuKTtmb3IodmFyIHI9IUYoZSkmJncua2V5cyhlKSxpPShyfHxlKS5sZW5ndGgsbz0wO2k+bztvKyspe3ZhciBhPXI/cltvXTpvO2lmKHQoZVthXSxhLGUpKXJldHVybiEwfXJldHVybiExfSx3LmNvbnRhaW5zPXcuaW5jbHVkZXM9dy5pbmNsdWRlPWZ1bmN0aW9uKGUsdCxuLHIpe3JldHVybiBGKGUpfHwoZT13LnZhbHVlcyhlKSksKFwibnVtYmVyXCIhPXR5cGVvZiBufHxyKSYmKG49MCksdy5pbmRleE9mKGUsdCxuKT49MH0sdy5pbnZva2U9ZnVuY3Rpb24oZSx0KXt2YXIgbj1kLmNhbGwoYXJndW1lbnRzLDIpLHI9dy5pc0Z1bmN0aW9uKHQpO3JldHVybiB3Lm1hcChlLGZ1bmN0aW9uKGUpe3ZhciBpPXI/dDplW3RdO3JldHVybiBudWxsPT1pP2k6aS5hcHBseShlLG4pfSl9LHcucGx1Y2s9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdy5tYXAoZSx3LnByb3BlcnR5KHQpKX0sdy53aGVyZT1mdW5jdGlvbihlLHQpe3JldHVybiB3LmZpbHRlcihlLHcubWF0Y2hlcih0KSl9LHcuZmluZFdoZXJlPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHcuZmluZChlLHcubWF0Y2hlcih0KSl9LHcubWF4PWZ1bmN0aW9uKGUsdCxuKXt2YXIgcixpLG89LTEvMCxhPS0xLzA7aWYobnVsbD09dCYmbnVsbCE9ZSl7ZT1GKGUpP2U6dy52YWx1ZXMoZSk7Zm9yKHZhciBzPTAsbD1lLmxlbmd0aDtsPnM7cysrKXI9ZVtzXSxyPm8mJihvPXIpfWVsc2UgdD1rKHQsbiksdy5lYWNoKGUsZnVuY3Rpb24oZSxuLHIpe2k9dChlLG4sciksKGk+YXx8aT09PS0xLzAmJm89PT0tMS8wKSYmKG89ZSxhPWkpfSk7cmV0dXJuIG99LHcubWluPWZ1bmN0aW9uKGUsdCxuKXt2YXIgcixpLG89MS8wLGE9MS8wO2lmKG51bGw9PXQmJm51bGwhPWUpe2U9RihlKT9lOncudmFsdWVzKGUpO2Zvcih2YXIgcz0wLGw9ZS5sZW5ndGg7bD5zO3MrKylyPWVbc10sbz5yJiYobz1yKX1lbHNlIHQ9ayh0LG4pLHcuZWFjaChlLGZ1bmN0aW9uKGUsbixyKXtpPXQoZSxuLHIpLChhPml8fDEvMD09PWkmJjEvMD09PW8pJiYobz1lLGE9aSl9KTtyZXR1cm4gb30sdy5zaHVmZmxlPWZ1bmN0aW9uKGUpe2Zvcih2YXIgdCxuPUYoZSk/ZTp3LnZhbHVlcyhlKSxyPW4ubGVuZ3RoLGk9QXJyYXkociksbz0wO3I+bztvKyspdD13LnJhbmRvbSgwLG8pLHQhPT1vJiYoaVtvXT1pW3RdKSxpW3RdPW5bb107cmV0dXJuIGl9LHcuc2FtcGxlPWZ1bmN0aW9uKGUsdCxuKXtyZXR1cm4gbnVsbD09dHx8bj8oRihlKXx8KGU9dy52YWx1ZXMoZSkpLGVbdy5yYW5kb20oZS5sZW5ndGgtMSldKTp3LnNodWZmbGUoZSkuc2xpY2UoMCxNYXRoLm1heCgwLHQpKX0sdy5zb3J0Qnk9ZnVuY3Rpb24oZSx0LG4pe3JldHVybiB0PWsodCxuKSx3LnBsdWNrKHcubWFwKGUsZnVuY3Rpb24oZSxuLHIpe3JldHVybnt2YWx1ZTplLGluZGV4Om4sY3JpdGVyaWE6dChlLG4scil9fSkuc29ydChmdW5jdGlvbihlLHQpe3ZhciBuPWUuY3JpdGVyaWEscj10LmNyaXRlcmlhO2lmKG4hPT1yKXtpZihuPnJ8fHZvaWQgMD09PW4pcmV0dXJuIDE7aWYocj5ufHx2b2lkIDA9PT1yKXJldHVybi0xfXJldHVybiBlLmluZGV4LXQuaW5kZXh9KSxcInZhbHVlXCIpfTt2YXIgVD1mdW5jdGlvbihlKXtyZXR1cm4gZnVuY3Rpb24odCxuLHIpe3ZhciBpPXt9O3JldHVybiBuPWsobixyKSx3LmVhY2godCxmdW5jdGlvbihyLG8pe3ZhciBhPW4ocixvLHQpO2UoaSxyLGEpfSksaX19O3cuZ3JvdXBCeT1UKGZ1bmN0aW9uKGUsdCxuKXt3LmhhcyhlLG4pP2Vbbl0ucHVzaCh0KTplW25dPVt0XX0pLHcuaW5kZXhCeT1UKGZ1bmN0aW9uKGUsdCxuKXtlW25dPXR9KSx3LmNvdW50Qnk9VChmdW5jdGlvbihlLHQsbil7dy5oYXMoZSxuKT9lW25dKys6ZVtuXT0xfSksdy50b0FycmF5PWZ1bmN0aW9uKGUpe3JldHVybiBlP3cuaXNBcnJheShlKT9kLmNhbGwoZSk6RihlKT93Lm1hcChlLHcuaWRlbnRpdHkpOncudmFsdWVzKGUpOltdfSx3LnNpemU9ZnVuY3Rpb24oZSl7cmV0dXJuIG51bGw9PWU/MDpGKGUpP2UubGVuZ3RoOncua2V5cyhlKS5sZW5ndGh9LHcucGFydGl0aW9uPWZ1bmN0aW9uKGUsdCxuKXt0PWsodCxuKTt2YXIgcj1bXSxpPVtdO3JldHVybiB3LmVhY2goZSxmdW5jdGlvbihlLG4sbyl7KHQoZSxuLG8pP3I6aSkucHVzaChlKX0pLFtyLGldfSx3LmZpcnN0PXcuaGVhZD13LnRha2U9ZnVuY3Rpb24oZSx0LG4pe3JldHVybiBudWxsPT1lP3ZvaWQgMDpudWxsPT10fHxuP2VbMF06dy5pbml0aWFsKGUsZS5sZW5ndGgtdCl9LHcuaW5pdGlhbD1mdW5jdGlvbihlLHQsbil7cmV0dXJuIGQuY2FsbChlLDAsTWF0aC5tYXgoMCxlLmxlbmd0aC0obnVsbD09dHx8bj8xOnQpKSl9LHcubGFzdD1mdW5jdGlvbihlLHQsbil7cmV0dXJuIG51bGw9PWU/dm9pZCAwOm51bGw9PXR8fG4/ZVtlLmxlbmd0aC0xXTp3LnJlc3QoZSxNYXRoLm1heCgwLGUubGVuZ3RoLXQpKX0sdy5yZXN0PXcudGFpbD13LmRyb3A9ZnVuY3Rpb24oZSx0LG4pe3JldHVybiBkLmNhbGwoZSxudWxsPT10fHxuPzE6dCl9LHcuY29tcGFjdD1mdW5jdGlvbihlKXtyZXR1cm4gdy5maWx0ZXIoZSx3LmlkZW50aXR5KX07dmFyIE09ZnVuY3Rpb24oZSx0LG4scil7Zm9yKHZhciBpPVtdLG89MCxhPXJ8fDAscz1BKGUpO3M+YTthKyspe3ZhciBsPWVbYV07aWYoRihsKSYmKHcuaXNBcnJheShsKXx8dy5pc0FyZ3VtZW50cyhsKSkpe3R8fChsPU0obCx0LG4pKTt2YXIgdT0wLGM9bC5sZW5ndGg7Zm9yKGkubGVuZ3RoKz1jO2M+dTspaVtvKytdPWxbdSsrXX1lbHNlIG58fChpW28rK109bCl9cmV0dXJuIGl9O3cuZmxhdHRlbj1mdW5jdGlvbihlLHQpe3JldHVybiBNKGUsdCwhMSl9LHcud2l0aG91dD1mdW5jdGlvbihlKXtyZXR1cm4gdy5kaWZmZXJlbmNlKGUsZC5jYWxsKGFyZ3VtZW50cywxKSl9LHcudW5pcT13LnVuaXF1ZT1mdW5jdGlvbihlLHQsbixyKXt3LmlzQm9vbGVhbih0KXx8KHI9bixuPXQsdD0hMSksbnVsbCE9biYmKG49ayhuLHIpKTtmb3IodmFyIGk9W10sbz1bXSxhPTAscz1BKGUpO3M+YTthKyspe3ZhciBsPWVbYV0sdT1uP24obCxhLGUpOmw7dD8oYSYmbz09PXV8fGkucHVzaChsKSxvPXUpOm4/dy5jb250YWlucyhvLHUpfHwoby5wdXNoKHUpLGkucHVzaChsKSk6dy5jb250YWlucyhpLGwpfHxpLnB1c2gobCl9cmV0dXJuIGl9LHcudW5pb249ZnVuY3Rpb24oKXtyZXR1cm4gdy51bmlxKE0oYXJndW1lbnRzLCEwLCEwKSl9LHcuaW50ZXJzZWN0aW9uPWZ1bmN0aW9uKGUpe2Zvcih2YXIgdD1bXSxuPWFyZ3VtZW50cy5sZW5ndGgscj0wLGk9QShlKTtpPnI7cisrKXt2YXIgbz1lW3JdO2lmKCF3LmNvbnRhaW5zKHQsbykpe2Zvcih2YXIgYT0xO24+YSYmdy5jb250YWlucyhhcmd1bWVudHNbYV0sbyk7YSsrKTthPT09biYmdC5wdXNoKG8pfX1yZXR1cm4gdH0sdy5kaWZmZXJlbmNlPWZ1bmN0aW9uKGUpe3ZhciB0PU0oYXJndW1lbnRzLCEwLCEwLDEpO3JldHVybiB3LmZpbHRlcihlLGZ1bmN0aW9uKGUpe3JldHVybiF3LmNvbnRhaW5zKHQsZSl9KX0sdy56aXA9ZnVuY3Rpb24oKXtyZXR1cm4gdy51bnppcChhcmd1bWVudHMpfSx3LnVuemlwPWZ1bmN0aW9uKGUpe2Zvcih2YXIgdD1lJiZ3Lm1heChlLEEpLmxlbmd0aHx8MCxuPUFycmF5KHQpLHI9MDt0PnI7cisrKW5bcl09dy5wbHVjayhlLHIpO3JldHVybiBufSx3Lm9iamVjdD1mdW5jdGlvbihlLHQpe2Zvcih2YXIgbj17fSxyPTAsaT1BKGUpO2k+cjtyKyspdD9uW2Vbcl1dPXRbcl06bltlW3JdWzBdXT1lW3JdWzFdO3JldHVybiBufSx3LmZpbmRJbmRleD1yKDEpLHcuZmluZExhc3RJbmRleD1yKC0xKSx3LnNvcnRlZEluZGV4PWZ1bmN0aW9uKGUsdCxuLHIpe249ayhuLHIsMSk7Zm9yKHZhciBpPW4odCksbz0wLGE9QShlKTthPm87KXt2YXIgcz1NYXRoLmZsb29yKChvK2EpLzIpO24oZVtzXSk8aT9vPXMrMTphPXN9cmV0dXJuIG99LHcuaW5kZXhPZj1pKDEsdy5maW5kSW5kZXgsdy5zb3J0ZWRJbmRleCksdy5sYXN0SW5kZXhPZj1pKC0xLHcuZmluZExhc3RJbmRleCksdy5yYW5nZT1mdW5jdGlvbihlLHQsbil7bnVsbD09dCYmKHQ9ZXx8MCxlPTApLG49bnx8MTtmb3IodmFyIHI9TWF0aC5tYXgoTWF0aC5jZWlsKCh0LWUpL24pLDApLGk9QXJyYXkociksbz0wO3I+bztvKyssZSs9bilpW29dPWU7cmV0dXJuIGl9O3ZhciBxPWZ1bmN0aW9uKGUsdCxuLHIsaSl7aWYoIShyIGluc3RhbmNlb2YgdCkpcmV0dXJuIGUuYXBwbHkobixpKTt2YXIgbz16KGUucHJvdG90eXBlKSxhPWUuYXBwbHkobyxpKTtyZXR1cm4gdy5pc09iamVjdChhKT9hOm99O3cuYmluZD1mdW5jdGlvbihlLHQpe2lmKHYmJmUuYmluZD09PXYpcmV0dXJuIHYuYXBwbHkoZSxkLmNhbGwoYXJndW1lbnRzLDEpKTtpZighdy5pc0Z1bmN0aW9uKGUpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJCaW5kIG11c3QgYmUgY2FsbGVkIG9uIGEgZnVuY3Rpb25cIik7dmFyIG49ZC5jYWxsKGFyZ3VtZW50cywyKSxyPWZ1bmN0aW9uKCl7cmV0dXJuIHEoZSxyLHQsdGhpcyxuLmNvbmNhdChkLmNhbGwoYXJndW1lbnRzKSkpfTtyZXR1cm4gcn0sdy5wYXJ0aWFsPWZ1bmN0aW9uKGUpe3ZhciB0PWQuY2FsbChhcmd1bWVudHMsMSksbj1mdW5jdGlvbigpe2Zvcih2YXIgcj0wLGk9dC5sZW5ndGgsbz1BcnJheShpKSxhPTA7aT5hO2ErKylvW2FdPXRbYV09PT13P2FyZ3VtZW50c1tyKytdOnRbYV07Zm9yKDtyPGFyZ3VtZW50cy5sZW5ndGg7KW8ucHVzaChhcmd1bWVudHNbcisrXSk7cmV0dXJuIHEoZSxuLHRoaXMsdGhpcyxvKX07cmV0dXJuIG59LHcuYmluZEFsbD1mdW5jdGlvbihlKXt2YXIgdCxuLHI9YXJndW1lbnRzLmxlbmd0aDtpZigxPj1yKXRocm93IG5ldyBFcnJvcihcImJpbmRBbGwgbXVzdCBiZSBwYXNzZWQgZnVuY3Rpb24gbmFtZXNcIik7Zm9yKHQ9MTtyPnQ7dCsrKW49YXJndW1lbnRzW3RdLGVbbl09dy5iaW5kKGVbbl0sZSk7cmV0dXJuIGV9LHcubWVtb2l6ZT1mdW5jdGlvbihlLHQpe3ZhciBuPWZ1bmN0aW9uKHIpe3ZhciBpPW4uY2FjaGUsbz1cIlwiKyh0P3QuYXBwbHkodGhpcyxhcmd1bWVudHMpOnIpO3JldHVybiB3LmhhcyhpLG8pfHwoaVtvXT1lLmFwcGx5KHRoaXMsYXJndW1lbnRzKSksaVtvXX07cmV0dXJuIG4uY2FjaGU9e30sbn0sdy5kZWxheT1mdW5jdGlvbihlLHQpe3ZhciBuPWQuY2FsbChhcmd1bWVudHMsMik7cmV0dXJuIHNldFRpbWVvdXQoZnVuY3Rpb24oKXtyZXR1cm4gZS5hcHBseShudWxsLG4pfSx0KX0sdy5kZWZlcj13LnBhcnRpYWwody5kZWxheSx3LDEpLHcudGhyb3R0bGU9ZnVuY3Rpb24oZSx0LG4pe3ZhciByLGksbyxhPW51bGwscz0wO258fChuPXt9KTt2YXIgbD1mdW5jdGlvbigpe3M9bi5sZWFkaW5nPT09ITE/MDp3Lm5vdygpLGE9bnVsbCxvPWUuYXBwbHkocixpKSxhfHwocj1pPW51bGwpfTtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgdT13Lm5vdygpO3N8fG4ubGVhZGluZyE9PSExfHwocz11KTt2YXIgYz10LSh1LXMpO3JldHVybiByPXRoaXMsaT1hcmd1bWVudHMsMD49Y3x8Yz50PyhhJiYoY2xlYXJUaW1lb3V0KGEpLGE9bnVsbCkscz11LG89ZS5hcHBseShyLGkpLGF8fChyPWk9bnVsbCkpOmF8fG4udHJhaWxpbmc9PT0hMXx8KGE9c2V0VGltZW91dChsLGMpKSxvfX0sdy5kZWJvdW5jZT1mdW5jdGlvbihlLHQsbil7dmFyIHIsaSxvLGEscyxsPWZ1bmN0aW9uKCl7dmFyIHU9dy5ub3coKS1hO3Q+dSYmdT49MD9yPXNldFRpbWVvdXQobCx0LXUpOihyPW51bGwsbnx8KHM9ZS5hcHBseShvLGkpLHJ8fChvPWk9bnVsbCkpKX07cmV0dXJuIGZ1bmN0aW9uKCl7bz10aGlzLGk9YXJndW1lbnRzLGE9dy5ub3coKTt2YXIgdT1uJiYhcjtyZXR1cm4gcnx8KHI9c2V0VGltZW91dChsLHQpKSx1JiYocz1lLmFwcGx5KG8saSksbz1pPW51bGwpLHN9fSx3LndyYXA9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdy5wYXJ0aWFsKHQsZSl9LHcubmVnYXRlPWZ1bmN0aW9uKGUpe3JldHVybiBmdW5jdGlvbigpe3JldHVybiFlLmFwcGx5KHRoaXMsYXJndW1lbnRzKX19LHcuY29tcG9zZT1mdW5jdGlvbigpe3ZhciBlPWFyZ3VtZW50cyx0PWUubGVuZ3RoLTE7cmV0dXJuIGZ1bmN0aW9uKCl7Zm9yKHZhciBuPXQscj1lW3RdLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtuLS07KXI9ZVtuXS5jYWxsKHRoaXMscik7cmV0dXJuIHJ9fSx3LmFmdGVyPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuLS1lPDE/dC5hcHBseSh0aGlzLGFyZ3VtZW50cyk6dm9pZCAwfX0sdy5iZWZvcmU9ZnVuY3Rpb24oZSx0KXt2YXIgbjtyZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4tLWU+MCYmKG49dC5hcHBseSh0aGlzLGFyZ3VtZW50cykpLDE+PWUmJih0PW51bGwpLG59fSx3Lm9uY2U9dy5wYXJ0aWFsKHcuYmVmb3JlLDIpO3ZhciBSPSF7dG9TdHJpbmc6bnVsbH0ucHJvcGVydHlJc0VudW1lcmFibGUoXCJ0b1N0cmluZ1wiKSxMPVtcInZhbHVlT2ZcIixcImlzUHJvdG90eXBlT2ZcIixcInRvU3RyaW5nXCIsXCJwcm9wZXJ0eUlzRW51bWVyYWJsZVwiLFwiaGFzT3duUHJvcGVydHlcIixcInRvTG9jYWxlU3RyaW5nXCJdO3cua2V5cz1mdW5jdGlvbihlKXtpZighdy5pc09iamVjdChlKSlyZXR1cm5bXTtpZihnKXJldHVybiBnKGUpO3ZhciB0PVtdO2Zvcih2YXIgbiBpbiBlKXcuaGFzKGUsbikmJnQucHVzaChuKTtyZXR1cm4gUiYmbyhlLHQpLHR9LHcuYWxsS2V5cz1mdW5jdGlvbihlKXtpZighdy5pc09iamVjdChlKSlyZXR1cm5bXTt2YXIgdD1bXTtmb3IodmFyIG4gaW4gZSl0LnB1c2gobik7cmV0dXJuIFImJm8oZSx0KSx0fSx3LnZhbHVlcz1mdW5jdGlvbihlKXtmb3IodmFyIHQ9dy5rZXlzKGUpLG49dC5sZW5ndGgscj1BcnJheShuKSxpPTA7bj5pO2krKylyW2ldPWVbdFtpXV07cmV0dXJuIHJ9LHcubWFwT2JqZWN0PWZ1bmN0aW9uKGUsdCxuKXt0PWsodCxuKTtmb3IodmFyIHIsaT13LmtleXMoZSksbz1pLmxlbmd0aCxhPXt9LHM9MDtvPnM7cysrKXI9aVtzXSxhW3JdPXQoZVtyXSxyLGUpO3JldHVybiBhfSx3LnBhaXJzPWZ1bmN0aW9uKGUpe2Zvcih2YXIgdD13LmtleXMoZSksbj10Lmxlbmd0aCxyPUFycmF5KG4pLGk9MDtuPmk7aSsrKXJbaV09W3RbaV0sZVt0W2ldXV07cmV0dXJuIHJ9LHcuaW52ZXJ0PWZ1bmN0aW9uKGUpe2Zvcih2YXIgdD17fSxuPXcua2V5cyhlKSxyPTAsaT1uLmxlbmd0aDtpPnI7cisrKXRbZVtuW3JdXV09bltyXTtyZXR1cm4gdH0sdy5mdW5jdGlvbnM9dy5tZXRob2RzPWZ1bmN0aW9uKGUpe3ZhciB0PVtdO2Zvcih2YXIgbiBpbiBlKXcuaXNGdW5jdGlvbihlW25dKSYmdC5wdXNoKG4pO3JldHVybiB0LnNvcnQoKX0sdy5leHRlbmQ9Uyh3LmFsbEtleXMpLHcuZXh0ZW5kT3duPXcuYXNzaWduPVMody5rZXlzKSx3LmZpbmRLZXk9ZnVuY3Rpb24oZSx0LG4pe3Q9ayh0LG4pO2Zvcih2YXIgcixpPXcua2V5cyhlKSxvPTAsYT1pLmxlbmd0aDthPm87bysrKWlmKHI9aVtvXSx0KGVbcl0scixlKSlyZXR1cm4gcn0sdy5waWNrPWZ1bmN0aW9uKGUsdCxuKXt2YXIgcixpLG89e30sYT1lO2lmKG51bGw9PWEpcmV0dXJuIG87dy5pc0Z1bmN0aW9uKHQpPyhpPXcuYWxsS2V5cyhhKSxyPXgodCxuKSk6KGk9TShhcmd1bWVudHMsITEsITEsMSkscj1mdW5jdGlvbihlLHQsbil7cmV0dXJuIHQgaW4gbn0sYT1PYmplY3QoYSkpO2Zvcih2YXIgcz0wLGw9aS5sZW5ndGg7bD5zO3MrKyl7dmFyIHU9aVtzXSxjPWFbdV07cihjLHUsYSkmJihvW3VdPWMpfXJldHVybiBvfSx3Lm9taXQ9ZnVuY3Rpb24oZSx0LG4pe2lmKHcuaXNGdW5jdGlvbih0KSl0PXcubmVnYXRlKHQpO2Vsc2V7dmFyIHI9dy5tYXAoTShhcmd1bWVudHMsITEsITEsMSksU3RyaW5nKTt0PWZ1bmN0aW9uKGUsdCl7cmV0dXJuIXcuY29udGFpbnMocix0KX19cmV0dXJuIHcucGljayhlLHQsbil9LHcuZGVmYXVsdHM9Uyh3LmFsbEtleXMsITApLHcuY3JlYXRlPWZ1bmN0aW9uKGUsdCl7dmFyIG49eihlKTtyZXR1cm4gdCYmdy5leHRlbmRPd24obix0KSxufSx3LmNsb25lPWZ1bmN0aW9uKGUpe3JldHVybiB3LmlzT2JqZWN0KGUpP3cuaXNBcnJheShlKT9lLnNsaWNlKCk6dy5leHRlbmQoe30sZSk6ZX0sdy50YXA9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdChlKSxlfSx3LmlzTWF0Y2g9ZnVuY3Rpb24oZSx0KXt2YXIgbj13LmtleXModCkscj1uLmxlbmd0aDtpZihudWxsPT1lKXJldHVybiFyO2Zvcih2YXIgaT1PYmplY3QoZSksbz0wO3I+bztvKyspe3ZhciBhPW5bb107aWYodFthXSE9PWlbYV18fCEoYSBpbiBpKSlyZXR1cm4hMX1yZXR1cm4hMH07dmFyIE89ZnVuY3Rpb24oZSx0LG4scil7aWYoZT09PXQpcmV0dXJuIDAhPT1lfHwxL2U9PT0xL3Q7aWYobnVsbD09ZXx8bnVsbD09dClyZXR1cm4gZT09PXQ7ZSBpbnN0YW5jZW9mIHcmJihlPWUuX3dyYXBwZWQpLHQgaW5zdGFuY2VvZiB3JiYodD10Ll93cmFwcGVkKTt2YXIgaT1oLmNhbGwoZSk7aWYoaSE9PWguY2FsbCh0KSlyZXR1cm4hMTtzd2l0Y2goaSl7Y2FzZVwiW29iamVjdCBSZWdFeHBdXCI6Y2FzZVwiW29iamVjdCBTdHJpbmddXCI6cmV0dXJuXCJcIitlPT1cIlwiK3Q7Y2FzZVwiW29iamVjdCBOdW1iZXJdXCI6cmV0dXJuK2UhPT0rZT8rdCE9PSt0OjA9PT0rZT8xLytlPT09MS90OitlPT09K3Q7Y2FzZVwiW29iamVjdCBEYXRlXVwiOmNhc2VcIltvYmplY3QgQm9vbGVhbl1cIjpyZXR1cm4rZT09PSt0fXZhciBvPVwiW29iamVjdCBBcnJheV1cIj09PWk7aWYoIW8pe2lmKFwib2JqZWN0XCIhPXR5cGVvZiBlfHxcIm9iamVjdFwiIT10eXBlb2YgdClyZXR1cm4hMTt2YXIgYT1lLmNvbnN0cnVjdG9yLHM9dC5jb25zdHJ1Y3RvcjtpZihhIT09cyYmISh3LmlzRnVuY3Rpb24oYSkmJmEgaW5zdGFuY2VvZiBhJiZ3LmlzRnVuY3Rpb24ocykmJnMgaW5zdGFuY2VvZiBzKSYmXCJjb25zdHJ1Y3RvclwiaW4gZSYmXCJjb25zdHJ1Y3RvclwiaW4gdClyZXR1cm4hMX1uPW58fFtdLHI9cnx8W107Zm9yKHZhciBsPW4ubGVuZ3RoO2wtLTspaWYobltsXT09PWUpcmV0dXJuIHJbbF09PT10O2lmKG4ucHVzaChlKSxyLnB1c2godCksbyl7aWYobD1lLmxlbmd0aCxsIT09dC5sZW5ndGgpcmV0dXJuITE7Zm9yKDtsLS07KWlmKCFPKGVbbF0sdFtsXSxuLHIpKXJldHVybiExfWVsc2V7dmFyIHUsYz13LmtleXMoZSk7aWYobD1jLmxlbmd0aCx3LmtleXModCkubGVuZ3RoIT09bClyZXR1cm4hMTtmb3IoO2wtLTspaWYodT1jW2xdLCF3Lmhhcyh0LHUpfHwhTyhlW3VdLHRbdV0sbixyKSlyZXR1cm4hMX1yZXR1cm4gbi5wb3AoKSxyLnBvcCgpLCEwfTt3LmlzRXF1YWw9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gTyhlLHQpfSx3LmlzRW1wdHk9ZnVuY3Rpb24oZSl7cmV0dXJuIG51bGw9PWU/ITA6RihlKSYmKHcuaXNBcnJheShlKXx8dy5pc1N0cmluZyhlKXx8dy5pc0FyZ3VtZW50cyhlKSk/MD09PWUubGVuZ3RoOjA9PT13LmtleXMoZSkubGVuZ3RofSx3LmlzRWxlbWVudD1mdW5jdGlvbihlKXtyZXR1cm4hKCFlfHwxIT09ZS5ub2RlVHlwZSl9LHcuaXNBcnJheT1tfHxmdW5jdGlvbihlKXtyZXR1cm5cIltvYmplY3QgQXJyYXldXCI9PT1oLmNhbGwoZSl9LHcuaXNPYmplY3Q9ZnVuY3Rpb24oZSl7dmFyIHQ9dHlwZW9mIGU7cmV0dXJuXCJmdW5jdGlvblwiPT09dHx8XCJvYmplY3RcIj09PXQmJiEhZX0sdy5lYWNoKFtcIkFyZ3VtZW50c1wiLFwiRnVuY3Rpb25cIixcIlN0cmluZ1wiLFwiTnVtYmVyXCIsXCJEYXRlXCIsXCJSZWdFeHBcIixcIkVycm9yXCJdLGZ1bmN0aW9uKGUpe3dbXCJpc1wiK2VdPWZ1bmN0aW9uKHQpe3JldHVybiBoLmNhbGwodCk9PT1cIltvYmplY3QgXCIrZStcIl1cIn19KSx3LmlzQXJndW1lbnRzKGFyZ3VtZW50cyl8fCh3LmlzQXJndW1lbnRzPWZ1bmN0aW9uKGUpe3JldHVybiB3LmhhcyhlLFwiY2FsbGVlXCIpfSksXCJmdW5jdGlvblwiIT10eXBlb2YvLi8mJlwib2JqZWN0XCIhPXR5cGVvZiBJbnQ4QXJyYXkmJih3LmlzRnVuY3Rpb249ZnVuY3Rpb24oZSl7cmV0dXJuXCJmdW5jdGlvblwiPT10eXBlb2YgZXx8ITF9KSx3LmlzRmluaXRlPWZ1bmN0aW9uKGUpe3JldHVybiBpc0Zpbml0ZShlKSYmIWlzTmFOKHBhcnNlRmxvYXQoZSkpfSx3LmlzTmFOPWZ1bmN0aW9uKGUpe3JldHVybiB3LmlzTnVtYmVyKGUpJiZlIT09K2V9LHcuaXNCb29sZWFuPWZ1bmN0aW9uKGUpe3JldHVybiBlPT09ITB8fGU9PT0hMXx8XCJbb2JqZWN0IEJvb2xlYW5dXCI9PT1oLmNhbGwoZSl9LHcuaXNOdWxsPWZ1bmN0aW9uKGUpe3JldHVybiBudWxsPT09ZX0sdy5pc1VuZGVmaW5lZD1mdW5jdGlvbihlKXtyZXR1cm4gdm9pZCAwPT09ZX0sdy5oYXM9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gbnVsbCE9ZSYmcC5jYWxsKGUsdCl9LHcubm9Db25mbGljdD1mdW5jdGlvbigpe3JldHVybiBhLl89cyx0aGlzfSx3LmlkZW50aXR5PWZ1bmN0aW9uKGUpe3JldHVybiBlfSx3LmNvbnN0YW50PWZ1bmN0aW9uKGUpe3JldHVybiBmdW5jdGlvbigpe3JldHVybiBlfX0sdy5ub29wPWZ1bmN0aW9uKCl7fSx3LnByb3BlcnR5PV8sdy5wcm9wZXJ0eU9mPWZ1bmN0aW9uKGUpe3JldHVybiBudWxsPT1lP2Z1bmN0aW9uKCl7fTpmdW5jdGlvbih0KXtyZXR1cm4gZVt0XX19LHcubWF0Y2hlcj13Lm1hdGNoZXM9ZnVuY3Rpb24oZSl7cmV0dXJuIGU9dy5leHRlbmRPd24oe30sZSksZnVuY3Rpb24odCl7cmV0dXJuIHcuaXNNYXRjaCh0LGUpfX0sdy50aW1lcz1mdW5jdGlvbihlLHQsbil7dmFyIHI9QXJyYXkoTWF0aC5tYXgoMCxlKSk7dD14KHQsbiwxKTtmb3IodmFyIGk9MDtlPmk7aSsrKXJbaV09dChpKTtyZXR1cm4gcn0sdy5yYW5kb209ZnVuY3Rpb24oZSx0KXtyZXR1cm4gbnVsbD09dCYmKHQ9ZSxlPTApLGUrTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpKih0LWUrMSkpfSx3Lm5vdz1EYXRlLm5vd3x8ZnVuY3Rpb24oKXtyZXR1cm4obmV3IERhdGUpLmdldFRpbWUoKX07dmFyIEQ9e1wiJlwiOlwiJmFtcDtcIixcIjxcIjpcIiZsdDtcIixcIj5cIjpcIiZndDtcIiwnXCInOlwiJnF1b3Q7XCIsXCInXCI6XCImI3gyNztcIixcImBcIjpcIiYjeDYwO1wifSxFPXcuaW52ZXJ0KEQpLEM9ZnVuY3Rpb24oZSl7dmFyIHQ9ZnVuY3Rpb24odCl7cmV0dXJuIGVbdF19LG49XCIoPzpcIit3LmtleXMoZSkuam9pbihcInxcIikrXCIpXCIscj1SZWdFeHAobiksaT1SZWdFeHAobixcImdcIik7cmV0dXJuIGZ1bmN0aW9uKGUpe3JldHVybiBlPW51bGw9PWU/XCJcIjpcIlwiK2Usci50ZXN0KGUpP2UucmVwbGFjZShpLHQpOmV9fTt3LmVzY2FwZT1DKEQpLHcudW5lc2NhcGU9QyhFKSx3LnJlc3VsdD1mdW5jdGlvbihlLHQsbil7dmFyIHI9bnVsbD09ZT92b2lkIDA6ZVt0XTtyZXR1cm4gdm9pZCAwPT09ciYmKHI9biksdy5pc0Z1bmN0aW9uKHIpP3IuY2FsbChlKTpyfTt2YXIgST0wO3cudW5pcXVlSWQ9ZnVuY3Rpb24oZSl7dmFyIHQ9KytJK1wiXCI7cmV0dXJuIGU/ZSt0OnR9LHcudGVtcGxhdGVTZXR0aW5ncz17ZXZhbHVhdGU6LzwlKFtcXHNcXFNdKz8pJT4vZyxpbnRlcnBvbGF0ZTovPCU9KFtcXHNcXFNdKz8pJT4vZyxlc2NhcGU6LzwlLShbXFxzXFxTXSs/KSU+L2d9O3ZhciBOPS8oLileLyxQPXtcIidcIjpcIidcIixcIlxcXFxcIjpcIlxcXFxcIixcIlxcclwiOlwiclwiLFwiXFxuXCI6XCJuXCIsXCJcXHUyMDI4XCI6XCJ1MjAyOFwiLFwiXFx1MjAyOVwiOlwidTIwMjlcIn0sWj0vXFxcXHwnfFxccnxcXG58XFx1MjAyOHxcXHUyMDI5L2csWD1mdW5jdGlvbihlKXtyZXR1cm5cIlxcXFxcIitQW2VdfTt3LnRlbXBsYXRlPWZ1bmN0aW9uKGUsdCxuKXshdCYmbiYmKHQ9biksdD13LmRlZmF1bHRzKHt9LHQsdy50ZW1wbGF0ZVNldHRpbmdzKTt2YXIgcj1SZWdFeHAoWyh0LmVzY2FwZXx8Tikuc291cmNlLCh0LmludGVycG9sYXRlfHxOKS5zb3VyY2UsKHQuZXZhbHVhdGV8fE4pLnNvdXJjZV0uam9pbihcInxcIikrXCJ8JFwiLFwiZ1wiKSxpPTAsbz1cIl9fcCs9J1wiO2UucmVwbGFjZShyLGZ1bmN0aW9uKHQsbixyLGEscyl7cmV0dXJuIG8rPWUuc2xpY2UoaSxzKS5yZXBsYWNlKFosWCksaT1zK3QubGVuZ3RoLG4/bys9XCInK1xcbigoX190PShcIituK1wiKSk9PW51bGw/Jyc6Xy5lc2NhcGUoX190KSkrXFxuJ1wiOnI/bys9XCInK1xcbigoX190PShcIityK1wiKSk9PW51bGw/Jyc6X190KStcXG4nXCI6YSYmKG8rPVwiJztcXG5cIithK1wiXFxuX19wKz0nXCIpLHR9KSxvKz1cIic7XFxuXCIsdC52YXJpYWJsZXx8KG89XCJ3aXRoKG9ianx8e30pe1xcblwiK28rXCJ9XFxuXCIpLG89XCJ2YXIgX190LF9fcD0nJyxfX2o9QXJyYXkucHJvdG90eXBlLmpvaW4scHJpbnQ9ZnVuY3Rpb24oKXtfX3ArPV9fai5jYWxsKGFyZ3VtZW50cywnJyk7fTtcXG5cIitvK1wicmV0dXJuIF9fcDtcXG5cIjt0cnl7dmFyIGE9bmV3IEZ1bmN0aW9uKHQudmFyaWFibGV8fFwib2JqXCIsXCJfXCIsbyl9Y2F0Y2gocyl7dGhyb3cgcy5zb3VyY2U9byxzfXZhciBsPWZ1bmN0aW9uKGUpe3JldHVybiBhLmNhbGwodGhpcyxlLHcpfSx1PXQudmFyaWFibGV8fFwib2JqXCI7cmV0dXJuIGwuc291cmNlPVwiZnVuY3Rpb24oXCIrdStcIil7XFxuXCIrbytcIn1cIixsfSx3LmNoYWluPWZ1bmN0aW9uKGUpe3ZhciB0PXcoZSk7cmV0dXJuIHQuX2NoYWluPSEwLHR9O3ZhciBWPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIGUuX2NoYWluP3codCkuY2hhaW4oKTp0fTt3Lm1peGluPWZ1bmN0aW9uKGUpe3cuZWFjaCh3LmZ1bmN0aW9ucyhlKSxmdW5jdGlvbih0KXt2YXIgbj13W3RdPWVbdF07dy5wcm90b3R5cGVbdF09ZnVuY3Rpb24oKXt2YXIgZT1bdGhpcy5fd3JhcHBlZF07cmV0dXJuIGYuYXBwbHkoZSxhcmd1bWVudHMpLFYodGhpcyxuLmFwcGx5KHcsZSkpfX0pfSx3Lm1peGluKHcpLHcuZWFjaChbXCJwb3BcIixcInB1c2hcIixcInJldmVyc2VcIixcInNoaWZ0XCIsXCJzb3J0XCIsXCJzcGxpY2VcIixcInVuc2hpZnRcIl0sZnVuY3Rpb24oZSl7dmFyIHQ9bFtlXTt3LnByb3RvdHlwZVtlXT1mdW5jdGlvbigpe3ZhciBuPXRoaXMuX3dyYXBwZWQ7cmV0dXJuIHQuYXBwbHkobixhcmd1bWVudHMpLFwic2hpZnRcIiE9PWUmJlwic3BsaWNlXCIhPT1lfHwwIT09bi5sZW5ndGh8fGRlbGV0ZSBuWzBdLFYodGhpcyxuKX19KSx3LmVhY2goW1wiY29uY2F0XCIsXCJqb2luXCIsXCJzbGljZVwiXSxmdW5jdGlvbihlKXt2YXIgdD1sW2VdO3cucHJvdG90eXBlW2VdPWZ1bmN0aW9uKCl7cmV0dXJuIFYodGhpcyx0LmFwcGx5KHRoaXMuX3dyYXBwZWQsYXJndW1lbnRzKSl9fSksdy5wcm90b3R5cGUudmFsdWU9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fd3JhcHBlZH0sdy5wcm90b3R5cGUudmFsdWVPZj13LnByb3RvdHlwZS50b0pTT049dy5wcm90b3R5cGUudmFsdWUsdy5wcm90b3R5cGUudG9TdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm5cIlwiK3RoaXMuX3dyYXBwZWR9LFwiZnVuY3Rpb25cIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZCYmZGVmaW5lKFwidW5kZXJzY29yZVwiLFtdLGZ1bmN0aW9uKCl7cmV0dXJuIHd9KX0pLmNhbGwodGhpcyl9LHt9XSw0MzpbZnVuY3Rpb24oZSx0KXt0LmV4cG9ydHM9XCJmdW5jdGlvblwiPT10eXBlb2YgT2JqZWN0LmNyZWF0ZT9mdW5jdGlvbihlLHQpe2Uuc3VwZXJfPXQsZS5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZSh0LnByb3RvdHlwZSx7Y29uc3RydWN0b3I6e3ZhbHVlOmUsZW51bWVyYWJsZTohMSx3cml0YWJsZTohMCxjb25maWd1cmFibGU6ITB9fSl9OmZ1bmN0aW9uKGUsdCl7ZS5zdXBlcl89dDt2YXIgbj1mdW5jdGlvbigpe307bi5wcm90b3R5cGU9dC5wcm90b3R5cGUsZS5wcm90b3R5cGU9bmV3IG4sZS5wcm90b3R5cGUuY29uc3RydWN0b3I9ZX19LHt9XSw0NDpbZnVuY3Rpb24oZSx0KXt0LmV4cG9ydHM9ZnVuY3Rpb24oZSl7cmV0dXJuIGUmJlwib2JqZWN0XCI9PXR5cGVvZiBlJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBlLmNvcHkmJlwiZnVuY3Rpb25cIj09dHlwZW9mIGUuZmlsbCYmXCJmdW5jdGlvblwiPT10eXBlb2YgZS5yZWFkVUludDh9fSx7fV0sNDU6W2Z1bmN0aW9uKGUsdCxuKXsoZnVuY3Rpb24odCxyKXtmdW5jdGlvbiBpKGUsdCl7dmFyIHI9e3NlZW46W10sc3R5bGl6ZTphfTtyZXR1cm4gYXJndW1lbnRzLmxlbmd0aD49MyYmKHIuZGVwdGg9YXJndW1lbnRzWzJdKSxhcmd1bWVudHMubGVuZ3RoPj00JiYoci5jb2xvcnM9YXJndW1lbnRzWzNdKSxtKHQpP3Iuc2hvd0hpZGRlbj10OnQmJm4uX2V4dGVuZChyLHQpLHgoci5zaG93SGlkZGVuKSYmKHIuc2hvd0hpZGRlbj0hMSkseChyLmRlcHRoKSYmKHIuZGVwdGg9MikseChyLmNvbG9ycykmJihyLmNvbG9ycz0hMSkseChyLmN1c3RvbUluc3BlY3QpJiYoci5jdXN0b21JbnNwZWN0PSEwKSxyLmNvbG9ycyYmKHIuc3R5bGl6ZT1vKSxsKHIsZSxyLmRlcHRoKX1mdW5jdGlvbiBvKGUsdCl7dmFyIG49aS5zdHlsZXNbdF07cmV0dXJuIG4/XCJcdTAwMWJbXCIraS5jb2xvcnNbbl1bMF0rXCJtXCIrZStcIlx1MDAxYltcIitpLmNvbG9yc1tuXVsxXStcIm1cIjplfWZ1bmN0aW9uIGEoZSl7cmV0dXJuIGV9ZnVuY3Rpb24gcyhlKXt2YXIgdD17fTtyZXR1cm4gZS5mb3JFYWNoKGZ1bmN0aW9uKGUpe3RbZV09ITB9KSx0fWZ1bmN0aW9uIGwoZSx0LHIpe2lmKGUuY3VzdG9tSW5zcGVjdCYmdCYmaih0Lmluc3BlY3QpJiZ0Lmluc3BlY3QhPT1uLmluc3BlY3QmJighdC5jb25zdHJ1Y3Rvcnx8dC5jb25zdHJ1Y3Rvci5wcm90b3R5cGUhPT10KSl7dmFyIGk9dC5pbnNwZWN0KHIsZSk7cmV0dXJuIGIoaSl8fChpPWwoZSxpLHIpKSxpfXZhciBvPXUoZSx0KTtpZihvKXJldHVybiBvO3ZhciBhPU9iamVjdC5rZXlzKHQpLG09cyhhKTtpZihlLnNob3dIaWRkZW4mJihhPU9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHQpKSxfKHQpJiYoYS5pbmRleE9mKFwibWVzc2FnZVwiKT49MHx8YS5pbmRleE9mKFwiZGVzY3JpcHRpb25cIik+PTApKXJldHVybiBjKHQpO2lmKDA9PT1hLmxlbmd0aCl7aWYoaih0KSl7dmFyIGc9dC5uYW1lP1wiOiBcIit0Lm5hbWU6XCJcIjtyZXR1cm4gZS5zdHlsaXplKFwiW0Z1bmN0aW9uXCIrZytcIl1cIixcInNwZWNpYWxcIil9aWYoayh0KSlyZXR1cm4gZS5zdHlsaXplKFJlZ0V4cC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh0KSxcInJlZ2V4cFwiKTtpZih6KHQpKXJldHVybiBlLnN0eWxpemUoRGF0ZS5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh0KSxcImRhdGVcIik7aWYoXyh0KSlyZXR1cm4gYyh0KX12YXIgdj1cIlwiLHk9ITEsdz1bXCJ7XCIsXCJ9XCJdO2lmKHAodCkmJih5PSEwLHc9W1wiW1wiLFwiXVwiXSksaih0KSl7dmFyIHg9dC5uYW1lP1wiOiBcIit0Lm5hbWU6XCJcIjt2PVwiIFtGdW5jdGlvblwiK3grXCJdXCJ9aWYoayh0KSYmKHY9XCIgXCIrUmVnRXhwLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHQpKSx6KHQpJiYodj1cIiBcIitEYXRlLnByb3RvdHlwZS50b1VUQ1N0cmluZy5jYWxsKHQpKSxfKHQpJiYodj1cIiBcIitjKHQpKSwwPT09YS5sZW5ndGgmJigheXx8MD09dC5sZW5ndGgpKXJldHVybiB3WzBdK3Yrd1sxXTtpZigwPnIpcmV0dXJuIGsodCk/ZS5zdHlsaXplKFJlZ0V4cC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh0KSxcInJlZ2V4cFwiKTplLnN0eWxpemUoXCJbT2JqZWN0XVwiLFwic3BlY2lhbFwiKTtlLnNlZW4ucHVzaCh0KTt2YXIgUztyZXR1cm4gUz15P2YoZSx0LHIsbSxhKTphLm1hcChmdW5jdGlvbihuKXtyZXR1cm4gZChlLHQscixtLG4seSl9KSxlLnNlZW4ucG9wKCksaChTLHYsdyl9ZnVuY3Rpb24gdShlLHQpe2lmKHgodCkpcmV0dXJuIGUuc3R5bGl6ZShcInVuZGVmaW5lZFwiLFwidW5kZWZpbmVkXCIpO2lmKGIodCkpe3ZhciBuPVwiJ1wiK0pTT04uc3RyaW5naWZ5KHQpLnJlcGxhY2UoL15cInxcIiQvZyxcIlwiKS5yZXBsYWNlKC8nL2csXCJcXFxcJ1wiKS5yZXBsYWNlKC9cXFxcXCIvZywnXCInKStcIidcIjtyZXR1cm4gZS5zdHlsaXplKG4sXCJzdHJpbmdcIil9cmV0dXJuIHkodCk/ZS5zdHlsaXplKFwiXCIrdCxcIm51bWJlclwiKTptKHQpP2Uuc3R5bGl6ZShcIlwiK3QsXCJib29sZWFuXCIpOmcodCk/ZS5zdHlsaXplKFwibnVsbFwiLFwibnVsbFwiKTp2b2lkIDB9ZnVuY3Rpb24gYyhlKXtyZXR1cm5cIltcIitFcnJvci5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChlKStcIl1cIn1mdW5jdGlvbiBmKGUsdCxuLHIsaSl7Zm9yKHZhciBvPVtdLGE9MCxzPXQubGVuZ3RoO3M+YTsrK2Epby5wdXNoKHEodCxTdHJpbmcoYSkpP2QoZSx0LG4scixTdHJpbmcoYSksITApOlwiXCIpO3JldHVybiBpLmZvckVhY2goZnVuY3Rpb24oaSl7aS5tYXRjaCgvXlxcZCskLyl8fG8ucHVzaChkKGUsdCxuLHIsaSwhMCkpfSksb31mdW5jdGlvbiBkKGUsdCxuLHIsaSxvKXt2YXIgYSxzLHU7aWYodT1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHQsaSl8fHt2YWx1ZTp0W2ldfSx1LmdldD9zPXUuc2V0P2Uuc3R5bGl6ZShcIltHZXR0ZXIvU2V0dGVyXVwiLFwic3BlY2lhbFwiKTplLnN0eWxpemUoXCJbR2V0dGVyXVwiLFwic3BlY2lhbFwiKTp1LnNldCYmKHM9ZS5zdHlsaXplKFwiW1NldHRlcl1cIixcInNwZWNpYWxcIikpLHEocixpKXx8KGE9XCJbXCIraStcIl1cIiksc3x8KGUuc2Vlbi5pbmRleE9mKHUudmFsdWUpPDA/KHM9ZyhuKT9sKGUsdS52YWx1ZSxudWxsKTpsKGUsdS52YWx1ZSxuLTEpLHMuaW5kZXhPZihcIlxcblwiKT4tMSYmKHM9bz9zLnNwbGl0KFwiXFxuXCIpLm1hcChmdW5jdGlvbihlKXtyZXR1cm5cIiAgXCIrZX0pLmpvaW4oXCJcXG5cIikuc3Vic3RyKDIpOlwiXFxuXCIrcy5zcGxpdChcIlxcblwiKS5tYXAoZnVuY3Rpb24oZSl7cmV0dXJuXCIgICBcIitlfSkuam9pbihcIlxcblwiKSkpOnM9ZS5zdHlsaXplKFwiW0NpcmN1bGFyXVwiLFwic3BlY2lhbFwiKSkseChhKSl7aWYobyYmaS5tYXRjaCgvXlxcZCskLykpcmV0dXJuIHM7YT1KU09OLnN0cmluZ2lmeShcIlwiK2kpLGEubWF0Y2goL15cIihbYS16QS1aX11bYS16QS1aXzAtOV0qKVwiJC8pPyhhPWEuc3Vic3RyKDEsYS5sZW5ndGgtMiksYT1lLnN0eWxpemUoYSxcIm5hbWVcIikpOihhPWEucmVwbGFjZSgvJy9nLFwiXFxcXCdcIikucmVwbGFjZSgvXFxcXFwiL2csJ1wiJykucmVwbGFjZSgvKF5cInxcIiQpL2csXCInXCIpLGE9ZS5zdHlsaXplKGEsXCJzdHJpbmdcIikpfXJldHVybiBhK1wiOiBcIitzfWZ1bmN0aW9uIGgoZSx0LG4pe3ZhciByPTAsaT1lLnJlZHVjZShmdW5jdGlvbihlLHQpe3JldHVybiByKyssdC5pbmRleE9mKFwiXFxuXCIpPj0wJiZyKyssZSt0LnJlcGxhY2UoL1xcdTAwMWJcXFtcXGRcXGQ/bS9nLFwiXCIpLmxlbmd0aCsxfSwwKTtyZXR1cm4gaT42MD9uWzBdKyhcIlwiPT09dD9cIlwiOnQrXCJcXG4gXCIpK1wiIFwiK2Uuam9pbihcIixcXG4gIFwiKStcIiBcIituWzFdOm5bMF0rdCtcIiBcIitlLmpvaW4oXCIsIFwiKStcIiBcIituWzFdfWZ1bmN0aW9uIHAoZSl7cmV0dXJuIEFycmF5LmlzQXJyYXkoZSl9ZnVuY3Rpb24gbShlKXtyZXR1cm5cImJvb2xlYW5cIj09dHlwZW9mIGV9ZnVuY3Rpb24gZyhlKXtyZXR1cm4gbnVsbD09PWV9ZnVuY3Rpb24gdihlKXtyZXR1cm4gbnVsbD09ZX1mdW5jdGlvbiB5KGUpe3JldHVyblwibnVtYmVyXCI9PXR5cGVvZiBlfWZ1bmN0aW9uIGIoZSl7cmV0dXJuXCJzdHJpbmdcIj09dHlwZW9mIGV9ZnVuY3Rpb24gdyhlKXtyZXR1cm5cInN5bWJvbFwiPT10eXBlb2YgZX1mdW5jdGlvbiB4KGUpe3JldHVybiB2b2lkIDA9PT1lfWZ1bmN0aW9uIGsoZSl7cmV0dXJuIFMoZSkmJlwiW29iamVjdCBSZWdFeHBdXCI9PT1GKGUpfWZ1bmN0aW9uIFMoZSl7cmV0dXJuXCJvYmplY3RcIj09dHlwZW9mIGUmJm51bGwhPT1lfWZ1bmN0aW9uIHooZSl7cmV0dXJuIFMoZSkmJlwiW29iamVjdCBEYXRlXVwiPT09RihlKX1mdW5jdGlvbiBfKGUpe3JldHVybiBTKGUpJiYoXCJbb2JqZWN0IEVycm9yXVwiPT09RihlKXx8ZSBpbnN0YW5jZW9mIEVycm9yKX1mdW5jdGlvbiBqKGUpe3JldHVyblwiZnVuY3Rpb25cIj09dHlwZW9mIGV9ZnVuY3Rpb24gQShlKXtyZXR1cm4gbnVsbD09PWV8fFwiYm9vbGVhblwiPT10eXBlb2YgZXx8XCJudW1iZXJcIj09dHlwZW9mIGV8fFwic3RyaW5nXCI9PXR5cGVvZiBlfHxcInN5bWJvbFwiPT10eXBlb2YgZXx8XCJ1bmRlZmluZWRcIj09dHlwZW9mIGV9ZnVuY3Rpb24gRihlKXtyZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGUpfWZ1bmN0aW9uIFQoZSl7cmV0dXJuIDEwPmU/XCIwXCIrZS50b1N0cmluZygxMCk6ZS50b1N0cmluZygxMCl9ZnVuY3Rpb24gTSgpe3ZhciBlPW5ldyBEYXRlLHQ9W1QoZS5nZXRIb3VycygpKSxUKGUuZ2V0TWludXRlcygpKSxUKGUuZ2V0U2Vjb25kcygpKV0uam9pbihcIjpcIik7cmV0dXJuW2UuZ2V0RGF0ZSgpLERbZS5nZXRNb250aCgpXSx0XS5qb2luKFwiIFwiKX1mdW5jdGlvbiBxKGUsdCl7cmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLHQpfXZhciBSPS8lW3NkaiVdL2c7bi5mb3JtYXQ9ZnVuY3Rpb24oZSl7aWYoIWIoZSkpe2Zvcih2YXIgdD1bXSxuPTA7bjxhcmd1bWVudHMubGVuZ3RoO24rKyl0LnB1c2goaShhcmd1bWVudHNbbl0pKTtyZXR1cm4gdC5qb2luKFwiIFwiKX1mb3IodmFyIG49MSxyPWFyZ3VtZW50cyxvPXIubGVuZ3RoLGE9U3RyaW5nKGUpLnJlcGxhY2UoUixmdW5jdGlvbihlKXtpZihcIiUlXCI9PT1lKXJldHVyblwiJVwiO2lmKG4+PW8pcmV0dXJuIGU7c3dpdGNoKGUpe2Nhc2VcIiVzXCI6cmV0dXJuIFN0cmluZyhyW24rK10pO2Nhc2VcIiVkXCI6cmV0dXJuIE51bWJlcihyW24rK10pO2Nhc2VcIiVqXCI6dHJ5e3JldHVybiBKU09OLnN0cmluZ2lmeShyW24rK10pfWNhdGNoKHQpe3JldHVyblwiW0NpcmN1bGFyXVwifWRlZmF1bHQ6cmV0dXJuIGV9fSkscz1yW25dO28+bjtzPXJbKytuXSlhKz1nKHMpfHwhUyhzKT9cIiBcIitzOlwiIFwiK2kocyk7cmV0dXJuIGF9LG4uZGVwcmVjYXRlPWZ1bmN0aW9uKGUsaSl7ZnVuY3Rpb24gbygpe2lmKCFhKXtpZih0LnRocm93RGVwcmVjYXRpb24pdGhyb3cgbmV3IEVycm9yKGkpO3QudHJhY2VEZXByZWNhdGlvbj9jb25zb2xlLnRyYWNlKGkpOmNvbnNvbGUuZXJyb3IoaSksYT0hMH1yZXR1cm4gZS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9aWYoeChyLnByb2Nlc3MpKXJldHVybiBmdW5jdGlvbigpe3JldHVybiBuLmRlcHJlY2F0ZShlLGkpLmFwcGx5KHRoaXMsYXJndW1lbnRzKX07aWYodC5ub0RlcHJlY2F0aW9uPT09ITApcmV0dXJuIGU7dmFyIGE9ITE7cmV0dXJuIG99O3ZhciBMLE89e307bi5kZWJ1Z2xvZz1mdW5jdGlvbihlKXtpZih4KEwpJiYoTD10LmVudi5OT0RFX0RFQlVHfHxcIlwiKSxlPWUudG9VcHBlckNhc2UoKSwhT1tlXSlpZihuZXcgUmVnRXhwKFwiXFxcXGJcIitlK1wiXFxcXGJcIixcImlcIikudGVzdChMKSl7dmFyIHI9dC5waWQ7T1tlXT1mdW5jdGlvbigpe3ZhciB0PW4uZm9ybWF0LmFwcGx5KG4sYXJndW1lbnRzKTtjb25zb2xlLmVycm9yKFwiJXMgJWQ6ICVzXCIsZSxyLHQpfX1lbHNlIE9bZV09ZnVuY3Rpb24oKXt9O3JldHVybiBPW2VdfSxuLmluc3BlY3Q9aSxpLmNvbG9ycz17Ym9sZDpbMSwyMl0saXRhbGljOlszLDIzXSx1bmRlcmxpbmU6WzQsMjRdLGludmVyc2U6WzcsMjddLHdoaXRlOlszNywzOV0sZ3JleTpbOTAsMzldLGJsYWNrOlszMCwzOV0sYmx1ZTpbMzQsMzldLGN5YW46WzM2LDM5XSxncmVlbjpbMzIsMzldLG1hZ2VudGE6WzM1LDM5XSxyZWQ6WzMxLDM5XSx5ZWxsb3c6WzMzLDM5XX0saS5zdHlsZXM9e3NwZWNpYWw6XCJjeWFuXCIsbnVtYmVyOlwieWVsbG93XCIsXCJib29sZWFuXCI6XCJ5ZWxsb3dcIix1bmRlZmluZWQ6XCJncmV5XCIsXCJudWxsXCI6XCJib2xkXCIsc3RyaW5nOlwiZ3JlZW5cIixkYXRlOlwibWFnZW50YVwiLHJlZ2V4cDpcInJlZFwifSxuLmlzQXJyYXk9cCxuLmlzQm9vbGVhbj1tLG4uaXNOdWxsPWcsbi5pc051bGxPclVuZGVmaW5lZD12LG4uaXNOdW1iZXI9eSxuLmlzU3RyaW5nPWIsbi5pc1N5bWJvbD13LG4uaXNVbmRlZmluZWQ9eCxuLmlzUmVnRXhwPWssbi5pc09iamVjdD1TLG4uaXNEYXRlPXosbi5pc0Vycm9yPV8sbi5pc0Z1bmN0aW9uPWosbi5pc1ByaW1pdGl2ZT1BLG4uaXNCdWZmZXI9ZShcIi4vc3VwcG9ydC9pc0J1ZmZlclwiKTt2YXIgRD1bXCJKYW5cIixcIkZlYlwiLFwiTWFyXCIsXCJBcHJcIixcIk1heVwiLFwiSnVuXCIsXCJKdWxcIixcIkF1Z1wiLFwiU2VwXCIsXCJPY3RcIixcIk5vdlwiLFwiRGVjXCJdO24ubG9nPWZ1bmN0aW9uKCl7Y29uc29sZS5sb2coXCIlcyAtICVzXCIsTSgpLG4uZm9ybWF0LmFwcGx5KG4sYXJndW1lbnRzKSl9LG4uaW5oZXJpdHM9ZShcImluaGVyaXRzXCIpLG4uX2V4dGVuZD1mdW5jdGlvbihlLHQpe2lmKCF0fHwhUyh0KSlyZXR1cm4gZTtmb3IodmFyIG49T2JqZWN0LmtleXModCkscj1uLmxlbmd0aDtyLS07KWVbbltyXV09dFtuW3JdXTtyZXR1cm4gZX19KS5jYWxsKHRoaXMsZShcIl9wcm9jZXNzXCIpLFwidW5kZWZpbmVkXCIhPXR5cGVvZiBnbG9iYWw/Z2xvYmFsOlwidW5kZWZpbmVkXCIhPXR5cGVvZiBzZWxmP3NlbGY6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdz93aW5kb3c6e30pfSx7XCIuL3N1cHBvcnQvaXNCdWZmZXJcIjo0NCxfcHJvY2Vzczo0MSxpbmhlcml0czo0M31dLDQ2OltmdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gcihlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6e1wiZGVmYXVsdFwiOmV9fU9iamVjdC5kZWZpbmVQcm9wZXJ0eShuLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBpLG89ZShcImNhcnRvXCIpLGE9cihvKSxzPXttYXJrZXI6XCJwb2ludHNcIixwb2x5Z29uOlwicG9seWdvbnNcIixsaW5lOlwibGluZXNcIn0sbD1uZXcgYS5kZWZhdWx0LlJlbmRlcmVySlMsdT1mdW5jdGlvbihlKXtyZXR1cm4gc1tlXX0sYz1mdW5jdGlvbihlLHQpe3JldHVybiBlK1wiLVwiK3R9LGY9ZnVuY3Rpb24oZSl7cmV0dXJuXCJmdW5jdGlvbiAoKSB7XFxuICAgIHZhciBfdmFsdWUgPSBudWxsO1xcbiAgICBcIitlK1wiXFxuICAgIHJldHVybiBfdmFsdWU7XFxuICB9XCJ9LGQ9ZnVuY3Rpb24oZSl7cmV0dXJuIGUucmVwbGFjZSgvY3R4Lnpvb20vZyxcIiR6b29tXCIpLnJlcGxhY2UoL2RhdGFcXFsvZyxcImZlYXR1cmVbXCIpfSxoPWZ1bmN0aW9uKGUsdCxuKXt2YXIgcj1uW2MoZSx0KV07aWYoIXIpcmV0dXJuXCJcIjtmb3IodmFyIGk9ci5qcyxvPVwiXCIsYT0wO2E8aS5sZW5ndGg7YSsrKW8rPWQoaVthXSk7cmV0dXJuIGYobyl9LHA9ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PXt9LG49MDtuPGUuc3ltYm9saXplcnMubGVuZ3RoO24rKyl7dmFyIHI9ZS5zeW1ib2xpemVyc1tuXTt0W3UocildPXtjb2xvcjpoKHIsXCJmaWxsXCIsZSksc2l6ZTpoKHIsXCJzaXplXCIsZSksd2lkdGg6aChyLFwid2lkdGhcIixlKX19cmV0dXJuIHR9LG09ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PWwucmVuZGVyKGUpLmdldExheWVycygpLG49e30scj0wO3I8dC5sZW5ndGg7cisrKXt2YXIgaT10W3JdLnNoYWRlcjtuPXAoaSl9cmV0dXJuIG59O24uZGVmYXVsdD1pPXtleHRyYWN0RmVhdHVyZXM6bX19LHtjYXJ0bzo0fV0sNDc6W2Z1bmN0aW9uKGUsdCl7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gbihlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6e1wiZGVmYXVsdFwiOmV9fXZhciByPWUoXCIuL2NhcnRvXCIpLGk9bihyKTt0LmV4cG9ydHM9e2NhcnRvMkRyYXc6aS5kZWZhdWx0LmV4dHJhY3RGZWF0dXJlc319LHtcIi4vY2FydG9cIjo0Nn1dfSx7fSxbNDddKSg0Nyl9KTsiLCIvLyBHZW5lcmF0ZWQgYnkgQ29mZmVlU2NyaXB0IDEuMTAuMFxudmFyIER1bXBlciwgSW5saW5lLCBVdGlscztcblxuVXRpbHMgPSByZXF1aXJlKCcuL1V0aWxzJyk7XG5cbklubGluZSA9IHJlcXVpcmUoJy4vSW5saW5lJyk7XG5cbkR1bXBlciA9IChmdW5jdGlvbigpIHtcbiAgZnVuY3Rpb24gRHVtcGVyKCkge31cblxuICBEdW1wZXIuaW5kZW50YXRpb24gPSA0O1xuXG4gIER1bXBlci5wcm90b3R5cGUuZHVtcCA9IGZ1bmN0aW9uKGlucHV0LCBpbmxpbmUsIGluZGVudCwgZXhjZXB0aW9uT25JbnZhbGlkVHlwZSwgb2JqZWN0RW5jb2Rlcikge1xuICAgIHZhciBpLCBrZXksIGxlbiwgb3V0cHV0LCBwcmVmaXgsIHZhbHVlLCB3aWxsQmVJbmxpbmVkO1xuICAgIGlmIChpbmxpbmUgPT0gbnVsbCkge1xuICAgICAgaW5saW5lID0gMDtcbiAgICB9XG4gICAgaWYgKGluZGVudCA9PSBudWxsKSB7XG4gICAgICBpbmRlbnQgPSAwO1xuICAgIH1cbiAgICBpZiAoZXhjZXB0aW9uT25JbnZhbGlkVHlwZSA9PSBudWxsKSB7XG4gICAgICBleGNlcHRpb25PbkludmFsaWRUeXBlID0gZmFsc2U7XG4gICAgfVxuICAgIGlmIChvYmplY3RFbmNvZGVyID09IG51bGwpIHtcbiAgICAgIG9iamVjdEVuY29kZXIgPSBudWxsO1xuICAgIH1cbiAgICBvdXRwdXQgPSAnJztcbiAgICBwcmVmaXggPSAoaW5kZW50ID8gVXRpbHMuc3RyUmVwZWF0KCcgJywgaW5kZW50KSA6ICcnKTtcbiAgICBpZiAoaW5saW5lIDw9IDAgfHwgdHlwZW9mIGlucHV0ICE9PSAnb2JqZWN0JyB8fCBpbnB1dCBpbnN0YW5jZW9mIERhdGUgfHwgVXRpbHMuaXNFbXB0eShpbnB1dCkpIHtcbiAgICAgIG91dHB1dCArPSBwcmVmaXggKyBJbmxpbmUuZHVtcChpbnB1dCwgZXhjZXB0aW9uT25JbnZhbGlkVHlwZSwgb2JqZWN0RW5jb2Rlcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChpbnB1dCBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICAgIGZvciAoaSA9IDAsIGxlbiA9IGlucHV0Lmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgdmFsdWUgPSBpbnB1dFtpXTtcbiAgICAgICAgICB3aWxsQmVJbmxpbmVkID0gaW5saW5lIC0gMSA8PSAwIHx8IHR5cGVvZiB2YWx1ZSAhPT0gJ29iamVjdCcgfHwgVXRpbHMuaXNFbXB0eSh2YWx1ZSk7XG4gICAgICAgICAgb3V0cHV0ICs9IHByZWZpeCArICctJyArICh3aWxsQmVJbmxpbmVkID8gJyAnIDogXCJcXG5cIikgKyB0aGlzLmR1bXAodmFsdWUsIGlubGluZSAtIDEsICh3aWxsQmVJbmxpbmVkID8gMCA6IGluZGVudCArIHRoaXMuaW5kZW50YXRpb24pLCBleGNlcHRpb25PbkludmFsaWRUeXBlLCBvYmplY3RFbmNvZGVyKSArICh3aWxsQmVJbmxpbmVkID8gXCJcXG5cIiA6ICcnKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZm9yIChrZXkgaW4gaW5wdXQpIHtcbiAgICAgICAgICB2YWx1ZSA9IGlucHV0W2tleV07XG4gICAgICAgICAgd2lsbEJlSW5saW5lZCA9IGlubGluZSAtIDEgPD0gMCB8fCB0eXBlb2YgdmFsdWUgIT09ICdvYmplY3QnIHx8IFV0aWxzLmlzRW1wdHkodmFsdWUpO1xuICAgICAgICAgIG91dHB1dCArPSBwcmVmaXggKyBJbmxpbmUuZHVtcChrZXksIGV4Y2VwdGlvbk9uSW52YWxpZFR5cGUsIG9iamVjdEVuY29kZXIpICsgJzonICsgKHdpbGxCZUlubGluZWQgPyAnICcgOiBcIlxcblwiKSArIHRoaXMuZHVtcCh2YWx1ZSwgaW5saW5lIC0gMSwgKHdpbGxCZUlubGluZWQgPyAwIDogaW5kZW50ICsgdGhpcy5pbmRlbnRhdGlvbiksIGV4Y2VwdGlvbk9uSW52YWxpZFR5cGUsIG9iamVjdEVuY29kZXIpICsgKHdpbGxCZUlubGluZWQgPyBcIlxcblwiIDogJycpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBvdXRwdXQ7XG4gIH07XG5cbiAgcmV0dXJuIER1bXBlcjtcblxufSkoKTtcblxubW9kdWxlLmV4cG9ydHMgPSBEdW1wZXI7XG4iLCIvLyBHZW5lcmF0ZWQgYnkgQ29mZmVlU2NyaXB0IDEuMTAuMFxudmFyIEVzY2FwZXIsIFBhdHRlcm47XG5cblBhdHRlcm4gPSByZXF1aXJlKCcuL1BhdHRlcm4nKTtcblxuRXNjYXBlciA9IChmdW5jdGlvbigpIHtcbiAgdmFyIGNoO1xuXG4gIGZ1bmN0aW9uIEVzY2FwZXIoKSB7fVxuXG4gIEVzY2FwZXIuTElTVF9FU0NBUEVFUyA9IFsnXFxcXCcsICdcXFxcXFxcXCcsICdcXFxcXCInLCAnXCInLCBcIlxceDAwXCIsIFwiXFx4MDFcIiwgXCJcXHgwMlwiLCBcIlxceDAzXCIsIFwiXFx4MDRcIiwgXCJcXHgwNVwiLCBcIlxceDA2XCIsIFwiXFx4MDdcIiwgXCJcXHgwOFwiLCBcIlxceDA5XCIsIFwiXFx4MGFcIiwgXCJcXHgwYlwiLCBcIlxceDBjXCIsIFwiXFx4MGRcIiwgXCJcXHgwZVwiLCBcIlxceDBmXCIsIFwiXFx4MTBcIiwgXCJcXHgxMVwiLCBcIlxceDEyXCIsIFwiXFx4MTNcIiwgXCJcXHgxNFwiLCBcIlxceDE1XCIsIFwiXFx4MTZcIiwgXCJcXHgxN1wiLCBcIlxceDE4XCIsIFwiXFx4MTlcIiwgXCJcXHgxYVwiLCBcIlxceDFiXCIsIFwiXFx4MWNcIiwgXCJcXHgxZFwiLCBcIlxceDFlXCIsIFwiXFx4MWZcIiwgKGNoID0gU3RyaW5nLmZyb21DaGFyQ29kZSkoMHgwMDg1KSwgY2goMHgwMEEwKSwgY2goMHgyMDI4KSwgY2goMHgyMDI5KV07XG5cbiAgRXNjYXBlci5MSVNUX0VTQ0FQRUQgPSBbJ1xcXFxcXFxcJywgJ1xcXFxcIicsICdcXFxcXCInLCAnXFxcXFwiJywgXCJcXFxcMFwiLCBcIlxcXFx4MDFcIiwgXCJcXFxceDAyXCIsIFwiXFxcXHgwM1wiLCBcIlxcXFx4MDRcIiwgXCJcXFxceDA1XCIsIFwiXFxcXHgwNlwiLCBcIlxcXFxhXCIsIFwiXFxcXGJcIiwgXCJcXFxcdFwiLCBcIlxcXFxuXCIsIFwiXFxcXHZcIiwgXCJcXFxcZlwiLCBcIlxcXFxyXCIsIFwiXFxcXHgwZVwiLCBcIlxcXFx4MGZcIiwgXCJcXFxceDEwXCIsIFwiXFxcXHgxMVwiLCBcIlxcXFx4MTJcIiwgXCJcXFxceDEzXCIsIFwiXFxcXHgxNFwiLCBcIlxcXFx4MTVcIiwgXCJcXFxceDE2XCIsIFwiXFxcXHgxN1wiLCBcIlxcXFx4MThcIiwgXCJcXFxceDE5XCIsIFwiXFxcXHgxYVwiLCBcIlxcXFxlXCIsIFwiXFxcXHgxY1wiLCBcIlxcXFx4MWRcIiwgXCJcXFxceDFlXCIsIFwiXFxcXHgxZlwiLCBcIlxcXFxOXCIsIFwiXFxcXF9cIiwgXCJcXFxcTFwiLCBcIlxcXFxQXCJdO1xuXG4gIEVzY2FwZXIuTUFQUElOR19FU0NBUEVFU19UT19FU0NBUEVEID0gKGZ1bmN0aW9uKCkge1xuICAgIHZhciBpLCBqLCBtYXBwaW5nLCByZWY7XG4gICAgbWFwcGluZyA9IHt9O1xuICAgIGZvciAoaSA9IGogPSAwLCByZWYgPSBFc2NhcGVyLkxJU1RfRVNDQVBFRVMubGVuZ3RoOyAwIDw9IHJlZiA/IGogPCByZWYgOiBqID4gcmVmOyBpID0gMCA8PSByZWYgPyArK2ogOiAtLWopIHtcbiAgICAgIG1hcHBpbmdbRXNjYXBlci5MSVNUX0VTQ0FQRUVTW2ldXSA9IEVzY2FwZXIuTElTVF9FU0NBUEVEW2ldO1xuICAgIH1cbiAgICByZXR1cm4gbWFwcGluZztcbiAgfSkoKTtcblxuICBFc2NhcGVyLlBBVFRFUk5fQ0hBUkFDVEVSU19UT19FU0NBUEUgPSBuZXcgUGF0dGVybignW1xcXFx4MDAtXFxcXHgxZl18XFx4YzJcXHg4NXxcXHhjMlxceGEwfFxceGUyXFx4ODBcXHhhOHxcXHhlMlxceDgwXFx4YTknKTtcblxuICBFc2NhcGVyLlBBVFRFUk5fTUFQUElOR19FU0NBUEVFUyA9IG5ldyBQYXR0ZXJuKEVzY2FwZXIuTElTVF9FU0NBUEVFUy5qb2luKCd8Jykuc3BsaXQoJ1xcXFwnKS5qb2luKCdcXFxcXFxcXCcpKTtcblxuICBFc2NhcGVyLlBBVFRFUk5fU0lOR0xFX1FVT1RJTkcgPSBuZXcgUGF0dGVybignW1xcXFxzXFwnXCI6e31bXFxcXF0sJiojP118XlstP3w8Pj0hJUBgXScpO1xuXG4gIEVzY2FwZXIucmVxdWlyZXNEb3VibGVRdW90aW5nID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXR1cm4gdGhpcy5QQVRURVJOX0NIQVJBQ1RFUlNfVE9fRVNDQVBFLnRlc3QodmFsdWUpO1xuICB9O1xuXG4gIEVzY2FwZXIuZXNjYXBlV2l0aERvdWJsZVF1b3RlcyA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgdmFyIHJlc3VsdDtcbiAgICByZXN1bHQgPSB0aGlzLlBBVFRFUk5fTUFQUElOR19FU0NBUEVFUy5yZXBsYWNlKHZhbHVlLCAoZnVuY3Rpb24oX3RoaXMpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihzdHIpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzLk1BUFBJTkdfRVNDQVBFRVNfVE9fRVNDQVBFRFtzdHJdO1xuICAgICAgfTtcbiAgICB9KSh0aGlzKSk7XG4gICAgcmV0dXJuICdcIicgKyByZXN1bHQgKyAnXCInO1xuICB9O1xuXG4gIEVzY2FwZXIucmVxdWlyZXNTaW5nbGVRdW90aW5nID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXR1cm4gdGhpcy5QQVRURVJOX1NJTkdMRV9RVU9USU5HLnRlc3QodmFsdWUpO1xuICB9O1xuXG4gIEVzY2FwZXIuZXNjYXBlV2l0aFNpbmdsZVF1b3RlcyA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIFwiJ1wiICsgdmFsdWUucmVwbGFjZSgvJy9nLCBcIicnXCIpICsgXCInXCI7XG4gIH07XG5cbiAgcmV0dXJuIEVzY2FwZXI7XG5cbn0pKCk7XG5cbm1vZHVsZS5leHBvcnRzID0gRXNjYXBlcjtcbiIsIi8vIEdlbmVyYXRlZCBieSBDb2ZmZWVTY3JpcHQgMS4xMC4wXG52YXIgRHVtcEV4Y2VwdGlvbixcbiAgZXh0ZW5kID0gZnVuY3Rpb24oY2hpbGQsIHBhcmVudCkgeyBmb3IgKHZhciBrZXkgaW4gcGFyZW50KSB7IGlmIChoYXNQcm9wLmNhbGwocGFyZW50LCBrZXkpKSBjaGlsZFtrZXldID0gcGFyZW50W2tleV07IH0gZnVuY3Rpb24gY3RvcigpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGNoaWxkOyB9IGN0b3IucHJvdG90eXBlID0gcGFyZW50LnByb3RvdHlwZTsgY2hpbGQucHJvdG90eXBlID0gbmV3IGN0b3IoKTsgY2hpbGQuX19zdXBlcl9fID0gcGFyZW50LnByb3RvdHlwZTsgcmV0dXJuIGNoaWxkOyB9LFxuICBoYXNQcm9wID0ge30uaGFzT3duUHJvcGVydHk7XG5cbkR1bXBFeGNlcHRpb24gPSAoZnVuY3Rpb24oc3VwZXJDbGFzcykge1xuICBleHRlbmQoRHVtcEV4Y2VwdGlvbiwgc3VwZXJDbGFzcyk7XG5cbiAgZnVuY3Rpb24gRHVtcEV4Y2VwdGlvbihtZXNzYWdlLCBwYXJzZWRMaW5lLCBzbmlwcGV0KSB7XG4gICAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZTtcbiAgICB0aGlzLnBhcnNlZExpbmUgPSBwYXJzZWRMaW5lO1xuICAgIHRoaXMuc25pcHBldCA9IHNuaXBwZXQ7XG4gIH1cblxuICBEdW1wRXhjZXB0aW9uLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgIGlmICgodGhpcy5wYXJzZWRMaW5lICE9IG51bGwpICYmICh0aGlzLnNuaXBwZXQgIT0gbnVsbCkpIHtcbiAgICAgIHJldHVybiAnPER1bXBFeGNlcHRpb24+ICcgKyB0aGlzLm1lc3NhZ2UgKyAnIChsaW5lICcgKyB0aGlzLnBhcnNlZExpbmUgKyAnOiBcXCcnICsgdGhpcy5zbmlwcGV0ICsgJ1xcJyknO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gJzxEdW1wRXhjZXB0aW9uPiAnICsgdGhpcy5tZXNzYWdlO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gRHVtcEV4Y2VwdGlvbjtcblxufSkoRXJyb3IpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IER1bXBFeGNlcHRpb247XG4iLCIvLyBHZW5lcmF0ZWQgYnkgQ29mZmVlU2NyaXB0IDEuMTAuMFxudmFyIFBhcnNlRXhjZXB0aW9uLFxuICBleHRlbmQgPSBmdW5jdGlvbihjaGlsZCwgcGFyZW50KSB7IGZvciAodmFyIGtleSBpbiBwYXJlbnQpIHsgaWYgKGhhc1Byb3AuY2FsbChwYXJlbnQsIGtleSkpIGNoaWxkW2tleV0gPSBwYXJlbnRba2V5XTsgfSBmdW5jdGlvbiBjdG9yKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gY2hpbGQ7IH0gY3Rvci5wcm90b3R5cGUgPSBwYXJlbnQucHJvdG90eXBlOyBjaGlsZC5wcm90b3R5cGUgPSBuZXcgY3RvcigpOyBjaGlsZC5fX3N1cGVyX18gPSBwYXJlbnQucHJvdG90eXBlOyByZXR1cm4gY2hpbGQ7IH0sXG4gIGhhc1Byb3AgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblxuUGFyc2VFeGNlcHRpb24gPSAoZnVuY3Rpb24oc3VwZXJDbGFzcykge1xuICBleHRlbmQoUGFyc2VFeGNlcHRpb24sIHN1cGVyQ2xhc3MpO1xuXG4gIGZ1bmN0aW9uIFBhcnNlRXhjZXB0aW9uKG1lc3NhZ2UsIHBhcnNlZExpbmUsIHNuaXBwZXQpIHtcbiAgICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlO1xuICAgIHRoaXMucGFyc2VkTGluZSA9IHBhcnNlZExpbmU7XG4gICAgdGhpcy5zbmlwcGV0ID0gc25pcHBldDtcbiAgfVxuXG4gIFBhcnNlRXhjZXB0aW9uLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgIGlmICgodGhpcy5wYXJzZWRMaW5lICE9IG51bGwpICYmICh0aGlzLnNuaXBwZXQgIT0gbnVsbCkpIHtcbiAgICAgIHJldHVybiAnPFBhcnNlRXhjZXB0aW9uPiAnICsgdGhpcy5tZXNzYWdlICsgJyAobGluZSAnICsgdGhpcy5wYXJzZWRMaW5lICsgJzogXFwnJyArIHRoaXMuc25pcHBldCArICdcXCcpJztcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICc8UGFyc2VFeGNlcHRpb24+ICcgKyB0aGlzLm1lc3NhZ2U7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBQYXJzZUV4Y2VwdGlvbjtcblxufSkoRXJyb3IpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFBhcnNlRXhjZXB0aW9uO1xuIiwiLy8gR2VuZXJhdGVkIGJ5IENvZmZlZVNjcmlwdCAxLjEwLjBcbnZhciBEdW1wRXhjZXB0aW9uLCBFc2NhcGVyLCBJbmxpbmUsIFBhcnNlRXhjZXB0aW9uLCBQYXR0ZXJuLCBVbmVzY2FwZXIsIFV0aWxzLFxuICBpbmRleE9mID0gW10uaW5kZXhPZiB8fCBmdW5jdGlvbihpdGVtKSB7IGZvciAodmFyIGkgPSAwLCBsID0gdGhpcy5sZW5ndGg7IGkgPCBsOyBpKyspIHsgaWYgKGkgaW4gdGhpcyAmJiB0aGlzW2ldID09PSBpdGVtKSByZXR1cm4gaTsgfSByZXR1cm4gLTE7IH07XG5cblBhdHRlcm4gPSByZXF1aXJlKCcuL1BhdHRlcm4nKTtcblxuVW5lc2NhcGVyID0gcmVxdWlyZSgnLi9VbmVzY2FwZXInKTtcblxuRXNjYXBlciA9IHJlcXVpcmUoJy4vRXNjYXBlcicpO1xuXG5VdGlscyA9IHJlcXVpcmUoJy4vVXRpbHMnKTtcblxuUGFyc2VFeGNlcHRpb24gPSByZXF1aXJlKCcuL0V4Y2VwdGlvbi9QYXJzZUV4Y2VwdGlvbicpO1xuXG5EdW1wRXhjZXB0aW9uID0gcmVxdWlyZSgnLi9FeGNlcHRpb24vRHVtcEV4Y2VwdGlvbicpO1xuXG5JbmxpbmUgPSAoZnVuY3Rpb24oKSB7XG4gIGZ1bmN0aW9uIElubGluZSgpIHt9XG5cbiAgSW5saW5lLlJFR0VYX1FVT1RFRF9TVFJJTkcgPSAnKD86XCIoPzpbXlwiXFxcXFxcXFxdKig/OlxcXFxcXFxcLlteXCJcXFxcXFxcXF0qKSopXCJ8XFwnKD86W15cXCddKig/OlxcJ1xcJ1teXFwnXSopKilcXCcpJztcblxuICBJbmxpbmUuUEFUVEVSTl9UUkFJTElOR19DT01NRU5UUyA9IG5ldyBQYXR0ZXJuKCdeXFxcXHMqIy4qJCcpO1xuXG4gIElubGluZS5QQVRURVJOX1FVT1RFRF9TQ0FMQVIgPSBuZXcgUGF0dGVybignXicgKyBJbmxpbmUuUkVHRVhfUVVPVEVEX1NUUklORyk7XG5cbiAgSW5saW5lLlBBVFRFUk5fVEhPVVNBTkRfTlVNRVJJQ19TQ0FMQVIgPSBuZXcgUGF0dGVybignXigtfFxcXFwrKT9bMC05LF0rKFxcXFwuWzAtOV0rKT8kJyk7XG5cbiAgSW5saW5lLlBBVFRFUk5fU0NBTEFSX0JZX0RFTElNSVRFUlMgPSB7fTtcblxuICBJbmxpbmUuc2V0dGluZ3MgPSB7fTtcblxuICBJbmxpbmUuY29uZmlndXJlID0gZnVuY3Rpb24oZXhjZXB0aW9uT25JbnZhbGlkVHlwZSwgb2JqZWN0RGVjb2Rlcikge1xuICAgIGlmIChleGNlcHRpb25PbkludmFsaWRUeXBlID09IG51bGwpIHtcbiAgICAgIGV4Y2VwdGlvbk9uSW52YWxpZFR5cGUgPSBudWxsO1xuICAgIH1cbiAgICBpZiAob2JqZWN0RGVjb2RlciA9PSBudWxsKSB7XG4gICAgICBvYmplY3REZWNvZGVyID0gbnVsbDtcbiAgICB9XG4gICAgdGhpcy5zZXR0aW5ncy5leGNlcHRpb25PbkludmFsaWRUeXBlID0gZXhjZXB0aW9uT25JbnZhbGlkVHlwZTtcbiAgICB0aGlzLnNldHRpbmdzLm9iamVjdERlY29kZXIgPSBvYmplY3REZWNvZGVyO1xuICB9O1xuXG4gIElubGluZS5wYXJzZSA9IGZ1bmN0aW9uKHZhbHVlLCBleGNlcHRpb25PbkludmFsaWRUeXBlLCBvYmplY3REZWNvZGVyKSB7XG4gICAgdmFyIGNvbnRleHQsIHJlc3VsdDtcbiAgICBpZiAoZXhjZXB0aW9uT25JbnZhbGlkVHlwZSA9PSBudWxsKSB7XG4gICAgICBleGNlcHRpb25PbkludmFsaWRUeXBlID0gZmFsc2U7XG4gICAgfVxuICAgIGlmIChvYmplY3REZWNvZGVyID09IG51bGwpIHtcbiAgICAgIG9iamVjdERlY29kZXIgPSBudWxsO1xuICAgIH1cbiAgICB0aGlzLnNldHRpbmdzLmV4Y2VwdGlvbk9uSW52YWxpZFR5cGUgPSBleGNlcHRpb25PbkludmFsaWRUeXBlO1xuICAgIHRoaXMuc2V0dGluZ3Mub2JqZWN0RGVjb2RlciA9IG9iamVjdERlY29kZXI7XG4gICAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICAgIHJldHVybiAnJztcbiAgICB9XG4gICAgdmFsdWUgPSBVdGlscy50cmltKHZhbHVlKTtcbiAgICBpZiAoMCA9PT0gdmFsdWUubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuICAgIGNvbnRleHQgPSB7XG4gICAgICBleGNlcHRpb25PbkludmFsaWRUeXBlOiBleGNlcHRpb25PbkludmFsaWRUeXBlLFxuICAgICAgb2JqZWN0RGVjb2Rlcjogb2JqZWN0RGVjb2RlcixcbiAgICAgIGk6IDBcbiAgICB9O1xuICAgIHN3aXRjaCAodmFsdWUuY2hhckF0KDApKSB7XG4gICAgICBjYXNlICdbJzpcbiAgICAgICAgcmVzdWx0ID0gdGhpcy5wYXJzZVNlcXVlbmNlKHZhbHVlLCBjb250ZXh0KTtcbiAgICAgICAgKytjb250ZXh0Lmk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAneyc6XG4gICAgICAgIHJlc3VsdCA9IHRoaXMucGFyc2VNYXBwaW5nKHZhbHVlLCBjb250ZXh0KTtcbiAgICAgICAgKytjb250ZXh0Lmk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmVzdWx0ID0gdGhpcy5wYXJzZVNjYWxhcih2YWx1ZSwgbnVsbCwgWydcIicsIFwiJ1wiXSwgY29udGV4dCk7XG4gICAgfVxuICAgIGlmICh0aGlzLlBBVFRFUk5fVFJBSUxJTkdfQ09NTUVOVFMucmVwbGFjZSh2YWx1ZS5zbGljZShjb250ZXh0LmkpLCAnJykgIT09ICcnKSB7XG4gICAgICB0aHJvdyBuZXcgUGFyc2VFeGNlcHRpb24oJ1VuZXhwZWN0ZWQgY2hhcmFjdGVycyBuZWFyIFwiJyArIHZhbHVlLnNsaWNlKGNvbnRleHQuaSkgKyAnXCIuJyk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgSW5saW5lLmR1bXAgPSBmdW5jdGlvbih2YWx1ZSwgZXhjZXB0aW9uT25JbnZhbGlkVHlwZSwgb2JqZWN0RW5jb2Rlcikge1xuICAgIHZhciByZWYsIHJlc3VsdCwgdHlwZTtcbiAgICBpZiAoZXhjZXB0aW9uT25JbnZhbGlkVHlwZSA9PSBudWxsKSB7XG4gICAgICBleGNlcHRpb25PbkludmFsaWRUeXBlID0gZmFsc2U7XG4gICAgfVxuICAgIGlmIChvYmplY3RFbmNvZGVyID09IG51bGwpIHtcbiAgICAgIG9iamVjdEVuY29kZXIgPSBudWxsO1xuICAgIH1cbiAgICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuICdudWxsJztcbiAgICB9XG4gICAgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgICBpZiAodHlwZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIERhdGUpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlLnRvSVNPU3RyaW5nKCk7XG4gICAgICB9IGVsc2UgaWYgKG9iamVjdEVuY29kZXIgIT0gbnVsbCkge1xuICAgICAgICByZXN1bHQgPSBvYmplY3RFbmNvZGVyKHZhbHVlKTtcbiAgICAgICAgaWYgKHR5cGVvZiByZXN1bHQgPT09ICdzdHJpbmcnIHx8IChyZXN1bHQgIT0gbnVsbCkpIHtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5kdW1wT2JqZWN0KHZhbHVlKTtcbiAgICB9XG4gICAgaWYgKHR5cGUgPT09ICdib29sZWFuJykge1xuICAgICAgcmV0dXJuICh2YWx1ZSA/ICd0cnVlJyA6ICdmYWxzZScpO1xuICAgIH1cbiAgICBpZiAoVXRpbHMuaXNEaWdpdHModmFsdWUpKSB7XG4gICAgICByZXR1cm4gKHR5cGUgPT09ICdzdHJpbmcnID8gXCInXCIgKyB2YWx1ZSArIFwiJ1wiIDogU3RyaW5nKHBhcnNlSW50KHZhbHVlKSkpO1xuICAgIH1cbiAgICBpZiAoVXRpbHMuaXNOdW1lcmljKHZhbHVlKSkge1xuICAgICAgcmV0dXJuICh0eXBlID09PSAnc3RyaW5nJyA/IFwiJ1wiICsgdmFsdWUgKyBcIidcIiA6IFN0cmluZyhwYXJzZUZsb2F0KHZhbHVlKSkpO1xuICAgIH1cbiAgICBpZiAodHlwZSA9PT0gJ251bWJlcicpIHtcbiAgICAgIHJldHVybiAodmFsdWUgPT09IEluZmluaXR5ID8gJy5JbmYnIDogKHZhbHVlID09PSAtSW5maW5pdHkgPyAnLS5JbmYnIDogKGlzTmFOKHZhbHVlKSA/ICcuTmFOJyA6IHZhbHVlKSkpO1xuICAgIH1cbiAgICBpZiAoRXNjYXBlci5yZXF1aXJlc0RvdWJsZVF1b3RpbmcodmFsdWUpKSB7XG4gICAgICByZXR1cm4gRXNjYXBlci5lc2NhcGVXaXRoRG91YmxlUXVvdGVzKHZhbHVlKTtcbiAgICB9XG4gICAgaWYgKEVzY2FwZXIucmVxdWlyZXNTaW5nbGVRdW90aW5nKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIEVzY2FwZXIuZXNjYXBlV2l0aFNpbmdsZVF1b3Rlcyh2YWx1ZSk7XG4gICAgfVxuICAgIGlmICgnJyA9PT0gdmFsdWUpIHtcbiAgICAgIHJldHVybiAnXCJcIic7XG4gICAgfVxuICAgIGlmIChVdGlscy5QQVRURVJOX0RBVEUudGVzdCh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiBcIidcIiArIHZhbHVlICsgXCInXCI7XG4gICAgfVxuICAgIGlmICgocmVmID0gdmFsdWUudG9Mb3dlckNhc2UoKSkgPT09ICdudWxsJyB8fCByZWYgPT09ICd+JyB8fCByZWYgPT09ICd0cnVlJyB8fCByZWYgPT09ICdmYWxzZScpIHtcbiAgICAgIHJldHVybiBcIidcIiArIHZhbHVlICsgXCInXCI7XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZTtcbiAgfTtcblxuICBJbmxpbmUuZHVtcE9iamVjdCA9IGZ1bmN0aW9uKHZhbHVlLCBleGNlcHRpb25PbkludmFsaWRUeXBlLCBvYmplY3RTdXBwb3J0KSB7XG4gICAgdmFyIGosIGtleSwgbGVuMSwgb3V0cHV0LCB2YWw7XG4gICAgaWYgKG9iamVjdFN1cHBvcnQgPT0gbnVsbCkge1xuICAgICAgb2JqZWN0U3VwcG9ydCA9IG51bGw7XG4gICAgfVxuICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICBvdXRwdXQgPSBbXTtcbiAgICAgIGZvciAoaiA9IDAsIGxlbjEgPSB2YWx1ZS5sZW5ndGg7IGogPCBsZW4xOyBqKyspIHtcbiAgICAgICAgdmFsID0gdmFsdWVbal07XG4gICAgICAgIG91dHB1dC5wdXNoKHRoaXMuZHVtcCh2YWwpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiAnWycgKyBvdXRwdXQuam9pbignLCAnKSArICddJztcbiAgICB9IGVsc2Uge1xuICAgICAgb3V0cHV0ID0gW107XG4gICAgICBmb3IgKGtleSBpbiB2YWx1ZSkge1xuICAgICAgICB2YWwgPSB2YWx1ZVtrZXldO1xuICAgICAgICBvdXRwdXQucHVzaCh0aGlzLmR1bXAoa2V5KSArICc6ICcgKyB0aGlzLmR1bXAodmFsKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gJ3snICsgb3V0cHV0LmpvaW4oJywgJykgKyAnfSc7XG4gICAgfVxuICB9O1xuXG4gIElubGluZS5wYXJzZVNjYWxhciA9IGZ1bmN0aW9uKHNjYWxhciwgZGVsaW1pdGVycywgc3RyaW5nRGVsaW1pdGVycywgY29udGV4dCwgZXZhbHVhdGUpIHtcbiAgICB2YXIgaSwgam9pbmVkRGVsaW1pdGVycywgbWF0Y2gsIG91dHB1dCwgcGF0dGVybiwgcmVmLCByZWYxLCBzdHJwb3MsIHRtcDtcbiAgICBpZiAoZGVsaW1pdGVycyA9PSBudWxsKSB7XG4gICAgICBkZWxpbWl0ZXJzID0gbnVsbDtcbiAgICB9XG4gICAgaWYgKHN0cmluZ0RlbGltaXRlcnMgPT0gbnVsbCkge1xuICAgICAgc3RyaW5nRGVsaW1pdGVycyA9IFsnXCInLCBcIidcIl07XG4gICAgfVxuICAgIGlmIChjb250ZXh0ID09IG51bGwpIHtcbiAgICAgIGNvbnRleHQgPSBudWxsO1xuICAgIH1cbiAgICBpZiAoZXZhbHVhdGUgPT0gbnVsbCkge1xuICAgICAgZXZhbHVhdGUgPSB0cnVlO1xuICAgIH1cbiAgICBpZiAoY29udGV4dCA9PSBudWxsKSB7XG4gICAgICBjb250ZXh0ID0ge1xuICAgICAgICBleGNlcHRpb25PbkludmFsaWRUeXBlOiB0aGlzLnNldHRpbmdzLmV4Y2VwdGlvbk9uSW52YWxpZFR5cGUsXG4gICAgICAgIG9iamVjdERlY29kZXI6IHRoaXMuc2V0dGluZ3Mub2JqZWN0RGVjb2RlcixcbiAgICAgICAgaTogMFxuICAgICAgfTtcbiAgICB9XG4gICAgaSA9IGNvbnRleHQuaTtcbiAgICBpZiAocmVmID0gc2NhbGFyLmNoYXJBdChpKSwgaW5kZXhPZi5jYWxsKHN0cmluZ0RlbGltaXRlcnMsIHJlZikgPj0gMCkge1xuICAgICAgb3V0cHV0ID0gdGhpcy5wYXJzZVF1b3RlZFNjYWxhcihzY2FsYXIsIGNvbnRleHQpO1xuICAgICAgaSA9IGNvbnRleHQuaTtcbiAgICAgIGlmIChkZWxpbWl0ZXJzICE9IG51bGwpIHtcbiAgICAgICAgdG1wID0gVXRpbHMubHRyaW0oc2NhbGFyLnNsaWNlKGkpLCAnICcpO1xuICAgICAgICBpZiAoIShyZWYxID0gdG1wLmNoYXJBdCgwKSwgaW5kZXhPZi5jYWxsKGRlbGltaXRlcnMsIHJlZjEpID49IDApKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFBhcnNlRXhjZXB0aW9uKCdVbmV4cGVjdGVkIGNoYXJhY3RlcnMgKCcgKyBzY2FsYXIuc2xpY2UoaSkgKyAnKS4nKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoIWRlbGltaXRlcnMpIHtcbiAgICAgICAgb3V0cHV0ID0gc2NhbGFyLnNsaWNlKGkpO1xuICAgICAgICBpICs9IG91dHB1dC5sZW5ndGg7XG4gICAgICAgIHN0cnBvcyA9IG91dHB1dC5pbmRleE9mKCcgIycpO1xuICAgICAgICBpZiAoc3RycG9zICE9PSAtMSkge1xuICAgICAgICAgIG91dHB1dCA9IFV0aWxzLnJ0cmltKG91dHB1dC5zbGljZSgwLCBzdHJwb3MpKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgam9pbmVkRGVsaW1pdGVycyA9IGRlbGltaXRlcnMuam9pbignfCcpO1xuICAgICAgICBwYXR0ZXJuID0gdGhpcy5QQVRURVJOX1NDQUxBUl9CWV9ERUxJTUlURVJTW2pvaW5lZERlbGltaXRlcnNdO1xuICAgICAgICBpZiAocGF0dGVybiA9PSBudWxsKSB7XG4gICAgICAgICAgcGF0dGVybiA9IG5ldyBQYXR0ZXJuKCdeKC4rPykoJyArIGpvaW5lZERlbGltaXRlcnMgKyAnKScpO1xuICAgICAgICAgIHRoaXMuUEFUVEVSTl9TQ0FMQVJfQllfREVMSU1JVEVSU1tqb2luZWREZWxpbWl0ZXJzXSA9IHBhdHRlcm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1hdGNoID0gcGF0dGVybi5leGVjKHNjYWxhci5zbGljZShpKSkpIHtcbiAgICAgICAgICBvdXRwdXQgPSBtYXRjaFsxXTtcbiAgICAgICAgICBpICs9IG91dHB1dC5sZW5ndGg7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFBhcnNlRXhjZXB0aW9uKCdNYWxmb3JtZWQgaW5saW5lIFlBTUwgc3RyaW5nICgnICsgc2NhbGFyICsgJykuJyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChldmFsdWF0ZSkge1xuICAgICAgICBvdXRwdXQgPSB0aGlzLmV2YWx1YXRlU2NhbGFyKG91dHB1dCwgY29udGV4dCk7XG4gICAgICB9XG4gICAgfVxuICAgIGNvbnRleHQuaSA9IGk7XG4gICAgcmV0dXJuIG91dHB1dDtcbiAgfTtcblxuICBJbmxpbmUucGFyc2VRdW90ZWRTY2FsYXIgPSBmdW5jdGlvbihzY2FsYXIsIGNvbnRleHQpIHtcbiAgICB2YXIgaSwgbWF0Y2gsIG91dHB1dDtcbiAgICBpID0gY29udGV4dC5pO1xuICAgIGlmICghKG1hdGNoID0gdGhpcy5QQVRURVJOX1FVT1RFRF9TQ0FMQVIuZXhlYyhzY2FsYXIuc2xpY2UoaSkpKSkge1xuICAgICAgdGhyb3cgbmV3IFBhcnNlRXhjZXB0aW9uKCdNYWxmb3JtZWQgaW5saW5lIFlBTUwgc3RyaW5nICgnICsgc2NhbGFyLnNsaWNlKGkpICsgJykuJyk7XG4gICAgfVxuICAgIG91dHB1dCA9IG1hdGNoWzBdLnN1YnN0cigxLCBtYXRjaFswXS5sZW5ndGggLSAyKTtcbiAgICBpZiAoJ1wiJyA9PT0gc2NhbGFyLmNoYXJBdChpKSkge1xuICAgICAgb3V0cHV0ID0gVW5lc2NhcGVyLnVuZXNjYXBlRG91YmxlUXVvdGVkU3RyaW5nKG91dHB1dCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG91dHB1dCA9IFVuZXNjYXBlci51bmVzY2FwZVNpbmdsZVF1b3RlZFN0cmluZyhvdXRwdXQpO1xuICAgIH1cbiAgICBpICs9IG1hdGNoWzBdLmxlbmd0aDtcbiAgICBjb250ZXh0LmkgPSBpO1xuICAgIHJldHVybiBvdXRwdXQ7XG4gIH07XG5cbiAgSW5saW5lLnBhcnNlU2VxdWVuY2UgPSBmdW5jdGlvbihzZXF1ZW5jZSwgY29udGV4dCkge1xuICAgIHZhciBlLCBlcnJvciwgaSwgaXNRdW90ZWQsIGxlbiwgb3V0cHV0LCByZWYsIHZhbHVlO1xuICAgIG91dHB1dCA9IFtdO1xuICAgIGxlbiA9IHNlcXVlbmNlLmxlbmd0aDtcbiAgICBpID0gY29udGV4dC5pO1xuICAgIGkgKz0gMTtcbiAgICB3aGlsZSAoaSA8IGxlbikge1xuICAgICAgY29udGV4dC5pID0gaTtcbiAgICAgIHN3aXRjaCAoc2VxdWVuY2UuY2hhckF0KGkpKSB7XG4gICAgICAgIGNhc2UgJ1snOlxuICAgICAgICAgIG91dHB1dC5wdXNoKHRoaXMucGFyc2VTZXF1ZW5jZShzZXF1ZW5jZSwgY29udGV4dCkpO1xuICAgICAgICAgIGkgPSBjb250ZXh0Lmk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3snOlxuICAgICAgICAgIG91dHB1dC5wdXNoKHRoaXMucGFyc2VNYXBwaW5nKHNlcXVlbmNlLCBjb250ZXh0KSk7XG4gICAgICAgICAgaSA9IGNvbnRleHQuaTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnXSc6XG4gICAgICAgICAgcmV0dXJuIG91dHB1dDtcbiAgICAgICAgY2FzZSAnLCc6XG4gICAgICAgIGNhc2UgJyAnOlxuICAgICAgICBjYXNlIFwiXFxuXCI6XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgaXNRdW90ZWQgPSAoKHJlZiA9IHNlcXVlbmNlLmNoYXJBdChpKSkgPT09ICdcIicgfHwgcmVmID09PSBcIidcIik7XG4gICAgICAgICAgdmFsdWUgPSB0aGlzLnBhcnNlU2NhbGFyKHNlcXVlbmNlLCBbJywnLCAnXSddLCBbJ1wiJywgXCInXCJdLCBjb250ZXh0KTtcbiAgICAgICAgICBpID0gY29udGV4dC5pO1xuICAgICAgICAgIGlmICghaXNRdW90ZWQgJiYgdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyAmJiAodmFsdWUuaW5kZXhPZignOiAnKSAhPT0gLTEgfHwgdmFsdWUuaW5kZXhPZihcIjpcXG5cIikgIT09IC0xKSkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgdmFsdWUgPSB0aGlzLnBhcnNlTWFwcGluZygneycgKyB2YWx1ZSArICd9Jyk7XG4gICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICBlID0gZXJyb3I7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIG91dHB1dC5wdXNoKHZhbHVlKTtcbiAgICAgICAgICAtLWk7XG4gICAgICB9XG4gICAgICArK2k7XG4gICAgfVxuICAgIHRocm93IG5ldyBQYXJzZUV4Y2VwdGlvbignTWFsZm9ybWVkIGlubGluZSBZQU1MIHN0cmluZyAnICsgc2VxdWVuY2UpO1xuICB9O1xuXG4gIElubGluZS5wYXJzZU1hcHBpbmcgPSBmdW5jdGlvbihtYXBwaW5nLCBjb250ZXh0KSB7XG4gICAgdmFyIGRvbmUsIGksIGtleSwgbGVuLCBvdXRwdXQsIHNob3VsZENvbnRpbnVlV2hpbGVMb29wLCB2YWx1ZTtcbiAgICBvdXRwdXQgPSB7fTtcbiAgICBsZW4gPSBtYXBwaW5nLmxlbmd0aDtcbiAgICBpID0gY29udGV4dC5pO1xuICAgIGkgKz0gMTtcbiAgICBzaG91bGRDb250aW51ZVdoaWxlTG9vcCA9IGZhbHNlO1xuICAgIHdoaWxlIChpIDwgbGVuKSB7XG4gICAgICBjb250ZXh0LmkgPSBpO1xuICAgICAgc3dpdGNoIChtYXBwaW5nLmNoYXJBdChpKSkge1xuICAgICAgICBjYXNlICcgJzpcbiAgICAgICAgY2FzZSAnLCc6XG4gICAgICAgIGNhc2UgXCJcXG5cIjpcbiAgICAgICAgICArK2k7XG4gICAgICAgICAgY29udGV4dC5pID0gaTtcbiAgICAgICAgICBzaG91bGRDb250aW51ZVdoaWxlTG9vcCA9IHRydWU7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ30nOlxuICAgICAgICAgIHJldHVybiBvdXRwdXQ7XG4gICAgICB9XG4gICAgICBpZiAoc2hvdWxkQ29udGludWVXaGlsZUxvb3ApIHtcbiAgICAgICAgc2hvdWxkQ29udGludWVXaGlsZUxvb3AgPSBmYWxzZTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBrZXkgPSB0aGlzLnBhcnNlU2NhbGFyKG1hcHBpbmcsIFsnOicsICcgJywgXCJcXG5cIl0sIFsnXCInLCBcIidcIl0sIGNvbnRleHQsIGZhbHNlKTtcbiAgICAgIGkgPSBjb250ZXh0Lmk7XG4gICAgICBkb25lID0gZmFsc2U7XG4gICAgICB3aGlsZSAoaSA8IGxlbikge1xuICAgICAgICBjb250ZXh0LmkgPSBpO1xuICAgICAgICBzd2l0Y2ggKG1hcHBpbmcuY2hhckF0KGkpKSB7XG4gICAgICAgICAgY2FzZSAnWyc6XG4gICAgICAgICAgICB2YWx1ZSA9IHRoaXMucGFyc2VTZXF1ZW5jZShtYXBwaW5nLCBjb250ZXh0KTtcbiAgICAgICAgICAgIGkgPSBjb250ZXh0Lmk7XG4gICAgICAgICAgICBpZiAob3V0cHV0W2tleV0gPT09IHZvaWQgMCkge1xuICAgICAgICAgICAgICBvdXRwdXRba2V5XSA9IHZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZG9uZSA9IHRydWU7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlICd7JzpcbiAgICAgICAgICAgIHZhbHVlID0gdGhpcy5wYXJzZU1hcHBpbmcobWFwcGluZywgY29udGV4dCk7XG4gICAgICAgICAgICBpID0gY29udGV4dC5pO1xuICAgICAgICAgICAgaWYgKG91dHB1dFtrZXldID09PSB2b2lkIDApIHtcbiAgICAgICAgICAgICAgb3V0cHV0W2tleV0gPSB2YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRvbmUgPSB0cnVlO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAnOic6XG4gICAgICAgICAgY2FzZSAnICc6XG4gICAgICAgICAgY2FzZSBcIlxcblwiOlxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHZhbHVlID0gdGhpcy5wYXJzZVNjYWxhcihtYXBwaW5nLCBbJywnLCAnfSddLCBbJ1wiJywgXCInXCJdLCBjb250ZXh0KTtcbiAgICAgICAgICAgIGkgPSBjb250ZXh0Lmk7XG4gICAgICAgICAgICBpZiAob3V0cHV0W2tleV0gPT09IHZvaWQgMCkge1xuICAgICAgICAgICAgICBvdXRwdXRba2V5XSA9IHZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZG9uZSA9IHRydWU7XG4gICAgICAgICAgICAtLWk7XG4gICAgICAgIH1cbiAgICAgICAgKytpO1xuICAgICAgICBpZiAoZG9uZSkge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHRocm93IG5ldyBQYXJzZUV4Y2VwdGlvbignTWFsZm9ybWVkIGlubGluZSBZQU1MIHN0cmluZyAnICsgbWFwcGluZyk7XG4gIH07XG5cbiAgSW5saW5lLmV2YWx1YXRlU2NhbGFyID0gZnVuY3Rpb24oc2NhbGFyLCBjb250ZXh0KSB7XG4gICAgdmFyIGNhc3QsIGRhdGUsIGV4Y2VwdGlvbk9uSW52YWxpZFR5cGUsIGZpcnN0Q2hhciwgZmlyc3RTcGFjZSwgZmlyc3RXb3JkLCBvYmplY3REZWNvZGVyLCByYXcsIHNjYWxhckxvd2VyLCBzdWJWYWx1ZSwgdHJpbW1lZFNjYWxhcjtcbiAgICBzY2FsYXIgPSBVdGlscy50cmltKHNjYWxhcik7XG4gICAgc2NhbGFyTG93ZXIgPSBzY2FsYXIudG9Mb3dlckNhc2UoKTtcbiAgICBzd2l0Y2ggKHNjYWxhckxvd2VyKSB7XG4gICAgICBjYXNlICdudWxsJzpcbiAgICAgIGNhc2UgJyc6XG4gICAgICBjYXNlICd+JzpcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICBjYXNlICd0cnVlJzpcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICBjYXNlICdmYWxzZSc6XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIGNhc2UgJy5pbmYnOlxuICAgICAgICByZXR1cm4gSW5maW5pdHk7XG4gICAgICBjYXNlICcubmFuJzpcbiAgICAgICAgcmV0dXJuIE5hTjtcbiAgICAgIGNhc2UgJy0uaW5mJzpcbiAgICAgICAgcmV0dXJuIEluZmluaXR5O1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgZmlyc3RDaGFyID0gc2NhbGFyTG93ZXIuY2hhckF0KDApO1xuICAgICAgICBzd2l0Y2ggKGZpcnN0Q2hhcikge1xuICAgICAgICAgIGNhc2UgJyEnOlxuICAgICAgICAgICAgZmlyc3RTcGFjZSA9IHNjYWxhci5pbmRleE9mKCcgJyk7XG4gICAgICAgICAgICBpZiAoZmlyc3RTcGFjZSA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgZmlyc3RXb3JkID0gc2NhbGFyTG93ZXI7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBmaXJzdFdvcmQgPSBzY2FsYXJMb3dlci5zbGljZSgwLCBmaXJzdFNwYWNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHN3aXRjaCAoZmlyc3RXb3JkKSB7XG4gICAgICAgICAgICAgIGNhc2UgJyEnOlxuICAgICAgICAgICAgICAgIGlmIChmaXJzdFNwYWNlICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIHBhcnNlSW50KHRoaXMucGFyc2VTY2FsYXIoc2NhbGFyLnNsaWNlKDIpKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICBjYXNlICchc3RyJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gVXRpbHMubHRyaW0oc2NhbGFyLnNsaWNlKDQpKTtcbiAgICAgICAgICAgICAgY2FzZSAnISFzdHInOlxuICAgICAgICAgICAgICAgIHJldHVybiBVdGlscy5sdHJpbShzY2FsYXIuc2xpY2UoNSkpO1xuICAgICAgICAgICAgICBjYXNlICchIWludCc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHBhcnNlSW50KHRoaXMucGFyc2VTY2FsYXIoc2NhbGFyLnNsaWNlKDUpKSk7XG4gICAgICAgICAgICAgIGNhc2UgJyEhYm9vbCc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIFV0aWxzLnBhcnNlQm9vbGVhbih0aGlzLnBhcnNlU2NhbGFyKHNjYWxhci5zbGljZSg2KSksIGZhbHNlKTtcbiAgICAgICAgICAgICAgY2FzZSAnISFmbG9hdCc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHBhcnNlRmxvYXQodGhpcy5wYXJzZVNjYWxhcihzY2FsYXIuc2xpY2UoNykpKTtcbiAgICAgICAgICAgICAgY2FzZSAnISF0aW1lc3RhbXAnOlxuICAgICAgICAgICAgICAgIHJldHVybiBVdGlscy5zdHJpbmdUb0RhdGUoVXRpbHMubHRyaW0oc2NhbGFyLnNsaWNlKDExKSkpO1xuICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIGlmIChjb250ZXh0ID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgIGNvbnRleHQgPSB7XG4gICAgICAgICAgICAgICAgICAgIGV4Y2VwdGlvbk9uSW52YWxpZFR5cGU6IHRoaXMuc2V0dGluZ3MuZXhjZXB0aW9uT25JbnZhbGlkVHlwZSxcbiAgICAgICAgICAgICAgICAgICAgb2JqZWN0RGVjb2RlcjogdGhpcy5zZXR0aW5ncy5vYmplY3REZWNvZGVyLFxuICAgICAgICAgICAgICAgICAgICBpOiAwXG4gICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBvYmplY3REZWNvZGVyID0gY29udGV4dC5vYmplY3REZWNvZGVyLCBleGNlcHRpb25PbkludmFsaWRUeXBlID0gY29udGV4dC5leGNlcHRpb25PbkludmFsaWRUeXBlO1xuICAgICAgICAgICAgICAgIGlmIChvYmplY3REZWNvZGVyKSB7XG4gICAgICAgICAgICAgICAgICB0cmltbWVkU2NhbGFyID0gVXRpbHMucnRyaW0oc2NhbGFyKTtcbiAgICAgICAgICAgICAgICAgIGZpcnN0U3BhY2UgPSB0cmltbWVkU2NhbGFyLmluZGV4T2YoJyAnKTtcbiAgICAgICAgICAgICAgICAgIGlmIChmaXJzdFNwYWNlID09PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gb2JqZWN0RGVjb2Rlcih0cmltbWVkU2NhbGFyLCBudWxsKTtcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHN1YlZhbHVlID0gVXRpbHMubHRyaW0odHJpbW1lZFNjYWxhci5zbGljZShmaXJzdFNwYWNlICsgMSkpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIShzdWJWYWx1ZS5sZW5ndGggPiAwKSkge1xuICAgICAgICAgICAgICAgICAgICAgIHN1YlZhbHVlID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gb2JqZWN0RGVjb2Rlcih0cmltbWVkU2NhbGFyLnNsaWNlKDAsIGZpcnN0U3BhY2UpLCBzdWJWYWx1ZSk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChleGNlcHRpb25PbkludmFsaWRUeXBlKSB7XG4gICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgUGFyc2VFeGNlcHRpb24oJ0N1c3RvbSBvYmplY3Qgc3VwcG9ydCB3aGVuIHBhcnNpbmcgYSBZQU1MIGZpbGUgaGFzIGJlZW4gZGlzYWJsZWQuJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAnMCc6XG4gICAgICAgICAgICBpZiAoJzB4JyA9PT0gc2NhbGFyLnNsaWNlKDAsIDIpKSB7XG4gICAgICAgICAgICAgIHJldHVybiBVdGlscy5oZXhEZWMoc2NhbGFyKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoVXRpbHMuaXNEaWdpdHMoc2NhbGFyKSkge1xuICAgICAgICAgICAgICByZXR1cm4gVXRpbHMub2N0RGVjKHNjYWxhcik7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKFV0aWxzLmlzTnVtZXJpYyhzY2FsYXIpKSB7XG4gICAgICAgICAgICAgIHJldHVybiBwYXJzZUZsb2F0KHNjYWxhcik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZXR1cm4gc2NhbGFyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAnKyc6XG4gICAgICAgICAgICBpZiAoVXRpbHMuaXNEaWdpdHMoc2NhbGFyKSkge1xuICAgICAgICAgICAgICByYXcgPSBzY2FsYXI7XG4gICAgICAgICAgICAgIGNhc3QgPSBwYXJzZUludChyYXcpO1xuICAgICAgICAgICAgICBpZiAocmF3ID09PSBTdHJpbmcoY2FzdCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY2FzdDtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmF3O1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKFV0aWxzLmlzTnVtZXJpYyhzY2FsYXIpKSB7XG4gICAgICAgICAgICAgIHJldHVybiBwYXJzZUZsb2F0KHNjYWxhcik7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuUEFUVEVSTl9USE9VU0FORF9OVU1FUklDX1NDQUxBUi50ZXN0KHNjYWxhcikpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHBhcnNlRmxvYXQoc2NhbGFyLnJlcGxhY2UoJywnLCAnJykpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHNjYWxhcjtcbiAgICAgICAgICBjYXNlICctJzpcbiAgICAgICAgICAgIGlmIChVdGlscy5pc0RpZ2l0cyhzY2FsYXIuc2xpY2UoMSkpKSB7XG4gICAgICAgICAgICAgIGlmICgnMCcgPT09IHNjYWxhci5jaGFyQXQoMSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gLVV0aWxzLm9jdERlYyhzY2FsYXIuc2xpY2UoMSkpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJhdyA9IHNjYWxhci5zbGljZSgxKTtcbiAgICAgICAgICAgICAgICBjYXN0ID0gcGFyc2VJbnQocmF3KTtcbiAgICAgICAgICAgICAgICBpZiAocmF3ID09PSBTdHJpbmcoY2FzdCkpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiAtY2FzdDtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIC1yYXc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKFV0aWxzLmlzTnVtZXJpYyhzY2FsYXIpKSB7XG4gICAgICAgICAgICAgIHJldHVybiBwYXJzZUZsb2F0KHNjYWxhcik7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuUEFUVEVSTl9USE9VU0FORF9OVU1FUklDX1NDQUxBUi50ZXN0KHNjYWxhcikpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHBhcnNlRmxvYXQoc2NhbGFyLnJlcGxhY2UoJywnLCAnJykpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHNjYWxhcjtcbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgaWYgKGRhdGUgPSBVdGlscy5zdHJpbmdUb0RhdGUoc2NhbGFyKSkge1xuICAgICAgICAgICAgICByZXR1cm4gZGF0ZTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoVXRpbHMuaXNOdW1lcmljKHNjYWxhcikpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHBhcnNlRmxvYXQoc2NhbGFyKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5QQVRURVJOX1RIT1VTQU5EX05VTUVSSUNfU0NBTEFSLnRlc3Qoc2NhbGFyKSkge1xuICAgICAgICAgICAgICByZXR1cm4gcGFyc2VGbG9hdChzY2FsYXIucmVwbGFjZSgnLCcsICcnKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gc2NhbGFyO1xuICAgICAgICB9XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBJbmxpbmU7XG5cbn0pKCk7XG5cbm1vZHVsZS5leHBvcnRzID0gSW5saW5lO1xuIiwiLy8gR2VuZXJhdGVkIGJ5IENvZmZlZVNjcmlwdCAxLjEwLjBcbnZhciBJbmxpbmUsIFBhcnNlRXhjZXB0aW9uLCBQYXJzZXIsIFBhdHRlcm4sIFV0aWxzO1xuXG5JbmxpbmUgPSByZXF1aXJlKCcuL0lubGluZScpO1xuXG5QYXR0ZXJuID0gcmVxdWlyZSgnLi9QYXR0ZXJuJyk7XG5cblV0aWxzID0gcmVxdWlyZSgnLi9VdGlscycpO1xuXG5QYXJzZUV4Y2VwdGlvbiA9IHJlcXVpcmUoJy4vRXhjZXB0aW9uL1BhcnNlRXhjZXB0aW9uJyk7XG5cblBhcnNlciA9IChmdW5jdGlvbigpIHtcbiAgUGFyc2VyLnByb3RvdHlwZS5QQVRURVJOX0ZPTERFRF9TQ0FMQVJfQUxMID0gbmV3IFBhdHRlcm4oJ14oPzooPzx0eXBlPiFbXlxcXFx8Pl0qKVxcXFxzKyk/KD88c2VwYXJhdG9yPlxcXFx8fD4pKD88bW9kaWZpZXJzPlxcXFwrfFxcXFwtfFxcXFxkK3xcXFxcK1xcXFxkK3xcXFxcLVxcXFxkK3xcXFxcZCtcXFxcK3xcXFxcZCtcXFxcLSk/KD88Y29tbWVudHM+ICsjLiopPyQnKTtcblxuICBQYXJzZXIucHJvdG90eXBlLlBBVFRFUk5fRk9MREVEX1NDQUxBUl9FTkQgPSBuZXcgUGF0dGVybignKD88c2VwYXJhdG9yPlxcXFx8fD4pKD88bW9kaWZpZXJzPlxcXFwrfFxcXFwtfFxcXFxkK3xcXFxcK1xcXFxkK3xcXFxcLVxcXFxkK3xcXFxcZCtcXFxcK3xcXFxcZCtcXFxcLSk/KD88Y29tbWVudHM+ICsjLiopPyQnKTtcblxuICBQYXJzZXIucHJvdG90eXBlLlBBVFRFUk5fU0VRVUVOQ0VfSVRFTSA9IG5ldyBQYXR0ZXJuKCdeXFxcXC0oKD88bGVhZHNwYWNlcz5cXFxccyspKD88dmFsdWU+Lis/KSk/XFxcXHMqJCcpO1xuXG4gIFBhcnNlci5wcm90b3R5cGUuUEFUVEVSTl9BTkNIT1JfVkFMVUUgPSBuZXcgUGF0dGVybignXiYoPzxyZWY+W14gXSspICooPzx2YWx1ZT4uKiknKTtcblxuICBQYXJzZXIucHJvdG90eXBlLlBBVFRFUk5fQ09NUEFDVF9OT1RBVElPTiA9IG5ldyBQYXR0ZXJuKCdeKD88a2V5PicgKyBJbmxpbmUuUkVHRVhfUVVPVEVEX1NUUklORyArICd8W14gXFwnXCJcXFxce1xcXFxbXS4qPykgKlxcXFw6KFxcXFxzKyg/PHZhbHVlPi4rPykpP1xcXFxzKiQnKTtcblxuICBQYXJzZXIucHJvdG90eXBlLlBBVFRFUk5fTUFQUElOR19JVEVNID0gbmV3IFBhdHRlcm4oJ14oPzxrZXk+JyArIElubGluZS5SRUdFWF9RVU9URURfU1RSSU5HICsgJ3xbXiBcXCdcIlxcXFxbXFxcXHtdLio/KSAqXFxcXDooXFxcXHMrKD88dmFsdWU+Lis/KSk/XFxcXHMqJCcpO1xuXG4gIFBhcnNlci5wcm90b3R5cGUuUEFUVEVSTl9ERUNJTUFMID0gbmV3IFBhdHRlcm4oJ1xcXFxkKycpO1xuXG4gIFBhcnNlci5wcm90b3R5cGUuUEFUVEVSTl9JTkRFTlRfU1BBQ0VTID0gbmV3IFBhdHRlcm4oJ14gKycpO1xuXG4gIFBhcnNlci5wcm90b3R5cGUuUEFUVEVSTl9UUkFJTElOR19MSU5FUyA9IG5ldyBQYXR0ZXJuKCcoXFxuKikkJyk7XG5cbiAgUGFyc2VyLnByb3RvdHlwZS5QQVRURVJOX1lBTUxfSEVBREVSID0gbmV3IFBhdHRlcm4oJ15cXFxcJVlBTUxbOiBdW1xcXFxkXFxcXC5dKy4qXFxuJyk7XG5cbiAgUGFyc2VyLnByb3RvdHlwZS5QQVRURVJOX0xFQURJTkdfQ09NTUVOVFMgPSBuZXcgUGF0dGVybignXihcXFxcIy4qP1xcbikrJyk7XG5cbiAgUGFyc2VyLnByb3RvdHlwZS5QQVRURVJOX0RPQ1VNRU5UX01BUktFUl9TVEFSVCA9IG5ldyBQYXR0ZXJuKCdeXFxcXC1cXFxcLVxcXFwtLio/XFxuJyk7XG5cbiAgUGFyc2VyLnByb3RvdHlwZS5QQVRURVJOX0RPQ1VNRU5UX01BUktFUl9FTkQgPSBuZXcgUGF0dGVybignXlxcXFwuXFxcXC5cXFxcLlxcXFxzKiQnKTtcblxuICBQYXJzZXIucHJvdG90eXBlLlBBVFRFUk5fRk9MREVEX1NDQUxBUl9CWV9JTkRFTlRBVElPTiA9IHt9O1xuXG4gIFBhcnNlci5wcm90b3R5cGUuQ09OVEVYVF9OT05FID0gMDtcblxuICBQYXJzZXIucHJvdG90eXBlLkNPTlRFWFRfU0VRVUVOQ0UgPSAxO1xuXG4gIFBhcnNlci5wcm90b3R5cGUuQ09OVEVYVF9NQVBQSU5HID0gMjtcblxuICBmdW5jdGlvbiBQYXJzZXIob2Zmc2V0KSB7XG4gICAgdGhpcy5vZmZzZXQgPSBvZmZzZXQgIT0gbnVsbCA/IG9mZnNldCA6IDA7XG4gICAgdGhpcy5saW5lcyA9IFtdO1xuICAgIHRoaXMuY3VycmVudExpbmVOYiA9IC0xO1xuICAgIHRoaXMuY3VycmVudExpbmUgPSAnJztcbiAgICB0aGlzLnJlZnMgPSB7fTtcbiAgfVxuXG4gIFBhcnNlci5wcm90b3R5cGUucGFyc2UgPSBmdW5jdGlvbih2YWx1ZSwgZXhjZXB0aW9uT25JbnZhbGlkVHlwZSwgb2JqZWN0RGVjb2Rlcikge1xuICAgIHZhciBhbGlhcywgYWxsb3dPdmVyd3JpdGUsIGJsb2NrLCBjLCBjb250ZXh0LCBkYXRhLCBlLCBlcnJvciwgZXJyb3IxLCBlcnJvcjIsIGZpcnN0LCBpLCBpbmRlbnQsIGlzUmVmLCBqLCBrLCBrZXksIGwsIGxhc3RLZXksIGxlbiwgbGVuMSwgbGVuMiwgbGVuMywgbGluZUNvdW50LCBtLCBtYXRjaGVzLCBtZXJnZU5vZGUsIG4sIG5hbWUsIHBhcnNlZCwgcGFyc2VkSXRlbSwgcGFyc2VyLCByZWYsIHJlZjEsIHJlZjIsIHJlZk5hbWUsIHJlZlZhbHVlLCB2YWwsIHZhbHVlcztcbiAgICBpZiAoZXhjZXB0aW9uT25JbnZhbGlkVHlwZSA9PSBudWxsKSB7XG4gICAgICBleGNlcHRpb25PbkludmFsaWRUeXBlID0gZmFsc2U7XG4gICAgfVxuICAgIGlmIChvYmplY3REZWNvZGVyID09IG51bGwpIHtcbiAgICAgIG9iamVjdERlY29kZXIgPSBudWxsO1xuICAgIH1cbiAgICB0aGlzLmN1cnJlbnRMaW5lTmIgPSAtMTtcbiAgICB0aGlzLmN1cnJlbnRMaW5lID0gJyc7XG4gICAgdGhpcy5saW5lcyA9IHRoaXMuY2xlYW51cCh2YWx1ZSkuc3BsaXQoXCJcXG5cIik7XG4gICAgZGF0YSA9IG51bGw7XG4gICAgY29udGV4dCA9IHRoaXMuQ09OVEVYVF9OT05FO1xuICAgIGFsbG93T3ZlcndyaXRlID0gZmFsc2U7XG4gICAgd2hpbGUgKHRoaXMubW92ZVRvTmV4dExpbmUoKSkge1xuICAgICAgaWYgKHRoaXMuaXNDdXJyZW50TGluZUVtcHR5KCkpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBpZiAoXCJcXHRcIiA9PT0gdGhpcy5jdXJyZW50TGluZVswXSkge1xuICAgICAgICB0aHJvdyBuZXcgUGFyc2VFeGNlcHRpb24oJ0EgWUFNTCBmaWxlIGNhbm5vdCBjb250YWluIHRhYnMgYXMgaW5kZW50YXRpb24uJywgdGhpcy5nZXRSZWFsQ3VycmVudExpbmVOYigpICsgMSwgdGhpcy5jdXJyZW50TGluZSk7XG4gICAgICB9XG4gICAgICBpc1JlZiA9IG1lcmdlTm9kZSA9IGZhbHNlO1xuICAgICAgaWYgKHZhbHVlcyA9IHRoaXMuUEFUVEVSTl9TRVFVRU5DRV9JVEVNLmV4ZWModGhpcy5jdXJyZW50TGluZSkpIHtcbiAgICAgICAgaWYgKHRoaXMuQ09OVEVYVF9NQVBQSU5HID09PSBjb250ZXh0KSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFBhcnNlRXhjZXB0aW9uKCdZb3UgY2Fubm90IGRlZmluZSBhIHNlcXVlbmNlIGl0ZW0gd2hlbiBpbiBhIG1hcHBpbmcnKTtcbiAgICAgICAgfVxuICAgICAgICBjb250ZXh0ID0gdGhpcy5DT05URVhUX1NFUVVFTkNFO1xuICAgICAgICBpZiAoZGF0YSA9PSBudWxsKSB7XG4gICAgICAgICAgZGF0YSA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIGlmICgodmFsdWVzLnZhbHVlICE9IG51bGwpICYmIChtYXRjaGVzID0gdGhpcy5QQVRURVJOX0FOQ0hPUl9WQUxVRS5leGVjKHZhbHVlcy52YWx1ZSkpKSB7XG4gICAgICAgICAgaXNSZWYgPSBtYXRjaGVzLnJlZjtcbiAgICAgICAgICB2YWx1ZXMudmFsdWUgPSBtYXRjaGVzLnZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGlmICghKHZhbHVlcy52YWx1ZSAhPSBudWxsKSB8fCAnJyA9PT0gVXRpbHMudHJpbSh2YWx1ZXMudmFsdWUsICcgJykgfHwgVXRpbHMubHRyaW0odmFsdWVzLnZhbHVlLCAnICcpLmluZGV4T2YoJyMnKSA9PT0gMCkge1xuICAgICAgICAgIGlmICh0aGlzLmN1cnJlbnRMaW5lTmIgPCB0aGlzLmxpbmVzLmxlbmd0aCAtIDEgJiYgIXRoaXMuaXNOZXh0TGluZVVuSW5kZW50ZWRDb2xsZWN0aW9uKCkpIHtcbiAgICAgICAgICAgIGMgPSB0aGlzLmdldFJlYWxDdXJyZW50TGluZU5iKCkgKyAxO1xuICAgICAgICAgICAgcGFyc2VyID0gbmV3IFBhcnNlcihjKTtcbiAgICAgICAgICAgIHBhcnNlci5yZWZzID0gdGhpcy5yZWZzO1xuICAgICAgICAgICAgZGF0YS5wdXNoKHBhcnNlci5wYXJzZSh0aGlzLmdldE5leHRFbWJlZEJsb2NrKG51bGwsIHRydWUpLCBleGNlcHRpb25PbkludmFsaWRUeXBlLCBvYmplY3REZWNvZGVyKSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGRhdGEucHVzaChudWxsKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKCgocmVmID0gdmFsdWVzLmxlYWRzcGFjZXMpICE9IG51bGwgPyByZWYubGVuZ3RoIDogdm9pZCAwKSAmJiAobWF0Y2hlcyA9IHRoaXMuUEFUVEVSTl9DT01QQUNUX05PVEFUSU9OLmV4ZWModmFsdWVzLnZhbHVlKSkpIHtcbiAgICAgICAgICAgIGMgPSB0aGlzLmdldFJlYWxDdXJyZW50TGluZU5iKCk7XG4gICAgICAgICAgICBwYXJzZXIgPSBuZXcgUGFyc2VyKGMpO1xuICAgICAgICAgICAgcGFyc2VyLnJlZnMgPSB0aGlzLnJlZnM7XG4gICAgICAgICAgICBibG9jayA9IHZhbHVlcy52YWx1ZTtcbiAgICAgICAgICAgIGluZGVudCA9IHRoaXMuZ2V0Q3VycmVudExpbmVJbmRlbnRhdGlvbigpO1xuICAgICAgICAgICAgaWYgKHRoaXMuaXNOZXh0TGluZUluZGVudGVkKGZhbHNlKSkge1xuICAgICAgICAgICAgICBibG9jayArPSBcIlxcblwiICsgdGhpcy5nZXROZXh0RW1iZWRCbG9jayhpbmRlbnQgKyB2YWx1ZXMubGVhZHNwYWNlcy5sZW5ndGggKyAxLCB0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRhdGEucHVzaChwYXJzZXIucGFyc2UoYmxvY2ssIGV4Y2VwdGlvbk9uSW52YWxpZFR5cGUsIG9iamVjdERlY29kZXIpKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZGF0YS5wdXNoKHRoaXMucGFyc2VWYWx1ZSh2YWx1ZXMudmFsdWUsIGV4Y2VwdGlvbk9uSW52YWxpZFR5cGUsIG9iamVjdERlY29kZXIpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoKHZhbHVlcyA9IHRoaXMuUEFUVEVSTl9NQVBQSU5HX0lURU0uZXhlYyh0aGlzLmN1cnJlbnRMaW5lKSkgJiYgdmFsdWVzLmtleS5pbmRleE9mKCcgIycpID09PSAtMSkge1xuICAgICAgICBpZiAodGhpcy5DT05URVhUX1NFUVVFTkNFID09PSBjb250ZXh0KSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFBhcnNlRXhjZXB0aW9uKCdZb3UgY2Fubm90IGRlZmluZSBhIG1hcHBpbmcgaXRlbSB3aGVuIGluIGEgc2VxdWVuY2UnKTtcbiAgICAgICAgfVxuICAgICAgICBjb250ZXh0ID0gdGhpcy5DT05URVhUX01BUFBJTkc7XG4gICAgICAgIGlmIChkYXRhID09IG51bGwpIHtcbiAgICAgICAgICBkYXRhID0ge307XG4gICAgICAgIH1cbiAgICAgICAgSW5saW5lLmNvbmZpZ3VyZShleGNlcHRpb25PbkludmFsaWRUeXBlLCBvYmplY3REZWNvZGVyKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBrZXkgPSBJbmxpbmUucGFyc2VTY2FsYXIodmFsdWVzLmtleSk7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgZSA9IGVycm9yO1xuICAgICAgICAgIGUucGFyc2VkTGluZSA9IHRoaXMuZ2V0UmVhbEN1cnJlbnRMaW5lTmIoKSArIDE7XG4gICAgICAgICAgZS5zbmlwcGV0ID0gdGhpcy5jdXJyZW50TGluZTtcbiAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICB9XG4gICAgICAgIGlmICgnPDwnID09PSBrZXkpIHtcbiAgICAgICAgICBtZXJnZU5vZGUgPSB0cnVlO1xuICAgICAgICAgIGFsbG93T3ZlcndyaXRlID0gdHJ1ZTtcbiAgICAgICAgICBpZiAoKChyZWYxID0gdmFsdWVzLnZhbHVlKSAhPSBudWxsID8gcmVmMS5pbmRleE9mKCcqJykgOiB2b2lkIDApID09PSAwKSB7XG4gICAgICAgICAgICByZWZOYW1lID0gdmFsdWVzLnZhbHVlLnNsaWNlKDEpO1xuICAgICAgICAgICAgaWYgKHRoaXMucmVmc1tyZWZOYW1lXSA9PSBudWxsKSB7XG4gICAgICAgICAgICAgIHRocm93IG5ldyBQYXJzZUV4Y2VwdGlvbignUmVmZXJlbmNlIFwiJyArIHJlZk5hbWUgKyAnXCIgZG9lcyBub3QgZXhpc3QuJywgdGhpcy5nZXRSZWFsQ3VycmVudExpbmVOYigpICsgMSwgdGhpcy5jdXJyZW50TGluZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZWZWYWx1ZSA9IHRoaXMucmVmc1tyZWZOYW1lXTtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgcmVmVmFsdWUgIT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgIHRocm93IG5ldyBQYXJzZUV4Y2VwdGlvbignWUFNTCBtZXJnZSBrZXlzIHVzZWQgd2l0aCBhIHNjYWxhciB2YWx1ZSBpbnN0ZWFkIG9mIGFuIG9iamVjdC4nLCB0aGlzLmdldFJlYWxDdXJyZW50TGluZU5iKCkgKyAxLCB0aGlzLmN1cnJlbnRMaW5lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChyZWZWYWx1ZSBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICAgICAgICAgIGZvciAoaSA9IGogPSAwLCBsZW4gPSByZWZWYWx1ZS5sZW5ndGg7IGogPCBsZW47IGkgPSArK2opIHtcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHJlZlZhbHVlW2ldO1xuICAgICAgICAgICAgICAgIGlmIChkYXRhW25hbWUgPSBTdHJpbmcoaSldID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgIGRhdGFbbmFtZV0gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGZvciAoa2V5IGluIHJlZlZhbHVlKSB7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSByZWZWYWx1ZVtrZXldO1xuICAgICAgICAgICAgICAgIGlmIChkYXRhW2tleV0gPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgZGF0YVtrZXldID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICgodmFsdWVzLnZhbHVlICE9IG51bGwpICYmIHZhbHVlcy52YWx1ZSAhPT0gJycpIHtcbiAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZXMudmFsdWU7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB2YWx1ZSA9IHRoaXMuZ2V0TmV4dEVtYmVkQmxvY2soKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGMgPSB0aGlzLmdldFJlYWxDdXJyZW50TGluZU5iKCkgKyAxO1xuICAgICAgICAgICAgcGFyc2VyID0gbmV3IFBhcnNlcihjKTtcbiAgICAgICAgICAgIHBhcnNlci5yZWZzID0gdGhpcy5yZWZzO1xuICAgICAgICAgICAgcGFyc2VkID0gcGFyc2VyLnBhcnNlKHZhbHVlLCBleGNlcHRpb25PbkludmFsaWRUeXBlKTtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgcGFyc2VkICE9PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgICB0aHJvdyBuZXcgUGFyc2VFeGNlcHRpb24oJ1lBTUwgbWVyZ2Uga2V5cyB1c2VkIHdpdGggYSBzY2FsYXIgdmFsdWUgaW5zdGVhZCBvZiBhbiBvYmplY3QuJywgdGhpcy5nZXRSZWFsQ3VycmVudExpbmVOYigpICsgMSwgdGhpcy5jdXJyZW50TGluZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocGFyc2VkIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgICAgICAgICAgZm9yIChsID0gMCwgbGVuMSA9IHBhcnNlZC5sZW5ndGg7IGwgPCBsZW4xOyBsKyspIHtcbiAgICAgICAgICAgICAgICBwYXJzZWRJdGVtID0gcGFyc2VkW2xdO1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgcGFyc2VkSXRlbSAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBQYXJzZUV4Y2VwdGlvbignTWVyZ2UgaXRlbXMgbXVzdCBiZSBvYmplY3RzLicsIHRoaXMuZ2V0UmVhbEN1cnJlbnRMaW5lTmIoKSArIDEsIHBhcnNlZEl0ZW0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAocGFyc2VkSXRlbSBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICAgICAgICAgICAgICBmb3IgKGkgPSBtID0gMCwgbGVuMiA9IHBhcnNlZEl0ZW0ubGVuZ3RoOyBtIDwgbGVuMjsgaSA9ICsrbSkge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHBhcnNlZEl0ZW1baV07XG4gICAgICAgICAgICAgICAgICAgIGsgPSBTdHJpbmcoaSk7XG4gICAgICAgICAgICAgICAgICAgIGlmICghZGF0YS5oYXNPd25Qcm9wZXJ0eShrKSkge1xuICAgICAgICAgICAgICAgICAgICAgIGRhdGFba10gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICBmb3IgKGtleSBpbiBwYXJzZWRJdGVtKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gcGFyc2VkSXRlbVtrZXldO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWRhdGEuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICAgICAgICAgICAgICAgIGRhdGFba2V5XSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBmb3IgKGtleSBpbiBwYXJzZWQpIHtcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHBhcnNlZFtrZXldO1xuICAgICAgICAgICAgICAgIGlmICghZGF0YS5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgICAgICAgICBkYXRhW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoKHZhbHVlcy52YWx1ZSAhPSBudWxsKSAmJiAobWF0Y2hlcyA9IHRoaXMuUEFUVEVSTl9BTkNIT1JfVkFMVUUuZXhlYyh2YWx1ZXMudmFsdWUpKSkge1xuICAgICAgICAgIGlzUmVmID0gbWF0Y2hlcy5yZWY7XG4gICAgICAgICAgdmFsdWVzLnZhbHVlID0gbWF0Y2hlcy52YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVyZ2VOb2RlKSB7XG5cbiAgICAgICAgfSBlbHNlIGlmICghKHZhbHVlcy52YWx1ZSAhPSBudWxsKSB8fCAnJyA9PT0gVXRpbHMudHJpbSh2YWx1ZXMudmFsdWUsICcgJykgfHwgVXRpbHMubHRyaW0odmFsdWVzLnZhbHVlLCAnICcpLmluZGV4T2YoJyMnKSA9PT0gMCkge1xuICAgICAgICAgIGlmICghKHRoaXMuaXNOZXh0TGluZUluZGVudGVkKCkpICYmICEodGhpcy5pc05leHRMaW5lVW5JbmRlbnRlZENvbGxlY3Rpb24oKSkpIHtcbiAgICAgICAgICAgIGlmIChhbGxvd092ZXJ3cml0ZSB8fCBkYXRhW2tleV0gPT09IHZvaWQgMCkge1xuICAgICAgICAgICAgICBkYXRhW2tleV0gPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjID0gdGhpcy5nZXRSZWFsQ3VycmVudExpbmVOYigpICsgMTtcbiAgICAgICAgICAgIHBhcnNlciA9IG5ldyBQYXJzZXIoYyk7XG4gICAgICAgICAgICBwYXJzZXIucmVmcyA9IHRoaXMucmVmcztcbiAgICAgICAgICAgIHZhbCA9IHBhcnNlci5wYXJzZSh0aGlzLmdldE5leHRFbWJlZEJsb2NrKCksIGV4Y2VwdGlvbk9uSW52YWxpZFR5cGUsIG9iamVjdERlY29kZXIpO1xuICAgICAgICAgICAgaWYgKGFsbG93T3ZlcndyaXRlIHx8IGRhdGFba2V5XSA9PT0gdm9pZCAwKSB7XG4gICAgICAgICAgICAgIGRhdGFba2V5XSA9IHZhbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFsID0gdGhpcy5wYXJzZVZhbHVlKHZhbHVlcy52YWx1ZSwgZXhjZXB0aW9uT25JbnZhbGlkVHlwZSwgb2JqZWN0RGVjb2Rlcik7XG4gICAgICAgICAgaWYgKGFsbG93T3ZlcndyaXRlIHx8IGRhdGFba2V5XSA9PT0gdm9pZCAwKSB7XG4gICAgICAgICAgICBkYXRhW2tleV0gPSB2YWw7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsaW5lQ291bnQgPSB0aGlzLmxpbmVzLmxlbmd0aDtcbiAgICAgICAgaWYgKDEgPT09IGxpbmVDb3VudCB8fCAoMiA9PT0gbGluZUNvdW50ICYmIFV0aWxzLmlzRW1wdHkodGhpcy5saW5lc1sxXSkpKSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHZhbHVlID0gSW5saW5lLnBhcnNlKHRoaXMubGluZXNbMF0sIGV4Y2VwdGlvbk9uSW52YWxpZFR5cGUsIG9iamVjdERlY29kZXIpO1xuICAgICAgICAgIH0gY2F0Y2ggKGVycm9yMSkge1xuICAgICAgICAgICAgZSA9IGVycm9yMTtcbiAgICAgICAgICAgIGUucGFyc2VkTGluZSA9IHRoaXMuZ2V0UmVhbEN1cnJlbnRMaW5lTmIoKSArIDE7XG4gICAgICAgICAgICBlLnNuaXBwZXQgPSB0aGlzLmN1cnJlbnRMaW5lO1xuICAgICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICAgICAgICAgIGZpcnN0ID0gdmFsdWVbMF07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBmb3IgKGtleSBpbiB2YWx1ZSkge1xuICAgICAgICAgICAgICAgIGZpcnN0ID0gdmFsdWVba2V5XTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHR5cGVvZiBmaXJzdCA9PT0gJ3N0cmluZycgJiYgZmlyc3QuaW5kZXhPZignKicpID09PSAwKSB7XG4gICAgICAgICAgICAgIGRhdGEgPSBbXTtcbiAgICAgICAgICAgICAgZm9yIChuID0gMCwgbGVuMyA9IHZhbHVlLmxlbmd0aDsgbiA8IGxlbjM7IG4rKykge1xuICAgICAgICAgICAgICAgIGFsaWFzID0gdmFsdWVbbl07XG4gICAgICAgICAgICAgICAgZGF0YS5wdXNoKHRoaXMucmVmc1thbGlhcy5zbGljZSgxKV0pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHZhbHVlID0gZGF0YTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9IGVsc2UgaWYgKChyZWYyID0gVXRpbHMubHRyaW0odmFsdWUpLmNoYXJBdCgwKSkgPT09ICdbJyB8fCByZWYyID09PSAneycpIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIElubGluZS5wYXJzZSh2YWx1ZSwgZXhjZXB0aW9uT25JbnZhbGlkVHlwZSwgb2JqZWN0RGVjb2Rlcik7XG4gICAgICAgICAgfSBjYXRjaCAoZXJyb3IyKSB7XG4gICAgICAgICAgICBlID0gZXJyb3IyO1xuICAgICAgICAgICAgZS5wYXJzZWRMaW5lID0gdGhpcy5nZXRSZWFsQ3VycmVudExpbmVOYigpICsgMTtcbiAgICAgICAgICAgIGUuc25pcHBldCA9IHRoaXMuY3VycmVudExpbmU7XG4gICAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBuZXcgUGFyc2VFeGNlcHRpb24oJ1VuYWJsZSB0byBwYXJzZS4nLCB0aGlzLmdldFJlYWxDdXJyZW50TGluZU5iKCkgKyAxLCB0aGlzLmN1cnJlbnRMaW5lKTtcbiAgICAgIH1cbiAgICAgIGlmIChpc1JlZikge1xuICAgICAgICBpZiAoZGF0YSBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICAgICAgdGhpcy5yZWZzW2lzUmVmXSA9IGRhdGFbZGF0YS5sZW5ndGggLSAxXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBsYXN0S2V5ID0gbnVsbDtcbiAgICAgICAgICBmb3IgKGtleSBpbiBkYXRhKSB7XG4gICAgICAgICAgICBsYXN0S2V5ID0ga2V5O1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzLnJlZnNbaXNSZWZdID0gZGF0YVtsYXN0S2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAoVXRpbHMuaXNFbXB0eShkYXRhKSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cbiAgfTtcblxuICBQYXJzZXIucHJvdG90eXBlLmdldFJlYWxDdXJyZW50TGluZU5iID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuY3VycmVudExpbmVOYiArIHRoaXMub2Zmc2V0O1xuICB9O1xuXG4gIFBhcnNlci5wcm90b3R5cGUuZ2V0Q3VycmVudExpbmVJbmRlbnRhdGlvbiA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLmN1cnJlbnRMaW5lLmxlbmd0aCAtIFV0aWxzLmx0cmltKHRoaXMuY3VycmVudExpbmUsICcgJykubGVuZ3RoO1xuICB9O1xuXG4gIFBhcnNlci5wcm90b3R5cGUuZ2V0TmV4dEVtYmVkQmxvY2sgPSBmdW5jdGlvbihpbmRlbnRhdGlvbiwgaW5jbHVkZVVuaW5kZW50ZWRDb2xsZWN0aW9uKSB7XG4gICAgdmFyIGRhdGEsIGluZGVudCwgaXNJdFVuaW5kZW50ZWRDb2xsZWN0aW9uLCBuZXdJbmRlbnQsIHJlbW92ZUNvbW1lbnRzLCByZW1vdmVDb21tZW50c1BhdHRlcm4sIHVuaW5kZW50ZWRFbWJlZEJsb2NrO1xuICAgIGlmIChpbmRlbnRhdGlvbiA9PSBudWxsKSB7XG4gICAgICBpbmRlbnRhdGlvbiA9IG51bGw7XG4gICAgfVxuICAgIGlmIChpbmNsdWRlVW5pbmRlbnRlZENvbGxlY3Rpb24gPT0gbnVsbCkge1xuICAgICAgaW5jbHVkZVVuaW5kZW50ZWRDb2xsZWN0aW9uID0gZmFsc2U7XG4gICAgfVxuICAgIHRoaXMubW92ZVRvTmV4dExpbmUoKTtcbiAgICBpZiAoaW5kZW50YXRpb24gPT0gbnVsbCkge1xuICAgICAgbmV3SW5kZW50ID0gdGhpcy5nZXRDdXJyZW50TGluZUluZGVudGF0aW9uKCk7XG4gICAgICB1bmluZGVudGVkRW1iZWRCbG9jayA9IHRoaXMuaXNTdHJpbmdVbkluZGVudGVkQ29sbGVjdGlvbkl0ZW0odGhpcy5jdXJyZW50TGluZSk7XG4gICAgICBpZiAoISh0aGlzLmlzQ3VycmVudExpbmVFbXB0eSgpKSAmJiAwID09PSBuZXdJbmRlbnQgJiYgIXVuaW5kZW50ZWRFbWJlZEJsb2NrKSB7XG4gICAgICAgIHRocm93IG5ldyBQYXJzZUV4Y2VwdGlvbignSW5kZW50YXRpb24gcHJvYmxlbS4nLCB0aGlzLmdldFJlYWxDdXJyZW50TGluZU5iKCkgKyAxLCB0aGlzLmN1cnJlbnRMaW5lKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgbmV3SW5kZW50ID0gaW5kZW50YXRpb247XG4gICAgfVxuICAgIGRhdGEgPSBbdGhpcy5jdXJyZW50TGluZS5zbGljZShuZXdJbmRlbnQpXTtcbiAgICBpZiAoIWluY2x1ZGVVbmluZGVudGVkQ29sbGVjdGlvbikge1xuICAgICAgaXNJdFVuaW5kZW50ZWRDb2xsZWN0aW9uID0gdGhpcy5pc1N0cmluZ1VuSW5kZW50ZWRDb2xsZWN0aW9uSXRlbSh0aGlzLmN1cnJlbnRMaW5lKTtcbiAgICB9XG4gICAgcmVtb3ZlQ29tbWVudHNQYXR0ZXJuID0gdGhpcy5QQVRURVJOX0ZPTERFRF9TQ0FMQVJfRU5EO1xuICAgIHJlbW92ZUNvbW1lbnRzID0gIXJlbW92ZUNvbW1lbnRzUGF0dGVybi50ZXN0KHRoaXMuY3VycmVudExpbmUpO1xuICAgIHdoaWxlICh0aGlzLm1vdmVUb05leHRMaW5lKCkpIHtcbiAgICAgIGluZGVudCA9IHRoaXMuZ2V0Q3VycmVudExpbmVJbmRlbnRhdGlvbigpO1xuICAgICAgaWYgKGluZGVudCA9PT0gbmV3SW5kZW50KSB7XG4gICAgICAgIHJlbW92ZUNvbW1lbnRzID0gIXJlbW92ZUNvbW1lbnRzUGF0dGVybi50ZXN0KHRoaXMuY3VycmVudExpbmUpO1xuICAgICAgfVxuICAgICAgaWYgKGlzSXRVbmluZGVudGVkQ29sbGVjdGlvbiAmJiAhdGhpcy5pc1N0cmluZ1VuSW5kZW50ZWRDb2xsZWN0aW9uSXRlbSh0aGlzLmN1cnJlbnRMaW5lKSAmJiBpbmRlbnQgPT09IG5ld0luZGVudCkge1xuICAgICAgICB0aGlzLm1vdmVUb1ByZXZpb3VzTGluZSgpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLmlzQ3VycmVudExpbmVCbGFuaygpKSB7XG4gICAgICAgIGRhdGEucHVzaCh0aGlzLmN1cnJlbnRMaW5lLnNsaWNlKG5ld0luZGVudCkpO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGlmIChyZW1vdmVDb21tZW50cyAmJiB0aGlzLmlzQ3VycmVudExpbmVDb21tZW50KCkpIHtcbiAgICAgICAgaWYgKGluZGVudCA9PT0gbmV3SW5kZW50KSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChpbmRlbnQgPj0gbmV3SW5kZW50KSB7XG4gICAgICAgIGRhdGEucHVzaCh0aGlzLmN1cnJlbnRMaW5lLnNsaWNlKG5ld0luZGVudCkpO1xuICAgICAgfSBlbHNlIGlmIChVdGlscy5sdHJpbSh0aGlzLmN1cnJlbnRMaW5lKS5jaGFyQXQoMCkgPT09ICcjJykge1xuXG4gICAgICB9IGVsc2UgaWYgKDAgPT09IGluZGVudCkge1xuICAgICAgICB0aGlzLm1vdmVUb1ByZXZpb3VzTGluZSgpO1xuICAgICAgICBicmVhaztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBQYXJzZUV4Y2VwdGlvbignSW5kZW50YXRpb24gcHJvYmxlbS4nLCB0aGlzLmdldFJlYWxDdXJyZW50TGluZU5iKCkgKyAxLCB0aGlzLmN1cnJlbnRMaW5lKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGRhdGEuam9pbihcIlxcblwiKTtcbiAgfTtcblxuICBQYXJzZXIucHJvdG90eXBlLm1vdmVUb05leHRMaW5lID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMuY3VycmVudExpbmVOYiA+PSB0aGlzLmxpbmVzLmxlbmd0aCAtIDEpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgdGhpcy5jdXJyZW50TGluZSA9IHRoaXMubGluZXNbKyt0aGlzLmN1cnJlbnRMaW5lTmJdO1xuICAgIHJldHVybiB0cnVlO1xuICB9O1xuXG4gIFBhcnNlci5wcm90b3R5cGUubW92ZVRvUHJldmlvdXNMaW5lID0gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5jdXJyZW50TGluZSA9IHRoaXMubGluZXNbLS10aGlzLmN1cnJlbnRMaW5lTmJdO1xuICB9O1xuXG4gIFBhcnNlci5wcm90b3R5cGUucGFyc2VWYWx1ZSA9IGZ1bmN0aW9uKHZhbHVlLCBleGNlcHRpb25PbkludmFsaWRUeXBlLCBvYmplY3REZWNvZGVyKSB7XG4gICAgdmFyIGUsIGVycm9yLCBlcnJvcjEsIGZvbGRlZEluZGVudCwgbWF0Y2hlcywgbW9kaWZpZXJzLCBwb3MsIHJlZiwgcmVmMSwgdmFsO1xuICAgIGlmICgwID09PSB2YWx1ZS5pbmRleE9mKCcqJykpIHtcbiAgICAgIHBvcyA9IHZhbHVlLmluZGV4T2YoJyMnKTtcbiAgICAgIGlmIChwb3MgIT09IC0xKSB7XG4gICAgICAgIHZhbHVlID0gdmFsdWUuc3Vic3RyKDEsIHBvcyAtIDIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFsdWUgPSB2YWx1ZS5zbGljZSgxKTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLnJlZnNbdmFsdWVdID09PSB2b2lkIDApIHtcbiAgICAgICAgdGhyb3cgbmV3IFBhcnNlRXhjZXB0aW9uKCdSZWZlcmVuY2UgXCInICsgdmFsdWUgKyAnXCIgZG9lcyBub3QgZXhpc3QuJywgdGhpcy5jdXJyZW50TGluZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5yZWZzW3ZhbHVlXTtcbiAgICB9XG4gICAgaWYgKG1hdGNoZXMgPSB0aGlzLlBBVFRFUk5fRk9MREVEX1NDQUxBUl9BTEwuZXhlYyh2YWx1ZSkpIHtcbiAgICAgIG1vZGlmaWVycyA9IChyZWYgPSBtYXRjaGVzLm1vZGlmaWVycykgIT0gbnVsbCA/IHJlZiA6ICcnO1xuICAgICAgZm9sZGVkSW5kZW50ID0gTWF0aC5hYnMocGFyc2VJbnQobW9kaWZpZXJzKSk7XG4gICAgICBpZiAoaXNOYU4oZm9sZGVkSW5kZW50KSkge1xuICAgICAgICBmb2xkZWRJbmRlbnQgPSAwO1xuICAgICAgfVxuICAgICAgdmFsID0gdGhpcy5wYXJzZUZvbGRlZFNjYWxhcihtYXRjaGVzLnNlcGFyYXRvciwgdGhpcy5QQVRURVJOX0RFQ0lNQUwucmVwbGFjZShtb2RpZmllcnMsICcnKSwgZm9sZGVkSW5kZW50KTtcbiAgICAgIGlmIChtYXRjaGVzLnR5cGUgIT0gbnVsbCkge1xuICAgICAgICBJbmxpbmUuY29uZmlndXJlKGV4Y2VwdGlvbk9uSW52YWxpZFR5cGUsIG9iamVjdERlY29kZXIpO1xuICAgICAgICByZXR1cm4gSW5saW5lLnBhcnNlU2NhbGFyKG1hdGNoZXMudHlwZSArICcgJyArIHZhbCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdmFsO1xuICAgICAgfVxuICAgIH1cbiAgICB0cnkge1xuICAgICAgcmV0dXJuIElubGluZS5wYXJzZSh2YWx1ZSwgZXhjZXB0aW9uT25JbnZhbGlkVHlwZSwgb2JqZWN0RGVjb2Rlcik7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGUgPSBlcnJvcjtcbiAgICAgIGlmICgoKHJlZjEgPSB2YWx1ZS5jaGFyQXQoMCkpID09PSAnWycgfHwgcmVmMSA9PT0gJ3snKSAmJiBlIGluc3RhbmNlb2YgUGFyc2VFeGNlcHRpb24gJiYgdGhpcy5pc05leHRMaW5lSW5kZW50ZWQoKSkge1xuICAgICAgICB2YWx1ZSArPSBcIlxcblwiICsgdGhpcy5nZXROZXh0RW1iZWRCbG9jaygpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHJldHVybiBJbmxpbmUucGFyc2UodmFsdWUsIGV4Y2VwdGlvbk9uSW52YWxpZFR5cGUsIG9iamVjdERlY29kZXIpO1xuICAgICAgICB9IGNhdGNoIChlcnJvcjEpIHtcbiAgICAgICAgICBlID0gZXJyb3IxO1xuICAgICAgICAgIGUucGFyc2VkTGluZSA9IHRoaXMuZ2V0UmVhbEN1cnJlbnRMaW5lTmIoKSArIDE7XG4gICAgICAgICAgZS5zbmlwcGV0ID0gdGhpcy5jdXJyZW50TGluZTtcbiAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlLnBhcnNlZExpbmUgPSB0aGlzLmdldFJlYWxDdXJyZW50TGluZU5iKCkgKyAxO1xuICAgICAgICBlLnNuaXBwZXQgPSB0aGlzLmN1cnJlbnRMaW5lO1xuICAgICAgICB0aHJvdyBlO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBQYXJzZXIucHJvdG90eXBlLnBhcnNlRm9sZGVkU2NhbGFyID0gZnVuY3Rpb24oc2VwYXJhdG9yLCBpbmRpY2F0b3IsIGluZGVudGF0aW9uKSB7XG4gICAgdmFyIGlzQ3VycmVudExpbmVCbGFuaywgaiwgbGVuLCBsaW5lLCBtYXRjaGVzLCBuZXdUZXh0LCBub3RFT0YsIHBhdHRlcm4sIHJlZiwgdGV4dDtcbiAgICBpZiAoaW5kaWNhdG9yID09IG51bGwpIHtcbiAgICAgIGluZGljYXRvciA9ICcnO1xuICAgIH1cbiAgICBpZiAoaW5kZW50YXRpb24gPT0gbnVsbCkge1xuICAgICAgaW5kZW50YXRpb24gPSAwO1xuICAgIH1cbiAgICBub3RFT0YgPSB0aGlzLm1vdmVUb05leHRMaW5lKCk7XG4gICAgaWYgKCFub3RFT0YpIHtcbiAgICAgIHJldHVybiAnJztcbiAgICB9XG4gICAgaXNDdXJyZW50TGluZUJsYW5rID0gdGhpcy5pc0N1cnJlbnRMaW5lQmxhbmsoKTtcbiAgICB0ZXh0ID0gJyc7XG4gICAgd2hpbGUgKG5vdEVPRiAmJiBpc0N1cnJlbnRMaW5lQmxhbmspIHtcbiAgICAgIGlmIChub3RFT0YgPSB0aGlzLm1vdmVUb05leHRMaW5lKCkpIHtcbiAgICAgICAgdGV4dCArPSBcIlxcblwiO1xuICAgICAgICBpc0N1cnJlbnRMaW5lQmxhbmsgPSB0aGlzLmlzQ3VycmVudExpbmVCbGFuaygpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoMCA9PT0gaW5kZW50YXRpb24pIHtcbiAgICAgIGlmIChtYXRjaGVzID0gdGhpcy5QQVRURVJOX0lOREVOVF9TUEFDRVMuZXhlYyh0aGlzLmN1cnJlbnRMaW5lKSkge1xuICAgICAgICBpbmRlbnRhdGlvbiA9IG1hdGNoZXNbMF0ubGVuZ3RoO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoaW5kZW50YXRpb24gPiAwKSB7XG4gICAgICBwYXR0ZXJuID0gdGhpcy5QQVRURVJOX0ZPTERFRF9TQ0FMQVJfQllfSU5ERU5UQVRJT05baW5kZW50YXRpb25dO1xuICAgICAgaWYgKHBhdHRlcm4gPT0gbnVsbCkge1xuICAgICAgICBwYXR0ZXJuID0gbmV3IFBhdHRlcm4oJ14geycgKyBpbmRlbnRhdGlvbiArICd9KC4qKSQnKTtcbiAgICAgICAgUGFyc2VyLnByb3RvdHlwZS5QQVRURVJOX0ZPTERFRF9TQ0FMQVJfQllfSU5ERU5UQVRJT05baW5kZW50YXRpb25dID0gcGF0dGVybjtcbiAgICAgIH1cbiAgICAgIHdoaWxlIChub3RFT0YgJiYgKGlzQ3VycmVudExpbmVCbGFuayB8fCAobWF0Y2hlcyA9IHBhdHRlcm4uZXhlYyh0aGlzLmN1cnJlbnRMaW5lKSkpKSB7XG4gICAgICAgIGlmIChpc0N1cnJlbnRMaW5lQmxhbmspIHtcbiAgICAgICAgICB0ZXh0ICs9IHRoaXMuY3VycmVudExpbmUuc2xpY2UoaW5kZW50YXRpb24pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRleHQgKz0gbWF0Y2hlc1sxXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobm90RU9GID0gdGhpcy5tb3ZlVG9OZXh0TGluZSgpKSB7XG4gICAgICAgICAgdGV4dCArPSBcIlxcblwiO1xuICAgICAgICAgIGlzQ3VycmVudExpbmVCbGFuayA9IHRoaXMuaXNDdXJyZW50TGluZUJsYW5rKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKG5vdEVPRikge1xuICAgICAgdGV4dCArPSBcIlxcblwiO1xuICAgIH1cbiAgICBpZiAobm90RU9GKSB7XG4gICAgICB0aGlzLm1vdmVUb1ByZXZpb3VzTGluZSgpO1xuICAgIH1cbiAgICBpZiAoJz4nID09PSBzZXBhcmF0b3IpIHtcbiAgICAgIG5ld1RleHQgPSAnJztcbiAgICAgIHJlZiA9IHRleHQuc3BsaXQoXCJcXG5cIik7XG4gICAgICBmb3IgKGogPSAwLCBsZW4gPSByZWYubGVuZ3RoOyBqIDwgbGVuOyBqKyspIHtcbiAgICAgICAgbGluZSA9IHJlZltqXTtcbiAgICAgICAgaWYgKGxpbmUubGVuZ3RoID09PSAwIHx8IGxpbmUuY2hhckF0KDApID09PSAnICcpIHtcbiAgICAgICAgICBuZXdUZXh0ID0gVXRpbHMucnRyaW0obmV3VGV4dCwgJyAnKSArIGxpbmUgKyBcIlxcblwiO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG5ld1RleHQgKz0gbGluZSArICcgJztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdGV4dCA9IG5ld1RleHQ7XG4gICAgfVxuICAgIGlmICgnKycgIT09IGluZGljYXRvcikge1xuICAgICAgdGV4dCA9IFV0aWxzLnJ0cmltKHRleHQpO1xuICAgIH1cbiAgICBpZiAoJycgPT09IGluZGljYXRvcikge1xuICAgICAgdGV4dCA9IHRoaXMuUEFUVEVSTl9UUkFJTElOR19MSU5FUy5yZXBsYWNlKHRleHQsIFwiXFxuXCIpO1xuICAgIH0gZWxzZSBpZiAoJy0nID09PSBpbmRpY2F0b3IpIHtcbiAgICAgIHRleHQgPSB0aGlzLlBBVFRFUk5fVFJBSUxJTkdfTElORVMucmVwbGFjZSh0ZXh0LCAnJyk7XG4gICAgfVxuICAgIHJldHVybiB0ZXh0O1xuICB9O1xuXG4gIFBhcnNlci5wcm90b3R5cGUuaXNOZXh0TGluZUluZGVudGVkID0gZnVuY3Rpb24oaWdub3JlQ29tbWVudHMpIHtcbiAgICB2YXIgRU9GLCBjdXJyZW50SW5kZW50YXRpb24sIHJldDtcbiAgICBpZiAoaWdub3JlQ29tbWVudHMgPT0gbnVsbCkge1xuICAgICAgaWdub3JlQ29tbWVudHMgPSB0cnVlO1xuICAgIH1cbiAgICBjdXJyZW50SW5kZW50YXRpb24gPSB0aGlzLmdldEN1cnJlbnRMaW5lSW5kZW50YXRpb24oKTtcbiAgICBFT0YgPSAhdGhpcy5tb3ZlVG9OZXh0TGluZSgpO1xuICAgIGlmIChpZ25vcmVDb21tZW50cykge1xuICAgICAgd2hpbGUgKCFFT0YgJiYgdGhpcy5pc0N1cnJlbnRMaW5lRW1wdHkoKSkge1xuICAgICAgICBFT0YgPSAhdGhpcy5tb3ZlVG9OZXh0TGluZSgpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB3aGlsZSAoIUVPRiAmJiB0aGlzLmlzQ3VycmVudExpbmVCbGFuaygpKSB7XG4gICAgICAgIEVPRiA9ICF0aGlzLm1vdmVUb05leHRMaW5lKCk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChFT0YpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0ID0gZmFsc2U7XG4gICAgaWYgKHRoaXMuZ2V0Q3VycmVudExpbmVJbmRlbnRhdGlvbigpID4gY3VycmVudEluZGVudGF0aW9uKSB7XG4gICAgICByZXQgPSB0cnVlO1xuICAgIH1cbiAgICB0aGlzLm1vdmVUb1ByZXZpb3VzTGluZSgpO1xuICAgIHJldHVybiByZXQ7XG4gIH07XG5cbiAgUGFyc2VyLnByb3RvdHlwZS5pc0N1cnJlbnRMaW5lRW1wdHkgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgdHJpbW1lZExpbmU7XG4gICAgdHJpbW1lZExpbmUgPSBVdGlscy50cmltKHRoaXMuY3VycmVudExpbmUsICcgJyk7XG4gICAgcmV0dXJuIHRyaW1tZWRMaW5lLmxlbmd0aCA9PT0gMCB8fCB0cmltbWVkTGluZS5jaGFyQXQoMCkgPT09ICcjJztcbiAgfTtcblxuICBQYXJzZXIucHJvdG90eXBlLmlzQ3VycmVudExpbmVCbGFuayA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiAnJyA9PT0gVXRpbHMudHJpbSh0aGlzLmN1cnJlbnRMaW5lLCAnICcpO1xuICB9O1xuXG4gIFBhcnNlci5wcm90b3R5cGUuaXNDdXJyZW50TGluZUNvbW1lbnQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgbHRyaW1tZWRMaW5lO1xuICAgIGx0cmltbWVkTGluZSA9IFV0aWxzLmx0cmltKHRoaXMuY3VycmVudExpbmUsICcgJyk7XG4gICAgcmV0dXJuIGx0cmltbWVkTGluZS5jaGFyQXQoMCkgPT09ICcjJztcbiAgfTtcblxuICBQYXJzZXIucHJvdG90eXBlLmNsZWFudXAgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHZhciBjb3VudCwgaSwgaW5kZW50LCBqLCBsLCBsZW4sIGxlbjEsIGxpbmUsIGxpbmVzLCByZWYsIHJlZjEsIHJlZjIsIHNtYWxsZXN0SW5kZW50LCB0cmltbWVkVmFsdWU7XG4gICAgaWYgKHZhbHVlLmluZGV4T2YoXCJcXHJcIikgIT09IC0xKSB7XG4gICAgICB2YWx1ZSA9IHZhbHVlLnNwbGl0KFwiXFxyXFxuXCIpLmpvaW4oXCJcXG5cIikuc3BsaXQoXCJcXHJcIikuam9pbihcIlxcblwiKTtcbiAgICB9XG4gICAgY291bnQgPSAwO1xuICAgIHJlZiA9IHRoaXMuUEFUVEVSTl9ZQU1MX0hFQURFUi5yZXBsYWNlQWxsKHZhbHVlLCAnJyksIHZhbHVlID0gcmVmWzBdLCBjb3VudCA9IHJlZlsxXTtcbiAgICB0aGlzLm9mZnNldCArPSBjb3VudDtcbiAgICByZWYxID0gdGhpcy5QQVRURVJOX0xFQURJTkdfQ09NTUVOVFMucmVwbGFjZUFsbCh2YWx1ZSwgJycsIDEpLCB0cmltbWVkVmFsdWUgPSByZWYxWzBdLCBjb3VudCA9IHJlZjFbMV07XG4gICAgaWYgKGNvdW50ID09PSAxKSB7XG4gICAgICB0aGlzLm9mZnNldCArPSBVdGlscy5zdWJTdHJDb3VudCh2YWx1ZSwgXCJcXG5cIikgLSBVdGlscy5zdWJTdHJDb3VudCh0cmltbWVkVmFsdWUsIFwiXFxuXCIpO1xuICAgICAgdmFsdWUgPSB0cmltbWVkVmFsdWU7XG4gICAgfVxuICAgIHJlZjIgPSB0aGlzLlBBVFRFUk5fRE9DVU1FTlRfTUFSS0VSX1NUQVJULnJlcGxhY2VBbGwodmFsdWUsICcnLCAxKSwgdHJpbW1lZFZhbHVlID0gcmVmMlswXSwgY291bnQgPSByZWYyWzFdO1xuICAgIGlmIChjb3VudCA9PT0gMSkge1xuICAgICAgdGhpcy5vZmZzZXQgKz0gVXRpbHMuc3ViU3RyQ291bnQodmFsdWUsIFwiXFxuXCIpIC0gVXRpbHMuc3ViU3RyQ291bnQodHJpbW1lZFZhbHVlLCBcIlxcblwiKTtcbiAgICAgIHZhbHVlID0gdHJpbW1lZFZhbHVlO1xuICAgICAgdmFsdWUgPSB0aGlzLlBBVFRFUk5fRE9DVU1FTlRfTUFSS0VSX0VORC5yZXBsYWNlKHZhbHVlLCAnJyk7XG4gICAgfVxuICAgIGxpbmVzID0gdmFsdWUuc3BsaXQoXCJcXG5cIik7XG4gICAgc21hbGxlc3RJbmRlbnQgPSAtMTtcbiAgICBmb3IgKGogPSAwLCBsZW4gPSBsaW5lcy5sZW5ndGg7IGogPCBsZW47IGorKykge1xuICAgICAgbGluZSA9IGxpbmVzW2pdO1xuICAgICAgaWYgKFV0aWxzLnRyaW0obGluZSwgJyAnKS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBpbmRlbnQgPSBsaW5lLmxlbmd0aCAtIFV0aWxzLmx0cmltKGxpbmUpLmxlbmd0aDtcbiAgICAgIGlmIChzbWFsbGVzdEluZGVudCA9PT0gLTEgfHwgaW5kZW50IDwgc21hbGxlc3RJbmRlbnQpIHtcbiAgICAgICAgc21hbGxlc3RJbmRlbnQgPSBpbmRlbnQ7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChzbWFsbGVzdEluZGVudCA+IDApIHtcbiAgICAgIGZvciAoaSA9IGwgPSAwLCBsZW4xID0gbGluZXMubGVuZ3RoOyBsIDwgbGVuMTsgaSA9ICsrbCkge1xuICAgICAgICBsaW5lID0gbGluZXNbaV07XG4gICAgICAgIGxpbmVzW2ldID0gbGluZS5zbGljZShzbWFsbGVzdEluZGVudCk7XG4gICAgICB9XG4gICAgICB2YWx1ZSA9IGxpbmVzLmpvaW4oXCJcXG5cIik7XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZTtcbiAgfTtcblxuICBQYXJzZXIucHJvdG90eXBlLmlzTmV4dExpbmVVbkluZGVudGVkQ29sbGVjdGlvbiA9IGZ1bmN0aW9uKGN1cnJlbnRJbmRlbnRhdGlvbikge1xuICAgIHZhciBub3RFT0YsIHJldDtcbiAgICBpZiAoY3VycmVudEluZGVudGF0aW9uID09IG51bGwpIHtcbiAgICAgIGN1cnJlbnRJbmRlbnRhdGlvbiA9IG51bGw7XG4gICAgfVxuICAgIGlmIChjdXJyZW50SW5kZW50YXRpb24gPT0gbnVsbCkge1xuICAgICAgY3VycmVudEluZGVudGF0aW9uID0gdGhpcy5nZXRDdXJyZW50TGluZUluZGVudGF0aW9uKCk7XG4gICAgfVxuICAgIG5vdEVPRiA9IHRoaXMubW92ZVRvTmV4dExpbmUoKTtcbiAgICB3aGlsZSAobm90RU9GICYmIHRoaXMuaXNDdXJyZW50TGluZUVtcHR5KCkpIHtcbiAgICAgIG5vdEVPRiA9IHRoaXMubW92ZVRvTmV4dExpbmUoKTtcbiAgICB9XG4gICAgaWYgKGZhbHNlID09PSBub3RFT0YpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0ID0gZmFsc2U7XG4gICAgaWYgKHRoaXMuZ2V0Q3VycmVudExpbmVJbmRlbnRhdGlvbigpID09PSBjdXJyZW50SW5kZW50YXRpb24gJiYgdGhpcy5pc1N0cmluZ1VuSW5kZW50ZWRDb2xsZWN0aW9uSXRlbSh0aGlzLmN1cnJlbnRMaW5lKSkge1xuICAgICAgcmV0ID0gdHJ1ZTtcbiAgICB9XG4gICAgdGhpcy5tb3ZlVG9QcmV2aW91c0xpbmUoKTtcbiAgICByZXR1cm4gcmV0O1xuICB9O1xuXG4gIFBhcnNlci5wcm90b3R5cGUuaXNTdHJpbmdVbkluZGVudGVkQ29sbGVjdGlvbkl0ZW0gPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5jdXJyZW50TGluZSA9PT0gJy0nIHx8IHRoaXMuY3VycmVudExpbmUuc2xpY2UoMCwgMikgPT09ICctICc7XG4gIH07XG5cbiAgcmV0dXJuIFBhcnNlcjtcblxufSkoKTtcblxubW9kdWxlLmV4cG9ydHMgPSBQYXJzZXI7XG4iLCIvLyBHZW5lcmF0ZWQgYnkgQ29mZmVlU2NyaXB0IDEuMTAuMFxudmFyIFBhdHRlcm47XG5cblBhdHRlcm4gPSAoZnVuY3Rpb24oKSB7XG4gIFBhdHRlcm4ucHJvdG90eXBlLnJlZ2V4ID0gbnVsbDtcblxuICBQYXR0ZXJuLnByb3RvdHlwZS5yYXdSZWdleCA9IG51bGw7XG5cbiAgUGF0dGVybi5wcm90b3R5cGUuY2xlYW5lZFJlZ2V4ID0gbnVsbDtcblxuICBQYXR0ZXJuLnByb3RvdHlwZS5tYXBwaW5nID0gbnVsbDtcblxuICBmdW5jdGlvbiBQYXR0ZXJuKHJhd1JlZ2V4LCBtb2RpZmllcnMpIHtcbiAgICB2YXIgX2NoYXIsIGNhcHR1cmluZ0JyYWNrZXROdW1iZXIsIGNsZWFuZWRSZWdleCwgaSwgbGVuLCBtYXBwaW5nLCBuYW1lLCBwYXJ0LCBzdWJDaGFyO1xuICAgIGlmIChtb2RpZmllcnMgPT0gbnVsbCkge1xuICAgICAgbW9kaWZpZXJzID0gJyc7XG4gICAgfVxuICAgIGNsZWFuZWRSZWdleCA9ICcnO1xuICAgIGxlbiA9IHJhd1JlZ2V4Lmxlbmd0aDtcbiAgICBtYXBwaW5nID0gbnVsbDtcbiAgICBjYXB0dXJpbmdCcmFja2V0TnVtYmVyID0gMDtcbiAgICBpID0gMDtcbiAgICB3aGlsZSAoaSA8IGxlbikge1xuICAgICAgX2NoYXIgPSByYXdSZWdleC5jaGFyQXQoaSk7XG4gICAgICBpZiAoX2NoYXIgPT09ICdcXFxcJykge1xuICAgICAgICBjbGVhbmVkUmVnZXggKz0gcmF3UmVnZXguc2xpY2UoaSwgKyhpICsgMSkgKyAxIHx8IDllOSk7XG4gICAgICAgIGkrKztcbiAgICAgIH0gZWxzZSBpZiAoX2NoYXIgPT09ICcoJykge1xuICAgICAgICBpZiAoaSA8IGxlbiAtIDIpIHtcbiAgICAgICAgICBwYXJ0ID0gcmF3UmVnZXguc2xpY2UoaSwgKyhpICsgMikgKyAxIHx8IDllOSk7XG4gICAgICAgICAgaWYgKHBhcnQgPT09ICcoPzonKSB7XG4gICAgICAgICAgICBpICs9IDI7XG4gICAgICAgICAgICBjbGVhbmVkUmVnZXggKz0gcGFydDtcbiAgICAgICAgICB9IGVsc2UgaWYgKHBhcnQgPT09ICcoPzwnKSB7XG4gICAgICAgICAgICBjYXB0dXJpbmdCcmFja2V0TnVtYmVyKys7XG4gICAgICAgICAgICBpICs9IDI7XG4gICAgICAgICAgICBuYW1lID0gJyc7XG4gICAgICAgICAgICB3aGlsZSAoaSArIDEgPCBsZW4pIHtcbiAgICAgICAgICAgICAgc3ViQ2hhciA9IHJhd1JlZ2V4LmNoYXJBdChpICsgMSk7XG4gICAgICAgICAgICAgIGlmIChzdWJDaGFyID09PSAnPicpIHtcbiAgICAgICAgICAgICAgICBjbGVhbmVkUmVnZXggKz0gJygnO1xuICAgICAgICAgICAgICAgIGkrKztcbiAgICAgICAgICAgICAgICBpZiAobmFtZS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICBpZiAobWFwcGluZyA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIG1hcHBpbmcgPSB7fTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIG1hcHBpbmdbbmFtZV0gPSBjYXB0dXJpbmdCcmFja2V0TnVtYmVyO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBuYW1lICs9IHN1YkNoYXI7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaSsrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjbGVhbmVkUmVnZXggKz0gX2NoYXI7XG4gICAgICAgICAgICBjYXB0dXJpbmdCcmFja2V0TnVtYmVyKys7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNsZWFuZWRSZWdleCArPSBfY2hhcjtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2xlYW5lZFJlZ2V4ICs9IF9jaGFyO1xuICAgICAgfVxuICAgICAgaSsrO1xuICAgIH1cbiAgICB0aGlzLnJhd1JlZ2V4ID0gcmF3UmVnZXg7XG4gICAgdGhpcy5jbGVhbmVkUmVnZXggPSBjbGVhbmVkUmVnZXg7XG4gICAgdGhpcy5yZWdleCA9IG5ldyBSZWdFeHAodGhpcy5jbGVhbmVkUmVnZXgsICdnJyArIG1vZGlmaWVycy5yZXBsYWNlKCdnJywgJycpKTtcbiAgICB0aGlzLm1hcHBpbmcgPSBtYXBwaW5nO1xuICB9XG5cbiAgUGF0dGVybi5wcm90b3R5cGUuZXhlYyA9IGZ1bmN0aW9uKHN0cikge1xuICAgIHZhciBpbmRleCwgbWF0Y2hlcywgbmFtZSwgcmVmO1xuICAgIHRoaXMucmVnZXgubGFzdEluZGV4ID0gMDtcbiAgICBtYXRjaGVzID0gdGhpcy5yZWdleC5leGVjKHN0cik7XG4gICAgaWYgKG1hdGNoZXMgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGlmICh0aGlzLm1hcHBpbmcgIT0gbnVsbCkge1xuICAgICAgcmVmID0gdGhpcy5tYXBwaW5nO1xuICAgICAgZm9yIChuYW1lIGluIHJlZikge1xuICAgICAgICBpbmRleCA9IHJlZltuYW1lXTtcbiAgICAgICAgbWF0Y2hlc1tuYW1lXSA9IG1hdGNoZXNbaW5kZXhdO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbWF0Y2hlcztcbiAgfTtcblxuICBQYXR0ZXJuLnByb3RvdHlwZS50ZXN0ID0gZnVuY3Rpb24oc3RyKSB7XG4gICAgdGhpcy5yZWdleC5sYXN0SW5kZXggPSAwO1xuICAgIHJldHVybiB0aGlzLnJlZ2V4LnRlc3Qoc3RyKTtcbiAgfTtcblxuICBQYXR0ZXJuLnByb3RvdHlwZS5yZXBsYWNlID0gZnVuY3Rpb24oc3RyLCByZXBsYWNlbWVudCkge1xuICAgIHRoaXMucmVnZXgubGFzdEluZGV4ID0gMDtcbiAgICByZXR1cm4gc3RyLnJlcGxhY2UodGhpcy5yZWdleCwgcmVwbGFjZW1lbnQpO1xuICB9O1xuXG4gIFBhdHRlcm4ucHJvdG90eXBlLnJlcGxhY2VBbGwgPSBmdW5jdGlvbihzdHIsIHJlcGxhY2VtZW50LCBsaW1pdCkge1xuICAgIHZhciBjb3VudDtcbiAgICBpZiAobGltaXQgPT0gbnVsbCkge1xuICAgICAgbGltaXQgPSAwO1xuICAgIH1cbiAgICB0aGlzLnJlZ2V4Lmxhc3RJbmRleCA9IDA7XG4gICAgY291bnQgPSAwO1xuICAgIHdoaWxlICh0aGlzLnJlZ2V4LnRlc3Qoc3RyKSAmJiAobGltaXQgPT09IDAgfHwgY291bnQgPCBsaW1pdCkpIHtcbiAgICAgIHRoaXMucmVnZXgubGFzdEluZGV4ID0gMDtcbiAgICAgIHN0ciA9IHN0ci5yZXBsYWNlKHRoaXMucmVnZXgsICcnKTtcbiAgICAgIGNvdW50Kys7XG4gICAgfVxuICAgIHJldHVybiBbc3RyLCBjb3VudF07XG4gIH07XG5cbiAgcmV0dXJuIFBhdHRlcm47XG5cbn0pKCk7XG5cbm1vZHVsZS5leHBvcnRzID0gUGF0dGVybjtcbiIsIi8vIEdlbmVyYXRlZCBieSBDb2ZmZWVTY3JpcHQgMS4xMC4wXG52YXIgUGF0dGVybiwgVW5lc2NhcGVyLCBVdGlscztcblxuVXRpbHMgPSByZXF1aXJlKCcuL1V0aWxzJyk7XG5cblBhdHRlcm4gPSByZXF1aXJlKCcuL1BhdHRlcm4nKTtcblxuVW5lc2NhcGVyID0gKGZ1bmN0aW9uKCkge1xuICBmdW5jdGlvbiBVbmVzY2FwZXIoKSB7fVxuXG4gIFVuZXNjYXBlci5QQVRURVJOX0VTQ0FQRURfQ0hBUkFDVEVSID0gbmV3IFBhdHRlcm4oJ1xcXFxcXFxcKFswYWJ0XFx0bnZmcmUgXCJcXFxcL1xcXFxcXFxcTl9MUF18eFswLTlhLWZBLUZdezJ9fHVbMC05YS1mQS1GXXs0fXxVWzAtOWEtZkEtRl17OH0pJyk7XG5cbiAgVW5lc2NhcGVyLnVuZXNjYXBlU2luZ2xlUXVvdGVkU3RyaW5nID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUucmVwbGFjZSgvXFwnXFwnL2csICdcXCcnKTtcbiAgfTtcblxuICBVbmVzY2FwZXIudW5lc2NhcGVEb3VibGVRdW90ZWRTdHJpbmcgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgIGlmICh0aGlzLl91bmVzY2FwZUNhbGxiYWNrID09IG51bGwpIHtcbiAgICAgIHRoaXMuX3VuZXNjYXBlQ2FsbGJhY2sgPSAoZnVuY3Rpb24oX3RoaXMpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKHN0cikge1xuICAgICAgICAgIHJldHVybiBfdGhpcy51bmVzY2FwZUNoYXJhY3RlcihzdHIpO1xuICAgICAgICB9O1xuICAgICAgfSkodGhpcyk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLlBBVFRFUk5fRVNDQVBFRF9DSEFSQUNURVIucmVwbGFjZSh2YWx1ZSwgdGhpcy5fdW5lc2NhcGVDYWxsYmFjayk7XG4gIH07XG5cbiAgVW5lc2NhcGVyLnVuZXNjYXBlQ2hhcmFjdGVyID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICB2YXIgY2g7XG4gICAgY2ggPSBTdHJpbmcuZnJvbUNoYXJDb2RlO1xuICAgIHN3aXRjaCAodmFsdWUuY2hhckF0KDEpKSB7XG4gICAgICBjYXNlICcwJzpcbiAgICAgICAgcmV0dXJuIGNoKDApO1xuICAgICAgY2FzZSAnYSc6XG4gICAgICAgIHJldHVybiBjaCg3KTtcbiAgICAgIGNhc2UgJ2InOlxuICAgICAgICByZXR1cm4gY2goOCk7XG4gICAgICBjYXNlICd0JzpcbiAgICAgICAgcmV0dXJuIFwiXFx0XCI7XG4gICAgICBjYXNlIFwiXFx0XCI6XG4gICAgICAgIHJldHVybiBcIlxcdFwiO1xuICAgICAgY2FzZSAnbic6XG4gICAgICAgIHJldHVybiBcIlxcblwiO1xuICAgICAgY2FzZSAndic6XG4gICAgICAgIHJldHVybiBjaCgxMSk7XG4gICAgICBjYXNlICdmJzpcbiAgICAgICAgcmV0dXJuIGNoKDEyKTtcbiAgICAgIGNhc2UgJ3InOlxuICAgICAgICByZXR1cm4gY2goMTMpO1xuICAgICAgY2FzZSAnZSc6XG4gICAgICAgIHJldHVybiBjaCgyNyk7XG4gICAgICBjYXNlICcgJzpcbiAgICAgICAgcmV0dXJuICcgJztcbiAgICAgIGNhc2UgJ1wiJzpcbiAgICAgICAgcmV0dXJuICdcIic7XG4gICAgICBjYXNlICcvJzpcbiAgICAgICAgcmV0dXJuICcvJztcbiAgICAgIGNhc2UgJ1xcXFwnOlxuICAgICAgICByZXR1cm4gJ1xcXFwnO1xuICAgICAgY2FzZSAnTic6XG4gICAgICAgIHJldHVybiBjaCgweDAwODUpO1xuICAgICAgY2FzZSAnXyc6XG4gICAgICAgIHJldHVybiBjaCgweDAwQTApO1xuICAgICAgY2FzZSAnTCc6XG4gICAgICAgIHJldHVybiBjaCgweDIwMjgpO1xuICAgICAgY2FzZSAnUCc6XG4gICAgICAgIHJldHVybiBjaCgweDIwMjkpO1xuICAgICAgY2FzZSAneCc6XG4gICAgICAgIHJldHVybiBVdGlscy51dGY4Y2hyKFV0aWxzLmhleERlYyh2YWx1ZS5zdWJzdHIoMiwgMikpKTtcbiAgICAgIGNhc2UgJ3UnOlxuICAgICAgICByZXR1cm4gVXRpbHMudXRmOGNocihVdGlscy5oZXhEZWModmFsdWUuc3Vic3RyKDIsIDQpKSk7XG4gICAgICBjYXNlICdVJzpcbiAgICAgICAgcmV0dXJuIFV0aWxzLnV0ZjhjaHIoVXRpbHMuaGV4RGVjKHZhbHVlLnN1YnN0cigyLCA4KSkpO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuICcnO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gVW5lc2NhcGVyO1xuXG59KSgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFVuZXNjYXBlcjtcbiIsIi8vIEdlbmVyYXRlZCBieSBDb2ZmZWVTY3JpcHQgMS4xMC4wXG52YXIgUGF0dGVybiwgVXRpbHM7XG5cblBhdHRlcm4gPSByZXF1aXJlKCcuL1BhdHRlcm4nKTtcblxuVXRpbHMgPSAoZnVuY3Rpb24oKSB7XG4gIGZ1bmN0aW9uIFV0aWxzKCkge31cblxuICBVdGlscy5SRUdFWF9MRUZUX1RSSU1fQllfQ0hBUiA9IHt9O1xuXG4gIFV0aWxzLlJFR0VYX1JJR0hUX1RSSU1fQllfQ0hBUiA9IHt9O1xuXG4gIFV0aWxzLlJFR0VYX1NQQUNFUyA9IC9cXHMrL2c7XG5cbiAgVXRpbHMuUkVHRVhfRElHSVRTID0gL15cXGQrJC87XG5cbiAgVXRpbHMuUkVHRVhfT0NUQUwgPSAvW14wLTddL2dpO1xuXG4gIFV0aWxzLlJFR0VYX0hFWEFERUNJTUFMID0gL1teYS1mMC05XS9naTtcblxuICBVdGlscy5QQVRURVJOX0RBVEUgPSBuZXcgUGF0dGVybignXicgKyAnKD88eWVhcj5bMC05XVswLTldWzAtOV1bMC05XSknICsgJy0oPzxtb250aD5bMC05XVswLTldPyknICsgJy0oPzxkYXk+WzAtOV1bMC05XT8pJyArICcoPzooPzpbVHRdfFsgXFx0XSspJyArICcoPzxob3VyPlswLTldWzAtOV0/KScgKyAnOig/PG1pbnV0ZT5bMC05XVswLTldKScgKyAnOig/PHNlY29uZD5bMC05XVswLTldKScgKyAnKD86XFwuKD88ZnJhY3Rpb24+WzAtOV0qKSk/JyArICcoPzpbIFxcdF0qKD88dHo+WnwoPzx0el9zaWduPlstK10pKD88dHpfaG91cj5bMC05XVswLTldPyknICsgJyg/OjooPzx0el9taW51dGU+WzAtOV1bMC05XSkpPykpPyk/JyArICckJywgJ2knKTtcblxuICBVdGlscy5MT0NBTF9USU1FWk9ORV9PRkZTRVQgPSBuZXcgRGF0ZSgpLmdldFRpbWV6b25lT2Zmc2V0KCkgKiA2MCAqIDEwMDA7XG5cbiAgVXRpbHMudHJpbSA9IGZ1bmN0aW9uKHN0ciwgX2NoYXIpIHtcbiAgICB2YXIgcmVnZXhMZWZ0LCByZWdleFJpZ2h0O1xuICAgIGlmIChfY2hhciA9PSBudWxsKSB7XG4gICAgICBfY2hhciA9ICdcXFxccyc7XG4gICAgfVxuICAgIHJldHVybiBzdHIudHJpbSgpO1xuICAgIHJlZ2V4TGVmdCA9IHRoaXMuUkVHRVhfTEVGVF9UUklNX0JZX0NIQVJbX2NoYXJdO1xuICAgIGlmIChyZWdleExlZnQgPT0gbnVsbCkge1xuICAgICAgdGhpcy5SRUdFWF9MRUZUX1RSSU1fQllfQ0hBUltfY2hhcl0gPSByZWdleExlZnQgPSBuZXcgUmVnRXhwKCdeJyArIF9jaGFyICsgJycgKyBfY2hhciArICcqJyk7XG4gICAgfVxuICAgIHJlZ2V4TGVmdC5sYXN0SW5kZXggPSAwO1xuICAgIHJlZ2V4UmlnaHQgPSB0aGlzLlJFR0VYX1JJR0hUX1RSSU1fQllfQ0hBUltfY2hhcl07XG4gICAgaWYgKHJlZ2V4UmlnaHQgPT0gbnVsbCkge1xuICAgICAgdGhpcy5SRUdFWF9SSUdIVF9UUklNX0JZX0NIQVJbX2NoYXJdID0gcmVnZXhSaWdodCA9IG5ldyBSZWdFeHAoX2NoYXIgKyAnJyArIF9jaGFyICsgJyokJyk7XG4gICAgfVxuICAgIHJlZ2V4UmlnaHQubGFzdEluZGV4ID0gMDtcbiAgICByZXR1cm4gc3RyLnJlcGxhY2UocmVnZXhMZWZ0LCAnJykucmVwbGFjZShyZWdleFJpZ2h0LCAnJyk7XG4gIH07XG5cbiAgVXRpbHMubHRyaW0gPSBmdW5jdGlvbihzdHIsIF9jaGFyKSB7XG4gICAgdmFyIHJlZ2V4TGVmdDtcbiAgICBpZiAoX2NoYXIgPT0gbnVsbCkge1xuICAgICAgX2NoYXIgPSAnXFxcXHMnO1xuICAgIH1cbiAgICByZWdleExlZnQgPSB0aGlzLlJFR0VYX0xFRlRfVFJJTV9CWV9DSEFSW19jaGFyXTtcbiAgICBpZiAocmVnZXhMZWZ0ID09IG51bGwpIHtcbiAgICAgIHRoaXMuUkVHRVhfTEVGVF9UUklNX0JZX0NIQVJbX2NoYXJdID0gcmVnZXhMZWZ0ID0gbmV3IFJlZ0V4cCgnXicgKyBfY2hhciArICcnICsgX2NoYXIgKyAnKicpO1xuICAgIH1cbiAgICByZWdleExlZnQubGFzdEluZGV4ID0gMDtcbiAgICByZXR1cm4gc3RyLnJlcGxhY2UocmVnZXhMZWZ0LCAnJyk7XG4gIH07XG5cbiAgVXRpbHMucnRyaW0gPSBmdW5jdGlvbihzdHIsIF9jaGFyKSB7XG4gICAgdmFyIHJlZ2V4UmlnaHQ7XG4gICAgaWYgKF9jaGFyID09IG51bGwpIHtcbiAgICAgIF9jaGFyID0gJ1xcXFxzJztcbiAgICB9XG4gICAgcmVnZXhSaWdodCA9IHRoaXMuUkVHRVhfUklHSFRfVFJJTV9CWV9DSEFSW19jaGFyXTtcbiAgICBpZiAocmVnZXhSaWdodCA9PSBudWxsKSB7XG4gICAgICB0aGlzLlJFR0VYX1JJR0hUX1RSSU1fQllfQ0hBUltfY2hhcl0gPSByZWdleFJpZ2h0ID0gbmV3IFJlZ0V4cChfY2hhciArICcnICsgX2NoYXIgKyAnKiQnKTtcbiAgICB9XG4gICAgcmVnZXhSaWdodC5sYXN0SW5kZXggPSAwO1xuICAgIHJldHVybiBzdHIucmVwbGFjZShyZWdleFJpZ2h0LCAnJyk7XG4gIH07XG5cbiAgVXRpbHMuaXNFbXB0eSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuICF2YWx1ZSB8fCB2YWx1ZSA9PT0gJycgfHwgdmFsdWUgPT09ICcwJyB8fCAodmFsdWUgaW5zdGFuY2VvZiBBcnJheSAmJiB2YWx1ZS5sZW5ndGggPT09IDApO1xuICB9O1xuXG4gIFV0aWxzLnN1YlN0ckNvdW50ID0gZnVuY3Rpb24oc3RyaW5nLCBzdWJTdHJpbmcsIHN0YXJ0LCBsZW5ndGgpIHtcbiAgICB2YXIgYywgaSwgaiwgbGVuLCByZWYsIHN1YmxlbjtcbiAgICBjID0gMDtcbiAgICBzdHJpbmcgPSAnJyArIHN0cmluZztcbiAgICBzdWJTdHJpbmcgPSAnJyArIHN1YlN0cmluZztcbiAgICBpZiAoc3RhcnQgIT0gbnVsbCkge1xuICAgICAgc3RyaW5nID0gc3RyaW5nLnNsaWNlKHN0YXJ0KTtcbiAgICB9XG4gICAgaWYgKGxlbmd0aCAhPSBudWxsKSB7XG4gICAgICBzdHJpbmcgPSBzdHJpbmcuc2xpY2UoMCwgbGVuZ3RoKTtcbiAgICB9XG4gICAgbGVuID0gc3RyaW5nLmxlbmd0aDtcbiAgICBzdWJsZW4gPSBzdWJTdHJpbmcubGVuZ3RoO1xuICAgIGZvciAoaSA9IGogPSAwLCByZWYgPSBsZW47IDAgPD0gcmVmID8gaiA8IHJlZiA6IGogPiByZWY7IGkgPSAwIDw9IHJlZiA/ICsraiA6IC0taikge1xuICAgICAgaWYgKHN1YlN0cmluZyA9PT0gc3RyaW5nLnNsaWNlKGksIHN1YmxlbikpIHtcbiAgICAgICAgYysrO1xuICAgICAgICBpICs9IHN1YmxlbiAtIDE7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBjO1xuICB9O1xuXG4gIFV0aWxzLmlzRGlnaXRzID0gZnVuY3Rpb24oaW5wdXQpIHtcbiAgICB0aGlzLlJFR0VYX0RJR0lUUy5sYXN0SW5kZXggPSAwO1xuICAgIHJldHVybiB0aGlzLlJFR0VYX0RJR0lUUy50ZXN0KGlucHV0KTtcbiAgfTtcblxuICBVdGlscy5vY3REZWMgPSBmdW5jdGlvbihpbnB1dCkge1xuICAgIHRoaXMuUkVHRVhfT0NUQUwubGFzdEluZGV4ID0gMDtcbiAgICByZXR1cm4gcGFyc2VJbnQoKGlucHV0ICsgJycpLnJlcGxhY2UodGhpcy5SRUdFWF9PQ1RBTCwgJycpLCA4KTtcbiAgfTtcblxuICBVdGlscy5oZXhEZWMgPSBmdW5jdGlvbihpbnB1dCkge1xuICAgIHRoaXMuUkVHRVhfSEVYQURFQ0lNQUwubGFzdEluZGV4ID0gMDtcbiAgICBpbnB1dCA9IHRoaXMudHJpbShpbnB1dCk7XG4gICAgaWYgKChpbnB1dCArICcnKS5zbGljZSgwLCAyKSA9PT0gJzB4Jykge1xuICAgICAgaW5wdXQgPSAoaW5wdXQgKyAnJykuc2xpY2UoMik7XG4gICAgfVxuICAgIHJldHVybiBwYXJzZUludCgoaW5wdXQgKyAnJykucmVwbGFjZSh0aGlzLlJFR0VYX0hFWEFERUNJTUFMLCAnJyksIDE2KTtcbiAgfTtcblxuICBVdGlscy51dGY4Y2hyID0gZnVuY3Rpb24oYykge1xuICAgIHZhciBjaDtcbiAgICBjaCA9IFN0cmluZy5mcm9tQ2hhckNvZGU7XG4gICAgaWYgKDB4ODAgPiAoYyAlPSAweDIwMDAwMCkpIHtcbiAgICAgIHJldHVybiBjaChjKTtcbiAgICB9XG4gICAgaWYgKDB4ODAwID4gYykge1xuICAgICAgcmV0dXJuIGNoKDB4QzAgfCBjID4+IDYpICsgY2goMHg4MCB8IGMgJiAweDNGKTtcbiAgICB9XG4gICAgaWYgKDB4MTAwMDAgPiBjKSB7XG4gICAgICByZXR1cm4gY2goMHhFMCB8IGMgPj4gMTIpICsgY2goMHg4MCB8IGMgPj4gNiAmIDB4M0YpICsgY2goMHg4MCB8IGMgJiAweDNGKTtcbiAgICB9XG4gICAgcmV0dXJuIGNoKDB4RjAgfCBjID4+IDE4KSArIGNoKDB4ODAgfCBjID4+IDEyICYgMHgzRikgKyBjaCgweDgwIHwgYyA+PiA2ICYgMHgzRikgKyBjaCgweDgwIHwgYyAmIDB4M0YpO1xuICB9O1xuXG4gIFV0aWxzLnBhcnNlQm9vbGVhbiA9IGZ1bmN0aW9uKGlucHV0LCBzdHJpY3QpIHtcbiAgICB2YXIgbG93ZXJJbnB1dDtcbiAgICBpZiAoc3RyaWN0ID09IG51bGwpIHtcbiAgICAgIHN0cmljdCA9IHRydWU7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgaW5wdXQgPT09ICdzdHJpbmcnKSB7XG4gICAgICBsb3dlcklucHV0ID0gaW5wdXQudG9Mb3dlckNhc2UoKTtcbiAgICAgIGlmICghc3RyaWN0KSB7XG4gICAgICAgIGlmIChsb3dlcklucHV0ID09PSAnbm8nKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAobG93ZXJJbnB1dCA9PT0gJzAnKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmIChsb3dlcklucHV0ID09PSAnZmFsc2UnKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmIChsb3dlcklucHV0ID09PSAnJykge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuICEhaW5wdXQ7XG4gIH07XG5cbiAgVXRpbHMuaXNOdW1lcmljID0gZnVuY3Rpb24oaW5wdXQpIHtcbiAgICB0aGlzLlJFR0VYX1NQQUNFUy5sYXN0SW5kZXggPSAwO1xuICAgIHJldHVybiB0eXBlb2YgaW5wdXQgPT09ICdudW1iZXInIHx8IHR5cGVvZiBpbnB1dCA9PT0gJ3N0cmluZycgJiYgIWlzTmFOKGlucHV0KSAmJiBpbnB1dC5yZXBsYWNlKHRoaXMuUkVHRVhfU1BBQ0VTLCAnJykgIT09ICcnO1xuICB9O1xuXG4gIFV0aWxzLnN0cmluZ1RvRGF0ZSA9IGZ1bmN0aW9uKHN0cikge1xuICAgIHZhciBkYXRlLCBkYXksIGZyYWN0aW9uLCBob3VyLCBpbmZvLCBtaW51dGUsIG1vbnRoLCBzZWNvbmQsIHR6X2hvdXIsIHR6X21pbnV0ZSwgdHpfb2Zmc2V0LCB5ZWFyO1xuICAgIGlmICghKHN0ciAhPSBudWxsID8gc3RyLmxlbmd0aCA6IHZvaWQgMCkpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBpbmZvID0gdGhpcy5QQVRURVJOX0RBVEUuZXhlYyhzdHIpO1xuICAgIGlmICghaW5mbykge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHllYXIgPSBwYXJzZUludChpbmZvLnllYXIsIDEwKTtcbiAgICBtb250aCA9IHBhcnNlSW50KGluZm8ubW9udGgsIDEwKSAtIDE7XG4gICAgZGF5ID0gcGFyc2VJbnQoaW5mby5kYXksIDEwKTtcbiAgICBpZiAoaW5mby5ob3VyID09IG51bGwpIHtcbiAgICAgIGRhdGUgPSBuZXcgRGF0ZShEYXRlLlVUQyh5ZWFyLCBtb250aCwgZGF5KSk7XG4gICAgICByZXR1cm4gZGF0ZTtcbiAgICB9XG4gICAgaG91ciA9IHBhcnNlSW50KGluZm8uaG91ciwgMTApO1xuICAgIG1pbnV0ZSA9IHBhcnNlSW50KGluZm8ubWludXRlLCAxMCk7XG4gICAgc2Vjb25kID0gcGFyc2VJbnQoaW5mby5zZWNvbmQsIDEwKTtcbiAgICBpZiAoaW5mby5mcmFjdGlvbiAhPSBudWxsKSB7XG4gICAgICBmcmFjdGlvbiA9IGluZm8uZnJhY3Rpb24uc2xpY2UoMCwgMyk7XG4gICAgICB3aGlsZSAoZnJhY3Rpb24ubGVuZ3RoIDwgMykge1xuICAgICAgICBmcmFjdGlvbiArPSAnMCc7XG4gICAgICB9XG4gICAgICBmcmFjdGlvbiA9IHBhcnNlSW50KGZyYWN0aW9uLCAxMCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZyYWN0aW9uID0gMDtcbiAgICB9XG4gICAgaWYgKGluZm8udHogIT0gbnVsbCkge1xuICAgICAgdHpfaG91ciA9IHBhcnNlSW50KGluZm8udHpfaG91ciwgMTApO1xuICAgICAgaWYgKGluZm8udHpfbWludXRlICE9IG51bGwpIHtcbiAgICAgICAgdHpfbWludXRlID0gcGFyc2VJbnQoaW5mby50el9taW51dGUsIDEwKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHR6X21pbnV0ZSA9IDA7XG4gICAgICB9XG4gICAgICB0el9vZmZzZXQgPSAodHpfaG91ciAqIDYwICsgdHpfbWludXRlKSAqIDYwMDAwO1xuICAgICAgaWYgKCctJyA9PT0gaW5mby50el9zaWduKSB7XG4gICAgICAgIHR6X29mZnNldCAqPSAtMTtcbiAgICAgIH1cbiAgICB9XG4gICAgZGF0ZSA9IG5ldyBEYXRlKERhdGUuVVRDKHllYXIsIG1vbnRoLCBkYXksIGhvdXIsIG1pbnV0ZSwgc2Vjb25kLCBmcmFjdGlvbikpO1xuICAgIGlmICh0el9vZmZzZXQpIHtcbiAgICAgIGRhdGUuc2V0VGltZShkYXRlLmdldFRpbWUoKSArIHR6X29mZnNldCk7XG4gICAgfVxuICAgIHJldHVybiBkYXRlO1xuICB9O1xuXG4gIFV0aWxzLnN0clJlcGVhdCA9IGZ1bmN0aW9uKHN0ciwgbnVtYmVyKSB7XG4gICAgdmFyIGksIHJlcztcbiAgICByZXMgPSAnJztcbiAgICBpID0gMDtcbiAgICB3aGlsZSAoaSA8IG51bWJlcikge1xuICAgICAgcmVzICs9IHN0cjtcbiAgICAgIGkrKztcbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbiAgfTtcblxuICBVdGlscy5nZXRTdHJpbmdGcm9tRmlsZSA9IGZ1bmN0aW9uKHBhdGgsIGNhbGxiYWNrKSB7XG4gICAgdmFyIGRhdGEsIGZzLCBqLCBsZW4xLCBuYW1lLCByZWYsIHJlcSwgeGhyO1xuICAgIGlmIChjYWxsYmFjayA9PSBudWxsKSB7XG4gICAgICBjYWxsYmFjayA9IG51bGw7XG4gICAgfVxuICAgIHhociA9IG51bGw7XG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgJiYgd2luZG93ICE9PSBudWxsKSB7XG4gICAgICBpZiAod2luZG93LlhNTEh0dHBSZXF1ZXN0KSB7XG4gICAgICAgIHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICAgICAgfSBlbHNlIGlmICh3aW5kb3cuQWN0aXZlWE9iamVjdCkge1xuICAgICAgICByZWYgPSBbXCJNc3htbDIuWE1MSFRUUC42LjBcIiwgXCJNc3htbDIuWE1MSFRUUC4zLjBcIiwgXCJNc3htbDIuWE1MSFRUUFwiLCBcIk1pY3Jvc29mdC5YTUxIVFRQXCJdO1xuICAgICAgICBmb3IgKGogPSAwLCBsZW4xID0gcmVmLmxlbmd0aDsgaiA8IGxlbjE7IGorKykge1xuICAgICAgICAgIG5hbWUgPSByZWZbal07XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHhociA9IG5ldyBBY3RpdmVYT2JqZWN0KG5hbWUpO1xuICAgICAgICAgIH0gY2F0Y2ggKHVuZGVmaW5lZCkge31cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAoeGhyICE9IG51bGwpIHtcbiAgICAgIGlmIChjYWxsYmFjayAhPSBudWxsKSB7XG4gICAgICAgIHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICBpZiAoeGhyLnJlYWR5U3RhdGUgPT09IDQpIHtcbiAgICAgICAgICAgIGlmICh4aHIuc3RhdHVzID09PSAyMDAgfHwgeGhyLnN0YXR1cyA9PT0gMCkge1xuICAgICAgICAgICAgICByZXR1cm4gY2FsbGJhY2soeGhyLnJlc3BvbnNlVGV4dCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZXR1cm4gY2FsbGJhY2sobnVsbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB4aHIub3BlbignR0VUJywgcGF0aCwgdHJ1ZSk7XG4gICAgICAgIHJldHVybiB4aHIuc2VuZChudWxsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHhoci5vcGVuKCdHRVQnLCBwYXRoLCBmYWxzZSk7XG4gICAgICAgIHhoci5zZW5kKG51bGwpO1xuICAgICAgICBpZiAoeGhyLnN0YXR1cyA9PT0gMjAwIHx8IHhoci5zdGF0dXMgPT09IDApIHtcbiAgICAgICAgICByZXR1cm4geGhyLnJlc3BvbnNlVGV4dDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmVxID0gcmVxdWlyZTtcbiAgICAgIGZzID0gcmVxKCdmcycpO1xuICAgICAgaWYgKGNhbGxiYWNrICE9IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIGZzLnJlYWRGaWxlKHBhdGgsIGZ1bmN0aW9uKGVyciwgZGF0YSkge1xuICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhudWxsKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKFN0cmluZyhkYXRhKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRhdGEgPSBmcy5yZWFkRmlsZVN5bmMocGF0aCk7XG4gICAgICAgIGlmIChkYXRhICE9IG51bGwpIHtcbiAgICAgICAgICByZXR1cm4gU3RyaW5nKGRhdGEpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICByZXR1cm4gVXRpbHM7XG5cbn0pKCk7XG5cbm1vZHVsZS5leHBvcnRzID0gVXRpbHM7XG4iLCIvLyBHZW5lcmF0ZWQgYnkgQ29mZmVlU2NyaXB0IDEuMTAuMFxudmFyIER1bXBlciwgUGFyc2VyLCBVdGlscywgWWFtbDtcblxuUGFyc2VyID0gcmVxdWlyZSgnLi9QYXJzZXInKTtcblxuRHVtcGVyID0gcmVxdWlyZSgnLi9EdW1wZXInKTtcblxuVXRpbHMgPSByZXF1aXJlKCcuL1V0aWxzJyk7XG5cbllhbWwgPSAoZnVuY3Rpb24oKSB7XG4gIGZ1bmN0aW9uIFlhbWwoKSB7fVxuXG4gIFlhbWwucGFyc2UgPSBmdW5jdGlvbihpbnB1dCwgZXhjZXB0aW9uT25JbnZhbGlkVHlwZSwgb2JqZWN0RGVjb2Rlcikge1xuICAgIGlmIChleGNlcHRpb25PbkludmFsaWRUeXBlID09IG51bGwpIHtcbiAgICAgIGV4Y2VwdGlvbk9uSW52YWxpZFR5cGUgPSBmYWxzZTtcbiAgICB9XG4gICAgaWYgKG9iamVjdERlY29kZXIgPT0gbnVsbCkge1xuICAgICAgb2JqZWN0RGVjb2RlciA9IG51bGw7XG4gICAgfVxuICAgIHJldHVybiBuZXcgUGFyc2VyKCkucGFyc2UoaW5wdXQsIGV4Y2VwdGlvbk9uSW52YWxpZFR5cGUsIG9iamVjdERlY29kZXIpO1xuICB9O1xuXG4gIFlhbWwucGFyc2VGaWxlID0gZnVuY3Rpb24ocGF0aCwgY2FsbGJhY2ssIGV4Y2VwdGlvbk9uSW52YWxpZFR5cGUsIG9iamVjdERlY29kZXIpIHtcbiAgICB2YXIgaW5wdXQ7XG4gICAgaWYgKGNhbGxiYWNrID09IG51bGwpIHtcbiAgICAgIGNhbGxiYWNrID0gbnVsbDtcbiAgICB9XG4gICAgaWYgKGV4Y2VwdGlvbk9uSW52YWxpZFR5cGUgPT0gbnVsbCkge1xuICAgICAgZXhjZXB0aW9uT25JbnZhbGlkVHlwZSA9IGZhbHNlO1xuICAgIH1cbiAgICBpZiAob2JqZWN0RGVjb2RlciA9PSBudWxsKSB7XG4gICAgICBvYmplY3REZWNvZGVyID0gbnVsbDtcbiAgICB9XG4gICAgaWYgKGNhbGxiYWNrICE9IG51bGwpIHtcbiAgICAgIHJldHVybiBVdGlscy5nZXRTdHJpbmdGcm9tRmlsZShwYXRoLCAoZnVuY3Rpb24oX3RoaXMpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKGlucHV0KSB7XG4gICAgICAgICAgdmFyIHJlc3VsdDtcbiAgICAgICAgICByZXN1bHQgPSBudWxsO1xuICAgICAgICAgIGlmIChpbnB1dCAhPSBudWxsKSB7XG4gICAgICAgICAgICByZXN1bHQgPSBfdGhpcy5wYXJzZShpbnB1dCwgZXhjZXB0aW9uT25JbnZhbGlkVHlwZSwgb2JqZWN0RGVjb2Rlcik7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNhbGxiYWNrKHJlc3VsdCk7XG4gICAgICAgIH07XG4gICAgICB9KSh0aGlzKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlucHV0ID0gVXRpbHMuZ2V0U3RyaW5nRnJvbUZpbGUocGF0aCk7XG4gICAgICBpZiAoaW5wdXQgIT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wYXJzZShpbnB1dCwgZXhjZXB0aW9uT25JbnZhbGlkVHlwZSwgb2JqZWN0RGVjb2Rlcik7XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH07XG5cbiAgWWFtbC5kdW1wID0gZnVuY3Rpb24oaW5wdXQsIGlubGluZSwgaW5kZW50LCBleGNlcHRpb25PbkludmFsaWRUeXBlLCBvYmplY3RFbmNvZGVyKSB7XG4gICAgdmFyIHlhbWw7XG4gICAgaWYgKGlubGluZSA9PSBudWxsKSB7XG4gICAgICBpbmxpbmUgPSAyO1xuICAgIH1cbiAgICBpZiAoaW5kZW50ID09IG51bGwpIHtcbiAgICAgIGluZGVudCA9IDQ7XG4gICAgfVxuICAgIGlmIChleGNlcHRpb25PbkludmFsaWRUeXBlID09IG51bGwpIHtcbiAgICAgIGV4Y2VwdGlvbk9uSW52YWxpZFR5cGUgPSBmYWxzZTtcbiAgICB9XG4gICAgaWYgKG9iamVjdEVuY29kZXIgPT0gbnVsbCkge1xuICAgICAgb2JqZWN0RW5jb2RlciA9IG51bGw7XG4gICAgfVxuICAgIHlhbWwgPSBuZXcgRHVtcGVyKCk7XG4gICAgeWFtbC5pbmRlbnRhdGlvbiA9IGluZGVudDtcbiAgICByZXR1cm4geWFtbC5kdW1wKGlucHV0LCBpbmxpbmUsIDAsIGV4Y2VwdGlvbk9uSW52YWxpZFR5cGUsIG9iamVjdEVuY29kZXIpO1xuICB9O1xuXG4gIFlhbWwucmVnaXN0ZXIgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgcmVxdWlyZV9oYW5kbGVyO1xuICAgIHJlcXVpcmVfaGFuZGxlciA9IGZ1bmN0aW9uKG1vZHVsZSwgZmlsZW5hbWUpIHtcbiAgICAgIHJldHVybiBtb2R1bGUuZXhwb3J0cyA9IFlBTUwucGFyc2VGaWxlKGZpbGVuYW1lKTtcbiAgICB9O1xuICAgIGlmICgodHlwZW9mIHJlcXVpcmUgIT09IFwidW5kZWZpbmVkXCIgJiYgcmVxdWlyZSAhPT0gbnVsbCA/IHJlcXVpcmUuZXh0ZW5zaW9ucyA6IHZvaWQgMCkgIT0gbnVsbCkge1xuICAgICAgcmVxdWlyZS5leHRlbnNpb25zWycueW1sJ10gPSByZXF1aXJlX2hhbmRsZXI7XG4gICAgICByZXR1cm4gcmVxdWlyZS5leHRlbnNpb25zWycueWFtbCddID0gcmVxdWlyZV9oYW5kbGVyO1xuICAgIH1cbiAgfTtcblxuICBZYW1sLnN0cmluZ2lmeSA9IGZ1bmN0aW9uKGlucHV0LCBpbmxpbmUsIGluZGVudCwgZXhjZXB0aW9uT25JbnZhbGlkVHlwZSwgb2JqZWN0RW5jb2Rlcikge1xuICAgIHJldHVybiB0aGlzLmR1bXAoaW5wdXQsIGlubGluZSwgaW5kZW50LCBleGNlcHRpb25PbkludmFsaWRUeXBlLCBvYmplY3RFbmNvZGVyKTtcbiAgfTtcblxuICBZYW1sLmxvYWQgPSBmdW5jdGlvbihwYXRoLCBjYWxsYmFjaywgZXhjZXB0aW9uT25JbnZhbGlkVHlwZSwgb2JqZWN0RGVjb2Rlcikge1xuICAgIHJldHVybiB0aGlzLnBhcnNlRmlsZShwYXRoLCBjYWxsYmFjaywgZXhjZXB0aW9uT25JbnZhbGlkVHlwZSwgb2JqZWN0RGVjb2Rlcik7XG4gIH07XG5cbiAgcmV0dXJuIFlhbWw7XG5cbn0pKCk7XG5cbmlmICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiICYmIHdpbmRvdyAhPT0gbnVsbCkge1xuICB3aW5kb3cuWUFNTCA9IFlhbWw7XG59XG5cbmlmICh0eXBlb2Ygd2luZG93ID09PSBcInVuZGVmaW5lZFwiIHx8IHdpbmRvdyA9PT0gbnVsbCkge1xuICB0aGlzLllBTUwgPSBZYW1sO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFlhbWw7XG4iLCJpbXBvcnQgVEMgZnJvbSAnLi90YW5ncmFtJztcblxubW9kdWxlLmV4cG9ydHMgPSBUQztcbiIsImltcG9ydCBDQ1NTIGZyb20gJ3RhbmdyYW0tY2FydG9jc3MnO1xuaW1wb3J0IHlhbWwgZnJvbSAnLi95YW1sJztcblxudmFyIFNPVVJDRVMgPSB7XG4gICAgbWFwbmlrOiB7XG4gICAgICAgIHR5cGU6ICdNVlQnLFxuICAgICAgICB1cmw6IGZ1bmN0aW9uKCB1cmwgKSB7XG4gICAgICAgICAgICByZXR1cm4gdXJsLnJlcGxhY2UoJ3tsYXllckluZGV4ZXN9JywgJ21hcG5paycpLnJlcGxhY2UoJy5wbmcnLCAnLm12dCcpO1xuICAgICAgICB9XG4gICAgfVxufTtcblxudmFyIGdlbmVyYXRlU291cmNlcyA9IGZ1bmN0aW9uIGdlbmVyYXRlU291cmNlcyh1cmwpIHtcbiAgLy8gVE9ETzogbWFrZSB0aGlzIGR5bmFtaWMgaWYgaXQgaXMgbmVjY2Vzc2FyeVxuICB2YXIgc291cmNlID0gU09VUkNFU1snbWFwbmlrJ107XG5cbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBzb3VyY2UudHlwZSxcbiAgICB1cmw6IHNvdXJjZS51cmwoIHVybCApXG4gIH07XG59O1xuXG52YXIgVEMgPSBmdW5jdGlvbiAobWFwKSB7XG4gIHRoaXMuc2NlbmUgPSBUYW5ncmFtLmxlYWZsZXRMYXllcih7XG4gICAgc2NlbmU6IHlhbWwuZ2V0QmFzZUZpbGUoKVxuICB9KTtcbn07XG5cblRDLnByb3RvdHlwZSA9IHtcbiAgYWRkTGF5ZXI6IGZ1bmN0aW9uIChsYXllcikge1xuICAgIGxldCBseSA9IHtcbiAgICAgIGRhdGE6IHtcbiAgICAgICAgbGF5ZXI6IGxheWVyLmlkLFxuICAgICAgICBzb3VyY2U6ICdDYXJ0b0RCJ1xuICAgICAgfSxcbiAgICAgIGRyYXc6IENDU1MuY2FydG8yRHJhdyhsYXllci5tZXRhLmNhcnRvY3NzKVxuICAgIH07XG5cbiAgICB0aGlzLnNjZW5lLmNvbmZpZy5sYXllcnNbbGF5ZXIubGF5ZXJfbmFtZV0gPSBseTtcbiAgICB0aGlzLnNjZW5lLnVwZGF0ZUNvbmZpZygpO1xuICB9LFxuXG4gIGFkZERhdGFTb3VyY2U6IGZ1bmN0aW9uICh1cmwpIHtcbiAgICB0aGlzLnNjZW5lLnNldERhdGFTb3VyY2UoJ0NhcnRvREInLCBnZW5lcmF0ZVNvdXJjZXModXJsKSk7XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IFRDO1xuIiwibGV0IHlhbWxqcyA9IHJlcXVpcmUoJ3lhbWxqcycpO1xuXG5jb25zdCBTT1VSQ0VTID0ge1xuICAgIG1hcG5pazoge1xuICAgICAgICB0eXBlOiAnTVZUJyxcbiAgICAgICAgdXJsOiBmdW5jdGlvbiggdXJsICkge1xuICAgICAgICAgICAgcmV0dXJuIHVybC5yZXBsYWNlKCd7bGF5ZXJJbmRleGVzfScsICdtYXBuaWsnKS5yZXBsYWNlKCcucG5nJywgJy5tdnQnKTtcbiAgICAgICAgfVxuICAgIH1cbn07XG5cbmNvbnN0IGdldEJhc2VQcm9wZXJ0aWVzID0gZnVuY3Rpb24gZ2V0QmFzZVByb3BlcnRpZXMoKSB7XG4gIHJldHVybiB7XG4gICAgZ2xvYmFsOiB7XG4gICAgICBsYW5ndWFnZTogJ2VuJ1xuICAgIH0sXG5cbiAgICBjYW1lcmFzOiB7XG4gICAgICBwcmVzcGVjdGl2ZToge1xuICAgICAgICB0eXBlOiAncGVyc3BlY3RpdmUnLFxuICAgICAgICB2YW5pc2hpbmdfcG9pbnQ6IFsgJzAnLCAnLTI1MHB4JyBdLFxuICAgICAgICBhY3RpdmU6IGZhbHNlXG4gICAgICB9LFxuXG4gICAgICBpc29tZXRyaWM6IHtcbiAgICAgICAgdHlwZTogJ2lzb21ldHJpYycsXG4gICAgICAgIGF4aXM6IFsgMCwgMSBdLFxuICAgICAgICBhY3RpdmU6IHRydWVcbiAgICAgIH0sXG4gICAgICBmbGF0OiB7XG4gICAgICAgIHR5cGU6ICdmbGF0JyxcbiAgICAgICAgYWN0aXZlOiBmYWxzZVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBzY2VuZToge1xuICAgICAgYmFja2dyb3VuZDoge1xuICAgICAgICBjb2xvcjogJydcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgZm9udHM6IHtcbiAgICAgIE1vbnRzZXJyYXQ6IHtcbiAgICAgICAgdXJsOiAnaHR0cHM6Ly9mb250cy5nc3RhdGljLmNvbS9zL21vbnRzZXJyYXQvdjcvemhjei1fV2loalNRQzBvSEo5VENZTDNocHczcGd5MmdBaS1JcDdXUE1pMC53b2ZmJ1xuICAgICAgfVxuICAgIH0sXG5cbiAgICBzb3VyY2VzOiB7fSxcblxuICAgIGxheWVyczoge30sXG5cbiAgICBzdHlsZXM6IHt9XG4gIH07XG59O1xuXG5jb25zdCBnZW5lcmF0ZVlBTUwgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB5YW1sanMuc3RyaW5naWZ5KCBnZXRCYXNlUHJvcGVydGllcygpLCAzKTtcbn07XG5cbmNvbnN0IGdldEJhc2VGaWxlID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gVVJMLmNyZWF0ZU9iamVjdFVSTCggbmV3IEJsb2IoIFsgc3RyaW5nIF0gKSApO1xufTtcblxudmFyIHlhbWw7XG5leHBvcnQgZGVmYXVsdCB5YW1sID0ge1xuICBnZXRCYXNlRmlsZVxufTtcbiJdfQ==
